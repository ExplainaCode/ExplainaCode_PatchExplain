record_number,buggy_code,fixed_code,code_similarity
62001,"/** 
 * Constructor
 * @param swf
 * @param data Data bytes
 * @param version SWF version
 * @param pos
 * @throws IOException
 */
public GFxExporterInfoTag(SWF swf,byte[] data,int version,long pos) throws IOException {
  super(swf,ID,""String_Node_Str"",data,pos);
  SWFInputStream sis=new SWFInputStream(new ByteArrayInputStream(data),version);
  version=sis.readUI16();
  if (version >= 0x10a) {
    flags=sis.readUI32();
  }
  bitmapFormat=sis.readUI16();
  int prefixLen=sis.readUI8();
  prefix=sis.readBytes(prefixLen);
  int swfNameLen=sis.readUI8();
  swfName=new String(sis.readBytes(swfNameLen));
}","/** 
 * Constructor
 * @param swf
 * @param data Data bytes
 * @param version SWF version
 * @param pos
 * @throws IOException
 */
public GFxExporterInfoTag(SWF swf,byte[] data,int version,long pos) throws IOException {
  super(swf,ID,""String_Node_Str"",data,pos);
  SWFInputStream sis=new SWFInputStream(new ByteArrayInputStream(data),version);
  this.version=sis.readUI16();
  if (this.version >= 0x10a) {
    flags=sis.readUI32();
  }
  bitmapFormat=sis.readUI16();
  int prefixLen=sis.readUI8();
  prefix=sis.readBytes(prefixLen);
  int swfNameLen=sis.readUI8();
  swfName=new String(sis.readBytes(swfNameLen));
  if (sis.available() > 0) {
    codeOffsets=new ArrayList<>();
    int numCodeOffsets=sis.readUI16();
    for (int i=0; i < numCodeOffsets; i++) {
      codeOffsets.add(sis.readUI32());
    }
  }
}",0.854122621564482
62002,"public static File getCacheDirectory(){
  File profileDir=getProfileDirectory();
  File cacheDir=null;
  if (profileDir != null) {
    cacheDir=new File(profileDir,""String_Node_Str"");
  }
  if (!cacheDir.exists()) {
    return null;
  }
  return cacheDir;
}","public static File getCacheDirectory(){
  File profileDir=getProfileDirectory();
  File cacheDir=null;
  if (profileDir != null) {
    cacheDir=new File(profileDir,""String_Node_Str"");
  }
  if (cacheDir == null) {
    return null;
  }
  if (!cacheDir.exists()) {
    return null;
  }
  return cacheDir;
}",0.9162210338680928
62003,"@SuppressWarnings(""String_Node_Str"") private static boolean readActionListAtPos(List<DisassemblyListener> listeners,List<GraphTargetItem> output,HashMap<Long,List<GraphSourceItemContainer>> containers,long address,long containerSWFOffset,List<Object> localData,Stack<GraphTargetItem> stack,ConstantPool cpool,SWFInputStream sis,ReReadableInputStream rri,int ip,List<Action> ret,int startIp,int endip,String path,Map<Integer,Integer> visited,boolean indeterminate,Map<Integer,HashMap<String,GraphTargetItem>> decisionStates) throws IOException {
  boolean debugMode=false;
  boolean decideBranch=false;
  boolean deobfuscate=Configuration.getConfig(""String_Node_Str"",true);
  boolean retv=false;
  rri.setPos(ip);
  Action a;
  long filePos=rri.getPos();
  Scanner sc=new Scanner(System.in,""String_Node_Str"");
  int prevIp=ip;
  loopip:   while (((endip == -1) || (endip > ip)) && (a=sis.readAction(rri)) != null) {
    if (!visited.containsKey(ip)) {
      visited.put(ip,0);
    }
    int curVisited=visited.get(ip);
    curVisited++;
    visited.put(ip,curVisited);
    for (int i=0; i < listeners.size(); i++) {
      listeners.get(i).progress(""String_Node_Str"",rri.getCount(),rri.length());
    }
    if ((ip < ret.size()) && (!(ret.get(ip) instanceof ActionNop))) {
      a=ret.get(ip);
      if (a.getAddress() != ip) {
        Logger.getLogger(SWFInputStream.class.getName()).log(Level.SEVERE,""String_Node_Str"" + ip + ""String_Node_Str""+ a.getASMSource(new ArrayList<GraphSourceItem>(),new ArrayList<Long>(),new ArrayList<String>(),SWF.DEFAULT_VERSION,false));
      }
    }
    a.containerSWFOffset=containerSWFOffset;
    a.setAddress(prevIp,SWF.DEFAULT_VERSION,false);
    int info=a.actionLength + 1 + ((a.actionCode > 0x80) ? 2 : 0);
    byte b[]=a.getBytes(sis.version);
    int infoCorrect=info;
    if ((!(a instanceof ActionStore)) && (!(a instanceof GraphSourceItemContainer))) {
      int change=info - (rri.getPos() - ip);
      if (change > 0) {
        a.afterInsert=new ActionJump(change);
      }
    }
 else {
      info=rri.getPos() - ip;
    }
    if (ip < startIp) {
      retv=true;
    }
    if (a instanceof ActionPush) {
      if (cpool != null) {
        ((ActionPush)a).constantPool=cpool.constants;
        cpool.count++;
      }
    }
    if (a instanceof ActionDefineFunction) {
      if (cpool != null) {
        cpool.count++;
      }
    }
    if (a instanceof ActionDefineFunction2) {
      if (cpool != null) {
        cpool.count++;
      }
    }
    if (debugMode) {
      String atos=a.getASMSource(new ArrayList<GraphSourceItem>(),new ArrayList<Long>(),cpool.constants,sis.version,false);
      if (a instanceof GraphSourceItemContainer) {
        atos=a.toString();
      }
      System.err.println(""String_Node_Str"" + (ip - startIp) + ""String_Node_Str""+ Helper.formatAddress(ip - startIp)+ ""String_Node_Str""+ ""String_Node_Str""+ a.actionLength+ ""String_Node_Str""+ atos+ (a.isIgnored() ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ Helper.stackToString(stack,Helper.toList(cpool))+ ""String_Node_Str""+ Helper.byteArrToString(a.getBytes(SWF.DEFAULT_VERSION)));
      @SuppressWarnings(""String_Node_Str"") HashMap<String,GraphTargetItem> vars=(HashMap<String,GraphTargetItem>)localData.get(1);
      System.err.print(""String_Node_Str"");
      for (      Entry<String,GraphTargetItem> v : vars.entrySet()) {
        System.err.print(""String_Node_Str"" + v + ""String_Node_Str""+ v.getValue().toString(false,cpool)+ ""String_Node_Str"");
      }
      System.err.println();
      String add=""String_Node_Str"";
      if (a instanceof ActionIf) {
        add=""String_Node_Str"" + ((ActionIf)a).getJumpOffset();
      }
      if (a instanceof ActionJump) {
        add=""String_Node_Str"" + ((ActionJump)a).getJumpOffset();
      }
      System.err.println(add);
    }
    long newFilePos=rri.getPos();
    long actionLen=newFilePos - filePos;
    ensureCapacity(ret,ip);
    int newip=-1;
    if (a instanceof ActionConstantPool) {
      if (cpool == null) {
        cpool=new ConstantPool();
      }
      cpool.setNew(((ActionConstantPool)a).constantPool);
    }
    ActionIf aif=null;
    boolean goaif=false;
    if (!a.isIgnored()) {
      String varname=null;
      if (a instanceof StoreTypeAction) {
        StoreTypeAction sta=(StoreTypeAction)a;
        varname=sta.getVariableName(stack,cpool);
      }
      try {
        if (a instanceof ActionIf) {
          aif=(ActionIf)a;
          GraphTargetItem top=null;
          if (deobfuscate) {
            top=stack.pop();
          }
          int nip=rri.getPos() + aif.getJumpOffset();
          if (decideBranch) {
            System.out.print(""String_Node_Str"" + nip + ""String_Node_Str"");
            System.out.print(""String_Node_Str"");
            String next=sc.next();
            if (next.equals(""String_Node_Str"")) {
              newip=rri.getPos() + aif.getJumpOffset();
              rri.setPos(newip);
            }
 else             if (next.equals(""String_Node_Str"")) {
            }
 else             if (next.equals(""String_Node_Str"")) {
              goaif=true;
            }
          }
 else           if (deobfuscate && top.isCompileTime() && (!top.hasSideEffect())) {
            ((ActionIf)a).compileTime=true;
            if (debugMode) {
              System.err.print(""String_Node_Str"");
            }
            if (EcmaScript.toBoolean(top.getResult())) {
              newip=rri.getPos() + aif.getJumpOffset();
              aif.jumpUsed=true;
              if (aif.ignoreUsed) {
                aif.compileTime=false;
              }
              if (debugMode) {
                System.err.println(""String_Node_Str"");
              }
            }
 else {
              aif.ignoreUsed=true;
              if (aif.jumpUsed) {
                aif.compileTime=false;
              }
              if (debugMode) {
                System.err.println(""String_Node_Str"");
              }
            }
          }
 else {
            if (debugMode) {
              System.err.println(""String_Node_Str"");
            }
            goaif=true;
          }
        }
 else         if (a instanceof ActionJump) {
          newip=rri.getPos() + ((ActionJump)a).getJumpOffset();
        }
 else         if (!(a instanceof GraphSourceItemContainer)) {
          if (deobfuscate) {
            if (((a instanceof ActionEquals) || (a instanceof ActionEquals2)) && (stack.size() == 1) && (stack.peek() instanceof DirectValueActionItem)) {
              stack.push(new DirectValueActionItem(null,0,new Null(),new ArrayList<String>()));
            }
            if ((a instanceof ActionStoreRegister) && stack.isEmpty()) {
              stack.push(new DirectValueActionItem(null,0,new Null(),new ArrayList<String>()));
            }
            a.translate(localData,stack,output,Graph.SOP_USE_STATIC,path);
          }
        }
      }
 catch (      RuntimeException ex) {
        log.log(Level.SEVERE,""String_Node_Str"",ex);
        break;
      }
      HashMap<String,GraphTargetItem> vars=(HashMap<String,GraphTargetItem>)localData.get(1);
      if (varname != null) {
        GraphTargetItem varval=vars.get(varname);
        if (varval != null && varval.isCompileTime() && indeterminate) {
          vars.put(varname,new NotCompileTimeItem(null,varval));
        }
      }
    }
    int nopos=-1;
    for (int i=0; i < actionLen; i++) {
      ensureCapacity(ret,ip + i);
      if (a instanceof ActionNop) {
        int prevPos=(int)a.getAddress();
        a=new ActionNop();
        a.setAddress(prevPos,SWF.DEFAULT_VERSION);
        nopos++;
        if (nopos > 0) {
          a.setAddress(a.getAddress() + 1,SWF.DEFAULT_VERSION);
        }
      }
      ret.set(ip + i,a);
    }
    if (a instanceof GraphSourceItemContainer) {
      GraphSourceItemContainer cnt=(GraphSourceItemContainer)a;
      if (a instanceof Action) {
        long endAddr=a.getAddress() + cnt.getHeaderSize();
        String cntName=cnt.getName();
        List<List<GraphTargetItem>> output2s=new ArrayList<>();
        for (        long size : cnt.getContainerSizes()) {
          if (size == 0) {
            output2s.add(new ArrayList<GraphTargetItem>());
            continue;
          }
          List<Object> localData2;
          List<GraphTargetItem> output2=new ArrayList<>();
          if ((cnt instanceof ActionDefineFunction) || (cnt instanceof ActionDefineFunction2)) {
            localData2=Helper.toList(new HashMap<Integer,String>(),new HashMap<String,GraphTargetItem>(),new HashMap<String,GraphTargetItem>());
          }
 else {
            localData2=localData;
          }
          readActionListAtPos(listeners,output2,containers,address,containerSWFOffset,localData2,new Stack<GraphTargetItem>(),cpool,sis,rri,(int)endAddr,ret,startIp,(int)(endAddr + size),path + (cntName == null ? ""String_Node_Str"" : ""String_Node_Str"" + cntName),visited,indeterminate,decisionStates);
          output2s.add(output2);
          endAddr+=size;
        }
        if (deobfuscate) {
          cnt.translateContainer(output2s,stack,output,(HashMap<Integer,String>)localData.get(0),(HashMap<String,GraphTargetItem>)localData.get(1),(HashMap<String,GraphTargetItem>)localData.get(2));
        }
        ip=(int)endAddr;
        prevIp=ip;
        rri.setPos(ip);
        filePos=rri.getPos();
        continue;
      }
    }
    if (a instanceof ActionEnd) {
      break;
    }
    if (newip > -1) {
      ip=newip;
    }
 else {
      ip=ip + info;
    }
    rri.setPos(ip);
    filePos=rri.getPos();
    if (goaif) {
      aif.ignoreUsed=true;
      aif.jumpUsed=true;
      indeterminate=true;
      HashMap<String,GraphTargetItem> vars=(HashMap<String,GraphTargetItem>)localData.get(1);
      boolean stateChanged=false;
      if (decisionStates.containsKey(ip)) {
        HashMap<String,GraphTargetItem> oldstate=decisionStates.get(ip);
        if (oldstate.size() != vars.size()) {
          stateChanged=true;
        }
 else {
          for (          String k : vars.keySet()) {
            if (!oldstate.containsKey(k)) {
              stateChanged=true;
              break;
            }
            if (!vars.get(k).isCompileTime() && oldstate.get(k).isCompileTime()) {
              stateChanged=true;
              break;
            }
          }
        }
      }
      HashMap<String,GraphTargetItem> curstate=new HashMap<>();
      curstate.putAll(vars);
      decisionStates.put(ip,curstate);
      if ((!stateChanged) && curVisited > 1) {
        List<Integer> branches=new ArrayList<>();
        branches.add(rri.getPos() + aif.getJumpOffset());
        branches.add(rri.getPos());
        for (        int br : branches) {
          int visc=0;
          if (visited.containsKey(br)) {
            visc=visited.get(br);
          }
          if (visc == 0) {
            ip=br;
            prevIp=ip;
            rri.setPos(br);
            filePos=rri.getPos();
            continue loopip;
          }
        }
        break loopip;
      }
      int oldPos=rri.getPos();
      @SuppressWarnings(""String_Node_Str"") Stack<GraphTargetItem> substack=(Stack<GraphTargetItem>)stack.clone();
      if (readActionListAtPos(listeners,output,containers,address,containerSWFOffset,prepareLocalBranch(localData),substack,cpool,sis,rri,rri.getPos() + aif.getJumpOffset(),ret,startIp,endip,path,visited,indeterminate,decisionStates)) {
        retv=true;
      }
      rri.setPos(oldPos);
    }
    prevIp=ip;
    if (a.isExit()) {
      break;
    }
  }
  for (  DisassemblyListener listener : listeners) {
    listener.progress(""String_Node_Str"",rri.getCount(),rri.length());
  }
  return retv;
}","@SuppressWarnings(""String_Node_Str"") private static boolean readActionListAtPos(List<DisassemblyListener> listeners,List<GraphTargetItem> output,HashMap<Long,List<GraphSourceItemContainer>> containers,long containerSWFOffset,List<Object> localData,Stack<GraphTargetItem> stack,ConstantPool cpool,SWFInputStream sis,ReReadableInputStream rri,int ip,List<Action> ret,int startIp,int endip,String path,Map<Integer,Integer> visited,boolean indeterminate,Map<Integer,HashMap<String,GraphTargetItem>> decisionStates) throws IOException {
  boolean debugMode=false;
  boolean decideBranch=false;
  boolean deobfuscate=Configuration.getConfig(""String_Node_Str"",true);
  boolean retv=false;
  rri.setPos(ip);
  Action a;
  long filePos=rri.getPos();
  Scanner sc=new Scanner(System.in,""String_Node_Str"");
  int prevIp=ip;
  loopip:   while (((endip == -1) || (endip > ip)) && (a=sis.readAction(rri,cpool)) != null) {
    if (!visited.containsKey(ip)) {
      visited.put(ip,0);
    }
    int curVisited=visited.get(ip);
    curVisited++;
    visited.put(ip,curVisited);
    for (int i=0; i < listeners.size(); i++) {
      listeners.get(i).progress(""String_Node_Str"",rri.getCount(),rri.length());
    }
    if ((ip < ret.size()) && (!(ret.get(ip) instanceof ActionNop))) {
      a=ret.get(ip);
      if (a.getAddress() != ip) {
        Logger.getLogger(SWFInputStream.class.getName()).log(Level.SEVERE,""String_Node_Str"" + ip + ""String_Node_Str""+ a.getASMSource(new ArrayList<GraphSourceItem>(),new ArrayList<Long>(),new ArrayList<String>(),SWF.DEFAULT_VERSION,false));
      }
    }
    a.containerSWFOffset=containerSWFOffset;
    a.setAddress(prevIp,SWF.DEFAULT_VERSION,false);
    int info=a.actionLength + 1 + ((a.actionCode > 0x80) ? 2 : 0);
    byte b[]=a.getBytes(sis.version);
    int infoCorrect=info;
    if ((!(a instanceof ActionStore)) && (!(a instanceof GraphSourceItemContainer))) {
      int change=info - (rri.getPos() - ip);
      if (change > 0) {
        a.afterInsert=new ActionJump(change);
      }
    }
 else {
      info=rri.getPos() - ip;
    }
    if (ip < startIp) {
      retv=true;
    }
    if (a instanceof ActionPush) {
      if (cpool != null) {
        ((ActionPush)a).constantPool=cpool.constants;
        cpool.count++;
      }
    }
    if (a instanceof ActionDefineFunction) {
      if (cpool != null) {
        cpool.count++;
      }
    }
    if (a instanceof ActionDefineFunction2) {
      if (cpool != null) {
        cpool.count++;
      }
    }
    if (debugMode) {
      String atos=a.getASMSource(new ArrayList<GraphSourceItem>(),new ArrayList<Long>(),cpool.constants,sis.version,false);
      if (a instanceof GraphSourceItemContainer) {
        atos=a.toString();
      }
      System.err.println(""String_Node_Str"" + (ip - startIp) + ""String_Node_Str""+ Helper.formatAddress(ip - startIp)+ ""String_Node_Str""+ ""String_Node_Str""+ a.actionLength+ ""String_Node_Str""+ atos+ (a.isIgnored() ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ Helper.stackToString(stack,Helper.toList(cpool))+ ""String_Node_Str""+ Helper.byteArrToString(a.getBytes(SWF.DEFAULT_VERSION)));
      @SuppressWarnings(""String_Node_Str"") HashMap<String,GraphTargetItem> vars=(HashMap<String,GraphTargetItem>)localData.get(1);
      System.err.print(""String_Node_Str"");
      for (      Entry<String,GraphTargetItem> v : vars.entrySet()) {
        System.err.print(""String_Node_Str"" + v + ""String_Node_Str""+ v.getValue().toString(false,cpool)+ ""String_Node_Str"");
      }
      System.err.println();
      String add=""String_Node_Str"";
      if (a instanceof ActionIf) {
        add=""String_Node_Str"" + ((ActionIf)a).getJumpOffset();
      }
      if (a instanceof ActionJump) {
        add=""String_Node_Str"" + ((ActionJump)a).getJumpOffset();
      }
      System.err.println(add);
    }
    long newFilePos=rri.getPos();
    long actionLen=newFilePos - filePos;
    ensureCapacity(ret,ip);
    int newip=-1;
    if (a instanceof ActionConstantPool) {
      if (cpool == null) {
        cpool=new ConstantPool();
      }
      cpool.setNew(((ActionConstantPool)a).constantPool);
    }
    ActionIf aif=null;
    boolean goaif=false;
    if (!a.isIgnored()) {
      String varname=null;
      if (a instanceof StoreTypeAction) {
        StoreTypeAction sta=(StoreTypeAction)a;
        varname=sta.getVariableName(stack,cpool);
      }
      try {
        if (a instanceof ActionIf) {
          aif=(ActionIf)a;
          GraphTargetItem top=null;
          if (deobfuscate) {
            top=stack.pop();
          }
          int nip=rri.getPos() + aif.getJumpOffset();
          if (decideBranch) {
            System.out.print(""String_Node_Str"" + nip + ""String_Node_Str"");
            System.out.print(""String_Node_Str"");
            String next=sc.next();
            if (next.equals(""String_Node_Str"")) {
              newip=rri.getPos() + aif.getJumpOffset();
              rri.setPos(newip);
            }
 else             if (next.equals(""String_Node_Str"")) {
            }
 else             if (next.equals(""String_Node_Str"")) {
              goaif=true;
            }
          }
 else           if (deobfuscate && top.isCompileTime() && (!top.hasSideEffect())) {
            ((ActionIf)a).compileTime=true;
            if (debugMode) {
              System.err.print(""String_Node_Str"");
            }
            if (EcmaScript.toBoolean(top.getResult())) {
              newip=rri.getPos() + aif.getJumpOffset();
              aif.jumpUsed=true;
              if (aif.ignoreUsed) {
                aif.compileTime=false;
              }
              if (debugMode) {
                System.err.println(""String_Node_Str"");
              }
            }
 else {
              aif.ignoreUsed=true;
              if (aif.jumpUsed) {
                aif.compileTime=false;
              }
              if (debugMode) {
                System.err.println(""String_Node_Str"");
              }
            }
          }
 else {
            if (debugMode) {
              System.err.println(""String_Node_Str"");
            }
            goaif=true;
          }
        }
 else         if (a instanceof ActionJump) {
          newip=rri.getPos() + ((ActionJump)a).getJumpOffset();
        }
 else         if (!(a instanceof GraphSourceItemContainer)) {
          if (deobfuscate) {
            if (((a instanceof ActionEquals) || (a instanceof ActionEquals2)) && (stack.size() == 1) && (stack.peek() instanceof DirectValueActionItem)) {
              stack.push(new DirectValueActionItem(null,0,new Null(),new ArrayList<String>()));
            }
            if ((a instanceof ActionStoreRegister) && stack.isEmpty()) {
              stack.push(new DirectValueActionItem(null,0,new Null(),new ArrayList<String>()));
            }
            a.translate(localData,stack,output,Graph.SOP_USE_STATIC,path);
          }
        }
      }
 catch (      RuntimeException ex) {
        log.log(Level.SEVERE,""String_Node_Str"",ex);
        break;
      }
      HashMap<String,GraphTargetItem> vars=(HashMap<String,GraphTargetItem>)localData.get(1);
      if (varname != null) {
        GraphTargetItem varval=vars.get(varname);
        if (varval != null && varval.isCompileTime() && indeterminate) {
          vars.put(varname,new NotCompileTimeItem(null,varval));
        }
      }
    }
    int nopos=-1;
    for (int i=0; i < actionLen; i++) {
      ensureCapacity(ret,ip + i);
      if (a instanceof ActionNop) {
        int prevPos=(int)a.getAddress();
        a=new ActionNop();
        a.setAddress(prevPos,SWF.DEFAULT_VERSION);
        nopos++;
        if (nopos > 0) {
          a.setAddress(a.getAddress() + 1,SWF.DEFAULT_VERSION);
        }
      }
      ret.set(ip + i,a);
    }
    if (a instanceof GraphSourceItemContainer) {
      GraphSourceItemContainer cnt=(GraphSourceItemContainer)a;
      if (a instanceof Action) {
        long endAddr=a.getAddress() + cnt.getHeaderSize();
        String cntName=cnt.getName();
        List<List<GraphTargetItem>> output2s=new ArrayList<>();
        for (        long size : cnt.getContainerSizes()) {
          if (size == 0) {
            output2s.add(new ArrayList<GraphTargetItem>());
            continue;
          }
          List<Object> localData2;
          List<GraphTargetItem> output2=new ArrayList<>();
          if ((cnt instanceof ActionDefineFunction) || (cnt instanceof ActionDefineFunction2)) {
            localData2=Helper.toList(new HashMap<Integer,String>(),new HashMap<String,GraphTargetItem>(),new HashMap<String,GraphTargetItem>());
          }
 else {
            localData2=localData;
          }
          readActionListAtPos(listeners,output2,containers,containerSWFOffset,localData2,new Stack<GraphTargetItem>(),cpool,sis,rri,(int)endAddr,ret,startIp,(int)(endAddr + size),path + (cntName == null ? ""String_Node_Str"" : ""String_Node_Str"" + cntName),visited,indeterminate,decisionStates);
          output2s.add(output2);
          endAddr+=size;
        }
        if (deobfuscate) {
          cnt.translateContainer(output2s,stack,output,(HashMap<Integer,String>)localData.get(0),(HashMap<String,GraphTargetItem>)localData.get(1),(HashMap<String,GraphTargetItem>)localData.get(2));
        }
        ip=(int)endAddr;
        prevIp=ip;
        rri.setPos(ip);
        filePos=rri.getPos();
        continue;
      }
    }
    if (a instanceof ActionEnd) {
      break;
    }
    if (newip > -1) {
      ip=newip;
    }
 else {
      ip=ip + info;
    }
    rri.setPos(ip);
    filePos=rri.getPos();
    if (goaif) {
      aif.ignoreUsed=true;
      aif.jumpUsed=true;
      indeterminate=true;
      HashMap<String,GraphTargetItem> vars=(HashMap<String,GraphTargetItem>)localData.get(1);
      boolean stateChanged=false;
      if (decisionStates.containsKey(ip)) {
        HashMap<String,GraphTargetItem> oldstate=decisionStates.get(ip);
        if (oldstate.size() != vars.size()) {
          stateChanged=true;
        }
 else {
          for (          String k : vars.keySet()) {
            if (!oldstate.containsKey(k)) {
              stateChanged=true;
              break;
            }
            if (!vars.get(k).isCompileTime() && oldstate.get(k).isCompileTime()) {
              stateChanged=true;
              break;
            }
          }
        }
      }
      HashMap<String,GraphTargetItem> curstate=new HashMap<>();
      curstate.putAll(vars);
      decisionStates.put(ip,curstate);
      if ((!stateChanged) && curVisited > 1) {
        List<Integer> branches=new ArrayList<>();
        branches.add(rri.getPos() + aif.getJumpOffset());
        branches.add(rri.getPos());
        for (        int br : branches) {
          int visc=0;
          if (visited.containsKey(br)) {
            visc=visited.get(br);
          }
          if (visc == 0) {
            ip=br;
            prevIp=ip;
            rri.setPos(br);
            filePos=rri.getPos();
            continue loopip;
          }
        }
        break loopip;
      }
      int oldPos=rri.getPos();
      @SuppressWarnings(""String_Node_Str"") Stack<GraphTargetItem> substack=(Stack<GraphTargetItem>)stack.clone();
      if (readActionListAtPos(listeners,output,containers,containerSWFOffset,prepareLocalBranch(localData),substack,cpool,sis,rri,rri.getPos() + aif.getJumpOffset(),ret,startIp,endip,path,visited,indeterminate,decisionStates)) {
        retv=true;
      }
      rri.setPos(oldPos);
    }
    prevIp=ip;
    if (a.isExit()) {
      break;
    }
  }
  for (  DisassemblyListener listener : listeners) {
    listener.progress(""String_Node_Str"",rri.getCount(),rri.length());
  }
  return retv;
}",0.9984926138076576
62004,"/** 
 * Reads list of actions from the stream. Reading ends with ActionEndFlag(=0) or end of the stream.
 * @param listeners
 * @param address
 * @param ip
 * @param rri
 * @param version
 * @param containerSWFOffset
 * @param endip
 * @param path
 * @return List of actions
 * @throws IOException
 */
public static List<Action> readActionList(List<DisassemblyListener> listeners,long address,long containerSWFOffset,ReReadableInputStream rri,int version,int ip,int endip,String path) throws IOException {
  List<Action> retdups=new ArrayList<>();
  ConstantPool cpool=new ConstantPool();
  Stack<GraphTargetItem> stack=new Stack<>();
  List<Object> localData=Helper.toList(new HashMap<Integer,String>(),new HashMap<String,GraphTargetItem>(),new HashMap<String,GraphTargetItem>());
  SWFInputStream sis=new SWFInputStream(rri,version);
  boolean goesPrev=false;
  int method=1;
  goesPrev=readActionListAtPos(listeners,new ArrayList<GraphTargetItem>(),new HashMap<Long,List<GraphSourceItemContainer>>(),address,containerSWFOffset,localData,stack,cpool,sis,rri,ip,retdups,ip,endip,path,new HashMap<Integer,Integer>(),false,new HashMap<Integer,HashMap<String,GraphTargetItem>>());
  if (goesPrev) {
  }
 else {
    if (!retdups.isEmpty()) {
      for (int i=0; i < ip; i++) {
        retdups.remove(0);
      }
    }
  }
  List<Action> ret=new ArrayList<>();
  Action last=null;
  for (  Action a : retdups) {
    if (a != last) {
      ret.add(a);
    }
    last=a;
  }
  for (int i=0; i < retdups.size(); i++) {
    Action a=retdups.get(i);
    if (a instanceof ActionEnd) {
      if (i < retdups.size() - 1) {
        ActionJump jmp=new ActionJump(0);
        jmp.setJumpOffset(retdups.size() - i - jmp.getBytes(version).length);
        a.replaceWith=jmp;
      }
    }
  }
  List<ConstantPool> pools;
  ret=Action.removeNops(0,ret,version,0,path);
  pools=getConstantPool(listeners,new ActionGraphSource(ret,version,new HashMap<Integer,String>(),new HashMap<String,GraphTargetItem>(),new HashMap<String,GraphTargetItem>()),0,version,path);
  if (pools.size() == 1) {
    Action.setConstantPool(ret,pools.get(0));
  }
  if (goesPrev && (!DEOBFUSCATION_ALL_CODE_IN_PREVIOUS_TAG)) {
    ActionJump aj=new ActionJump(ip);
    int skip=aj.getBytes(version).length;
    for (    GraphSourceItem s : ret) {
      if (s instanceof Action) {
        Action a=(Action)s;
        a.setAddress(a.getAddress() + skip,version);
      }
    }
    ret.add(0,aj);
  }
  String s=null;
  List<Action> reta=new ArrayList<>();
  for (  Object o : ret) {
    if (o instanceof Action) {
      reta.add((Action)o);
    }
  }
  return reta;
}","/** 
 * Reads list of actions from the stream. Reading ends with ActionEndFlag(=0) or end of the stream.
 * @param listeners
 * @param address
 * @param ip
 * @param rri
 * @param version
 * @param containerSWFOffset
 * @param endip
 * @param path
 * @return List of actions
 * @throws IOException
 */
public static List<Action> readActionList(List<DisassemblyListener> listeners,long containerSWFOffset,ReReadableInputStream rri,int version,int ip,int endip,String path) throws IOException {
  List<Action> retdups=new ArrayList<>();
  ConstantPool cpool=new ConstantPool();
  Stack<GraphTargetItem> stack=new Stack<>();
  List<Object> localData=Helper.toList(new HashMap<Integer,String>(),new HashMap<String,GraphTargetItem>(),new HashMap<String,GraphTargetItem>());
  SWFInputStream sis=new SWFInputStream(rri,version);
  boolean goesPrev=false;
  int method=1;
  goesPrev=readActionListAtPos(listeners,new ArrayList<GraphTargetItem>(),new HashMap<Long,List<GraphSourceItemContainer>>(),containerSWFOffset,localData,stack,cpool,sis,rri,ip,retdups,ip,endip,path,new HashMap<Integer,Integer>(),false,new HashMap<Integer,HashMap<String,GraphTargetItem>>());
  if (goesPrev) {
  }
 else {
    if (!retdups.isEmpty()) {
      for (int i=0; i < ip; i++) {
        retdups.remove(0);
      }
    }
  }
  List<Action> ret=new ArrayList<>();
  Action last=null;
  for (  Action a : retdups) {
    if (a != last) {
      ret.add(a);
    }
    last=a;
  }
  for (int i=0; i < retdups.size(); i++) {
    Action a=retdups.get(i);
    if (a instanceof ActionEnd) {
      if (i < retdups.size() - 1) {
        ActionJump jmp=new ActionJump(0);
        jmp.setJumpOffset(retdups.size() - i - jmp.getBytes(version).length);
        a.replaceWith=jmp;
      }
    }
  }
  if (Configuration.getConfig(""String_Node_Str"",true)) {
    ret=Action.removeNops(0,ret,version,0,path);
  }
  if (goesPrev && (!DEOBFUSCATION_ALL_CODE_IN_PREVIOUS_TAG)) {
    ActionJump aj=new ActionJump(ip);
    int skip=aj.getBytes(version).length;
    for (    GraphSourceItem s : ret) {
      if (s instanceof Action) {
        Action a=(Action)s;
        a.setAddress(a.getAddress() + skip,version);
      }
    }
    ret.add(0,aj);
  }
  String s=null;
  List<Action> reta=new ArrayList<>();
  for (  Object o : ret) {
    if (o instanceof Action) {
      reta.add((Action)o);
    }
  }
  return reta;
}",0.927210747944656
62005,"/** 
 * Reads one Action from the stream
 * @param rri
 * @return Action or null when ActionEndFlag or end of the stream
 * @throws IOException
 */
public Action readAction(ReReadableInputStream rri) throws IOException {
{
    int actionCode=-1;
    try {
      actionCode=readUI8();
    }
 catch (    EndOfStreamException eos) {
      return null;
    }
    if (actionCode == 0) {
      return new ActionEnd();
    }
    if (actionCode == -1) {
      return null;
    }
    int actionLength=0;
    if (actionCode >= 0x80) {
      actionLength=readUI16();
    }
switch (actionCode) {
case 0x81:
      return new ActionGotoFrame(this);
case 0x83:
    return new ActionGetURL(actionLength,this,version);
case 0x04:
  return new ActionNextFrame();
case 0x05:
return new ActionPrevFrame();
case 0x06:
return new ActionPlay();
case 0x07:
return new ActionStop();
case 0x08:
return new ActionToggleQuality();
case 0x09:
return new ActionStopSounds();
case 0x8A:
return new ActionWaitForFrame(this);
case 0x8B:
return new ActionSetTarget(actionLength,this,version);
case 0x8C:
return new ActionGoToLabel(actionLength,this,version);
case 0x96:
return new ActionPush(actionLength,this,version);
case 0x17:
return new ActionPop();
case 0x0A:
return new ActionAdd();
case 0x0B:
return new ActionSubtract();
case 0x0C:
return new ActionMultiply();
case 0x0D:
return new ActionDivide();
case 0x0E:
return new ActionEquals();
case 0x0F:
return new ActionLess();
case 0x10:
return new ActionAnd();
case 0x11:
return new ActionOr();
case 0x12:
return new ActionNot();
case 0x13:
return new ActionStringEquals();
case 0x14:
return new ActionStringLength();
case 0x21:
return new ActionStringAdd();
case 0x15:
return new ActionStringExtract();
case 0x29:
return new ActionStringLess();
case 0x31:
return new ActionMBStringLength();
case 0x35:
return new ActionMBStringExtract();
case 0x18:
return new ActionToInteger();
case 0x32:
return new ActionCharToAscii();
case 0x33:
return new ActionAsciiToChar();
case 0x36:
return new ActionMBCharToAscii();
case 0x37:
return new ActionMBAsciiToChar();
case 0x99:
return new ActionJump(this);
case 0x9D:
return new ActionIf(this);
case 0x9E:
return new ActionCall();
case 0x1C:
return new ActionGetVariable();
case 0x1D:
return new ActionSetVariable();
case 0x9A:
return new ActionGetURL2(this);
case 0x9F:
return new ActionGotoFrame2(actionLength,this);
case 0x20:
return new ActionSetTarget2();
case 0x22:
return new ActionGetProperty();
case 0x23:
return new ActionSetProperty();
case 0x24:
return new ActionCloneSprite();
case 0x25:
return new ActionRemoveSprite();
case 0x27:
return new ActionStartDrag();
case 0x28:
return new ActionEndDrag();
case 0x8D:
return new ActionWaitForFrame2(this);
case 0x26:
return new ActionTrace();
case 0x34:
return new ActionGetTime();
case 0x30:
return new ActionRandomNumber();
case 0x3D:
return new ActionCallFunction();
case 0x52:
return new ActionCallMethod();
case 0x88:
return new ActionConstantPool(actionLength,this,version);
case 0x9B:
return new ActionDefineFunction(actionLength,this,rri,version);
case 0x3C:
return new ActionDefineLocal();
case 0x41:
return new ActionDefineLocal2();
case 0x3A:
return new ActionDelete();
case 0x3B:
return new ActionDelete2();
case 0x46:
return new ActionEnumerate();
case 0x49:
return new ActionEquals2();
case 0x4E:
return new ActionGetMember();
case 0x42:
return new ActionInitArray();
case 0x43:
return new ActionInitObject();
case 0x53:
return new ActionNewMethod();
case 0x40:
return new ActionNewObject();
case 0x4F:
return new ActionSetMember();
case 0x45:
return new ActionTargetPath();
case 0x94:
return new ActionWith(this,rri,version);
case 0x4A:
return new ActionToNumber();
case 0x4B:
return new ActionToString();
case 0x44:
return new ActionTypeOf();
case 0x47:
return new ActionAdd2();
case 0x48:
return new ActionLess2();
case 0x3F:
return new ActionModulo();
case 0x60:
return new ActionBitAnd();
case 0x63:
return new ActionBitLShift();
case 0x61:
return new ActionBitOr();
case 0x64:
return new ActionBitRShift();
case 0x65:
return new ActionBitURShift();
case 0x62:
return new ActionBitXor();
case 0x51:
return new ActionDecrement();
case 0x50:
return new ActionIncrement();
case 0x4C:
return new ActionPushDuplicate();
case 0x3E:
return new ActionReturn();
case 0x4D:
return new ActionStackSwap();
case 0x87:
return new ActionStoreRegister(this);
case 0x54:
return new ActionInstanceOf();
case 0x55:
return new ActionEnumerate2();
case 0x66:
return new ActionStrictEquals();
case 0x67:
return new ActionGreater();
case 0x68:
return new ActionStringGreater();
case 0x8E:
return new ActionDefineFunction2(actionLength,this,rri,version);
case 0x69:
return new ActionExtends();
case 0x2B:
return new ActionCastOp();
case 0x2C:
return new ActionImplementsOp();
case 0x8F:
return new ActionTry(actionLength,this,rri,version);
case 0x2A:
return new ActionThrow();
default :
Action r=new ActionNop();
r.actionCode=actionCode;
r.actionLength=actionLength;
return r;
}
}
}","/** 
 * Reads one Action from the stream
 * @param rri
 * @return Action or null when ActionEndFlag or end of the stream
 * @throws IOException
 */
public Action readAction(ReReadableInputStream rri,ConstantPool cpool) throws IOException {
{
    int actionCode=-1;
    try {
      actionCode=readUI8();
    }
 catch (    EndOfStreamException eos) {
      return null;
    }
    if (actionCode == 0) {
      return new ActionEnd();
    }
    if (actionCode == -1) {
      return null;
    }
    int actionLength=0;
    if (actionCode >= 0x80) {
      actionLength=readUI16();
    }
switch (actionCode) {
case 0x81:
      return new ActionGotoFrame(this);
case 0x83:
    return new ActionGetURL(actionLength,this,version);
case 0x04:
  return new ActionNextFrame();
case 0x05:
return new ActionPrevFrame();
case 0x06:
return new ActionPlay();
case 0x07:
return new ActionStop();
case 0x08:
return new ActionToggleQuality();
case 0x09:
return new ActionStopSounds();
case 0x8A:
return new ActionWaitForFrame(this,cpool);
case 0x8B:
return new ActionSetTarget(actionLength,this,version);
case 0x8C:
return new ActionGoToLabel(actionLength,this,version);
case 0x96:
return new ActionPush(actionLength,this,version);
case 0x17:
return new ActionPop();
case 0x0A:
return new ActionAdd();
case 0x0B:
return new ActionSubtract();
case 0x0C:
return new ActionMultiply();
case 0x0D:
return new ActionDivide();
case 0x0E:
return new ActionEquals();
case 0x0F:
return new ActionLess();
case 0x10:
return new ActionAnd();
case 0x11:
return new ActionOr();
case 0x12:
return new ActionNot();
case 0x13:
return new ActionStringEquals();
case 0x14:
return new ActionStringLength();
case 0x21:
return new ActionStringAdd();
case 0x15:
return new ActionStringExtract();
case 0x29:
return new ActionStringLess();
case 0x31:
return new ActionMBStringLength();
case 0x35:
return new ActionMBStringExtract();
case 0x18:
return new ActionToInteger();
case 0x32:
return new ActionCharToAscii();
case 0x33:
return new ActionAsciiToChar();
case 0x36:
return new ActionMBCharToAscii();
case 0x37:
return new ActionMBAsciiToChar();
case 0x99:
return new ActionJump(this);
case 0x9D:
return new ActionIf(this);
case 0x9E:
return new ActionCall();
case 0x1C:
return new ActionGetVariable();
case 0x1D:
return new ActionSetVariable();
case 0x9A:
return new ActionGetURL2(this);
case 0x9F:
return new ActionGotoFrame2(actionLength,this);
case 0x20:
return new ActionSetTarget2();
case 0x22:
return new ActionGetProperty();
case 0x23:
return new ActionSetProperty();
case 0x24:
return new ActionCloneSprite();
case 0x25:
return new ActionRemoveSprite();
case 0x27:
return new ActionStartDrag();
case 0x28:
return new ActionEndDrag();
case 0x8D:
return new ActionWaitForFrame2(this,cpool);
case 0x26:
return new ActionTrace();
case 0x34:
return new ActionGetTime();
case 0x30:
return new ActionRandomNumber();
case 0x3D:
return new ActionCallFunction();
case 0x52:
return new ActionCallMethod();
case 0x88:
return new ActionConstantPool(actionLength,this,version);
case 0x9B:
return new ActionDefineFunction(actionLength,this,rri,version);
case 0x3C:
return new ActionDefineLocal();
case 0x41:
return new ActionDefineLocal2();
case 0x3A:
return new ActionDelete();
case 0x3B:
return new ActionDelete2();
case 0x46:
return new ActionEnumerate();
case 0x49:
return new ActionEquals2();
case 0x4E:
return new ActionGetMember();
case 0x42:
return new ActionInitArray();
case 0x43:
return new ActionInitObject();
case 0x53:
return new ActionNewMethod();
case 0x40:
return new ActionNewObject();
case 0x4F:
return new ActionSetMember();
case 0x45:
return new ActionTargetPath();
case 0x94:
return new ActionWith(this,rri,version);
case 0x4A:
return new ActionToNumber();
case 0x4B:
return new ActionToString();
case 0x44:
return new ActionTypeOf();
case 0x47:
return new ActionAdd2();
case 0x48:
return new ActionLess2();
case 0x3F:
return new ActionModulo();
case 0x60:
return new ActionBitAnd();
case 0x63:
return new ActionBitLShift();
case 0x61:
return new ActionBitOr();
case 0x64:
return new ActionBitRShift();
case 0x65:
return new ActionBitURShift();
case 0x62:
return new ActionBitXor();
case 0x51:
return new ActionDecrement();
case 0x50:
return new ActionIncrement();
case 0x4C:
return new ActionPushDuplicate();
case 0x3E:
return new ActionReturn();
case 0x4D:
return new ActionStackSwap();
case 0x87:
return new ActionStoreRegister(this);
case 0x54:
return new ActionInstanceOf();
case 0x55:
return new ActionEnumerate2();
case 0x66:
return new ActionStrictEquals();
case 0x67:
return new ActionGreater();
case 0x68:
return new ActionStringGreater();
case 0x8E:
return new ActionDefineFunction2(actionLength,this,rri,version);
case 0x69:
return new ActionExtends();
case 0x2B:
return new ActionCastOp();
case 0x2C:
return new ActionImplementsOp();
case 0x8F:
return new ActionTry(actionLength,this,rri,version);
case 0x2A:
return new ActionThrow();
default :
Action r=new ActionNop();
r.actionCode=actionCode;
r.actionLength=actionLength;
return r;
}
}
}",0.9969064963576488
62006,"/** 
 * Converts list of actions to ASM source
 * @param listeners
 * @param address
 * @param list List of actions
 * @param importantOffsets List of important offsets to mark as labels
 * @param constantPool Constant pool
 * @param version SWF version
 * @param hex Add hexadecimal?
 * @param swfPos
 * @param path
 * @return ASM source as String
 */
private static String actionsToString(List<DisassemblyListener> listeners,long address,List<Action> list,List<Long> importantOffsets,List<String> constantPool,int version,boolean hex,boolean highlight,long swfPos,String path){
  long offset;
  if (importantOffsets == null) {
    importantOffsets=getActionsAllRefs(list,version);
  }
  List<ConstantPool> cps=SWFInputStream.getConstantPool(new ArrayList<DisassemblyListener>(),new ActionGraphSource(list,version,new HashMap<Integer,String>(),new HashMap<String,GraphTargetItem>(),new HashMap<String,GraphTargetItem>()),0,version,path);
  if (!cps.isEmpty()) {
    setConstantPool(list,cps.get(cps.size() - 1));
  }
  HashMap<Long,List<GraphSourceItemContainer>> containers=new HashMap<>();
  HashMap<GraphSourceItemContainer,Integer> containersPos=new HashMap<>();
  offset=address;
  int pos=-1;
  boolean lastPush=false;
  StringBuilder ret=new StringBuilder();
  for (  GraphSourceItem s : list) {
    for (int i=0; i < listeners.size(); i++) {
      listeners.get(i).progress(""String_Node_Str"",pos + 2,list.size());
    }
    Action a=null;
    if (s instanceof Action) {
      a=(Action)s;
    }
    pos++;
    if (hex) {
      if (lastPush) {
        ret.append(""String_Node_Str"");
        lastPush=false;
      }
      ret.append(""String_Node_Str"");
      ;
      ret.append(Helper.bytesToHexString(a.getBytes(version)));
      ret.append(""String_Node_Str"");
    }
    offset=a.getAddress();
    if ((!(a.isIgnored())) && (a instanceof GraphSourceItemContainer)) {
      GraphSourceItemContainer cnt=(GraphSourceItemContainer)a;
      containersPos.put(cnt,0);
      List<Long> sizes=cnt.getContainerSizes();
      long addr=((Action)cnt).getAddress() + cnt.getHeaderSize();
      for (      Long size : sizes) {
        addr+=size;
        if (size == 0) {
          continue;
        }
        if (!containers.containsKey(addr)) {
          containers.put(addr,new ArrayList<GraphSourceItemContainer>());
        }
        containers.get(addr).add(cnt);
      }
    }
    if (containers.containsKey(offset)) {
      for (int i=0; i < containers.get(offset).size(); i++) {
        ret.append(""String_Node_Str"");
        GraphSourceItemContainer cnt=containers.get(offset).get(i);
        int cntPos=containersPos.get(cnt);
        ret.append(cnt.getASMSourceBetween(cntPos));
        cntPos++;
        containersPos.put(cnt,cntPos);
      }
    }
    if (importantOffsets.contains(offset)) {
      if (lastPush) {
        ret.append(""String_Node_Str"");
        lastPush=false;
      }
      ret.append(""String_Node_Str"");
      ret.append(Helper.formatAddress(offset));
      ret.append(""String_Node_Str"");
    }
    if (a.replaceWith != null) {
      if (lastPush) {
        ret.append(""String_Node_Str"");
        lastPush=false;
      }
      ret.append(highlight ? Highlighting.hilighOffset(""String_Node_Str"",offset) : ""String_Node_Str"");
      ret.append(a.replaceWith.getASMSource(list,importantOffsets,constantPool,version,hex));
      ret.append(""String_Node_Str"");
    }
 else     if (a.isIgnored()) {
      if (lastPush) {
        ret.append(""String_Node_Str"");
        lastPush=false;
      }
      int len=0;
      if (pos + 1 < list.size()) {
        len=(int)(((Action)(list.get(pos + 1))).getAddress() - a.getAddress());
      }
 else {
        len=a.getBytes(version).length;
      }
      if (!(a instanceof ActionEnd)) {
        for (int i=0; i < len; i++) {
          ret.append(""String_Node_Str"");
        }
      }
    }
 else {
      if (a.beforeInsert != null) {
        if (lastPush) {
          ret.append(""String_Node_Str"");
          lastPush=false;
        }
        ret.append(a.beforeInsert.getASMSource(list,importantOffsets,constantPool,version,hex));
        ret.append(""String_Node_Str"");
      }
      String add=""String_Node_Str"";
      if (a instanceof ActionIf) {
        add=""String_Node_Str"" + ((ActionIf)a).getJumpOffset();
      }
      if (a instanceof ActionJump) {
        add=""String_Node_Str"" + ((ActionJump)a).getJumpOffset();
      }
      add=""String_Node_Str"" + Helper.formatAddress(offset) + add;
      add=""String_Node_Str"";
      if ((a instanceof ActionPush) && lastPush) {
        ret.append(""String_Node_Str"");
        ret.append(((ActionPush)a).paramsToStringReplaced(list,importantOffsets,constantPool,version,hex,highlight));
      }
 else {
        if (lastPush) {
          ret.append(""String_Node_Str"");
          lastPush=false;
        }
        ret.append(highlight ? Highlighting.hilighOffset(""String_Node_Str"",offset) : ""String_Node_Str"");
        if (a instanceof ActionIf) {
          ActionIf aif=(ActionIf)a;
          if (aif.jumpUsed && !aif.ignoreUsed) {
            aif.setFixBranch(0);
          }
          if (!aif.jumpUsed && aif.ignoreUsed) {
            aif.setFixBranch(1);
          }
        }
        int fixBranch=a.getFixBranch();
        if (fixBranch > -1) {
          if (a instanceof ActionIf) {
            ret.append(""String_Node_Str"");
            if (fixBranch == 0) {
              ret.append(""String_Node_Str"");
              ret.append(Helper.formatAddress(a.getAddress() + a.getBytes(version).length + ((ActionIf)a).getJumpOffset()));
            }
 else {
            }
          }
        }
 else {
          ret.append(a.getASMSourceReplaced(list,importantOffsets,constantPool,version,hex,highlight));
        }
        ret.append(a.isIgnored() ? ""String_Node_Str"" : ""String_Node_Str"");
        ret.append(add);
        ret.append((a instanceof ActionPush) ? ""String_Node_Str"" : ""String_Node_Str"");
      }
      if (a instanceof ActionPush) {
        lastPush=true;
      }
 else {
        lastPush=false;
      }
      if (a.afterInsert != null) {
        if (lastPush) {
          ret.append(""String_Node_Str"");
          lastPush=false;
        }
        ret.append(a.afterInsert.getASMSource(list,importantOffsets,constantPool,version,hex));
        ret.append(""String_Node_Str"");
      }
    }
    offset+=a.getBytes(version).length;
  }
  if (lastPush) {
    ret.append(""String_Node_Str"");
  }
  if (containers.containsKey(offset)) {
    for (int i=0; i < containers.get(offset).size(); i++) {
      ret.append(""String_Node_Str"");
      GraphSourceItemContainer cnt=containers.get(offset).get(i);
      int cntPos=containersPos.get(cnt);
      ret.append(cnt.getASMSourceBetween(cntPos));
      cntPos++;
      containersPos.put(cnt,cntPos);
    }
  }
  if (importantOffsets.contains(offset)) {
    ret.append(""String_Node_Str"");
    ret.append(Helper.formatAddress(offset));
    ret.append(""String_Node_Str"");
  }
  return ret.toString();
}","/** 
 * Converts list of actions to ASM source
 * @param listeners
 * @param address
 * @param list List of actions
 * @param importantOffsets List of important offsets to mark as labels
 * @param constantPool Constant pool
 * @param version SWF version
 * @param hex Add hexadecimal?
 * @param swfPos
 * @param path
 * @return ASM source as String
 */
private static String actionsToString(List<DisassemblyListener> listeners,long address,List<Action> list,List<Long> importantOffsets,List<String> constantPool,int version,boolean hex,boolean highlight,long swfPos,String path){
  long offset;
  if (importantOffsets == null) {
    importantOffsets=getActionsAllRefs(list,version);
  }
  HashMap<Long,List<GraphSourceItemContainer>> containers=new HashMap<>();
  HashMap<GraphSourceItemContainer,Integer> containersPos=new HashMap<>();
  offset=address;
  int pos=-1;
  boolean lastPush=false;
  StringBuilder ret=new StringBuilder();
  for (  GraphSourceItem s : list) {
    for (int i=0; i < listeners.size(); i++) {
      listeners.get(i).progress(""String_Node_Str"",pos + 2,list.size());
    }
    Action a=null;
    if (s instanceof Action) {
      a=(Action)s;
    }
    pos++;
    if (hex) {
      if (lastPush) {
        ret.append(""String_Node_Str"");
        lastPush=false;
      }
      ret.append(""String_Node_Str"");
      ;
      ret.append(Helper.bytesToHexString(a.getBytes(version)));
      ret.append(""String_Node_Str"");
    }
    offset=a.getAddress();
    if ((!(a.isIgnored())) && (a instanceof GraphSourceItemContainer)) {
      GraphSourceItemContainer cnt=(GraphSourceItemContainer)a;
      containersPos.put(cnt,0);
      List<Long> sizes=cnt.getContainerSizes();
      long addr=((Action)cnt).getAddress() + cnt.getHeaderSize();
      for (      Long size : sizes) {
        addr+=size;
        if (size == 0) {
          continue;
        }
        if (!containers.containsKey(addr)) {
          containers.put(addr,new ArrayList<GraphSourceItemContainer>());
        }
        containers.get(addr).add(cnt);
      }
    }
    if (containers.containsKey(offset)) {
      for (int i=0; i < containers.get(offset).size(); i++) {
        ret.append(""String_Node_Str"");
        GraphSourceItemContainer cnt=containers.get(offset).get(i);
        int cntPos=containersPos.get(cnt);
        ret.append(cnt.getASMSourceBetween(cntPos));
        cntPos++;
        containersPos.put(cnt,cntPos);
      }
    }
    if (importantOffsets.contains(offset)) {
      if (lastPush) {
        ret.append(""String_Node_Str"");
        lastPush=false;
      }
      ret.append(""String_Node_Str"");
      ret.append(Helper.formatAddress(offset));
      ret.append(""String_Node_Str"");
    }
    if (a.replaceWith != null) {
      if (lastPush) {
        ret.append(""String_Node_Str"");
        lastPush=false;
      }
      ret.append(highlight ? Highlighting.hilighOffset(""String_Node_Str"",offset) : ""String_Node_Str"");
      ret.append(a.replaceWith.getASMSource(list,importantOffsets,constantPool,version,hex));
      ret.append(""String_Node_Str"");
    }
 else     if (a.isIgnored()) {
      if (lastPush) {
        ret.append(""String_Node_Str"");
        lastPush=false;
      }
      int len=0;
      if (pos + 1 < list.size()) {
        len=(int)(((Action)(list.get(pos + 1))).getAddress() - a.getAddress());
      }
 else {
        len=a.getBytes(version).length;
      }
      if (!(a instanceof ActionEnd)) {
        for (int i=0; i < len; i++) {
          ret.append(""String_Node_Str"");
        }
      }
    }
 else {
      if (a.beforeInsert != null) {
        if (lastPush) {
          ret.append(""String_Node_Str"");
          lastPush=false;
        }
        ret.append(a.beforeInsert.getASMSource(list,importantOffsets,constantPool,version,hex));
        ret.append(""String_Node_Str"");
      }
      String add=""String_Node_Str"";
      if (a instanceof ActionIf) {
        add=""String_Node_Str"" + ((ActionIf)a).getJumpOffset();
      }
      if (a instanceof ActionJump) {
        add=""String_Node_Str"" + ((ActionJump)a).getJumpOffset();
      }
      add=""String_Node_Str"" + Helper.formatAddress(offset) + add;
      add=""String_Node_Str"";
      if ((a instanceof ActionPush) && lastPush) {
        ret.append(""String_Node_Str"");
        ret.append(((ActionPush)a).paramsToStringReplaced(list,importantOffsets,constantPool,version,hex,highlight));
      }
 else {
        if (lastPush) {
          ret.append(""String_Node_Str"");
          lastPush=false;
        }
        ret.append(highlight ? Highlighting.hilighOffset(""String_Node_Str"",offset) : ""String_Node_Str"");
        if (a instanceof ActionIf) {
          ActionIf aif=(ActionIf)a;
          if (aif.jumpUsed && !aif.ignoreUsed) {
            aif.setFixBranch(0);
          }
          if (!aif.jumpUsed && aif.ignoreUsed) {
            aif.setFixBranch(1);
          }
        }
        int fixBranch=a.getFixBranch();
        if (fixBranch > -1) {
          if (a instanceof ActionIf) {
            ret.append(""String_Node_Str"");
            if (fixBranch == 0) {
              ret.append(""String_Node_Str"");
              ret.append(Helper.formatAddress(a.getAddress() + a.getBytes(version).length + ((ActionIf)a).getJumpOffset()));
            }
 else {
            }
          }
        }
 else {
          ret.append(a.getASMSourceReplaced(list,importantOffsets,constantPool,version,hex,highlight));
        }
        ret.append(a.isIgnored() ? ""String_Node_Str"" : ""String_Node_Str"");
        ret.append(add);
        ret.append((a instanceof ActionPush) ? ""String_Node_Str"" : ""String_Node_Str"");
      }
      if (a instanceof ActionPush) {
        lastPush=true;
      }
 else {
        lastPush=false;
      }
      if (a.afterInsert != null) {
        if (lastPush) {
          ret.append(""String_Node_Str"");
          lastPush=false;
        }
        ret.append(a.afterInsert.getASMSource(list,importantOffsets,constantPool,version,hex));
        ret.append(""String_Node_Str"");
      }
    }
    offset+=a.getBytes(version).length;
  }
  if (lastPush) {
    ret.append(""String_Node_Str"");
  }
  if (containers.containsKey(offset)) {
    for (int i=0; i < containers.get(offset).size(); i++) {
      ret.append(""String_Node_Str"");
      GraphSourceItemContainer cnt=containers.get(offset).get(i);
      int cntPos=containersPos.get(cnt);
      ret.append(cnt.getASMSourceBetween(cntPos));
      cntPos++;
      containersPos.put(cnt,cntPos);
    }
  }
  if (importantOffsets.contains(offset)) {
    ret.append(""String_Node_Str"");
    ret.append(Helper.formatAddress(offset));
    ret.append(""String_Node_Str"");
  }
  return ret.toString();
}",0.9756456478551984
62007,"public static List<Action> removeNops(long address,List<Action> actions,int version,long swfPos,String path){
  List<Action> ret=actions;
  if (true) {
  }
  String s=null;
  try {
    s=Action.actionsToString(new ArrayList<DisassemblyListener>(),address,ret,null,version,false,false,swfPos,path);
    ret=ASMParser.parse(address,swfPos,true,new StringReader(s),SWF.DEFAULT_VERSION);
  }
 catch (  Exception ex) {
    Logger.getLogger(SWFInputStream.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
  }
  return ret;
}","public static List<Action> removeNops(long address,List<Action> actions,int version,long swfPos,String path){
  List<Action> ret=actions;
  if (true) {
  }
  String s=null;
  try {
    s=Action.actionsToString(new ArrayList<DisassemblyListener>(),address,ret,null,version,false,false,swfPos,path);
    ret=ASMParser.parse(address,swfPos,true,s,SWF.DEFAULT_VERSION);
  }
 catch (  Exception ex) {
    Logger.getLogger(SWFInputStream.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
  }
  return ret;
}",0.9806576402321084
62008,"public static List<Action> parse(long address,long containerSWFOffset,boolean ignoreNops,Reader is,int version) throws IOException, ParseException {
  FlasmLexer lexer=new FlasmLexer(is);
  List<Label> labels=new ArrayList<>();
  List<Action> ret=parse(containerSWFOffset,ignoreNops,labels,address,lexer,new ArrayList<String>(),version);
  List<Action> links=Action.getActionsAllIfsOrJumps(ret);
  for (  Action link : links) {
    boolean found=false;
    String identifier=null;
    if (link instanceof ActionJump) {
      identifier=((ActionJump)link).identifier;
      for (      Label label : labels) {
        if (((ActionJump)link).identifier.equals(label.name)) {
          ((ActionJump)link).setJumpOffset((int)(label.address - (((ActionJump)link).getAddress() + ((ActionJump)link).getBytes(version).length)));
          found=true;
          break;
        }
      }
    }
    if (link instanceof ActionIf) {
      identifier=((ActionIf)link).identifier;
      for (      Label label : labels) {
        if (((ActionIf)link).identifier.equals(label.name)) {
          ((ActionIf)link).setJumpOffset((int)(label.address - (((ActionIf)link).getAddress() + ((ActionIf)link).getBytes(version).length)));
          found=true;
          break;
        }
      }
    }
    if ((link instanceof ActionJump) || (link instanceof ActionIf)) {
      if (!found) {
        Logger.getLogger(ASMParser.class.getName()).log(Level.SEVERE,""String_Node_Str"" + identifier + ""String_Node_Str""+ Helper.formatAddress(link.getAddress()));
      }
    }
  }
  return ret;
}","public static List<Action> parse(long address,long containerSWFOffset,boolean ignoreNops,String source,int version) throws IOException, ParseException {
  FlasmLexer lexer=new FlasmLexer(new StringReader(source));
  List<Action> list=parseAllActions(lexer,version);
  List<String> constantPool=new ArrayList<>();
  for (  Action a : list) {
    if (a instanceof ActionConstantPool) {
      constantPool.addAll(((ActionConstantPool)a).constantPool);
    }
  }
  lexer=new FlasmLexer(new StringReader(source));
  List<Label> labels=new ArrayList<>();
  List<Action> ret=parse(containerSWFOffset,ignoreNops,labels,address,lexer,constantPool,version);
  List<Action> links=Action.getActionsAllIfsOrJumps(ret);
  for (  Action link : links) {
    boolean found=false;
    String identifier=null;
    if (link instanceof ActionJump) {
      identifier=((ActionJump)link).identifier;
      for (      Label label : labels) {
        if (((ActionJump)link).identifier.equals(label.name)) {
          ((ActionJump)link).setJumpOffset((int)(label.address - (((ActionJump)link).getAddress() + ((ActionJump)link).getBytes(version).length)));
          found=true;
          break;
        }
      }
    }
    if (link instanceof ActionIf) {
      identifier=((ActionIf)link).identifier;
      for (      Label label : labels) {
        if (((ActionIf)link).identifier.equals(label.name)) {
          ((ActionIf)link).setJumpOffset((int)(label.address - (((ActionIf)link).getAddress() + ((ActionIf)link).getBytes(version).length)));
          found=true;
          break;
        }
      }
    }
    if ((link instanceof ActionJump) || (link instanceof ActionIf)) {
      if (!found) {
        Logger.getLogger(ASMParser.class.getName()).log(Level.SEVERE,""String_Node_Str"" + identifier + ""String_Node_Str""+ Helper.formatAddress(link.getAddress()));
      }
    }
  }
  return ret;
}",0.8897316219369895
62009,"@Override public boolean parseDivision(int pos,long addr,FlasmLexer lexer){
  codeSize=(int)(addr - getAddress() - getHeaderSize());
  return false;
}","@Override public boolean parseDivision(long size,FlasmLexer lexer){
  codeSize=(int)(size - getHeaderSize());
  return false;
}",0.8664259927797834
62010,"public ActionDefineFunction(long containerSWFPos,boolean ignoreNops,List<Label> labels,long address,FlasmLexer lexer,List<String> constantPool,int version) throws IOException, ParseException {
  super(0x9B,-1);
  functionName=lexString(lexer);
  int numParams=(int)lexLong(lexer);
  for (int i=0; i < numParams; i++) {
    paramNames.add(lexString(lexer));
  }
  lexBlockOpen(lexer);
}","public ActionDefineFunction(FlasmLexer lexer) throws IOException, ParseException {
  super(0x9B,-1);
  functionName=lexString(lexer);
  int numParams=(int)lexLong(lexer);
  for (int i=0; i < numParams; i++) {
    paramNames.add(lexString(lexer));
  }
  lexBlockOpen(lexer);
}",0.7909090909090909
62011,"public ActionWith(long containerSWFPos,boolean ignoreNops,List<Label> labels,long address,FlasmLexer lexer,List<String> constantPool,int version) throws IOException, ParseException {
  super(0x94,2);
  lexBlockOpen(lexer);
}","public ActionWith(FlasmLexer lexer) throws IOException, ParseException {
  super(0x94,2);
  lexBlockOpen(lexer);
}",0.6745562130177515
62012,"@Override public boolean parseDivision(int pos,long addr,FlasmLexer lexer){
  codeSize=(int)(addr - getAddress() - getHeaderSize());
  return false;
}","@Override public boolean parseDivision(long size,FlasmLexer lexer){
  codeSize=(int)(size - getHeaderSize());
  return false;
}",0.8664259927797834
62013,"@Override public boolean parseDivision(int pos,long addr,FlasmLexer lexer){
  codeSize=(int)(addr - getAddress() - getHeaderSize());
  return false;
}","@Override public boolean parseDivision(long size,FlasmLexer lexer){
  codeSize=(int)(size - getHeaderSize());
  return false;
}",0.8664259927797834
62014,"public ActionDefineFunction2(long containerSWFPos,boolean ignoreNops,List<Label> labels,long address,FlasmLexer lexer,List<String> constantPool,int version) throws IOException, ParseException {
  super(0x8E,-1);
  functionName=lexString(lexer);
  int numParams=(int)lexLong(lexer);
  registerCount=(int)lexLong(lexer);
  preloadParentFlag=lexBoolean(lexer);
  preloadRootFlag=lexBoolean(lexer);
  suppressSuperFlag=lexBoolean(lexer);
  preloadSuperFlag=lexBoolean(lexer);
  suppressArgumentsFlag=lexBoolean(lexer);
  preloadArgumentsFlag=lexBoolean(lexer);
  suppressThisFlag=lexBoolean(lexer);
  preloadThisFlag=lexBoolean(lexer);
  preloadGlobalFlag=lexBoolean(lexer);
  for (int i=0; i < numParams; i++) {
    paramRegisters.add((int)lexLong(lexer));
    paramNames.add(lexString(lexer));
  }
  lexBlockOpen(lexer);
}","public ActionDefineFunction2(FlasmLexer lexer) throws IOException, ParseException {
  super(0x8E,-1);
  functionName=lexString(lexer);
  int numParams=(int)lexLong(lexer);
  registerCount=(int)lexLong(lexer);
  preloadParentFlag=lexBoolean(lexer);
  preloadRootFlag=lexBoolean(lexer);
  suppressSuperFlag=lexBoolean(lexer);
  preloadSuperFlag=lexBoolean(lexer);
  suppressArgumentsFlag=lexBoolean(lexer);
  preloadArgumentsFlag=lexBoolean(lexer);
  suppressThisFlag=lexBoolean(lexer);
  preloadThisFlag=lexBoolean(lexer);
  preloadGlobalFlag=lexBoolean(lexer);
  for (int i=0; i < numParams; i++) {
    paramRegisters.add((int)lexLong(lexer));
    paramNames.add(lexString(lexer));
  }
  lexBlockOpen(lexer);
}",0.9084967320261438
62015,"public ActionTry(long containerSWFPos,boolean ignoreNops,List<Label> labels,long address,FlasmLexer lexer,List<String> constantPool,int version) throws IOException, ParseException {
  super(0x8F,0);
  this.version=version;
  ASMParsedSymbol symb=lexer.yylex();
  if (symb.type == ASMParsedSymbol.TYPE_STRING) {
    catchInRegisterFlag=false;
    catchName=(String)symb.value;
  }
 else   if (symb.type == ASMParsedSymbol.TYPE_REGISTER) {
    catchRegister=((RegisterNumber)symb.value).number;
    catchInRegisterFlag=true;
  }
 else   if (symb.type == ASMParsedSymbol.TYPE_BLOCK_START) {
    return;
  }
 else {
    throw new ParseException(""String_Node_Str"",lexer.yyline());
  }
  lexBlockOpen(lexer);
}","public ActionTry(FlasmLexer lexer,int version) throws IOException, ParseException {
  super(0x8F,0);
  this.version=version;
  ASMParsedSymbol symb=lexer.yylex();
  if (symb.type == ASMParsedSymbol.TYPE_STRING) {
    catchInRegisterFlag=false;
    catchName=(String)symb.value;
  }
 else   if (symb.type == ASMParsedSymbol.TYPE_REGISTER) {
    catchRegister=((RegisterNumber)symb.value).number;
    catchInRegisterFlag=true;
  }
 else   if (symb.type == ASMParsedSymbol.TYPE_BLOCK_START) {
    return;
  }
 else {
    throw new ParseException(""String_Node_Str"",lexer.yyline());
  }
  lexBlockOpen(lexer);
}",0.9038167938931296
62016,"@Override public boolean parseDivision(int pos,long addr,FlasmLexer lexer){
  try {
    ASMParsedSymbol symb=lexer.yylex();
    if (symb.type == ASMParsedSymbol.TYPE_INSTRUCTION_NAME) {
      if (((String)symb.value).toLowerCase().equals(""String_Node_Str"")) {
        trySize=addr - getAddress() - getHeaderSize();
        catchBlockFlag=true;
        lexBlockOpen(lexer);
        return true;
      }
      if (symb.type == ASMParsedSymbol.TYPE_INSTRUCTION_NAME) {
        if (((String)symb.value).toLowerCase().equals(""String_Node_Str"")) {
          if (catchBlockFlag) {
            catchSize=addr - getAddress() - getHeaderSize()- trySize;
          }
 else {
            trySize=addr - getAddress() - getHeaderSize();
          }
          finallyBlockFlag=true;
          lexBlockOpen(lexer);
          return true;
        }
 else {
          lexer.yypushback(lexer.yylength());
        }
      }
 else {
        lexer.yypushback(lexer.yylength());
      }
    }
 else {
      lexer.yypushback(lexer.yylength());
    }
  }
 catch (  Exception ex) {
  }
  if (finallyBlockFlag) {
    finallySize=addr - getAddress() - getHeaderSize()- trySize- catchSize;
  }
 else   if (catchBlockFlag) {
    catchSize=addr - getAddress() - getHeaderSize()- trySize;
  }
  lexer.yybegin(0);
  return false;
}","@Override public boolean parseDivision(long size,FlasmLexer lexer){
  try {
    ASMParsedSymbol symb=lexer.yylex();
    if (symb.type == ASMParsedSymbol.TYPE_INSTRUCTION_NAME) {
      if (((String)symb.value).toLowerCase().equals(""String_Node_Str"")) {
        trySize=size - getHeaderSize();
        catchBlockFlag=true;
        lexBlockOpen(lexer);
        return true;
      }
      if (symb.type == ASMParsedSymbol.TYPE_INSTRUCTION_NAME) {
        if (((String)symb.value).toLowerCase().equals(""String_Node_Str"")) {
          if (catchBlockFlag) {
            catchSize=size - getHeaderSize() - trySize;
          }
 else {
            trySize=size - getHeaderSize();
          }
          finallyBlockFlag=true;
          lexBlockOpen(lexer);
          return true;
        }
 else {
          lexer.yypushback(lexer.yylength());
        }
      }
 else {
        lexer.yypushback(lexer.yylength());
      }
    }
 else {
      lexer.yypushback(lexer.yylength());
    }
  }
 catch (  Exception ex) {
  }
  if (finallyBlockFlag) {
    finallySize=size - getHeaderSize() - trySize- catchSize;
  }
 else   if (catchBlockFlag) {
    catchSize=size - getHeaderSize() - trySize;
  }
  lexer.yybegin(0);
  return false;
}",0.906200317965024
62017,"@Override public void actionPerformed(ActionEvent e){
  if (e.getActionCommand().equals(""String_Node_Str"")) {
    foundPos=0;
    searchPanel.setVisible(false);
    found=new ArrayList<>();
    searchFor=null;
  }
  if (e.getActionCommand().equals(""String_Node_Str"")) {
    foundPos--;
    if (foundPos < 0) {
      foundPos+=found.size();
    }
    updateSearchPos();
  }
  if (e.getActionCommand().equals(""String_Node_Str"")) {
    foundPos=(foundPos + 1) % found.size();
    updateSearchPos();
  }
  if (e.getActionCommand().equals(""String_Node_Str"")) {
    if (lastCode != null) {
      GraphFrame gf=new GraphFrame(new ActionGraph(lastCode,new HashMap<Integer,String>(),new HashMap<String,GraphTargetItem>(),new HashMap<String,GraphTargetItem>(),SWF.DEFAULT_VERSION),""String_Node_Str"");
      gf.setVisible(true);
    }
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    setEditMode(true);
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    setHex(hexButton.isSelected());
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    setEditMode(false);
    setHex(hexButton.isSelected());
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    try {
      src.setActions(ASMParser.parse(0,src.getPos(),true,new StringReader(editor.getText()),SWF.DEFAULT_VERSION),SWF.DEFAULT_VERSION);
      setSource(this.src,false);
      View.showMessageDialog(this,translate(""String_Node_Str""));
      saveButton.setVisible(false);
      cancelButton.setVisible(false);
      editButton.setVisible(true);
      editor.setEditable(false);
      editMode=false;
    }
 catch (    IOException ex) {
    }
catch (    ParseException ex) {
      View.showMessageDialog(this,translate(""String_Node_Str"").replace(""String_Node_Str"",ex.text).replace(""String_Node_Str"",""String_Node_Str"" + ex.line),translate(""String_Node_Str""),JOptionPane.ERROR_MESSAGE);
    }
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    setDecompiledEditMode(true);
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    setDecompiledEditMode(false);
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    try {
      ActionScriptParser par=new ActionScriptParser();
      src.setActions(par.actionsFromString(decompiledEditor.getText()),SWF.DEFAULT_VERSION);
      setSource(this.src,false);
      View.showMessageDialog(this,translate(""String_Node_Str""));
      setDecompiledEditMode(false);
    }
 catch (    IOException ex) {
      Logger.getLogger(ActionPanel.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
    }
catch (    ParseException ex) {
      View.showMessageDialog(this,translate(""String_Node_Str"").replace(""String_Node_Str"",ex.text).replace(""String_Node_Str"",""String_Node_Str"" + ex.line),translate(""String_Node_Str""),JOptionPane.ERROR_MESSAGE);
    }
  }
}","@Override public void actionPerformed(ActionEvent e){
  if (e.getActionCommand().equals(""String_Node_Str"")) {
    foundPos=0;
    searchPanel.setVisible(false);
    found=new ArrayList<>();
    searchFor=null;
  }
  if (e.getActionCommand().equals(""String_Node_Str"")) {
    foundPos--;
    if (foundPos < 0) {
      foundPos+=found.size();
    }
    updateSearchPos();
  }
  if (e.getActionCommand().equals(""String_Node_Str"")) {
    foundPos=(foundPos + 1) % found.size();
    updateSearchPos();
  }
  if (e.getActionCommand().equals(""String_Node_Str"")) {
    if (lastCode != null) {
      GraphFrame gf=new GraphFrame(new ActionGraph(lastCode,new HashMap<Integer,String>(),new HashMap<String,GraphTargetItem>(),new HashMap<String,GraphTargetItem>(),SWF.DEFAULT_VERSION),""String_Node_Str"");
      gf.setVisible(true);
    }
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    setEditMode(true);
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    setHex(hexButton.isSelected());
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    setEditMode(false);
    setHex(hexButton.isSelected());
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    try {
      src.setActions(ASMParser.parse(0,src.getPos(),true,editor.getText(),SWF.DEFAULT_VERSION),SWF.DEFAULT_VERSION);
      setSource(this.src,false);
      View.showMessageDialog(this,translate(""String_Node_Str""));
      saveButton.setVisible(false);
      cancelButton.setVisible(false);
      editButton.setVisible(true);
      editor.setEditable(false);
      editMode=false;
    }
 catch (    IOException ex) {
    }
catch (    ParseException ex) {
      View.showMessageDialog(this,translate(""String_Node_Str"").replace(""String_Node_Str"",ex.text).replace(""String_Node_Str"",""String_Node_Str"" + ex.line),translate(""String_Node_Str""),JOptionPane.ERROR_MESSAGE);
    }
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    setDecompiledEditMode(true);
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    setDecompiledEditMode(false);
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    try {
      ActionScriptParser par=new ActionScriptParser();
      src.setActions(par.actionsFromString(decompiledEditor.getText()),SWF.DEFAULT_VERSION);
      setSource(this.src,false);
      View.showMessageDialog(this,translate(""String_Node_Str""));
      setDecompiledEditMode(false);
    }
 catch (    IOException ex) {
      Logger.getLogger(ActionPanel.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
    }
catch (    ParseException ex) {
      View.showMessageDialog(this,translate(""String_Node_Str"").replace(""String_Node_Str"",ex.text).replace(""String_Node_Str"",""String_Node_Str"" + ex.line),translate(""String_Node_Str""),JOptionPane.ERROR_MESSAGE);
    }
  }
}",0.9968298696724198
62018,"/** 
 * Returns actions associated with this object
 * @param version Version
 * @return List of actions
 */
@Override public List<Action> getActions(int version){
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    int prevLength=0;
    if (previousTag != null) {
      byte prevData[]=previousTag.getData(version);
      baos.write(prevData);
      prevLength=prevData.length;
    }
    baos.write(actionBytes);
    ReReadableInputStream rri=new ReReadableInputStream(new ByteArrayInputStream(baos.toByteArray()));
    rri.setPos(prevLength);
    boolean deobfuscate=Configuration.getConfig(""String_Node_Str"",true);
    List<Action> list=SWFInputStream.readActionList(listeners,0,getPos() + hdrSize - prevLength,rri,version,prevLength,-1,toString());
    if (deobfuscate) {
      list=Action.removeNops(0,list,version,getPos() + hdrSize,toString());
    }
    return list;
  }
 catch (  Exception ex) {
    Logger.getLogger(DoActionTag.class.getName()).log(Level.SEVERE,null,ex);
    return new ArrayList<>();
  }
}","/** 
 * Returns actions associated with this object
 * @param version Version
 * @return List of actions
 */
@Override public List<Action> getActions(int version){
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    int prevLength=0;
    if (previousTag != null) {
      byte prevData[]=previousTag.getData(version);
      baos.write(prevData);
      prevLength=prevData.length;
    }
    baos.write(actionBytes);
    ReReadableInputStream rri=new ReReadableInputStream(new ByteArrayInputStream(baos.toByteArray()));
    rri.setPos(prevLength);
    boolean deobfuscate=Configuration.getConfig(""String_Node_Str"",true);
    List<Action> list=SWFInputStream.readActionList(listeners,getPos() + hdrSize - prevLength,rri,version,prevLength,-1,toString());
    if (deobfuscate) {
      list=Action.removeNops(0,list,version,getPos() + hdrSize,toString());
    }
    return list;
  }
 catch (  Exception ex) {
    Logger.getLogger(DoActionTag.class.getName()).log(Level.SEVERE,null,ex);
    return new ArrayList<>();
  }
}",0.999034749034749
62019,"@Override public List<Action> getActions(int version){
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    int prevLength=0;
    if (previousTag != null) {
      byte prevData[]=previousTag.getData(version);
      baos.write(prevData);
      prevLength=prevData.length;
      byte header[]=SWFOutputStream.getTagHeader(this,data,version);
      baos.write(header);
      prevLength+=header.length;
    }
    baos.write(actionBytes);
    ReReadableInputStream rri=new ReReadableInputStream(new ByteArrayInputStream(baos.toByteArray()));
    rri.setPos(prevLength);
    boolean deobfuscate=Configuration.getConfig(""String_Node_Str"",true);
    List<Action> list=SWFInputStream.readActionList(listeners,0,getPos() - prevLength,rri,version,prevLength,-1,toString());
    if (deobfuscate) {
      list=Action.removeNops(0,list,version,getPos(),toString());
    }
    return list;
  }
 catch (  Exception ex) {
    Logger.getLogger(DoActionTag.class.getName()).log(Level.SEVERE,null,ex);
    return new ArrayList<>();
  }
}","@Override public List<Action> getActions(int version){
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    int prevLength=0;
    if (previousTag != null) {
      byte prevData[]=previousTag.getData(version);
      baos.write(prevData);
      prevLength=prevData.length;
      byte header[]=SWFOutputStream.getTagHeader(this,data,version);
      baos.write(header);
      prevLength+=header.length;
    }
    baos.write(actionBytes);
    ReReadableInputStream rri=new ReReadableInputStream(new ByteArrayInputStream(baos.toByteArray()));
    rri.setPos(prevLength);
    boolean deobfuscate=Configuration.getConfig(""String_Node_Str"",true);
    List<Action> list=SWFInputStream.readActionList(listeners,getPos() - prevLength,rri,version,prevLength,-1,toString());
    if (deobfuscate) {
      list=Action.removeNops(0,list,version,getPos(),toString());
    }
    return list;
  }
 catch (  Exception ex) {
    Logger.getLogger(DoActionTag.class.getName()).log(Level.SEVERE,null,ex);
    return new ArrayList<>();
  }
}",0.9990338164251208
62020,"@Override public List<Action> getActions(int version){
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    int prevLength=0;
    if (previousTag != null) {
      byte prevData[]=previousTag.getData(version);
      baos.write(prevData);
      prevLength=prevData.length;
      baos.write(0);
      baos.write(0);
      prevLength+=2;
      byte header[]=SWFOutputStream.getTagHeader(this,data,version);
      baos.write(header);
      prevLength+=header.length;
    }
    baos.write(actionBytes);
    ReReadableInputStream rri=new ReReadableInputStream(new ByteArrayInputStream(baos.toByteArray()));
    rri.setPos(prevLength);
    boolean deobfuscate=Configuration.getConfig(""String_Node_Str"",true);
    List<Action> list=SWFInputStream.readActionList(listeners,0,getPos() + 2 - prevLength,rri,version,prevLength,-1,toString());
    if (deobfuscate) {
      list=Action.removeNops(0,list,version,getPos() + 2,toString());
    }
    return list;
  }
 catch (  Exception ex) {
    Logger.getLogger(DoActionTag.class.getName()).log(Level.SEVERE,null,ex);
    return new ArrayList<>();
  }
}","@Override public List<Action> getActions(int version){
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    int prevLength=0;
    if (previousTag != null) {
      byte prevData[]=previousTag.getData(version);
      baos.write(prevData);
      prevLength=prevData.length;
      baos.write(0);
      baos.write(0);
      prevLength+=2;
      byte header[]=SWFOutputStream.getTagHeader(this,data,version);
      baos.write(header);
      prevLength+=header.length;
    }
    baos.write(actionBytes);
    ReReadableInputStream rri=new ReReadableInputStream(new ByteArrayInputStream(baos.toByteArray()));
    rri.setPos(prevLength);
    boolean deobfuscate=Configuration.getConfig(""String_Node_Str"",true);
    List<Action> list=SWFInputStream.readActionList(listeners,getPos() + 2 - prevLength,rri,version,prevLength,-1,toString());
    if (deobfuscate) {
      list=Action.removeNops(0,list,version,getPos() + 2,toString());
    }
    return list;
  }
 catch (  Exception ex) {
    Logger.getLogger(DoActionTag.class.getName()).log(Level.SEVERE,null,ex);
    return new ArrayList<>();
  }
}",0.9990958408679927
62021,"/** 
 * Returns actions associated with this object
 * @param version Version
 * @return List of actions
 */
@Override public List<Action> getActions(int version){
  try {
    boolean deobfuscate=Configuration.getConfig(""String_Node_Str"",true);
    List<Action> list=SWFInputStream.readActionList(listeners,0,getPos() + 4,new ReReadableInputStream(new ByteArrayInputStream(actionBytes)),version,0,-1,toString());
    if (deobfuscate) {
      list=Action.removeNops(0,list,version,getPos() + 4,toString());
    }
    return list;
  }
 catch (  Exception ex) {
    Logger.getLogger(BUTTONCONDACTION.class.getName()).log(Level.SEVERE,null,ex);
    return new ArrayList<>();
  }
}","/** 
 * Returns actions associated with this object
 * @param version Version
 * @return List of actions
 */
@Override public List<Action> getActions(int version){
  try {
    boolean deobfuscate=Configuration.getConfig(""String_Node_Str"",true);
    List<Action> list=SWFInputStream.readActionList(listeners,getPos() + 4,new ReReadableInputStream(new ByteArrayInputStream(actionBytes)),version,0,-1,toString());
    if (deobfuscate) {
      list=Action.removeNops(0,list,version,getPos() + 4,toString());
    }
    return list;
  }
 catch (  Exception ex) {
    Logger.getLogger(BUTTONCONDACTION.class.getName()).log(Level.SEVERE,null,ex);
    return new ArrayList<>();
  }
}",0.9985185185185184
62022,"@Override public List<Action> getActions(int version){
  try {
    boolean deobfuscate=Configuration.getConfig(""String_Node_Str"",true);
    List<Action> list=SWFInputStream.readActionList(listeners,0,getPos() + hdrPos,new ReReadableInputStream(new ByteArrayInputStream(actionBytes)),version,0,-1,toString());
    if (deobfuscate) {
      list=Action.removeNops(0,list,version,getPos() + hdrPos,toString());
    }
    return list;
  }
 catch (  Exception ex) {
    Logger.getLogger(BUTTONCONDACTION.class.getName()).log(Level.SEVERE,null,ex);
    return new ArrayList<>();
  }
}","@Override public List<Action> getActions(int version){
  try {
    boolean deobfuscate=Configuration.getConfig(""String_Node_Str"",true);
    List<Action> list=SWFInputStream.readActionList(listeners,getPos() + hdrPos,new ReReadableInputStream(new ByteArrayInputStream(actionBytes)),version,0,-1,toString());
    if (deobfuscate) {
      list=Action.removeNops(0,list,version,getPos() + hdrPos,toString());
    }
    return list;
  }
 catch (  Exception ex) {
    Logger.getLogger(BUTTONCONDACTION.class.getName()).log(Level.SEVERE,null,ex);
    return new ArrayList<>();
  }
}",0.9982638888888888
62023,"public boolean parseDivision(int pos,long addr,FlasmLexer lexer);","public boolean parseDivision(long size,FlasmLexer lexer);",0.8688524590163934
62024,"@Test public void testModifiedConstantPools(){
  String actionsString=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try {
    List<Action> actions=ASMParser.parse(0,0,true,new StringReader(actionsString),swf.version);
    DoActionTag doa=getFirstActionTag();
    doa.setActionBytes(Action.actionsToBytes(actions,true,swf.version));
    String actualResult=Action.actionsToSource(doa.getActions(swf.version),swf.version,""String_Node_Str"",false);
    String decompiled=doa.getASMSource(swf.version,false,false);
    assertEquals(actualResult.trim(),""String_Node_Str"");
    assertTrue(decompiled.contains(""String_Node_Str""));
  }
 catch (  IOException ex) {
    fail();
  }
catch (  ParseException ex) {
    fail();
  }
}","@Test public void testModifiedConstantPools(){
  String actionsString=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try {
    List<Action> actions=ASMParser.parse(0,0,true,actionsString,swf.version);
    DoActionTag doa=getFirstActionTag();
    doa.setActionBytes(Action.actionsToBytes(actions,true,swf.version));
    String actualResult=Action.actionsToSource(doa.getActions(swf.version),swf.version,""String_Node_Str"",false);
    String decompiled=doa.getASMSource(swf.version,false,false);
    assertEquals(actualResult.trim(),""String_Node_Str"");
    assertTrue(decompiled.contains(""String_Node_Str""));
  }
 catch (  IOException ex) {
    fail();
  }
catch (  ParseException ex) {
    fail();
  }
}",0.9731379731379732
62025,"/** 
 * Reads one MORPHGRADIENT value from the stream
 * @return MORPHGRADIENT value
 * @throws IOException
 */
public MORPHGRADIENT readMORPHGRADIENT() throws IOException {
  MORPHGRADIENT ret=new MORPHGRADIENT();
  int numGradients=(int)readUI8();
  ret.gradientRecords=new MORPHGRADRECORD[numGradients];
  for (int i=0; i < numGradients; i++) {
    ret.gradientRecords[i]=readMORPHGRADRECORD();
  }
  return ret;
}","/** 
 * Reads one MORPHGRADIENT value from the stream
 * @return MORPHGRADIENT value
 * @throws IOException
 */
public MORPHGRADIENT readMORPHGRADIENT() throws IOException {
  MORPHGRADIENT ret=new MORPHGRADIENT();
  int numGradients=(int)readUI8();
  ret.numGradientsExtra=numGradients & 0xf0;
  numGradients=numGradients & 0x0f;
  ret.gradientRecords=new MORPHGRADRECORD[numGradients];
  for (int i=0; i < numGradients; i++) {
    ret.gradientRecords[i]=readMORPHGRADRECORD();
  }
  return ret;
}",0.9114754098360656
62026,"/** 
 * Writes MORPHGRADIENT value to the stream
 * @param value MORPHGRADIENT value
 * @param shapeNum 1 in DefineMorphShape, 2 in DefineMorphShape2,...
 * @throws IOException
 */
public void writeMORPHGRADIENT(MORPHGRADIENT value,int shapeNum) throws IOException {
  writeUI8(value.gradientRecords.length);
  for (int i=0; i < value.gradientRecords.length; i++) {
    writeMORPHGRADRECORD(value.gradientRecords[i]);
  }
}","/** 
 * Writes MORPHGRADIENT value to the stream
 * @param value MORPHGRADIENT value
 * @param shapeNum 1 in DefineMorphShape, 2 in DefineMorphShape2,...
 * @throws IOException
 */
public void writeMORPHGRADIENT(MORPHGRADIENT value,int shapeNum) throws IOException {
  writeUI8(value.gradientRecords.length + value.numGradientsExtra);
  for (int i=0; i < value.gradientRecords.length; i++) {
    writeMORPHGRADRECORD(value.gradientRecords[i]);
  }
}",0.970183486238532
62027,"@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  if (qName.equals(""String_Node_Str"")) {
    String href=attributes.getValue(""String_Node_Str"");
    if (href != null) {
      url=href;
    }
    String t=attributes.getValue(""String_Node_Str"");
    if (t != null) {
      target=t;
    }
  }
 else   if (qName.equals(""String_Node_Str"")) {
    bold=true;
  }
 else   if (qName.equals(""String_Node_Str"")) {
    italic=true;
  }
 else   if (qName.equals(""String_Node_Str"")) {
    underline=true;
  }
 else   if (qName.equals(""String_Node_Str"")) {
    li=true;
  }
 else   if (qName.equals(""String_Node_Str"")) {
    String a=attributes.getValue(""String_Node_Str"");
    if (a != null) {
      alignment=a;
    }
    if (!result.equals(""String_Node_Str"")) {
      putText(""String_Node_Str"");
    }
  }
 else   if (qName.equals(""String_Node_Str"")) {
    String ls=attributes.getValue(""String_Node_Str"");
    if (ls != null) {
      letterSpacing=Double.parseDouble(ls);
    }
    String s=attributes.getValue(""String_Node_Str"");
    if (s != null) {
      size=Integer.parseInt(s);
    }
    String c=attributes.getValue(""String_Node_Str"");
    if (c != null) {
      color=c;
    }
    String f=attributes.getValue(""String_Node_Str"");
    if (f != null) {
      for (      Tag t : tags) {
        if (t instanceof FontTag) {
          FontTag ft=(FontTag)t;
          String fontName=""String_Node_Str"";
          if (f.equals(ft.getFontName(tags))) {
            for (            Tag u : tags) {
              if (u instanceof DefineFontNameTag) {
                if (((DefineFontNameTag)u).fontId == ft.getFontId()) {
                  fontName=((DefineFontNameTag)u).fontName;
                }
              }
            }
            if (fontName == null) {
              fontName=ft.getFontName(tags);
            }
            fontFace=new Font(fontName,(italic ? Font.ITALIC : 0) | (bold ? Font.BOLD : 0) | (!italic && !bold ? Font.PLAIN : 0),size < 0 ? 10 : size).getPSName();
            break;
          }
        }
      }
    }
  }
}","@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  if (qName.equals(""String_Node_Str"")) {
    String href=attributes.getValue(""String_Node_Str"");
    if (href != null) {
      url=href;
    }
    String t=attributes.getValue(""String_Node_Str"");
    if (t != null) {
      target=t;
    }
  }
 else   if (qName.equals(""String_Node_Str"")) {
    bold=true;
  }
 else   if (qName.equals(""String_Node_Str"")) {
    italic=true;
  }
 else   if (qName.equals(""String_Node_Str"")) {
    underline=true;
  }
 else   if (qName.equals(""String_Node_Str"")) {
    li=true;
  }
 else   if (qName.equals(""String_Node_Str"")) {
    String a=attributes.getValue(""String_Node_Str"");
    if (a != null) {
      alignment=a;
    }
    if (!result.equals(""String_Node_Str"")) {
      putText(""String_Node_Str"");
    }
  }
 else   if (qName.equals(""String_Node_Str"")) {
    String ls=attributes.getValue(""String_Node_Str"");
    if (ls != null) {
      letterSpacing=Double.parseDouble(ls);
    }
    String s=attributes.getValue(""String_Node_Str"");
    if (s != null) {
      size=Integer.parseInt(s);
    }
    String c=attributes.getValue(""String_Node_Str"");
    if (c != null) {
      color=c;
    }
    String f=attributes.getValue(""String_Node_Str"");
    if (f != null) {
      for (      Tag t : tags) {
        if (t instanceof FontTag) {
          FontTag ft=(FontTag)t;
          String fontName=null;
          if (f.equals(ft.getFontName(tags))) {
            for (            Tag u : tags) {
              if (u instanceof DefineFontNameTag) {
                if (((DefineFontNameTag)u).fontId == ft.getFontId()) {
                  fontName=((DefineFontNameTag)u).fontName;
                }
              }
            }
            if (fontName == null) {
              fontName=ft.getFontName(tags);
            }
            fontFace=new Font(fontName,(italic ? Font.ITALIC : 0) | (bold ? Font.BOLD : 0) | (!italic && !bold ? Font.PLAIN : 0),size < 0 ? 10 : size).getPSName();
            break;
          }
        }
      }
    }
  }
}",0.995013061030634
62028,"@Override public void endDocument(){
}","@Override public void endDocument(){
  if (this.result.equals(""String_Node_Str"")) {
    putText(""String_Node_Str"");
  }
}",0.4779874213836478
62029,"public static String convertText(String instanceName,List<Tag> tags,TextTag tag,MATRIX matrix,List<FILTER> filters,CLIPACTIONS clipActions){
  String ret=""String_Node_Str"";
  if (matrix == null) {
    matrix=new MATRIX();
  }
  CSMTextSettingsTag csmts=null;
  String filterStr=""String_Node_Str"";
  if (filters != null) {
    filterStr+=""String_Node_Str"";
    for (    FILTER f : filters) {
      filterStr+=convertFilter(f);
    }
    filterStr+=""String_Node_Str"";
  }
  for (  Tag t : tags) {
    if (t instanceof CSMTextSettingsTag) {
      CSMTextSettingsTag c=(CSMTextSettingsTag)t;
      if (c.textID == tag.getCharacterId()) {
        csmts=c;
        break;
      }
    }
  }
  String fontRenderingMode=""String_Node_Str"";
  String antiAlias=""String_Node_Str"";
  if (csmts != null) {
    if (csmts.thickness == 0 & csmts.sharpness == 0) {
      fontRenderingMode=null;
    }
 else {
      fontRenderingMode=""String_Node_Str"";
    }
    antiAlias=""String_Node_Str"" + doubleToString(csmts.sharpness) + ""String_Node_Str""+ doubleToString(csmts.thickness)+ ""String_Node_Str"";
  }
  String matStr=""String_Node_Str"";
  matStr+=""String_Node_Str"";
  RECT bounds=tag.getBounds();
  if ((tag instanceof DefineTextTag) || (tag instanceof DefineText2Tag)) {
    MATRIX textMatrix=tag.getTextMatrix();
    matrix=matrix.merge(textMatrix);
  }
 else {
    matrix.translateX+=bounds.Xmin;
    matrix.translateY+=bounds.Ymin;
    matrix.translateX+=2 * 20;
    matrix.translateY+=2 * 20;
  }
  matStr+=convertMatrix(matrix);
  matStr+=""String_Node_Str"";
  if ((tag instanceof DefineTextTag) || (tag instanceof DefineText2Tag)) {
    List<TEXTRECORD> textRecords=new ArrayList<>();
    if (tag instanceof DefineTextTag) {
      textRecords=((DefineTextTag)tag).textRecords;
    }
 else     if (tag instanceof DefineText2Tag) {
      textRecords=((DefineText2Tag)tag).textRecords;
    }
    looprec:     for (    TEXTRECORD rec : textRecords) {
      if (rec.styleFlagsHasFont) {
        for (        Tag t : tags) {
          if (t instanceof FontTag) {
            FontTag ft=(FontTag)t;
            if (ft.getFontId() == rec.fontId) {
              if (ft.isSmall()) {
                fontRenderingMode=""String_Node_Str"";
                break looprec;
              }
            }
          }
        }
      }
    }
    ret+=""String_Node_Str"";
    if (fontRenderingMode != null) {
      ret+=""String_Node_Str"" + fontRenderingMode + ""String_Node_Str"";
    }
    if (instanceName != null) {
      ret+=""String_Node_Str"" + xmlString(instanceName) + ""String_Node_Str"";
    }
    ret+=antiAlias;
    Map<String,Object> attrs=TextTag.getTextRecordsAttributes(textRecords,tags);
    ret+=""String_Node_Str"" + tag.getBounds().getWidth() / 2 + ""String_Node_Str"" + tag.getBounds().getHeight() + ""String_Node_Str"";
    ret+=matStr;
    ret+=""String_Node_Str"";
    int fontId=-1;
    FontTag font=null;
    String fontName=null;
    String psFontName=null;
    String availableFonts[]=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
    int textHeight=-1;
    RGB textColor=null;
    RGBA textColorA=null;
    boolean newline=false;
    boolean firstRun=true;
    @SuppressWarnings(""String_Node_Str"") List<Integer> leftMargins=(List<Integer>)attrs.get(""String_Node_Str"");
    @SuppressWarnings(""String_Node_Str"") List<Integer> letterSpacings=(List<Integer>)attrs.get(""String_Node_Str"");
    for (int r=0; r < textRecords.size(); r++) {
      TEXTRECORD rec=textRecords.get(r);
      if (rec.styleFlagsHasColor) {
        if (tag instanceof DefineTextTag) {
          textColor=rec.textColor;
        }
 else {
          textColorA=rec.textColorA;
        }
      }
      if (rec.styleFlagsHasFont) {
        fontId=rec.fontId;
        fontName=null;
        textHeight=rec.textHeight;
        font=null;
        for (        Tag t : tags) {
          if (t instanceof FontTag) {
            if (((FontTag)t).getFontId() == fontId) {
              font=(FontTag)t;
            }
          }
          if (t instanceof DefineFontNameTag) {
            if (((DefineFontNameTag)t).fontId == fontId) {
              fontName=((DefineFontNameTag)t).fontName;
            }
          }
        }
        if ((fontName == null) && (font != null)) {
          fontName=font.getFontName(tags);
        }
        psFontName=fontName;
        if (fontName != null) {
          for (          String avFont : availableFonts) {
            if (avFont.equals(fontName)) {
              Font f=new Font(fontName,0,10);
              psFontName=f.getPSName();
            }
          }
        }
      }
      newline=false;
      if (!firstRun && rec.styleFlagsHasYOffset) {
        newline=true;
      }
      firstRun=false;
      if (font != null) {
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"" + xmlString((newline ? ""String_Node_Str"" : ""String_Node_Str"") + rec.getText(tags,font)) + ""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"" + twipToPixel(textHeight) + ""String_Node_Str""+ textHeight+ ""String_Node_Str"";
        ret+=""String_Node_Str"" + doubleToString(twipToPixel(letterSpacings.get(r))) + ""String_Node_Str"";
        ret+=""String_Node_Str"" + doubleToString(twipToPixel((int)attrs.get(""String_Node_Str""))) + ""String_Node_Str"";
        ret+=""String_Node_Str"" + doubleToString(twipToPixel(leftMargins.get(r))) + ""String_Node_Str"";
        ret+=""String_Node_Str"" + doubleToString(twipToPixel((int)attrs.get(""String_Node_Str""))) + ""String_Node_Str"";
        ret+=""String_Node_Str"" + doubleToString(twipToPixel((int)attrs.get(""String_Node_Str""))) + ""String_Node_Str"";
        if (textColor != null) {
          ret+=""String_Node_Str"" + textColor.toHexRGB() + ""String_Node_Str"";
        }
 else         if (textColorA != null) {
          ret+=""String_Node_Str"" + textColorA.toHexRGB() + ""String_Node_Str""+ textColorA.getAlphaFloat()+ ""String_Node_Str"";
        }
        ret+=""String_Node_Str"" + psFontName + ""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
      }
    }
    ret+=""String_Node_Str"";
    ret+=filterStr;
    ret+=""String_Node_Str"";
  }
 else   if (tag instanceof DefineEditTextTag) {
    DefineEditTextTag det=(DefineEditTextTag)tag;
    String tagName;
    for (    Tag t : tags) {
      if (t instanceof FontTag) {
        FontTag ft=(FontTag)t;
        if (ft.getFontId() == det.fontId) {
          if (ft.isSmall()) {
            fontRenderingMode=""String_Node_Str"";
            break;
          }
        }
      }
    }
    if (!det.useOutlines) {
      fontRenderingMode=""String_Node_Str"";
    }
    if (det.wasStatic) {
      tagName=""String_Node_Str"";
    }
 else     if (det.readOnly) {
      tagName=""String_Node_Str"";
    }
 else {
      tagName=""String_Node_Str"";
    }
    ret+=""String_Node_Str"" + tagName;
    if (fontRenderingMode != null) {
      ret+=""String_Node_Str"" + fontRenderingMode + ""String_Node_Str"";
    }
    if (instanceName != null) {
      ret+=""String_Node_Str"" + xmlString(instanceName) + ""String_Node_Str"";
    }
    ret+=antiAlias;
    double width=twipToPixel(bounds.getWidth());
    double height=twipToPixel(bounds.getHeight());
    double padding=2;
    width-=2 * padding;
    height-=2 * padding;
    if (det.hasLayout) {
      width-=twipToPixel(det.rightMargin);
      width-=twipToPixel(det.leftMargin);
    }
    ret+=""String_Node_Str"" + width + ""String_Node_Str"";
    ret+=""String_Node_Str"" + height + ""String_Node_Str"";
    if (det.border) {
      ret+=""String_Node_Str"";
    }
    if (det.html) {
      ret+=""String_Node_Str"";
    }
    if (det.noSelect) {
      ret+=""String_Node_Str"";
    }
    if (det.multiline && det.wordWrap) {
      ret+=""String_Node_Str"";
    }
 else     if (det.multiline && (!det.wordWrap)) {
      ret+=""String_Node_Str"";
    }
 else     if (det.password) {
      ret+=""String_Node_Str"";
    }
    if (det.hasMaxLength) {
      ret+=""String_Node_Str"" + det.maxLength + ""String_Node_Str"";
    }
    if (!det.variableName.equals(""String_Node_Str"")) {
      ret+=""String_Node_Str"" + det.variableName + ""String_Node_Str"";
    }
    ret+=""String_Node_Str"";
    ret+=matStr;
    ret+=""String_Node_Str"";
    if (det.hasText) {
      if (det.html) {
        ret+=convertHTMLText(tags,det,det.initialText);
      }
 else {
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"" + xmlString(det.initialText) + ""String_Node_Str"";
        int leftMargin=-1;
        int rightMargin=-1;
        int indent=-1;
        int lineSpacing=-1;
        String alignment=null;
        boolean italic=false;
        boolean bold=false;
        String fontFace=null;
        int size=-1;
        RGBA textColor=null;
        if (det.hasTextColor) {
          textColor=det.textColor;
        }
        if (det.hasFont) {
          String fontName=null;
          FontTag ft=null;
          for (          Tag u : tags) {
            if (u instanceof DefineFontNameTag) {
              if (((DefineFontNameTag)u).fontId == det.fontId) {
                fontName=((DefineFontNameTag)u).fontName;
              }
            }
            if (u instanceof FontTag) {
              if (((FontTag)u).getFontId() == det.fontId) {
                ft=(FontTag)u;
              }
            }
            if (fontName != null && ft != null) {
              break;
            }
          }
          if (ft != null) {
            if (fontName == null) {
              fontName=ft.getFontName(tags);
            }
            italic=ft.isItalic();
            bold=ft.isBold();
            size=det.fontHeight;
            fontFace=new Font(fontName,(italic ? Font.ITALIC : 0) | (bold ? Font.BOLD : 0) | (!italic && !bold ? Font.PLAIN : 0),size < 0 ? 10 : size).getPSName();
          }
        }
        if (det.hasLayout) {
          leftMargin=det.leftMargin;
          rightMargin=det.rightMargin;
          indent=det.indent;
          lineSpacing=det.leading;
          String alignNames[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
          alignment=alignNames[det.align];
        }
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        if (alignment != null) {
          ret+=""String_Node_Str"" + alignment + ""String_Node_Str"";
        }
        ret+=""String_Node_Str"";
        if (indent > -1) {
          ret+=""String_Node_Str"" + twipToPixel(indent) + ""String_Node_Str"";
        }
        if (leftMargin > -1) {
          ret+=""String_Node_Str"" + twipToPixel(leftMargin) + ""String_Node_Str"";
        }
        if (lineSpacing > -1) {
          ret+=""String_Node_Str"" + twipToPixel(lineSpacing) + ""String_Node_Str"";
        }
        if (rightMargin > -1) {
          ret+=""String_Node_Str"" + twipToPixel(rightMargin) + ""String_Node_Str"";
        }
        if (size > -1) {
          ret+=""String_Node_Str"" + twipToPixel(size) + ""String_Node_Str"";
          ret+=""String_Node_Str"" + size + ""String_Node_Str"";
        }
        if (fontFace != null) {
          ret+=""String_Node_Str"" + fontFace + ""String_Node_Str"";
        }
        if (textColor != null) {
          ret+=""String_Node_Str"" + textColor.toHexRGB() + ""String_Node_Str""+ textColor.getAlphaFloat()+ ""String_Node_Str"";
        }
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
      }
    }
    ret+=""String_Node_Str"";
    ret+=filterStr;
    ret+=""String_Node_Str"" + tagName + ""String_Node_Str"";
  }
  return ret;
}","public static String convertText(String instanceName,List<Tag> tags,TextTag tag,MATRIX matrix,List<FILTER> filters,CLIPACTIONS clipActions){
  String ret=""String_Node_Str"";
  if (matrix == null) {
    matrix=new MATRIX();
  }
  CSMTextSettingsTag csmts=null;
  String filterStr=""String_Node_Str"";
  if (filters != null) {
    filterStr+=""String_Node_Str"";
    for (    FILTER f : filters) {
      filterStr+=convertFilter(f);
    }
    filterStr+=""String_Node_Str"";
  }
  for (  Tag t : tags) {
    if (t instanceof CSMTextSettingsTag) {
      CSMTextSettingsTag c=(CSMTextSettingsTag)t;
      if (c.textID == tag.getCharacterId()) {
        csmts=c;
        break;
      }
    }
  }
  String fontRenderingMode=""String_Node_Str"";
  String antiAlias=""String_Node_Str"";
  if (csmts != null) {
    if (csmts.thickness == 0 & csmts.sharpness == 0) {
      fontRenderingMode=null;
    }
 else {
      fontRenderingMode=""String_Node_Str"";
    }
    antiAlias=""String_Node_Str"" + doubleToString(csmts.sharpness) + ""String_Node_Str""+ doubleToString(csmts.thickness)+ ""String_Node_Str"";
  }
  String matStr=""String_Node_Str"";
  matStr+=""String_Node_Str"";
  RECT bounds=tag.getBounds();
  if ((tag instanceof DefineTextTag) || (tag instanceof DefineText2Tag)) {
    MATRIX textMatrix=tag.getTextMatrix();
    matrix=matrix.merge(textMatrix);
  }
 else {
    matrix.translateX+=bounds.Xmin;
    matrix.translateY+=bounds.Ymin;
    matrix.translateX+=2 * 20;
    matrix.translateY+=2 * 20;
  }
  matStr+=convertMatrix(matrix);
  matStr+=""String_Node_Str"";
  if ((tag instanceof DefineTextTag) || (tag instanceof DefineText2Tag)) {
    List<TEXTRECORD> textRecords=new ArrayList<>();
    if (tag instanceof DefineTextTag) {
      textRecords=((DefineTextTag)tag).textRecords;
    }
 else     if (tag instanceof DefineText2Tag) {
      textRecords=((DefineText2Tag)tag).textRecords;
    }
    looprec:     for (    TEXTRECORD rec : textRecords) {
      if (rec.styleFlagsHasFont) {
        for (        Tag t : tags) {
          if (t instanceof FontTag) {
            FontTag ft=(FontTag)t;
            if (ft.getFontId() == rec.fontId) {
              if (ft.isSmall()) {
                fontRenderingMode=""String_Node_Str"";
                break looprec;
              }
            }
          }
        }
      }
    }
    ret+=""String_Node_Str"";
    if (fontRenderingMode != null) {
      ret+=""String_Node_Str"" + fontRenderingMode + ""String_Node_Str"";
    }
    if (instanceName != null) {
      ret+=""String_Node_Str"" + xmlString(instanceName) + ""String_Node_Str"";
    }
    ret+=antiAlias;
    Map<String,Object> attrs=TextTag.getTextRecordsAttributes(textRecords,tags);
    ret+=""String_Node_Str"" + tag.getBounds().getWidth() / 2 + ""String_Node_Str"" + tag.getBounds().getHeight() + ""String_Node_Str"";
    ret+=matStr;
    ret+=""String_Node_Str"";
    int fontId=-1;
    FontTag font=null;
    String fontName=null;
    String psFontName=null;
    String availableFonts[]=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
    int textHeight=-1;
    RGB textColor=null;
    RGBA textColorA=null;
    boolean newline=false;
    boolean firstRun=true;
    @SuppressWarnings(""String_Node_Str"") List<Integer> leftMargins=(List<Integer>)attrs.get(""String_Node_Str"");
    @SuppressWarnings(""String_Node_Str"") List<Integer> letterSpacings=(List<Integer>)attrs.get(""String_Node_Str"");
    for (int r=0; r < textRecords.size(); r++) {
      TEXTRECORD rec=textRecords.get(r);
      if (rec.styleFlagsHasColor) {
        if (tag instanceof DefineTextTag) {
          textColor=rec.textColor;
        }
 else {
          textColorA=rec.textColorA;
        }
      }
      if (rec.styleFlagsHasFont) {
        fontId=rec.fontId;
        fontName=null;
        textHeight=rec.textHeight;
        font=null;
        for (        Tag t : tags) {
          if (t instanceof FontTag) {
            if (((FontTag)t).getFontId() == fontId) {
              font=(FontTag)t;
            }
          }
          if (t instanceof DefineFontNameTag) {
            if (((DefineFontNameTag)t).fontId == fontId) {
              fontName=((DefineFontNameTag)t).fontName;
            }
          }
        }
        if ((fontName == null) && (font != null)) {
          fontName=font.getFontName(tags);
        }
        int fontStyle=0;
        if (font != null) {
          fontStyle=font.getFontStyle();
        }
        String installedFont;
        if ((installedFont=FontTag.isFontInstalled(fontName)) != null) {
          psFontName=new Font(installedFont,fontStyle,10).getPSName();
        }
 else {
          psFontName=fontName;
        }
      }
      newline=false;
      if (!firstRun && rec.styleFlagsHasYOffset) {
        newline=true;
      }
      firstRun=false;
      if (font != null) {
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"" + xmlString((newline ? ""String_Node_Str"" : ""String_Node_Str"") + rec.getText(tags,font)) + ""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"" + twipToPixel(textHeight) + ""String_Node_Str""+ textHeight+ ""String_Node_Str"";
        ret+=""String_Node_Str"" + doubleToString(twipToPixel(letterSpacings.get(r))) + ""String_Node_Str"";
        ret+=""String_Node_Str"" + doubleToString(twipToPixel((int)attrs.get(""String_Node_Str""))) + ""String_Node_Str"";
        ret+=""String_Node_Str"" + doubleToString(twipToPixel(leftMargins.get(r))) + ""String_Node_Str"";
        ret+=""String_Node_Str"" + doubleToString(twipToPixel((int)attrs.get(""String_Node_Str""))) + ""String_Node_Str"";
        ret+=""String_Node_Str"" + doubleToString(twipToPixel((int)attrs.get(""String_Node_Str""))) + ""String_Node_Str"";
        if (textColor != null) {
          ret+=""String_Node_Str"" + textColor.toHexRGB() + ""String_Node_Str"";
        }
 else         if (textColorA != null) {
          ret+=""String_Node_Str"" + textColorA.toHexRGB() + ""String_Node_Str""+ textColorA.getAlphaFloat()+ ""String_Node_Str"";
        }
        ret+=""String_Node_Str"" + psFontName + ""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
      }
    }
    ret+=""String_Node_Str"";
    ret+=filterStr;
    ret+=""String_Node_Str"";
  }
 else   if (tag instanceof DefineEditTextTag) {
    DefineEditTextTag det=(DefineEditTextTag)tag;
    String tagName;
    for (    Tag t : tags) {
      if (t instanceof FontTag) {
        FontTag ft=(FontTag)t;
        if (ft.getFontId() == det.fontId) {
          if (ft.isSmall()) {
            fontRenderingMode=""String_Node_Str"";
            break;
          }
        }
      }
    }
    if (!det.useOutlines) {
      fontRenderingMode=""String_Node_Str"";
    }
    if (det.wasStatic) {
      tagName=""String_Node_Str"";
    }
 else     if (det.readOnly) {
      tagName=""String_Node_Str"";
    }
 else {
      tagName=""String_Node_Str"";
    }
    ret+=""String_Node_Str"" + tagName;
    if (fontRenderingMode != null) {
      ret+=""String_Node_Str"" + fontRenderingMode + ""String_Node_Str"";
    }
    if (instanceName != null) {
      ret+=""String_Node_Str"" + xmlString(instanceName) + ""String_Node_Str"";
    }
    ret+=antiAlias;
    double width=twipToPixel(bounds.getWidth());
    double height=twipToPixel(bounds.getHeight());
    double padding=2;
    width-=2 * padding;
    height-=2 * padding;
    if (det.hasLayout) {
      width-=twipToPixel(det.rightMargin);
      width-=twipToPixel(det.leftMargin);
    }
    ret+=""String_Node_Str"" + width + ""String_Node_Str"";
    ret+=""String_Node_Str"" + height + ""String_Node_Str"";
    if (det.border) {
      ret+=""String_Node_Str"";
    }
    if (det.html) {
      ret+=""String_Node_Str"";
    }
    if (det.noSelect) {
      ret+=""String_Node_Str"";
    }
    if (det.multiline && det.wordWrap) {
      ret+=""String_Node_Str"";
    }
 else     if (det.multiline && (!det.wordWrap)) {
      ret+=""String_Node_Str"";
    }
 else     if (det.password) {
      ret+=""String_Node_Str"";
    }
    if (det.hasMaxLength) {
      ret+=""String_Node_Str"" + det.maxLength + ""String_Node_Str"";
    }
    if (!det.variableName.equals(""String_Node_Str"")) {
      ret+=""String_Node_Str"" + det.variableName + ""String_Node_Str"";
    }
    ret+=""String_Node_Str"";
    ret+=matStr;
    ret+=""String_Node_Str"";
    String txt=""String_Node_Str"";
    if (det.hasText) {
      txt=det.initialText;
    }
    if (det.html) {
      ret+=convertHTMLText(tags,det,txt);
    }
 else {
      ret+=""String_Node_Str"";
      ret+=""String_Node_Str"" + xmlString(txt) + ""String_Node_Str"";
      int leftMargin=-1;
      int rightMargin=-1;
      int indent=-1;
      int lineSpacing=-1;
      String alignment=null;
      boolean italic=false;
      boolean bold=false;
      String fontFace=null;
      int size=-1;
      RGBA textColor=null;
      if (det.hasTextColor) {
        textColor=det.textColor;
      }
      if (det.hasFont) {
        String fontName=null;
        FontTag ft=null;
        for (        Tag u : tags) {
          if (u instanceof DefineFontNameTag) {
            if (((DefineFontNameTag)u).fontId == det.fontId) {
              fontName=((DefineFontNameTag)u).fontName;
            }
          }
          if (u instanceof FontTag) {
            if (((FontTag)u).getFontId() == det.fontId) {
              ft=(FontTag)u;
            }
          }
          if (fontName != null && ft != null) {
            break;
          }
        }
        if (ft != null) {
          if (fontName == null) {
            fontName=ft.getFontName(tags);
          }
          italic=ft.isItalic();
          bold=ft.isBold();
          size=det.fontHeight;
          fontFace=fontName;
          String installedFont=null;
          if ((installedFont=FontTag.isFontInstalled(fontName)) != null) {
            fontName=installedFont;
            fontFace=new Font(installedFont,(italic ? Font.ITALIC : 0) | (bold ? Font.BOLD : 0) | (!italic && !bold ? Font.PLAIN : 0),size < 0 ? 10 : size).getPSName();
          }
        }
      }
      if (det.hasLayout) {
        leftMargin=det.leftMargin;
        rightMargin=det.rightMargin;
        indent=det.indent;
        lineSpacing=det.leading;
        String alignNames[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        alignment=alignNames[det.align];
      }
      ret+=""String_Node_Str"";
      ret+=""String_Node_Str"";
      if (alignment != null) {
        ret+=""String_Node_Str"" + alignment + ""String_Node_Str"";
      }
      ret+=""String_Node_Str"";
      if (indent > -1) {
        ret+=""String_Node_Str"" + twipToPixel(indent) + ""String_Node_Str"";
      }
      if (leftMargin > -1) {
        ret+=""String_Node_Str"" + twipToPixel(leftMargin) + ""String_Node_Str"";
      }
      if (lineSpacing > -1) {
        ret+=""String_Node_Str"" + twipToPixel(lineSpacing) + ""String_Node_Str"";
      }
      if (rightMargin > -1) {
        ret+=""String_Node_Str"" + twipToPixel(rightMargin) + ""String_Node_Str"";
      }
      if (size > -1) {
        ret+=""String_Node_Str"" + twipToPixel(size) + ""String_Node_Str"";
        ret+=""String_Node_Str"" + size + ""String_Node_Str"";
      }
      if (fontFace != null) {
        ret+=""String_Node_Str"" + fontFace + ""String_Node_Str"";
      }
      if (textColor != null) {
        ret+=""String_Node_Str"" + textColor.toHexRGB() + ""String_Node_Str""+ textColor.getAlphaFloat()+ ""String_Node_Str"";
      }
      ret+=""String_Node_Str"";
      ret+=""String_Node_Str"";
      ret+=""String_Node_Str"";
    }
    ret+=""String_Node_Str"";
    ret+=filterStr;
    ret+=""String_Node_Str"" + tagName + ""String_Node_Str"";
  }
  return ret;
}",0.9319689546026102
62030,"@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  if (qName.equals(""String_Node_Str"")) {
    String href=attributes.getValue(""String_Node_Str"");
    if (href != null) {
      url=href;
    }
    String t=attributes.getValue(""String_Node_Str"");
    if (t != null) {
      target=t;
    }
  }
 else   if (qName.equals(""String_Node_Str"")) {
    bold=true;
  }
 else   if (qName.equals(""String_Node_Str"")) {
    italic=true;
  }
 else   if (qName.equals(""String_Node_Str"")) {
    underline=true;
  }
 else   if (qName.equals(""String_Node_Str"")) {
    li=true;
  }
 else   if (qName.equals(""String_Node_Str"")) {
    String a=attributes.getValue(""String_Node_Str"");
    if (a != null) {
      alignment=a;
    }
    if (!result.equals(""String_Node_Str"")) {
      putText(""String_Node_Str"");
    }
  }
 else   if (qName.equals(""String_Node_Str"")) {
    String ls=attributes.getValue(""String_Node_Str"");
    if (ls != null) {
      letterSpacing=Double.parseDouble(ls);
    }
    String s=attributes.getValue(""String_Node_Str"");
    if (s != null) {
      size=Integer.parseInt(s);
    }
    String c=attributes.getValue(""String_Node_Str"");
    if (c != null) {
      color=c;
    }
    String f=attributes.getValue(""String_Node_Str"");
    if (f != null) {
      for (      Tag t : tags) {
        if (t instanceof FontTag) {
          FontTag ft=(FontTag)t;
          String fontName=null;
          if (f.equals(ft.getFontName(tags))) {
            for (            Tag u : tags) {
              if (u instanceof DefineFontNameTag) {
                if (((DefineFontNameTag)u).fontId == ft.getFontId()) {
                  fontName=((DefineFontNameTag)u).fontName;
                }
              }
            }
            if (fontName == null) {
              fontName=ft.getFontName(tags);
            }
            fontFace=new Font(fontName,(italic ? Font.ITALIC : 0) | (bold ? Font.BOLD : 0) | (!italic && !bold ? Font.PLAIN : 0),size < 0 ? 10 : size).getPSName();
            break;
          }
        }
      }
    }
  }
}","@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  if (qName.equals(""String_Node_Str"")) {
    String href=attributes.getValue(""String_Node_Str"");
    if (href != null) {
      url=href;
    }
    String t=attributes.getValue(""String_Node_Str"");
    if (t != null) {
      target=t;
    }
  }
 else   if (qName.equals(""String_Node_Str"")) {
    bold=true;
  }
 else   if (qName.equals(""String_Node_Str"")) {
    italic=true;
  }
 else   if (qName.equals(""String_Node_Str"")) {
    underline=true;
  }
 else   if (qName.equals(""String_Node_Str"")) {
    li=true;
  }
 else   if (qName.equals(""String_Node_Str"")) {
    String a=attributes.getValue(""String_Node_Str"");
    if (a != null) {
      alignment=a;
    }
    if (!result.equals(""String_Node_Str"")) {
      putText(""String_Node_Str"");
    }
  }
 else   if (qName.equals(""String_Node_Str"")) {
    String ls=attributes.getValue(""String_Node_Str"");
    if (ls != null) {
      letterSpacing=Double.parseDouble(ls);
    }
    String s=attributes.getValue(""String_Node_Str"");
    if (s != null) {
      size=Integer.parseInt(s);
    }
    String c=attributes.getValue(""String_Node_Str"");
    if (c != null) {
      color=c;
    }
    String f=attributes.getValue(""String_Node_Str"");
    if (f != null) {
      for (      Tag t : tags) {
        if (t instanceof FontTag) {
          FontTag ft=(FontTag)t;
          String fontName=null;
          if (f.equals(ft.getFontName(tags))) {
            for (            Tag u : tags) {
              if (u instanceof DefineFontNameTag) {
                if (((DefineFontNameTag)u).fontId == ft.getFontId()) {
                  fontName=((DefineFontNameTag)u).fontName;
                }
              }
            }
            if (fontName == null) {
              fontName=ft.getFontName(tags);
            }
            String installedFont;
            if ((installedFont=FontTag.isFontInstalled(fontName)) != null) {
              fontFace=new Font(installedFont,(italic ? Font.ITALIC : 0) | (bold ? Font.BOLD : 0) | (!italic && !bold ? Font.PLAIN : 0),size < 0 ? 10 : size).getPSName();
            }
 else {
              fontFace=fontName;
            }
            break;
          }
        }
      }
    }
  }
}",0.9518814139110604
62031,"public static String convertFillStyle(MATRIX mat,HashMap<Integer,CharacterTag> characters,FILLSTYLE fs,int shapeNum){
  if (mat == null) {
    mat=new MATRIX();
  }
  String ret=""String_Node_Str"";
switch (fs.fillStyleType) {
case FILLSTYLE.SOLID:
    ret+=""String_Node_Str"";
  if (shapeNum >= 3) {
    ret+=fs.colorA.toHexRGB();
  }
 else {
    ret+=fs.color.toHexRGB();
  }
ret+=""String_Node_Str"";
if (shapeNum >= 3) {
ret+=""String_Node_Str"" + fs.colorA.getAlphaFloat() + ""String_Node_Str"";
}
ret+=""String_Node_Str"";
break;
case FILLSTYLE.REPEATING_BITMAP:
case FILLSTYLE.CLIPPED_BITMAP:
case FILLSTYLE.NON_SMOOTHED_REPEATING_BITMAP:
case FILLSTYLE.NON_SMOOTHED_CLIPPED_BITMAP:
ret+=""String_Node_Str"";
ret+=""String_Node_Str"";
CharacterTag bitmapCh=characters.get(fs.bitmapId);
if (bitmapCh instanceof ImageTag) {
ImageTag it=(ImageTag)bitmapCh;
ret+=""String_Node_Str"" + bitmapCh.getCharacterId() + ""String_Node_Str""+ it.getImageFormat();
}
ret+=""String_Node_Str"";
if ((fs.fillStyleType == FILLSTYLE.CLIPPED_BITMAP) || (fs.fillStyleType == FILLSTYLE.NON_SMOOTHED_CLIPPED_BITMAP)) {
ret+=""String_Node_Str"";
}
ret+=""String_Node_Str"";
ret+=""String_Node_Str"" + convertMatrix(fs.bitmapMatrix) + ""String_Node_Str"";
ret+=""String_Node_Str"";
break;
case FILLSTYLE.LINEAR_GRADIENT:
case FILLSTYLE.RADIAL_GRADIENT:
case FILLSTYLE.FOCAL_RADIAL_GRADIENT:
if (fs.fillStyleType == FILLSTYLE.LINEAR_GRADIENT) {
ret+=""String_Node_Str"";
}
 else {
ret+=""String_Node_Str"";
ret+=""String_Node_Str"";
if (fs.fillStyleType == FILLSTYLE.FOCAL_RADIAL_GRADIENT) {
ret+=fs.focalGradient.focalPoint;
}
 else {
ret+=""String_Node_Str"";
}
ret+=""String_Node_Str"";
}
int interpolationMode;
if (fs.fillStyleType == FILLSTYLE.FOCAL_RADIAL_GRADIENT) {
interpolationMode=fs.focalGradient.interPolationMode;
}
 else {
interpolationMode=fs.gradient.interPolationMode;
}
int spreadMode;
if (fs.fillStyleType == FILLSTYLE.FOCAL_RADIAL_GRADIENT) {
spreadMode=fs.focalGradient.spreadMode;
}
 else {
spreadMode=fs.gradient.spreadMode;
}
if (interpolationMode == GRADIENT.INTERPOLATION_LINEAR_RGB_MODE) {
ret+=""String_Node_Str"";
}
switch (spreadMode) {
case GRADIENT.SPREAD_PAD_MODE:
break;
case GRADIENT.SPREAD_REFLECT_MODE:
ret+=""String_Node_Str"";
break;
case GRADIENT.SPREAD_REPEAT_MODE:
ret+=""String_Node_Str"";
break;
}
ret+=""String_Node_Str"";
ret+=""String_Node_Str"" + convertMatrix(fs.gradientMatrix) + ""String_Node_Str"";
GRADRECORD records[];
if (fs.fillStyleType == FILLSTYLE.FOCAL_RADIAL_GRADIENT) {
records=fs.focalGradient.gradientRecords;
}
 else {
records=fs.gradient.gradientRecords;
}
for (GRADRECORD rec : records) {
ret+=""String_Node_Str"";
ret+=""String_Node_Str"" + (shapeNum >= 3 ? rec.colorA.toHexRGB() : rec.color.toHexRGB()) + ""String_Node_Str"";
if (shapeNum >= 3) {
ret+=""String_Node_Str"" + rec.colorA.getAlphaFloat() + ""String_Node_Str"";
}
ret+=""String_Node_Str"" + rec.getRatioFloat() + ""String_Node_Str"";
ret+=""String_Node_Str"";
}
if (fs.fillStyleType == FILLSTYLE.LINEAR_GRADIENT) {
ret+=""String_Node_Str"";
}
 else {
ret+=""String_Node_Str"";
}
break;
}
return ret;
}","public static String convertFillStyle(MATRIX mat,HashMap<Integer,CharacterTag> characters,FILLSTYLE fs,int shapeNum){
  if (mat == null) {
    mat=new MATRIX();
  }
  String ret=""String_Node_Str"";
switch (fs.fillStyleType) {
case FILLSTYLE.SOLID:
    ret+=""String_Node_Str"";
  if (shapeNum >= 3) {
    ret+=fs.colorA.toHexRGB();
  }
 else {
    ret+=fs.color.toHexRGB();
  }
ret+=""String_Node_Str"";
if (shapeNum >= 3) {
ret+=""String_Node_Str"" + fs.colorA.getAlphaFloat() + ""String_Node_Str"";
}
ret+=""String_Node_Str"";
break;
case FILLSTYLE.REPEATING_BITMAP:
case FILLSTYLE.CLIPPED_BITMAP:
case FILLSTYLE.NON_SMOOTHED_REPEATING_BITMAP:
case FILLSTYLE.NON_SMOOTHED_CLIPPED_BITMAP:
ret+=""String_Node_Str"";
ret+=""String_Node_Str"";
CharacterTag bitmapCh=characters.get(fs.bitmapId);
if (bitmapCh instanceof ImageTag) {
ImageTag it=(ImageTag)bitmapCh;
ret+=""String_Node_Str"" + bitmapCh.getCharacterId() + ""String_Node_Str""+ it.getImageFormat();
}
 else {
if (bitmapCh != null) {
Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,""String_Node_Str"" + bitmapCh.getClass().getSimpleName());
}
return ""String_Node_Str"";
}
ret+=""String_Node_Str"";
if ((fs.fillStyleType == FILLSTYLE.CLIPPED_BITMAP) || (fs.fillStyleType == FILLSTYLE.NON_SMOOTHED_CLIPPED_BITMAP)) {
ret+=""String_Node_Str"";
}
ret+=""String_Node_Str"";
ret+=""String_Node_Str"" + convertMatrix(fs.bitmapMatrix) + ""String_Node_Str"";
ret+=""String_Node_Str"";
break;
case FILLSTYLE.LINEAR_GRADIENT:
case FILLSTYLE.RADIAL_GRADIENT:
case FILLSTYLE.FOCAL_RADIAL_GRADIENT:
if (fs.fillStyleType == FILLSTYLE.LINEAR_GRADIENT) {
ret+=""String_Node_Str"";
}
 else {
ret+=""String_Node_Str"";
ret+=""String_Node_Str"";
if (fs.fillStyleType == FILLSTYLE.FOCAL_RADIAL_GRADIENT) {
ret+=fs.focalGradient.focalPoint;
}
 else {
ret+=""String_Node_Str"";
}
ret+=""String_Node_Str"";
}
int interpolationMode;
if (fs.fillStyleType == FILLSTYLE.FOCAL_RADIAL_GRADIENT) {
interpolationMode=fs.focalGradient.interPolationMode;
}
 else {
interpolationMode=fs.gradient.interPolationMode;
}
int spreadMode;
if (fs.fillStyleType == FILLSTYLE.FOCAL_RADIAL_GRADIENT) {
spreadMode=fs.focalGradient.spreadMode;
}
 else {
spreadMode=fs.gradient.spreadMode;
}
if (interpolationMode == GRADIENT.INTERPOLATION_LINEAR_RGB_MODE) {
ret+=""String_Node_Str"";
}
switch (spreadMode) {
case GRADIENT.SPREAD_PAD_MODE:
break;
case GRADIENT.SPREAD_REFLECT_MODE:
ret+=""String_Node_Str"";
break;
case GRADIENT.SPREAD_REPEAT_MODE:
ret+=""String_Node_Str"";
break;
}
ret+=""String_Node_Str"";
ret+=""String_Node_Str"" + convertMatrix(fs.gradientMatrix) + ""String_Node_Str"";
GRADRECORD records[];
if (fs.fillStyleType == FILLSTYLE.FOCAL_RADIAL_GRADIENT) {
records=fs.focalGradient.gradientRecords;
}
 else {
records=fs.gradient.gradientRecords;
}
for (GRADRECORD rec : records) {
ret+=""String_Node_Str"";
ret+=""String_Node_Str"" + (shapeNum >= 3 ? rec.colorA.toHexRGB() : rec.color.toHexRGB()) + ""String_Node_Str"";
if (shapeNum >= 3) {
ret+=""String_Node_Str"" + rec.colorA.getAlphaFloat() + ""String_Node_Str"";
}
ret+=""String_Node_Str"" + rec.getRatioFloat() + ""String_Node_Str"";
ret+=""String_Node_Str"";
}
if (fs.fillStyleType == FILLSTYLE.LINEAR_GRADIENT) {
ret+=""String_Node_Str"";
}
 else {
ret+=""String_Node_Str"";
}
break;
}
return ret;
}",0.970635173954676
62032,"public void showFor(final JTextComponent target){
  oldCaretPosition=target.getCaretPosition();
  Container view=target.getParent();
  Dimension wd=getSize();
  wd.width=target.getVisibleRect().width;
  Point loc=new Point(0,view.getHeight());
  setSize(wd);
  setLocationRelativeTo(view);
  SwingUtilities.convertPointToScreen(loc,view);
  setLocation(loc);
  jTxtFind.setFont(target.getFont());
  jTxtFind.getDocument().addDocumentListener(this);
  WindowAdapter closeListener=new WindowAdapter(){
    @Override public void windowDeactivated(    WindowEvent e){
      target.getDocument().removeDocumentListener(QuickFindDialog.this);
      Markers.removeMarkers(target,marker);
      if (escaped) {
        Rectangle aRect;
        try {
          aRect=target.modelToView(oldCaretPosition);
          target.setCaretPosition(oldCaretPosition);
          target.scrollRectToVisible(aRect);
        }
 catch (        BadLocationException ex) {
        }
      }
      dispose();
    }
  }
;
  addWindowListener(closeListener);
  this.target=new WeakReference<JTextComponent>(target);
  Pattern p=dsd.get().getPattern();
  if (p != null) {
    jTxtFind.setText(p.pattern());
  }
  jChkWrap.setSelected(dsd.get().isWrap());
  setVisible(true);
}","public void showFor(final JTextComponent target){
  oldCaretPosition=target.getCaretPosition();
  Container view=target.getParent();
  Dimension wd=getSize();
  Point loc=new Point(0,view.getHeight() - getHeight());
  setSize(wd);
  setLocationRelativeTo(view);
  SwingUtilities.convertPointToScreen(loc,view);
  setLocation(loc);
  jTxtFind.setFont(target.getFont());
  jTxtFind.getDocument().addDocumentListener(this);
  WindowAdapter closeListener=new WindowAdapter(){
    @Override public void windowDeactivated(    WindowEvent e){
      target.getDocument().removeDocumentListener(QuickFindDialog.this);
      Markers.removeMarkers(target,marker);
      if (escaped) {
        Rectangle aRect;
        try {
          aRect=target.modelToView(oldCaretPosition);
          target.setCaretPosition(oldCaretPosition);
          target.scrollRectToVisible(aRect);
        }
 catch (        BadLocationException ex) {
        }
      }
      dispose();
    }
  }
;
  addWindowListener(closeListener);
  this.target=new WeakReference<JTextComponent>(target);
  Pattern p=dsd.get().getPattern();
  if (p != null) {
    jTxtFind.setText(p.pattern());
  }
  jChkWrap.setSelected(dsd.get().isWrap());
  setVisible(true);
}",0.9772542648253452
62033,"@Override public void actionPerformed(ActionEvent e){
  if (expandButton.isSelected()) {
    expandButton.setIcon(View.getIcon(""String_Node_Str""));
  }
  scrollPane.setVisible(expandButton.isSelected());
  scrollPane.setMinimumSize(new Dimension(getWidth(),500));
  scrollPane.setSize(new Dimension(getWidth(),500));
  revalidate();
  repaint();
}","@Override public void actionPerformed(ActionEvent e){
  expandButton.setIcon(expandButton.isSelected() ? expandIcon : collapseIcon);
  scrollPane.setVisible(expandButton.isSelected());
  revalidate();
  repaint();
}",0.3416370106761566
62034,"public ErrorLogFrame(){
  setTitle(translate(""String_Node_Str""));
  setSize(700,400);
  setBackground(Color.white);
  View.centerScreen(this);
  View.setWindowIcon(this);
  setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
  Container cnt=getContentPane();
  cnt.setLayout(new BorderLayout());
  logView.setBackground(Color.white);
  logView.setLayout(new BoxLayout(logView,BoxLayout.Y_AXIS));
  cnt.setBackground(Color.white);
  cnt.add(new JScrollPane(logView),BorderLayout.NORTH);
  handler=new Handler(){
    @Override public void publish(    LogRecord record){
      log(record.getLevel(),record.getMessage(),record.getThrown());
    }
    @Override public void flush(){
    }
    @Override public void close() throws SecurityException {
    }
  }
;
}","public ErrorLogFrame(){
  setTitle(translate(""String_Node_Str""));
  setSize(700,400);
  setBackground(Color.white);
  View.centerScreen(this);
  View.setWindowIcon(this);
  setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
  Container cnt=getContentPane();
  cnt.setLayout(new BorderLayout());
  logView.setBackground(Color.white);
  logView.setLayout(new BorderLayout());
  cnt.setBackground(Color.white);
  logViewInner.setLayout(new BoxLayout(logViewInner,BoxLayout.Y_AXIS));
  logView.add(logViewInner,BorderLayout.NORTH);
  expandIcon=View.getIcon(""String_Node_Str"");
  collapseIcon=View.getIcon(""String_Node_Str"");
  cnt.add(new JScrollPane(logView),BorderLayout.CENTER);
  handler=new Handler(){
    @Override public void publish(    LogRecord record){
      log(record.getLevel(),record.getMessage(),record.getThrown());
    }
    @Override public void flush(){
    }
    @Override public void close() throws SecurityException {
    }
  }
;
}",0.8084606345475911
62035,"@Override public void run(){
  JPanel pan=new JPanel();
  pan.setBackground(Color.white);
  pan.setLayout(new BoxLayout(pan,BoxLayout.Y_AXIS));
  JComponent detailComponent;
  if (detail == null) {
    detailComponent=null;
  }
 else {
    final JTextArea detailTextArea=new JTextArea(detail);
    detailTextArea.setEditable(false);
    detailTextArea.setOpaque(false);
    detailTextArea.setFont(new JLabel().getFont());
    detailTextArea.setBackground(Color.white);
    detailComponent=detailTextArea;
  }
  JPanel header=new JPanel();
  header.setLayout(new BoxLayout(header,BoxLayout.X_AXIS));
  header.setBackground(Color.white);
  SimpleDateFormat format=new SimpleDateFormat(""String_Node_Str"");
  final String dateStr=format.format(new Date());
  JToggleButton copyButton=new JToggleButton(View.getIcon(""String_Node_Str""));
  copyButton.setFocusPainted(false);
  copyButton.setBorderPainted(false);
  copyButton.setFocusable(false);
  copyButton.setContentAreaFilled(false);
  copyButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
  copyButton.setMargin(new Insets(2,2,2,2));
  copyButton.setToolTipText(translate(""String_Node_Str""));
  copyButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
      StringSelection stringSelection=new StringSelection(dateStr + ""String_Node_Str"" + level.toString()+ ""String_Node_Str""+ msg+ ""String_Node_Str""+ detail);
      clipboard.setContents(stringSelection,null);
    }
  }
);
  final JToggleButton expandButton=new JToggleButton(View.getIcon(""String_Node_Str""));
  expandButton.setFocusPainted(false);
  expandButton.setBorderPainted(false);
  expandButton.setFocusable(false);
  expandButton.setContentAreaFilled(false);
  expandButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
  expandButton.setMargin(new Insets(2,2,2,2));
  expandButton.setToolTipText(translate(""String_Node_Str""));
  final JScrollPane scrollPane;
  if (detailComponent != null) {
    scrollPane=new JScrollPane(detailComponent);
    scrollPane.setAlignmentX(0f);
    scrollPane.setMinimumSize(new Dimension(getWidth(),500));
    scrollPane.setPreferredSize(new Dimension(getWidth(),500));
  }
 else {
    scrollPane=null;
  }
  if (detailComponent != null) {
    expandButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        if (expandButton.isSelected()) {
          expandButton.setIcon(View.getIcon(""String_Node_Str""));
        }
        scrollPane.setVisible(expandButton.isSelected());
        scrollPane.setMinimumSize(new Dimension(getWidth(),500));
        scrollPane.setSize(new Dimension(getWidth(),500));
        revalidate();
        repaint();
      }
    }
);
  }
  JLabel dateLabel=new JLabel(dateStr);
  dateLabel.setPreferredSize(new Dimension(140,25));
  dateLabel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  header.add(dateLabel);
  JLabel levelLabel=new JLabel(level.getName());
  levelLabel.setPreferredSize(new Dimension(75,25));
  levelLabel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  header.add(levelLabel);
  JTextArea msgLabel=new JTextArea(msg);
  msgLabel.setEditable(false);
  msgLabel.setOpaque(false);
  msgLabel.setFont(levelLabel.getFont());
  msgLabel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  header.add(msgLabel);
  header.setAlignmentX(0f);
  if (detailComponent != null) {
    header.add(expandButton);
  }
  header.add(copyButton);
  pan.add(header);
  if (detailComponent != null) {
    pan.add(scrollPane);
    scrollPane.setVisible(false);
  }
  pan.setAlignmentX(0f);
  logView.add(pan);
  revalidate();
  repaint();
}","@Override public void run(){
  JPanel pan=new JPanel();
  pan.setBackground(Color.white);
  pan.setLayout(new BoxLayout(pan,BoxLayout.Y_AXIS));
  JComponent detailComponent;
  if (detail == null) {
    detailComponent=null;
  }
 else {
    final JTextArea detailTextArea=new JTextArea(detail);
    detailTextArea.setEditable(false);
    detailTextArea.setOpaque(false);
    detailTextArea.setFont(new JLabel().getFont());
    detailTextArea.setBackground(Color.white);
    detailComponent=detailTextArea;
  }
  JPanel header=new JPanel();
  header.setLayout(new BoxLayout(header,BoxLayout.X_AXIS));
  header.setBackground(Color.white);
  SimpleDateFormat format=new SimpleDateFormat(""String_Node_Str"");
  final String dateStr=format.format(new Date());
  JToggleButton copyButton=new JToggleButton(View.getIcon(""String_Node_Str""));
  copyButton.setFocusPainted(false);
  copyButton.setBorderPainted(false);
  copyButton.setFocusable(false);
  copyButton.setContentAreaFilled(false);
  copyButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
  copyButton.setMargin(new Insets(2,2,2,2));
  copyButton.setToolTipText(translate(""String_Node_Str""));
  copyButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
      StringSelection stringSelection=new StringSelection(dateStr + ""String_Node_Str"" + level.toString()+ ""String_Node_Str""+ msg+ ""String_Node_Str""+ detail);
      clipboard.setContents(stringSelection,null);
    }
  }
);
  final JToggleButton expandButton=new JToggleButton(collapseIcon);
  expandButton.setFocusPainted(false);
  expandButton.setBorderPainted(false);
  expandButton.setFocusable(false);
  expandButton.setContentAreaFilled(false);
  expandButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
  expandButton.setMargin(new Insets(2,2,2,2));
  expandButton.setToolTipText(translate(""String_Node_Str""));
  final JScrollPane scrollPane;
  if (detailComponent != null) {
    scrollPane=new JScrollPane(detailComponent);
    scrollPane.setAlignmentX(0f);
  }
 else {
    scrollPane=null;
  }
  if (detailComponent != null) {
    expandButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        expandButton.setIcon(expandButton.isSelected() ? expandIcon : collapseIcon);
        scrollPane.setVisible(expandButton.isSelected());
        revalidate();
        repaint();
      }
    }
);
  }
  JLabel dateLabel=new JLabel(dateStr);
  dateLabel.setPreferredSize(new Dimension(140,25));
  dateLabel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  header.add(dateLabel);
  JLabel levelLabel=new JLabel(level.getName());
  levelLabel.setPreferredSize(new Dimension(75,25));
  levelLabel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  header.add(levelLabel);
  JTextArea msgLabel=new JTextArea(msg);
  msgLabel.setEditable(false);
  msgLabel.setOpaque(false);
  msgLabel.setFont(levelLabel.getFont());
  msgLabel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  header.add(msgLabel);
  header.setAlignmentX(0f);
  if (detailComponent != null) {
    header.add(expandButton);
  }
  header.add(copyButton);
  pan.add(header);
  if (detailComponent != null) {
    pan.add(scrollPane);
    scrollPane.setVisible(false);
  }
  pan.setAlignmentX(0f);
  logViewInner.add(pan);
  revalidate();
  repaint();
}",0.9360933592664628
62036,"public void showCard(String name,Trait trait){
  CardLayout layout=(CardLayout)innerPanel.getLayout();
  layout.show(innerPanel,name);
  boolean b=cardMap.get(name) instanceof TraitDetail;
  buttonsPanel.setVisible(b);
  selectedCard=name;
  selectedLabel.setText(selectedCard);
  if (trait == null) {
    traitNameLabel.setText(""String_Node_Str"");
  }
 else {
    traitNameLabel.setText(""String_Node_Str"" + trait.name_index + ""String_Node_Str""+ Helper.escapeString(trait.getName(abcPanel.abc).toString(abcPanel.abc.constants,new ArrayList<String>()))+ ""String_Node_Str"");
  }
}","public void showCard(String name,Trait trait){
  CardLayout layout=(CardLayout)innerPanel.getLayout();
  layout.show(innerPanel,name);
  boolean b=cardMap.get(name) instanceof TraitDetail;
  buttonsPanel.setVisible(b);
  TraitDetail newDetail=null;
  if (b) {
    newDetail=(TraitDetail)cardMap.get(name);
  }
  for (  JComponent v : cardMap.values()) {
    if (v instanceof TraitDetail) {
      if (v != newDetail) {
        TraitDetail oldDetail=(TraitDetail)v;
        oldDetail.setActive(false);
      }
    }
  }
  if (newDetail != null) {
    newDetail.setActive(true);
  }
  selectedCard=name;
  selectedLabel.setText(selectedCard);
  if (trait == null) {
    traitNameLabel.setText(""String_Node_Str"");
  }
 else {
    traitNameLabel.setText(""String_Node_Str"" + trait.name_index + ""String_Node_Str""+ Helper.escapeString(trait.getName(abcPanel.abc).toString(abcPanel.abc.constants,new ArrayList<String>()))+ ""String_Node_Str"");
  }
}",0.7620303230059328
62037,"public MethodInfoPanel(){
  returnTypeEditor=new JEditorPane();
  paramEditor=new LineMarkedEditorPane();
  setLayout(new BoxLayout(this,BoxLayout.PAGE_AXIS));
  JPanel miPanel=new JPanel();
  miPanel.setLayout(new BoxLayout(miPanel,BoxLayout.LINE_AXIS));
  miPanel.add(new JLabel(translate(""String_Node_Str"")));
  methodIndexLabel=new JLabel(""String_Node_Str"");
  miPanel.add(methodIndexLabel);
  add(miPanel);
  add(new JLabel(translate(""String_Node_Str"")));
  add(new JScrollPane(paramEditor));
  add(new JLabel(translate(""String_Node_Str"")));
  JScrollPane jsp=new JScrollPane(returnTypeEditor);
  add(jsp);
  paramEditor.setContentType(""String_Node_Str"");
  returnTypeEditor.setContentType(""String_Node_Str"");
  paramEditor.setFont(new Font(""String_Node_Str"",Font.PLAIN,paramEditor.getFont().getSize()));
  returnTypeEditor.setFont(new Font(""String_Node_Str"",Font.PLAIN,returnTypeEditor.getFont().getSize()));
  jsp.setMaximumSize(new Dimension(1024,25));
  Flasm3MethodInfoSyntaxKit sk=(Flasm3MethodInfoSyntaxKit)returnTypeEditor.getEditorKit();
  sk.deinstallComponent(returnTypeEditor,""String_Node_Str"");
}","public MethodInfoPanel(){
  returnTypeEditor=new UndoFixedEditorPane();
  paramEditor=new LineMarkedEditorPane();
  setLayout(new BoxLayout(this,BoxLayout.PAGE_AXIS));
  JPanel miPanel=new JPanel();
  miPanel.setLayout(new BoxLayout(miPanel,BoxLayout.LINE_AXIS));
  miPanel.add(new JLabel(translate(""String_Node_Str"")));
  methodIndexLabel=new JLabel(""String_Node_Str"");
  miPanel.add(methodIndexLabel);
  add(miPanel);
  add(new JLabel(translate(""String_Node_Str"")));
  add(new JScrollPane(paramEditor));
  add(new JLabel(translate(""String_Node_Str"")));
  JScrollPane jsp=new JScrollPane(returnTypeEditor);
  add(jsp);
  paramEditor.setContentType(""String_Node_Str"");
  returnTypeEditor.setContentType(""String_Node_Str"");
  paramEditor.setFont(new Font(""String_Node_Str"",Font.PLAIN,paramEditor.getFont().getSize()));
  returnTypeEditor.setFont(new Font(""String_Node_Str"",Font.PLAIN,returnTypeEditor.getFont().getSize()));
  jsp.setMaximumSize(new Dimension(1024,25));
  Flasm3MethodInfoSyntaxKit sk=(Flasm3MethodInfoSyntaxKit)returnTypeEditor.getEditorKit();
  sk.deinstallComponent(returnTypeEditor,""String_Node_Str"");
}",0.9955277280858676
62038,"public SlotConstTraitDetailPanel(){
  slotConstEditor=new JEditorPane();
  setLayout(new BorderLayout());
  add(new JLabel(translate(""String_Node_Str"")),BorderLayout.NORTH);
  add(new JScrollPane(slotConstEditor),BorderLayout.CENTER);
  slotConstEditor.setContentType(""String_Node_Str"");
  Flasm3MethodInfoSyntaxKit sk=(Flasm3MethodInfoSyntaxKit)slotConstEditor.getEditorKit();
  sk.deinstallComponent(slotConstEditor,""String_Node_Str"");
}","public SlotConstTraitDetailPanel(){
  slotConstEditor=new UndoFixedEditorPane();
  setLayout(new BorderLayout());
  add(new JLabel(translate(""String_Node_Str"")),BorderLayout.NORTH);
  add(new JScrollPane(slotConstEditor),BorderLayout.CENTER);
  slotConstEditor.setContentType(""String_Node_Str"");
  Flasm3MethodInfoSyntaxKit sk=(Flasm3MethodInfoSyntaxKit)slotConstEditor.getEditorKit();
  sk.deinstallComponent(slotConstEditor,""String_Node_Str"");
}",0.9887133182844244
62039,"@Override public void setEditMode(boolean val){
  if (val) {
    JOptionPane.showMessageDialog(null,translate(""String_Node_Str""),translate(""String_Node_Str""),JOptionPane.WARNING_MESSAGE);
  }
  slotConstEditor.setEditable(val);
}","@Override public void setEditMode(boolean val){
  if (val && active) {
    JOptionPane.showMessageDialog(null,translate(""String_Node_Str""),translate(""String_Node_Str""),JOptionPane.WARNING_MESSAGE);
  }
  slotConstEditor.setEditable(val);
}",0.9786324786324786
62040,"@Override public void actionPerformed(ActionEvent e){
  if (expandButton.isSelected()) {
    expandButton.setIcon(View.getIcon(""String_Node_Str""));
  }
  scrollPane.setVisible(expandButton.isSelected());
  scrollPane.setMinimumSize(new Dimension(getWidth(),500));
  scrollPane.setSize(new Dimension(getWidth(),500));
  revalidate();
  repaint();
}","@Override public void actionPerformed(ActionEvent e){
  expandButton.setIcon(expandButton.isSelected() ? expandIcon : collapseIcon);
  scrollPane.setVisible(expandButton.isSelected());
  revalidate();
  repaint();
}",0.3416370106761566
62041,"public ErrorLogFrame(){
  setTitle(translate(""String_Node_Str""));
  setSize(700,400);
  setBackground(Color.white);
  View.centerScreen(this);
  View.setWindowIcon(this);
  setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
  Container cnt=getContentPane();
  cnt.setLayout(new BorderLayout());
  logView.setBackground(Color.white);
  logView.setLayout(new BoxLayout(logView,BoxLayout.Y_AXIS));
  cnt.setBackground(Color.white);
  cnt.add(new JScrollPane(logView),BorderLayout.NORTH);
  handler=new Handler(){
    @Override public void publish(    LogRecord record){
      log(record.getLevel(),record.getMessage(),record.getThrown());
    }
    @Override public void flush(){
    }
    @Override public void close() throws SecurityException {
    }
  }
;
}","public ErrorLogFrame(){
  setTitle(translate(""String_Node_Str""));
  setSize(700,400);
  setBackground(Color.white);
  View.centerScreen(this);
  View.setWindowIcon(this);
  setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
  Container cnt=getContentPane();
  cnt.setLayout(new BorderLayout());
  logView.setBackground(Color.white);
  logView.setLayout(new BorderLayout());
  cnt.setBackground(Color.white);
  logViewInner.setLayout(new BoxLayout(logViewInner,BoxLayout.Y_AXIS));
  logView.add(logViewInner,BorderLayout.NORTH);
  expandIcon=View.getIcon(""String_Node_Str"");
  collapseIcon=View.getIcon(""String_Node_Str"");
  cnt.add(new JScrollPane(logView),BorderLayout.CENTER);
  handler=new Handler(){
    @Override public void publish(    LogRecord record){
      log(record.getLevel(),record.getMessage(),record.getThrown());
    }
    @Override public void flush(){
    }
    @Override public void close() throws SecurityException {
    }
  }
;
}",0.8084606345475911
62042,"@Override public void run(){
  JPanel pan=new JPanel();
  pan.setBackground(Color.white);
  pan.setLayout(new BoxLayout(pan,BoxLayout.Y_AXIS));
  JComponent detailComponent;
  if (detail == null) {
    detailComponent=null;
  }
 else {
    final JTextArea detailTextArea=new JTextArea(detail);
    detailTextArea.setEditable(false);
    detailTextArea.setOpaque(false);
    detailTextArea.setFont(new JLabel().getFont());
    detailTextArea.setBackground(Color.white);
    detailComponent=detailTextArea;
  }
  JPanel header=new JPanel();
  header.setLayout(new BoxLayout(header,BoxLayout.X_AXIS));
  header.setBackground(Color.white);
  SimpleDateFormat format=new SimpleDateFormat(""String_Node_Str"");
  final String dateStr=format.format(new Date());
  JToggleButton copyButton=new JToggleButton(View.getIcon(""String_Node_Str""));
  copyButton.setFocusPainted(false);
  copyButton.setBorderPainted(false);
  copyButton.setFocusable(false);
  copyButton.setContentAreaFilled(false);
  copyButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
  copyButton.setMargin(new Insets(2,2,2,2));
  copyButton.setToolTipText(translate(""String_Node_Str""));
  copyButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
      StringSelection stringSelection=new StringSelection(dateStr + ""String_Node_Str"" + level.toString()+ ""String_Node_Str""+ msg+ ""String_Node_Str""+ detail);
      clipboard.setContents(stringSelection,null);
    }
  }
);
  final JToggleButton expandButton=new JToggleButton(View.getIcon(""String_Node_Str""));
  expandButton.setFocusPainted(false);
  expandButton.setBorderPainted(false);
  expandButton.setFocusable(false);
  expandButton.setContentAreaFilled(false);
  expandButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
  expandButton.setMargin(new Insets(2,2,2,2));
  expandButton.setToolTipText(translate(""String_Node_Str""));
  final JScrollPane scrollPane;
  if (detailComponent != null) {
    scrollPane=new JScrollPane(detailComponent);
    scrollPane.setAlignmentX(0f);
    scrollPane.setMinimumSize(new Dimension(getWidth(),500));
    scrollPane.setPreferredSize(new Dimension(getWidth(),500));
  }
 else {
    scrollPane=null;
  }
  if (detailComponent != null) {
    expandButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        if (expandButton.isSelected()) {
          expandButton.setIcon(View.getIcon(""String_Node_Str""));
        }
        scrollPane.setVisible(expandButton.isSelected());
        scrollPane.setMinimumSize(new Dimension(getWidth(),500));
        scrollPane.setSize(new Dimension(getWidth(),500));
        revalidate();
        repaint();
      }
    }
);
  }
  JLabel dateLabel=new JLabel(dateStr);
  dateLabel.setPreferredSize(new Dimension(140,25));
  dateLabel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  header.add(dateLabel);
  JLabel levelLabel=new JLabel(level.getName());
  levelLabel.setPreferredSize(new Dimension(75,25));
  levelLabel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  header.add(levelLabel);
  JTextArea msgLabel=new JTextArea(msg);
  msgLabel.setEditable(false);
  msgLabel.setOpaque(false);
  msgLabel.setFont(levelLabel.getFont());
  msgLabel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  header.add(msgLabel);
  header.setAlignmentX(0f);
  if (detailComponent != null) {
    header.add(expandButton);
  }
  header.add(copyButton);
  pan.add(header);
  if (detailComponent != null) {
    pan.add(scrollPane);
    scrollPane.setVisible(false);
  }
  pan.setAlignmentX(0f);
  logView.add(pan);
  revalidate();
  repaint();
}","@Override public void run(){
  JPanel pan=new JPanel();
  pan.setBackground(Color.white);
  pan.setLayout(new BoxLayout(pan,BoxLayout.Y_AXIS));
  JComponent detailComponent;
  if (detail == null) {
    detailComponent=null;
  }
 else {
    final JTextArea detailTextArea=new JTextArea(detail);
    detailTextArea.setEditable(false);
    detailTextArea.setOpaque(false);
    detailTextArea.setFont(new JLabel().getFont());
    detailTextArea.setBackground(Color.white);
    detailComponent=detailTextArea;
  }
  JPanel header=new JPanel();
  header.setLayout(new BoxLayout(header,BoxLayout.X_AXIS));
  header.setBackground(Color.white);
  SimpleDateFormat format=new SimpleDateFormat(""String_Node_Str"");
  final String dateStr=format.format(new Date());
  JToggleButton copyButton=new JToggleButton(View.getIcon(""String_Node_Str""));
  copyButton.setFocusPainted(false);
  copyButton.setBorderPainted(false);
  copyButton.setFocusable(false);
  copyButton.setContentAreaFilled(false);
  copyButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
  copyButton.setMargin(new Insets(2,2,2,2));
  copyButton.setToolTipText(translate(""String_Node_Str""));
  copyButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
      StringSelection stringSelection=new StringSelection(dateStr + ""String_Node_Str"" + level.toString()+ ""String_Node_Str""+ msg+ ""String_Node_Str""+ detail);
      clipboard.setContents(stringSelection,null);
    }
  }
);
  final JToggleButton expandButton=new JToggleButton(collapseIcon);
  expandButton.setFocusPainted(false);
  expandButton.setBorderPainted(false);
  expandButton.setFocusable(false);
  expandButton.setContentAreaFilled(false);
  expandButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
  expandButton.setMargin(new Insets(2,2,2,2));
  expandButton.setToolTipText(translate(""String_Node_Str""));
  final JScrollPane scrollPane;
  if (detailComponent != null) {
    scrollPane=new JScrollPane(detailComponent);
    scrollPane.setAlignmentX(0f);
  }
 else {
    scrollPane=null;
  }
  if (detailComponent != null) {
    expandButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        expandButton.setIcon(expandButton.isSelected() ? expandIcon : collapseIcon);
        scrollPane.setVisible(expandButton.isSelected());
        revalidate();
        repaint();
      }
    }
);
  }
  JLabel dateLabel=new JLabel(dateStr);
  dateLabel.setPreferredSize(new Dimension(140,25));
  dateLabel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  header.add(dateLabel);
  JLabel levelLabel=new JLabel(level.getName());
  levelLabel.setPreferredSize(new Dimension(75,25));
  levelLabel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  header.add(levelLabel);
  JTextArea msgLabel=new JTextArea(msg);
  msgLabel.setEditable(false);
  msgLabel.setOpaque(false);
  msgLabel.setFont(levelLabel.getFont());
  msgLabel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  header.add(msgLabel);
  header.setAlignmentX(0f);
  if (detailComponent != null) {
    header.add(expandButton);
  }
  header.add(copyButton);
  pan.add(header);
  if (detailComponent != null) {
    pan.add(scrollPane);
    scrollPane.setVisible(false);
  }
  pan.setAlignmentX(0f);
  logViewInner.add(pan);
  revalidate();
  repaint();
}",0.9360933592664628
62043,"@Override protected List<GraphTargetItem> check(GraphSource code,List<Object> localData,List<GraphPart> allParts,Stack<GraphTargetItem> stack,GraphPart parent,GraphPart part,List<GraphPart> stopPart,List<Loop> loops,List<GraphTargetItem> output,Loop currentLoop,int staticOperation,String path){
  List<GraphTargetItem> ret=null;
  @SuppressWarnings(""String_Node_Str"") List<ABCException> parsedExceptions=(List<ABCException>)localData.get(DATA_PARSEDEXCEPTIONS);
  @SuppressWarnings(""String_Node_Str"") List<Integer> finallyJumps=(List<Integer>)localData.get(DATA_FINALLYJUMPS);
  @SuppressWarnings(""String_Node_Str"") List<Integer> ignoredSwitches=(List<Integer>)localData.get(DATA_IGNOREDSWITCHES);
  int ip=part.start;
  int addr=this.code.fixAddrAfterDebugLine(this.code.pos2adr(part.start));
  int maxend=-1;
  List<ABCException> catchedExceptions=new ArrayList<>();
  for (int e=0; e < body.exceptions.length; e++) {
    if (addr == this.code.fixAddrAfterDebugLine(body.exceptions[e].start)) {
      if (!body.exceptions[e].isFinally()) {
        if (((body.exceptions[e].end) > maxend) && (!parsedExceptions.contains(body.exceptions[e]))) {
          catchedExceptions.clear();
          maxend=this.code.fixAddrAfterDebugLine(body.exceptions[e].end);
          catchedExceptions.add(body.exceptions[e]);
        }
 else         if (this.code.fixAddrAfterDebugLine(body.exceptions[e].end) == maxend) {
          catchedExceptions.add(body.exceptions[e]);
        }
      }
    }
  }
  if (catchedExceptions.size() > 0) {
    parsedExceptions.addAll(catchedExceptions);
    int endpos=code.adr2pos(this.code.fixAddrAfterDebugLine(catchedExceptions.get(0).end));
    int endposStartBlock=code.adr2pos(catchedExceptions.get(0).end);
    List<List<GraphTargetItem>> catchedCommands=new ArrayList<>();
    if (this.code.code.get(endpos).definition instanceof JumpIns) {
      int afterCatchAddr=this.code.pos2adr(endpos + 1) + this.code.code.get(endpos).operands[0];
      int afterCatchPos=this.code.adr2pos(afterCatchAddr);
      final AVM2Graph t=this;
      Collections.sort(catchedExceptions,new Comparator<ABCException>(){
        @Override public int compare(        ABCException o1,        ABCException o2){
          return t.code.fixAddrAfterDebugLine(o1.target) - t.code.fixAddrAfterDebugLine(o2.target);
        }
      }
);
      List<GraphTargetItem> finallyCommands=new ArrayList<>();
      int returnPos=afterCatchPos;
      for (int e=0; e < body.exceptions.length; e++) {
        if (body.exceptions[e].isFinally()) {
          if (addr == this.code.fixAddrAfterDebugLine(body.exceptions[e].start)) {
            if (afterCatchPos + 1 == code.adr2pos(this.code.fixAddrAfterDebugLine(body.exceptions[e].end))) {
              AVM2Instruction jmpIns=this.code.code.get(code.adr2pos(this.code.fixAddrAfterDebugLine(body.exceptions[e].end)));
              if (jmpIns.definition instanceof JumpIns) {
                int finStart=code.adr2pos(this.code.fixAddrAfterDebugLine(body.exceptions[e].end) + jmpIns.getBytes().length + jmpIns.operands[0]);
                boolean switchFound=false;
                GraphPart fpart=null;
                for (                GraphPart p : allParts) {
                  if (p.start == finStart) {
                    fpart=p;
                    break;
                  }
                }
                for (int f=finStart; f < this.code.code.size(); f++) {
                  if (this.code.code.get(f).definition instanceof LookupSwitchIns) {
                    AVM2Instruction swins=this.code.code.get(f);
                    if (swins.operands.length >= 3) {
                      if (swins.operands[0] == swins.getBytes().length) {
                        if (code.adr2pos(code.pos2adr(f) + swins.operands[2]) < finStart) {
                          stack.push(new ExceptionAVM2Item(body.exceptions[e]));
                          GraphPart fepart=null;
                          for (                          GraphPart p : allParts) {
                            if (p.start == f + 1) {
                              fepart=p;
                              break;
                            }
                          }
                          ignoredSwitches.add(f);
                          List<GraphPart> stopPart2=new ArrayList<>(stopPart);
                          stopPart2.add(fepart);
                          finallyCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,fpart,stopPart2,loops,staticOperation,path);
                          returnPos=f + 1;
                          break;
                        }
                      }
                    }
                  }
                }
                if (!switchFound) {
                  finallyCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,fpart,null,loops,staticOperation,path);
                }
                finallyJumps.add(finStart);
                break;
              }
            }
          }
        }
      }
      List<GraphPart> catchParts=new ArrayList<>();
      for (int e=0; e < catchedExceptions.size(); e++) {
        int eendpos;
        if (e < catchedExceptions.size() - 1) {
          eendpos=code.adr2pos(this.code.fixAddrAfterDebugLine(catchedExceptions.get(e + 1).target)) - 2;
        }
 else {
          eendpos=afterCatchPos - 1;
        }
        GraphPart npart=null;
        int findpos=code.adr2pos(catchedExceptions.get(e).target);
        for (        GraphPart p : allParts) {
          if (p.start == findpos) {
            npart=p;
            catchParts.add(p);
            break;
          }
        }
        GraphPart nepart=null;
        for (        GraphPart p : allParts) {
          if (p.start == eendpos + 1) {
            nepart=p;
            break;
          }
        }
        stack.add(new ExceptionAVM2Item(catchedExceptions.get(e)));
        List<Object> localData2=new ArrayList<>();
        localData2.addAll(localData);
        localData2.set(DATA_SCOPESTACK,new Stack<GraphTargetItem>());
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(nepart);
        catchedCommands.add(printGraph(new ArrayList<GraphPart>(),localData2,stack,allParts,parent,npart,stopPart2,loops,staticOperation,path));
      }
      GraphPart nepart=null;
      for (      GraphPart p : allParts) {
        if (p.start == endposStartBlock) {
          nepart=p;
          break;
        }
      }
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(nepart);
      stopPart2.addAll(catchParts);
      List<GraphTargetItem> tryCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,part,stopPart2,loops,staticOperation,path);
      output.clear();
      output.add(new TryAVM2Item(tryCommands,catchedExceptions,catchedCommands,finallyCommands));
      ip=returnPos;
    }
  }
  if (ip != part.start) {
    part=null;
    for (    GraphPart p : allParts) {
      List<GraphPart> ps=p.getSubParts();
      for (      GraphPart p2 : ps) {
        if (p2.start == ip) {
          part=p2;
          break;
        }
      }
    }
    ret=new ArrayList<>();
    ret.addAll(output);
    GraphTargetItem lop=checkLoop(part,stopPart,loops);
    if (lop == null) {
      ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,part,stopPart,loops,staticOperation,path));
    }
 else {
      ret.add(lop);
    }
    return ret;
  }
  if (part.nextParts.isEmpty()) {
    if (this.code.code.get(part.end).definition instanceof ReturnValueIns) {
      if (part.getHeight() >= 3) {
        if (this.code.code.get(part.getPosAt(part.getHeight() - 2)).definition instanceof KillIns) {
          if (this.code.code.get(part.getPosAt(part.getHeight() - 3)).definition instanceof GetLocalTypeIns) {
            if (output.size() >= 2) {
              if (output.get(output.size() - 2) instanceof SetLocalAVM2Item) {
                ret=new ArrayList<>();
                ret.addAll(output);
                ret.remove(ret.size() - 1);
                ret.add(new ReturnValueAVM2Item(this.code.code.get(part.end),((SetLocalAVM2Item)output.get(output.size() - 2)).value));
                return ret;
              }
            }
          }
        }
      }
    }
  }
  if ((this.code.code.get(part.end).definition instanceof LookupSwitchIns) && ignoredSwitches.contains(part.end)) {
    ret=new ArrayList<>();
    ret.addAll(output);
    return ret;
  }
  if (((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictEqAVM2Item)&& (part.nextParts.get(0).getHeight() >= 2)&& (this.code.code.get(this.code.fixIPAfterDebugLine(part.nextParts.get(0).start)).definition instanceof PushIntegerTypeIns)&& (!part.nextParts.get(0).nextParts.isEmpty())&& (this.code.code.get(part.nextParts.get(0).nextParts.get(0).end).definition instanceof LookupSwitchIns)) || ((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictNeqAVM2Item)&& (part.nextParts.get(1).getHeight() >= 2)&& (this.code.code.get(this.code.fixIPAfterDebugLine(part.nextParts.get(1).start)).definition instanceof PushIntegerTypeIns)&& (!part.nextParts.get(1).nextParts.isEmpty())&& (this.code.code.get(part.nextParts.get(1).nextParts.get(0).end).definition instanceof LookupSwitchIns))) {
    if (stack.peek() instanceof StrictEqAVM2Item) {
      ignoredSwitches.add(part.nextParts.get(0).nextParts.get(0).end);
    }
 else {
      ignoredSwitches.add(part.nextParts.get(1).nextParts.get(0).end);
    }
    ret=new ArrayList<>();
    ret.addAll(output);
    boolean reversed=false;
    if (stack.peek() instanceof StrictEqAVM2Item) {
      reversed=true;
    }
    GraphTargetItem switchedObject=null;
    if (!output.isEmpty()) {
      if (output.get(output.size() - 1) instanceof SetLocalAVM2Item) {
        switchedObject=((SetLocalAVM2Item)output.get(output.size() - 1)).value;
      }
    }
    if (switchedObject == null) {
      switchedObject=new NullAVM2Item(null);
    }
    HashMap<Integer,GraphTargetItem> caseValuesMap=new HashMap<>();
    GraphTargetItem tar=stack.pop();
    if (tar instanceof StrictEqAVM2Item) {
      tar=((StrictEqAVM2Item)tar).leftSide;
    }
    if (tar instanceof StrictNeqAVM2Item) {
      tar=((StrictNeqAVM2Item)tar).leftSide;
    }
    caseValuesMap.put(this.code.code.get(part.nextParts.get(reversed ? 0 : 1).start).operands[0],tar);
    GraphPart switchLoc=part.nextParts.get(reversed ? 0 : 1).nextParts.get(0);
    while ((this.code.code.get(part.nextParts.get(reversed ? 1 : 0).end).definition instanceof IfStrictNeIns) || (this.code.code.get(part.nextParts.get(reversed ? 1 : 0).end).definition instanceof IfStrictEqIns)) {
      part=part.nextParts.get(reversed ? 1 : 0);
      translatePart(localData,part,stack,staticOperation,null);
      tar=stack.pop();
      if (tar instanceof StrictEqAVM2Item) {
        tar=((StrictEqAVM2Item)tar).leftSide;
      }
      if (tar instanceof StrictNeqAVM2Item) {
        tar=((StrictNeqAVM2Item)tar).leftSide;
      }
      if (this.code.code.get(part.end).definition instanceof IfStrictNeIns) {
        reversed=false;
      }
 else {
        reversed=true;
      }
      GraphPart numPart=part.nextParts.get(reversed ? 0 : 1);
      AVM2Instruction ins=null;
      Stack<GraphTargetItem> sstack=new Stack<>();
      do {
        for (int n=0; n < numPart.getHeight(); n++) {
          ins=this.code.code.get(numPart.getPosAt(n));
          if (ins.definition instanceof LookupSwitchIns) {
            break;
          }
          ins.translate(localData,sstack,new ArrayList<GraphTargetItem>(),staticOperation,path);
        }
        if (numPart.nextParts.size() > 1) {
          break;
        }
 else {
          numPart=numPart.nextParts.get(0);
        }
      }
 while (!(this.code.code.get(numPart.end).definition instanceof LookupSwitchIns));
      GraphTargetItem nt=sstack.peek();
      if (!(nt instanceof IntegerValueAVM2Item)) {
        throw new RuntimeException(""String_Node_Str"");
      }
      IntegerValueAVM2Item iv=(IntegerValueAVM2Item)nt;
      caseValuesMap.put((int)(long)iv.value,tar);
      while (this.code.code.get(part.nextParts.get(reversed ? 1 : 0).start).definition instanceof JumpIns) {
        reversed=false;
        part=part.nextParts.get(reversed ? 1 : 0);
        if (part instanceof GraphPartMulti) {
          part=((GraphPartMulti)part).parts.get(0);
        }
      }
    }
    boolean hasDefault=false;
    GraphPart dp=part.nextParts.get(reversed ? 1 : 0);
    while (this.code.code.get(dp.start).definition instanceof JumpIns) {
      if (dp instanceof GraphPartMulti) {
        dp=((GraphPartMulti)dp).parts.get(0);
      }
      dp=dp.nextParts.get(0);
    }
    if (this.code.code.get(dp.start).definition instanceof PushIntegerTypeIns) {
      hasDefault=true;
    }
    List<GraphTargetItem> caseValues=new ArrayList<>();
    for (int i=0; i < switchLoc.nextParts.size() - 1; i++) {
      if (caseValuesMap.containsKey(i)) {
        caseValues.add(caseValuesMap.get(i));
      }
 else {
        continue;
      }
    }
    List<List<GraphTargetItem>> caseCommands=new ArrayList<>();
    GraphPart next=null;
    next=getMostCommonPart(switchLoc.nextParts,loops);
    currentLoop=new Loop(loops.size(),null,next);
    currentLoop.phase=1;
    loops.add(currentLoop);
    List<Integer> valuesMapping=new ArrayList<>();
    List<GraphPart> caseBodies=new ArrayList<>();
    for (int i=0; i < caseValues.size(); i++) {
      GraphPart cur=switchLoc.nextParts.get(1 + i);
      if (!caseBodies.contains(cur)) {
        caseBodies.add(cur);
      }
      valuesMapping.add(caseBodies.indexOf(cur));
    }
    List<GraphTargetItem> defaultCommands=new ArrayList<>();
    GraphPart defaultPart=null;
    if (hasDefault) {
      defaultPart=switchLoc.nextParts.get(switchLoc.nextParts.size() - 1);
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(next);
      defaultCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,switchLoc,defaultPart,stopPart2,loops,staticOperation,path);
      if (!defaultCommands.isEmpty()) {
        if (defaultCommands.get(defaultCommands.size() - 1) instanceof BreakItem) {
          if (((BreakItem)defaultCommands.get(defaultCommands.size() - 1)).loopId == currentLoop.id) {
            defaultCommands.remove(defaultCommands.size() - 1);
          }
        }
      }
    }
    List<GraphPart> ignored=new ArrayList<>();
    for (    Loop l : loops) {
      ignored.add(l.loopContinue);
    }
    for (int i=0; i < caseBodies.size(); i++) {
      List<GraphTargetItem> cc=new ArrayList<>();
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      for (int j=0; j < caseBodies.size(); j++) {
        if (caseBodies.get(j) != caseBodies.get(i)) {
          stopPart2.add(caseBodies.get(j));
        }
      }
      if (hasDefault) {
        stopPart2.add(defaultPart);
      }
      cc.addAll(0,printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,switchLoc,caseBodies.get(i),stopPart2,loops,staticOperation,path));
      caseCommands.add(cc);
    }
    SwitchItem sti=new SwitchItem(null,currentLoop,switchedObject,caseValues,caseCommands,defaultCommands,valuesMapping);
    ret.add(sti);
    if (next != null) {
      currentLoop.phase=2;
      ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,next,stopPart,loops,staticOperation,path));
    }
  }
  return ret;
}","@Override protected List<GraphTargetItem> check(GraphSource code,List<Object> localData,List<GraphPart> allParts,Stack<GraphTargetItem> stack,GraphPart parent,GraphPart part,List<GraphPart> stopPart,List<Loop> loops,List<GraphTargetItem> output,Loop currentLoop,int staticOperation,String path){
  List<GraphTargetItem> ret=null;
  @SuppressWarnings(""String_Node_Str"") List<ABCException> parsedExceptions=(List<ABCException>)localData.get(DATA_PARSEDEXCEPTIONS);
  @SuppressWarnings(""String_Node_Str"") List<Integer> finallyJumps=(List<Integer>)localData.get(DATA_FINALLYJUMPS);
  @SuppressWarnings(""String_Node_Str"") List<Integer> ignoredSwitches=(List<Integer>)localData.get(DATA_IGNOREDSWITCHES);
  int ip=part.start;
  int addr=this.code.fixAddrAfterDebugLine(this.code.pos2adr(part.start));
  int maxend=-1;
  List<ABCException> catchedExceptions=new ArrayList<>();
  for (int e=0; e < body.exceptions.length; e++) {
    if (addr == this.code.fixAddrAfterDebugLine(body.exceptions[e].start)) {
      if (!body.exceptions[e].isFinally()) {
        if (((body.exceptions[e].end) > maxend) && (!parsedExceptions.contains(body.exceptions[e]))) {
          catchedExceptions.clear();
          maxend=this.code.fixAddrAfterDebugLine(body.exceptions[e].end);
          catchedExceptions.add(body.exceptions[e]);
        }
 else         if (this.code.fixAddrAfterDebugLine(body.exceptions[e].end) == maxend) {
          catchedExceptions.add(body.exceptions[e]);
        }
      }
    }
  }
  if (catchedExceptions.size() > 0) {
    parsedExceptions.addAll(catchedExceptions);
    int endpos=code.adr2pos(this.code.fixAddrAfterDebugLine(catchedExceptions.get(0).end));
    int endposStartBlock=code.adr2pos(catchedExceptions.get(0).end);
    List<List<GraphTargetItem>> catchedCommands=new ArrayList<>();
    if (this.code.code.get(endpos).definition instanceof JumpIns) {
      int afterCatchAddr=this.code.pos2adr(endpos + 1) + this.code.code.get(endpos).operands[0];
      int afterCatchPos=this.code.adr2pos(afterCatchAddr);
      final AVM2Graph t=this;
      Collections.sort(catchedExceptions,new Comparator<ABCException>(){
        @Override public int compare(        ABCException o1,        ABCException o2){
          return t.code.fixAddrAfterDebugLine(o1.target) - t.code.fixAddrAfterDebugLine(o2.target);
        }
      }
);
      List<GraphTargetItem> finallyCommands=new ArrayList<>();
      int returnPos=afterCatchPos;
      for (int e=0; e < body.exceptions.length; e++) {
        if (body.exceptions[e].isFinally()) {
          if (addr == this.code.fixAddrAfterDebugLine(body.exceptions[e].start)) {
            if (afterCatchPos + 1 == code.adr2pos(this.code.fixAddrAfterDebugLine(body.exceptions[e].end))) {
              AVM2Instruction jmpIns=this.code.code.get(code.adr2pos(this.code.fixAddrAfterDebugLine(body.exceptions[e].end)));
              if (jmpIns.definition instanceof JumpIns) {
                int finStart=code.adr2pos(this.code.fixAddrAfterDebugLine(body.exceptions[e].end) + jmpIns.getBytes().length + jmpIns.operands[0]);
                boolean switchFound=false;
                GraphPart fpart=null;
                for (                GraphPart p : allParts) {
                  if (p.start == finStart) {
                    fpart=p;
                    break;
                  }
                }
                for (int f=finStart; f < this.code.code.size(); f++) {
                  if (this.code.code.get(f).definition instanceof LookupSwitchIns) {
                    AVM2Instruction swins=this.code.code.get(f);
                    if (swins.operands.length >= 3) {
                      if (swins.operands[0] == swins.getBytes().length) {
                        if (code.adr2pos(code.pos2adr(f) + swins.operands[2]) < finStart) {
                          stack.push(new ExceptionAVM2Item(body.exceptions[e]));
                          GraphPart fepart=null;
                          for (                          GraphPart p : allParts) {
                            if (p.start == f + 1) {
                              fepart=p;
                              break;
                            }
                          }
                          ignoredSwitches.add(f);
                          List<GraphPart> stopPart2=new ArrayList<>(stopPart);
                          stopPart2.add(fepart);
                          finallyCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,fpart,stopPart2,loops,staticOperation,path);
                          returnPos=f + 1;
                          break;
                        }
                      }
                    }
                  }
                }
                if (!switchFound) {
                  finallyCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,fpart,null,loops,staticOperation,path);
                }
                finallyJumps.add(finStart);
                break;
              }
            }
          }
        }
      }
      List<GraphPart> catchParts=new ArrayList<>();
      for (int e=0; e < catchedExceptions.size(); e++) {
        int eendpos;
        if (e < catchedExceptions.size() - 1) {
          eendpos=code.adr2pos(this.code.fixAddrAfterDebugLine(catchedExceptions.get(e + 1).target)) - 2;
        }
 else {
          eendpos=afterCatchPos - 1;
        }
        GraphPart npart=null;
        int findpos=code.adr2pos(catchedExceptions.get(e).target);
        for (        GraphPart p : allParts) {
          if (p.start == findpos) {
            npart=p;
            catchParts.add(p);
            break;
          }
        }
        GraphPart nepart=null;
        for (        GraphPart p : allParts) {
          if (p.start == eendpos + 1) {
            nepart=p;
            break;
          }
        }
        stack.add(new ExceptionAVM2Item(catchedExceptions.get(e)));
        List<Object> localData2=new ArrayList<>();
        localData2.addAll(localData);
        localData2.set(DATA_SCOPESTACK,new Stack<GraphTargetItem>());
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(nepart);
        catchedCommands.add(printGraph(new ArrayList<GraphPart>(),localData2,stack,allParts,parent,npart,stopPart2,loops,staticOperation,path));
      }
      GraphPart nepart=null;
      for (      GraphPart p : allParts) {
        if (p.start == endposStartBlock) {
          nepart=p;
          break;
        }
      }
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(nepart);
      stopPart2.addAll(catchParts);
      List<GraphTargetItem> tryCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,part,stopPart2,loops,staticOperation,path);
      output.clear();
      output.add(new TryAVM2Item(tryCommands,catchedExceptions,catchedCommands,finallyCommands));
      ip=returnPos;
    }
  }
  if (ip != part.start) {
    part=null;
    for (    GraphPart p : allParts) {
      List<GraphPart> ps=p.getSubParts();
      for (      GraphPart p2 : ps) {
        if (p2.start == ip) {
          part=p2;
          break;
        }
      }
    }
    ret=new ArrayList<>();
    ret.addAll(output);
    GraphTargetItem lop=checkLoop(part,stopPart,loops);
    if (lop == null) {
      ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,part,stopPart,loops,staticOperation,path));
    }
 else {
      ret.add(lop);
    }
    return ret;
  }
  if (part.nextParts.isEmpty()) {
    if (this.code.code.get(part.end).definition instanceof ReturnValueIns) {
      if (part.getHeight() >= 3) {
        if (this.code.code.get(part.getPosAt(part.getHeight() - 2)).definition instanceof KillIns) {
          if (this.code.code.get(part.getPosAt(part.getHeight() - 3)).definition instanceof GetLocalTypeIns) {
            if (output.size() >= 2) {
              if (output.get(output.size() - 2) instanceof SetLocalAVM2Item) {
                ret=new ArrayList<>();
                ret.addAll(output);
                ret.remove(ret.size() - 1);
                ret.add(new ReturnValueAVM2Item(this.code.code.get(part.end),((SetLocalAVM2Item)output.get(output.size() - 2)).value));
                return ret;
              }
            }
          }
        }
      }
    }
  }
  if ((this.code.code.get(part.end).definition instanceof LookupSwitchIns) && ignoredSwitches.contains(part.end)) {
    ret=new ArrayList<>();
    ret.addAll(output);
    return ret;
  }
  if (((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictEqAVM2Item)&& (part.nextParts.get(0).getHeight() >= 2)&& (this.code.code.get(this.code.fixIPAfterDebugLine(part.nextParts.get(0).start)).definition instanceof PushIntegerTypeIns)&& (!part.nextParts.get(0).nextParts.isEmpty())&& (this.code.code.get(part.nextParts.get(0).nextParts.get(0).end).definition instanceof LookupSwitchIns)) || ((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictNeqAVM2Item)&& (part.nextParts.get(1).getHeight() >= 2)&& (this.code.code.get(this.code.fixIPAfterDebugLine(part.nextParts.get(1).start)).definition instanceof PushIntegerTypeIns)&& (!part.nextParts.get(1).nextParts.isEmpty())&& (this.code.code.get(part.nextParts.get(1).nextParts.get(0).end).definition instanceof LookupSwitchIns))) {
    if (stack.peek() instanceof StrictEqAVM2Item) {
      ignoredSwitches.add(part.nextParts.get(0).nextParts.get(0).end);
    }
 else {
      ignoredSwitches.add(part.nextParts.get(1).nextParts.get(0).end);
    }
    ret=new ArrayList<>();
    ret.addAll(output);
    boolean reversed=false;
    if (stack.peek() instanceof StrictEqAVM2Item) {
      reversed=true;
    }
    GraphTargetItem switchedObject=null;
    if (!output.isEmpty()) {
      if (output.get(output.size() - 1) instanceof SetLocalAVM2Item) {
        switchedObject=((SetLocalAVM2Item)output.get(output.size() - 1)).value;
      }
    }
    if (switchedObject == null) {
      switchedObject=new NullAVM2Item(null);
    }
    HashMap<Integer,GraphTargetItem> caseValuesMap=new HashMap<>();
    GraphTargetItem tar=stack.pop();
    if (tar instanceof StrictEqAVM2Item) {
      tar=((StrictEqAVM2Item)tar).leftSide;
    }
    if (tar instanceof StrictNeqAVM2Item) {
      tar=((StrictNeqAVM2Item)tar).leftSide;
    }
    caseValuesMap.put(this.code.code.get(part.nextParts.get(reversed ? 0 : 1).start).operands[0],tar);
    GraphPart switchLoc=part.nextParts.get(reversed ? 0 : 1).nextParts.get(0);
    while ((this.code.code.get(part.nextParts.get(reversed ? 1 : 0).end).definition instanceof IfStrictNeIns) || (this.code.code.get(part.nextParts.get(reversed ? 1 : 0).end).definition instanceof IfStrictEqIns)) {
      part=part.nextParts.get(reversed ? 1 : 0);
      translatePart(localData,part,stack,staticOperation,null);
      tar=stack.pop();
      if (tar instanceof StrictEqAVM2Item) {
        tar=((StrictEqAVM2Item)tar).leftSide;
      }
      if (tar instanceof StrictNeqAVM2Item) {
        tar=((StrictNeqAVM2Item)tar).leftSide;
      }
      if (this.code.code.get(part.end).definition instanceof IfStrictNeIns) {
        reversed=false;
      }
 else {
        reversed=true;
      }
      GraphPart numPart=part.nextParts.get(reversed ? 0 : 1);
      AVM2Instruction ins=null;
      Stack<GraphTargetItem> sstack=new Stack<>();
      do {
        for (int n=0; n < numPart.getHeight(); n++) {
          ins=this.code.code.get(numPart.getPosAt(n));
          if (ins.definition instanceof LookupSwitchIns) {
            break;
          }
          ins.translate(localData,sstack,new ArrayList<GraphTargetItem>(),staticOperation,path);
        }
        if (numPart.nextParts.size() > 1) {
          break;
        }
 else {
          numPart=numPart.nextParts.get(0);
        }
      }
 while (!(this.code.code.get(numPart.end).definition instanceof LookupSwitchIns));
      GraphTargetItem nt=sstack.peek();
      if (!(nt instanceof IntegerValueAVM2Item)) {
        throw new RuntimeException(""String_Node_Str"");
      }
      IntegerValueAVM2Item iv=(IntegerValueAVM2Item)nt;
      caseValuesMap.put((int)(long)iv.value,tar);
      while (this.code.code.get(part.nextParts.get(reversed ? 1 : 0).start).definition instanceof JumpIns) {
        reversed=false;
        part=part.nextParts.get(reversed ? 1 : 0);
        if (part instanceof GraphPartMulti) {
          part=((GraphPartMulti)part).parts.get(0);
        }
      }
    }
    boolean hasDefault=false;
    GraphPart dp=part.nextParts.get(reversed ? 1 : 0);
    while (this.code.code.get(dp.start).definition instanceof JumpIns) {
      if (dp instanceof GraphPartMulti) {
        dp=((GraphPartMulti)dp).parts.get(0);
      }
      dp=dp.nextParts.get(0);
    }
    GraphPart numPart=dp;
    AVM2Instruction ins=null;
    Stack<GraphTargetItem> sstack=new Stack<>();
    do {
      for (int n=0; n < numPart.getHeight(); n++) {
        ins=this.code.code.get(numPart.getPosAt(n));
        if (ins.definition instanceof LookupSwitchIns) {
          break;
        }
        ins.translate(localData,sstack,new ArrayList<GraphTargetItem>(),staticOperation,path);
      }
      if (numPart.nextParts.size() > 1) {
        break;
      }
 else {
        numPart=numPart.nextParts.get(0);
      }
    }
 while (!(this.code.code.get(numPart.end).definition instanceof LookupSwitchIns));
    GraphTargetItem nt=sstack.peek();
    if (nt instanceof IntegerValueAVM2Item) {
      hasDefault=true;
    }
    List<GraphTargetItem> caseValues=new ArrayList<>();
    for (int i=0; i < switchLoc.nextParts.size() - 1; i++) {
      if (caseValuesMap.containsKey(i)) {
        caseValues.add(caseValuesMap.get(i));
      }
 else {
        continue;
      }
    }
    List<List<GraphTargetItem>> caseCommands=new ArrayList<>();
    GraphPart next=null;
    next=getMostCommonPart(switchLoc.nextParts,loops);
    currentLoop=new Loop(loops.size(),null,next);
    currentLoop.phase=1;
    loops.add(currentLoop);
    List<Integer> valuesMapping=new ArrayList<>();
    List<GraphPart> caseBodies=new ArrayList<>();
    for (int i=0; i < caseValues.size(); i++) {
      GraphPart cur=switchLoc.nextParts.get(1 + i);
      if (!caseBodies.contains(cur)) {
        caseBodies.add(cur);
      }
      valuesMapping.add(caseBodies.indexOf(cur));
    }
    List<GraphTargetItem> defaultCommands=new ArrayList<>();
    GraphPart defaultPart=null;
    if (hasDefault) {
      defaultPart=switchLoc.nextParts.get(switchLoc.nextParts.size() - 1);
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(next);
      defaultCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,switchLoc,defaultPart,stopPart2,loops,staticOperation,path);
      if (!defaultCommands.isEmpty()) {
        if (defaultCommands.get(defaultCommands.size() - 1) instanceof BreakItem) {
          if (((BreakItem)defaultCommands.get(defaultCommands.size() - 1)).loopId == currentLoop.id) {
            defaultCommands.remove(defaultCommands.size() - 1);
          }
        }
      }
    }
    List<GraphPart> ignored=new ArrayList<>();
    for (    Loop l : loops) {
      ignored.add(l.loopContinue);
    }
    for (int i=0; i < caseBodies.size(); i++) {
      List<GraphTargetItem> cc=new ArrayList<>();
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      for (int j=0; j < caseBodies.size(); j++) {
        if (caseBodies.get(j) != caseBodies.get(i)) {
          stopPart2.add(caseBodies.get(j));
        }
      }
      if (hasDefault) {
        stopPart2.add(defaultPart);
      }
      cc.addAll(0,printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,switchLoc,caseBodies.get(i),stopPart2,loops,staticOperation,path));
      caseCommands.add(cc);
    }
    SwitchItem sti=new SwitchItem(null,currentLoop,switchedObject,caseValues,caseCommands,defaultCommands,valuesMapping);
    ret.add(sti);
    if (next != null) {
      currentLoop.phase=2;
      ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,next,stopPart,loops,staticOperation,path));
    }
  }
  return ret;
}",0.976026854989391
62044,"public static String convertShape(HashMap<Integer,CharacterTag> characters,MATRIX mat,int shapeNum,List<SHAPERECORD> shapeRecords,FILLSTYLEARRAY fillStyles,LINESTYLEARRAY lineStyles,boolean morphshape){
  String ret=""String_Node_Str"";
  if (mat == null) {
    mat=new MATRIX();
  }
  List<SHAPERECORD> edges=new ArrayList<>();
  int lineStyleCount=0;
  int fillStyle0=-1;
  int fillStyle1=-1;
  int strokeStyle=-1;
  String fillsStr=""String_Node_Str"";
  String strokesStr=""String_Node_Str"";
  fillsStr+=""String_Node_Str"";
  strokesStr+=""String_Node_Str"";
  List<String> layers=new ArrayList<>();
  String currentLayer=""String_Node_Str"";
  int fillStyleCount=0;
  if (fillStyles != null) {
    for (    FILLSTYLE fs : fillStyles.fillStyles) {
      fillsStr+=""String_Node_Str"" + (fillStyleCount + 1) + ""String_Node_Str"";
      fillsStr+=convertFillStyle(mat,characters,fs,shapeNum);
      fillsStr+=""String_Node_Str"";
      fillStyleCount++;
    }
  }
  if (lineStyles != null) {
    if ((shapeNum == 4) && (lineStyles.lineStyles2 != null)) {
      for (int l=0; l < lineStyles.lineStyles2.length; l++) {
        strokesStr+=""String_Node_Str"" + (lineStyleCount + 1) + ""String_Node_Str"";
        strokesStr+=convertLineStyle(characters,lineStyles.lineStyles2[l],shapeNum);
        strokesStr+=""String_Node_Str"";
        lineStyleCount++;
      }
    }
 else     if (lineStyles.lineStyles != null) {
      for (int l=0; l < lineStyles.lineStyles.length; l++) {
        strokesStr+=""String_Node_Str"" + (lineStyleCount + 1) + ""String_Node_Str"";
        strokesStr+=convertLineStyle(lineStyles.lineStyles[l],shapeNum);
        strokesStr+=""String_Node_Str"";
        lineStyleCount++;
      }
    }
  }
  fillsStr+=""String_Node_Str"";
  strokesStr+=""String_Node_Str"";
  int layer=1;
  if ((fillStyleCount > 0) || (lineStyleCount > 0)) {
    currentLayer+=""String_Node_Str"" + (layer++) + ""String_Node_Str"";
    currentLayer+=""String_Node_Str"";
    currentLayer+=""String_Node_Str"" + KEY_MODE_SHAPE_LAYERS + ""String_Node_Str"";
    currentLayer+=""String_Node_Str"";
    currentLayer+=""String_Node_Str"";
    currentLayer+=fillsStr;
    currentLayer+=strokesStr;
    currentLayer+=""String_Node_Str"";
  }
  int x=0;
  int y=0;
  int startEdgeX=0;
  int startEdgeY=0;
  LINESTYLEARRAY actualLinestyles=lineStyles;
  int strokeStyleOrig=0;
  fillStyleCount=fillStyles.fillStyles.length;
  for (  SHAPERECORD edge : shapeRecords) {
    if (edge instanceof StyleChangeRecord) {
      StyleChangeRecord scr=(StyleChangeRecord)edge;
      boolean styleChange=false;
      int lastFillStyle1=fillStyle1;
      int lastFillStyle0=fillStyle0;
      int lastStrokeStyle=strokeStyle;
      if (scr.stateNewStyles) {
        fillsStr=""String_Node_Str"";
        strokesStr=""String_Node_Str"";
        if (fillStyleCount > 0 || lineStyleCount > 0) {
          if ((fillStyle0 > 0) || (fillStyle1 > 0) || (strokeStyle > 0)) {
            boolean empty=false;
            if ((fillStyle0 <= 0) && (fillStyle1 <= 0) && (strokeStyle > 0)&& morphshape) {
              if (shapeNum == 4) {
                if (strokeStyleOrig > 0) {
                  if (!actualLinestyles.lineStyles2[strokeStyleOrig].hasFillFlag) {
                    if (actualLinestyles.lineStyles2[strokeStyleOrig].color.alpha == 0) {
                      if (actualLinestyles.lineStyles2[strokeStyleOrig].color.red == 0) {
                        if (actualLinestyles.lineStyles2[strokeStyleOrig].color.green == 0) {
                          if (actualLinestyles.lineStyles2[strokeStyleOrig].color.blue == 0) {
                            empty=true;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (!empty) {
              currentLayer+=""String_Node_Str"";
              if (fillStyle0 > -1) {
                currentLayer+=""String_Node_Str"" + fillStyle0 + ""String_Node_Str"";
              }
              if (fillStyle1 > -1) {
                currentLayer+=""String_Node_Str"" + fillStyle1 + ""String_Node_Str"";
              }
              if (strokeStyle > -1) {
                currentLayer+=""String_Node_Str"" + strokeStyle + ""String_Node_Str"";
              }
              currentLayer+=""String_Node_Str"" + convertShapeEdges(startEdgeX,startEdgeY,mat,edges) + ""String_Node_Str"";
            }
          }
          currentLayer+=""String_Node_Str"";
          currentLayer+=""String_Node_Str"";
          currentLayer+=""String_Node_Str"";
          currentLayer+=""String_Node_Str"";
          currentLayer+=""String_Node_Str"";
          currentLayer+=""String_Node_Str"";
          layers.add(currentLayer);
          currentLayer=""String_Node_Str"";
        }
        currentLayer+=""String_Node_Str"" + (layer++) + ""String_Node_Str"";
        currentLayer+=""String_Node_Str"";
        currentLayer+=""String_Node_Str"" + KEY_MODE_SHAPE_LAYERS + ""String_Node_Str"";
        currentLayer+=""String_Node_Str"";
        currentLayer+=""String_Node_Str"";
        for (int f=0; f < scr.fillStyles.fillStyles.length; f++) {
          fillsStr+=""String_Node_Str"" + (f + 1) + ""String_Node_Str"";
          fillsStr+=convertFillStyle(mat,characters,scr.fillStyles.fillStyles[f],shapeNum);
          fillsStr+=""String_Node_Str"";
          fillStyleCount++;
        }
        if (shapeNum == 4) {
          for (int l=0; l < scr.lineStyles.lineStyles2.length; l++) {
            strokesStr+=""String_Node_Str"" + (lineStyleCount + 1) + ""String_Node_Str"";
            strokesStr+=convertLineStyle(characters,scr.lineStyles.lineStyles2[l],shapeNum);
            strokesStr+=""String_Node_Str"";
            lineStyleCount++;
          }
        }
 else {
          for (int l=0; l < scr.lineStyles.lineStyles.length; l++) {
            strokesStr+=""String_Node_Str"" + (lineStyleCount + 1) + ""String_Node_Str"";
            strokesStr+=convertLineStyle(scr.lineStyles.lineStyles[l],shapeNum);
            strokesStr+=""String_Node_Str"";
            lineStyleCount++;
          }
        }
        fillsStr+=""String_Node_Str"";
        strokesStr+=""String_Node_Str"";
        currentLayer+=fillsStr;
        currentLayer+=strokesStr;
        currentLayer+=""String_Node_Str"";
        actualLinestyles=scr.lineStyles;
      }
      if (scr.stateFillStyle0) {
        int fillStyle0_new=scr.fillStyle0;
        if (morphshape) {
          fillStyle1=fillStyle0_new;
        }
 else {
          fillStyle0=fillStyle0_new;
        }
        styleChange=true;
      }
      if (scr.stateFillStyle1) {
        int fillStyle1_new=scr.fillStyle1;
        if (morphshape) {
          fillStyle0=fillStyle1_new;
        }
 else {
          fillStyle1=fillStyle1_new;
        }
        styleChange=true;
      }
      if (scr.stateLineStyle) {
        strokeStyle=scr.lineStyle;
        strokeStyleOrig=scr.lineStyle - 1;
        styleChange=true;
      }
      if (!edges.isEmpty()) {
        if ((fillStyle0 > 0) || (fillStyle1 > 0) || (strokeStyle > 0)) {
          boolean empty=false;
          if ((fillStyle0 <= 0) && (fillStyle1 <= 0) && (strokeStyle > 0)&& morphshape) {
            if (shapeNum == 4) {
              if (strokeStyleOrig > 0) {
                if (!actualLinestyles.lineStyles2[strokeStyleOrig].hasFillFlag) {
                  if (actualLinestyles.lineStyles2[strokeStyleOrig].color.alpha == 0) {
                    if (actualLinestyles.lineStyles2[strokeStyleOrig].color.red == 0) {
                      if (actualLinestyles.lineStyles2[strokeStyleOrig].color.green == 0) {
                        if (actualLinestyles.lineStyles2[strokeStyleOrig].color.blue == 0) {
                          empty=true;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (!empty) {
            currentLayer+=""String_Node_Str"";
            if (fillStyle0 > -1) {
              currentLayer+=""String_Node_Str"" + lastFillStyle0 + ""String_Node_Str"";
            }
            if (fillStyle1 > -1) {
              currentLayer+=""String_Node_Str"" + lastFillStyle1 + ""String_Node_Str"";
            }
            if (strokeStyle > -1) {
              currentLayer+=""String_Node_Str"" + lastStrokeStyle + ""String_Node_Str"";
            }
            currentLayer+=""String_Node_Str"" + convertShapeEdges(startEdgeX,startEdgeY,mat,edges) + ""String_Node_Str"";
          }
          startEdgeX=x;
          startEdgeY=y;
        }
        edges.clear();
      }
    }
    edges.add(edge);
    x=edge.changeX(x);
    y=edge.changeY(y);
  }
  if (!edges.isEmpty()) {
    if ((fillStyle0 > 0) || (fillStyle1 > 0) || (strokeStyle > 0)) {
      boolean empty=false;
      if ((fillStyle0 <= 0) && (fillStyle1 <= 0) && (strokeStyle > 0)&& morphshape) {
        if (shapeNum == 4) {
          if (strokeStyleOrig > 0) {
            if (!actualLinestyles.lineStyles2[strokeStyleOrig].hasFillFlag) {
              if (actualLinestyles.lineStyles2[strokeStyleOrig].color.alpha == 0) {
                if (actualLinestyles.lineStyles2[strokeStyleOrig].color.red == 0) {
                  if (actualLinestyles.lineStyles2[strokeStyleOrig].color.green == 0) {
                    if (actualLinestyles.lineStyles2[strokeStyleOrig].color.blue == 0) {
                      empty=true;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (!empty) {
        currentLayer+=""String_Node_Str"";
        if (fillStyle0 > -1) {
          currentLayer+=""String_Node_Str"" + fillStyle0 + ""String_Node_Str"";
        }
        if (fillStyle1 > -1) {
          currentLayer+=""String_Node_Str"" + fillStyle1 + ""String_Node_Str"";
        }
        if (strokeStyle > -1) {
          currentLayer+=""String_Node_Str"" + strokeStyle + ""String_Node_Str"";
        }
        currentLayer+=""String_Node_Str"" + convertShapeEdges(startEdgeX,startEdgeY,mat,edges) + ""String_Node_Str"";
      }
    }
  }
  edges.clear();
  fillsStr+=""String_Node_Str"";
  strokesStr+=""String_Node_Str"";
  currentLayer+=""String_Node_Str"";
  currentLayer+=""String_Node_Str"";
  currentLayer+=""String_Node_Str"";
  currentLayer+=""String_Node_Str"";
  currentLayer+=""String_Node_Str"";
  currentLayer+=""String_Node_Str"";
  layers.add(currentLayer);
  for (int l=layers.size() - 1; l >= 0; l--) {
    ret+=layers.get(l);
  }
  return ret;
}","public static String convertShape(HashMap<Integer,CharacterTag> characters,MATRIX mat,int shapeNum,List<SHAPERECORD> shapeRecords,FILLSTYLEARRAY fillStyles,LINESTYLEARRAY lineStyles,boolean morphshape){
  String ret=""String_Node_Str"";
  if (mat == null) {
    mat=new MATRIX();
  }
  List<SHAPERECORD> edges=new ArrayList<>();
  int lineStyleCount=0;
  int fillStyle0=-1;
  int fillStyle1=-1;
  int strokeStyle=-1;
  String fillsStr=""String_Node_Str"";
  String strokesStr=""String_Node_Str"";
  fillsStr+=""String_Node_Str"";
  strokesStr+=""String_Node_Str"";
  List<String> layers=new ArrayList<>();
  String currentLayer=""String_Node_Str"";
  int fillStyleCount=0;
  if (fillStyles != null) {
    for (    FILLSTYLE fs : fillStyles.fillStyles) {
      fillsStr+=""String_Node_Str"" + (fillStyleCount + 1) + ""String_Node_Str"";
      fillsStr+=convertFillStyle(mat,characters,fs,shapeNum);
      fillsStr+=""String_Node_Str"";
      fillStyleCount++;
    }
  }
  if (lineStyles != null) {
    if ((shapeNum == 4) && (lineStyles.lineStyles2 != null)) {
      for (int l=0; l < lineStyles.lineStyles2.length; l++) {
        strokesStr+=""String_Node_Str"" + (lineStyleCount + 1) + ""String_Node_Str"";
        strokesStr+=convertLineStyle(characters,lineStyles.lineStyles2[l],shapeNum);
        strokesStr+=""String_Node_Str"";
        lineStyleCount++;
      }
    }
 else     if (lineStyles.lineStyles != null) {
      for (int l=0; l < lineStyles.lineStyles.length; l++) {
        strokesStr+=""String_Node_Str"" + (lineStyleCount + 1) + ""String_Node_Str"";
        strokesStr+=convertLineStyle(lineStyles.lineStyles[l],shapeNum);
        strokesStr+=""String_Node_Str"";
        lineStyleCount++;
      }
    }
  }
  fillsStr+=""String_Node_Str"";
  strokesStr+=""String_Node_Str"";
  int layer=1;
  if ((fillStyleCount > 0) || (lineStyleCount > 0)) {
    currentLayer+=""String_Node_Str"" + (layer++) + ""String_Node_Str"";
    currentLayer+=""String_Node_Str"";
    currentLayer+=""String_Node_Str"" + KEY_MODE_SHAPE_LAYERS + ""String_Node_Str"";
    currentLayer+=""String_Node_Str"";
    currentLayer+=""String_Node_Str"";
    currentLayer+=fillsStr;
    currentLayer+=strokesStr;
    currentLayer+=""String_Node_Str"";
  }
  int x=0;
  int y=0;
  int startEdgeX=0;
  int startEdgeY=0;
  LINESTYLEARRAY actualLinestyles=lineStyles;
  int strokeStyleOrig=0;
  fillStyleCount=fillStyles.fillStyles.length;
  for (  SHAPERECORD edge : shapeRecords) {
    if (edge instanceof StyleChangeRecord) {
      StyleChangeRecord scr=(StyleChangeRecord)edge;
      boolean styleChange=false;
      int lastFillStyle1=fillStyle1;
      int lastFillStyle0=fillStyle0;
      int lastStrokeStyle=strokeStyle;
      if (scr.stateNewStyles) {
        fillsStr=""String_Node_Str"";
        strokesStr=""String_Node_Str"";
        if (fillStyleCount > 0 || lineStyleCount > 0) {
          if ((fillStyle0 > 0) || (fillStyle1 > 0) || (strokeStyle > 0)) {
            boolean empty=false;
            if ((fillStyle0 <= 0) && (fillStyle1 <= 0) && (strokeStyle > 0)&& morphshape) {
              if (shapeNum == 4) {
                if (strokeStyleOrig > 0) {
                  if (!actualLinestyles.lineStyles2[strokeStyleOrig].hasFillFlag) {
                    if (actualLinestyles.lineStyles2[strokeStyleOrig].color.alpha == 0) {
                      if (actualLinestyles.lineStyles2[strokeStyleOrig].color.red == 0) {
                        if (actualLinestyles.lineStyles2[strokeStyleOrig].color.green == 0) {
                          if (actualLinestyles.lineStyles2[strokeStyleOrig].color.blue == 0) {
                            empty=true;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (!empty) {
              currentLayer+=""String_Node_Str"";
              if (fillStyle0 > -1) {
                currentLayer+=""String_Node_Str"" + fillStyle0 + ""String_Node_Str"";
              }
              if (fillStyle1 > -1) {
                currentLayer+=""String_Node_Str"" + fillStyle1 + ""String_Node_Str"";
              }
              if (strokeStyle > -1) {
                currentLayer+=""String_Node_Str"" + strokeStyle + ""String_Node_Str"";
              }
              currentLayer+=""String_Node_Str"" + convertShapeEdges(startEdgeX,startEdgeY,mat,edges) + ""String_Node_Str"";
            }
          }
          currentLayer+=""String_Node_Str"";
          currentLayer+=""String_Node_Str"";
          currentLayer+=""String_Node_Str"";
          currentLayer+=""String_Node_Str"";
          currentLayer+=""String_Node_Str"";
          currentLayer+=""String_Node_Str"";
          layers.add(currentLayer);
          currentLayer=""String_Node_Str"";
        }
        currentLayer+=""String_Node_Str"" + (layer++) + ""String_Node_Str"";
        currentLayer+=""String_Node_Str"";
        currentLayer+=""String_Node_Str"" + KEY_MODE_SHAPE_LAYERS + ""String_Node_Str"";
        currentLayer+=""String_Node_Str"";
        currentLayer+=""String_Node_Str"";
        for (int f=0; f < scr.fillStyles.fillStyles.length; f++) {
          fillsStr+=""String_Node_Str"" + (f + 1) + ""String_Node_Str"";
          fillsStr+=convertFillStyle(mat,characters,scr.fillStyles.fillStyles[f],shapeNum);
          fillsStr+=""String_Node_Str"";
          fillStyleCount++;
        }
        if (shapeNum == 4) {
          for (int l=0; l < scr.lineStyles.lineStyles2.length; l++) {
            strokesStr+=""String_Node_Str"" + (lineStyleCount + 1) + ""String_Node_Str"";
            strokesStr+=convertLineStyle(characters,scr.lineStyles.lineStyles2[l],shapeNum);
            strokesStr+=""String_Node_Str"";
            lineStyleCount++;
          }
        }
 else {
          for (int l=0; l < scr.lineStyles.lineStyles.length; l++) {
            strokesStr+=""String_Node_Str"" + (lineStyleCount + 1) + ""String_Node_Str"";
            strokesStr+=convertLineStyle(scr.lineStyles.lineStyles[l],shapeNum);
            strokesStr+=""String_Node_Str"";
            lineStyleCount++;
          }
        }
        fillsStr+=""String_Node_Str"";
        strokesStr+=""String_Node_Str"";
        currentLayer+=fillsStr;
        currentLayer+=strokesStr;
        currentLayer+=""String_Node_Str"";
        actualLinestyles=scr.lineStyles;
      }
      if (scr.stateFillStyle0) {
        int fillStyle0_new=scr.fillStyle0;
        if (morphshape) {
          fillStyle1=fillStyle0_new;
        }
 else {
          fillStyle0=fillStyle0_new;
        }
        styleChange=true;
      }
      if (scr.stateFillStyle1) {
        int fillStyle1_new=scr.fillStyle1;
        if (morphshape) {
          fillStyle0=fillStyle1_new;
        }
 else {
          fillStyle1=fillStyle1_new;
        }
        styleChange=true;
      }
      if (scr.stateLineStyle) {
        strokeStyle=scr.lineStyle;
        strokeStyleOrig=scr.lineStyle - 1;
        styleChange=true;
      }
      if (!edges.isEmpty()) {
        if ((fillStyle0 > 0) || (fillStyle1 > 0) || (strokeStyle > 0)) {
          boolean empty=false;
          if ((fillStyle0 <= 0) && (fillStyle1 <= 0) && (strokeStyle > 0)&& morphshape) {
            if (shapeNum == 4) {
              if (strokeStyleOrig > 0) {
                if (!actualLinestyles.lineStyles2[strokeStyleOrig].hasFillFlag) {
                  if (actualLinestyles.lineStyles2[strokeStyleOrig].color.alpha == 0) {
                    if (actualLinestyles.lineStyles2[strokeStyleOrig].color.red == 0) {
                      if (actualLinestyles.lineStyles2[strokeStyleOrig].color.green == 0) {
                        if (actualLinestyles.lineStyles2[strokeStyleOrig].color.blue == 0) {
                          empty=true;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (!empty) {
            currentLayer+=""String_Node_Str"";
            if (fillStyle0 > -1) {
              currentLayer+=""String_Node_Str"" + lastFillStyle0 + ""String_Node_Str"";
            }
            if (fillStyle1 > -1) {
              currentLayer+=""String_Node_Str"" + lastFillStyle1 + ""String_Node_Str"";
            }
            if (strokeStyle > -1) {
              currentLayer+=""String_Node_Str"" + lastStrokeStyle + ""String_Node_Str"";
            }
            currentLayer+=""String_Node_Str"" + convertShapeEdges(startEdgeX,startEdgeY,mat,edges) + ""String_Node_Str"";
          }
          startEdgeX=x;
          startEdgeY=y;
        }
        edges.clear();
      }
    }
    edges.add(edge);
    x=edge.changeX(x);
    y=edge.changeY(y);
  }
  if (!edges.isEmpty()) {
    if ((fillStyle0 > 0) || (fillStyle1 > 0) || (strokeStyle > 0)) {
      boolean empty=false;
      if ((fillStyle0 <= 0) && (fillStyle1 <= 0) && (strokeStyle > 0)&& morphshape) {
        if (shapeNum == 4) {
          if (strokeStyleOrig > 0) {
            if (!actualLinestyles.lineStyles2[strokeStyleOrig].hasFillFlag) {
              if (actualLinestyles.lineStyles2[strokeStyleOrig].color.alpha == 0) {
                if (actualLinestyles.lineStyles2[strokeStyleOrig].color.red == 0) {
                  if (actualLinestyles.lineStyles2[strokeStyleOrig].color.green == 0) {
                    if (actualLinestyles.lineStyles2[strokeStyleOrig].color.blue == 0) {
                      empty=true;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (!empty) {
        currentLayer+=""String_Node_Str"";
        if (fillStyle0 > -1) {
          currentLayer+=""String_Node_Str"" + fillStyle0 + ""String_Node_Str"";
        }
        if (fillStyle1 > -1) {
          currentLayer+=""String_Node_Str"" + fillStyle1 + ""String_Node_Str"";
        }
        if (strokeStyle > -1) {
          currentLayer+=""String_Node_Str"" + strokeStyle + ""String_Node_Str"";
        }
        currentLayer+=""String_Node_Str"" + convertShapeEdges(startEdgeX,startEdgeY,mat,edges) + ""String_Node_Str"";
      }
    }
  }
  edges.clear();
  fillsStr+=""String_Node_Str"";
  strokesStr+=""String_Node_Str"";
  if (!currentLayer.equals(""String_Node_Str"")) {
    currentLayer+=""String_Node_Str"";
    currentLayer+=""String_Node_Str"";
    currentLayer+=""String_Node_Str"";
    currentLayer+=""String_Node_Str"";
    currentLayer+=""String_Node_Str"";
    currentLayer+=""String_Node_Str"";
    layers.add(currentLayer);
  }
  for (int l=layers.size() - 1; l >= 0; l--) {
    ret+=layers.get(l);
  }
  return ret;
}",0.9963999423990784
62045,"/** 
 * Sets windows Look and Feel
 */
public static void setLookAndFeel(){
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  UnsupportedLookAndFeelException|ClassNotFoundException|InstantiationException|IllegalAccessException ignored) {
  }
  try {
    SwingUtilities.invokeAndWait(new Runnable(){
      @Override public void run(){
        try {
          UIManager.setLookAndFeel(new SubstanceOfficeBlue2007LookAndFeel());
          UIManager.put(SubstanceLookAndFeel.COLORIZATION_FACTOR,1.0);
          UIManager.put(""String_Node_Str"",getIcon(""String_Node_Str""));
          UIManager.put(""String_Node_Str"",getIcon(""String_Node_Str""));
          UIManager.put(""String_Node_Str"",MyRibbonApplicationMenuPopupPanelUI.class.getName());
          UIManager.put(""String_Node_Str"",MyRibbonApplicationMenuButtonUI.class.getName());
        }
 catch (        UnsupportedLookAndFeelException ex) {
          Logger.getLogger(View.class.getName()).log(Level.SEVERE,null,ex);
        }
      }
    }
);
  }
 catch (  InterruptedException|InvocationTargetException ex) {
    Logger.getLogger(View.class.getName()).log(Level.SEVERE,null,ex);
  }
  UIManager.put(SubstanceLookAndFeel.TABBED_PANE_CONTENT_BORDER_KIND,SubstanceConstants.TabContentPaneBorderKind.SINGLE_FULL);
  JFrame.setDefaultLookAndFeelDecorated(true);
  JDialog.setDefaultLookAndFeelDecorated(true);
}","/** 
 * Sets windows Look and Feel
 */
public static void setLookAndFeel(){
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  UnsupportedLookAndFeelException|ClassNotFoundException|InstantiationException|IllegalAccessException ignored) {
  }
  try {
    SwingUtilities.invokeAndWait(new Runnable(){
      @Override public void run(){
        try {
          UIManager.setLookAndFeel(new SubstanceOfficeBlue2007LookAndFeel());
          UIManager.put(SubstanceLookAndFeel.COLORIZATION_FACTOR,1.0);
          UIManager.put(""String_Node_Str"",getIcon(""String_Node_Str""));
          UIManager.put(""String_Node_Str"",getIcon(""String_Node_Str""));
          UIManager.put(""String_Node_Str"",MyRibbonApplicationMenuPopupPanelUI.class.getName());
          UIManager.put(""String_Node_Str"",MyRibbonApplicationMenuButtonUI.class.getName());
          UIManager.put(""String_Node_Str"",MyProgressBarUI.class.getName());
        }
 catch (        UnsupportedLookAndFeelException ex) {
          Logger.getLogger(View.class.getName()).log(Level.SEVERE,null,ex);
        }
      }
    }
);
  }
 catch (  InterruptedException|InvocationTargetException ex) {
    Logger.getLogger(View.class.getName()).log(Level.SEVERE,null,ex);
  }
  UIManager.put(SubstanceLookAndFeel.TABBED_PANE_CONTENT_BORDER_KIND,SubstanceConstants.TabContentPaneBorderKind.SINGLE_FULL);
  JFrame.setDefaultLookAndFeelDecorated(true);
  JDialog.setDefaultLookAndFeelDecorated(true);
}",0.9736294240111034
62046,"public HashMap<Integer,List<Integer>> visitCode(MethodBody body){
  HashMap<Integer,List<Integer>> refs=new HashMap<>();
  for (int i=0; i < code.size(); i++) {
    refs.put(i,new ArrayList<Integer>());
  }
  visitCode(0,0,refs);
  int pos=0;
  for (  ABCException e : body.exceptions) {
    pos++;
    try {
      visitCode(adr2pos(e.start),-pos,refs);
      visitCode(adr2pos(e.target),-pos,refs);
      visitCode(adr2pos(e.end),-pos,refs);
    }
 catch (    ConvertException ex) {
      Logger.getLogger(AVM2Code.class.getName()).log(Level.FINE,null,ex);
    }
  }
  return refs;
}","public HashMap<Integer,List<Integer>> visitCode(MethodBody body){
  HashMap<Integer,List<Integer>> refs=new HashMap<>();
  for (int i=0; i < code.size(); i++) {
    refs.put(i,new ArrayList<Integer>());
  }
  visitCode(0,0,refs);
  int pos=0;
  for (  ABCException e : body.exceptions) {
    pos++;
    try {
      visitCode(adr2pos(e.start),adr2pos(e.start) - 1,refs);
      visitCode(adr2pos(e.start),-1,refs);
      visitCode(adr2pos(e.target),adr2pos(e.end),refs);
      visitCode(adr2pos(e.end),-pos,refs);
    }
 catch (    ConvertException ex) {
      Logger.getLogger(AVM2Code.class.getName()).log(Level.FINE,null,ex);
    }
  }
  return refs;
}",0.9264349232012936
62047,"@Override protected List<GraphTargetItem> check(GraphSource code,List<Object> localData,List<GraphPart> allParts,Stack<GraphTargetItem> stack,GraphPart parent,GraphPart part,List<GraphPart> stopPart,List<Loop> loops,List<GraphTargetItem> output,Loop currentLoop,int staticOperation,String path){
  List<GraphTargetItem> ret=null;
  @SuppressWarnings(""String_Node_Str"") List<ABCException> parsedExceptions=(List<ABCException>)localData.get(DATA_PARSEDEXCEPTIONS);
  @SuppressWarnings(""String_Node_Str"") List<Integer> finallyJumps=(List<Integer>)localData.get(DATA_FINALLYJUMPS);
  @SuppressWarnings(""String_Node_Str"") List<Integer> ignoredSwitches=(List<Integer>)localData.get(DATA_IGNOREDSWITCHES);
  int ip=part.start;
  int addr=this.code.fixAddrAfterDebugLine(this.code.pos2adr(part.start));
  int maxend=-1;
  List<ABCException> catchedExceptions=new ArrayList<>();
  for (int e=0; e < body.exceptions.length; e++) {
    if (addr == this.code.fixAddrAfterDebugLine(body.exceptions[e].start)) {
      if (!body.exceptions[e].isFinally()) {
        if (((body.exceptions[e].end) > maxend) && (!parsedExceptions.contains(body.exceptions[e]))) {
          catchedExceptions.clear();
          maxend=this.code.fixAddrAfterDebugLine(body.exceptions[e].end);
          catchedExceptions.add(body.exceptions[e]);
        }
 else         if (this.code.fixAddrAfterDebugLine(body.exceptions[e].end) == maxend) {
          catchedExceptions.add(body.exceptions[e]);
        }
      }
    }
  }
  if (catchedExceptions.size() > 0) {
    parsedExceptions.addAll(catchedExceptions);
    int endpos=code.adr2pos(this.code.fixAddrAfterDebugLine(catchedExceptions.get(0).end));
    int endposStartBlock=code.adr2pos(catchedExceptions.get(0).end);
    List<List<GraphTargetItem>> catchedCommands=new ArrayList<>();
    if (this.code.code.get(endpos).definition instanceof JumpIns) {
      int afterCatchAddr=this.code.pos2adr(endpos + 1) + this.code.code.get(endpos).operands[0];
      int afterCatchPos=this.code.adr2pos(afterCatchAddr);
      final AVM2Graph t=this;
      Collections.sort(catchedExceptions,new Comparator<ABCException>(){
        @Override public int compare(        ABCException o1,        ABCException o2){
          return t.code.fixAddrAfterDebugLine(o1.target) - t.code.fixAddrAfterDebugLine(o2.target);
        }
      }
);
      List<GraphTargetItem> finallyCommands=new ArrayList<>();
      int returnPos=afterCatchPos;
      for (int e=0; e < body.exceptions.length; e++) {
        if (body.exceptions[e].isFinally()) {
          if (addr == this.code.fixAddrAfterDebugLine(body.exceptions[e].start)) {
            if (afterCatchPos + 1 == code.adr2pos(this.code.fixAddrAfterDebugLine(body.exceptions[e].end))) {
              AVM2Instruction jmpIns=this.code.code.get(code.adr2pos(this.code.fixAddrAfterDebugLine(body.exceptions[e].end)));
              if (jmpIns.definition instanceof JumpIns) {
                int finStart=code.adr2pos(this.code.fixAddrAfterDebugLine(body.exceptions[e].end) + jmpIns.getBytes().length + jmpIns.operands[0]);
                boolean switchFound=false;
                GraphPart fpart=null;
                for (                GraphPart p : allParts) {
                  if (p.start == finStart) {
                    fpart=p;
                    break;
                  }
                }
                for (int f=finStart; f < this.code.code.size(); f++) {
                  if (this.code.code.get(f).definition instanceof LookupSwitchIns) {
                    AVM2Instruction swins=this.code.code.get(f);
                    if (swins.operands.length >= 3) {
                      if (swins.operands[0] == swins.getBytes().length) {
                        if (code.adr2pos(code.pos2adr(f) + swins.operands[2]) < finStart) {
                          stack.push(new ExceptionAVM2Item(body.exceptions[e]));
                          GraphPart fepart=null;
                          for (                          GraphPart p : allParts) {
                            if (p.start == f + 1) {
                              fepart=p;
                              break;
                            }
                          }
                          ignoredSwitches.add(f);
                          List<GraphPart> stopPart2=new ArrayList<>(stopPart);
                          stopPart2.add(fepart);
                          finallyCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,fpart,stopPart2,loops,staticOperation,path);
                          returnPos=f + 1;
                          break;
                        }
                      }
                    }
                  }
                }
                if (!switchFound) {
                  finallyCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,fpart,null,loops,staticOperation,path);
                }
                finallyJumps.add(finStart);
                break;
              }
            }
          }
        }
      }
      List<GraphPart> catchParts=new ArrayList<>();
      for (int e=0; e < catchedExceptions.size(); e++) {
        int eendpos;
        if (e < catchedExceptions.size() - 1) {
          eendpos=code.adr2pos(this.code.fixAddrAfterDebugLine(catchedExceptions.get(e + 1).target)) - 2;
        }
 else {
          eendpos=afterCatchPos - 1;
        }
        GraphPart npart=null;
        int findpos=code.adr2pos(catchedExceptions.get(e).target);
        for (        GraphPart p : allParts) {
          if (p.start == findpos) {
            npart=p;
            catchParts.add(p);
            break;
          }
        }
        GraphPart nepart=null;
        for (        GraphPart p : allParts) {
          if (p.start == eendpos + 1) {
            nepart=p;
            break;
          }
        }
        stack.add(new ExceptionAVM2Item(catchedExceptions.get(e)));
        List<Object> localData2=new ArrayList<>();
        localData2.addAll(localData);
        localData2.set(DATA_SCOPESTACK,new Stack<GraphTargetItem>());
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(nepart);
        catchedCommands.add(printGraph(new ArrayList<GraphPart>(),localData2,stack,allParts,parent,npart,stopPart2,loops,staticOperation,path));
      }
      GraphPart nepart=null;
      for (      GraphPart p : allParts) {
        if (p.start == endposStartBlock) {
          nepart=p;
          break;
        }
      }
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(nepart);
      stopPart2.addAll(catchParts);
      List<GraphTargetItem> tryCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,part,stopPart2,loops,staticOperation,path);
      output.clear();
      output.add(new TryAVM2Item(tryCommands,catchedExceptions,catchedCommands,finallyCommands));
      ip=returnPos;
    }
  }
  if (ip != part.start) {
    part=null;
    for (    GraphPart p : allParts) {
      List<GraphPart> ps=p.getSubParts();
      for (      GraphPart p2 : ps) {
        if (p2.start == ip) {
          part=p2;
          break;
        }
      }
    }
    ret=new ArrayList<>();
    ret.addAll(output);
    GraphTargetItem lop=checkLoop(part,stopPart,loops);
    if (lop == null) {
      ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,part,stopPart,loops,staticOperation,path));
    }
 else {
      ret.add(lop);
    }
    return ret;
  }
  if (part.nextParts.isEmpty()) {
    if (this.code.code.get(part.end).definition instanceof ReturnValueIns) {
      if (part.getHeight() >= 3) {
        if (this.code.code.get(part.getPosAt(part.getHeight() - 2)).definition instanceof KillIns) {
          if (this.code.code.get(part.getPosAt(part.getHeight() - 3)).definition instanceof GetLocalTypeIns) {
            if (output.size() >= 2) {
              if (output.get(output.size() - 2) instanceof SetLocalAVM2Item) {
                ret=new ArrayList<>();
                ret.addAll(output);
                ret.remove(ret.size() - 1);
                ret.add(new ReturnValueAVM2Item(this.code.code.get(part.end),((SetLocalAVM2Item)output.get(output.size() - 2)).value));
                return ret;
              }
            }
          }
        }
      }
    }
  }
  if ((this.code.code.get(part.end).definition instanceof LookupSwitchIns) && ignoredSwitches.contains(part.end)) {
    ret=new ArrayList<>();
    ret.addAll(output);
    return ret;
  }
  if (((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictEqAVM2Item)&& (part.nextParts.get(0).getHeight() >= 2)&& (this.code.code.get(this.code.fixIPAfterDebugLine(part.nextParts.get(0).start)).definition instanceof PushIntegerTypeIns)&& (!part.nextParts.get(0).nextParts.isEmpty())&& (this.code.code.get(part.nextParts.get(0).nextParts.get(0).end).definition instanceof LookupSwitchIns)) || ((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictNeqAVM2Item)&& (part.nextParts.get(1).getHeight() >= 2)&& (this.code.code.get(this.code.fixIPAfterDebugLine(part.nextParts.get(1).start)).definition instanceof PushIntegerTypeIns)&& (!part.nextParts.get(1).nextParts.isEmpty())&& (this.code.code.get(part.nextParts.get(1).nextParts.get(0).end).definition instanceof LookupSwitchIns))) {
    if (stack.peek() instanceof StrictEqAVM2Item) {
      ignoredSwitches.add(part.nextParts.get(0).nextParts.get(0).end);
    }
 else {
      ignoredSwitches.add(part.nextParts.get(1).nextParts.get(0).end);
    }
    ret=new ArrayList<>();
    ret.addAll(output);
    boolean reversed=false;
    if (stack.peek() instanceof StrictEqAVM2Item) {
      reversed=true;
    }
    GraphTargetItem switchedObject=null;
    if (!output.isEmpty()) {
      if (output.get(output.size() - 1) instanceof SetLocalAVM2Item) {
        switchedObject=((SetLocalAVM2Item)output.get(output.size() - 1)).value;
      }
    }
    if (switchedObject == null) {
      switchedObject=new NullAVM2Item(null);
    }
    HashMap<Integer,GraphTargetItem> caseValuesMap=new HashMap<>();
    GraphTargetItem tar=stack.pop();
    if (tar instanceof StrictEqAVM2Item) {
      tar=((StrictEqAVM2Item)tar).leftSide;
    }
    if (tar instanceof StrictNeqAVM2Item) {
      tar=((StrictNeqAVM2Item)tar).leftSide;
    }
    caseValuesMap.put(this.code.code.get(part.nextParts.get(reversed ? 0 : 1).start).operands[0],tar);
    GraphPart switchLoc=part.nextParts.get(reversed ? 0 : 1).nextParts.get(0);
    while ((this.code.code.get(part.nextParts.get(reversed ? 1 : 0).end).definition instanceof IfStrictNeIns) || (this.code.code.get(part.nextParts.get(reversed ? 1 : 0).end).definition instanceof IfStrictEqIns)) {
      part=part.nextParts.get(reversed ? 1 : 0);
      translatePart(localData,part,stack,staticOperation,null);
      tar=stack.pop();
      if (tar instanceof StrictEqAVM2Item) {
        tar=((StrictEqAVM2Item)tar).leftSide;
      }
      if (tar instanceof StrictNeqAVM2Item) {
        tar=((StrictNeqAVM2Item)tar).leftSide;
      }
      if (this.code.code.get(part.end).definition instanceof IfStrictNeIns) {
        reversed=false;
      }
 else {
        reversed=true;
      }
      caseValuesMap.put(this.code.code.get(this.code.fixIPAfterDebugLine(part.nextParts.get(reversed ? 0 : 1).start)).operands[0],tar);
      while (this.code.code.get(part.nextParts.get(reversed ? 1 : 0).start).definition instanceof JumpIns) {
        reversed=false;
        part=part.nextParts.get(reversed ? 1 : 0);
        if (part instanceof GraphPartMulti) {
          part=((GraphPartMulti)part).parts.get(0);
        }
      }
    }
    boolean hasDefault=false;
    GraphPart dp=part.nextParts.get(reversed ? 1 : 0);
    while (this.code.code.get(dp.start).definition instanceof JumpIns) {
      if (dp instanceof GraphPartMulti) {
        dp=((GraphPartMulti)dp).parts.get(0);
      }
      dp=dp.nextParts.get(0);
    }
    if (this.code.code.get(dp.start).definition instanceof PushIntegerTypeIns) {
      hasDefault=true;
    }
    List<GraphTargetItem> caseValues=new ArrayList<>();
    for (int i=0; i < switchLoc.nextParts.size() - 1; i++) {
      if (caseValuesMap.containsKey(i)) {
        caseValues.add(caseValuesMap.get(i));
      }
 else {
        continue;
      }
    }
    List<List<GraphTargetItem>> caseCommands=new ArrayList<>();
    GraphPart next=null;
    next=getMostCommonPart(switchLoc.nextParts,loops);
    currentLoop=new Loop(loops.size(),null,next);
    currentLoop.phase=1;
    loops.add(currentLoop);
    List<Integer> valuesMapping=new ArrayList<>();
    List<GraphPart> caseBodies=new ArrayList<>();
    for (int i=0; i < caseValues.size(); i++) {
      GraphPart cur=switchLoc.nextParts.get(1 + i);
      if (!caseBodies.contains(cur)) {
        caseBodies.add(cur);
      }
      valuesMapping.add(caseBodies.indexOf(cur));
    }
    List<GraphTargetItem> defaultCommands=new ArrayList<>();
    GraphPart defaultPart=null;
    if (hasDefault) {
      defaultPart=switchLoc.nextParts.get(switchLoc.nextParts.size() - 1);
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(next);
      defaultCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,switchLoc,defaultPart,stopPart2,loops,staticOperation,path);
      if (!defaultCommands.isEmpty()) {
        if (defaultCommands.get(defaultCommands.size() - 1) instanceof BreakItem) {
          if (((BreakItem)defaultCommands.get(defaultCommands.size() - 1)).loopId == currentLoop.id) {
            defaultCommands.remove(defaultCommands.size() - 1);
          }
        }
      }
    }
    List<GraphPart> ignored=new ArrayList<>();
    for (    Loop l : loops) {
      ignored.add(l.loopContinue);
    }
    for (int i=0; i < caseBodies.size(); i++) {
      List<GraphTargetItem> cc=new ArrayList<>();
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      for (int j=0; j < caseBodies.size(); j++) {
        if (caseBodies.get(j) != caseBodies.get(i)) {
          stopPart2.add(caseBodies.get(j));
        }
      }
      if (hasDefault) {
        stopPart2.add(defaultPart);
      }
      cc.addAll(0,printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,switchLoc,caseBodies.get(i),stopPart2,loops,staticOperation,path));
      caseCommands.add(cc);
    }
    SwitchItem sti=new SwitchItem(null,currentLoop,switchedObject,caseValues,caseCommands,defaultCommands,valuesMapping);
    ret.add(sti);
    if (next != null) {
      currentLoop.phase=2;
      ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,next,stopPart,loops,staticOperation,path));
    }
  }
  return ret;
}","@Override protected List<GraphTargetItem> check(GraphSource code,List<Object> localData,List<GraphPart> allParts,Stack<GraphTargetItem> stack,GraphPart parent,GraphPart part,List<GraphPart> stopPart,List<Loop> loops,List<GraphTargetItem> output,Loop currentLoop,int staticOperation,String path){
  List<GraphTargetItem> ret=null;
  @SuppressWarnings(""String_Node_Str"") List<ABCException> parsedExceptions=(List<ABCException>)localData.get(DATA_PARSEDEXCEPTIONS);
  @SuppressWarnings(""String_Node_Str"") List<Integer> finallyJumps=(List<Integer>)localData.get(DATA_FINALLYJUMPS);
  @SuppressWarnings(""String_Node_Str"") List<Integer> ignoredSwitches=(List<Integer>)localData.get(DATA_IGNOREDSWITCHES);
  int ip=part.start;
  int addr=this.code.fixAddrAfterDebugLine(this.code.pos2adr(part.start));
  int maxend=-1;
  List<ABCException> catchedExceptions=new ArrayList<>();
  for (int e=0; e < body.exceptions.length; e++) {
    if (addr == this.code.fixAddrAfterDebugLine(body.exceptions[e].start)) {
      if (!body.exceptions[e].isFinally()) {
        if (((body.exceptions[e].end) > maxend) && (!parsedExceptions.contains(body.exceptions[e]))) {
          catchedExceptions.clear();
          maxend=this.code.fixAddrAfterDebugLine(body.exceptions[e].end);
          catchedExceptions.add(body.exceptions[e]);
        }
 else         if (this.code.fixAddrAfterDebugLine(body.exceptions[e].end) == maxend) {
          catchedExceptions.add(body.exceptions[e]);
        }
      }
    }
  }
  if (catchedExceptions.size() > 0) {
    parsedExceptions.addAll(catchedExceptions);
    int endpos=code.adr2pos(this.code.fixAddrAfterDebugLine(catchedExceptions.get(0).end));
    int endposStartBlock=code.adr2pos(catchedExceptions.get(0).end);
    List<List<GraphTargetItem>> catchedCommands=new ArrayList<>();
    if (this.code.code.get(endpos).definition instanceof JumpIns) {
      int afterCatchAddr=this.code.pos2adr(endpos + 1) + this.code.code.get(endpos).operands[0];
      int afterCatchPos=this.code.adr2pos(afterCatchAddr);
      final AVM2Graph t=this;
      Collections.sort(catchedExceptions,new Comparator<ABCException>(){
        @Override public int compare(        ABCException o1,        ABCException o2){
          return t.code.fixAddrAfterDebugLine(o1.target) - t.code.fixAddrAfterDebugLine(o2.target);
        }
      }
);
      List<GraphTargetItem> finallyCommands=new ArrayList<>();
      int returnPos=afterCatchPos;
      for (int e=0; e < body.exceptions.length; e++) {
        if (body.exceptions[e].isFinally()) {
          if (addr == this.code.fixAddrAfterDebugLine(body.exceptions[e].start)) {
            if (afterCatchPos + 1 == code.adr2pos(this.code.fixAddrAfterDebugLine(body.exceptions[e].end))) {
              AVM2Instruction jmpIns=this.code.code.get(code.adr2pos(this.code.fixAddrAfterDebugLine(body.exceptions[e].end)));
              if (jmpIns.definition instanceof JumpIns) {
                int finStart=code.adr2pos(this.code.fixAddrAfterDebugLine(body.exceptions[e].end) + jmpIns.getBytes().length + jmpIns.operands[0]);
                boolean switchFound=false;
                GraphPart fpart=null;
                for (                GraphPart p : allParts) {
                  if (p.start == finStart) {
                    fpart=p;
                    break;
                  }
                }
                for (int f=finStart; f < this.code.code.size(); f++) {
                  if (this.code.code.get(f).definition instanceof LookupSwitchIns) {
                    AVM2Instruction swins=this.code.code.get(f);
                    if (swins.operands.length >= 3) {
                      if (swins.operands[0] == swins.getBytes().length) {
                        if (code.adr2pos(code.pos2adr(f) + swins.operands[2]) < finStart) {
                          stack.push(new ExceptionAVM2Item(body.exceptions[e]));
                          GraphPart fepart=null;
                          for (                          GraphPart p : allParts) {
                            if (p.start == f + 1) {
                              fepart=p;
                              break;
                            }
                          }
                          ignoredSwitches.add(f);
                          List<GraphPart> stopPart2=new ArrayList<>(stopPart);
                          stopPart2.add(fepart);
                          finallyCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,fpart,stopPart2,loops,staticOperation,path);
                          returnPos=f + 1;
                          break;
                        }
                      }
                    }
                  }
                }
                if (!switchFound) {
                  finallyCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,fpart,null,loops,staticOperation,path);
                }
                finallyJumps.add(finStart);
                break;
              }
            }
          }
        }
      }
      List<GraphPart> catchParts=new ArrayList<>();
      for (int e=0; e < catchedExceptions.size(); e++) {
        int eendpos;
        if (e < catchedExceptions.size() - 1) {
          eendpos=code.adr2pos(this.code.fixAddrAfterDebugLine(catchedExceptions.get(e + 1).target)) - 2;
        }
 else {
          eendpos=afterCatchPos - 1;
        }
        GraphPart npart=null;
        int findpos=code.adr2pos(catchedExceptions.get(e).target);
        for (        GraphPart p : allParts) {
          if (p.start == findpos) {
            npart=p;
            catchParts.add(p);
            break;
          }
        }
        GraphPart nepart=null;
        for (        GraphPart p : allParts) {
          if (p.start == eendpos + 1) {
            nepart=p;
            break;
          }
        }
        stack.add(new ExceptionAVM2Item(catchedExceptions.get(e)));
        List<Object> localData2=new ArrayList<>();
        localData2.addAll(localData);
        localData2.set(DATA_SCOPESTACK,new Stack<GraphTargetItem>());
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(nepart);
        catchedCommands.add(printGraph(new ArrayList<GraphPart>(),localData2,stack,allParts,parent,npart,stopPart2,loops,staticOperation,path));
      }
      GraphPart nepart=null;
      for (      GraphPart p : allParts) {
        if (p.start == endposStartBlock) {
          nepart=p;
          break;
        }
      }
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(nepart);
      stopPart2.addAll(catchParts);
      List<GraphTargetItem> tryCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,part,stopPart2,loops,staticOperation,path);
      output.clear();
      output.add(new TryAVM2Item(tryCommands,catchedExceptions,catchedCommands,finallyCommands));
      ip=returnPos;
    }
  }
  if (ip != part.start) {
    part=null;
    for (    GraphPart p : allParts) {
      List<GraphPart> ps=p.getSubParts();
      for (      GraphPart p2 : ps) {
        if (p2.start == ip) {
          part=p2;
          break;
        }
      }
    }
    ret=new ArrayList<>();
    ret.addAll(output);
    GraphTargetItem lop=checkLoop(part,stopPart,loops);
    if (lop == null) {
      ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,part,stopPart,loops,staticOperation,path));
    }
 else {
      ret.add(lop);
    }
    return ret;
  }
  if (part.nextParts.isEmpty()) {
    if (this.code.code.get(part.end).definition instanceof ReturnValueIns) {
      if (part.getHeight() >= 3) {
        if (this.code.code.get(part.getPosAt(part.getHeight() - 2)).definition instanceof KillIns) {
          if (this.code.code.get(part.getPosAt(part.getHeight() - 3)).definition instanceof GetLocalTypeIns) {
            if (output.size() >= 2) {
              if (output.get(output.size() - 2) instanceof SetLocalAVM2Item) {
                ret=new ArrayList<>();
                ret.addAll(output);
                ret.remove(ret.size() - 1);
                ret.add(new ReturnValueAVM2Item(this.code.code.get(part.end),((SetLocalAVM2Item)output.get(output.size() - 2)).value));
                return ret;
              }
            }
          }
        }
      }
    }
  }
  if ((this.code.code.get(part.end).definition instanceof LookupSwitchIns) && ignoredSwitches.contains(part.end)) {
    ret=new ArrayList<>();
    ret.addAll(output);
    return ret;
  }
  if (((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictEqAVM2Item)&& (part.nextParts.get(0).getHeight() >= 2)&& (this.code.code.get(this.code.fixIPAfterDebugLine(part.nextParts.get(0).start)).definition instanceof PushIntegerTypeIns)&& (!part.nextParts.get(0).nextParts.isEmpty())&& (this.code.code.get(part.nextParts.get(0).nextParts.get(0).end).definition instanceof LookupSwitchIns)) || ((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictNeqAVM2Item)&& (part.nextParts.get(1).getHeight() >= 2)&& (this.code.code.get(this.code.fixIPAfterDebugLine(part.nextParts.get(1).start)).definition instanceof PushIntegerTypeIns)&& (!part.nextParts.get(1).nextParts.isEmpty())&& (this.code.code.get(part.nextParts.get(1).nextParts.get(0).end).definition instanceof LookupSwitchIns))) {
    if (stack.peek() instanceof StrictEqAVM2Item) {
      ignoredSwitches.add(part.nextParts.get(0).nextParts.get(0).end);
    }
 else {
      ignoredSwitches.add(part.nextParts.get(1).nextParts.get(0).end);
    }
    ret=new ArrayList<>();
    ret.addAll(output);
    boolean reversed=false;
    if (stack.peek() instanceof StrictEqAVM2Item) {
      reversed=true;
    }
    GraphTargetItem switchedObject=null;
    if (!output.isEmpty()) {
      if (output.get(output.size() - 1) instanceof SetLocalAVM2Item) {
        switchedObject=((SetLocalAVM2Item)output.get(output.size() - 1)).value;
      }
    }
    if (switchedObject == null) {
      switchedObject=new NullAVM2Item(null);
    }
    HashMap<Integer,GraphTargetItem> caseValuesMap=new HashMap<>();
    GraphTargetItem tar=stack.pop();
    if (tar instanceof StrictEqAVM2Item) {
      tar=((StrictEqAVM2Item)tar).leftSide;
    }
    if (tar instanceof StrictNeqAVM2Item) {
      tar=((StrictNeqAVM2Item)tar).leftSide;
    }
    caseValuesMap.put(this.code.code.get(part.nextParts.get(reversed ? 0 : 1).start).operands[0],tar);
    GraphPart switchLoc=part.nextParts.get(reversed ? 0 : 1).nextParts.get(0);
    while ((this.code.code.get(part.nextParts.get(reversed ? 1 : 0).end).definition instanceof IfStrictNeIns) || (this.code.code.get(part.nextParts.get(reversed ? 1 : 0).end).definition instanceof IfStrictEqIns)) {
      part=part.nextParts.get(reversed ? 1 : 0);
      translatePart(localData,part,stack,staticOperation,null);
      tar=stack.pop();
      if (tar instanceof StrictEqAVM2Item) {
        tar=((StrictEqAVM2Item)tar).leftSide;
      }
      if (tar instanceof StrictNeqAVM2Item) {
        tar=((StrictNeqAVM2Item)tar).leftSide;
      }
      if (this.code.code.get(part.end).definition instanceof IfStrictNeIns) {
        reversed=false;
      }
 else {
        reversed=true;
      }
      GraphPart numPart=part.nextParts.get(reversed ? 0 : 1);
      AVM2Instruction ins=null;
      Stack<GraphTargetItem> sstack=new Stack<>();
      do {
        for (int n=0; n < numPart.getHeight(); n++) {
          ins=this.code.code.get(numPart.getPosAt(n));
          if (ins.definition instanceof LookupSwitchIns) {
            break;
          }
          ins.translate(localData,sstack,new ArrayList<GraphTargetItem>(),staticOperation,path);
        }
        if (numPart.nextParts.size() > 1) {
          break;
        }
 else {
          numPart=numPart.nextParts.get(0);
        }
      }
 while (!(this.code.code.get(numPart.end).definition instanceof LookupSwitchIns));
      GraphTargetItem nt=sstack.peek();
      if (!(nt instanceof IntegerValueAVM2Item)) {
        throw new RuntimeException(""String_Node_Str"");
      }
      IntegerValueAVM2Item iv=(IntegerValueAVM2Item)nt;
      caseValuesMap.put((int)(long)iv.value,tar);
      while (this.code.code.get(part.nextParts.get(reversed ? 1 : 0).start).definition instanceof JumpIns) {
        reversed=false;
        part=part.nextParts.get(reversed ? 1 : 0);
        if (part instanceof GraphPartMulti) {
          part=((GraphPartMulti)part).parts.get(0);
        }
      }
    }
    boolean hasDefault=false;
    GraphPart dp=part.nextParts.get(reversed ? 1 : 0);
    while (this.code.code.get(dp.start).definition instanceof JumpIns) {
      if (dp instanceof GraphPartMulti) {
        dp=((GraphPartMulti)dp).parts.get(0);
      }
      dp=dp.nextParts.get(0);
    }
    if (this.code.code.get(dp.start).definition instanceof PushIntegerTypeIns) {
      hasDefault=true;
    }
    List<GraphTargetItem> caseValues=new ArrayList<>();
    for (int i=0; i < switchLoc.nextParts.size() - 1; i++) {
      if (caseValuesMap.containsKey(i)) {
        caseValues.add(caseValuesMap.get(i));
      }
 else {
        continue;
      }
    }
    List<List<GraphTargetItem>> caseCommands=new ArrayList<>();
    GraphPart next=null;
    next=getMostCommonPart(switchLoc.nextParts,loops);
    currentLoop=new Loop(loops.size(),null,next);
    currentLoop.phase=1;
    loops.add(currentLoop);
    List<Integer> valuesMapping=new ArrayList<>();
    List<GraphPart> caseBodies=new ArrayList<>();
    for (int i=0; i < caseValues.size(); i++) {
      GraphPart cur=switchLoc.nextParts.get(1 + i);
      if (!caseBodies.contains(cur)) {
        caseBodies.add(cur);
      }
      valuesMapping.add(caseBodies.indexOf(cur));
    }
    List<GraphTargetItem> defaultCommands=new ArrayList<>();
    GraphPart defaultPart=null;
    if (hasDefault) {
      defaultPart=switchLoc.nextParts.get(switchLoc.nextParts.size() - 1);
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(next);
      defaultCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,switchLoc,defaultPart,stopPart2,loops,staticOperation,path);
      if (!defaultCommands.isEmpty()) {
        if (defaultCommands.get(defaultCommands.size() - 1) instanceof BreakItem) {
          if (((BreakItem)defaultCommands.get(defaultCommands.size() - 1)).loopId == currentLoop.id) {
            defaultCommands.remove(defaultCommands.size() - 1);
          }
        }
      }
    }
    List<GraphPart> ignored=new ArrayList<>();
    for (    Loop l : loops) {
      ignored.add(l.loopContinue);
    }
    for (int i=0; i < caseBodies.size(); i++) {
      List<GraphTargetItem> cc=new ArrayList<>();
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      for (int j=0; j < caseBodies.size(); j++) {
        if (caseBodies.get(j) != caseBodies.get(i)) {
          stopPart2.add(caseBodies.get(j));
        }
      }
      if (hasDefault) {
        stopPart2.add(defaultPart);
      }
      cc.addAll(0,printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,switchLoc,caseBodies.get(i),stopPart2,loops,staticOperation,path));
      caseCommands.add(cc);
    }
    SwitchItem sti=new SwitchItem(null,currentLoop,switchedObject,caseValues,caseCommands,defaultCommands,valuesMapping);
    ret.add(sti);
    if (next != null) {
      currentLoop.phase=2;
      ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,next,stopPart,loops,staticOperation,path));
    }
  }
  return ret;
}",0.9654348835666424
62048,"private static void offerAssociation(){
  boolean offered=(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.FALSE);
  if (!offered) {
    if (Platform.isWindows()) {
      if ((!isAddedToContextMenu()) && JOptionPane.showConfirmDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
        addToContextMenu(true);
      }
    }
  }
  Configuration.setConfig(""String_Node_Str"",Boolean.TRUE);
}","private static void offerAssociation(){
  boolean offered=(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.FALSE);
  if (!offered) {
    if (Platform.isWindows()) {
      if ((!isAddedToContextMenu()) && View.showConfirmDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
        addToContextMenu(true);
      }
    }
  }
  Configuration.setConfig(""String_Node_Str"",Boolean.TRUE);
}",0.9842602308499476
62049,"public static boolean saveFileDialog(){
  JFileChooser fc=new JFileChooser();
  fc.setCurrentDirectory(new File((String)Configuration.getConfig(""String_Node_Str"",""String_Node_Str"")));
  fc.setFileFilter(new FileFilter(){
    @Override public boolean accept(    File f){
      return (f.getName().endsWith(""String_Node_Str"")) || (f.isDirectory());
    }
    @Override public String getDescription(){
      return translate(""String_Node_Str"");
    }
  }
);
  fc.setAcceptAllFileFilterUsed(false);
  JFrame f=new JFrame();
  View.setWindowIcon(f);
  int returnVal=fc.showSaveDialog(f);
  if (returnVal == JFileChooser.APPROVE_OPTION) {
    File file=Helper.fixDialogFile(fc.getSelectedFile());
    try {
      String fileName=file.getAbsolutePath();
      if (!fileName.toLowerCase().endsWith(""String_Node_Str"")) {
        fileName+=""String_Node_Str"";
      }
      Main.saveFile(fileName);
      Configuration.setConfig(""String_Node_Str"",file.getParentFile().getAbsolutePath());
      maskURL=null;
      return true;
    }
 catch (    IOException ex) {
      JOptionPane.showMessageDialog(null,translate(""String_Node_Str""));
    }
  }
  return false;
}","public static boolean saveFileDialog(){
  JFileChooser fc=new JFileChooser();
  fc.setCurrentDirectory(new File((String)Configuration.getConfig(""String_Node_Str"",""String_Node_Str"")));
  fc.setFileFilter(new FileFilter(){
    @Override public boolean accept(    File f){
      return (f.getName().endsWith(""String_Node_Str"")) || (f.isDirectory());
    }
    @Override public String getDescription(){
      return translate(""String_Node_Str"");
    }
  }
);
  fc.setAcceptAllFileFilterUsed(false);
  JFrame f=new JFrame();
  View.setWindowIcon(f);
  int returnVal=fc.showSaveDialog(f);
  if (returnVal == JFileChooser.APPROVE_OPTION) {
    File file=Helper.fixDialogFile(fc.getSelectedFile());
    try {
      String fileName=file.getAbsolutePath();
      if (!fileName.toLowerCase().endsWith(""String_Node_Str"")) {
        fileName+=""String_Node_Str"";
      }
      Main.saveFile(fileName);
      Configuration.setConfig(""String_Node_Str"",file.getParentFile().getAbsolutePath());
      maskURL=null;
      return true;
    }
 catch (    IOException ex) {
      View.showMessageDialog(null,translate(""String_Node_Str""));
    }
  }
  return false;
}",0.9934640522875816
62050,"@SuppressWarnings(""String_Node_Str"") public MainFrame(SWF swf){
  super();
  JRibbon rib=getRibbon();
  JRibbonBand editBand=new JRibbonBand(translate(""String_Node_Str""),null);
  editBand.setResizePolicies((List)Arrays.asList(new CoreRibbonResizePolicies.Mirror(editBand.getControlPanel()),new IconRibbonBandResizePolicy(editBand.getControlPanel())));
  JCommandButton openCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(openCommandButton,""String_Node_Str"");
  JCommandButton saveCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(saveCommandButton,""String_Node_Str"");
  JCommandButton saveasCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(saveasCommandButton,""String_Node_Str"");
  editBand.addCommandButton(openCommandButton,RibbonElementPriority.TOP);
  editBand.addCommandButton(saveCommandButton,RibbonElementPriority.TOP);
  editBand.addCommandButton(saveasCommandButton,RibbonElementPriority.TOP);
  JRibbonBand exportBand=new JRibbonBand(translate(""String_Node_Str""),null);
  exportBand.setResizePolicies((List)Arrays.asList(new CoreRibbonResizePolicies.Mirror(exportBand.getControlPanel()),new IconRibbonBandResizePolicy(exportBand.getControlPanel())));
  JCommandButton exportFlaCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(exportFlaCommandButton,""String_Node_Str"");
  JCommandButton exportAllCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(exportAllCommandButton,""String_Node_Str"");
  JCommandButton exportSelectionCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(exportSelectionCommandButton,""String_Node_Str"");
  exportBand.addCommandButton(exportFlaCommandButton,RibbonElementPriority.TOP);
  exportBand.addCommandButton(exportAllCommandButton,RibbonElementPriority.MEDIUM);
  exportBand.addCommandButton(exportSelectionCommandButton,RibbonElementPriority.MEDIUM);
  RibbonTask fileTask=new RibbonTask(translate(""String_Node_Str""),editBand,exportBand);
  JRibbonBand toolsBand=new JRibbonBand(translate(""String_Node_Str""),null);
  toolsBand.setResizePolicies((List)Arrays.asList(new CoreRibbonResizePolicies.Mirror(toolsBand.getControlPanel()),new IconRibbonBandResizePolicy(toolsBand.getControlPanel())));
  JCommandButton searchCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(searchCommandButton,""String_Node_Str"");
  JCommandButton proxyCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(proxyCommandButton,""String_Node_Str"");
  JCommandButton gotoDocumentClassCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(gotoDocumentClassCommandButton,""String_Node_Str"");
  toolsBand.addCommandButton(searchCommandButton,RibbonElementPriority.TOP);
  toolsBand.addCommandButton(proxyCommandButton,RibbonElementPriority.TOP);
  toolsBand.addCommandButton(gotoDocumentClassCommandButton,RibbonElementPriority.TOP);
  JRibbonBand deobfuscationBand=new JRibbonBand(translate(""String_Node_Str""),null);
  deobfuscationBand.setResizePolicies((List)Arrays.asList(new CoreRibbonResizePolicies.Mirror(deobfuscationBand.getControlPanel()),new IconRibbonBandResizePolicy(deobfuscationBand.getControlPanel())));
  JCommandButton deobfuscationCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(deobfuscationCommandButton,""String_Node_Str"");
  JCommandButton globalrenameCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(globalrenameCommandButton,""String_Node_Str"");
  JCommandButton renameinvalidCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(renameinvalidCommandButton,""String_Node_Str"");
  deobfuscationBand.addCommandButton(deobfuscationCommandButton,RibbonElementPriority.TOP);
  deobfuscationBand.addCommandButton(globalrenameCommandButton,RibbonElementPriority.MEDIUM);
  deobfuscationBand.addCommandButton(renameinvalidCommandButton,RibbonElementPriority.MEDIUM);
  RibbonTask toolsTask=new RibbonTask(translate(""String_Node_Str""),toolsBand,deobfuscationBand);
  JRibbonBand settingsBand=new JRibbonBand(translate(""String_Node_Str""),null);
  settingsBand.setResizePolicies((List)Arrays.asList(new CoreRibbonResizePolicies.Mirror(settingsBand.getControlPanel()),new IconRibbonBandResizePolicy(settingsBand.getControlPanel())));
  autoDeobfuscateMenuItem=new JCheckBox(translate(""String_Node_Str""));
  miInternalViewer=new JCheckBox(translate(""String_Node_Str""));
  miParallelSpeedUp=new JCheckBox(translate(""String_Node_Str""));
  miDecompile=new JCheckBox(translate(""String_Node_Str""));
  miAssociate=new JCheckBox(translate(""String_Node_Str""));
  miCacheDisk=new JCheckBox(translate(""String_Node_Str""));
  miGotoMainClassOnStartup=new JCheckBox(translate(""String_Node_Str""));
  settingsBand.addRibbonComponent(new JRibbonComponent(autoDeobfuscateMenuItem));
  settingsBand.addRibbonComponent(new JRibbonComponent(miInternalViewer));
  settingsBand.addRibbonComponent(new JRibbonComponent(miParallelSpeedUp));
  settingsBand.addRibbonComponent(new JRibbonComponent(miDecompile));
  settingsBand.addRibbonComponent(new JRibbonComponent(miAssociate));
  settingsBand.addRibbonComponent(new JRibbonComponent(miCacheDisk));
  settingsBand.addRibbonComponent(new JRibbonComponent(miGotoMainClassOnStartup));
  JRibbonBand languageBand=new JRibbonBand(translate(""String_Node_Str""),null);
  languageBand.setResizePolicies((List)Arrays.asList(new BaseRibbonBandResizePolicy<AbstractBandControlPanel>(languageBand.getControlPanel()){
    @Override public int getPreferredWidth(    int i,    int i1){
      return 105;
    }
    @Override public void install(    int i,    int i1){
    }
  }
,new IconRibbonBandResizePolicy(languageBand.getControlPanel())));
  JCommandButton setLanguageCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(setLanguageCommandButton,""String_Node_Str"");
  languageBand.addCommandButton(setLanguageCommandButton,RibbonElementPriority.TOP);
  RibbonTask settingsTask=new RibbonTask(translate(""String_Node_Str""),settingsBand,languageBand);
  JRibbonBand helpBand=new JRibbonBand(translate(""String_Node_Str""),null);
  helpBand.setResizePolicies((List)Arrays.asList(new CoreRibbonResizePolicies.Mirror(helpBand.getControlPanel()),new IconRibbonBandResizePolicy(helpBand.getControlPanel())));
  JCommandButton checkForUpdatesCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(checkForUpdatesCommandButton,""String_Node_Str"");
  JCommandButton helpUsUpdatesCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(helpUsUpdatesCommandButton,""String_Node_Str"");
  JCommandButton homepageCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(homepageCommandButton,""String_Node_Str"");
  JCommandButton aboutCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(aboutCommandButton,""String_Node_Str"");
  helpBand.addCommandButton(aboutCommandButton,RibbonElementPriority.TOP);
  helpBand.addCommandButton(checkForUpdatesCommandButton,RibbonElementPriority.MEDIUM);
  helpBand.addCommandButton(homepageCommandButton,RibbonElementPriority.MEDIUM);
  helpBand.addCommandButton(helpUsUpdatesCommandButton,RibbonElementPriority.TOP);
  RibbonTask helpTask=new RibbonTask(translate(""String_Node_Str""),helpBand);
  rib.addTask(fileTask);
  rib.addTask(toolsTask);
  rib.addTask(settingsTask);
  rib.addTask(helpTask);
  RibbonApplicationMenu mainMenu=new RibbonApplicationMenu();
  RibbonApplicationMenuEntryPrimary exportFlaMenu=new RibbonApplicationMenuEntryPrimary(View.getResizableIcon(""String_Node_Str""),translate(""String_Node_Str""),new ActionRedirector(this,""String_Node_Str""),CommandButtonKind.ACTION_ONLY);
  RibbonApplicationMenuEntryPrimary exportAllMenu=new RibbonApplicationMenuEntryPrimary(View.getResizableIcon(""String_Node_Str""),translate(""String_Node_Str""),new ActionRedirector(this,""String_Node_Str""),CommandButtonKind.ACTION_ONLY);
  RibbonApplicationMenuEntryPrimary exportSelMenu=new RibbonApplicationMenuEntryPrimary(View.getResizableIcon(""String_Node_Str""),translate(""String_Node_Str""),new ActionRedirector(this,""String_Node_Str""),CommandButtonKind.ACTION_ONLY);
  RibbonApplicationMenuEntryPrimary checkUpdatesMenu=new RibbonApplicationMenuEntryPrimary(View.getResizableIcon(""String_Node_Str""),translate(""String_Node_Str""),new ActionRedirector(this,""String_Node_Str""),CommandButtonKind.ACTION_ONLY);
  RibbonApplicationMenuEntryPrimary aboutMenu=new RibbonApplicationMenuEntryPrimary(View.getResizableIcon(""String_Node_Str""),translate(""String_Node_Str""),new ActionRedirector(this,""String_Node_Str""),CommandButtonKind.ACTION_ONLY);
  RibbonApplicationMenuEntryFooter exitMenu=new RibbonApplicationMenuEntryFooter(View.getResizableIcon(""String_Node_Str""),translate(""String_Node_Str""),new ActionRedirector(this,""String_Node_Str""));
  mainMenu.addMenuEntry(exportFlaMenu);
  mainMenu.addMenuEntry(exportAllMenu);
  mainMenu.addMenuEntry(exportSelMenu);
  mainMenu.addMenuSeparator();
  mainMenu.addMenuEntry(checkUpdatesMenu);
  mainMenu.addMenuEntry(aboutMenu);
  mainMenu.addFooterEntry(exitMenu);
  mainMenu.addMenuSeparator();
  rib.setApplicationMenu(mainMenu);
  int w=(Integer)Configuration.getConfig(""String_Node_Str"",1000);
  int h=(Integer)Configuration.getConfig(""String_Node_Str"",700);
  Dimension dim=java.awt.Toolkit.getDefaultToolkit().getScreenSize();
  if (w > dim.width) {
    w=dim.width;
  }
  if (h > dim.height) {
    h=dim.height;
  }
  setSize(w,h);
  boolean maximizedHorizontal=(Boolean)Configuration.getConfig(""String_Node_Str"",false);
  boolean maximizedVertical=(Boolean)Configuration.getConfig(""String_Node_Str"",false);
  int state=0;
  if (maximizedHorizontal) {
    state=state | JFrame.MAXIMIZED_HORIZ;
  }
  if (maximizedVertical) {
    state=state | JFrame.MAXIMIZED_VERT;
  }
  setExtendedState(state);
  View.setWindowIcon(this);
  addWindowStateListener(new WindowStateListener(){
    @Override public void windowStateChanged(    WindowEvent e){
      int state=e.getNewState();
      Configuration.setConfig(""String_Node_Str"",(state & JFrame.MAXIMIZED_HORIZ) == JFrame.MAXIMIZED_HORIZ);
      Configuration.setConfig(""String_Node_Str"",(state & JFrame.MAXIMIZED_VERT) == JFrame.MAXIMIZED_VERT);
    }
  }
);
  addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      int state=getExtendedState();
      if ((state & JFrame.MAXIMIZED_HORIZ) == 0) {
        Configuration.setConfig(""String_Node_Str"",getWidth());
      }
      if ((state & JFrame.MAXIMIZED_VERT) == 0) {
        Configuration.setConfig(""String_Node_Str"",getHeight());
      }
    }
  }
);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      if (Main.proxyFrame != null) {
        if (Main.proxyFrame.isVisible()) {
          return;
        }
      }
      Main.exit();
    }
  }
);
  setTitle(Main.applicationVerName + ((swf != null && Configuration.DISPLAY_FILENAME) ? ""String_Node_Str"" + Main.getFileTitle() : ""String_Node_Str""));
  JMenuBar menuBar=new JMenuBar();
  try {
    flashPanel=new FlashPlayerPanel(this);
  }
 catch (  FlashUnsupportedException fue) {
  }
  JMenu menuFile=new JMenu(translate(""String_Node_Str""));
  JMenuItem miOpen=new JMenuItem(translate(""String_Node_Str""));
  miOpen.setIcon(View.getIcon(""String_Node_Str""));
  miOpen.setActionCommand(""String_Node_Str"");
  miOpen.addActionListener(this);
  JMenuItem miSave=new JMenuItem(translate(""String_Node_Str""));
  miSave.setIcon(View.getIcon(""String_Node_Str""));
  miSave.setActionCommand(""String_Node_Str"");
  miSave.addActionListener(this);
  JMenuItem miSaveAs=new JMenuItem(translate(""String_Node_Str""));
  miSaveAs.setIcon(View.getIcon(""String_Node_Str""));
  miSaveAs.setActionCommand(""String_Node_Str"");
  miSaveAs.addActionListener(this);
  JMenuItem menuExportFla=new JMenuItem(translate(""String_Node_Str""));
  menuExportFla.setActionCommand(""String_Node_Str"");
  menuExportFla.addActionListener(this);
  menuExportFla.setIcon(View.getIcon(""String_Node_Str""));
  JMenuItem menuExportAll=new JMenuItem(translate(""String_Node_Str""));
  menuExportAll.setActionCommand(""String_Node_Str"");
  menuExportAll.addActionListener(this);
  JMenuItem menuExportSel=new JMenuItem(translate(""String_Node_Str""));
  menuExportSel.setActionCommand(""String_Node_Str"");
  menuExportSel.addActionListener(this);
  menuExportAll.setIcon(View.getIcon(""String_Node_Str""));
  menuExportSel.setIcon(View.getIcon(""String_Node_Str""));
  menuFile.add(miOpen);
  menuFile.add(miSave);
  menuFile.add(miSaveAs);
  menuFile.add(menuExportFla);
  menuFile.add(menuExportAll);
  menuFile.add(menuExportSel);
  menuFile.addSeparator();
  JMenuItem miClose=new JMenuItem(translate(""String_Node_Str""));
  miClose.setIcon(View.getIcon(""String_Node_Str""));
  miClose.setActionCommand(""String_Node_Str"");
  miClose.addActionListener(this);
  menuFile.add(miClose);
  menuBar.add(menuFile);
  JMenu menuDeobfuscation=new JMenu(translate(""String_Node_Str""));
  menuDeobfuscation.setIcon(View.getIcon(""String_Node_Str""));
  JMenuItem miDeobfuscation=new JMenuItem(translate(""String_Node_Str""));
  miDeobfuscation.setActionCommand(""String_Node_Str"");
  miDeobfuscation.addActionListener(this);
  autoDeobfuscateMenuItem.setSelected((Boolean)Configuration.getConfig(""String_Node_Str"",true));
  autoDeobfuscateMenuItem.addActionListener(this);
  autoDeobfuscateMenuItem.setActionCommand(""String_Node_Str"");
  JMenuItem miRenameOneIdentifier=new JMenuItem(translate(""String_Node_Str""));
  miRenameOneIdentifier.setActionCommand(""String_Node_Str"");
  miRenameOneIdentifier.addActionListener(this);
  JMenuItem miRenameIdentifiers=new JMenuItem(translate(""String_Node_Str""));
  miRenameIdentifiers.setActionCommand(""String_Node_Str"");
  miRenameIdentifiers.addActionListener(this);
  menuDeobfuscation.add(miRenameOneIdentifier);
  menuDeobfuscation.add(miRenameIdentifiers);
  menuDeobfuscation.add(miDeobfuscation);
  JMenu menuTools=new JMenu(translate(""String_Node_Str""));
  JMenuItem miProxy=new JMenuItem(translate(""String_Node_Str""));
  miProxy.setActionCommand(""String_Node_Str"");
  miProxy.setIcon(View.getIcon(""String_Node_Str""));
  miProxy.addActionListener(this);
  JMenuItem miSearchScript=new JMenuItem(translate(""String_Node_Str""));
  miSearchScript.addActionListener(this);
  miSearchScript.setActionCommand(""String_Node_Str"");
  miSearchScript.setIcon(View.getIcon(""String_Node_Str""));
  menuTools.add(miSearchScript);
  miInternalViewer.setSelected((Boolean)Configuration.getConfig(""String_Node_Str"",(Boolean)(flashPanel == null)));
  if (flashPanel == null) {
    miInternalViewer.setSelected(true);
    miInternalViewer.setEnabled(false);
  }
  miInternalViewer.setActionCommand(""String_Node_Str"");
  miInternalViewer.addActionListener(this);
  miParallelSpeedUp.setSelected((Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
  miParallelSpeedUp.setActionCommand(""String_Node_Str"");
  miParallelSpeedUp.addActionListener(this);
  menuTools.add(miProxy);
  menuTools.add(menuDeobfuscation);
  JMenuItem miGotoDocumentClass=new JMenuItem(translate(""String_Node_Str""));
  miGotoDocumentClass.setActionCommand(""String_Node_Str"");
  miGotoDocumentClass.addActionListener(this);
  menuBar.add(menuTools);
  miDecompile.setSelected(!(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
  miDecompile.setActionCommand(""String_Node_Str"");
  miDecompile.addActionListener(this);
  miCacheDisk.setSelected((Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
  miCacheDisk.setActionCommand(""String_Node_Str"");
  miCacheDisk.addActionListener(this);
  miGotoMainClassOnStartup.setSelected((Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.FALSE));
  miGotoMainClassOnStartup.setActionCommand(""String_Node_Str"");
  miGotoMainClassOnStartup.addActionListener(this);
  miAssociate.setActionCommand(""String_Node_Str"");
  miAssociate.addActionListener(this);
  miAssociate.setSelected(Main.isAddedToContextMenu());
  JMenuItem miLanguage=new JMenuItem(translate(""String_Node_Str""));
  miLanguage.setActionCommand(""String_Node_Str"");
  miLanguage.addActionListener(this);
  JMenu menuHelp=new JMenu(translate(""String_Node_Str""));
  JMenuItem miAbout=new JMenuItem(translate(""String_Node_Str""));
  miAbout.setIcon(View.getIcon(""String_Node_Str""));
  miAbout.setActionCommand(""String_Node_Str"");
  miAbout.addActionListener(this);
  JMenuItem miCheckUpdates=new JMenuItem(translate(""String_Node_Str""));
  miCheckUpdates.setActionCommand(""String_Node_Str"");
  miCheckUpdates.setIcon(View.getIcon(""String_Node_Str""));
  miCheckUpdates.addActionListener(this);
  JMenuItem miHelpUs=new JMenuItem(translate(""String_Node_Str""));
  miHelpUs.setActionCommand(""String_Node_Str"");
  miHelpUs.setIcon(View.getIcon(""String_Node_Str""));
  miHelpUs.addActionListener(this);
  JMenuItem miHomepage=new JMenuItem(translate(""String_Node_Str""));
  miHomepage.setActionCommand(""String_Node_Str"");
  miHomepage.setIcon(View.getIcon(""String_Node_Str""));
  miHomepage.addActionListener(this);
  menuHelp.add(miCheckUpdates);
  menuHelp.add(miHelpUs);
  menuHelp.add(miHomepage);
  menuHelp.add(miAbout);
  menuBar.add(menuHelp);
  List<Object> objs=new ArrayList<>();
  if (swf != null) {
    objs.addAll(swf.tags);
  }
  this.swf=swf;
  java.awt.Container cnt=getContentPane();
  cnt.setLayout(new BorderLayout());
  cnt.add(getRibbon(),BorderLayout.NORTH);
  detailPanel=new JPanel();
  detailPanel.setLayout(new CardLayout());
  JPanel whitePanel=new JPanel();
  whitePanel.setBackground(Color.white);
  detailPanel.add(whitePanel,DETAILCARDEMPTYPANEL);
  CardLayout cl2=(CardLayout)(detailPanel.getLayout());
  cl2.show(detailPanel,DETAILCARDEMPTYPANEL);
  abcList=new ArrayList<>();
  getActionScript3(objs,abcList);
  if (!abcList.isEmpty()) {
    abcPanel=new ABCPanel(abcList,swf);
    detailPanel.add(abcPanel.tabbedPane,DETAILCARDAS3NAVIGATOR);
    menuTools.add(miGotoDocumentClass);
  }
 else {
    gotoDocumentClassCommandButton.setEnabled(false);
    actionPanel=new ActionPanel();
    deobfuscationCommandButton.setEnabled(false);
  }
  if (swf == null) {
    renameinvalidCommandButton.setEnabled(false);
    globalrenameCommandButton.setEnabled(false);
    saveCommandButton.setEnabled(false);
    saveasCommandButton.setEnabled(false);
    exportAllCommandButton.setEnabled(false);
    exportAllMenu.setEnabled(false);
    exportFlaCommandButton.setEnabled(false);
    exportFlaMenu.setEnabled(false);
    exportSelectionCommandButton.setEnabled(false);
    exportSelMenu.setEnabled(false);
    deobfuscationCommandButton.setEnabled(false);
    searchCommandButton.setEnabled(false);
  }
  UIManager.getDefaults().put(""String_Node_Str"",BasicTreeUI.class.getName());
  if (swf == null) {
    tagTree=new JTree((TreeModel)null);
  }
 else {
    tagTree=new JTree(new TagTreeModel(createTagList(objs,null),new SWFRoot((new File(Main.file)).getName())));
  }
  tagTree.addTreeSelectionListener(this);
  tagTree.setBackground(Color.white);
  tagTree.setUI(new BasicTreeUI(){
    @Override public void paint(    Graphics g,    JComponent c){
      setHashColor(Color.gray);
      super.paint(g,c);
    }
  }
);
  DragSource dragSource=DragSource.getDefaultDragSource();
  dragSource.createDefaultDragGestureRecognizer(tagTree,DnDConstants.ACTION_COPY_OR_MOVE,new DragGestureListener(){
    @Override public void dragGestureRecognized(    DragGestureEvent dge){
      dge.startDrag(DragSource.DefaultCopyDrop,new Transferable(){
        @Override public DataFlavor[] getTransferDataFlavors(){
          return new DataFlavor[]{DataFlavor.javaFileListFlavor};
        }
        @Override public boolean isDataFlavorSupported(        DataFlavor flavor){
          return flavor.equals(DataFlavor.javaFileListFlavor);
        }
        @Override public Object getTransferData(        DataFlavor flavor) throws UnsupportedFlavorException, IOException {
          if (flavor.equals(DataFlavor.javaFileListFlavor)) {
            List<File> files=new ArrayList<>();
            String tempDir=System.getProperty(""String_Node_Str"");
            if (!tempDir.endsWith(File.separator)) {
              tempDir+=File.separator;
            }
            Random rnd=new Random();
            tempDir+=""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ System.currentTimeMillis()+ ""String_Node_Str""+ rnd.nextInt(1000);
            File fTempDir=new File(tempDir);
            if (!fTempDir.exists()) {
              if (!fTempDir.mkdirs()) {
                if (!fTempDir.exists()) {
                  throw new IOException(""String_Node_Str"" + fTempDir);
                }
              }
            }
            final ExportDialog export=new ExportDialog();
            try {
              File ftemp=new File(tempDir);
              files=exportSelection(errorHandler,tempDir,export);
              files.clear();
              File fs[]=ftemp.listFiles();
              for (              File f : fs) {
                files.add(f);
              }
              Main.stopWork();
            }
 catch (            IOException ex) {
              return null;
            }
            for (            File f : files) {
              f.deleteOnExit();
            }
            new File(tempDir).deleteOnExit();
            return files;
          }
          return null;
        }
      }
,new DragSourceListener(){
        @Override public void dragEnter(        DragSourceDragEvent dsde){
          enableDrop(false);
        }
        @Override public void dragOver(        DragSourceDragEvent dsde){
        }
        @Override public void dropActionChanged(        DragSourceDragEvent dsde){
        }
        @Override public void dragExit(        DragSourceEvent dse){
        }
        @Override public void dragDropEnd(        DragSourceDropEvent dsde){
          enableDrop(true);
        }
      }
);
    }
  }
);
  final JPopupMenu contextPopupMenu=new JPopupMenu();
  final JMenuItem removeMenuItem=new JMenuItem(translate(""String_Node_Str""));
  removeMenuItem.addActionListener(this);
  removeMenuItem.setActionCommand(""String_Node_Str"");
  JMenuItem exportSelectionMenuItem=new JMenuItem(translate(""String_Node_Str""));
  exportSelectionMenuItem.setActionCommand(""String_Node_Str"");
  exportSelectionMenuItem.addActionListener(this);
  contextPopupMenu.add(exportSelectionMenuItem);
  contextPopupMenu.add(removeMenuItem);
  tagTree.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (SwingUtilities.isRightMouseButton(e)) {
        int row=tagTree.getClosestRowForLocation(e.getX(),e.getY());
        tagTree.setSelectionRow(row);
        Object tagObj=tagTree.getLastSelectedPathComponent();
        if (tagObj == null) {
          return;
        }
        if (tagObj instanceof TagNode) {
          tagObj=((TagNode)tagObj).tag;
        }
        removeMenuItem.setVisible(tagObj instanceof Tag);
        contextPopupMenu.show(e.getComponent(),e.getX(),e.getY());
      }
    }
  }
);
  TreeCellRenderer tcr=new DefaultTreeCellRenderer(){
    @Override public Component getTreeCellRendererComponent(    JTree tree,    Object value,    boolean sel,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      super.getTreeCellRendererComponent(tree,value,sel,expanded,leaf,row,hasFocus);
      Object val=value;
      if (val instanceof TagNode) {
        val=((TagNode)val).tag;
      }
      String type=getTagType(val);
      if (row == 0) {
        setIcon(View.getIcon(""String_Node_Str""));
      }
 else       if (type != null) {
        if (type.equals(""String_Node_Str"") && expanded) {
          type=""String_Node_Str"";
        }
        setIcon(View.getIcon(type + ""String_Node_Str""));
      }
 else {
      }
      String tos=value.toString();
      int sw=getFontMetrics(getFont()).stringWidth(tos);
      setPreferredSize(new Dimension(18 + sw,getPreferredSize().height));
      setUI(new BasicLabelUI());
      setOpaque(false);
      setBackgroundNonSelectionColor(Color.white);
      return this;
    }
  }
;
  tagTree.setCellRenderer(tcr);
  loadingPanel.setPreferredSize(new Dimension(30,30));
  statusPanel=new JPanel();
  statusPanel.setPreferredSize(new Dimension(1,30));
  statusPanel.setBorder(new BevelBorder(BevelBorder.LOWERED));
  statusPanel.setLayout(new BorderLayout());
  statusPanel.add(loadingPanel,BorderLayout.WEST);
  statusPanel.add(statusLabel,BorderLayout.CENTER);
  errorLogFrame=new ErrorLogFrame();
  errorNotificationButton=new JButton(""String_Node_Str"");
  errorNotificationButton.setIcon(View.getIcon(""String_Node_Str""));
  errorNotificationButton.setBorderPainted(false);
  errorNotificationButton.setFocusPainted(false);
  errorNotificationButton.setContentAreaFilled(false);
  errorNotificationButton.setMargin(new Insets(2,2,2,2));
  errorNotificationButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
  errorNotificationButton.setActionCommand(""String_Node_Str"");
  errorNotificationButton.addActionListener(this);
  errorNotificationButton.setToolTipText(translate(""String_Node_Str""));
  statusPanel.add(errorNotificationButton,BorderLayout.EAST);
  loadingPanel.setVisible(false);
  cnt.add(statusPanel,BorderLayout.SOUTH);
  if (swf != null) {
    for (    Tag t : swf.tags) {
      if (t instanceof JPEGTablesTag) {
        jtt=(JPEGTablesTag)t;
      }
    }
  }
  characters=new HashMap<>();
  List<Object> list2=new ArrayList<>();
  if (swf != null) {
    list2.addAll(swf.tags);
  }
  parseCharacters(list2);
  JPanel textTopPanel=new JPanel(new BorderLayout());
  textValue=new LineMarkedEditorPane();
  textTopPanel.add(new JScrollPane(textValue),BorderLayout.CENTER);
  textValue.setEditable(false);
  JPanel textButtonsPanel=new JPanel();
  textButtonsPanel.setLayout(new FlowLayout());
  textSaveButton=new JButton(translate(""String_Node_Str""),View.getIcon(""String_Node_Str""));
  textSaveButton.setMargin(new Insets(3,3,3,10));
  textSaveButton.setActionCommand(""String_Node_Str"");
  textSaveButton.addActionListener(this);
  textEditButton=new JButton(translate(""String_Node_Str""),View.getIcon(""String_Node_Str""));
  textEditButton.setMargin(new Insets(3,3,3,10));
  textEditButton.setActionCommand(""String_Node_Str"");
  textEditButton.addActionListener(this);
  textCancelButton=new JButton(translate(""String_Node_Str""),View.getIcon(""String_Node_Str""));
  textCancelButton.setMargin(new Insets(3,3,3,10));
  textCancelButton.setActionCommand(""String_Node_Str"");
  textCancelButton.addActionListener(this);
  textButtonsPanel.add(textEditButton);
  textButtonsPanel.add(textSaveButton);
  textButtonsPanel.add(textCancelButton);
  textSaveButton.setVisible(false);
  textCancelButton.setVisible(false);
  textTopPanel.add(textButtonsPanel,BorderLayout.SOUTH);
  displayWithPreview=new JPanel(new CardLayout());
  displayWithPreview.add(textTopPanel,CARDTEXTPANEL);
  final JPanel fontPanel=new JPanel();
  final JPanel fontParams2=new JPanel();
  fontParams2.setLayout(null);
  final Component ctable[][]=new Component[][]{{new JLabel(translate(""String_Node_Str"")),fontNameLabel=new JLabel(translate(""String_Node_Str""))},{new JLabel(translate(""String_Node_Str"")),fontIsBoldLabel=new JLabel(translate(""String_Node_Str""))},{new JLabel(translate(""String_Node_Str"")),fontIsItalicLabel=new JLabel(translate(""String_Node_Str""))},{new JLabel(translate(""String_Node_Str"")),fontAscentLabel=new JLabel(translate(""String_Node_Str""))},{new JLabel(translate(""String_Node_Str"")),fontDescentLabel=new JLabel(translate(""String_Node_Str""))},{new JLabel(translate(""String_Node_Str"")),fontLeadingLabel=new JLabel(translate(""String_Node_Str""))},{new JLabel(translate(""String_Node_Str"")),fontCharactersTextArea=new JTextArea(""String_Node_Str"")}};
  fontCharactersTextArea.setLineWrap(true);
  fontCharactersTextArea.setWrapStyleWord(true);
  fontCharactersTextArea.setOpaque(false);
  fontCharactersTextArea.setEditable(false);
  fontCharactersTextArea.setFont(new JLabel().getFont());
  final int borderLeft=10;
  final int maxws[]=new int[ctable[0].length];
  for (int x=0; x < ctable[0].length; x++) {
    int maxw=0;
    for (int y=0; y < ctable.length; y++) {
      Dimension d=ctable[y][x].getPreferredSize();
      if (d.width > maxw) {
        maxw=d.width;
      }
    }
    maxws[x]=maxw;
  }
  for (int i=0; i < ctable.length; i++) {
    fontParams2.add(ctable[i][0]);
    fontParams2.add(ctable[i][1]);
  }
  fontParams2.setPreferredSize(new Dimension(600,ctable.length * 25));
  fontChangeList=new ComponentListener(){
    @Override public void componentResized(    ComponentEvent e){
      int h=0;
      Insets is=fontPanel.getInsets();
      Insets is2=fontParams2.getInsets();
      for (int i=0; i < ctable.length; i++) {
        Dimension d=ctable[i][0].getPreferredSize();
        Dimension d2=ctable[i][1].getPreferredSize();
        ctable[i][0].setBounds(borderLeft,h,maxws[0],25);
        int w2=fontPanel.getWidth() - 3 * borderLeft - maxws[0] - is.left - is.right - 10;
        ctable[i][1].setBounds(borderLeft + maxws[0] + borderLeft,h,w2,d2.height);
        h+=Math.max(Math.max(d.height,d2.height),25);
      }
      fontParams2.setPreferredSize(new Dimension(fontPanel.getWidth() - 20,h));
      fontPanel.revalidate();
    }
    @Override public void componentMoved(    ComponentEvent e){
      componentResized(null);
    }
    @Override public void componentShown(    ComponentEvent e){
      componentResized(null);
    }
    @Override public void componentHidden(    ComponentEvent e){
      componentResized(null);
    }
  }
;
  final JPanel fontParams1=new JPanel();
  fontPanel.addComponentListener(fontChangeList);
  fontChangeList.componentResized(null);
  fontParams1.setLayout(new BoxLayout(fontParams1,BoxLayout.Y_AXIS));
  fontParams1.add(fontParams2);
  JPanel fontAddCharsPanel=new JPanel(new FlowLayout());
  fontAddCharsPanel.add(new JLabel(translate(""String_Node_Str"")));
  fontAddCharactersField=new MyTextField();
  fontAddCharactersField.setPreferredSize(new Dimension(150,fontAddCharactersField.getPreferredSize().height));
  fontAddCharsPanel.add(fontAddCharactersField);
  JButton fontAddCharsButton=new JButton(translate(""String_Node_Str""));
  fontAddCharsButton.setActionCommand(""String_Node_Str"");
  fontAddCharsButton.addActionListener(this);
  fontAddCharsPanel.add(fontAddCharsButton);
  fontParams1.add(fontAddCharsPanel);
  JPanel fontSelectionPanel=new JPanel(new FlowLayout());
  fontSelectionPanel.add(new JLabel(translate(""String_Node_Str"")));
  String fontNames[]=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
  fontSelection=new JComboBox<>(fontNames);
  fontSelection.setSelectedIndex(0);
  fontSelection.setSelectedItem(""String_Node_Str"");
  fontSelection.setSelectedItem(""String_Node_Str"");
  fontSelection.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (oldValue instanceof FontTag) {
        FontTag f=(FontTag)oldValue;
        sourceFontsMap.put(f.getFontId(),(String)fontSelection.getSelectedItem());
      }
    }
  }
);
  fontSelectionPanel.add(fontSelection);
  JPanel fontCharPanel=new JPanel();
  fontCharPanel.setLayout(new ListLayout());
  fontCharPanel.add(fontAddCharsPanel);
  fontCharPanel.add(fontSelectionPanel);
  fontParams1.add(fontCharPanel);
  fontPanel.setLayout(new BorderLayout());
  fontParams1.add(Box.createVerticalGlue());
  fontPanel.add(new JScrollPane(fontParams1),BorderLayout.CENTER);
  displayWithPreview.add(fontPanel,CARDFONTPANEL);
  Component leftComponent=null;
  displayPanel=new JPanel(new CardLayout());
  if (flashPanel != null) {
    leftComponent=flashPanel;
  }
 else {
    JPanel swtPanel=new JPanel(new BorderLayout());
    swtPanel.add(new JLabel(""String_Node_Str"" + translate(""String_Node_Str"") + ""String_Node_Str"",JLabel.CENTER),BorderLayout.CENTER);
    swtPanel.setBackground(Color.white);
    leftComponent=swtPanel;
  }
  textValue.setContentType(""String_Node_Str"");
  previewSplitPane=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
  previewSplitPane.setDividerLocation(300);
  JPanel pan=new JPanel(new BorderLayout());
  JLabel prevLabel=new HeaderLabel(translate(""String_Node_Str""));
  prevLabel.setHorizontalAlignment(SwingConstants.CENTER);
  JLabel paramsLabel=new HeaderLabel(translate(""String_Node_Str""));
  paramsLabel.setHorizontalAlignment(SwingConstants.CENTER);
  pan.add(prevLabel,BorderLayout.NORTH);
  pan.add(leftComponent,BorderLayout.CENTER);
  previewSplitPane.setLeftComponent(pan);
  parametersPanel=new JPanel(new BorderLayout());
  parametersPanel.add(paramsLabel,BorderLayout.NORTH);
  parametersPanel.add(displayWithPreview,BorderLayout.CENTER);
  previewSplitPane.setRightComponent(parametersPanel);
  parametersPanel.setVisible(false);
  displayPanel.add(previewSplitPane,CARDFLASHPANEL);
  imagePanel=new ImagePanel();
  JPanel imagesCard=new JPanel(new BorderLayout());
  imagesCard.add(imagePanel,BorderLayout.CENTER);
  imageReplaceButton=new JButton(translate(""String_Node_Str""),View.getIcon(""String_Node_Str""));
  imageReplaceButton.setMargin(new Insets(3,3,3,10));
  imageReplaceButton.setActionCommand(""String_Node_Str"");
  imageReplaceButton.addActionListener(this);
  imageButtonsPanel=new JPanel(new FlowLayout());
  imageButtonsPanel.add(imageReplaceButton);
  imagesCard.add(imageButtonsPanel,BorderLayout.SOUTH);
  displayPanel.add(imagesCard,CARDIMAGEPANEL);
  JPanel shapesCard=new JPanel(new BorderLayout());
  JPanel previewPanel=new JPanel(new BorderLayout());
  previewImagePanel=new ImagePanel();
  previewPanel.add(previewImagePanel,BorderLayout.CENTER);
  JLabel prevIntLabel=new HeaderLabel(translate(""String_Node_Str""));
  prevIntLabel.setHorizontalAlignment(SwingConstants.CENTER);
  previewPanel.add(prevIntLabel,BorderLayout.NORTH);
  shapesCard.add(previewPanel,BorderLayout.CENTER);
  displayPanel.add(shapesCard,CARDDRAWPREVIEWPANEL);
  swfPreviewPanel=new SWFPreviwPanel();
  displayPanel.add(swfPreviewPanel,CARDSWFPREVIEWPANEL);
  displayPanel.add(new JPanel(),CARDEMPTYPANEL);
  if (actionPanel != null) {
    displayPanel.add(actionPanel,CARDACTIONSCRIPTPANEL);
  }
  if (abcPanel != null) {
    displayPanel.add(abcPanel,CARDACTIONSCRIPTPANEL);
  }
  CardLayout cl=(CardLayout)(displayPanel.getLayout());
  cl.show(displayPanel,CARDEMPTYPANEL);
  searchPanel=new JPanel();
  searchPanel.setLayout(new BorderLayout());
  searchPanel.add(filterField,BorderLayout.CENTER);
  searchPanel.add(new JLabel(View.getIcon(""String_Node_Str"")),BorderLayout.WEST);
  JLabel closeSearchButton=new JLabel(View.getIcon(""String_Node_Str""));
  closeSearchButton.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      filterField.setText(""String_Node_Str"");
      doFilter();
      searchPanel.setVisible(false);
    }
  }
);
  searchPanel.add(closeSearchButton,BorderLayout.EAST);
  JPanel pan1=new JPanel(new BorderLayout());
  pan1.add(new JScrollPane(tagTree),BorderLayout.CENTER);
  pan1.add(searchPanel,BorderLayout.SOUTH);
  filterField.setActionCommand(""String_Node_Str"");
  filterField.addActionListener(this);
  searchPanel.setVisible(false);
  filterField.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      warn();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      warn();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      warn();
    }
    public void warn(){
      doFilter();
    }
  }
);
  splitPane2=new JSplitPane(JSplitPane.VERTICAL_SPLIT,pan1,detailPanel);
  splitPane1=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,splitPane2,displayPanel);
  if (swf == null) {
    JPanel welcomePanel=new JPanel();
    welcomePanel.setLayout(new BoxLayout(welcomePanel,BoxLayout.Y_AXIS));
    JLabel welcomeToLabel=new JLabel(translate(""String_Node_Str""));
    welcomeToLabel.setFont(welcomeToLabel.getFont().deriveFont(40));
    welcomeToLabel.setAlignmentX(0.5f);
    JPanel appNamePanel=new JPanel(new FlowLayout());
    JLabel jpLabel=new JLabel(""String_Node_Str"");
    jpLabel.setAlignmentX(0.5f);
    jpLabel.setForeground(new Color(0,0,160));
    jpLabel.setFont(new Font(""String_Node_Str"",Font.BOLD,50));
    jpLabel.setHorizontalAlignment(SwingConstants.CENTER);
    appNamePanel.add(jpLabel);
    JLabel ffLabel=new JLabel(""String_Node_Str"");
    ffLabel.setAlignmentX(0.5f);
    ffLabel.setFont(new Font(""String_Node_Str"",Font.BOLD,50));
    ffLabel.setHorizontalAlignment(SwingConstants.CENTER);
    appNamePanel.add(ffLabel);
    JLabel decLabel=new JLabel(""String_Node_Str"");
    decLabel.setAlignmentX(0.5f);
    decLabel.setForeground(Color.red);
    decLabel.setFont(new Font(""String_Node_Str"",Font.BOLD,50));
    decLabel.setHorizontalAlignment(SwingConstants.CENTER);
    appNamePanel.add(decLabel);
    appNamePanel.setAlignmentX(0.5f);
    welcomePanel.add(Box.createGlue());
    welcomePanel.add(welcomeToLabel);
    welcomePanel.add(appNamePanel);
    JLabel startLabel=new JLabel(translate(""String_Node_Str""));
    startLabel.setAlignmentX(0.5f);
    startLabel.setFont(startLabel.getFont().deriveFont(30));
    welcomePanel.add(startLabel);
    welcomePanel.add(Box.createGlue());
    cnt.add(welcomePanel,BorderLayout.CENTER);
  }
 else {
    cnt.add(splitPane1,BorderLayout.CENTER);
  }
  splitPane1.addPropertyChangeListener(JSplitPane.DIVIDER_LOCATION_PROPERTY,new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent pce){
      if (splitsInited) {
        Configuration.setConfig(""String_Node_Str"",pce.getNewValue());
      }
    }
  }
);
  splitPane2.addPropertyChangeListener(JSplitPane.DIVIDER_LOCATION_PROPERTY,new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent pce){
      if (detailPanel.isVisible()) {
        Configuration.setConfig(""String_Node_Str"",pce.getNewValue());
      }
    }
  }
);
  View.centerScreen(this);
  tagTree.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if ((e.getKeyCode() == 'F') && (e.isControlDown())) {
        searchPanel.setVisible(true);
        filterField.requestFocusInWindow();
      }
    }
  }
);
  detailPanel.setVisible(false);
  enableDrop(true);
  Logger logger=Logger.getLogger(""String_Node_Str"");
  logger.addHandler(errorLogFrame.getHandler());
  logger.addHandler(new Handler(){
    private Timer timer=null;
    private int pos=0;
    @Override public void publish(    LogRecord record){
      if (record.getLevel() == Level.SEVERE) {
        errorNotificationButton.setIcon(View.getIcon(""String_Node_Str""));
        errorNotificationButton.setToolTipText(translate(""String_Node_Str""));
        if (timer != null) {
          timer.cancel();
        }
        timer=new Timer();
        timer.schedule(new TimerTask(){
          @Override public void run(){
            pos++;
            if ((pos % 2) == 0) {
              errorNotificationButton.setIcon(View.getIcon(""String_Node_Str""));
            }
 else {
              errorNotificationButton.setIcon(null);
              errorNotificationButton.setSize(16,16);
            }
            if (pos >= 4) {
              cancel();
            }
          }
        }
,500,500);
      }
    }
    @Override public void flush(){
    }
    @Override public void close() throws SecurityException {
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") public MainFrame(SWF swf){
  super();
  JRibbon rib=getRibbon();
  JRibbonBand editBand=new JRibbonBand(translate(""String_Node_Str""),null);
  editBand.setResizePolicies((List)Arrays.asList(new CoreRibbonResizePolicies.Mirror(editBand.getControlPanel()),new IconRibbonBandResizePolicy(editBand.getControlPanel())));
  JCommandButton openCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(openCommandButton,""String_Node_Str"");
  JCommandButton saveCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(saveCommandButton,""String_Node_Str"");
  JCommandButton saveasCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(saveasCommandButton,""String_Node_Str"");
  editBand.addCommandButton(openCommandButton,RibbonElementPriority.TOP);
  editBand.addCommandButton(saveCommandButton,RibbonElementPriority.TOP);
  editBand.addCommandButton(saveasCommandButton,RibbonElementPriority.TOP);
  JRibbonBand exportBand=new JRibbonBand(translate(""String_Node_Str""),null);
  exportBand.setResizePolicies((List)Arrays.asList(new CoreRibbonResizePolicies.Mirror(exportBand.getControlPanel()),new IconRibbonBandResizePolicy(exportBand.getControlPanel())));
  JCommandButton exportFlaCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(exportFlaCommandButton,""String_Node_Str"");
  JCommandButton exportAllCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(exportAllCommandButton,""String_Node_Str"");
  JCommandButton exportSelectionCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(exportSelectionCommandButton,""String_Node_Str"");
  exportBand.addCommandButton(exportFlaCommandButton,RibbonElementPriority.TOP);
  exportBand.addCommandButton(exportAllCommandButton,RibbonElementPriority.MEDIUM);
  exportBand.addCommandButton(exportSelectionCommandButton,RibbonElementPriority.MEDIUM);
  RibbonTask fileTask=new RibbonTask(translate(""String_Node_Str""),editBand,exportBand);
  JRibbonBand toolsBand=new JRibbonBand(translate(""String_Node_Str""),null);
  toolsBand.setResizePolicies((List)Arrays.asList(new CoreRibbonResizePolicies.Mirror(toolsBand.getControlPanel()),new IconRibbonBandResizePolicy(toolsBand.getControlPanel())));
  JCommandButton searchCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(searchCommandButton,""String_Node_Str"");
  JCommandButton proxyCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(proxyCommandButton,""String_Node_Str"");
  JCommandButton gotoDocumentClassCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(gotoDocumentClassCommandButton,""String_Node_Str"");
  toolsBand.addCommandButton(searchCommandButton,RibbonElementPriority.TOP);
  toolsBand.addCommandButton(proxyCommandButton,RibbonElementPriority.TOP);
  toolsBand.addCommandButton(gotoDocumentClassCommandButton,RibbonElementPriority.TOP);
  JRibbonBand deobfuscationBand=new JRibbonBand(translate(""String_Node_Str""),null);
  deobfuscationBand.setResizePolicies((List)Arrays.asList(new CoreRibbonResizePolicies.Mirror(deobfuscationBand.getControlPanel()),new IconRibbonBandResizePolicy(deobfuscationBand.getControlPanel())));
  JCommandButton deobfuscationCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(deobfuscationCommandButton,""String_Node_Str"");
  JCommandButton globalrenameCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(globalrenameCommandButton,""String_Node_Str"");
  JCommandButton renameinvalidCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(renameinvalidCommandButton,""String_Node_Str"");
  deobfuscationBand.addCommandButton(deobfuscationCommandButton,RibbonElementPriority.TOP);
  deobfuscationBand.addCommandButton(globalrenameCommandButton,RibbonElementPriority.MEDIUM);
  deobfuscationBand.addCommandButton(renameinvalidCommandButton,RibbonElementPriority.MEDIUM);
  RibbonTask toolsTask=new RibbonTask(translate(""String_Node_Str""),toolsBand,deobfuscationBand);
  JRibbonBand settingsBand=new JRibbonBand(translate(""String_Node_Str""),null);
  settingsBand.setResizePolicies((List)Arrays.asList(new CoreRibbonResizePolicies.Mirror(settingsBand.getControlPanel()),new IconRibbonBandResizePolicy(settingsBand.getControlPanel())));
  autoDeobfuscateMenuItem=new JCheckBox(translate(""String_Node_Str""));
  miInternalViewer=new JCheckBox(translate(""String_Node_Str""));
  miParallelSpeedUp=new JCheckBox(translate(""String_Node_Str""));
  miDecompile=new JCheckBox(translate(""String_Node_Str""));
  miAssociate=new JCheckBox(translate(""String_Node_Str""));
  miCacheDisk=new JCheckBox(translate(""String_Node_Str""));
  miGotoMainClassOnStartup=new JCheckBox(translate(""String_Node_Str""));
  settingsBand.addRibbonComponent(new JRibbonComponent(autoDeobfuscateMenuItem));
  settingsBand.addRibbonComponent(new JRibbonComponent(miInternalViewer));
  settingsBand.addRibbonComponent(new JRibbonComponent(miParallelSpeedUp));
  settingsBand.addRibbonComponent(new JRibbonComponent(miDecompile));
  settingsBand.addRibbonComponent(new JRibbonComponent(miAssociate));
  settingsBand.addRibbonComponent(new JRibbonComponent(miCacheDisk));
  settingsBand.addRibbonComponent(new JRibbonComponent(miGotoMainClassOnStartup));
  JRibbonBand languageBand=new JRibbonBand(translate(""String_Node_Str""),null);
  languageBand.setResizePolicies((List)Arrays.asList(new BaseRibbonBandResizePolicy<AbstractBandControlPanel>(languageBand.getControlPanel()){
    @Override public int getPreferredWidth(    int i,    int i1){
      return 105;
    }
    @Override public void install(    int i,    int i1){
    }
  }
,new IconRibbonBandResizePolicy(languageBand.getControlPanel())));
  JCommandButton setLanguageCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(setLanguageCommandButton,""String_Node_Str"");
  languageBand.addCommandButton(setLanguageCommandButton,RibbonElementPriority.TOP);
  RibbonTask settingsTask=new RibbonTask(translate(""String_Node_Str""),settingsBand,languageBand);
  JRibbonBand helpBand=new JRibbonBand(translate(""String_Node_Str""),null);
  helpBand.setResizePolicies((List)Arrays.asList(new CoreRibbonResizePolicies.Mirror(helpBand.getControlPanel()),new IconRibbonBandResizePolicy(helpBand.getControlPanel())));
  JCommandButton checkForUpdatesCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(checkForUpdatesCommandButton,""String_Node_Str"");
  JCommandButton helpUsUpdatesCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(helpUsUpdatesCommandButton,""String_Node_Str"");
  JCommandButton homepageCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(homepageCommandButton,""String_Node_Str"");
  JCommandButton aboutCommandButton=new JCommandButton(fixCommandTitle(translate(""String_Node_Str"")),View.getResizableIcon(""String_Node_Str""));
  assignListener(aboutCommandButton,""String_Node_Str"");
  helpBand.addCommandButton(aboutCommandButton,RibbonElementPriority.TOP);
  helpBand.addCommandButton(checkForUpdatesCommandButton,RibbonElementPriority.MEDIUM);
  helpBand.addCommandButton(homepageCommandButton,RibbonElementPriority.MEDIUM);
  helpBand.addCommandButton(helpUsUpdatesCommandButton,RibbonElementPriority.TOP);
  RibbonTask helpTask=new RibbonTask(translate(""String_Node_Str""),helpBand);
  rib.addTask(fileTask);
  rib.addTask(toolsTask);
  rib.addTask(settingsTask);
  rib.addTask(helpTask);
  RibbonApplicationMenu mainMenu=new RibbonApplicationMenu();
  RibbonApplicationMenuEntryPrimary exportFlaMenu=new RibbonApplicationMenuEntryPrimary(View.getResizableIcon(""String_Node_Str""),translate(""String_Node_Str""),new ActionRedirector(this,""String_Node_Str""),CommandButtonKind.ACTION_ONLY);
  RibbonApplicationMenuEntryPrimary exportAllMenu=new RibbonApplicationMenuEntryPrimary(View.getResizableIcon(""String_Node_Str""),translate(""String_Node_Str""),new ActionRedirector(this,""String_Node_Str""),CommandButtonKind.ACTION_ONLY);
  RibbonApplicationMenuEntryPrimary exportSelMenu=new RibbonApplicationMenuEntryPrimary(View.getResizableIcon(""String_Node_Str""),translate(""String_Node_Str""),new ActionRedirector(this,""String_Node_Str""),CommandButtonKind.ACTION_ONLY);
  RibbonApplicationMenuEntryPrimary checkUpdatesMenu=new RibbonApplicationMenuEntryPrimary(View.getResizableIcon(""String_Node_Str""),translate(""String_Node_Str""),new ActionRedirector(this,""String_Node_Str""),CommandButtonKind.ACTION_ONLY);
  RibbonApplicationMenuEntryPrimary aboutMenu=new RibbonApplicationMenuEntryPrimary(View.getResizableIcon(""String_Node_Str""),translate(""String_Node_Str""),new ActionRedirector(this,""String_Node_Str""),CommandButtonKind.ACTION_ONLY);
  RibbonApplicationMenuEntryFooter exitMenu=new RibbonApplicationMenuEntryFooter(View.getResizableIcon(""String_Node_Str""),translate(""String_Node_Str""),new ActionRedirector(this,""String_Node_Str""));
  mainMenu.addMenuEntry(exportFlaMenu);
  mainMenu.addMenuEntry(exportAllMenu);
  mainMenu.addMenuEntry(exportSelMenu);
  mainMenu.addMenuSeparator();
  mainMenu.addMenuEntry(checkUpdatesMenu);
  mainMenu.addMenuEntry(aboutMenu);
  mainMenu.addFooterEntry(exitMenu);
  mainMenu.addMenuSeparator();
  rib.setApplicationMenu(mainMenu);
  int w=(Integer)Configuration.getConfig(""String_Node_Str"",1000);
  int h=(Integer)Configuration.getConfig(""String_Node_Str"",700);
  Dimension dim=java.awt.Toolkit.getDefaultToolkit().getScreenSize();
  if (w > dim.width) {
    w=dim.width;
  }
  if (h > dim.height) {
    h=dim.height;
  }
  setSize(w,h);
  boolean maximizedHorizontal=(Boolean)Configuration.getConfig(""String_Node_Str"",false);
  boolean maximizedVertical=(Boolean)Configuration.getConfig(""String_Node_Str"",false);
  int state=0;
  if (maximizedHorizontal) {
    state=state | JFrame.MAXIMIZED_HORIZ;
  }
  if (maximizedVertical) {
    state=state | JFrame.MAXIMIZED_VERT;
  }
  setExtendedState(state);
  View.setWindowIcon(this);
  addWindowStateListener(new WindowStateListener(){
    @Override public void windowStateChanged(    WindowEvent e){
      int state=e.getNewState();
      Configuration.setConfig(""String_Node_Str"",(state & JFrame.MAXIMIZED_HORIZ) == JFrame.MAXIMIZED_HORIZ);
      Configuration.setConfig(""String_Node_Str"",(state & JFrame.MAXIMIZED_VERT) == JFrame.MAXIMIZED_VERT);
    }
  }
);
  addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      int state=getExtendedState();
      if ((state & JFrame.MAXIMIZED_HORIZ) == 0) {
        Configuration.setConfig(""String_Node_Str"",getWidth());
      }
      if ((state & JFrame.MAXIMIZED_VERT) == 0) {
        Configuration.setConfig(""String_Node_Str"",getHeight());
      }
    }
  }
);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      if (Main.proxyFrame != null) {
        if (Main.proxyFrame.isVisible()) {
          return;
        }
      }
      Main.exit();
    }
  }
);
  setTitle(Main.applicationVerName + ((swf != null && Configuration.DISPLAY_FILENAME) ? ""String_Node_Str"" + Main.getFileTitle() : ""String_Node_Str""));
  JMenuBar menuBar=new JMenuBar();
  try {
    flashPanel=new FlashPlayerPanel(this);
  }
 catch (  FlashUnsupportedException fue) {
  }
  JMenu menuFile=new JMenu(translate(""String_Node_Str""));
  JMenuItem miOpen=new JMenuItem(translate(""String_Node_Str""));
  miOpen.setIcon(View.getIcon(""String_Node_Str""));
  miOpen.setActionCommand(""String_Node_Str"");
  miOpen.addActionListener(this);
  JMenuItem miSave=new JMenuItem(translate(""String_Node_Str""));
  miSave.setIcon(View.getIcon(""String_Node_Str""));
  miSave.setActionCommand(""String_Node_Str"");
  miSave.addActionListener(this);
  JMenuItem miSaveAs=new JMenuItem(translate(""String_Node_Str""));
  miSaveAs.setIcon(View.getIcon(""String_Node_Str""));
  miSaveAs.setActionCommand(""String_Node_Str"");
  miSaveAs.addActionListener(this);
  JMenuItem menuExportFla=new JMenuItem(translate(""String_Node_Str""));
  menuExportFla.setActionCommand(""String_Node_Str"");
  menuExportFla.addActionListener(this);
  menuExportFla.setIcon(View.getIcon(""String_Node_Str""));
  JMenuItem menuExportAll=new JMenuItem(translate(""String_Node_Str""));
  menuExportAll.setActionCommand(""String_Node_Str"");
  menuExportAll.addActionListener(this);
  JMenuItem menuExportSel=new JMenuItem(translate(""String_Node_Str""));
  menuExportSel.setActionCommand(""String_Node_Str"");
  menuExportSel.addActionListener(this);
  menuExportAll.setIcon(View.getIcon(""String_Node_Str""));
  menuExportSel.setIcon(View.getIcon(""String_Node_Str""));
  menuFile.add(miOpen);
  menuFile.add(miSave);
  menuFile.add(miSaveAs);
  menuFile.add(menuExportFla);
  menuFile.add(menuExportAll);
  menuFile.add(menuExportSel);
  menuFile.addSeparator();
  JMenuItem miClose=new JMenuItem(translate(""String_Node_Str""));
  miClose.setIcon(View.getIcon(""String_Node_Str""));
  miClose.setActionCommand(""String_Node_Str"");
  miClose.addActionListener(this);
  menuFile.add(miClose);
  menuBar.add(menuFile);
  JMenu menuDeobfuscation=new JMenu(translate(""String_Node_Str""));
  menuDeobfuscation.setIcon(View.getIcon(""String_Node_Str""));
  JMenuItem miDeobfuscation=new JMenuItem(translate(""String_Node_Str""));
  miDeobfuscation.setActionCommand(""String_Node_Str"");
  miDeobfuscation.addActionListener(this);
  autoDeobfuscateMenuItem.setSelected((Boolean)Configuration.getConfig(""String_Node_Str"",true));
  autoDeobfuscateMenuItem.addActionListener(this);
  autoDeobfuscateMenuItem.setActionCommand(""String_Node_Str"");
  JMenuItem miRenameOneIdentifier=new JMenuItem(translate(""String_Node_Str""));
  miRenameOneIdentifier.setActionCommand(""String_Node_Str"");
  miRenameOneIdentifier.addActionListener(this);
  JMenuItem miRenameIdentifiers=new JMenuItem(translate(""String_Node_Str""));
  miRenameIdentifiers.setActionCommand(""String_Node_Str"");
  miRenameIdentifiers.addActionListener(this);
  menuDeobfuscation.add(miRenameOneIdentifier);
  menuDeobfuscation.add(miRenameIdentifiers);
  menuDeobfuscation.add(miDeobfuscation);
  JMenu menuTools=new JMenu(translate(""String_Node_Str""));
  JMenuItem miProxy=new JMenuItem(translate(""String_Node_Str""));
  miProxy.setActionCommand(""String_Node_Str"");
  miProxy.setIcon(View.getIcon(""String_Node_Str""));
  miProxy.addActionListener(this);
  JMenuItem miSearchScript=new JMenuItem(translate(""String_Node_Str""));
  miSearchScript.addActionListener(this);
  miSearchScript.setActionCommand(""String_Node_Str"");
  miSearchScript.setIcon(View.getIcon(""String_Node_Str""));
  menuTools.add(miSearchScript);
  miInternalViewer.setSelected((Boolean)Configuration.getConfig(""String_Node_Str"",(Boolean)(flashPanel == null)));
  if (flashPanel == null) {
    miInternalViewer.setSelected(true);
    miInternalViewer.setEnabled(false);
  }
  miInternalViewer.setActionCommand(""String_Node_Str"");
  miInternalViewer.addActionListener(this);
  miParallelSpeedUp.setSelected((Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
  miParallelSpeedUp.setActionCommand(""String_Node_Str"");
  miParallelSpeedUp.addActionListener(this);
  menuTools.add(miProxy);
  menuTools.add(menuDeobfuscation);
  JMenuItem miGotoDocumentClass=new JMenuItem(translate(""String_Node_Str""));
  miGotoDocumentClass.setActionCommand(""String_Node_Str"");
  miGotoDocumentClass.addActionListener(this);
  menuBar.add(menuTools);
  miDecompile.setSelected(!(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
  miDecompile.setActionCommand(""String_Node_Str"");
  miDecompile.addActionListener(this);
  miCacheDisk.setSelected((Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
  miCacheDisk.setActionCommand(""String_Node_Str"");
  miCacheDisk.addActionListener(this);
  miGotoMainClassOnStartup.setSelected((Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.FALSE));
  miGotoMainClassOnStartup.setActionCommand(""String_Node_Str"");
  miGotoMainClassOnStartup.addActionListener(this);
  miAssociate.setActionCommand(""String_Node_Str"");
  miAssociate.addActionListener(this);
  miAssociate.setSelected(Main.isAddedToContextMenu());
  JMenuItem miLanguage=new JMenuItem(translate(""String_Node_Str""));
  miLanguage.setActionCommand(""String_Node_Str"");
  miLanguage.addActionListener(this);
  JMenu menuHelp=new JMenu(translate(""String_Node_Str""));
  JMenuItem miAbout=new JMenuItem(translate(""String_Node_Str""));
  miAbout.setIcon(View.getIcon(""String_Node_Str""));
  miAbout.setActionCommand(""String_Node_Str"");
  miAbout.addActionListener(this);
  JMenuItem miCheckUpdates=new JMenuItem(translate(""String_Node_Str""));
  miCheckUpdates.setActionCommand(""String_Node_Str"");
  miCheckUpdates.setIcon(View.getIcon(""String_Node_Str""));
  miCheckUpdates.addActionListener(this);
  JMenuItem miHelpUs=new JMenuItem(translate(""String_Node_Str""));
  miHelpUs.setActionCommand(""String_Node_Str"");
  miHelpUs.setIcon(View.getIcon(""String_Node_Str""));
  miHelpUs.addActionListener(this);
  JMenuItem miHomepage=new JMenuItem(translate(""String_Node_Str""));
  miHomepage.setActionCommand(""String_Node_Str"");
  miHomepage.setIcon(View.getIcon(""String_Node_Str""));
  miHomepage.addActionListener(this);
  menuHelp.add(miCheckUpdates);
  menuHelp.add(miHelpUs);
  menuHelp.add(miHomepage);
  menuHelp.add(miAbout);
  menuBar.add(menuHelp);
  List<Object> objs=new ArrayList<>();
  if (swf != null) {
    objs.addAll(swf.tags);
  }
  this.swf=swf;
  java.awt.Container cnt=getContentPane();
  cnt.setLayout(new BorderLayout());
  cnt.add(getRibbon(),BorderLayout.NORTH);
  detailPanel=new JPanel();
  detailPanel.setLayout(new CardLayout());
  JPanel whitePanel=new JPanel();
  whitePanel.setBackground(Color.white);
  detailPanel.add(whitePanel,DETAILCARDEMPTYPANEL);
  CardLayout cl2=(CardLayout)(detailPanel.getLayout());
  cl2.show(detailPanel,DETAILCARDEMPTYPANEL);
  abcList=new ArrayList<>();
  getActionScript3(objs,abcList);
  if (!abcList.isEmpty()) {
    abcPanel=new ABCPanel(abcList,swf);
    detailPanel.add(abcPanel.tabbedPane,DETAILCARDAS3NAVIGATOR);
    menuTools.add(miGotoDocumentClass);
  }
 else {
    gotoDocumentClassCommandButton.setEnabled(false);
    actionPanel=new ActionPanel();
    deobfuscationCommandButton.setEnabled(false);
  }
  if (swf == null) {
    renameinvalidCommandButton.setEnabled(false);
    globalrenameCommandButton.setEnabled(false);
    saveCommandButton.setEnabled(false);
    saveasCommandButton.setEnabled(false);
    exportAllCommandButton.setEnabled(false);
    exportAllMenu.setEnabled(false);
    exportFlaCommandButton.setEnabled(false);
    exportFlaMenu.setEnabled(false);
    exportSelectionCommandButton.setEnabled(false);
    exportSelMenu.setEnabled(false);
    deobfuscationCommandButton.setEnabled(false);
    searchCommandButton.setEnabled(false);
  }
  UIManager.getDefaults().put(""String_Node_Str"",BasicTreeUI.class.getName());
  if (swf == null) {
    tagTree=new JTree((TreeModel)null);
  }
 else {
    tagTree=new JTree(new TagTreeModel(createTagList(objs,null),new SWFRoot((new File(Main.file)).getName())));
  }
  tagTree.addTreeSelectionListener(this);
  tagTree.setBackground(Color.white);
  tagTree.setUI(new BasicTreeUI(){
    @Override public void paint(    Graphics g,    JComponent c){
      setHashColor(Color.gray);
      super.paint(g,c);
    }
  }
);
  DragSource dragSource=DragSource.getDefaultDragSource();
  dragSource.createDefaultDragGestureRecognizer(tagTree,DnDConstants.ACTION_COPY_OR_MOVE,new DragGestureListener(){
    @Override public void dragGestureRecognized(    DragGestureEvent dge){
      dge.startDrag(DragSource.DefaultCopyDrop,new Transferable(){
        @Override public DataFlavor[] getTransferDataFlavors(){
          return new DataFlavor[]{DataFlavor.javaFileListFlavor};
        }
        @Override public boolean isDataFlavorSupported(        DataFlavor flavor){
          return flavor.equals(DataFlavor.javaFileListFlavor);
        }
        @Override public Object getTransferData(        DataFlavor flavor) throws UnsupportedFlavorException, IOException {
          if (flavor.equals(DataFlavor.javaFileListFlavor)) {
            List<File> files=new ArrayList<>();
            String tempDir=System.getProperty(""String_Node_Str"");
            if (!tempDir.endsWith(File.separator)) {
              tempDir+=File.separator;
            }
            Random rnd=new Random();
            tempDir+=""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ System.currentTimeMillis()+ ""String_Node_Str""+ rnd.nextInt(1000);
            File fTempDir=new File(tempDir);
            if (!fTempDir.exists()) {
              if (!fTempDir.mkdirs()) {
                if (!fTempDir.exists()) {
                  throw new IOException(""String_Node_Str"" + fTempDir);
                }
              }
            }
            final ExportDialog export=new ExportDialog();
            try {
              File ftemp=new File(tempDir);
              files=exportSelection(errorHandler,tempDir,export);
              files.clear();
              File fs[]=ftemp.listFiles();
              for (              File f : fs) {
                files.add(f);
              }
              Main.stopWork();
            }
 catch (            IOException ex) {
              return null;
            }
            for (            File f : files) {
              f.deleteOnExit();
            }
            new File(tempDir).deleteOnExit();
            return files;
          }
          return null;
        }
      }
,new DragSourceListener(){
        @Override public void dragEnter(        DragSourceDragEvent dsde){
          enableDrop(false);
        }
        @Override public void dragOver(        DragSourceDragEvent dsde){
        }
        @Override public void dropActionChanged(        DragSourceDragEvent dsde){
        }
        @Override public void dragExit(        DragSourceEvent dse){
        }
        @Override public void dragDropEnd(        DragSourceDropEvent dsde){
          enableDrop(true);
        }
      }
);
    }
  }
);
  final JPopupMenu contextPopupMenu=new JPopupMenu();
  final JMenuItem removeMenuItem=new JMenuItem(translate(""String_Node_Str""));
  removeMenuItem.addActionListener(this);
  removeMenuItem.setActionCommand(""String_Node_Str"");
  JMenuItem exportSelectionMenuItem=new JMenuItem(translate(""String_Node_Str""));
  exportSelectionMenuItem.setActionCommand(""String_Node_Str"");
  exportSelectionMenuItem.addActionListener(this);
  contextPopupMenu.add(exportSelectionMenuItem);
  contextPopupMenu.add(removeMenuItem);
  tagTree.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (SwingUtilities.isRightMouseButton(e)) {
        int row=tagTree.getClosestRowForLocation(e.getX(),e.getY());
        tagTree.setSelectionRow(row);
        Object tagObj=tagTree.getLastSelectedPathComponent();
        if (tagObj == null) {
          return;
        }
        if (tagObj instanceof TagNode) {
          tagObj=((TagNode)tagObj).tag;
        }
        removeMenuItem.setVisible(tagObj instanceof Tag);
        contextPopupMenu.show(e.getComponent(),e.getX(),e.getY());
      }
    }
  }
);
  TreeCellRenderer tcr=new DefaultTreeCellRenderer(){
    @Override public Component getTreeCellRendererComponent(    JTree tree,    Object value,    boolean sel,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      super.getTreeCellRendererComponent(tree,value,sel,expanded,leaf,row,hasFocus);
      Object val=value;
      if (val instanceof TagNode) {
        val=((TagNode)val).tag;
      }
      String type=getTagType(val);
      if (row == 0) {
        setIcon(View.getIcon(""String_Node_Str""));
      }
 else       if (type != null) {
        if (type.equals(""String_Node_Str"") && expanded) {
          type=""String_Node_Str"";
        }
        setIcon(View.getIcon(type + ""String_Node_Str""));
      }
 else {
      }
      String tos=value.toString();
      int sw=getFontMetrics(getFont()).stringWidth(tos);
      setPreferredSize(new Dimension(18 + sw,getPreferredSize().height));
      setUI(new BasicLabelUI());
      setOpaque(false);
      setBackgroundNonSelectionColor(Color.white);
      return this;
    }
  }
;
  tagTree.setCellRenderer(tcr);
  loadingPanel.setPreferredSize(new Dimension(30,30));
  statusPanel=new JPanel();
  statusPanel.setPreferredSize(new Dimension(1,30));
  statusPanel.setBorder(new BevelBorder(BevelBorder.LOWERED));
  statusPanel.setLayout(new BorderLayout());
  statusPanel.add(loadingPanel,BorderLayout.WEST);
  statusPanel.add(statusLabel,BorderLayout.CENTER);
  errorLogFrame=new ErrorLogFrame();
  errorNotificationButton=new JButton(""String_Node_Str"");
  errorNotificationButton.setIcon(View.getIcon(""String_Node_Str""));
  errorNotificationButton.setBorderPainted(false);
  errorNotificationButton.setFocusPainted(false);
  errorNotificationButton.setContentAreaFilled(false);
  errorNotificationButton.setMargin(new Insets(2,2,2,2));
  errorNotificationButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
  errorNotificationButton.setActionCommand(""String_Node_Str"");
  errorNotificationButton.addActionListener(this);
  errorNotificationButton.setToolTipText(translate(""String_Node_Str""));
  statusPanel.add(errorNotificationButton,BorderLayout.EAST);
  loadingPanel.setVisible(false);
  cnt.add(statusPanel,BorderLayout.SOUTH);
  if (swf != null) {
    for (    Tag t : swf.tags) {
      if (t instanceof JPEGTablesTag) {
        jtt=(JPEGTablesTag)t;
      }
    }
  }
  characters=new HashMap<>();
  List<Object> list2=new ArrayList<>();
  if (swf != null) {
    list2.addAll(swf.tags);
  }
  parseCharacters(list2);
  JPanel textTopPanel=new JPanel(new BorderLayout());
  textValue=new LineMarkedEditorPane();
  textTopPanel.add(new JScrollPane(textValue),BorderLayout.CENTER);
  textValue.setEditable(false);
  JPanel textButtonsPanel=new JPanel();
  textButtonsPanel.setLayout(new FlowLayout());
  textSaveButton=new JButton(translate(""String_Node_Str""),View.getIcon(""String_Node_Str""));
  textSaveButton.setMargin(new Insets(3,3,3,10));
  textSaveButton.setActionCommand(""String_Node_Str"");
  textSaveButton.addActionListener(this);
  textEditButton=new JButton(translate(""String_Node_Str""),View.getIcon(""String_Node_Str""));
  textEditButton.setMargin(new Insets(3,3,3,10));
  textEditButton.setActionCommand(""String_Node_Str"");
  textEditButton.addActionListener(this);
  textCancelButton=new JButton(translate(""String_Node_Str""),View.getIcon(""String_Node_Str""));
  textCancelButton.setMargin(new Insets(3,3,3,10));
  textCancelButton.setActionCommand(""String_Node_Str"");
  textCancelButton.addActionListener(this);
  textButtonsPanel.add(textEditButton);
  textButtonsPanel.add(textSaveButton);
  textButtonsPanel.add(textCancelButton);
  textSaveButton.setVisible(false);
  textCancelButton.setVisible(false);
  textTopPanel.add(textButtonsPanel,BorderLayout.SOUTH);
  displayWithPreview=new JPanel(new CardLayout());
  displayWithPreview.add(textTopPanel,CARDTEXTPANEL);
  final JPanel fontPanel=new JPanel();
  final JPanel fontParams2=new JPanel();
  fontParams2.setLayout(null);
  final Component ctable[][]=new Component[][]{{new JLabel(translate(""String_Node_Str"")),fontNameLabel=new JLabel(translate(""String_Node_Str""))},{new JLabel(translate(""String_Node_Str"")),fontIsBoldLabel=new JLabel(translate(""String_Node_Str""))},{new JLabel(translate(""String_Node_Str"")),fontIsItalicLabel=new JLabel(translate(""String_Node_Str""))},{new JLabel(translate(""String_Node_Str"")),fontAscentLabel=new JLabel(translate(""String_Node_Str""))},{new JLabel(translate(""String_Node_Str"")),fontDescentLabel=new JLabel(translate(""String_Node_Str""))},{new JLabel(translate(""String_Node_Str"")),fontLeadingLabel=new JLabel(translate(""String_Node_Str""))},{new JLabel(translate(""String_Node_Str"")),fontCharactersTextArea=new JTextArea(""String_Node_Str"")}};
  fontCharactersTextArea.setLineWrap(true);
  fontCharactersTextArea.setWrapStyleWord(true);
  fontCharactersTextArea.setOpaque(false);
  fontCharactersTextArea.setEditable(false);
  fontCharactersTextArea.setFont(new JLabel().getFont());
  final int borderLeft=10;
  final int maxws[]=new int[ctable[0].length];
  for (int x=0; x < ctable[0].length; x++) {
    int maxw=0;
    for (int y=0; y < ctable.length; y++) {
      Dimension d=ctable[y][x].getPreferredSize();
      if (d.width > maxw) {
        maxw=d.width;
      }
    }
    maxws[x]=maxw;
  }
  for (int i=0; i < ctable.length; i++) {
    fontParams2.add(ctable[i][0]);
    fontParams2.add(ctable[i][1]);
  }
  fontParams2.setPreferredSize(new Dimension(600,ctable.length * 25));
  fontChangeList=new ComponentListener(){
    @Override public void componentResized(    ComponentEvent e){
      int h=0;
      Insets is=fontPanel.getInsets();
      Insets is2=fontParams2.getInsets();
      for (int i=0; i < ctable.length; i++) {
        Dimension d=ctable[i][0].getPreferredSize();
        Dimension d2=ctable[i][1].getPreferredSize();
        ctable[i][0].setBounds(borderLeft,h,maxws[0],25);
        int w2=fontPanel.getWidth() - 3 * borderLeft - maxws[0] - is.left - is.right - 10;
        ctable[i][1].setBounds(borderLeft + maxws[0] + borderLeft,h,w2,d2.height);
        h+=Math.max(Math.max(d.height,d2.height),25);
      }
      fontParams2.setPreferredSize(new Dimension(fontPanel.getWidth() - 20,h));
      fontPanel.revalidate();
    }
    @Override public void componentMoved(    ComponentEvent e){
      componentResized(null);
    }
    @Override public void componentShown(    ComponentEvent e){
      componentResized(null);
    }
    @Override public void componentHidden(    ComponentEvent e){
      componentResized(null);
    }
  }
;
  final JPanel fontParams1=new JPanel();
  fontPanel.addComponentListener(fontChangeList);
  fontChangeList.componentResized(null);
  fontParams1.setLayout(new BoxLayout(fontParams1,BoxLayout.Y_AXIS));
  fontParams1.add(fontParams2);
  JPanel fontAddCharsPanel=new JPanel(new FlowLayout());
  fontAddCharsPanel.add(new JLabel(translate(""String_Node_Str"")));
  fontAddCharactersField=new MyTextField();
  fontAddCharactersField.setPreferredSize(new Dimension(150,fontAddCharactersField.getPreferredSize().height));
  fontAddCharsPanel.add(fontAddCharactersField);
  JButton fontAddCharsButton=new JButton(translate(""String_Node_Str""));
  fontAddCharsButton.setActionCommand(""String_Node_Str"");
  fontAddCharsButton.addActionListener(this);
  fontAddCharsPanel.add(fontAddCharsButton);
  fontParams1.add(fontAddCharsPanel);
  JPanel fontSelectionPanel=new JPanel(new FlowLayout());
  fontSelectionPanel.add(new JLabel(translate(""String_Node_Str"")));
  String fontNames[]=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
  fontSelection=new JComboBox<>(fontNames);
  fontSelection.setSelectedIndex(0);
  fontSelection.setSelectedItem(""String_Node_Str"");
  fontSelection.setSelectedItem(""String_Node_Str"");
  fontSelection.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (oldValue instanceof FontTag) {
        FontTag f=(FontTag)oldValue;
        sourceFontsMap.put(f.getFontId(),(String)fontSelection.getSelectedItem());
      }
    }
  }
);
  fontSelectionPanel.add(fontSelection);
  JPanel fontCharPanel=new JPanel();
  fontCharPanel.setLayout(new ListLayout());
  fontCharPanel.add(fontAddCharsPanel);
  fontCharPanel.add(fontSelectionPanel);
  fontParams1.add(fontCharPanel);
  fontPanel.setLayout(new BorderLayout());
  fontParams1.add(Box.createVerticalGlue());
  fontPanel.add(new JScrollPane(fontParams1),BorderLayout.CENTER);
  displayWithPreview.add(fontPanel,CARDFONTPANEL);
  Component leftComponent=null;
  displayPanel=new JPanel(new CardLayout());
  if (flashPanel != null) {
    leftComponent=flashPanel;
  }
 else {
    JPanel swtPanel=new JPanel(new BorderLayout());
    swtPanel.add(new JLabel(""String_Node_Str"" + translate(""String_Node_Str"") + ""String_Node_Str"",JLabel.CENTER),BorderLayout.CENTER);
    swtPanel.setBackground(Color.white);
    leftComponent=swtPanel;
  }
  textValue.setContentType(""String_Node_Str"");
  previewSplitPane=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
  previewSplitPane.setDividerLocation(300);
  JPanel pan=new JPanel(new BorderLayout());
  JLabel prevLabel=new HeaderLabel(translate(""String_Node_Str""));
  prevLabel.setHorizontalAlignment(SwingConstants.CENTER);
  JLabel paramsLabel=new HeaderLabel(translate(""String_Node_Str""));
  paramsLabel.setHorizontalAlignment(SwingConstants.CENTER);
  pan.add(prevLabel,BorderLayout.NORTH);
  pan.add(leftComponent,BorderLayout.CENTER);
  previewSplitPane.setLeftComponent(pan);
  parametersPanel=new JPanel(new BorderLayout());
  parametersPanel.add(paramsLabel,BorderLayout.NORTH);
  parametersPanel.add(displayWithPreview,BorderLayout.CENTER);
  previewSplitPane.setRightComponent(parametersPanel);
  parametersPanel.setVisible(false);
  displayPanel.add(previewSplitPane,CARDFLASHPANEL);
  imagePanel=new ImagePanel();
  JPanel imagesCard=new JPanel(new BorderLayout());
  imagesCard.add(imagePanel,BorderLayout.CENTER);
  imageReplaceButton=new JButton(translate(""String_Node_Str""),View.getIcon(""String_Node_Str""));
  imageReplaceButton.setMargin(new Insets(3,3,3,10));
  imageReplaceButton.setActionCommand(""String_Node_Str"");
  imageReplaceButton.addActionListener(this);
  imageButtonsPanel=new JPanel(new FlowLayout());
  imageButtonsPanel.add(imageReplaceButton);
  imagesCard.add(imageButtonsPanel,BorderLayout.SOUTH);
  displayPanel.add(imagesCard,CARDIMAGEPANEL);
  JPanel shapesCard=new JPanel(new BorderLayout());
  JPanel previewPanel=new JPanel(new BorderLayout());
  previewImagePanel=new ImagePanel();
  previewPanel.add(previewImagePanel,BorderLayout.CENTER);
  JLabel prevIntLabel=new HeaderLabel(translate(""String_Node_Str""));
  prevIntLabel.setHorizontalAlignment(SwingConstants.CENTER);
  previewPanel.add(prevIntLabel,BorderLayout.NORTH);
  shapesCard.add(previewPanel,BorderLayout.CENTER);
  displayPanel.add(shapesCard,CARDDRAWPREVIEWPANEL);
  swfPreviewPanel=new SWFPreviwPanel();
  displayPanel.add(swfPreviewPanel,CARDSWFPREVIEWPANEL);
  displayPanel.add(new JPanel(),CARDEMPTYPANEL);
  if (actionPanel != null) {
    displayPanel.add(actionPanel,CARDACTIONSCRIPTPANEL);
  }
  if (abcPanel != null) {
    displayPanel.add(abcPanel,CARDACTIONSCRIPTPANEL);
  }
  CardLayout cl=(CardLayout)(displayPanel.getLayout());
  cl.show(displayPanel,CARDEMPTYPANEL);
  searchPanel=new JPanel();
  searchPanel.setLayout(new BorderLayout());
  searchPanel.add(filterField,BorderLayout.CENTER);
  searchPanel.add(new JLabel(View.getIcon(""String_Node_Str"")),BorderLayout.WEST);
  JLabel closeSearchButton=new JLabel(View.getIcon(""String_Node_Str""));
  closeSearchButton.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      filterField.setText(""String_Node_Str"");
      doFilter();
      searchPanel.setVisible(false);
    }
  }
);
  searchPanel.add(closeSearchButton,BorderLayout.EAST);
  JPanel pan1=new JPanel(new BorderLayout());
  pan1.add(new JScrollPane(tagTree),BorderLayout.CENTER);
  pan1.add(searchPanel,BorderLayout.SOUTH);
  filterField.setActionCommand(""String_Node_Str"");
  filterField.addActionListener(this);
  searchPanel.setVisible(false);
  filterField.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      warn();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      warn();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      warn();
    }
    public void warn(){
      doFilter();
    }
  }
);
  splitPane2=new JSplitPane(JSplitPane.VERTICAL_SPLIT,pan1,detailPanel);
  splitPane1=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,splitPane2,displayPanel);
  if (swf == null) {
    JPanel welcomePanel=new JPanel();
    welcomePanel.setLayout(new BoxLayout(welcomePanel,BoxLayout.Y_AXIS));
    JLabel welcomeToLabel=new JLabel(translate(""String_Node_Str""));
    welcomeToLabel.setFont(welcomeToLabel.getFont().deriveFont(40));
    welcomeToLabel.setAlignmentX(0.5f);
    JPanel appNamePanel=new JPanel(new FlowLayout());
    JLabel jpLabel=new JLabel(""String_Node_Str"");
    jpLabel.setAlignmentX(0.5f);
    jpLabel.setForeground(new Color(0,0,160));
    jpLabel.setFont(new Font(""String_Node_Str"",Font.BOLD,50));
    jpLabel.setHorizontalAlignment(SwingConstants.CENTER);
    appNamePanel.add(jpLabel);
    JLabel ffLabel=new JLabel(""String_Node_Str"");
    ffLabel.setAlignmentX(0.5f);
    ffLabel.setFont(new Font(""String_Node_Str"",Font.BOLD,50));
    ffLabel.setHorizontalAlignment(SwingConstants.CENTER);
    appNamePanel.add(ffLabel);
    JLabel decLabel=new JLabel(""String_Node_Str"");
    decLabel.setAlignmentX(0.5f);
    decLabel.setForeground(Color.red);
    decLabel.setFont(new Font(""String_Node_Str"",Font.BOLD,50));
    decLabel.setHorizontalAlignment(SwingConstants.CENTER);
    appNamePanel.add(decLabel);
    appNamePanel.setAlignmentX(0.5f);
    welcomePanel.add(Box.createGlue());
    welcomePanel.add(welcomeToLabel);
    welcomePanel.add(appNamePanel);
    JLabel startLabel=new JLabel(translate(""String_Node_Str""));
    startLabel.setAlignmentX(0.5f);
    startLabel.setFont(startLabel.getFont().deriveFont(30));
    welcomePanel.add(startLabel);
    welcomePanel.add(Box.createGlue());
    cnt.add(welcomePanel,BorderLayout.CENTER);
  }
 else {
    cnt.add(splitPane1,BorderLayout.CENTER);
  }
  splitPane1.addPropertyChangeListener(JSplitPane.DIVIDER_LOCATION_PROPERTY,new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent pce){
      if (splitsInited) {
        Configuration.setConfig(""String_Node_Str"",pce.getNewValue());
      }
    }
  }
);
  splitPane2.addPropertyChangeListener(JSplitPane.DIVIDER_LOCATION_PROPERTY,new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent pce){
      if (detailPanel.isVisible()) {
        Configuration.setConfig(""String_Node_Str"",pce.getNewValue());
      }
    }
  }
);
  View.centerScreen(this);
  tagTree.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if ((e.getKeyCode() == 'F') && (e.isControlDown())) {
        searchPanel.setVisible(true);
        filterField.requestFocusInWindow();
      }
    }
  }
);
  detailPanel.setVisible(false);
  enableDrop(true);
  Logger logger=Logger.getLogger(""String_Node_Str"");
  logger.addHandler(errorLogFrame.getHandler());
  logger.addHandler(new Handler(){
    private Timer timer=null;
    private int pos=0;
    @Override public void publish(    final LogRecord record){
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          if (record.getLevel() == Level.SEVERE) {
            errorNotificationButton.setIcon(View.getIcon(""String_Node_Str""));
            errorNotificationButton.setToolTipText(translate(""String_Node_Str""));
            if (timer != null) {
              timer.cancel();
            }
            timer=new Timer();
            timer.schedule(new TimerTask(){
              @Override public void run(){
                View.execInEventDispatch(new Runnable(){
                  @Override public void run(){
                    pos++;
                    if ((pos % 2) == 0 || (pos >= 4)) {
                      errorNotificationButton.setIcon(View.getIcon(""String_Node_Str""));
                    }
 else {
                      errorNotificationButton.setIcon(null);
                      errorNotificationButton.setSize(16,16);
                    }
                  }
                }
);
                if (pos >= 4) {
                  cancel();
                }
              }
            }
,500,500);
          }
        }
      }
);
    }
    @Override public void flush(){
    }
    @Override public void close() throws SecurityException {
    }
  }
);
}",0.9946063889774204
62051,"@Override public void publish(LogRecord record){
  if (record.getLevel() == Level.SEVERE) {
    errorNotificationButton.setIcon(View.getIcon(""String_Node_Str""));
    errorNotificationButton.setToolTipText(translate(""String_Node_Str""));
    if (timer != null) {
      timer.cancel();
    }
    timer=new Timer();
    timer.schedule(new TimerTask(){
      @Override public void run(){
        pos++;
        if ((pos % 2) == 0) {
          errorNotificationButton.setIcon(View.getIcon(""String_Node_Str""));
        }
 else {
          errorNotificationButton.setIcon(null);
          errorNotificationButton.setSize(16,16);
        }
        if (pos >= 4) {
          cancel();
        }
      }
    }
,500,500);
  }
}","@Override public void publish(final LogRecord record){
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      if (record.getLevel() == Level.SEVERE) {
        errorNotificationButton.setIcon(View.getIcon(""String_Node_Str""));
        errorNotificationButton.setToolTipText(translate(""String_Node_Str""));
        if (timer != null) {
          timer.cancel();
        }
        timer=new Timer();
        timer.schedule(new TimerTask(){
          @Override public void run(){
            View.execInEventDispatch(new Runnable(){
              @Override public void run(){
                pos++;
                if ((pos % 2) == 0 || (pos >= 4)) {
                  errorNotificationButton.setIcon(View.getIcon(""String_Node_Str""));
                }
 else {
                  errorNotificationButton.setIcon(null);
                  errorNotificationButton.setSize(16,16);
                }
              }
            }
);
            if (pos >= 4) {
              cancel();
            }
          }
        }
,500,500);
      }
    }
  }
);
}",0.7458006718924972
62052,"public void log(Level level,String msg,Throwable ex){
  StringWriter sw=new StringWriter();
  ex.printStackTrace(new PrintWriter(sw));
  log(level,msg,sw.toString());
}","public void log(Level level,String msg,Throwable ex){
  StringWriter sw=new StringWriter();
  if (ex != null) {
    ex.printStackTrace(new PrintWriter(sw));
  }
  log(level,msg,sw.toString());
}",0.9281767955801103
62053,"public static String convertSoundLayer(int layerIndex,String backgroundColor,HashMap<Integer,CharacterTag> characters,List<Tag> tags,List<Tag> timeLineTags){
  String ret=""String_Node_Str"";
  StartSoundTag lastStartSound=null;
  SoundStreamHeadTypeTag lastSoundStreamHead=null;
  StartSoundTag startSound=null;
  SoundStreamHeadTypeTag soundStreamHead=null;
  int duration=1;
  int frame=0;
  for (  Tag t : timeLineTags) {
    if (t instanceof StartSoundTag) {
      startSound=(StartSoundTag)t;
    }
    if (t instanceof SoundStreamHeadTypeTag) {
      soundStreamHead=(SoundStreamHeadTypeTag)t;
    }
    if (t instanceof ShowFrameTag) {
      if (soundStreamHead != null || startSound != null) {
        if (lastSoundStreamHead != null || lastStartSound != null) {
          ret+=convertFrame(false,characters,tags,lastSoundStreamHead,lastStartSound,frame,null,false,duration,""String_Node_Str"",""String_Node_Str"");
        }
        frame+=duration;
        duration=1;
        lastSoundStreamHead=soundStreamHead;
        lastStartSound=startSound;
        soundStreamHead=null;
        startSound=null;
      }
 else {
        duration++;
      }
    }
  }
  if (lastSoundStreamHead != null || lastStartSound != null) {
    if (frame < 0) {
      frame=0;
      duration=1;
    }
    ret+=convertFrame(false,characters,tags,lastSoundStreamHead,lastStartSound,frame,null,false,duration,""String_Node_Str"",""String_Node_Str"");
  }
  if (!ret.equals(""String_Node_Str"")) {
    ret=""String_Node_Str"" + layerIndex + ""String_Node_Str""+ randomOutlineColor()+ ""String_Node_Str""+ ""String_Node_Str""+ ret+ ""String_Node_Str""+ ""String_Node_Str"";
  }
  return ret;
}","public static String convertSoundLayer(int layerIndex,String backgroundColor,HashMap<Integer,CharacterTag> characters,List<Tag> tags,List<Tag> timeLineTags){
  String ret=""String_Node_Str"";
  StartSoundTag lastStartSound=null;
  SoundStreamHeadTypeTag lastSoundStreamHead=null;
  StartSoundTag startSound=null;
  SoundStreamHeadTypeTag soundStreamHead=null;
  int duration=1;
  int frame=0;
  for (  Tag t : timeLineTags) {
    if (t instanceof StartSoundTag) {
      startSound=(StartSoundTag)t;
    }
    if (t instanceof SoundStreamHeadTypeTag) {
      soundStreamHead=(SoundStreamHeadTypeTag)t;
    }
    if (t instanceof ShowFrameTag) {
      if (soundStreamHead != null || startSound != null) {
        if (lastSoundStreamHead != null || lastStartSound != null) {
          ret+=convertFrame(false,characters,tags,lastSoundStreamHead,lastStartSound,frame,duration,""String_Node_Str"",""String_Node_Str"");
        }
        frame+=duration;
        duration=1;
        lastSoundStreamHead=soundStreamHead;
        lastStartSound=startSound;
        soundStreamHead=null;
        startSound=null;
      }
 else {
        duration++;
      }
    }
  }
  if (lastSoundStreamHead != null || lastStartSound != null) {
    if (frame < 0) {
      frame=0;
      duration=1;
    }
    ret+=convertFrame(false,characters,tags,lastSoundStreamHead,lastStartSound,frame,duration,""String_Node_Str"",""String_Node_Str"");
  }
  if (!ret.equals(""String_Node_Str"")) {
    ret=""String_Node_Str"" + layerIndex + ""String_Node_Str""+ randomOutlineColor()+ ""String_Node_Str""+ ""String_Node_Str""+ ret+ ""String_Node_Str""+ ""String_Node_Str"";
  }
  return ret;
}",0.99330900243309
62054,"public static String convertTimeline(int spriteId,List<Integer> oneInstanceShapes,String backgroundColor,List<Tag> tags,List<Tag> timelineTags,HashMap<Integer,CharacterTag> characters,String name){
  String ret=""String_Node_Str"";
  ret+=""String_Node_Str"" + name + ""String_Node_Str"";
  ret+=""String_Node_Str"";
  int layerCount=getLayerCount(timelineTags);
  Stack<Integer> parentLayers=new Stack<>();
  int index=0;
  for (int d=layerCount; d >= 1; d--, index++) {
    for (    Tag t : timelineTags) {
      if (t instanceof PlaceObjectTypeTag) {
        PlaceObjectTypeTag po=(PlaceObjectTypeTag)t;
        if (po.getClipDepth() == d) {
          for (int m=po.getDepth(); m < po.getClipDepth(); m++) {
            parentLayers.push(index);
          }
          ret+=""String_Node_Str"" + (index + 1) + ""String_Node_Str""+ randomOutlineColor()+ ""String_Node_Str"";
          ret+=""String_Node_Str"";
          ret+=""String_Node_Str"";
          ret+=convertFrames(""String_Node_Str"",""String_Node_Str"",oneInstanceShapes,tags,timelineTags,characters,po.getDepth());
          ret+=""String_Node_Str"";
          index++;
          break;
        }
      }
    }
    boolean hasClipDepth=false;
    for (    Tag t : timelineTags) {
      if (t instanceof PlaceObjectTypeTag) {
        PlaceObjectTypeTag po=(PlaceObjectTypeTag)t;
        if (po.getDepth() == d) {
          if (po.getClipDepth() != -1) {
            hasClipDepth=true;
            break;
          }
        }
      }
    }
    if (hasClipDepth) {
      index--;
      continue;
    }
    int parentLayer=-1;
    if (!parentLayers.isEmpty()) {
      parentLayer=parentLayers.pop();
    }
    String layerPrev=""String_Node_Str"";
    layerPrev+=""String_Node_Str"" + (index + 1) + ""String_Node_Str""+ randomOutlineColor()+ ""String_Node_Str"";
    if (d == 1) {
      layerPrev+=""String_Node_Str"";
    }
    if (parentLayer != -1) {
      if (parentLayer != d) {
        layerPrev+=""String_Node_Str"" + (parentLayer) + ""String_Node_Str"";
      }
    }
    layerPrev+=""String_Node_Str"";
    String layerAfter=""String_Node_Str"";
    String cf=convertFrames(layerPrev,layerAfter,oneInstanceShapes,tags,timelineTags,characters,d);
    if (cf.equals(""String_Node_Str"")) {
      index--;
    }
    ret+=cf;
  }
  int soundLayerIndex=layerCount;
  layerCount++;
  ret+=convertSoundLayer(soundLayerIndex,backgroundColor,characters,tags,timelineTags);
  int actionScriptLayerIndex=layerCount;
  layerCount++;
  ret+=convertActionScriptLayer(actionScriptLayerIndex,spriteId,tags,timelineTags,backgroundColor);
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  return ret;
}","public static String convertTimeline(int spriteId,List<Integer> oneInstanceShapes,String backgroundColor,List<Tag> tags,List<Tag> timelineTags,HashMap<Integer,CharacterTag> characters,String name){
  String ret=""String_Node_Str"";
  ret+=""String_Node_Str"" + name + ""String_Node_Str"";
  ret+=""String_Node_Str"";
  ret+=convertLabelsLayer(spriteId,tags,timelineTags,backgroundColor);
  ret+=convertActionScriptLayer(spriteId,tags,timelineTags,backgroundColor);
  int layerCount=getLayerCount(timelineTags);
  Stack<Integer> parentLayers=new Stack<>();
  int index=0;
  for (int d=layerCount; d >= 1; d--, index++) {
    for (    Tag t : timelineTags) {
      if (t instanceof PlaceObjectTypeTag) {
        PlaceObjectTypeTag po=(PlaceObjectTypeTag)t;
        if (po.getClipDepth() == d) {
          for (int m=po.getDepth(); m < po.getClipDepth(); m++) {
            parentLayers.push(index);
          }
          ret+=""String_Node_Str"" + (index + 1) + ""String_Node_Str""+ randomOutlineColor()+ ""String_Node_Str"";
          ret+=""String_Node_Str"";
          ret+=""String_Node_Str"";
          ret+=convertFrames(""String_Node_Str"",""String_Node_Str"",oneInstanceShapes,tags,timelineTags,characters,po.getDepth());
          ret+=""String_Node_Str"";
          index++;
          break;
        }
      }
    }
    boolean hasClipDepth=false;
    for (    Tag t : timelineTags) {
      if (t instanceof PlaceObjectTypeTag) {
        PlaceObjectTypeTag po=(PlaceObjectTypeTag)t;
        if (po.getDepth() == d) {
          if (po.getClipDepth() != -1) {
            hasClipDepth=true;
            break;
          }
        }
      }
    }
    if (hasClipDepth) {
      index--;
      continue;
    }
    int parentLayer=-1;
    if (!parentLayers.isEmpty()) {
      parentLayer=parentLayers.pop();
    }
    String layerPrev=""String_Node_Str"";
    layerPrev+=""String_Node_Str"" + (index + 1) + ""String_Node_Str""+ randomOutlineColor()+ ""String_Node_Str"";
    if (d == 1) {
      layerPrev+=""String_Node_Str"";
    }
    if (parentLayer != -1) {
      if (parentLayer != d) {
        layerPrev+=""String_Node_Str"" + (parentLayer) + ""String_Node_Str"";
      }
    }
    layerPrev+=""String_Node_Str"";
    String layerAfter=""String_Node_Str"";
    String cf=convertFrames(layerPrev,layerAfter,oneInstanceShapes,tags,timelineTags,characters,d);
    if (cf.equals(""String_Node_Str"")) {
      index--;
    }
    ret+=cf;
  }
  int soundLayerIndex=layerCount;
  layerCount++;
  ret+=convertSoundLayer(soundLayerIndex,backgroundColor,characters,tags,timelineTags);
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  return ret;
}",0.9205133116261252
62055,"private static String convertFrame(boolean shapeTween,HashMap<Integer,CharacterTag> characters,List<Tag> tags,SoundStreamHeadTypeTag soundStreamHead,StartSoundTag startSound,int frame,String frameName,boolean isAnchor,int duration,String actionScript,String elements){
  String ret=""String_Node_Str"";
  DefineSoundTag sound=null;
  if (startSound != null) {
    for (    Tag t : tags) {
      if (t instanceof DefineSoundTag) {
        DefineSoundTag s=(DefineSoundTag)t;
        if (s.soundId == startSound.soundId) {
          sound=s;
          break;
        }
      }
    }
  }
  ret+=""String_Node_Str"" + (frame) + ""String_Node_Str"";
  if (duration > 1) {
    ret+=""String_Node_Str"" + duration + ""String_Node_Str"";
  }
  if (frameName != null) {
    ret+=""String_Node_Str"" + frameName + ""String_Node_Str"";
    if (isAnchor) {
      ret+=""String_Node_Str"";
    }
 else {
      ret+=""String_Node_Str"";
    }
    isAnchor=false;
    frameName=null;
  }
  if (shapeTween) {
    ret+=""String_Node_Str"" + KEY_MODE_SHAPE_TWEEN + ""String_Node_Str"";
  }
 else {
    ret+=""String_Node_Str"" + KEY_MODE_NORMAL + ""String_Node_Str"";
  }
  String soundEnvelopeStr=""String_Node_Str"";
  if (soundStreamHead != null) {
    ret+=""String_Node_Str"" + soundStreamHead.getCharacterId() + ""String_Node_Str""+ soundStreamHead.getExportFormat()+ ""String_Node_Str"";
    ret+=""String_Node_Str"";
    soundEnvelopeStr+=""String_Node_Str"";
    soundEnvelopeStr+=""String_Node_Str"";
    soundEnvelopeStr+=""String_Node_Str"";
  }
  if (startSound != null && sound != null) {
    ret+=""String_Node_Str"" + sound.soundId + ""String_Node_Str""+ sound.getExportFormat()+ ""String_Node_Str"";
    if (startSound.soundInfo.hasInPoint) {
      ret+=""String_Node_Str"" + startSound.soundInfo.inPoint + ""String_Node_Str"";
    }
    if (startSound.soundInfo.hasOutPoint) {
      ret+=""String_Node_Str"" + startSound.soundInfo.outPoint + ""String_Node_Str"";
    }
    if (startSound.soundInfo.hasLoops) {
      if (startSound.soundInfo.loopCount == 32767) {
        ret+=""String_Node_Str"";
      }
      ret+=""String_Node_Str"" + startSound.soundInfo.loopCount + ""String_Node_Str"";
    }
    if (startSound.soundInfo.syncStop) {
      ret+=""String_Node_Str"";
    }
 else     if (startSound.soundInfo.syncNoMultiple) {
      ret+=""String_Node_Str"";
    }
    ;
    soundEnvelopeStr+=""String_Node_Str"";
    if (startSound.soundInfo.hasEnvelope) {
      for (      SOUNDENVELOPE env : startSound.soundInfo.envelopeRecords) {
        soundEnvelopeStr+=""String_Node_Str"" + env.pos44 + ""String_Node_Str""+ env.leftLevel+ ""String_Node_Str""+ env.rightLevel+ ""String_Node_Str"";
      }
      if (startSound.soundInfo.envelopeRecords.length == 1 && startSound.soundInfo.envelopeRecords[0].leftLevel == 32768 && startSound.soundInfo.envelopeRecords[0].pos44 == 0 && startSound.soundInfo.envelopeRecords[0].rightLevel == 0) {
        ret+=""String_Node_Str"";
      }
 else       if (startSound.soundInfo.envelopeRecords.length == 1 && startSound.soundInfo.envelopeRecords[0].leftLevel == 0 && startSound.soundInfo.envelopeRecords[0].pos44 == 0 && startSound.soundInfo.envelopeRecords[0].rightLevel == 32768) {
        ret+=""String_Node_Str"";
      }
 else       if (startSound.soundInfo.envelopeRecords.length == 2 && startSound.soundInfo.envelopeRecords[0].leftLevel == 32768 && startSound.soundInfo.envelopeRecords[0].pos44 == 0 && startSound.soundInfo.envelopeRecords[0].rightLevel == 0 && startSound.soundInfo.envelopeRecords[1].leftLevel == 0 && startSound.soundInfo.envelopeRecords[1].pos44 == sound.soundSampleCount && startSound.soundInfo.envelopeRecords[1].rightLevel == 32768) {
        ret+=""String_Node_Str"";
      }
 else       if (startSound.soundInfo.envelopeRecords.length == 2 && startSound.soundInfo.envelopeRecords[0].leftLevel == 0 && startSound.soundInfo.envelopeRecords[0].pos44 == 0 && startSound.soundInfo.envelopeRecords[0].rightLevel == 32768 && startSound.soundInfo.envelopeRecords[1].leftLevel == 32768 && startSound.soundInfo.envelopeRecords[1].pos44 == sound.soundSampleCount && startSound.soundInfo.envelopeRecords[1].rightLevel == 0) {
        ret+=""String_Node_Str"";
      }
 else {
        ret+=""String_Node_Str"";
      }
    }
 else {
      soundEnvelopeStr+=""String_Node_Str"";
    }
    soundEnvelopeStr+=""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  ret+=soundEnvelopeStr;
  if (!actionScript.equals(""String_Node_Str"")) {
    ret+=""String_Node_Str"";
    ret+=actionScript;
    ret+=""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  ret+=elements;
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  return ret;
}","private static String convertFrame(boolean shapeTween,HashMap<Integer,CharacterTag> characters,List<Tag> tags,SoundStreamHeadTypeTag soundStreamHead,StartSoundTag startSound,int frame,int duration,String actionScript,String elements){
  String ret=""String_Node_Str"";
  DefineSoundTag sound=null;
  if (startSound != null) {
    for (    Tag t : tags) {
      if (t instanceof DefineSoundTag) {
        DefineSoundTag s=(DefineSoundTag)t;
        if (s.soundId == startSound.soundId) {
          sound=s;
          break;
        }
      }
    }
  }
  ret+=""String_Node_Str"" + (frame) + ""String_Node_Str"";
  if (duration > 1) {
    ret+=""String_Node_Str"" + duration + ""String_Node_Str"";
  }
  if (shapeTween) {
    ret+=""String_Node_Str"" + KEY_MODE_SHAPE_TWEEN + ""String_Node_Str"";
  }
 else {
    ret+=""String_Node_Str"" + KEY_MODE_NORMAL + ""String_Node_Str"";
  }
  String soundEnvelopeStr=""String_Node_Str"";
  if (soundStreamHead != null) {
    ret+=""String_Node_Str"" + soundStreamHead.getCharacterId() + ""String_Node_Str""+ soundStreamHead.getExportFormat()+ ""String_Node_Str"";
    ret+=""String_Node_Str"";
    soundEnvelopeStr+=""String_Node_Str"";
    soundEnvelopeStr+=""String_Node_Str"";
    soundEnvelopeStr+=""String_Node_Str"";
  }
  if (startSound != null && sound != null) {
    ret+=""String_Node_Str"" + sound.soundId + ""String_Node_Str""+ sound.getExportFormat()+ ""String_Node_Str"";
    if (startSound.soundInfo.hasInPoint) {
      ret+=""String_Node_Str"" + startSound.soundInfo.inPoint + ""String_Node_Str"";
    }
    if (startSound.soundInfo.hasOutPoint) {
      ret+=""String_Node_Str"" + startSound.soundInfo.outPoint + ""String_Node_Str"";
    }
    if (startSound.soundInfo.hasLoops) {
      if (startSound.soundInfo.loopCount == 32767) {
        ret+=""String_Node_Str"";
      }
      ret+=""String_Node_Str"" + startSound.soundInfo.loopCount + ""String_Node_Str"";
    }
    if (startSound.soundInfo.syncStop) {
      ret+=""String_Node_Str"";
    }
 else     if (startSound.soundInfo.syncNoMultiple) {
      ret+=""String_Node_Str"";
    }
    ;
    soundEnvelopeStr+=""String_Node_Str"";
    if (startSound.soundInfo.hasEnvelope) {
      for (      SOUNDENVELOPE env : startSound.soundInfo.envelopeRecords) {
        soundEnvelopeStr+=""String_Node_Str"" + env.pos44 + ""String_Node_Str""+ env.leftLevel+ ""String_Node_Str""+ env.rightLevel+ ""String_Node_Str"";
      }
      if (startSound.soundInfo.envelopeRecords.length == 1 && startSound.soundInfo.envelopeRecords[0].leftLevel == 32768 && startSound.soundInfo.envelopeRecords[0].pos44 == 0 && startSound.soundInfo.envelopeRecords[0].rightLevel == 0) {
        ret+=""String_Node_Str"";
      }
 else       if (startSound.soundInfo.envelopeRecords.length == 1 && startSound.soundInfo.envelopeRecords[0].leftLevel == 0 && startSound.soundInfo.envelopeRecords[0].pos44 == 0 && startSound.soundInfo.envelopeRecords[0].rightLevel == 32768) {
        ret+=""String_Node_Str"";
      }
 else       if (startSound.soundInfo.envelopeRecords.length == 2 && startSound.soundInfo.envelopeRecords[0].leftLevel == 32768 && startSound.soundInfo.envelopeRecords[0].pos44 == 0 && startSound.soundInfo.envelopeRecords[0].rightLevel == 0 && startSound.soundInfo.envelopeRecords[1].leftLevel == 0 && startSound.soundInfo.envelopeRecords[1].pos44 == sound.soundSampleCount && startSound.soundInfo.envelopeRecords[1].rightLevel == 32768) {
        ret+=""String_Node_Str"";
      }
 else       if (startSound.soundInfo.envelopeRecords.length == 2 && startSound.soundInfo.envelopeRecords[0].leftLevel == 0 && startSound.soundInfo.envelopeRecords[0].pos44 == 0 && startSound.soundInfo.envelopeRecords[0].rightLevel == 32768 && startSound.soundInfo.envelopeRecords[1].leftLevel == 32768 && startSound.soundInfo.envelopeRecords[1].pos44 == sound.soundSampleCount && startSound.soundInfo.envelopeRecords[1].rightLevel == 0) {
        ret+=""String_Node_Str"";
      }
 else {
        ret+=""String_Node_Str"";
      }
    }
 else {
      soundEnvelopeStr+=""String_Node_Str"";
    }
    soundEnvelopeStr+=""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  ret+=soundEnvelopeStr;
  if (!actionScript.equals(""String_Node_Str"")) {
    ret+=""String_Node_Str"";
    ret+=actionScript;
    ret+=""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  ret+=elements;
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  return ret;
}",0.9702814848043064
62056,"public static String convertActionScriptLayer(int layerIndex,int spriteId,List<Tag> tags,List<Tag> timeLineTags,String backgroundColor){
  String ret=""String_Node_Str"";
  String script=""String_Node_Str"";
  int duration=0;
  int frame=0;
  for (  Tag t : tags) {
    if (t instanceof DoInitActionTag) {
      DoInitActionTag dia=(DoInitActionTag)t;
      if (dia.spriteId == spriteId) {
        script+=convertActionScript(dia);
      }
    }
  }
  if (!script.equals(""String_Node_Str"")) {
    script=""String_Node_Str"" + script + ""String_Node_Str"";
  }
  for (  Tag t : timeLineTags) {
    if (t instanceof DoActionTag) {
      DoActionTag da=(DoActionTag)t;
      script+=convertActionScript(da);
    }
    if (t instanceof ShowFrameTag) {
      if (script.equals(""String_Node_Str"")) {
        duration++;
      }
 else {
        if (duration > 0) {
          ret+=""String_Node_Str"" + (frame - duration) + ""String_Node_Str"";
          if (duration > 1) {
            ret+=""String_Node_Str"" + duration + ""String_Node_Str"";
          }
          ret+=""String_Node_Str"" + KEY_MODE_NORMAL + ""String_Node_Str"";
          ret+=""String_Node_Str"";
          ret+=""String_Node_Str"";
          ret+=""String_Node_Str"";
        }
        ret+=""String_Node_Str"" + frame + ""String_Node_Str"";
        ret+=""String_Node_Str"" + KEY_MODE_NORMAL + ""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=script;
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        script=""String_Node_Str"";
        duration=0;
      }
      frame++;
    }
  }
  if (!ret.equals(""String_Node_Str"")) {
    ret=""String_Node_Str"" + (layerIndex + 1) + ""String_Node_Str""+ randomOutlineColor()+ ""String_Node_Str""+ ""String_Node_Str""+ ret+ ""String_Node_Str""+ ""String_Node_Str"";
  }
  return ret;
}","public static String convertActionScriptLayer(int spriteId,List<Tag> tags,List<Tag> timeLineTags,String backgroundColor){
  String ret=""String_Node_Str"";
  String script=""String_Node_Str"";
  int duration=0;
  int frame=0;
  for (  Tag t : tags) {
    if (t instanceof DoInitActionTag) {
      DoInitActionTag dia=(DoInitActionTag)t;
      if (dia.spriteId == spriteId) {
        script+=convertActionScript(dia);
      }
    }
  }
  if (!script.equals(""String_Node_Str"")) {
    script=""String_Node_Str"" + script + ""String_Node_Str"";
  }
  for (  Tag t : timeLineTags) {
    if (t instanceof DoActionTag) {
      DoActionTag da=(DoActionTag)t;
      script+=convertActionScript(da);
    }
    if (t instanceof ShowFrameTag) {
      if (script.equals(""String_Node_Str"")) {
        duration++;
      }
 else {
        if (duration > 0) {
          ret+=""String_Node_Str"" + (frame - duration) + ""String_Node_Str"";
          if (duration > 1) {
            ret+=""String_Node_Str"" + duration + ""String_Node_Str"";
          }
          ret+=""String_Node_Str"" + KEY_MODE_NORMAL + ""String_Node_Str"";
          ret+=""String_Node_Str"";
          ret+=""String_Node_Str"";
          ret+=""String_Node_Str"";
        }
        ret+=""String_Node_Str"" + frame + ""String_Node_Str"";
        ret+=""String_Node_Str"" + KEY_MODE_NORMAL + ""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=script;
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        script=""String_Node_Str"";
        duration=0;
      }
      frame++;
    }
  }
  if (!ret.equals(""String_Node_Str"")) {
    ret=""String_Node_Str"" + randomOutlineColor() + ""String_Node_Str""+ ""String_Node_Str""+ ret+ ""String_Node_Str""+ ""String_Node_Str"";
  }
  return ret;
}",0.9851485148514852
62057,"private static String convertFrames(String prevStr,String afterStr,List<Integer> oneInstanceShapes,List<Tag> tags,List<Tag> timelineTags,HashMap<Integer,CharacterTag> characters,int depth){
  String ret=""String_Node_Str"";
  prevStr+=""String_Node_Str"";
  int frame=-1;
  String elements=""String_Node_Str"";
  String lastElements=""String_Node_Str"";
  int duration=1;
  String frameName=null;
  boolean isAnchor=false;
  CharacterTag character=null;
  MATRIX matrix=null;
  String instanceName=null;
  CXFORM colorTransForm=null;
  CXFORMWITHALPHA colorTransFormAlpha=null;
  boolean cacheAsBitmap=false;
  int blendMode=0;
  List<FILTER> filters=new ArrayList<>();
  boolean isVisible=true;
  RGBA backGroundColor=null;
  CLIPACTIONS clipActions=null;
  int characterId=-1;
  int ratio=-1;
  boolean shapeTween=false;
  boolean lastShapeTween=false;
  for (  Tag t : timelineTags) {
    if (t instanceof PlaceObjectTypeTag) {
      PlaceObjectTypeTag po=(PlaceObjectTypeTag)t;
      if (po.getDepth() == depth) {
        int newCharId=po.getCharacterId();
        if (newCharId == -1) {
          newCharId=characterId;
        }
        characterId=newCharId;
        if (characters.containsKey(characterId)) {
          character=characters.get(characterId);
          if (po.flagMove()) {
            MATRIX matrix2=po.getMatrix();
            if (matrix2 != null) {
              matrix=matrix2;
            }
            String instanceName2=po.getInstanceName();
            if (instanceName2 != null) {
              instanceName=instanceName2;
            }
            CXFORM colorTransForm2=po.getColorTransform();
            if (colorTransForm2 != null) {
              colorTransForm=colorTransForm2;
            }
            CXFORMWITHALPHA colorTransFormAlpha2=po.getColorTransformWithAlpha();
            if (colorTransFormAlpha2 != null) {
              colorTransFormAlpha=colorTransFormAlpha2;
            }
            CLIPACTIONS clipActions2=po.getClipActions();
            if (clipActions2 != null) {
              clipActions=clipActions2;
            }
            if (po.cacheAsBitmap()) {
              cacheAsBitmap=true;
            }
            int blendMode2=po.getBlendMode();
            if (blendMode2 > 0) {
              blendMode=blendMode2;
            }
            List<FILTER> filters2=po.getFilters();
            if (filters2 != null) {
              filters=filters2;
            }
            int ratio2=po.getRatio();
            if (ratio2 > -1) {
              ratio=ratio2;
            }
          }
 else {
            matrix=po.getMatrix();
            instanceName=po.getInstanceName();
            colorTransForm=po.getColorTransform();
            colorTransFormAlpha=po.getColorTransformWithAlpha();
            cacheAsBitmap=po.cacheAsBitmap();
            blendMode=po.getBlendMode();
            filters=po.getFilters();
            ratio=po.getRatio();
            clipActions=po.getClipActions();
          }
        }
      }
    }
    if (t instanceof RemoveTag) {
      RemoveTag rt=(RemoveTag)t;
      if (rt.getDepth() == depth) {
        character=null;
        matrix=null;
        instanceName=null;
        colorTransForm=null;
        colorTransFormAlpha=null;
        cacheAsBitmap=false;
        blendMode=0;
        filters=new ArrayList<>();
        isVisible=true;
        backGroundColor=null;
        characterId=-1;
        clipActions=null;
      }
    }
    if (t instanceof FrameLabelTag) {
      FrameLabelTag flt=(FrameLabelTag)t;
      frameName=flt.getLabelName();
      isAnchor=flt.isNamedAnchor();
    }
    if (t instanceof ShowFrameTag) {
      elements=""String_Node_Str"";
      if ((character instanceof ShapeTag) && oneInstanceShapes.contains(characterId)) {
        elements+=convertShape(characters,matrix,(ShapeTag)character);
        shapeTween=false;
      }
 else       if (character != null) {
        if (character instanceof MorphShapeTag) {
          MorphShapeTag m=(MorphShapeTag)character;
          if (ratio == 65535) {
            elements+=convertShape(characters,matrix,3,m.getEndEdges().shapeRecords,m.getFillStyles().getEndFillStyles(),m.getLineStyles().getEndLineStyles(m.getShapeNum()),true);
            shapeTween=false;
          }
 else {
            elements+=convertShape(characters,matrix,3,m.getStartEdges().shapeRecords,m.getFillStyles().getStartFillStyles(),m.getLineStyles().getStartLineStyles(m.getShapeNum()),true);
            shapeTween=true;
          }
        }
 else {
          shapeTween=false;
          if (character instanceof TextTag) {
            elements+=convertText(instanceName,tags,(TextTag)character,matrix,filters,clipActions);
          }
 else           if (character instanceof DefineVideoStreamTag) {
            elements+=convertVideoInstance(instanceName,matrix,(DefineVideoStreamTag)character,clipActions);
          }
 else {
            elements+=convertSymbolInstance(instanceName,matrix,colorTransForm,colorTransFormAlpha,cacheAsBitmap,blendMode,filters,isVisible,backGroundColor,clipActions,character,characters,tags);
          }
        }
      }
      frame++;
      if (!elements.equals(lastElements) && frame > 0) {
        ret+=convertFrame(lastShapeTween,characters,tags,null,null,frame - duration,frameName,isAnchor,duration,""String_Node_Str"",lastElements);
        duration=1;
      }
 else       if (frame == 0) {
        duration=1;
      }
 else {
        duration++;
      }
      lastShapeTween=shapeTween;
      lastElements=elements;
      frameName=null;
      isAnchor=false;
    }
  }
  if (!lastElements.equals(""String_Node_Str"")) {
    ret+=convertFrame(lastShapeTween,characters,tags,null,null,(frame - duration < 0 ? 0 : frame - duration),frameName,isAnchor,duration,""String_Node_Str"",lastElements);
  }
  afterStr=""String_Node_Str"" + afterStr;
  if (!ret.equals(""String_Node_Str"")) {
    ret=prevStr + ret + afterStr;
  }
  return ret;
}","private static String convertFrames(String prevStr,String afterStr,List<Integer> oneInstanceShapes,List<Tag> tags,List<Tag> timelineTags,HashMap<Integer,CharacterTag> characters,int depth){
  String ret=""String_Node_Str"";
  prevStr+=""String_Node_Str"";
  int frame=-1;
  String elements=""String_Node_Str"";
  String lastElements=""String_Node_Str"";
  int duration=1;
  CharacterTag character=null;
  MATRIX matrix=null;
  String instanceName=null;
  CXFORM colorTransForm=null;
  CXFORMWITHALPHA colorTransFormAlpha=null;
  boolean cacheAsBitmap=false;
  int blendMode=0;
  List<FILTER> filters=new ArrayList<>();
  boolean isVisible=true;
  RGBA backGroundColor=null;
  CLIPACTIONS clipActions=null;
  int characterId=-1;
  int ratio=-1;
  boolean shapeTween=false;
  boolean lastShapeTween=false;
  for (  Tag t : timelineTags) {
    if (t instanceof PlaceObjectTypeTag) {
      PlaceObjectTypeTag po=(PlaceObjectTypeTag)t;
      if (po.getDepth() == depth) {
        int newCharId=po.getCharacterId();
        if (newCharId == -1) {
          newCharId=characterId;
        }
        characterId=newCharId;
        if (characters.containsKey(characterId)) {
          character=characters.get(characterId);
          if (po.flagMove()) {
            MATRIX matrix2=po.getMatrix();
            if (matrix2 != null) {
              matrix=matrix2;
            }
            String instanceName2=po.getInstanceName();
            if (instanceName2 != null) {
              instanceName=instanceName2;
            }
            CXFORM colorTransForm2=po.getColorTransform();
            if (colorTransForm2 != null) {
              colorTransForm=colorTransForm2;
            }
            CXFORMWITHALPHA colorTransFormAlpha2=po.getColorTransformWithAlpha();
            if (colorTransFormAlpha2 != null) {
              colorTransFormAlpha=colorTransFormAlpha2;
            }
            CLIPACTIONS clipActions2=po.getClipActions();
            if (clipActions2 != null) {
              clipActions=clipActions2;
            }
            if (po.cacheAsBitmap()) {
              cacheAsBitmap=true;
            }
            int blendMode2=po.getBlendMode();
            if (blendMode2 > 0) {
              blendMode=blendMode2;
            }
            List<FILTER> filters2=po.getFilters();
            if (filters2 != null) {
              filters=filters2;
            }
            int ratio2=po.getRatio();
            if (ratio2 > -1) {
              ratio=ratio2;
            }
          }
 else {
            matrix=po.getMatrix();
            instanceName=po.getInstanceName();
            colorTransForm=po.getColorTransform();
            colorTransFormAlpha=po.getColorTransformWithAlpha();
            cacheAsBitmap=po.cacheAsBitmap();
            blendMode=po.getBlendMode();
            filters=po.getFilters();
            ratio=po.getRatio();
            clipActions=po.getClipActions();
          }
        }
      }
    }
    if (t instanceof RemoveTag) {
      RemoveTag rt=(RemoveTag)t;
      if (rt.getDepth() == depth) {
        character=null;
        matrix=null;
        instanceName=null;
        colorTransForm=null;
        colorTransFormAlpha=null;
        cacheAsBitmap=false;
        blendMode=0;
        filters=new ArrayList<>();
        isVisible=true;
        backGroundColor=null;
        characterId=-1;
        clipActions=null;
      }
    }
    if (t instanceof ShowFrameTag) {
      elements=""String_Node_Str"";
      if ((character instanceof ShapeTag) && oneInstanceShapes.contains(characterId)) {
        elements+=convertShape(characters,matrix,(ShapeTag)character);
        shapeTween=false;
      }
 else       if (character != null) {
        if (character instanceof MorphShapeTag) {
          MorphShapeTag m=(MorphShapeTag)character;
          if (ratio == 65535) {
            elements+=convertShape(characters,matrix,3,m.getEndEdges().shapeRecords,m.getFillStyles().getEndFillStyles(),m.getLineStyles().getEndLineStyles(m.getShapeNum()),true);
            shapeTween=false;
          }
 else {
            elements+=convertShape(characters,matrix,3,m.getStartEdges().shapeRecords,m.getFillStyles().getStartFillStyles(),m.getLineStyles().getStartLineStyles(m.getShapeNum()),true);
            shapeTween=true;
          }
        }
 else {
          shapeTween=false;
          if (character instanceof TextTag) {
            elements+=convertText(instanceName,tags,(TextTag)character,matrix,filters,clipActions);
          }
 else           if (character instanceof DefineVideoStreamTag) {
            elements+=convertVideoInstance(instanceName,matrix,(DefineVideoStreamTag)character,clipActions);
          }
 else {
            elements+=convertSymbolInstance(instanceName,matrix,colorTransForm,colorTransFormAlpha,cacheAsBitmap,blendMode,filters,isVisible,backGroundColor,clipActions,character,characters,tags);
          }
        }
      }
      frame++;
      if (!elements.equals(lastElements) && frame > 0) {
        ret+=convertFrame(lastShapeTween,characters,tags,null,null,frame - duration,duration,""String_Node_Str"",lastElements);
        duration=1;
      }
 else       if (frame == 0) {
        duration=1;
      }
 else {
        duration++;
      }
      lastShapeTween=shapeTween;
      lastElements=elements;
    }
  }
  if (!lastElements.equals(""String_Node_Str"")) {
    frame++;
    ret+=convertFrame(lastShapeTween,characters,tags,null,null,(frame - duration < 0 ? 0 : frame - duration),duration,""String_Node_Str"",lastElements);
  }
  afterStr=""String_Node_Str"" + afterStr;
  if (!ret.equals(""String_Node_Str"")) {
    ret=prevStr + ret + afterStr;
  }
  return ret;
}",0.9731926668972674
62058,"private static boolean isDirectAncestor(int currentIp,int ancestor,HashMap<Integer,List<Integer>> refs,List<Integer> visited){
  do {
    if (currentIp == ancestor) {
      return true;
    }
    if (visited.contains(currentIp)) {
      return true;
    }
    visited.add(currentIp);
    if (refs.containsKey(currentIp)) {
      List<Integer> currentRefs=refs.get(currentIp);
      if ((currentRefs != null) && (!currentRefs.isEmpty())) {
        for (int i=1; i < currentRefs.size(); i++) {
          if (!isDirectAncestor(currentRefs.get(i),ancestor,refs,visited)) {
            return false;
          }
        }
        currentIp=currentRefs.get(0);
        continue;
      }
    }
    currentIp--;
  }
 while (currentIp >= 0);
  return false;
}","private static boolean isDirectAncestor(int currentIp,int ancestor,HashMap<Integer,List<Integer>> refs,List<Integer> visited){
  if (currentIp == -1) {
    return true;
  }
  do {
    if (currentIp == ancestor) {
      return true;
    }
    if (visited.contains(currentIp)) {
      return true;
    }
    visited.add(currentIp);
    if (refs.containsKey(currentIp)) {
      List<Integer> currentRefs=refs.get(currentIp);
      if ((currentRefs != null) && (!currentRefs.isEmpty())) {
        for (int i=1; i < currentRefs.size(); i++) {
          if (!isDirectAncestor(currentRefs.get(i),ancestor,refs,visited)) {
            return false;
          }
        }
        currentIp=currentRefs.get(0);
        continue;
      }
    }
    currentIp--;
  }
 while (currentIp >= 0);
  return false;
}",0.9702457956015524
62059,"@Override public BufferedImage getImage(List<Tag> tags){
  try {
    BufferedImage img=ImageIO.read(new ByteArrayInputStream(imageData));
    BufferedImage img2=new BufferedImage(img.getWidth(),img.getHeight(),BufferedImage.TYPE_INT_ARGB);
    for (int y=0; y < img.getHeight(); y++) {
      for (int x=0; x < img.getWidth(); x++) {
        int val=img.getRGB(x,y);
        int a=bitmapAlphaData[x + y * img.getWidth()] & 0xff;
        val=(val & 0xffffff) | (a << 24);
        img2.setRGB(x,y,val);
      }
    }
    return img2;
  }
 catch (  IOException ex) {
  }
  return null;
}","@Override public BufferedImage getImage(List<Tag> tags){
  try {
    BufferedImage img=ImageIO.read(new ByteArrayInputStream(imageData));
    if (bitmapAlphaData.length == 0) {
      return img;
    }
    BufferedImage img2=new BufferedImage(img.getWidth(),img.getHeight(),BufferedImage.TYPE_INT_ARGB_PRE);
    for (int y=0; y < img.getHeight(); y++) {
      for (int x=0; x < img.getWidth(); x++) {
        int val=img.getRGB(x,y);
        int a=bitmapAlphaData[x + y * img.getWidth()] & 0xff;
        val=(val & 0xffffff) | (a << 24);
        img2.setRGB(x,y,colorToInt(multiplyAlpha(intToColor(val))));
      }
    }
    return img2;
  }
 catch (  IOException ex) {
  }
  return null;
}",0.9166666666666666
62060,"/** 
 * Constructor
 * @param data Data bytes
 * @param version SWF version
 * @throws IOException
 */
public DefineBitsJPEG4Tag(SWF swf,byte data[],int version,long pos) throws IOException {
  super(swf,ID,""String_Node_Str"",data,pos);
  SWFInputStream sis=new SWFInputStream(new ByteArrayInputStream(data),version);
  characterID=sis.readUI16();
  long alphaDataOffset=sis.readUI32();
  deblockParam=sis.readUI16();
  imageData=sis.readBytes(alphaDataOffset);
  bitmapAlphaData=sis.readBytes(sis.available());
}","/** 
 * Constructor
 * @param swf
 * @param data Data bytes
 * @param version SWF version
 * @param pos
 * @throws IOException
 */
public DefineBitsJPEG4Tag(SWF swf,byte data[],int version,long pos) throws IOException {
  super(swf,ID,""String_Node_Str"",data,pos);
  SWFInputStream sis=new SWFInputStream(new ByteArrayInputStream(data),version);
  characterID=sis.readUI16();
  long alphaDataOffset=sis.readUI32();
  deblockParam=sis.readUI16();
  imageData=sis.readBytes(alphaDataOffset);
  bitmapAlphaData=sis.readBytes(sis.available());
}",0.973384030418251
62061,"@Override public BufferedImage getImage(List<Tag> tags){
  try {
    BufferedImage img=ImageIO.read(new ByteArrayInputStream(imageData));
    BufferedImage img2=new BufferedImage(img.getWidth(),img.getHeight(),BufferedImage.TYPE_INT_ARGB);
    for (int y=0; y < img.getHeight(); y++) {
      for (int x=0; x < img.getWidth(); x++) {
        int val=img.getRGB(x,y);
        int a=bitmapAlphaData[x + y * img.getWidth()] & 0xff;
        val=(val & 0xffffff) | (a << 24);
        img2.setRGB(x,y,val);
      }
    }
    return img2;
  }
 catch (  IOException ex) {
  }
  return null;
}","@Override public BufferedImage getImage(List<Tag> tags){
  try {
    BufferedImage img=ImageIO.read(new ByteArrayInputStream(imageData));
    if (bitmapAlphaData.length == 0) {
      return img;
    }
    BufferedImage img2=new BufferedImage(img.getWidth(),img.getHeight(),BufferedImage.TYPE_INT_ARGB);
    for (int y=0; y < img.getHeight(); y++) {
      for (int x=0; x < img.getWidth(); x++) {
        int val=img.getRGB(x,y);
        int a=bitmapAlphaData[x + y * img.getWidth()] & 0xff;
        val=(val & 0xffffff) | (a << 24);
        img2.setRGB(x,y,colorToInt(multiplyAlpha(intToColor(val))));
      }
    }
    return img2;
  }
 catch (  IOException ex) {
  }
  return null;
}",0.919558359621451
62062,"@Override public BufferedImage getImage(List<Tag> tags){
  BufferedImage bi=new BufferedImage(bitmapWidth,bitmapHeight,BufferedImage.TYPE_INT_ARGB);
  Graphics g=bi.getGraphics();
  ALPHACOLORMAPDATA colorMapData=null;
  ALPHABITMAPDATA bitmapData=null;
  if (bitmapFormat == DefineBitsLossless2Tag.FORMAT_8BIT_COLORMAPPED) {
    colorMapData=getColorMapData();
  }
  if (bitmapFormat == DefineBitsLossless2Tag.FORMAT_32BIT_ARGB) {
    bitmapData=getBitmapData();
  }
  int pos32aligned=0;
  int pos=0;
  for (int y=0; y < bitmapHeight; y++) {
    for (int x=0; x < bitmapWidth; x++) {
      if ((bitmapFormat == DefineBitsLossless2Tag.FORMAT_8BIT_COLORMAPPED)) {
        RGBA color=colorMapData.colorTableRGB[colorMapData.colorMapPixelData[pos32aligned] & 0xff];
        g.setColor(new Color(color.red,color.green,color.blue,color.alpha));
      }
      if ((bitmapFormat == DefineBitsLossless2Tag.FORMAT_32BIT_ARGB)) {
        g.setColor(new Color(bitmapData.bitmapPixelData[pos].red,bitmapData.bitmapPixelData[pos].green,bitmapData.bitmapPixelData[pos].blue,bitmapData.bitmapPixelData[pos].alpha));
      }
      g.fillRect(x,y,1,1);
      pos32aligned++;
      pos++;
    }
    while ((pos32aligned % 4 != 0)) {
      pos32aligned++;
    }
  }
  return bi;
}","@Override public BufferedImage getImage(List<Tag> tags){
  BufferedImage bi=new BufferedImage(bitmapWidth,bitmapHeight,BufferedImage.TYPE_INT_ARGB);
  Graphics g=bi.getGraphics();
  ALPHACOLORMAPDATA colorMapData=null;
  ALPHABITMAPDATA bitmapData=null;
  if (bitmapFormat == DefineBitsLossless2Tag.FORMAT_8BIT_COLORMAPPED) {
    colorMapData=getColorMapData();
  }
  if (bitmapFormat == DefineBitsLossless2Tag.FORMAT_32BIT_ARGB) {
    bitmapData=getBitmapData();
  }
  int pos32aligned=0;
  int pos=0;
  for (int y=0; y < bitmapHeight; y++) {
    for (int x=0; x < bitmapWidth; x++) {
      if ((bitmapFormat == DefineBitsLossless2Tag.FORMAT_8BIT_COLORMAPPED)) {
        g.setColor(multiplyAlpha(colorMapData.colorTableRGB[colorMapData.colorMapPixelData[pos32aligned] & 0xff].toColor()));
      }
      if ((bitmapFormat == DefineBitsLossless2Tag.FORMAT_32BIT_ARGB)) {
        g.setColor(multiplyAlpha(bitmapData.bitmapPixelData[pos].toColor()));
      }
      g.fillRect(x,y,1,1);
      pos32aligned++;
      pos++;
    }
    while ((pos32aligned % 4 != 0)) {
      pos32aligned++;
    }
  }
  return bi;
}",0.849789029535865
62063,"@Override public void setImage(byte data[]) throws IOException {
  BufferedImage image=ImageIO.read(new ByteArrayInputStream(data));
  ALPHABITMAPDATA bitmapData=new ALPHABITMAPDATA();
  bitmapFormat=DefineBitsLosslessTag.FORMAT_24BIT_RGB;
  bitmapWidth=image.getWidth();
  bitmapHeight=image.getHeight();
  bitmapData.bitmapPixelData=new ARGB[bitmapWidth * bitmapHeight];
  int pos=0;
  for (int y=0; y < bitmapHeight; y++) {
    for (int x=0; x < bitmapWidth; x++) {
      int argb=image.getRGB(x,y);
      int a=(argb >> 24) & 0xff;
      int r=(argb >> 16) & 0xff;
      int g=(argb >> 8) & 0xff;
      int b=(argb >> 0) & 0xff;
      bitmapData.bitmapPixelData[pos]=new ARGB();
      bitmapData.bitmapPixelData[pos].alpha=a;
      bitmapData.bitmapPixelData[pos].red=r;
      bitmapData.bitmapPixelData[pos].green=g;
      bitmapData.bitmapPixelData[pos].blue=b;
      pos++;
    }
  }
  ByteArrayOutputStream bitmapDataOS=new ByteArrayOutputStream();
  SWFOutputStream sos=new SWFOutputStream(bitmapDataOS,SWF.DEFAULT_VERSION);
  sos.writeALPHABITMAPDATA(bitmapData,bitmapFormat,bitmapWidth,bitmapHeight);
  ByteArrayOutputStream zlibOS=new ByteArrayOutputStream();
  SWFOutputStream sos2=new SWFOutputStream(zlibOS,SWF.DEFAULT_VERSION);
  sos2.writeBytesZlib(bitmapDataOS.toByteArray());
  zlibBitmapData=zlibOS.toByteArray();
  decompressed=false;
}","@Override public void setImage(byte data[]) throws IOException {
  BufferedImage image=ImageIO.read(new ByteArrayInputStream(data));
  ALPHABITMAPDATA bitmapData=new ALPHABITMAPDATA();
  bitmapFormat=DefineBitsLosslessTag.FORMAT_24BIT_RGB;
  bitmapWidth=image.getWidth();
  bitmapHeight=image.getHeight();
  bitmapData.bitmapPixelData=new ARGB[bitmapWidth * bitmapHeight];
  int pos=0;
  for (int y=0; y < bitmapHeight; y++) {
    for (int x=0; x < bitmapWidth; x++) {
      int argb=image.getRGB(x,y);
      int a=(argb >> 24) & 0xff;
      int r=(argb >> 16) & 0xff;
      int g=(argb >> 8) & 0xff;
      int b=(argb >> 0) & 0xff;
      r=r * a / 255;
      g=g * a / 255;
      b=b * a / 255;
      bitmapData.bitmapPixelData[pos]=new ARGB();
      bitmapData.bitmapPixelData[pos].alpha=a;
      bitmapData.bitmapPixelData[pos].red=r;
      bitmapData.bitmapPixelData[pos].green=g;
      bitmapData.bitmapPixelData[pos].blue=b;
      pos++;
    }
  }
  ByteArrayOutputStream bitmapDataOS=new ByteArrayOutputStream();
  SWFOutputStream sos=new SWFOutputStream(bitmapDataOS,SWF.DEFAULT_VERSION);
  sos.writeALPHABITMAPDATA(bitmapData,bitmapFormat,bitmapWidth,bitmapHeight);
  ByteArrayOutputStream zlibOS=new ByteArrayOutputStream();
  SWFOutputStream sos2=new SWFOutputStream(zlibOS,SWF.DEFAULT_VERSION);
  sos2.writeBytesZlib(bitmapDataOS.toByteArray());
  zlibBitmapData=zlibOS.toByteArray();
  decompressed=false;
}",0.97731364782139
62064,"private static boolean isDirectAncestor(int currentIp,int ancestor,HashMap<Integer,List<Integer>> refs,List<Integer> visited){
  do {
    if (currentIp == ancestor) {
      return true;
    }
    if (visited.contains(currentIp)) {
      return false;
    }
    visited.add(currentIp);
    if (refs.containsKey(currentIp)) {
      List<Integer> currentRefs=refs.get(currentIp);
      if ((currentRefs != null) && (!currentRefs.isEmpty())) {
        for (int i=1; i < currentRefs.size(); i++) {
          if (!isDirectAncestor(currentRefs.get(i),ancestor,refs,visited)) {
            return false;
          }
        }
        currentIp=currentRefs.get(0);
        continue;
      }
    }
    currentIp--;
  }
 while (currentIp >= 0);
  return false;
}","private static boolean isDirectAncestor(int currentIp,int ancestor,HashMap<Integer,List<Integer>> refs,List<Integer> visited){
  do {
    if (currentIp == ancestor) {
      return true;
    }
    if (visited.contains(currentIp)) {
      return true;
    }
    visited.add(currentIp);
    if (refs.containsKey(currentIp)) {
      List<Integer> currentRefs=refs.get(currentIp);
      if ((currentRefs != null) && (!currentRefs.isEmpty())) {
        for (int i=1; i < currentRefs.size(); i++) {
          if (!isDirectAncestor(currentRefs.get(i),ancestor,refs,visited)) {
            return false;
          }
        }
        currentIp=currentRefs.get(0);
        continue;
      }
    }
    currentIp--;
  }
 while (currentIp >= 0);
  return false;
}",0.995336442371752
62065,"public int removeTraps(ConstantPool constants,ABC abc,int scriptIndex,int classIndex,boolean isStatic,String path){
  return code.removeTraps(constants,this,abc,scriptIndex,classIndex,isStatic,path,code.visitCode(this));
}","public int removeTraps(ConstantPool constants,ABC abc,int scriptIndex,int classIndex,boolean isStatic,String path){
  return code.removeTraps(constants,this,abc,scriptIndex,classIndex,isStatic,path);
}",0.950354609929078
62066,"public String toString(String path,boolean pcode,boolean isStatic,int scriptIndex,int classIndex,ABC abc,ConstantPool constants,MethodInfo method_info[],Stack<GraphTargetItem> scopeStack,boolean isStaticInitializer,boolean hilight,List<String> fullyQualifiedNames,Traits initTraits){
  if (debugMode) {
    System.err.println(""String_Node_Str"" + path);
  }
  String s=""String_Node_Str"";
  if (!(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE)) {
    s=""String_Node_Str"";
    if (hilight) {
      s=Highlighting.hilighMethod(s,this.method_info);
    }
    return s;
  }
  if (pcode) {
    s+=code.toASMSource(constants,this,false);
  }
 else {
    AVM2Code deobfuscated=null;
    MethodBody b=(MethodBody)Helper.deepCopy(this);
    deobfuscated=b.code;
    deobfuscated.markMappedOffsets();
    if ((Boolean)Configuration.getConfig(""String_Node_Str"",true)) {
      try {
        deobfuscated.removeTraps(constants,b,abc,scriptIndex,classIndex,isStatic,path,deobfuscated.visitCode(b));
      }
 catch (      Exception ex) {
        Logger.getLogger(MethodBody.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
      }
    }
    s+=deobfuscated.toSource(path,isStatic,scriptIndex,classIndex,abc,constants,method_info,b,hilight,getLocalRegNames(abc),scopeStack,isStaticInitializer,fullyQualifiedNames,initTraits,Graph.SOP_USE_STATIC,new HashMap<Integer,Integer>(),deobfuscated.visitCode(b));
    s=s.trim();
    if (hilight) {
      s=Highlighting.hilighMethod(s,this.method_info);
    }
  }
  return s;
}","public String toString(String path,boolean pcode,boolean isStatic,int scriptIndex,int classIndex,ABC abc,ConstantPool constants,MethodInfo method_info[],Stack<GraphTargetItem> scopeStack,boolean isStaticInitializer,boolean hilight,List<String> fullyQualifiedNames,Traits initTraits){
  if (debugMode) {
    System.err.println(""String_Node_Str"" + path);
  }
  String s=""String_Node_Str"";
  if (!(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE)) {
    s=""String_Node_Str"";
    if (hilight) {
      s=Highlighting.hilighMethod(s,this.method_info);
    }
    return s;
  }
  if (pcode) {
    s+=code.toASMSource(constants,this,false);
  }
 else {
    AVM2Code deobfuscated=null;
    MethodBody b=(MethodBody)Helper.deepCopy(this);
    deobfuscated=b.code;
    deobfuscated.markMappedOffsets();
    if ((Boolean)Configuration.getConfig(""String_Node_Str"",true)) {
      try {
        deobfuscated.removeTraps(constants,b,abc,scriptIndex,classIndex,isStatic,path);
      }
 catch (      Exception ex) {
        Logger.getLogger(MethodBody.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
      }
    }
    s+=deobfuscated.toSource(path,isStatic,scriptIndex,classIndex,abc,constants,method_info,b,hilight,getLocalRegNames(abc),scopeStack,isStaticInitializer,fullyQualifiedNames,initTraits,Graph.SOP_USE_STATIC,new HashMap<Integer,Integer>(),deobfuscated.visitCode(b));
    s=s.trim();
    if (hilight) {
      s=Highlighting.hilighMethod(s,this.method_info);
    }
  }
  return s;
}",0.9913964262078094
62067,"public String toString(String path,boolean pcode,boolean isStatic,int scriptIndex,int classIndex,ABC abc,ConstantPool constants,MethodInfo method_info[],Stack<GraphTargetItem> scopeStack,boolean isStaticInitializer,boolean hilight,List<String> fullyQualifiedNames,Traits initTraits){
  if (debugMode) {
    System.err.println(""String_Node_Str"" + path);
  }
  String s=""String_Node_Str"";
  if (!(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE)) {
    s=""String_Node_Str"";
    if (hilight) {
      s=Highlighting.hilighMethod(s,this.method_info);
    }
    return s;
  }
  if (pcode) {
    s+=code.toASMSource(constants,this,false);
  }
 else {
    AVM2Code deobfuscated=null;
    MethodBody b=(MethodBody)Helper.deepCopy(this);
    deobfuscated=b.code;
    deobfuscated.markMappedOffsets();
    if ((Boolean)Configuration.getConfig(""String_Node_Str"",true)) {
      try {
        deobfuscated.removeTraps(constants,b,abc,scriptIndex,classIndex,isStatic,path);
      }
 catch (      Exception ex) {
        Logger.getLogger(MethodBody.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
      }
    }
    s+=deobfuscated.toSource(path,isStatic,scriptIndex,classIndex,abc,constants,method_info,b,hilight,getLocalRegNames(abc),scopeStack,isStaticInitializer,fullyQualifiedNames,initTraits,Graph.SOP_USE_STATIC,new HashMap<Integer,Integer>(),deobfuscated.visitCode(b));
    s=s.trim();
    if (hilight) {
      s=Highlighting.hilighMethod(s,this.method_info);
    }
  }
  return s;
}","public String toString(String path,boolean pcode,boolean isStatic,int scriptIndex,int classIndex,ABC abc,ConstantPool constants,MethodInfo method_info[],Stack<GraphTargetItem> scopeStack,boolean isStaticInitializer,boolean hilight,List<String> fullyQualifiedNames,Traits initTraits){
  if (debugMode) {
    System.err.println(""String_Node_Str"" + path);
  }
  String s=""String_Node_Str"";
  if (!(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE)) {
    s=""String_Node_Str"";
    if (hilight) {
      s=Highlighting.hilighMethod(s,this.method_info);
    }
    return s;
  }
  if (pcode) {
    s+=code.toASMSource(constants,this,false);
  }
 else {
    AVM2Code deobfuscated=null;
    MethodBody b=(MethodBody)Helper.deepCopy(this);
    deobfuscated=b.code;
    deobfuscated.markMappedOffsets();
    if ((Boolean)Configuration.getConfig(""String_Node_Str"",true)) {
      try {
        deobfuscated.removeTraps(constants,b,abc,scriptIndex,classIndex,isStatic,path);
      }
 catch (      Exception ex) {
        Logger.getLogger(MethodBody.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
      }
    }
    s+=deobfuscated.toSource(path,isStatic,scriptIndex,classIndex,abc,constants,method_info,b,hilight,getLocalRegNames(abc),scopeStack,isStaticInitializer,fullyQualifiedNames,initTraits,Graph.SOP_USE_STATIC,new HashMap<Integer,Integer>(),deobfuscated.visitCode(b));
    s=s.trim();
    if (s.equals(""String_Node_Str"")) {
      s=""String_Node_Str"";
    }
    if (hilight) {
      s=Highlighting.hilighMethod(s,this.method_info);
    }
  }
  return s;
}",0.9765319426336376
62068,"@Override public String convert(String path,List<ABCContainerTag> abcTags,ABC abc,boolean isStatic,boolean pcode,int scriptIndex,int classIndex,boolean highlight,List<String> fullyQualifiedNames,boolean paralel){
  if (!highlight) {
  }
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  PrintStream out=null;
  try {
    out=new PrintStream(baos,true,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException ex) {
    Logger.getLogger(TraitClass.class.getName()).log(Level.SEVERE,null,ex);
    return ""String_Node_Str"";
  }
  String packageName=abc.instance_info[class_info].getName(abc.constants).getNamespace(abc.constants).getName(abc.constants);
  List<String> namesInThisPackage=new ArrayList<>();
  for (  ABCContainerTag tag : abcTags) {
    for (    ScriptInfo si : tag.getABC().script_info) {
      for (      Trait t : si.traits.traits) {
        String spath=t.getPath(tag.getABC());
        String pkg=""String_Node_Str"";
        String name=spath;
        if (spath.contains(""String_Node_Str"")) {
          pkg=spath.substring(0,spath.lastIndexOf(""String_Node_Str""));
          name=spath.substring(spath.lastIndexOf(""String_Node_Str"") + 1);
        }
        if (pkg.equals(packageName)) {
          namesInThisPackage.add(name);
        }
      }
    }
  }
  List<String> imports=new ArrayList<>();
  List<String> uses=new ArrayList<>();
  getImportsUsages(abcTags,abc,imports,uses,new ArrayList<String>());
  fullyQualifiedNames=new ArrayList<>();
  List<String> importnames=new ArrayList<>();
  importnames.addAll(namesInThisPackage);
  for (  String ipath : imports) {
    String name=ipath;
    String pkg=""String_Node_Str"";
    if (name.contains(""String_Node_Str"")) {
      pkg=name.substring(0,name.lastIndexOf(""String_Node_Str""));
      name=name.substring(name.lastIndexOf(""String_Node_Str"") + 1);
    }
    if (importnames.contains(name) || ((!pkg.equals(""String_Node_Str"")) && isBuiltInClass(name))) {
      fullyQualifiedNames.add(name);
    }
 else {
      importnames.add(name);
    }
  }
  for (int i=0; i < imports.size(); i++) {
    String imp=imports.get(i);
    String pkg=imp.substring(0,imp.lastIndexOf(""String_Node_Str""));
    String name=imp.substring(imp.lastIndexOf(""String_Node_Str"") + 1);
    if (name.equals(""String_Node_Str"")) {
      continue;
    }
    if (imports.contains(pkg + ""String_Node_Str"")) {
      imports.remove(i);
      i--;
    }
  }
  for (  String imp : imports) {
    if (!imp.startsWith(""String_Node_Str"")) {
      out.println(ABC.IDENT_STRING + ""String_Node_Str"" + imp+ ""String_Node_Str"");
    }
  }
  out.println();
  for (  String us : uses) {
    out.println(ABC.IDENT_STRING + ""String_Node_Str"" + us+ ""String_Node_Str"");
  }
  out.println();
  String classHeader=abc.instance_info[class_info].getClassHeaderStr(abc,fullyQualifiedNames);
  if (classHeader.startsWith(""String_Node_Str"")) {
    classHeader=classHeader.substring(""String_Node_Str"".length());
  }
  out.println(ABC.IDENT_STRING + classHeader);
  out.println(ABC.IDENT_STRING + ""String_Node_Str"");
  String toPrint;
  List<String> outTraits=new LinkedList<>();
  int bodyIndex;
  String bodyStr=""String_Node_Str"";
  bodyIndex=abc.findBodyIndex(abc.class_info[class_info].cinit_index);
  if (bodyIndex != -1) {
    bodyStr=abc.bodies[bodyIndex].toString(path + ""String_Node_Str"" + abc.instance_info[class_info].getName(abc.constants).getName(abc.constants,fullyQualifiedNames)+ ""String_Node_Str"",pcode,true,scriptIndex,class_info,abc,abc.constants,abc.method_info,new Stack<GraphTargetItem>(),true,highlight,fullyQualifiedNames,abc.class_info[class_info].static_traits);
    if (!highlight) {
      bodyStr=Highlighting.stripHilights(bodyStr);
    }
  }
  if (Highlighting.stripHilights(bodyStr).equals(""String_Node_Str"")) {
    toPrint=ABC.addTabs(bodyStr,3);
  }
 else {
    toPrint=ABC.IDENT_STRING + ABC.IDENT_STRING + ""String_Node_Str""+ ABC.addTabs(bodyStr,3)+ ""String_Node_Str""+ ABC.IDENT_STRING+ ABC.IDENT_STRING+ ""String_Node_Str"";
  }
  if (highlight) {
    toPrint=Highlighting.hilighTrait(toPrint,abc.class_info[class_info].static_traits.traits.length + abc.instance_info[class_info].instance_traits.traits.length + 1);
  }
  outTraits.add(toPrint);
  if (!abc.instance_info[class_info].isInterface()) {
    String modifier=""String_Node_Str"";
    Multiname m=abc.constants.constant_multiname[abc.instance_info[class_info].name_index];
    if (m != null) {
      Namespace ns=m.getNamespace(abc.constants);
      if (ns != null) {
        modifier=ns.getPrefix(abc) + ""String_Node_Str"";
        if (modifier.equals(""String_Node_Str"")) {
          modifier=""String_Node_Str"";
        }
        if (modifier.startsWith(""String_Node_Str"")) {
          modifier=""String_Node_Str"";
        }
      }
    }
    String constructorParams;
    bodyStr=""String_Node_Str"";
    bodyIndex=abc.findBodyIndex(abc.instance_info[class_info].iinit_index);
    if (bodyIndex != -1) {
      bodyStr=ABC.addTabs(abc.bodies[bodyIndex].toString(path + ""String_Node_Str"" + abc.instance_info[class_info].getName(abc.constants).getName(abc.constants,fullyQualifiedNames)+ ""String_Node_Str"",pcode,false,scriptIndex,class_info,abc,abc.constants,abc.method_info,new Stack<GraphTargetItem>(),false,highlight,fullyQualifiedNames,abc.instance_info[class_info].instance_traits),3);
      if (!highlight) {
        bodyStr=Highlighting.stripHilights(bodyStr);
      }
      constructorParams=abc.method_info[abc.instance_info[class_info].iinit_index].getParamStr(abc.constants,abc.bodies[bodyIndex],abc,fullyQualifiedNames);
    }
 else {
      constructorParams=abc.method_info[abc.instance_info[class_info].iinit_index].getParamStr(abc.constants,null,abc,fullyQualifiedNames);
    }
    toPrint=ABC.IDENT_STRING + ABC.IDENT_STRING + modifier+ ""String_Node_Str""+ abc.constants.constant_multiname[abc.instance_info[class_info].name_index].getName(abc.constants,new ArrayList<String>())+ ""String_Node_Str""+ constructorParams+ ""String_Node_Str""+ bodyStr+ ""String_Node_Str""+ ABC.IDENT_STRING+ ABC.IDENT_STRING+ ""String_Node_Str"";
    if (highlight) {
      toPrint=Highlighting.hilighTrait(toPrint,abc.class_info[class_info].static_traits.traits.length + abc.instance_info[class_info].instance_traits.traits.length);
    }
    outTraits.add(toPrint);
  }
  outTraits.add(abc.class_info[class_info].static_traits.convert(path + ""String_Node_Str"" + abc.instance_info[class_info].getName(abc.constants).getName(abc.constants,fullyQualifiedNames),abcTags,abc,true,pcode,false,scriptIndex,class_info,highlight,fullyQualifiedNames,paralel));
  outTraits.add(abc.instance_info[class_info].instance_traits.convert(path + ""String_Node_Str"" + abc.instance_info[class_info].getName(abc.constants).getName(abc.constants,fullyQualifiedNames),abcTags,abc,false,pcode,false,scriptIndex,class_info,highlight,fullyQualifiedNames,paralel));
  StringBuilder bui=new StringBuilder();
  boolean first=true;
  String glue=""String_Node_Str"";
  for (  String s : outTraits) {
    if (!Highlighting.stripHilights(s).trim().equals(""String_Node_Str"")) {
      if (!first) {
        bui.append(glue);
      }
 else {
        first=false;
      }
    }
 else {
      s=s.replace(ABC.IDENT_STRING,""String_Node_Str"");
    }
    bui.append(s);
  }
  out.println(bui.toString());
  out.println(ABC.IDENT_STRING + ""String_Node_Str"");
  out.flush();
  try {
    if (highlight) {
      return Highlighting.hilighClass(new String(baos.toByteArray(),""String_Node_Str""),class_info);
    }
 else {
      return new String(baos.toByteArray(),""String_Node_Str"");
    }
  }
 catch (  UnsupportedEncodingException ex) {
    Logger.getLogger(TraitClass.class.getName()).log(Level.SEVERE,null,ex);
    return ""String_Node_Str"";
  }
}","@Override public String convert(String path,List<ABCContainerTag> abcTags,ABC abc,boolean isStatic,boolean pcode,int scriptIndex,int classIndex,boolean highlight,List<String> fullyQualifiedNames,boolean paralel){
  if (!highlight) {
  }
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  PrintStream out=null;
  try {
    out=new PrintStream(baos,true,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException ex) {
    Logger.getLogger(TraitClass.class.getName()).log(Level.SEVERE,null,ex);
    return ""String_Node_Str"";
  }
  String packageName=abc.instance_info[class_info].getName(abc.constants).getNamespace(abc.constants).getName(abc.constants);
  List<String> namesInThisPackage=new ArrayList<>();
  for (  ABCContainerTag tag : abcTags) {
    for (    ScriptInfo si : tag.getABC().script_info) {
      for (      Trait t : si.traits.traits) {
        String spath=t.getPath(tag.getABC());
        String pkg=""String_Node_Str"";
        String name=spath;
        if (spath.contains(""String_Node_Str"")) {
          pkg=spath.substring(0,spath.lastIndexOf(""String_Node_Str""));
          name=spath.substring(spath.lastIndexOf(""String_Node_Str"") + 1);
        }
        if (pkg.equals(packageName)) {
          namesInThisPackage.add(name);
        }
      }
    }
  }
  List<String> imports=new ArrayList<>();
  List<String> uses=new ArrayList<>();
  getImportsUsages(abcTags,abc,imports,uses,new ArrayList<String>());
  fullyQualifiedNames=new ArrayList<>();
  List<String> importnames=new ArrayList<>();
  importnames.addAll(namesInThisPackage);
  for (  String ipath : imports) {
    String name=ipath;
    String pkg=""String_Node_Str"";
    if (name.contains(""String_Node_Str"")) {
      pkg=name.substring(0,name.lastIndexOf(""String_Node_Str""));
      name=name.substring(name.lastIndexOf(""String_Node_Str"") + 1);
    }
    if (importnames.contains(name) || ((!pkg.equals(""String_Node_Str"")) && isBuiltInClass(name))) {
      fullyQualifiedNames.add(name);
    }
 else {
      importnames.add(name);
    }
  }
  for (int i=0; i < imports.size(); i++) {
    String imp=imports.get(i);
    String pkg=imp.substring(0,imp.lastIndexOf(""String_Node_Str""));
    String name=imp.substring(imp.lastIndexOf(""String_Node_Str"") + 1);
    if (name.equals(""String_Node_Str"")) {
      continue;
    }
    if (imports.contains(pkg + ""String_Node_Str"")) {
      imports.remove(i);
      i--;
    }
  }
  for (  String imp : imports) {
    if (!imp.startsWith(""String_Node_Str"")) {
      out.println(ABC.IDENT_STRING + ""String_Node_Str"" + imp+ ""String_Node_Str"");
    }
  }
  out.println();
  for (  String us : uses) {
    out.println(ABC.IDENT_STRING + ""String_Node_Str"" + us+ ""String_Node_Str"");
  }
  out.println();
  String classHeader=abc.instance_info[class_info].getClassHeaderStr(abc,fullyQualifiedNames);
  if (classHeader.startsWith(""String_Node_Str"")) {
    classHeader=classHeader.substring(""String_Node_Str"".length());
  }
  out.println(ABC.IDENT_STRING + classHeader);
  out.println(ABC.IDENT_STRING + ""String_Node_Str"");
  String toPrint;
  List<String> outTraits=new LinkedList<>();
  int bodyIndex;
  String bodyStr=""String_Node_Str"";
  bodyIndex=abc.findBodyIndex(abc.class_info[class_info].cinit_index);
  if (bodyIndex != -1) {
    bodyStr=abc.bodies[bodyIndex].toString(path + ""String_Node_Str"" + abc.instance_info[class_info].getName(abc.constants).getName(abc.constants,fullyQualifiedNames)+ ""String_Node_Str"",pcode,true,scriptIndex,class_info,abc,abc.constants,abc.method_info,new Stack<GraphTargetItem>(),true,highlight,fullyQualifiedNames,abc.class_info[class_info].static_traits);
    if (!highlight) {
      bodyStr=Highlighting.stripHilights(bodyStr);
    }
  }
  if (Highlighting.stripHilights(bodyStr).trim().equals(""String_Node_Str"")) {
    toPrint=ABC.addTabs(bodyStr + ""String_Node_Str"",3);
  }
 else {
    toPrint=ABC.IDENT_STRING + ABC.IDENT_STRING + ""String_Node_Str""+ ABC.addTabs(bodyStr,3)+ ""String_Node_Str""+ ABC.IDENT_STRING+ ABC.IDENT_STRING+ ""String_Node_Str"";
  }
  if (highlight) {
    toPrint=Highlighting.hilighTrait(toPrint,abc.class_info[class_info].static_traits.traits.length + abc.instance_info[class_info].instance_traits.traits.length + 1);
  }
  outTraits.add(toPrint);
  if (!abc.instance_info[class_info].isInterface()) {
    String modifier=""String_Node_Str"";
    Multiname m=abc.constants.constant_multiname[abc.instance_info[class_info].name_index];
    if (m != null) {
      Namespace ns=m.getNamespace(abc.constants);
      if (ns != null) {
        modifier=ns.getPrefix(abc) + ""String_Node_Str"";
        if (modifier.equals(""String_Node_Str"")) {
          modifier=""String_Node_Str"";
        }
        if (modifier.startsWith(""String_Node_Str"")) {
          modifier=""String_Node_Str"";
        }
      }
    }
    String constructorParams;
    bodyStr=""String_Node_Str"";
    bodyIndex=abc.findBodyIndex(abc.instance_info[class_info].iinit_index);
    if (bodyIndex != -1) {
      bodyStr=ABC.addTabs(abc.bodies[bodyIndex].toString(path + ""String_Node_Str"" + abc.instance_info[class_info].getName(abc.constants).getName(abc.constants,fullyQualifiedNames)+ ""String_Node_Str"",pcode,false,scriptIndex,class_info,abc,abc.constants,abc.method_info,new Stack<GraphTargetItem>(),false,highlight,fullyQualifiedNames,abc.instance_info[class_info].instance_traits),3);
      if (!highlight) {
        bodyStr=Highlighting.stripHilights(bodyStr);
      }
      constructorParams=abc.method_info[abc.instance_info[class_info].iinit_index].getParamStr(abc.constants,abc.bodies[bodyIndex],abc,fullyQualifiedNames);
    }
 else {
      constructorParams=abc.method_info[abc.instance_info[class_info].iinit_index].getParamStr(abc.constants,null,abc,fullyQualifiedNames);
    }
    toPrint=ABC.IDENT_STRING + ABC.IDENT_STRING + modifier+ ""String_Node_Str""+ abc.constants.constant_multiname[abc.instance_info[class_info].name_index].getName(abc.constants,new ArrayList<String>())+ ""String_Node_Str""+ constructorParams+ ""String_Node_Str""+ bodyStr+ ""String_Node_Str""+ ABC.IDENT_STRING+ ABC.IDENT_STRING+ ""String_Node_Str"";
    if (highlight) {
      toPrint=Highlighting.hilighTrait(toPrint,abc.class_info[class_info].static_traits.traits.length + abc.instance_info[class_info].instance_traits.traits.length);
    }
    outTraits.add(toPrint);
  }
  outTraits.add(abc.class_info[class_info].static_traits.convert(path + ""String_Node_Str"" + abc.instance_info[class_info].getName(abc.constants).getName(abc.constants,fullyQualifiedNames),abcTags,abc,true,pcode,false,scriptIndex,class_info,highlight,fullyQualifiedNames,paralel));
  outTraits.add(abc.instance_info[class_info].instance_traits.convert(path + ""String_Node_Str"" + abc.instance_info[class_info].getName(abc.constants).getName(abc.constants,fullyQualifiedNames),abcTags,abc,false,pcode,false,scriptIndex,class_info,highlight,fullyQualifiedNames,paralel));
  StringBuilder bui=new StringBuilder();
  boolean first=true;
  String glue=""String_Node_Str"";
  for (  String s : outTraits) {
    if (!Highlighting.stripHilights(s).trim().equals(""String_Node_Str"")) {
      if (s.contains(""String_Node_Str"")) {
        s=s.replace(""String_Node_Str"",""String_Node_Str"");
        s=s + ""String_Node_Str"";
      }
 else {
        if (!first) {
          bui.append(glue);
        }
 else {
          first=false;
        }
      }
    }
 else {
      s=s.replace(ABC.IDENT_STRING,""String_Node_Str"");
    }
    bui.append(s);
  }
  out.println(bui.toString());
  out.println(ABC.IDENT_STRING + ""String_Node_Str"");
  out.flush();
  try {
    if (highlight) {
      return Highlighting.hilighClass(new String(baos.toByteArray(),""String_Node_Str""),class_info);
    }
 else {
      return new String(baos.toByteArray(),""String_Node_Str"");
    }
  }
 catch (  UnsupportedEncodingException ex) {
    Logger.getLogger(TraitClass.class.getName()).log(Level.SEVERE,null,ex);
    return ""String_Node_Str"";
  }
}",0.98519325684251
62069,"public SlotConstTraitDetailPanel(){
  slotConstEditor=new JEditorPane();
  setLayout(new BorderLayout());
  add(new JLabel(translate(""String_Node_Str"")),BorderLayout.NORTH);
  add(new JScrollPane(slotConstEditor),BorderLayout.CENTER);
  slotConstEditor.setContentType(""String_Node_Str"");
  Flasm3MethodInfoSyntaxKit sk=(Flasm3MethodInfoSyntaxKit)slotConstEditor.getEditorKit();
  sk.deinstallComponent(slotConstEditor,""String_Node_Str"");
}","public SlotConstTraitDetailPanel(){
  slotConstEditor=new JEditorPane();
  setLayout(new BorderLayout());
  add(new JLabel(translate(""String_Node_Str"")),BorderLayout.NORTH);
  add(new JScrollPane(slotConstEditor),BorderLayout.CENTER);
  warnLabel=new JTextPane();
  warnLabel.setText(""String_Node_Str"");
  StyledDocument doc=warnLabel.getStyledDocument();
  SimpleAttributeSet center=new SimpleAttributeSet();
  StyleConstants.setAlignment(center,StyleConstants.ALIGN_CENTER);
  doc.setParagraphAttributes(0,doc.getLength(),center,false);
  warnLabel.setOpaque(false);
  warnLabel.setFocusable(false);
  warnLabel.setFont(new JLabel().getFont().deriveFont(Font.BOLD));
  add(warnLabel,BorderLayout.SOUTH);
  slotConstEditor.setContentType(""String_Node_Str"");
  Flasm3MethodInfoSyntaxKit sk=(Flasm3MethodInfoSyntaxKit)slotConstEditor.getEditorKit();
  sk.deinstallComponent(slotConstEditor,""String_Node_Str"");
}",0.6508524833209784
62070,"public void load(TraitSlotConst trait,ABC abc){
  this.abc=abc;
  this.trait=trait;
  String s;
  String typeStr;
  if (trait.type_index > 0) {
    typeStr=""String_Node_Str"" + trait.type_index + ""String_Node_Str""+ Helper.escapeString(abc.constants.constant_multiname[trait.type_index].toString(abc.constants,new ArrayList<String>()))+ ""String_Node_Str"";
  }
 else {
    typeStr=""String_Node_Str"";
  }
  String valueStr=""String_Node_Str"";
  if (trait.value_kind != 0) {
    valueStr=""String_Node_Str"" + (new ValueKind(trait.value_index,trait.value_kind)).toString(abc.constants);
  }
  s=typeStr + valueStr;
  slotConstEditor.setText(s);
}","public void load(TraitSlotConst trait,ABC abc,boolean isStatic){
  this.abc=abc;
  this.trait=trait;
  String s;
  String typeStr;
  if (trait.type_index > 0) {
    typeStr=""String_Node_Str"" + trait.type_index + ""String_Node_Str""+ Helper.escapeString(abc.constants.constant_multiname[trait.type_index].toString(abc.constants,new ArrayList<String>()))+ ""String_Node_Str"";
  }
 else {
    typeStr=""String_Node_Str"";
  }
  String valueStr=""String_Node_Str"";
  if (trait.value_kind != 0) {
    valueStr=""String_Node_Str"" + (new ValueKind(trait.value_index,trait.value_kind)).toString(abc.constants);
  }
  s=typeStr + valueStr;
  warnLabel.setVisible(trait.isConst() || isStatic);
  slotConstEditor.setText(s);
}",0.9420505200594352
62071,"@Override public String toString(ConstantPool constants,HashMap<Integer,String> localRegNames,List<String> fullyQualifiedNames){
  return hilight(""String_Node_Str"") + value.toString(constants,localRegNames,fullyQualifiedNames);
}","@Override public String toString(ConstantPool constants,HashMap<Integer,String> localRegNames,List<String> fullyQualifiedNames){
  String vaStr=value.toString(constants,localRegNames,fullyQualifiedNames);
  String prefix=""String_Node_Str"" + Graph.INDENTOPEN + ""String_Node_Str"";
  if (vaStr.startsWith(prefix)) {
    vaStr=vaStr.substring(prefix.length());
  }
  return hilight(""String_Node_Str"") + vaStr;
}",0.6069182389937107
62072,"@SuppressWarnings(""String_Node_Str"") private static boolean readActionListAtPos(List<DisassemblyListener> listeners,List<GraphTargetItem> output,HashMap<Long,List<GraphSourceItemContainer>> containers,long address,long containerSWFOffset,boolean notCompileTime,boolean enableVariables,List<Object> localData,Stack<GraphTargetItem> stack,ConstantPool cpool,SWFInputStream sis,ReReadableInputStream rri,int ip,List<Action> ret,int startIp,int endip,String path) throws IOException {
  boolean debugMode=false;
  boolean decideBranch=false;
  boolean deobfuscate=(Boolean)Configuration.getConfig(""String_Node_Str"",true);
  boolean retv=false;
  rri.setPos(ip);
  Action a;
  long filePos=rri.getPos();
  Scanner sc=new Scanner(System.in,""String_Node_Str"");
  int prevIp=ip;
  while (((endip == -1) || (endip > ip)) && (a=sis.readAction(rri)) != null) {
    for (int i=0; i < listeners.size(); i++) {
      listeners.get(i).progress(""String_Node_Str"",rri.getCount(),rri.length());
    }
    if ((ip < ret.size()) && (!(ret.get(ip) instanceof ActionNop))) {
      a=ret.get(ip);
      if (a.getAddress() != ip) {
        Logger.getLogger(SWFInputStream.class.getName()).log(Level.SEVERE,""String_Node_Str"" + ip + ""String_Node_Str""+ a.getASMSource(new ArrayList<GraphSourceItem>(),new ArrayList<Long>(),new ArrayList<String>(),SWF.DEFAULT_VERSION,false));
      }
    }
    a.containerSWFOffset=containerSWFOffset;
    a.setAddress(prevIp,SWF.DEFAULT_VERSION,false);
    int info=a.actionLength + 1 + ((a.actionCode > 0x80) ? 2 : 0);
    byte b[]=a.getBytes(sis.version);
    int infoCorrect=info;
    if ((!(a instanceof ActionStore)) && (!(a instanceof GraphSourceItemContainer))) {
      int change=info - (rri.getPos() - ip);
      if (change > 0) {
        a.afterInsert=new ActionJump(change);
      }
    }
 else {
      info=rri.getPos() - ip;
    }
    if (ip < startIp) {
      retv=true;
    }
    if (a instanceof ActionPush) {
      if (cpool != null) {
        ((ActionPush)a).constantPool=cpool.constants;
        cpool.count++;
      }
    }
    if (a instanceof ActionDefineFunction) {
      if (cpool != null) {
        cpool.count++;
      }
    }
    if (a instanceof ActionDefineFunction2) {
      if (cpool != null) {
        cpool.count++;
      }
    }
    if (debugMode) {
      String atos=a.getASMSource(new ArrayList<GraphSourceItem>(),new ArrayList<Long>(),cpool.constants,sis.version,false);
      if (a instanceof GraphSourceItemContainer) {
        atos=a.toString();
      }
      System.err.println(""String_Node_Str"" + (ip - startIp) + ""String_Node_Str""+ Helper.formatAddress(ip - startIp)+ ""String_Node_Str""+ ""String_Node_Str""+ a.actionLength+ ""String_Node_Str""+ atos+ (a.isIgnored() ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ Helper.stackToString(stack,Helper.toList(cpool))+ ""String_Node_Str""+ Helper.byteArrToString(a.getBytes(SWF.DEFAULT_VERSION)));
      @SuppressWarnings(""String_Node_Str"") HashMap<String,GraphTargetItem> vars=(HashMap<String,GraphTargetItem>)localData.get(1);
      System.err.print(""String_Node_Str"");
      for (      Entry<String,GraphTargetItem> v : vars.entrySet()) {
        System.err.print(""String_Node_Str"" + v + ""String_Node_Str""+ Highlighting.stripHilights(v.getValue().toString(cpool))+ ""String_Node_Str"");
      }
      System.err.println();
      String add=""String_Node_Str"";
      if (a instanceof ActionIf) {
        add=""String_Node_Str"" + ((ActionIf)a).getJumpOffset();
      }
      if (a instanceof ActionJump) {
        add=""String_Node_Str"" + ((ActionJump)a).getJumpOffset();
      }
      System.err.println(add);
    }
    long newFilePos=rri.getPos();
    long actionLen=newFilePos - filePos;
    ensureCapacity(ret,ip);
    int newip=-1;
    if (!enableVariables && (!(ret.get(ip) instanceof ActionNop))) {
      break;
    }
    if (a instanceof ActionConstantPool) {
      if (cpool == null) {
        cpool=new ConstantPool();
      }
      cpool.setNew(((ActionConstantPool)a).constantPool);
    }
    ActionIf aif=null;
    boolean goaif=false;
    if (!a.isIgnored()) {
      try {
        if (a instanceof ActionIf) {
          aif=(ActionIf)a;
          GraphTargetItem top=null;
          if (deobfuscate) {
            top=stack.pop();
          }
          int nip=rri.getPos() + aif.getJumpOffset();
          if (decideBranch) {
            System.out.print(""String_Node_Str"" + nip + ""String_Node_Str"");
            System.out.print(""String_Node_Str"");
            String next=sc.next();
            if (next.equals(""String_Node_Str"")) {
              newip=rri.getPos() + aif.getJumpOffset();
              rri.setPos(newip);
            }
 else             if (next.equals(""String_Node_Str"")) {
            }
 else             if (next.equals(""String_Node_Str"")) {
              goaif=true;
            }
          }
 else           if (deobfuscate && top.isCompileTime() && (!top.hasSideEffect())&& ((!top.isVariableComputed()) || (top.isVariableComputed() && enableVariables && (!notCompileTime)))) {
            if (enableVariables) {
              ((ActionIf)a).compileTime=true;
            }
            if (debugMode) {
              System.err.print(""String_Node_Str"");
            }
            if (EcmaScript.toBoolean(top.getResult())) {
              newip=rri.getPos() + aif.getJumpOffset();
              if (((!enableVariables) || (!top.isVariableComputed())) && (!aif.ignoreUsed)) {
                a=new ActionJump(aif.getJumpOffset());
                a.setAddress(aif.getAddress(),SWF.DEFAULT_VERSION);
              }
              aif.jumpUsed=true;
              if (aif.ignoreUsed) {
                aif.compileTime=false;
              }
              if (debugMode) {
                System.err.println(""String_Node_Str"");
              }
            }
 else {
              aif.ignoreUsed=true;
              if (aif.jumpUsed) {
                aif.compileTime=false;
              }
              if (debugMode) {
                System.err.println(""String_Node_Str"");
              }
              if (((!enableVariables) || (!top.isVariableComputed())) && (!aif.jumpUsed)) {
                aif.setIgnored(true,0);
              }
            }
            if (((!enableVariables) || (!top.isVariableComputed())) && (!(aif.jumpUsed && aif.ignoreUsed))) {
              List<GraphSourceItemPos> needed=top.getNeededSources();
              for (              GraphSourceItemPos ig : needed) {
                if (ig.item == null) {
                  continue;
                }
                if (ig.item instanceof ActionPush) {
                  if (!((ActionPush)ig.item).ignoredParts.contains(ig.pos)) {
                    ((ActionPush)ig.item).ignoredParts.add(ig.pos);
                    if (((ActionPush)ig.item).ignoredParts.size() == ((ActionPush)ig.item).values.size()) {
                      ((Action)ig.item).setIgnored(true,0);
                    }
                  }
                }
 else {
                  ((Action)ig.item).setIgnored(true,0);
                }
              }
            }
          }
 else {
            if (debugMode) {
              System.err.println(""String_Node_Str"");
            }
            goaif=true;
          }
        }
 else         if (a instanceof ActionJump) {
          newip=rri.getPos() + ((ActionJump)a).getJumpOffset();
        }
 else         if (!(a instanceof GraphSourceItemContainer)) {
          if (deobfuscate) {
            if (((a instanceof ActionEquals) || (a instanceof ActionEquals2)) && (stack.size() == 1) && (stack.peek() instanceof DirectValueActionItem)) {
              stack.push(new DirectValueActionItem(null,0,new Null(),new ArrayList<String>()));
            }
            if ((a instanceof ActionStoreRegister) && stack.isEmpty()) {
              stack.push(new DirectValueActionItem(null,0,new Null(),new ArrayList<String>()));
            }
            a.translate(localData,stack,output,Graph.SOP_USE_STATIC,path);
          }
        }
      }
 catch (      RuntimeException ex) {
        if (!enableVariables) {
          throw ex;
        }
        log.log(Level.SEVERE,""String_Node_Str"",ex);
        break;
      }
    }
    int nopos=-1;
    for (int i=0; i < actionLen; i++) {
      ensureCapacity(ret,ip + i);
      if (a instanceof ActionNop) {
        int prevPos=(int)a.getAddress();
        a=new ActionNop();
        a.setAddress(prevPos,SWF.DEFAULT_VERSION);
        nopos++;
        if (nopos > 0) {
          a.setAddress(a.getAddress() + 1,SWF.DEFAULT_VERSION);
        }
      }
      ret.set(ip + i,a);
    }
    if (a instanceof GraphSourceItemContainer) {
      GraphSourceItemContainer cnt=(GraphSourceItemContainer)a;
      if (a instanceof Action) {
        long endAddr=a.getAddress() + cnt.getHeaderSize();
        String cntName=cnt.getName();
        List<List<GraphTargetItem>> output2s=new ArrayList<>();
        for (        long size : cnt.getContainerSizes()) {
          if (size == 0) {
            output2s.add(new ArrayList<GraphTargetItem>());
            continue;
          }
          List<Object> localData2=Helper.toList(new HashMap<Integer,String>(),new HashMap<String,GraphTargetItem>(),new HashMap<String,GraphTargetItem>());
          List<GraphTargetItem> output2=new ArrayList<>();
          readActionListAtPos(listeners,output2,containers,address,containerSWFOffset,notCompileTime,enableVariables,localData2,new Stack<GraphTargetItem>(),cpool,sis,rri,(int)endAddr,ret,startIp,(int)(endAddr + size),path + (cntName == null ? ""String_Node_Str"" : ""String_Node_Str"" + cntName));
          output2s.add(output2);
          endAddr+=size;
        }
        if (deobfuscate) {
          cnt.translateContainer(output2s,stack,output,(HashMap<Integer,String>)localData.get(0),(HashMap<String,GraphTargetItem>)localData.get(1),(HashMap<String,GraphTargetItem>)localData.get(2));
        }
        ip=(int)endAddr;
        prevIp=ip;
        rri.setPos(ip);
        filePos=rri.getPos();
        continue;
      }
    }
    if (a instanceof ActionEnd) {
      break;
    }
    if (newip > -1) {
      ip=newip;
    }
 else {
      ip=ip + info;
    }
    rri.setPos(ip);
    filePos=rri.getPos();
    if (goaif) {
      if (aif.ignoreUsed && aif.jumpUsed) {
        break;
      }
      aif.ignoreUsed=true;
      aif.jumpUsed=true;
      int oldPos=rri.getPos();
      @SuppressWarnings(""String_Node_Str"") Stack<GraphTargetItem> substack=(Stack<GraphTargetItem>)stack.clone();
      if (readActionListAtPos(listeners,output,containers,address,containerSWFOffset,true,enableVariables,localData,substack,cpool,sis,rri,rri.getPos() + aif.getJumpOffset(),ret,startIp,endip,path)) {
        retv=true;
      }
      rri.setPos(oldPos);
      notCompileTime=true;
    }
    prevIp=ip;
    if (a.isExit()) {
      break;
    }
  }
  for (  DisassemblyListener listener : listeners) {
    listener.progress(""String_Node_Str"",rri.getCount(),rri.length());
  }
  return retv;
}","@SuppressWarnings(""String_Node_Str"") private static boolean readActionListAtPos(List<DisassemblyListener> listeners,List<GraphTargetItem> output,HashMap<Long,List<GraphSourceItemContainer>> containers,long address,long containerSWFOffset,boolean notCompileTime,boolean enableVariables,List<Object> localData,Stack<GraphTargetItem> stack,ConstantPool cpool,SWFInputStream sis,ReReadableInputStream rri,int ip,List<Action> ret,int startIp,int endip,String path) throws IOException {
  boolean debugMode=false;
  boolean decideBranch=false;
  boolean deobfuscate=(Boolean)Configuration.getConfig(""String_Node_Str"",true);
  boolean retv=false;
  rri.setPos(ip);
  Action a;
  long filePos=rri.getPos();
  Scanner sc=new Scanner(System.in,""String_Node_Str"");
  int prevIp=ip;
  while (((endip == -1) || (endip > ip)) && (a=sis.readAction(rri)) != null) {
    for (int i=0; i < listeners.size(); i++) {
      listeners.get(i).progress(""String_Node_Str"",rri.getCount(),rri.length());
    }
    if ((ip < ret.size()) && (!(ret.get(ip) instanceof ActionNop))) {
      a=ret.get(ip);
      if (a.getAddress() != ip) {
        Logger.getLogger(SWFInputStream.class.getName()).log(Level.SEVERE,""String_Node_Str"" + ip + ""String_Node_Str""+ a.getASMSource(new ArrayList<GraphSourceItem>(),new ArrayList<Long>(),new ArrayList<String>(),SWF.DEFAULT_VERSION,false));
      }
    }
    a.containerSWFOffset=containerSWFOffset;
    a.setAddress(prevIp,SWF.DEFAULT_VERSION,false);
    int info=a.actionLength + 1 + ((a.actionCode > 0x80) ? 2 : 0);
    byte b[]=a.getBytes(sis.version);
    int infoCorrect=info;
    if ((!(a instanceof ActionStore)) && (!(a instanceof GraphSourceItemContainer))) {
      int change=info - (rri.getPos() - ip);
      if (change > 0) {
        a.afterInsert=new ActionJump(change);
      }
    }
 else {
      info=rri.getPos() - ip;
    }
    if (ip < startIp) {
      retv=true;
    }
    if (a instanceof ActionPush) {
      if (cpool != null) {
        ((ActionPush)a).constantPool=cpool.constants;
        cpool.count++;
      }
    }
    if (a instanceof ActionDefineFunction) {
      if (cpool != null) {
        cpool.count++;
      }
    }
    if (a instanceof ActionDefineFunction2) {
      if (cpool != null) {
        cpool.count++;
      }
    }
    if (debugMode) {
      String atos=a.getASMSource(new ArrayList<GraphSourceItem>(),new ArrayList<Long>(),cpool.constants,sis.version,false);
      if (a instanceof GraphSourceItemContainer) {
        atos=a.toString();
      }
      System.err.println(""String_Node_Str"" + (ip - startIp) + ""String_Node_Str""+ Helper.formatAddress(ip - startIp)+ ""String_Node_Str""+ ""String_Node_Str""+ a.actionLength+ ""String_Node_Str""+ atos+ (a.isIgnored() ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ Helper.stackToString(stack,Helper.toList(cpool))+ ""String_Node_Str""+ Helper.byteArrToString(a.getBytes(SWF.DEFAULT_VERSION)));
      @SuppressWarnings(""String_Node_Str"") HashMap<String,GraphTargetItem> vars=(HashMap<String,GraphTargetItem>)localData.get(1);
      System.err.print(""String_Node_Str"");
      for (      Entry<String,GraphTargetItem> v : vars.entrySet()) {
        System.err.print(""String_Node_Str"" + v + ""String_Node_Str""+ Highlighting.stripHilights(v.getValue().toString(cpool))+ ""String_Node_Str"");
      }
      System.err.println();
      String add=""String_Node_Str"";
      if (a instanceof ActionIf) {
        add=""String_Node_Str"" + ((ActionIf)a).getJumpOffset();
      }
      if (a instanceof ActionJump) {
        add=""String_Node_Str"" + ((ActionJump)a).getJumpOffset();
      }
      System.err.println(add);
    }
    long newFilePos=rri.getPos();
    long actionLen=newFilePos - filePos;
    ensureCapacity(ret,ip);
    int newip=-1;
    if (!enableVariables && (!(ret.get(ip) instanceof ActionNop))) {
      break;
    }
    if (a instanceof ActionConstantPool) {
      if (cpool == null) {
        cpool=new ConstantPool();
      }
      cpool.setNew(((ActionConstantPool)a).constantPool);
    }
    ActionIf aif=null;
    boolean goaif=false;
    if (!a.isIgnored()) {
      try {
        if (a instanceof ActionIf) {
          aif=(ActionIf)a;
          GraphTargetItem top=null;
          if (deobfuscate) {
            top=stack.pop();
          }
          int nip=rri.getPos() + aif.getJumpOffset();
          if (decideBranch) {
            System.out.print(""String_Node_Str"" + nip + ""String_Node_Str"");
            System.out.print(""String_Node_Str"");
            String next=sc.next();
            if (next.equals(""String_Node_Str"")) {
              newip=rri.getPos() + aif.getJumpOffset();
              rri.setPos(newip);
            }
 else             if (next.equals(""String_Node_Str"")) {
            }
 else             if (next.equals(""String_Node_Str"")) {
              goaif=true;
            }
          }
 else           if (deobfuscate && top.isCompileTime() && (!top.hasSideEffect())&& ((!top.isVariableComputed()) || (top.isVariableComputed() && enableVariables && (!notCompileTime)))) {
            if (enableVariables) {
              ((ActionIf)a).compileTime=true;
            }
            if (debugMode) {
              System.err.print(""String_Node_Str"");
            }
            if (EcmaScript.toBoolean(top.getResult())) {
              newip=rri.getPos() + aif.getJumpOffset();
              if (((!enableVariables) || (!top.isVariableComputed())) && (!aif.ignoreUsed)) {
                a=new ActionJump(aif.getJumpOffset());
                a.setAddress(aif.getAddress(),SWF.DEFAULT_VERSION);
              }
              aif.jumpUsed=true;
              if (aif.ignoreUsed) {
                aif.compileTime=false;
              }
              if (debugMode) {
                System.err.println(""String_Node_Str"");
              }
            }
 else {
              aif.ignoreUsed=true;
              if (aif.jumpUsed) {
                aif.compileTime=false;
              }
              if (debugMode) {
                System.err.println(""String_Node_Str"");
              }
              if (((!enableVariables) || (!top.isVariableComputed())) && (!aif.jumpUsed)) {
                aif.setIgnored(true,0);
              }
            }
            if (((!enableVariables) || (!top.isVariableComputed())) && (!(aif.jumpUsed && aif.ignoreUsed))) {
              List<GraphSourceItemPos> needed=top.getNeededSources();
              for (              GraphSourceItemPos ig : needed) {
                if (ig.item == null) {
                  continue;
                }
                if (ig.item instanceof ActionPush) {
                  if (!((ActionPush)ig.item).ignoredParts.contains(ig.pos)) {
                    ((ActionPush)ig.item).ignoredParts.add(ig.pos);
                    if (((ActionPush)ig.item).ignoredParts.size() == ((ActionPush)ig.item).values.size()) {
                      ((Action)ig.item).setIgnored(true,0);
                    }
                  }
                }
 else {
                  ((Action)ig.item).setIgnored(true,0);
                }
              }
            }
          }
 else {
            if (debugMode) {
              System.err.println(""String_Node_Str"");
            }
            goaif=true;
          }
        }
 else         if (a instanceof ActionJump) {
          newip=rri.getPos() + ((ActionJump)a).getJumpOffset();
        }
 else         if (!(a instanceof GraphSourceItemContainer)) {
          if (deobfuscate) {
            if (((a instanceof ActionEquals) || (a instanceof ActionEquals2)) && (stack.size() == 1) && (stack.peek() instanceof DirectValueActionItem)) {
              stack.push(new DirectValueActionItem(null,0,new Null(),new ArrayList<String>()));
            }
            if ((a instanceof ActionStoreRegister) && stack.isEmpty()) {
              stack.push(new DirectValueActionItem(null,0,new Null(),new ArrayList<String>()));
            }
            List<Object> localData2=(List<Object>)Helper.deepCopy(localData);
            HashMap<String,GraphTargetItem> vars=(HashMap<String,GraphTargetItem>)localData.get(1);
            for (int r=0; r < 256; r++) {
              if (vars.containsKey(""String_Node_Str"" + r)) {
                vars.remove(""String_Node_Str"" + r);
              }
            }
            a.translate(localData2,stack,output,Graph.SOP_USE_STATIC,path);
          }
        }
      }
 catch (      RuntimeException ex) {
        if (!enableVariables) {
          throw ex;
        }
        log.log(Level.SEVERE,""String_Node_Str"",ex);
        break;
      }
    }
    int nopos=-1;
    for (int i=0; i < actionLen; i++) {
      ensureCapacity(ret,ip + i);
      if (a instanceof ActionNop) {
        int prevPos=(int)a.getAddress();
        a=new ActionNop();
        a.setAddress(prevPos,SWF.DEFAULT_VERSION);
        nopos++;
        if (nopos > 0) {
          a.setAddress(a.getAddress() + 1,SWF.DEFAULT_VERSION);
        }
      }
      ret.set(ip + i,a);
    }
    if (a instanceof GraphSourceItemContainer) {
      GraphSourceItemContainer cnt=(GraphSourceItemContainer)a;
      if (a instanceof Action) {
        long endAddr=a.getAddress() + cnt.getHeaderSize();
        String cntName=cnt.getName();
        List<List<GraphTargetItem>> output2s=new ArrayList<>();
        for (        long size : cnt.getContainerSizes()) {
          if (size == 0) {
            output2s.add(new ArrayList<GraphTargetItem>());
            continue;
          }
          List<Object> localData2=Helper.toList(new HashMap<Integer,String>(),new HashMap<String,GraphTargetItem>(),new HashMap<String,GraphTargetItem>());
          List<GraphTargetItem> output2=new ArrayList<>();
          readActionListAtPos(listeners,output2,containers,address,containerSWFOffset,notCompileTime,enableVariables,localData2,new Stack<GraphTargetItem>(),cpool,sis,rri,(int)endAddr,ret,startIp,(int)(endAddr + size),path + (cntName == null ? ""String_Node_Str"" : ""String_Node_Str"" + cntName));
          output2s.add(output2);
          endAddr+=size;
        }
        if (deobfuscate) {
          cnt.translateContainer(output2s,stack,output,(HashMap<Integer,String>)localData.get(0),(HashMap<String,GraphTargetItem>)localData.get(1),(HashMap<String,GraphTargetItem>)localData.get(2));
        }
        ip=(int)endAddr;
        prevIp=ip;
        rri.setPos(ip);
        filePos=rri.getPos();
        continue;
      }
    }
    if (a instanceof ActionEnd) {
      break;
    }
    if (newip > -1) {
      ip=newip;
    }
 else {
      ip=ip + info;
    }
    rri.setPos(ip);
    filePos=rri.getPos();
    if (goaif) {
      if (aif.ignoreUsed && aif.jumpUsed) {
        break;
      }
      aif.ignoreUsed=true;
      aif.jumpUsed=true;
      int oldPos=rri.getPos();
      @SuppressWarnings(""String_Node_Str"") Stack<GraphTargetItem> substack=(Stack<GraphTargetItem>)stack.clone();
      if (readActionListAtPos(listeners,output,containers,address,containerSWFOffset,true,enableVariables,localData,substack,cpool,sis,rri,rri.getPos() + aif.getJumpOffset(),ret,startIp,endip,path)) {
        retv=true;
      }
      rri.setPos(oldPos);
      notCompileTime=true;
    }
    prevIp=ip;
    if (a.isExit()) {
      break;
    }
  }
  for (  DisassemblyListener listener : listeners) {
    listener.progress(""String_Node_Str"",rri.getCount(),rri.length());
  }
  return retv;
}",0.9825649321470298
62073,"/** 
 * Constructor
 * @param actionCode Action type identifier
 * @param actionLength Length of action data
 */
public Action(int actionCode,int actionLength){
  this.actionCode=actionCode;
  this.actionLength=actionLength;
}","public Action(){
}",0.1475409836065573
62074,"public static List<GraphTargetItem> actionsPartToTree(HashMap<Integer,String> registerNames,HashMap<String,GraphTargetItem> variables,HashMap<String,GraphTargetItem> functions,Stack<GraphTargetItem> stack,List<Action> actions,int start,int end,int version,int staticOperation,String path){
  if (start < actions.size() && (end > 0) && (start > 0)) {
    log(""String_Node_Str"" + start + ""String_Node_Str""+ end+ (actions.size() > 0 ? (""String_Node_Str"" + actions.get(start).toString() + ""String_Node_Str""+ actions.get(end == actions.size() ? end - 1 : end)+ ""String_Node_Str"") : ""String_Node_Str""));
  }
  List<Object> localData=new ArrayList<>();
  localData.add(registerNames);
  localData.add(variables);
  localData.add(functions);
  List<GraphTargetItem> output=new ArrayList<>();
  int ip=start;
  boolean isWhile=false;
  boolean isForIn=false;
  GraphTargetItem inItem=null;
  int loopStart=0;
  loopip:   while (ip <= end) {
    long addr=ip2adr(actions,ip,version);
    if (ip > end) {
      break;
    }
    if (ip >= actions.size()) {
      output.add(new ScriptEndItem());
      break;
    }
    Action action=actions.get(ip);
    if (action.isIgnored()) {
      ip++;
      continue;
    }
    if (action instanceof GraphSourceItemContainer) {
      GraphSourceItemContainer cnt=(GraphSourceItemContainer)action;
      long endAddr=action.getAddress() + cnt.getHeaderSize();
      String cntName=cnt.getName();
      List<List<GraphTargetItem>> outs=new ArrayList<>();
      for (      long size : cnt.getContainerSizes()) {
        if (size == 0) {
          outs.add(new ArrayList<GraphTargetItem>());
          continue;
        }
        List<GraphTargetItem> out;
        try {
          out=ActionGraph.translateViaGraph(cnt.getRegNames(),variables,functions,actions.subList(adr2ip(actions,endAddr,version),adr2ip(actions,endAddr + size,version)),version,staticOperation,path + (cntName == null ? ""String_Node_Str"" : ""String_Node_Str"" + cntName));
        }
 catch (        Exception|OutOfMemoryError|StackOverflowError ex2) {
          Logger.getLogger(Action.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex2);
          if (ex2 instanceof OutOfMemoryError) {
            System.gc();
          }
          out=new ArrayList<>();
          out.add(new CommentItem(""String_Node_Str"" + ex2.getClass().getSimpleName() + ""String_Node_Str""));
        }
        outs.add(out);
        endAddr+=size;
      }
      ((GraphSourceItemContainer)action).translateContainer(outs,stack,output,registerNames,variables,functions);
      ip=adr2ip(actions,endAddr,version);
      continue;
    }
    if ((action instanceof ActionPush) && (((ActionPush)action).values.size() == 1) && (((ActionPush)action).values.get(0) instanceof Null)) {
      if (ip + 3 <= end) {
        if ((actions.get(ip + 1) instanceof ActionEquals) || (actions.get(ip + 1) instanceof ActionEquals2)) {
          if (actions.get(ip + 2) instanceof ActionNot) {
            if (actions.get(ip + 3) instanceof ActionIf) {
              ActionIf aif=(ActionIf)actions.get(ip + 3);
              if (adr2ip(actions,ip2adr(actions,ip + 4,version) + aif.getJumpOffset(),version) == ip) {
                ip+=4;
                continue;
              }
            }
          }
        }
      }
    }
    if (false) {
    }
 else {
      try {
        action.translate(localData,stack,output,staticOperation,path);
      }
 catch (      EmptyStackException ese) {
        Logger.getLogger(Action.class.getName()).log(Level.SEVERE,null,ese);
        output.add(new UnsupportedActionItem(action,""String_Node_Str""));
      }
    }
    ip++;
  }
  log(""String_Node_Str"" + start + ""String_Node_Str""+ end);
  return output;
}","public static List<GraphTargetItem> actionsPartToTree(HashMap<Integer,String> registerNames,HashMap<String,GraphTargetItem> variables,HashMap<String,GraphTargetItem> functions,Stack<GraphTargetItem> stack,List<Action> actions,int start,int end,int version,int staticOperation,String path){
  if (start < actions.size() && (end > 0) && (start > 0)) {
    log(""String_Node_Str"" + start + ""String_Node_Str""+ end+ (actions.size() > 0 ? (""String_Node_Str"" + actions.get(start).toString() + ""String_Node_Str""+ actions.get(end == actions.size() ? end - 1 : end)+ ""String_Node_Str"") : ""String_Node_Str""));
  }
  List<Object> localData=new ArrayList<>();
  localData.add(registerNames);
  localData.add(variables);
  localData.add(functions);
  List<GraphTargetItem> output=new ArrayList<>();
  int ip=start;
  boolean isWhile=false;
  boolean isForIn=false;
  GraphTargetItem inItem=null;
  int loopStart=0;
  loopip:   while (ip <= end) {
    long addr=ip2adr(actions,ip,version);
    if (ip > end) {
      break;
    }
    if (ip >= actions.size()) {
      output.add(new ScriptEndItem());
      break;
    }
    Action action=actions.get(ip);
    if (action.isIgnored()) {
      ip++;
      continue;
    }
    if (action instanceof GraphSourceItemContainer) {
      GraphSourceItemContainer cnt=(GraphSourceItemContainer)action;
      long endAddr=action.getAddress() + cnt.getHeaderSize();
      String cntName=cnt.getName();
      List<List<GraphTargetItem>> outs=new ArrayList<>();
      HashMap<String,GraphTargetItem> variables2=(HashMap<String,GraphTargetItem>)Helper.deepCopy(variables);
      for (int r=0; r < 256; r++) {
        if (variables2.containsKey(""String_Node_Str"" + r)) {
          variables2.remove(""String_Node_Str"" + r);
        }
      }
      for (      long size : cnt.getContainerSizes()) {
        if (size == 0) {
          outs.add(new ArrayList<GraphTargetItem>());
          continue;
        }
        List<GraphTargetItem> out;
        try {
          out=ActionGraph.translateViaGraph(cnt.getRegNames(),variables2,functions,actions.subList(adr2ip(actions,endAddr,version),adr2ip(actions,endAddr + size,version)),version,staticOperation,path + (cntName == null ? ""String_Node_Str"" : ""String_Node_Str"" + cntName));
        }
 catch (        Exception|OutOfMemoryError|StackOverflowError ex2) {
          Logger.getLogger(Action.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex2);
          if (ex2 instanceof OutOfMemoryError) {
            System.gc();
          }
          out=new ArrayList<>();
          out.add(new CommentItem(""String_Node_Str"" + ex2.getClass().getSimpleName() + ""String_Node_Str""));
        }
        outs.add(out);
        endAddr+=size;
      }
      ((GraphSourceItemContainer)action).translateContainer(outs,stack,output,registerNames,variables,functions);
      ip=adr2ip(actions,endAddr,version);
      continue;
    }
    if ((action instanceof ActionPush) && (((ActionPush)action).values.size() == 1) && (((ActionPush)action).values.get(0) instanceof Null)) {
      if (ip + 3 <= end) {
        if ((actions.get(ip + 1) instanceof ActionEquals) || (actions.get(ip + 1) instanceof ActionEquals2)) {
          if (actions.get(ip + 2) instanceof ActionNot) {
            if (actions.get(ip + 3) instanceof ActionIf) {
              ActionIf aif=(ActionIf)actions.get(ip + 3);
              if (adr2ip(actions,ip2adr(actions,ip + 4,version) + aif.getJumpOffset(),version) == ip) {
                ip+=4;
                continue;
              }
            }
          }
        }
      }
    }
    if (false) {
    }
 else {
      try {
        action.translate(localData,stack,output,staticOperation,path);
      }
 catch (      EmptyStackException ese) {
        Logger.getLogger(Action.class.getName()).log(Level.SEVERE,null,ese);
        output.add(new UnsupportedActionItem(action,""String_Node_Str""));
      }
    }
    ip++;
  }
  log(""String_Node_Str"" + start + ""String_Node_Str""+ end);
  return output;
}",0.963783220427306
62075,"@Override public String toString(ConstantPool constants){
  if (value instanceof Double) {
    if (Double.compare((double)(Double)value,0) == 0) {
      return hilight(""String_Node_Str"");
    }
  }
  if (value instanceof Float) {
    if (Float.compare((float)(Float)value,0) == 0) {
      return hilight(""String_Node_Str"");
    }
  }
  if (value instanceof String) {
    return hilight(""String_Node_Str"" + Helper.escapeString((String)value) + ""String_Node_Str"");
  }
  if (value instanceof ConstantIndex) {
    return hilight(""String_Node_Str"" + Helper.escapeString(this.constants.get(((ConstantIndex)value).index)) + ""String_Node_Str"");
  }
  return hilight(value.toString());
}","@Override public String toString(ConstantPool constants){
  if (value instanceof Double) {
    if (Double.compare((double)(Double)value,0) == 0) {
      return hilight(""String_Node_Str"");
    }
  }
  if (value instanceof Float) {
    if (Float.compare((float)(Float)value,0) == 0) {
      return hilight(""String_Node_Str"");
    }
  }
  if (value instanceof String) {
    return hilight(""String_Node_Str"" + Helper.escapeString((String)value) + ""String_Node_Str"");
  }
  if (value instanceof ConstantIndex) {
    return hilight(""String_Node_Str"" + Helper.escapeString(this.constants.get(((ConstantIndex)value).index)) + ""String_Node_Str"");
  }
  if (value instanceof RegisterNumber) {
    return hilight(((RegisterNumber)value).translate());
  }
  return hilight(value.toString());
}",0.8904109589041096
62076,"@Override public String toString(ConstantPool constants){
  return (define ? hilight(""String_Node_Str"") : ""String_Node_Str"") + hilight(register.toString() + ""String_Node_Str"") + value.toString(constants);
}","@Override public String toString(ConstantPool constants){
  return (define ? hilight(""String_Node_Str"") : ""String_Node_Str"") + hilight(register.translate() + ""String_Node_Str"") + value.toString(constants);
}",0.9636803874092008
62077,"@Override public void translate(Stack<GraphTargetItem> stack,List<GraphTargetItem> output,java.util.HashMap<Integer,String> regNames,HashMap<String,GraphTargetItem> variables,HashMap<String,GraphTargetItem> functions,int staticOperation,String path){
  GraphTargetItem value=stack.pop();
  RegisterNumber rn=new RegisterNumber(registerNumber);
  if (regNames.containsKey(registerNumber)) {
    rn.name=regNames.get(registerNumber);
  }
  value.moreSrc.add(new GraphSourceItemPos(this,0));
  boolean define=!variables.containsKey(""String_Node_Str"" + registerNumber);
  variables.put(""String_Node_Str"" + registerNumber,value);
  if (value instanceof DirectValueActionItem) {
    if (((DirectValueActionItem)value).value instanceof RegisterNumber) {
      if (((RegisterNumber)((DirectValueActionItem)value).value).number == registerNumber) {
        stack.push(value);
        return;
      }
    }
  }
  if (value instanceof StoreRegisterActionItem) {
    if (((StoreRegisterActionItem)value).register.number == registerNumber) {
      stack.push(value);
      return;
    }
  }
  if (value instanceof IncrementActionItem) {
    GraphTargetItem obj=((IncrementActionItem)value).object;
    if (!stack.isEmpty()) {
      if (stack.peek().valueEquals(obj)) {
        stack.pop();
        stack.push(new PostIncrementActionItem(this,obj));
        stack.push(obj);
        return;
      }
    }
  }
  if (value instanceof DecrementActionItem) {
    GraphTargetItem obj=((DecrementActionItem)value).object;
    if (!stack.isEmpty()) {
      if (stack.peek().valueEquals(obj)) {
        stack.pop();
        stack.push(new PostDecrementActionItem(this,obj));
        stack.push(obj);
        return;
      }
    }
  }
  stack.push(new StoreRegisterActionItem(this,rn,value,define));
}","@Override public void translate(Stack<GraphTargetItem> stack,List<GraphTargetItem> output,java.util.HashMap<Integer,String> regNames,HashMap<String,GraphTargetItem> variables,HashMap<String,GraphTargetItem> functions,int staticOperation,String path){
  GraphTargetItem value=stack.pop();
  RegisterNumber rn=new RegisterNumber(registerNumber);
  if (regNames.containsKey(registerNumber)) {
    rn.name=regNames.get(registerNumber);
  }
  value.moreSrc.add(new GraphSourceItemPos(this,0));
  boolean define=!variables.containsKey(""String_Node_Str"" + registerNumber);
  if (regNames.containsKey(registerNumber)) {
    define=false;
  }
  variables.put(""String_Node_Str"" + registerNumber,value);
  if (value instanceof DirectValueActionItem) {
    if (((DirectValueActionItem)value).value instanceof RegisterNumber) {
      if (((RegisterNumber)((DirectValueActionItem)value).value).number == registerNumber) {
        stack.push(value);
        return;
      }
    }
  }
  if (value instanceof StoreRegisterActionItem) {
    if (((StoreRegisterActionItem)value).register.number == registerNumber) {
      stack.push(value);
      return;
    }
  }
  if (value instanceof IncrementActionItem) {
    GraphTargetItem obj=((IncrementActionItem)value).object;
    if (!stack.isEmpty()) {
      if (stack.peek().valueEquals(obj)) {
        stack.pop();
        stack.push(new PostIncrementActionItem(this,obj));
        stack.push(obj);
        return;
      }
    }
  }
  if (value instanceof DecrementActionItem) {
    GraphTargetItem obj=((DecrementActionItem)value).object;
    if (!stack.isEmpty()) {
      if (stack.peek().valueEquals(obj)) {
        stack.pop();
        stack.push(new PostDecrementActionItem(this,obj));
        stack.push(obj);
        return;
      }
    }
  }
  stack.push(new StoreRegisterActionItem(this,rn,value,define));
}",0.9812362030905076
62078,"public static Object deepCopy(Object o){
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try (ObjectOutputStream oos=new ObjectOutputStream(baos)){
      oos.writeObject(o);
      oos.flush();
    }
     Object copy;
    try (ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()))){
      copy=ois.readObject();
    }
     return copy;
  }
 catch (  Exception ex) {
    return null;
  }
}","public static Object deepCopy(Object o){
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try (ObjectOutputStream oos=new ObjectOutputStream(baos)){
      oos.writeObject(o);
      oos.flush();
    }
     Object copy;
    try (ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()))){
      copy=ois.readObject();
    }
     return copy;
  }
 catch (  Exception ex) {
    Logger.getLogger(Helper.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
    return null;
  }
}",0.91317671092952
62079,"@Override public void addCharacter(List<Tag> tags,char character){
  int fontStyle=getFontStyle();
  String fname=getFontName(tags);
  SHAPE shp=SHAPERECORD.systemFontCharacterToSHAPE(fname,fontStyle,getDivider() * 1000,character);
  glyphShapeTable.add(shp);
  fontBoundsTable.add(shp.getBounds());
  codeTable.add((int)character);
  Font fnt=new Font(fname,fontStyle,getDivider() * 1000);
  fontAdvanceTable.add((new JPanel()).getFontMetrics(fnt).charWidth(character));
  numGlyphs++;
}","@Override public void addCharacter(List<Tag> tags,char character){
  int fontStyle=getFontStyle();
  String fname=getFontName(tags);
  SHAPE shp=SHAPERECORD.systemFontCharacterToSHAPE(fname,fontStyle,getDivider() * 1024,character);
  glyphShapeTable.add(shp);
  codeTable.add((int)character);
  if (fontFlagsHasLayout) {
    fontBoundsTable.add(shp.getBounds());
    Font fnt=new Font(fname,fontStyle,getDivider() * 1024);
    fontAdvanceTable.add((new JPanel()).getFontMetrics(fnt).charWidth(character));
  }
  numGlyphs++;
}",0.8875739644970414
62080,"public DefineFont3Tag(byte[] data,int version,long pos) throws IOException {
  super(ID,""String_Node_Str"",data,pos);
  SWFInputStream sis=new SWFInputStream(new ByteArrayInputStream(data),version);
  fontId=sis.readUI16();
  fontFlagsHasLayout=sis.readUB(1) == 1;
  fontFlagsShiftJIS=sis.readUB(1) == 1;
  fontFlagsSmallText=sis.readUB(1) == 1;
  fontFlagsANSI=sis.readUB(1) == 1;
  fontFlagsWideOffsets=sis.readUB(1) == 1;
  fontFlagsWideCodes=sis.readUB(1) == 1;
  fontFlagsItalic=sis.readUB(1) == 1;
  fontFlagsBold=sis.readUB(1) == 1;
  languageCode=sis.readLANGCODE();
  int fontNameLen=sis.readUI8();
  fontName=new String(sis.readBytes(fontNameLen));
  numGlyphs=sis.readUI16();
  for (int i=0; i < numGlyphs; i++) {
    if (fontFlagsWideOffsets) {
      sis.readUI32();
    }
 else {
      sis.readUI16();
    }
  }
  if (numGlyphs > 0) {
    if (fontFlagsWideOffsets) {
      sis.readUI32();
    }
 else {
      sis.readUI16();
    }
  }
  glyphShapeTable=new ArrayList<>();
  SHAPE firstShape=null;
  int cnt=0;
  for (int i=0; i < numGlyphs; i++) {
    SHAPE shp=sis.readSHAPE(1);
    glyphShapeTable.add(shp);
  }
  codeTable=new ArrayList<>();
  for (int i=0; i < numGlyphs; i++) {
    if (fontFlagsWideCodes) {
      codeTable.add(sis.readUI16());
    }
 else {
      codeTable.add(sis.readUI8());
    }
  }
  if (fontFlagsHasLayout) {
    fontAscent=sis.readSI16();
    fontDescent=sis.readSI16();
    fontLeading=sis.readSI16();
    fontAdvanceTable=new ArrayList<>();
    for (int i=0; i < numGlyphs; i++) {
      fontAdvanceTable.add(sis.readSI16());
    }
    fontBoundsTable=new ArrayList<>();
    for (int i=0; i < numGlyphs; i++) {
      fontBoundsTable.add(sis.readRECT());
    }
    int kerningCount=sis.readUI16();
    fontKerningTable=new KERNINGRECORD[kerningCount];
    for (int i=0; i < kerningCount; i++) {
      fontKerningTable[i]=sis.readKERNINGRECORD(fontFlagsWideCodes);
    }
  }
}","public DefineFont3Tag(byte[] data,int version,long pos) throws IOException {
  super(ID,""String_Node_Str"",data,pos);
  SWFInputStream sis=new SWFInputStream(new ByteArrayInputStream(data),version);
  fontId=sis.readUI16();
  fontFlagsHasLayout=sis.readUB(1) == 1;
  fontFlagsShiftJIS=sis.readUB(1) == 1;
  fontFlagsSmallText=sis.readUB(1) == 1;
  fontFlagsANSI=sis.readUB(1) == 1;
  fontFlagsWideOffsets=sis.readUB(1) == 1;
  fontFlagsWideCodes=sis.readUB(1) == 1;
  fontFlagsItalic=sis.readUB(1) == 1;
  fontFlagsBold=sis.readUB(1) == 1;
  languageCode=sis.readLANGCODE();
  int fontNameLen=sis.readUI8();
  fontName=new String(sis.readBytes(fontNameLen));
  numGlyphs=sis.readUI16();
  for (int i=0; i < numGlyphs; i++) {
    if (fontFlagsWideOffsets) {
      sis.readUI32();
    }
 else {
      sis.readUI16();
    }
  }
  if (numGlyphs > 0) {
    if (fontFlagsWideOffsets) {
      sis.readUI32();
    }
 else {
      sis.readUI16();
    }
  }
  glyphShapeTable=new ArrayList<>();
  for (int i=0; i < numGlyphs; i++) {
    glyphShapeTable.add(sis.readSHAPE(1));
  }
  codeTable=new ArrayList<>();
  for (int i=0; i < numGlyphs; i++) {
    if (fontFlagsWideCodes) {
      codeTable.add(sis.readUI16());
    }
 else {
      codeTable.add(sis.readUI8());
    }
  }
  if (fontFlagsHasLayout) {
    fontAscent=sis.readSI16();
    fontDescent=sis.readSI16();
    fontLeading=sis.readSI16();
    fontAdvanceTable=new ArrayList<>();
    for (int i=0; i < numGlyphs; i++) {
      fontAdvanceTable.add(sis.readSI16());
    }
    fontBoundsTable=new ArrayList<>();
    for (int i=0; i < numGlyphs; i++) {
      fontBoundsTable.add(sis.readRECT());
    }
    int kerningCount=sis.readUI16();
    fontKerningTable=new KERNINGRECORD[kerningCount];
    for (int i=0; i < kerningCount; i++) {
      fontKerningTable[i]=sis.readKERNINGRECORD(fontFlagsWideCodes);
    }
  }
}",0.9473126820227694
62081,"@Override public void addCharacter(List<Tag> tags,char character){
  int fontStyle=getFontStyle();
  String fname=getFontName(tags);
  SHAPE shp=SHAPERECORD.systemFontCharacterToSHAPE(fname,fontStyle,getDivider() * 1000,character);
  glyphShapeTable.add(shp);
  fontBoundsTable.add(new RECT());
  codeTable.add((int)character);
  Font fnt=new Font(fname,fontStyle,getDivider() * 1000);
  fontAdvanceTable.add((new JPanel()).getFontMetrics(fnt).charWidth(character));
  numGlyphs++;
}","@Override public void addCharacter(List<Tag> tags,char character){
  int fontStyle=getFontStyle();
  String fname=getFontName(tags);
  SHAPE shp=SHAPERECORD.systemFontCharacterToSHAPE(fname,fontStyle,getDivider() * 1024,character);
  glyphShapeTable.add(shp);
  codeTable.add((int)character);
  if (fontFlagsHasLayout) {
    fontBoundsTable.add(shp.getBounds());
    Font fnt=new Font(fname,fontStyle,getDivider() * 1024);
    fontAdvanceTable.add((new JPanel()).getFontMetrics(fnt).charWidth(character));
  }
  numGlyphs++;
}",0.8523290386521308
62082,"@Override public void addCharacter(List<Tag> tags,char character){
  glyphShapeTable.add(SHAPERECORD.systemFontCharacterToSHAPE(getFontName(tags),getFontStyle(),getDivider() * 1000,character));
  ensureFontInfo(tags);
  if (fontInfoTag != null) {
    fontInfoTag.codeTable.add((int)character);
  }
  if (fontInfo2Tag != null) {
    fontInfo2Tag.codeTable.add((int)character);
  }
}","@Override public void addCharacter(List<Tag> tags,char character){
  glyphShapeTable.add(SHAPERECORD.systemFontCharacterToSHAPE(getFontName(tags),getFontStyle(),getDivider() * 1024,character));
  ensureFontInfo(tags);
  if (fontInfoTag != null) {
    fontInfoTag.codeTable.add((int)character);
  }
  if (fontInfo2Tag != null) {
    fontInfo2Tag.codeTable.add((int)character);
  }
}",0.994750656167979
62083,"@Override public BufferedImage toImage(int frame,List<Tag> tags,RECT displayRect,HashMap<Integer,CharacterTag> characters,Stack<Integer> visited){
  RECT bound=getBounds();
  BufferedImage ret=new BufferedImage(bound.Xmax / 20,bound.Ymax / 20,BufferedImage.TYPE_INT_ARGB);
  Color textColor=new Color(0,0,0);
  FontTag font=null;
  int textHeight=12;
  int x=bound.Xmin;
  int y=0;
  Graphics2D g=(Graphics2D)ret.getGraphics();
  g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
  g.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  List<SHAPE> glyphs=new ArrayList<>();
  for (  TEXTRECORD rec : textRecords) {
    if (rec.styleFlagsHasColor) {
      textColor=rec.textColorA.toColor();
    }
    if (rec.styleFlagsHasFont) {
      font=(FontTag)characters.get(rec.fontId);
      glyphs=font.getGlyphShapeTable();
      textHeight=rec.textHeight;
    }
    if (rec.styleFlagsHasXOffset) {
      x=rec.xOffset * 1000 / textHeight;
    }
    if (rec.styleFlagsHasYOffset) {
      y=rec.yOffset * 1000 / textHeight;
    }
    for (    GLYPHENTRY entry : rec.glyphEntries) {
      RECT rect=SHAPERECORD.getBounds(glyphs.get(entry.glyphIndex).shapeRecords);
      rect.Xmax/=font.getDivider();
      rect.Xmin/=font.getDivider();
      rect.Ymax/=font.getDivider();
      rect.Ymin/=font.getDivider();
      BufferedImage img=SHAPERECORD.shapeToImage(tags,4,null,null,glyphs.get(entry.glyphIndex).shapeRecords,textColor);
      AffineTransform tr=new AffineTransform();
      tr.setToIdentity();
      float rat=textHeight / 1000f;
      tr.translate(rat * x / 20,rat * (y + rect.Ymin) / 20);
      tr.scale(rat / font.getDivider(),rat / font.getDivider());
      g.drawImage(img,tr,null);
      x+=entry.glyphAdvance * 1000 / textHeight;
    }
  }
  return ret;
}","@Override public BufferedImage toImage(int frame,List<Tag> tags,RECT displayRect,HashMap<Integer,CharacterTag> characters,Stack<Integer> visited){
  RECT bound=getBounds();
  BufferedImage ret=new BufferedImage(bound.Xmax / 20,bound.Ymax / 20,BufferedImage.TYPE_INT_ARGB);
  Color textColor=new Color(0,0,0);
  FontTag font=null;
  int textHeight=12;
  int x=bound.Xmin;
  int y=0;
  Graphics2D g=(Graphics2D)ret.getGraphics();
  g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
  g.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  List<SHAPE> glyphs=new ArrayList<>();
  for (  TEXTRECORD rec : textRecords) {
    if (rec.styleFlagsHasColor) {
      textColor=rec.textColorA.toColor();
    }
    if (rec.styleFlagsHasFont) {
      font=(FontTag)characters.get(rec.fontId);
      glyphs=font.getGlyphShapeTable();
      textHeight=rec.textHeight;
    }
    if (rec.styleFlagsHasXOffset) {
      x=rec.xOffset * 1024 / textHeight;
    }
    if (rec.styleFlagsHasYOffset) {
      y=rec.yOffset * 1024 / textHeight;
    }
    for (    GLYPHENTRY entry : rec.glyphEntries) {
      RECT rect=SHAPERECORD.getBounds(glyphs.get(entry.glyphIndex).shapeRecords);
      rect.Xmax/=font.getDivider();
      rect.Xmin/=font.getDivider();
      rect.Ymax/=font.getDivider();
      rect.Ymin/=font.getDivider();
      BufferedImage img=SHAPERECORD.shapeToImage(tags,4,null,null,glyphs.get(entry.glyphIndex).shapeRecords,textColor);
      AffineTransform tr=new AffineTransform();
      tr.setToIdentity();
      float rat=textHeight / 1024f;
      tr.translate(rat * x / 20,rat * (y + rect.Ymin) / 20);
      tr.scale(rat / font.getDivider(),rat / font.getDivider());
      g.drawImage(img,tr,null);
      x+=entry.glyphAdvance * 1024 / textHeight;
    }
  }
  return ret;
}",0.9958634953464324
62084,"@Override public BufferedImage toImage(int frame,List<Tag> tags,RECT displayRect,HashMap<Integer,CharacterTag> characters,Stack<Integer> visited){
  RECT bound=getBounds();
  int fixX=-bound.Xmin;
  int fixY=-bound.Ymin;
  BufferedImage ret=new BufferedImage(bound.getWidth() / 20,bound.getHeight() / 20,BufferedImage.TYPE_INT_ARGB);
  Color textColor=new Color(0,0,0);
  FontTag font=null;
  int textHeight=12;
  int x=bound.Xmin;
  int y=0;
  Graphics2D g=(Graphics2D)ret.getGraphics();
  g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
  g.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  List<SHAPE> glyphs=new ArrayList<>();
  for (  TEXTRECORD rec : textRecords) {
    if (rec.styleFlagsHasColor) {
      textColor=rec.textColor.toColor();
    }
    if (rec.styleFlagsHasFont) {
      font=(FontTag)characters.get(rec.fontId);
      glyphs=font.getGlyphShapeTable();
      textHeight=rec.textHeight;
    }
    if (rec.styleFlagsHasXOffset) {
      x=rec.xOffset * 1000 / textHeight;
    }
    if (rec.styleFlagsHasYOffset) {
      y=rec.yOffset * 1000 / textHeight;
    }
    for (    GLYPHENTRY entry : rec.glyphEntries) {
      RECT rect=SHAPERECORD.getBounds(glyphs.get(entry.glyphIndex).shapeRecords);
      rect.Xmax/=font.getDivider();
      rect.Xmin/=font.getDivider();
      rect.Ymax/=font.getDivider();
      rect.Ymin/=font.getDivider();
      BufferedImage img=SHAPERECORD.shapeToImage(tags,1,null,null,glyphs.get(entry.glyphIndex).shapeRecords,textColor);
      AffineTransform tr=new AffineTransform();
      tr.setToIdentity();
      float rat=textHeight / 1000f;
      tr.translate(rat * x / 20,rat * (y + rect.Ymin) / 20);
      tr.scale(rat / font.getDivider(),rat / font.getDivider());
      tr.translate(fixX,fixY);
      g.drawImage(img,tr,null);
      x+=entry.glyphAdvance * 1000 / textHeight;
    }
  }
  return ret;
}","@Override public BufferedImage toImage(int frame,List<Tag> tags,RECT displayRect,HashMap<Integer,CharacterTag> characters,Stack<Integer> visited){
  RECT bound=getBounds();
  int fixX=-bound.Xmin;
  int fixY=-bound.Ymin;
  BufferedImage ret=new BufferedImage(bound.getWidth() / 20,bound.getHeight() / 20,BufferedImage.TYPE_INT_ARGB);
  Color textColor=new Color(0,0,0);
  FontTag font=null;
  int textHeight=12;
  int x=bound.Xmin;
  int y=0;
  Graphics2D g=(Graphics2D)ret.getGraphics();
  g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
  g.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  List<SHAPE> glyphs=new ArrayList<>();
  for (  TEXTRECORD rec : textRecords) {
    if (rec.styleFlagsHasColor) {
      textColor=rec.textColor.toColor();
    }
    if (rec.styleFlagsHasFont) {
      font=(FontTag)characters.get(rec.fontId);
      glyphs=font.getGlyphShapeTable();
      textHeight=rec.textHeight;
    }
    if (rec.styleFlagsHasXOffset) {
      x=rec.xOffset * 1024 / textHeight;
    }
    if (rec.styleFlagsHasYOffset) {
      y=rec.yOffset * 1024 / textHeight;
    }
    for (    GLYPHENTRY entry : rec.glyphEntries) {
      RECT rect=SHAPERECORD.getBounds(glyphs.get(entry.glyphIndex).shapeRecords);
      rect.Xmax/=font.getDivider();
      rect.Xmin/=font.getDivider();
      rect.Ymax/=font.getDivider();
      rect.Ymin/=font.getDivider();
      BufferedImage img=SHAPERECORD.shapeToImage(tags,1,null,null,glyphs.get(entry.glyphIndex).shapeRecords,textColor);
      AffineTransform tr=new AffineTransform();
      tr.setToIdentity();
      float rat=textHeight / 1024f;
      tr.translate(rat * x / 20,rat * (y + rect.Ymin) / 20);
      tr.scale(rat / font.getDivider(),rat / font.getDivider());
      tr.translate(fixX,fixY);
      g.drawImage(img,tr,null);
      x+=entry.glyphAdvance * 1024 / textHeight;
    }
  }
  return ret;
}",0.9960493827160494
62085,"public static SHAPE systemFontCharacterToSHAPE(String fontName,int fontStyle,int fontSize,char character){
  List<SHAPERECORD> retList=new ArrayList<>();
  Font f=new Font(fontName,fontStyle,fontSize);
  GlyphVector v=f.createGlyphVector((new JPanel()).getFontMetrics(f).getFontRenderContext(),""String_Node_Str"" + character);
  Shape shp=v.getOutline();
  double points[]=new double[6];
  int lastX=0;
  int lastY=0;
  int startX=0;
  int startY=0;
  for (PathIterator it=shp.getPathIterator(null); !it.isDone(); it.next()) {
    int type=it.currentSegment(points);
switch (type) {
case PathIterator.SEG_MOVETO:
      StyleChangeRecord scr=new StyleChangeRecord();
    scr.stateMoveTo=true;
  scr.moveDeltaX=(int)Math.round(points[0]);
scr.moveDeltaY=(int)Math.round(points[1]);
scr.moveBits=SWFOutputStream.getNeededBitsS(scr.moveDeltaX,scr.moveDeltaY);
retList.add(scr);
lastX=(int)Math.round(points[0]);
lastY=(int)Math.round(points[1]);
startX=lastX;
startY=lastY;
break;
case PathIterator.SEG_LINETO:
StraightEdgeRecord ser=new StraightEdgeRecord();
ser.generalLineFlag=true;
ser.deltaX=((int)Math.round(points[0])) - lastX;
ser.deltaY=((int)Math.round(points[1])) - lastY;
ser.numBits=SWFOutputStream.getNeededBitsS(ser.deltaX,ser.deltaY) - 2;
if (ser.numBits < 0) {
ser.numBits=0;
}
retList.add(ser);
lastX=(int)Math.round(points[0]);
lastY=(int)Math.round(points[1]);
break;
case PathIterator.SEG_CUBICTO:
double cubicCoords[]=new double[]{lastX,lastY,Math.round(points[0]),Math.round(points[1]),Math.round(points[2]),Math.round(points[3]),Math.round(points[4]),Math.round(points[5])};
double quadCoords[][]=approximateCubic(cubicCoords);
for (int i=0; i < quadCoords.length; i++) {
CurvedEdgeRecord cer=new CurvedEdgeRecord();
cer.controlDeltaX=((int)Math.round(quadCoords[i][0])) - lastX;
cer.controlDeltaY=((int)Math.round(quadCoords[i][1])) - lastY;
cer.anchorDeltaX=((int)Math.round(quadCoords[i][2])) - ((int)Math.round(quadCoords[i][0]));
cer.anchorDeltaY=((int)Math.round(quadCoords[i][3])) - ((int)Math.round(quadCoords[i][1]));
cer.numBits=SWFOutputStream.getNeededBitsS(cer.controlDeltaX,cer.controlDeltaY,cer.anchorDeltaX,cer.anchorDeltaY) - 2;
if (cer.numBits < 0) {
cer.numBits=0;
}
lastX=(int)Math.round(quadCoords[i][2]);
lastY=(int)Math.round(quadCoords[i][3]);
retList.add(cer);
}
break;
case PathIterator.SEG_QUADTO:
CurvedEdgeRecord cer=new CurvedEdgeRecord();
cer.controlDeltaX=((int)Math.round(points[0])) - lastX;
cer.controlDeltaY=((int)Math.round(points[1])) - lastY;
cer.anchorDeltaX=((int)Math.round(points[2])) - (int)Math.round(points[0]);
cer.anchorDeltaY=((int)Math.round(points[3])) - (int)Math.round(points[1]);
cer.numBits=SWFOutputStream.getNeededBitsS(cer.controlDeltaX,cer.controlDeltaY,cer.anchorDeltaX,cer.anchorDeltaY) - 2;
if (cer.numBits < 0) {
cer.numBits=0;
}
retList.add(cer);
lastX=(int)Math.round(points[2]);
lastY=(int)Math.round(points[3]);
break;
case PathIterator.SEG_CLOSE:
if ((startX == lastX) && (startY == lastY)) {
break;
}
StraightEdgeRecord closeSer=new StraightEdgeRecord();
closeSer.generalLineFlag=true;
closeSer.deltaX=(int)Math.round((startX - lastX));
closeSer.deltaY=(int)Math.round((startY - lastY));
closeSer.numBits=SWFOutputStream.getNeededBitsS(closeSer.deltaX,closeSer.deltaY) - 2;
if (closeSer.numBits < 0) {
closeSer.numBits=0;
}
retList.add(closeSer);
lastX=startX;
lastY=startY;
break;
}
}
SHAPE shape=new SHAPE();
StyleChangeRecord init;
if (!retList.isEmpty() && retList.get(0) instanceof StyleChangeRecord) {
init=(StyleChangeRecord)retList.get(0);
}
 else {
init=new StyleChangeRecord();
retList.add(0,init);
}
retList.add(new EndShapeRecord());
init.stateFillStyle0=true;
init.fillStyle0=1;
shape.shapeRecords=retList;
shape.numFillBits=1;
shape.numLineBits=0;
return shape;
}","public static SHAPE systemFontCharacterToSHAPE(String fontName,int fontStyle,int fontSize,char character){
  List<SHAPERECORD> retList=new ArrayList<>();
  String defaultFonts[]=new String[]{""String_Node_Str"",""String_Node_Str""};
  Font f=null;
  if (existingFonts.contains(fontName)) {
    f=new Font(fontName,fontStyle,fontSize);
  }
 else {
    for (    String defName : defaultFonts) {
      if (existingFonts.contains(defName)) {
        f=new Font(defName,fontStyle,fontSize);
        break;
      }
    }
  }
  if (f == null) {
    f=new Font(""String_Node_Str"",fontStyle,fontSize);
  }
  GlyphVector v=f.createGlyphVector((new JPanel()).getFontMetrics(f).getFontRenderContext(),""String_Node_Str"" + character);
  Shape shp=v.getOutline();
  double points[]=new double[6];
  int lastX=0;
  int lastY=0;
  int startX=0;
  int startY=0;
  for (PathIterator it=shp.getPathIterator(null); !it.isDone(); it.next()) {
    int type=it.currentSegment(points);
switch (type) {
case PathIterator.SEG_MOVETO:
      StyleChangeRecord scr=new StyleChangeRecord();
    scr.stateMoveTo=true;
  scr.moveDeltaX=(int)Math.round(points[0]);
scr.moveDeltaY=(int)Math.round(points[1]);
scr.moveBits=SWFOutputStream.getNeededBitsS(scr.moveDeltaX,scr.moveDeltaY);
retList.add(scr);
lastX=(int)Math.round(points[0]);
lastY=(int)Math.round(points[1]);
startX=lastX;
startY=lastY;
break;
case PathIterator.SEG_LINETO:
StraightEdgeRecord ser=new StraightEdgeRecord();
ser.generalLineFlag=true;
ser.deltaX=((int)Math.round(points[0])) - lastX;
ser.deltaY=((int)Math.round(points[1])) - lastY;
ser.numBits=SWFOutputStream.getNeededBitsS(ser.deltaX,ser.deltaY) - 2;
if (ser.numBits < 0) {
ser.numBits=0;
}
retList.add(ser);
lastX=(int)Math.round(points[0]);
lastY=(int)Math.round(points[1]);
break;
case PathIterator.SEG_CUBICTO:
double cubicCoords[]=new double[]{lastX,lastY,Math.round(points[0]),Math.round(points[1]),Math.round(points[2]),Math.round(points[3]),Math.round(points[4]),Math.round(points[5])};
double quadCoords[][]=approximateCubic(cubicCoords);
for (int i=0; i < quadCoords.length; i++) {
CurvedEdgeRecord cer=new CurvedEdgeRecord();
cer.controlDeltaX=((int)Math.round(quadCoords[i][0])) - lastX;
cer.controlDeltaY=((int)Math.round(quadCoords[i][1])) - lastY;
cer.anchorDeltaX=((int)Math.round(quadCoords[i][2])) - ((int)Math.round(quadCoords[i][0]));
cer.anchorDeltaY=((int)Math.round(quadCoords[i][3])) - ((int)Math.round(quadCoords[i][1]));
cer.numBits=SWFOutputStream.getNeededBitsS(cer.controlDeltaX,cer.controlDeltaY,cer.anchorDeltaX,cer.anchorDeltaY) - 2;
if (cer.numBits < 0) {
cer.numBits=0;
}
lastX=(int)Math.round(quadCoords[i][2]);
lastY=(int)Math.round(quadCoords[i][3]);
retList.add(cer);
}
break;
case PathIterator.SEG_QUADTO:
CurvedEdgeRecord cer=new CurvedEdgeRecord();
cer.controlDeltaX=((int)Math.round(points[0])) - lastX;
cer.controlDeltaY=((int)Math.round(points[1])) - lastY;
cer.anchorDeltaX=((int)Math.round(points[2])) - (int)Math.round(points[0]);
cer.anchorDeltaY=((int)Math.round(points[3])) - (int)Math.round(points[1]);
cer.numBits=SWFOutputStream.getNeededBitsS(cer.controlDeltaX,cer.controlDeltaY,cer.anchorDeltaX,cer.anchorDeltaY) - 2;
if (cer.numBits < 0) {
cer.numBits=0;
}
retList.add(cer);
lastX=(int)Math.round(points[2]);
lastY=(int)Math.round(points[3]);
break;
case PathIterator.SEG_CLOSE:
if ((startX == lastX) && (startY == lastY)) {
break;
}
StraightEdgeRecord closeSer=new StraightEdgeRecord();
closeSer.generalLineFlag=true;
closeSer.deltaX=(int)Math.round((startX - lastX));
closeSer.deltaY=(int)Math.round((startY - lastY));
closeSer.numBits=SWFOutputStream.getNeededBitsS(closeSer.deltaX,closeSer.deltaY) - 2;
if (closeSer.numBits < 0) {
closeSer.numBits=0;
}
retList.add(closeSer);
lastX=startX;
lastY=startY;
break;
}
}
SHAPE shape=new SHAPE();
StyleChangeRecord init;
if (!retList.isEmpty() && retList.get(0) instanceof StyleChangeRecord) {
init=(StyleChangeRecord)retList.get(0);
}
 else {
init=new StyleChangeRecord();
retList.add(0,init);
}
retList.add(new EndShapeRecord());
init.stateFillStyle0=true;
init.fillStyle0=1;
shape.shapeRecords=retList;
shape.numFillBits=1;
shape.numLineBits=0;
return shape;
}",0.9507575757575758
62086,"public String toASMSource(ConstantPool constants,MethodBody body,List<Integer> outputMap,boolean hex){
  invalidateCache();
  StringBuffer ret=new StringBuffer();
  String t=""String_Node_Str"";
  for (int e=0; e < body.exceptions.length; e++) {
    ret.append(""String_Node_Str"" + e + ""String_Node_Str""+ body.exceptions[e].name_index+ ""String_Node_Str""+ Helper.escapeString(body.exceptions[e].getVarName(constants,new ArrayList<String>()))+ ""String_Node_Str""+ ""String_Node_Str""+ body.exceptions[e].type_index+ ""String_Node_Str""+ Helper.escapeString(body.exceptions[e].getTypeName(constants,new ArrayList<String>()))+ ""String_Node_Str"");
  }
  List<Long> offsets=new ArrayList<>();
  for (  AVM2Instruction ins : code) {
    offsets.addAll(ins.getOffsets());
  }
  for (  AVM2Instruction ins : code) {
    if (ins.replaceWith != null) {
      for (      Object o : ins.replaceWith) {
        if (o instanceof ControlFlowTag) {
          ControlFlowTag cft=(ControlFlowTag)o;
          if (cft.name.equals(""String_Node_Str"")) {
            offsets.add((long)pos2adr(cft.value));
          }
        }
      }
    }
  }
  long ofs=0;
  int ip=0;
  int largeLimit=20000;
  boolean markOffsets=code.size() <= largeLimit;
  for (  AVM2Instruction ins : code) {
    if (hex) {
      ret.append(""String_Node_Str"");
      ret.append(Helper.bytesToHexString(ins.getBytes()));
      ret.append(""String_Node_Str"");
    }
    if (ins.labelname != null) {
      ret.append(ins.labelname + ""String_Node_Str"");
    }
 else     if (offsets.contains(ofs)) {
      ret.append(""String_Node_Str"" + Helper.formatAddress(ofs) + ""String_Node_Str"");
    }
    for (int e=0; e < body.exceptions.length; e++) {
      if (body.exceptions[e].start == ofs) {
        ret.append(""String_Node_Str"" + e + ""String_Node_Str"");
      }
      if (body.exceptions[e].end == ofs) {
        ret.append(""String_Node_Str"" + e + ""String_Node_Str"");
      }
      if (body.exceptions[e].target == ofs) {
        ret.append(""String_Node_Str"" + e + ""String_Node_Str"");
      }
    }
    if (ins.replaceWith != null) {
      for (      Object o : ins.replaceWith) {
        if (o instanceof Integer) {
          AVM2Instruction ins2=code.get((Integer)o);
          if (ins2.isIgnored()) {
            continue;
          }
          t=Highlighting.hilighOffset(""String_Node_Str"",ins2.mappedOffset > -1 ? ins2.mappedOffset : ofs) + ins2.toStringNoAddress(constants,new ArrayList<String>()) + ""String_Node_Str""+ Helper.formatAddress(pos2adr((Integer)o))+ ""String_Node_Str"";
          ret.append(t);
          outputMap.add((Integer)o);
        }
 else         if (o instanceof ControlFlowTag) {
          ControlFlowTag cft=(ControlFlowTag)o;
          if (cft.name.equals(""String_Node_Str"")) {
            t=""String_Node_Str"" + Helper.formatAddress(pos2adr(cft.value)) + ""String_Node_Str"";
            ret.append(t);
            outputMap.add(-1);
          }
          if (cft.name.equals(""String_Node_Str"")) {
            ret.append(""String_Node_Str"" + Helper.formatAddress(pos2adr(cft.value)) + ""String_Node_Str"");
          }
        }
      }
    }
 else {
      if (!ins.isIgnored()) {
        int fixBranch=ins.getFixBranch();
        if (fixBranch > -1) {
          if (ins.definition instanceof IfTypeIns) {
            t=new PopIns().instructionName + ""String_Node_Str"";
            if (fixBranch == 0) {
              t+=new JumpIns().instructionName + ""String_Node_Str"" + Helper.formatAddress(ofs + ins.getBytes().length + ins.operands[0]);
            }
 else {
            }
          }
        }
 else {
          t=ins.toStringNoAddress(constants,new ArrayList<String>());
          if (ins.changeJumpTo > -1) {
            t=ins.definition.instructionName + ""String_Node_Str"" + Helper.formatAddress(pos2adr(ins.changeJumpTo));
          }
        }
        if (markOffsets) {
          t=Highlighting.hilighOffset(""String_Node_Str"",ins.mappedOffset > -1 ? ins.mappedOffset : ofs) + t + ""String_Node_Str"";
        }
 else {
          t=t + ""String_Node_Str"";
        }
        ret.append(t);
        outputMap.add(ip);
      }
    }
    ofs+=ins.getBytes().length;
    ip++;
  }
  String r=ret.toString();
  return r;
}","public String toASMSource(ConstantPool constants,MethodBody body,List<Integer> outputMap,boolean hex){
  invalidateCache();
  StringBuffer ret=new StringBuffer();
  String t=""String_Node_Str"";
  for (int e=0; e < body.exceptions.length; e++) {
    ret.append(""String_Node_Str"" + e + ""String_Node_Str""+ body.exceptions[e].name_index+ ""String_Node_Str""+ Helper.escapeString(body.exceptions[e].getVarName(constants,new ArrayList<String>()))+ ""String_Node_Str""+ ""String_Node_Str""+ body.exceptions[e].type_index+ ""String_Node_Str""+ Helper.escapeString(body.exceptions[e].getTypeName(constants,new ArrayList<String>()))+ ""String_Node_Str"");
  }
  List<Long> offsets=new ArrayList<>();
  for (  AVM2Instruction ins : code) {
    offsets.addAll(ins.getOffsets());
  }
  for (  AVM2Instruction ins : code) {
    if (ins.replaceWith != null) {
      for (      Object o : ins.replaceWith) {
        if (o instanceof ControlFlowTag) {
          ControlFlowTag cft=(ControlFlowTag)o;
          if (cft.name.equals(""String_Node_Str"")) {
            offsets.add((long)pos2adr(cft.value));
          }
        }
      }
    }
  }
  long ofs=0;
  int ip=0;
  int largeLimit=20000;
  boolean markOffsets=code.size() <= largeLimit;
  for (  AVM2Instruction ins : code) {
    if (hex) {
      ret.append(""String_Node_Str"");
      ret.append(Helper.bytesToHexString(ins.getBytes()));
      ret.append(""String_Node_Str"");
    }
    if (ins.labelname != null) {
      ret.append(ins.labelname + ""String_Node_Str"");
    }
 else     if (offsets.contains(ofs)) {
      ret.append(""String_Node_Str"" + Helper.formatAddress(ofs) + ""String_Node_Str"");
    }
    for (int e=0; e < body.exceptions.length; e++) {
      if (body.exceptions[e].start == ofs) {
        ret.append(""String_Node_Str"" + e + ""String_Node_Str"");
      }
      if (body.exceptions[e].end == ofs) {
        ret.append(""String_Node_Str"" + e + ""String_Node_Str"");
      }
      if (body.exceptions[e].target == ofs) {
        ret.append(""String_Node_Str"" + e + ""String_Node_Str"");
      }
    }
    if (ins.replaceWith != null) {
      for (      Object o : ins.replaceWith) {
        if (o instanceof Integer) {
          AVM2Instruction ins2=code.get((Integer)o);
          if (ins2.isIgnored()) {
            continue;
          }
          t=Highlighting.hilighOffset(""String_Node_Str"",ins2.mappedOffset > -1 ? ins2.mappedOffset : ofs) + ins2.toStringNoAddress(constants,new ArrayList<String>()) + ""String_Node_Str""+ Helper.formatAddress(pos2adr((Integer)o))+ ""String_Node_Str"";
          ret.append(t);
          outputMap.add((Integer)o);
        }
 else         if (o instanceof ControlFlowTag) {
          ControlFlowTag cft=(ControlFlowTag)o;
          if (cft.name.equals(""String_Node_Str"")) {
            t=""String_Node_Str"" + Helper.formatAddress(pos2adr(cft.value)) + ""String_Node_Str"";
            ret.append(t);
            outputMap.add(-1);
          }
          if (cft.name.equals(""String_Node_Str"")) {
            ret.append(""String_Node_Str"" + Helper.formatAddress(pos2adr(cft.value)) + ""String_Node_Str"");
          }
        }
      }
    }
 else {
      if (!ins.isIgnored()) {
        int fixBranch=ins.getFixBranch();
        if (fixBranch > -1) {
          if (ins.definition instanceof IfTypeIns) {
            t=""String_Node_Str"";
            for (int i=0; i < -ins.definition.getStackDelta(ins,null); i++) {
              t+=new PopIns().instructionName + ""String_Node_Str"";
            }
            if (fixBranch == 0) {
              t+=new JumpIns().instructionName + ""String_Node_Str"" + Helper.formatAddress(ofs + ins.getBytes().length + ins.operands[0]);
            }
 else {
            }
          }
        }
 else {
          t=ins.toStringNoAddress(constants,new ArrayList<String>());
          if (ins.changeJumpTo > -1) {
            t=ins.definition.instructionName + ""String_Node_Str"" + Helper.formatAddress(pos2adr(ins.changeJumpTo));
          }
        }
        if (markOffsets) {
          t=Highlighting.hilighOffset(""String_Node_Str"",ins.mappedOffset > -1 ? ins.mappedOffset : ofs) + t + ""String_Node_Str"";
        }
 else {
          t=t + ""String_Node_Str"";
        }
        ret.append(t);
        outputMap.add(ip);
      }
    }
    ofs+=ins.getBytes().length;
    ip++;
  }
  String r=ret.toString();
  return r;
}",0.9849376323840904
62087,"@Override public String toString(List<Object> localData){
  if (!(getLeftMostItem(rightSide) instanceof NegAVM2Item)) {
    return super.toString(localData);
  }
  String ret=""String_Node_Str"";
  if (leftSide.getPrecedence() > precedence) {
    ret+=""String_Node_Str"" + leftSide.toString(localData) + ""String_Node_Str"";
  }
 else {
    ret+=leftSide.toString(localData);
  }
  ret+=hilight(operator);
  ret+=""String_Node_Str"" + rightSide.toString(localData) + ""String_Node_Str"";
  return ret;
}","@Override public String toString(List<Object> localData){
  if (rightSide.precedence >= precedence) {
    String ret=""String_Node_Str"";
    if (leftSide.precedence > precedence) {
      ret+=""String_Node_Str"" + leftSide.toString(localData) + ""String_Node_Str"";
    }
 else {
      ret+=leftSide.toString(localData);
    }
    ret+=""String_Node_Str"";
    ret+=hilight(operator);
    ret+=""String_Node_Str"";
    ret+=""String_Node_Str"" + rightSide.toString(localData) + ""String_Node_Str"";
    return ret;
  }
 else {
    return super.toString(localData);
  }
}",0.2169362511893434
62088,"@Override public String toString(List<Object> localData){
  if (rightSide instanceof DirectValueActionItem) {
    return super.toString(localData);
  }
  String ret=""String_Node_Str"";
  if (leftSide.getPrecedence() > precedence) {
    ret+=""String_Node_Str"" + leftSide.toString(localData) + ""String_Node_Str"";
  }
 else {
    ret+=leftSide.toString(localData);
  }
  ret+=hilight(operator);
  ret+=""String_Node_Str"" + rightSide.toString(localData) + ""String_Node_Str"";
  return ret;
}","@Override public String toString(List<Object> localData){
  if (rightSide.precedence >= precedence) {
    String ret=""String_Node_Str"";
    if (leftSide.precedence > precedence) {
      ret+=""String_Node_Str"" + leftSide.toString(localData) + ""String_Node_Str"";
    }
 else {
      ret+=leftSide.toString(localData);
    }
    ret+=""String_Node_Str"";
    ret+=hilight(operator);
    ret+=""String_Node_Str"";
    ret+=""String_Node_Str"" + rightSide.toString(localData) + ""String_Node_Str"";
    return ret;
  }
 else {
    return super.toString(localData);
  }
}",0.2363112391930835
62089,"@Override public String toString(List<Object> localData){
  String ret=""String_Node_Str"";
  if (leftSide.getPrecedence() > precedence) {
    ret+=""String_Node_Str"" + leftSide.toString(localData) + ""String_Node_Str"";
  }
 else {
    ret+=leftSide.toString(localData);
  }
  ret+=hilight(operator);
  if (rightSide.getPrecedence() > precedence) {
    ret+=""String_Node_Str"" + rightSide.toString(localData) + ""String_Node_Str"";
  }
 else {
    ret+=rightSide.toString(localData);
  }
  return ret;
}","@Override public String toString(List<Object> localData){
  String ret=""String_Node_Str"";
  if (leftSide.getPrecedence() > precedence) {
    ret+=""String_Node_Str"" + leftSide.toString(localData) + ""String_Node_Str"";
  }
 else {
    ret+=leftSide.toString(localData);
  }
  ret+=""String_Node_Str"";
  ret+=hilight(operator);
  ret+=""String_Node_Str"";
  if (rightSide.getPrecedence() > precedence) {
    ret+=""String_Node_Str"" + rightSide.toString(localData) + ""String_Node_Str"";
  }
 else {
    ret+=rightSide.toString(localData);
  }
  return ret;
}",0.950191570881226
62090,"private int renameAS2Identifiers(RenameType renameType,Map<String,String> selected){
  actionsMap=new HashMap<>();
  allFunctions=new ArrayList<>();
  allVariableNames=new ArrayList<>();
  allStrings=new HashMap<>();
  List<Object> objs=new ArrayList<>();
  int ret=0;
  objs.addAll(tags);
  getVariables(objs,""String_Node_Str"");
  informListeners(""String_Node_Str"",""String_Node_Str"");
  int fc=0;
  for (  MyEntry<DirectValueActionItem,ConstantPool> it : allVariableNames) {
    String name=it.key.toStringNoH(it.value);
    allVariableNamesStr.add(name);
  }
  informListeners(""String_Node_Str"",""String_Node_Str"");
  int classCount=0;
  for (  Tag t : tags) {
    if (t instanceof DoInitActionTag) {
      classCount++;
    }
  }
  int cnt=0;
  for (  Tag t : tags) {
    if (t instanceof DoInitActionTag) {
      cnt++;
      informListeners(""String_Node_Str"",""String_Node_Str"" + cnt + ""String_Node_Str""+ classCount);
      DoInitActionTag dia=(DoInitActionTag)t;
      String exportName=dia.getExportName();
      final String pkgPrefix=""String_Node_Str"";
      String classNameParts[]=null;
      if ((exportName != null) && exportName.startsWith(pkgPrefix)) {
        String className=exportName.substring(pkgPrefix.length());
        if (className.contains(""String_Node_Str"")) {
          classNameParts=className.split(""String_Node_Str"");
        }
 else {
          classNameParts=new String[]{className};
        }
      }
      int staticOperation=(Boolean)Configuration.getConfig(""String_Node_Str"",true) ? Graph.SOP_SKIP_STATIC : Graph.SOP_USE_STATIC;
      List<GraphTargetItem> dec=Action.actionsToTree(dia.getActions(version),version,staticOperation,""String_Node_Str"");
      GraphTargetItem name=null;
      for (      GraphTargetItem it : dec) {
        if (it instanceof ClassActionItem) {
          ClassActionItem cti=(ClassActionItem)it;
          List<GraphTargetItem> methods=new ArrayList<>();
          methods.addAll(cti.functions);
          methods.addAll(cti.staticFunctions);
          for (          GraphTargetItem gti : methods) {
            if (gti instanceof FunctionActionItem) {
              FunctionActionItem fun=(FunctionActionItem)gti;
              if (fun.calculatedFunctionName instanceof DirectValueActionItem) {
                DirectValueActionItem dvf=(DirectValueActionItem)fun.calculatedFunctionName;
                String fname=dvf.toStringNoH(null);
                String changed=deobfuscateName(fname,false,""String_Node_Str"",renameType,selected);
                if (changed != null) {
                  deobfuscated.put(fname,changed);
                }
              }
            }
          }
          List<GraphTargetItem> vars=new ArrayList<>();
          for (          MyEntry<GraphTargetItem,GraphTargetItem> item : cti.vars) {
            vars.add(item.key);
          }
          for (          MyEntry<GraphTargetItem,GraphTargetItem> item : cti.staticVars) {
            vars.add(item.key);
          }
          for (          GraphTargetItem gti : vars) {
            if (gti instanceof DirectValueActionItem) {
              DirectValueActionItem dvf=(DirectValueActionItem)gti;
              String vname=dvf.toStringNoH(null);
              String changed=deobfuscateName(vname,false,""String_Node_Str"",renameType,selected);
              if (changed != null) {
                deobfuscated.put(vname,changed);
              }
            }
          }
          name=cti.className;
          break;
        }
        if (it instanceof InterfaceActionItem) {
          InterfaceActionItem ift=(InterfaceActionItem)it;
          name=ift.name;
        }
      }
      if (name != null) {
        int pos=0;
        while (name instanceof GetMemberActionItem) {
          GetMemberActionItem mem=(GetMemberActionItem)name;
          GraphTargetItem memberName=mem.memberName;
          if (memberName instanceof DirectValueActionItem) {
            DirectValueActionItem dvt=(DirectValueActionItem)memberName;
            String nameStr=dvt.toStringNoH(null);
            if (classNameParts != null) {
              if (classNameParts.length - 1 - pos < 0) {
                break;
              }
            }
            String changedNameStr=nameStr;
            if (classNameParts != null) {
              changedNameStr=classNameParts[classNameParts.length - 1 - pos];
            }
            String changedNameStr2=deobfuscateName(changedNameStr,pos == 0,pos == 0 ? ""String_Node_Str"" : ""String_Node_Str"",renameType,selected);
            if (changedNameStr2 != null) {
              changedNameStr=changedNameStr2;
            }
            ret++;
            deobfuscated.put(nameStr,changedNameStr);
            pos++;
          }
          name=mem.object;
        }
        if (name instanceof GetVariableActionItem) {
          GetVariableActionItem var=(GetVariableActionItem)name;
          if (var.name instanceof DirectValueActionItem) {
            DirectValueActionItem dvt=(DirectValueActionItem)var.name;
            String nameStr=dvt.toStringNoH(null);
            if (classNameParts != null) {
              if (classNameParts.length - 1 - pos < 0) {
                break;
              }
            }
            String changedNameStr=nameStr;
            if (classNameParts != null) {
              changedNameStr=classNameParts[classNameParts.length - 1 - pos];
            }
            String changedNameStr2=deobfuscateName(changedNameStr,pos == 0,pos == 0 ? ""String_Node_Str"" : ""String_Node_Str"",renameType,selected);
            if (changedNameStr2 != null) {
              changedNameStr=changedNameStr2;
            }
            ret++;
            deobfuscated.put(nameStr,changedNameStr);
            pos++;
          }
        }
      }
    }
  }
  for (  GraphSourceItem fun : allFunctions) {
    fc++;
    informListeners(""String_Node_Str"",""String_Node_Str"" + fc + ""String_Node_Str""+ allFunctions.size());
    if (fun instanceof ActionDefineFunction) {
      ActionDefineFunction f=(ActionDefineFunction)fun;
      if (f.functionName.equals(""String_Node_Str"")) {
        continue;
      }
      String changed=deobfuscateName(f.functionName,false,""String_Node_Str"",renameType,selected);
      if (changed != null) {
        f.replacedFunctionName=changed;
        ret++;
      }
    }
    if (fun instanceof ActionDefineFunction2) {
      ActionDefineFunction2 f=(ActionDefineFunction2)fun;
      if (f.functionName.equals(""String_Node_Str"")) {
        continue;
      }
      String changed=deobfuscateName(f.functionName,false,""String_Node_Str"",renameType,selected);
      if (changed != null) {
        f.replacedFunctionName=changed;
        ret++;
      }
    }
  }
  HashSet<String> stringsNoVarH=new HashSet<>();
  List<DirectValueActionItem> allVariableNamesDv=new ArrayList<>();
  for (  MyEntry<DirectValueActionItem,ConstantPool> it : allVariableNames) {
    allVariableNamesDv.add(it.key);
  }
  for (  DirectValueActionItem ti : allStrings.keySet()) {
    if (!allVariableNamesDv.contains(ti)) {
      stringsNoVarH.add(System.identityHashCode(allStrings.get(ti)) + ""String_Node_Str"" + ti.toStringNoH(allStrings.get(ti)));
    }
  }
  int vc=0;
  for (  MyEntry<DirectValueActionItem,ConstantPool> it : allVariableNames) {
    vc++;
    String name=it.key.toStringNoH(it.value);
    String changed=deobfuscateName(name,false,usageTypes.get(it.key),renameType,selected);
    if (changed != null) {
      boolean addNew=false;
      String h=System.identityHashCode(it.key) + ""String_Node_Str"" + name;
      if (stringsNoVarH.contains(h)) {
        addNew=true;
      }
      ActionPush pu=(ActionPush)it.key.src;
      if (pu.replacement == null) {
        pu.replacement=new ArrayList<>();
        pu.replacement.addAll(pu.values);
      }
      if (pu.replacement.get(it.key.pos) instanceof ConstantIndex) {
        ConstantIndex ci=(ConstantIndex)pu.replacement.get(it.key.pos);
        ConstantPool pool=it.value;
        if (pool == null) {
          continue;
        }
        if (pool.constants == null) {
          continue;
        }
        if (addNew) {
          pool.constants.add(changed);
          ci.index=pool.constants.size() - 1;
        }
 else {
          pool.constants.set(ci.index,changed);
        }
      }
 else {
        pu.replacement.set(it.key.pos,changed);
      }
      ret++;
    }
  }
  for (  ASMSource src : actionsMap.keySet()) {
    actionsMap.put(src,Action.removeNops(0,actionsMap.get(src),version,0,""String_Node_Str""));
    src.setActions(actionsMap.get(src),version);
  }
  deobfuscateInstanceNames(renameType,tags,selected);
  return ret;
}","private int renameAS2Identifiers(RenameType renameType,Map<String,String> selected){
  actionsMap=new HashMap<>();
  allFunctions=new ArrayList<>();
  allVariableNames=new ArrayList<>();
  allStrings=new HashMap<>();
  List<Object> objs=new ArrayList<>();
  int ret=0;
  objs.addAll(tags);
  getVariables(objs,""String_Node_Str"");
  informListeners(""String_Node_Str"",""String_Node_Str"");
  int fc=0;
  for (  MyEntry<DirectValueActionItem,ConstantPool> it : allVariableNames) {
    String name=it.key.toStringNoH(it.value);
    allVariableNamesStr.add(name);
  }
  informListeners(""String_Node_Str"",""String_Node_Str"");
  int classCount=0;
  for (  Tag t : tags) {
    if (t instanceof DoInitActionTag) {
      classCount++;
    }
  }
  int cnt=0;
  for (  Tag t : tags) {
    if (t instanceof DoInitActionTag) {
      cnt++;
      informListeners(""String_Node_Str"",""String_Node_Str"" + cnt + ""String_Node_Str""+ classCount);
      DoInitActionTag dia=(DoInitActionTag)t;
      String exportName=dia.getExportName();
      final String pkgPrefix=""String_Node_Str"";
      String classNameParts[]=null;
      if ((exportName != null) && exportName.startsWith(pkgPrefix)) {
        String className=exportName.substring(pkgPrefix.length());
        if (className.contains(""String_Node_Str"")) {
          classNameParts=className.split(""String_Node_Str"");
        }
 else {
          classNameParts=new String[]{className};
        }
      }
      int staticOperation=Graph.SOP_USE_STATIC;
      List<GraphTargetItem> dec=Action.actionsToTree(dia.getActions(version),version,staticOperation,""String_Node_Str"");
      GraphTargetItem name=null;
      for (      GraphTargetItem it : dec) {
        if (it instanceof ClassActionItem) {
          ClassActionItem cti=(ClassActionItem)it;
          List<GraphTargetItem> methods=new ArrayList<>();
          methods.addAll(cti.functions);
          methods.addAll(cti.staticFunctions);
          for (          GraphTargetItem gti : methods) {
            if (gti instanceof FunctionActionItem) {
              FunctionActionItem fun=(FunctionActionItem)gti;
              if (fun.calculatedFunctionName instanceof DirectValueActionItem) {
                DirectValueActionItem dvf=(DirectValueActionItem)fun.calculatedFunctionName;
                String fname=dvf.toStringNoH(null);
                String changed=deobfuscateName(fname,false,""String_Node_Str"",renameType,selected);
                if (changed != null) {
                  deobfuscated.put(fname,changed);
                }
              }
            }
          }
          List<GraphTargetItem> vars=new ArrayList<>();
          for (          MyEntry<GraphTargetItem,GraphTargetItem> item : cti.vars) {
            vars.add(item.key);
          }
          for (          MyEntry<GraphTargetItem,GraphTargetItem> item : cti.staticVars) {
            vars.add(item.key);
          }
          for (          GraphTargetItem gti : vars) {
            if (gti instanceof DirectValueActionItem) {
              DirectValueActionItem dvf=(DirectValueActionItem)gti;
              String vname=dvf.toStringNoH(null);
              String changed=deobfuscateName(vname,false,""String_Node_Str"",renameType,selected);
              if (changed != null) {
                deobfuscated.put(vname,changed);
              }
            }
          }
          name=cti.className;
          break;
        }
        if (it instanceof InterfaceActionItem) {
          InterfaceActionItem ift=(InterfaceActionItem)it;
          name=ift.name;
        }
      }
      if (name != null) {
        int pos=0;
        while (name instanceof GetMemberActionItem) {
          GetMemberActionItem mem=(GetMemberActionItem)name;
          GraphTargetItem memberName=mem.memberName;
          if (memberName instanceof DirectValueActionItem) {
            DirectValueActionItem dvt=(DirectValueActionItem)memberName;
            String nameStr=dvt.toStringNoH(null);
            if (classNameParts != null) {
              if (classNameParts.length - 1 - pos < 0) {
                break;
              }
            }
            String changedNameStr=nameStr;
            if (classNameParts != null) {
              changedNameStr=classNameParts[classNameParts.length - 1 - pos];
            }
            String changedNameStr2=deobfuscateName(changedNameStr,pos == 0,pos == 0 ? ""String_Node_Str"" : ""String_Node_Str"",renameType,selected);
            if (changedNameStr2 != null) {
              changedNameStr=changedNameStr2;
            }
            ret++;
            deobfuscated.put(nameStr,changedNameStr);
            pos++;
          }
          name=mem.object;
        }
        if (name instanceof GetVariableActionItem) {
          GetVariableActionItem var=(GetVariableActionItem)name;
          if (var.name instanceof DirectValueActionItem) {
            DirectValueActionItem dvt=(DirectValueActionItem)var.name;
            String nameStr=dvt.toStringNoH(null);
            if (classNameParts != null) {
              if (classNameParts.length - 1 - pos < 0) {
                break;
              }
            }
            String changedNameStr=nameStr;
            if (classNameParts != null) {
              changedNameStr=classNameParts[classNameParts.length - 1 - pos];
            }
            String changedNameStr2=deobfuscateName(changedNameStr,pos == 0,pos == 0 ? ""String_Node_Str"" : ""String_Node_Str"",renameType,selected);
            if (changedNameStr2 != null) {
              changedNameStr=changedNameStr2;
            }
            ret++;
            deobfuscated.put(nameStr,changedNameStr);
            pos++;
          }
        }
      }
    }
  }
  for (  GraphSourceItem fun : allFunctions) {
    fc++;
    informListeners(""String_Node_Str"",""String_Node_Str"" + fc + ""String_Node_Str""+ allFunctions.size());
    if (fun instanceof ActionDefineFunction) {
      ActionDefineFunction f=(ActionDefineFunction)fun;
      if (f.functionName.equals(""String_Node_Str"")) {
        continue;
      }
      String changed=deobfuscateName(f.functionName,false,""String_Node_Str"",renameType,selected);
      if (changed != null) {
        f.replacedFunctionName=changed;
        ret++;
      }
    }
    if (fun instanceof ActionDefineFunction2) {
      ActionDefineFunction2 f=(ActionDefineFunction2)fun;
      if (f.functionName.equals(""String_Node_Str"")) {
        continue;
      }
      String changed=deobfuscateName(f.functionName,false,""String_Node_Str"",renameType,selected);
      if (changed != null) {
        f.replacedFunctionName=changed;
        ret++;
      }
    }
  }
  HashSet<String> stringsNoVarH=new HashSet<>();
  List<DirectValueActionItem> allVariableNamesDv=new ArrayList<>();
  for (  MyEntry<DirectValueActionItem,ConstantPool> it : allVariableNames) {
    allVariableNamesDv.add(it.key);
  }
  for (  DirectValueActionItem ti : allStrings.keySet()) {
    if (!allVariableNamesDv.contains(ti)) {
      stringsNoVarH.add(System.identityHashCode(allStrings.get(ti)) + ""String_Node_Str"" + ti.toStringNoH(allStrings.get(ti)));
    }
  }
  int vc=0;
  for (  MyEntry<DirectValueActionItem,ConstantPool> it : allVariableNames) {
    vc++;
    String name=it.key.toStringNoH(it.value);
    String changed=deobfuscateName(name,false,usageTypes.get(it.key),renameType,selected);
    if (changed != null) {
      boolean addNew=false;
      String h=System.identityHashCode(it.key) + ""String_Node_Str"" + name;
      if (stringsNoVarH.contains(h)) {
        addNew=true;
      }
      ActionPush pu=(ActionPush)it.key.src;
      if (pu.replacement == null) {
        pu.replacement=new ArrayList<>();
        pu.replacement.addAll(pu.values);
      }
      if (pu.replacement.get(it.key.pos) instanceof ConstantIndex) {
        ConstantIndex ci=(ConstantIndex)pu.replacement.get(it.key.pos);
        ConstantPool pool=it.value;
        if (pool == null) {
          continue;
        }
        if (pool.constants == null) {
          continue;
        }
        if (addNew) {
          pool.constants.add(changed);
          ci.index=pool.constants.size() - 1;
        }
 else {
          pool.constants.set(ci.index,changed);
        }
      }
 else {
        pu.replacement.set(it.key.pos,changed);
      }
      ret++;
    }
  }
  for (  ASMSource src : actionsMap.keySet()) {
    actionsMap.put(src,Action.removeNops(0,actionsMap.get(src),version,0,""String_Node_Str""));
    src.setActions(actionsMap.get(src),version);
  }
  deobfuscateInstanceNames(renameType,tags,selected);
  return ret;
}",0.9948083765968616
62091,"@SuppressWarnings(""String_Node_Str"") private static boolean readActionListAtPos(List<DisassemblyListener> listeners,List<GraphTargetItem> output,HashMap<Long,List<GraphSourceItemContainer>> containers,long address,long containerSWFOffset,boolean notCompileTime,boolean enableVariables,List<Object> localData,Stack<GraphTargetItem> stack,ConstantPool cpool,SWFInputStream sis,ReReadableInputStream rri,int ip,List<Action> ret,int startIp,int endip,String path) throws IOException {
  boolean debugMode=false;
  boolean decideBranch=false;
  boolean deobfuscate=(Boolean)Configuration.getConfig(""String_Node_Str"",true);
  boolean retv=false;
  rri.setPos(ip);
  Action a;
  long filePos=rri.getPos();
  Scanner sc=new Scanner(System.in,""String_Node_Str"");
  int prevIp=ip;
  while (((endip == -1) || (endip > ip)) && (a=sis.readAction(rri)) != null) {
    for (int i=0; i < listeners.size(); i++) {
      listeners.get(i).progress(""String_Node_Str"",rri.getCount(),rri.length());
    }
    if ((ip < ret.size()) && (!(ret.get(ip) instanceof ActionNop))) {
      a=ret.get(ip);
      if (a.getAddress() != ip) {
        Logger.getLogger(SWFInputStream.class.getName()).log(Level.SEVERE,""String_Node_Str"" + ip + ""String_Node_Str""+ a.getASMSource(new ArrayList<GraphSourceItem>(),new ArrayList<Long>(),new ArrayList<String>(),SWF.DEFAULT_VERSION,false));
      }
    }
    a.containerSWFOffset=containerSWFOffset;
    a.setAddress(prevIp,SWF.DEFAULT_VERSION,false);
    int info=a.actionLength + 1 + ((a.actionCode > 0x80) ? 2 : 0);
    byte b[]=a.getBytes(sis.version);
    int infoCorrect=info;
    if ((!(a instanceof ActionStore)) && (!(a instanceof GraphSourceItemContainer))) {
      int change=info - (rri.getPos() - ip);
      if (change > 0) {
        a.afterInsert=new ActionJump(change);
      }
    }
 else {
      info=rri.getPos() - ip;
    }
    if (ip < startIp) {
      retv=true;
    }
    if (a instanceof ActionPush) {
      if (cpool != null) {
        ((ActionPush)a).constantPool=cpool.constants;
        cpool.count++;
      }
    }
    if (a instanceof ActionDefineFunction) {
      if (cpool != null) {
        cpool.count++;
      }
    }
    if (a instanceof ActionDefineFunction2) {
      if (cpool != null) {
        cpool.count++;
      }
    }
    if (debugMode) {
      String atos=a.getASMSource(new ArrayList<GraphSourceItem>(),new ArrayList<Long>(),cpool.constants,sis.version,false);
      if (a instanceof GraphSourceItemContainer) {
        atos=a.toString();
      }
      System.err.println(""String_Node_Str"" + (ip - startIp) + ""String_Node_Str""+ Helper.formatAddress(ip - startIp)+ ""String_Node_Str""+ ""String_Node_Str""+ a.actionLength+ ""String_Node_Str""+ atos+ (a.isIgnored() ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ Helper.stackToString(stack,Helper.toList(cpool))+ ""String_Node_Str""+ Helper.byteArrToString(a.getBytes(SWF.DEFAULT_VERSION)));
      @SuppressWarnings(""String_Node_Str"") HashMap<String,GraphTargetItem> vars=(HashMap<String,GraphTargetItem>)localData.get(1);
      System.err.print(""String_Node_Str"");
      for (      Entry<String,GraphTargetItem> v : vars.entrySet()) {
        System.err.print(""String_Node_Str"" + v + ""String_Node_Str""+ Highlighting.stripHilights(v.getValue().toString(cpool))+ ""String_Node_Str"");
      }
      System.err.println();
      String add=""String_Node_Str"";
      if (a instanceof ActionIf) {
        add=""String_Node_Str"" + ((ActionIf)a).getJumpOffset();
      }
      if (a instanceof ActionJump) {
        add=""String_Node_Str"" + ((ActionJump)a).getJumpOffset();
      }
      System.err.println(add);
    }
    long newFilePos=rri.getPos();
    long actionLen=newFilePos - filePos;
    ensureCapacity(ret,ip);
    int newip=-1;
    if (!enableVariables && (!(ret.get(ip) instanceof ActionNop))) {
      break;
    }
    if (a instanceof ActionConstantPool) {
      if (cpool == null) {
        cpool=new ConstantPool();
      }
      cpool.setNew(((ActionConstantPool)a).constantPool);
    }
    ActionIf aif=null;
    boolean goaif=false;
    if (!a.isIgnored()) {
      try {
        if (a instanceof ActionIf) {
          aif=(ActionIf)a;
          GraphTargetItem top=null;
          if (deobfuscate) {
            top=stack.pop();
          }
          int nip=rri.getPos() + aif.getJumpOffset();
          if (decideBranch) {
            System.out.print(""String_Node_Str"" + nip + ""String_Node_Str"");
            System.out.print(""String_Node_Str"");
            String next=sc.next();
            if (next.equals(""String_Node_Str"")) {
              newip=rri.getPos() + aif.getJumpOffset();
              rri.setPos(newip);
            }
 else             if (next.equals(""String_Node_Str"")) {
            }
 else             if (next.equals(""String_Node_Str"")) {
              goaif=true;
            }
          }
 else           if (deobfuscate && top.isCompileTime() && (!top.hasSideEffect())&& ((!top.isVariableComputed()) || (top.isVariableComputed() && enableVariables && (!notCompileTime)))) {
            if (enableVariables) {
              ((ActionIf)a).compileTime=true;
            }
            if (debugMode) {
              System.err.print(""String_Node_Str"");
            }
            if (EcmaScript.toBoolean(top.getResult())) {
              newip=rri.getPos() + aif.getJumpOffset();
              if (((!enableVariables) || (!top.isVariableComputed())) && (!aif.ignoreUsed)) {
                a=new ActionJump(aif.getJumpOffset());
                a.setAddress(aif.getAddress(),SWF.DEFAULT_VERSION);
              }
              aif.jumpUsed=true;
              if (aif.ignoreUsed) {
                aif.compileTime=false;
              }
              if (debugMode) {
                System.err.println(""String_Node_Str"");
              }
            }
 else {
              aif.ignoreUsed=true;
              if (aif.jumpUsed) {
                aif.compileTime=false;
              }
              if (debugMode) {
                System.err.println(""String_Node_Str"");
              }
              if (((!enableVariables) || (!top.isVariableComputed())) && (!aif.jumpUsed)) {
                aif.setIgnored(true,0);
              }
            }
            if (((!enableVariables) || (!top.isVariableComputed())) && (!(aif.jumpUsed && aif.ignoreUsed))) {
              List<GraphSourceItemPos> needed=top.getNeededSources();
              for (              GraphSourceItemPos ig : needed) {
                if (ig.item == null) {
                  continue;
                }
                if (ig.item instanceof ActionPush) {
                  if (!((ActionPush)ig.item).ignoredParts.contains(ig.pos)) {
                    ((ActionPush)ig.item).ignoredParts.add(ig.pos);
                    if (((ActionPush)ig.item).ignoredParts.size() == ((ActionPush)ig.item).values.size()) {
                      ((Action)ig.item).setIgnored(true,0);
                    }
                  }
                }
 else {
                  ((Action)ig.item).setIgnored(true,0);
                }
              }
            }
          }
 else {
            if (debugMode) {
              System.err.println(""String_Node_Str"");
            }
            goaif=true;
          }
        }
 else         if (a instanceof ActionJump) {
          newip=rri.getPos() + ((ActionJump)a).getJumpOffset();
        }
 else         if (!(a instanceof GraphSourceItemContainer)) {
          if (deobfuscate) {
            if (((a instanceof ActionEquals) || (a instanceof ActionEquals2)) && (stack.size() == 1) && (stack.peek() instanceof DirectValueActionItem)) {
              stack.push(new DirectValueActionItem(null,0,new Null(),new ArrayList<String>()));
            }
            if ((a instanceof ActionStoreRegister) && stack.isEmpty()) {
              stack.push(new DirectValueActionItem(null,0,new Null(),new ArrayList<String>()));
            }
            a.translate(localData,stack,output,Graph.SOP_SKIP_STATIC,path);
          }
        }
      }
 catch (      RuntimeException ex) {
        if (!enableVariables) {
          throw ex;
        }
        log.log(Level.SEVERE,""String_Node_Str"",ex);
        break;
      }
    }
    int nopos=-1;
    for (int i=0; i < actionLen; i++) {
      ensureCapacity(ret,ip + i);
      if (a instanceof ActionNop) {
        int prevPos=(int)a.getAddress();
        a=new ActionNop();
        a.setAddress(prevPos,SWF.DEFAULT_VERSION);
        nopos++;
        if (nopos > 0) {
          a.setAddress(a.getAddress() + 1,SWF.DEFAULT_VERSION);
        }
      }
      ret.set(ip + i,a);
    }
    if (a instanceof GraphSourceItemContainer) {
      GraphSourceItemContainer cnt=(GraphSourceItemContainer)a;
      if (a instanceof Action) {
        long endAddr=a.getAddress() + cnt.getHeaderSize();
        String cntName=cnt.getName();
        List<List<GraphTargetItem>> output2s=new ArrayList<>();
        for (        long size : cnt.getContainerSizes()) {
          if (size == 0) {
            output2s.add(new ArrayList<GraphTargetItem>());
            continue;
          }
          List<Object> localData2=Helper.toList(new HashMap<Integer,String>(),new HashMap<String,GraphTargetItem>(),new HashMap<String,GraphTargetItem>());
          List<GraphTargetItem> output2=new ArrayList<>();
          readActionListAtPos(listeners,output2,containers,address,containerSWFOffset,notCompileTime,enableVariables,localData2,new Stack<GraphTargetItem>(),cpool,sis,rri,(int)endAddr,ret,startIp,(int)(endAddr + size),path + (cntName == null ? ""String_Node_Str"" : ""String_Node_Str"" + cntName));
          output2s.add(output2);
          endAddr+=size;
        }
        if (deobfuscate) {
          cnt.translateContainer(output2s,stack,output,(HashMap<Integer,String>)localData.get(0),(HashMap<String,GraphTargetItem>)localData.get(1),(HashMap<String,GraphTargetItem>)localData.get(2));
        }
        ip=(int)endAddr;
        prevIp=ip;
        rri.setPos(ip);
        filePos=rri.getPos();
        continue;
      }
    }
    if (a instanceof ActionEnd) {
      break;
    }
    if (newip > -1) {
      ip=newip;
    }
 else {
      ip=ip + info;
    }
    rri.setPos(ip);
    filePos=rri.getPos();
    if (goaif) {
      if (aif.ignoreUsed && aif.jumpUsed) {
        break;
      }
      aif.ignoreUsed=true;
      aif.jumpUsed=true;
      int oldPos=rri.getPos();
      @SuppressWarnings(""String_Node_Str"") Stack<GraphTargetItem> substack=(Stack<GraphTargetItem>)stack.clone();
      if (readActionListAtPos(listeners,output,containers,address,containerSWFOffset,true,enableVariables,localData,substack,cpool,sis,rri,rri.getPos() + aif.getJumpOffset(),ret,startIp,endip,path)) {
        retv=true;
      }
      rri.setPos(oldPos);
      notCompileTime=true;
    }
    prevIp=ip;
    if (a.isExit()) {
      break;
    }
  }
  for (  DisassemblyListener listener : listeners) {
    listener.progress(""String_Node_Str"",rri.getCount(),rri.length());
  }
  return retv;
}","@SuppressWarnings(""String_Node_Str"") private static boolean readActionListAtPos(List<DisassemblyListener> listeners,List<GraphTargetItem> output,HashMap<Long,List<GraphSourceItemContainer>> containers,long address,long containerSWFOffset,boolean notCompileTime,boolean enableVariables,List<Object> localData,Stack<GraphTargetItem> stack,ConstantPool cpool,SWFInputStream sis,ReReadableInputStream rri,int ip,List<Action> ret,int startIp,int endip,String path) throws IOException {
  boolean debugMode=false;
  boolean decideBranch=false;
  boolean deobfuscate=(Boolean)Configuration.getConfig(""String_Node_Str"",true);
  boolean retv=false;
  rri.setPos(ip);
  Action a;
  long filePos=rri.getPos();
  Scanner sc=new Scanner(System.in,""String_Node_Str"");
  int prevIp=ip;
  while (((endip == -1) || (endip > ip)) && (a=sis.readAction(rri)) != null) {
    for (int i=0; i < listeners.size(); i++) {
      listeners.get(i).progress(""String_Node_Str"",rri.getCount(),rri.length());
    }
    if ((ip < ret.size()) && (!(ret.get(ip) instanceof ActionNop))) {
      a=ret.get(ip);
      if (a.getAddress() != ip) {
        Logger.getLogger(SWFInputStream.class.getName()).log(Level.SEVERE,""String_Node_Str"" + ip + ""String_Node_Str""+ a.getASMSource(new ArrayList<GraphSourceItem>(),new ArrayList<Long>(),new ArrayList<String>(),SWF.DEFAULT_VERSION,false));
      }
    }
    a.containerSWFOffset=containerSWFOffset;
    a.setAddress(prevIp,SWF.DEFAULT_VERSION,false);
    int info=a.actionLength + 1 + ((a.actionCode > 0x80) ? 2 : 0);
    byte b[]=a.getBytes(sis.version);
    int infoCorrect=info;
    if ((!(a instanceof ActionStore)) && (!(a instanceof GraphSourceItemContainer))) {
      int change=info - (rri.getPos() - ip);
      if (change > 0) {
        a.afterInsert=new ActionJump(change);
      }
    }
 else {
      info=rri.getPos() - ip;
    }
    if (ip < startIp) {
      retv=true;
    }
    if (a instanceof ActionPush) {
      if (cpool != null) {
        ((ActionPush)a).constantPool=cpool.constants;
        cpool.count++;
      }
    }
    if (a instanceof ActionDefineFunction) {
      if (cpool != null) {
        cpool.count++;
      }
    }
    if (a instanceof ActionDefineFunction2) {
      if (cpool != null) {
        cpool.count++;
      }
    }
    if (debugMode) {
      String atos=a.getASMSource(new ArrayList<GraphSourceItem>(),new ArrayList<Long>(),cpool.constants,sis.version,false);
      if (a instanceof GraphSourceItemContainer) {
        atos=a.toString();
      }
      System.err.println(""String_Node_Str"" + (ip - startIp) + ""String_Node_Str""+ Helper.formatAddress(ip - startIp)+ ""String_Node_Str""+ ""String_Node_Str""+ a.actionLength+ ""String_Node_Str""+ atos+ (a.isIgnored() ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ Helper.stackToString(stack,Helper.toList(cpool))+ ""String_Node_Str""+ Helper.byteArrToString(a.getBytes(SWF.DEFAULT_VERSION)));
      @SuppressWarnings(""String_Node_Str"") HashMap<String,GraphTargetItem> vars=(HashMap<String,GraphTargetItem>)localData.get(1);
      System.err.print(""String_Node_Str"");
      for (      Entry<String,GraphTargetItem> v : vars.entrySet()) {
        System.err.print(""String_Node_Str"" + v + ""String_Node_Str""+ Highlighting.stripHilights(v.getValue().toString(cpool))+ ""String_Node_Str"");
      }
      System.err.println();
      String add=""String_Node_Str"";
      if (a instanceof ActionIf) {
        add=""String_Node_Str"" + ((ActionIf)a).getJumpOffset();
      }
      if (a instanceof ActionJump) {
        add=""String_Node_Str"" + ((ActionJump)a).getJumpOffset();
      }
      System.err.println(add);
    }
    long newFilePos=rri.getPos();
    long actionLen=newFilePos - filePos;
    ensureCapacity(ret,ip);
    int newip=-1;
    if (!enableVariables && (!(ret.get(ip) instanceof ActionNop))) {
      break;
    }
    if (a instanceof ActionConstantPool) {
      if (cpool == null) {
        cpool=new ConstantPool();
      }
      cpool.setNew(((ActionConstantPool)a).constantPool);
    }
    ActionIf aif=null;
    boolean goaif=false;
    if (!a.isIgnored()) {
      try {
        if (a instanceof ActionIf) {
          aif=(ActionIf)a;
          GraphTargetItem top=null;
          if (deobfuscate) {
            top=stack.pop();
          }
          int nip=rri.getPos() + aif.getJumpOffset();
          if (decideBranch) {
            System.out.print(""String_Node_Str"" + nip + ""String_Node_Str"");
            System.out.print(""String_Node_Str"");
            String next=sc.next();
            if (next.equals(""String_Node_Str"")) {
              newip=rri.getPos() + aif.getJumpOffset();
              rri.setPos(newip);
            }
 else             if (next.equals(""String_Node_Str"")) {
            }
 else             if (next.equals(""String_Node_Str"")) {
              goaif=true;
            }
          }
 else           if (deobfuscate && top.isCompileTime() && (!top.hasSideEffect())&& ((!top.isVariableComputed()) || (top.isVariableComputed() && enableVariables && (!notCompileTime)))) {
            if (enableVariables) {
              ((ActionIf)a).compileTime=true;
            }
            if (debugMode) {
              System.err.print(""String_Node_Str"");
            }
            if (EcmaScript.toBoolean(top.getResult())) {
              newip=rri.getPos() + aif.getJumpOffset();
              if (((!enableVariables) || (!top.isVariableComputed())) && (!aif.ignoreUsed)) {
                a=new ActionJump(aif.getJumpOffset());
                a.setAddress(aif.getAddress(),SWF.DEFAULT_VERSION);
              }
              aif.jumpUsed=true;
              if (aif.ignoreUsed) {
                aif.compileTime=false;
              }
              if (debugMode) {
                System.err.println(""String_Node_Str"");
              }
            }
 else {
              aif.ignoreUsed=true;
              if (aif.jumpUsed) {
                aif.compileTime=false;
              }
              if (debugMode) {
                System.err.println(""String_Node_Str"");
              }
              if (((!enableVariables) || (!top.isVariableComputed())) && (!aif.jumpUsed)) {
                aif.setIgnored(true,0);
              }
            }
            if (((!enableVariables) || (!top.isVariableComputed())) && (!(aif.jumpUsed && aif.ignoreUsed))) {
              List<GraphSourceItemPos> needed=top.getNeededSources();
              for (              GraphSourceItemPos ig : needed) {
                if (ig.item == null) {
                  continue;
                }
                if (ig.item instanceof ActionPush) {
                  if (!((ActionPush)ig.item).ignoredParts.contains(ig.pos)) {
                    ((ActionPush)ig.item).ignoredParts.add(ig.pos);
                    if (((ActionPush)ig.item).ignoredParts.size() == ((ActionPush)ig.item).values.size()) {
                      ((Action)ig.item).setIgnored(true,0);
                    }
                  }
                }
 else {
                  ((Action)ig.item).setIgnored(true,0);
                }
              }
            }
          }
 else {
            if (debugMode) {
              System.err.println(""String_Node_Str"");
            }
            goaif=true;
          }
        }
 else         if (a instanceof ActionJump) {
          newip=rri.getPos() + ((ActionJump)a).getJumpOffset();
        }
 else         if (!(a instanceof GraphSourceItemContainer)) {
          if (deobfuscate) {
            if (((a instanceof ActionEquals) || (a instanceof ActionEquals2)) && (stack.size() == 1) && (stack.peek() instanceof DirectValueActionItem)) {
              stack.push(new DirectValueActionItem(null,0,new Null(),new ArrayList<String>()));
            }
            if ((a instanceof ActionStoreRegister) && stack.isEmpty()) {
              stack.push(new DirectValueActionItem(null,0,new Null(),new ArrayList<String>()));
            }
            a.translate(localData,stack,output,Graph.SOP_USE_STATIC,path);
          }
        }
      }
 catch (      RuntimeException ex) {
        if (!enableVariables) {
          throw ex;
        }
        log.log(Level.SEVERE,""String_Node_Str"",ex);
        break;
      }
    }
    int nopos=-1;
    for (int i=0; i < actionLen; i++) {
      ensureCapacity(ret,ip + i);
      if (a instanceof ActionNop) {
        int prevPos=(int)a.getAddress();
        a=new ActionNop();
        a.setAddress(prevPos,SWF.DEFAULT_VERSION);
        nopos++;
        if (nopos > 0) {
          a.setAddress(a.getAddress() + 1,SWF.DEFAULT_VERSION);
        }
      }
      ret.set(ip + i,a);
    }
    if (a instanceof GraphSourceItemContainer) {
      GraphSourceItemContainer cnt=(GraphSourceItemContainer)a;
      if (a instanceof Action) {
        long endAddr=a.getAddress() + cnt.getHeaderSize();
        String cntName=cnt.getName();
        List<List<GraphTargetItem>> output2s=new ArrayList<>();
        for (        long size : cnt.getContainerSizes()) {
          if (size == 0) {
            output2s.add(new ArrayList<GraphTargetItem>());
            continue;
          }
          List<Object> localData2=Helper.toList(new HashMap<Integer,String>(),new HashMap<String,GraphTargetItem>(),new HashMap<String,GraphTargetItem>());
          List<GraphTargetItem> output2=new ArrayList<>();
          readActionListAtPos(listeners,output2,containers,address,containerSWFOffset,notCompileTime,enableVariables,localData2,new Stack<GraphTargetItem>(),cpool,sis,rri,(int)endAddr,ret,startIp,(int)(endAddr + size),path + (cntName == null ? ""String_Node_Str"" : ""String_Node_Str"" + cntName));
          output2s.add(output2);
          endAddr+=size;
        }
        if (deobfuscate) {
          cnt.translateContainer(output2s,stack,output,(HashMap<Integer,String>)localData.get(0),(HashMap<String,GraphTargetItem>)localData.get(1),(HashMap<String,GraphTargetItem>)localData.get(2));
        }
        ip=(int)endAddr;
        prevIp=ip;
        rri.setPos(ip);
        filePos=rri.getPos();
        continue;
      }
    }
    if (a instanceof ActionEnd) {
      break;
    }
    if (newip > -1) {
      ip=newip;
    }
 else {
      ip=ip + info;
    }
    rri.setPos(ip);
    filePos=rri.getPos();
    if (goaif) {
      if (aif.ignoreUsed && aif.jumpUsed) {
        break;
      }
      aif.ignoreUsed=true;
      aif.jumpUsed=true;
      int oldPos=rri.getPos();
      @SuppressWarnings(""String_Node_Str"") Stack<GraphTargetItem> substack=(Stack<GraphTargetItem>)stack.clone();
      if (readActionListAtPos(listeners,output,containers,address,containerSWFOffset,true,enableVariables,localData,substack,cpool,sis,rri,rri.getPos() + aif.getJumpOffset(),ret,startIp,endip,path)) {
        retv=true;
      }
      rri.setPos(oldPos);
      notCompileTime=true;
    }
    prevIp=ip;
    if (a.isExit()) {
      break;
    }
  }
  for (  DisassemblyListener listener : listeners) {
    listener.progress(""String_Node_Str"",rri.getCount(),rri.length());
  }
  return retv;
}",0.999680233886072
62092,"public static int removeTraps(List<Object> localData,AVM2GraphSource code,int addr,String path){
  HashMap<GraphSourceItem,AVM2Code.Decision> decisions=new HashMap<>();
  HashMap<Integer,List<Integer>> refs=new HashMap<>();
  code.getCode().visitCode(0,code.size() - 1,refs);
  removeTraps(refs,false,false,localData,new Stack<GraphTargetItem>(),new ArrayList<GraphTargetItem>(),code,code.adr2pos(addr),new HashMap<Integer,Integer>(),new HashMap<Integer,HashMap<Integer,GraphTargetItem>>(),decisions,path);
  localData.set(2,new HashMap<Integer,GraphTargetItem>());
  return removeTraps(refs,true,false,localData,new Stack<GraphTargetItem>(),new ArrayList<GraphTargetItem>(),code,code.adr2pos(addr),new HashMap<Integer,Integer>(),new HashMap<Integer,HashMap<Integer,GraphTargetItem>>(),decisions,path);
}","public static int removeTraps(ConstantPool constants,MethodBody body,List<Object> localData,AVM2GraphSource code,int addr,String path){
  HashMap<GraphSourceItem,AVM2Code.Decision> decisions=new HashMap<>();
  HashMap<Integer,List<Integer>> refs=new HashMap<>();
  code.getCode().visitCode(0,code.size() - 1,refs);
  removeTraps(refs,false,false,localData,new Stack<GraphTargetItem>(),new ArrayList<GraphTargetItem>(),code,code.adr2pos(addr),new HashMap<Integer,Integer>(),new HashMap<Integer,HashMap<Integer,GraphTargetItem>>(),decisions,path);
  localData.set(2,new HashMap<Integer,GraphTargetItem>());
  int cnt=removeTraps(refs,true,false,localData,new Stack<GraphTargetItem>(),new ArrayList<GraphTargetItem>(),code,code.adr2pos(addr),new HashMap<Integer,Integer>(),new HashMap<Integer,HashMap<Integer,GraphTargetItem>>(),decisions,path);
  code.getCode().removeIgnored(constants,body);
  return cnt;
}",0.9321637426900584
62093,"public String toASMSource(ConstantPool constants,MethodBody body,List<Integer> outputMap,boolean hex){
  invalidateCache();
  StringBuffer ret=new StringBuffer();
  String t=""String_Node_Str"";
  for (int e=0; e < body.exceptions.length; e++) {
    ret.append(""String_Node_Str"" + e + ""String_Node_Str""+ body.exceptions[e].name_index+ ""String_Node_Str""+ Helper.escapeString(body.exceptions[e].getVarName(constants,new ArrayList<String>()))+ ""String_Node_Str""+ ""String_Node_Str""+ body.exceptions[e].type_index+ ""String_Node_Str""+ Helper.escapeString(body.exceptions[e].getTypeName(constants,new ArrayList<String>()))+ ""String_Node_Str"");
  }
  List<Long> offsets=new ArrayList<>();
  for (  AVM2Instruction ins : code) {
    offsets.addAll(ins.getOffsets());
  }
  for (  AVM2Instruction ins : code) {
    if (ins.replaceWith != null) {
      for (      Object o : ins.replaceWith) {
        if (o instanceof ControlFlowTag) {
          ControlFlowTag cft=(ControlFlowTag)o;
          if (cft.name.equals(""String_Node_Str"")) {
            offsets.add((long)pos2adr(cft.value));
          }
        }
      }
    }
  }
  long ofs=0;
  int ip=0;
  int largeLimit=20000;
  boolean markOffsets=code.size() <= largeLimit;
  for (  AVM2Instruction ins : code) {
    if (hex) {
      ret.append(""String_Node_Str"");
      ret.append(Helper.bytesToHexString(ins.getBytes()));
      ret.append(""String_Node_Str"");
    }
    if (ins.labelname != null) {
      ret.append(ins.labelname + ""String_Node_Str"");
    }
 else     if (offsets.contains(ofs)) {
      ret.append(""String_Node_Str"" + Helper.formatAddress(ofs) + ""String_Node_Str"");
    }
    for (int e=0; e < body.exceptions.length; e++) {
      if (body.exceptions[e].start == ofs) {
        ret.append(""String_Node_Str"" + e + ""String_Node_Str"");
      }
      if (body.exceptions[e].end == ofs) {
        ret.append(""String_Node_Str"" + e + ""String_Node_Str"");
      }
      if (body.exceptions[e].target == ofs) {
        ret.append(""String_Node_Str"" + e + ""String_Node_Str"");
      }
    }
    if (ins.replaceWith != null) {
      for (      Object o : ins.replaceWith) {
        if (o instanceof Integer) {
          AVM2Instruction ins2=code.get((Integer)o);
          if (ins2.isIgnored()) {
            continue;
          }
          t=Highlighting.hilighOffset(""String_Node_Str"",ins2.mappedOffset > -1 ? ins2.mappedOffset : ofs) + ins2.toStringNoAddress(constants,new ArrayList<String>()) + ""String_Node_Str""+ Helper.formatAddress(pos2adr((Integer)o))+ ""String_Node_Str"";
          ret.append(t);
          outputMap.add((Integer)o);
        }
 else         if (o instanceof ControlFlowTag) {
          ControlFlowTag cft=(ControlFlowTag)o;
          if (cft.name.equals(""String_Node_Str"")) {
            t=""String_Node_Str"" + Helper.formatAddress(pos2adr(cft.value)) + ""String_Node_Str"";
            ret.append(t);
            outputMap.add(-1);
          }
          if (cft.name.equals(""String_Node_Str"")) {
            ret.append(""String_Node_Str"" + Helper.formatAddress(pos2adr(cft.value)) + ""String_Node_Str"");
          }
        }
      }
    }
 else {
      if (!ins.isIgnored()) {
        int fixBranch=ins.getFixBranch();
        if (fixBranch > -1) {
          if (ins.definition instanceof IfTypeIns) {
            t=new PopIns().instructionName + ""String_Node_Str"";
            if (fixBranch == 0) {
              t=new JumpIns().instructionName + ""String_Node_Str"" + Helper.formatAddress(ofs + ins.getBytes().length + ins.operands[0]);
            }
 else {
            }
          }
        }
 else {
          t=ins.toStringNoAddress(constants,new ArrayList<String>());
          if (ins.changeJumpTo > -1) {
            t=ins.definition.instructionName + ""String_Node_Str"" + Helper.formatAddress(pos2adr(ins.changeJumpTo));
          }
        }
        if (markOffsets) {
          t=Highlighting.hilighOffset(""String_Node_Str"",ins.mappedOffset > -1 ? ins.mappedOffset : ofs) + t + ""String_Node_Str"";
        }
 else {
          t=t + ""String_Node_Str"";
        }
        ret.append(t);
        outputMap.add(ip);
      }
    }
    ofs+=ins.getBytes().length;
    ip++;
  }
  String r=ret.toString();
  return r;
}","public String toASMSource(ConstantPool constants,MethodBody body,List<Integer> outputMap,boolean hex){
  invalidateCache();
  StringBuffer ret=new StringBuffer();
  String t=""String_Node_Str"";
  for (int e=0; e < body.exceptions.length; e++) {
    ret.append(""String_Node_Str"" + e + ""String_Node_Str""+ body.exceptions[e].name_index+ ""String_Node_Str""+ Helper.escapeString(body.exceptions[e].getVarName(constants,new ArrayList<String>()))+ ""String_Node_Str""+ ""String_Node_Str""+ body.exceptions[e].type_index+ ""String_Node_Str""+ Helper.escapeString(body.exceptions[e].getTypeName(constants,new ArrayList<String>()))+ ""String_Node_Str"");
  }
  List<Long> offsets=new ArrayList<>();
  for (  AVM2Instruction ins : code) {
    offsets.addAll(ins.getOffsets());
  }
  for (  AVM2Instruction ins : code) {
    if (ins.replaceWith != null) {
      for (      Object o : ins.replaceWith) {
        if (o instanceof ControlFlowTag) {
          ControlFlowTag cft=(ControlFlowTag)o;
          if (cft.name.equals(""String_Node_Str"")) {
            offsets.add((long)pos2adr(cft.value));
          }
        }
      }
    }
  }
  long ofs=0;
  int ip=0;
  int largeLimit=20000;
  boolean markOffsets=code.size() <= largeLimit;
  for (  AVM2Instruction ins : code) {
    if (hex) {
      ret.append(""String_Node_Str"");
      ret.append(Helper.bytesToHexString(ins.getBytes()));
      ret.append(""String_Node_Str"");
    }
    if (ins.labelname != null) {
      ret.append(ins.labelname + ""String_Node_Str"");
    }
 else     if (offsets.contains(ofs)) {
      ret.append(""String_Node_Str"" + Helper.formatAddress(ofs) + ""String_Node_Str"");
    }
    for (int e=0; e < body.exceptions.length; e++) {
      if (body.exceptions[e].start == ofs) {
        ret.append(""String_Node_Str"" + e + ""String_Node_Str"");
      }
      if (body.exceptions[e].end == ofs) {
        ret.append(""String_Node_Str"" + e + ""String_Node_Str"");
      }
      if (body.exceptions[e].target == ofs) {
        ret.append(""String_Node_Str"" + e + ""String_Node_Str"");
      }
    }
    if (ins.replaceWith != null) {
      for (      Object o : ins.replaceWith) {
        if (o instanceof Integer) {
          AVM2Instruction ins2=code.get((Integer)o);
          if (ins2.isIgnored()) {
            continue;
          }
          t=Highlighting.hilighOffset(""String_Node_Str"",ins2.mappedOffset > -1 ? ins2.mappedOffset : ofs) + ins2.toStringNoAddress(constants,new ArrayList<String>()) + ""String_Node_Str""+ Helper.formatAddress(pos2adr((Integer)o))+ ""String_Node_Str"";
          ret.append(t);
          outputMap.add((Integer)o);
        }
 else         if (o instanceof ControlFlowTag) {
          ControlFlowTag cft=(ControlFlowTag)o;
          if (cft.name.equals(""String_Node_Str"")) {
            t=""String_Node_Str"" + Helper.formatAddress(pos2adr(cft.value)) + ""String_Node_Str"";
            ret.append(t);
            outputMap.add(-1);
          }
          if (cft.name.equals(""String_Node_Str"")) {
            ret.append(""String_Node_Str"" + Helper.formatAddress(pos2adr(cft.value)) + ""String_Node_Str"");
          }
        }
      }
    }
 else {
      if (!ins.isIgnored()) {
        int fixBranch=ins.getFixBranch();
        if (fixBranch > -1) {
          if (ins.definition instanceof IfTypeIns) {
            t=new PopIns().instructionName + ""String_Node_Str"";
            if (fixBranch == 0) {
              t+=new JumpIns().instructionName + ""String_Node_Str"" + Helper.formatAddress(ofs + ins.getBytes().length + ins.operands[0]);
            }
 else {
            }
          }
        }
 else {
          t=ins.toStringNoAddress(constants,new ArrayList<String>());
          if (ins.changeJumpTo > -1) {
            t=ins.definition.instructionName + ""String_Node_Str"" + Helper.formatAddress(pos2adr(ins.changeJumpTo));
          }
        }
        if (markOffsets) {
          t=Highlighting.hilighOffset(""String_Node_Str"",ins.mappedOffset > -1 ? ins.mappedOffset : ofs) + t + ""String_Node_Str"";
        }
 else {
          t=t + ""String_Node_Str"";
        }
        ret.append(t);
        outputMap.add(ip);
      }
    }
    ofs+=ins.getBytes().length;
    ip++;
  }
  String r=ret.toString();
  return r;
}",0.9998805114111602
62094,"public String getParams(ConstantPool constants,List<String> fullyQualifiedNames){
  StringBuilder s=new StringBuilder();
  for (int i=0; i < definition.operands.length; i++) {
switch (definition.operands[i]) {
case AVM2Code.DAT_MULTINAME_INDEX:
      s.append(""String_Node_Str"");
    s.append(operands[i]);
  s.append(""String_Node_Str"");
s.append(Helper.escapeString(constants.constant_multiname[operands[i]].toString(constants,fullyQualifiedNames)));
s.append(""String_Node_Str"");
break;
case AVM2Code.DAT_STRING_INDEX:
s.append(""String_Node_Str"");
s.append(Helper.escapeString(constants.constant_string[operands[i]]));
s.append(""String_Node_Str"");
break;
case AVM2Code.DAT_INT_INDEX:
s.append(""String_Node_Str"");
s.append(constants.constant_int[operands[i]]);
break;
case AVM2Code.DAT_UINT_INDEX:
s.append(""String_Node_Str"");
s.append(constants.constant_uint[operands[i]]);
break;
case AVM2Code.DAT_DOUBLE_INDEX:
s.append(""String_Node_Str"");
s.append(constants.constant_double[operands[i]]);
break;
case AVM2Code.DAT_OFFSET:
s.append(""String_Node_Str"");
s.append(""String_Node_Str"");
s.append(Helper.formatAddress(offset + operands[i] + getBytes().length));
break;
case AVM2Code.DAT_CASE_BASEOFFSET:
s.append(""String_Node_Str"");
s.append(""String_Node_Str"");
s.append(Helper.formatAddress(offset + operands[i]));
break;
case AVM2Code.OPT_CASE_OFFSETS:
s.append(""String_Node_Str"");
s.append(operands[i]);
for (int j=i + 1; j < operands.length; j++) {
s.append(""String_Node_Str"");
s.append(""String_Node_Str"");
s.append(Helper.formatAddress(offset + operands[j]));
}
break;
default :
s.append(""String_Node_Str"");
s.append(operands[i]);
}
}
return s.toString();
}","public String getParams(ConstantPool constants,List<String> fullyQualifiedNames){
  StringBuilder s=new StringBuilder();
  for (int i=0; i < definition.operands.length; i++) {
switch (definition.operands[i]) {
case AVM2Code.DAT_MULTINAME_INDEX:
      s.append(""String_Node_Str"");
    s.append(operands[i]);
  s.append(""String_Node_Str"");
if (constants.constant_multiname[operands[i]] == null) {
  s.append(""String_Node_Str"");
}
 else {
  s.append(Helper.escapeString(constants.constant_multiname[operands[i]].toString(constants,fullyQualifiedNames)));
}
s.append(""String_Node_Str"");
break;
case AVM2Code.DAT_STRING_INDEX:
s.append(""String_Node_Str"");
s.append(Helper.escapeString(constants.constant_string[operands[i]]));
s.append(""String_Node_Str"");
break;
case AVM2Code.DAT_INT_INDEX:
s.append(""String_Node_Str"");
s.append(constants.constant_int[operands[i]]);
break;
case AVM2Code.DAT_UINT_INDEX:
s.append(""String_Node_Str"");
s.append(constants.constant_uint[operands[i]]);
break;
case AVM2Code.DAT_DOUBLE_INDEX:
s.append(""String_Node_Str"");
s.append(constants.constant_double[operands[i]]);
break;
case AVM2Code.DAT_OFFSET:
s.append(""String_Node_Str"");
s.append(""String_Node_Str"");
s.append(Helper.formatAddress(offset + operands[i] + getBytes().length));
break;
case AVM2Code.DAT_CASE_BASEOFFSET:
s.append(""String_Node_Str"");
s.append(""String_Node_Str"");
s.append(Helper.formatAddress(offset + operands[i]));
break;
case AVM2Code.OPT_CASE_OFFSETS:
s.append(""String_Node_Str"");
s.append(operands[i]);
for (int j=i + 1; j < operands.length; j++) {
s.append(""String_Node_Str"");
s.append(""String_Node_Str"");
s.append(Helper.formatAddress(offset + operands[j]));
}
break;
default :
s.append(""String_Node_Str"");
s.append(operands[i]);
}
}
return s.toString();
}",0.9701579871269748
62095,"/** 
 * Converts list of actions to ActionScript source code
 * @param actions List of actions
 * @param version SWF version
 * @param path
 * @return String with Source code
 */
public static String actionsToSource(List<Action> actions,int version,String path){
  try {
    int staticOperation=(Boolean)Configuration.getConfig(""String_Node_Str"",true) ? Graph.SOP_SKIP_STATIC : Graph.SOP_USE_STATIC;
    List<GraphTargetItem> tree=actionsToTree(new HashMap<Integer,String>(),new HashMap<String,GraphTargetItem>(),new HashMap<String,GraphTargetItem>(),actions,version,staticOperation,path);
    return Graph.graphToString(tree);
  }
 catch (  Exception|OutOfMemoryError|StackOverflowError ex2) {
    Logger.getLogger(Action.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex2);
    if (ex2 instanceof OutOfMemoryError) {
      System.gc();
    }
    return ""String_Node_Str"" + ex2.getClass().getSimpleName() + ""String_Node_Str"";
  }
}","/** 
 * Converts list of actions to ActionScript source code
 * @param actions List of actions
 * @param version SWF version
 * @param path
 * @return String with Source code
 */
public static String actionsToSource(List<Action> actions,int version,String path){
  try {
    int staticOperation=Graph.SOP_USE_STATIC;
    List<GraphTargetItem> tree=actionsToTree(new HashMap<Integer,String>(),new HashMap<String,GraphTargetItem>(),new HashMap<String,GraphTargetItem>(),actions,version,staticOperation,path);
    return Graph.graphToString(tree);
  }
 catch (  Exception|OutOfMemoryError|StackOverflowError ex2) {
    Logger.getLogger(Action.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex2);
    if (ex2 instanceof OutOfMemoryError) {
      System.gc();
    }
    return ""String_Node_Str"" + ex2.getClass().getSimpleName() + ""String_Node_Str"";
  }
}",0.9536571747627024
62096,"/** 
 * @param args the command line arguments
 * @throws IOException
 */
public static void main(String[] args) throws IOException {
  loadProperties();
  View.setLookAndFeel();
  Configuration.loadFromFile(getConfigFile(),getReplacementsFile());
  if ((Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE)) {
    Cache.setStorageType(Cache.STORAGE_FILES);
  }
 else {
    Cache.setStorageType(Cache.STORAGE_MEMORY);
  }
  int pos=0;
  if (args.length > 0) {
    if (args[0].equals(""String_Node_Str"")) {
      Configuration.debugMode=true;
      pos++;
    }
  }
  initLogging(Configuration.debugMode);
  if (args.length < pos + 1) {
    autoCheckForUpdates();
    offerAssociation();
    showModeFrame();
  }
 else {
    if (args[pos].equals(""String_Node_Str"")) {
      addToContextMenu(false);
    }
 else     if (args[pos].equals(""String_Node_Str"")) {
      addToContextMenu(true);
    }
 else     if (args[pos].equals(""String_Node_Str"")) {
      int port=55555;
      for (int i=pos; i < args.length; i++) {
        if (args[i].startsWith(""String_Node_Str"")) {
          try {
            port=Integer.parseInt(args[pos].substring(2));
          }
 catch (          NumberFormatException nex) {
            System.err.println(""String_Node_Str"");
          }
        }
      }
      if (proxyFrame == null) {
        proxyFrame=new ProxyFrame();
      }
      proxyFrame.setPort(port);
      addTrayIcon();
      switchProxy();
    }
 else     if (args[pos].equals(""String_Node_Str"")) {
      if (args.length < pos + 4) {
        badArguments();
      }
      String validExportFormats[]=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      String exportFormat=args[pos + 1].toLowerCase();
      if (!Arrays.asList(validExportFormats).contains(exportFormat)) {
        System.err.println(""String_Node_Str"" + exportFormat);
        badArguments();
      }
      File outDir=new File(args[pos + 2]);
      File inFile=new File(args[pos + 3]);
      if (!inFile.exists()) {
        System.err.println(""String_Node_Str"");
        badArguments();
      }
      commandLineMode=true;
      boolean exportOK;
      try {
        printHeader();
        SWF exfile=new SWF(new FileInputStream(inFile),(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
        exfile.addEventListener(new EventListener(){
          @Override public void handleEvent(          String event,          Object data){
            if (event.equals(""String_Node_Str"")) {
              System.out.println((String)data);
            }
          }
        }
);
switch (exportFormat) {
case ""String_Node_Str"":
          System.out.println(""String_Node_Str"");
        exfile.exportImages(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
      System.out.println(""String_Node_Str"");
    exfile.exportShapes(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
  System.out.println(""String_Node_Str"");
exfile.exportActionScript(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"",false,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
System.out.println(""String_Node_Str"");
exfile.exportMovies(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
System.out.println(""String_Node_Str"");
exfile.exportSounds(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"",true,true);
System.out.println(""String_Node_Str"");
exfile.exportBinaryData(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
System.out.println(""String_Node_Str"");
exfile.exportTexts(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"",true);
exportOK=true;
break;
case ""String_Node_Str"":
exfile.exportImages(outDir.getAbsolutePath());
exportOK=true;
break;
case ""String_Node_Str"":
exfile.exportShapes(outDir.getAbsolutePath());
exportOK=true;
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
if ((pos + 5 < args.length) && (args[pos + 4].equals(""String_Node_Str""))) {
exportOK=true;
for (int i=pos + 5; i < args.length; i++) {
exportOK=exportOK && exfile.exportAS3Class(args[i],outDir.getAbsolutePath(),exportFormat.equals(""String_Node_Str""),(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
}
}
 else {
exportOK=!exfile.exportActionScript(outDir.getAbsolutePath(),exportFormat.equals(""String_Node_Str""),(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE)).isEmpty();
}
break;
case ""String_Node_Str"":
exfile.exportMovies(outDir.getAbsolutePath());
exportOK=true;
break;
case ""String_Node_Str"":
exfile.exportSounds(outDir.getAbsolutePath(),true,true);
exportOK=true;
break;
case ""String_Node_Str"":
exfile.exportBinaryData(outDir.getAbsolutePath());
exportOK=true;
break;
case ""String_Node_Str"":
exfile.exportTexts(outDir.getAbsolutePath(),true);
exportOK=true;
break;
case ""String_Node_Str"":
exfile.exportTexts(outDir.getAbsolutePath(),false);
exportOK=true;
break;
case ""String_Node_Str"":
exfile.exportFla(outDir.getAbsolutePath(),inFile.getName(),applicationName,applicationVerName,version,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
exportOK=true;
break;
case ""String_Node_Str"":
exfile.exportXfl(outDir.getAbsolutePath(),inFile.getName(),applicationName,applicationVerName,version,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
exportOK=true;
break;
default :
exportOK=false;
}
}
 catch (Exception ex) {
exportOK=false;
System.err.print(""String_Node_Str"");
Logger.getLogger(Main.class.getName()).log(Level.SEVERE,null,ex);
System.exit(1);
}
if (exportOK) {
System.out.println(""String_Node_Str"");
System.exit(0);
}
 else {
System.err.println(""String_Node_Str"");
System.exit(1);
}
}
 else if (args[pos].equals(""String_Node_Str"")) {
if (args.length < pos + 3) {
badArguments();
}
if (SWF.fws2cws(new FileInputStream(args[pos + 1]),new FileOutputStream(args[pos + 2]))) {
System.out.println(""String_Node_Str"");
}
 else {
System.err.println(""String_Node_Str"");
}
}
 else if (args[pos].equals(""String_Node_Str"")) {
if (args.length < pos + 3) {
badArguments();
}
if (SWF.decompress(new FileInputStream(args[pos + 1]),new FileOutputStream(args[pos + 2]))) {
System.out.println(""String_Node_Str"");
System.exit(0);
}
 else {
System.err.println(""String_Node_Str"");
System.exit(1);
}
}
 else if (args[pos].equals(""String_Node_Str"")) {
if (args.length < pos + 2) {
badArguments();
}
try {
Configuration.dump_tags=true;
SWF swf=parseSWF(args[pos + 1]);
}
 catch (Exception ex) {
Logger.getLogger(Main.class.getName()).log(Level.SEVERE,null,ex);
System.exit(1);
}
System.exit(0);
}
 else if (args[pos].equals(""String_Node_Str"") || args[pos].equals(""String_Node_Str"") || args[pos].equals(""String_Node_Str"")) {
printHeader();
printCmdLineUsage();
System.exit(0);
}
 else if (args.length == pos + 1) {
autoCheckForUpdates();
offerAssociation();
openFile(args[pos]);
}
 else {
badArguments();
}
}
}","/** 
 * @param args the command line arguments
 * @throws IOException
 */
public static void main(String[] args) throws IOException {
  Locale.setDefault(Locale.GERMAN);
  loadProperties();
  View.setLookAndFeel();
  Configuration.loadFromFile(getConfigFile(),getReplacementsFile());
  if ((Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE)) {
    Cache.setStorageType(Cache.STORAGE_FILES);
  }
 else {
    Cache.setStorageType(Cache.STORAGE_MEMORY);
  }
  int pos=0;
  if (args.length > 0) {
    if (args[0].equals(""String_Node_Str"")) {
      Configuration.debugMode=true;
      pos++;
    }
  }
  initLogging(Configuration.debugMode);
  if (args.length < pos + 1) {
    autoCheckForUpdates();
    offerAssociation();
    showModeFrame();
  }
 else {
    if (args[pos].equals(""String_Node_Str"")) {
      addToContextMenu(false);
    }
 else     if (args[pos].equals(""String_Node_Str"")) {
      addToContextMenu(true);
    }
 else     if (args[pos].equals(""String_Node_Str"")) {
      int port=55555;
      for (int i=pos; i < args.length; i++) {
        if (args[i].startsWith(""String_Node_Str"")) {
          try {
            port=Integer.parseInt(args[pos].substring(2));
          }
 catch (          NumberFormatException nex) {
            System.err.println(""String_Node_Str"");
          }
        }
      }
      if (proxyFrame == null) {
        proxyFrame=new ProxyFrame();
      }
      proxyFrame.setPort(port);
      addTrayIcon();
      switchProxy();
    }
 else     if (args[pos].equals(""String_Node_Str"")) {
      if (args.length < pos + 4) {
        badArguments();
      }
      String validExportFormats[]=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      String exportFormat=args[pos + 1].toLowerCase();
      if (!Arrays.asList(validExportFormats).contains(exportFormat)) {
        System.err.println(""String_Node_Str"" + exportFormat);
        badArguments();
      }
      File outDir=new File(args[pos + 2]);
      File inFile=new File(args[pos + 3]);
      if (!inFile.exists()) {
        System.err.println(""String_Node_Str"");
        badArguments();
      }
      commandLineMode=true;
      boolean exportOK;
      try {
        printHeader();
        SWF exfile=new SWF(new FileInputStream(inFile),(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
        exfile.addEventListener(new EventListener(){
          @Override public void handleEvent(          String event,          Object data){
            if (event.equals(""String_Node_Str"")) {
              System.out.println((String)data);
            }
          }
        }
);
switch (exportFormat) {
case ""String_Node_Str"":
          System.out.println(""String_Node_Str"");
        exfile.exportImages(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
      System.out.println(""String_Node_Str"");
    exfile.exportShapes(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
  System.out.println(""String_Node_Str"");
exfile.exportActionScript(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"",false,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
System.out.println(""String_Node_Str"");
exfile.exportMovies(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
System.out.println(""String_Node_Str"");
exfile.exportSounds(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"",true,true);
System.out.println(""String_Node_Str"");
exfile.exportBinaryData(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
System.out.println(""String_Node_Str"");
exfile.exportTexts(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"",true);
exportOK=true;
break;
case ""String_Node_Str"":
exfile.exportImages(outDir.getAbsolutePath());
exportOK=true;
break;
case ""String_Node_Str"":
exfile.exportShapes(outDir.getAbsolutePath());
exportOK=true;
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
if ((pos + 5 < args.length) && (args[pos + 4].equals(""String_Node_Str""))) {
exportOK=true;
for (int i=pos + 5; i < args.length; i++) {
exportOK=exportOK && exfile.exportAS3Class(args[i],outDir.getAbsolutePath(),exportFormat.equals(""String_Node_Str""),(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
}
}
 else {
exportOK=!exfile.exportActionScript(outDir.getAbsolutePath(),exportFormat.equals(""String_Node_Str""),(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE)).isEmpty();
}
break;
case ""String_Node_Str"":
exfile.exportMovies(outDir.getAbsolutePath());
exportOK=true;
break;
case ""String_Node_Str"":
exfile.exportSounds(outDir.getAbsolutePath(),true,true);
exportOK=true;
break;
case ""String_Node_Str"":
exfile.exportBinaryData(outDir.getAbsolutePath());
exportOK=true;
break;
case ""String_Node_Str"":
exfile.exportTexts(outDir.getAbsolutePath(),true);
exportOK=true;
break;
case ""String_Node_Str"":
exfile.exportTexts(outDir.getAbsolutePath(),false);
exportOK=true;
break;
case ""String_Node_Str"":
exfile.exportFla(outDir.getAbsolutePath(),inFile.getName(),applicationName,applicationVerName,version,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
exportOK=true;
break;
case ""String_Node_Str"":
exfile.exportXfl(outDir.getAbsolutePath(),inFile.getName(),applicationName,applicationVerName,version,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
exportOK=true;
break;
default :
exportOK=false;
}
}
 catch (Exception ex) {
exportOK=false;
System.err.print(""String_Node_Str"");
Logger.getLogger(Main.class.getName()).log(Level.SEVERE,null,ex);
System.exit(1);
}
if (exportOK) {
System.out.println(""String_Node_Str"");
System.exit(0);
}
 else {
System.err.println(""String_Node_Str"");
System.exit(1);
}
}
 else if (args[pos].equals(""String_Node_Str"")) {
if (args.length < pos + 3) {
badArguments();
}
if (SWF.fws2cws(new FileInputStream(args[pos + 1]),new FileOutputStream(args[pos + 2]))) {
System.out.println(""String_Node_Str"");
}
 else {
System.err.println(""String_Node_Str"");
}
}
 else if (args[pos].equals(""String_Node_Str"")) {
if (args.length < pos + 3) {
badArguments();
}
if (SWF.decompress(new FileInputStream(args[pos + 1]),new FileOutputStream(args[pos + 2]))) {
System.out.println(""String_Node_Str"");
System.exit(0);
}
 else {
System.err.println(""String_Node_Str"");
System.exit(1);
}
}
 else if (args[pos].equals(""String_Node_Str"")) {
if (args.length < pos + 2) {
badArguments();
}
try {
Configuration.dump_tags=true;
SWF swf=parseSWF(args[pos + 1]);
}
 catch (Exception ex) {
Logger.getLogger(Main.class.getName()).log(Level.SEVERE,null,ex);
System.exit(1);
}
System.exit(0);
}
 else if (args[pos].equals(""String_Node_Str"") || args[pos].equals(""String_Node_Str"") || args[pos].equals(""String_Node_Str"")) {
printHeader();
printCmdLineUsage();
System.exit(0);
}
 else if (args.length == pos + 1) {
autoCheckForUpdates();
offerAssociation();
openFile(args[pos]);
}
 else {
badArguments();
}
}
}",0.997432239657632
62097,"private int renameAS2Identifiers(RenameType renameType,Map<String,String> selected){
  actionsMap=new HashMap<>();
  allFunctions=new ArrayList<>();
  allVariableNames=new ArrayList<>();
  allStrings=new HashMap<>();
  List<Object> objs=new ArrayList<>();
  int ret=0;
  objs.addAll(tags);
  getVariables(objs,""String_Node_Str"");
  informListeners(""String_Node_Str"",""String_Node_Str"");
  int fc=0;
  for (  KeyValue<DirectValueTreeItem,ConstantPool> it : allVariableNames) {
    String name=it.key.toStringNoH(it.value);
    allVariableNamesStr.add(name);
  }
  informListeners(""String_Node_Str"",""String_Node_Str"");
  int classCount=0;
  for (  Tag t : tags) {
    if (t instanceof DoInitActionTag) {
      classCount++;
    }
  }
  int cnt=0;
  for (  Tag t : tags) {
    if (t instanceof DoInitActionTag) {
      cnt++;
      informListeners(""String_Node_Str"",""String_Node_Str"" + cnt + ""String_Node_Str""+ classCount);
      DoInitActionTag dia=(DoInitActionTag)t;
      String exportName=dia.getExportName();
      final String pkgPrefix=""String_Node_Str"";
      String classNameParts[]=null;
      if ((exportName != null) && exportName.startsWith(pkgPrefix)) {
        String className=exportName.substring(pkgPrefix.length());
        if (className.contains(""String_Node_Str"")) {
          classNameParts=className.split(""String_Node_Str"");
        }
 else {
          classNameParts=new String[]{className};
        }
      }
      List<GraphTargetItem> dec=Action.actionsToTree(dia.getActions(version),version);
      GraphTargetItem name=null;
      for (      GraphTargetItem it : dec) {
        if (it instanceof ClassTreeItem) {
          ClassTreeItem cti=(ClassTreeItem)it;
          List<GraphTargetItem> methods=new ArrayList<>();
          methods.addAll(cti.functions);
          methods.addAll(cti.staticFunctions);
          for (          GraphTargetItem gti : methods) {
            if (gti instanceof FunctionTreeItem) {
              FunctionTreeItem fun=(FunctionTreeItem)gti;
              if (fun.calculatedFunctionName instanceof DirectValueTreeItem) {
                DirectValueTreeItem dvf=(DirectValueTreeItem)fun.calculatedFunctionName;
                String fname=dvf.toStringNoH(null);
                String changed=deobfuscateName(fname,false,""String_Node_Str"",renameType,selected);
                if (changed != null) {
                  deobfuscated.put(fname,changed);
                }
              }
            }
          }
          List<GraphTargetItem> vars=new ArrayList<>();
          vars.addAll(cti.vars.keySet());
          vars.addAll(cti.staticVars.keySet());
          for (          GraphTargetItem gti : vars) {
            if (gti instanceof DirectValueTreeItem) {
              DirectValueTreeItem dvf=(DirectValueTreeItem)gti;
              String vname=dvf.toStringNoH(null);
              String changed=deobfuscateName(vname,false,""String_Node_Str"",renameType,selected);
              if (changed != null) {
                deobfuscated.put(vname,changed);
              }
            }
          }
          name=cti.className;
          break;
        }
        if (it instanceof InterfaceTreeItem) {
          InterfaceTreeItem ift=(InterfaceTreeItem)it;
          name=ift.name;
        }
      }
      if (name != null) {
        int pos=0;
        while (name instanceof GetMemberTreeItem) {
          GetMemberTreeItem mem=(GetMemberTreeItem)name;
          GraphTargetItem memberName=mem.memberName;
          if (memberName instanceof DirectValueTreeItem) {
            DirectValueTreeItem dvt=(DirectValueTreeItem)memberName;
            String nameStr=dvt.toStringNoH(null);
            if (classNameParts != null) {
              if (classNameParts.length - 1 - pos < 0) {
                break;
              }
            }
            String changedNameStr=nameStr;
            if (classNameParts != null) {
              changedNameStr=classNameParts[classNameParts.length - 1 - pos];
            }
            String changedNameStr2=deobfuscateName(changedNameStr,pos == 0,pos == 0 ? ""String_Node_Str"" : ""String_Node_Str"",renameType,selected);
            if (changedNameStr2 != null) {
              changedNameStr=changedNameStr2;
            }
            deobfuscated.put(nameStr,changedNameStr);
            pos++;
          }
          name=mem.object;
        }
        if (name instanceof GetVariableTreeItem) {
          GetVariableTreeItem var=(GetVariableTreeItem)name;
          if (var.name instanceof DirectValueTreeItem) {
            DirectValueTreeItem dvt=(DirectValueTreeItem)var.name;
            String nameStr=dvt.toStringNoH(null);
            if (classNameParts != null) {
              if (classNameParts.length - 1 - pos < 0) {
                break;
              }
            }
            String changedNameStr=nameStr;
            if (classNameParts != null) {
              changedNameStr=classNameParts[classNameParts.length - 1 - pos];
            }
            String changedNameStr2=deobfuscateName(changedNameStr,pos == 0,pos == 0 ? ""String_Node_Str"" : ""String_Node_Str"",renameType,selected);
            if (changedNameStr2 != null) {
              changedNameStr=changedNameStr2;
            }
            deobfuscated.put(nameStr,changedNameStr);
            pos++;
          }
        }
      }
    }
  }
  for (  GraphSourceItem fun : allFunctions) {
    fc++;
    informListeners(""String_Node_Str"",""String_Node_Str"" + fc + ""String_Node_Str""+ allFunctions.size());
    if (fun instanceof ActionDefineFunction) {
      ActionDefineFunction f=(ActionDefineFunction)fun;
      String changed=deobfuscateName(f.functionName,false,""String_Node_Str"",renameType,selected);
      if (changed != null) {
        f.replacedFunctionName=changed;
      }
    }
    if (fun instanceof ActionDefineFunction2) {
      ActionDefineFunction2 f=(ActionDefineFunction2)fun;
      String changed=deobfuscateName(f.functionName,false,""String_Node_Str"",renameType,selected);
      if (changed != null) {
        f.replacedFunctionName=changed;
      }
    }
  }
  HashSet<String> stringsNoVarH=new HashSet<>();
  List<DirectValueTreeItem> allVariableNamesDv=new ArrayList<>();
  for (  KeyValue<DirectValueTreeItem,ConstantPool> it : allVariableNames) {
    allVariableNamesDv.add(it.key);
  }
  for (  DirectValueTreeItem ti : allStrings.keySet()) {
    if (!allVariableNamesDv.contains(ti)) {
      stringsNoVarH.add(System.identityHashCode(allStrings.get(ti)) + ""String_Node_Str"" + ti.toStringNoH(allStrings.get(ti)));
    }
  }
  int vc=0;
  for (  KeyValue<DirectValueTreeItem,ConstantPool> it : allVariableNames) {
    vc++;
    String name=it.key.toStringNoH(it.value);
    String changed=deobfuscateName(name,false,usageTypes.get(it.key),renameType,selected);
    if (changed != null) {
      boolean addNew=false;
      String h=System.identityHashCode(it.key) + ""String_Node_Str"" + name;
      if (stringsNoVarH.contains(h)) {
        addNew=true;
      }
      ActionPush pu=(ActionPush)it.key.src;
      if (pu.replacement == null) {
        pu.replacement=new ArrayList<>();
        pu.replacement.addAll(pu.values);
      }
      if (pu.replacement.get(it.key.pos) instanceof ConstantIndex) {
        ConstantIndex ci=(ConstantIndex)pu.replacement.get(it.key.pos);
        ConstantPool pool=it.value;
        if (pool == null) {
          continue;
        }
        if (pool.constants == null) {
          continue;
        }
        if (addNew) {
          pool.constants.add(changed);
          ci.index=pool.constants.size() - 1;
        }
 else {
          pool.constants.set(ci.index,changed);
        }
      }
 else {
        pu.replacement.set(it.key.pos,changed);
      }
      ret++;
    }
  }
  for (  ASMSource src : actionsMap.keySet()) {
    actionsMap.put(src,Action.removeNops(0,actionsMap.get(src),version,0));
    src.setActions(actionsMap.get(src),version);
  }
  deobfuscateInstanceNames(renameType,tags,selected);
  return ret;
}","private int renameAS2Identifiers(RenameType renameType,Map<String,String> selected){
  actionsMap=new HashMap<>();
  allFunctions=new ArrayList<>();
  allVariableNames=new ArrayList<>();
  allStrings=new HashMap<>();
  List<Object> objs=new ArrayList<>();
  int ret=0;
  objs.addAll(tags);
  getVariables(objs,""String_Node_Str"");
  informListeners(""String_Node_Str"",""String_Node_Str"");
  int fc=0;
  for (  KeyValue<DirectValueTreeItem,ConstantPool> it : allVariableNames) {
    String name=it.key.toStringNoH(it.value);
    allVariableNamesStr.add(name);
  }
  informListeners(""String_Node_Str"",""String_Node_Str"");
  int classCount=0;
  for (  Tag t : tags) {
    if (t instanceof DoInitActionTag) {
      classCount++;
    }
  }
  int cnt=0;
  for (  Tag t : tags) {
    if (t instanceof DoInitActionTag) {
      cnt++;
      informListeners(""String_Node_Str"",""String_Node_Str"" + cnt + ""String_Node_Str""+ classCount);
      DoInitActionTag dia=(DoInitActionTag)t;
      String exportName=dia.getExportName();
      final String pkgPrefix=""String_Node_Str"";
      String classNameParts[]=null;
      if ((exportName != null) && exportName.startsWith(pkgPrefix)) {
        String className=exportName.substring(pkgPrefix.length());
        if (className.contains(""String_Node_Str"")) {
          classNameParts=className.split(""String_Node_Str"");
        }
 else {
          classNameParts=new String[]{className};
        }
      }
      List<GraphTargetItem> dec=Action.actionsToTree(dia.getActions(version),version);
      GraphTargetItem name=null;
      for (      GraphTargetItem it : dec) {
        if (it instanceof ClassTreeItem) {
          ClassTreeItem cti=(ClassTreeItem)it;
          List<GraphTargetItem> methods=new ArrayList<>();
          methods.addAll(cti.functions);
          methods.addAll(cti.staticFunctions);
          for (          GraphTargetItem gti : methods) {
            if (gti instanceof FunctionTreeItem) {
              FunctionTreeItem fun=(FunctionTreeItem)gti;
              if (fun.calculatedFunctionName instanceof DirectValueTreeItem) {
                DirectValueTreeItem dvf=(DirectValueTreeItem)fun.calculatedFunctionName;
                String fname=dvf.toStringNoH(null);
                String changed=deobfuscateName(fname,false,""String_Node_Str"",renameType,selected);
                if (changed != null) {
                  deobfuscated.put(fname,changed);
                }
              }
            }
          }
          List<GraphTargetItem> vars=new ArrayList<>();
          for (          KeyValue<GraphTargetItem,GraphTargetItem> item : cti.vars) {
            vars.add(item.key);
          }
          for (          KeyValue<GraphTargetItem,GraphTargetItem> item : cti.staticVars) {
            vars.add(item.key);
          }
          for (          GraphTargetItem gti : vars) {
            if (gti instanceof DirectValueTreeItem) {
              DirectValueTreeItem dvf=(DirectValueTreeItem)gti;
              String vname=dvf.toStringNoH(null);
              String changed=deobfuscateName(vname,false,""String_Node_Str"",renameType,selected);
              if (changed != null) {
                deobfuscated.put(vname,changed);
              }
            }
          }
          name=cti.className;
          break;
        }
        if (it instanceof InterfaceTreeItem) {
          InterfaceTreeItem ift=(InterfaceTreeItem)it;
          name=ift.name;
        }
      }
      if (name != null) {
        int pos=0;
        while (name instanceof GetMemberTreeItem) {
          GetMemberTreeItem mem=(GetMemberTreeItem)name;
          GraphTargetItem memberName=mem.memberName;
          if (memberName instanceof DirectValueTreeItem) {
            DirectValueTreeItem dvt=(DirectValueTreeItem)memberName;
            String nameStr=dvt.toStringNoH(null);
            if (classNameParts != null) {
              if (classNameParts.length - 1 - pos < 0) {
                break;
              }
            }
            String changedNameStr=nameStr;
            if (classNameParts != null) {
              changedNameStr=classNameParts[classNameParts.length - 1 - pos];
            }
            String changedNameStr2=deobfuscateName(changedNameStr,pos == 0,pos == 0 ? ""String_Node_Str"" : ""String_Node_Str"",renameType,selected);
            if (changedNameStr2 != null) {
              changedNameStr=changedNameStr2;
            }
            deobfuscated.put(nameStr,changedNameStr);
            pos++;
          }
          name=mem.object;
        }
        if (name instanceof GetVariableTreeItem) {
          GetVariableTreeItem var=(GetVariableTreeItem)name;
          if (var.name instanceof DirectValueTreeItem) {
            DirectValueTreeItem dvt=(DirectValueTreeItem)var.name;
            String nameStr=dvt.toStringNoH(null);
            if (classNameParts != null) {
              if (classNameParts.length - 1 - pos < 0) {
                break;
              }
            }
            String changedNameStr=nameStr;
            if (classNameParts != null) {
              changedNameStr=classNameParts[classNameParts.length - 1 - pos];
            }
            String changedNameStr2=deobfuscateName(changedNameStr,pos == 0,pos == 0 ? ""String_Node_Str"" : ""String_Node_Str"",renameType,selected);
            if (changedNameStr2 != null) {
              changedNameStr=changedNameStr2;
            }
            deobfuscated.put(nameStr,changedNameStr);
            pos++;
          }
        }
      }
    }
  }
  for (  GraphSourceItem fun : allFunctions) {
    fc++;
    informListeners(""String_Node_Str"",""String_Node_Str"" + fc + ""String_Node_Str""+ allFunctions.size());
    if (fun instanceof ActionDefineFunction) {
      ActionDefineFunction f=(ActionDefineFunction)fun;
      String changed=deobfuscateName(f.functionName,false,""String_Node_Str"",renameType,selected);
      if (changed != null) {
        f.replacedFunctionName=changed;
      }
    }
    if (fun instanceof ActionDefineFunction2) {
      ActionDefineFunction2 f=(ActionDefineFunction2)fun;
      String changed=deobfuscateName(f.functionName,false,""String_Node_Str"",renameType,selected);
      if (changed != null) {
        f.replacedFunctionName=changed;
      }
    }
  }
  HashSet<String> stringsNoVarH=new HashSet<>();
  List<DirectValueTreeItem> allVariableNamesDv=new ArrayList<>();
  for (  KeyValue<DirectValueTreeItem,ConstantPool> it : allVariableNames) {
    allVariableNamesDv.add(it.key);
  }
  for (  DirectValueTreeItem ti : allStrings.keySet()) {
    if (!allVariableNamesDv.contains(ti)) {
      stringsNoVarH.add(System.identityHashCode(allStrings.get(ti)) + ""String_Node_Str"" + ti.toStringNoH(allStrings.get(ti)));
    }
  }
  int vc=0;
  for (  KeyValue<DirectValueTreeItem,ConstantPool> it : allVariableNames) {
    vc++;
    String name=it.key.toStringNoH(it.value);
    String changed=deobfuscateName(name,false,usageTypes.get(it.key),renameType,selected);
    if (changed != null) {
      boolean addNew=false;
      String h=System.identityHashCode(it.key) + ""String_Node_Str"" + name;
      if (stringsNoVarH.contains(h)) {
        addNew=true;
      }
      ActionPush pu=(ActionPush)it.key.src;
      if (pu.replacement == null) {
        pu.replacement=new ArrayList<>();
        pu.replacement.addAll(pu.values);
      }
      if (pu.replacement.get(it.key.pos) instanceof ConstantIndex) {
        ConstantIndex ci=(ConstantIndex)pu.replacement.get(it.key.pos);
        ConstantPool pool=it.value;
        if (pool == null) {
          continue;
        }
        if (pool.constants == null) {
          continue;
        }
        if (addNew) {
          pool.constants.add(changed);
          ci.index=pool.constants.size() - 1;
        }
 else {
          pool.constants.set(ci.index,changed);
        }
      }
 else {
        pu.replacement.set(it.key.pos,changed);
      }
      ret++;
    }
  }
  for (  ASMSource src : actionsMap.keySet()) {
    actionsMap.put(src,Action.removeNops(0,actionsMap.get(src),version,0));
    src.setActions(actionsMap.get(src),version);
  }
  deobfuscateInstanceNames(renameType,tags,selected);
  return ret;
}",0.9834885164494104
62098,"public static List<GraphTargetItem> checkClass(List<GraphTargetItem> output){
  if (true) {
  }
  List<GraphTargetItem> ret=new ArrayList<>();
  List<GraphTargetItem> functions=new ArrayList<>();
  List<GraphTargetItem> staticFunctions=new ArrayList<>();
  HashMap<GraphTargetItem,GraphTargetItem> vars=new HashMap<>();
  HashMap<GraphTargetItem,GraphTargetItem> staticVars=new HashMap<>();
  GraphTargetItem className;
  GraphTargetItem extendsOp=null;
  List<GraphTargetItem> implementsOp=new ArrayList<>();
  boolean ok=true;
  int prevCount=0;
  for (  GraphTargetItem t : output) {
    if (t instanceof IfItem) {
      IfItem it=(IfItem)t;
      if (it.expression instanceof NotItem) {
        NotItem nti=(NotItem)it.expression;
        if ((nti.value instanceof GetMemberTreeItem) || (nti.value instanceof GetVariableTreeItem)) {
          if (true) {
            if ((it.onTrue.size() == 1) && (it.onTrue.get(0) instanceof SetMemberTreeItem) && (((SetMemberTreeItem)it.onTrue.get(0)).value instanceof NewObjectTreeItem)) {
            }
 else {
              List<GraphTargetItem> parts=it.onTrue;
              className=getWithoutGlobal(nti.value);
              if (parts.size() >= 1) {
                int ipos=0;
                while ((parts.get(ipos) instanceof IfItem) && ((((IfItem)parts.get(ipos)).onTrue.size() == 1) && (((IfItem)parts.get(ipos)).onTrue.get(0) instanceof SetMemberTreeItem) && (((SetMemberTreeItem)((IfItem)parts.get(ipos)).onTrue.get(0)).value instanceof NewObjectTreeItem))) {
                  ipos++;
                }
                if (parts.get(ipos) instanceof SetMemberTreeItem) {
                  SetMemberTreeItem smt=(SetMemberTreeItem)parts.get(ipos);
                  if (smt.value instanceof StoreRegisterTreeItem) {
                    parts.add(ipos,smt.value);
                    smt.value=((StoreRegisterTreeItem)smt.value).value;
                  }
                }
                if (parts.get(ipos) instanceof StoreRegisterTreeItem) {
                  StoreRegisterTreeItem str1=(StoreRegisterTreeItem)parts.get(ipos);
                  int classReg=str1.register.number;
                  int instanceReg=-1;
                  if ((parts.size() >= ipos + 2) && (parts.get(ipos + 1) instanceof SetMemberTreeItem)) {
                    GraphTargetItem ti1=((SetMemberTreeItem)parts.get(ipos + 1)).value;
                    GraphTargetItem ti2=((StoreRegisterTreeItem)parts.get(ipos + 0)).value;
                    if (ti1 == ti2) {
                      if (((SetMemberTreeItem)parts.get(ipos + 1)).value instanceof FunctionTreeItem) {
                        ((FunctionTreeItem)((SetMemberTreeItem)parts.get(ipos + 1)).value).calculatedFunctionName=(className instanceof GetMemberTreeItem) ? ((GetMemberTreeItem)className).memberName : className;
                        functions.add((FunctionTreeItem)((SetMemberTreeItem)parts.get(ipos + 1)).value);
                        int pos=ipos + 2;
                        if (parts.size() <= pos) {
                          ok=false;
                          break;
                        }
                        if (parts.get(pos) instanceof ExtendsTreeItem) {
                          ExtendsTreeItem et=(ExtendsTreeItem)parts.get(pos);
                          extendsOp=getWithoutGlobal(et.superclass);
                          pos++;
                        }
                        if (parts.size() <= pos) {
                          List<GraphTargetItem> output2=new ArrayList<>();
                          for (int i=0; i < prevCount; i++) {
                            output2.add(output.get(i));
                          }
                          output2.add(new ClassTreeItem(className,extendsOp,implementsOp,functions,vars,staticFunctions,staticVars));
                          return output2;
                        }
                        if (parts.get(pos) instanceof SetMemberTreeItem) {
                          SetMemberTreeItem smt=(SetMemberTreeItem)parts.get(pos);
                          if (smt.value instanceof StoreRegisterTreeItem) {
                            parts.add(pos,smt.value);
                            smt.value=((StoreRegisterTreeItem)smt.value).value;
                          }
                        }
                        if (parts.get(pos) instanceof StoreRegisterTreeItem) {
                          if (((StoreRegisterTreeItem)parts.get(pos)).value instanceof GetMemberTreeItem) {
                            GraphTargetItem obj=((GetMemberTreeItem)((StoreRegisterTreeItem)parts.get(pos)).value).object;
                            if (obj instanceof DirectValueTreeItem) {
                              if (((DirectValueTreeItem)obj).value instanceof RegisterNumber) {
                                if (((RegisterNumber)((DirectValueTreeItem)obj).value).number == classReg) {
                                  instanceReg=((StoreRegisterTreeItem)parts.get(pos)).register.number;
                                }
                              }
                            }
                          }
 else                           if (((StoreRegisterTreeItem)parts.get(pos)).value instanceof NewMethodTreeItem) {
                            if (parts.get(pos + 1) instanceof SetMemberTreeItem) {
                              if (((SetMemberTreeItem)parts.get(pos + 1)).value == ((StoreRegisterTreeItem)parts.get(pos)).value) {
                                instanceReg=((StoreRegisterTreeItem)parts.get(pos)).register.number;
                                NewMethodTreeItem nm=(NewMethodTreeItem)((StoreRegisterTreeItem)parts.get(pos)).value;
                                GetMemberTreeItem gm=new GetMemberTreeItem(null,nm.scriptObject,nm.methodName);
                                extendsOp=gm;
                              }
 else {
                                ok=false;
                                break;
                              }
                            }
 else {
                              ok=false;
                              break;
                            }
                            pos++;
                          }
 else                           if (((StoreRegisterTreeItem)parts.get(pos)).value instanceof NewObjectTreeItem) {
                            if (parts.get(pos + 1) instanceof SetMemberTreeItem) {
                              if (((SetMemberTreeItem)parts.get(pos + 1)).value == ((StoreRegisterTreeItem)parts.get(pos)).value) {
                                instanceReg=((StoreRegisterTreeItem)parts.get(pos)).register.number;
                                NewObjectTreeItem nm=(NewObjectTreeItem)((StoreRegisterTreeItem)parts.get(pos)).value;
                                extendsOp=new GetVariableTreeItem(null,nm.objectName);
                              }
 else {
                                ok=false;
                                break;
                              }
                            }
 else {
                              ok=false;
                              break;
                            }
                            pos++;
                          }
 else {
                            ok=false;
                            break;
                          }
                          if (instanceReg == -1) {
                            ok=false;
                            break;
                          }
                          pos++;
                          if (parts.size() <= pos) {
                            List<GraphTargetItem> output2=new ArrayList<>();
                            for (int i=0; i < prevCount; i++) {
                              output2.add(output.get(i));
                            }
                            output2.add(new ClassTreeItem(className,extendsOp,implementsOp,functions,vars,staticFunctions,staticVars));
                            return output2;
                          }
                          if (parts.size() <= pos) {
                            ok=false;
                            break;
                          }
                          if (parts.get(pos) instanceof ImplementsOpTreeItem) {
                            ImplementsOpTreeItem io=(ImplementsOpTreeItem)parts.get(pos);
                            implementsOp=io.superclasses;
                            pos++;
                          }
                          while ((parts.size() > pos) && ok) {
                            if (parts.get(pos) instanceof ScriptEndItem) {
                              break;
                            }
                            if (parts.get(pos) instanceof SetMemberTreeItem) {
                              SetMemberTreeItem smt=(SetMemberTreeItem)parts.get(pos);
                              if (smt.object instanceof DirectValueTreeItem) {
                                if (((DirectValueTreeItem)smt.object).value instanceof RegisterNumber) {
                                  if (((RegisterNumber)((DirectValueTreeItem)smt.object).value).number == instanceReg) {
                                    if (smt.value instanceof FunctionTreeItem) {
                                      ((FunctionTreeItem)smt.value).calculatedFunctionName=smt.objectName;
                                      functions.add((FunctionTreeItem)smt.value);
                                    }
 else {
                                      vars.put(smt.objectName,smt.value);
                                    }
                                  }
 else                                   if (((RegisterNumber)((DirectValueTreeItem)smt.object).value).number == classReg) {
                                    if (smt.value instanceof FunctionTreeItem) {
                                      ((FunctionTreeItem)smt.value).calculatedFunctionName=smt.objectName;
                                      staticFunctions.add((FunctionTreeItem)smt.value);
                                    }
 else {
                                      staticVars.put(smt.objectName,smt.value);
                                    }
                                  }
 else {
                                    ok=false;
                                  }
                                }
                              }
 else {
                                ok=false;
                              }
                            }
 else                             if (parts.get(pos) instanceof CallFunctionTreeItem) {
                              if (((CallFunctionTreeItem)parts.get(pos)).functionName instanceof DirectValueTreeItem) {
                                if (((DirectValueTreeItem)((CallFunctionTreeItem)parts.get(pos)).functionName).value.equals(""String_Node_Str"")) {
                                }
 else {
                                  ok=false;
                                }
                              }
 else {
                                ok=false;
                              }
                            }
 else {
                              ok=false;
                              break;
                            }
                            pos++;
                          }
                          if (ok) {
                            List<GraphTargetItem> output2=new ArrayList<>();
                            for (int i=0; i < prevCount; i++) {
                              output2.add(output.get(i));
                            }
                            output2.add(new ClassTreeItem(className,extendsOp,implementsOp,functions,vars,staticFunctions,staticVars));
                            return output2;
                          }
                        }
 else {
                          ok=false;
                        }
                      }
 else {
                        ok=false;
                      }
                    }
 else {
                      ok=false;
                    }
                  }
 else {
                    ok=false;
                  }
                }
 else                 if (parts.get(0) instanceof SetMemberTreeItem) {
                  SetMemberTreeItem sm=(SetMemberTreeItem)parts.get(0);
                  if (sm.value instanceof FunctionTreeItem) {
                    FunctionTreeItem f=(FunctionTreeItem)sm.value;
                    if (f.actions.isEmpty()) {
                      if (parts.size() == 2) {
                        if (parts.get(1) instanceof ImplementsOpTreeItem) {
                          ImplementsOpTreeItem iot=(ImplementsOpTreeItem)parts.get(1);
                          implementsOp=iot.superclasses;
                        }
 else {
                          ok=false;
                          break;
                        }
                      }
                      List<GraphTargetItem> output2=new ArrayList<>();
                      for (int i=0; i < prevCount; i++) {
                        output2.add(output.get(i));
                      }
                      output2.add(new InterfaceTreeItem(sm.objectName,implementsOp));
                      return output2;
                    }
 else {
                      ok=false;
                    }
                  }
 else {
                    ok=false;
                  }
                }
 else {
                  ok=false;
                }
              }
 else {
                ok=false;
              }
            }
          }
 else {
            ok=false;
          }
        }
 else {
          ok=false;
        }
      }
 else {
        ok=false;
      }
    }
 else {
      prevCount++;
    }
    if (!ok) {
      break;
    }
  }
  return output;
}","public static List<GraphTargetItem> checkClass(List<GraphTargetItem> output){
  if (true) {
  }
  List<GraphTargetItem> ret=new ArrayList<>();
  List<GraphTargetItem> functions=new ArrayList<>();
  List<GraphTargetItem> staticFunctions=new ArrayList<>();
  List<KeyValue<GraphTargetItem,GraphTargetItem>> vars=new ArrayList<>();
  List<KeyValue<GraphTargetItem,GraphTargetItem>> staticVars=new ArrayList<>();
  GraphTargetItem className;
  GraphTargetItem extendsOp=null;
  List<GraphTargetItem> implementsOp=new ArrayList<>();
  boolean ok=true;
  int prevCount=0;
  for (  GraphTargetItem t : output) {
    if (t instanceof IfItem) {
      IfItem it=(IfItem)t;
      if (it.expression instanceof NotItem) {
        NotItem nti=(NotItem)it.expression;
        if ((nti.value instanceof GetMemberTreeItem) || (nti.value instanceof GetVariableTreeItem)) {
          if (true) {
            if ((it.onTrue.size() == 1) && (it.onTrue.get(0) instanceof SetMemberTreeItem) && (((SetMemberTreeItem)it.onTrue.get(0)).value instanceof NewObjectTreeItem)) {
            }
 else {
              List<GraphTargetItem> parts=it.onTrue;
              className=getWithoutGlobal(nti.value);
              if (parts.size() >= 1) {
                int ipos=0;
                while ((parts.get(ipos) instanceof IfItem) && ((((IfItem)parts.get(ipos)).onTrue.size() == 1) && (((IfItem)parts.get(ipos)).onTrue.get(0) instanceof SetMemberTreeItem) && (((SetMemberTreeItem)((IfItem)parts.get(ipos)).onTrue.get(0)).value instanceof NewObjectTreeItem))) {
                  ipos++;
                }
                if (parts.get(ipos) instanceof SetMemberTreeItem) {
                  SetMemberTreeItem smt=(SetMemberTreeItem)parts.get(ipos);
                  if (smt.value instanceof StoreRegisterTreeItem) {
                    parts.add(ipos,smt.value);
                    smt.value=((StoreRegisterTreeItem)smt.value).value;
                  }
                }
                if (parts.get(ipos) instanceof StoreRegisterTreeItem) {
                  StoreRegisterTreeItem str1=(StoreRegisterTreeItem)parts.get(ipos);
                  int classReg=str1.register.number;
                  int instanceReg=-1;
                  if ((parts.size() >= ipos + 2) && (parts.get(ipos + 1) instanceof SetMemberTreeItem)) {
                    GraphTargetItem ti1=((SetMemberTreeItem)parts.get(ipos + 1)).value;
                    GraphTargetItem ti2=((StoreRegisterTreeItem)parts.get(ipos + 0)).value;
                    if (ti1 == ti2) {
                      if (((SetMemberTreeItem)parts.get(ipos + 1)).value instanceof FunctionTreeItem) {
                        ((FunctionTreeItem)((SetMemberTreeItem)parts.get(ipos + 1)).value).calculatedFunctionName=(className instanceof GetMemberTreeItem) ? ((GetMemberTreeItem)className).memberName : className;
                        functions.add((FunctionTreeItem)((SetMemberTreeItem)parts.get(ipos + 1)).value);
                        int pos=ipos + 2;
                        if (parts.size() <= pos) {
                          ok=false;
                          break;
                        }
                        if (parts.get(pos) instanceof ExtendsTreeItem) {
                          ExtendsTreeItem et=(ExtendsTreeItem)parts.get(pos);
                          extendsOp=getWithoutGlobal(et.superclass);
                          pos++;
                        }
                        if (parts.size() <= pos) {
                          List<GraphTargetItem> output2=new ArrayList<>();
                          for (int i=0; i < prevCount; i++) {
                            output2.add(output.get(i));
                          }
                          output2.add(new ClassTreeItem(className,extendsOp,implementsOp,functions,vars,staticFunctions,staticVars));
                          return output2;
                        }
                        if (parts.get(pos) instanceof SetMemberTreeItem) {
                          SetMemberTreeItem smt=(SetMemberTreeItem)parts.get(pos);
                          if (smt.value instanceof StoreRegisterTreeItem) {
                            parts.add(pos,smt.value);
                            smt.value=((StoreRegisterTreeItem)smt.value).value;
                          }
                        }
                        if (parts.get(pos) instanceof StoreRegisterTreeItem) {
                          if (((StoreRegisterTreeItem)parts.get(pos)).value instanceof GetMemberTreeItem) {
                            GraphTargetItem obj=((GetMemberTreeItem)((StoreRegisterTreeItem)parts.get(pos)).value).object;
                            if (obj instanceof DirectValueTreeItem) {
                              if (((DirectValueTreeItem)obj).value instanceof RegisterNumber) {
                                if (((RegisterNumber)((DirectValueTreeItem)obj).value).number == classReg) {
                                  instanceReg=((StoreRegisterTreeItem)parts.get(pos)).register.number;
                                }
                              }
                            }
                          }
 else                           if (((StoreRegisterTreeItem)parts.get(pos)).value instanceof NewMethodTreeItem) {
                            if (parts.get(pos + 1) instanceof SetMemberTreeItem) {
                              if (((SetMemberTreeItem)parts.get(pos + 1)).value == ((StoreRegisterTreeItem)parts.get(pos)).value) {
                                instanceReg=((StoreRegisterTreeItem)parts.get(pos)).register.number;
                                NewMethodTreeItem nm=(NewMethodTreeItem)((StoreRegisterTreeItem)parts.get(pos)).value;
                                GetMemberTreeItem gm=new GetMemberTreeItem(null,nm.scriptObject,nm.methodName);
                                extendsOp=gm;
                              }
 else {
                                ok=false;
                                break;
                              }
                            }
 else {
                              ok=false;
                              break;
                            }
                            pos++;
                          }
 else                           if (((StoreRegisterTreeItem)parts.get(pos)).value instanceof NewObjectTreeItem) {
                            if (parts.get(pos + 1) instanceof SetMemberTreeItem) {
                              if (((SetMemberTreeItem)parts.get(pos + 1)).value == ((StoreRegisterTreeItem)parts.get(pos)).value) {
                                instanceReg=((StoreRegisterTreeItem)parts.get(pos)).register.number;
                                NewObjectTreeItem nm=(NewObjectTreeItem)((StoreRegisterTreeItem)parts.get(pos)).value;
                                extendsOp=new GetVariableTreeItem(null,nm.objectName);
                              }
 else {
                                ok=false;
                                break;
                              }
                            }
 else {
                              ok=false;
                              break;
                            }
                            pos++;
                          }
 else {
                            ok=false;
                            break;
                          }
                          if (instanceReg == -1) {
                            ok=false;
                            break;
                          }
                          pos++;
                          if (parts.size() <= pos) {
                            List<GraphTargetItem> output2=new ArrayList<>();
                            for (int i=0; i < prevCount; i++) {
                              output2.add(output.get(i));
                            }
                            output2.add(new ClassTreeItem(className,extendsOp,implementsOp,functions,vars,staticFunctions,staticVars));
                            return output2;
                          }
                          if (parts.size() <= pos) {
                            ok=false;
                            break;
                          }
                          if (parts.get(pos) instanceof ImplementsOpTreeItem) {
                            ImplementsOpTreeItem io=(ImplementsOpTreeItem)parts.get(pos);
                            implementsOp=io.superclasses;
                            pos++;
                          }
                          while ((parts.size() > pos) && ok) {
                            if (parts.get(pos) instanceof ScriptEndItem) {
                              break;
                            }
                            if (parts.get(pos) instanceof SetMemberTreeItem) {
                              SetMemberTreeItem smt=(SetMemberTreeItem)parts.get(pos);
                              if (smt.object instanceof DirectValueTreeItem) {
                                if (((DirectValueTreeItem)smt.object).value instanceof RegisterNumber) {
                                  if (((RegisterNumber)((DirectValueTreeItem)smt.object).value).number == instanceReg) {
                                    if (smt.value instanceof FunctionTreeItem) {
                                      ((FunctionTreeItem)smt.value).calculatedFunctionName=smt.objectName;
                                      functions.add((FunctionTreeItem)smt.value);
                                    }
 else {
                                      vars.add(new KeyValue<>(smt.objectName,smt.value));
                                    }
                                  }
 else                                   if (((RegisterNumber)((DirectValueTreeItem)smt.object).value).number == classReg) {
                                    if (smt.value instanceof FunctionTreeItem) {
                                      ((FunctionTreeItem)smt.value).calculatedFunctionName=smt.objectName;
                                      staticFunctions.add((FunctionTreeItem)smt.value);
                                    }
 else {
                                      staticVars.add(new KeyValue<>(smt.objectName,smt.value));
                                    }
                                  }
 else {
                                    ok=false;
                                  }
                                }
                              }
 else {
                                ok=false;
                              }
                            }
 else                             if (parts.get(pos) instanceof CallFunctionTreeItem) {
                              if (((CallFunctionTreeItem)parts.get(pos)).functionName instanceof DirectValueTreeItem) {
                                if (((DirectValueTreeItem)((CallFunctionTreeItem)parts.get(pos)).functionName).value.equals(""String_Node_Str"")) {
                                }
 else {
                                  ok=false;
                                }
                              }
 else {
                                ok=false;
                              }
                            }
 else {
                              ok=false;
                              break;
                            }
                            pos++;
                          }
                          if (ok) {
                            List<GraphTargetItem> output2=new ArrayList<>();
                            for (int i=0; i < prevCount; i++) {
                              output2.add(output.get(i));
                            }
                            output2.add(new ClassTreeItem(className,extendsOp,implementsOp,functions,vars,staticFunctions,staticVars));
                            return output2;
                          }
                        }
 else {
                          ok=false;
                        }
                      }
 else {
                        ok=false;
                      }
                    }
 else {
                      ok=false;
                    }
                  }
 else {
                    ok=false;
                  }
                }
 else                 if (parts.get(0) instanceof SetMemberTreeItem) {
                  SetMemberTreeItem sm=(SetMemberTreeItem)parts.get(0);
                  if (sm.value instanceof FunctionTreeItem) {
                    FunctionTreeItem f=(FunctionTreeItem)sm.value;
                    if (f.actions.isEmpty()) {
                      if (parts.size() == 2) {
                        if (parts.get(1) instanceof ImplementsOpTreeItem) {
                          ImplementsOpTreeItem iot=(ImplementsOpTreeItem)parts.get(1);
                          implementsOp=iot.superclasses;
                        }
 else {
                          ok=false;
                          break;
                        }
                      }
                      List<GraphTargetItem> output2=new ArrayList<>();
                      for (int i=0; i < prevCount; i++) {
                        output2.add(output.get(i));
                      }
                      output2.add(new InterfaceTreeItem(sm.objectName,implementsOp));
                      return output2;
                    }
 else {
                      ok=false;
                    }
                  }
 else {
                    ok=false;
                  }
                }
 else {
                  ok=false;
                }
              }
 else {
                ok=false;
              }
            }
          }
 else {
            ok=false;
          }
        }
 else {
          ok=false;
        }
      }
 else {
        ok=false;
      }
    }
 else {
      prevCount++;
    }
    if (!ok) {
      break;
    }
  }
  return output;
}",0.9956868192119308
62099,"@Override public String toString(ConstantPool constants){
  String ret;
  ret=hilight(""String_Node_Str"") + className.toStringNoQuotes(Helper.toList(constants));
  if (extendsOp != null) {
    ret+=hilight(""String_Node_Str"") + extendsOp.toStringNoQuotes(Helper.toList(constants));
  }
  if (!implementsOp.isEmpty()) {
    ret+=hilight(""String_Node_Str"");
    boolean first=true;
    for (    GraphTargetItem t : implementsOp) {
      if (!first) {
        ret+=""String_Node_Str"";
      }
      first=false;
      ret+=Action.getWithoutGlobal(t).toString(constants);
    }
  }
  ret+=""String_Node_Str"";
  for (  GraphTargetItem f : functions) {
    ret+=f.toString(constants) + ""String_Node_Str"";
  }
  for (  GraphTargetItem f : staticFunctions) {
    ret+=""String_Node_Str"" + f.toString(constants) + ""String_Node_Str"";
  }
  for (  GraphTargetItem v : vars.keySet()) {
    ret+=""String_Node_Str"" + v.toStringNoQuotes(constants) + ""String_Node_Str""+ vars.get(v).toStringNoQuotes(constants)+ ""String_Node_Str"";
  }
  for (  GraphTargetItem v : staticVars.keySet()) {
    ret+=""String_Node_Str"" + v.toStringNoQuotes(constants) + ""String_Node_Str""+ staticVars.get(v).toStringNoQuotes(constants)+ ""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  return ret;
}","@Override public String toString(ConstantPool constants){
  String ret;
  ret=hilight(""String_Node_Str"") + className.toStringNoQuotes(Helper.toList(constants));
  if (extendsOp != null) {
    ret+=hilight(""String_Node_Str"") + extendsOp.toStringNoQuotes(Helper.toList(constants));
  }
  if (!implementsOp.isEmpty()) {
    ret+=hilight(""String_Node_Str"");
    boolean first=true;
    for (    GraphTargetItem t : implementsOp) {
      if (!first) {
        ret+=""String_Node_Str"";
      }
      first=false;
      ret+=Action.getWithoutGlobal(t).toString(constants);
    }
  }
  ret+=""String_Node_Str"";
  for (  GraphTargetItem f : functions) {
    ret+=f.toString(constants) + ""String_Node_Str"";
  }
  for (  GraphTargetItem f : staticFunctions) {
    ret+=""String_Node_Str"" + f.toString(constants) + ""String_Node_Str"";
  }
  for (  KeyValue<GraphTargetItem,GraphTargetItem> item : vars) {
    ret+=""String_Node_Str"" + item.key.toStringNoQuotes(constants) + ""String_Node_Str""+ item.value.toStringNoQuotes(constants)+ ""String_Node_Str"";
  }
  for (  KeyValue<GraphTargetItem,GraphTargetItem> item : staticVars) {
    ret+=""String_Node_Str"" + item.key.toStringNoQuotes(constants) + ""String_Node_Str""+ item.value.toStringNoQuotes(constants)+ ""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  return ret;
}",0.7083659108678655
62100,"public ClassTreeItem(GraphTargetItem className,GraphTargetItem extendsOp,List<GraphTargetItem> implementsOp,List<GraphTargetItem> functions,HashMap<GraphTargetItem,GraphTargetItem> vars,List<GraphTargetItem> staticFunctions,HashMap<GraphTargetItem,GraphTargetItem> staticVars){
  super(null,NOPRECEDENCE);
  this.className=className;
  this.functions=functions;
  this.vars=vars;
  this.extendsOp=extendsOp;
  this.implementsOp=implementsOp;
  this.staticFunctions=staticFunctions;
  this.staticVars=staticVars;
}","public ClassTreeItem(GraphTargetItem className,GraphTargetItem extendsOp,List<GraphTargetItem> implementsOp,List<GraphTargetItem> functions,List<KeyValue<GraphTargetItem,GraphTargetItem>> vars,List<GraphTargetItem> staticFunctions,List<KeyValue<GraphTargetItem,GraphTargetItem>> staticVars){
  super(null,NOPRECEDENCE);
  this.className=className;
  this.functions=functions;
  this.vars=vars;
  this.extendsOp=extendsOp;
  this.implementsOp=implementsOp;
  this.staticFunctions=staticFunctions;
  this.staticVars=staticVars;
}",0.8365384615384616
62101,"/** 
 * Reads list of actions from the stream. Reading ends with ActionEndFlag(=0) or end of the stream.
 * @param listeners
 * @param address
 * @param ip
 * @param rri
 * @param version
 * @param containerSWFOffset
 * @param endip
 * @return List of actions
 * @throws IOException
 */
public static List<Action> readActionList(List<DisassemblyListener> listeners,long address,long containerSWFOffset,ReReadableInputStream rri,int version,int ip,int endip) throws IOException {
  List<Action> retdups=new ArrayList<>();
  ConstantPool cpool=new ConstantPool();
  Stack<GraphTargetItem> stack=new Stack<>();
  List<Object> localData=Helper.toList(new HashMap<Integer,String>(),new HashMap<String,GraphTargetItem>(),new HashMap<String,GraphTargetItem>());
  SWFInputStream sis=new SWFInputStream(rri,version);
  boolean goesPrev=false;
  int method=1;
  goesPrev=readActionListAtPos(listeners,new ArrayList<GraphTargetItem>(),new HashMap<Long,List<GraphSourceItemContainer>>(),address,containerSWFOffset,false,true,localData,stack,cpool,sis,rri,ip,retdups,ip,endip);
  if (goesPrev) {
  }
 else {
    if (!retdups.isEmpty()) {
      for (int i=0; i < ip; i++) {
        retdups.remove(0);
      }
    }
  }
  List<Action> ret=new ArrayList<>();
  Action last=null;
  for (  Action a : retdups) {
    if (a != last) {
      ret.add(a);
    }
    last=a;
  }
  for (int i=0; i < retdups.size(); i++) {
    Action a=retdups.get(i);
    if (a instanceof ActionEnd) {
      if (i < retdups.size() - 1) {
        ActionJump jmp=new ActionJump(0);
        jmp.setJumpOffset(retdups.size() - i - jmp.getBytes(version).length);
        a.replaceWith=jmp;
      }
    }
  }
  List<ConstantPool> pools;
  StringBuilder br=new StringBuilder();
  for (int i=0; i < ret.size(); i++) {
    br.append(i);
    br.append(""String_Node_Str"");
    br.append(Helper.formatAddress(((Action)ret.get(i)).getAddress()));
    br.append(""String_Node_Str"");
    br.append(((Action)ret.get(i)).getASMSource(new ArrayList<GraphSourceItem>(),new ArrayList<Long>(),cpool.constants,version,false));
    br.append(""String_Node_Str"");
  }
  pools=getConstantPool(listeners,new ActionGraphSource(ret,version,new HashMap<Integer,String>(),new HashMap<String,GraphTargetItem>(),new HashMap<String,GraphTargetItem>()),ip,version);
  if (pools.size() == 1) {
    Action.setConstantPool(ret,pools.get(0));
  }
  if (goesPrev && (!DEOBFUSCATION_ALL_CODE_IN_PREVIOUS_TAG)) {
    ActionJump aj=new ActionJump(ip);
    int skip=aj.getBytes(version).length;
    for (    GraphSourceItem s : ret) {
      if (s instanceof Action) {
        Action a=(Action)s;
        a.setAddress(a.getAddress() + skip,version);
      }
    }
    ret.add(0,aj);
  }
  String s=null;
  List<Action> reta=new ArrayList<>();
  for (  Object o : ret) {
    if (o instanceof Action) {
      reta.add((Action)o);
    }
  }
  return reta;
}","/** 
 * Reads list of actions from the stream. Reading ends with ActionEndFlag(=0) or end of the stream.
 * @param listeners
 * @param address
 * @param ip
 * @param rri
 * @param version
 * @param containerSWFOffset
 * @param endip
 * @return List of actions
 * @throws IOException
 */
public static List<Action> readActionList(List<DisassemblyListener> listeners,long address,long containerSWFOffset,ReReadableInputStream rri,int version,int ip,int endip) throws IOException {
  List<Action> retdups=new ArrayList<>();
  ConstantPool cpool=new ConstantPool();
  Stack<GraphTargetItem> stack=new Stack<>();
  List<Object> localData=Helper.toList(new HashMap<Integer,String>(),new HashMap<String,GraphTargetItem>(),new HashMap<String,GraphTargetItem>());
  SWFInputStream sis=new SWFInputStream(rri,version);
  boolean goesPrev=false;
  int method=1;
  goesPrev=readActionListAtPos(listeners,new ArrayList<GraphTargetItem>(),new HashMap<Long,List<GraphSourceItemContainer>>(),address,containerSWFOffset,false,true,localData,stack,cpool,sis,rri,ip,retdups,ip,endip);
  if (goesPrev) {
  }
 else {
    if (!retdups.isEmpty()) {
      for (int i=0; i < ip; i++) {
        retdups.remove(0);
      }
    }
  }
  List<Action> ret=new ArrayList<>();
  Action last=null;
  for (  Action a : retdups) {
    if (a != last) {
      ret.add(a);
    }
    last=a;
  }
  for (int i=0; i < retdups.size(); i++) {
    Action a=retdups.get(i);
    if (a instanceof ActionEnd) {
      if (i < retdups.size() - 1) {
        ActionJump jmp=new ActionJump(0);
        jmp.setJumpOffset(retdups.size() - i - jmp.getBytes(version).length);
        a.replaceWith=jmp;
      }
    }
  }
  List<ConstantPool> pools;
  StringBuilder br=new StringBuilder();
  for (int i=0; i < ret.size(); i++) {
    br.append(i);
    br.append(""String_Node_Str"");
    br.append(Helper.formatAddress(((Action)ret.get(i)).getAddress()));
    br.append(""String_Node_Str"");
    br.append(((Action)ret.get(i)).getASMSource(new ArrayList<GraphSourceItem>(),new ArrayList<Long>(),cpool.constants,version,false));
    br.append(""String_Node_Str"");
  }
  ret=Action.removeNops(0,ret,version,0);
  pools=getConstantPool(listeners,new ActionGraphSource(ret,version,new HashMap<Integer,String>(),new HashMap<String,GraphTargetItem>(),new HashMap<String,GraphTargetItem>()),0,version);
  if (pools.size() == 1) {
    Action.setConstantPool(ret,pools.get(0));
  }
  if (goesPrev && (!DEOBFUSCATION_ALL_CODE_IN_PREVIOUS_TAG)) {
    ActionJump aj=new ActionJump(ip);
    int skip=aj.getBytes(version).length;
    for (    GraphSourceItem s : ret) {
      if (s instanceof Action) {
        Action a=(Action)s;
        a.setAddress(a.getAddress() + skip,version);
      }
    }
    ret.add(0,aj);
  }
  String s=null;
  List<Action> reta=new ArrayList<>();
  for (  Object o : ret) {
    if (o instanceof Action) {
      reta.add((Action)o);
    }
  }
  return reta;
}",0.9922104898736368
62102,"public static SHAPE systemFontCharacterToSHAPE(String fontName,int fontStyle,int fontSize,char character){
  List<SHAPERECORD> retList=new ArrayList<>();
  Font f=new Font(fontName,fontStyle,fontSize);
  GlyphVector v=f.createGlyphVector((new JPanel()).getFontMetrics(f).getFontRenderContext(),""String_Node_Str"" + character);
  Shape shp=v.getOutline();
  double points[]=new double[6];
  double lastX=0;
  double lastY=0;
  double startX=0;
  double startY=0;
  for (PathIterator it=shp.getPathIterator(null); !it.isDone(); it.next()) {
    int type=it.currentSegment(points);
switch (type) {
case PathIterator.SEG_MOVETO:
      lastX=points[0];
    lastY=points[1];
  startX=lastX;
startY=lastY;
StyleChangeRecord scr=new StyleChangeRecord();
scr.stateMoveTo=true;
scr.moveDeltaX=(int)Math.round(points[0]);
scr.moveDeltaY=(int)Math.round(points[1]);
scr.moveBits=SWFOutputStream.getNeededBitsS(scr.moveDeltaX,scr.moveDeltaY);
retList.add(scr);
break;
case PathIterator.SEG_LINETO:
StraightEdgeRecord ser=new StraightEdgeRecord();
ser.generalLineFlag=true;
ser.deltaX=(int)Math.round((points[0] - lastX));
ser.deltaY=(int)Math.round((points[1] - lastY));
ser.numBits=SWFOutputStream.getNeededBitsS(ser.deltaX,ser.deltaY) - 2;
if (ser.numBits < 0) {
ser.numBits=0;
}
retList.add(ser);
lastX=points[0];
lastY=points[1];
break;
case PathIterator.SEG_CUBICTO:
double cubicCoords[]=new double[]{lastX,lastY,points[0],points[1],points[2],points[3],points[4],points[5]};
double quadCoords[][]=approximateCubic(cubicCoords);
for (int i=0; i < quadCoords.length; i++) {
CurvedEdgeRecord cer=new CurvedEdgeRecord();
cer.controlDeltaX=(int)Math.round((quadCoords[i][0] - lastX));
cer.controlDeltaY=(int)Math.round((quadCoords[i][1] - lastY));
cer.anchorDeltaX=(int)Math.round((quadCoords[i][2] - quadCoords[i][0]));
cer.anchorDeltaY=(int)Math.round((quadCoords[i][3] - quadCoords[i][1]));
cer.numBits=SWFOutputStream.getNeededBitsS(cer.controlDeltaX,cer.controlDeltaY,cer.anchorDeltaX,cer.anchorDeltaY) - 2;
if (cer.numBits < 0) {
cer.numBits=0;
}
lastX=quadCoords[i][2];
lastY=quadCoords[i][3];
retList.add(cer);
}
break;
case PathIterator.SEG_QUADTO:
CurvedEdgeRecord cer=new CurvedEdgeRecord();
cer.controlDeltaX=(int)Math.round((points[0] - lastX));
cer.controlDeltaY=(int)Math.round((points[1] - lastY));
cer.anchorDeltaX=(int)Math.round((points[2] - points[0]));
cer.anchorDeltaY=(int)Math.round((points[3] - points[1]));
cer.numBits=SWFOutputStream.getNeededBitsS(cer.controlDeltaX,cer.controlDeltaY,cer.anchorDeltaX,cer.anchorDeltaY) - 2;
if (cer.numBits < 0) {
cer.numBits=0;
}
retList.add(cer);
lastX=points[2];
lastY=points[3];
break;
case PathIterator.SEG_CLOSE:
if ((startX == lastX) && (startY == lastY)) {
break;
}
StraightEdgeRecord closeSer=new StraightEdgeRecord();
closeSer.generalLineFlag=true;
closeSer.deltaX=(int)Math.round((startX - lastX));
closeSer.deltaY=(int)Math.round((startY - lastY));
closeSer.numBits=SWFOutputStream.getNeededBitsS(closeSer.deltaX,closeSer.deltaY) - 2;
if (closeSer.numBits < 0) {
closeSer.numBits=0;
}
retList.add(closeSer);
lastX=startX;
lastY=startY;
break;
}
}
SHAPE shape=new SHAPE();
StyleChangeRecord init;
if (!retList.isEmpty() && retList.get(0) instanceof StyleChangeRecord) {
init=(StyleChangeRecord)retList.get(0);
}
 else {
init=new StyleChangeRecord();
retList.add(0,init);
}
retList.add(new EndShapeRecord());
init.stateFillStyle0=true;
init.fillStyle0=1;
shape.shapeRecords=retList;
shape.numFillBits=1;
shape.numLineBits=0;
return shape;
}","public static SHAPE systemFontCharacterToSHAPE(String fontName,int fontStyle,int fontSize,char character){
  List<SHAPERECORD> retList=new ArrayList<>();
  Font f=new Font(fontName,fontStyle,fontSize);
  GlyphVector v=f.createGlyphVector((new JPanel()).getFontMetrics(f).getFontRenderContext(),""String_Node_Str"" + character);
  Shape shp=v.getOutline();
  double points[]=new double[6];
  int lastX=0;
  int lastY=0;
  int startX=0;
  int startY=0;
  for (PathIterator it=shp.getPathIterator(null); !it.isDone(); it.next()) {
    int type=it.currentSegment(points);
switch (type) {
case PathIterator.SEG_MOVETO:
      StyleChangeRecord scr=new StyleChangeRecord();
    scr.stateMoveTo=true;
  scr.moveDeltaX=(int)Math.round(points[0]);
scr.moveDeltaY=(int)Math.round(points[1]);
scr.moveBits=SWFOutputStream.getNeededBitsS(scr.moveDeltaX,scr.moveDeltaY);
retList.add(scr);
lastX=(int)Math.round(points[0]);
lastY=(int)Math.round(points[1]);
startX=lastX;
startY=lastY;
break;
case PathIterator.SEG_LINETO:
StraightEdgeRecord ser=new StraightEdgeRecord();
ser.generalLineFlag=true;
ser.deltaX=((int)Math.round(points[0])) - lastX;
ser.deltaY=((int)Math.round(points[1])) - lastY;
ser.numBits=SWFOutputStream.getNeededBitsS(ser.deltaX,ser.deltaY) - 2;
if (ser.numBits < 0) {
ser.numBits=0;
}
retList.add(ser);
lastX=(int)Math.round(points[0]);
lastY=(int)Math.round(points[1]);
break;
case PathIterator.SEG_CUBICTO:
double cubicCoords[]=new double[]{lastX,lastY,Math.round(points[0]),Math.round(points[1]),Math.round(points[2]),Math.round(points[3]),Math.round(points[4]),Math.round(points[5])};
double quadCoords[][]=approximateCubic(cubicCoords);
for (int i=0; i < quadCoords.length; i++) {
CurvedEdgeRecord cer=new CurvedEdgeRecord();
cer.controlDeltaX=((int)Math.round(quadCoords[i][0])) - lastX;
cer.controlDeltaY=((int)Math.round(quadCoords[i][1])) - lastY;
cer.anchorDeltaX=((int)Math.round(quadCoords[i][2])) - ((int)Math.round(quadCoords[i][0]));
cer.anchorDeltaY=((int)Math.round(quadCoords[i][3])) - ((int)Math.round(quadCoords[i][1]));
cer.numBits=SWFOutputStream.getNeededBitsS(cer.controlDeltaX,cer.controlDeltaY,cer.anchorDeltaX,cer.anchorDeltaY) - 2;
if (cer.numBits < 0) {
cer.numBits=0;
}
lastX=(int)Math.round(quadCoords[i][2]);
lastY=(int)Math.round(quadCoords[i][3]);
retList.add(cer);
}
break;
case PathIterator.SEG_QUADTO:
CurvedEdgeRecord cer=new CurvedEdgeRecord();
cer.controlDeltaX=((int)Math.round(points[0])) - lastX;
cer.controlDeltaY=((int)Math.round(points[1])) - lastY;
cer.anchorDeltaX=((int)Math.round(points[2])) - (int)Math.round(points[0]);
cer.anchorDeltaY=((int)Math.round(points[3])) - (int)Math.round(points[1]);
cer.numBits=SWFOutputStream.getNeededBitsS(cer.controlDeltaX,cer.controlDeltaY,cer.anchorDeltaX,cer.anchorDeltaY) - 2;
if (cer.numBits < 0) {
cer.numBits=0;
}
retList.add(cer);
lastX=(int)Math.round(points[2]);
lastY=(int)Math.round(points[3]);
break;
case PathIterator.SEG_CLOSE:
if ((startX == lastX) && (startY == lastY)) {
break;
}
StraightEdgeRecord closeSer=new StraightEdgeRecord();
closeSer.generalLineFlag=true;
closeSer.deltaX=(int)Math.round((startX - lastX));
closeSer.deltaY=(int)Math.round((startY - lastY));
closeSer.numBits=SWFOutputStream.getNeededBitsS(closeSer.deltaX,closeSer.deltaY) - 2;
if (closeSer.numBits < 0) {
closeSer.numBits=0;
}
retList.add(closeSer);
lastX=startX;
lastY=startY;
break;
}
}
SHAPE shape=new SHAPE();
StyleChangeRecord init;
if (!retList.isEmpty() && retList.get(0) instanceof StyleChangeRecord) {
init=(StyleChangeRecord)retList.get(0);
}
 else {
init=new StyleChangeRecord();
retList.add(0,init);
}
retList.add(new EndShapeRecord());
init.stateFillStyle0=true;
init.fillStyle0=1;
shape.shapeRecords=retList;
shape.numFillBits=1;
shape.numLineBits=0;
return shape;
}",0.9311484439548334
62103,"@Override protected List<GraphTargetItem> check(GraphSource code,List<Object> localData,List<GraphPart> allParts,Stack<GraphTargetItem> stack,GraphPart parent,GraphPart part,List<GraphPart> stopPart,List<Loop> loops,List<GraphTargetItem> output,Loop currentLoop){
  if (!output.isEmpty()) {
    if (output.get(output.size() - 1) instanceof StoreRegisterTreeItem) {
      StoreRegisterTreeItem str=(StoreRegisterTreeItem)output.get(output.size() - 1);
      if (str.value instanceof EnumerateTreeItem) {
        output.remove(output.size() - 1);
      }
    }
  }
  List<GraphTargetItem> ret=null;
  if ((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictEqTreeItem)) {
    GraphTargetItem switchedObject=null;
    if (!output.isEmpty()) {
      if (output.get(output.size() - 1) instanceof StoreRegisterTreeItem) {
        switchedObject=((StoreRegisterTreeItem)output.get(output.size() - 1)).value;
      }
    }
    if (switchedObject == null) {
      switchedObject=new DirectValueTreeItem(null,-1,new Null(),null);
    }
    HashMap<Integer,GraphTargetItem> caseValuesMap=new HashMap<>();
    int pos=0;
    StrictEqTreeItem set=(StrictEqTreeItem)stack.pop();
    caseValuesMap.put(pos,set.rightSide);
    if (set.leftSide instanceof StoreRegisterTreeItem) {
      switchedObject=((StoreRegisterTreeItem)set.leftSide).value;
    }
    List<GraphPart> caseBodyParts=new ArrayList<>();
    caseBodyParts.add(part.nextParts.get(0));
    GraphTargetItem top=null;
    int cnt=1;
    while (part.nextParts.size() > 1 && part.nextParts.get(1).getHeight() > 1 && code.get(part.nextParts.get(1).end >= code.size() ? code.size() - 1 : part.nextParts.get(1).end) instanceof ActionIf && ((top=translatePartGetStack(localData,part.nextParts.get(1),stack)) instanceof StrictEqTreeItem)) {
      cnt++;
      part=part.nextParts.get(1);
      pos++;
      caseBodyParts.add(part.nextParts.get(0));
      set=(StrictEqTreeItem)top;
      caseValuesMap.put(pos,set.rightSide);
    }
    if (cnt == 1) {
      stack.push(set);
    }
 else {
      part=part.nextParts.get(1);
      GraphPart defaultPart=part;
      List<GraphPart> defaultAndLastPart=new ArrayList<>();
      defaultAndLastPart.add(defaultPart);
      defaultAndLastPart.add(caseBodyParts.get(caseBodyParts.size() - 1));
      GraphPart defaultPart2=getCommonPart(defaultAndLastPart,loops);
      List<GraphTargetItem> defaultCommands=new ArrayList<>();
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(defaultPart2);
      defaultCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,defaultPart,stopPart2,loops);
      List<GraphPart> loopContinues=new ArrayList<>();
      for (      Loop l : loops) {
        if (l.loopContinue != null) {
          loopContinues.add(l.loopContinue);
        }
      }
      List<GraphPart> breakParts=new ArrayList<>();
      List<GraphPart> mcp=new ArrayList<>();
      mcp.addAll(caseBodyParts);
      mcp.add(defaultPart2);
      GraphPart breakPart=getMostCommonPart(mcp,loops);
      if ((defaultPart2 != breakPart) && (defaultCommands.isEmpty())) {
        defaultPart=defaultPart2;
      }
      List<GraphTargetItem> caseValues=new ArrayList<>();
      for (int i=0; i < caseBodyParts.size(); i++) {
        if (caseValuesMap.containsKey(i)) {
          caseValues.add(caseValuesMap.get(i));
        }
 else {
          continue;
        }
      }
      List<List<GraphTargetItem>> caseCommands=new ArrayList<>();
      GraphPart next=null;
      next=breakPart;
      GraphTargetItem ti=checkLoop(next,stopPart,loops);
      currentLoop=new Loop(loops.size(),null,next);
      currentLoop.phase=1;
      loops.add(currentLoop);
      List<Integer> valuesMapping=new ArrayList<>();
      List<GraphPart> caseBodies=new ArrayList<>();
      for (int i=0; i < caseValues.size(); i++) {
        GraphPart cur=caseBodyParts.get(i);
        if (!caseBodies.contains(cur)) {
          caseBodies.add(cur);
        }
        valuesMapping.add(caseBodies.indexOf(cur));
      }
      if (defaultPart == breakPart) {
        defaultPart=null;
      }
      if ((defaultPart != null) && (defaultCommands.isEmpty())) {
        List<GraphPart> stopPart2x=new ArrayList<>(stopPart);
        stopPart2x.add(next);
        defaultCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,defaultPart,stopPart2x,loops);
      }
      if (!defaultCommands.isEmpty()) {
        if (defaultCommands.get(defaultCommands.size() - 1) instanceof BreakItem) {
          BreakItem bi=(BreakItem)defaultCommands.get(defaultCommands.size() - 1);
          if (bi.loopId == currentLoop.id) {
            defaultCommands.remove(defaultCommands.size() - 1);
          }
        }
      }
      List<GraphPart> ignored=new ArrayList<>();
      for (      Loop l : loops) {
        ignored.add(l.loopContinue);
      }
      for (int i=0; i < caseBodies.size(); i++) {
        List<GraphTargetItem> cc=new ArrayList<>();
        GraphPart nextCase=null;
        nextCase=next;
        if (next != null) {
          if (i < caseBodies.size() - 1) {
            if (!caseBodies.get(i).leadsTo(code,caseBodies.get(i + 1),loops)) {
              cc.add(new BreakItem(null,currentLoop.id));
            }
 else {
              nextCase=caseBodies.get(i + 1);
            }
          }
 else           if (!defaultCommands.isEmpty()) {
            if (!caseBodies.get(i).leadsTo(code,defaultPart,loops)) {
              cc.add(new BreakItem(null,currentLoop.id));
            }
 else {
              nextCase=defaultPart;
            }
          }
        }
        List<GraphPart> stopPart2x=new ArrayList<>(stopPart);
        for (        GraphPart b : caseBodies) {
          if (b != caseBodies.get(i)) {
            stopPart2x.add(b);
          }
        }
        if (defaultPart != null) {
          stopPart2x.add(defaultPart);
        }
        if (breakPart != null) {
          stopPart2x.add(breakPart);
        }
        cc.addAll(0,printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,caseBodies.get(i),stopPart2x,loops));
        if (cc.size() >= 2) {
          if (cc.get(cc.size() - 1) instanceof BreakItem) {
            if ((cc.get(cc.size() - 2) instanceof ContinueItem) || (cc.get(cc.size() - 2) instanceof BreakItem)) {
              cc.remove(cc.size() - 1);
            }
          }
        }
        caseCommands.add(cc);
      }
      ret=new ArrayList<>();
      if (!output.isEmpty()) {
        if (output.get(output.size() - 1) instanceof StoreRegisterTreeItem) {
          output.remove(output.size() - 1);
        }
      }
      ret.addAll(output);
      SwitchItem sti=new SwitchItem(null,currentLoop,switchedObject,caseValues,caseCommands,defaultCommands,valuesMapping);
      ret.add(sti);
      currentLoop.phase=2;
      if (next != null) {
        if (ti != null) {
          ret.add(ti);
        }
 else {
          ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,next,stopPart,loops));
        }
      }
    }
  }
  return ret;
}","@Override protected List<GraphTargetItem> check(GraphSource code,List<Object> localData,List<GraphPart> allParts,Stack<GraphTargetItem> stack,GraphPart parent,GraphPart part,List<GraphPart> stopPart,List<Loop> loops,List<GraphTargetItem> output,Loop currentLoop){
  if (!output.isEmpty()) {
    if (output.get(output.size() - 1) instanceof StoreRegisterTreeItem) {
      StoreRegisterTreeItem str=(StoreRegisterTreeItem)output.get(output.size() - 1);
      if (str.value instanceof EnumerateTreeItem) {
        output.remove(output.size() - 1);
      }
    }
  }
  List<GraphTargetItem> ret=null;
  if ((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictEqTreeItem)) {
    GraphTargetItem switchedObject=null;
    if (!output.isEmpty()) {
      if (output.get(output.size() - 1) instanceof StoreRegisterTreeItem) {
        switchedObject=((StoreRegisterTreeItem)output.get(output.size() - 1)).value;
      }
    }
    if (switchedObject == null) {
      switchedObject=new DirectValueTreeItem(null,-1,new Null(),null);
    }
    HashMap<Integer,GraphTargetItem> caseValuesMap=new HashMap<>();
    int pos=0;
    StrictEqTreeItem set=(StrictEqTreeItem)stack.pop();
    caseValuesMap.put(pos,set.rightSide);
    if (set.leftSide instanceof StoreRegisterTreeItem) {
      switchedObject=((StoreRegisterTreeItem)set.leftSide).value;
    }
    List<GraphPart> caseBodyParts=new ArrayList<>();
    caseBodyParts.add(part.nextParts.get(0));
    GraphTargetItem top=null;
    int cnt=1;
    while (part.nextParts.size() > 1 && part.nextParts.get(1).getHeight() > 1 && code.get(part.nextParts.get(1).end >= code.size() ? code.size() - 1 : part.nextParts.get(1).end) instanceof ActionIf && ((top=translatePartGetStack(localData,part.nextParts.get(1),stack)) instanceof StrictEqTreeItem)) {
      cnt++;
      part=part.nextParts.get(1);
      pos++;
      caseBodyParts.add(part.nextParts.get(0));
      set=(StrictEqTreeItem)top;
      caseValuesMap.put(pos,set.rightSide);
    }
    if (cnt == 1) {
      stack.push(set);
    }
 else {
      part=part.nextParts.get(1);
      GraphPart defaultPart=part;
      List<GraphPart> defaultAndLastPart=new ArrayList<>();
      defaultAndLastPart.add(defaultPart);
      defaultAndLastPart.add(caseBodyParts.get(caseBodyParts.size() - 1));
      GraphPart defaultPart2=getCommonPart(defaultAndLastPart,loops);
      List<GraphTargetItem> defaultCommands=new ArrayList<>();
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(defaultPart2);
      defaultCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,defaultPart,stopPart2,loops);
      List<GraphPart> loopContinues=new ArrayList<>();
      for (      Loop l : loops) {
        if (l.loopContinue != null) {
          loopContinues.add(l.loopContinue);
        }
      }
      List<GraphPart> breakParts=new ArrayList<>();
      List<GraphPart> mcp=new ArrayList<>();
      mcp.addAll(caseBodyParts);
      if (defaultPart2 != null) {
        mcp.add(defaultPart2);
      }
      GraphPart breakPart=getMostCommonPart(mcp,loops);
      if ((defaultPart2 != breakPart) && (defaultCommands.isEmpty())) {
        defaultPart=defaultPart2;
      }
      List<GraphTargetItem> caseValues=new ArrayList<>();
      for (int i=0; i < caseBodyParts.size(); i++) {
        if (caseValuesMap.containsKey(i)) {
          caseValues.add(caseValuesMap.get(i));
        }
 else {
          continue;
        }
      }
      List<List<GraphTargetItem>> caseCommands=new ArrayList<>();
      GraphPart next=null;
      next=breakPart;
      GraphTargetItem ti=checkLoop(next,stopPart,loops);
      currentLoop=new Loop(loops.size(),null,next);
      currentLoop.phase=1;
      loops.add(currentLoop);
      List<Integer> valuesMapping=new ArrayList<>();
      List<GraphPart> caseBodies=new ArrayList<>();
      for (int i=0; i < caseValues.size(); i++) {
        GraphPart cur=caseBodyParts.get(i);
        if (!caseBodies.contains(cur)) {
          caseBodies.add(cur);
        }
        valuesMapping.add(caseBodies.indexOf(cur));
      }
      if (defaultPart == breakPart) {
        defaultPart=null;
      }
      if ((defaultPart != null) && (defaultCommands.isEmpty())) {
        List<GraphPart> stopPart2x=new ArrayList<>(stopPart);
        stopPart2x.add(next);
        defaultCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,defaultPart,stopPart2x,loops);
      }
      if (!defaultCommands.isEmpty()) {
        if (defaultCommands.get(defaultCommands.size() - 1) instanceof BreakItem) {
          BreakItem bi=(BreakItem)defaultCommands.get(defaultCommands.size() - 1);
          if (bi.loopId == currentLoop.id) {
            defaultCommands.remove(defaultCommands.size() - 1);
          }
        }
      }
      List<GraphPart> ignored=new ArrayList<>();
      for (      Loop l : loops) {
        ignored.add(l.loopContinue);
      }
      for (int i=0; i < caseBodies.size(); i++) {
        List<GraphTargetItem> cc=new ArrayList<>();
        GraphPart nextCase=null;
        nextCase=next;
        if (next != null) {
          if (i < caseBodies.size() - 1) {
            if (!caseBodies.get(i).leadsTo(code,caseBodies.get(i + 1),loops)) {
              cc.add(new BreakItem(null,currentLoop.id));
            }
 else {
              nextCase=caseBodies.get(i + 1);
            }
          }
 else           if (!defaultCommands.isEmpty()) {
            if (!caseBodies.get(i).leadsTo(code,defaultPart,loops)) {
              cc.add(new BreakItem(null,currentLoop.id));
            }
 else {
              nextCase=defaultPart;
            }
          }
        }
        List<GraphPart> stopPart2x=new ArrayList<>(stopPart);
        for (        GraphPart b : caseBodies) {
          if (b != caseBodies.get(i)) {
            stopPart2x.add(b);
          }
        }
        if (defaultPart != null) {
          stopPart2x.add(defaultPart);
        }
        if (breakPart != null) {
          stopPart2x.add(breakPart);
        }
        cc.addAll(0,printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,caseBodies.get(i),stopPart2x,loops));
        if (cc.size() >= 2) {
          if (cc.get(cc.size() - 1) instanceof BreakItem) {
            if ((cc.get(cc.size() - 2) instanceof ContinueItem) || (cc.get(cc.size() - 2) instanceof BreakItem)) {
              cc.remove(cc.size() - 1);
            }
          }
        }
        caseCommands.add(cc);
      }
      ret=new ArrayList<>();
      if (!output.isEmpty()) {
        if (output.get(output.size() - 1) instanceof StoreRegisterTreeItem) {
          output.remove(output.size() - 1);
        }
      }
      ret.addAll(output);
      SwitchItem sti=new SwitchItem(null,currentLoop,switchedObject,caseValues,caseCommands,defaultCommands,valuesMapping);
      ret.add(sti);
      currentLoop.phase=2;
      if (next != null) {
        if (ti != null) {
          ret.add(ti);
        }
 else {
          ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,next,stopPart,loops));
        }
      }
    }
  }
  return ret;
}",0.9956368754398311
62104,"@Override public String toString(ConstantPool constants){
  String ret;
  ret=hilight(""String_Node_Str"") + className.toStringNoQuotes(Helper.toList(constants));
  if (extendsOp != null) {
    ret+=hilight(""String_Node_Str"") + extendsOp.toStringNoQuotes(Helper.toList(constants));
  }
  if (!implementsOp.isEmpty()) {
    ret+=hilight(""String_Node_Str"");
    boolean first=true;
    for (    GraphTargetItem t : implementsOp) {
      if (!first) {
        ret+=""String_Node_Str"";
      }
      first=false;
      ret+=Action.getWithoutGlobal(t).toString(constants);
    }
  }
  ret+=""String_Node_Str"";
  for (  GraphTargetItem f : functions) {
    ret+=f.toString(constants) + ""String_Node_Str"";
  }
  for (  GraphTargetItem f : staticFunctions) {
    ret+=""String_Node_Str"" + f.toString(constants) + ""String_Node_Str"";
  }
  for (  KeyValue<GraphTargetItem,GraphTargetItem> item : vars) {
    ret+=""String_Node_Str"" + item.key.toStringNoQuotes(constants) + ""String_Node_Str""+ item.value.toStringNoQuotes(constants)+ ""String_Node_Str"";
  }
  for (  KeyValue<GraphTargetItem,GraphTargetItem> item : staticVars) {
    ret+=""String_Node_Str"" + item.key.toStringNoQuotes(constants) + ""String_Node_Str""+ item.value.toStringNoQuotes(constants)+ ""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  return ret;
}","@Override public String toString(ConstantPool constants){
  String ret;
  ret=hilight(""String_Node_Str"") + className.toStringNoQuotes(Helper.toList(constants));
  if (extendsOp != null) {
    ret+=hilight(""String_Node_Str"") + extendsOp.toStringNoQuotes(Helper.toList(constants));
  }
  if (!implementsOp.isEmpty()) {
    ret+=hilight(""String_Node_Str"");
    boolean first=true;
    for (    GraphTargetItem t : implementsOp) {
      if (!first) {
        ret+=""String_Node_Str"";
      }
      first=false;
      ret+=Action.getWithoutGlobal(t).toString(constants);
    }
  }
  ret+=""String_Node_Str"";
  for (  GraphTargetItem f : functions) {
    ret+=f.toString(constants) + ""String_Node_Str"";
  }
  for (  GraphTargetItem f : staticFunctions) {
    ret+=""String_Node_Str"" + f.toString(constants) + ""String_Node_Str"";
  }
  for (  KeyValue<GraphTargetItem,GraphTargetItem> item : vars) {
    ret+=""String_Node_Str"" + item.key.toStringNoQuotes(constants) + ""String_Node_Str""+ item.value.toString(constants)+ ""String_Node_Str"";
  }
  for (  KeyValue<GraphTargetItem,GraphTargetItem> item : staticVars) {
    ret+=""String_Node_Str"" + item.key.toStringNoQuotes(constants) + ""String_Node_Str""+ item.value.toString(constants)+ ""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  return ret;
}",0.9938176197836168
62105,"@Override public String toString(ConstantPool constants){
  String paramStr=""String_Node_Str"";
  for (int t=0; t < arguments.size(); t++) {
    if (t > 0) {
      paramStr+=hilight(""String_Node_Str"");
    }
    paramStr+=arguments.get(t).toStringNL(constants);
  }
  boolean blankMethod=false;
  if (methodName instanceof DirectValueTreeItem) {
    if (((DirectValueTreeItem)methodName).value instanceof Undefined) {
      blankMethod=true;
    }
    if (((DirectValueTreeItem)methodName).value instanceof String) {
      if (((DirectValueTreeItem)methodName).value.equals(""String_Node_Str"")) {
        blankMethod=true;
      }
    }
  }
  if (blankMethod) {
    return scriptObject.toString(constants) + hilight(""String_Node_Str"") + paramStr+ hilight(""String_Node_Str"");
  }
  return scriptObject.toString(constants) + hilight(""String_Node_Str"") + stripQuotes(methodName,constants)+ hilight(""String_Node_Str"")+ paramStr+ hilight(""String_Node_Str"");
}","@Override public String toString(ConstantPool constants){
  String paramStr=""String_Node_Str"";
  for (int t=0; t < arguments.size(); t++) {
    if (t > 0) {
      paramStr+=hilight(""String_Node_Str"");
    }
    paramStr+=arguments.get(t).toStringNL(constants);
  }
  boolean blankMethod=false;
  if (methodName instanceof DirectValueTreeItem) {
    if (((DirectValueTreeItem)methodName).value instanceof Undefined) {
      blankMethod=true;
    }
    if (((DirectValueTreeItem)methodName).value instanceof String) {
      if (((DirectValueTreeItem)methodName).value.equals(""String_Node_Str"")) {
        blankMethod=true;
      }
    }
  }
  if (blankMethod) {
    return scriptObject.toString(constants) + hilight(""String_Node_Str"") + paramStr+ hilight(""String_Node_Str"");
  }
  String soStr=scriptObject.toString(constants);
  if (scriptObject.precedence > this.precedence) {
    soStr=""String_Node_Str"" + soStr + ""String_Node_Str"";
  }
  return soStr + hilight(""String_Node_Str"") + stripQuotes(methodName,constants)+ hilight(""String_Node_Str"")+ paramStr+ hilight(""String_Node_Str"");
}",0.9273797841020608
62106,"public boolean contains(Object key){
  return cacheFiles.containsKey(key);
}","public boolean contains(Object key){
  if (storageType == STORAGE_FILES) {
    return cacheFiles.containsKey(key);
  }
 else   if (storageType == STORAGE_MEMORY) {
    return cacheMemory.containsKey(key);
  }
  return false;
}",0.5033112582781457
62107,"public void setScript(ScriptPack scriptLeaf,List<ABCContainerTag> abcList){
  int scriptIndex=scriptLeaf.scriptIndex;
  ScriptInfo script=null;
  ABC abc=scriptLeaf.abc;
  if (scriptIndex > -1) {
    script=abc.script_info[scriptIndex];
  }
  if (script == null) {
    highlights=new ArrayList<>();
    traitHighlights=new ArrayList<>();
    methodHighlights=new ArrayList<>();
    this.script=scriptLeaf;
    return;
  }
  setText(""String_Node_Str"" + translate(""String_Node_Str"") + ""String_Node_Str"");
  String hilightedCode=""String_Node_Str"";
  cacheScriptPack(scriptLeaf,abcList);
  CachedDecompilation cd=getCached(scriptLeaf);
  hilightedCode=cd.text;
  highlights=cd.getHighlights();
  traitHighlights=cd.getTraitHighlights();
  methodHighlights=cd.getMethodHighlights();
  classHighlights=cd.getClassHighlights();
  this.abc=abc;
  this.abcList=abcList;
  this.script=scriptLeaf;
  setText(hilightedCode);
}","public void setScript(ScriptPack scriptLeaf,List<ABCContainerTag> abcList){
  int scriptIndex=scriptLeaf.scriptIndex;
  ScriptInfo script=null;
  ABC abc=scriptLeaf.abc;
  if (scriptIndex > -1) {
    script=abc.script_info[scriptIndex];
  }
  if (script == null) {
    highlights=new ArrayList<>();
    traitHighlights=new ArrayList<>();
    methodHighlights=new ArrayList<>();
    this.script=scriptLeaf;
    return;
  }
  setText(""String_Node_Str"" + translate(""String_Node_Str"") + ""String_Node_Str"");
  this.abc=abc;
  this.abcList=abcList;
  this.script=scriptLeaf;
  String hilightedCode=""String_Node_Str"";
  cacheScriptPack(scriptLeaf,abcList);
  CachedDecompilation cd=getCached(scriptLeaf);
  hilightedCode=cd.text;
  highlights=cd.getHighlights();
  traitHighlights=cd.getTraitHighlights();
  methodHighlights=cd.getMethodHighlights();
  classHighlights=cd.getClassHighlights();
  setText(hilightedCode);
}",0.9277899343544858
62108,"public Object get(Object key){
  if (storageType == STORAGE_FILES) {
    if (!cacheFiles.containsKey(key)) {
      return null;
    }
    File f=cacheFiles.get(key);
    try (FileInputStream fis=new FileInputStream(f)){
      ObjectInputStream ois=new ObjectInputStream(fis);
      return ois.readObject();
    }
 catch (    IOException|ClassNotFoundException ex) {
      Logger.getLogger(Helper.class.getName()).log(Level.SEVERE,null,ex);
    }
    return null;
  }
 else   if (storageType == STORAGE_MEMORY) {
    if (!cacheMemory.containsKey(key)) {
      return cacheMemory.get(key);
    }
    return null;
  }
  return null;
}","public Object get(Object key){
  if (storageType == STORAGE_FILES) {
    if (!cacheFiles.containsKey(key)) {
      return null;
    }
    File f=cacheFiles.get(key);
    try (FileInputStream fis=new FileInputStream(f)){
      ObjectInputStream ois=new ObjectInputStream(fis);
      return ois.readObject();
    }
 catch (    IOException|ClassNotFoundException ex) {
      Logger.getLogger(Helper.class.getName()).log(Level.SEVERE,null,ex);
    }
    return null;
  }
 else   if (storageType == STORAGE_MEMORY) {
    if (cacheMemory.containsKey(key)) {
      return cacheMemory.get(key);
    }
    return null;
  }
  return null;
}",0.999206978588422
62109,"/** 
 * Reads one PIX24 value from the stream
 * @return PIX24 value
 * @throws IOException
 */
public PIX24 readPIX24() throws IOException {
  PIX24 ret=new PIX24();
  readUI8();
  ret.red=readUI8();
  ret.green=readUI8();
  ret.blue=readUI8();
  return ret;
}","/** 
 * Reads one PIX24 value from the stream
 * @return PIX24 value
 * @throws IOException
 */
public PIX24 readPIX24() throws IOException {
  PIX24 ret=new PIX24();
  ret.reserved=readUI8();
  ret.red=readUI8();
  ret.green=readUI8();
  ret.blue=readUI8();
  return ret;
}",0.9757009345794392
62110,"/** 
 * Writes PIX24 value to the stream
 * @param value PIX24 value
 * @throws IOException
 */
public void writePIX24(PIX24 value) throws IOException {
  writeUI8(0);
  writeUI8(value.red);
  writeUI8(value.green);
  writeUI8(value.blue);
}","/** 
 * Writes PIX24 value to the stream
 * @param value PIX24 value
 * @throws IOException
 */
public void writePIX24(PIX24 value) throws IOException {
  writeUI8(value.reserved);
  writeUI8(value.red);
  writeUI8(value.green);
  writeUI8(value.blue);
}",0.8848484848484849
62111,"public static void convertSWF(SWF swf,String swfFileName,String outfile,boolean compressed,String generator,String generatorVerName,String generatorVersion,boolean paralel){
  File file=new File(outfile);
  File outDir=file.getParentFile();
  String domDocument=""String_Node_Str"";
  String baseName=swfFileName;
  File f=new File(baseName);
  baseName=f.getName();
  if (baseName.contains(""String_Node_Str"")) {
    baseName=baseName.substring(0,baseName.lastIndexOf(""String_Node_Str""));
  }
  HashMap<String,byte[]> files=new HashMap<>();
  HashMap<Integer,CharacterTag> characters=getCharacters(swf.tags);
  List<Integer> oneInstaceShapes=getOneInstanceShapes(swf.tags,characters);
  Map<Integer,String> characterClasses=getCharacterClasses(swf.tags);
  Map<Integer,String> characterVariables=getCharacterVariables(swf.tags);
  FileAttributesTag fa=null;
  for (  Tag t : swf.tags) {
    if (t instanceof FileAttributesTag) {
      fa=(FileAttributesTag)t;
    }
  }
  boolean useAS3=false;
  boolean useNetwork=false;
  if (fa != null) {
    useAS3=fa.actionScript3;
    useNetwork=fa.useNetwork;
  }
  String backgroundColor=""String_Node_Str"";
  for (  Tag t : swf.tags) {
    if (t instanceof SetBackgroundColorTag) {
      SetBackgroundColorTag sbc=(SetBackgroundColorTag)t;
      backgroundColor=sbc.backgroundColor.toHexRGB();
    }
  }
  domDocument+=""String_Node_Str"" + generator + ""String_Node_Str""+ generatorVerName+ ""String_Node_Str""+ generatorVersion+ ""String_Node_Str"";
  domDocument+=""String_Node_Str"" + backgroundColor + ""String_Node_Str"";
  domDocument+=""String_Node_Str"" + swf.frameRate + ""String_Node_Str"";
  double width=twipToPixel(swf.displayRect.getWidth());
  double height=twipToPixel(swf.displayRect.getHeight());
  if (Double.compare(width,550) != 0) {
    domDocument+=""String_Node_Str"" + doubleToString(width) + ""String_Node_Str"";
  }
  if (Double.compare(height,400) != 0) {
    domDocument+=""String_Node_Str"" + doubleToString(height) + ""String_Node_Str"";
  }
  domDocument+=""String_Node_Str"";
  domDocument+=convertLibrary(swf,characterVariables,characterClasses,oneInstaceShapes,backgroundColor,swf.tags,characters,files);
  domDocument+=""String_Node_Str"";
  domDocument+=convertTimeline(0,oneInstaceShapes,backgroundColor,swf.tags,swf.tags,characters,""String_Node_Str"");
  domDocument+=""String_Node_Str"";
  domDocument+=""String_Node_Str"";
  domDocument=prettyFormatXML(domDocument);
  for (  Tag t : swf.tags) {
    if (t instanceof DoInitActionTag) {
      DoInitActionTag dia=(DoInitActionTag)t;
      int chid=dia.getCharacterID();
      if (characters.containsKey(chid)) {
        if (characters.get(chid) instanceof DefineSpriteTag) {
          DefineSpriteTag sprite=(DefineSpriteTag)characters.get(chid);
          if (sprite.subTags.isEmpty()) {
            String data=convertActionScript(dia);
            String expPath=dia.getExportName();
            final String prefix=""String_Node_Str"";
            if (expPath.startsWith(prefix)) {
              expPath=expPath.substring(prefix.length());
            }
            String expDir=""String_Node_Str"";
            if (expPath.contains(""String_Node_Str"")) {
              expDir=expPath.substring(0,expPath.lastIndexOf(""String_Node_Str""));
              expDir=expDir.replace(""String_Node_Str"",File.separator);
            }
            expPath=expPath.replace(""String_Node_Str"",File.separator);
            File cdir=new File(outDir.getAbsolutePath() + File.separator + expDir);
            if (!cdir.exists()) {
              cdir.mkdirs();
            }
            try {
              writeFile(data.getBytes(""String_Node_Str""),outDir.getAbsolutePath() + File.separator + expPath+ ""String_Node_Str"");
            }
 catch (            UnsupportedEncodingException ex) {
              Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
            }
          }
        }
      }
    }
  }
  String publishSettings=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + baseName + ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ width+ ""String_Node_Str""+ ""String_Node_Str""+ height+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (useAS3 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (swf.compressed ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ (swf.lzma ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (useNetwork ? 1 : 0)+ ""String_Node_Str""+ ""String_Node_Str""+ xmlString(characterClasses.containsKey(0) ? characterClasses.get(0) : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ width+ ""String_Node_Str""+ ""String_Node_Str""+ height+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ width+ ""String_Node_Str""+ ""String_Node_Str""+ height+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ width+ ""String_Node_Str""+ ""String_Node_Str""+ height+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ width+ ""String_Node_Str""+ ""String_Node_Str""+ height+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  if (compressed) {
    try (ZipOutputStream out=new ZipOutputStream(new FileOutputStream(outfile))){
      out.putNextEntry(new ZipEntry(""String_Node_Str""));
      out.write(domDocument.getBytes(""String_Node_Str""));
      out.putNextEntry(new ZipEntry(""String_Node_Str""));
      out.write(publishSettings.getBytes(""String_Node_Str""));
      for (      String fileName : files.keySet()) {
        out.putNextEntry(new ZipEntry(""String_Node_Str"" + fileName));
        out.write(files.get(fileName));
      }
    }
 catch (    IOException ex) {
      Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
 else {
    outDir.mkdirs();
    try {
      writeFile(domDocument.getBytes(""String_Node_Str""),outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
    }
 catch (    UnsupportedEncodingException ex) {
      Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
    }
    try {
      writeFile(publishSettings.getBytes(""String_Node_Str""),outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
    }
 catch (    UnsupportedEncodingException ex) {
      Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
    }
    File libraryDir=new File(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
    libraryDir.mkdir();
    for (    String fileName : files.keySet()) {
      writeFile(files.get(fileName),libraryDir.getAbsolutePath() + File.separator + fileName);
    }
    try {
      writeFile(""String_Node_Str"".getBytes(""String_Node_Str""),outfile);
    }
 catch (    UnsupportedEncodingException ex) {
      Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
  if (useAS3) {
    try {
      swf.exportActionScript(outDir.getAbsolutePath(),false,paralel);
    }
 catch (    Exception ex) {
      Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
}","public static void convertSWF(SWF swf,String swfFileName,String outfile,boolean compressed,String generator,String generatorVerName,String generatorVersion,boolean paralel){
  File file=new File(outfile);
  File outDir=file.getParentFile();
  String domDocument=""String_Node_Str"";
  String baseName=swfFileName;
  File f=new File(baseName);
  baseName=f.getName();
  if (baseName.contains(""String_Node_Str"")) {
    baseName=baseName.substring(0,baseName.lastIndexOf(""String_Node_Str""));
  }
  HashMap<String,byte[]> files=new HashMap<>();
  HashMap<String,byte[]> datfiles=new HashMap<>();
  HashMap<Integer,CharacterTag> characters=getCharacters(swf.tags);
  List<Integer> oneInstaceShapes=getOneInstanceShapes(swf.tags,characters);
  Map<Integer,String> characterClasses=getCharacterClasses(swf.tags);
  Map<Integer,String> characterVariables=getCharacterVariables(swf.tags);
  FileAttributesTag fa=null;
  for (  Tag t : swf.tags) {
    if (t instanceof FileAttributesTag) {
      fa=(FileAttributesTag)t;
    }
  }
  boolean useAS3=false;
  boolean useNetwork=false;
  if (fa != null) {
    useAS3=fa.actionScript3;
    useNetwork=fa.useNetwork;
  }
  String backgroundColor=""String_Node_Str"";
  for (  Tag t : swf.tags) {
    if (t instanceof SetBackgroundColorTag) {
      SetBackgroundColorTag sbc=(SetBackgroundColorTag)t;
      backgroundColor=sbc.backgroundColor.toHexRGB();
    }
  }
  domDocument+=""String_Node_Str"" + generator + ""String_Node_Str""+ generatorVerName+ ""String_Node_Str""+ generatorVersion+ ""String_Node_Str"";
  domDocument+=""String_Node_Str"" + backgroundColor + ""String_Node_Str"";
  domDocument+=""String_Node_Str"" + swf.frameRate + ""String_Node_Str"";
  double width=twipToPixel(swf.displayRect.getWidth());
  double height=twipToPixel(swf.displayRect.getHeight());
  if (Double.compare(width,550) != 0) {
    domDocument+=""String_Node_Str"" + doubleToString(width) + ""String_Node_Str"";
  }
  if (Double.compare(height,400) != 0) {
    domDocument+=""String_Node_Str"" + doubleToString(height) + ""String_Node_Str"";
  }
  domDocument+=""String_Node_Str"";
  domDocument+=convertLibrary(swf,characterVariables,characterClasses,oneInstaceShapes,backgroundColor,swf.tags,characters,files,datfiles);
  domDocument+=""String_Node_Str"";
  domDocument+=convertTimeline(0,oneInstaceShapes,backgroundColor,swf.tags,swf.tags,characters,""String_Node_Str"");
  domDocument+=""String_Node_Str"";
  domDocument+=""String_Node_Str"";
  domDocument=prettyFormatXML(domDocument);
  for (  Tag t : swf.tags) {
    if (t instanceof DoInitActionTag) {
      DoInitActionTag dia=(DoInitActionTag)t;
      int chid=dia.getCharacterID();
      if (characters.containsKey(chid)) {
        if (characters.get(chid) instanceof DefineSpriteTag) {
          DefineSpriteTag sprite=(DefineSpriteTag)characters.get(chid);
          if (sprite.subTags.isEmpty()) {
            String data=convertActionScript(dia);
            String expPath=dia.getExportName();
            final String prefix=""String_Node_Str"";
            if (expPath.startsWith(prefix)) {
              expPath=expPath.substring(prefix.length());
            }
            String expDir=""String_Node_Str"";
            if (expPath.contains(""String_Node_Str"")) {
              expDir=expPath.substring(0,expPath.lastIndexOf(""String_Node_Str""));
              expDir=expDir.replace(""String_Node_Str"",File.separator);
            }
            expPath=expPath.replace(""String_Node_Str"",File.separator);
            File cdir=new File(outDir.getAbsolutePath() + File.separator + expDir);
            if (!cdir.exists()) {
              cdir.mkdirs();
            }
            try {
              writeFile(data.getBytes(""String_Node_Str""),outDir.getAbsolutePath() + File.separator + expPath+ ""String_Node_Str"");
            }
 catch (            UnsupportedEncodingException ex) {
              Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
            }
          }
        }
      }
    }
  }
  String publishSettings=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + baseName + ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ width+ ""String_Node_Str""+ ""String_Node_Str""+ height+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (useAS3 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (swf.compressed ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ (swf.lzma ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (useNetwork ? 1 : 0)+ ""String_Node_Str""+ ""String_Node_Str""+ xmlString(characterClasses.containsKey(0) ? characterClasses.get(0) : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ width+ ""String_Node_Str""+ ""String_Node_Str""+ height+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ width+ ""String_Node_Str""+ ""String_Node_Str""+ height+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ width+ ""String_Node_Str""+ ""String_Node_Str""+ height+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ width+ ""String_Node_Str""+ ""String_Node_Str""+ height+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  if (compressed) {
    try (ZipOutputStream out=new ZipOutputStream(new FileOutputStream(outfile))){
      out.putNextEntry(new ZipEntry(""String_Node_Str""));
      out.write(domDocument.getBytes(""String_Node_Str""));
      out.putNextEntry(new ZipEntry(""String_Node_Str""));
      out.write(publishSettings.getBytes(""String_Node_Str""));
      for (      String fileName : files.keySet()) {
        out.putNextEntry(new ZipEntry(""String_Node_Str"" + fileName));
        out.write(files.get(fileName));
      }
      for (      String fileName : datfiles.keySet()) {
        out.putNextEntry(new ZipEntry(""String_Node_Str"" + fileName));
        out.write(datfiles.get(fileName));
      }
    }
 catch (    IOException ex) {
      Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
 else {
    outDir.mkdirs();
    try {
      writeFile(domDocument.getBytes(""String_Node_Str""),outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
    }
 catch (    UnsupportedEncodingException ex) {
      Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
    }
    try {
      writeFile(publishSettings.getBytes(""String_Node_Str""),outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
    }
 catch (    UnsupportedEncodingException ex) {
      Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
    }
    File libraryDir=new File(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
    libraryDir.mkdir();
    File binDir=new File(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
    binDir.mkdir();
    for (    String fileName : files.keySet()) {
      writeFile(files.get(fileName),libraryDir.getAbsolutePath() + File.separator + fileName);
    }
    for (    String fileName : datfiles.keySet()) {
      writeFile(datfiles.get(fileName),binDir.getAbsolutePath() + File.separator + fileName);
    }
    try {
      writeFile(""String_Node_Str"".getBytes(""String_Node_Str""),outfile);
    }
 catch (    UnsupportedEncodingException ex) {
      Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
  if (useAS3) {
    try {
      swf.exportActionScript(outDir.getAbsolutePath(),false,paralel);
    }
 catch (    Exception ex) {
      Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
}",0.9773924096604322
62112,"public static String convertSoundLayer(int layerIndex,String backgroundColor,HashMap<Integer,CharacterTag> characters,List<Tag> tags,List<Tag> timeLineTags){
  String ret=""String_Node_Str"";
  StartSoundTag lastStartSound=null;
  SoundStreamHeadTypeTag lastSoundStreamHead=null;
  StartSoundTag startSound=null;
  SoundStreamHeadTypeTag soundStreamHead=null;
  int duration=1;
  int frame=0;
  for (  Tag t : timeLineTags) {
    if (t instanceof StartSoundTag) {
      startSound=(StartSoundTag)t;
    }
    if (t instanceof SoundStreamHeadTypeTag) {
      soundStreamHead=(SoundStreamHeadTypeTag)t;
    }
    if (t instanceof ShowFrameTag) {
      if (soundStreamHead != null || startSound != null) {
        if (lastSoundStreamHead != null || lastStartSound != null) {
          ret+=convertFrame(false,characters,tags,lastSoundStreamHead,lastStartSound,frame,null,false,duration,""String_Node_Str"",""String_Node_Str"");
        }
        frame+=duration;
        duration=1;
        lastSoundStreamHead=soundStreamHead;
        lastStartSound=startSound;
        soundStreamHead=null;
        startSound=null;
      }
 else {
        duration++;
      }
    }
  }
  if (lastSoundStreamHead != null || lastStartSound != null) {
    if (frame < 0) {
      frame=0;
      duration=1;
    }
    ret+=convertFrame(false,characters,tags,lastSoundStreamHead,lastStartSound,frame,null,false,duration,""String_Node_Str"",""String_Node_Str"");
  }
  if (!ret.equals(""String_Node_Str"")) {
    ret=""String_Node_Str"" + layerIndex + ""String_Node_Str""+ backgroundColor+ ""String_Node_Str""+ ""String_Node_Str""+ ret+ ""String_Node_Str""+ ""String_Node_Str"";
  }
  return ret;
}","public static String convertSoundLayer(int layerIndex,String backgroundColor,HashMap<Integer,CharacterTag> characters,List<Tag> tags,List<Tag> timeLineTags){
  String ret=""String_Node_Str"";
  StartSoundTag lastStartSound=null;
  SoundStreamHeadTypeTag lastSoundStreamHead=null;
  StartSoundTag startSound=null;
  SoundStreamHeadTypeTag soundStreamHead=null;
  int duration=1;
  int frame=0;
  for (  Tag t : timeLineTags) {
    if (t instanceof StartSoundTag) {
      startSound=(StartSoundTag)t;
    }
    if (t instanceof SoundStreamHeadTypeTag) {
      soundStreamHead=(SoundStreamHeadTypeTag)t;
    }
    if (t instanceof ShowFrameTag) {
      if (soundStreamHead != null || startSound != null) {
        if (lastSoundStreamHead != null || lastStartSound != null) {
          ret+=convertFrame(false,characters,tags,lastSoundStreamHead,lastStartSound,frame,null,false,duration,""String_Node_Str"",""String_Node_Str"");
        }
        frame+=duration;
        duration=1;
        lastSoundStreamHead=soundStreamHead;
        lastStartSound=startSound;
        soundStreamHead=null;
        startSound=null;
      }
 else {
        duration++;
      }
    }
  }
  if (lastSoundStreamHead != null || lastStartSound != null) {
    if (frame < 0) {
      frame=0;
      duration=1;
    }
    ret+=convertFrame(false,characters,tags,lastSoundStreamHead,lastStartSound,frame,null,false,duration,""String_Node_Str"",""String_Node_Str"");
  }
  if (!ret.equals(""String_Node_Str"")) {
    ret=""String_Node_Str"" + layerIndex + ""String_Node_Str""+ randomOutlineColor()+ ""String_Node_Str""+ ""String_Node_Str""+ ret+ ""String_Node_Str""+ ""String_Node_Str"";
  }
  return ret;
}",0.9924357034795764
62113,"public static String convertTimeline(int spriteId,List<Integer> oneInstanceShapes,String backgroundColor,List<Tag> tags,List<Tag> timelineTags,HashMap<Integer,CharacterTag> characters,String name){
  String ret=""String_Node_Str"";
  ret+=""String_Node_Str"" + name + ""String_Node_Str"";
  ret+=""String_Node_Str"";
  int layerCount=getLayerCount(timelineTags);
  Stack<Integer> parentLayers=new Stack<>();
  int index=0;
  for (int d=layerCount; d >= 1; d--, index++) {
    for (    Tag t : timelineTags) {
      if (t instanceof PlaceObjectTypeTag) {
        PlaceObjectTypeTag po=(PlaceObjectTypeTag)t;
        if (po.getClipDepth() == d) {
          for (int m=po.getDepth(); m < po.getClipDepth(); m++) {
            parentLayers.push(index);
          }
          ret+=""String_Node_Str"" + (index + 1) + ""String_Node_Str""+ backgroundColor+ ""String_Node_Str"";
          ret+=""String_Node_Str"";
          ret+=""String_Node_Str"";
          ret+=convertFrames(""String_Node_Str"",""String_Node_Str"",oneInstanceShapes,tags,timelineTags,characters,po.getDepth());
          ret+=""String_Node_Str"";
          index++;
          break;
        }
      }
    }
    boolean hasClipDepth=false;
    for (    Tag t : timelineTags) {
      if (t instanceof PlaceObjectTypeTag) {
        PlaceObjectTypeTag po=(PlaceObjectTypeTag)t;
        if (po.getDepth() == d) {
          if (po.getClipDepth() != -1) {
            hasClipDepth=true;
            break;
          }
        }
      }
    }
    if (hasClipDepth) {
      index--;
      continue;
    }
    int parentLayer=-1;
    if (!parentLayers.isEmpty()) {
      parentLayer=parentLayers.pop();
    }
    String layerPrev=""String_Node_Str"";
    layerPrev+=""String_Node_Str"" + (index + 1) + ""String_Node_Str""+ backgroundColor+ ""String_Node_Str"";
    if (d == 1) {
      layerPrev+=""String_Node_Str"";
    }
    if (parentLayer != -1) {
      if (parentLayer != d) {
        layerPrev+=""String_Node_Str"" + (parentLayer) + ""String_Node_Str"";
      }
    }
    layerPrev+=""String_Node_Str"";
    String layerAfter=""String_Node_Str"";
    String cf=convertFrames(layerPrev,layerAfter,oneInstanceShapes,tags,timelineTags,characters,d);
    if (cf.equals(""String_Node_Str"")) {
      index--;
    }
    ret+=cf;
  }
  int soundLayerIndex=layerCount;
  layerCount++;
  ret+=convertSoundLayer(soundLayerIndex,backgroundColor,characters,tags,timelineTags);
  int actionScriptLayerIndex=layerCount;
  layerCount++;
  ret+=convertActionScriptLayer(actionScriptLayerIndex,spriteId,tags,timelineTags,backgroundColor);
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  return ret;
}","public static String convertTimeline(int spriteId,List<Integer> oneInstanceShapes,String backgroundColor,List<Tag> tags,List<Tag> timelineTags,HashMap<Integer,CharacterTag> characters,String name){
  String ret=""String_Node_Str"";
  ret+=""String_Node_Str"" + name + ""String_Node_Str"";
  ret+=""String_Node_Str"";
  int layerCount=getLayerCount(timelineTags);
  Stack<Integer> parentLayers=new Stack<>();
  int index=0;
  for (int d=layerCount; d >= 1; d--, index++) {
    for (    Tag t : timelineTags) {
      if (t instanceof PlaceObjectTypeTag) {
        PlaceObjectTypeTag po=(PlaceObjectTypeTag)t;
        if (po.getClipDepth() == d) {
          for (int m=po.getDepth(); m < po.getClipDepth(); m++) {
            parentLayers.push(index);
          }
          ret+=""String_Node_Str"" + (index + 1) + ""String_Node_Str""+ randomOutlineColor()+ ""String_Node_Str"";
          ret+=""String_Node_Str"";
          ret+=""String_Node_Str"";
          ret+=convertFrames(""String_Node_Str"",""String_Node_Str"",oneInstanceShapes,tags,timelineTags,characters,po.getDepth());
          ret+=""String_Node_Str"";
          index++;
          break;
        }
      }
    }
    boolean hasClipDepth=false;
    for (    Tag t : timelineTags) {
      if (t instanceof PlaceObjectTypeTag) {
        PlaceObjectTypeTag po=(PlaceObjectTypeTag)t;
        if (po.getDepth() == d) {
          if (po.getClipDepth() != -1) {
            hasClipDepth=true;
            break;
          }
        }
      }
    }
    if (hasClipDepth) {
      index--;
      continue;
    }
    int parentLayer=-1;
    if (!parentLayers.isEmpty()) {
      parentLayer=parentLayers.pop();
    }
    String layerPrev=""String_Node_Str"";
    layerPrev+=""String_Node_Str"" + (index + 1) + ""String_Node_Str""+ randomOutlineColor()+ ""String_Node_Str"";
    if (d == 1) {
      layerPrev+=""String_Node_Str"";
    }
    if (parentLayer != -1) {
      if (parentLayer != d) {
        layerPrev+=""String_Node_Str"" + (parentLayer) + ""String_Node_Str"";
      }
    }
    layerPrev+=""String_Node_Str"";
    String layerAfter=""String_Node_Str"";
    String cf=convertFrames(layerPrev,layerAfter,oneInstanceShapes,tags,timelineTags,characters,d);
    if (cf.equals(""String_Node_Str"")) {
      index--;
    }
    ret+=cf;
  }
  int soundLayerIndex=layerCount;
  layerCount++;
  ret+=convertSoundLayer(soundLayerIndex,backgroundColor,characters,tags,timelineTags);
  int actionScriptLayerIndex=layerCount;
  layerCount++;
  ret+=convertActionScriptLayer(actionScriptLayerIndex,spriteId,tags,timelineTags,backgroundColor);
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  return ret;
}",0.9911877394636016
62114,"private static String convertVideoInstance(MATRIX matrix,DefineVideoStreamTag video){
  String ret=""String_Node_Str"" + video.characterID + ""String_Node_Str""+ (20 * video.width)+ ""String_Node_Str""+ (20 * video.height)+ ""String_Node_Str"";
  ret+=""String_Node_Str"";
  ret+=convertMatrix(matrix);
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  return ret;
}","private static String convertVideoInstance(String instanceName,MATRIX matrix,DefineVideoStreamTag video){
  String ret=""String_Node_Str"" + video.characterID + ""String_Node_Str""+ (20 * video.width)+ ""String_Node_Str""+ (20 * video.height)+ ""String_Node_Str"";
  if (instanceName != null) {
    ret+=""String_Node_Str"" + xmlString(instanceName) + ""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  ret+=convertMatrix(matrix);
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  return ret;
}",0.8504854368932039
62115,"public static String convertActionScriptLayer(int layerIndex,int spriteId,List<Tag> tags,List<Tag> timeLineTags,String backgroundColor){
  String ret=""String_Node_Str"";
  String script=""String_Node_Str"";
  int duration=0;
  int frame=0;
  for (  Tag t : tags) {
    if (t instanceof DoInitActionTag) {
      DoInitActionTag dia=(DoInitActionTag)t;
      if (dia.spriteId == spriteId) {
        script+=convertActionScript(dia);
      }
    }
  }
  if (!script.equals(""String_Node_Str"")) {
    script=""String_Node_Str"" + script + ""String_Node_Str"";
  }
  for (  Tag t : timeLineTags) {
    if (t instanceof DoActionTag) {
      DoActionTag da=(DoActionTag)t;
      script+=convertActionScript(da);
    }
    if (t instanceof ShowFrameTag) {
      if (script.equals(""String_Node_Str"")) {
        duration++;
      }
 else {
        if (duration > 0) {
          ret+=""String_Node_Str"" + (frame - duration) + ""String_Node_Str"";
          if (duration > 1) {
            ret+=""String_Node_Str"" + duration + ""String_Node_Str"";
          }
          ret+=""String_Node_Str"" + KEY_MODE_NORMAL + ""String_Node_Str"";
          ret+=""String_Node_Str"";
          ret+=""String_Node_Str"";
          ret+=""String_Node_Str"";
        }
        ret+=""String_Node_Str"" + frame + ""String_Node_Str"";
        ret+=""String_Node_Str"" + KEY_MODE_NORMAL + ""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=script;
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        script=""String_Node_Str"";
        duration=0;
      }
      frame++;
    }
  }
  if (!ret.equals(""String_Node_Str"")) {
    ret=""String_Node_Str"" + (layerIndex + 1) + ""String_Node_Str""+ backgroundColor+ ""String_Node_Str""+ ""String_Node_Str""+ ret+ ""String_Node_Str""+ ""String_Node_Str"";
  }
  return ret;
}","public static String convertActionScriptLayer(int layerIndex,int spriteId,List<Tag> tags,List<Tag> timeLineTags,String backgroundColor){
  String ret=""String_Node_Str"";
  String script=""String_Node_Str"";
  int duration=0;
  int frame=0;
  for (  Tag t : tags) {
    if (t instanceof DoInitActionTag) {
      DoInitActionTag dia=(DoInitActionTag)t;
      if (dia.spriteId == spriteId) {
        script+=convertActionScript(dia);
      }
    }
  }
  if (!script.equals(""String_Node_Str"")) {
    script=""String_Node_Str"" + script + ""String_Node_Str"";
  }
  for (  Tag t : timeLineTags) {
    if (t instanceof DoActionTag) {
      DoActionTag da=(DoActionTag)t;
      script+=convertActionScript(da);
    }
    if (t instanceof ShowFrameTag) {
      if (script.equals(""String_Node_Str"")) {
        duration++;
      }
 else {
        if (duration > 0) {
          ret+=""String_Node_Str"" + (frame - duration) + ""String_Node_Str"";
          if (duration > 1) {
            ret+=""String_Node_Str"" + duration + ""String_Node_Str"";
          }
          ret+=""String_Node_Str"" + KEY_MODE_NORMAL + ""String_Node_Str"";
          ret+=""String_Node_Str"";
          ret+=""String_Node_Str"";
          ret+=""String_Node_Str"";
        }
        ret+=""String_Node_Str"" + frame + ""String_Node_Str"";
        ret+=""String_Node_Str"" + KEY_MODE_NORMAL + ""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=script;
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        script=""String_Node_Str"";
        duration=0;
      }
      frame++;
    }
  }
  if (!ret.equals(""String_Node_Str"")) {
    ret=""String_Node_Str"" + (layerIndex + 1) + ""String_Node_Str""+ randomOutlineColor()+ ""String_Node_Str""+ ""String_Node_Str""+ ret+ ""String_Node_Str""+ ""String_Node_Str"";
  }
  return ret;
}",0.9937550909584578
62116,"public static String convertText(List<Tag> tags,TextTag tag,MATRIX matrix,List<FILTER> filters){
  String ret=""String_Node_Str"";
  if (matrix == null) {
    matrix=new MATRIX();
  }
  CSMTextSettingsTag csmts=null;
  String filterStr=""String_Node_Str"";
  if (filters != null) {
    filterStr+=""String_Node_Str"";
    for (    FILTER f : filters) {
      filterStr+=convertFilter(f);
    }
    filterStr+=""String_Node_Str"";
  }
  for (  Tag t : tags) {
    if (t instanceof CSMTextSettingsTag) {
      CSMTextSettingsTag c=(CSMTextSettingsTag)t;
      if (c.textID == tag.getCharacterID()) {
        csmts=c;
        break;
      }
    }
  }
  String fontRenderingMode=""String_Node_Str"";
  String antiAlias=""String_Node_Str"";
  if (csmts != null) {
    if (csmts.thickness == 0 & csmts.sharpness == 0) {
      fontRenderingMode=null;
    }
 else {
      fontRenderingMode=""String_Node_Str"";
    }
    antiAlias=""String_Node_Str"" + doubleToString(csmts.sharpness) + ""String_Node_Str""+ doubleToString(csmts.thickness)+ ""String_Node_Str"";
  }
  String matStr=""String_Node_Str"";
  matStr+=""String_Node_Str"";
  RECT bounds=tag.getBounds();
  matrix.translateX+=bounds.Xmin + 40;
  matrix.translateY+=bounds.Ymin + 40;
  matStr+=convertMatrix(matrix);
  matStr+=""String_Node_Str"";
  if ((tag instanceof DefineTextTag) || (tag instanceof DefineText2Tag)) {
    List<TEXTRECORD> textRecords=new ArrayList<>();
    if (tag instanceof DefineTextTag) {
      textRecords=((DefineTextTag)tag).textRecords;
    }
 else     if (tag instanceof DefineText2Tag) {
      textRecords=((DefineText2Tag)tag).textRecords;
    }
    looprec:     for (    TEXTRECORD rec : textRecords) {
      if (rec.styleFlagsHasFont) {
        for (        Tag t : tags) {
          if (t instanceof FontTag) {
            FontTag ft=(FontTag)t;
            if (ft.getFontId() == rec.fontId) {
              if (ft.isSmall()) {
                fontRenderingMode=""String_Node_Str"";
                break looprec;
              }
            }
          }
        }
      }
    }
    ret+=""String_Node_Str"";
    if (fontRenderingMode != null) {
      ret+=""String_Node_Str"" + fontRenderingMode + ""String_Node_Str"";
    }
    ret+=antiAlias;
    ret+=""String_Node_Str"" + tag.getBounds().getWidth() / 2 + ""String_Node_Str"" + tag.getBounds().getHeight() + ""String_Node_Str"";
    ret+=matStr;
    ret+=""String_Node_Str"";
    int fontId=-1;
    FontTag font=null;
    String fontName=null;
    String psFontName=null;
    String availableFonts[]=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
    int textHeight=-1;
    RGB textColor=null;
    RGBA textColorA=null;
    for (    TEXTRECORD rec : textRecords) {
      if (rec.styleFlagsHasColor) {
        if (tag instanceof DefineTextTag) {
          textColor=rec.textColor;
        }
 else {
          textColorA=rec.textColorA;
        }
      }
      if (rec.styleFlagsHasFont) {
        fontId=rec.fontId;
        fontName=null;
        textHeight=rec.textHeight;
        font=null;
        for (        Tag t : tags) {
          if (t instanceof FontTag) {
            if (((FontTag)t).getFontId() == fontId) {
              font=(FontTag)t;
            }
          }
          if (t instanceof DefineFontNameTag) {
            if (((DefineFontNameTag)t).fontId == fontId) {
              fontName=((DefineFontNameTag)t).fontName;
            }
          }
        }
        if ((fontName == null) && (font != null)) {
          fontName=font.getFontName(tags);
        }
        psFontName=fontName;
        if (fontName != null) {
          for (          String avFont : availableFonts) {
            if (avFont.equals(fontName)) {
              Font f=new Font(fontName,0,10);
              psFontName=f.getPSName();
            }
          }
        }
      }
      if (font != null) {
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"" + xmlString(rec.getText(tags,font)) + ""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"" + twipToPixel(textHeight) + ""String_Node_Str"";
        if (textColor != null) {
          ret+=""String_Node_Str"" + textColor.toHexRGB() + ""String_Node_Str"";
        }
 else         if (textColorA != null) {
          ret+=""String_Node_Str"" + textColorA.toHexRGB() + ""String_Node_Str""+ textColorA.getAlphaFloat()+ ""String_Node_Str"";
        }
        ret+=""String_Node_Str"" + psFontName + ""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
      }
    }
    ret+=""String_Node_Str"";
    ret+=filterStr;
    ret+=""String_Node_Str"";
  }
 else   if (tag instanceof DefineEditTextTag) {
    DefineEditTextTag det=(DefineEditTextTag)tag;
    String tagName;
    for (    Tag t : tags) {
      if (t instanceof FontTag) {
        FontTag ft=(FontTag)t;
        if (ft.getFontId() == det.fontId) {
          if (ft.isSmall()) {
            fontRenderingMode=""String_Node_Str"";
            break;
          }
        }
      }
    }
    if (!det.useOutlines) {
      fontRenderingMode=""String_Node_Str"";
    }
    if (det.wasStatic) {
      tagName=""String_Node_Str"";
    }
 else     if (det.readOnly) {
      tagName=""String_Node_Str"";
    }
 else {
      tagName=""String_Node_Str"";
    }
    ret+=""String_Node_Str"" + tagName;
    if (fontRenderingMode != null) {
      ret+=""String_Node_Str"" + fontRenderingMode + ""String_Node_Str"";
    }
    ret+=antiAlias;
    double width=twipToPixel(bounds.getWidth());
    double height=twipToPixel(bounds.getHeight());
    double padding=2;
    width-=2 * padding;
    height-=2 * padding;
    if (det.hasLayout) {
      width-=twipToPixel(det.rightMargin);
      width-=twipToPixel(det.leftMargin);
    }
    ret+=""String_Node_Str"" + width + ""String_Node_Str"";
    ret+=""String_Node_Str"" + height + ""String_Node_Str"";
    if (det.border) {
      ret+=""String_Node_Str"";
    }
    if (det.html) {
      ret+=""String_Node_Str"";
    }
    if (det.noSelect) {
      ret+=""String_Node_Str"";
    }
    if (det.multiline && det.wordWrap) {
      ret+=""String_Node_Str"";
    }
 else     if (det.multiline && (!det.wordWrap)) {
      ret+=""String_Node_Str"";
    }
 else     if (det.password) {
      ret+=""String_Node_Str"";
    }
    if (det.hasMaxLength) {
      ret+=""String_Node_Str"" + det.maxLength + ""String_Node_Str"";
    }
    if (!det.variableName.equals(""String_Node_Str"")) {
      ret+=""String_Node_Str"" + det.variableName + ""String_Node_Str"";
    }
    ret+=""String_Node_Str"";
    ret+=matStr;
    ret+=""String_Node_Str"";
    if (det.hasText) {
      if (det.html) {
        ret+=convertHTMLText(tags,det,det.initialText);
      }
 else {
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"" + xmlString(det.initialText) + ""String_Node_Str"";
        int leftMargin=-1;
        int rightMargin=-1;
        int indent=-1;
        int lineSpacing=-1;
        String alignment=null;
        boolean italic=false;
        boolean bold=false;
        String fontFace=null;
        int size=-1;
        if (det.hasFont) {
          String fontName=null;
          FontTag ft=null;
          for (          Tag u : tags) {
            if (u instanceof DefineFontNameTag) {
              if (((DefineFontNameTag)u).fontId == det.fontId) {
                fontName=((DefineFontNameTag)u).fontName;
              }
            }
            if (u instanceof FontTag) {
              if (((FontTag)u).getFontId() == det.fontId) {
                ft=(FontTag)u;
              }
            }
            if (fontName != null && ft != null) {
              break;
            }
          }
          if (ft != null) {
            if (fontName == null) {
              fontName=ft.getFontName(tags);
            }
            italic=ft.isItalic();
            bold=ft.isBold();
            size=det.fontHeight;
            fontFace=new Font(fontName,(italic ? Font.ITALIC : 0) | (bold ? Font.BOLD : 0) | (!italic && !bold ? Font.PLAIN : 0),size < 0 ? 10 : size).getPSName();
          }
        }
        if (det.hasLayout) {
          leftMargin=det.leftMargin;
          rightMargin=det.rightMargin;
          indent=det.indent;
          lineSpacing=det.leading;
          String alignNames[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
          alignment=alignNames[det.align];
        }
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        if (alignment != null) {
          ret+=""String_Node_Str"" + alignment + ""String_Node_Str"";
        }
        ret+=""String_Node_Str"";
        if (indent > -1) {
          ret+=""String_Node_Str"" + twipToPixel(indent) + ""String_Node_Str"";
        }
        if (leftMargin > -1) {
          ret+=""String_Node_Str"" + twipToPixel(leftMargin) + ""String_Node_Str"";
        }
        if (lineSpacing > -1) {
          ret+=""String_Node_Str"" + twipToPixel(lineSpacing) + ""String_Node_Str"";
        }
        if (rightMargin > -1) {
          ret+=""String_Node_Str"" + twipToPixel(rightMargin) + ""String_Node_Str"";
        }
        if (size > -1) {
          ret+=""String_Node_Str"" + size + ""String_Node_Str"";
          ret+=""String_Node_Str"" + (size * 20) + ""String_Node_Str"";
        }
        if (fontFace != null) {
          ret+=""String_Node_Str"" + fontFace + ""String_Node_Str"";
        }
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
      }
    }
    ret+=""String_Node_Str"";
    ret+=filterStr;
    ret+=""String_Node_Str"" + tagName + ""String_Node_Str"";
  }
  return ret;
}","public static String convertText(String instanceName,List<Tag> tags,TextTag tag,MATRIX matrix,List<FILTER> filters){
  String ret=""String_Node_Str"";
  if (matrix == null) {
    matrix=new MATRIX();
  }
  CSMTextSettingsTag csmts=null;
  String filterStr=""String_Node_Str"";
  if (filters != null) {
    filterStr+=""String_Node_Str"";
    for (    FILTER f : filters) {
      filterStr+=convertFilter(f);
    }
    filterStr+=""String_Node_Str"";
  }
  for (  Tag t : tags) {
    if (t instanceof CSMTextSettingsTag) {
      CSMTextSettingsTag c=(CSMTextSettingsTag)t;
      if (c.textID == tag.getCharacterID()) {
        csmts=c;
        break;
      }
    }
  }
  String fontRenderingMode=""String_Node_Str"";
  String antiAlias=""String_Node_Str"";
  if (csmts != null) {
    if (csmts.thickness == 0 & csmts.sharpness == 0) {
      fontRenderingMode=null;
    }
 else {
      fontRenderingMode=""String_Node_Str"";
    }
    antiAlias=""String_Node_Str"" + doubleToString(csmts.sharpness) + ""String_Node_Str""+ doubleToString(csmts.thickness)+ ""String_Node_Str"";
  }
  String matStr=""String_Node_Str"";
  matStr+=""String_Node_Str"";
  RECT bounds=tag.getBounds();
  matrix.translateX+=bounds.Xmin + 40;
  matrix.translateY+=bounds.Ymin + 40;
  matStr+=convertMatrix(matrix);
  matStr+=""String_Node_Str"";
  if ((tag instanceof DefineTextTag) || (tag instanceof DefineText2Tag)) {
    List<TEXTRECORD> textRecords=new ArrayList<>();
    if (tag instanceof DefineTextTag) {
      textRecords=((DefineTextTag)tag).textRecords;
    }
 else     if (tag instanceof DefineText2Tag) {
      textRecords=((DefineText2Tag)tag).textRecords;
    }
    looprec:     for (    TEXTRECORD rec : textRecords) {
      if (rec.styleFlagsHasFont) {
        for (        Tag t : tags) {
          if (t instanceof FontTag) {
            FontTag ft=(FontTag)t;
            if (ft.getFontId() == rec.fontId) {
              if (ft.isSmall()) {
                fontRenderingMode=""String_Node_Str"";
                break looprec;
              }
            }
          }
        }
      }
    }
    ret+=""String_Node_Str"";
    if (fontRenderingMode != null) {
      ret+=""String_Node_Str"" + fontRenderingMode + ""String_Node_Str"";
    }
    if (instanceName != null) {
      ret+=""String_Node_Str"" + xmlString(instanceName) + ""String_Node_Str"";
    }
    ret+=antiAlias;
    ret+=""String_Node_Str"" + tag.getBounds().getWidth() / 2 + ""String_Node_Str"" + tag.getBounds().getHeight() + ""String_Node_Str"";
    ret+=matStr;
    ret+=""String_Node_Str"";
    int fontId=-1;
    FontTag font=null;
    String fontName=null;
    String psFontName=null;
    String availableFonts[]=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
    int textHeight=-1;
    RGB textColor=null;
    RGBA textColorA=null;
    for (    TEXTRECORD rec : textRecords) {
      if (rec.styleFlagsHasColor) {
        if (tag instanceof DefineTextTag) {
          textColor=rec.textColor;
        }
 else {
          textColorA=rec.textColorA;
        }
      }
      if (rec.styleFlagsHasFont) {
        fontId=rec.fontId;
        fontName=null;
        textHeight=rec.textHeight;
        font=null;
        for (        Tag t : tags) {
          if (t instanceof FontTag) {
            if (((FontTag)t).getFontId() == fontId) {
              font=(FontTag)t;
            }
          }
          if (t instanceof DefineFontNameTag) {
            if (((DefineFontNameTag)t).fontId == fontId) {
              fontName=((DefineFontNameTag)t).fontName;
            }
          }
        }
        if ((fontName == null) && (font != null)) {
          fontName=font.getFontName(tags);
        }
        psFontName=fontName;
        if (fontName != null) {
          for (          String avFont : availableFonts) {
            if (avFont.equals(fontName)) {
              Font f=new Font(fontName,0,10);
              psFontName=f.getPSName();
            }
          }
        }
      }
      if (font != null) {
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"" + xmlString(rec.getText(tags,font)) + ""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"" + twipToPixel(textHeight) + ""String_Node_Str"";
        if (textColor != null) {
          ret+=""String_Node_Str"" + textColor.toHexRGB() + ""String_Node_Str"";
        }
 else         if (textColorA != null) {
          ret+=""String_Node_Str"" + textColorA.toHexRGB() + ""String_Node_Str""+ textColorA.getAlphaFloat()+ ""String_Node_Str"";
        }
        ret+=""String_Node_Str"" + psFontName + ""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
      }
    }
    ret+=""String_Node_Str"";
    ret+=filterStr;
    ret+=""String_Node_Str"";
  }
 else   if (tag instanceof DefineEditTextTag) {
    DefineEditTextTag det=(DefineEditTextTag)tag;
    String tagName;
    for (    Tag t : tags) {
      if (t instanceof FontTag) {
        FontTag ft=(FontTag)t;
        if (ft.getFontId() == det.fontId) {
          if (ft.isSmall()) {
            fontRenderingMode=""String_Node_Str"";
            break;
          }
        }
      }
    }
    if (!det.useOutlines) {
      fontRenderingMode=""String_Node_Str"";
    }
    if (det.wasStatic) {
      tagName=""String_Node_Str"";
    }
 else     if (det.readOnly) {
      tagName=""String_Node_Str"";
    }
 else {
      tagName=""String_Node_Str"";
    }
    ret+=""String_Node_Str"" + tagName;
    if (fontRenderingMode != null) {
      ret+=""String_Node_Str"" + fontRenderingMode + ""String_Node_Str"";
    }
    if (instanceName != null) {
      ret+=""String_Node_Str"" + xmlString(instanceName) + ""String_Node_Str"";
    }
    ret+=antiAlias;
    double width=twipToPixel(bounds.getWidth());
    double height=twipToPixel(bounds.getHeight());
    double padding=2;
    width-=2 * padding;
    height-=2 * padding;
    if (det.hasLayout) {
      width-=twipToPixel(det.rightMargin);
      width-=twipToPixel(det.leftMargin);
    }
    ret+=""String_Node_Str"" + width + ""String_Node_Str"";
    ret+=""String_Node_Str"" + height + ""String_Node_Str"";
    if (det.border) {
      ret+=""String_Node_Str"";
    }
    if (det.html) {
      ret+=""String_Node_Str"";
    }
    if (det.noSelect) {
      ret+=""String_Node_Str"";
    }
    if (det.multiline && det.wordWrap) {
      ret+=""String_Node_Str"";
    }
 else     if (det.multiline && (!det.wordWrap)) {
      ret+=""String_Node_Str"";
    }
 else     if (det.password) {
      ret+=""String_Node_Str"";
    }
    if (det.hasMaxLength) {
      ret+=""String_Node_Str"" + det.maxLength + ""String_Node_Str"";
    }
    if (!det.variableName.equals(""String_Node_Str"")) {
      ret+=""String_Node_Str"" + det.variableName + ""String_Node_Str"";
    }
    ret+=""String_Node_Str"";
    ret+=matStr;
    ret+=""String_Node_Str"";
    if (det.hasText) {
      if (det.html) {
        ret+=convertHTMLText(tags,det,det.initialText);
      }
 else {
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"" + xmlString(det.initialText) + ""String_Node_Str"";
        int leftMargin=-1;
        int rightMargin=-1;
        int indent=-1;
        int lineSpacing=-1;
        String alignment=null;
        boolean italic=false;
        boolean bold=false;
        String fontFace=null;
        int size=-1;
        if (det.hasFont) {
          String fontName=null;
          FontTag ft=null;
          for (          Tag u : tags) {
            if (u instanceof DefineFontNameTag) {
              if (((DefineFontNameTag)u).fontId == det.fontId) {
                fontName=((DefineFontNameTag)u).fontName;
              }
            }
            if (u instanceof FontTag) {
              if (((FontTag)u).getFontId() == det.fontId) {
                ft=(FontTag)u;
              }
            }
            if (fontName != null && ft != null) {
              break;
            }
          }
          if (ft != null) {
            if (fontName == null) {
              fontName=ft.getFontName(tags);
            }
            italic=ft.isItalic();
            bold=ft.isBold();
            size=det.fontHeight;
            fontFace=new Font(fontName,(italic ? Font.ITALIC : 0) | (bold ? Font.BOLD : 0) | (!italic && !bold ? Font.PLAIN : 0),size < 0 ? 10 : size).getPSName();
          }
        }
        if (det.hasLayout) {
          leftMargin=det.leftMargin;
          rightMargin=det.rightMargin;
          indent=det.indent;
          lineSpacing=det.leading;
          String alignNames[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
          alignment=alignNames[det.align];
        }
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        if (alignment != null) {
          ret+=""String_Node_Str"" + alignment + ""String_Node_Str"";
        }
        ret+=""String_Node_Str"";
        if (indent > -1) {
          ret+=""String_Node_Str"" + twipToPixel(indent) + ""String_Node_Str"";
        }
        if (leftMargin > -1) {
          ret+=""String_Node_Str"" + twipToPixel(leftMargin) + ""String_Node_Str"";
        }
        if (lineSpacing > -1) {
          ret+=""String_Node_Str"" + twipToPixel(lineSpacing) + ""String_Node_Str"";
        }
        if (rightMargin > -1) {
          ret+=""String_Node_Str"" + twipToPixel(rightMargin) + ""String_Node_Str"";
        }
        if (size > -1) {
          ret+=""String_Node_Str"" + size + ""String_Node_Str"";
          ret+=""String_Node_Str"" + (size * 20) + ""String_Node_Str"";
        }
        if (fontFace != null) {
          ret+=""String_Node_Str"" + fontFace + ""String_Node_Str"";
        }
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
      }
    }
    ret+=""String_Node_Str"";
    ret+=filterStr;
    ret+=""String_Node_Str"" + tagName + ""String_Node_Str"";
  }
  return ret;
}",0.9871515905087556
62117,"private static String convertFrames(String prevStr,String afterStr,List<Integer> oneInstanceShapes,List<Tag> tags,List<Tag> timelineTags,HashMap<Integer,CharacterTag> characters,int depth){
  String ret=""String_Node_Str"";
  prevStr+=""String_Node_Str"";
  int frame=-1;
  String elements=""String_Node_Str"";
  String lastElements=""String_Node_Str"";
  int duration=1;
  String frameName=null;
  boolean isAnchor=false;
  CharacterTag character=null;
  MATRIX matrix=null;
  String instanceName=null;
  CXFORM colorTransForm=null;
  CXFORMWITHALPHA colorTransFormAlpha=null;
  boolean cacheAsBitmap=false;
  int blendMode=0;
  List<FILTER> filters=new ArrayList<>();
  boolean isVisible=true;
  RGBA backGroundColor=null;
  int characterId=-1;
  int ratio=-1;
  boolean shapeTween=false;
  boolean lastShapeTween=false;
  for (  Tag t : timelineTags) {
    if (t instanceof PlaceObjectTypeTag) {
      PlaceObjectTypeTag po=(PlaceObjectTypeTag)t;
      if (po.getDepth() == depth) {
        int newCharId=po.getCharacterId();
        if (newCharId == -1) {
          newCharId=characterId;
        }
        characterId=newCharId;
        if (characters.containsKey(characterId)) {
          character=characters.get(characterId);
          if (po.flagMove()) {
            MATRIX matrix2=po.getMatrix();
            if (matrix2 != null) {
              matrix=matrix2;
            }
            String instanceName2=po.getInstanceName();
            if (instanceName2 != null) {
              instanceName=instanceName2;
            }
            CXFORM colorTransForm2=po.getColorTransform();
            if (colorTransForm2 != null) {
              colorTransForm=colorTransForm2;
            }
            CXFORMWITHALPHA colorTransFormAlpha2=po.getColorTransformWithAlpha();
            if (colorTransFormAlpha2 != null) {
              colorTransFormAlpha=colorTransFormAlpha2;
            }
            if (po.cacheAsBitmap()) {
              cacheAsBitmap=true;
            }
            int blendMode2=po.getBlendMode();
            if (blendMode2 > 0) {
              blendMode=blendMode2;
            }
            List<FILTER> filters2=po.getFilters();
            if (filters2 != null) {
              filters=filters2;
            }
            int ratio2=po.getRatio();
            if (ratio2 > -1) {
              ratio=ratio2;
            }
          }
 else {
            matrix=po.getMatrix();
            instanceName=po.getInstanceName();
            colorTransForm=po.getColorTransform();
            colorTransFormAlpha=po.getColorTransformWithAlpha();
            cacheAsBitmap=po.cacheAsBitmap();
            blendMode=po.getBlendMode();
            filters=po.getFilters();
            ratio=po.getRatio();
          }
        }
      }
    }
    if (t instanceof RemoveTag) {
      RemoveTag rt=(RemoveTag)t;
      if (rt.getDepth() == depth) {
        character=null;
        matrix=null;
        instanceName=null;
        colorTransForm=null;
        colorTransFormAlpha=null;
        cacheAsBitmap=false;
        blendMode=0;
        filters=new ArrayList<>();
        isVisible=true;
        backGroundColor=null;
        characterId=-1;
      }
    }
    if (t instanceof FrameLabelTag) {
      FrameLabelTag flt=(FrameLabelTag)t;
      frameName=flt.getLabelName();
      isAnchor=flt.isNamedAnchor();
    }
    if (t instanceof ShowFrameTag) {
      elements=""String_Node_Str"";
      if ((character instanceof ShapeTag) && oneInstanceShapes.contains(characterId)) {
        elements+=convertShape(characters,matrix,(ShapeTag)character);
        shapeTween=false;
      }
 else       if (character != null) {
        if (character instanceof MorphShapeTag) {
          MorphShapeTag m=(MorphShapeTag)character;
          if (ratio == 65535) {
            elements+=convertShape(characters,matrix,3,m.getEndEdges().shapeRecords,m.getFillStyles().getEndFillStyles(),m.getLineStyles().getEndLineStyles(m.getShapeNum()),true);
            shapeTween=false;
          }
 else {
            elements+=convertShape(characters,matrix,3,m.getStartEdges().shapeRecords,m.getFillStyles().getStartFillStyles(),m.getLineStyles().getStartLineStyles(m.getShapeNum()),true);
            shapeTween=true;
          }
        }
 else {
          shapeTween=false;
          if (character instanceof TextTag) {
            elements+=convertText(tags,(TextTag)character,matrix,filters);
          }
 else           if (character instanceof DefineVideoStreamTag) {
            elements+=convertVideoInstance(matrix,(DefineVideoStreamTag)character);
          }
 else {
            elements+=convertSymbolInstance(instanceName,matrix,colorTransForm,colorTransFormAlpha,cacheAsBitmap,blendMode,filters,isVisible,backGroundColor,character,characters,tags);
          }
        }
      }
      frame++;
      if (!elements.equals(lastElements) && frame > 0) {
        ret+=convertFrame(lastShapeTween,characters,tags,null,null,frame - duration,frameName,isAnchor,duration,""String_Node_Str"",lastElements);
        duration=1;
      }
 else       if (frame == 0) {
        duration=1;
      }
 else {
        duration++;
      }
      lastShapeTween=shapeTween;
      lastElements=elements;
      frameName=null;
      isAnchor=false;
    }
  }
  if (!lastElements.equals(""String_Node_Str"")) {
    ret+=convertFrame(lastShapeTween,characters,tags,null,null,(frame < 0 ? 0 : frame) - duration,frameName,isAnchor,duration,""String_Node_Str"",lastElements);
  }
  afterStr=""String_Node_Str"" + afterStr;
  if (!ret.equals(""String_Node_Str"")) {
    ret=prevStr + ret + afterStr;
  }
  return ret;
}","private static String convertFrames(String prevStr,String afterStr,List<Integer> oneInstanceShapes,List<Tag> tags,List<Tag> timelineTags,HashMap<Integer,CharacterTag> characters,int depth){
  String ret=""String_Node_Str"";
  prevStr+=""String_Node_Str"";
  int frame=-1;
  String elements=""String_Node_Str"";
  String lastElements=""String_Node_Str"";
  int duration=1;
  String frameName=null;
  boolean isAnchor=false;
  CharacterTag character=null;
  MATRIX matrix=null;
  String instanceName=null;
  CXFORM colorTransForm=null;
  CXFORMWITHALPHA colorTransFormAlpha=null;
  boolean cacheAsBitmap=false;
  int blendMode=0;
  List<FILTER> filters=new ArrayList<>();
  boolean isVisible=true;
  RGBA backGroundColor=null;
  int characterId=-1;
  int ratio=-1;
  boolean shapeTween=false;
  boolean lastShapeTween=false;
  for (  Tag t : timelineTags) {
    if (t instanceof PlaceObjectTypeTag) {
      PlaceObjectTypeTag po=(PlaceObjectTypeTag)t;
      if (po.getDepth() == depth) {
        int newCharId=po.getCharacterId();
        if (newCharId == -1) {
          newCharId=characterId;
        }
        characterId=newCharId;
        if (characters.containsKey(characterId)) {
          character=characters.get(characterId);
          if (po.flagMove()) {
            MATRIX matrix2=po.getMatrix();
            if (matrix2 != null) {
              matrix=matrix2;
            }
            String instanceName2=po.getInstanceName();
            if (instanceName2 != null) {
              instanceName=instanceName2;
            }
            CXFORM colorTransForm2=po.getColorTransform();
            if (colorTransForm2 != null) {
              colorTransForm=colorTransForm2;
            }
            CXFORMWITHALPHA colorTransFormAlpha2=po.getColorTransformWithAlpha();
            if (colorTransFormAlpha2 != null) {
              colorTransFormAlpha=colorTransFormAlpha2;
            }
            if (po.cacheAsBitmap()) {
              cacheAsBitmap=true;
            }
            int blendMode2=po.getBlendMode();
            if (blendMode2 > 0) {
              blendMode=blendMode2;
            }
            List<FILTER> filters2=po.getFilters();
            if (filters2 != null) {
              filters=filters2;
            }
            int ratio2=po.getRatio();
            if (ratio2 > -1) {
              ratio=ratio2;
            }
          }
 else {
            matrix=po.getMatrix();
            instanceName=po.getInstanceName();
            colorTransForm=po.getColorTransform();
            colorTransFormAlpha=po.getColorTransformWithAlpha();
            cacheAsBitmap=po.cacheAsBitmap();
            blendMode=po.getBlendMode();
            filters=po.getFilters();
            ratio=po.getRatio();
          }
        }
      }
    }
    if (t instanceof RemoveTag) {
      RemoveTag rt=(RemoveTag)t;
      if (rt.getDepth() == depth) {
        character=null;
        matrix=null;
        instanceName=null;
        colorTransForm=null;
        colorTransFormAlpha=null;
        cacheAsBitmap=false;
        blendMode=0;
        filters=new ArrayList<>();
        isVisible=true;
        backGroundColor=null;
        characterId=-1;
      }
    }
    if (t instanceof FrameLabelTag) {
      FrameLabelTag flt=(FrameLabelTag)t;
      frameName=flt.getLabelName();
      isAnchor=flt.isNamedAnchor();
    }
    if (t instanceof ShowFrameTag) {
      elements=""String_Node_Str"";
      if ((character instanceof ShapeTag) && oneInstanceShapes.contains(characterId)) {
        elements+=convertShape(characters,matrix,(ShapeTag)character);
        shapeTween=false;
      }
 else       if (character != null) {
        if (character instanceof MorphShapeTag) {
          MorphShapeTag m=(MorphShapeTag)character;
          if (ratio == 65535) {
            elements+=convertShape(characters,matrix,3,m.getEndEdges().shapeRecords,m.getFillStyles().getEndFillStyles(),m.getLineStyles().getEndLineStyles(m.getShapeNum()),true);
            shapeTween=false;
          }
 else {
            elements+=convertShape(characters,matrix,3,m.getStartEdges().shapeRecords,m.getFillStyles().getStartFillStyles(),m.getLineStyles().getStartLineStyles(m.getShapeNum()),true);
            shapeTween=true;
          }
        }
 else {
          shapeTween=false;
          if (character instanceof TextTag) {
            elements+=convertText(instanceName,tags,(TextTag)character,matrix,filters);
          }
 else           if (character instanceof DefineVideoStreamTag) {
            elements+=convertVideoInstance(instanceName,matrix,(DefineVideoStreamTag)character);
          }
 else {
            elements+=convertSymbolInstance(instanceName,matrix,colorTransForm,colorTransFormAlpha,cacheAsBitmap,blendMode,filters,isVisible,backGroundColor,character,characters,tags);
          }
        }
      }
      frame++;
      if (!elements.equals(lastElements) && frame > 0) {
        ret+=convertFrame(lastShapeTween,characters,tags,null,null,frame - duration,frameName,isAnchor,duration,""String_Node_Str"",lastElements);
        duration=1;
      }
 else       if (frame == 0) {
        duration=1;
      }
 else {
        duration++;
      }
      lastShapeTween=shapeTween;
      lastElements=elements;
      frameName=null;
      isAnchor=false;
    }
  }
  if (!lastElements.equals(""String_Node_Str"")) {
    ret+=convertFrame(lastShapeTween,characters,tags,null,null,(frame - duration < 0 ? 0 : frame - duration),frameName,isAnchor,duration,""String_Node_Str"",lastElements);
  }
  afterStr=""String_Node_Str"" + afterStr;
  if (!ret.equals(""String_Node_Str"")) {
    ret=prevStr + ret + afterStr;
  }
  return ret;
}",0.9965249933172948
62118,"public static String convertLibrary(SWF swf,Map<Integer,String> characterVariables,Map<Integer,String> characterClasses,List<Integer> oneInstanceShapes,String backgroundColor,List<Tag> tags,HashMap<Integer,CharacterTag> characters,HashMap<String,byte[]> files){
  String ret=""String_Node_Str"";
  List<String> media=new ArrayList<>();
  List<String> symbols=new ArrayList<>();
  for (  int ch : characters.keySet()) {
    CharacterTag symbol=characters.get(ch);
    if ((symbol instanceof ShapeTag) && oneInstanceShapes.contains(symbol.getCharacterID())) {
      continue;
    }
    if ((symbol instanceof ShapeTag) || (symbol instanceof DefineSpriteTag) || (symbol instanceof ButtonTag)) {
      String symbolStr=""String_Node_Str"";
      symbolStr+=""String_Node_Str"" + symbol.getCharacterID() + ""String_Node_Str""+ getTimestamp()+ ""String_Node_Str"";
      if (symbol instanceof ShapeTag) {
        symbolStr+=""String_Node_Str"";
      }
 else       if (symbol instanceof ButtonTag) {
        symbolStr+=""String_Node_Str"";
        if (((ButtonTag)symbol).trackAsMenu()) {
          symbolStr+=""String_Node_Str"";
        }
      }
      boolean linkageExportForAS=false;
      if (characterClasses.containsKey(symbol.getCharacterID())) {
        linkageExportForAS=true;
        symbolStr+=""String_Node_Str"" + xmlString(characterClasses.get(symbol.getCharacterID())) + ""String_Node_Str"";
      }
      if (characterVariables.containsKey(symbol.getCharacterID())) {
        linkageExportForAS=true;
        symbolStr+=""String_Node_Str"" + xmlString(characterVariables.get(symbol.getCharacterID())) + ""String_Node_Str"";
      }
      if (linkageExportForAS) {
        symbolStr+=""String_Node_Str"";
      }
      symbolStr+=""String_Node_Str"";
      symbolStr+=""String_Node_Str"";
      String itemIcon=null;
      if (symbol instanceof ButtonTag) {
        itemIcon=""String_Node_Str"";
        symbolStr+=""String_Node_Str"" + symbol.getCharacterID() + ""String_Node_Str"";
        symbolStr+=""String_Node_Str"";
        ButtonTag button=(ButtonTag)symbol;
        List<BUTTONRECORD> records=button.getRecords();
        String frames[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        int maxDepth=0;
        for (        BUTTONRECORD rec : records) {
          if (rec.placeDepth > maxDepth) {
            maxDepth=rec.placeDepth;
          }
        }
        for (int i=maxDepth; i >= 1; i--) {
          symbolStr+=""String_Node_Str"" + (maxDepth - i + 1) + ""String_Node_Str"";
          if (i == 1) {
            symbolStr+=""String_Node_Str"";
          }
          symbolStr+=""String_Node_Str"";
          symbolStr+=""String_Node_Str"";
          int lastFrame=0;
          loopframes:           for (int frame=1; frame <= 4; frame++) {
            for (            BUTTONRECORD rec : records) {
              if (rec.placeDepth == i) {
                boolean ok=false;
switch (frame) {
case 1:
                  ok=rec.buttonStateUp;
                break;
case 2:
              ok=rec.buttonStateOver;
            break;
case 3:
          ok=rec.buttonStateDown;
        break;
case 4:
      ok=rec.buttonStateHitTest;
    break;
}
if (!ok) {
  continue;
}
CXFORMWITHALPHA colorTransformAlpha=null;
int blendMode=0;
List<FILTER> filters=new ArrayList<>();
if (button instanceof DefineButton2Tag) {
  colorTransformAlpha=rec.colorTransform;
  if (rec.buttonHasBlendMode) {
    blendMode=rec.blendMode;
  }
  if (rec.buttonHasFilterList) {
    filters=rec.filterList;
  }
}
CharacterTag character=characters.get(rec.characterId);
MATRIX matrix=rec.placeMatrix;
String recCharStr=""String_Node_Str"";
if (character instanceof TextTag) {
  recCharStr=convertText(tags,(TextTag)character,matrix,filters);
}
 else if (character instanceof DefineVideoStreamTag) {
  recCharStr=convertVideoInstance(matrix,(DefineVideoStreamTag)character);
}
 else {
  recCharStr=convertSymbolInstance(null,matrix,null,colorTransformAlpha,false,blendMode,filters,true,null,characters.get(rec.characterId),characters,tags);
}
int duration=frame - lastFrame;
lastFrame=frame;
if (duration > 0) {
  if (duration > 1) {
    symbolStr+=""String_Node_Str"";
    symbolStr+=(frame - duration);
    symbolStr+=""String_Node_Str"";
    symbolStr+=""String_Node_Str"" + (duration - 1) + ""String_Node_Str"";
    symbolStr+=""String_Node_Str"" + KEY_MODE_NORMAL + ""String_Node_Str"";
    symbolStr+=""String_Node_Str"";
    symbolStr+=""String_Node_Str"";
    symbolStr+=""String_Node_Str"";
  }
  symbolStr+=""String_Node_Str"";
  symbolStr+=(frame - 1);
  symbolStr+=""String_Node_Str"";
  symbolStr+=""String_Node_Str"" + KEY_MODE_NORMAL + ""String_Node_Str"";
  symbolStr+=""String_Node_Str"";
  symbolStr+=recCharStr;
  symbolStr+=""String_Node_Str"";
  symbolStr+=""String_Node_Str"";
}
}
}
}
symbolStr+=""String_Node_Str"";
symbolStr+=""String_Node_Str"";
}
symbolStr+=""String_Node_Str"";
symbolStr+=""String_Node_Str"";
}
 else if (symbol instanceof DefineSpriteTag) {
DefineSpriteTag sprite=(DefineSpriteTag)symbol;
if (sprite.subTags.isEmpty()) {
continue;
}
symbolStr+=convertTimeline(sprite.spriteId,oneInstanceShapes,backgroundColor,tags,sprite.getSubTags(),characters,""String_Node_Str"" + symbol.getCharacterID());
}
 else if (symbol instanceof ShapeTag) {
itemIcon=""String_Node_Str"";
ShapeTag shape=(ShapeTag)symbol;
symbolStr+=""String_Node_Str"" + symbol.getCharacterID() + ""String_Node_Str"";
symbolStr+=""String_Node_Str"";
symbolStr+=convertShape(characters,null,shape);
symbolStr+=""String_Node_Str"";
symbolStr+=""String_Node_Str"";
}
symbolStr+=""String_Node_Str"";
symbolStr+=""String_Node_Str"";
symbolStr=prettyFormatXML(symbolStr);
String symbolFile=""String_Node_Str"" + symbol.getCharacterID() + ""String_Node_Str"";
try {
files.put(symbolFile,symbolStr.getBytes(""String_Node_Str""));
}
 catch (UnsupportedEncodingException ex) {
Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
}
String symbLinkStr=""String_Node_Str"";
symbLinkStr+=""String_Node_Str"" + symbolFile + ""String_Node_Str"";
if (itemIcon != null) {
symbLinkStr+=""String_Node_Str"" + itemIcon + ""String_Node_Str"";
}
symbLinkStr+=""String_Node_Str"" + getTimestamp() + ""String_Node_Str"";
symbols.add(symbLinkStr);
}
 else if (symbol instanceof ImageTag) {
ImageTag imageTag=(ImageTag)symbol;
ByteArrayOutputStream baos=new ByteArrayOutputStream();
BufferedImage image=imageTag.getImage(tags);
String format=imageTag.getImageFormat();
try {
ImageIO.write(image,format.toUpperCase(),baos);
}
 catch (IOException ex) {
Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
}
String symbolFile=""String_Node_Str"" + symbol.getCharacterID() + ""String_Node_Str""+ imageTag.getImageFormat();
files.put(symbolFile,baos.toByteArray());
String mediaLinkStr=""String_Node_Str"" + symbolFile + ""String_Node_Str""+ getTimestamp()+ ""String_Node_Str""+ baos.toByteArray().length+ ""String_Node_Str"";
if (format.equals(""String_Node_Str"") || format.equals(""String_Node_Str"")) {
mediaLinkStr+=""String_Node_Str"";
}
 else if (format.equals(""String_Node_Str"")) {
mediaLinkStr+=""String_Node_Str"";
}
if (characterClasses.containsKey(symbol.getCharacterID())) {
mediaLinkStr+=""String_Node_Str"" + characterClasses.get(symbol.getCharacterID()) + ""String_Node_Str"";
}
mediaLinkStr+=""String_Node_Str"" + symbolFile + ""String_Node_Str""+ (media.size() + 1)+ ""String_Node_Str""+ getTimestamp()+ ""String_Node_Str""+ image.getWidth()+ ""String_Node_Str""+ image.getHeight()+ ""String_Node_Str"";
media.add(mediaLinkStr);
}
 else if ((symbol instanceof SoundStreamHeadTypeTag) || (symbol instanceof DefineSoundTag)) {
int soundFormat=0;
int soundRate=0;
int soundType=0;
int soundSize=0;
long soundSampleCount=0;
byte soundData[]=new byte[0];
int rateMap[]={5,11,22,44};
String exportFormat=""String_Node_Str"";
if (symbol instanceof SoundStreamHeadTypeTag) {
SoundStreamHeadTypeTag sstream=(SoundStreamHeadTypeTag)symbol;
soundFormat=sstream.getSoundFormat();
soundRate=sstream.getSoundRate();
soundType=sstream.getSoundType();
soundSize=sstream.getSoundSize();
soundSampleCount=sstream.getSoundSampleCount();
boolean found=false;
for (Tag t : tags) {
if (found && (t instanceof SoundStreamBlockTag)) {
SoundStreamBlockTag bl=(SoundStreamBlockTag)t;
soundData=bl.getData(SWF.DEFAULT_VERSION);
break;
}
if (t == symbol) {
found=true;
}
}
}
 else if (symbol instanceof DefineSoundTag) {
DefineSoundTag sound=(DefineSoundTag)symbol;
soundFormat=sound.soundFormat;
soundRate=sound.soundRate;
soundType=sound.soundType;
soundData=sound.soundData;
soundSize=sound.soundSize;
soundSampleCount=sound.soundSampleCount;
}
int format=0;
int bits=0;
if ((soundFormat == DefineSoundTag.FORMAT_ADPCM) || (soundFormat == DefineSoundTag.FORMAT_UNCOMPRESSED_LITTLE_ENDIAN) || (soundFormat == DefineSoundTag.FORMAT_UNCOMPRESSED_NATIVE_ENDIAN)) {
if (soundType == 1) {
format+=1;
}
switch (soundRate) {
case 0:
format+=2;
break;
case 1:
format+=6;
break;
case 2:
format+=10;
break;
case 3:
format+=14;
break;
}
}
if (soundFormat == DefineSoundTag.FORMAT_SPEEX) {
bits=18;
}
if (soundFormat == DefineSoundTag.FORMAT_ADPCM) {
SWFInputStream sis=new SWFInputStream(new ByteArrayInputStream(soundData),SWF.DEFAULT_VERSION);
exportFormat=""String_Node_Str"";
try {
int adpcmCodeSize=(int)sis.readUB(2);
bits=2 + adpcmCodeSize;
}
 catch (IOException ex) {
Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
}
}
if (soundFormat == DefineSoundTag.FORMAT_MP3) {
exportFormat=""String_Node_Str"";
if (soundType == 0) {
format+=1;
}
format+=4;
SWFInputStream sis=new SWFInputStream(new ByteArrayInputStream(soundData),SWF.DEFAULT_VERSION);
try {
sis.readSI16();
MP3FRAME frame=new MP3FRAME(sis);
int bitRate=frame.getBitrate();
switch (bitRate) {
case 8:
bits=6;
break;
case 16:
bits=7;
break;
case 20:
bits=8;
break;
case 24:
bits=9;
break;
case 32:
bits=10;
break;
case 48:
bits=11;
break;
case 56:
bits=12;
break;
case 64:
bits=13;
break;
case 80:
bits=14;
break;
case 112:
bits=15;
break;
case 128:
bits=16;
break;
case 160:
bits=17;
break;
}
}
 catch (IOException ex) {
Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
}
}
byte data[]=new byte[0];
try {
data=swf.exportSound(symbol);
}
 catch (IOException ex) {
Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
}
if (!exportFormat.equals(""String_Node_Str"")) {
String symbolFile=""String_Node_Str"" + symbol.getCharacterID() + ""String_Node_Str""+ exportFormat;
files.put(symbolFile,data);
String mediaLinkStr=""String_Node_Str"" + symbolFile + ""String_Node_Str""+ getTimestamp()+ ""String_Node_Str""+ data.length+ ""String_Node_Str"";
mediaLinkStr+=""String_Node_Str"" + symbolFile + ""String_Node_Str"";
mediaLinkStr+=""String_Node_Str"";
mediaLinkStr+=rateMap[soundRate] + ""String_Node_Str"";
mediaLinkStr+=""String_Node_Str"" + (soundSize == 1 ? ""String_Node_Str"" : ""String_Node_Str"");
mediaLinkStr+=""String_Node_Str"" + (soundType == 1 ? ""String_Node_Str"" : ""String_Node_Str"");
mediaLinkStr+=""String_Node_Str"";
mediaLinkStr+=""String_Node_Str"" + format + ""String_Node_Str""+ bits+ ""String_Node_Str""+ soundSampleCount+ ""String_Node_Str"";
if (characterClasses.containsKey(symbol.getCharacterID())) {
mediaLinkStr+=""String_Node_Str"" + characterClasses.get(symbol.getCharacterID()) + ""String_Node_Str"";
}
if (characterVariables.containsKey(symbol.getCharacterID())) {
mediaLinkStr+=""String_Node_Str"" + xmlString(characterVariables.get(symbol.getCharacterID())) + ""String_Node_Str"";
}
mediaLinkStr+=""String_Node_Str"";
media.add(mediaLinkStr);
}
}
 else if (symbol instanceof DefineVideoStreamTag) {
DefineVideoStreamTag video=(DefineVideoStreamTag)symbol;
String videoType=""String_Node_Str"";
switch (video.codecID) {
case 2:
videoType=""String_Node_Str"";
break;
case 3:
videoType=""String_Node_Str"";
break;
case 4:
videoType=""String_Node_Str"";
break;
case 5:
videoType=""String_Node_Str"";
break;
}
byte data[]=new byte[0];
try {
data=swf.exportMovie(video);
}
 catch (IOException ex) {
Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
}
String symbolFile=""String_Node_Str"" + symbol.getCharacterID() + ""String_Node_Str""+ ""String_Node_Str"";
files.put(symbolFile,data);
String mediaLinkStr=""String_Node_Str"" + symbolFile + ""String_Node_Str""+ getTimestamp()+ ""String_Node_Str""+ data.length+ ""String_Node_Str"";
mediaLinkStr+=""String_Node_Str"" + symbolFile + ""String_Node_Str"";
mediaLinkStr+=""String_Node_Str"" + videoType + ""String_Node_Str"";
mediaLinkStr+=""String_Node_Str"" + swf.frameRate + ""String_Node_Str"";
mediaLinkStr+=""String_Node_Str"" + video.width + ""String_Node_Str"";
mediaLinkStr+=""String_Node_Str"" + video.height + ""String_Node_Str"";
double len=((double)video.numFrames) / ((double)swf.frameRate);
mediaLinkStr+=""String_Node_Str"" + len + ""String_Node_Str"";
if (characterClasses.containsKey(symbol.getCharacterID())) {
mediaLinkStr+=""String_Node_Str"" + characterClasses.get(symbol.getCharacterID()) + ""String_Node_Str"";
}
if (characterVariables.containsKey(symbol.getCharacterID())) {
mediaLinkStr+=""String_Node_Str"" + xmlString(characterVariables.get(symbol.getCharacterID())) + ""String_Node_Str"";
}
mediaLinkStr+=""String_Node_Str"";
media.add(mediaLinkStr);
}
}
if (!media.isEmpty()) {
ret+=""String_Node_Str"";
for (String m : media) {
ret+=m;
}
ret+=""String_Node_Str"";
}
if (!symbols.isEmpty()) {
ret+=""String_Node_Str"";
for (String s : symbols) {
ret+=s;
}
ret+=""String_Node_Str"";
}
return ret;
}","public static String convertLibrary(SWF swf,Map<Integer,String> characterVariables,Map<Integer,String> characterClasses,List<Integer> oneInstanceShapes,String backgroundColor,List<Tag> tags,HashMap<Integer,CharacterTag> characters,HashMap<String,byte[]> files,HashMap<String,byte[]> datfiles){
  String ret=""String_Node_Str"";
  List<String> media=new ArrayList<>();
  List<String> symbols=new ArrayList<>();
  for (  int ch : characters.keySet()) {
    CharacterTag symbol=characters.get(ch);
    if ((symbol instanceof ShapeTag) && oneInstanceShapes.contains(symbol.getCharacterID())) {
      continue;
    }
    if ((symbol instanceof ShapeTag) || (symbol instanceof DefineSpriteTag) || (symbol instanceof ButtonTag)) {
      String symbolStr=""String_Node_Str"";
      symbolStr+=""String_Node_Str"" + symbol.getCharacterID() + ""String_Node_Str""+ getTimestamp()+ ""String_Node_Str"";
      if (symbol instanceof ShapeTag) {
        symbolStr+=""String_Node_Str"";
      }
 else       if (symbol instanceof ButtonTag) {
        symbolStr+=""String_Node_Str"";
        if (((ButtonTag)symbol).trackAsMenu()) {
          symbolStr+=""String_Node_Str"";
        }
      }
      boolean linkageExportForAS=false;
      if (characterClasses.containsKey(symbol.getCharacterID())) {
        linkageExportForAS=true;
        symbolStr+=""String_Node_Str"" + xmlString(characterClasses.get(symbol.getCharacterID())) + ""String_Node_Str"";
      }
      if (characterVariables.containsKey(symbol.getCharacterID())) {
        linkageExportForAS=true;
        symbolStr+=""String_Node_Str"" + xmlString(characterVariables.get(symbol.getCharacterID())) + ""String_Node_Str"";
      }
      if (linkageExportForAS) {
        symbolStr+=""String_Node_Str"";
      }
      symbolStr+=""String_Node_Str"";
      symbolStr+=""String_Node_Str"";
      String itemIcon=null;
      if (symbol instanceof ButtonTag) {
        itemIcon=""String_Node_Str"";
        symbolStr+=""String_Node_Str"" + symbol.getCharacterID() + ""String_Node_Str"";
        symbolStr+=""String_Node_Str"";
        ButtonTag button=(ButtonTag)symbol;
        List<BUTTONRECORD> records=button.getRecords();
        String frames[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        int maxDepth=0;
        for (        BUTTONRECORD rec : records) {
          if (rec.placeDepth > maxDepth) {
            maxDepth=rec.placeDepth;
          }
        }
        for (int i=maxDepth; i >= 1; i--) {
          symbolStr+=""String_Node_Str"" + (maxDepth - i + 1) + ""String_Node_Str"";
          if (i == 1) {
            symbolStr+=""String_Node_Str"";
          }
          symbolStr+=""String_Node_Str"" + randomOutlineColor() + ""String_Node_Str"";
          symbolStr+=""String_Node_Str"";
          int lastFrame=0;
          loopframes:           for (int frame=1; frame <= 4; frame++) {
            for (            BUTTONRECORD rec : records) {
              if (rec.placeDepth == i) {
                boolean ok=false;
switch (frame) {
case 1:
                  ok=rec.buttonStateUp;
                break;
case 2:
              ok=rec.buttonStateOver;
            break;
case 3:
          ok=rec.buttonStateDown;
        break;
case 4:
      ok=rec.buttonStateHitTest;
    break;
}
if (!ok) {
  continue;
}
CXFORMWITHALPHA colorTransformAlpha=null;
int blendMode=0;
List<FILTER> filters=new ArrayList<>();
if (button instanceof DefineButton2Tag) {
  colorTransformAlpha=rec.colorTransform;
  if (rec.buttonHasBlendMode) {
    blendMode=rec.blendMode;
  }
  if (rec.buttonHasFilterList) {
    filters=rec.filterList;
  }
}
CharacterTag character=characters.get(rec.characterId);
MATRIX matrix=rec.placeMatrix;
String recCharStr=""String_Node_Str"";
if (character instanceof TextTag) {
  recCharStr=convertText(null,tags,(TextTag)character,matrix,filters);
}
 else if (character instanceof DefineVideoStreamTag) {
  recCharStr=convertVideoInstance(null,matrix,(DefineVideoStreamTag)character);
}
 else {
  recCharStr=convertSymbolInstance(null,matrix,null,colorTransformAlpha,false,blendMode,filters,true,null,characters.get(rec.characterId),characters,tags);
}
int duration=frame - lastFrame;
lastFrame=frame;
if (duration > 0) {
  if (duration > 1) {
    symbolStr+=""String_Node_Str"";
    symbolStr+=(frame - duration);
    symbolStr+=""String_Node_Str"";
    symbolStr+=""String_Node_Str"" + (duration - 1) + ""String_Node_Str"";
    symbolStr+=""String_Node_Str"" + KEY_MODE_NORMAL + ""String_Node_Str"";
    symbolStr+=""String_Node_Str"";
    symbolStr+=""String_Node_Str"";
    symbolStr+=""String_Node_Str"";
  }
  symbolStr+=""String_Node_Str"";
  symbolStr+=(frame - 1);
  symbolStr+=""String_Node_Str"";
  symbolStr+=""String_Node_Str"" + KEY_MODE_NORMAL + ""String_Node_Str"";
  symbolStr+=""String_Node_Str"";
  symbolStr+=recCharStr;
  symbolStr+=""String_Node_Str"";
  symbolStr+=""String_Node_Str"";
}
}
}
}
symbolStr+=""String_Node_Str"";
symbolStr+=""String_Node_Str"";
}
symbolStr+=""String_Node_Str"";
symbolStr+=""String_Node_Str"";
}
 else if (symbol instanceof DefineSpriteTag) {
DefineSpriteTag sprite=(DefineSpriteTag)symbol;
if (sprite.subTags.isEmpty()) {
continue;
}
symbolStr+=convertTimeline(sprite.spriteId,oneInstanceShapes,backgroundColor,tags,sprite.getSubTags(),characters,""String_Node_Str"" + symbol.getCharacterID());
}
 else if (symbol instanceof ShapeTag) {
itemIcon=""String_Node_Str"";
ShapeTag shape=(ShapeTag)symbol;
symbolStr+=""String_Node_Str"" + symbol.getCharacterID() + ""String_Node_Str"";
symbolStr+=""String_Node_Str"";
symbolStr+=convertShape(characters,null,shape);
symbolStr+=""String_Node_Str"";
symbolStr+=""String_Node_Str"";
}
symbolStr+=""String_Node_Str"";
symbolStr+=""String_Node_Str"";
symbolStr=prettyFormatXML(symbolStr);
String symbolFile=""String_Node_Str"" + symbol.getCharacterID() + ""String_Node_Str"";
try {
files.put(symbolFile,symbolStr.getBytes(""String_Node_Str""));
}
 catch (UnsupportedEncodingException ex) {
Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
}
String symbLinkStr=""String_Node_Str"";
symbLinkStr+=""String_Node_Str"" + symbolFile + ""String_Node_Str"";
if (itemIcon != null) {
symbLinkStr+=""String_Node_Str"" + itemIcon + ""String_Node_Str"";
}
symbLinkStr+=""String_Node_Str"" + getTimestamp() + ""String_Node_Str"";
symbols.add(symbLinkStr);
}
 else if (symbol instanceof ImageTag) {
ImageTag imageTag=(ImageTag)symbol;
ByteArrayOutputStream baos=new ByteArrayOutputStream();
BufferedImage image=imageTag.getImage(tags);
String format=imageTag.getImageFormat();
try {
ImageIO.write(image,format.toUpperCase(),baos);
}
 catch (IOException ex) {
Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
}
String symbolFile=""String_Node_Str"" + symbol.getCharacterID() + ""String_Node_Str""+ imageTag.getImageFormat();
files.put(symbolFile,baos.toByteArray());
String mediaLinkStr=""String_Node_Str"" + symbolFile + ""String_Node_Str""+ getTimestamp()+ ""String_Node_Str""+ baos.toByteArray().length+ ""String_Node_Str"";
if (format.equals(""String_Node_Str"") || format.equals(""String_Node_Str"")) {
mediaLinkStr+=""String_Node_Str"";
}
 else if (format.equals(""String_Node_Str"")) {
mediaLinkStr+=""String_Node_Str"";
}
if (characterClasses.containsKey(symbol.getCharacterID())) {
mediaLinkStr+=""String_Node_Str"" + characterClasses.get(symbol.getCharacterID()) + ""String_Node_Str"";
}
mediaLinkStr+=""String_Node_Str"" + symbolFile + ""String_Node_Str""+ (media.size() + 1)+ ""String_Node_Str""+ getTimestamp()+ ""String_Node_Str""+ image.getWidth()+ ""String_Node_Str""+ image.getHeight()+ ""String_Node_Str"";
media.add(mediaLinkStr);
}
 else if ((symbol instanceof SoundStreamHeadTypeTag) || (symbol instanceof DefineSoundTag)) {
int soundFormat=0;
int soundRate=0;
int soundType=0;
int soundSize=0;
long soundSampleCount=0;
byte soundData[]=new byte[0];
int rateMap[]={5,11,22,44};
String exportFormat=""String_Node_Str"";
if (symbol instanceof SoundStreamHeadTypeTag) {
SoundStreamHeadTypeTag sstream=(SoundStreamHeadTypeTag)symbol;
soundFormat=sstream.getSoundFormat();
soundRate=sstream.getSoundRate();
soundType=sstream.getSoundType();
soundSize=sstream.getSoundSize();
soundSampleCount=sstream.getSoundSampleCount();
boolean found=false;
for (Tag t : tags) {
if (found && (t instanceof SoundStreamBlockTag)) {
SoundStreamBlockTag bl=(SoundStreamBlockTag)t;
soundData=bl.getData(SWF.DEFAULT_VERSION);
break;
}
if (t == symbol) {
found=true;
}
}
}
 else if (symbol instanceof DefineSoundTag) {
DefineSoundTag sound=(DefineSoundTag)symbol;
soundFormat=sound.soundFormat;
soundRate=sound.soundRate;
soundType=sound.soundType;
soundData=sound.soundData;
soundSize=sound.soundSize;
soundSampleCount=sound.soundSampleCount;
}
int format=0;
int bits=0;
if ((soundFormat == DefineSoundTag.FORMAT_ADPCM) || (soundFormat == DefineSoundTag.FORMAT_UNCOMPRESSED_LITTLE_ENDIAN) || (soundFormat == DefineSoundTag.FORMAT_UNCOMPRESSED_NATIVE_ENDIAN)) {
if (soundType == 1) {
format+=1;
}
switch (soundRate) {
case 0:
format+=2;
break;
case 1:
format+=6;
break;
case 2:
format+=10;
break;
case 3:
format+=14;
break;
}
}
if (soundFormat == DefineSoundTag.FORMAT_SPEEX) {
bits=18;
}
if (soundFormat == DefineSoundTag.FORMAT_ADPCM) {
SWFInputStream sis=new SWFInputStream(new ByteArrayInputStream(soundData),SWF.DEFAULT_VERSION);
exportFormat=""String_Node_Str"";
try {
int adpcmCodeSize=(int)sis.readUB(2);
bits=2 + adpcmCodeSize;
}
 catch (IOException ex) {
Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
}
}
if (soundFormat == DefineSoundTag.FORMAT_MP3) {
exportFormat=""String_Node_Str"";
if (soundType == 0) {
format+=1;
}
format+=4;
SWFInputStream sis=new SWFInputStream(new ByteArrayInputStream(soundData),SWF.DEFAULT_VERSION);
try {
sis.readSI16();
MP3FRAME frame=new MP3FRAME(sis);
int bitRate=frame.getBitrate();
switch (bitRate) {
case 8:
bits=6;
break;
case 16:
bits=7;
break;
case 20:
bits=8;
break;
case 24:
bits=9;
break;
case 32:
bits=10;
break;
case 48:
bits=11;
break;
case 56:
bits=12;
break;
case 64:
bits=13;
break;
case 80:
bits=14;
break;
case 112:
bits=15;
break;
case 128:
bits=16;
break;
case 160:
bits=17;
break;
}
}
 catch (IOException ex) {
Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
}
}
byte data[]=new byte[0];
try {
data=swf.exportSound(symbol);
}
 catch (IOException ex) {
Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
}
if (!exportFormat.equals(""String_Node_Str"")) {
String symbolFile=""String_Node_Str"" + symbol.getCharacterID() + ""String_Node_Str""+ exportFormat;
files.put(symbolFile,data);
String mediaLinkStr=""String_Node_Str"" + symbolFile + ""String_Node_Str""+ getTimestamp()+ ""String_Node_Str""+ data.length+ ""String_Node_Str"";
mediaLinkStr+=""String_Node_Str"" + symbolFile + ""String_Node_Str"";
mediaLinkStr+=""String_Node_Str"";
mediaLinkStr+=rateMap[soundRate] + ""String_Node_Str"";
mediaLinkStr+=""String_Node_Str"" + (soundSize == 1 ? ""String_Node_Str"" : ""String_Node_Str"");
mediaLinkStr+=""String_Node_Str"" + (soundType == 1 ? ""String_Node_Str"" : ""String_Node_Str"");
mediaLinkStr+=""String_Node_Str"";
mediaLinkStr+=""String_Node_Str"" + format + ""String_Node_Str""+ bits+ ""String_Node_Str""+ soundSampleCount+ ""String_Node_Str"";
if (characterClasses.containsKey(symbol.getCharacterID())) {
mediaLinkStr+=""String_Node_Str"" + characterClasses.get(symbol.getCharacterID()) + ""String_Node_Str"";
}
if (characterVariables.containsKey(symbol.getCharacterID())) {
mediaLinkStr+=""String_Node_Str"" + xmlString(characterVariables.get(symbol.getCharacterID())) + ""String_Node_Str"";
}
mediaLinkStr+=""String_Node_Str"";
media.add(mediaLinkStr);
}
}
 else if (symbol instanceof DefineVideoStreamTag) {
DefineVideoStreamTag video=(DefineVideoStreamTag)symbol;
String videoType=""String_Node_Str"";
switch (video.codecID) {
case 2:
videoType=""String_Node_Str"";
break;
case 3:
videoType=""String_Node_Str"";
break;
case 4:
videoType=""String_Node_Str"";
break;
case 5:
videoType=""String_Node_Str"";
break;
}
byte data[]=new byte[0];
try {
data=swf.exportMovie(video);
}
 catch (IOException ex) {
Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
}
String symbolFile=""String_Node_Str"" + symbol.getCharacterID() + ""String_Node_Str""+ ""String_Node_Str"";
String mediaLinkStr=""String_Node_Str"";
if (data.length == 0) {
long ts=getTimestamp();
String datFileName=""String_Node_Str"" + (datfiles.size() + 1) + ""String_Node_Str""+ ts+ ""String_Node_Str"";
mediaLinkStr=""String_Node_Str"" + symbolFile + ""String_Node_Str""+ symbolFile+ ""String_Node_Str""+ ts+ ""String_Node_Str""+ datFileName+ ""String_Node_Str"";
datfiles.put(datFileName,new byte[]{(byte)0x03,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0xA0,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x78,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01,(byte)0x01,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x59,(byte)0x40,(byte)0x18,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0xFF,(byte)0xFE,(byte)0xFF,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00});
}
 else {
files.put(symbolFile,data);
mediaLinkStr=""String_Node_Str"" + symbolFile + ""String_Node_Str""+ getTimestamp()+ ""String_Node_Str""+ data.length+ ""String_Node_Str"";
mediaLinkStr+=""String_Node_Str"" + symbolFile + ""String_Node_Str"";
mediaLinkStr+=""String_Node_Str"" + videoType + ""String_Node_Str"";
mediaLinkStr+=""String_Node_Str"" + swf.frameRate + ""String_Node_Str"";
mediaLinkStr+=""String_Node_Str"" + video.width + ""String_Node_Str"";
mediaLinkStr+=""String_Node_Str"" + video.height + ""String_Node_Str"";
double len=((double)video.numFrames) / ((double)swf.frameRate);
mediaLinkStr+=""String_Node_Str"" + len + ""String_Node_Str"";
if (characterClasses.containsKey(symbol.getCharacterID())) {
mediaLinkStr+=""String_Node_Str"" + characterClasses.get(symbol.getCharacterID()) + ""String_Node_Str"";
}
if (characterVariables.containsKey(symbol.getCharacterID())) {
mediaLinkStr+=""String_Node_Str"" + xmlString(characterVariables.get(symbol.getCharacterID())) + ""String_Node_Str"";
}
mediaLinkStr+=""String_Node_Str"";
}
media.add(mediaLinkStr);
}
}
if (!media.isEmpty()) {
ret+=""String_Node_Str"";
for (String m : media) {
ret+=m;
}
ret+=""String_Node_Str"";
}
if (!symbols.isEmpty()) {
ret+=""String_Node_Str"";
for (String s : symbols) {
ret+=s;
}
ret+=""String_Node_Str"";
}
return ret;
}",0.9417107177067442
62119,"private void restoreControlFlowPass(ConstantPool constants,MethodBody body,boolean secondpass){
  try {
    HashMap<Integer,List<Integer>> refs;
    int visited2[]=new int[code.size()];
    refs=visitCode(body);
    HashMap<Integer,List<Object>> appended=new HashMap<>();
{
      restoreControlFlow(0,refs,visited2,appended);
      for (      ABCException e : body.exceptions) {
        try {
          restoreControlFlow(adr2pos(e.start),refs,visited2,appended);
          restoreControlFlow(adr2pos(e.target),refs,visited2,appended);
          restoreControlFlow(adr2pos(e.end),refs,visited2,appended);
        }
 catch (        ConvertException ex) {
          Logger.getLogger(AVM2Code.class.getName()).log(Level.FINE,null,ex);
        }
      }
    }
    for (    int ip : appended.keySet()) {
      code.get(ip).replaceWith=appended.get(ip);
    }
  }
 catch (  ConvertException cex) {
    cex.printStackTrace();
  }
  invalidateCache();
  try {
    List<Integer> outputMap=new ArrayList<>();
    String src=Highlighting.stripHilights(toASMSource(constants,body,outputMap,false));
    AVM2Code acode=ASM3Parser.parse(new ByteArrayInputStream(src.getBytes(""String_Node_Str"")),constants,null,body);
    for (int i=0; i < acode.code.size(); i++) {
      if (outputMap.size() > i) {
        int tpos=outputMap.get(i);
        if (tpos == -1) {
        }
 else         if (code.get(tpos).mappedOffset >= 0) {
          acode.code.get(i).mappedOffset=code.get(tpos).mappedOffset;
        }
 else {
          acode.code.get(i).mappedOffset=pos2adr(tpos);
        }
      }
    }
    this.code=acode.code;
  }
 catch (  IOException ex) {
    Logger.getLogger(AVM2Code.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  ParseException ex) {
    Logger.getLogger(AVM2Code.class.getName()).log(Level.FINE,null,ex);
  }
  invalidateCache();
  removeDeadCode(constants,body);
}","private void restoreControlFlowPass(ConstantPool constants,MethodBody body,boolean secondpass){
  try {
    HashMap<Integer,List<Integer>> refs;
    int visited2[]=new int[code.size()];
    refs=visitCode(body);
    HashMap<Integer,List<Object>> appended=new HashMap<>();
{
      restoreControlFlow(0,refs,visited2,appended);
      for (      ABCException e : body.exceptions) {
        try {
          restoreControlFlow(adr2pos(e.start),refs,visited2,appended);
          restoreControlFlow(adr2pos(e.target),refs,visited2,appended);
          restoreControlFlow(adr2pos(e.end),refs,visited2,appended);
        }
 catch (        ConvertException ex) {
          Logger.getLogger(AVM2Code.class.getName()).log(Level.FINE,null,ex);
        }
      }
    }
    for (    int ip : appended.keySet()) {
      code.get(ip).replaceWith=appended.get(ip);
    }
  }
 catch (  ConvertException cex) {
    Logger.getLogger(AVM2Code.class.getName()).log(Level.SEVERE,""String_Node_Str"",cex);
  }
  invalidateCache();
  try {
    List<Integer> outputMap=new ArrayList<>();
    String src=Highlighting.stripHilights(toASMSource(constants,body,outputMap,false));
    AVM2Code acode=ASM3Parser.parse(new ByteArrayInputStream(src.getBytes(""String_Node_Str"")),constants,null,body);
    for (int i=0; i < acode.code.size(); i++) {
      if (outputMap.size() > i) {
        int tpos=outputMap.get(i);
        if (tpos == -1) {
        }
 else         if (code.get(tpos).mappedOffset >= 0) {
          acode.code.get(i).mappedOffset=code.get(tpos).mappedOffset;
        }
 else {
          acode.code.get(i).mappedOffset=pos2adr(tpos);
        }
      }
    }
    this.code=acode.code;
  }
 catch (  IOException ex) {
    Logger.getLogger(AVM2Code.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  ParseException ex) {
    Logger.getLogger(AVM2Code.class.getName()).log(Level.FINE,null,ex);
  }
  invalidateCache();
  removeDeadCode(constants,body);
}",0.975085234723315
62120,"public AVM2Code deepCopy(){
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try (ObjectOutputStream oos=new ObjectOutputStream(baos)){
      oos.writeObject(this);
      oos.flush();
    }
     AVM2Code copy;
    try (ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()))){
      copy=(AVM2Code)ois.readObject();
    }
     return copy;
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    return null;
  }
}","public AVM2Code deepCopy(){
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try (ObjectOutputStream oos=new ObjectOutputStream(baos)){
      oos.writeObject(this);
      oos.flush();
    }
     AVM2Code copy;
    try (ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()))){
      copy=(AVM2Code)ois.readObject();
    }
     return copy;
  }
 catch (  Exception ex) {
    Logger.getLogger(AVM2Code.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
    return null;
  }
}",0.9060336300692384
62121,"@Override protected List<GraphTargetItem> check(GraphSource srcCode,List<Object> localData,List<GraphPart> allParts,Stack<GraphTargetItem> stack,GraphPart parent,GraphPart part,List<GraphPart> stopPart,List<Loop> loops,List<GraphTargetItem> output,Loop currentLoop){
  List<GraphTargetItem> ret=null;
  @SuppressWarnings(""String_Node_Str"") List<ABCException> parsedExceptions=(List<ABCException>)localData.get(DATA_PARSEDEXCEPTIONS);
  @SuppressWarnings(""String_Node_Str"") List<Integer> finallyJumps=(List<Integer>)localData.get(DATA_FINALLYJUMPS);
  @SuppressWarnings(""String_Node_Str"") List<Integer> ignoredSwitches=(List<Integer>)localData.get(DATA_IGNOREDSWITCHES);
  int ip=part.start;
  int addr=code.fixAddrAfterDebugLine(code.pos2adr(part.start));
  int maxend=-1;
  List<ABCException> catchedExceptions=new ArrayList<>();
  for (int e=0; e < body.exceptions.length; e++) {
    if (addr == code.fixAddrAfterDebugLine(body.exceptions[e].start)) {
      if (!body.exceptions[e].isFinally()) {
        if (((body.exceptions[e].end) > maxend) && (!parsedExceptions.contains(body.exceptions[e]))) {
          catchedExceptions.clear();
          maxend=code.fixAddrAfterDebugLine(body.exceptions[e].end);
          catchedExceptions.add(body.exceptions[e]);
        }
 else         if (code.fixAddrAfterDebugLine(body.exceptions[e].end) == maxend) {
          catchedExceptions.add(body.exceptions[e]);
        }
      }
    }
  }
  if (catchedExceptions.size() > 0) {
    parsedExceptions.addAll(catchedExceptions);
    int endpos=code.adr2pos(code.fixAddrAfterDebugLine(catchedExceptions.get(0).end));
    int endposStartBlock=code.adr2pos(catchedExceptions.get(0).end);
    List<List<GraphTargetItem>> catchedCommands=new ArrayList<>();
    if (code.code.get(endpos).definition instanceof JumpIns) {
      int afterCatchAddr=code.pos2adr(endpos + 1) + code.code.get(endpos).operands[0];
      int afterCatchPos=code.adr2pos(afterCatchAddr);
      Collections.sort(catchedExceptions,new Comparator<ABCException>(){
        @Override public int compare(        ABCException o1,        ABCException o2){
          return code.fixAddrAfterDebugLine(o1.target) - code.fixAddrAfterDebugLine(o2.target);
        }
      }
);
      List<GraphTargetItem> finallyCommands=new ArrayList<>();
      int returnPos=afterCatchPos;
      for (int e=0; e < body.exceptions.length; e++) {
        if (body.exceptions[e].isFinally()) {
          if (addr == code.fixAddrAfterDebugLine(body.exceptions[e].start)) {
            if (afterCatchPos + 1 == code.adr2pos(code.fixAddrAfterDebugLine(body.exceptions[e].end))) {
              AVM2Instruction jmpIns=code.code.get(code.adr2pos(code.fixAddrAfterDebugLine(body.exceptions[e].end)));
              if (jmpIns.definition instanceof JumpIns) {
                int finStart=code.adr2pos(code.fixAddrAfterDebugLine(body.exceptions[e].end) + jmpIns.getBytes().length + jmpIns.operands[0]);
                boolean switchFound=false;
                GraphPart fpart=null;
                for (                GraphPart p : allParts) {
                  if (p.start == finStart) {
                    fpart=p;
                    break;
                  }
                }
                for (int f=finStart; f < code.code.size(); f++) {
                  if (code.code.get(f).definition instanceof LookupSwitchIns) {
                    AVM2Instruction swins=code.code.get(f);
                    if (swins.operands.length >= 3) {
                      if (swins.operands[0] == swins.getBytes().length) {
                        if (code.adr2pos(code.pos2adr(f) + swins.operands[2]) < finStart) {
                          stack.push(new ExceptionTreeItem(body.exceptions[e]));
                          GraphPart fepart=null;
                          for (                          GraphPart p : allParts) {
                            if (p.start == f + 1) {
                              fepart=p;
                              break;
                            }
                          }
                          ignoredSwitches.add(f);
                          List<GraphPart> stopPart2=new ArrayList<>(stopPart);
                          stopPart2.add(fepart);
                          finallyCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,fpart,stopPart2,loops);
                          returnPos=f + 1;
                          break;
                        }
                      }
                    }
                  }
                }
                if (!switchFound) {
                  finallyCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,fpart,null,loops);
                }
                finallyJumps.add(finStart);
                break;
              }
            }
          }
        }
      }
      List<GraphPart> catchParts=new ArrayList<>();
      for (int e=0; e < catchedExceptions.size(); e++) {
        int eendpos;
        if (e < catchedExceptions.size() - 1) {
          eendpos=code.adr2pos(code.fixAddrAfterDebugLine(catchedExceptions.get(e + 1).target)) - 2;
        }
 else {
          eendpos=afterCatchPos - 1;
        }
        GraphPart npart=null;
        int findpos=code.adr2pos(catchedExceptions.get(e).target);
        for (        GraphPart p : allParts) {
          if (p.start == findpos) {
            npart=p;
            catchParts.add(p);
            break;
          }
        }
        GraphPart nepart=null;
        for (        GraphPart p : allParts) {
          if (p.start == eendpos + 1) {
            nepart=p;
            break;
          }
        }
        stack.add(new ExceptionTreeItem(catchedExceptions.get(e)));
        List<Object> localData2=new ArrayList<>();
        localData2.addAll(localData);
        localData2.set(DATA_SCOPESTACK,new Stack<GraphTargetItem>());
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(nepart);
        catchedCommands.add(printGraph(new ArrayList<GraphPart>(),localData2,stack,allParts,parent,npart,stopPart2,loops));
      }
      GraphPart nepart=null;
      for (      GraphPart p : allParts) {
        if (p.start == endposStartBlock) {
          nepart=p;
          break;
        }
      }
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(nepart);
      stopPart2.addAll(catchParts);
      List<GraphTargetItem> tryCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,part,stopPart2,loops);
      output.clear();
      output.add(new TryTreeItem(tryCommands,catchedExceptions,catchedCommands,finallyCommands));
      ip=returnPos;
    }
  }
  if (ip != part.start) {
    part=null;
    for (    GraphPart p : allParts) {
      List<GraphPart> ps=p.getSubParts();
      for (      GraphPart p2 : ps) {
        if (p2.start == ip) {
          part=p2;
          break;
        }
      }
    }
    ret=new ArrayList<>();
    ret.addAll(output);
    GraphTargetItem lop=checkLoop(part,stopPart,loops);
    if (lop == null) {
      ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,part,stopPart,loops));
    }
 else {
      ret.add(lop);
    }
    return ret;
  }
  if (part.nextParts.isEmpty()) {
    if (code.code.get(part.end).definition instanceof ReturnValueIns) {
      if (part.getHeight() >= 3) {
        if (code.code.get(part.getPosAt(part.getHeight() - 2)).definition instanceof KillIns) {
          if (code.code.get(part.getPosAt(part.getHeight() - 3)).definition instanceof GetLocalTypeIns) {
            if (output.size() >= 2) {
              if (output.get(output.size() - 2) instanceof SetLocalTreeItem) {
                ret=new ArrayList<>();
                ret.addAll(output);
                ret.remove(ret.size() - 1);
                ret.add(new ReturnValueTreeItem(code.code.get(part.end),((SetLocalTreeItem)output.get(output.size() - 2)).value));
                return ret;
              }
            }
          }
        }
      }
    }
  }
  if ((code.code.get(part.end).definition instanceof LookupSwitchIns) && ignoredSwitches.contains(part.end)) {
    ret=new ArrayList<>();
    ret.addAll(output);
    return ret;
  }
  if (((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictEqTreeItem)&& (part.nextParts.get(0).getHeight() >= 2)&& (code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(0).start)).definition instanceof PushIntegerTypeIns)&& (code.code.get(part.nextParts.get(0).nextParts.get(0).end).definition instanceof LookupSwitchIns)) || ((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictNeqTreeItem)&& (part.nextParts.get(1).getHeight() >= 2)&& (code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(1).start)).definition instanceof PushIntegerTypeIns)&& (code.code.get(part.nextParts.get(1).nextParts.get(0).end).definition instanceof LookupSwitchIns))) {
    if (stack.peek() instanceof StrictEqTreeItem) {
      ignoredSwitches.add(part.nextParts.get(0).nextParts.get(0).end);
    }
 else {
      ignoredSwitches.add(part.nextParts.get(1).nextParts.get(0).end);
    }
    ret=new ArrayList<>();
    ret.addAll(output);
    boolean reversed=false;
    if (stack.peek() instanceof StrictEqTreeItem) {
      reversed=true;
    }
    GraphTargetItem switchedObject=null;
    if (!output.isEmpty()) {
      if (output.get(output.size() - 1) instanceof SetLocalTreeItem) {
        switchedObject=((SetLocalTreeItem)output.get(output.size() - 1)).value;
      }
    }
    if (switchedObject == null) {
      switchedObject=new NullTreeItem(null);
    }
    HashMap<Integer,GraphTargetItem> caseValuesMap=new HashMap<>();
    GraphTargetItem tar=stack.pop();
    if (tar instanceof StrictEqTreeItem) {
      tar=((StrictEqTreeItem)tar).leftSide;
    }
    if (tar instanceof StrictNeqTreeItem) {
      tar=((StrictNeqTreeItem)tar).leftSide;
    }
    caseValuesMap.put(code.code.get(part.nextParts.get(reversed ? 0 : 1).start).operands[0],tar);
    GraphPart switchLoc=part.nextParts.get(reversed ? 0 : 1).nextParts.get(0);
    while ((code.code.get(part.nextParts.get(reversed ? 1 : 0).end).definition instanceof IfStrictNeIns) || (code.code.get(part.nextParts.get(reversed ? 1 : 0).end).definition instanceof IfStrictEqIns)) {
      part=part.nextParts.get(reversed ? 1 : 0);
      translatePart(localData,part,stack);
      tar=stack.pop();
      if (tar instanceof StrictEqTreeItem) {
        tar=((StrictEqTreeItem)tar).leftSide;
      }
      if (tar instanceof StrictNeqTreeItem) {
        tar=((StrictNeqTreeItem)tar).leftSide;
      }
      if (code.code.get(part.end).definition instanceof IfStrictNeIns) {
        reversed=false;
      }
 else {
        reversed=true;
      }
      caseValuesMap.put(code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(reversed ? 0 : 1).start)).operands[0],tar);
      while (code.code.get(part.nextParts.get(reversed ? 1 : 0).start).definition instanceof JumpIns) {
        reversed=false;
        part=part.nextParts.get(reversed ? 1 : 0);
        if (part instanceof GraphPartMulti) {
          part=((GraphPartMulti)part).parts.get(0);
        }
      }
    }
    boolean hasDefault=false;
    GraphPart dp=part.nextParts.get(reversed ? 1 : 0);
    while (code.code.get(dp.start).definition instanceof JumpIns) {
      if (dp instanceof GraphPartMulti) {
        dp=((GraphPartMulti)dp).parts.get(0);
      }
      dp=dp.nextParts.get(0);
    }
    if (code.code.get(dp.start).definition instanceof PushIntegerTypeIns) {
      hasDefault=true;
    }
    List<GraphTargetItem> caseValues=new ArrayList<>();
    for (int i=0; i < switchLoc.nextParts.size() - 1; i++) {
      if (caseValuesMap.containsKey(i)) {
        caseValues.add(caseValuesMap.get(i));
      }
 else {
        continue;
      }
    }
    List<List<GraphTargetItem>> caseCommands=new ArrayList<>();
    GraphPart next=null;
    List<GraphPart> loopContinues=getLoopsContinues(loops);
    next=switchLoc.getNextPartPath(loopContinues);
    if (next == null) {
      next=switchLoc.getNextSuperPartPath(loopContinues);
    }
    GraphTargetItem ti=checkLoop(next,stopPart,loops);
    currentLoop=new Loop(loops.size(),null,next);
    currentLoop.phase=1;
    loops.add(currentLoop);
    List<Integer> valuesMapping=new ArrayList<>();
    List<GraphPart> caseBodies=new ArrayList<>();
    for (int i=0; i < caseValues.size(); i++) {
      GraphPart cur=switchLoc.nextParts.get(1 + i);
      if (!caseBodies.contains(cur)) {
        caseBodies.add(cur);
      }
      valuesMapping.add(caseBodies.indexOf(cur));
    }
    List<GraphTargetItem> defaultCommands=new ArrayList<>();
    GraphPart defaultPart=null;
    if (hasDefault) {
      defaultPart=switchLoc.nextParts.get(switchLoc.nextParts.size() - 1);
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(next);
      defaultCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,switchLoc,defaultPart,stopPart2,loops);
      if (!defaultCommands.isEmpty()) {
        if (defaultCommands.get(defaultCommands.size() - 1) instanceof BreakItem) {
          if (((BreakItem)defaultCommands.get(defaultCommands.size() - 1)).loopId == currentLoop.id) {
            defaultCommands.remove(defaultCommands.size() - 1);
          }
        }
      }
    }
    List<GraphPart> ignored=new ArrayList<>();
    for (    Loop l : loops) {
      ignored.add(l.loopContinue);
    }
    for (int i=0; i < caseBodies.size(); i++) {
      List<GraphTargetItem> cc=new ArrayList<>();
      GraphPart nextCase=null;
      nextCase=next;
      if (next != null) {
        if (i < caseBodies.size() - 1) {
          if (!caseBodies.get(i).leadsTo(srcCode,caseBodies.get(i + 1),loops)) {
          }
 else {
            nextCase=caseBodies.get(i + 1);
          }
        }
 else         if (hasDefault) {
          if (!caseBodies.get(i).leadsTo(srcCode,defaultPart,loops)) {
          }
 else {
            nextCase=defaultPart;
          }
        }
      }
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(nextCase);
      cc.addAll(0,printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,switchLoc,caseBodies.get(i),stopPart2,loops));
      caseCommands.add(cc);
    }
    SwitchItem sti=new SwitchItem(null,currentLoop,switchedObject,caseValues,caseCommands,defaultCommands,valuesMapping);
    ret.add(sti);
    if (next != null) {
      currentLoop.phase=2;
      ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,next,stopPart,loops));
    }
  }
  return ret;
}","@Override protected List<GraphTargetItem> check(GraphSource srcCode,List<Object> localData,List<GraphPart> allParts,Stack<GraphTargetItem> stack,GraphPart parent,GraphPart part,List<GraphPart> stopPart,List<Loop> loops,List<GraphTargetItem> output,Loop currentLoop){
  List<GraphTargetItem> ret=null;
  @SuppressWarnings(""String_Node_Str"") List<ABCException> parsedExceptions=(List<ABCException>)localData.get(DATA_PARSEDEXCEPTIONS);
  @SuppressWarnings(""String_Node_Str"") List<Integer> finallyJumps=(List<Integer>)localData.get(DATA_FINALLYJUMPS);
  @SuppressWarnings(""String_Node_Str"") List<Integer> ignoredSwitches=(List<Integer>)localData.get(DATA_IGNOREDSWITCHES);
  int ip=part.start;
  int addr=code.fixAddrAfterDebugLine(code.pos2adr(part.start));
  int maxend=-1;
  List<ABCException> catchedExceptions=new ArrayList<>();
  for (int e=0; e < body.exceptions.length; e++) {
    if (addr == code.fixAddrAfterDebugLine(body.exceptions[e].start)) {
      if (!body.exceptions[e].isFinally()) {
        if (((body.exceptions[e].end) > maxend) && (!parsedExceptions.contains(body.exceptions[e]))) {
          catchedExceptions.clear();
          maxend=code.fixAddrAfterDebugLine(body.exceptions[e].end);
          catchedExceptions.add(body.exceptions[e]);
        }
 else         if (code.fixAddrAfterDebugLine(body.exceptions[e].end) == maxend) {
          catchedExceptions.add(body.exceptions[e]);
        }
      }
    }
  }
  if (catchedExceptions.size() > 0) {
    parsedExceptions.addAll(catchedExceptions);
    int endpos=code.adr2pos(code.fixAddrAfterDebugLine(catchedExceptions.get(0).end));
    int endposStartBlock=code.adr2pos(catchedExceptions.get(0).end);
    List<List<GraphTargetItem>> catchedCommands=new ArrayList<>();
    if (code.code.get(endpos).definition instanceof JumpIns) {
      int afterCatchAddr=code.pos2adr(endpos + 1) + code.code.get(endpos).operands[0];
      int afterCatchPos=code.adr2pos(afterCatchAddr);
      Collections.sort(catchedExceptions,new Comparator<ABCException>(){
        @Override public int compare(        ABCException o1,        ABCException o2){
          return code.fixAddrAfterDebugLine(o1.target) - code.fixAddrAfterDebugLine(o2.target);
        }
      }
);
      List<GraphTargetItem> finallyCommands=new ArrayList<>();
      int returnPos=afterCatchPos;
      for (int e=0; e < body.exceptions.length; e++) {
        if (body.exceptions[e].isFinally()) {
          if (addr == code.fixAddrAfterDebugLine(body.exceptions[e].start)) {
            if (afterCatchPos + 1 == code.adr2pos(code.fixAddrAfterDebugLine(body.exceptions[e].end))) {
              AVM2Instruction jmpIns=code.code.get(code.adr2pos(code.fixAddrAfterDebugLine(body.exceptions[e].end)));
              if (jmpIns.definition instanceof JumpIns) {
                int finStart=code.adr2pos(code.fixAddrAfterDebugLine(body.exceptions[e].end) + jmpIns.getBytes().length + jmpIns.operands[0]);
                boolean switchFound=false;
                GraphPart fpart=null;
                for (                GraphPart p : allParts) {
                  if (p.start == finStart) {
                    fpart=p;
                    break;
                  }
                }
                for (int f=finStart; f < code.code.size(); f++) {
                  if (code.code.get(f).definition instanceof LookupSwitchIns) {
                    AVM2Instruction swins=code.code.get(f);
                    if (swins.operands.length >= 3) {
                      if (swins.operands[0] == swins.getBytes().length) {
                        if (code.adr2pos(code.pos2adr(f) + swins.operands[2]) < finStart) {
                          stack.push(new ExceptionTreeItem(body.exceptions[e]));
                          GraphPart fepart=null;
                          for (                          GraphPart p : allParts) {
                            if (p.start == f + 1) {
                              fepart=p;
                              break;
                            }
                          }
                          ignoredSwitches.add(f);
                          List<GraphPart> stopPart2=new ArrayList<>(stopPart);
                          stopPart2.add(fepart);
                          finallyCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,fpart,stopPart2,loops);
                          returnPos=f + 1;
                          break;
                        }
                      }
                    }
                  }
                }
                if (!switchFound) {
                  finallyCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,fpart,null,loops);
                }
                finallyJumps.add(finStart);
                break;
              }
            }
          }
        }
      }
      List<GraphPart> catchParts=new ArrayList<>();
      for (int e=0; e < catchedExceptions.size(); e++) {
        int eendpos;
        if (e < catchedExceptions.size() - 1) {
          eendpos=code.adr2pos(code.fixAddrAfterDebugLine(catchedExceptions.get(e + 1).target)) - 2;
        }
 else {
          eendpos=afterCatchPos - 1;
        }
        GraphPart npart=null;
        int findpos=code.adr2pos(catchedExceptions.get(e).target);
        for (        GraphPart p : allParts) {
          if (p.start == findpos) {
            npart=p;
            catchParts.add(p);
            break;
          }
        }
        GraphPart nepart=null;
        for (        GraphPart p : allParts) {
          if (p.start == eendpos + 1) {
            nepart=p;
            break;
          }
        }
        stack.add(new ExceptionTreeItem(catchedExceptions.get(e)));
        List<Object> localData2=new ArrayList<>();
        localData2.addAll(localData);
        localData2.set(DATA_SCOPESTACK,new Stack<GraphTargetItem>());
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(nepart);
        catchedCommands.add(printGraph(new ArrayList<GraphPart>(),localData2,stack,allParts,parent,npart,stopPart2,loops));
      }
      GraphPart nepart=null;
      for (      GraphPart p : allParts) {
        if (p.start == endposStartBlock) {
          nepart=p;
          break;
        }
      }
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(nepart);
      stopPart2.addAll(catchParts);
      List<GraphTargetItem> tryCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,part,stopPart2,loops);
      output.clear();
      output.add(new TryTreeItem(tryCommands,catchedExceptions,catchedCommands,finallyCommands));
      ip=returnPos;
    }
  }
  if (ip != part.start) {
    part=null;
    for (    GraphPart p : allParts) {
      List<GraphPart> ps=p.getSubParts();
      for (      GraphPart p2 : ps) {
        if (p2.start == ip) {
          part=p2;
          break;
        }
      }
    }
    ret=new ArrayList<>();
    ret.addAll(output);
    GraphTargetItem lop=checkLoop(part,stopPart,loops);
    if (lop == null) {
      ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,part,stopPart,loops));
    }
 else {
      ret.add(lop);
    }
    return ret;
  }
  if (part.nextParts.isEmpty()) {
    if (code.code.get(part.end).definition instanceof ReturnValueIns) {
      if (part.getHeight() >= 3) {
        if (code.code.get(part.getPosAt(part.getHeight() - 2)).definition instanceof KillIns) {
          if (code.code.get(part.getPosAt(part.getHeight() - 3)).definition instanceof GetLocalTypeIns) {
            if (output.size() >= 2) {
              if (output.get(output.size() - 2) instanceof SetLocalTreeItem) {
                ret=new ArrayList<>();
                ret.addAll(output);
                ret.remove(ret.size() - 1);
                ret.add(new ReturnValueTreeItem(code.code.get(part.end),((SetLocalTreeItem)output.get(output.size() - 2)).value));
                return ret;
              }
            }
          }
        }
      }
    }
  }
  if ((code.code.get(part.end).definition instanceof LookupSwitchIns) && ignoredSwitches.contains(part.end)) {
    ret=new ArrayList<>();
    ret.addAll(output);
    return ret;
  }
  if (part.nextParts.size() == 2) {
    if (stack.peek() instanceof StrictNeqTreeItem) {
      System.out.println(""String_Node_Str"");
      if (part.nextParts.get(1).getHeight() >= 2) {
        System.out.println(""String_Node_Str"");
        if (code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(1).start)).definition instanceof PushIntegerTypeIns) {
          System.out.println(""String_Node_Str"");
          if (code.code.get(part.nextParts.get(1).nextParts.get(0).end).definition instanceof LookupSwitchIns) {
            System.out.println(""String_Node_Str"");
          }
        }
      }
    }
  }
  if (((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictEqTreeItem)&& (part.nextParts.get(0).getHeight() >= 2)&& (code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(0).start)).definition instanceof PushIntegerTypeIns)&& (code.code.get(part.nextParts.get(0).nextParts.get(0).end).definition instanceof LookupSwitchIns)) || ((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictNeqTreeItem)&& (part.nextParts.get(1).getHeight() >= 2)&& (code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(1).start)).definition instanceof PushIntegerTypeIns)&& (code.code.get(part.nextParts.get(1).nextParts.get(0).end).definition instanceof LookupSwitchIns))) {
    if (stack.peek() instanceof StrictEqTreeItem) {
      ignoredSwitches.add(part.nextParts.get(0).nextParts.get(0).end);
    }
 else {
      ignoredSwitches.add(part.nextParts.get(1).nextParts.get(0).end);
    }
    ret=new ArrayList<>();
    ret.addAll(output);
    boolean reversed=false;
    if (stack.peek() instanceof StrictEqTreeItem) {
      reversed=true;
    }
    GraphTargetItem switchedObject=null;
    if (!output.isEmpty()) {
      if (output.get(output.size() - 1) instanceof SetLocalTreeItem) {
        switchedObject=((SetLocalTreeItem)output.get(output.size() - 1)).value;
      }
    }
    if (switchedObject == null) {
      switchedObject=new NullTreeItem(null);
    }
    HashMap<Integer,GraphTargetItem> caseValuesMap=new HashMap<>();
    GraphTargetItem tar=stack.pop();
    if (tar instanceof StrictEqTreeItem) {
      tar=((StrictEqTreeItem)tar).leftSide;
    }
    if (tar instanceof StrictNeqTreeItem) {
      tar=((StrictNeqTreeItem)tar).leftSide;
    }
    caseValuesMap.put(code.code.get(part.nextParts.get(reversed ? 0 : 1).start).operands[0],tar);
    GraphPart switchLoc=part.nextParts.get(reversed ? 0 : 1).nextParts.get(0);
    while ((code.code.get(part.nextParts.get(reversed ? 1 : 0).end).definition instanceof IfStrictNeIns) || (code.code.get(part.nextParts.get(reversed ? 1 : 0).end).definition instanceof IfStrictEqIns)) {
      part=part.nextParts.get(reversed ? 1 : 0);
      translatePart(localData,part,stack);
      tar=stack.pop();
      if (tar instanceof StrictEqTreeItem) {
        tar=((StrictEqTreeItem)tar).leftSide;
      }
      if (tar instanceof StrictNeqTreeItem) {
        tar=((StrictNeqTreeItem)tar).leftSide;
      }
      if (code.code.get(part.end).definition instanceof IfStrictNeIns) {
        reversed=false;
      }
 else {
        reversed=true;
      }
      caseValuesMap.put(code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(reversed ? 0 : 1).start)).operands[0],tar);
      while (code.code.get(part.nextParts.get(reversed ? 1 : 0).start).definition instanceof JumpIns) {
        reversed=false;
        part=part.nextParts.get(reversed ? 1 : 0);
        if (part instanceof GraphPartMulti) {
          part=((GraphPartMulti)part).parts.get(0);
        }
      }
    }
    boolean hasDefault=false;
    GraphPart dp=part.nextParts.get(reversed ? 1 : 0);
    while (code.code.get(dp.start).definition instanceof JumpIns) {
      if (dp instanceof GraphPartMulti) {
        dp=((GraphPartMulti)dp).parts.get(0);
      }
      dp=dp.nextParts.get(0);
    }
    if (code.code.get(dp.start).definition instanceof PushIntegerTypeIns) {
      hasDefault=true;
    }
    List<GraphTargetItem> caseValues=new ArrayList<>();
    for (int i=0; i < switchLoc.nextParts.size() - 1; i++) {
      if (caseValuesMap.containsKey(i)) {
        caseValues.add(caseValuesMap.get(i));
      }
 else {
        continue;
      }
    }
    List<List<GraphTargetItem>> caseCommands=new ArrayList<>();
    GraphPart next=null;
    List<GraphPart> loopContinues=getLoopsContinues(loops);
    next=switchLoc.getNextPartPath(loopContinues);
    if (next == null) {
      next=switchLoc.getNextSuperPartPath(loopContinues);
    }
    GraphTargetItem ti=checkLoop(next,stopPart,loops);
    currentLoop=new Loop(loops.size(),null,next);
    currentLoop.phase=1;
    loops.add(currentLoop);
    List<Integer> valuesMapping=new ArrayList<>();
    List<GraphPart> caseBodies=new ArrayList<>();
    for (int i=0; i < caseValues.size(); i++) {
      GraphPart cur=switchLoc.nextParts.get(1 + i);
      if (!caseBodies.contains(cur)) {
        caseBodies.add(cur);
      }
      valuesMapping.add(caseBodies.indexOf(cur));
    }
    List<GraphTargetItem> defaultCommands=new ArrayList<>();
    GraphPart defaultPart=null;
    if (hasDefault) {
      defaultPart=switchLoc.nextParts.get(switchLoc.nextParts.size() - 1);
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(next);
      defaultCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,switchLoc,defaultPart,stopPart2,loops);
      if (!defaultCommands.isEmpty()) {
        if (defaultCommands.get(defaultCommands.size() - 1) instanceof BreakItem) {
          if (((BreakItem)defaultCommands.get(defaultCommands.size() - 1)).loopId == currentLoop.id) {
            defaultCommands.remove(defaultCommands.size() - 1);
          }
        }
      }
    }
    List<GraphPart> ignored=new ArrayList<>();
    for (    Loop l : loops) {
      ignored.add(l.loopContinue);
    }
    for (int i=0; i < caseBodies.size(); i++) {
      List<GraphTargetItem> cc=new ArrayList<>();
      GraphPart nextCase=null;
      nextCase=next;
      if (next != null) {
        if (i < caseBodies.size() - 1) {
          if (!caseBodies.get(i).leadsTo(srcCode,caseBodies.get(i + 1),loops)) {
          }
 else {
            nextCase=caseBodies.get(i + 1);
          }
        }
 else         if (hasDefault) {
          if (!caseBodies.get(i).leadsTo(srcCode,defaultPart,loops)) {
          }
 else {
            nextCase=defaultPart;
          }
        }
      }
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(nextCase);
      cc.addAll(0,printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,switchLoc,caseBodies.get(i),stopPart2,loops));
      caseCommands.add(cc);
    }
    SwitchItem sti=new SwitchItem(null,currentLoop,switchedObject,caseValues,caseCommands,defaultCommands,valuesMapping);
    ret.add(sti);
    if (next != null) {
      currentLoop.phase=2;
      ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,next,stopPart,loops));
    }
  }
  return ret;
}",0.97949870818374
62122,"@Override public boolean toBoolean(){
  return (leftSide.toBoolean() != rightSide.toBoolean()) && (leftSide.toNumber() != rightSide.toNumber());
}","@Override public boolean toBoolean(){
  return !((leftSide.toBoolean() == rightSide.toBoolean()) && (leftSide.toNumber() == rightSide.toNumber()));
}",0.976271186440678
62123,"protected List<GraphTargetItem> printGraph(List<GraphPart> visited,List<Object> localData,Stack<GraphTargetItem> stack,List<GraphPart> allParts,GraphPart parent,GraphPart part,List<GraphPart> stopPart,List<Loop> loops,List<GraphTargetItem> ret){
  if (stopPart == null) {
    stopPart=new ArrayList<>();
  }
  if (visited.contains(part)) {
  }
 else {
    visited.add(part);
  }
  if (ret == null) {
    ret=new ArrayList<>();
  }
  boolean debugMode=false;
  if (debugMode) {
    System.err.println(""String_Node_Str"" + part + ""String_Node_Str""+ part.nextParts.size());
  }
  if (part == null) {
    return ret;
  }
  part=checkPart(localData,part);
  if (part == null) {
    return ret;
  }
  if (part.ignored) {
    return ret;
  }
  List<GraphPart> loopContinues=getLoopsContinues(loops);
  boolean isLoop=false;
  Loop currentLoop=null;
  for (  Loop el : loops) {
    if ((el.loopContinue == part) && (el.phase == 0)) {
      currentLoop=el;
      currentLoop.phase=1;
      isLoop=true;
      break;
    }
  }
  if (debugMode) {
    System.err.println(""String_Node_Str"" + loops.size());
  }
  for (int l=loops.size() - 1; l >= 0; l--) {
    Loop el=loops.get(l);
    if (el == currentLoop) {
      if (debugMode) {
        System.err.println(""String_Node_Str"" + el);
      }
      continue;
    }
    if (el.phase != 1) {
      if (debugMode) {
      }
      continue;
    }
    if (el.loopBreak == part) {
      if (currentLoop != null) {
        currentLoop.phase=0;
      }
      ret.add(new BreakItem(null,el.id));
      return ret;
    }
    if (el.loopPreContinue == part) {
      if (currentLoop != null) {
        currentLoop.phase=0;
      }
      ret.add(new ContinueItem(null,el.id));
      return ret;
    }
    if (el.loopContinue == part) {
      if (currentLoop != null) {
        currentLoop.phase=0;
      }
      ret.add(new ContinueItem(null,el.id));
      return ret;
    }
  }
  if (stopPart.contains(part)) {
    if (currentLoop != null) {
      currentLoop.phase=0;
    }
    return ret;
  }
  if ((part != null) && (code.size() <= part.start)) {
    ret.add(new ScriptEndItem());
    return ret;
  }
  List<GraphTargetItem> currentRet=ret;
  UniversalLoopItem loopItem=null;
  if (isLoop) {
    loopItem=new UniversalLoopItem(null,currentLoop);
    currentRet.add(loopItem);
    loopItem.commands=new ArrayList<>();
    currentRet=loopItem.commands;
  }
  boolean parseNext=true;
  List<GraphTargetItem> output=new ArrayList<>();
  List<GraphPart> parts=new ArrayList<>();
  if (part instanceof GraphPartMulti) {
    parts=((GraphPartMulti)part).parts;
  }
 else {
    parts.add(part);
  }
  int end=part.end;
  for (  GraphPart p : parts) {
    end=p.end;
    int start=p.start;
    try {
      output.addAll(code.translatePart(p,localData,stack,start,end));
      if ((end >= code.size() - 1) && p.nextParts.isEmpty()) {
        output.add(new ScriptEndItem());
      }
    }
 catch (    Exception ex) {
      Logger.getLogger(Graph.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
      return ret;
    }
  }
  if (part.nextParts.size() == 2) {
    if ((stack.size() >= 2) && (stack.get(stack.size() - 1) instanceof NotItem) && (((NotItem)(stack.get(stack.size() - 1))).getOriginal().getNotCoerced() == stack.get(stack.size() - 2).getNotCoerced())) {
      currentRet.addAll(output);
      GraphPart sp0=getNextNoJump(part.nextParts.get(0));
      GraphPart sp1=getNextNoJump(part.nextParts.get(1));
      boolean reversed=false;
      loopContinues=getLoopsContinues(loops);
      loopContinues.add(part);
      if (sp1.leadsTo(code,sp0,loops)) {
      }
 else       if (sp0.leadsTo(code,sp1,loops)) {
        reversed=true;
      }
      GraphPart next=reversed ? sp0 : sp1;
      GraphTargetItem ti;
      if ((ti=checkLoop(next,stopPart,loops)) != null) {
        currentRet.add(ti);
      }
 else {
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(reversed ? sp1 : sp0);
        printGraph(visited,localData,stack,allParts,parent,next,stopPart2,loops);
        GraphTargetItem second=stack.pop();
        GraphTargetItem first=stack.pop();
        if (!reversed) {
          AndItem a=new AndItem(null,first,second);
          stack.push(a);
          a.firstPart=part;
          if (second instanceof AndItem) {
            a.firstPart=((AndItem)second).firstPart;
          }
          if (second instanceof OrItem) {
            a.firstPart=((OrItem)second).firstPart;
          }
        }
 else {
          OrItem o=new OrItem(null,first,second);
          stack.push(o);
          o.firstPart=part;
          if (second instanceof AndItem) {
            o.firstPart=((AndItem)second).firstPart;
          }
          if (second instanceof OrItem) {
            o.firstPart=((OrItem)second).firstPart;
          }
        }
        next=reversed ? sp1 : sp0;
        if ((ti=checkLoop(next,stopPart,loops)) != null) {
          currentRet.add(ti);
        }
 else {
          currentRet.addAll(printGraph(visited,localData,stack,allParts,parent,next,stopPart,loops));
        }
      }
      parseNext=false;
    }
 else     if ((stack.size() >= 2) && (stack.get(stack.size() - 1).getNotCoerced() == stack.get(stack.size() - 2).getNotCoerced())) {
      currentRet.addAll(output);
      GraphPart sp0=getNextNoJump(part.nextParts.get(0));
      GraphPart sp1=getNextNoJump(part.nextParts.get(1));
      boolean reversed=false;
      loopContinues=getLoopsContinues(loops);
      loopContinues.add(part);
      if (sp1.leadsTo(code,sp0,loops)) {
      }
 else       if (sp0.leadsTo(code,sp1,loops)) {
        reversed=true;
      }
      GraphPart next=reversed ? sp0 : sp1;
      GraphTargetItem ti;
      if ((ti=checkLoop(next,stopPart,loops)) != null) {
        currentRet.add(ti);
      }
 else {
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(reversed ? sp1 : sp0);
        printGraph(visited,localData,stack,allParts,parent,next,stopPart2,loops);
        GraphTargetItem second=stack.pop();
        GraphTargetItem first=stack.pop();
        if (reversed) {
          AndItem a=new AndItem(null,first,second);
          stack.push(a);
          a.firstPart=part;
          if (second instanceof AndItem) {
            a.firstPart=((AndItem)second).firstPart;
          }
          if (second instanceof OrItem) {
            a.firstPart=((AndItem)second).firstPart;
          }
        }
 else {
          OrItem o=new OrItem(null,first,second);
          stack.push(o);
          o.firstPart=part;
          if (second instanceof OrItem) {
            o.firstPart=((OrItem)second).firstPart;
          }
          if (second instanceof OrItem) {
            o.firstPart=((OrItem)second).firstPart;
          }
        }
        next=reversed ? sp1 : sp0;
        if ((ti=checkLoop(next,stopPart,loops)) != null) {
          currentRet.add(ti);
        }
 else {
          currentRet.addAll(printGraph(visited,localData,stack,allParts,parent,next,stopPart,loops));
        }
      }
      parseNext=false;
    }
  }
  if (parseNext) {
    List<GraphTargetItem> retCheck=check(code,localData,allParts,stack,parent,part,stopPart,loops,output,currentLoop);
    if (retCheck != null) {
      if (!retCheck.isEmpty()) {
        currentRet.addAll(retCheck);
      }
      parseNext=false;
    }
 else {
      currentRet.addAll(output);
    }
  }
  if (parseNext) {
    if (part.nextParts.size() > 2) {
      GraphPart next=getMostCommonPart(part.nextParts,loops);
      List<GraphPart> vis=new ArrayList<>();
      GraphTargetItem switchedItem=stack.pop();
      List<GraphTargetItem> caseValues=new ArrayList<>();
      List<List<GraphTargetItem>> caseCommands=new ArrayList<>();
      List<GraphTargetItem> defaultCommands=new ArrayList<>();
      List<Integer> valueMappings=new ArrayList<>();
      Loop swLoop=new Loop(loops.size(),null,next);
      swLoop.phase=1;
      loops.add(swLoop);
      boolean first=false;
      for (      GraphPart p : part.nextParts) {
        if (vis.contains(p)) {
          valueMappings.add(caseCommands.size() - 1);
          continue;
        }
        if (!first) {
          valueMappings.add(caseCommands.size());
        }
        List<GraphPart> stopPart2=new ArrayList<>();
        if (next != null) {
          stopPart2.add(next);
        }
 else         if (!stopPart.isEmpty()) {
          stopPart2.add(stopPart.get(stopPart.size() - 1));
        }
        for (        GraphPart p2 : part.nextParts) {
          if (p2 == p) {
            continue;
          }
          if (!stopPart2.contains(p2)) {
            stopPart2.add(p2);
          }
        }
        if (next != p) {
          if (first) {
            defaultCommands=printGraph(visited,prepareBranchLocalData(localData),stack,allParts,part,p,stopPart2,loops);
          }
 else {
            caseCommands.add(printGraph(visited,prepareBranchLocalData(localData),stack,allParts,part,p,stopPart2,loops));
          }
          vis.add(p);
        }
        first=false;
      }
      SwitchItem sw=new SwitchItem(null,null,switchedItem,caseValues,caseCommands,defaultCommands,valueMappings);
      currentRet.add(sw);
      swLoop.phase=2;
      if (next != null) {
        currentRet.addAll(printGraph(visited,localData,stack,allParts,part,next,stopPart,loops));
      }
    }
 else     if (part.nextParts.size() == 2) {
      GraphTargetItem expr=stack.pop();
      if (expr instanceof LogicalOpItem) {
        expr=((LogicalOpItem)expr).invert();
      }
 else {
        expr=new NotItem(null,expr);
      }
      GraphPart next=getNextCommonPart(part,loops);
      @SuppressWarnings(""String_Node_Str"") Stack<GraphTargetItem> trueStack=(Stack<GraphTargetItem>)stack.clone();
      @SuppressWarnings(""String_Node_Str"") Stack<GraphTargetItem> falseStack=(Stack<GraphTargetItem>)stack.clone();
      int trueStackSizeBefore=trueStack.size();
      int falseStackSizeBefore=falseStack.size();
      List<GraphTargetItem> onTrue=new ArrayList<>();
      boolean isEmpty=part.nextParts.get(0) == part.nextParts.get(1);
      if (isEmpty) {
        next=part.nextParts.get(0);
      }
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      if (next != null) {
        stopPart2.add(next);
      }
      if (!isEmpty) {
        onTrue=printGraph(visited,prepareBranchLocalData(localData),trueStack,allParts,part,part.nextParts.get(1),stopPart2,loops);
      }
      List<GraphTargetItem> onFalse=new ArrayList<>();
      if (!isEmpty) {
        onFalse=printGraph(visited,prepareBranchLocalData(localData),falseStack,allParts,part,part.nextParts.get(0),stopPart2,loops);
      }
      if (isEmpty(onTrue) && isEmpty(onFalse) && (trueStack.size() > trueStackSizeBefore)&& (falseStack.size() > falseStackSizeBefore)) {
        stack.push(new TernarOpItem(null,expr,trueStack.pop(),falseStack.pop()));
      }
 else {
        currentRet.add(new IfItem(null,expr,onTrue,onFalse));
      }
      if (next != null) {
        printGraph(visited,localData,stack,allParts,part,next,stopPart,loops,currentRet);
      }
    }
 else     if (part.nextParts.size() == 1) {
      boolean nextloop=false;
      for (      Loop l : loops) {
        if (part.nextParts.get(0) == l.loopContinue) {
          nextloop=true;
          break;
        }
        if (part.nextParts.get(0) == l.loopPreContinue) {
          nextloop=true;
          break;
        }
      }
      if (true) {
        printGraph(visited,localData,stack,allParts,part,part.nextParts.get(0),stopPart,loops,currentRet);
      }
    }
  }
  if (isLoop) {
    LoopItem li=loopItem;
    boolean loopTypeFound=false;
    boolean hasContinue=false;
    processIfs(loopItem.commands);
    checkContinueAtTheEnd(loopItem.commands,currentLoop);
    List<ContinueItem> continues=loopItem.getContinues();
    for (    ContinueItem c : continues) {
      if (c.loopId == currentLoop.id) {
        hasContinue=true;
        break;
      }
    }
    if (!hasContinue) {
      if (currentLoop.loopPreContinue != null) {
        List<GraphPart> stopContPart=new ArrayList<>();
        stopContPart.add(currentLoop.loopContinue);
        GraphPart precoBackup=currentLoop.loopPreContinue;
        currentLoop.loopPreContinue=null;
        loopItem.commands.addAll(printGraph(visited,localData,new Stack<GraphTargetItem>(),allParts,null,precoBackup,stopContPart,loops));
      }
    }
    if (!loopTypeFound && (!loopItem.commands.isEmpty())) {
      if (loopItem.commands.get(0) instanceof IfItem) {
        IfItem ifi=(IfItem)loopItem.commands.get(0);
        List<GraphTargetItem> bodyBranch=null;
        boolean inverted=false;
        boolean breakpos2=false;
        if ((ifi.onTrue.size() == 1) && (ifi.onTrue.get(0) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)ifi.onTrue.get(0);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onFalse;
            inverted=true;
          }
        }
 else         if ((ifi.onFalse.size() == 1) && (ifi.onFalse.get(0) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)ifi.onFalse.get(0);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onTrue;
          }
        }
 else         if (loopItem.commands.size() == 2 && (loopItem.commands.get(1) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)loopItem.commands.get(1);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onTrue;
            breakpos2=true;
          }
        }
        if (bodyBranch != null) {
          int index=ret.indexOf(loopItem);
          ret.remove(index);
          List<GraphTargetItem> exprList=new ArrayList<>();
          GraphTargetItem expr=ifi.expression;
          if (inverted) {
            if (expr instanceof LogicalOpItem) {
              expr=((LogicalOpItem)expr).invert();
            }
 else {
              expr=new NotItem(null,expr);
            }
          }
          exprList.add(expr);
          List<GraphTargetItem> commands=new ArrayList<>();
          commands.addAll(bodyBranch);
          loopItem.commands.remove(0);
          if (breakpos2) {
            loopItem.commands.remove(0);
          }
          commands.addAll(loopItem.commands);
          checkContinueAtTheEnd(commands,currentLoop);
          List<GraphTargetItem> finalComm=new ArrayList<>();
          if (currentLoop.loopPreContinue != null) {
            GraphPart backup=currentLoop.loopPreContinue;
            currentLoop.loopPreContinue=null;
            List<GraphPart> stopPart2=new ArrayList<>(stopPart);
            stopPart2.add(currentLoop.loopContinue);
            finalComm=printGraph(visited,localData,new Stack<GraphTargetItem>(),allParts,null,backup,stopPart2,loops);
            currentLoop.loopPreContinue=backup;
            checkContinueAtTheEnd(finalComm,currentLoop);
          }
          if (!finalComm.isEmpty()) {
            ret.add(index,li=new ForTreeItem(null,currentLoop,new ArrayList<GraphTargetItem>(),exprList.get(exprList.size() - 1),finalComm,commands));
          }
 else {
            ret.add(index,li=new WhileItem(null,currentLoop,exprList,commands));
          }
          loopTypeFound=true;
        }
      }
    }
    if (!loopTypeFound && (!loopItem.commands.isEmpty())) {
      if (loopItem.commands.get(loopItem.commands.size() - 1) instanceof IfItem) {
        IfItem ifi=(IfItem)loopItem.commands.get(loopItem.commands.size() - 1);
        List<GraphTargetItem> bodyBranch=null;
        boolean inverted=false;
        if ((ifi.onTrue.size() == 1) && (ifi.onTrue.get(0) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)ifi.onTrue.get(0);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onFalse;
            inverted=true;
          }
        }
 else         if ((ifi.onFalse.size() == 1) && (ifi.onFalse.get(0) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)ifi.onFalse.get(0);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onTrue;
          }
        }
        if (bodyBranch != null) {
          int index=ret.indexOf(loopItem);
          ret.remove(index);
          List<GraphTargetItem> exprList=new ArrayList<>();
          GraphTargetItem expr=ifi.expression;
          if (inverted) {
            if (expr instanceof LogicalOpItem) {
              expr=((LogicalOpItem)expr).invert();
            }
 else {
              expr=new NotItem(null,expr);
            }
          }
          checkContinueAtTheEnd(bodyBranch,currentLoop);
          List<GraphTargetItem> commands=new ArrayList<>();
          if (!bodyBranch.isEmpty()) {
            ret.add(index,loopItem);
          }
 else {
            loopItem.commands.remove(loopItem.commands.size() - 1);
            commands.addAll(loopItem.commands);
            commands.addAll(bodyBranch);
            exprList.add(expr);
            checkContinueAtTheEnd(commands,currentLoop);
            ret.add(index,li=new DoWhileItem(null,currentLoop,commands,exprList));
          }
          loopTypeFound=true;
        }
      }
    }
    if (!loopTypeFound) {
      if (currentLoop.loopPreContinue != null) {
        loopTypeFound=true;
        GraphPart backup=currentLoop.loopPreContinue;
        currentLoop.loopPreContinue=null;
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(currentLoop.loopContinue);
        List<GraphTargetItem> finalComm=printGraph(visited,localData,new Stack<GraphTargetItem>(),allParts,null,backup,stopPart2,loops);
        currentLoop.loopPreContinue=backup;
        checkContinueAtTheEnd(finalComm,currentLoop);
        if (!finalComm.isEmpty()) {
          if (finalComm.get(finalComm.size() - 1) instanceof IfItem) {
            IfItem ifi=(IfItem)finalComm.get(finalComm.size() - 1);
            boolean ok=false;
            boolean invert=false;
            if (((ifi.onTrue.size() == 1) && (ifi.onTrue.get(0) instanceof BreakItem) && (((BreakItem)ifi.onTrue.get(0)).loopId == currentLoop.id)) && ((ifi.onTrue.size() == 1) && (ifi.onFalse.get(0) instanceof ContinueItem) && (((ContinueItem)ifi.onFalse.get(0)).loopId == currentLoop.id))) {
              ok=true;
              invert=true;
            }
            if (((ifi.onTrue.size() == 1) && (ifi.onTrue.get(0) instanceof ContinueItem) && (((ContinueItem)ifi.onTrue.get(0)).loopId == currentLoop.id)) && ((ifi.onTrue.size() == 1) && (ifi.onFalse.get(0) instanceof BreakItem) && (((BreakItem)ifi.onFalse.get(0)).loopId == currentLoop.id))) {
              ok=true;
            }
            if (ok) {
              finalComm.remove(finalComm.size() - 1);
              int index=ret.indexOf(loopItem);
              ret.remove(index);
              List<GraphTargetItem> exprList=new ArrayList<>(finalComm);
              GraphTargetItem expr=ifi.expression;
              if (invert) {
                if (expr instanceof LogicalOpItem) {
                  expr=((LogicalOpItem)expr).invert();
                }
 else {
                  expr=new NotItem(null,expr);
                }
              }
              exprList.add(expr);
              ret.add(index,li=new DoWhileItem(null,currentLoop,loopItem.commands,exprList));
            }
          }
        }
      }
    }
    if (!loopTypeFound) {
      checkContinueAtTheEnd(loopItem.commands,currentLoop);
    }
    currentLoop.phase=2;
    GraphTargetItem replaced=checkLoop(li,localData,loops);
    if (replaced != li) {
      int index=ret.indexOf(li);
      ret.remove(index);
      if (replaced != null) {
        ret.add(index,replaced);
      }
    }
    if (currentLoop.loopBreak != null) {
      ret.addAll(printGraph(visited,localData,stack,allParts,part,currentLoop.loopBreak,stopPart,loops));
    }
  }
  return ret;
}","protected List<GraphTargetItem> printGraph(List<GraphPart> visited,List<Object> localData,Stack<GraphTargetItem> stack,List<GraphPart> allParts,GraphPart parent,GraphPart part,List<GraphPart> stopPart,List<Loop> loops,List<GraphTargetItem> ret){
  if (stopPart == null) {
    stopPart=new ArrayList<>();
  }
  if (visited.contains(part)) {
  }
 else {
    visited.add(part);
  }
  if (ret == null) {
    ret=new ArrayList<>();
  }
  boolean debugMode=false;
  if (debugMode) {
    System.err.println(""String_Node_Str"" + part + ""String_Node_Str""+ part.nextParts.size());
  }
  if (part == null) {
    return ret;
  }
  part=checkPart(localData,part);
  if (part == null) {
    return ret;
  }
  if (part.ignored) {
    return ret;
  }
  List<GraphPart> loopContinues=getLoopsContinues(loops);
  boolean isLoop=false;
  Loop currentLoop=null;
  for (  Loop el : loops) {
    if ((el.loopContinue == part) && (el.phase == 0)) {
      currentLoop=el;
      currentLoop.phase=1;
      isLoop=true;
      break;
    }
  }
  if (debugMode) {
    System.err.println(""String_Node_Str"" + loops.size());
  }
  for (int l=loops.size() - 1; l >= 0; l--) {
    Loop el=loops.get(l);
    if (el == currentLoop) {
      if (debugMode) {
        System.err.println(""String_Node_Str"" + el);
      }
      continue;
    }
    if (el.phase != 1) {
      if (debugMode) {
      }
      continue;
    }
    if (el.loopBreak == part) {
      if (currentLoop != null) {
        currentLoop.phase=0;
      }
      ret.add(new BreakItem(null,el.id));
      return ret;
    }
    if (el.loopPreContinue == part) {
      if (currentLoop != null) {
        currentLoop.phase=0;
      }
      ret.add(new ContinueItem(null,el.id));
      return ret;
    }
    if (el.loopContinue == part) {
      if (currentLoop != null) {
        currentLoop.phase=0;
      }
      ret.add(new ContinueItem(null,el.id));
      return ret;
    }
  }
  if (stopPart.contains(part)) {
    if (currentLoop != null) {
      currentLoop.phase=0;
    }
    return ret;
  }
  if ((part != null) && (code.size() <= part.start)) {
    ret.add(new ScriptEndItem());
    return ret;
  }
  List<GraphTargetItem> currentRet=ret;
  UniversalLoopItem loopItem=null;
  if (isLoop) {
    loopItem=new UniversalLoopItem(null,currentLoop);
    currentRet.add(loopItem);
    loopItem.commands=new ArrayList<>();
    currentRet=loopItem.commands;
  }
  boolean parseNext=true;
  List<GraphTargetItem> output=new ArrayList<>();
  List<GraphPart> parts=new ArrayList<>();
  if (part instanceof GraphPartMulti) {
    parts=((GraphPartMulti)part).parts;
  }
 else {
    parts.add(part);
  }
  int end=part.end;
  for (  GraphPart p : parts) {
    end=p.end;
    int start=p.start;
    try {
      output.addAll(code.translatePart(p,localData,stack,start,end));
      if ((end >= code.size() - 1) && p.nextParts.isEmpty()) {
        output.add(new ScriptEndItem());
      }
    }
 catch (    Exception ex) {
      Logger.getLogger(Graph.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
      return ret;
    }
  }
  if (part.nextParts.size() == 2) {
    if ((stack.size() >= 2) && (stack.get(stack.size() - 1) instanceof NotItem) && (((NotItem)(stack.get(stack.size() - 1))).getOriginal().getNotCoerced() == stack.get(stack.size() - 2).getNotCoerced())) {
      currentRet.addAll(output);
      GraphPart sp0=getNextNoJump(part.nextParts.get(0));
      GraphPart sp1=getNextNoJump(part.nextParts.get(1));
      boolean reversed=false;
      loopContinues=getLoopsContinues(loops);
      loopContinues.add(part);
      if (sp1.leadsTo(code,sp0,loops)) {
      }
 else       if (sp0.leadsTo(code,sp1,loops)) {
        reversed=true;
      }
      GraphPart next=reversed ? sp0 : sp1;
      GraphTargetItem ti;
      if ((ti=checkLoop(next,stopPart,loops)) != null) {
        currentRet.add(ti);
      }
 else {
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(reversed ? sp1 : sp0);
        printGraph(visited,localData,stack,allParts,parent,next,stopPart2,loops);
        GraphTargetItem second=stack.pop();
        GraphTargetItem first=stack.pop();
        if (!reversed) {
          AndItem a=new AndItem(null,first,second);
          stack.push(a);
          a.firstPart=part;
          if (second instanceof AndItem) {
            a.firstPart=((AndItem)second).firstPart;
          }
          if (second instanceof OrItem) {
            a.firstPart=((OrItem)second).firstPart;
          }
        }
 else {
          OrItem o=new OrItem(null,first,second);
          stack.push(o);
          o.firstPart=part;
          if (second instanceof AndItem) {
            o.firstPart=((AndItem)second).firstPart;
          }
          if (second instanceof OrItem) {
            o.firstPart=((OrItem)second).firstPart;
          }
        }
        next=reversed ? sp1 : sp0;
        if ((ti=checkLoop(next,stopPart,loops)) != null) {
          currentRet.add(ti);
        }
 else {
          currentRet.addAll(printGraph(visited,localData,stack,allParts,parent,next,stopPart,loops));
        }
      }
      parseNext=false;
    }
 else     if ((stack.size() >= 2) && (stack.get(stack.size() - 1).getNotCoerced() == stack.get(stack.size() - 2).getNotCoerced())) {
      currentRet.addAll(output);
      GraphPart sp0=getNextNoJump(part.nextParts.get(0));
      GraphPart sp1=getNextNoJump(part.nextParts.get(1));
      boolean reversed=false;
      loopContinues=getLoopsContinues(loops);
      loopContinues.add(part);
      if (sp1.leadsTo(code,sp0,loops)) {
      }
 else       if (sp0.leadsTo(code,sp1,loops)) {
        reversed=true;
      }
      GraphPart next=reversed ? sp0 : sp1;
      GraphTargetItem ti;
      if ((ti=checkLoop(next,stopPart,loops)) != null) {
        currentRet.add(ti);
      }
 else {
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(reversed ? sp1 : sp0);
        printGraph(visited,localData,stack,allParts,parent,next,stopPart2,loops);
        GraphTargetItem second=stack.pop();
        GraphTargetItem first=stack.pop();
        if (reversed) {
          AndItem a=new AndItem(null,first,second);
          stack.push(a);
          a.firstPart=part;
          if (second instanceof AndItem) {
            a.firstPart=((AndItem)second).firstPart;
          }
          if (second instanceof OrItem) {
            a.firstPart=((AndItem)second).firstPart;
          }
        }
 else {
          OrItem o=new OrItem(null,first,second);
          stack.push(o);
          o.firstPart=part;
          if (second instanceof OrItem) {
            o.firstPart=((OrItem)second).firstPart;
          }
          if (second instanceof OrItem) {
            o.firstPart=((OrItem)second).firstPart;
          }
        }
        next=reversed ? sp1 : sp0;
        if ((ti=checkLoop(next,stopPart,loops)) != null) {
          currentRet.add(ti);
        }
 else {
          currentRet.addAll(printGraph(visited,localData,stack,allParts,parent,next,stopPart,loops));
        }
      }
      parseNext=false;
    }
  }
  if (parseNext) {
    List<GraphTargetItem> retCheck=check(code,localData,allParts,stack,parent,part,stopPart,loops,output,currentLoop);
    if (retCheck != null) {
      if (!retCheck.isEmpty()) {
        currentRet.addAll(retCheck);
      }
      parseNext=false;
    }
 else {
      currentRet.addAll(output);
    }
  }
  if (parseNext) {
    if (part.nextParts.size() > 2) {
      GraphPart next=getMostCommonPart(part.nextParts,loops);
      List<GraphPart> vis=new ArrayList<>();
      GraphTargetItem switchedItem=stack.pop();
      List<GraphTargetItem> caseValues=new ArrayList<>();
      List<List<GraphTargetItem>> caseCommands=new ArrayList<>();
      List<GraphTargetItem> defaultCommands=new ArrayList<>();
      List<Integer> valueMappings=new ArrayList<>();
      Loop swLoop=new Loop(loops.size(),null,next);
      swLoop.phase=1;
      loops.add(swLoop);
      boolean first=false;
      for (      GraphPart p : part.nextParts) {
        if (vis.contains(p)) {
          valueMappings.add(caseCommands.size() - 1);
          continue;
        }
        if (!first) {
          valueMappings.add(caseCommands.size());
        }
        List<GraphPart> stopPart2=new ArrayList<>();
        if (next != null) {
          stopPart2.add(next);
        }
 else         if (!stopPart.isEmpty()) {
          stopPart2.add(stopPart.get(stopPart.size() - 1));
        }
        for (        GraphPart p2 : part.nextParts) {
          if (p2 == p) {
            continue;
          }
          if (!stopPart2.contains(p2)) {
            stopPart2.add(p2);
          }
        }
        if (next != p) {
          if (first) {
            defaultCommands=printGraph(visited,prepareBranchLocalData(localData),stack,allParts,part,p,stopPart2,loops);
          }
 else {
            caseCommands.add(printGraph(visited,prepareBranchLocalData(localData),stack,allParts,part,p,stopPart2,loops));
          }
          vis.add(p);
        }
        first=false;
      }
      SwitchItem sw=new SwitchItem(null,swLoop,switchedItem,caseValues,caseCommands,defaultCommands,valueMappings);
      currentRet.add(sw);
      swLoop.phase=2;
      if (next != null) {
        currentRet.addAll(printGraph(visited,localData,stack,allParts,part,next,stopPart,loops));
      }
    }
 else     if (part.nextParts.size() == 2) {
      GraphTargetItem expr=stack.pop();
      if (expr instanceof LogicalOpItem) {
        expr=((LogicalOpItem)expr).invert();
      }
 else {
        expr=new NotItem(null,expr);
      }
      GraphPart next=getNextCommonPart(part,loops);
      @SuppressWarnings(""String_Node_Str"") Stack<GraphTargetItem> trueStack=(Stack<GraphTargetItem>)stack.clone();
      @SuppressWarnings(""String_Node_Str"") Stack<GraphTargetItem> falseStack=(Stack<GraphTargetItem>)stack.clone();
      int trueStackSizeBefore=trueStack.size();
      int falseStackSizeBefore=falseStack.size();
      List<GraphTargetItem> onTrue=new ArrayList<>();
      boolean isEmpty=part.nextParts.get(0) == part.nextParts.get(1);
      if (isEmpty) {
        next=part.nextParts.get(0);
      }
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      if (next != null) {
        stopPart2.add(next);
      }
      if (!isEmpty) {
        onTrue=printGraph(visited,prepareBranchLocalData(localData),trueStack,allParts,part,part.nextParts.get(1),stopPart2,loops);
      }
      List<GraphTargetItem> onFalse=new ArrayList<>();
      if (!isEmpty) {
        onFalse=printGraph(visited,prepareBranchLocalData(localData),falseStack,allParts,part,part.nextParts.get(0),stopPart2,loops);
      }
      if (isEmpty(onTrue) && isEmpty(onFalse) && (trueStack.size() > trueStackSizeBefore)&& (falseStack.size() > falseStackSizeBefore)) {
        stack.push(new TernarOpItem(null,expr,trueStack.pop(),falseStack.pop()));
      }
 else {
        currentRet.add(new IfItem(null,expr,onTrue,onFalse));
      }
      if (next != null) {
        printGraph(visited,localData,stack,allParts,part,next,stopPart,loops,currentRet);
      }
    }
 else     if (part.nextParts.size() == 1) {
      boolean nextloop=false;
      for (      Loop l : loops) {
        if (part.nextParts.get(0) == l.loopContinue) {
          nextloop=true;
          break;
        }
        if (part.nextParts.get(0) == l.loopPreContinue) {
          nextloop=true;
          break;
        }
      }
      if (true) {
        printGraph(visited,localData,stack,allParts,part,part.nextParts.get(0),stopPart,loops,currentRet);
      }
    }
  }
  if (isLoop) {
    LoopItem li=loopItem;
    boolean loopTypeFound=false;
    boolean hasContinue=false;
    processIfs(loopItem.commands);
    checkContinueAtTheEnd(loopItem.commands,currentLoop);
    List<ContinueItem> continues=loopItem.getContinues();
    for (    ContinueItem c : continues) {
      if (c.loopId == currentLoop.id) {
        hasContinue=true;
        break;
      }
    }
    if (!hasContinue) {
      if (currentLoop.loopPreContinue != null) {
        List<GraphPart> stopContPart=new ArrayList<>();
        stopContPart.add(currentLoop.loopContinue);
        GraphPart precoBackup=currentLoop.loopPreContinue;
        currentLoop.loopPreContinue=null;
        loopItem.commands.addAll(printGraph(visited,localData,new Stack<GraphTargetItem>(),allParts,null,precoBackup,stopContPart,loops));
      }
    }
    if (!loopTypeFound && (!loopItem.commands.isEmpty())) {
      if (loopItem.commands.get(0) instanceof IfItem) {
        IfItem ifi=(IfItem)loopItem.commands.get(0);
        List<GraphTargetItem> bodyBranch=null;
        boolean inverted=false;
        boolean breakpos2=false;
        if ((ifi.onTrue.size() == 1) && (ifi.onTrue.get(0) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)ifi.onTrue.get(0);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onFalse;
            inverted=true;
          }
        }
 else         if ((ifi.onFalse.size() == 1) && (ifi.onFalse.get(0) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)ifi.onFalse.get(0);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onTrue;
          }
        }
 else         if (loopItem.commands.size() == 2 && (loopItem.commands.get(1) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)loopItem.commands.get(1);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onTrue;
            breakpos2=true;
          }
        }
        if (bodyBranch != null) {
          int index=ret.indexOf(loopItem);
          ret.remove(index);
          List<GraphTargetItem> exprList=new ArrayList<>();
          GraphTargetItem expr=ifi.expression;
          if (inverted) {
            if (expr instanceof LogicalOpItem) {
              expr=((LogicalOpItem)expr).invert();
            }
 else {
              expr=new NotItem(null,expr);
            }
          }
          exprList.add(expr);
          List<GraphTargetItem> commands=new ArrayList<>();
          commands.addAll(bodyBranch);
          loopItem.commands.remove(0);
          if (breakpos2) {
            loopItem.commands.remove(0);
          }
          commands.addAll(loopItem.commands);
          checkContinueAtTheEnd(commands,currentLoop);
          List<GraphTargetItem> finalComm=new ArrayList<>();
          if (currentLoop.loopPreContinue != null) {
            GraphPart backup=currentLoop.loopPreContinue;
            currentLoop.loopPreContinue=null;
            List<GraphPart> stopPart2=new ArrayList<>(stopPart);
            stopPart2.add(currentLoop.loopContinue);
            finalComm=printGraph(visited,localData,new Stack<GraphTargetItem>(),allParts,null,backup,stopPart2,loops);
            currentLoop.loopPreContinue=backup;
            checkContinueAtTheEnd(finalComm,currentLoop);
          }
          if (!finalComm.isEmpty()) {
            ret.add(index,li=new ForTreeItem(null,currentLoop,new ArrayList<GraphTargetItem>(),exprList.get(exprList.size() - 1),finalComm,commands));
          }
 else {
            ret.add(index,li=new WhileItem(null,currentLoop,exprList,commands));
          }
          loopTypeFound=true;
        }
      }
    }
    if (!loopTypeFound && (!loopItem.commands.isEmpty())) {
      if (loopItem.commands.get(loopItem.commands.size() - 1) instanceof IfItem) {
        IfItem ifi=(IfItem)loopItem.commands.get(loopItem.commands.size() - 1);
        List<GraphTargetItem> bodyBranch=null;
        boolean inverted=false;
        if ((ifi.onTrue.size() == 1) && (ifi.onTrue.get(0) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)ifi.onTrue.get(0);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onFalse;
            inverted=true;
          }
        }
 else         if ((ifi.onFalse.size() == 1) && (ifi.onFalse.get(0) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)ifi.onFalse.get(0);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onTrue;
          }
        }
        if (bodyBranch != null) {
          int index=ret.indexOf(loopItem);
          ret.remove(index);
          List<GraphTargetItem> exprList=new ArrayList<>();
          GraphTargetItem expr=ifi.expression;
          if (inverted) {
            if (expr instanceof LogicalOpItem) {
              expr=((LogicalOpItem)expr).invert();
            }
 else {
              expr=new NotItem(null,expr);
            }
          }
          checkContinueAtTheEnd(bodyBranch,currentLoop);
          List<GraphTargetItem> commands=new ArrayList<>();
          if (!bodyBranch.isEmpty()) {
            ret.add(index,loopItem);
          }
 else {
            loopItem.commands.remove(loopItem.commands.size() - 1);
            commands.addAll(loopItem.commands);
            commands.addAll(bodyBranch);
            exprList.add(expr);
            checkContinueAtTheEnd(commands,currentLoop);
            ret.add(index,li=new DoWhileItem(null,currentLoop,commands,exprList));
          }
          loopTypeFound=true;
        }
      }
    }
    if (!loopTypeFound) {
      if (currentLoop.loopPreContinue != null) {
        loopTypeFound=true;
        GraphPart backup=currentLoop.loopPreContinue;
        currentLoop.loopPreContinue=null;
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(currentLoop.loopContinue);
        List<GraphTargetItem> finalComm=printGraph(visited,localData,new Stack<GraphTargetItem>(),allParts,null,backup,stopPart2,loops);
        currentLoop.loopPreContinue=backup;
        checkContinueAtTheEnd(finalComm,currentLoop);
        if (!finalComm.isEmpty()) {
          if (finalComm.get(finalComm.size() - 1) instanceof IfItem) {
            IfItem ifi=(IfItem)finalComm.get(finalComm.size() - 1);
            boolean ok=false;
            boolean invert=false;
            if (((ifi.onTrue.size() == 1) && (ifi.onTrue.get(0) instanceof BreakItem) && (((BreakItem)ifi.onTrue.get(0)).loopId == currentLoop.id)) && ((ifi.onTrue.size() == 1) && (ifi.onFalse.get(0) instanceof ContinueItem) && (((ContinueItem)ifi.onFalse.get(0)).loopId == currentLoop.id))) {
              ok=true;
              invert=true;
            }
            if (((ifi.onTrue.size() == 1) && (ifi.onTrue.get(0) instanceof ContinueItem) && (((ContinueItem)ifi.onTrue.get(0)).loopId == currentLoop.id)) && ((ifi.onTrue.size() == 1) && (ifi.onFalse.get(0) instanceof BreakItem) && (((BreakItem)ifi.onFalse.get(0)).loopId == currentLoop.id))) {
              ok=true;
            }
            if (ok) {
              finalComm.remove(finalComm.size() - 1);
              int index=ret.indexOf(loopItem);
              ret.remove(index);
              List<GraphTargetItem> exprList=new ArrayList<>(finalComm);
              GraphTargetItem expr=ifi.expression;
              if (invert) {
                if (expr instanceof LogicalOpItem) {
                  expr=((LogicalOpItem)expr).invert();
                }
 else {
                  expr=new NotItem(null,expr);
                }
              }
              exprList.add(expr);
              ret.add(index,li=new DoWhileItem(null,currentLoop,loopItem.commands,exprList));
            }
          }
        }
      }
    }
    if (!loopTypeFound) {
      checkContinueAtTheEnd(loopItem.commands,currentLoop);
    }
    currentLoop.phase=2;
    GraphTargetItem replaced=checkLoop(li,localData,loops);
    if (replaced != li) {
      int index=ret.indexOf(li);
      ret.remove(index);
      if (replaced != null) {
        ret.add(index,replaced);
      }
    }
    if (currentLoop.loopBreak != null) {
      ret.addAll(printGraph(visited,localData,stack,allParts,part,currentLoop.loopBreak,stopPart,loops));
    }
  }
  return ret;
}",0.9997461800091376
62124,"@Override public void actionPerformed(ActionEvent e){
switch (e.getActionCommand()) {
case ""String_Node_Str"":
    String newLanguage=new SelectLanguageDialog().display();
  if (newLanguage != null) {
    if (newLanguage.equals(""String_Node_Str"")) {
      newLanguage=""String_Node_Str"";
    }
    Configuration.setConfig(""String_Node_Str"",newLanguage);
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    Main.exit();
  }
break;
case ""String_Node_Str"":
Configuration.setConfig(""String_Node_Str"",!miDecompile.isSelected());
clearCache();
if (abcPanel != null) {
abcPanel.reload();
}
reload(true);
doFilter();
break;
case ""String_Node_Str"":
if (miAssociate.getState() == Main.isAddedToContextMenu()) {
return;
}
Main.addToContextMenu(miAssociate.getState());
new Timer().schedule(new TimerTask(){
@Override public void run(){
miAssociate.setState(Main.isAddedToContextMenu());
}
}
,500);
break;
case ""String_Node_Str"":
String documentClass=null;
loopdc: for (Tag t : swf.tags) {
if (t instanceof SymbolClassTag) {
SymbolClassTag sc=(SymbolClassTag)t;
for (int i=0; i < sc.tagIDs.length; i++) {
if (sc.tagIDs[i] == 0) {
documentClass=sc.classNames[i];
break loopdc;
}
}
}
}
if (documentClass != null) {
abcPanel.hilightScript(documentClass);
}
break;
case ""String_Node_Str"":
String confStr=translate(""String_Node_Str"") + ""String_Node_Str"";
if (miParallelSpeedUp.isSelected()) {
confStr+=""String_Node_Str"" + translate(""String_Node_Str"");
}
 else {
confStr+=""String_Node_Str"" + translate(""String_Node_Str"");
}
if (JOptionPane.showConfirmDialog(null,confStr,translate(""String_Node_Str""),JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
Configuration.setConfig(""String_Node_Str"",(Boolean)miParallelSpeedUp.isSelected());
}
 else {
miParallelSpeedUp.setSelected(!miParallelSpeedUp.isSelected());
}
break;
case ""String_Node_Str"":
Configuration.setConfig(""String_Node_Str"",(Boolean)miInternalViewer.isSelected());
break;
case ""String_Node_Str"":
if (searchDialog == null) {
searchDialog=new SearchDialog();
}
searchDialog.setVisible(true);
if (searchDialog.result) {
final String txt=searchDialog.searchField.getText();
if (!txt.equals(""String_Node_Str"")) {
Main.startWork(translate(""String_Node_Str"") + ""String_Node_Str"" + txt+ ""String_Node_Str"");
if (abcPanel != null) {
(new Thread(){
@Override public void run(){
if (abcPanel.search(txt,searchDialog.ignoreCaseCheckBox.isSelected(),searchDialog.regexpCheckBox.isSelected())) {
showDetail(DETAILCARDAS3NAVIGATOR);
showCard(CARDACTIONSCRIPTPANEL);
}
 else {
JOptionPane.showMessageDialog(null,translate(""String_Node_Str"").replace(""String_Node_Str"",txt),translate(""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
}
Main.stopWork();
}
}
).start();
}
 else {
(new Thread(){
@Override public void run(){
if (actionPanel.search(txt,searchDialog.ignoreCaseCheckBox.isSelected(),searchDialog.regexpCheckBox.isSelected())) {
showCard(CARDACTIONSCRIPTPANEL);
}
 else {
JOptionPane.showMessageDialog(null,translate(""String_Node_Str"").replace(""String_Node_Str"",txt),translate(""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
}
Main.stopWork();
}
}
).start();
}
}
}
break;
case ""String_Node_Str"":
Object tagObj=tagTree.getLastSelectedPathComponent();
if (tagObj == null) {
return;
}
if (tagObj instanceof TagNode) {
tagObj=((TagNode)tagObj).tag;
}
if (tagObj instanceof ImageTag) {
ImageTag it=(ImageTag)tagObj;
if (it.importSupported()) {
JFileChooser fc=new JFileChooser();
fc.setCurrentDirectory(new File((String)Configuration.getConfig(""String_Node_Str"",""String_Node_Str"")));
fc.setFileFilter(new FileFilter(){
@Override public boolean accept(File f){
return (f.getName().toLowerCase().endsWith(""String_Node_Str"")) || (f.getName().toLowerCase().endsWith(""String_Node_Str"")) || (f.getName().toLowerCase().endsWith(""String_Node_Str""))|| (f.getName().toLowerCase().endsWith(""String_Node_Str""))|| (f.isDirectory());
}
@Override public String getDescription(){
return translate(""String_Node_Str"");
}
}
);
JFrame f=new JFrame();
View.setWindowIcon(f);
int returnVal=fc.showOpenDialog(f);
if (returnVal == JFileChooser.APPROVE_OPTION) {
Configuration.setConfig(""String_Node_Str"",Helper.fixDialogFile(fc.getSelectedFile()).getParentFile().getAbsolutePath());
File selfile=Helper.fixDialogFile(fc.getSelectedFile());
byte data[]=Helper.readFile(selfile.getAbsolutePath());
try {
it.setImage(data);
}
 catch (IOException ex) {
Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
JOptionPane.showMessageDialog(null,translate(""String_Node_Str""),translate(""String_Node_Str""),JOptionPane.ERROR_MESSAGE);
}
reload(true);
}
}
}
break;
case ""String_Node_Str"":
tagObj=tagTree.getLastSelectedPathComponent();
if (tagObj == null) {
return;
}
if (tagObj instanceof TagNode) {
tagObj=((TagNode)tagObj).tag;
}
if (tagObj instanceof DefineSpriteTag) {
DefineSpriteTag sprite=(DefineSpriteTag)tagObj;
for (int i=0; i < swf.tags.size(); i++) {
Tag t=swf.tags.get(i);
if (t == sprite) {
swf.tags.remove(i);
i--;
}
 else if (t instanceof DefineSpriteTag) {
DefineSpriteTag st=(DefineSpriteTag)t;
for (int j=0; j < st.subTags.size(); j++) {
Tag t2=st.subTags.get(j);
Set<Integer> needed=t2.getNeededCharacters();
if (needed.contains(sprite.spriteId)) {
st.subTags.remove(j);
j--;
}
}
}
 else {
Set<Integer> needed=t.getNeededCharacters();
if (needed.contains(sprite.spriteId)) {
swf.tags.remove(i);
i--;
}
}
}
showCard(CARDEMPTYPANEL);
refreshTree();
}
break;
case ""String_Node_Str"":
setEditText(true);
break;
case ""String_Node_Str"":
setEditText(false);
break;
case ""String_Node_Str"":
if (oldValue instanceof TextTag) {
try {
((TextTag)oldValue).setFormattedText(swf.tags,textValue.getText());
setEditText(false);
}
 catch (ParseException ex) {
JOptionPane.showMessageDialog(null,translate(""String_Node_Str"").replace(""String_Node_Str"",ex.text).replace(""String_Node_Str"",""String_Node_Str"" + ex.line),translate(""String_Node_Str""),JOptionPane.ERROR_MESSAGE);
}
}
break;
case ""String_Node_Str"":
if (JOptionPane.showConfirmDialog(this,translate(""String_Node_Str"") + ""String_Node_Str"" + (autoDeobfuscateMenuItem.getState() ? translate(""String_Node_Str"") : translate(""String_Node_Str"")),translate(""String_Node_Str""),JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
Configuration.setConfig(""String_Node_Str"",autoDeobfuscateMenuItem.getState());
clearCache();
}
 else {
autoDeobfuscateMenuItem.setState(!autoDeobfuscateMenuItem.getState());
}
break;
case ""String_Node_Str"":
setVisible(false);
if (Main.proxyFrame != null) {
if (Main.proxyFrame.isVisible()) {
return;
}
}
Main.exit();
break;
}
if (Main.isWorking()) {
return;
}
switch (e.getActionCommand()) {
case ""String_Node_Str"":
if (swf.fileAttributes.actionScript3) {
final int multiName=abcPanel.decompiledTextArea.getMultinameUnderCursor();
if (multiName > 0) {
(new Thread(){
@Override public void run(){
Main.startWork(translate(""String_Node_Str"") + ""String_Node_Str"");
renameMultiname(multiName);
Main.stopWork();
}
}
).start();
}
 else {
JOptionPane.showMessageDialog(null,translate(""String_Node_Str""),translate(""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
}
}
 else {
final String identifier=actionPanel.getStringUnderCursor();
if (identifier != null) {
(new Thread(){
@Override public void run(){
Main.startWork(translate(""String_Node_Str"") + ""String_Node_Str"");
renameIdentifier(identifier);
Main.stopWork();
}
}
).start();
}
 else {
JOptionPane.showMessageDialog(null,translate(""String_Node_Str""),translate(""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
}
}
break;
case ""String_Node_Str"":
Main.about();
break;
case ""String_Node_Str"":
Main.showProxy();
break;
case ""String_Node_Str"":
if (e.getSource() instanceof JCheckBoxMenuItem) {
Main.setSubLimiter(((JCheckBoxMenuItem)e.getSource()).getState());
}
break;
case ""String_Node_Str"":
try {
Main.saveFile(Main.file);
}
 catch (IOException ex) {
Logger.getLogger(com.jpexs.decompiler.flash.gui.abc.ABCPanel.class.getName()).log(Level.SEVERE,null,ex);
JOptionPane.showMessageDialog(null,translate(""String_Node_Str""),translate(""String_Node_Str""),JOptionPane.ERROR_MESSAGE);
}
break;
case ""String_Node_Str"":
if (Main.saveFileDialog()) {
setTitle(Main.applicationVerName + (Configuration.DISPLAY_FILENAME ? ""String_Node_Str"" + Main.getFileTitle() : ""String_Node_Str""));
}
break;
case ""String_Node_Str"":
Main.openFileDialog();
break;
case ""String_Node_Str"":
JFileChooser fc=new JFileChooser();
String selDir=(String)Configuration.getConfig(""String_Node_Str"",""String_Node_Str"");
fc.setCurrentDirectory(new File(selDir));
if (!selDir.endsWith(File.separator)) {
selDir+=File.separator;
}
String fileName=(new File(Main.file).getName());
fileName=fileName.substring(0,fileName.length() - 4) + ""String_Node_Str"";
fc.setSelectedFile(new File(selDir + fileName));
FileFilter fla=new FileFilter(){
@Override public boolean accept(File f){
return f.isDirectory() || (f.getName().toLowerCase().endsWith(""String_Node_Str""));
}
@Override public String getDescription(){
return translate(""String_Node_Str"");
}
}
;
FileFilter xfl=new FileFilter(){
@Override public boolean accept(File f){
return f.isDirectory() || (f.getName().toLowerCase().endsWith(""String_Node_Str""));
}
@Override public String getDescription(){
return translate(""String_Node_Str"");
}
}
;
fc.setFileFilter(fla);
fc.addChoosableFileFilter(xfl);
fc.setAcceptAllFileFilterUsed(false);
JFrame f=new JFrame();
View.setWindowIcon(f);
int returnVal=fc.showSaveDialog(f);
if (returnVal == JFileChooser.APPROVE_OPTION) {
Configuration.setConfig(""String_Node_Str"",Helper.fixDialogFile(fc.getSelectedFile()).getParentFile().getAbsolutePath());
File sf=Helper.fixDialogFile(fc.getSelectedFile());
Main.startWork(translate(""String_Node_Str"") + ""String_Node_Str"");
final boolean compressed=fc.getFileFilter() == fla;
if (!compressed) {
if (sf.getName().endsWith(""String_Node_Str"")) {
sf=new File(sf.getAbsolutePath().substring(0,sf.getAbsolutePath().length() - 4) + ""String_Node_Str"");
}
}
final File selfile=sf;
(new Thread(){
@Override public void run(){
if (compressed) {
swf.exportFla(selfile.getAbsolutePath(),new File(Main.file).getName(),Main.applicationName,Main.applicationVerName,Main.version,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
}
 else {
swf.exportXfl(selfile.getAbsolutePath(),new File(Main.file).getName(),Main.applicationName,Main.applicationVerName,Main.version,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
}
Main.stopWork();
}
}
).start();
}
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
final ExportDialog export=new ExportDialog();
export.setVisible(true);
if (!export.cancelled) {
JFileChooser chooser=new JFileChooser();
chooser.setCurrentDirectory(new java.io.File((String)Configuration.getConfig(""String_Node_Str"",""String_Node_Str"")));
chooser.setDialogTitle(translate(""String_Node_Str""));
chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
chooser.setAcceptAllFileFilterUsed(false);
if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
final long timeBefore=System.currentTimeMillis();
Main.startWork(translate(""String_Node_Str"") + ""String_Node_Str"");
final String selFile=Helper.fixDialogFile(chooser.getSelectedFile()).getAbsolutePath();
Configuration.setConfig(""String_Node_Str"",Helper.fixDialogFile(chooser.getSelectedFile()).getParentFile().getAbsolutePath());
final boolean isPcode=export.getOption(ExportDialog.OPTION_ACTIONSCRIPT) == 1;
final boolean isMp3OrWav=export.getOption(ExportDialog.OPTION_SOUNDS) == 0;
final boolean isFormatted=export.getOption(ExportDialog.OPTION_TEXTS) == 1;
final boolean onlySel=e.getActionCommand().endsWith(""String_Node_Str"");
(new Thread(){
@Override public void run(){
try {
if (onlySel) {
exportSelection(selFile,export);
}
 else {
swf.exportImages(selFile + File.separator + ""String_Node_Str"");
swf.exportShapes(selFile + File.separator + ""String_Node_Str"");
swf.exportTexts(selFile + File.separator + ""String_Node_Str"",isFormatted);
swf.exportMovies(selFile + File.separator + ""String_Node_Str"");
swf.exportSounds(selFile + File.separator + ""String_Node_Str"",isMp3OrWav,isMp3OrWav);
swf.exportBinaryData(selFile + File.separator + ""String_Node_Str"");
swf.exportActionScript(selFile,isPcode,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
}
}
 catch (Exception ex) {
Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
JOptionPane.showMessageDialog(null,translate(""String_Node_Str""));
}
Main.stopWork();
long timeAfter=System.currentTimeMillis();
long timeMs=timeAfter - timeBefore;
long timeS=timeMs / 1000;
timeMs=timeMs % 1000;
long timeM=timeS / 60;
timeS=timeS % 60;
long timeH=timeM / 60;
timeM=timeM % 60;
String timeStr=""String_Node_Str"";
if (timeH > 0) {
timeStr+=Helper.padZeros(timeH,2) + ""String_Node_Str"";
}
timeStr+=Helper.padZeros(timeM,2) + ""String_Node_Str"";
timeStr+=Helper.padZeros(timeS,2) + ""String_Node_Str"" + Helper.padZeros(timeMs,3);
setStatus(translate(""String_Node_Str"").replace(""String_Node_Str"",timeStr));
}
}
).start();
}
}
break;
case ""String_Node_Str"":
if (!Main.checkForUpdates()) {
JOptionPane.showMessageDialog(null,translate(""String_Node_Str""),translate(""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
}
break;
case ""String_Node_Str"":
String helpUsURL=Main.projectPage + ""String_Node_Str"";
if (java.awt.Desktop.isDesktopSupported()) {
java.awt.Desktop desktop=java.awt.Desktop.getDesktop();
try {
java.net.URI uri=new java.net.URI(helpUsURL);
desktop.browse(uri);
}
 catch (Exception ex) {
}
}
 else {
JOptionPane.showMessageDialog(null,translate(""String_Node_Str"").replace(""String_Node_Str"",helpUsURL));
}
break;
case ""String_Node_Str"":
String homePageURL=Main.projectPage;
if (java.awt.Desktop.isDesktopSupported()) {
java.awt.Desktop desktop=java.awt.Desktop.getDesktop();
try {
java.net.URI uri=new java.net.URI(homePageURL);
desktop.browse(uri);
}
 catch (Exception ex) {
}
}
 else {
JOptionPane.showMessageDialog(null,translate(""String_Node_Str"").replace(""String_Node_Str"",homePageURL));
}
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
Main.startWork(""String_Node_Str"");
final boolean all=e.getActionCommand().endsWith(""String_Node_Str"");
if ((!all) || confirmExperimental()) {
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
int cnt=0;
if (all) {
for (ABCContainerTag tag : abcPanel.list) {
tag.getABC().restoreControlFlow();
}
}
 else {
int bi=abcPanel.detailPanel.methodTraitPanel.methodCodePanel.getBodyIndex();
if (bi != -1) {
abcPanel.abc.bodies[bi].restoreControlFlow(abcPanel.abc.constants);
}
abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setBodyIndex(bi,abcPanel.abc);
}
Main.stopWork();
JOptionPane.showMessageDialog(null,""String_Node_Str"");
abcPanel.reload();
doFilter();
return true;
}
}
.execute();
}
break;
case ""String_Node_Str"":
if (confirmExperimental()) {
final RenameType renameType=new RenameDialog().display();
if (renameType != null) {
Main.startWork(translate(""String_Node_Str"") + ""String_Node_Str"");
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
try {
int cnt=0;
cnt=swf.deobfuscateIdentifiers(renameType);
Main.stopWork();
JOptionPane.showMessageDialog(null,translate(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + cnt));
swf.assignClassesToSymbols();
clearCache();
if (abcPanel != null) {
abcPanel.reload();
}
doFilter();
reload(true);
}
 catch (Exception ex) {
Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
}
return true;
}
}
.execute();
}
}
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
if (deobfuscationDialog == null) {
deobfuscationDialog=new DeobfuscationDialog();
}
deobfuscationDialog.setVisible(true);
if (deobfuscationDialog.ok) {
Main.startWork(translate(""String_Node_Str"") + ""String_Node_Str"");
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
try {
if (deobfuscationDialog.processAllCheckbox.isSelected()) {
for (ABCContainerTag tag : abcPanel.list) {
if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_REMOVE_DEAD_CODE) {
tag.getABC().removeDeadCode();
}
 else if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_REMOVE_TRAPS) {
tag.getABC().removeTraps();
}
 else if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_RESTORE_CONTROL_FLOW) {
tag.getABC().removeTraps();
tag.getABC().restoreControlFlow();
}
}
}
 else {
int bi=abcPanel.detailPanel.methodTraitPanel.methodCodePanel.getBodyIndex();
if (bi != -1) {
if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_REMOVE_DEAD_CODE) {
abcPanel.abc.bodies[bi].removeDeadCode(abcPanel.abc.constants);
}
 else if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_REMOVE_TRAPS) {
abcPanel.abc.bodies[bi].removeTraps(abcPanel.abc.constants,abcPanel.abc,abcPanel.decompiledTextArea.getScriptLeaf().scriptIndex,abcPanel.decompiledTextArea.getClassIndex(),abcPanel.decompiledTextArea.getIsStatic());
}
 else if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_RESTORE_CONTROL_FLOW) {
abcPanel.abc.bodies[bi].removeTraps(abcPanel.abc.constants,abcPanel.abc,abcPanel.decompiledTextArea.getScriptLeaf().scriptIndex,abcPanel.decompiledTextArea.getClassIndex(),abcPanel.decompiledTextArea.getIsStatic());
abcPanel.abc.bodies[bi].restoreControlFlow(abcPanel.abc.constants);
}
}
abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setBodyIndex(bi,abcPanel.abc);
}
}
 catch (Exception ex) {
Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
}
Main.stopWork();
JOptionPane.showMessageDialog(null,translate(""String_Node_Str""));
clearCache();
abcPanel.reload();
doFilter();
return true;
}
}
.execute();
}
break;
}
}","@Override public void actionPerformed(ActionEvent e){
switch (e.getActionCommand()) {
case ""String_Node_Str"":
    String newLanguage=new SelectLanguageDialog().display();
  if (newLanguage != null) {
    if (newLanguage.equals(""String_Node_Str"")) {
      newLanguage=""String_Node_Str"";
    }
    Configuration.setConfig(""String_Node_Str"",newLanguage);
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    Main.exit();
  }
break;
case ""String_Node_Str"":
Configuration.setConfig(""String_Node_Str"",!miDecompile.isSelected());
clearCache();
if (abcPanel != null) {
abcPanel.reload();
}
reload(true);
doFilter();
break;
case ""String_Node_Str"":
if (miAssociate.getState() == Main.isAddedToContextMenu()) {
return;
}
Main.addToContextMenu(miAssociate.getState());
new Timer().schedule(new TimerTask(){
@Override public void run(){
miAssociate.setState(Main.isAddedToContextMenu());
}
}
,500);
break;
case ""String_Node_Str"":
String documentClass=null;
loopdc: for (Tag t : swf.tags) {
if (t instanceof SymbolClassTag) {
SymbolClassTag sc=(SymbolClassTag)t;
for (int i=0; i < sc.tagIDs.length; i++) {
if (sc.tagIDs[i] == 0) {
documentClass=sc.classNames[i];
break loopdc;
}
}
}
}
if (documentClass != null) {
abcPanel.hilightScript(documentClass);
}
break;
case ""String_Node_Str"":
String confStr=translate(""String_Node_Str"") + ""String_Node_Str"";
if (miParallelSpeedUp.isSelected()) {
confStr+=""String_Node_Str"" + translate(""String_Node_Str"");
}
 else {
confStr+=""String_Node_Str"" + translate(""String_Node_Str"");
}
if (JOptionPane.showConfirmDialog(null,confStr,translate(""String_Node_Str""),JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
Configuration.setConfig(""String_Node_Str"",(Boolean)miParallelSpeedUp.isSelected());
}
 else {
miParallelSpeedUp.setSelected(!miParallelSpeedUp.isSelected());
}
break;
case ""String_Node_Str"":
Configuration.setConfig(""String_Node_Str"",(Boolean)miInternalViewer.isSelected());
break;
case ""String_Node_Str"":
if (searchDialog == null) {
searchDialog=new SearchDialog();
}
searchDialog.setVisible(true);
if (searchDialog.result) {
final String txt=searchDialog.searchField.getText();
if (!txt.equals(""String_Node_Str"")) {
Main.startWork(translate(""String_Node_Str"") + ""String_Node_Str"" + txt+ ""String_Node_Str"");
if (abcPanel != null) {
(new Thread(){
@Override public void run(){
if (abcPanel.search(txt,searchDialog.ignoreCaseCheckBox.isSelected(),searchDialog.regexpCheckBox.isSelected())) {
showDetail(DETAILCARDAS3NAVIGATOR);
showCard(CARDACTIONSCRIPTPANEL);
}
 else {
JOptionPane.showMessageDialog(null,translate(""String_Node_Str"").replace(""String_Node_Str"",txt),translate(""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
}
Main.stopWork();
}
}
).start();
}
 else {
(new Thread(){
@Override public void run(){
if (actionPanel.search(txt,searchDialog.ignoreCaseCheckBox.isSelected(),searchDialog.regexpCheckBox.isSelected())) {
showCard(CARDACTIONSCRIPTPANEL);
}
 else {
JOptionPane.showMessageDialog(null,translate(""String_Node_Str"").replace(""String_Node_Str"",txt),translate(""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
}
Main.stopWork();
}
}
).start();
}
}
}
break;
case ""String_Node_Str"":
Object tagObj=tagTree.getLastSelectedPathComponent();
if (tagObj == null) {
return;
}
if (tagObj instanceof TagNode) {
tagObj=((TagNode)tagObj).tag;
}
if (tagObj instanceof ImageTag) {
ImageTag it=(ImageTag)tagObj;
if (it.importSupported()) {
JFileChooser fc=new JFileChooser();
fc.setCurrentDirectory(new File((String)Configuration.getConfig(""String_Node_Str"",""String_Node_Str"")));
fc.setFileFilter(new FileFilter(){
@Override public boolean accept(File f){
return (f.getName().toLowerCase().endsWith(""String_Node_Str"")) || (f.getName().toLowerCase().endsWith(""String_Node_Str"")) || (f.getName().toLowerCase().endsWith(""String_Node_Str""))|| (f.getName().toLowerCase().endsWith(""String_Node_Str""))|| (f.isDirectory());
}
@Override public String getDescription(){
return translate(""String_Node_Str"");
}
}
);
JFrame f=new JFrame();
View.setWindowIcon(f);
int returnVal=fc.showOpenDialog(f);
if (returnVal == JFileChooser.APPROVE_OPTION) {
Configuration.setConfig(""String_Node_Str"",Helper.fixDialogFile(fc.getSelectedFile()).getParentFile().getAbsolutePath());
File selfile=Helper.fixDialogFile(fc.getSelectedFile());
byte data[]=Helper.readFile(selfile.getAbsolutePath());
try {
it.setImage(data);
}
 catch (IOException ex) {
Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
JOptionPane.showMessageDialog(null,translate(""String_Node_Str""),translate(""String_Node_Str""),JOptionPane.ERROR_MESSAGE);
}
reload(true);
}
}
}
break;
case ""String_Node_Str"":
tagObj=tagTree.getLastSelectedPathComponent();
if (tagObj == null) {
return;
}
if (tagObj instanceof TagNode) {
tagObj=((TagNode)tagObj).tag;
}
if (tagObj instanceof DefineSpriteTag) {
DefineSpriteTag sprite=(DefineSpriteTag)tagObj;
for (int i=0; i < swf.tags.size(); i++) {
Tag t=swf.tags.get(i);
if (t == sprite) {
swf.tags.remove(i);
i--;
}
 else if (t instanceof DefineSpriteTag) {
DefineSpriteTag st=(DefineSpriteTag)t;
for (int j=0; j < st.subTags.size(); j++) {
Tag t2=st.subTags.get(j);
Set<Integer> needed=t2.getNeededCharacters();
if (needed.contains(sprite.spriteId)) {
st.subTags.remove(j);
j--;
}
}
}
 else {
Set<Integer> needed=t.getNeededCharacters();
if (needed.contains(sprite.spriteId)) {
swf.tags.remove(i);
i--;
}
}
}
showCard(CARDEMPTYPANEL);
refreshTree();
}
break;
case ""String_Node_Str"":
setEditText(true);
break;
case ""String_Node_Str"":
setEditText(false);
break;
case ""String_Node_Str"":
if (oldValue instanceof TextTag) {
try {
((TextTag)oldValue).setFormattedText(swf.tags,textValue.getText());
setEditText(false);
}
 catch (ParseException ex) {
JOptionPane.showMessageDialog(null,translate(""String_Node_Str"").replace(""String_Node_Str"",ex.text).replace(""String_Node_Str"",""String_Node_Str"" + ex.line),translate(""String_Node_Str""),JOptionPane.ERROR_MESSAGE);
}
}
break;
case ""String_Node_Str"":
if (JOptionPane.showConfirmDialog(this,translate(""String_Node_Str"") + ""String_Node_Str"" + (autoDeobfuscateMenuItem.getState() ? translate(""String_Node_Str"") : translate(""String_Node_Str"")),translate(""String_Node_Str""),JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
Configuration.setConfig(""String_Node_Str"",autoDeobfuscateMenuItem.getState());
clearCache();
if (abcPanel != null) {
abcPanel.reload();
}
reload(true);
doFilter();
}
 else {
autoDeobfuscateMenuItem.setState(!autoDeobfuscateMenuItem.getState());
}
break;
case ""String_Node_Str"":
setVisible(false);
if (Main.proxyFrame != null) {
if (Main.proxyFrame.isVisible()) {
return;
}
}
Main.exit();
break;
}
if (Main.isWorking()) {
return;
}
switch (e.getActionCommand()) {
case ""String_Node_Str"":
if (swf.fileAttributes.actionScript3) {
final int multiName=abcPanel.decompiledTextArea.getMultinameUnderCursor();
if (multiName > 0) {
(new Thread(){
@Override public void run(){
Main.startWork(translate(""String_Node_Str"") + ""String_Node_Str"");
renameMultiname(multiName);
Main.stopWork();
}
}
).start();
}
 else {
JOptionPane.showMessageDialog(null,translate(""String_Node_Str""),translate(""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
}
}
 else {
final String identifier=actionPanel.getStringUnderCursor();
if (identifier != null) {
(new Thread(){
@Override public void run(){
Main.startWork(translate(""String_Node_Str"") + ""String_Node_Str"");
renameIdentifier(identifier);
Main.stopWork();
}
}
).start();
}
 else {
JOptionPane.showMessageDialog(null,translate(""String_Node_Str""),translate(""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
}
}
break;
case ""String_Node_Str"":
Main.about();
break;
case ""String_Node_Str"":
Main.showProxy();
break;
case ""String_Node_Str"":
if (e.getSource() instanceof JCheckBoxMenuItem) {
Main.setSubLimiter(((JCheckBoxMenuItem)e.getSource()).getState());
}
break;
case ""String_Node_Str"":
try {
Main.saveFile(Main.file);
}
 catch (IOException ex) {
Logger.getLogger(com.jpexs.decompiler.flash.gui.abc.ABCPanel.class.getName()).log(Level.SEVERE,null,ex);
JOptionPane.showMessageDialog(null,translate(""String_Node_Str""),translate(""String_Node_Str""),JOptionPane.ERROR_MESSAGE);
}
break;
case ""String_Node_Str"":
if (Main.saveFileDialog()) {
setTitle(Main.applicationVerName + (Configuration.DISPLAY_FILENAME ? ""String_Node_Str"" + Main.getFileTitle() : ""String_Node_Str""));
}
break;
case ""String_Node_Str"":
Main.openFileDialog();
break;
case ""String_Node_Str"":
JFileChooser fc=new JFileChooser();
String selDir=(String)Configuration.getConfig(""String_Node_Str"",""String_Node_Str"");
fc.setCurrentDirectory(new File(selDir));
if (!selDir.endsWith(File.separator)) {
selDir+=File.separator;
}
String fileName=(new File(Main.file).getName());
fileName=fileName.substring(0,fileName.length() - 4) + ""String_Node_Str"";
fc.setSelectedFile(new File(selDir + fileName));
FileFilter fla=new FileFilter(){
@Override public boolean accept(File f){
return f.isDirectory() || (f.getName().toLowerCase().endsWith(""String_Node_Str""));
}
@Override public String getDescription(){
return translate(""String_Node_Str"");
}
}
;
FileFilter xfl=new FileFilter(){
@Override public boolean accept(File f){
return f.isDirectory() || (f.getName().toLowerCase().endsWith(""String_Node_Str""));
}
@Override public String getDescription(){
return translate(""String_Node_Str"");
}
}
;
fc.setFileFilter(fla);
fc.addChoosableFileFilter(xfl);
fc.setAcceptAllFileFilterUsed(false);
JFrame f=new JFrame();
View.setWindowIcon(f);
int returnVal=fc.showSaveDialog(f);
if (returnVal == JFileChooser.APPROVE_OPTION) {
Configuration.setConfig(""String_Node_Str"",Helper.fixDialogFile(fc.getSelectedFile()).getParentFile().getAbsolutePath());
File sf=Helper.fixDialogFile(fc.getSelectedFile());
Main.startWork(translate(""String_Node_Str"") + ""String_Node_Str"");
final boolean compressed=fc.getFileFilter() == fla;
if (!compressed) {
if (sf.getName().endsWith(""String_Node_Str"")) {
sf=new File(sf.getAbsolutePath().substring(0,sf.getAbsolutePath().length() - 4) + ""String_Node_Str"");
}
}
final File selfile=sf;
(new Thread(){
@Override public void run(){
if (compressed) {
swf.exportFla(selfile.getAbsolutePath(),new File(Main.file).getName(),Main.applicationName,Main.applicationVerName,Main.version,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
}
 else {
swf.exportXfl(selfile.getAbsolutePath(),new File(Main.file).getName(),Main.applicationName,Main.applicationVerName,Main.version,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
}
Main.stopWork();
}
}
).start();
}
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
final ExportDialog export=new ExportDialog();
export.setVisible(true);
if (!export.cancelled) {
JFileChooser chooser=new JFileChooser();
chooser.setCurrentDirectory(new java.io.File((String)Configuration.getConfig(""String_Node_Str"",""String_Node_Str"")));
chooser.setDialogTitle(translate(""String_Node_Str""));
chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
chooser.setAcceptAllFileFilterUsed(false);
if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
final long timeBefore=System.currentTimeMillis();
Main.startWork(translate(""String_Node_Str"") + ""String_Node_Str"");
final String selFile=Helper.fixDialogFile(chooser.getSelectedFile()).getAbsolutePath();
Configuration.setConfig(""String_Node_Str"",Helper.fixDialogFile(chooser.getSelectedFile()).getParentFile().getAbsolutePath());
final boolean isPcode=export.getOption(ExportDialog.OPTION_ACTIONSCRIPT) == 1;
final boolean isMp3OrWav=export.getOption(ExportDialog.OPTION_SOUNDS) == 0;
final boolean isFormatted=export.getOption(ExportDialog.OPTION_TEXTS) == 1;
final boolean onlySel=e.getActionCommand().endsWith(""String_Node_Str"");
(new Thread(){
@Override public void run(){
try {
if (onlySel) {
exportSelection(selFile,export);
}
 else {
swf.exportImages(selFile + File.separator + ""String_Node_Str"");
swf.exportShapes(selFile + File.separator + ""String_Node_Str"");
swf.exportTexts(selFile + File.separator + ""String_Node_Str"",isFormatted);
swf.exportMovies(selFile + File.separator + ""String_Node_Str"");
swf.exportSounds(selFile + File.separator + ""String_Node_Str"",isMp3OrWav,isMp3OrWav);
swf.exportBinaryData(selFile + File.separator + ""String_Node_Str"");
swf.exportActionScript(selFile,isPcode,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
}
}
 catch (Exception ex) {
Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
JOptionPane.showMessageDialog(null,translate(""String_Node_Str""));
}
Main.stopWork();
long timeAfter=System.currentTimeMillis();
long timeMs=timeAfter - timeBefore;
long timeS=timeMs / 1000;
timeMs=timeMs % 1000;
long timeM=timeS / 60;
timeS=timeS % 60;
long timeH=timeM / 60;
timeM=timeM % 60;
String timeStr=""String_Node_Str"";
if (timeH > 0) {
timeStr+=Helper.padZeros(timeH,2) + ""String_Node_Str"";
}
timeStr+=Helper.padZeros(timeM,2) + ""String_Node_Str"";
timeStr+=Helper.padZeros(timeS,2) + ""String_Node_Str"" + Helper.padZeros(timeMs,3);
setStatus(translate(""String_Node_Str"").replace(""String_Node_Str"",timeStr));
}
}
).start();
}
}
break;
case ""String_Node_Str"":
if (!Main.checkForUpdates()) {
JOptionPane.showMessageDialog(null,translate(""String_Node_Str""),translate(""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
}
break;
case ""String_Node_Str"":
String helpUsURL=Main.projectPage + ""String_Node_Str"";
if (java.awt.Desktop.isDesktopSupported()) {
java.awt.Desktop desktop=java.awt.Desktop.getDesktop();
try {
java.net.URI uri=new java.net.URI(helpUsURL);
desktop.browse(uri);
}
 catch (Exception ex) {
}
}
 else {
JOptionPane.showMessageDialog(null,translate(""String_Node_Str"").replace(""String_Node_Str"",helpUsURL));
}
break;
case ""String_Node_Str"":
String homePageURL=Main.projectPage;
if (java.awt.Desktop.isDesktopSupported()) {
java.awt.Desktop desktop=java.awt.Desktop.getDesktop();
try {
java.net.URI uri=new java.net.URI(homePageURL);
desktop.browse(uri);
}
 catch (Exception ex) {
}
}
 else {
JOptionPane.showMessageDialog(null,translate(""String_Node_Str"").replace(""String_Node_Str"",homePageURL));
}
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
Main.startWork(""String_Node_Str"");
final boolean all=e.getActionCommand().endsWith(""String_Node_Str"");
if ((!all) || confirmExperimental()) {
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
int cnt=0;
if (all) {
for (ABCContainerTag tag : abcPanel.list) {
tag.getABC().restoreControlFlow();
}
}
 else {
int bi=abcPanel.detailPanel.methodTraitPanel.methodCodePanel.getBodyIndex();
if (bi != -1) {
abcPanel.abc.bodies[bi].restoreControlFlow(abcPanel.abc.constants);
}
abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setBodyIndex(bi,abcPanel.abc);
}
Main.stopWork();
JOptionPane.showMessageDialog(null,""String_Node_Str"");
abcPanel.reload();
doFilter();
return true;
}
}
.execute();
}
break;
case ""String_Node_Str"":
if (confirmExperimental()) {
final RenameType renameType=new RenameDialog().display();
if (renameType != null) {
Main.startWork(translate(""String_Node_Str"") + ""String_Node_Str"");
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
try {
int cnt=0;
cnt=swf.deobfuscateIdentifiers(renameType);
Main.stopWork();
JOptionPane.showMessageDialog(null,translate(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + cnt));
swf.assignClassesToSymbols();
clearCache();
if (abcPanel != null) {
abcPanel.reload();
}
doFilter();
reload(true);
}
 catch (Exception ex) {
Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
}
return true;
}
}
.execute();
}
}
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
if (deobfuscationDialog == null) {
deobfuscationDialog=new DeobfuscationDialog();
}
deobfuscationDialog.setVisible(true);
if (deobfuscationDialog.ok) {
Main.startWork(translate(""String_Node_Str"") + ""String_Node_Str"");
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
try {
if (deobfuscationDialog.processAllCheckbox.isSelected()) {
for (ABCContainerTag tag : abcPanel.list) {
if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_REMOVE_DEAD_CODE) {
tag.getABC().removeDeadCode();
}
 else if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_REMOVE_TRAPS) {
tag.getABC().removeTraps();
}
 else if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_RESTORE_CONTROL_FLOW) {
tag.getABC().removeTraps();
tag.getABC().restoreControlFlow();
}
}
}
 else {
int bi=abcPanel.detailPanel.methodTraitPanel.methodCodePanel.getBodyIndex();
if (bi != -1) {
if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_REMOVE_DEAD_CODE) {
abcPanel.abc.bodies[bi].removeDeadCode(abcPanel.abc.constants);
}
 else if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_REMOVE_TRAPS) {
abcPanel.abc.bodies[bi].removeTraps(abcPanel.abc.constants,abcPanel.abc,abcPanel.decompiledTextArea.getScriptLeaf().scriptIndex,abcPanel.decompiledTextArea.getClassIndex(),abcPanel.decompiledTextArea.getIsStatic());
}
 else if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_RESTORE_CONTROL_FLOW) {
abcPanel.abc.bodies[bi].removeTraps(abcPanel.abc.constants,abcPanel.abc,abcPanel.decompiledTextArea.getScriptLeaf().scriptIndex,abcPanel.decompiledTextArea.getClassIndex(),abcPanel.decompiledTextArea.getIsStatic());
abcPanel.abc.bodies[bi].restoreControlFlow(abcPanel.abc.constants);
}
}
abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setBodyIndex(bi,abcPanel.abc);
}
}
 catch (Exception ex) {
Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
}
Main.stopWork();
JOptionPane.showMessageDialog(null,translate(""String_Node_Str""));
clearCache();
abcPanel.reload();
doFilter();
return true;
}
}
.execute();
}
break;
}
}",0.998007129424313
62125,"public boolean compareSame(FullMultinameTreeItem other){
  if (multinameIndex != other.multinameIndex) {
    return false;
  }
  GraphTargetItem tiName=name;
  if (name != null) {
    name=name.getThroughDuplicate();
  }
  while (tiName instanceof LocalRegTreeItem) {
    if (((LocalRegTreeItem)tiName).computedValue != null) {
      tiName=((LocalRegTreeItem)tiName).computedValue.getThroughNotCompilable().getThroughDuplicate();
    }
  }
  GraphTargetItem tiName2=other.name;
  if (tiName2 != null) {
    tiName2=tiName2.getThroughDuplicate();
  }
  while (tiName2 instanceof LocalRegTreeItem) {
    if (((LocalRegTreeItem)tiName2).computedValue != null) {
      tiName2=((LocalRegTreeItem)tiName2).computedValue.getThroughNotCompilable().getThroughDuplicate();
    }
  }
  if (tiName != tiName2) {
    return false;
  }
  GraphTargetItem tiNameSpace=namespace;
  if (tiNameSpace != null) {
    tiNameSpace=tiNameSpace.getThroughDuplicate();
  }
  while (tiNameSpace instanceof LocalRegTreeItem) {
    if (((LocalRegTreeItem)tiNameSpace).computedValue != null) {
      tiNameSpace=((LocalRegTreeItem)tiNameSpace).computedValue.getThroughNotCompilable().getThroughDuplicate();
    }
  }
  GraphTargetItem tiNameSpace2=other.namespace;
  if (tiNameSpace2 != null) {
    tiNameSpace2=tiNameSpace2.getThroughDuplicate();
  }
  while (tiNameSpace2 instanceof LocalRegTreeItem) {
    if (((LocalRegTreeItem)tiNameSpace2).computedValue != null) {
      tiNameSpace2=((LocalRegTreeItem)tiNameSpace2).computedValue.getThroughNotCompilable().getThroughDuplicate();
    }
  }
  if (tiNameSpace != tiNameSpace2) {
    return false;
  }
  return true;
}","public boolean compareSame(FullMultinameTreeItem other){
  if (multinameIndex != other.multinameIndex) {
    return false;
  }
  GraphTargetItem tiName=name;
  if (name != null) {
    name=name.getThroughDuplicate();
  }
  while (tiName instanceof LocalRegTreeItem) {
    if (((LocalRegTreeItem)tiName).computedValue != null) {
      tiName=((LocalRegTreeItem)tiName).computedValue.getThroughNotCompilable().getThroughDuplicate();
    }
 else {
      break;
    }
  }
  GraphTargetItem tiName2=other.name;
  if (tiName2 != null) {
    tiName2=tiName2.getThroughDuplicate();
  }
  while (tiName2 instanceof LocalRegTreeItem) {
    if (((LocalRegTreeItem)tiName2).computedValue != null) {
      tiName2=((LocalRegTreeItem)tiName2).computedValue.getThroughNotCompilable().getThroughDuplicate();
    }
 else {
      break;
    }
  }
  if (tiName != tiName2) {
    return false;
  }
  GraphTargetItem tiNameSpace=namespace;
  if (tiNameSpace != null) {
    tiNameSpace=tiNameSpace.getThroughDuplicate();
  }
  while (tiNameSpace instanceof LocalRegTreeItem) {
    if (((LocalRegTreeItem)tiNameSpace).computedValue != null) {
      tiNameSpace=((LocalRegTreeItem)tiNameSpace).computedValue.getThroughNotCompilable().getThroughDuplicate();
    }
  }
  GraphTargetItem tiNameSpace2=other.namespace;
  if (tiNameSpace2 != null) {
    tiNameSpace2=tiNameSpace2.getThroughDuplicate();
  }
  while (tiNameSpace2 instanceof LocalRegTreeItem) {
    if (((LocalRegTreeItem)tiNameSpace2).computedValue != null) {
      tiNameSpace2=((LocalRegTreeItem)tiNameSpace2).computedValue.getThroughNotCompilable().getThroughDuplicate();
    }
  }
  if (tiNameSpace != tiNameSpace2) {
    return false;
  }
  return true;
}",0.9838323353293412
62126,"@Override protected List<GraphTargetItem> check(GraphSource srcCode,List<Object> localData,List<GraphPart> allParts,Stack<GraphTargetItem> stack,GraphPart parent,GraphPart part,List<GraphPart> stopPart,List<Loop> loops,List<GraphTargetItem> output,Loop currentLoop){
  List<GraphTargetItem> ret=null;
  @SuppressWarnings(""String_Node_Str"") List<ABCException> parsedExceptions=(List<ABCException>)localData.get(DATA_PARSEDEXCEPTIONS);
  @SuppressWarnings(""String_Node_Str"") List<Integer> finallyJumps=(List<Integer>)localData.get(DATA_FINALLYJUMPS);
  @SuppressWarnings(""String_Node_Str"") List<Integer> ignoredSwitches=(List<Integer>)localData.get(DATA_IGNOREDSWITCHES);
  int ip=part.start;
  int addr=code.fixAddrAfterDebugLine(code.pos2adr(part.start));
  int maxend=-1;
  List<ABCException> catchedExceptions=new ArrayList<>();
  for (int e=0; e < body.exceptions.length; e++) {
    if (addr == code.fixAddrAfterDebugLine(body.exceptions[e].start)) {
      if (!body.exceptions[e].isFinally()) {
        if (((body.exceptions[e].end) > maxend) && (!parsedExceptions.contains(body.exceptions[e]))) {
          catchedExceptions.clear();
          maxend=code.fixAddrAfterDebugLine(body.exceptions[e].end);
          catchedExceptions.add(body.exceptions[e]);
        }
 else         if (code.fixAddrAfterDebugLine(body.exceptions[e].end) == maxend) {
          catchedExceptions.add(body.exceptions[e]);
        }
      }
    }
  }
  if (catchedExceptions.size() > 0) {
    parsedExceptions.addAll(catchedExceptions);
    int endpos=code.adr2pos(code.fixAddrAfterDebugLine(catchedExceptions.get(0).end));
    int endposStartBlock=code.adr2pos(catchedExceptions.get(0).end);
    List<List<GraphTargetItem>> catchedCommands=new ArrayList<>();
    if (code.code.get(endpos).definition instanceof JumpIns) {
      int afterCatchAddr=code.pos2adr(endpos + 1) + code.code.get(endpos).operands[0];
      int afterCatchPos=code.adr2pos(afterCatchAddr);
      Collections.sort(catchedExceptions,new Comparator<ABCException>(){
        @Override public int compare(        ABCException o1,        ABCException o2){
          return code.fixAddrAfterDebugLine(o1.target) - code.fixAddrAfterDebugLine(o2.target);
        }
      }
);
      List<GraphTargetItem> finallyCommands=new ArrayList<>();
      int returnPos=afterCatchPos;
      for (int e=0; e < body.exceptions.length; e++) {
        if (body.exceptions[e].isFinally()) {
          if (addr == code.fixAddrAfterDebugLine(body.exceptions[e].start)) {
            if (afterCatchPos + 1 == code.adr2pos(code.fixAddrAfterDebugLine(body.exceptions[e].end))) {
              AVM2Instruction jmpIns=code.code.get(code.adr2pos(code.fixAddrAfterDebugLine(body.exceptions[e].end)));
              if (jmpIns.definition instanceof JumpIns) {
                int finStart=code.adr2pos(code.fixAddrAfterDebugLine(body.exceptions[e].end) + jmpIns.getBytes().length + jmpIns.operands[0]);
                boolean switchFound=false;
                GraphPart fpart=null;
                for (                GraphPart p : allParts) {
                  if (p.start == finStart) {
                    fpart=p;
                    break;
                  }
                }
                for (int f=finStart; f < code.code.size(); f++) {
                  if (code.code.get(f).definition instanceof LookupSwitchIns) {
                    AVM2Instruction swins=code.code.get(f);
                    if (swins.operands.length >= 3) {
                      if (swins.operands[0] == swins.getBytes().length) {
                        if (code.adr2pos(code.pos2adr(f) + swins.operands[2]) < finStart) {
                          stack.push(new ExceptionTreeItem(body.exceptions[e]));
                          GraphPart fepart=null;
                          for (                          GraphPart p : allParts) {
                            if (p.start == f + 1) {
                              fepart=p;
                              break;
                            }
                          }
                          ignoredSwitches.add(f);
                          List<GraphPart> stopPart2=new ArrayList<>(stopPart);
                          stopPart2.add(fepart);
                          finallyCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,fpart,stopPart2,loops);
                          returnPos=f + 1;
                          break;
                        }
                      }
                    }
                  }
                }
                if (!switchFound) {
                  finallyCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,fpart,null,loops);
                }
                finallyJumps.add(finStart);
                break;
              }
            }
          }
        }
      }
      List<GraphPart> catchParts=new ArrayList<>();
      for (int e=0; e < catchedExceptions.size(); e++) {
        int eendpos;
        if (e < catchedExceptions.size() - 1) {
          eendpos=code.adr2pos(code.fixAddrAfterDebugLine(catchedExceptions.get(e + 1).target)) - 2;
        }
 else {
          eendpos=afterCatchPos - 1;
        }
        GraphPart npart=null;
        int findpos=code.adr2pos(catchedExceptions.get(e).target);
        for (        GraphPart p : allParts) {
          if (p.start == findpos) {
            npart=p;
            catchParts.add(p);
            break;
          }
        }
        GraphPart nepart=null;
        for (        GraphPart p : allParts) {
          if (p.start == eendpos + 1) {
            nepart=p;
            break;
          }
        }
        stack.add(new ExceptionTreeItem(catchedExceptions.get(e)));
        List<Object> localData2=new ArrayList<>();
        localData2.addAll(localData);
        localData2.set(DATA_SCOPESTACK,new Stack<GraphTargetItem>());
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(nepart);
        catchedCommands.add(printGraph(new ArrayList<GraphPart>(),localData2,stack,allParts,parent,npart,stopPart2,loops));
      }
      GraphPart nepart=null;
      for (      GraphPart p : allParts) {
        if (p.start == endposStartBlock) {
          nepart=p;
          break;
        }
      }
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(nepart);
      stopPart2.addAll(catchParts);
      List<GraphTargetItem> tryCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,part,stopPart2,loops);
      output.clear();
      output.add(new TryTreeItem(tryCommands,catchedExceptions,catchedCommands,finallyCommands));
      ip=returnPos;
    }
  }
  if (ip != part.start) {
    part=null;
    for (    GraphPart p : allParts) {
      List<GraphPart> ps=p.getSubParts();
      for (      GraphPart p2 : ps) {
        if (p2.start == ip) {
          part=p2;
          break;
        }
      }
    }
    ret=new ArrayList<>();
    ret.addAll(output);
    GraphTargetItem lop=checkLoop(part,stopPart,loops);
    if (lop == null) {
      ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,part,stopPart,loops));
    }
 else {
      ret.add(lop);
    }
    return ret;
  }
  if (part.nextParts.isEmpty()) {
    if (code.code.get(part.end).definition instanceof ReturnValueIns) {
      if (part.getHeight() >= 3) {
        if (code.code.get(part.getPosAt(part.getHeight() - 2)).definition instanceof KillIns) {
          if (code.code.get(part.getPosAt(part.getHeight() - 3)).definition instanceof GetLocalTypeIns) {
            if (output.size() >= 2) {
              if (output.get(output.size() - 2) instanceof SetLocalTreeItem) {
                ret=new ArrayList<>();
                ret.addAll(output);
                ret.remove(ret.size() - 1);
                ret.add(new ReturnValueTreeItem(code.code.get(part.end),((SetLocalTreeItem)output.get(output.size() - 2)).value));
                return ret;
              }
            }
          }
        }
      }
    }
  }
  if ((code.code.get(part.end).definition instanceof LookupSwitchIns) && ignoredSwitches.contains(part.end)) {
    ret=new ArrayList<>();
    ret.addAll(output);
    return ret;
  }
  if (part.nextParts.size() == 2) {
    if (stack.peek() instanceof StrictNeqTreeItem) {
      System.out.println(""String_Node_Str"");
      if (part.nextParts.get(1).getHeight() >= 2) {
        System.out.println(""String_Node_Str"");
        if (code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(1).start)).definition instanceof PushIntegerTypeIns) {
          System.out.println(""String_Node_Str"");
          if (code.code.get(part.nextParts.get(1).nextParts.get(0).end).definition instanceof LookupSwitchIns) {
            System.out.println(""String_Node_Str"");
          }
        }
      }
    }
  }
  if (((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictEqTreeItem)&& (part.nextParts.get(0).getHeight() >= 2)&& (code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(0).start)).definition instanceof PushIntegerTypeIns)&& (code.code.get(part.nextParts.get(0).nextParts.get(0).end).definition instanceof LookupSwitchIns)) || ((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictNeqTreeItem)&& (part.nextParts.get(1).getHeight() >= 2)&& (code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(1).start)).definition instanceof PushIntegerTypeIns)&& (code.code.get(part.nextParts.get(1).nextParts.get(0).end).definition instanceof LookupSwitchIns))) {
    if (stack.peek() instanceof StrictEqTreeItem) {
      ignoredSwitches.add(part.nextParts.get(0).nextParts.get(0).end);
    }
 else {
      ignoredSwitches.add(part.nextParts.get(1).nextParts.get(0).end);
    }
    ret=new ArrayList<>();
    ret.addAll(output);
    boolean reversed=false;
    if (stack.peek() instanceof StrictEqTreeItem) {
      reversed=true;
    }
    GraphTargetItem switchedObject=null;
    if (!output.isEmpty()) {
      if (output.get(output.size() - 1) instanceof SetLocalTreeItem) {
        switchedObject=((SetLocalTreeItem)output.get(output.size() - 1)).value;
      }
    }
    if (switchedObject == null) {
      switchedObject=new NullTreeItem(null);
    }
    HashMap<Integer,GraphTargetItem> caseValuesMap=new HashMap<>();
    GraphTargetItem tar=stack.pop();
    if (tar instanceof StrictEqTreeItem) {
      tar=((StrictEqTreeItem)tar).leftSide;
    }
    if (tar instanceof StrictNeqTreeItem) {
      tar=((StrictNeqTreeItem)tar).leftSide;
    }
    caseValuesMap.put(code.code.get(part.nextParts.get(reversed ? 0 : 1).start).operands[0],tar);
    GraphPart switchLoc=part.nextParts.get(reversed ? 0 : 1).nextParts.get(0);
    while ((code.code.get(part.nextParts.get(reversed ? 1 : 0).end).definition instanceof IfStrictNeIns) || (code.code.get(part.nextParts.get(reversed ? 1 : 0).end).definition instanceof IfStrictEqIns)) {
      part=part.nextParts.get(reversed ? 1 : 0);
      translatePart(localData,part,stack);
      tar=stack.pop();
      if (tar instanceof StrictEqTreeItem) {
        tar=((StrictEqTreeItem)tar).leftSide;
      }
      if (tar instanceof StrictNeqTreeItem) {
        tar=((StrictNeqTreeItem)tar).leftSide;
      }
      if (code.code.get(part.end).definition instanceof IfStrictNeIns) {
        reversed=false;
      }
 else {
        reversed=true;
      }
      caseValuesMap.put(code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(reversed ? 0 : 1).start)).operands[0],tar);
      while (code.code.get(part.nextParts.get(reversed ? 1 : 0).start).definition instanceof JumpIns) {
        reversed=false;
        part=part.nextParts.get(reversed ? 1 : 0);
        if (part instanceof GraphPartMulti) {
          part=((GraphPartMulti)part).parts.get(0);
        }
      }
    }
    boolean hasDefault=false;
    GraphPart dp=part.nextParts.get(reversed ? 1 : 0);
    while (code.code.get(dp.start).definition instanceof JumpIns) {
      if (dp instanceof GraphPartMulti) {
        dp=((GraphPartMulti)dp).parts.get(0);
      }
      dp=dp.nextParts.get(0);
    }
    if (code.code.get(dp.start).definition instanceof PushIntegerTypeIns) {
      hasDefault=true;
    }
    List<GraphTargetItem> caseValues=new ArrayList<>();
    for (int i=0; i < switchLoc.nextParts.size() - 1; i++) {
      if (caseValuesMap.containsKey(i)) {
        caseValues.add(caseValuesMap.get(i));
      }
 else {
        continue;
      }
    }
    List<List<GraphTargetItem>> caseCommands=new ArrayList<>();
    GraphPart next=null;
    List<GraphPart> loopContinues=getLoopsContinues(loops);
    next=switchLoc.getNextPartPath(loopContinues);
    if (next == null) {
      next=switchLoc.getNextSuperPartPath(loopContinues);
    }
    GraphTargetItem ti=checkLoop(next,stopPart,loops);
    currentLoop=new Loop(loops.size(),null,next);
    currentLoop.phase=1;
    loops.add(currentLoop);
    List<Integer> valuesMapping=new ArrayList<>();
    List<GraphPart> caseBodies=new ArrayList<>();
    for (int i=0; i < caseValues.size(); i++) {
      GraphPart cur=switchLoc.nextParts.get(1 + i);
      if (!caseBodies.contains(cur)) {
        caseBodies.add(cur);
      }
      valuesMapping.add(caseBodies.indexOf(cur));
    }
    List<GraphTargetItem> defaultCommands=new ArrayList<>();
    GraphPart defaultPart=null;
    if (hasDefault) {
      defaultPart=switchLoc.nextParts.get(switchLoc.nextParts.size() - 1);
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(next);
      defaultCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,switchLoc,defaultPart,stopPart2,loops);
      if (!defaultCommands.isEmpty()) {
        if (defaultCommands.get(defaultCommands.size() - 1) instanceof BreakItem) {
          if (((BreakItem)defaultCommands.get(defaultCommands.size() - 1)).loopId == currentLoop.id) {
            defaultCommands.remove(defaultCommands.size() - 1);
          }
        }
      }
    }
    List<GraphPart> ignored=new ArrayList<>();
    for (    Loop l : loops) {
      ignored.add(l.loopContinue);
    }
    for (int i=0; i < caseBodies.size(); i++) {
      List<GraphTargetItem> cc=new ArrayList<>();
      GraphPart nextCase=null;
      nextCase=next;
      if (next != null) {
        if (i < caseBodies.size() - 1) {
          if (!caseBodies.get(i).leadsTo(srcCode,caseBodies.get(i + 1),loops)) {
          }
 else {
            nextCase=caseBodies.get(i + 1);
          }
        }
 else         if (hasDefault) {
          if (!caseBodies.get(i).leadsTo(srcCode,defaultPart,loops)) {
          }
 else {
            nextCase=defaultPart;
          }
        }
      }
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(nextCase);
      cc.addAll(0,printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,switchLoc,caseBodies.get(i),stopPart2,loops));
      caseCommands.add(cc);
    }
    SwitchItem sti=new SwitchItem(null,currentLoop,switchedObject,caseValues,caseCommands,defaultCommands,valuesMapping);
    ret.add(sti);
    if (next != null) {
      currentLoop.phase=2;
      ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,next,stopPart,loops));
    }
  }
  return ret;
}","@Override protected List<GraphTargetItem> check(GraphSource srcCode,List<Object> localData,List<GraphPart> allParts,Stack<GraphTargetItem> stack,GraphPart parent,GraphPart part,List<GraphPart> stopPart,List<Loop> loops,List<GraphTargetItem> output,Loop currentLoop){
  List<GraphTargetItem> ret=null;
  @SuppressWarnings(""String_Node_Str"") List<ABCException> parsedExceptions=(List<ABCException>)localData.get(DATA_PARSEDEXCEPTIONS);
  @SuppressWarnings(""String_Node_Str"") List<Integer> finallyJumps=(List<Integer>)localData.get(DATA_FINALLYJUMPS);
  @SuppressWarnings(""String_Node_Str"") List<Integer> ignoredSwitches=(List<Integer>)localData.get(DATA_IGNOREDSWITCHES);
  int ip=part.start;
  int addr=code.fixAddrAfterDebugLine(code.pos2adr(part.start));
  int maxend=-1;
  List<ABCException> catchedExceptions=new ArrayList<>();
  for (int e=0; e < body.exceptions.length; e++) {
    if (addr == code.fixAddrAfterDebugLine(body.exceptions[e].start)) {
      if (!body.exceptions[e].isFinally()) {
        if (((body.exceptions[e].end) > maxend) && (!parsedExceptions.contains(body.exceptions[e]))) {
          catchedExceptions.clear();
          maxend=code.fixAddrAfterDebugLine(body.exceptions[e].end);
          catchedExceptions.add(body.exceptions[e]);
        }
 else         if (code.fixAddrAfterDebugLine(body.exceptions[e].end) == maxend) {
          catchedExceptions.add(body.exceptions[e]);
        }
      }
    }
  }
  if (catchedExceptions.size() > 0) {
    parsedExceptions.addAll(catchedExceptions);
    int endpos=code.adr2pos(code.fixAddrAfterDebugLine(catchedExceptions.get(0).end));
    int endposStartBlock=code.adr2pos(catchedExceptions.get(0).end);
    List<List<GraphTargetItem>> catchedCommands=new ArrayList<>();
    if (code.code.get(endpos).definition instanceof JumpIns) {
      int afterCatchAddr=code.pos2adr(endpos + 1) + code.code.get(endpos).operands[0];
      int afterCatchPos=code.adr2pos(afterCatchAddr);
      Collections.sort(catchedExceptions,new Comparator<ABCException>(){
        @Override public int compare(        ABCException o1,        ABCException o2){
          return code.fixAddrAfterDebugLine(o1.target) - code.fixAddrAfterDebugLine(o2.target);
        }
      }
);
      List<GraphTargetItem> finallyCommands=new ArrayList<>();
      int returnPos=afterCatchPos;
      for (int e=0; e < body.exceptions.length; e++) {
        if (body.exceptions[e].isFinally()) {
          if (addr == code.fixAddrAfterDebugLine(body.exceptions[e].start)) {
            if (afterCatchPos + 1 == code.adr2pos(code.fixAddrAfterDebugLine(body.exceptions[e].end))) {
              AVM2Instruction jmpIns=code.code.get(code.adr2pos(code.fixAddrAfterDebugLine(body.exceptions[e].end)));
              if (jmpIns.definition instanceof JumpIns) {
                int finStart=code.adr2pos(code.fixAddrAfterDebugLine(body.exceptions[e].end) + jmpIns.getBytes().length + jmpIns.operands[0]);
                boolean switchFound=false;
                GraphPart fpart=null;
                for (                GraphPart p : allParts) {
                  if (p.start == finStart) {
                    fpart=p;
                    break;
                  }
                }
                for (int f=finStart; f < code.code.size(); f++) {
                  if (code.code.get(f).definition instanceof LookupSwitchIns) {
                    AVM2Instruction swins=code.code.get(f);
                    if (swins.operands.length >= 3) {
                      if (swins.operands[0] == swins.getBytes().length) {
                        if (code.adr2pos(code.pos2adr(f) + swins.operands[2]) < finStart) {
                          stack.push(new ExceptionTreeItem(body.exceptions[e]));
                          GraphPart fepart=null;
                          for (                          GraphPart p : allParts) {
                            if (p.start == f + 1) {
                              fepart=p;
                              break;
                            }
                          }
                          ignoredSwitches.add(f);
                          List<GraphPart> stopPart2=new ArrayList<>(stopPart);
                          stopPart2.add(fepart);
                          finallyCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,fpart,stopPart2,loops);
                          returnPos=f + 1;
                          break;
                        }
                      }
                    }
                  }
                }
                if (!switchFound) {
                  finallyCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,fpart,null,loops);
                }
                finallyJumps.add(finStart);
                break;
              }
            }
          }
        }
      }
      List<GraphPart> catchParts=new ArrayList<>();
      for (int e=0; e < catchedExceptions.size(); e++) {
        int eendpos;
        if (e < catchedExceptions.size() - 1) {
          eendpos=code.adr2pos(code.fixAddrAfterDebugLine(catchedExceptions.get(e + 1).target)) - 2;
        }
 else {
          eendpos=afterCatchPos - 1;
        }
        GraphPart npart=null;
        int findpos=code.adr2pos(catchedExceptions.get(e).target);
        for (        GraphPart p : allParts) {
          if (p.start == findpos) {
            npart=p;
            catchParts.add(p);
            break;
          }
        }
        GraphPart nepart=null;
        for (        GraphPart p : allParts) {
          if (p.start == eendpos + 1) {
            nepart=p;
            break;
          }
        }
        stack.add(new ExceptionTreeItem(catchedExceptions.get(e)));
        List<Object> localData2=new ArrayList<>();
        localData2.addAll(localData);
        localData2.set(DATA_SCOPESTACK,new Stack<GraphTargetItem>());
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(nepart);
        catchedCommands.add(printGraph(new ArrayList<GraphPart>(),localData2,stack,allParts,parent,npart,stopPart2,loops));
      }
      GraphPart nepart=null;
      for (      GraphPart p : allParts) {
        if (p.start == endposStartBlock) {
          nepart=p;
          break;
        }
      }
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(nepart);
      stopPart2.addAll(catchParts);
      List<GraphTargetItem> tryCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,part,stopPart2,loops);
      output.clear();
      output.add(new TryTreeItem(tryCommands,catchedExceptions,catchedCommands,finallyCommands));
      ip=returnPos;
    }
  }
  if (ip != part.start) {
    part=null;
    for (    GraphPart p : allParts) {
      List<GraphPart> ps=p.getSubParts();
      for (      GraphPart p2 : ps) {
        if (p2.start == ip) {
          part=p2;
          break;
        }
      }
    }
    ret=new ArrayList<>();
    ret.addAll(output);
    GraphTargetItem lop=checkLoop(part,stopPart,loops);
    if (lop == null) {
      ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,part,stopPart,loops));
    }
 else {
      ret.add(lop);
    }
    return ret;
  }
  if (part.nextParts.isEmpty()) {
    if (code.code.get(part.end).definition instanceof ReturnValueIns) {
      if (part.getHeight() >= 3) {
        if (code.code.get(part.getPosAt(part.getHeight() - 2)).definition instanceof KillIns) {
          if (code.code.get(part.getPosAt(part.getHeight() - 3)).definition instanceof GetLocalTypeIns) {
            if (output.size() >= 2) {
              if (output.get(output.size() - 2) instanceof SetLocalTreeItem) {
                ret=new ArrayList<>();
                ret.addAll(output);
                ret.remove(ret.size() - 1);
                ret.add(new ReturnValueTreeItem(code.code.get(part.end),((SetLocalTreeItem)output.get(output.size() - 2)).value));
                return ret;
              }
            }
          }
        }
      }
    }
  }
  if ((code.code.get(part.end).definition instanceof LookupSwitchIns) && ignoredSwitches.contains(part.end)) {
    ret=new ArrayList<>();
    ret.addAll(output);
    return ret;
  }
  if (((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictEqTreeItem)&& (part.nextParts.get(0).getHeight() >= 2)&& (code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(0).start)).definition instanceof PushIntegerTypeIns)&& (code.code.get(part.nextParts.get(0).nextParts.get(0).end).definition instanceof LookupSwitchIns)) || ((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictNeqTreeItem)&& (part.nextParts.get(1).getHeight() >= 2)&& (code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(1).start)).definition instanceof PushIntegerTypeIns)&& (code.code.get(part.nextParts.get(1).nextParts.get(0).end).definition instanceof LookupSwitchIns))) {
    if (stack.peek() instanceof StrictEqTreeItem) {
      ignoredSwitches.add(part.nextParts.get(0).nextParts.get(0).end);
    }
 else {
      ignoredSwitches.add(part.nextParts.get(1).nextParts.get(0).end);
    }
    ret=new ArrayList<>();
    ret.addAll(output);
    boolean reversed=false;
    if (stack.peek() instanceof StrictEqTreeItem) {
      reversed=true;
    }
    GraphTargetItem switchedObject=null;
    if (!output.isEmpty()) {
      if (output.get(output.size() - 1) instanceof SetLocalTreeItem) {
        switchedObject=((SetLocalTreeItem)output.get(output.size() - 1)).value;
      }
    }
    if (switchedObject == null) {
      switchedObject=new NullTreeItem(null);
    }
    HashMap<Integer,GraphTargetItem> caseValuesMap=new HashMap<>();
    GraphTargetItem tar=stack.pop();
    if (tar instanceof StrictEqTreeItem) {
      tar=((StrictEqTreeItem)tar).leftSide;
    }
    if (tar instanceof StrictNeqTreeItem) {
      tar=((StrictNeqTreeItem)tar).leftSide;
    }
    caseValuesMap.put(code.code.get(part.nextParts.get(reversed ? 0 : 1).start).operands[0],tar);
    GraphPart switchLoc=part.nextParts.get(reversed ? 0 : 1).nextParts.get(0);
    while ((code.code.get(part.nextParts.get(reversed ? 1 : 0).end).definition instanceof IfStrictNeIns) || (code.code.get(part.nextParts.get(reversed ? 1 : 0).end).definition instanceof IfStrictEqIns)) {
      part=part.nextParts.get(reversed ? 1 : 0);
      translatePart(localData,part,stack);
      tar=stack.pop();
      if (tar instanceof StrictEqTreeItem) {
        tar=((StrictEqTreeItem)tar).leftSide;
      }
      if (tar instanceof StrictNeqTreeItem) {
        tar=((StrictNeqTreeItem)tar).leftSide;
      }
      if (code.code.get(part.end).definition instanceof IfStrictNeIns) {
        reversed=false;
      }
 else {
        reversed=true;
      }
      caseValuesMap.put(code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(reversed ? 0 : 1).start)).operands[0],tar);
      while (code.code.get(part.nextParts.get(reversed ? 1 : 0).start).definition instanceof JumpIns) {
        reversed=false;
        part=part.nextParts.get(reversed ? 1 : 0);
        if (part instanceof GraphPartMulti) {
          part=((GraphPartMulti)part).parts.get(0);
        }
      }
    }
    boolean hasDefault=false;
    GraphPart dp=part.nextParts.get(reversed ? 1 : 0);
    while (code.code.get(dp.start).definition instanceof JumpIns) {
      if (dp instanceof GraphPartMulti) {
        dp=((GraphPartMulti)dp).parts.get(0);
      }
      dp=dp.nextParts.get(0);
    }
    if (code.code.get(dp.start).definition instanceof PushIntegerTypeIns) {
      hasDefault=true;
    }
    List<GraphTargetItem> caseValues=new ArrayList<>();
    for (int i=0; i < switchLoc.nextParts.size() - 1; i++) {
      if (caseValuesMap.containsKey(i)) {
        caseValues.add(caseValuesMap.get(i));
      }
 else {
        continue;
      }
    }
    List<List<GraphTargetItem>> caseCommands=new ArrayList<>();
    GraphPart next=null;
    List<GraphPart> loopContinues=getLoopsContinues(loops);
    next=switchLoc.getNextPartPath(loopContinues);
    if (next == null) {
      next=switchLoc.getNextSuperPartPath(loopContinues);
    }
    GraphTargetItem ti=checkLoop(next,stopPart,loops);
    currentLoop=new Loop(loops.size(),null,next);
    currentLoop.phase=1;
    loops.add(currentLoop);
    List<Integer> valuesMapping=new ArrayList<>();
    List<GraphPart> caseBodies=new ArrayList<>();
    for (int i=0; i < caseValues.size(); i++) {
      GraphPart cur=switchLoc.nextParts.get(1 + i);
      if (!caseBodies.contains(cur)) {
        caseBodies.add(cur);
      }
      valuesMapping.add(caseBodies.indexOf(cur));
    }
    List<GraphTargetItem> defaultCommands=new ArrayList<>();
    GraphPart defaultPart=null;
    if (hasDefault) {
      defaultPart=switchLoc.nextParts.get(switchLoc.nextParts.size() - 1);
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(next);
      defaultCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,switchLoc,defaultPart,stopPart2,loops);
      if (!defaultCommands.isEmpty()) {
        if (defaultCommands.get(defaultCommands.size() - 1) instanceof BreakItem) {
          if (((BreakItem)defaultCommands.get(defaultCommands.size() - 1)).loopId == currentLoop.id) {
            defaultCommands.remove(defaultCommands.size() - 1);
          }
        }
      }
    }
    List<GraphPart> ignored=new ArrayList<>();
    for (    Loop l : loops) {
      ignored.add(l.loopContinue);
    }
    for (int i=0; i < caseBodies.size(); i++) {
      List<GraphTargetItem> cc=new ArrayList<>();
      GraphPart nextCase=null;
      nextCase=next;
      if (next != null) {
        if (i < caseBodies.size() - 1) {
          if (!caseBodies.get(i).leadsTo(srcCode,caseBodies.get(i + 1),loops)) {
          }
 else {
            nextCase=caseBodies.get(i + 1);
          }
        }
 else         if (hasDefault) {
          if (!caseBodies.get(i).leadsTo(srcCode,defaultPart,loops)) {
          }
 else {
            nextCase=defaultPart;
          }
        }
      }
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(nextCase);
      cc.addAll(0,printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,switchLoc,caseBodies.get(i),stopPart2,loops));
      caseCommands.add(cc);
    }
    SwitchItem sti=new SwitchItem(null,currentLoop,switchedObject,caseValues,caseCommands,defaultCommands,valuesMapping);
    ret.add(sti);
    if (next != null) {
      currentLoop.phase=2;
      ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,next,stopPart,loops));
    }
  }
  return ret;
}",0.97949870818374
62127,"@Override protected List<GraphTargetItem> check(GraphSource code,List<Object> localData,List<GraphPart> allParts,Stack<GraphTargetItem> stack,GraphPart parent,GraphPart part,List<GraphPart> stopPart,List<Loop> loops,List<GraphTargetItem> output,Loop currentLoop){
  if (!output.isEmpty()) {
    if (output.get(output.size() - 1) instanceof StoreRegisterTreeItem) {
      StoreRegisterTreeItem str=(StoreRegisterTreeItem)output.get(output.size() - 1);
      if (str.value instanceof EnumerateTreeItem) {
        output.remove(output.size() - 1);
      }
    }
  }
  List<GraphTargetItem> ret=null;
  if ((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictEqTreeItem)) {
    GraphTargetItem switchedObject=null;
    if (!output.isEmpty()) {
      if (output.get(output.size() - 1) instanceof StoreRegisterTreeItem) {
        switchedObject=((StoreRegisterTreeItem)output.get(output.size() - 1)).value;
      }
    }
    if (switchedObject == null) {
      switchedObject=new DirectValueTreeItem(null,-1,new Null(),null);
    }
    HashMap<Integer,GraphTargetItem> caseValuesMap=new HashMap<>();
    int pos=0;
    StrictEqTreeItem set=(StrictEqTreeItem)stack.pop();
    caseValuesMap.put(pos,set.rightSide);
    if (set.leftSide instanceof StoreRegisterTreeItem) {
      switchedObject=((StoreRegisterTreeItem)set.leftSide).value;
    }
    List<GraphPart> caseBodyParts=new ArrayList<>();
    caseBodyParts.add(part.nextParts.get(0));
    GraphTargetItem top=null;
    int cnt=1;
    while (part.nextParts.size() > 1 && part.nextParts.get(1).getHeight() > 1 && code.get(part.nextParts.get(1).end >= code.size() ? code.size() - 1 : part.nextParts.get(1).end) instanceof ActionIf && ((top=translatePartGetStack(localData,part.nextParts.get(1),stack)) instanceof StrictEqTreeItem)) {
      cnt++;
      part=part.nextParts.get(1);
      pos++;
      caseBodyParts.add(part.nextParts.get(0));
      set=(StrictEqTreeItem)top;
      caseValuesMap.put(pos,set.rightSide);
    }
    if (cnt == 1) {
      stack.push(set);
    }
 else {
      part=part.nextParts.get(1);
      GraphPart defaultPart=part;
      List<GraphPart> defaultAndLastPart=new ArrayList<>();
      defaultAndLastPart.add(defaultPart);
      defaultAndLastPart.add(caseBodyParts.get(caseBodyParts.size() - 1));
      GraphPart defaultPart2=getCommonPart(defaultAndLastPart,loops);
      List<GraphTargetItem> defaultCommands=new ArrayList<>();
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(defaultPart2);
      defaultCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,defaultPart,stopPart2,loops);
      List<GraphPart> loopContinues=new ArrayList<>();
      for (      Loop l : loops) {
        if (l.loopContinue != null) {
          loopContinues.add(l.loopContinue);
        }
      }
      List<GraphPart> breakParts=new ArrayList<>();
      GraphPart breakPart=getMostCommonPart(caseBodyParts,loops);
      if ((defaultPart2 != breakPart) && (defaultCommands.isEmpty())) {
        defaultPart=defaultPart2;
      }
      List<GraphTargetItem> caseValues=new ArrayList<>();
      for (int i=0; i < caseBodyParts.size(); i++) {
        if (caseValuesMap.containsKey(i)) {
          caseValues.add(caseValuesMap.get(i));
        }
 else {
          continue;
        }
      }
      List<List<GraphTargetItem>> caseCommands=new ArrayList<>();
      GraphPart next=null;
      next=breakPart;
      GraphTargetItem ti=checkLoop(next,stopPart,loops);
      currentLoop=new Loop(loops.size(),null,next);
      loops.add(currentLoop);
      List<Integer> valuesMapping=new ArrayList<>();
      List<GraphPart> caseBodies=new ArrayList<>();
      for (int i=0; i < caseValues.size(); i++) {
        GraphPart cur=caseBodyParts.get(i);
        if (!caseBodies.contains(cur)) {
          caseBodies.add(cur);
        }
        valuesMapping.add(caseBodies.indexOf(cur));
      }
      if (defaultPart == breakPart) {
        defaultPart=null;
      }
      if ((defaultPart != null) && (defaultCommands.isEmpty())) {
        List<GraphPart> stopPart2x=new ArrayList<>(stopPart);
        stopPart2x.add(next);
        defaultCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,defaultPart,stopPart2x,loops);
      }
      List<GraphPart> ignored=new ArrayList<>();
      for (      Loop l : loops) {
        ignored.add(l.loopContinue);
      }
      for (int i=0; i < caseBodies.size(); i++) {
        List<GraphTargetItem> cc=new ArrayList<>();
        GraphPart nextCase=null;
        nextCase=next;
        if (next != null) {
          if (i < caseBodies.size() - 1) {
            if (!caseBodies.get(i).leadsTo(code,caseBodies.get(i + 1),loops)) {
              cc.add(new BreakItem(null,currentLoop.id));
            }
 else {
              nextCase=caseBodies.get(i + 1);
            }
          }
 else           if (!defaultCommands.isEmpty()) {
            if (!caseBodies.get(i).leadsTo(code,defaultPart,loops)) {
              cc.add(new BreakItem(null,currentLoop.id));
            }
 else {
              nextCase=defaultPart;
            }
          }
        }
        List<GraphPart> stopPart2x=new ArrayList<>(stopPart);
        for (        GraphPart b : caseBodies) {
          if (b != caseBodies.get(i)) {
            stopPart2x.add(b);
          }
        }
        if (defaultPart != null) {
          stopPart2x.add(defaultPart);
        }
        if (breakPart != null) {
          stopPart2x.add(breakPart);
        }
        cc.addAll(0,printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,caseBodies.get(i),stopPart2x,loops));
        if (cc.size() >= 2) {
          if (cc.get(cc.size() - 1) instanceof BreakItem) {
            if ((cc.get(cc.size() - 2) instanceof ContinueItem) || (cc.get(cc.size() - 2) instanceof BreakItem)) {
              cc.remove(cc.size() - 1);
            }
          }
        }
        caseCommands.add(cc);
      }
      ret=new ArrayList<>();
      if (!output.isEmpty()) {
        if (output.get(output.size() - 1) instanceof StoreRegisterTreeItem) {
          output.remove(output.size() - 1);
        }
      }
      ret.addAll(output);
      SwitchItem sti=new SwitchItem(null,currentLoop,switchedObject,caseValues,caseCommands,defaultCommands,valuesMapping);
      ret.add(sti);
      if (next != null) {
        if (ti != null) {
          ret.add(ti);
        }
 else {
          ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,next,stopPart,loops));
        }
      }
    }
  }
  return ret;
}","@Override protected List<GraphTargetItem> check(GraphSource code,List<Object> localData,List<GraphPart> allParts,Stack<GraphTargetItem> stack,GraphPart parent,GraphPart part,List<GraphPart> stopPart,List<Loop> loops,List<GraphTargetItem> output,Loop currentLoop){
  if (!output.isEmpty()) {
    if (output.get(output.size() - 1) instanceof StoreRegisterTreeItem) {
      StoreRegisterTreeItem str=(StoreRegisterTreeItem)output.get(output.size() - 1);
      if (str.value instanceof EnumerateTreeItem) {
        output.remove(output.size() - 1);
      }
    }
  }
  List<GraphTargetItem> ret=null;
  if ((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictEqTreeItem)) {
    GraphTargetItem switchedObject=null;
    if (!output.isEmpty()) {
      if (output.get(output.size() - 1) instanceof StoreRegisterTreeItem) {
        switchedObject=((StoreRegisterTreeItem)output.get(output.size() - 1)).value;
      }
    }
    if (switchedObject == null) {
      switchedObject=new DirectValueTreeItem(null,-1,new Null(),null);
    }
    HashMap<Integer,GraphTargetItem> caseValuesMap=new HashMap<>();
    int pos=0;
    StrictEqTreeItem set=(StrictEqTreeItem)stack.pop();
    caseValuesMap.put(pos,set.rightSide);
    if (set.leftSide instanceof StoreRegisterTreeItem) {
      switchedObject=((StoreRegisterTreeItem)set.leftSide).value;
    }
    List<GraphPart> caseBodyParts=new ArrayList<>();
    caseBodyParts.add(part.nextParts.get(0));
    GraphTargetItem top=null;
    int cnt=1;
    while (part.nextParts.size() > 1 && part.nextParts.get(1).getHeight() > 1 && code.get(part.nextParts.get(1).end >= code.size() ? code.size() - 1 : part.nextParts.get(1).end) instanceof ActionIf && ((top=translatePartGetStack(localData,part.nextParts.get(1),stack)) instanceof StrictEqTreeItem)) {
      cnt++;
      part=part.nextParts.get(1);
      pos++;
      caseBodyParts.add(part.nextParts.get(0));
      set=(StrictEqTreeItem)top;
      caseValuesMap.put(pos,set.rightSide);
    }
    if (cnt == 1) {
      stack.push(set);
    }
 else {
      part=part.nextParts.get(1);
      GraphPart defaultPart=part;
      List<GraphPart> defaultAndLastPart=new ArrayList<>();
      defaultAndLastPart.add(defaultPart);
      defaultAndLastPart.add(caseBodyParts.get(caseBodyParts.size() - 1));
      GraphPart defaultPart2=getCommonPart(defaultAndLastPart,loops);
      List<GraphTargetItem> defaultCommands=new ArrayList<>();
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(defaultPart2);
      defaultCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,defaultPart,stopPart2,loops);
      List<GraphPart> loopContinues=new ArrayList<>();
      for (      Loop l : loops) {
        if (l.loopContinue != null) {
          loopContinues.add(l.loopContinue);
        }
      }
      List<GraphPart> breakParts=new ArrayList<>();
      List<GraphPart> mcp=new ArrayList<>();
      mcp.addAll(caseBodyParts);
      mcp.add(defaultPart2);
      GraphPart breakPart=getMostCommonPart(mcp,loops);
      if ((defaultPart2 != breakPart) && (defaultCommands.isEmpty())) {
        defaultPart=defaultPart2;
      }
      List<GraphTargetItem> caseValues=new ArrayList<>();
      for (int i=0; i < caseBodyParts.size(); i++) {
        if (caseValuesMap.containsKey(i)) {
          caseValues.add(caseValuesMap.get(i));
        }
 else {
          continue;
        }
      }
      List<List<GraphTargetItem>> caseCommands=new ArrayList<>();
      GraphPart next=null;
      next=breakPart;
      GraphTargetItem ti=checkLoop(next,stopPart,loops);
      currentLoop=new Loop(loops.size(),null,next);
      currentLoop.phase=1;
      loops.add(currentLoop);
      List<Integer> valuesMapping=new ArrayList<>();
      List<GraphPart> caseBodies=new ArrayList<>();
      for (int i=0; i < caseValues.size(); i++) {
        GraphPart cur=caseBodyParts.get(i);
        if (!caseBodies.contains(cur)) {
          caseBodies.add(cur);
        }
        valuesMapping.add(caseBodies.indexOf(cur));
      }
      if (defaultPart == breakPart) {
        defaultPart=null;
      }
      if ((defaultPart != null) && (defaultCommands.isEmpty())) {
        List<GraphPart> stopPart2x=new ArrayList<>(stopPart);
        stopPart2x.add(next);
        defaultCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,defaultPart,stopPart2x,loops);
      }
      if (!defaultCommands.isEmpty()) {
        if (defaultCommands.get(defaultCommands.size() - 1) instanceof BreakItem) {
          BreakItem bi=(BreakItem)defaultCommands.get(defaultCommands.size() - 1);
          if (bi.loopId == currentLoop.id) {
            defaultCommands.remove(defaultCommands.size() - 1);
          }
        }
      }
      List<GraphPart> ignored=new ArrayList<>();
      for (      Loop l : loops) {
        ignored.add(l.loopContinue);
      }
      for (int i=0; i < caseBodies.size(); i++) {
        List<GraphTargetItem> cc=new ArrayList<>();
        GraphPart nextCase=null;
        nextCase=next;
        if (next != null) {
          if (i < caseBodies.size() - 1) {
            if (!caseBodies.get(i).leadsTo(code,caseBodies.get(i + 1),loops)) {
              cc.add(new BreakItem(null,currentLoop.id));
            }
 else {
              nextCase=caseBodies.get(i + 1);
            }
          }
 else           if (!defaultCommands.isEmpty()) {
            if (!caseBodies.get(i).leadsTo(code,defaultPart,loops)) {
              cc.add(new BreakItem(null,currentLoop.id));
            }
 else {
              nextCase=defaultPart;
            }
          }
        }
        List<GraphPart> stopPart2x=new ArrayList<>(stopPart);
        for (        GraphPart b : caseBodies) {
          if (b != caseBodies.get(i)) {
            stopPart2x.add(b);
          }
        }
        if (defaultPart != null) {
          stopPart2x.add(defaultPart);
        }
        if (breakPart != null) {
          stopPart2x.add(breakPart);
        }
        cc.addAll(0,printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,caseBodies.get(i),stopPart2x,loops));
        if (cc.size() >= 2) {
          if (cc.get(cc.size() - 1) instanceof BreakItem) {
            if ((cc.get(cc.size() - 2) instanceof ContinueItem) || (cc.get(cc.size() - 2) instanceof BreakItem)) {
              cc.remove(cc.size() - 1);
            }
          }
        }
        caseCommands.add(cc);
      }
      ret=new ArrayList<>();
      if (!output.isEmpty()) {
        if (output.get(output.size() - 1) instanceof StoreRegisterTreeItem) {
          output.remove(output.size() - 1);
        }
      }
      ret.addAll(output);
      SwitchItem sti=new SwitchItem(null,currentLoop,switchedObject,caseValues,caseCommands,defaultCommands,valuesMapping);
      ret.add(sti);
      currentLoop.phase=2;
      if (next != null) {
        if (ti != null) {
          ret.add(ti);
        }
 else {
          ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,next,stopPart,loops));
        }
      }
    }
  }
  return ret;
}",0.9617382398127148
62128,"private void assignClassesToSymbols(){
  HashMap<Integer,String> classes=new HashMap<>();
  for (  Tag t : tags) {
    if (t instanceof SymbolClassTag) {
      SymbolClassTag sct=(SymbolClassTag)t;
      for (int i=0; i < sct.tagIDs.length; i++) {
        if ((!classes.containsKey(sct.tagIDs[i])) && (!classes.containsValue(sct.classNames[i]))) {
          classes.put(sct.tagIDs[i],sct.classNames[i]);
        }
      }
    }
  }
  for (  Tag t : tags) {
    if (t instanceof CharacterIdTag) {
      CharacterIdTag ct=(CharacterIdTag)t;
      if (classes.containsKey(ct.getCharacterID())) {
        ct.setClassName(classes.get(ct.getCharacterID()));
      }
    }
  }
}","public void assignClassesToSymbols(){
  HashMap<Integer,String> classes=new HashMap<>();
  for (  Tag t : tags) {
    if (t instanceof SymbolClassTag) {
      SymbolClassTag sct=(SymbolClassTag)t;
      for (int i=0; i < sct.tagIDs.length; i++) {
        if ((!classes.containsKey(sct.tagIDs[i])) && (!classes.containsValue(sct.classNames[i]))) {
          classes.put(sct.tagIDs[i],sct.classNames[i]);
        }
      }
    }
  }
  for (  Tag t : tags) {
    if (t instanceof CharacterIdTag) {
      CharacterIdTag ct=(CharacterIdTag)t;
      if (classes.containsKey(ct.getCharacterID())) {
        ct.setClassName(classes.get(ct.getCharacterID()));
      }
    }
  }
}",0.9917971662938104
62129,"public int deobfuscateName(Map<Integer,String> stringUsageTypes,Set<Integer> stringUsages,HashMap<String,String> namesMap,int strIndex,boolean firstUppercase,RenameType renameType){
  if (strIndex <= 0) {
    return strIndex;
  }
  String s=constants.constant_string[strIndex];
  boolean isValid=true;
  if (isReserved(s)) {
    isValid=false;
  }
  if (isValid) {
    for (int i=0; i < s.length(); i++) {
      if (s.charAt(i) > 127) {
        isValid=false;
        break;
      }
    }
  }
  if (isValid) {
    Pattern pat=Pattern.compile(""String_Node_Str"" + Pattern.quote(validFirstCharacters) + ""String_Node_Str""+ ""String_Node_Str""+ Pattern.quote(validFirstCharacters + validNextCharacters)+ ""String_Node_Str"");
    if (!pat.matcher(s).matches()) {
      isValid=false;
    }
  }
  if (!isValid) {
    String newname;
    if (namesMap.containsKey(s)) {
      newname=namesMap.get(s);
    }
 else {
      newname=fooString(constants.constant_string[strIndex],firstUppercase,DEFAULT_FOO_SIZE,stringUsageTypes.get(strIndex),renameType);
    }
    if (stringUsages.contains(strIndex)) {
      strIndex=constants.addString(s);
    }
    constants.constant_string[strIndex]=newname;
    if (!namesMap.containsKey(s)) {
      namesMap.put(s,constants.constant_string[strIndex]);
    }
  }
  return strIndex;
}","public int deobfuscateName(Map<Integer,String> stringUsageTypes,Set<Integer> stringUsages,Set<Integer> namespaceUsages,HashMap<String,String> namesMap,int strIndex,boolean firstUppercase,RenameType renameType){
  if (strIndex <= 0) {
    return strIndex;
  }
  String s=constants.constant_string[strIndex];
  boolean isValid=true;
  if (isReserved(s)) {
    isValid=false;
  }
  if (isValid) {
    for (int i=0; i < s.length(); i++) {
      if (s.charAt(i) > 127) {
        isValid=false;
        break;
      }
    }
  }
  if (isValid) {
    Pattern pat=Pattern.compile(""String_Node_Str"" + Pattern.quote(validFirstCharacters) + ""String_Node_Str""+ ""String_Node_Str""+ Pattern.quote(validFirstCharacters + validNextCharacters)+ ""String_Node_Str"");
    if (!pat.matcher(s).matches()) {
      isValid=false;
    }
  }
  if (!isValid) {
    String newname;
    if (namesMap.containsKey(s)) {
      newname=namesMap.get(s);
    }
 else {
      newname=fooString(constants.constant_string[strIndex],firstUppercase,DEFAULT_FOO_SIZE,stringUsageTypes.get(strIndex),renameType);
    }
    if (stringUsages.contains(strIndex) || namespaceUsages.contains(strIndex)) {
      strIndex=constants.addString(s);
    }
    constants.constant_string[strIndex]=newname;
    if (!namesMap.containsKey(s)) {
      namesMap.put(s,constants.constant_string[strIndex]);
    }
  }
  return strIndex;
}",0.9750093248787766
62130,"public int deobfuscateNameSpace(Map<Integer,String> stringUsageTypes,Set<Integer> stringUsages,HashMap<String,String> namesMap,int strIndex,RenameType renameType){
  if (strIndex <= 0) {
    return strIndex;
  }
  String s=constants.constant_string[strIndex];
  boolean isValid=isValidNSPart(s);
  if (!isValid) {
    String newName;
    if (namesMap.containsKey(s)) {
      newName=constants.constant_string[strIndex]=namesMap.get(s);
    }
 else {
      String parts[]=null;
      if (s.contains(""String_Node_Str"")) {
        parts=s.split(""String_Node_Str"");
      }
 else {
        parts=new String[]{s};
      }
      String ret=""String_Node_Str"";
      for (int p=0; p < parts.length; p++) {
        if (p > 0) {
          ret+=""String_Node_Str"";
        }
        if (!isValidNSPart(parts[p])) {
          ret+=fooString(constants.constant_string[strIndex],false,DEFAULT_FOO_SIZE,""String_Node_Str"",renameType);
        }
 else {
          ret+=parts[p];
        }
      }
      newName=ret;
      namesMap.put(s,newName);
    }
    if (stringUsages.contains(strIndex)) {
      strIndex=constants.addString(newName);
    }
 else {
      constants.constant_string[strIndex]=newName;
    }
  }
  return strIndex;
}","public int deobfuscateNameSpace(Map<Integer,String> stringUsageTypes,Set<Integer> stringUsages,HashMap<String,String> namesMap,int strIndex,RenameType renameType){
  if (strIndex <= 0) {
    return strIndex;
  }
  String s=constants.constant_string[strIndex];
  if (builtInNs(s) != null) {
    return strIndex;
  }
  boolean isValid=isValidNSPart(s);
  if (!isValid) {
    String newName;
    if (namesMap.containsKey(s)) {
      newName=constants.constant_string[strIndex]=namesMap.get(s);
    }
 else {
      String parts[]=null;
      if (s.contains(""String_Node_Str"")) {
        parts=s.split(""String_Node_Str"");
      }
 else {
        parts=new String[]{s};
      }
      String ret=""String_Node_Str"";
      for (int p=0; p < parts.length; p++) {
        if (p > 0) {
          ret+=""String_Node_Str"";
        }
        if (!isValidNSPart(parts[p])) {
          ret+=fooString(constants.constant_string[strIndex],false,DEFAULT_FOO_SIZE,""String_Node_Str"",renameType);
        }
 else {
          ret+=parts[p];
        }
      }
      newName=ret;
      namesMap.put(s,newName);
    }
    if (stringUsages.contains(strIndex)) {
      strIndex=constants.addString(newName);
    }
 else {
      constants.constant_string[strIndex]=newName;
    }
  }
  return strIndex;
}",0.9779205138498596
62131,"public void renameMultiname(int multinameIndex,String newname){
  if (multinameIndex <= 0 || multinameIndex >= constants.constant_multiname.length) {
    throw new IllegalArgumentException(""String_Node_Str"" + multinameIndex + ""String_Node_Str"");
  }
  Set<Integer> stringUsages=getStringUsages();
  int strIndex=constants.constant_multiname[multinameIndex].name_index;
  if (stringUsages.contains(strIndex)) {
    strIndex=constants.forceGetStringId(newname);
    constants.constant_multiname[multinameIndex].name_index=strIndex;
  }
 else {
    constants.constant_string[strIndex]=newname;
  }
}","public void renameMultiname(int multinameIndex,String newname){
  if (multinameIndex <= 0 || multinameIndex >= constants.constant_multiname.length) {
    throw new IllegalArgumentException(""String_Node_Str"" + multinameIndex + ""String_Node_Str"");
  }
  Set<Integer> stringUsages=getStringUsages();
  Set<Integer> namespaceUsages=getNsStringUsages();
  int strIndex=constants.constant_multiname[multinameIndex].name_index;
  if (stringUsages.contains(strIndex) || namespaceUsages.contains(strIndex)) {
    strIndex=constants.forceGetStringId(newname);
    constants.constant_multiname[multinameIndex].name_index=strIndex;
  }
 else {
    constants.constant_string[strIndex]=newname;
  }
}",0.9297971918876756
62132,"public void deobfuscateIdentifiers(HashMap<String,String> namesMap,RenameType renameType){
  Set<Integer> stringUsages=getStringUsages();
  Map<Integer,String> stringUsageTypes=new HashMap<>();
  informListeners(""String_Node_Str"",""String_Node_Str"");
  getStringUsageTypes(stringUsageTypes);
  for (int i=1; i < instance_info.length; i++) {
    informListeners(""String_Node_Str"",""String_Node_Str"" + i + ""String_Node_Str""+ instance_info.length);
    if (instance_info[i].name_index != 0) {
      constants.constant_multiname[instance_info[i].name_index].name_index=deobfuscateName(stringUsageTypes,stringUsages,namesMap,constants.constant_multiname[instance_info[i].name_index].name_index,true,renameType);
    }
    if (instance_info[i].super_index != 0) {
      constants.constant_multiname[instance_info[i].super_index].name_index=deobfuscateName(stringUsageTypes,stringUsages,namesMap,constants.constant_multiname[instance_info[i].super_index].name_index,true,renameType);
    }
  }
  for (int i=1; i < constants.constant_multiname.length; i++) {
    informListeners(""String_Node_Str"",""String_Node_Str"" + i + ""String_Node_Str""+ constants.constant_multiname.length);
    constants.constant_multiname[i].name_index=deobfuscateName(stringUsageTypes,stringUsages,namesMap,constants.constant_multiname[i].name_index,false,renameType);
  }
  for (int i=1; i < constants.constant_namespace.length; i++) {
    informListeners(""String_Node_Str"",""String_Node_Str"" + i + ""String_Node_Str""+ constants.constant_namespace.length);
    constants.constant_namespace[i].name_index=deobfuscateNameSpace(stringUsageTypes,stringUsages,namesMap,constants.constant_namespace[i].name_index,renameType);
  }
}","public void deobfuscateIdentifiers(HashMap<String,String> namesMap,RenameType renameType){
  Set<Integer> stringUsages=getStringUsages();
  Set<Integer> namespaceUsages=getNsStringUsages();
  Map<Integer,String> stringUsageTypes=new HashMap<>();
  informListeners(""String_Node_Str"",""String_Node_Str"");
  getStringUsageTypes(stringUsageTypes);
  for (int i=1; i < instance_info.length; i++) {
    informListeners(""String_Node_Str"",""String_Node_Str"" + i + ""String_Node_Str""+ instance_info.length);
    if (instance_info[i].name_index != 0) {
      constants.constant_multiname[instance_info[i].name_index].name_index=deobfuscateName(stringUsageTypes,stringUsages,namespaceUsages,namesMap,constants.constant_multiname[instance_info[i].name_index].name_index,true,renameType);
      if (constants.constant_multiname[instance_info[i].name_index].namespace_index != 0) {
        constants.constant_namespace[constants.constant_multiname[instance_info[i].name_index].namespace_index].name_index=deobfuscateNameSpace(stringUsageTypes,stringUsages,namesMap,constants.constant_namespace[constants.constant_multiname[instance_info[i].name_index].namespace_index].name_index,renameType);
      }
    }
    if (instance_info[i].super_index != 0) {
      constants.constant_multiname[instance_info[i].super_index].name_index=deobfuscateName(stringUsageTypes,stringUsages,namespaceUsages,namesMap,constants.constant_multiname[instance_info[i].super_index].name_index,true,renameType);
    }
  }
  for (int i=1; i < constants.constant_multiname.length; i++) {
    informListeners(""String_Node_Str"",""String_Node_Str"" + i + ""String_Node_Str""+ constants.constant_multiname.length);
    constants.constant_multiname[i].name_index=deobfuscateName(stringUsageTypes,stringUsages,namespaceUsages,namesMap,constants.constant_multiname[i].name_index,false,renameType);
  }
  for (int i=1; i < constants.constant_namespace.length; i++) {
    informListeners(""String_Node_Str"",""String_Node_Str"" + i + ""String_Node_Str""+ constants.constant_namespace.length);
    constants.constant_namespace[i].name_index=deobfuscateNameSpace(stringUsageTypes,stringUsages,namesMap,constants.constant_namespace[i].name_index,renameType);
  }
}",0.8545688545688546
62133,"public void init(){
  heads=makeGraph(code,new ArrayList<GraphPart>(),alternateEntries);
  int time=1;
  List<GraphPart> ordered=new ArrayList<>();
  List<GraphPart> visited=new ArrayList<>();
  for (  GraphPart head : heads) {
    time=head.setTime(time,ordered,visited);
    fixGraph(head);
    makeMulti(head,new ArrayList<GraphPart>());
  }
}","public void init(){
  if (heads != null) {
    return;
  }
  heads=makeGraph(code,new ArrayList<GraphPart>(),alternateEntries);
  int time=1;
  List<GraphPart> ordered=new ArrayList<>();
  List<GraphPart> visited=new ArrayList<>();
  for (  GraphPart head : heads) {
    time=head.setTime(time,ordered,visited);
    fixGraph(head);
    makeMulti(head,new ArrayList<GraphPart>());
  }
}",0.9466484268125857
62134,"@Override public String toString(){
  if (end < start) {
    return ""String_Node_Str"" + (start + 1) + ""String_Node_Str""+ (end + 1);
  }
  return ""String_Node_Str"" + (start + 1) + ""String_Node_Str""+ (end + 1)+ (instanceCount > 1 ? ""String_Node_Str"" + instanceCount + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ path;
}","@Override public String toString(){
  if (end < start) {
    return ""String_Node_Str"" + (start + 1) + ""String_Node_Str""+ (end + 1);
  }
  return ""String_Node_Str"" + (start + 1) + ""String_Node_Str""+ (end + 1)+ (instanceCount > 1 ? ""String_Node_Str"" + instanceCount + ""String_Node_Str"" : ""String_Node_Str"");
}",0.9608763693270737
62135,"public GraphPanel(Graph graph){
  size=getPartPositions(head=graph.heads.get(0),SPACE_VERTICAL + SPACE_VERTICAL + BLOCK_HEIGHT / 2,getPartWidth(graph.heads.get(0),new HashSet<GraphPart>()) * (BLOCK_WIDTH + SPACE_HORIZONTAL) / 2 - SPACE_HORIZONTAL,partPos,true);
  backLinksLeft=1;
  backLinksRight=1;
  for (  GraphPart part : partPos.keySet()) {
    Point p=partPos.get(part);
    for (    GraphPart n : part.nextParts) {
      Point npos=partPos.get(n);
      if (npos.y < p.y) {
        if (p.x > size.x / 2) {
          backLinksRight++;
        }
 else {
          backLinksLeft++;
        }
      }
    }
  }
  size.x+=2 * SPACE_BACKLINKS + backLinksLeft * SPACE_BACKLINKS + backLinksRight * SPACE_BACKLINKS;
  setPreferredSize(new Dimension(size.x,size.y));
}","public GraphPanel(Graph graph){
  graph.init();
  size=getPartPositions(head=graph.heads.get(0),SPACE_VERTICAL + SPACE_VERTICAL + BLOCK_HEIGHT / 2,getPartWidth(graph.heads.get(0),new HashSet<GraphPart>()) * (BLOCK_WIDTH + SPACE_HORIZONTAL) / 2 - SPACE_HORIZONTAL,partPos,true);
  backLinksLeft=1;
  backLinksRight=1;
  for (  GraphPart part : partPos.keySet()) {
    Point p=partPos.get(part);
    for (    GraphPart n : part.nextParts) {
      Point npos=partPos.get(n);
      if (npos.y < p.y) {
        if (p.x > size.x / 2) {
          backLinksRight++;
        }
 else {
          backLinksLeft++;
        }
      }
    }
  }
  size.x+=2 * SPACE_BACKLINKS + backLinksLeft * SPACE_BACKLINKS + backLinksRight * SPACE_BACKLINKS;
  setPreferredSize(new Dimension(size.x,size.y));
}",0.9896640826873384
62136,"private void drawArrow(Graphics g,int x1,int y1,int x2,int y2){
  Polygon arrowHead=new Polygon();
  arrowHead.addPoint(0,0);
  arrowHead.addPoint(-3,-8);
  arrowHead.addPoint(3,-8);
  Line2D.Double line=new Line2D.Double(x1,y1,x2,y2);
  AffineTransform tx=new AffineTransform();
  tx.setToIdentity();
  double angle=Math.atan2(line.y2 - line.y1,line.x2 - line.x1);
  tx.translate(line.x2,line.y2);
  tx.rotate((angle - Math.PI / 2d));
  Graphics2D g2d=(Graphics2D)g;
  g2d.draw(line);
  Graphics2D g2=(Graphics2D)g2d.create();
  g2.setTransform(tx);
  g2.fill(arrowHead);
  g2.dispose();
}","private void drawArrow(Graphics g,int x1,int y1,int x2,int y2){
  Polygon arrowHead=new Polygon();
  arrowHead.addPoint(0,0);
  arrowHead.addPoint(-3,-8);
  arrowHead.addPoint(3,-8);
  Line2D.Double line=new Line2D.Double(x1,y1,x2,y2);
  AffineTransform tx=new AffineTransform();
  tx.setToIdentity();
  double angle=Math.atan2(line.y2 - line.y1,line.x2 - line.x1);
  tx.translate(line.x2,line.y2);
  tx.rotate((angle - Math.PI / 2d));
  Graphics2D g2d=(Graphics2D)g;
  AffineTransform oldTransform=g2d.getTransform();
  g2d.draw(line);
  tx.preConcatenate(oldTransform);
  g2d.setTransform(tx);
  g2d.fill(arrowHead);
  g2d.setTransform(oldTransform);
}",0.8006430868167203
62137,"@Override protected List<GraphPart> checkPrecoNextParts(GraphPart part){
  List<GraphSourceItem> items=getPartItems(part);
  part=makeMultiPart(part);
  if (!items.isEmpty()) {
    if (items.get(items.size() - 1) instanceof ActionIf) {
      if (items.get(items.size() - 2) instanceof ActionStrictEquals) {
        List<Integer> storeRegisters=new ArrayList<>();
        for (        GraphSourceItem s : items) {
          if (s instanceof ActionStoreRegister) {
            ActionStoreRegister sr=(ActionStoreRegister)s;
            storeRegisters.add(sr.registerNumber);
          }
        }
        if (!storeRegisters.isEmpty()) {
          List<GraphPart> caseBodies=new ArrayList<>();
          boolean proceed=false;
          do {
            proceed=false;
            caseBodies.add(part.nextParts.get(0));
            part=part.nextParts.get(1);
            items=getPartItems(part);
            part=makeMultiPart(part);
            if (!items.isEmpty()) {
              if (items.get(0) instanceof ActionPush) {
                ActionPush pu=(ActionPush)items.get(0);
                if (!pu.values.isEmpty()) {
                  if (pu.values.get(0) instanceof RegisterNumber) {
                    RegisterNumber rn=(RegisterNumber)pu.values.get(0);
                    if (storeRegisters.contains(rn.number)) {
                      storeRegisters.clear();
                      storeRegisters.add(rn.number);
                      if (items.get(items.size() - 1) instanceof ActionIf) {
                        if (items.size() > 1) {
                          if (items.get(items.size() - 2) instanceof ActionStrictEquals) {
                            proceed=true;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
 while (proceed);
          if (caseBodies.size() > 1) {
            caseBodies.add(part);
            return caseBodies;
          }
        }
      }
    }
  }
  return null;
}","@Override protected List<GraphPart> checkPrecoNextParts(GraphPart part){
  List<GraphSourceItem> items=getPartItems(part);
  part=makeMultiPart(part);
  if (items.size() > 1) {
    if (items.get(items.size() - 1) instanceof ActionIf) {
      if (items.get(items.size() - 2) instanceof ActionStrictEquals) {
        List<Integer> storeRegisters=new ArrayList<>();
        for (        GraphSourceItem s : items) {
          if (s instanceof ActionStoreRegister) {
            ActionStoreRegister sr=(ActionStoreRegister)s;
            storeRegisters.add(sr.registerNumber);
          }
        }
        if (!storeRegisters.isEmpty()) {
          List<GraphPart> caseBodies=new ArrayList<>();
          boolean proceed=false;
          do {
            proceed=false;
            caseBodies.add(part.nextParts.get(0));
            part=part.nextParts.get(1);
            items=getPartItems(part);
            part=makeMultiPart(part);
            if (!items.isEmpty()) {
              if (items.get(0) instanceof ActionPush) {
                ActionPush pu=(ActionPush)items.get(0);
                if (!pu.values.isEmpty()) {
                  if (pu.values.get(0) instanceof RegisterNumber) {
                    RegisterNumber rn=(RegisterNumber)pu.values.get(0);
                    if (storeRegisters.contains(rn.number)) {
                      storeRegisters.clear();
                      storeRegisters.add(rn.number);
                      if (items.get(items.size() - 1) instanceof ActionIf) {
                        if (items.size() > 1) {
                          if (items.get(items.size() - 2) instanceof ActionStrictEquals) {
                            proceed=true;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
 while (proceed);
          if (caseBodies.size() > 1) {
            caseBodies.add(part);
            return caseBodies;
          }
        }
      }
    }
  }
  return null;
}",0.992168379833578
62138,"protected GraphPart makeMultiPart(GraphPart part){
  List<GraphPart> parts=new ArrayList<>();
  do {
    parts.add(part);
    if (part.nextParts.size() == 1 && part.nextParts.get(0).refs.size() == 1) {
      part=part.nextParts.get(0);
    }
 else {
      part=null;
    }
  }
 while (part != null);
  if (parts.size() > 1) {
    return new GraphPartMulti(parts);
  }
 else {
    return parts.get(0);
  }
}","protected GraphPart makeMultiPart(GraphPart part){
  List<GraphPart> parts=new ArrayList<>();
  do {
    parts.add(part);
    if (part.nextParts.size() == 1 && part.nextParts.get(0).refs.size() == 1) {
      part=part.nextParts.get(0);
    }
 else {
      part=null;
    }
  }
 while (part != null);
  if (parts.size() > 1) {
    GraphPartMulti ret=new GraphPartMulti(parts);
    ret.refs.addAll(parts.get(0).refs);
    ret.nextParts.addAll(parts.get(parts.size() - 1).nextParts);
    return ret;
  }
 else {
    return parts.get(0);
  }
}",0.8444444444444444
62139,"/** 
 * Constructor
 * @param data Data bytes
 * @param version SWF version
 * @throws IOException
 */
public DefineText2Tag(byte data[],int version,long pos) throws IOException {
  super(33,""String_Node_Str"",data,pos);
  SWFInputStream sis=new SWFInputStream(new ByteArrayInputStream(data),version);
  characterID=sis.readUI16();
  textBounds=sis.readRECT();
  textMatrix=sis.readMatrix();
  glyphBits=sis.readUI8();
  advanceBits=sis.readUI8();
  textRecords=new ArrayList<>();
  TEXTRECORD tr;
  while ((tr=sis.readTEXTRECORD(true,glyphBits,advanceBits)) != null) {
    textRecords.add(tr);
  }
}","/** 
 * Constructor
 * @param data Data bytes
 * @param version SWF version
 * @param pos
 * @throws IOException
 */
public DefineText2Tag(byte data[],int version,long pos) throws IOException {
  super(33,""String_Node_Str"",data,pos);
  SWFInputStream sis=new SWFInputStream(new ByteArrayInputStream(data),version);
  characterID=sis.readUI16();
  textBounds=sis.readRECT();
  textMatrix=sis.readMatrix();
  glyphBits=sis.readUI8();
  advanceBits=sis.readUI8();
  textRecords=new ArrayList<>();
  TEXTRECORD tr;
  while ((tr=sis.readTEXTRECORD(true,glyphBits,advanceBits)) != null) {
    textRecords.add(tr);
  }
}",0.9884488448844884
62140,"@Override public BufferedImage toImage(int frame,List<Tag> tags,RECT displayRect,HashMap<Integer,CharacterTag> characters){
  RECT bound=getBounds();
  BufferedImage ret=new BufferedImage(bound.Xmax / 20,bound.Ymax / 20,BufferedImage.TYPE_INT_ARGB);
  Color textColor=new Color(0,0,0);
  FontTag font=null;
  int textHeight=12;
  int x=bound.Xmin;
  int y=0;
  Graphics2D g=(Graphics2D)ret.getGraphics();
  g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
  g.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  SHAPE glyphs[]=new SHAPE[0];
  for (  TEXTRECORD rec : textRecords) {
    if (rec.styleFlagsHasColor) {
      textColor=rec.textColorA.toColor();
    }
    if (rec.styleFlagsHasFont) {
      font=(FontTag)characters.get(rec.fontId);
      glyphs=font.getGlyphShapeTable();
      textHeight=rec.textHeight;
    }
    if (rec.styleFlagsHasXOffset) {
      x=rec.xOffset * 1000 / textHeight;
    }
    if (rec.styleFlagsHasYOffset) {
      y=rec.yOffset * 1000 / textHeight;
    }
    for (    GLYPHENTRY entry : rec.glyphEntries) {
      RECT rect=SHAPERECORD.getBounds(glyphs[entry.glyphIndex].shapeRecords);
      rect.Xmax/=font.getDivider();
      rect.Xmin/=font.getDivider();
      rect.Ymax/=font.getDivider();
      rect.Ymin/=font.getDivider();
      BufferedImage img=SHAPERECORD.shapeToImage(tags,4,null,null,glyphs[entry.glyphIndex].shapeRecords,textColor);
      g.setTransform(AffineTransform.getScaleInstance(textHeight / 1000f / 20,textHeight / 1000f / 20));
      g.drawImage(img,x,y + rect.Ymin,null);
      x+=entry.glyphAdvance * 1000 / textHeight;
    }
  }
  return ret;
}","@Override public BufferedImage toImage(int frame,List<Tag> tags,RECT displayRect,HashMap<Integer,CharacterTag> characters){
  RECT bound=getBounds();
  BufferedImage ret=new BufferedImage(bound.Xmax / 20,bound.Ymax / 20,BufferedImage.TYPE_INT_ARGB);
  Color textColor=new Color(0,0,0);
  FontTag font=null;
  int textHeight=12;
  int x=bound.Xmin;
  int y=0;
  Graphics2D g=(Graphics2D)ret.getGraphics();
  g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
  g.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  SHAPE glyphs[]=new SHAPE[0];
  for (  TEXTRECORD rec : textRecords) {
    if (rec.styleFlagsHasColor) {
      textColor=rec.textColorA.toColor();
    }
    if (rec.styleFlagsHasFont) {
      font=(FontTag)characters.get(rec.fontId);
      glyphs=font.getGlyphShapeTable();
      textHeight=rec.textHeight;
    }
    if (rec.styleFlagsHasXOffset) {
      x=rec.xOffset * 1000 / textHeight;
    }
    if (rec.styleFlagsHasYOffset) {
      y=rec.yOffset * 1000 / textHeight;
    }
    for (    GLYPHENTRY entry : rec.glyphEntries) {
      RECT rect=SHAPERECORD.getBounds(glyphs[entry.glyphIndex].shapeRecords);
      rect.Xmax/=font.getDivider();
      rect.Xmin/=font.getDivider();
      rect.Ymax/=font.getDivider();
      rect.Ymin/=font.getDivider();
      BufferedImage img=SHAPERECORD.shapeToImage(tags,4,null,null,glyphs[entry.glyphIndex].shapeRecords,textColor);
      AffineTransform tr=new AffineTransform();
      tr.setToIdentity();
      float rat=textHeight / 1000f;
      tr.translate(rat * x / 20,rat * (y + rect.Ymin) / 20);
      tr.scale(rat / font.getDivider(),rat / font.getDivider());
      g.drawImage(img,tr,null);
      x+=entry.glyphAdvance * 1000 / textHeight;
    }
  }
  return ret;
}",0.8686648501362397
62141,"/** 
 * Constructor
 * @param data Data bytes
 * @param version SWF version
 * @throws IOException
 */
public DefineTextTag(byte data[],int version,long pos) throws IOException {
  super(11,""String_Node_Str"",data,pos);
  SWFInputStream sis=new SWFInputStream(new ByteArrayInputStream(data),version);
  characterID=sis.readUI16();
  textBounds=sis.readRECT();
  textMatrix=sis.readMatrix();
  glyphBits=sis.readUI8();
  advanceBits=sis.readUI8();
  textRecords=new ArrayList<>();
  TEXTRECORD tr;
  while ((tr=sis.readTEXTRECORD(false,glyphBits,advanceBits)) != null) {
    textRecords.add(tr);
  }
}","/** 
 * Constructor
 * @param data Data bytes
 * @param version SWF version
 * @param pos
 * @throws IOException
 */
public DefineTextTag(byte data[],int version,long pos) throws IOException {
  super(11,""String_Node_Str"",data,pos);
  SWFInputStream sis=new SWFInputStream(new ByteArrayInputStream(data),version);
  characterID=sis.readUI16();
  textBounds=sis.readRECT();
  textMatrix=sis.readMatrix();
  glyphBits=sis.readUI8();
  advanceBits=sis.readUI8();
  textRecords=new ArrayList<>();
  TEXTRECORD tr;
  while ((tr=sis.readTEXTRECORD(false,glyphBits,advanceBits)) != null) {
    textRecords.add(tr);
  }
}",0.9884488448844884
62142,"@Override public BufferedImage toImage(int frame,List<Tag> tags,RECT displayRect,HashMap<Integer,CharacterTag> characters){
  RECT bound=getBounds();
  BufferedImage ret=new BufferedImage(bound.Xmax / 20,bound.Ymax / 20,BufferedImage.TYPE_INT_ARGB);
  Color textColor=new Color(0,0,0);
  FontTag font=null;
  int textHeight=12;
  int x=bound.Xmin;
  int y=0;
  Graphics2D g=(Graphics2D)ret.getGraphics();
  g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
  g.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  SHAPE glyphs[]=new SHAPE[0];
  for (  TEXTRECORD rec : textRecords) {
    if (rec.styleFlagsHasColor) {
      textColor=rec.textColor.toColor();
    }
    if (rec.styleFlagsHasFont) {
      font=(FontTag)characters.get(rec.fontId);
      glyphs=font.getGlyphShapeTable();
      textHeight=rec.textHeight;
    }
    if (rec.styleFlagsHasXOffset) {
      x=rec.xOffset * 1000 / textHeight;
    }
    if (rec.styleFlagsHasYOffset) {
      y=rec.yOffset * 1000 / textHeight;
    }
    for (    GLYPHENTRY entry : rec.glyphEntries) {
      RECT rect=SHAPERECORD.getBounds(glyphs[entry.glyphIndex].shapeRecords);
      rect.Xmax/=font.getDivider();
      rect.Xmin/=font.getDivider();
      rect.Ymax/=font.getDivider();
      rect.Ymin/=font.getDivider();
      BufferedImage img=SHAPERECORD.shapeToImage(tags,1,null,null,glyphs[entry.glyphIndex].shapeRecords,textColor);
      g.setTransform(AffineTransform.getScaleInstance(textHeight / 1000f / 20,textHeight / 1000f / 20));
      g.drawImage(img,x,y + rect.Ymin,null);
      x+=entry.glyphAdvance * 1000 / textHeight;
    }
  }
  return ret;
}","@Override public BufferedImage toImage(int frame,List<Tag> tags,RECT displayRect,HashMap<Integer,CharacterTag> characters){
  RECT bound=getBounds();
  BufferedImage ret=new BufferedImage(bound.Xmax / 20,bound.Ymax / 20,BufferedImage.TYPE_INT_ARGB);
  Color textColor=new Color(0,0,0);
  FontTag font=null;
  int textHeight=12;
  int x=bound.Xmin;
  int y=0;
  Graphics2D g=(Graphics2D)ret.getGraphics();
  g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
  g.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  SHAPE glyphs[]=new SHAPE[0];
  for (  TEXTRECORD rec : textRecords) {
    if (rec.styleFlagsHasColor) {
      textColor=rec.textColor.toColor();
    }
    if (rec.styleFlagsHasFont) {
      font=(FontTag)characters.get(rec.fontId);
      glyphs=font.getGlyphShapeTable();
      textHeight=rec.textHeight;
    }
    if (rec.styleFlagsHasXOffset) {
      x=rec.xOffset * 1000 / textHeight;
    }
    if (rec.styleFlagsHasYOffset) {
      y=rec.yOffset * 1000 / textHeight;
    }
    for (    GLYPHENTRY entry : rec.glyphEntries) {
      RECT rect=SHAPERECORD.getBounds(glyphs[entry.glyphIndex].shapeRecords);
      rect.Xmax/=font.getDivider();
      rect.Xmin/=font.getDivider();
      rect.Ymax/=font.getDivider();
      rect.Ymin/=font.getDivider();
      BufferedImage img=SHAPERECORD.shapeToImage(tags,1,null,null,glyphs[entry.glyphIndex].shapeRecords,textColor);
      AffineTransform tr=new AffineTransform();
      tr.setToIdentity();
      float rat=textHeight / 1000f;
      tr.translate(rat * x / 20,rat * (y + rect.Ymin) / 20);
      tr.scale(rat / font.getDivider(),rat / font.getDivider());
      g.drawImage(img,tr,null);
      x+=entry.glyphAdvance * 1000 / textHeight;
    }
  }
  return ret;
}",0.8685932388222465
62143,"private String fooString(String orig,boolean firstUppercase,int rndSize){
  boolean exists;
  String ret;
  loopfoo:   do {
    exists=false;
    int len=3 + rnd.nextInt(rndSize - 3);
    ret=""String_Node_Str"";
    for (int i=0; i < len; i++) {
      String c=""String_Node_Str"";
      if ((i % 2) == 0) {
        c=""String_Node_Str"" + fooCharacters.charAt(rnd.nextInt(fooCharacters.length()));
      }
 else {
        c=""String_Node_Str"" + fooJoinCharacters.charAt(rnd.nextInt(fooJoinCharacters.length()));
      }
      if (i == 0 && firstUppercase) {
        c=c.toUpperCase(Locale.ENGLISH);
      }
      ret+=c;
    }
    if (allVariableNamesStr.contains(ret)) {
      exists=true;
      rndSize=rndSize + 1;
      continue loopfoo;
    }
    if (isReserved(ret)) {
      exists=true;
      rndSize=rndSize + 1;
      continue;
    }
    if (deobfuscated.containsValue(ret)) {
      exists=true;
      rndSize=rndSize + 1;
      continue;
    }
  }
 while (exists);
  deobfuscated.put(orig,ret);
  return ret;
}","private String fooString(String orig,boolean firstUppercase,int rndSize){
  boolean exists;
  String ret;
  loopfoo:   do {
    exists=false;
    int len=3 + rnd.nextInt(rndSize - 3);
    ret=""String_Node_Str"";
    for (int i=0; i < len; i++) {
      String c=""String_Node_Str"";
      if ((i % 2) == 0) {
        c=""String_Node_Str"" + fooCharacters.charAt(rnd.nextInt(fooCharacters.length()));
      }
 else {
        c=""String_Node_Str"" + fooJoinCharacters.charAt(rnd.nextInt(fooJoinCharacters.length()));
      }
      if (i == 0 && firstUppercase) {
        c=c.toUpperCase(Locale.ENGLISH);
      }
      ret+=c;
    }
    if (allVariableNamesStr.contains(ret)) {
      exists=true;
      rndSize=rndSize + 1;
      continue loopfoo;
    }
    if (isReserved(ret)) {
      exists=true;
      rndSize=rndSize + 1;
      continue;
    }
    if (deobfuscated.containsValue(ret)) {
      exists=true;
      rndSize=rndSize + 1;
      continue;
    }
  }
 while (exists);
  return ret;
}",0.982
62144,"public String deobfuscateName(HashMap<String,String> namesMap,String s,boolean firstUppercase,String usageType,RenameType renameType,Map<String,String> selected){
  boolean isValid=true;
  if (selected != null) {
    if (selected.containsKey(s)) {
      return selected.get(s);
    }
  }
  if (isReserved(s)) {
    isValid=false;
  }
  if (isValid) {
    for (int i=0; i < s.length(); i++) {
      if (s.charAt(i) > 127) {
        isValid=false;
        break;
      }
    }
  }
  if (isValid) {
    Pattern pat=Pattern.compile(""String_Node_Str"" + Pattern.quote(validFirstCharacters) + ""String_Node_Str""+ ""String_Node_Str""+ Pattern.quote(validFirstCharacters + validNextCharacters)+ ""String_Node_Str"");
    if (!pat.matcher(s).matches()) {
      isValid=false;
    }
  }
  if (!isValid) {
    if (namesMap.containsKey(s)) {
      return namesMap.get(s);
    }
 else {
      Integer cnt=typeCounts.get(usageType);
      if (cnt == null) {
        cnt=0;
      }
      String ret=null;
      if (renameType == RenameType.TYPENUMBER) {
        boolean found;
        do {
          found=false;
          cnt++;
          ret=usageType + ""String_Node_Str"" + cnt;
          found=allVariableNamesStr.contains(ret);
        }
 while (found);
        typeCounts.put(usageType,cnt);
      }
 else       if (renameType == RenameType.RANDOMWORD) {
        ret=fooString(s,firstUppercase,DEFAULT_FOO_SIZE);
      }
      return ret;
    }
  }
  return null;
}","public String deobfuscateName(String s,boolean firstUppercase,String usageType,RenameType renameType,Map<String,String> selected){
  boolean isValid=true;
  if (usageType == null) {
    usageType=""String_Node_Str"";
  }
  if (selected != null) {
    if (selected.containsKey(s)) {
      return selected.get(s);
    }
  }
  if (isReserved(s)) {
    isValid=false;
  }
  if (isValid) {
    for (int i=0; i < s.length(); i++) {
      if (s.charAt(i) > 127) {
        isValid=false;
        break;
      }
    }
  }
  if (isValid) {
    Pattern pat=Pattern.compile(""String_Node_Str"" + Pattern.quote(validFirstCharacters) + ""String_Node_Str""+ ""String_Node_Str""+ Pattern.quote(validFirstCharacters + validNextCharacters)+ ""String_Node_Str"");
    if (!pat.matcher(s).matches()) {
      isValid=false;
    }
  }
  if (!isValid) {
    if (deobfuscated.containsKey(s)) {
      return deobfuscated.get(s);
    }
 else {
      Integer cnt=typeCounts.get(usageType);
      if (cnt == null) {
        cnt=0;
      }
      String ret=null;
      if (renameType == RenameType.TYPENUMBER) {
        boolean found;
        do {
          found=false;
          cnt++;
          ret=usageType + ""String_Node_Str"" + cnt;
          found=allVariableNamesStr.contains(ret);
        }
 while (found);
        typeCounts.put(usageType,cnt);
      }
 else       if (renameType == RenameType.RANDOMWORD) {
        ret=fooString(s,firstUppercase,DEFAULT_FOO_SIZE);
      }
      deobfuscated.put(s,ret);
      return ret;
    }
  }
  return null;
}",0.9181542606938364
62145,"/** 
 * Construct SWF from stream
 * @param is Stream to read SWF from
 * @throws IOException
 */
public SWF(InputStream is,PercentListener listener,boolean paralelRead) throws IOException {
  byte hdr[]=new byte[3];
  is.read(hdr);
  String shdr=new String(hdr,""String_Node_Str"");
  if ((!shdr.equals(""String_Node_Str"")) && (!shdr.equals(""String_Node_Str"")) && (!shdr.equals(""String_Node_Str""))) {
    throw new IOException(""String_Node_Str"");
  }
  version=is.read();
  SWFInputStream sis=new SWFInputStream(is,version,4);
  fileSize=sis.readUI32();
  if (hdr[0] == 'C') {
    sis=new SWFInputStream(new InflaterInputStream(is),version,8);
    compressed=true;
  }
  if (hdr[0] == 'Z') {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    sis.readUI32();
    int propertiesSize=5;
    lzmaProperties=new byte[propertiesSize];
    if (sis.read(lzmaProperties,0,propertiesSize) != propertiesSize) {
      throw new IOException(""String_Node_Str"");
    }
    SevenZip.Compression.LZMA.Decoder decoder=new SevenZip.Compression.LZMA.Decoder();
    if (!decoder.SetDecoderProperties(lzmaProperties)) {
      throw new IOException(""String_Node_Str"");
    }
    if (!decoder.Code(sis,baos,fileSize - 8)) {
      throw new IOException(""String_Node_Str"");
    }
    sis=new SWFInputStream(new ByteArrayInputStream(baos.toByteArray()),version,8);
    compressed=true;
    lzma=true;
  }
  if (listener != null) {
    sis.addPercentListener(listener);
  }
  sis.setPercentMax(fileSize);
  displayRect=sis.readRECT();
  sis.readUI8();
  frameRate=sis.readUI8();
  frameCount=sis.readUI16();
  tags=sis.readTagList(0,paralelRead);
  assignExportNamesToSymbols();
  assignClassesToSymbols();
  for (  Tag t : tags) {
    if (t instanceof FileAttributesTag) {
      fileAttributes=(FileAttributesTag)t;
      break;
    }
  }
}","/** 
 * Construct SWF from stream
 * @param is Stream to read SWF from
 * @param listener 
 * @param paralelRead Use parallel threads?
 * @throws IOException
 */
public SWF(InputStream is,PercentListener listener,boolean paralelRead) throws IOException {
  byte hdr[]=new byte[3];
  is.read(hdr);
  String shdr=new String(hdr,""String_Node_Str"");
  if ((!shdr.equals(""String_Node_Str"")) && (!shdr.equals(""String_Node_Str"")) && (!shdr.equals(""String_Node_Str""))) {
    throw new IOException(""String_Node_Str"");
  }
  version=is.read();
  SWFInputStream sis=new SWFInputStream(is,version,4);
  fileSize=sis.readUI32();
  if (hdr[0] == 'C') {
    sis=new SWFInputStream(new InflaterInputStream(is),version,8);
    compressed=true;
  }
  if (hdr[0] == 'Z') {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    sis.readUI32();
    int propertiesSize=5;
    lzmaProperties=new byte[propertiesSize];
    if (sis.read(lzmaProperties,0,propertiesSize) != propertiesSize) {
      throw new IOException(""String_Node_Str"");
    }
    SevenZip.Compression.LZMA.Decoder decoder=new SevenZip.Compression.LZMA.Decoder();
    if (!decoder.SetDecoderProperties(lzmaProperties)) {
      throw new IOException(""String_Node_Str"");
    }
    if (!decoder.Code(sis,baos,fileSize - 8)) {
      throw new IOException(""String_Node_Str"");
    }
    sis=new SWFInputStream(new ByteArrayInputStream(baos.toByteArray()),version,8);
    compressed=true;
    lzma=true;
  }
  if (listener != null) {
    sis.addPercentListener(listener);
  }
  sis.setPercentMax(fileSize);
  displayRect=sis.readRECT();
  sis.readUI8();
  frameRate=sis.readUI8();
  frameCount=sis.readUI16();
  tags=sis.readTagList(0,paralelRead);
  assignExportNamesToSymbols();
  assignClassesToSymbols();
  for (  Tag t : tags) {
    if (t instanceof FileAttributesTag) {
      fileAttributes=(FileAttributesTag)t;
      break;
    }
  }
}",0.9827679052234788
62146,"/** 
 * Compress SWF file
 * @param fis Input stream
 * @param fos Output stream
 */
public static boolean fws2cws(InputStream fis,OutputStream fos){
  try {
    byte swfHead[]=new byte[8];
    fis.read(swfHead);
    if (swfHead[0] != 'F') {
      fis.close();
      return false;
    }
    swfHead[0]='C';
    fos.write(swfHead);
    fos=new DeflaterOutputStream(fos);
    int i;
    while ((i=fis.read()) != -1) {
      fos.write(i);
    }
    fis.close();
    fos.close();
  }
 catch (  FileNotFoundException ex) {
    return false;
  }
catch (  IOException ex) {
    return false;
  }
  return true;
}","/** 
 * Compress SWF file
 * @param fis Input stream
 * @param fos Output stream
 * @return True on success 
 */
public static boolean fws2cws(InputStream fis,OutputStream fos){
  try {
    byte swfHead[]=new byte[8];
    fis.read(swfHead);
    if (swfHead[0] != 'F') {
      fis.close();
      return false;
    }
    swfHead[0]='C';
    fos.write(swfHead);
    fos=new DeflaterOutputStream(fos);
    int i;
    while ((i=fis.read()) != -1) {
      fos.write(i);
    }
    fis.close();
    fos.close();
  }
 catch (  FileNotFoundException ex) {
    return false;
  }
catch (  IOException ex) {
    return false;
  }
  return true;
}",0.9773828756058158
62147,"private int renameAS2Identifiers(RenameType renameType,Map<String,String> selected){
  actionsMap=new HashMap<>();
  allFunctions=new ArrayList<>();
  allVariableNames=new HashMap<>();
  allStrings=new HashMap<>();
  List<Object> objs=new ArrayList<>();
  int ret=0;
  objs.addAll(tags);
  getVariables(objs,""String_Node_Str"");
  informListeners(""String_Node_Str"",""String_Node_Str"");
  int fc=0;
  for (  DirectValueTreeItem ti : allVariableNames.keySet()) {
    String name=ti.toStringNoH(allVariableNames.get(ti));
    allVariableNamesStr.add(name);
  }
  informListeners(""String_Node_Str"",""String_Node_Str"");
  int classCount=0;
  for (  Tag t : tags) {
    if (t instanceof DoInitActionTag) {
      classCount++;
    }
  }
  int cnt=0;
  for (  Tag t : tags) {
    if (t instanceof DoInitActionTag) {
      cnt++;
      informListeners(""String_Node_Str"",""String_Node_Str"" + cnt + ""String_Node_Str""+ classCount);
      DoInitActionTag dia=(DoInitActionTag)t;
      String exportName=dia.getExportName();
      final String pkgPrefix=""String_Node_Str"";
      String classNameParts[]=null;
      if ((exportName != null) && exportName.startsWith(pkgPrefix)) {
        String className=exportName.substring(pkgPrefix.length());
        if (className.contains(""String_Node_Str"")) {
          classNameParts=className.split(""String_Node_Str"");
        }
 else {
          classNameParts=new String[]{className};
        }
      }
      List<GraphTargetItem> dec=Action.actionsToTree(dia.getActions(version),version);
      GraphTargetItem name=null;
      for (      GraphTargetItem it : dec) {
        if (it instanceof ClassTreeItem) {
          ClassTreeItem cti=(ClassTreeItem)it;
          List<GraphTargetItem> methods=new ArrayList<>();
          methods.addAll(cti.functions);
          methods.addAll(cti.staticFunctions);
          for (          GraphTargetItem gti : methods) {
            if (gti instanceof FunctionTreeItem) {
              FunctionTreeItem fun=(FunctionTreeItem)gti;
              if (fun.calculatedFunctionName instanceof DirectValueTreeItem) {
                DirectValueTreeItem dvf=(DirectValueTreeItem)fun.calculatedFunctionName;
                String fname=dvf.toStringNoH(null);
                String changed=deobfuscateName(deobfuscated,fname,false,""String_Node_Str"",renameType,selected);
                if (changed != null) {
                  deobfuscated.put(fname,changed);
                }
              }
            }
          }
          List<GraphTargetItem> vars=new ArrayList<>();
          vars.addAll(cti.vars.keySet());
          vars.addAll(cti.staticVars.keySet());
          for (          GraphTargetItem gti : vars) {
            if (gti instanceof DirectValueTreeItem) {
              DirectValueTreeItem dvf=(DirectValueTreeItem)gti;
              String vname=dvf.toStringNoH(null);
              String changed=deobfuscateName(deobfuscated,vname,false,""String_Node_Str"",renameType,selected);
              if (changed != null) {
                deobfuscated.put(vname,changed);
              }
            }
          }
          name=cti.className;
          break;
        }
        if (it instanceof InterfaceTreeItem) {
          InterfaceTreeItem ift=(InterfaceTreeItem)it;
          name=ift.name;
        }
      }
      if (name != null) {
        int pos=0;
        while (name instanceof GetMemberTreeItem) {
          GetMemberTreeItem mem=(GetMemberTreeItem)name;
          GraphTargetItem memberName=mem.memberName;
          if (memberName instanceof DirectValueTreeItem) {
            DirectValueTreeItem dvt=(DirectValueTreeItem)memberName;
            String nameStr=dvt.toStringNoH(null);
            if (classNameParts != null) {
              if (classNameParts.length - 1 - pos < 0) {
                break;
              }
            }
            String changedNameStr=nameStr;
            if (classNameParts != null) {
              changedNameStr=classNameParts[classNameParts.length - 1 - pos];
            }
            String changedNameStr2=deobfuscateName(deobfuscated,changedNameStr,pos == 0,pos == 0 ? ""String_Node_Str"" : ""String_Node_Str"",renameType,selected);
            if (changedNameStr2 != null) {
              changedNameStr=changedNameStr2;
            }
            deobfuscated.put(nameStr,changedNameStr);
            pos++;
          }
          name=mem.object;
        }
        if (name instanceof GetVariableTreeItem) {
          GetVariableTreeItem var=(GetVariableTreeItem)name;
          if (var.name instanceof DirectValueTreeItem) {
            DirectValueTreeItem dvt=(DirectValueTreeItem)var.name;
            String nameStr=dvt.toStringNoH(null);
            if (classNameParts != null) {
              if (classNameParts.length - 1 - pos < 0) {
                break;
              }
            }
            String changedNameStr=nameStr;
            if (classNameParts != null) {
              changedNameStr=classNameParts[classNameParts.length - 1 - pos];
            }
            String changedNameStr2=deobfuscateName(deobfuscated,changedNameStr,pos == 0,pos == 0 ? ""String_Node_Str"" : ""String_Node_Str"",renameType,selected);
            if (changedNameStr2 != null) {
              changedNameStr=changedNameStr2;
            }
            deobfuscated.put(nameStr,changedNameStr);
            pos++;
          }
        }
      }
    }
  }
  for (  GraphSourceItem fun : allFunctions) {
    fc++;
    informListeners(""String_Node_Str"",""String_Node_Str"" + fc + ""String_Node_Str""+ allFunctions.size());
    if (fun instanceof ActionDefineFunction) {
      ActionDefineFunction f=(ActionDefineFunction)fun;
      String changed=deobfuscateName(deobfuscated,f.functionName,false,""String_Node_Str"",renameType,selected);
      if (changed != null) {
        f.replacedFunctionName=changed;
      }
    }
    if (fun instanceof ActionDefineFunction2) {
      ActionDefineFunction2 f=(ActionDefineFunction2)fun;
      String changed=deobfuscateName(deobfuscated,f.functionName,false,""String_Node_Str"",renameType,selected);
      if (changed != null) {
        f.replacedFunctionName=changed;
      }
    }
  }
  HashSet<String> stringsNoVarH=new HashSet<>();
  for (  DirectValueTreeItem ti : allStrings.keySet()) {
    if (!allVariableNames.containsKey(ti)) {
      stringsNoVarH.add(System.identityHashCode(allStrings.get(ti)) + ""String_Node_Str"" + ti.toStringNoH(allStrings.get(ti)));
    }
  }
  int vc=0;
  for (  DirectValueTreeItem ti : allVariableNames.keySet()) {
    vc++;
    informListeners(""String_Node_Str"",""String_Node_Str"" + vc + ""String_Node_Str""+ allVariableNames.size());
    String name=ti.toStringNoH(allVariableNames.get(ti));
    String changed=deobfuscateName(deobfuscated,name,false,usageTypes.get(ti),renameType,selected);
    if (changed != null) {
      boolean addNew=false;
      String h=System.identityHashCode(allVariableNames.get(ti)) + ""String_Node_Str"" + name;
      if (stringsNoVarH.contains(h)) {
        addNew=true;
      }
      ActionPush pu=(ActionPush)ti.src;
      if (pu.replacement == null) {
        pu.replacement=new ArrayList<>();
        pu.replacement.addAll(pu.values);
      }
      if (pu.replacement.get(ti.pos) instanceof ConstantIndex) {
        ConstantIndex ci=(ConstantIndex)pu.replacement.get(ti.pos);
        ConstantPool pool=allVariableNames.get(ti);
        if (pool == null) {
          continue;
        }
        if (pool.constants == null) {
          continue;
        }
        if (addNew) {
          pool.constants.add(changed);
          ci.index=pool.constants.size() - 1;
        }
 else {
          pool.constants.set(ci.index,changed);
        }
      }
 else {
        pu.replacement.set(ti.pos,changed);
      }
      ret++;
    }
  }
  for (  ASMSource src : actionsMap.keySet()) {
    actionsMap.put(src,Action.removeNops(0,actionsMap.get(src),version,0));
    src.setActions(actionsMap.get(src),version);
  }
  return ret;
}","private int renameAS2Identifiers(RenameType renameType,Map<String,String> selected){
  actionsMap=new HashMap<>();
  allFunctions=new ArrayList<>();
  allVariableNames=new HashMap<>();
  allStrings=new HashMap<>();
  List<Object> objs=new ArrayList<>();
  int ret=0;
  objs.addAll(tags);
  getVariables(objs,""String_Node_Str"");
  informListeners(""String_Node_Str"",""String_Node_Str"");
  int fc=0;
  for (  DirectValueTreeItem ti : allVariableNames.keySet()) {
    String name=ti.toStringNoH(allVariableNames.get(ti));
    allVariableNamesStr.add(name);
  }
  informListeners(""String_Node_Str"",""String_Node_Str"");
  int classCount=0;
  for (  Tag t : tags) {
    if (t instanceof DoInitActionTag) {
      classCount++;
    }
  }
  int cnt=0;
  for (  Tag t : tags) {
    if (t instanceof DoInitActionTag) {
      cnt++;
      informListeners(""String_Node_Str"",""String_Node_Str"" + cnt + ""String_Node_Str""+ classCount);
      DoInitActionTag dia=(DoInitActionTag)t;
      String exportName=dia.getExportName();
      final String pkgPrefix=""String_Node_Str"";
      String classNameParts[]=null;
      if ((exportName != null) && exportName.startsWith(pkgPrefix)) {
        String className=exportName.substring(pkgPrefix.length());
        if (className.contains(""String_Node_Str"")) {
          classNameParts=className.split(""String_Node_Str"");
        }
 else {
          classNameParts=new String[]{className};
        }
      }
      List<GraphTargetItem> dec=Action.actionsToTree(dia.getActions(version),version);
      GraphTargetItem name=null;
      for (      GraphTargetItem it : dec) {
        if (it instanceof ClassTreeItem) {
          ClassTreeItem cti=(ClassTreeItem)it;
          List<GraphTargetItem> methods=new ArrayList<>();
          methods.addAll(cti.functions);
          methods.addAll(cti.staticFunctions);
          for (          GraphTargetItem gti : methods) {
            if (gti instanceof FunctionTreeItem) {
              FunctionTreeItem fun=(FunctionTreeItem)gti;
              if (fun.calculatedFunctionName instanceof DirectValueTreeItem) {
                DirectValueTreeItem dvf=(DirectValueTreeItem)fun.calculatedFunctionName;
                String fname=dvf.toStringNoH(null);
                String changed=deobfuscateName(fname,false,""String_Node_Str"",renameType,selected);
                if (changed != null) {
                  deobfuscated.put(fname,changed);
                }
              }
            }
          }
          List<GraphTargetItem> vars=new ArrayList<>();
          vars.addAll(cti.vars.keySet());
          vars.addAll(cti.staticVars.keySet());
          for (          GraphTargetItem gti : vars) {
            if (gti instanceof DirectValueTreeItem) {
              DirectValueTreeItem dvf=(DirectValueTreeItem)gti;
              String vname=dvf.toStringNoH(null);
              String changed=deobfuscateName(vname,false,""String_Node_Str"",renameType,selected);
              if (changed != null) {
                deobfuscated.put(vname,changed);
              }
            }
          }
          name=cti.className;
          break;
        }
        if (it instanceof InterfaceTreeItem) {
          InterfaceTreeItem ift=(InterfaceTreeItem)it;
          name=ift.name;
        }
      }
      if (name != null) {
        int pos=0;
        while (name instanceof GetMemberTreeItem) {
          GetMemberTreeItem mem=(GetMemberTreeItem)name;
          GraphTargetItem memberName=mem.memberName;
          if (memberName instanceof DirectValueTreeItem) {
            DirectValueTreeItem dvt=(DirectValueTreeItem)memberName;
            String nameStr=dvt.toStringNoH(null);
            if (classNameParts != null) {
              if (classNameParts.length - 1 - pos < 0) {
                break;
              }
            }
            String changedNameStr=nameStr;
            if (classNameParts != null) {
              changedNameStr=classNameParts[classNameParts.length - 1 - pos];
            }
            String changedNameStr2=deobfuscateName(changedNameStr,pos == 0,pos == 0 ? ""String_Node_Str"" : ""String_Node_Str"",renameType,selected);
            if (changedNameStr2 != null) {
              changedNameStr=changedNameStr2;
            }
            deobfuscated.put(nameStr,changedNameStr);
            pos++;
          }
          name=mem.object;
        }
        if (name instanceof GetVariableTreeItem) {
          GetVariableTreeItem var=(GetVariableTreeItem)name;
          if (var.name instanceof DirectValueTreeItem) {
            DirectValueTreeItem dvt=(DirectValueTreeItem)var.name;
            String nameStr=dvt.toStringNoH(null);
            if (classNameParts != null) {
              if (classNameParts.length - 1 - pos < 0) {
                break;
              }
            }
            String changedNameStr=nameStr;
            if (classNameParts != null) {
              changedNameStr=classNameParts[classNameParts.length - 1 - pos];
            }
            String changedNameStr2=deobfuscateName(changedNameStr,pos == 0,pos == 0 ? ""String_Node_Str"" : ""String_Node_Str"",renameType,selected);
            if (changedNameStr2 != null) {
              changedNameStr=changedNameStr2;
            }
            deobfuscated.put(nameStr,changedNameStr);
            pos++;
          }
        }
      }
    }
  }
  for (  GraphSourceItem fun : allFunctions) {
    fc++;
    informListeners(""String_Node_Str"",""String_Node_Str"" + fc + ""String_Node_Str""+ allFunctions.size());
    if (fun instanceof ActionDefineFunction) {
      ActionDefineFunction f=(ActionDefineFunction)fun;
      String changed=deobfuscateName(f.functionName,false,""String_Node_Str"",renameType,selected);
      if (changed != null) {
        f.replacedFunctionName=changed;
      }
    }
    if (fun instanceof ActionDefineFunction2) {
      ActionDefineFunction2 f=(ActionDefineFunction2)fun;
      String changed=deobfuscateName(f.functionName,false,""String_Node_Str"",renameType,selected);
      if (changed != null) {
        f.replacedFunctionName=changed;
      }
    }
  }
  HashSet<String> stringsNoVarH=new HashSet<>();
  for (  DirectValueTreeItem ti : allStrings.keySet()) {
    if (!allVariableNames.containsKey(ti)) {
      stringsNoVarH.add(System.identityHashCode(allStrings.get(ti)) + ""String_Node_Str"" + ti.toStringNoH(allStrings.get(ti)));
    }
  }
  int vc=0;
  for (  DirectValueTreeItem ti : allVariableNames.keySet()) {
    vc++;
    String name=ti.toStringNoH(allVariableNames.get(ti));
    String changed=deobfuscateName(name,false,usageTypes.get(ti),renameType,selected);
    if (changed != null) {
      boolean addNew=false;
      String h=System.identityHashCode(allVariableNames.get(ti)) + ""String_Node_Str"" + name;
      if (stringsNoVarH.contains(h)) {
        addNew=true;
      }
      ActionPush pu=(ActionPush)ti.src;
      if (pu.replacement == null) {
        pu.replacement=new ArrayList<>();
        pu.replacement.addAll(pu.values);
      }
      if (pu.replacement.get(ti.pos) instanceof ConstantIndex) {
        ConstantIndex ci=(ConstantIndex)pu.replacement.get(ti.pos);
        ConstantPool pool=allVariableNames.get(ti);
        if (pool == null) {
          continue;
        }
        if (pool.constants == null) {
          continue;
        }
        if (addNew) {
          pool.constants.add(changed);
          ci.index=pool.constants.size() - 1;
        }
 else {
          pool.constants.set(ci.index,changed);
        }
      }
 else {
        pu.replacement.set(ti.pos,changed);
      }
      ret++;
    }
  }
  for (  ASMSource src : actionsMap.keySet()) {
    actionsMap.put(src,Action.removeNops(0,actionsMap.get(src),version,0));
    src.setActions(actionsMap.get(src),version);
  }
  return ret;
}",0.9782483893602092
62148,"@Override public int hashCode(){
  int hash=7;
  hash=71 * hash + Objects.hashCode(this.value);
  hash=71 * hash + Objects.hashCode(this.constants);
  hash=71 * hash + pos;
  return hash;
}","@Override public int hashCode(){
  int hash=7;
  hash=71 * hash + Objects.hashCode(this.value);
  hash=71 * hash + System.identityHashCode(this.constants);
  hash=71 * hash + pos;
  return hash;
}",0.9454545454545454
62149,"public static Object deepCopy(Object o){
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try (ObjectOutputStream oos=new ObjectOutputStream(baos)){
      oos.writeObject(o);
      oos.flush();
    }
     Object copy;
    try (ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()))){
      copy=ois.readObject();
    }
     return copy;
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    return null;
  }
}","public static Object deepCopy(Object o){
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try (ObjectOutputStream oos=new ObjectOutputStream(baos)){
      oos.writeObject(o);
      oos.flush();
    }
     Object copy;
    try (ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()))){
      copy=ois.readObject();
    }
     return copy;
  }
 catch (  Exception ex) {
    return null;
  }
}",0.9717391304347828
62150,"@Override protected List<GraphTargetItem> check(GraphSource srcCode,List<Object> localData,List<GraphPart> allParts,Stack<GraphTargetItem> stack,GraphPart parent,GraphPart part,List<GraphPart> stopPart,List<Loop> loops,List<GraphTargetItem> output,Loop currentLoop){
  List<GraphTargetItem> ret=null;
  @SuppressWarnings(""String_Node_Str"") List<ABCException> parsedExceptions=(List<ABCException>)localData.get(DATA_PARSEDEXCEPTIONS);
  @SuppressWarnings(""String_Node_Str"") List<Integer> finallyJumps=(List<Integer>)localData.get(DATA_FINALLYJUMPS);
  @SuppressWarnings(""String_Node_Str"") List<Integer> ignoredSwitches=(List<Integer>)localData.get(DATA_IGNOREDSWITCHES);
  int ip=part.start;
  int addr=code.fixAddrAfterDebugLine(code.pos2adr(part.start));
  int maxend=-1;
  List<ABCException> catchedExceptions=new ArrayList<>();
  for (int e=0; e < body.exceptions.length; e++) {
    if (addr == code.fixAddrAfterDebugLine(body.exceptions[e].start)) {
      if (!body.exceptions[e].isFinally()) {
        if (((body.exceptions[e].end) > maxend) && (!parsedExceptions.contains(body.exceptions[e]))) {
          catchedExceptions.clear();
          maxend=code.fixAddrAfterDebugLine(body.exceptions[e].end);
          catchedExceptions.add(body.exceptions[e]);
        }
 else         if (code.fixAddrAfterDebugLine(body.exceptions[e].end) == maxend) {
          catchedExceptions.add(body.exceptions[e]);
        }
      }
    }
  }
  if (catchedExceptions.size() > 0) {
    if (currentLoop != null) {
    }
    parsedExceptions.addAll(catchedExceptions);
    int endpos=code.adr2pos(code.fixAddrAfterDebugLine(catchedExceptions.get(0).end));
    int endposStartBlock=code.adr2pos(catchedExceptions.get(0).end);
    List<List<GraphTargetItem>> catchedCommands=new ArrayList<>();
    if (code.code.get(endpos).definition instanceof JumpIns) {
      int afterCatchAddr=code.pos2adr(endpos + 1) + code.code.get(endpos).operands[0];
      int afterCatchPos=code.adr2pos(afterCatchAddr);
      Collections.sort(catchedExceptions,new Comparator<ABCException>(){
        @Override public int compare(        ABCException o1,        ABCException o2){
          return code.fixAddrAfterDebugLine(o1.target) - code.fixAddrAfterDebugLine(o2.target);
        }
      }
);
      List<GraphTargetItem> finallyCommands=new ArrayList<>();
      int returnPos=afterCatchPos;
      for (int e=0; e < body.exceptions.length; e++) {
        if (body.exceptions[e].isFinally()) {
          if (addr == code.fixAddrAfterDebugLine(body.exceptions[e].start)) {
            if (afterCatchPos + 1 == code.adr2pos(code.fixAddrAfterDebugLine(body.exceptions[e].end))) {
              AVM2Instruction jmpIns=code.code.get(code.adr2pos(code.fixAddrAfterDebugLine(body.exceptions[e].end)));
              if (jmpIns.definition instanceof JumpIns) {
                int finStart=code.adr2pos(code.fixAddrAfterDebugLine(body.exceptions[e].end) + jmpIns.getBytes().length + jmpIns.operands[0]);
                boolean switchFound=false;
                GraphPart fpart=null;
                for (                GraphPart p : allParts) {
                  if (p.start == finStart) {
                    fpart=p;
                    break;
                  }
                }
                for (int f=finStart; f < code.code.size(); f++) {
                  if (code.code.get(f).definition instanceof LookupSwitchIns) {
                    AVM2Instruction swins=code.code.get(f);
                    if (swins.operands.length >= 3) {
                      if (swins.operands[0] == swins.getBytes().length) {
                        if (code.adr2pos(code.pos2adr(f) + swins.operands[2]) < finStart) {
                          stack.push(new ExceptionTreeItem(body.exceptions[e]));
                          GraphPart fepart=null;
                          for (                          GraphPart p : allParts) {
                            if (p.start == f + 1) {
                              fepart=p;
                              break;
                            }
                          }
                          ignoredSwitches.add(f);
                          List<GraphPart> stopPart2=new ArrayList<>(stopPart);
                          stopPart2.add(fepart);
                          finallyCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,fpart,stopPart2,loops);
                          returnPos=f + 1;
                          break;
                        }
                      }
                    }
                  }
                }
                if (!switchFound) {
                  finallyCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,fpart,null,loops);
                }
                finallyJumps.add(finStart);
                break;
              }
            }
          }
        }
      }
      List<GraphPart> catchParts=new ArrayList<>();
      for (int e=0; e < catchedExceptions.size(); e++) {
        int eendpos;
        if (e < catchedExceptions.size() - 1) {
          eendpos=code.adr2pos(code.fixAddrAfterDebugLine(catchedExceptions.get(e + 1).target)) - 2;
        }
 else {
          eendpos=afterCatchPos - 1;
        }
        GraphPart npart=null;
        int findpos=code.adr2pos(catchedExceptions.get(e).target);
        for (        GraphPart p : allParts) {
          if (p.start == findpos) {
            npart=p;
            catchParts.add(p);
            break;
          }
        }
        GraphPart nepart=null;
        for (        GraphPart p : allParts) {
          if (p.start == eendpos + 1) {
            nepart=p;
            break;
          }
        }
        stack.add(new ExceptionTreeItem(catchedExceptions.get(e)));
        List<Object> localData2=new ArrayList<>();
        localData2.addAll(localData);
        localData2.set(DATA_SCOPESTACK,new Stack<GraphTargetItem>());
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(nepart);
        catchedCommands.add(printGraph(new ArrayList<GraphPart>(),localData2,stack,allParts,parent,npart,stopPart2,loops));
      }
      GraphPart nepart=null;
      for (      GraphPart p : allParts) {
        if (p.start == endposStartBlock) {
          nepart=p;
          break;
        }
      }
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(nepart);
      stopPart2.addAll(catchParts);
      List<GraphTargetItem> tryCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,part,stopPart2,loops);
      output.clear();
      output.add(new TryTreeItem(tryCommands,catchedExceptions,catchedCommands,finallyCommands));
      ip=returnPos;
    }
  }
  if (ip != part.start) {
    part=null;
    for (    GraphPart p : allParts) {
      List<GraphPart> ps=p.getSubParts();
      for (      GraphPart p2 : ps) {
        if (p2.start == ip) {
          part=p2;
          break;
        }
      }
    }
    ret=new ArrayList<>();
    ret.addAll(output);
    GraphTargetItem lop=checkLoop(part,stopPart,loops);
    if (lop == null) {
      ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,part,stopPart,loops));
    }
 else {
      ret.add(lop);
    }
    return ret;
  }
  if (part.nextParts.isEmpty()) {
    if (code.code.get(part.end).definition instanceof ReturnValueIns) {
      if (part.getHeight() >= 3) {
        if (code.code.get(part.getPosAt(part.getHeight() - 2)).definition instanceof KillIns) {
          if (code.code.get(part.getPosAt(part.getHeight() - 3)).definition instanceof GetLocalTypeIns) {
            if (output.size() >= 2) {
              if (output.get(output.size() - 2) instanceof SetLocalTreeItem) {
                ret=new ArrayList<>();
                ret.addAll(output);
                ret.remove(ret.size() - 1);
                ret.add(new ReturnValueTreeItem(code.code.get(part.end),((SetLocalTreeItem)output.get(output.size() - 2)).value));
                return ret;
              }
            }
          }
        }
      }
    }
  }
  if (code.code.get(part.end).definition instanceof LookupSwitchIns) {
    ret=new ArrayList<>();
    ret.addAll(output);
    return ret;
  }
  if (((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictEqTreeItem)&& (part.nextParts.get(0).getHeight() >= 2)&& (code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(0).start)).definition instanceof PushIntegerTypeIns)&& (code.code.get(part.nextParts.get(0).nextParts.get(0).end).definition instanceof LookupSwitchIns)) || ((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictNeqTreeItem)&& (part.nextParts.get(1).getHeight() >= 2)&& (code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(1).start)).definition instanceof PushIntegerTypeIns)&& (code.code.get(part.nextParts.get(1).nextParts.get(0).end).definition instanceof LookupSwitchIns))) {
    ret=new ArrayList<>();
    ret.addAll(output);
    boolean reversed=false;
    if (stack.peek() instanceof StrictEqTreeItem) {
      reversed=true;
    }
    GraphTargetItem switchedObject=null;
    if (!output.isEmpty()) {
      if (output.get(output.size() - 1) instanceof SetLocalTreeItem) {
        switchedObject=((SetLocalTreeItem)output.get(output.size() - 1)).value;
      }
    }
    if (switchedObject == null) {
      switchedObject=new NullTreeItem(null);
    }
    HashMap<Integer,GraphTargetItem> caseValuesMap=new HashMap<>();
    GraphTargetItem tar=stack.pop();
    if (tar instanceof StrictEqTreeItem) {
      tar=((StrictEqTreeItem)tar).leftSide;
    }
    if (tar instanceof StrictNeqTreeItem) {
      tar=((StrictNeqTreeItem)tar).leftSide;
    }
    caseValuesMap.put(code.code.get(part.nextParts.get(reversed ? 0 : 1).start).operands[0],tar);
    GraphPart switchLoc=part.nextParts.get(reversed ? 0 : 1).nextParts.get(0);
    while ((code.code.get(part.nextParts.get(reversed ? 1 : 0).end).definition instanceof IfStrictNeIns) || (code.code.get(part.nextParts.get(reversed ? 1 : 0).end).definition instanceof IfStrictEqIns)) {
      part=part.nextParts.get(reversed ? 1 : 0);
      translatePart(localData,part,stack);
      tar=stack.pop();
      if (tar instanceof StrictEqTreeItem) {
        tar=((StrictEqTreeItem)tar).leftSide;
      }
      if (tar instanceof StrictNeqTreeItem) {
        tar=((StrictNeqTreeItem)tar).leftSide;
      }
      if (code.code.get(part.end).definition instanceof IfStrictNeIns) {
        reversed=false;
      }
 else {
        reversed=true;
      }
      caseValuesMap.put(code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(reversed ? 0 : 1).start)).operands[0],tar);
      while (code.code.get(part.nextParts.get(reversed ? 1 : 0).start).definition instanceof JumpIns) {
        reversed=false;
        part=part.nextParts.get(reversed ? 1 : 0);
        if (part instanceof GraphPartMulti) {
          part=((GraphPartMulti)part).parts.get(0);
        }
      }
    }
    boolean hasDefault=false;
    GraphPart dp=part.nextParts.get(reversed ? 1 : 0);
    while (code.code.get(dp.start).definition instanceof JumpIns) {
      if (dp instanceof GraphPartMulti) {
        dp=((GraphPartMulti)dp).parts.get(0);
      }
      dp=dp.nextParts.get(0);
    }
    if (code.code.get(dp.start).definition instanceof PushIntegerTypeIns) {
      hasDefault=true;
    }
    List<GraphTargetItem> caseValues=new ArrayList<>();
    for (int i=0; i < switchLoc.nextParts.size() - 1; i++) {
      if (caseValuesMap.containsKey(i)) {
        caseValues.add(caseValuesMap.get(i));
      }
 else {
        continue;
      }
    }
    List<List<GraphTargetItem>> caseCommands=new ArrayList<>();
    GraphPart next=null;
    List<GraphPart> loopContinues=getLoopsContinues(loops);
    next=switchLoc.getNextPartPath(loopContinues);
    if (next == null) {
      next=switchLoc.getNextSuperPartPath(loopContinues);
    }
    GraphTargetItem ti=checkLoop(next,stopPart,loops);
    currentLoop=new Loop(loops.size(),null,next);
    currentLoop.phase=1;
    loops.add(currentLoop);
    List<Integer> valuesMapping=new ArrayList<>();
    List<GraphPart> caseBodies=new ArrayList<>();
    for (int i=0; i < caseValues.size(); i++) {
      GraphPart cur=switchLoc.nextParts.get(1 + i);
      if (!caseBodies.contains(cur)) {
        caseBodies.add(cur);
      }
      valuesMapping.add(caseBodies.indexOf(cur));
    }
    List<GraphTargetItem> defaultCommands=new ArrayList<>();
    GraphPart defaultPart=null;
    if (hasDefault) {
      defaultPart=switchLoc.nextParts.get(switchLoc.nextParts.size() - 1);
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(next);
      defaultCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,switchLoc,defaultPart,stopPart2,loops);
      if (!defaultCommands.isEmpty()) {
        if (defaultCommands.get(defaultCommands.size() - 1) instanceof BreakItem) {
          if (((BreakItem)defaultCommands.get(defaultCommands.size() - 1)).loopId == currentLoop.id) {
            defaultCommands.remove(defaultCommands.size() - 1);
          }
        }
      }
    }
    List<GraphPart> ignored=new ArrayList<>();
    for (    Loop l : loops) {
      ignored.add(l.loopContinue);
    }
    for (int i=0; i < caseBodies.size(); i++) {
      List<GraphTargetItem> cc=new ArrayList<>();
      GraphPart nextCase=null;
      nextCase=next;
      if (next != null) {
        if (i < caseBodies.size() - 1) {
          if (!caseBodies.get(i).leadsTo(srcCode,caseBodies.get(i + 1),loops)) {
          }
 else {
            nextCase=caseBodies.get(i + 1);
          }
        }
 else         if (hasDefault) {
          if (!caseBodies.get(i).leadsTo(srcCode,defaultPart,loops)) {
          }
 else {
            nextCase=defaultPart;
          }
        }
      }
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(nextCase);
      cc.addAll(0,printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,switchLoc,caseBodies.get(i),stopPart2,loops));
      caseCommands.add(cc);
    }
    SwitchItem sti=new SwitchItem(null,currentLoop,switchedObject,caseValues,caseCommands,defaultCommands,valuesMapping);
    ret.add(sti);
    if (next != null) {
      currentLoop.phase=2;
      ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,next,stopPart,loops));
    }
  }
  return ret;
}","@Override protected List<GraphTargetItem> check(GraphSource srcCode,List<Object> localData,List<GraphPart> allParts,Stack<GraphTargetItem> stack,GraphPart parent,GraphPart part,List<GraphPart> stopPart,List<Loop> loops,List<GraphTargetItem> output,Loop currentLoop){
  List<GraphTargetItem> ret=null;
  @SuppressWarnings(""String_Node_Str"") List<ABCException> parsedExceptions=(List<ABCException>)localData.get(DATA_PARSEDEXCEPTIONS);
  @SuppressWarnings(""String_Node_Str"") List<Integer> finallyJumps=(List<Integer>)localData.get(DATA_FINALLYJUMPS);
  @SuppressWarnings(""String_Node_Str"") List<Integer> ignoredSwitches=(List<Integer>)localData.get(DATA_IGNOREDSWITCHES);
  int ip=part.start;
  int addr=code.fixAddrAfterDebugLine(code.pos2adr(part.start));
  int maxend=-1;
  List<ABCException> catchedExceptions=new ArrayList<>();
  for (int e=0; e < body.exceptions.length; e++) {
    if (addr == code.fixAddrAfterDebugLine(body.exceptions[e].start)) {
      if (!body.exceptions[e].isFinally()) {
        if (((body.exceptions[e].end) > maxend) && (!parsedExceptions.contains(body.exceptions[e]))) {
          catchedExceptions.clear();
          maxend=code.fixAddrAfterDebugLine(body.exceptions[e].end);
          catchedExceptions.add(body.exceptions[e]);
        }
 else         if (code.fixAddrAfterDebugLine(body.exceptions[e].end) == maxend) {
          catchedExceptions.add(body.exceptions[e]);
        }
      }
    }
  }
  if (catchedExceptions.size() > 0) {
    if (currentLoop != null) {
    }
    parsedExceptions.addAll(catchedExceptions);
    int endpos=code.adr2pos(code.fixAddrAfterDebugLine(catchedExceptions.get(0).end));
    int endposStartBlock=code.adr2pos(catchedExceptions.get(0).end);
    List<List<GraphTargetItem>> catchedCommands=new ArrayList<>();
    if (code.code.get(endpos).definition instanceof JumpIns) {
      int afterCatchAddr=code.pos2adr(endpos + 1) + code.code.get(endpos).operands[0];
      int afterCatchPos=code.adr2pos(afterCatchAddr);
      Collections.sort(catchedExceptions,new Comparator<ABCException>(){
        @Override public int compare(        ABCException o1,        ABCException o2){
          return code.fixAddrAfterDebugLine(o1.target) - code.fixAddrAfterDebugLine(o2.target);
        }
      }
);
      List<GraphTargetItem> finallyCommands=new ArrayList<>();
      int returnPos=afterCatchPos;
      for (int e=0; e < body.exceptions.length; e++) {
        if (body.exceptions[e].isFinally()) {
          if (addr == code.fixAddrAfterDebugLine(body.exceptions[e].start)) {
            if (afterCatchPos + 1 == code.adr2pos(code.fixAddrAfterDebugLine(body.exceptions[e].end))) {
              AVM2Instruction jmpIns=code.code.get(code.adr2pos(code.fixAddrAfterDebugLine(body.exceptions[e].end)));
              if (jmpIns.definition instanceof JumpIns) {
                int finStart=code.adr2pos(code.fixAddrAfterDebugLine(body.exceptions[e].end) + jmpIns.getBytes().length + jmpIns.operands[0]);
                boolean switchFound=false;
                GraphPart fpart=null;
                for (                GraphPart p : allParts) {
                  if (p.start == finStart) {
                    fpart=p;
                    break;
                  }
                }
                for (int f=finStart; f < code.code.size(); f++) {
                  if (code.code.get(f).definition instanceof LookupSwitchIns) {
                    AVM2Instruction swins=code.code.get(f);
                    if (swins.operands.length >= 3) {
                      if (swins.operands[0] == swins.getBytes().length) {
                        if (code.adr2pos(code.pos2adr(f) + swins.operands[2]) < finStart) {
                          stack.push(new ExceptionTreeItem(body.exceptions[e]));
                          GraphPart fepart=null;
                          for (                          GraphPart p : allParts) {
                            if (p.start == f + 1) {
                              fepart=p;
                              break;
                            }
                          }
                          ignoredSwitches.add(f);
                          List<GraphPart> stopPart2=new ArrayList<>(stopPart);
                          stopPart2.add(fepart);
                          finallyCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,fpart,stopPart2,loops);
                          returnPos=f + 1;
                          break;
                        }
                      }
                    }
                  }
                }
                if (!switchFound) {
                  finallyCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,fpart,null,loops);
                }
                finallyJumps.add(finStart);
                break;
              }
            }
          }
        }
      }
      List<GraphPart> catchParts=new ArrayList<>();
      for (int e=0; e < catchedExceptions.size(); e++) {
        int eendpos;
        if (e < catchedExceptions.size() - 1) {
          eendpos=code.adr2pos(code.fixAddrAfterDebugLine(catchedExceptions.get(e + 1).target)) - 2;
        }
 else {
          eendpos=afterCatchPos - 1;
        }
        GraphPart npart=null;
        int findpos=code.adr2pos(catchedExceptions.get(e).target);
        for (        GraphPart p : allParts) {
          if (p.start == findpos) {
            npart=p;
            catchParts.add(p);
            break;
          }
        }
        GraphPart nepart=null;
        for (        GraphPart p : allParts) {
          if (p.start == eendpos + 1) {
            nepart=p;
            break;
          }
        }
        stack.add(new ExceptionTreeItem(catchedExceptions.get(e)));
        List<Object> localData2=new ArrayList<>();
        localData2.addAll(localData);
        localData2.set(DATA_SCOPESTACK,new Stack<GraphTargetItem>());
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(nepart);
        catchedCommands.add(printGraph(new ArrayList<GraphPart>(),localData2,stack,allParts,parent,npart,stopPart2,loops));
      }
      GraphPart nepart=null;
      for (      GraphPart p : allParts) {
        if (p.start == endposStartBlock) {
          nepart=p;
          break;
        }
      }
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(nepart);
      stopPart2.addAll(catchParts);
      List<GraphTargetItem> tryCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,part,stopPart2,loops);
      output.clear();
      output.add(new TryTreeItem(tryCommands,catchedExceptions,catchedCommands,finallyCommands));
      ip=returnPos;
    }
  }
  if (ip != part.start) {
    part=null;
    for (    GraphPart p : allParts) {
      List<GraphPart> ps=p.getSubParts();
      for (      GraphPart p2 : ps) {
        if (p2.start == ip) {
          part=p2;
          break;
        }
      }
    }
    ret=new ArrayList<>();
    ret.addAll(output);
    GraphTargetItem lop=checkLoop(part,stopPart,loops);
    if (lop == null) {
      ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,part,stopPart,loops));
    }
 else {
      ret.add(lop);
    }
    return ret;
  }
  if (part.nextParts.isEmpty()) {
    if (code.code.get(part.end).definition instanceof ReturnValueIns) {
      if (part.getHeight() >= 3) {
        if (code.code.get(part.getPosAt(part.getHeight() - 2)).definition instanceof KillIns) {
          if (code.code.get(part.getPosAt(part.getHeight() - 3)).definition instanceof GetLocalTypeIns) {
            if (output.size() >= 2) {
              if (output.get(output.size() - 2) instanceof SetLocalTreeItem) {
                ret=new ArrayList<>();
                ret.addAll(output);
                ret.remove(ret.size() - 1);
                ret.add(new ReturnValueTreeItem(code.code.get(part.end),((SetLocalTreeItem)output.get(output.size() - 2)).value));
                return ret;
              }
            }
          }
        }
      }
    }
  }
  if ((code.code.get(part.end).definition instanceof LookupSwitchIns) && ignoredSwitches.contains(part.end)) {
    ret=new ArrayList<>();
    ret.addAll(output);
    return ret;
  }
  if (((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictEqTreeItem)&& (part.nextParts.get(0).getHeight() >= 2)&& (code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(0).start)).definition instanceof PushIntegerTypeIns)&& (code.code.get(part.nextParts.get(0).nextParts.get(0).end).definition instanceof LookupSwitchIns)) || ((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictNeqTreeItem)&& (part.nextParts.get(1).getHeight() >= 2)&& (code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(1).start)).definition instanceof PushIntegerTypeIns)&& (code.code.get(part.nextParts.get(1).nextParts.get(0).end).definition instanceof LookupSwitchIns))) {
    if (stack.peek() instanceof StrictEqTreeItem) {
      ignoredSwitches.add(part.nextParts.get(0).nextParts.get(0).end);
    }
 else {
      ignoredSwitches.add(part.nextParts.get(1).nextParts.get(0).end);
    }
    ret=new ArrayList<>();
    ret.addAll(output);
    boolean reversed=false;
    if (stack.peek() instanceof StrictEqTreeItem) {
      reversed=true;
    }
    GraphTargetItem switchedObject=null;
    if (!output.isEmpty()) {
      if (output.get(output.size() - 1) instanceof SetLocalTreeItem) {
        switchedObject=((SetLocalTreeItem)output.get(output.size() - 1)).value;
      }
    }
    if (switchedObject == null) {
      switchedObject=new NullTreeItem(null);
    }
    HashMap<Integer,GraphTargetItem> caseValuesMap=new HashMap<>();
    GraphTargetItem tar=stack.pop();
    if (tar instanceof StrictEqTreeItem) {
      tar=((StrictEqTreeItem)tar).leftSide;
    }
    if (tar instanceof StrictNeqTreeItem) {
      tar=((StrictNeqTreeItem)tar).leftSide;
    }
    caseValuesMap.put(code.code.get(part.nextParts.get(reversed ? 0 : 1).start).operands[0],tar);
    GraphPart switchLoc=part.nextParts.get(reversed ? 0 : 1).nextParts.get(0);
    while ((code.code.get(part.nextParts.get(reversed ? 1 : 0).end).definition instanceof IfStrictNeIns) || (code.code.get(part.nextParts.get(reversed ? 1 : 0).end).definition instanceof IfStrictEqIns)) {
      part=part.nextParts.get(reversed ? 1 : 0);
      translatePart(localData,part,stack);
      tar=stack.pop();
      if (tar instanceof StrictEqTreeItem) {
        tar=((StrictEqTreeItem)tar).leftSide;
      }
      if (tar instanceof StrictNeqTreeItem) {
        tar=((StrictNeqTreeItem)tar).leftSide;
      }
      if (code.code.get(part.end).definition instanceof IfStrictNeIns) {
        reversed=false;
      }
 else {
        reversed=true;
      }
      caseValuesMap.put(code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(reversed ? 0 : 1).start)).operands[0],tar);
      while (code.code.get(part.nextParts.get(reversed ? 1 : 0).start).definition instanceof JumpIns) {
        reversed=false;
        part=part.nextParts.get(reversed ? 1 : 0);
        if (part instanceof GraphPartMulti) {
          part=((GraphPartMulti)part).parts.get(0);
        }
      }
    }
    boolean hasDefault=false;
    GraphPart dp=part.nextParts.get(reversed ? 1 : 0);
    while (code.code.get(dp.start).definition instanceof JumpIns) {
      if (dp instanceof GraphPartMulti) {
        dp=((GraphPartMulti)dp).parts.get(0);
      }
      dp=dp.nextParts.get(0);
    }
    if (code.code.get(dp.start).definition instanceof PushIntegerTypeIns) {
      hasDefault=true;
    }
    List<GraphTargetItem> caseValues=new ArrayList<>();
    for (int i=0; i < switchLoc.nextParts.size() - 1; i++) {
      if (caseValuesMap.containsKey(i)) {
        caseValues.add(caseValuesMap.get(i));
      }
 else {
        continue;
      }
    }
    List<List<GraphTargetItem>> caseCommands=new ArrayList<>();
    GraphPart next=null;
    List<GraphPart> loopContinues=getLoopsContinues(loops);
    next=switchLoc.getNextPartPath(loopContinues);
    if (next == null) {
      next=switchLoc.getNextSuperPartPath(loopContinues);
    }
    GraphTargetItem ti=checkLoop(next,stopPart,loops);
    currentLoop=new Loop(loops.size(),null,next);
    currentLoop.phase=1;
    loops.add(currentLoop);
    List<Integer> valuesMapping=new ArrayList<>();
    List<GraphPart> caseBodies=new ArrayList<>();
    for (int i=0; i < caseValues.size(); i++) {
      GraphPart cur=switchLoc.nextParts.get(1 + i);
      if (!caseBodies.contains(cur)) {
        caseBodies.add(cur);
      }
      valuesMapping.add(caseBodies.indexOf(cur));
    }
    List<GraphTargetItem> defaultCommands=new ArrayList<>();
    GraphPart defaultPart=null;
    if (hasDefault) {
      defaultPart=switchLoc.nextParts.get(switchLoc.nextParts.size() - 1);
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(next);
      defaultCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,switchLoc,defaultPart,stopPart2,loops);
      if (!defaultCommands.isEmpty()) {
        if (defaultCommands.get(defaultCommands.size() - 1) instanceof BreakItem) {
          if (((BreakItem)defaultCommands.get(defaultCommands.size() - 1)).loopId == currentLoop.id) {
            defaultCommands.remove(defaultCommands.size() - 1);
          }
        }
      }
    }
    List<GraphPart> ignored=new ArrayList<>();
    for (    Loop l : loops) {
      ignored.add(l.loopContinue);
    }
    for (int i=0; i < caseBodies.size(); i++) {
      List<GraphTargetItem> cc=new ArrayList<>();
      GraphPart nextCase=null;
      nextCase=next;
      if (next != null) {
        if (i < caseBodies.size() - 1) {
          if (!caseBodies.get(i).leadsTo(srcCode,caseBodies.get(i + 1),loops)) {
          }
 else {
            nextCase=caseBodies.get(i + 1);
          }
        }
 else         if (hasDefault) {
          if (!caseBodies.get(i).leadsTo(srcCode,defaultPart,loops)) {
          }
 else {
            nextCase=defaultPart;
          }
        }
      }
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      stopPart2.add(nextCase);
      cc.addAll(0,printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,switchLoc,caseBodies.get(i),stopPart2,loops));
      caseCommands.add(cc);
    }
    SwitchItem sti=new SwitchItem(null,currentLoop,switchedObject,caseValues,caseCommands,defaultCommands,valuesMapping);
    ret.add(sti);
    if (next != null) {
      currentLoop.phase=2;
      ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,next,stopPart,loops));
    }
  }
  return ret;
}",0.9912450020681096
62151,"protected List<GraphTargetItem> printGraph(List<GraphPart> visited,List<Object> localData,Stack<GraphTargetItem> stack,List<GraphPart> allParts,GraphPart parent,GraphPart part,List<GraphPart> stopPart,List<Loop> loops,List<GraphTargetItem> ret){
  if (stopPart == null) {
    stopPart=new ArrayList<>();
  }
  if (visited.contains(part)) {
  }
 else {
    visited.add(part);
  }
  if (ret == null) {
    ret=new ArrayList<>();
  }
  boolean debugMode=false;
  if (debugMode) {
    System.err.println(""String_Node_Str"" + part);
  }
  if (part == null) {
    return ret;
  }
  part=checkPart(localData,part);
  if (part == null) {
    return ret;
  }
  if (part.ignored) {
    return ret;
  }
  List<GraphPart> loopContinues=getLoopsContinues(loops);
  boolean isLoop=false;
  Loop currentLoop=null;
  for (  Loop el : loops) {
    if ((el.loopContinue == part) && (el.phase == 0)) {
      currentLoop=el;
      currentLoop.phase=1;
      isLoop=true;
      break;
    }
  }
  if (debugMode) {
    System.err.println(""String_Node_Str"" + loops.size());
  }
  for (int l=loops.size() - 1; l >= 0; l--) {
    Loop el=loops.get(l);
    if (el == currentLoop) {
      if (debugMode) {
        System.err.println(""String_Node_Str"" + el);
      }
      continue;
    }
    if (el.phase != 1) {
      if (debugMode) {
      }
      continue;
    }
    if (el.loopBreak == part) {
      if (currentLoop != null) {
        currentLoop.phase=0;
      }
      ret.add(new BreakItem(null,el.id));
      return ret;
    }
    if (el.loopPreContinue == part) {
      if (currentLoop != null) {
        currentLoop.phase=0;
      }
      ret.add(new ContinueItem(null,el.id));
      return ret;
    }
    if (el.loopContinue == part) {
      if (currentLoop != null) {
        currentLoop.phase=0;
      }
      ret.add(new ContinueItem(null,el.id));
      return ret;
    }
  }
  if (stopPart.contains(part)) {
    if (currentLoop != null) {
      currentLoop.phase=0;
    }
    return ret;
  }
  if ((part != null) && (code.size() <= part.start)) {
    ret.add(new ScriptEndItem());
    return ret;
  }
  List<GraphTargetItem> currentRet=ret;
  UniversalLoopItem loopItem=null;
  if (isLoop) {
    loopItem=new UniversalLoopItem(null,currentLoop);
    currentRet.add(loopItem);
    loopItem.commands=new ArrayList<>();
    currentRet=loopItem.commands;
  }
  boolean parseNext=true;
  List<GraphTargetItem> output=new ArrayList<>();
  List<GraphPart> parts=new ArrayList<>();
  if (part instanceof GraphPartMulti) {
    parts=((GraphPartMulti)part).parts;
  }
 else {
    parts.add(part);
  }
  int end=part.end;
  for (  GraphPart p : parts) {
    end=p.end;
    int start=p.start;
    try {
      output.addAll(code.translatePart(p,localData,stack,start,end));
      if ((end >= code.size() - 1) && p.nextParts.isEmpty()) {
        output.add(new ScriptEndItem());
      }
    }
 catch (    Exception ex) {
      Logger.getLogger(Graph.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
      return ret;
    }
  }
  if (part.nextParts.size() == 2) {
    if ((stack.size() >= 2) && (stack.get(stack.size() - 1) instanceof NotItem) && (((NotItem)(stack.get(stack.size() - 1))).getOriginal().getNotCoerced() == stack.get(stack.size() - 2).getNotCoerced())) {
      currentRet.addAll(output);
      GraphPart sp0=getNextNoJump(part.nextParts.get(0));
      GraphPart sp1=getNextNoJump(part.nextParts.get(1));
      boolean reversed=false;
      loopContinues=getLoopsContinues(loops);
      loopContinues.add(part);
      if (sp1.leadsTo(code,sp0,loops)) {
      }
 else       if (sp0.leadsTo(code,sp1,loops)) {
        reversed=true;
      }
      GraphPart next=reversed ? sp0 : sp1;
      GraphTargetItem ti;
      if ((ti=checkLoop(next,stopPart,loops)) != null) {
        currentRet.add(ti);
      }
 else {
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(reversed ? sp1 : sp0);
        printGraph(visited,localData,stack,allParts,parent,next,stopPart2,loops);
        GraphTargetItem second=stack.pop();
        GraphTargetItem first=stack.pop();
        if (!reversed) {
          AndItem a=new AndItem(null,first,second);
          stack.push(a);
          a.firstPart=part;
          if (second instanceof AndItem) {
            a.firstPart=((AndItem)second).firstPart;
          }
          if (second instanceof OrItem) {
            a.firstPart=((OrItem)second).firstPart;
          }
        }
 else {
          OrItem o=new OrItem(null,first,second);
          stack.push(o);
          o.firstPart=part;
          if (second instanceof AndItem) {
            o.firstPart=((AndItem)second).firstPart;
          }
          if (second instanceof OrItem) {
            o.firstPart=((OrItem)second).firstPart;
          }
        }
        next=reversed ? sp1 : sp0;
        if ((ti=checkLoop(next,stopPart,loops)) != null) {
          currentRet.add(ti);
        }
 else {
          currentRet.addAll(printGraph(visited,localData,stack,allParts,parent,next,stopPart,loops));
        }
      }
      parseNext=false;
    }
 else     if ((stack.size() >= 2) && (stack.get(stack.size() - 1).getNotCoerced() == stack.get(stack.size() - 2).getNotCoerced())) {
      currentRet.addAll(output);
      GraphPart sp0=getNextNoJump(part.nextParts.get(0));
      GraphPart sp1=getNextNoJump(part.nextParts.get(1));
      boolean reversed=false;
      loopContinues=getLoopsContinues(loops);
      loopContinues.add(part);
      if (sp1.leadsTo(code,sp0,loops)) {
      }
 else       if (sp0.leadsTo(code,sp1,loops)) {
        reversed=true;
      }
      GraphPart next=reversed ? sp0 : sp1;
      GraphTargetItem ti;
      if ((ti=checkLoop(next,stopPart,loops)) != null) {
        currentRet.add(ti);
      }
 else {
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(reversed ? sp1 : sp0);
        printGraph(visited,localData,stack,allParts,parent,next,stopPart2,loops);
        GraphTargetItem second=stack.pop();
        GraphTargetItem first=stack.pop();
        if (reversed) {
          AndItem a=new AndItem(null,first,second);
          stack.push(a);
          a.firstPart=part;
          if (second instanceof AndItem) {
            a.firstPart=((AndItem)second).firstPart;
          }
          if (second instanceof OrItem) {
            a.firstPart=((AndItem)second).firstPart;
          }
        }
 else {
          OrItem o=new OrItem(null,first,second);
          stack.push(o);
          o.firstPart=part;
          if (second instanceof OrItem) {
            o.firstPart=((OrItem)second).firstPart;
          }
          if (second instanceof OrItem) {
            o.firstPart=((OrItem)second).firstPart;
          }
        }
        next=reversed ? sp1 : sp0;
        if ((ti=checkLoop(next,stopPart,loops)) != null) {
          currentRet.add(ti);
        }
 else {
          currentRet.addAll(printGraph(visited,localData,stack,allParts,parent,next,stopPart,loops));
        }
      }
      parseNext=false;
    }
  }
  if (parseNext) {
    List<GraphTargetItem> retCheck=check(code,localData,allParts,stack,parent,part,stopPart,loops,output,currentLoop);
    if (retCheck != null) {
      if (!retCheck.isEmpty()) {
        currentRet.addAll(retCheck);
      }
      parseNext=false;
    }
 else {
      currentRet.addAll(output);
    }
  }
  if (parseNext) {
    if (part.nextParts.size() == 2) {
      GraphTargetItem expr=stack.pop();
      if (expr instanceof LogicalOpItem) {
        expr=((LogicalOpItem)expr).invert();
      }
 else {
        expr=new NotItem(null,expr);
      }
      GraphPart next=getNextCommonPart(part,loops);
      @SuppressWarnings(""String_Node_Str"") Stack<GraphTargetItem> trueStack=(Stack<GraphTargetItem>)stack.clone();
      @SuppressWarnings(""String_Node_Str"") Stack<GraphTargetItem> falseStack=(Stack<GraphTargetItem>)stack.clone();
      int trueStackSizeBefore=trueStack.size();
      int falseStackSizeBefore=falseStack.size();
      List<GraphTargetItem> onTrue=new ArrayList<>();
      boolean isEmpty=part.nextParts.get(0) == part.nextParts.get(1);
      if (isEmpty) {
        next=part.nextParts.get(0);
      }
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      if (next != null) {
        stopPart2.add(next);
      }
      if (!isEmpty) {
        onTrue=printGraph(visited,localData,trueStack,allParts,part,part.nextParts.get(1),stopPart2,loops);
      }
      List<GraphTargetItem> onFalse=new ArrayList<>();
      if (!isEmpty) {
        onFalse=printGraph(visited,localData,falseStack,allParts,part,part.nextParts.get(0),stopPart2,loops);
      }
      if (isEmpty(onTrue) && isEmpty(onFalse) && (trueStack.size() > trueStackSizeBefore)&& (falseStack.size() > falseStackSizeBefore)) {
        stack.push(new TernarOpItem(null,expr,trueStack.pop(),falseStack.pop()));
      }
 else {
        currentRet.add(new IfItem(null,expr,onTrue,onFalse));
      }
      if (next != null) {
        printGraph(visited,localData,stack,allParts,part,next,stopPart,loops,currentRet);
      }
    }
 else     if (part.nextParts.size() == 1) {
      boolean nextloop=false;
      for (      Loop l : loops) {
        if (part.nextParts.get(0) == l.loopContinue) {
          nextloop=true;
          break;
        }
        if (part.nextParts.get(0) == l.loopPreContinue) {
          nextloop=true;
          break;
        }
      }
      if (true) {
        printGraph(visited,localData,stack,allParts,part,part.nextParts.get(0),stopPart,loops,currentRet);
      }
    }
  }
  if (isLoop) {
    LoopItem li=loopItem;
    boolean loopTypeFound=false;
    boolean hasContinue=false;
    processIfs(loopItem.commands);
    checkContinueAtTheEnd(loopItem.commands,currentLoop);
    List<ContinueItem> continues=loopItem.getContinues();
    for (    ContinueItem c : continues) {
      if (c.loopId == currentLoop.id) {
        hasContinue=true;
        break;
      }
    }
    if (!hasContinue) {
      if (currentLoop.loopPreContinue != null) {
        List<GraphPart> stopContPart=new ArrayList<>();
        stopContPart.add(currentLoop.loopContinue);
        GraphPart precoBackup=currentLoop.loopPreContinue;
        currentLoop.loopPreContinue=null;
        loopItem.commands.addAll(printGraph(visited,localData,new Stack<GraphTargetItem>(),allParts,null,precoBackup,stopContPart,loops));
      }
    }
    if (!loopTypeFound && (!loopItem.commands.isEmpty())) {
      if (loopItem.commands.get(0) instanceof IfItem) {
        IfItem ifi=(IfItem)loopItem.commands.get(0);
        List<GraphTargetItem> bodyBranch=null;
        boolean inverted=false;
        boolean breakpos2=false;
        if ((ifi.onTrue.size() == 1) && (ifi.onTrue.get(0) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)ifi.onTrue.get(0);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onFalse;
            inverted=true;
          }
        }
 else         if ((ifi.onFalse.size() == 1) && (ifi.onFalse.get(0) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)ifi.onFalse.get(0);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onTrue;
          }
        }
 else         if (loopItem.commands.size() == 2 && (loopItem.commands.get(1) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)loopItem.commands.get(1);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onTrue;
            breakpos2=true;
          }
        }
        if (bodyBranch != null) {
          int index=ret.indexOf(loopItem);
          ret.remove(index);
          List<GraphTargetItem> exprList=new ArrayList<>();
          GraphTargetItem expr=ifi.expression;
          if (inverted) {
            if (expr instanceof LogicalOpItem) {
              expr=((LogicalOpItem)expr).invert();
            }
 else {
              expr=new NotItem(null,expr);
            }
          }
          exprList.add(expr);
          List<GraphTargetItem> commands=new ArrayList<>();
          commands.addAll(bodyBranch);
          loopItem.commands.remove(0);
          if (breakpos2) {
            loopItem.commands.remove(0);
          }
          commands.addAll(loopItem.commands);
          checkContinueAtTheEnd(commands,currentLoop);
          List<GraphTargetItem> finalComm=new ArrayList<>();
          if (currentLoop.loopPreContinue != null) {
            GraphPart backup=currentLoop.loopPreContinue;
            currentLoop.loopPreContinue=null;
            List<GraphPart> stopPart2=new ArrayList<>(stopPart);
            stopPart2.add(currentLoop.loopContinue);
            finalComm=printGraph(visited,localData,new Stack<GraphTargetItem>(),allParts,null,backup,stopPart2,loops);
            currentLoop.loopPreContinue=backup;
            checkContinueAtTheEnd(finalComm,currentLoop);
          }
          if (!finalComm.isEmpty()) {
            ret.add(index,li=new ForTreeItem(null,currentLoop,new ArrayList<GraphTargetItem>(),exprList.get(exprList.size() - 1),finalComm,commands));
          }
 else {
            ret.add(index,li=new WhileItem(null,currentLoop,exprList,commands));
          }
          loopTypeFound=true;
        }
      }
    }
    if (!loopTypeFound && (!loopItem.commands.isEmpty())) {
      if (loopItem.commands.get(loopItem.commands.size() - 1) instanceof IfItem) {
        IfItem ifi=(IfItem)loopItem.commands.get(loopItem.commands.size() - 1);
        List<GraphTargetItem> bodyBranch=null;
        boolean inverted=false;
        if ((ifi.onTrue.size() == 1) && (ifi.onTrue.get(0) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)ifi.onTrue.get(0);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onFalse;
            inverted=true;
          }
        }
 else         if ((ifi.onFalse.size() == 1) && (ifi.onFalse.get(0) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)ifi.onFalse.get(0);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onTrue;
          }
        }
        if (bodyBranch != null) {
          int index=ret.indexOf(loopItem);
          ret.remove(index);
          List<GraphTargetItem> exprList=new ArrayList<>();
          GraphTargetItem expr=ifi.expression;
          if (inverted) {
            if (expr instanceof LogicalOpItem) {
              expr=((LogicalOpItem)expr).invert();
            }
 else {
              expr=new NotItem(null,expr);
            }
          }
          checkContinueAtTheEnd(bodyBranch,currentLoop);
          List<GraphTargetItem> commands=new ArrayList<>();
          if (!bodyBranch.isEmpty()) {
            ret.add(index,loopItem);
          }
 else {
            loopItem.commands.remove(loopItem.commands.size() - 1);
            commands.addAll(loopItem.commands);
            commands.addAll(bodyBranch);
            exprList.add(expr);
            checkContinueAtTheEnd(commands,currentLoop);
            ret.add(index,li=new DoWhileItem(null,currentLoop,commands,exprList));
          }
          loopTypeFound=true;
        }
      }
    }
    if (!loopTypeFound) {
      if (currentLoop.loopPreContinue != null) {
        loopTypeFound=true;
        GraphPart backup=currentLoop.loopPreContinue;
        currentLoop.loopPreContinue=null;
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(currentLoop.loopContinue);
        List<GraphTargetItem> finalComm=printGraph(visited,localData,new Stack<GraphTargetItem>(),allParts,null,backup,stopPart2,loops);
        currentLoop.loopPreContinue=backup;
        checkContinueAtTheEnd(finalComm,currentLoop);
        if (!finalComm.isEmpty()) {
          if (finalComm.get(finalComm.size() - 1) instanceof IfItem) {
            IfItem ifi=(IfItem)finalComm.get(finalComm.size() - 1);
            boolean ok=false;
            boolean invert=false;
            if (((ifi.onTrue.size() == 1) && (ifi.onTrue.get(0) instanceof BreakItem) && (((BreakItem)ifi.onTrue.get(0)).loopId == currentLoop.id)) && ((ifi.onTrue.size() == 1) && (ifi.onFalse.get(0) instanceof ContinueItem) && (((ContinueItem)ifi.onFalse.get(0)).loopId == currentLoop.id))) {
              ok=true;
              invert=true;
            }
            if (((ifi.onTrue.size() == 1) && (ifi.onTrue.get(0) instanceof ContinueItem) && (((ContinueItem)ifi.onTrue.get(0)).loopId == currentLoop.id)) && ((ifi.onTrue.size() == 1) && (ifi.onFalse.get(0) instanceof BreakItem) && (((BreakItem)ifi.onFalse.get(0)).loopId == currentLoop.id))) {
              ok=true;
            }
            if (ok) {
              finalComm.remove(finalComm.size() - 1);
              int index=ret.indexOf(loopItem);
              ret.remove(index);
              List<GraphTargetItem> exprList=new ArrayList<>(finalComm);
              GraphTargetItem expr=ifi.expression;
              if (invert) {
                if (expr instanceof LogicalOpItem) {
                  expr=((LogicalOpItem)expr).invert();
                }
 else {
                  expr=new NotItem(null,expr);
                }
              }
              exprList.add(expr);
              ret.add(index,li=new DoWhileItem(null,currentLoop,loopItem.commands,exprList));
            }
          }
        }
      }
    }
    if (!loopTypeFound) {
      checkContinueAtTheEnd(loopItem.commands,currentLoop);
    }
    currentLoop.phase=2;
    GraphTargetItem replaced=checkLoop(li,localData,loops);
    if (replaced != li) {
      int index=ret.indexOf(li);
      ret.remove(index);
      if (replaced != null) {
        ret.add(index,replaced);
      }
    }
    if (currentLoop.loopBreak != null) {
      ret.addAll(printGraph(visited,localData,stack,allParts,part,currentLoop.loopBreak,stopPart,loops));
    }
  }
  return ret;
}","protected List<GraphTargetItem> printGraph(List<GraphPart> visited,List<Object> localData,Stack<GraphTargetItem> stack,List<GraphPart> allParts,GraphPart parent,GraphPart part,List<GraphPart> stopPart,List<Loop> loops,List<GraphTargetItem> ret){
  if (stopPart == null) {
    stopPart=new ArrayList<>();
  }
  if (visited.contains(part)) {
  }
 else {
    visited.add(part);
  }
  if (ret == null) {
    ret=new ArrayList<>();
  }
  boolean debugMode=false;
  if (debugMode) {
    System.err.println(""String_Node_Str"" + part + ""String_Node_Str""+ part.nextParts.size());
  }
  if (part == null) {
    return ret;
  }
  part=checkPart(localData,part);
  if (part == null) {
    return ret;
  }
  if (part.ignored) {
    return ret;
  }
  List<GraphPart> loopContinues=getLoopsContinues(loops);
  boolean isLoop=false;
  Loop currentLoop=null;
  for (  Loop el : loops) {
    if ((el.loopContinue == part) && (el.phase == 0)) {
      currentLoop=el;
      currentLoop.phase=1;
      isLoop=true;
      break;
    }
  }
  if (debugMode) {
    System.err.println(""String_Node_Str"" + loops.size());
  }
  for (int l=loops.size() - 1; l >= 0; l--) {
    Loop el=loops.get(l);
    if (el == currentLoop) {
      if (debugMode) {
        System.err.println(""String_Node_Str"" + el);
      }
      continue;
    }
    if (el.phase != 1) {
      if (debugMode) {
      }
      continue;
    }
    if (el.loopBreak == part) {
      if (currentLoop != null) {
        currentLoop.phase=0;
      }
      ret.add(new BreakItem(null,el.id));
      return ret;
    }
    if (el.loopPreContinue == part) {
      if (currentLoop != null) {
        currentLoop.phase=0;
      }
      ret.add(new ContinueItem(null,el.id));
      return ret;
    }
    if (el.loopContinue == part) {
      if (currentLoop != null) {
        currentLoop.phase=0;
      }
      ret.add(new ContinueItem(null,el.id));
      return ret;
    }
  }
  if (stopPart.contains(part)) {
    if (currentLoop != null) {
      currentLoop.phase=0;
    }
    return ret;
  }
  if ((part != null) && (code.size() <= part.start)) {
    ret.add(new ScriptEndItem());
    return ret;
  }
  List<GraphTargetItem> currentRet=ret;
  UniversalLoopItem loopItem=null;
  if (isLoop) {
    loopItem=new UniversalLoopItem(null,currentLoop);
    currentRet.add(loopItem);
    loopItem.commands=new ArrayList<>();
    currentRet=loopItem.commands;
  }
  boolean parseNext=true;
  List<GraphTargetItem> output=new ArrayList<>();
  List<GraphPart> parts=new ArrayList<>();
  if (part instanceof GraphPartMulti) {
    parts=((GraphPartMulti)part).parts;
  }
 else {
    parts.add(part);
  }
  int end=part.end;
  for (  GraphPart p : parts) {
    end=p.end;
    int start=p.start;
    try {
      output.addAll(code.translatePart(p,localData,stack,start,end));
      if ((end >= code.size() - 1) && p.nextParts.isEmpty()) {
        output.add(new ScriptEndItem());
      }
    }
 catch (    Exception ex) {
      Logger.getLogger(Graph.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
      return ret;
    }
  }
  if (part.nextParts.size() == 2) {
    if ((stack.size() >= 2) && (stack.get(stack.size() - 1) instanceof NotItem) && (((NotItem)(stack.get(stack.size() - 1))).getOriginal().getNotCoerced() == stack.get(stack.size() - 2).getNotCoerced())) {
      currentRet.addAll(output);
      GraphPart sp0=getNextNoJump(part.nextParts.get(0));
      GraphPart sp1=getNextNoJump(part.nextParts.get(1));
      boolean reversed=false;
      loopContinues=getLoopsContinues(loops);
      loopContinues.add(part);
      if (sp1.leadsTo(code,sp0,loops)) {
      }
 else       if (sp0.leadsTo(code,sp1,loops)) {
        reversed=true;
      }
      GraphPart next=reversed ? sp0 : sp1;
      GraphTargetItem ti;
      if ((ti=checkLoop(next,stopPart,loops)) != null) {
        currentRet.add(ti);
      }
 else {
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(reversed ? sp1 : sp0);
        printGraph(visited,localData,stack,allParts,parent,next,stopPart2,loops);
        GraphTargetItem second=stack.pop();
        GraphTargetItem first=stack.pop();
        if (!reversed) {
          AndItem a=new AndItem(null,first,second);
          stack.push(a);
          a.firstPart=part;
          if (second instanceof AndItem) {
            a.firstPart=((AndItem)second).firstPart;
          }
          if (second instanceof OrItem) {
            a.firstPart=((OrItem)second).firstPart;
          }
        }
 else {
          OrItem o=new OrItem(null,first,second);
          stack.push(o);
          o.firstPart=part;
          if (second instanceof AndItem) {
            o.firstPart=((AndItem)second).firstPart;
          }
          if (second instanceof OrItem) {
            o.firstPart=((OrItem)second).firstPart;
          }
        }
        next=reversed ? sp1 : sp0;
        if ((ti=checkLoop(next,stopPart,loops)) != null) {
          currentRet.add(ti);
        }
 else {
          currentRet.addAll(printGraph(visited,localData,stack,allParts,parent,next,stopPart,loops));
        }
      }
      parseNext=false;
    }
 else     if ((stack.size() >= 2) && (stack.get(stack.size() - 1).getNotCoerced() == stack.get(stack.size() - 2).getNotCoerced())) {
      currentRet.addAll(output);
      GraphPart sp0=getNextNoJump(part.nextParts.get(0));
      GraphPart sp1=getNextNoJump(part.nextParts.get(1));
      boolean reversed=false;
      loopContinues=getLoopsContinues(loops);
      loopContinues.add(part);
      if (sp1.leadsTo(code,sp0,loops)) {
      }
 else       if (sp0.leadsTo(code,sp1,loops)) {
        reversed=true;
      }
      GraphPart next=reversed ? sp0 : sp1;
      GraphTargetItem ti;
      if ((ti=checkLoop(next,stopPart,loops)) != null) {
        currentRet.add(ti);
      }
 else {
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(reversed ? sp1 : sp0);
        printGraph(visited,localData,stack,allParts,parent,next,stopPart2,loops);
        GraphTargetItem second=stack.pop();
        GraphTargetItem first=stack.pop();
        if (reversed) {
          AndItem a=new AndItem(null,first,second);
          stack.push(a);
          a.firstPart=part;
          if (second instanceof AndItem) {
            a.firstPart=((AndItem)second).firstPart;
          }
          if (second instanceof OrItem) {
            a.firstPart=((AndItem)second).firstPart;
          }
        }
 else {
          OrItem o=new OrItem(null,first,second);
          stack.push(o);
          o.firstPart=part;
          if (second instanceof OrItem) {
            o.firstPart=((OrItem)second).firstPart;
          }
          if (second instanceof OrItem) {
            o.firstPart=((OrItem)second).firstPart;
          }
        }
        next=reversed ? sp1 : sp0;
        if ((ti=checkLoop(next,stopPart,loops)) != null) {
          currentRet.add(ti);
        }
 else {
          currentRet.addAll(printGraph(visited,localData,stack,allParts,parent,next,stopPart,loops));
        }
      }
      parseNext=false;
    }
  }
  if (parseNext) {
    List<GraphTargetItem> retCheck=check(code,localData,allParts,stack,parent,part,stopPart,loops,output,currentLoop);
    if (retCheck != null) {
      if (!retCheck.isEmpty()) {
        currentRet.addAll(retCheck);
      }
      parseNext=false;
    }
 else {
      currentRet.addAll(output);
    }
  }
  if (parseNext) {
    if (part.nextParts.size() > 2) {
      GraphPart next=getMostCommonPart(part.nextParts,loops);
      List<GraphPart> vis=new ArrayList<>();
      GraphTargetItem switchedItem=stack.pop();
      List<GraphTargetItem> caseValues=new ArrayList<>();
      List<List<GraphTargetItem>> caseCommands=new ArrayList<>();
      List<GraphTargetItem> defaultCommands=new ArrayList<>();
      List<Integer> valueMappings=new ArrayList<>();
      Loop swLoop=new Loop(loops.size(),null,next);
      swLoop.phase=1;
      loops.add(swLoop);
      boolean first=false;
      for (      GraphPart p : part.nextParts) {
        if (vis.contains(p)) {
          valueMappings.add(caseCommands.size() - 1);
          continue;
        }
        if (!first) {
          valueMappings.add(caseCommands.size());
        }
        List<GraphPart> stopPart2=new ArrayList<>();
        if (next != null) {
          stopPart2.add(next);
        }
 else         if (!stopPart.isEmpty()) {
          stopPart2.add(stopPart.get(stopPart.size() - 1));
        }
        for (        GraphPart p2 : part.nextParts) {
          if (p2 == p) {
            continue;
          }
          if (!stopPart2.contains(p2)) {
            stopPart2.add(p2);
          }
        }
        if (next != p) {
          if (first) {
            defaultCommands=printGraph(visited,localData,stack,allParts,part,p,stopPart2,loops);
          }
 else {
            caseCommands.add(printGraph(visited,localData,stack,allParts,part,p,stopPart2,loops));
          }
          vis.add(p);
        }
        first=false;
      }
      SwitchItem sw=new SwitchItem(null,null,switchedItem,caseValues,caseCommands,defaultCommands,valueMappings);
      currentRet.add(sw);
      swLoop.phase=2;
      if (next != null) {
        currentRet.addAll(printGraph(visited,localData,stack,allParts,part,next,stopPart,loops));
      }
    }
 else     if (part.nextParts.size() == 2) {
      GraphTargetItem expr=stack.pop();
      if (expr instanceof LogicalOpItem) {
        expr=((LogicalOpItem)expr).invert();
      }
 else {
        expr=new NotItem(null,expr);
      }
      GraphPart next=getNextCommonPart(part,loops);
      @SuppressWarnings(""String_Node_Str"") Stack<GraphTargetItem> trueStack=(Stack<GraphTargetItem>)stack.clone();
      @SuppressWarnings(""String_Node_Str"") Stack<GraphTargetItem> falseStack=(Stack<GraphTargetItem>)stack.clone();
      int trueStackSizeBefore=trueStack.size();
      int falseStackSizeBefore=falseStack.size();
      List<GraphTargetItem> onTrue=new ArrayList<>();
      boolean isEmpty=part.nextParts.get(0) == part.nextParts.get(1);
      if (isEmpty) {
        next=part.nextParts.get(0);
      }
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      if (next != null) {
        stopPart2.add(next);
      }
      if (!isEmpty) {
        onTrue=printGraph(visited,localData,trueStack,allParts,part,part.nextParts.get(1),stopPart2,loops);
      }
      List<GraphTargetItem> onFalse=new ArrayList<>();
      if (!isEmpty) {
        onFalse=printGraph(visited,localData,falseStack,allParts,part,part.nextParts.get(0),stopPart2,loops);
      }
      if (isEmpty(onTrue) && isEmpty(onFalse) && (trueStack.size() > trueStackSizeBefore)&& (falseStack.size() > falseStackSizeBefore)) {
        stack.push(new TernarOpItem(null,expr,trueStack.pop(),falseStack.pop()));
      }
 else {
        currentRet.add(new IfItem(null,expr,onTrue,onFalse));
      }
      if (next != null) {
        printGraph(visited,localData,stack,allParts,part,next,stopPart,loops,currentRet);
      }
    }
 else     if (part.nextParts.size() == 1) {
      boolean nextloop=false;
      for (      Loop l : loops) {
        if (part.nextParts.get(0) == l.loopContinue) {
          nextloop=true;
          break;
        }
        if (part.nextParts.get(0) == l.loopPreContinue) {
          nextloop=true;
          break;
        }
      }
      if (true) {
        printGraph(visited,localData,stack,allParts,part,part.nextParts.get(0),stopPart,loops,currentRet);
      }
    }
  }
  if (isLoop) {
    LoopItem li=loopItem;
    boolean loopTypeFound=false;
    boolean hasContinue=false;
    processIfs(loopItem.commands);
    checkContinueAtTheEnd(loopItem.commands,currentLoop);
    List<ContinueItem> continues=loopItem.getContinues();
    for (    ContinueItem c : continues) {
      if (c.loopId == currentLoop.id) {
        hasContinue=true;
        break;
      }
    }
    if (!hasContinue) {
      if (currentLoop.loopPreContinue != null) {
        List<GraphPart> stopContPart=new ArrayList<>();
        stopContPart.add(currentLoop.loopContinue);
        GraphPart precoBackup=currentLoop.loopPreContinue;
        currentLoop.loopPreContinue=null;
        loopItem.commands.addAll(printGraph(visited,localData,new Stack<GraphTargetItem>(),allParts,null,precoBackup,stopContPart,loops));
      }
    }
    if (!loopTypeFound && (!loopItem.commands.isEmpty())) {
      if (loopItem.commands.get(0) instanceof IfItem) {
        IfItem ifi=(IfItem)loopItem.commands.get(0);
        List<GraphTargetItem> bodyBranch=null;
        boolean inverted=false;
        boolean breakpos2=false;
        if ((ifi.onTrue.size() == 1) && (ifi.onTrue.get(0) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)ifi.onTrue.get(0);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onFalse;
            inverted=true;
          }
        }
 else         if ((ifi.onFalse.size() == 1) && (ifi.onFalse.get(0) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)ifi.onFalse.get(0);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onTrue;
          }
        }
 else         if (loopItem.commands.size() == 2 && (loopItem.commands.get(1) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)loopItem.commands.get(1);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onTrue;
            breakpos2=true;
          }
        }
        if (bodyBranch != null) {
          int index=ret.indexOf(loopItem);
          ret.remove(index);
          List<GraphTargetItem> exprList=new ArrayList<>();
          GraphTargetItem expr=ifi.expression;
          if (inverted) {
            if (expr instanceof LogicalOpItem) {
              expr=((LogicalOpItem)expr).invert();
            }
 else {
              expr=new NotItem(null,expr);
            }
          }
          exprList.add(expr);
          List<GraphTargetItem> commands=new ArrayList<>();
          commands.addAll(bodyBranch);
          loopItem.commands.remove(0);
          if (breakpos2) {
            loopItem.commands.remove(0);
          }
          commands.addAll(loopItem.commands);
          checkContinueAtTheEnd(commands,currentLoop);
          List<GraphTargetItem> finalComm=new ArrayList<>();
          if (currentLoop.loopPreContinue != null) {
            GraphPart backup=currentLoop.loopPreContinue;
            currentLoop.loopPreContinue=null;
            List<GraphPart> stopPart2=new ArrayList<>(stopPart);
            stopPart2.add(currentLoop.loopContinue);
            finalComm=printGraph(visited,localData,new Stack<GraphTargetItem>(),allParts,null,backup,stopPart2,loops);
            currentLoop.loopPreContinue=backup;
            checkContinueAtTheEnd(finalComm,currentLoop);
          }
          if (!finalComm.isEmpty()) {
            ret.add(index,li=new ForTreeItem(null,currentLoop,new ArrayList<GraphTargetItem>(),exprList.get(exprList.size() - 1),finalComm,commands));
          }
 else {
            ret.add(index,li=new WhileItem(null,currentLoop,exprList,commands));
          }
          loopTypeFound=true;
        }
      }
    }
    if (!loopTypeFound && (!loopItem.commands.isEmpty())) {
      if (loopItem.commands.get(loopItem.commands.size() - 1) instanceof IfItem) {
        IfItem ifi=(IfItem)loopItem.commands.get(loopItem.commands.size() - 1);
        List<GraphTargetItem> bodyBranch=null;
        boolean inverted=false;
        if ((ifi.onTrue.size() == 1) && (ifi.onTrue.get(0) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)ifi.onTrue.get(0);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onFalse;
            inverted=true;
          }
        }
 else         if ((ifi.onFalse.size() == 1) && (ifi.onFalse.get(0) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)ifi.onFalse.get(0);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onTrue;
          }
        }
        if (bodyBranch != null) {
          int index=ret.indexOf(loopItem);
          ret.remove(index);
          List<GraphTargetItem> exprList=new ArrayList<>();
          GraphTargetItem expr=ifi.expression;
          if (inverted) {
            if (expr instanceof LogicalOpItem) {
              expr=((LogicalOpItem)expr).invert();
            }
 else {
              expr=new NotItem(null,expr);
            }
          }
          checkContinueAtTheEnd(bodyBranch,currentLoop);
          List<GraphTargetItem> commands=new ArrayList<>();
          if (!bodyBranch.isEmpty()) {
            ret.add(index,loopItem);
          }
 else {
            loopItem.commands.remove(loopItem.commands.size() - 1);
            commands.addAll(loopItem.commands);
            commands.addAll(bodyBranch);
            exprList.add(expr);
            checkContinueAtTheEnd(commands,currentLoop);
            ret.add(index,li=new DoWhileItem(null,currentLoop,commands,exprList));
          }
          loopTypeFound=true;
        }
      }
    }
    if (!loopTypeFound) {
      if (currentLoop.loopPreContinue != null) {
        loopTypeFound=true;
        GraphPart backup=currentLoop.loopPreContinue;
        currentLoop.loopPreContinue=null;
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(currentLoop.loopContinue);
        List<GraphTargetItem> finalComm=printGraph(visited,localData,new Stack<GraphTargetItem>(),allParts,null,backup,stopPart2,loops);
        currentLoop.loopPreContinue=backup;
        checkContinueAtTheEnd(finalComm,currentLoop);
        if (!finalComm.isEmpty()) {
          if (finalComm.get(finalComm.size() - 1) instanceof IfItem) {
            IfItem ifi=(IfItem)finalComm.get(finalComm.size() - 1);
            boolean ok=false;
            boolean invert=false;
            if (((ifi.onTrue.size() == 1) && (ifi.onTrue.get(0) instanceof BreakItem) && (((BreakItem)ifi.onTrue.get(0)).loopId == currentLoop.id)) && ((ifi.onTrue.size() == 1) && (ifi.onFalse.get(0) instanceof ContinueItem) && (((ContinueItem)ifi.onFalse.get(0)).loopId == currentLoop.id))) {
              ok=true;
              invert=true;
            }
            if (((ifi.onTrue.size() == 1) && (ifi.onTrue.get(0) instanceof ContinueItem) && (((ContinueItem)ifi.onTrue.get(0)).loopId == currentLoop.id)) && ((ifi.onTrue.size() == 1) && (ifi.onFalse.get(0) instanceof BreakItem) && (((BreakItem)ifi.onFalse.get(0)).loopId == currentLoop.id))) {
              ok=true;
            }
            if (ok) {
              finalComm.remove(finalComm.size() - 1);
              int index=ret.indexOf(loopItem);
              ret.remove(index);
              List<GraphTargetItem> exprList=new ArrayList<>(finalComm);
              GraphTargetItem expr=ifi.expression;
              if (invert) {
                if (expr instanceof LogicalOpItem) {
                  expr=((LogicalOpItem)expr).invert();
                }
 else {
                  expr=new NotItem(null,expr);
                }
              }
              exprList.add(expr);
              ret.add(index,li=new DoWhileItem(null,currentLoop,loopItem.commands,exprList));
            }
          }
        }
      }
    }
    if (!loopTypeFound) {
      checkContinueAtTheEnd(loopItem.commands,currentLoop);
    }
    currentLoop.phase=2;
    GraphTargetItem replaced=checkLoop(li,localData,loops);
    if (replaced != li) {
      int index=ret.indexOf(li);
      ret.remove(index);
      if (replaced != null) {
        ret.add(index,replaced);
      }
    }
    if (currentLoop.loopBreak != null) {
      ret.addAll(printGraph(visited,localData,stack,allParts,part,currentLoop.loopBreak,stopPart,loops));
    }
  }
  return ret;
}",0.9482212802489672
62152,"private void getPrecontinues(GraphPart parent,GraphPart part,List<Loop> loops,List<GraphPart> stopPart,int level,List<GraphPart> visited){
  boolean debugMode=true;
  if (stopPart == null) {
    stopPart=new ArrayList<>();
  }
  if (debugMode) {
    System.err.println(""String_Node_Str"" + part);
  }
  if (stopPart.contains(part)) {
    return;
  }
  for (  Loop el : loops) {
    if ((el.phase == 2) && (el.loopContinue == part)) {
      throw new RuntimeException(""String_Node_Str"" + el);
    }
    if (el.phase != 1) {
      if (debugMode) {
      }
      continue;
    }
    if (el.loopContinue == part) {
      return;
    }
    if (el.loopPreContinue == part) {
      return;
    }
    if (el.loopBreak == part) {
      return;
    }
  }
  if (visited.contains(part)) {
    List<GraphPart> nextList=new ArrayList<>();
    populateParts(part,nextList);
    Loop nearestLoop=null;
    loopn:     for (    GraphPart n : nextList) {
      for (      Loop l : loops) {
        if (l.loopContinue == n) {
          nearestLoop=l;
          break loopn;
        }
      }
    }
    if ((nearestLoop != null) && (nearestLoop.loopContinue != part)) {
      if (nearestLoop.phase == 1) {
        if ((nearestLoop.loopPreContinue == null)) {
          nearestLoop.loopPreContinue=part;
          return;
        }
      }
    }
  }
  if (!visited.contains(part)) {
    visited.add(part);
  }
  List<GraphPart> loopContinues=getLoopsContinues(loops);
  boolean isLoop=false;
  Loop currentLoop=null;
  for (  Loop el : loops) {
    if ((el.phase == 0) && (el.loopContinue == part)) {
      isLoop=true;
      currentLoop=el;
      el.phase=1;
      break;
    }
  }
  List<GraphPart> nextParts=checkPrecoNextParts(part);
  if (nextParts == null) {
    nextParts=part.nextParts;
  }
  if (nextParts.size() == 2) {
    GraphPart next=getCommonPart(nextParts,loops);
    List<GraphPart> stopParts2=new ArrayList<>();
    if (next != null) {
      stopParts2.add(next);
    }
 else     if (!stopPart.isEmpty()) {
      stopParts2.add(stopPart.get(stopPart.size() - 1));
    }
    if (next != nextParts.get(0)) {
      getPrecontinues(part,nextParts.get(0),loops,next == null ? stopPart : stopParts2,level + 1,visited);
    }
    if (next != nextParts.get(1)) {
      getPrecontinues(part,nextParts.get(1),loops,next == null ? stopPart : stopParts2,level + 1,visited);
    }
    if (next != null) {
      getPrecontinues(part,next,loops,stopPart,level,visited);
    }
  }
  if (nextParts.size() > 2) {
    GraphPart next=getCommonPart(nextParts,loops);
    List<GraphPart> vis=new ArrayList<>();
    for (    GraphPart p : nextParts) {
      if (vis.contains(p)) {
        continue;
      }
      List<GraphPart> stopPart2=new ArrayList<>();
      if (next != null) {
        stopPart2.add(next);
      }
 else       if (!stopPart.isEmpty()) {
        stopPart2.add(stopPart.get(stopPart.size() - 1));
      }
      for (      GraphPart p2 : nextParts) {
        if (p2 == p) {
          continue;
        }
        List<GraphPart> p12=new ArrayList<>();
        p12.add(p);
        p12.add(p2);
        GraphPart n=getCommonPart(p12,loops);
        if (!stopPart2.contains(n)) {
          stopPart2.add(n);
        }
        if (!stopPart2.contains(p2)) {
          stopPart2.add(p2);
        }
      }
      if (next != p) {
        getPrecontinues(part,p,loops,stopPart2,level + 1,visited);
        vis.add(p);
      }
    }
    if (next != null) {
      getPrecontinues(part,next,loops,stopPart,level,visited);
    }
  }
  if (nextParts.size() == 1) {
    getPrecontinues(part,nextParts.get(0),loops,stopPart,level,visited);
  }
  for (  GraphPart t : part.throwParts) {
    if (!visited.contains(t)) {
      getPrecontinues(part,t,loops,stopPart,level,visited);
    }
  }
  if (isLoop) {
    if (currentLoop.loopBreak != null) {
      currentLoop.phase=2;
      getPrecontinues(null,currentLoop.loopBreak,loops,stopPart,level,visited);
    }
  }
}","private void getPrecontinues(GraphPart parent,GraphPart part,List<Loop> loops,List<GraphPart> stopPart){
  markLevels(part,loops);
  looploops:   for (  Loop l : loops) {
    if (l.loopContinue != null) {
      Set<GraphPart> uniqueRefs=new HashSet<>();
      uniqueRefs.addAll(l.loopContinue.refs);
      if (uniqueRefs.size() == 2) {
        List<GraphPart> uniqueRefsList=new ArrayList<>(uniqueRefs);
        if (uniqueRefsList.get(0).discoveredTime > uniqueRefsList.get(1).discoveredTime) {
          part=uniqueRefsList.get(0);
        }
 else {
          part=uniqueRefsList.get(1);
        }
        if (part == l.loopContinue) {
          continue looploops;
        }
        while (part.refs.size() == 1) {
          if (part.refs.get(0).nextParts.size() != 1) {
            continue looploops;
          }
          part=part.refs.get(0);
          if (part == l.loopContinue) {
            break;
          }
        }
        if (part.level == 0 && part != l.loopContinue) {
          l.loopPreContinue=part;
        }
      }
    }
  }
}",0.0813301282051282
62153,"public static boolean isAssociated(){
  if (!Advapi32Util.registryKeyExists(WinReg.HKEY_CLASSES_ROOT,""String_Node_Str"")) {
    return false;
  }
  String clsName=Advapi32Util.registryGetStringValue(WinReg.HKEY_CLASSES_ROOT,""String_Node_Str"",""String_Node_Str"");
  if (clsName == null) {
    return false;
  }
  return Advapi32Util.registryKeyExists(WinReg.HKEY_CLASSES_ROOT,clsName + ""String_Node_Str"");
}","public static boolean isAssociated(){
  if (!Platform.isWindows()) {
    return false;
  }
  if (!Advapi32Util.registryKeyExists(WinReg.HKEY_CLASSES_ROOT,""String_Node_Str"")) {
    return false;
  }
  String clsName=Advapi32Util.registryGetStringValue(WinReg.HKEY_CLASSES_ROOT,""String_Node_Str"",""String_Node_Str"");
  if (clsName == null) {
    return false;
  }
  return Advapi32Util.registryKeyExists(WinReg.HKEY_CLASSES_ROOT,clsName + ""String_Node_Str"");
}",0.9384436701509872
62154,"public static String convertText(List<Tag> tags,TextTag tag,MATRIX matrix,List<FILTER> filters){
  String ret=""String_Node_Str"";
  if (matrix == null) {
    matrix=new MATRIX();
  }
  CSMTextSettingsTag csmts=null;
  String filterStr=""String_Node_Str"";
  if (filters != null) {
    filterStr+=""String_Node_Str"";
    for (    FILTER f : filters) {
      filterStr+=convertFilter(f);
    }
    filterStr+=""String_Node_Str"";
  }
  for (  Tag t : tags) {
    if (t instanceof CSMTextSettingsTag) {
      CSMTextSettingsTag c=(CSMTextSettingsTag)t;
      if (c.textID == tag.getCharacterID()) {
        csmts=c;
        break;
      }
    }
  }
  String fontRenderingMode=""String_Node_Str"";
  String antiAlias=""String_Node_Str"";
  if (csmts != null) {
    if (csmts.thickness == 0 & csmts.sharpness == 0) {
      fontRenderingMode=null;
    }
 else {
      fontRenderingMode=""String_Node_Str"";
    }
    antiAlias=""String_Node_Str"" + doubleToString(csmts.sharpness) + ""String_Node_Str""+ doubleToString(csmts.thickness)+ ""String_Node_Str"";
  }
  String matStr=""String_Node_Str"";
  matStr+=""String_Node_Str"";
  matStr+=convertMatrix(matrix);
  matStr+=""String_Node_Str"";
  if ((tag instanceof DefineTextTag) || (tag instanceof DefineText2Tag)) {
    List<TEXTRECORD> textRecords=new ArrayList<>();
    if (tag instanceof DefineTextTag) {
      textRecords=((DefineTextTag)tag).textRecords;
    }
 else     if (tag instanceof DefineText2Tag) {
      textRecords=((DefineText2Tag)tag).textRecords;
    }
    looprec:     for (    TEXTRECORD rec : textRecords) {
      if (rec.styleFlagsHasFont) {
        for (        Tag t : tags) {
          if (t instanceof FontTag) {
            FontTag ft=(FontTag)t;
            if (ft.getFontId() == rec.fontId) {
              if (ft.isSmall()) {
                fontRenderingMode=""String_Node_Str"";
                break looprec;
              }
            }
          }
        }
      }
    }
    ret+=""String_Node_Str"";
    if (fontRenderingMode != null) {
      ret+=""String_Node_Str"" + fontRenderingMode + ""String_Node_Str"";
    }
    ret+=antiAlias;
    ret+=""String_Node_Str"" + tag.getBounds().getWidth() / 2 + ""String_Node_Str"" + tag.getBounds().getHeight() + ""String_Node_Str"";
    ret+=matStr;
    ret+=""String_Node_Str"";
    int fontId=-1;
    FontTag font=null;
    String fontName=null;
    String psFontName=null;
    String availableFonts[]=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
    int textHeight=-1;
    RGB textColor=null;
    RGBA textColorA=null;
    for (    TEXTRECORD rec : textRecords) {
      if (rec.styleFlagsHasColor) {
        if (tag instanceof DefineTextTag) {
          textColor=rec.textColor;
        }
 else {
          textColorA=rec.textColorA;
        }
      }
      if (rec.styleFlagsHasFont) {
        fontId=rec.fontId;
        fontName=null;
        textHeight=rec.textHeight;
        font=null;
        for (        Tag t : tags) {
          if (t instanceof FontTag) {
            if (((FontTag)t).getFontId() == fontId) {
              font=(FontTag)t;
            }
          }
          if (t instanceof DefineFontNameTag) {
            if (((DefineFontNameTag)t).fontId == fontId) {
              fontName=((DefineFontNameTag)t).fontName;
            }
          }
        }
        if ((fontName == null) && (font != null)) {
          fontName=font.getFontName(tags);
        }
        psFontName=fontName;
        if (fontName != null) {
          for (          String avFont : availableFonts) {
            if (avFont.equals(fontName)) {
              Font f=new Font(fontName,0,10);
              psFontName=f.getPSName();
            }
          }
        }
      }
      if (font != null) {
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"" + xmlString(rec.getText(tags,font)) + ""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"" + twipToPixel(textHeight) + ""String_Node_Str"";
        if (textColor != null) {
          ret+=""String_Node_Str"" + textColor.toHexRGB() + ""String_Node_Str"";
        }
 else         if (textColorA != null) {
          ret+=""String_Node_Str"" + textColorA.toHexRGB() + ""String_Node_Str""+ textColorA.getAlphaFloat()+ ""String_Node_Str"";
        }
        ret+=""String_Node_Str"" + psFontName + ""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
      }
    }
    ret+=""String_Node_Str"";
    ret+=filterStr;
    ret+=""String_Node_Str"";
  }
 else   if (tag instanceof DefineEditTextTag) {
    DefineEditTextTag det=(DefineEditTextTag)tag;
    String tagName;
    for (    Tag t : tags) {
      if (t instanceof FontTag) {
        FontTag ft=(FontTag)t;
        if (ft.getFontId() == det.fontId) {
          if (ft.isSmall()) {
            fontRenderingMode=""String_Node_Str"";
            break;
          }
        }
      }
    }
    if (!det.useOutlines) {
      fontRenderingMode=""String_Node_Str"";
    }
    if (det.wasStatic) {
      tagName=""String_Node_Str"";
    }
 else     if (det.readOnly) {
      tagName=""String_Node_Str"";
    }
 else {
      tagName=""String_Node_Str"";
    }
    ret+=""String_Node_Str"" + tagName;
    if (fontRenderingMode != null) {
      ret+=""String_Node_Str"" + fontRenderingMode + ""String_Node_Str"";
    }
    ret+=antiAlias;
    double width=twipToPixel(det.getBounds().getWidth());
    double height=twipToPixel(det.getBounds().getHeight());
    if (det.hasLayout) {
      width-=twipToPixel(det.rightMargin);
      width-=twipToPixel(det.leftMargin);
    }
    ret+=""String_Node_Str"" + width + ""String_Node_Str"";
    ret+=""String_Node_Str"" + height + ""String_Node_Str"";
    if (det.border) {
      ret+=""String_Node_Str"";
    }
    if (det.html) {
      ret+=""String_Node_Str"";
    }
    if (det.noSelect) {
      ret+=""String_Node_Str"";
    }
    if (det.multiline && det.wordWrap) {
      ret+=""String_Node_Str"";
    }
 else     if (det.multiline && (!det.wordWrap)) {
      ret+=""String_Node_Str"";
    }
 else     if (det.password) {
      ret+=""String_Node_Str"";
    }
    if (det.hasMaxLength) {
      ret+=""String_Node_Str"" + det.maxLength + ""String_Node_Str"";
    }
    if (!det.variableName.equals(""String_Node_Str"")) {
      ret+=""String_Node_Str"" + det.variableName + ""String_Node_Str"";
    }
    ret+=""String_Node_Str"";
    ret+=matStr;
    ret+=""String_Node_Str"";
    if (det.hasText) {
      if (det.html) {
        ret+=convertHTMLText(tags,det,det.initialText);
      }
 else {
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"" + xmlString(det.initialText) + ""String_Node_Str"";
        int leftMargin=-1;
        int rightMargin=-1;
        int indent=-1;
        int lineSpacing=-1;
        String alignment=null;
        boolean italic=false;
        boolean bold=false;
        String fontFace=null;
        int size=-1;
        if (det.hasFont) {
          String fontName=null;
          FontTag ft=null;
          for (          Tag u : tags) {
            if (u instanceof DefineFontNameTag) {
              if (((DefineFontNameTag)u).fontId == det.fontId) {
                fontName=((DefineFontNameTag)u).fontName;
              }
            }
            if (u instanceof FontTag) {
              if (((FontTag)u).getFontId() == det.fontId) {
                ft=(FontTag)u;
              }
            }
            if (fontName != null && ft != null) {
              break;
            }
          }
          if (ft != null) {
            if (fontName == null) {
              fontName=ft.getFontName(tags);
            }
            italic=ft.isItalic();
            bold=ft.isBold();
            size=det.fontHeight;
            fontFace=new Font(fontName,(italic ? Font.ITALIC : 0) | (bold ? Font.BOLD : 0) | (!italic && !bold ? Font.PLAIN : 0),size < 0 ? 10 : size).getPSName();
          }
        }
        if (det.hasLayout) {
          leftMargin=det.leftMargin;
          rightMargin=det.rightMargin;
          indent=det.indent;
          lineSpacing=det.leading;
          String alignNames[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
          alignment=alignNames[det.align];
        }
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        if (alignment != null) {
          ret+=""String_Node_Str"" + alignment + ""String_Node_Str"";
        }
        ret+=""String_Node_Str"";
        if (indent > -1) {
          ret+=""String_Node_Str"" + twipToPixel(indent) + ""String_Node_Str"";
        }
        if (leftMargin > -1) {
          ret+=""String_Node_Str"" + twipToPixel(leftMargin) + ""String_Node_Str"";
        }
        if (lineSpacing > -1) {
          ret+=""String_Node_Str"" + twipToPixel(lineSpacing) + ""String_Node_Str"";
        }
        if (rightMargin > -1) {
          ret+=""String_Node_Str"" + twipToPixel(rightMargin) + ""String_Node_Str"";
        }
        if (size > -1) {
          ret+=""String_Node_Str"" + size + ""String_Node_Str"";
          ret+=""String_Node_Str"" + (size * 20) + ""String_Node_Str"";
        }
        if (fontFace != null) {
          ret+=""String_Node_Str"" + fontFace + ""String_Node_Str"";
        }
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
      }
    }
    ret+=""String_Node_Str"";
    ret+=filterStr;
    ret+=""String_Node_Str"" + tagName + ""String_Node_Str"";
  }
  return ret;
}","public static String convertText(List<Tag> tags,TextTag tag,MATRIX matrix,List<FILTER> filters){
  String ret=""String_Node_Str"";
  if (matrix == null) {
    matrix=new MATRIX();
  }
  CSMTextSettingsTag csmts=null;
  String filterStr=""String_Node_Str"";
  if (filters != null) {
    filterStr+=""String_Node_Str"";
    for (    FILTER f : filters) {
      filterStr+=convertFilter(f);
    }
    filterStr+=""String_Node_Str"";
  }
  for (  Tag t : tags) {
    if (t instanceof CSMTextSettingsTag) {
      CSMTextSettingsTag c=(CSMTextSettingsTag)t;
      if (c.textID == tag.getCharacterID()) {
        csmts=c;
        break;
      }
    }
  }
  String fontRenderingMode=""String_Node_Str"";
  String antiAlias=""String_Node_Str"";
  if (csmts != null) {
    if (csmts.thickness == 0 & csmts.sharpness == 0) {
      fontRenderingMode=null;
    }
 else {
      fontRenderingMode=""String_Node_Str"";
    }
    antiAlias=""String_Node_Str"" + doubleToString(csmts.sharpness) + ""String_Node_Str""+ doubleToString(csmts.thickness)+ ""String_Node_Str"";
  }
  String matStr=""String_Node_Str"";
  matStr+=""String_Node_Str"";
  RECT bounds=tag.getBounds();
  matrix.translateX+=bounds.Xmin;
  matrix.translateY+=bounds.Ymin;
  matStr+=convertMatrix(matrix);
  matStr+=""String_Node_Str"";
  if ((tag instanceof DefineTextTag) || (tag instanceof DefineText2Tag)) {
    List<TEXTRECORD> textRecords=new ArrayList<>();
    if (tag instanceof DefineTextTag) {
      textRecords=((DefineTextTag)tag).textRecords;
    }
 else     if (tag instanceof DefineText2Tag) {
      textRecords=((DefineText2Tag)tag).textRecords;
    }
    looprec:     for (    TEXTRECORD rec : textRecords) {
      if (rec.styleFlagsHasFont) {
        for (        Tag t : tags) {
          if (t instanceof FontTag) {
            FontTag ft=(FontTag)t;
            if (ft.getFontId() == rec.fontId) {
              if (ft.isSmall()) {
                fontRenderingMode=""String_Node_Str"";
                break looprec;
              }
            }
          }
        }
      }
    }
    ret+=""String_Node_Str"";
    if (fontRenderingMode != null) {
      ret+=""String_Node_Str"" + fontRenderingMode + ""String_Node_Str"";
    }
    ret+=antiAlias;
    ret+=""String_Node_Str"" + tag.getBounds().getWidth() / 2 + ""String_Node_Str"" + tag.getBounds().getHeight() + ""String_Node_Str"";
    ret+=matStr;
    ret+=""String_Node_Str"";
    int fontId=-1;
    FontTag font=null;
    String fontName=null;
    String psFontName=null;
    String availableFonts[]=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
    int textHeight=-1;
    RGB textColor=null;
    RGBA textColorA=null;
    for (    TEXTRECORD rec : textRecords) {
      if (rec.styleFlagsHasColor) {
        if (tag instanceof DefineTextTag) {
          textColor=rec.textColor;
        }
 else {
          textColorA=rec.textColorA;
        }
      }
      if (rec.styleFlagsHasFont) {
        fontId=rec.fontId;
        fontName=null;
        textHeight=rec.textHeight;
        font=null;
        for (        Tag t : tags) {
          if (t instanceof FontTag) {
            if (((FontTag)t).getFontId() == fontId) {
              font=(FontTag)t;
            }
          }
          if (t instanceof DefineFontNameTag) {
            if (((DefineFontNameTag)t).fontId == fontId) {
              fontName=((DefineFontNameTag)t).fontName;
            }
          }
        }
        if ((fontName == null) && (font != null)) {
          fontName=font.getFontName(tags);
        }
        psFontName=fontName;
        if (fontName != null) {
          for (          String avFont : availableFonts) {
            if (avFont.equals(fontName)) {
              Font f=new Font(fontName,0,10);
              psFontName=f.getPSName();
            }
          }
        }
      }
      if (font != null) {
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"" + xmlString(rec.getText(tags,font)) + ""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"" + twipToPixel(textHeight) + ""String_Node_Str"";
        if (textColor != null) {
          ret+=""String_Node_Str"" + textColor.toHexRGB() + ""String_Node_Str"";
        }
 else         if (textColorA != null) {
          ret+=""String_Node_Str"" + textColorA.toHexRGB() + ""String_Node_Str""+ textColorA.getAlphaFloat()+ ""String_Node_Str"";
        }
        ret+=""String_Node_Str"" + psFontName + ""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
      }
    }
    ret+=""String_Node_Str"";
    ret+=filterStr;
    ret+=""String_Node_Str"";
  }
 else   if (tag instanceof DefineEditTextTag) {
    DefineEditTextTag det=(DefineEditTextTag)tag;
    String tagName;
    for (    Tag t : tags) {
      if (t instanceof FontTag) {
        FontTag ft=(FontTag)t;
        if (ft.getFontId() == det.fontId) {
          if (ft.isSmall()) {
            fontRenderingMode=""String_Node_Str"";
            break;
          }
        }
      }
    }
    if (!det.useOutlines) {
      fontRenderingMode=""String_Node_Str"";
    }
    if (det.wasStatic) {
      tagName=""String_Node_Str"";
    }
 else     if (det.readOnly) {
      tagName=""String_Node_Str"";
    }
 else {
      tagName=""String_Node_Str"";
    }
    ret+=""String_Node_Str"" + tagName;
    if (fontRenderingMode != null) {
      ret+=""String_Node_Str"" + fontRenderingMode + ""String_Node_Str"";
    }
    ret+=antiAlias;
    double width=twipToPixel(det.getBounds().getWidth());
    double height=twipToPixel(det.getBounds().getHeight());
    if (det.hasLayout) {
      width-=twipToPixel(det.rightMargin);
      width-=twipToPixel(det.leftMargin);
    }
    ret+=""String_Node_Str"" + width + ""String_Node_Str"";
    ret+=""String_Node_Str"" + height + ""String_Node_Str"";
    if (det.border) {
      ret+=""String_Node_Str"";
    }
    if (det.html) {
      ret+=""String_Node_Str"";
    }
    if (det.noSelect) {
      ret+=""String_Node_Str"";
    }
    if (det.multiline && det.wordWrap) {
      ret+=""String_Node_Str"";
    }
 else     if (det.multiline && (!det.wordWrap)) {
      ret+=""String_Node_Str"";
    }
 else     if (det.password) {
      ret+=""String_Node_Str"";
    }
    if (det.hasMaxLength) {
      ret+=""String_Node_Str"" + det.maxLength + ""String_Node_Str"";
    }
    if (!det.variableName.equals(""String_Node_Str"")) {
      ret+=""String_Node_Str"" + det.variableName + ""String_Node_Str"";
    }
    ret+=""String_Node_Str"";
    ret+=matStr;
    ret+=""String_Node_Str"";
    if (det.hasText) {
      if (det.html) {
        ret+=convertHTMLText(tags,det,det.initialText);
      }
 else {
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"" + xmlString(det.initialText) + ""String_Node_Str"";
        int leftMargin=-1;
        int rightMargin=-1;
        int indent=-1;
        int lineSpacing=-1;
        String alignment=null;
        boolean italic=false;
        boolean bold=false;
        String fontFace=null;
        int size=-1;
        if (det.hasFont) {
          String fontName=null;
          FontTag ft=null;
          for (          Tag u : tags) {
            if (u instanceof DefineFontNameTag) {
              if (((DefineFontNameTag)u).fontId == det.fontId) {
                fontName=((DefineFontNameTag)u).fontName;
              }
            }
            if (u instanceof FontTag) {
              if (((FontTag)u).getFontId() == det.fontId) {
                ft=(FontTag)u;
              }
            }
            if (fontName != null && ft != null) {
              break;
            }
          }
          if (ft != null) {
            if (fontName == null) {
              fontName=ft.getFontName(tags);
            }
            italic=ft.isItalic();
            bold=ft.isBold();
            size=det.fontHeight;
            fontFace=new Font(fontName,(italic ? Font.ITALIC : 0) | (bold ? Font.BOLD : 0) | (!italic && !bold ? Font.PLAIN : 0),size < 0 ? 10 : size).getPSName();
          }
        }
        if (det.hasLayout) {
          leftMargin=det.leftMargin;
          rightMargin=det.rightMargin;
          indent=det.indent;
          lineSpacing=det.leading;
          String alignNames[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
          alignment=alignNames[det.align];
        }
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        if (alignment != null) {
          ret+=""String_Node_Str"" + alignment + ""String_Node_Str"";
        }
        ret+=""String_Node_Str"";
        if (indent > -1) {
          ret+=""String_Node_Str"" + twipToPixel(indent) + ""String_Node_Str"";
        }
        if (leftMargin > -1) {
          ret+=""String_Node_Str"" + twipToPixel(leftMargin) + ""String_Node_Str"";
        }
        if (lineSpacing > -1) {
          ret+=""String_Node_Str"" + twipToPixel(lineSpacing) + ""String_Node_Str"";
        }
        if (rightMargin > -1) {
          ret+=""String_Node_Str"" + twipToPixel(rightMargin) + ""String_Node_Str"";
        }
        if (size > -1) {
          ret+=""String_Node_Str"" + size + ""String_Node_Str"";
          ret+=""String_Node_Str"" + (size * 20) + ""String_Node_Str"";
        }
        if (fontFace != null) {
          ret+=""String_Node_Str"" + fontFace + ""String_Node_Str"";
        }
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
      }
    }
    ret+=""String_Node_Str"";
    ret+=filterStr;
    ret+=""String_Node_Str"" + tagName + ""String_Node_Str"";
  }
  return ret;
}",0.9947421530617664
62155,"public static String convertText(List<Tag> tags,TextTag tag,MATRIX matrix,List<FILTER> filters){
  String ret=""String_Node_Str"";
  if (matrix == null) {
    matrix=new MATRIX();
  }
  CSMTextSettingsTag csmts=null;
  String filterStr=""String_Node_Str"";
  if (filters != null) {
    filterStr+=""String_Node_Str"";
    for (    FILTER f : filters) {
      filterStr+=convertFilter(f);
    }
    filterStr+=""String_Node_Str"";
  }
  for (  Tag t : tags) {
    if (t instanceof CSMTextSettingsTag) {
      CSMTextSettingsTag c=(CSMTextSettingsTag)t;
      if (c.textID == tag.getCharacterID()) {
        csmts=c;
        break;
      }
    }
  }
  String fontRenderingMode=""String_Node_Str"";
  String antiAlias=""String_Node_Str"";
  if (csmts != null) {
    if (csmts.thickness == 0 & csmts.sharpness == 0) {
      fontRenderingMode=null;
    }
 else {
      fontRenderingMode=""String_Node_Str"";
    }
    antiAlias=""String_Node_Str"" + doubleToString(csmts.sharpness) + ""String_Node_Str""+ doubleToString(csmts.thickness)+ ""String_Node_Str"";
  }
  String matStr=""String_Node_Str"";
  matStr+=""String_Node_Str"";
  RECT bounds=tag.getBounds();
  matrix.translateX+=bounds.Xmin;
  matrix.translateY+=bounds.Ymin;
  matStr+=convertMatrix(matrix);
  matStr+=""String_Node_Str"";
  if ((tag instanceof DefineTextTag) || (tag instanceof DefineText2Tag)) {
    List<TEXTRECORD> textRecords=new ArrayList<>();
    if (tag instanceof DefineTextTag) {
      textRecords=((DefineTextTag)tag).textRecords;
    }
 else     if (tag instanceof DefineText2Tag) {
      textRecords=((DefineText2Tag)tag).textRecords;
    }
    looprec:     for (    TEXTRECORD rec : textRecords) {
      if (rec.styleFlagsHasFont) {
        for (        Tag t : tags) {
          if (t instanceof FontTag) {
            FontTag ft=(FontTag)t;
            if (ft.getFontId() == rec.fontId) {
              if (ft.isSmall()) {
                fontRenderingMode=""String_Node_Str"";
                break looprec;
              }
            }
          }
        }
      }
    }
    ret+=""String_Node_Str"";
    if (fontRenderingMode != null) {
      ret+=""String_Node_Str"" + fontRenderingMode + ""String_Node_Str"";
    }
    ret+=antiAlias;
    ret+=""String_Node_Str"" + tag.getBounds().getWidth() / 2 + ""String_Node_Str"" + tag.getBounds().getHeight() + ""String_Node_Str"";
    ret+=matStr;
    ret+=""String_Node_Str"";
    int fontId=-1;
    FontTag font=null;
    String fontName=null;
    String psFontName=null;
    String availableFonts[]=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
    int textHeight=-1;
    RGB textColor=null;
    RGBA textColorA=null;
    for (    TEXTRECORD rec : textRecords) {
      if (rec.styleFlagsHasColor) {
        if (tag instanceof DefineTextTag) {
          textColor=rec.textColor;
        }
 else {
          textColorA=rec.textColorA;
        }
      }
      if (rec.styleFlagsHasFont) {
        fontId=rec.fontId;
        fontName=null;
        textHeight=rec.textHeight;
        font=null;
        for (        Tag t : tags) {
          if (t instanceof FontTag) {
            if (((FontTag)t).getFontId() == fontId) {
              font=(FontTag)t;
            }
          }
          if (t instanceof DefineFontNameTag) {
            if (((DefineFontNameTag)t).fontId == fontId) {
              fontName=((DefineFontNameTag)t).fontName;
            }
          }
        }
        if ((fontName == null) && (font != null)) {
          fontName=font.getFontName(tags);
        }
        psFontName=fontName;
        if (fontName != null) {
          for (          String avFont : availableFonts) {
            if (avFont.equals(fontName)) {
              Font f=new Font(fontName,0,10);
              psFontName=f.getPSName();
            }
          }
        }
      }
      if (font != null) {
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"" + xmlString(rec.getText(tags,font)) + ""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"" + twipToPixel(textHeight) + ""String_Node_Str"";
        if (textColor != null) {
          ret+=""String_Node_Str"" + textColor.toHexRGB() + ""String_Node_Str"";
        }
 else         if (textColorA != null) {
          ret+=""String_Node_Str"" + textColorA.toHexRGB() + ""String_Node_Str""+ textColorA.getAlphaFloat()+ ""String_Node_Str"";
        }
        ret+=""String_Node_Str"" + psFontName + ""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
      }
    }
    ret+=""String_Node_Str"";
    ret+=filterStr;
    ret+=""String_Node_Str"";
  }
 else   if (tag instanceof DefineEditTextTag) {
    DefineEditTextTag det=(DefineEditTextTag)tag;
    String tagName;
    for (    Tag t : tags) {
      if (t instanceof FontTag) {
        FontTag ft=(FontTag)t;
        if (ft.getFontId() == det.fontId) {
          if (ft.isSmall()) {
            fontRenderingMode=""String_Node_Str"";
            break;
          }
        }
      }
    }
    if (!det.useOutlines) {
      fontRenderingMode=""String_Node_Str"";
    }
    if (det.wasStatic) {
      tagName=""String_Node_Str"";
    }
 else     if (det.readOnly) {
      tagName=""String_Node_Str"";
    }
 else {
      tagName=""String_Node_Str"";
    }
    ret+=""String_Node_Str"" + tagName;
    if (fontRenderingMode != null) {
      ret+=""String_Node_Str"" + fontRenderingMode + ""String_Node_Str"";
    }
    ret+=antiAlias;
    double width=twipToPixel(det.getBounds().getWidth());
    double height=twipToPixel(det.getBounds().getHeight());
    if (det.hasLayout) {
      width-=twipToPixel(det.rightMargin);
      width-=twipToPixel(det.leftMargin);
    }
    ret+=""String_Node_Str"" + width + ""String_Node_Str"";
    ret+=""String_Node_Str"" + height + ""String_Node_Str"";
    if (det.border) {
      ret+=""String_Node_Str"";
    }
    if (det.html) {
      ret+=""String_Node_Str"";
    }
    if (det.noSelect) {
      ret+=""String_Node_Str"";
    }
    if (det.multiline && det.wordWrap) {
      ret+=""String_Node_Str"";
    }
 else     if (det.multiline && (!det.wordWrap)) {
      ret+=""String_Node_Str"";
    }
 else     if (det.password) {
      ret+=""String_Node_Str"";
    }
    if (det.hasMaxLength) {
      ret+=""String_Node_Str"" + det.maxLength + ""String_Node_Str"";
    }
    if (!det.variableName.equals(""String_Node_Str"")) {
      ret+=""String_Node_Str"" + det.variableName + ""String_Node_Str"";
    }
    ret+=""String_Node_Str"";
    ret+=matStr;
    ret+=""String_Node_Str"";
    if (det.hasText) {
      if (det.html) {
        ret+=convertHTMLText(tags,det,det.initialText);
      }
 else {
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"" + xmlString(det.initialText) + ""String_Node_Str"";
        int leftMargin=-1;
        int rightMargin=-1;
        int indent=-1;
        int lineSpacing=-1;
        String alignment=null;
        boolean italic=false;
        boolean bold=false;
        String fontFace=null;
        int size=-1;
        if (det.hasFont) {
          String fontName=null;
          FontTag ft=null;
          for (          Tag u : tags) {
            if (u instanceof DefineFontNameTag) {
              if (((DefineFontNameTag)u).fontId == det.fontId) {
                fontName=((DefineFontNameTag)u).fontName;
              }
            }
            if (u instanceof FontTag) {
              if (((FontTag)u).getFontId() == det.fontId) {
                ft=(FontTag)u;
              }
            }
            if (fontName != null && ft != null) {
              break;
            }
          }
          if (ft != null) {
            if (fontName == null) {
              fontName=ft.getFontName(tags);
            }
            italic=ft.isItalic();
            bold=ft.isBold();
            size=det.fontHeight;
            fontFace=new Font(fontName,(italic ? Font.ITALIC : 0) | (bold ? Font.BOLD : 0) | (!italic && !bold ? Font.PLAIN : 0),size < 0 ? 10 : size).getPSName();
          }
        }
        if (det.hasLayout) {
          leftMargin=det.leftMargin;
          rightMargin=det.rightMargin;
          indent=det.indent;
          lineSpacing=det.leading;
          String alignNames[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
          alignment=alignNames[det.align];
        }
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        if (alignment != null) {
          ret+=""String_Node_Str"" + alignment + ""String_Node_Str"";
        }
        ret+=""String_Node_Str"";
        if (indent > -1) {
          ret+=""String_Node_Str"" + twipToPixel(indent) + ""String_Node_Str"";
        }
        if (leftMargin > -1) {
          ret+=""String_Node_Str"" + twipToPixel(leftMargin) + ""String_Node_Str"";
        }
        if (lineSpacing > -1) {
          ret+=""String_Node_Str"" + twipToPixel(lineSpacing) + ""String_Node_Str"";
        }
        if (rightMargin > -1) {
          ret+=""String_Node_Str"" + twipToPixel(rightMargin) + ""String_Node_Str"";
        }
        if (size > -1) {
          ret+=""String_Node_Str"" + size + ""String_Node_Str"";
          ret+=""String_Node_Str"" + (size * 20) + ""String_Node_Str"";
        }
        if (fontFace != null) {
          ret+=""String_Node_Str"" + fontFace + ""String_Node_Str"";
        }
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
      }
    }
    ret+=""String_Node_Str"";
    ret+=filterStr;
    ret+=""String_Node_Str"" + tagName + ""String_Node_Str"";
  }
  return ret;
}","public static String convertText(List<Tag> tags,TextTag tag,MATRIX matrix,List<FILTER> filters){
  String ret=""String_Node_Str"";
  if (matrix == null) {
    matrix=new MATRIX();
  }
  CSMTextSettingsTag csmts=null;
  String filterStr=""String_Node_Str"";
  if (filters != null) {
    filterStr+=""String_Node_Str"";
    for (    FILTER f : filters) {
      filterStr+=convertFilter(f);
    }
    filterStr+=""String_Node_Str"";
  }
  for (  Tag t : tags) {
    if (t instanceof CSMTextSettingsTag) {
      CSMTextSettingsTag c=(CSMTextSettingsTag)t;
      if (c.textID == tag.getCharacterID()) {
        csmts=c;
        break;
      }
    }
  }
  String fontRenderingMode=""String_Node_Str"";
  String antiAlias=""String_Node_Str"";
  if (csmts != null) {
    if (csmts.thickness == 0 & csmts.sharpness == 0) {
      fontRenderingMode=null;
    }
 else {
      fontRenderingMode=""String_Node_Str"";
    }
    antiAlias=""String_Node_Str"" + doubleToString(csmts.sharpness) + ""String_Node_Str""+ doubleToString(csmts.thickness)+ ""String_Node_Str"";
  }
  String matStr=""String_Node_Str"";
  matStr+=""String_Node_Str"";
  RECT bounds=tag.getBounds();
  matrix.translateX+=bounds.Xmin + 40;
  matrix.translateY+=bounds.Ymin + 40;
  matStr+=convertMatrix(matrix);
  matStr+=""String_Node_Str"";
  if ((tag instanceof DefineTextTag) || (tag instanceof DefineText2Tag)) {
    List<TEXTRECORD> textRecords=new ArrayList<>();
    if (tag instanceof DefineTextTag) {
      textRecords=((DefineTextTag)tag).textRecords;
    }
 else     if (tag instanceof DefineText2Tag) {
      textRecords=((DefineText2Tag)tag).textRecords;
    }
    looprec:     for (    TEXTRECORD rec : textRecords) {
      if (rec.styleFlagsHasFont) {
        for (        Tag t : tags) {
          if (t instanceof FontTag) {
            FontTag ft=(FontTag)t;
            if (ft.getFontId() == rec.fontId) {
              if (ft.isSmall()) {
                fontRenderingMode=""String_Node_Str"";
                break looprec;
              }
            }
          }
        }
      }
    }
    ret+=""String_Node_Str"";
    if (fontRenderingMode != null) {
      ret+=""String_Node_Str"" + fontRenderingMode + ""String_Node_Str"";
    }
    ret+=antiAlias;
    ret+=""String_Node_Str"" + tag.getBounds().getWidth() / 2 + ""String_Node_Str"" + tag.getBounds().getHeight() + ""String_Node_Str"";
    ret+=matStr;
    ret+=""String_Node_Str"";
    int fontId=-1;
    FontTag font=null;
    String fontName=null;
    String psFontName=null;
    String availableFonts[]=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
    int textHeight=-1;
    RGB textColor=null;
    RGBA textColorA=null;
    for (    TEXTRECORD rec : textRecords) {
      if (rec.styleFlagsHasColor) {
        if (tag instanceof DefineTextTag) {
          textColor=rec.textColor;
        }
 else {
          textColorA=rec.textColorA;
        }
      }
      if (rec.styleFlagsHasFont) {
        fontId=rec.fontId;
        fontName=null;
        textHeight=rec.textHeight;
        font=null;
        for (        Tag t : tags) {
          if (t instanceof FontTag) {
            if (((FontTag)t).getFontId() == fontId) {
              font=(FontTag)t;
            }
          }
          if (t instanceof DefineFontNameTag) {
            if (((DefineFontNameTag)t).fontId == fontId) {
              fontName=((DefineFontNameTag)t).fontName;
            }
          }
        }
        if ((fontName == null) && (font != null)) {
          fontName=font.getFontName(tags);
        }
        psFontName=fontName;
        if (fontName != null) {
          for (          String avFont : availableFonts) {
            if (avFont.equals(fontName)) {
              Font f=new Font(fontName,0,10);
              psFontName=f.getPSName();
            }
          }
        }
      }
      if (font != null) {
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"" + xmlString(rec.getText(tags,font)) + ""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"" + twipToPixel(textHeight) + ""String_Node_Str"";
        if (textColor != null) {
          ret+=""String_Node_Str"" + textColor.toHexRGB() + ""String_Node_Str"";
        }
 else         if (textColorA != null) {
          ret+=""String_Node_Str"" + textColorA.toHexRGB() + ""String_Node_Str""+ textColorA.getAlphaFloat()+ ""String_Node_Str"";
        }
        ret+=""String_Node_Str"" + psFontName + ""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
      }
    }
    ret+=""String_Node_Str"";
    ret+=filterStr;
    ret+=""String_Node_Str"";
  }
 else   if (tag instanceof DefineEditTextTag) {
    DefineEditTextTag det=(DefineEditTextTag)tag;
    String tagName;
    for (    Tag t : tags) {
      if (t instanceof FontTag) {
        FontTag ft=(FontTag)t;
        if (ft.getFontId() == det.fontId) {
          if (ft.isSmall()) {
            fontRenderingMode=""String_Node_Str"";
            break;
          }
        }
      }
    }
    if (!det.useOutlines) {
      fontRenderingMode=""String_Node_Str"";
    }
    if (det.wasStatic) {
      tagName=""String_Node_Str"";
    }
 else     if (det.readOnly) {
      tagName=""String_Node_Str"";
    }
 else {
      tagName=""String_Node_Str"";
    }
    ret+=""String_Node_Str"" + tagName;
    if (fontRenderingMode != null) {
      ret+=""String_Node_Str"" + fontRenderingMode + ""String_Node_Str"";
    }
    ret+=antiAlias;
    double width=twipToPixel(bounds.getWidth());
    double height=twipToPixel(bounds.getHeight());
    double padding=2;
    width-=2 * padding;
    height-=2 * padding;
    if (det.hasLayout) {
      width-=twipToPixel(det.rightMargin);
      width-=twipToPixel(det.leftMargin);
    }
    ret+=""String_Node_Str"" + width + ""String_Node_Str"";
    ret+=""String_Node_Str"" + height + ""String_Node_Str"";
    if (det.border) {
      ret+=""String_Node_Str"";
    }
    if (det.html) {
      ret+=""String_Node_Str"";
    }
    if (det.noSelect) {
      ret+=""String_Node_Str"";
    }
    if (det.multiline && det.wordWrap) {
      ret+=""String_Node_Str"";
    }
 else     if (det.multiline && (!det.wordWrap)) {
      ret+=""String_Node_Str"";
    }
 else     if (det.password) {
      ret+=""String_Node_Str"";
    }
    if (det.hasMaxLength) {
      ret+=""String_Node_Str"" + det.maxLength + ""String_Node_Str"";
    }
    if (!det.variableName.equals(""String_Node_Str"")) {
      ret+=""String_Node_Str"" + det.variableName + ""String_Node_Str"";
    }
    ret+=""String_Node_Str"";
    ret+=matStr;
    ret+=""String_Node_Str"";
    if (det.hasText) {
      if (det.html) {
        ret+=convertHTMLText(tags,det,det.initialText);
      }
 else {
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"" + xmlString(det.initialText) + ""String_Node_Str"";
        int leftMargin=-1;
        int rightMargin=-1;
        int indent=-1;
        int lineSpacing=-1;
        String alignment=null;
        boolean italic=false;
        boolean bold=false;
        String fontFace=null;
        int size=-1;
        if (det.hasFont) {
          String fontName=null;
          FontTag ft=null;
          for (          Tag u : tags) {
            if (u instanceof DefineFontNameTag) {
              if (((DefineFontNameTag)u).fontId == det.fontId) {
                fontName=((DefineFontNameTag)u).fontName;
              }
            }
            if (u instanceof FontTag) {
              if (((FontTag)u).getFontId() == det.fontId) {
                ft=(FontTag)u;
              }
            }
            if (fontName != null && ft != null) {
              break;
            }
          }
          if (ft != null) {
            if (fontName == null) {
              fontName=ft.getFontName(tags);
            }
            italic=ft.isItalic();
            bold=ft.isBold();
            size=det.fontHeight;
            fontFace=new Font(fontName,(italic ? Font.ITALIC : 0) | (bold ? Font.BOLD : 0) | (!italic && !bold ? Font.PLAIN : 0),size < 0 ? 10 : size).getPSName();
          }
        }
        if (det.hasLayout) {
          leftMargin=det.leftMargin;
          rightMargin=det.rightMargin;
          indent=det.indent;
          lineSpacing=det.leading;
          String alignNames[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
          alignment=alignNames[det.align];
        }
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        if (alignment != null) {
          ret+=""String_Node_Str"" + alignment + ""String_Node_Str"";
        }
        ret+=""String_Node_Str"";
        if (indent > -1) {
          ret+=""String_Node_Str"" + twipToPixel(indent) + ""String_Node_Str"";
        }
        if (leftMargin > -1) {
          ret+=""String_Node_Str"" + twipToPixel(leftMargin) + ""String_Node_Str"";
        }
        if (lineSpacing > -1) {
          ret+=""String_Node_Str"" + twipToPixel(lineSpacing) + ""String_Node_Str"";
        }
        if (rightMargin > -1) {
          ret+=""String_Node_Str"" + twipToPixel(rightMargin) + ""String_Node_Str"";
        }
        if (size > -1) {
          ret+=""String_Node_Str"" + size + ""String_Node_Str"";
          ret+=""String_Node_Str"" + (size * 20) + ""String_Node_Str"";
        }
        if (fontFace != null) {
          ret+=""String_Node_Str"" + fontFace + ""String_Node_Str"";
        }
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
        ret+=""String_Node_Str"";
      }
    }
    ret+=""String_Node_Str"";
    ret+=filterStr;
    ret+=""String_Node_Str"" + tagName + ""String_Node_Str"";
  }
  return ret;
}",0.9934179348112264
62156,"@Override public String getText(List<Tag> tags){
  String ret=getFormattedText(tags);
  if (html) {
    ret=stripTags(ret);
    ret=entitiesReplace(ret);
  }
  return ret;
}","@Override public String getText(List<Tag> tags){
  String ret=""String_Node_Str"";
  if (hasText) {
    ret=initialText;
  }
  if (html) {
    ret=stripTags(ret);
    ret=entitiesReplace(ret);
  }
  return ret;
}",0.741514360313316
62157,"private String stripTags(String inp){
  boolean intag=false;
  String outp=""String_Node_Str"";
  for (int i=0; i < inp.length(); ++i) {
    if (!intag && inp.charAt(i) == '<') {
      intag=true;
      continue;
    }
    if (intag && inp.charAt(i) == '>') {
      intag=false;
      continue;
    }
    if (!intag) {
      outp=outp + inp.charAt(i);
    }
  }
  return outp;
}","private String stripTags(String inp){
  boolean intag=false;
  String outp=""String_Node_Str"";
  inp=inp.replaceAll(""String_Node_Str"",""String_Node_Str"");
  for (int i=0; i < inp.length(); ++i) {
    if (!intag && inp.charAt(i) == '<') {
      intag=true;
      continue;
    }
    if (intag && inp.charAt(i) == '>') {
      intag=false;
      continue;
    }
    if (!intag) {
      outp=outp + inp.charAt(i);
    }
  }
  return outp;
}",0.9272503082614056
62158,"/** 
 * Constructor
 * @param data Data bytes
 * @param version SWF version
 * @param pos 
 * @throws IOException
 */
public DefineMorphShapeTag(byte data[],int version,long pos) throws IOException {
  super(46,""String_Node_Str"",data,pos);
  SWFInputStream sis=new SWFInputStream(new ByteArrayInputStream(data),version);
  characterId=sis.readUI16();
  startBounds=sis.readRECT();
  endBounds=sis.readRECT();
  long offset=sis.readUI32();
  morphFillStyles=sis.readMORPHFILLSTYLEARRAY();
  morphLineStyles=sis.readMORPHLINESTYLEARRAY(1);
  startEdges=sis.readSHAPE(1);
  endEdges=sis.readSHAPE(1);
}","/** 
 * Constructor
 * @param data Data bytes
 * @param version SWF version
 * @param pos
 * @throws IOException
 */
public DefineMorphShapeTag(byte data[],int version,long pos) throws IOException {
  super(46,""String_Node_Str"",data,pos);
  SWFInputStream sis=new SWFInputStream(new ByteArrayInputStream(data),version);
  characterId=sis.readUI16();
  startBounds=sis.readRECT();
  endBounds=sis.readRECT();
  long offset=sis.readUI32();
  morphFillStyles=sis.readMORPHFILLSTYLEARRAY();
  morphLineStyles=sis.readMORPHLINESTYLEARRAY(1);
  startEdges=sis.readSHAPE(1);
  endEdges=sis.readSHAPE(1);
}",0.9991645781119464
62159,"@Override public String getText(List<Tag> tags){
  FontTag fnt=null;
  String ret=""String_Node_Str"";
  for (  TEXTRECORD rec : textRecords) {
    if (rec.styleFlagsHasFont) {
      for (      Tag t : tags) {
        if (t instanceof FontTag) {
          if (((FontTag)t).getFontId() == rec.fontId) {
            fnt=((FontTag)t);
            break;
          }
        }
      }
    }
    if (rec.styleFlagsHasXOffset || rec.styleFlagsHasYOffset) {
      if (!rec.equals(""String_Node_Str"")) {
        ret+=""String_Node_Str"";
      }
    }
    ret+=rec.getText(tags,fnt);
  }
  return ret;
}","@Override public String getText(List<Tag> tags){
  FontTag fnt=null;
  String ret=""String_Node_Str"";
  for (  TEXTRECORD rec : textRecords) {
    if (rec.styleFlagsHasFont) {
      for (      Tag t : tags) {
        if (t instanceof FontTag) {
          if (((FontTag)t).getFontId() == rec.fontId) {
            fnt=((FontTag)t);
            break;
          }
        }
      }
    }
    if (rec.styleFlagsHasXOffset || rec.styleFlagsHasYOffset) {
      if (!ret.equals(""String_Node_Str"")) {
        ret+=""String_Node_Str"";
      }
    }
    ret+=rec.getText(tags,fnt);
  }
  return ret;
}",0.9983050847457628
62160,"@Override public String getText(List<Tag> tags){
  FontTag fnt=null;
  String ret=""String_Node_Str"";
  for (  TEXTRECORD rec : textRecords) {
    if (rec.styleFlagsHasFont) {
      for (      Tag t : tags) {
        if (t instanceof FontTag) {
          if (((FontTag)t).getFontId() == rec.fontId) {
            fnt=((FontTag)t);
            break;
          }
        }
      }
    }
    if (rec.styleFlagsHasXOffset || rec.styleFlagsHasYOffset) {
      if (!rec.equals(""String_Node_Str"")) {
        ret+=""String_Node_Str"";
      }
    }
    ret+=rec.getText(tags,fnt);
  }
  return ret;
}","@Override public String getText(List<Tag> tags){
  FontTag fnt=null;
  String ret=""String_Node_Str"";
  for (  TEXTRECORD rec : textRecords) {
    if (rec.styleFlagsHasFont) {
      for (      Tag t : tags) {
        if (t instanceof FontTag) {
          if (((FontTag)t).getFontId() == rec.fontId) {
            fnt=((FontTag)t);
            break;
          }
        }
      }
    }
    if (rec.styleFlagsHasXOffset || rec.styleFlagsHasYOffset) {
      if (!ret.equals(""String_Node_Str"")) {
        ret+=""String_Node_Str"";
      }
    }
    ret+=rec.getText(tags,fnt);
  }
  return ret;
}",0.9983050847457628
62161,"/** 
 * Constructor
 * @param data Data bytes
 * @param version SWF version
 * @throws IOException
 */
public DefineFont2Tag(byte data[],int version,long pos) throws IOException {
  super(48,""String_Node_Str"",data,pos);
  SWFInputStream sis=new SWFInputStream(new ByteArrayInputStream(data),version);
  fontId=sis.readUI16();
  fontFlagsHasLayout=sis.readUB(1) == 1;
  fontFlagsShiftJIS=sis.readUB(1) == 1;
  fontFlagsSmallText=sis.readUB(1) == 1;
  fontFlagsANSI=sis.readUB(1) == 1;
  fontFlagsWideOffsets=sis.readUB(1) == 1;
  fontFlagsWideCodes=sis.readUB(1) == 1;
  fontFlagsItalic=sis.readUB(1) == 1;
  fontFlagsBold=sis.readUB(1) == 1;
  languageCode=sis.readLANGCODE();
  int fontNameLen=sis.readUI8();
  fontName=new String(sis.readBytes(fontNameLen));
  numGlyphs=sis.readUI16();
  offsetTable=new long[numGlyphs];
  for (int i=0; i < numGlyphs; i++) {
    if (fontFlagsWideOffsets) {
      offsetTable[i]=sis.readUI32();
    }
 else {
      offsetTable[i]=sis.readUI16();
    }
  }
  long codeTableOffset;
  if (fontFlagsWideOffsets) {
    codeTableOffset=sis.readUI32();
  }
 else {
    codeTableOffset=sis.readUI16();
  }
  glyphShapeTable=new SHAPE[numGlyphs];
  for (int i=0; i < numGlyphs; i++) {
    glyphShapeTable[i]=sis.readSHAPE(1);
  }
  codeTable=new ArrayList<>();
  for (int i=0; i < numGlyphs; i++) {
    if (fontFlagsWideCodes) {
      codeTable.add(sis.readUI16());
    }
 else {
      codeTable.add(sis.readUI8());
    }
  }
  if (fontFlagsHasLayout) {
    fontAscent=sis.readSI16();
    fontDescent=sis.readSI16();
    fontLeading=sis.readSI16();
    fontAdvanceTable=new int[numGlyphs];
    for (int i=0; i < numGlyphs; i++) {
      fontAdvanceTable[i]=sis.readSI16();
    }
    fontBoundsTable=new RECT[numGlyphs];
    for (int i=0; i < numGlyphs; i++) {
      fontBoundsTable[i]=sis.readRECT();
    }
    int kerningCount=sis.readUI16();
    fontKerningTable=new KERNINGRECORD[kerningCount];
    for (int i=0; i < kerningCount; i++) {
      fontKerningTable[i]=sis.readKERNINGRECORD(fontFlagsWideCodes);
    }
  }
}","/** 
 * Constructor
 * @param data Data bytes
 * @param version SWF version
 * @throws IOException
 */
public DefineFont2Tag(byte data[],int version,long pos) throws IOException {
  super(48,""String_Node_Str"",data,pos);
  SWFInputStream sis=new SWFInputStream(new ByteArrayInputStream(data),version);
  fontId=sis.readUI16();
  fontFlagsHasLayout=sis.readUB(1) == 1;
  fontFlagsShiftJIS=sis.readUB(1) == 1;
  fontFlagsSmallText=sis.readUB(1) == 1;
  fontFlagsANSI=sis.readUB(1) == 1;
  fontFlagsWideOffsets=sis.readUB(1) == 1;
  fontFlagsWideCodes=sis.readUB(1) == 1;
  fontFlagsItalic=sis.readUB(1) == 1;
  fontFlagsBold=sis.readUB(1) == 1;
  languageCode=sis.readLANGCODE();
  int fontNameLen=sis.readUI8();
  fontName=new String(sis.readBytes(fontNameLen));
  numGlyphs=sis.readUI16();
  offsetTable=new long[numGlyphs];
  for (int i=0; i < numGlyphs; i++) {
    if (fontFlagsWideOffsets) {
      offsetTable[i]=sis.readUI32();
    }
 else {
      offsetTable[i]=sis.readUI16();
    }
  }
  long codeTableOffset=0;
  if (numGlyphs > 0) {
    if (fontFlagsWideOffsets) {
      codeTableOffset=sis.readUI32();
    }
 else {
      codeTableOffset=sis.readUI16();
    }
  }
  glyphShapeTable=new SHAPE[numGlyphs];
  for (int i=0; i < numGlyphs; i++) {
    glyphShapeTable[i]=sis.readSHAPE(1);
  }
  codeTable=new ArrayList<>();
  for (int i=0; i < numGlyphs; i++) {
    if (fontFlagsWideCodes) {
      codeTable.add(sis.readUI16());
    }
 else {
      codeTable.add(sis.readUI8());
    }
  }
  if (fontFlagsHasLayout) {
    fontAscent=sis.readSI16();
    fontDescent=sis.readSI16();
    fontLeading=sis.readSI16();
    fontAdvanceTable=new int[numGlyphs];
    for (int i=0; i < numGlyphs; i++) {
      fontAdvanceTable[i]=sis.readSI16();
    }
    fontBoundsTable=new RECT[numGlyphs];
    for (int i=0; i < numGlyphs; i++) {
      fontBoundsTable[i]=sis.readRECT();
    }
    int kerningCount=sis.readUI16();
    fontKerningTable=new KERNINGRECORD[kerningCount];
    for (int i=0; i < kerningCount; i++) {
      fontKerningTable[i]=sis.readKERNINGRECORD(fontFlagsWideCodes);
    }
  }
}",0.9895959351560608
62162,"/** 
 * Gets data bytes
 * @param version SWF version
 * @return Bytes of data
 */
@Override public byte[] getData(int version){
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  SWFOutputStream sos=new SWFOutputStream(baos,version);
  try {
    sos.writeUI16(fontId);
    sos.writeUB(1,fontFlagsHasLayout ? 1 : 0);
    sos.writeUB(1,fontFlagsShiftJIS ? 1 : 0);
    sos.writeUB(1,fontFlagsSmallText ? 1 : 0);
    sos.writeUB(1,fontFlagsANSI ? 1 : 0);
    sos.writeUB(1,fontFlagsWideOffsets ? 1 : 0);
    sos.writeUB(1,fontFlagsWideCodes ? 1 : 0);
    sos.writeUB(1,fontFlagsItalic ? 1 : 0);
    sos.writeUB(1,fontFlagsBold ? 1 : 0);
    sos.writeLANGCODE(languageCode);
    sos.writeUI8(fontName.getBytes(""String_Node_Str"").length);
    sos.write(fontName.getBytes(""String_Node_Str""));
    sos.writeUI16(numGlyphs);
    ByteArrayOutputStream baos2=new ByteArrayOutputStream();
    SWFOutputStream sos2=new SWFOutputStream(baos2,version);
    for (int i=0; i < numGlyphs; i++) {
      if (fontFlagsWideOffsets) {
        sos2.writeUI32(offsetTable[i]);
      }
 else {
        sos2.writeUI16((int)offsetTable[i]);
      }
    }
    byte ba2[]=baos2.toByteArray();
    ByteArrayOutputStream baos3=new ByteArrayOutputStream();
    SWFOutputStream sos3=new SWFOutputStream(baos3,version);
    for (int i=0; i < numGlyphs; i++) {
      sos3.writeSHAPE(glyphShapeTable[i],1);
    }
    byte ba3[]=baos3.toByteArray();
    sos.write(ba2);
    long offset=ba2.length + ba3.length;
    if (fontFlagsWideOffsets) {
      sos.writeUI32(offset + 4);
    }
 else {
      sos.writeUI16((int)(offset + 2));
    }
    sos.write(ba3);
    for (int i=0; i < numGlyphs; i++) {
      if (fontFlagsWideCodes) {
        sos.writeUI16(codeTable.get(i));
      }
 else {
        sos.writeUI8(codeTable.get(i));
      }
    }
    if (fontFlagsHasLayout) {
      sos.writeSI16(fontAscent);
      sos.writeSI16(fontDescent);
      sos.writeSI16(fontLeading);
      for (int i=0; i < numGlyphs; i++) {
        sos.writeSI16(fontAdvanceTable[i]);
      }
      for (int i=0; i < numGlyphs; i++) {
        sos.writeRECT(fontBoundsTable[i]);
      }
      sos.writeUI16(fontKerningTable.length);
      for (int k=0; k < fontKerningTable.length; k++) {
        sos.writeKERNINGRECORD(fontKerningTable[k],fontFlagsWideCodes);
      }
    }
  }
 catch (  IOException e) {
  }
  return baos.toByteArray();
}","/** 
 * Gets data bytes
 * @param version SWF version
 * @return Bytes of data
 */
@Override public byte[] getData(int version){
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  SWFOutputStream sos=new SWFOutputStream(baos,version);
  try {
    sos.writeUI16(fontId);
    sos.writeUB(1,fontFlagsHasLayout ? 1 : 0);
    sos.writeUB(1,fontFlagsShiftJIS ? 1 : 0);
    sos.writeUB(1,fontFlagsSmallText ? 1 : 0);
    sos.writeUB(1,fontFlagsANSI ? 1 : 0);
    sos.writeUB(1,fontFlagsWideOffsets ? 1 : 0);
    sos.writeUB(1,fontFlagsWideCodes ? 1 : 0);
    sos.writeUB(1,fontFlagsItalic ? 1 : 0);
    sos.writeUB(1,fontFlagsBold ? 1 : 0);
    sos.writeLANGCODE(languageCode);
    sos.writeUI8(fontName.getBytes(""String_Node_Str"").length);
    sos.write(fontName.getBytes(""String_Node_Str""));
    sos.writeUI16(numGlyphs);
    ByteArrayOutputStream baos2=new ByteArrayOutputStream();
    SWFOutputStream sos2=new SWFOutputStream(baos2,version);
    for (int i=0; i < numGlyphs; i++) {
      if (fontFlagsWideOffsets) {
        sos2.writeUI32(offsetTable[i]);
      }
 else {
        sos2.writeUI16((int)offsetTable[i]);
      }
    }
    byte ba2[]=baos2.toByteArray();
    ByteArrayOutputStream baos3=new ByteArrayOutputStream();
    SWFOutputStream sos3=new SWFOutputStream(baos3,version);
    for (int i=0; i < numGlyphs; i++) {
      sos3.writeSHAPE(glyphShapeTable[i],1);
    }
    byte ba3[]=baos3.toByteArray();
    sos.write(ba2);
    if (numGlyphs > 0) {
      long offset=ba2.length + ba3.length;
      if (fontFlagsWideOffsets) {
        sos.writeUI32(offset + 4);
      }
 else {
        sos.writeUI16((int)(offset + 2));
      }
      sos.write(ba3);
      for (int i=0; i < numGlyphs; i++) {
        if (fontFlagsWideCodes) {
          sos.writeUI16(codeTable.get(i));
        }
 else {
          sos.writeUI8(codeTable.get(i));
        }
      }
    }
    if (fontFlagsHasLayout) {
      sos.writeSI16(fontAscent);
      sos.writeSI16(fontDescent);
      sos.writeSI16(fontLeading);
      for (int i=0; i < numGlyphs; i++) {
        sos.writeSI16(fontAdvanceTable[i]);
      }
      for (int i=0; i < numGlyphs; i++) {
        sos.writeRECT(fontBoundsTable[i]);
      }
      sos.writeUI16(fontKerningTable.length);
      for (int k=0; k < fontKerningTable.length; k++) {
        sos.writeKERNINGRECORD(fontKerningTable[k],fontFlagsWideCodes);
      }
    }
  }
 catch (  IOException e) {
  }
  return baos.toByteArray();
}",0.9877669500311008
62163,"public void load(int methodInfoIndex,ABC abc){
  this.abc=abc;
  if (methodInfoIndex <= 0) {
    paramEditor.setText(""String_Node_Str"");
  }
  methodIndexLabel.setText(""String_Node_Str"" + methodInfoIndex);
  this.methodInfo=abc.method_info[methodInfoIndex];
  int p=0;
  String ret=""String_Node_Str"";
  int optParPos=0;
  if (methodInfo.flagHas_optional()) {
    optParPos=methodInfo.param_types.length - methodInfo.optional.length;
  }
  for (  int ptype : methodInfo.param_types) {
    if (p > 0) {
      ret+=""String_Node_Str"";
    }
    if (methodInfo.flagHas_paramnames() && Configuration.PARAM_NAMES_ENABLE) {
      ret=ret + abc.constants.constant_string[methodInfo.paramNames[p]];
    }
 else {
      ret=ret + ""String_Node_Str"" + (p + 1);
    }
    ret+=""String_Node_Str"";
    if (ptype == 0) {
      ret+=""String_Node_Str"";
    }
 else {
      ret+=""String_Node_Str"" + ptype + ""String_Node_Str""+ Helper.escapeString(abc.constants.constant_multiname[ptype].toString(abc.constants,new ArrayList<String>()))+ ""String_Node_Str"";
    }
    if (methodInfo.flagHas_optional()) {
      if (p >= optParPos) {
        ret+=""String_Node_Str"" + methodInfo.optional[p - optParPos].toString(abc.constants);
      }
    }
    p++;
  }
  if (methodInfo.flagNeed_rest()) {
    ret+=""String_Node_Str"";
  }
  paramEditor.setText(ret);
  if (methodInfo.ret_type == 0) {
    returnTypeEditor.setText(""String_Node_Str"");
  }
 else {
    returnTypeEditor.setText(""String_Node_Str"" + methodInfo.ret_type + ""String_Node_Str""+ Helper.escapeString(abc.constants.constant_multiname[methodInfo.ret_type].toString(abc.constants,new ArrayList<String>()))+ ""String_Node_Str"");
  }
}","public void load(int methodInfoIndex,ABC abc){
  this.abc=abc;
  if (methodInfoIndex <= 0) {
    paramEditor.setText(""String_Node_Str"");
  }
  methodIndexLabel.setText(""String_Node_Str"" + methodInfoIndex);
  this.methodInfo=abc.method_info[methodInfoIndex];
  int p=0;
  String ret=""String_Node_Str"";
  int optParPos=0;
  if (methodInfo.flagHas_optional()) {
    optParPos=methodInfo.param_types.length - methodInfo.optional.length;
  }
  for (  int ptype : methodInfo.param_types) {
    if (p > 0) {
      ret+=""String_Node_Str"";
    }
    if (methodInfo.flagHas_paramnames() && Configuration.PARAM_NAMES_ENABLE) {
      ret=ret + abc.constants.constant_string[methodInfo.paramNames[p]];
    }
 else {
      ret=ret + ""String_Node_Str"" + (p + 1);
    }
    ret+=""String_Node_Str"";
    if (ptype == 0) {
      ret+=""String_Node_Str"";
    }
 else {
      ret+=""String_Node_Str"" + ptype + ""String_Node_Str""+ Helper.escapeString(abc.constants.constant_multiname[ptype].toString(abc.constants,new ArrayList<String>()))+ ""String_Node_Str"";
    }
    if (methodInfo.flagHas_optional()) {
      if (p >= optParPos) {
        ret+=""String_Node_Str"" + methodInfo.optional[p - optParPos].toString(abc.constants);
      }
    }
    p++;
  }
  if (methodInfo.flagNeed_rest()) {
    if (p > 0) {
      ret+=""String_Node_Str"";
    }
    ret+=""String_Node_Str"";
  }
  paramEditor.setText(ret);
  if (methodInfo.ret_type == 0) {
    returnTypeEditor.setText(""String_Node_Str"");
  }
 else {
    returnTypeEditor.setText(""String_Node_Str"" + methodInfo.ret_type + ""String_Node_Str""+ Helper.escapeString(abc.constants.constant_multiname[methodInfo.ret_type].toString(abc.constants,new ArrayList<String>()))+ ""String_Node_Str"");
  }
}",0.9842869848799288
62164,"public static boolean exportNodeAS(List<TagNode> nodeList,String outdir,boolean isPcode,EventListener ev){
  File dir=new File(outdir);
  if (!outdir.endsWith(File.separator)) {
    outdir=outdir + File.separator;
  }
  List<String> existingNames=new ArrayList<>();
  for (  TagNode node : nodeList) {
    String name=""String_Node_Str"";
    if (node.tag instanceof Tag) {
      name=((Tag)node.tag).getExportFileName();
    }
 else {
      name=node.tag.toString();
    }
    int i=1;
    String baseName=name;
    while (existingNames.contains(name)) {
      i++;
      name=baseName + ""String_Node_Str"" + i;
    }
    existingNames.add(name);
    if (node.subItems.isEmpty()) {
      if ((node.tag instanceof ASMSource) && (node.export)) {
        if (!dir.exists()) {
          dir.mkdirs();
        }
        try {
          String f=outdir + name + ""String_Node_Str"";
          if (ev != null) {
            ev.handleEvent(""String_Node_Str"",""String_Node_Str"" + f + ""String_Node_Str"");
          }
          String ret;
          if (isPcode) {
            ret=Highlighting.stripHilights(((ASMSource)node.tag).getASMSource(SWF.DEFAULT_VERSION,false));
          }
 else {
            List<Action> as=((ASMSource)node.tag).getActions(SWF.DEFAULT_VERSION);
            Action.setActionsAddresses(as,0,SWF.DEFAULT_VERSION);
            ret=(Highlighting.stripHilights(Action.actionsToSource(as,SWF.DEFAULT_VERSION)));
          }
          try (FileOutputStream fos=new FileOutputStream(f)){
            fos.write(ret.getBytes());
          }
         }
 catch (        Exception ex) {
        }
      }
    }
 else {
      exportNodeAS(node.subItems,outdir + name,isPcode,ev);
    }
  }
  return true;
}","public static boolean exportNodeAS(List<TagNode> nodeList,String outdir,boolean isPcode,EventListener ev){
  File dir=new File(outdir);
  if (!outdir.endsWith(File.separator)) {
    outdir=outdir + File.separator;
  }
  List<String> existingNames=new ArrayList<>();
  for (  TagNode node : nodeList) {
    String name=""String_Node_Str"";
    if (node.tag instanceof Tag) {
      name=((Tag)node.tag).getExportFileName();
    }
 else {
      name=node.tag.toString();
    }
    int i=1;
    String baseName=name;
    while (existingNames.contains(name)) {
      i++;
      name=baseName + ""String_Node_Str"" + i;
    }
    existingNames.add(name);
    if (node.subItems.isEmpty()) {
      if ((node.tag instanceof ASMSource) && (node.export)) {
        if (!dir.exists()) {
          dir.mkdirs();
        }
        try {
          String f=outdir + name + ""String_Node_Str"";
          if (ev != null) {
            ev.handleEvent(""String_Node_Str"",""String_Node_Str"" + f + ""String_Node_Str"");
          }
          String ret;
          if (isPcode) {
            ret=Highlighting.stripHilights(((ASMSource)node.tag).getASMSource(SWF.DEFAULT_VERSION,false));
          }
 else {
            List<Action> as=((ASMSource)node.tag).getActions(SWF.DEFAULT_VERSION);
            Action.setActionsAddresses(as,0,SWF.DEFAULT_VERSION);
            ret=(Highlighting.stripHilights(Action.actionsToSource(as,SWF.DEFAULT_VERSION)));
          }
          try (FileOutputStream fos=new FileOutputStream(f)){
            fos.write(ret.getBytes(""String_Node_Str""));
          }
         }
 catch (        Exception ex) {
        }
      }
    }
 else {
      exportNodeAS(node.subItems,outdir + name,isPcode,ev);
    }
  }
  return true;
}",0.9950393930551504
62165,"public void export(String directory,List<ABCContainerTag> abcList,boolean pcode,boolean paralel) throws IOException {
  String scriptName=getPathScriptName();
  String packageName=getPathPackage();
  File outDir=new File(directory + File.separatorChar + makeDirPath(packageName));
  if (!outDir.exists()) {
    outDir.mkdirs();
  }
  String fileName=outDir.toString() + File.separator + Helper.makeFileName(scriptName)+ ""String_Node_Str"";
  try (FileOutputStream fos=new FileOutputStream(fileName)){
    for (    int t : traitIndices) {
      Multiname name=abc.script_info[scriptIndex].traits.traits[t].getName(abc);
      Namespace ns=name.getNamespace(abc.constants);
      if ((ns.kind == Namespace.KIND_PACKAGE) || (ns.kind == Namespace.KIND_PACKAGE_INTERNAL)) {
        fos.write(abc.script_info[scriptIndex].traits.traits[t].convertPackaged(""String_Node_Str"",abcList,abc,false,pcode,scriptIndex,-1,false,new ArrayList<String>(),paralel).getBytes());
      }
 else {
        fos.write(abc.script_info[scriptIndex].traits.traits[t].convert(""String_Node_Str"",abcList,abc,false,pcode,scriptIndex,-1,false,new ArrayList<String>(),paralel).getBytes());
      }
    }
  }
 }","public void export(String directory,List<ABCContainerTag> abcList,boolean pcode,boolean paralel) throws IOException {
  String scriptName=getPathScriptName();
  String packageName=getPathPackage();
  File outDir=new File(directory + File.separatorChar + makeDirPath(packageName));
  if (!outDir.exists()) {
    outDir.mkdirs();
  }
  String fileName=outDir.toString() + File.separator + Helper.makeFileName(scriptName)+ ""String_Node_Str"";
  try (FileOutputStream fos=new FileOutputStream(fileName)){
    for (    int t : traitIndices) {
      Multiname name=abc.script_info[scriptIndex].traits.traits[t].getName(abc);
      Namespace ns=name.getNamespace(abc.constants);
      if ((ns.kind == Namespace.KIND_PACKAGE) || (ns.kind == Namespace.KIND_PACKAGE_INTERNAL)) {
        fos.write(abc.script_info[scriptIndex].traits.traits[t].convertPackaged(""String_Node_Str"",abcList,abc,false,pcode,scriptIndex,-1,false,new ArrayList<String>(),paralel).getBytes(""String_Node_Str""));
      }
 else {
        fos.write(abc.script_info[scriptIndex].traits.traits[t].convert(""String_Node_Str"",abcList,abc,false,pcode,scriptIndex,-1,false,new ArrayList<String>(),paralel).getBytes(""String_Node_Str""));
      }
    }
  }
 }",0.985726280436608
62166,"public static List<Action> removeNops(long address,List<Action> actions,int version,long swfPos){
  List<Action> ret=actions;
  if (true) {
  }
  String s=null;
  try {
    s=Highlighting.stripHilights(Action.actionsToString(new ArrayList<DisassemblyListener>(),address,ret,null,version,false,swfPos));
    ret=ASMParser.parse(address,swfPos,true,new ByteArrayInputStream(s.getBytes()),SWF.DEFAULT_VERSION);
  }
 catch (  Exception ex) {
    Logger.getLogger(SWFInputStream.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
  }
  return ret;
}","public static List<Action> removeNops(long address,List<Action> actions,int version,long swfPos){
  List<Action> ret=actions;
  if (true) {
  }
  String s=null;
  try {
    s=Highlighting.stripHilights(Action.actionsToString(new ArrayList<DisassemblyListener>(),address,ret,null,version,false,swfPos));
    ret=ASMParser.parse(address,swfPos,true,new StringReader(s),SWF.DEFAULT_VERSION);
  }
 catch (  Exception ex) {
    Logger.getLogger(SWFInputStream.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
  }
  return ret;
}",0.9565217391304348
62167,"@Override public void actionPerformed(ActionEvent e){
  if (e.getActionCommand().equals(""String_Node_Str"")) {
    foundPos=0;
    searchPanel.setVisible(false);
    found=new ArrayList<>();
    searchFor=null;
  }
  if (e.getActionCommand().equals(""String_Node_Str"")) {
    foundPos--;
    if (foundPos < 0) {
      foundPos+=found.size();
    }
    updateSearchPos();
  }
  if (e.getActionCommand().equals(""String_Node_Str"")) {
    foundPos=(foundPos + 1) % found.size();
    updateSearchPos();
  }
  if (e.getActionCommand().equals(""String_Node_Str"")) {
    if (lastCode != null) {
      GraphFrame gf=new GraphFrame(new ActionGraph(lastCode,new HashMap<Integer,String>(),new HashMap<String,GraphTargetItem>(),new HashMap<String,GraphTargetItem>(),SWF.DEFAULT_VERSION),""String_Node_Str"");
      gf.setVisible(true);
    }
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    setEditMode(true);
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    setHex(hexButton.isSelected());
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    setEditMode(false);
    setHex(hexButton.isSelected());
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    try {
      src.setActions(ASMParser.parse(0,src.getPos(),true,new ByteArrayInputStream(editor.getText().getBytes()),SWF.DEFAULT_VERSION),SWF.DEFAULT_VERSION);
      setSource(this.src,false);
      JOptionPane.showMessageDialog(this,""String_Node_Str"");
      saveButton.setVisible(false);
      cancelButton.setVisible(false);
      editButton.setVisible(true);
      editor.setEditable(false);
      editMode=false;
    }
 catch (    IOException ex) {
    }
catch (    ParseException ex) {
      JOptionPane.showMessageDialog(this,""String_Node_Str"" + ex.text + ""String_Node_Str""+ ex.line,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    setDecompiledEditMode(true);
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    setDecompiledEditMode(false);
    decompiledEditor.setText(lastDecompiled);
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    try {
      ActionScriptParser par=new ActionScriptParser();
      src.setActions(par.parse(decompiledEditor.getText()),SWF.DEFAULT_VERSION);
      setSource(this.src,false);
      JOptionPane.showMessageDialog(this,""String_Node_Str"");
      saveDecompiledButton.setVisible(false);
      cancelDecompiledButton.setVisible(false);
      editDecompiledButton.setVisible(true);
      experimentalLabel.setVisible(true);
      decompiledEditor.setEditable(false);
      editDecompiledMode=false;
    }
 catch (    IOException ex) {
    }
catch (    ParseException ex) {
      JOptionPane.showMessageDialog(this,""String_Node_Str"" + ex.text + ""String_Node_Str""+ ex.line,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
}","@Override public void actionPerformed(ActionEvent e){
  if (e.getActionCommand().equals(""String_Node_Str"")) {
    foundPos=0;
    searchPanel.setVisible(false);
    found=new ArrayList<>();
    searchFor=null;
  }
  if (e.getActionCommand().equals(""String_Node_Str"")) {
    foundPos--;
    if (foundPos < 0) {
      foundPos+=found.size();
    }
    updateSearchPos();
  }
  if (e.getActionCommand().equals(""String_Node_Str"")) {
    foundPos=(foundPos + 1) % found.size();
    updateSearchPos();
  }
  if (e.getActionCommand().equals(""String_Node_Str"")) {
    if (lastCode != null) {
      GraphFrame gf=new GraphFrame(new ActionGraph(lastCode,new HashMap<Integer,String>(),new HashMap<String,GraphTargetItem>(),new HashMap<String,GraphTargetItem>(),SWF.DEFAULT_VERSION),""String_Node_Str"");
      gf.setVisible(true);
    }
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    setEditMode(true);
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    setHex(hexButton.isSelected());
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    setEditMode(false);
    setHex(hexButton.isSelected());
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    try {
      src.setActions(ASMParser.parse(0,src.getPos(),true,new StringReader(editor.getText()),SWF.DEFAULT_VERSION),SWF.DEFAULT_VERSION);
      setSource(this.src,false);
      JOptionPane.showMessageDialog(this,""String_Node_Str"");
      saveButton.setVisible(false);
      cancelButton.setVisible(false);
      editButton.setVisible(true);
      editor.setEditable(false);
      editMode=false;
    }
 catch (    IOException ex) {
    }
catch (    ParseException ex) {
      JOptionPane.showMessageDialog(this,""String_Node_Str"" + ex.text + ""String_Node_Str""+ ex.line,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    setDecompiledEditMode(true);
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    setDecompiledEditMode(false);
    decompiledEditor.setText(lastDecompiled);
  }
 else   if (e.getActionCommand().equals(""String_Node_Str"")) {
    try {
      ActionScriptParser par=new ActionScriptParser();
      src.setActions(par.parse(decompiledEditor.getText()),SWF.DEFAULT_VERSION);
      setSource(this.src,false);
      JOptionPane.showMessageDialog(this,""String_Node_Str"");
      saveDecompiledButton.setVisible(false);
      cancelDecompiledButton.setVisible(false);
      editDecompiledButton.setVisible(true);
      experimentalLabel.setVisible(true);
      decompiledEditor.setEditable(false);
      editDecompiledMode=false;
    }
 catch (    IOException ex) {
    }
catch (    ParseException ex) {
      JOptionPane.showMessageDialog(this,""String_Node_Str"" + ex.text + ""String_Node_Str""+ ex.line,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
  }
}",0.9925334259420038
62168,"public static List<Action> parse(long address,long containerSWFOffset,boolean ignoreNops,InputStream is,int version) throws IOException, ParseException {
  FlasmLexer lexer=new FlasmLexer(is);
  List<Label> labels=new ArrayList<>();
  List<Action> ret=parse(containerSWFOffset,ignoreNops,labels,address,lexer,new ArrayList<String>(),version);
  List<Action> links=Action.getActionsAllIfsOrJumps(ret);
  for (  Action link : links) {
    boolean found=false;
    String identifier=null;
    if (link instanceof ActionJump) {
      identifier=((ActionJump)link).identifier;
      for (      Label label : labels) {
        if (((ActionJump)link).identifier.equals(label.name)) {
          ((ActionJump)link).setJumpOffset((int)(label.address - (((ActionJump)link).getAddress() + ((ActionJump)link).getBytes(version).length)));
          found=true;
          break;
        }
      }
    }
    if (link instanceof ActionIf) {
      identifier=((ActionIf)link).identifier;
      for (      Label label : labels) {
        if (((ActionIf)link).identifier.equals(label.name)) {
          ((ActionIf)link).setJumpOffset((int)(label.address - (((ActionIf)link).getAddress() + ((ActionIf)link).getBytes(version).length)));
          found=true;
          break;
        }
      }
    }
    if ((link instanceof ActionJump) || (link instanceof ActionIf)) {
      if (!found) {
        Logger.getLogger(ASMParser.class.getName()).log(Level.SEVERE,""String_Node_Str"" + identifier + ""String_Node_Str""+ Helper.formatAddress(link.getAddress()));
      }
    }
  }
  return ret;
}","public static List<Action> parse(long address,long containerSWFOffset,boolean ignoreNops,Reader is,int version) throws IOException, ParseException {
  FlasmLexer lexer=new FlasmLexer(is);
  List<Label> labels=new ArrayList<>();
  List<Action> ret=parse(containerSWFOffset,ignoreNops,labels,address,lexer,new ArrayList<String>(),version);
  List<Action> links=Action.getActionsAllIfsOrJumps(ret);
  for (  Action link : links) {
    boolean found=false;
    String identifier=null;
    if (link instanceof ActionJump) {
      identifier=((ActionJump)link).identifier;
      for (      Label label : labels) {
        if (((ActionJump)link).identifier.equals(label.name)) {
          ((ActionJump)link).setJumpOffset((int)(label.address - (((ActionJump)link).getAddress() + ((ActionJump)link).getBytes(version).length)));
          found=true;
          break;
        }
      }
    }
    if (link instanceof ActionIf) {
      identifier=((ActionIf)link).identifier;
      for (      Label label : labels) {
        if (((ActionIf)link).identifier.equals(label.name)) {
          ((ActionIf)link).setJumpOffset((int)(label.address - (((ActionIf)link).getAddress() + ((ActionIf)link).getBytes(version).length)));
          found=true;
          break;
        }
      }
    }
    if ((link instanceof ActionJump) || (link instanceof ActionIf)) {
      if (!found) {
        Logger.getLogger(ASMParser.class.getName()).log(Level.SEVERE,""String_Node_Str"" + identifier + ""String_Node_Str""+ Helper.formatAddress(link.getAddress()));
      }
    }
  }
  return ret;
}",0.994556516170349
62169,"@Override public void actionPerformed(ActionEvent e){
switch (e.getActionCommand()) {
case ""String_Node_Str"":
    String confStr=""String_Node_Str"";
  if (miParallelSpeedUp.isSelected()) {
    confStr+=""String_Node_Str"";
  }
 else {
    confStr+=""String_Node_Str"";
  }
if (JOptionPane.showConfirmDialog(null,confStr,""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
  Configuration.setConfig(""String_Node_Str"",(Boolean)miParallelSpeedUp.isSelected());
}
 else {
  miParallelSpeedUp.setSelected(!miParallelSpeedUp.isSelected());
}
break;
case ""String_Node_Str"":
Configuration.setConfig(""String_Node_Str"",(Boolean)miInternalViewer.isSelected());
break;
case ""String_Node_Str"":
if (searchDialog == null) {
searchDialog=new SearchDialog();
}
searchDialog.setVisible(true);
if (searchDialog.result) {
final String txt=searchDialog.searchField.getText();
if (!txt.equals(""String_Node_Str"")) {
Main.startWork(""String_Node_Str"" + txt + ""String_Node_Str"");
if (abcPanel != null) {
(new Thread(){
@Override public void run(){
if (abcPanel.search(txt,searchDialog.ignoreCaseCheckBox.isSelected(),searchDialog.regexpCheckBox.isSelected())) {
showDetail(DETAILCARDAS3NAVIGATOR);
showCard(CARDACTIONSCRIPTPANEL);
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"" + txt + ""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
}
Main.stopWork();
}
}
).start();
}
 else {
(new Thread(){
@Override public void run(){
if (actionPanel.search(txt,searchDialog.ignoreCaseCheckBox.isSelected(),searchDialog.regexpCheckBox.isSelected())) {
showCard(CARDACTIONSCRIPTPANEL);
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"" + txt + ""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
}
Main.stopWork();
}
}
).start();
}
}
}
break;
case ""String_Node_Str"":
Object tagObj=tagTree.getLastSelectedPathComponent();
if (tagObj == null) {
return;
}
if (tagObj instanceof TagNode) {
tagObj=((TagNode)tagObj).tag;
}
if (tagObj instanceof ImageTag) {
ImageTag it=(ImageTag)tagObj;
if (it.importSupported()) {
JFileChooser fc=new JFileChooser();
fc.setCurrentDirectory(new File((String)Configuration.getConfig(""String_Node_Str"",""String_Node_Str"")));
fc.setFileFilter(new FileFilter(){
@Override public boolean accept(File f){
return (f.getName().toLowerCase().endsWith(""String_Node_Str"")) || (f.getName().toLowerCase().endsWith(""String_Node_Str"")) || (f.getName().toLowerCase().endsWith(""String_Node_Str""))|| (f.getName().toLowerCase().endsWith(""String_Node_Str""))|| (f.isDirectory());
}
@Override public String getDescription(){
return ""String_Node_Str"";
}
}
);
JFrame f=new JFrame();
View.setWindowIcon(f);
int returnVal=fc.showOpenDialog(f);
if (returnVal == JFileChooser.APPROVE_OPTION) {
Configuration.setConfig(""String_Node_Str"",Helper.fixDialogFile(fc.getSelectedFile()).getParentFile().getAbsolutePath());
File selfile=Helper.fixDialogFile(fc.getSelectedFile());
byte data[]=Helper.readFile(selfile.getAbsolutePath());
try {
it.setImage(data);
}
 catch (IOException ex) {
Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}
reload(true);
}
}
}
break;
case ""String_Node_Str"":
tagObj=tagTree.getLastSelectedPathComponent();
if (tagObj == null) {
return;
}
if (tagObj instanceof TagNode) {
tagObj=((TagNode)tagObj).tag;
}
if (tagObj instanceof DefineSpriteTag) {
DefineSpriteTag sprite=(DefineSpriteTag)tagObj;
for (int i=0; i < swf.tags.size(); i++) {
Tag t=swf.tags.get(i);
if (t == sprite) {
swf.tags.remove(i);
i--;
}
 else if (t instanceof DefineSpriteTag) {
DefineSpriteTag st=(DefineSpriteTag)t;
for (int j=0; j < st.subTags.size(); j++) {
Tag t2=st.subTags.get(j);
Set<Integer> needed=t2.getNeededCharacters();
if (needed.contains(sprite.spriteId)) {
st.subTags.remove(j);
j--;
}
}
}
 else {
Set<Integer> needed=t.getNeededCharacters();
if (needed.contains(sprite.spriteId)) {
swf.tags.remove(i);
i--;
}
}
}
showCard(CARDEMPTYPANEL);
refreshTree();
}
break;
case ""String_Node_Str"":
setEditText(true);
break;
case ""String_Node_Str"":
setEditText(false);
break;
case ""String_Node_Str"":
if (oldValue instanceof TextTag) {
try {
((TextTag)oldValue).setFormattedText(swf.tags,textValue.getText());
setEditText(false);
}
 catch (ParseException ex) {
JOptionPane.showMessageDialog(null,""String_Node_Str"" + ex.text + ""String_Node_Str""+ ex.line,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}
}
break;
case ""String_Node_Str"":
if (JOptionPane.showConfirmDialog(this,""String_Node_Str"" + (autoDeobfuscateMenuItem.getState() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
Configuration.setConfig(""String_Node_Str"",autoDeobfuscateMenuItem.getState());
}
 else {
autoDeobfuscateMenuItem.setState(!autoDeobfuscateMenuItem.getState());
}
break;
case ""String_Node_Str"":
setVisible(false);
if (Main.proxyFrame != null) {
if (Main.proxyFrame.isVisible()) {
return;
}
}
Main.exit();
break;
}
if (Main.isWorking()) {
return;
}
switch (e.getActionCommand()) {
case ""String_Node_Str"":
if (swf.fileAttributes.actionScript3) {
final int multiName=abcPanel.decompiledTextArea.getMultinameUnderCursor();
if (multiName > 0) {
(new Thread(){
@Override public void run(){
Main.startWork(""String_Node_Str"");
renameMultiname(multiName);
Main.stopWork();
}
}
).start();
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
}
}
 else {
final String identifier=actionPanel.getStringUnderCursor();
if (identifier != null) {
(new Thread(){
public void run(){
Main.startWork(""String_Node_Str"");
renameIdentifier(identifier);
Main.stopWork();
}
}
).start();
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
}
}
break;
case ""String_Node_Str"":
Main.about();
break;
case ""String_Node_Str"":
Main.showProxy();
break;
case ""String_Node_Str"":
if (e.getSource() instanceof JCheckBoxMenuItem) {
Main.setSubLimiter(((JCheckBoxMenuItem)e.getSource()).getState());
}
break;
case ""String_Node_Str"":
try {
Main.saveFile(Main.file);
}
 catch (IOException ex) {
Logger.getLogger(com.jpexs.decompiler.flash.abc.gui.ABCPanel.class.getName()).log(Level.SEVERE,null,ex);
JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}
break;
case ""String_Node_Str"":
if (Main.saveFileDialog()) {
setTitle(Main.applicationVerName + (Configuration.DISPLAY_FILENAME ? ""String_Node_Str"" + Main.getFileTitle() : ""String_Node_Str""));
}
break;
case ""String_Node_Str"":
Main.openFileDialog();
break;
case ""String_Node_Str"":
JFileChooser fc=new JFileChooser();
String selDir=(String)Configuration.getConfig(""String_Node_Str"",""String_Node_Str"");
fc.setCurrentDirectory(new File(selDir));
if (!selDir.endsWith(File.separator)) {
selDir+=File.separator;
}
String fileName=(new File(Main.file).getName());
fileName=fileName.substring(0,fileName.length() - 4) + ""String_Node_Str"";
fc.setSelectedFile(new File(selDir + fileName));
FileFilter fla=new FileFilter(){
@Override public boolean accept(File f){
return f.isDirectory() || (f.getName().toLowerCase().endsWith(""String_Node_Str""));
}
@Override public String getDescription(){
return ""String_Node_Str"";
}
}
;
FileFilter xfl=new FileFilter(){
@Override public boolean accept(File f){
return f.isDirectory() || (f.getName().toLowerCase().endsWith(""String_Node_Str""));
}
@Override public String getDescription(){
return ""String_Node_Str"";
}
}
;
fc.setFileFilter(fla);
fc.addChoosableFileFilter(xfl);
fc.setAcceptAllFileFilterUsed(false);
JFrame f=new JFrame();
View.setWindowIcon(f);
int returnVal=fc.showSaveDialog(f);
if (returnVal == JFileChooser.APPROVE_OPTION) {
Configuration.setConfig(""String_Node_Str"",Helper.fixDialogFile(fc.getSelectedFile()).getParentFile().getAbsolutePath());
final File selfile=Helper.fixDialogFile(fc.getSelectedFile());
Main.startWork(""String_Node_Str"");
final boolean compressed=fc.getFileFilter() == fla;
(new Thread(){
@Override public void run(){
if (compressed) {
swf.exportFla(selfile.getAbsolutePath(),new File(Main.file).getName(),Main.applicationName,Main.applicationVerName,Main.version,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
}
 else {
swf.exportXfl(selfile.getAbsolutePath(),new File(Main.file).getName(),Main.applicationName,Main.applicationVerName,Main.version,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
}
Main.stopWork();
}
}
).start();
}
break;
case ""String_Node_Str"":
final ExportDialog export=new ExportDialog();
export.setVisible(true);
if (!export.cancelled) {
JFileChooser chooser=new JFileChooser();
chooser.setCurrentDirectory(new java.io.File((String)Configuration.getConfig(""String_Node_Str"",""String_Node_Str"")));
chooser.setDialogTitle(""String_Node_Str"");
chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
chooser.setAcceptAllFileFilterUsed(false);
if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
final long timeBefore=System.currentTimeMillis();
Main.startWork(""String_Node_Str"");
final String selFile=Helper.fixDialogFile(chooser.getSelectedFile()).getAbsolutePath();
Configuration.setConfig(""String_Node_Str"",Helper.fixDialogFile(chooser.getSelectedFile()).getParentFile().getAbsolutePath());
final boolean isPcode=export.getOption(ExportDialog.OPTION_ACTIONSCRIPT) == 1;
final boolean isMp3OrWav=export.getOption(ExportDialog.OPTION_SOUNDS) == 0;
final boolean isFormatted=export.getOption(ExportDialog.OPTION_TEXTS) == 1;
final boolean onlySel=e.getActionCommand().endsWith(""String_Node_Str"");
(new Thread(){
@Override public void run(){
try {
if (onlySel) {
List<Object> sel=getAllSelected(tagTree);
List<ScriptPack> tlsList=new ArrayList<>();
JPEGTablesTag jtt=null;
for (Tag t : swf.tags) {
if (t instanceof JPEGTablesTag) {
jtt=(JPEGTablesTag)t;
break;
}
}
List<Tag> images=new ArrayList<>();
List<Tag> shapes=new ArrayList<>();
List<Tag> movies=new ArrayList<>();
List<Tag> sounds=new ArrayList<>();
List<Tag> texts=new ArrayList<>();
List<TagNode> actionNodes=new ArrayList<>();
List<Tag> binaryData=new ArrayList<>();
for (Object d : sel) {
if (d instanceof TagNode) {
TagNode n=(TagNode)d;
if (""String_Node_Str"".equals(getTagType(n.tag))) {
images.add((Tag)n.tag);
}
if (""String_Node_Str"".equals(getTagType(n.tag))) {
shapes.add((Tag)n.tag);
}
if (""String_Node_Str"".equals(getTagType(n.tag))) {
actionNodes.add(n);
}
if (""String_Node_Str"".equals(getTagType(n.tag))) {
movies.add((Tag)n.tag);
}
if (""String_Node_Str"".equals(getTagType(n.tag))) {
sounds.add((Tag)n.tag);
}
if (""String_Node_Str"".equals(getTagType(n.tag))) {
binaryData.add((Tag)n.tag);
}
if (""String_Node_Str"".equals(getTagType(n.tag))) {
texts.add((Tag)n.tag);
}
}
if (d instanceof TreeElement) {
if (((TreeElement)d).isLeaf()) {
tlsList.add((ScriptPack)((TreeElement)d).getItem());
}
}
}
swf.exportImages(selFile + File.separator + ""String_Node_Str"",images);
SWF.exportShapes(selFile + File.separator + ""String_Node_Str"",shapes);
swf.exportTexts(selFile + File.separator + ""String_Node_Str"",texts,isFormatted);
swf.exportMovies(selFile + File.separator + ""String_Node_Str"",movies);
swf.exportSounds(selFile + File.separator + ""String_Node_Str"",sounds,isMp3OrWav,isMp3OrWav);
swf.exportBinaryData(selFile + File.separator + ""String_Node_Str"",binaryData);
if (abcPanel != null) {
for (int i=0; i < tlsList.size(); i++) {
ScriptPack tls=tlsList.get(i);
Main.startWork(""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ tlsList.size()+ ""String_Node_Str""+ tls.getPath()+ ""String_Node_Str"");
tls.export(selFile,abcList,isPcode,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
}
}
 else {
List<TagNode> allNodes=new ArrayList<>();
TagNode asn=getASTagNode(tagTree);
if (asn != null) {
allNodes.add(asn);
TagNode.setExport(allNodes,false);
TagNode.setExport(actionNodes,true);
TagNode.exportNodeAS(allNodes,selFile,isPcode);
}
}
}
 else {
swf.exportImages(selFile + File.separator + ""String_Node_Str"");
swf.exportShapes(selFile + File.separator + ""String_Node_Str"");
swf.exportTexts(selFile + File.separator + ""String_Node_Str"",isFormatted);
swf.exportMovies(selFile + File.separator + ""String_Node_Str"");
swf.exportSounds(selFile + File.separator + ""String_Node_Str"",isMp3OrWav,isMp3OrWav);
swf.exportBinaryData(selFile + File.separator + ""String_Node_Str"");
swf.exportActionScript(selFile,isPcode,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
}
}
 catch (Exception ex) {
Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
JOptionPane.showMessageDialog(null,""String_Node_Str"");
}
Main.stopWork();
long timeAfter=System.currentTimeMillis();
long timeMs=timeAfter - timeBefore;
long timeS=timeMs / 1000;
timeMs=timeMs % 1000;
long timeM=timeS / 60;
timeS=timeS % 60;
long timeH=timeM / 60;
timeM=timeM % 60;
String timeStr=""String_Node_Str"";
if (timeH > 0) {
timeStr+=Helper.padZeros(timeH,2) + ""String_Node_Str"";
}
timeStr+=Helper.padZeros(timeM,2) + ""String_Node_Str"";
timeStr+=Helper.padZeros(timeS,2) + ""String_Node_Str"" + Helper.padZeros(timeMs,3);
setStatus(""String_Node_Str"" + timeStr);
}
}
).start();
}
}
break;
case ""String_Node_Str"":
if (!Main.checkForUpdates()) {
JOptionPane.showMessageDialog(null,""String_Node_Str"");
}
break;
case ""String_Node_Str"":
String helpUsURL=Main.projectPage + ""String_Node_Str"";
if (java.awt.Desktop.isDesktopSupported()) {
java.awt.Desktop desktop=java.awt.Desktop.getDesktop();
try {
java.net.URI uri=new java.net.URI(helpUsURL);
desktop.browse(uri);
}
 catch (Exception ex) {
}
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"" + helpUsURL + ""String_Node_Str"");
}
break;
case ""String_Node_Str"":
String homePageURL=Main.projectPage;
if (java.awt.Desktop.isDesktopSupported()) {
java.awt.Desktop desktop=java.awt.Desktop.getDesktop();
try {
java.net.URI uri=new java.net.URI(homePageURL);
desktop.browse(uri);
}
 catch (Exception ex) {
}
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"" + homePageURL);
}
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
Main.startWork(""String_Node_Str"");
final boolean all=e.getActionCommand().endsWith(""String_Node_Str"");
if ((!all) || confirmExperimental()) {
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
int cnt=0;
if (all) {
for (ABCContainerTag tag : abcPanel.list) {
tag.getABC().restoreControlFlow();
}
}
 else {
int bi=abcPanel.detailPanel.methodTraitPanel.methodCodePanel.getBodyIndex();
if (bi != -1) {
abcPanel.abc.bodies[bi].restoreControlFlow(abcPanel.abc.constants);
}
abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setBodyIndex(bi,abcPanel.abc);
}
Main.stopWork();
JOptionPane.showMessageDialog(null,""String_Node_Str"");
abcPanel.reload();
return true;
}
}
.execute();
}
break;
case ""String_Node_Str"":
if (confirmExperimental()) {
final RenameType renameType=new RenameDialog().display();
if (renameType != null) {
Main.startWork(""String_Node_Str"");
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
try {
int cnt=0;
cnt=swf.deobfuscateIdentifiers(renameType);
Main.stopWork();
JOptionPane.showMessageDialog(null,""String_Node_Str"" + cnt);
if (abcPanel != null) {
abcPanel.reload();
}
doFilter();
reload(true);
}
 catch (Exception ex) {
Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
}
return true;
}
}
.execute();
}
}
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
if (deobfuscationDialog == null) {
deobfuscationDialog=new DeobfuscationDialog();
}
deobfuscationDialog.setVisible(true);
if (deobfuscationDialog.ok) {
Main.startWork(""String_Node_Str"");
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
try {
if (deobfuscationDialog.processAllCheckbox.isSelected()) {
for (ABCContainerTag tag : abcPanel.list) {
if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_REMOVE_DEAD_CODE) {
tag.getABC().removeDeadCode();
}
 else if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_REMOVE_TRAPS) {
tag.getABC().removeTraps();
}
 else if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_RESTORE_CONTROL_FLOW) {
tag.getABC().removeTraps();
tag.getABC().restoreControlFlow();
}
}
}
 else {
int bi=abcPanel.detailPanel.methodTraitPanel.methodCodePanel.getBodyIndex();
if (bi != -1) {
if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_REMOVE_DEAD_CODE) {
abcPanel.abc.bodies[bi].removeDeadCode(abcPanel.abc.constants);
}
 else if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_REMOVE_TRAPS) {
abcPanel.abc.bodies[bi].removeTraps(abcPanel.abc.constants,abcPanel.abc,abcPanel.decompiledTextArea.getScriptLeaf().scriptIndex,abcPanel.decompiledTextArea.getClassIndex(),abcPanel.decompiledTextArea.getIsStatic());
}
 else if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_RESTORE_CONTROL_FLOW) {
abcPanel.abc.bodies[bi].removeTraps(abcPanel.abc.constants,abcPanel.abc,abcPanel.decompiledTextArea.getScriptLeaf().scriptIndex,abcPanel.decompiledTextArea.getClassIndex(),abcPanel.decompiledTextArea.getIsStatic());
abcPanel.abc.bodies[bi].restoreControlFlow(abcPanel.abc.constants);
}
}
abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setBodyIndex(bi,abcPanel.abc);
}
}
 catch (Exception ex) {
Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
}
Main.stopWork();
JOptionPane.showMessageDialog(null,""String_Node_Str"");
abcPanel.reload();
return true;
}
}
.execute();
}
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
Main.startWork(""String_Node_Str"");
final boolean rall=e.getActionCommand().endsWith(""String_Node_Str"");
if ((!rall) || confirmExperimental()) {
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
int cnt=0;
if (rall) {
for (ABCContainerTag tag : abcPanel.list) {
cnt+=tag.getABC().removeTraps();
}
}
 else {
int bi=abcPanel.detailPanel.methodTraitPanel.methodCodePanel.getBodyIndex();
if (bi != -1) {
cnt+=abcPanel.abc.bodies[bi].removeTraps(abcPanel.abc.constants,abcPanel.abc,abcPanel.decompiledTextArea.getScriptLeaf().scriptIndex,abcPanel.decompiledTextArea.getClassIndex(),abcPanel.decompiledTextArea.getIsStatic());
}
abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setBodyIndex(bi,abcPanel.abc);
}
Main.stopWork();
JOptionPane.showMessageDialog(null,""String_Node_Str"" + cnt);
abcPanel.reload();
return true;
}
}
.execute();
}
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
Main.startWork(""String_Node_Str"");
final boolean dall=e.getActionCommand().endsWith(""String_Node_Str"");
if ((!dall) || confirmExperimental()) {
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
int cnt=0;
if (dall) {
for (ABCContainerTag tag : abcPanel.list) {
cnt+=tag.getABC().removeDeadCode();
}
}
 else {
int bi=abcPanel.detailPanel.methodTraitPanel.methodCodePanel.getBodyIndex();
if (bi != -1) {
cnt+=abcPanel.abc.bodies[bi].removeDeadCode(abcPanel.abc.constants);
}
abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setBodyIndex(bi,abcPanel.abc);
}
Main.stopWork();
JOptionPane.showMessageDialog(null,""String_Node_Str"" + cnt);
abcPanel.reload();
return true;
}
}
.execute();
}
break;
}
}","@Override public void actionPerformed(ActionEvent e){
switch (e.getActionCommand()) {
case ""String_Node_Str"":
    String confStr=""String_Node_Str"";
  if (miParallelSpeedUp.isSelected()) {
    confStr+=""String_Node_Str"";
  }
 else {
    confStr+=""String_Node_Str"";
  }
if (JOptionPane.showConfirmDialog(null,confStr,""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
  Configuration.setConfig(""String_Node_Str"",(Boolean)miParallelSpeedUp.isSelected());
}
 else {
  miParallelSpeedUp.setSelected(!miParallelSpeedUp.isSelected());
}
break;
case ""String_Node_Str"":
Configuration.setConfig(""String_Node_Str"",(Boolean)miInternalViewer.isSelected());
break;
case ""String_Node_Str"":
if (searchDialog == null) {
searchDialog=new SearchDialog();
}
searchDialog.setVisible(true);
if (searchDialog.result) {
final String txt=searchDialog.searchField.getText();
if (!txt.equals(""String_Node_Str"")) {
Main.startWork(""String_Node_Str"" + txt + ""String_Node_Str"");
if (abcPanel != null) {
(new Thread(){
@Override public void run(){
if (abcPanel.search(txt,searchDialog.ignoreCaseCheckBox.isSelected(),searchDialog.regexpCheckBox.isSelected())) {
showDetail(DETAILCARDAS3NAVIGATOR);
showCard(CARDACTIONSCRIPTPANEL);
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"" + txt + ""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
}
Main.stopWork();
}
}
).start();
}
 else {
(new Thread(){
@Override public void run(){
if (actionPanel.search(txt,searchDialog.ignoreCaseCheckBox.isSelected(),searchDialog.regexpCheckBox.isSelected())) {
showCard(CARDACTIONSCRIPTPANEL);
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"" + txt + ""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
}
Main.stopWork();
}
}
).start();
}
}
}
break;
case ""String_Node_Str"":
Object tagObj=tagTree.getLastSelectedPathComponent();
if (tagObj == null) {
return;
}
if (tagObj instanceof TagNode) {
tagObj=((TagNode)tagObj).tag;
}
if (tagObj instanceof ImageTag) {
ImageTag it=(ImageTag)tagObj;
if (it.importSupported()) {
JFileChooser fc=new JFileChooser();
fc.setCurrentDirectory(new File((String)Configuration.getConfig(""String_Node_Str"",""String_Node_Str"")));
fc.setFileFilter(new FileFilter(){
@Override public boolean accept(File f){
return (f.getName().toLowerCase().endsWith(""String_Node_Str"")) || (f.getName().toLowerCase().endsWith(""String_Node_Str"")) || (f.getName().toLowerCase().endsWith(""String_Node_Str""))|| (f.getName().toLowerCase().endsWith(""String_Node_Str""))|| (f.isDirectory());
}
@Override public String getDescription(){
return ""String_Node_Str"";
}
}
);
JFrame f=new JFrame();
View.setWindowIcon(f);
int returnVal=fc.showOpenDialog(f);
if (returnVal == JFileChooser.APPROVE_OPTION) {
Configuration.setConfig(""String_Node_Str"",Helper.fixDialogFile(fc.getSelectedFile()).getParentFile().getAbsolutePath());
File selfile=Helper.fixDialogFile(fc.getSelectedFile());
byte data[]=Helper.readFile(selfile.getAbsolutePath());
try {
it.setImage(data);
}
 catch (IOException ex) {
Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}
reload(true);
}
}
}
break;
case ""String_Node_Str"":
tagObj=tagTree.getLastSelectedPathComponent();
if (tagObj == null) {
return;
}
if (tagObj instanceof TagNode) {
tagObj=((TagNode)tagObj).tag;
}
if (tagObj instanceof DefineSpriteTag) {
DefineSpriteTag sprite=(DefineSpriteTag)tagObj;
for (int i=0; i < swf.tags.size(); i++) {
Tag t=swf.tags.get(i);
if (t == sprite) {
swf.tags.remove(i);
i--;
}
 else if (t instanceof DefineSpriteTag) {
DefineSpriteTag st=(DefineSpriteTag)t;
for (int j=0; j < st.subTags.size(); j++) {
Tag t2=st.subTags.get(j);
Set<Integer> needed=t2.getNeededCharacters();
if (needed.contains(sprite.spriteId)) {
st.subTags.remove(j);
j--;
}
}
}
 else {
Set<Integer> needed=t.getNeededCharacters();
if (needed.contains(sprite.spriteId)) {
swf.tags.remove(i);
i--;
}
}
}
showCard(CARDEMPTYPANEL);
refreshTree();
}
break;
case ""String_Node_Str"":
setEditText(true);
break;
case ""String_Node_Str"":
setEditText(false);
break;
case ""String_Node_Str"":
if (oldValue instanceof TextTag) {
try {
((TextTag)oldValue).setFormattedText(swf.tags,textValue.getText());
setEditText(false);
}
 catch (ParseException ex) {
JOptionPane.showMessageDialog(null,""String_Node_Str"" + ex.text + ""String_Node_Str""+ ex.line,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}
}
break;
case ""String_Node_Str"":
if (JOptionPane.showConfirmDialog(this,""String_Node_Str"" + (autoDeobfuscateMenuItem.getState() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
Configuration.setConfig(""String_Node_Str"",autoDeobfuscateMenuItem.getState());
}
 else {
autoDeobfuscateMenuItem.setState(!autoDeobfuscateMenuItem.getState());
}
break;
case ""String_Node_Str"":
setVisible(false);
if (Main.proxyFrame != null) {
if (Main.proxyFrame.isVisible()) {
return;
}
}
Main.exit();
break;
}
if (Main.isWorking()) {
return;
}
switch (e.getActionCommand()) {
case ""String_Node_Str"":
if (swf.fileAttributes.actionScript3) {
final int multiName=abcPanel.decompiledTextArea.getMultinameUnderCursor();
if (multiName > 0) {
(new Thread(){
@Override public void run(){
Main.startWork(""String_Node_Str"");
renameMultiname(multiName);
Main.stopWork();
}
}
).start();
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
}
}
 else {
final String identifier=actionPanel.getStringUnderCursor();
if (identifier != null) {
(new Thread(){
@Override public void run(){
Main.startWork(""String_Node_Str"");
renameIdentifier(identifier);
Main.stopWork();
}
}
).start();
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
}
}
break;
case ""String_Node_Str"":
Main.about();
break;
case ""String_Node_Str"":
Main.showProxy();
break;
case ""String_Node_Str"":
if (e.getSource() instanceof JCheckBoxMenuItem) {
Main.setSubLimiter(((JCheckBoxMenuItem)e.getSource()).getState());
}
break;
case ""String_Node_Str"":
try {
Main.saveFile(Main.file);
}
 catch (IOException ex) {
Logger.getLogger(com.jpexs.decompiler.flash.abc.gui.ABCPanel.class.getName()).log(Level.SEVERE,null,ex);
JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}
break;
case ""String_Node_Str"":
if (Main.saveFileDialog()) {
setTitle(Main.applicationVerName + (Configuration.DISPLAY_FILENAME ? ""String_Node_Str"" + Main.getFileTitle() : ""String_Node_Str""));
}
break;
case ""String_Node_Str"":
Main.openFileDialog();
break;
case ""String_Node_Str"":
JFileChooser fc=new JFileChooser();
String selDir=(String)Configuration.getConfig(""String_Node_Str"",""String_Node_Str"");
fc.setCurrentDirectory(new File(selDir));
if (!selDir.endsWith(File.separator)) {
selDir+=File.separator;
}
String fileName=(new File(Main.file).getName());
fileName=fileName.substring(0,fileName.length() - 4) + ""String_Node_Str"";
fc.setSelectedFile(new File(selDir + fileName));
FileFilter fla=new FileFilter(){
@Override public boolean accept(File f){
return f.isDirectory() || (f.getName().toLowerCase().endsWith(""String_Node_Str""));
}
@Override public String getDescription(){
return ""String_Node_Str"";
}
}
;
FileFilter xfl=new FileFilter(){
@Override public boolean accept(File f){
return f.isDirectory() || (f.getName().toLowerCase().endsWith(""String_Node_Str""));
}
@Override public String getDescription(){
return ""String_Node_Str"";
}
}
;
fc.setFileFilter(fla);
fc.addChoosableFileFilter(xfl);
fc.setAcceptAllFileFilterUsed(false);
JFrame f=new JFrame();
View.setWindowIcon(f);
int returnVal=fc.showSaveDialog(f);
if (returnVal == JFileChooser.APPROVE_OPTION) {
Configuration.setConfig(""String_Node_Str"",Helper.fixDialogFile(fc.getSelectedFile()).getParentFile().getAbsolutePath());
final File selfile=Helper.fixDialogFile(fc.getSelectedFile());
Main.startWork(""String_Node_Str"");
final boolean compressed=fc.getFileFilter() == fla;
(new Thread(){
@Override public void run(){
if (compressed) {
swf.exportFla(selfile.getAbsolutePath(),new File(Main.file).getName(),Main.applicationName,Main.applicationVerName,Main.version,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
}
 else {
swf.exportXfl(selfile.getAbsolutePath(),new File(Main.file).getName(),Main.applicationName,Main.applicationVerName,Main.version,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
}
Main.stopWork();
}
}
).start();
}
break;
case ""String_Node_Str"":
final ExportDialog export=new ExportDialog();
export.setVisible(true);
if (!export.cancelled) {
JFileChooser chooser=new JFileChooser();
chooser.setCurrentDirectory(new java.io.File((String)Configuration.getConfig(""String_Node_Str"",""String_Node_Str"")));
chooser.setDialogTitle(""String_Node_Str"");
chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
chooser.setAcceptAllFileFilterUsed(false);
if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
final long timeBefore=System.currentTimeMillis();
Main.startWork(""String_Node_Str"");
final String selFile=Helper.fixDialogFile(chooser.getSelectedFile()).getAbsolutePath();
Configuration.setConfig(""String_Node_Str"",Helper.fixDialogFile(chooser.getSelectedFile()).getParentFile().getAbsolutePath());
final boolean isPcode=export.getOption(ExportDialog.OPTION_ACTIONSCRIPT) == 1;
final boolean isMp3OrWav=export.getOption(ExportDialog.OPTION_SOUNDS) == 0;
final boolean isFormatted=export.getOption(ExportDialog.OPTION_TEXTS) == 1;
final boolean onlySel=e.getActionCommand().endsWith(""String_Node_Str"");
(new Thread(){
@Override public void run(){
try {
if (onlySel) {
List<Object> sel=getAllSelected(tagTree);
List<ScriptPack> tlsList=new ArrayList<>();
JPEGTablesTag jtt=null;
for (Tag t : swf.tags) {
if (t instanceof JPEGTablesTag) {
jtt=(JPEGTablesTag)t;
break;
}
}
List<Tag> images=new ArrayList<>();
List<Tag> shapes=new ArrayList<>();
List<Tag> movies=new ArrayList<>();
List<Tag> sounds=new ArrayList<>();
List<Tag> texts=new ArrayList<>();
List<TagNode> actionNodes=new ArrayList<>();
List<Tag> binaryData=new ArrayList<>();
for (Object d : sel) {
if (d instanceof TagNode) {
TagNode n=(TagNode)d;
if (""String_Node_Str"".equals(getTagType(n.tag))) {
images.add((Tag)n.tag);
}
if (""String_Node_Str"".equals(getTagType(n.tag))) {
shapes.add((Tag)n.tag);
}
if (""String_Node_Str"".equals(getTagType(n.tag))) {
actionNodes.add(n);
}
if (""String_Node_Str"".equals(getTagType(n.tag))) {
movies.add((Tag)n.tag);
}
if (""String_Node_Str"".equals(getTagType(n.tag))) {
sounds.add((Tag)n.tag);
}
if (""String_Node_Str"".equals(getTagType(n.tag))) {
binaryData.add((Tag)n.tag);
}
if (""String_Node_Str"".equals(getTagType(n.tag))) {
texts.add((Tag)n.tag);
}
}
if (d instanceof TreeElement) {
if (((TreeElement)d).isLeaf()) {
tlsList.add((ScriptPack)((TreeElement)d).getItem());
}
}
}
swf.exportImages(selFile + File.separator + ""String_Node_Str"",images);
SWF.exportShapes(selFile + File.separator + ""String_Node_Str"",shapes);
swf.exportTexts(selFile + File.separator + ""String_Node_Str"",texts,isFormatted);
swf.exportMovies(selFile + File.separator + ""String_Node_Str"",movies);
swf.exportSounds(selFile + File.separator + ""String_Node_Str"",sounds,isMp3OrWav,isMp3OrWav);
swf.exportBinaryData(selFile + File.separator + ""String_Node_Str"",binaryData);
if (abcPanel != null) {
for (int i=0; i < tlsList.size(); i++) {
ScriptPack tls=tlsList.get(i);
Main.startWork(""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ tlsList.size()+ ""String_Node_Str""+ tls.getPath()+ ""String_Node_Str"");
tls.export(selFile,abcList,isPcode,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
}
}
 else {
List<TagNode> allNodes=new ArrayList<>();
TagNode asn=getASTagNode(tagTree);
if (asn != null) {
allNodes.add(asn);
TagNode.setExport(allNodes,false);
TagNode.setExport(actionNodes,true);
TagNode.exportNodeAS(allNodes,selFile,isPcode);
}
}
}
 else {
swf.exportImages(selFile + File.separator + ""String_Node_Str"");
swf.exportShapes(selFile + File.separator + ""String_Node_Str"");
swf.exportTexts(selFile + File.separator + ""String_Node_Str"",isFormatted);
swf.exportMovies(selFile + File.separator + ""String_Node_Str"");
swf.exportSounds(selFile + File.separator + ""String_Node_Str"",isMp3OrWav,isMp3OrWav);
swf.exportBinaryData(selFile + File.separator + ""String_Node_Str"");
swf.exportActionScript(selFile,isPcode,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
}
}
 catch (Exception ex) {
Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
JOptionPane.showMessageDialog(null,""String_Node_Str"");
}
Main.stopWork();
long timeAfter=System.currentTimeMillis();
long timeMs=timeAfter - timeBefore;
long timeS=timeMs / 1000;
timeMs=timeMs % 1000;
long timeM=timeS / 60;
timeS=timeS % 60;
long timeH=timeM / 60;
timeM=timeM % 60;
String timeStr=""String_Node_Str"";
if (timeH > 0) {
timeStr+=Helper.padZeros(timeH,2) + ""String_Node_Str"";
}
timeStr+=Helper.padZeros(timeM,2) + ""String_Node_Str"";
timeStr+=Helper.padZeros(timeS,2) + ""String_Node_Str"" + Helper.padZeros(timeMs,3);
setStatus(""String_Node_Str"" + timeStr);
}
}
).start();
}
}
break;
case ""String_Node_Str"":
if (!Main.checkForUpdates()) {
JOptionPane.showMessageDialog(null,""String_Node_Str"");
}
break;
case ""String_Node_Str"":
String helpUsURL=Main.projectPage + ""String_Node_Str"";
if (java.awt.Desktop.isDesktopSupported()) {
java.awt.Desktop desktop=java.awt.Desktop.getDesktop();
try {
java.net.URI uri=new java.net.URI(helpUsURL);
desktop.browse(uri);
}
 catch (Exception ex) {
}
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"" + helpUsURL + ""String_Node_Str"");
}
break;
case ""String_Node_Str"":
String homePageURL=Main.projectPage;
if (java.awt.Desktop.isDesktopSupported()) {
java.awt.Desktop desktop=java.awt.Desktop.getDesktop();
try {
java.net.URI uri=new java.net.URI(homePageURL);
desktop.browse(uri);
}
 catch (Exception ex) {
}
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"" + homePageURL);
}
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
Main.startWork(""String_Node_Str"");
final boolean all=e.getActionCommand().endsWith(""String_Node_Str"");
if ((!all) || confirmExperimental()) {
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
int cnt=0;
if (all) {
for (ABCContainerTag tag : abcPanel.list) {
tag.getABC().restoreControlFlow();
}
}
 else {
int bi=abcPanel.detailPanel.methodTraitPanel.methodCodePanel.getBodyIndex();
if (bi != -1) {
abcPanel.abc.bodies[bi].restoreControlFlow(abcPanel.abc.constants);
}
abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setBodyIndex(bi,abcPanel.abc);
}
Main.stopWork();
JOptionPane.showMessageDialog(null,""String_Node_Str"");
abcPanel.reload();
return true;
}
}
.execute();
}
break;
case ""String_Node_Str"":
if (confirmExperimental()) {
final RenameType renameType=new RenameDialog().display();
if (renameType != null) {
Main.startWork(""String_Node_Str"");
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
try {
int cnt=0;
cnt=swf.deobfuscateIdentifiers(renameType);
Main.stopWork();
JOptionPane.showMessageDialog(null,""String_Node_Str"" + cnt);
if (abcPanel != null) {
abcPanel.reload();
}
doFilter();
reload(true);
}
 catch (Exception ex) {
Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
}
return true;
}
}
.execute();
}
}
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
if (deobfuscationDialog == null) {
deobfuscationDialog=new DeobfuscationDialog();
}
deobfuscationDialog.setVisible(true);
if (deobfuscationDialog.ok) {
Main.startWork(""String_Node_Str"");
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
try {
if (deobfuscationDialog.processAllCheckbox.isSelected()) {
for (ABCContainerTag tag : abcPanel.list) {
if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_REMOVE_DEAD_CODE) {
tag.getABC().removeDeadCode();
}
 else if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_REMOVE_TRAPS) {
tag.getABC().removeTraps();
}
 else if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_RESTORE_CONTROL_FLOW) {
tag.getABC().removeTraps();
tag.getABC().restoreControlFlow();
}
}
}
 else {
int bi=abcPanel.detailPanel.methodTraitPanel.methodCodePanel.getBodyIndex();
if (bi != -1) {
if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_REMOVE_DEAD_CODE) {
abcPanel.abc.bodies[bi].removeDeadCode(abcPanel.abc.constants);
}
 else if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_REMOVE_TRAPS) {
abcPanel.abc.bodies[bi].removeTraps(abcPanel.abc.constants,abcPanel.abc,abcPanel.decompiledTextArea.getScriptLeaf().scriptIndex,abcPanel.decompiledTextArea.getClassIndex(),abcPanel.decompiledTextArea.getIsStatic());
}
 else if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_RESTORE_CONTROL_FLOW) {
abcPanel.abc.bodies[bi].removeTraps(abcPanel.abc.constants,abcPanel.abc,abcPanel.decompiledTextArea.getScriptLeaf().scriptIndex,abcPanel.decompiledTextArea.getClassIndex(),abcPanel.decompiledTextArea.getIsStatic());
abcPanel.abc.bodies[bi].restoreControlFlow(abcPanel.abc.constants);
}
}
abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setBodyIndex(bi,abcPanel.abc);
}
}
 catch (Exception ex) {
Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
}
Main.stopWork();
JOptionPane.showMessageDialog(null,""String_Node_Str"");
abcPanel.reload();
return true;
}
}
.execute();
}
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
Main.startWork(""String_Node_Str"");
final boolean rall=e.getActionCommand().endsWith(""String_Node_Str"");
if ((!rall) || confirmExperimental()) {
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
int cnt=0;
if (rall) {
for (ABCContainerTag tag : abcPanel.list) {
cnt+=tag.getABC().removeTraps();
}
}
 else {
int bi=abcPanel.detailPanel.methodTraitPanel.methodCodePanel.getBodyIndex();
if (bi != -1) {
cnt+=abcPanel.abc.bodies[bi].removeTraps(abcPanel.abc.constants,abcPanel.abc,abcPanel.decompiledTextArea.getScriptLeaf().scriptIndex,abcPanel.decompiledTextArea.getClassIndex(),abcPanel.decompiledTextArea.getIsStatic());
}
abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setBodyIndex(bi,abcPanel.abc);
}
Main.stopWork();
JOptionPane.showMessageDialog(null,""String_Node_Str"" + cnt);
abcPanel.reload();
return true;
}
}
.execute();
}
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
Main.startWork(""String_Node_Str"");
final boolean dall=e.getActionCommand().endsWith(""String_Node_Str"");
if ((!dall) || confirmExperimental()) {
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
int cnt=0;
if (dall) {
for (ABCContainerTag tag : abcPanel.list) {
cnt+=tag.getABC().removeDeadCode();
}
}
 else {
int bi=abcPanel.detailPanel.methodTraitPanel.methodCodePanel.getBodyIndex();
if (bi != -1) {
cnt+=abcPanel.abc.bodies[bi].removeDeadCode(abcPanel.abc.constants);
}
abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setBodyIndex(bi,abcPanel.abc);
}
Main.stopWork();
JOptionPane.showMessageDialog(null,""String_Node_Str"" + cnt);
abcPanel.reload();
return true;
}
}
.execute();
}
break;
}
}",0.9997419354838708
62170,"/** 
 * Gets data bytes
 * @param version SWF version
 * @return Bytes of data
 */
@Override public byte[] getData(int version){
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  SWFOutputStream sos=new SWFOutputStream(baos,version);
  try {
    sos.writeUI16(fontId);
    sos.writeUB(1,fontFlagsHasLayout ? 1 : 0);
    sos.writeUB(1,fontFlagsShiftJIS ? 1 : 0);
    sos.writeUB(1,fontFlagsSmallText ? 1 : 0);
    sos.writeUB(1,fontFlagsANSI ? 1 : 0);
    sos.writeUB(1,fontFlagsWideOffsets ? 1 : 0);
    sos.writeUB(1,fontFlagsWideCodes ? 1 : 0);
    sos.writeUB(1,fontFlagsItalic ? 1 : 0);
    sos.writeUB(1,fontFlagsBold ? 1 : 0);
    sos.writeLANGCODE(languageCode);
    sos.writeUI8(fontName.getBytes().length);
    sos.write(fontName.getBytes());
    sos.writeUI16(numGlyphs);
    ByteArrayOutputStream baos2=new ByteArrayOutputStream();
    SWFOutputStream sos2=new SWFOutputStream(baos2,version);
    for (int i=0; i < numGlyphs; i++) {
      if (fontFlagsWideOffsets) {
        sos2.writeUI32(offsetTable[i]);
      }
 else {
        sos2.writeUI16((int)offsetTable[i]);
      }
    }
    byte ba2[]=baos2.toByteArray();
    ByteArrayOutputStream baos3=new ByteArrayOutputStream();
    SWFOutputStream sos3=new SWFOutputStream(baos3,version);
    for (int i=0; i < numGlyphs; i++) {
      sos3.writeSHAPE(glyphShapeTable[i],1);
    }
    byte ba3[]=baos3.toByteArray();
    sos.write(ba2);
    long offset=ba2.length + ba3.length;
    if (fontFlagsWideOffsets) {
      sos.writeUI32(offset + 4);
    }
 else {
      sos.writeUI16((int)(offset + 2));
    }
    sos.write(ba3);
    for (int i=0; i < numGlyphs; i++) {
      if (fontFlagsWideCodes) {
        sos.writeUI16(codeTable.get(i));
      }
 else {
        sos.writeUI8(codeTable.get(i));
      }
    }
    if (fontFlagsHasLayout) {
      sos.writeSI16(fontAscent);
      sos.writeSI16(fontDescent);
      sos.writeSI16(fontLeading);
      for (int i=0; i < numGlyphs; i++) {
        sos.writeSI16(fontAdvanceTable[i]);
      }
      for (int i=0; i < numGlyphs; i++) {
        sos.writeRECT(fontBoundsTable[i]);
      }
      sos.writeUI16(fontKerningTable.length);
      for (int k=0; k < fontKerningTable.length; k++) {
        sos.writeKERNINGRECORD(fontKerningTable[k],fontFlagsWideCodes);
      }
    }
  }
 catch (  IOException e) {
  }
  return baos.toByteArray();
}","/** 
 * Gets data bytes
 * @param version SWF version
 * @return Bytes of data
 */
@Override public byte[] getData(int version){
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  SWFOutputStream sos=new SWFOutputStream(baos,version);
  try {
    sos.writeUI16(fontId);
    sos.writeUB(1,fontFlagsHasLayout ? 1 : 0);
    sos.writeUB(1,fontFlagsShiftJIS ? 1 : 0);
    sos.writeUB(1,fontFlagsSmallText ? 1 : 0);
    sos.writeUB(1,fontFlagsANSI ? 1 : 0);
    sos.writeUB(1,fontFlagsWideOffsets ? 1 : 0);
    sos.writeUB(1,fontFlagsWideCodes ? 1 : 0);
    sos.writeUB(1,fontFlagsItalic ? 1 : 0);
    sos.writeUB(1,fontFlagsBold ? 1 : 0);
    sos.writeLANGCODE(languageCode);
    sos.writeUI8(fontName.getBytes(""String_Node_Str"").length);
    sos.write(fontName.getBytes(""String_Node_Str""));
    sos.writeUI16(numGlyphs);
    ByteArrayOutputStream baos2=new ByteArrayOutputStream();
    SWFOutputStream sos2=new SWFOutputStream(baos2,version);
    for (int i=0; i < numGlyphs; i++) {
      if (fontFlagsWideOffsets) {
        sos2.writeUI32(offsetTable[i]);
      }
 else {
        sos2.writeUI16((int)offsetTable[i]);
      }
    }
    byte ba2[]=baos2.toByteArray();
    ByteArrayOutputStream baos3=new ByteArrayOutputStream();
    SWFOutputStream sos3=new SWFOutputStream(baos3,version);
    for (int i=0; i < numGlyphs; i++) {
      sos3.writeSHAPE(glyphShapeTable[i],1);
    }
    byte ba3[]=baos3.toByteArray();
    sos.write(ba2);
    long offset=ba2.length + ba3.length;
    if (fontFlagsWideOffsets) {
      sos.writeUI32(offset + 4);
    }
 else {
      sos.writeUI16((int)(offset + 2));
    }
    sos.write(ba3);
    for (int i=0; i < numGlyphs; i++) {
      if (fontFlagsWideCodes) {
        sos.writeUI16(codeTable.get(i));
      }
 else {
        sos.writeUI8(codeTable.get(i));
      }
    }
    if (fontFlagsHasLayout) {
      sos.writeSI16(fontAscent);
      sos.writeSI16(fontDescent);
      sos.writeSI16(fontLeading);
      for (int i=0; i < numGlyphs; i++) {
        sos.writeSI16(fontAdvanceTable[i]);
      }
      for (int i=0; i < numGlyphs; i++) {
        sos.writeRECT(fontBoundsTable[i]);
      }
      sos.writeUI16(fontKerningTable.length);
      for (int k=0; k < fontKerningTable.length; k++) {
        sos.writeKERNINGRECORD(fontKerningTable[k],fontFlagsWideCodes);
      }
    }
  }
 catch (  IOException e) {
  }
  return baos.toByteArray();
}",0.9928118393234672
62171,"/** 
 * Gets data bytes
 * @param version SWF version
 * @return Bytes of data
 */
@Override public byte[] getData(int version){
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  OutputStream os=baos;
  SWFOutputStream sos=new SWFOutputStream(os,version);
  if (Configuration.DEBUG_COPY) {
    sos=new SWFOutputStream(new CopyOutputStream(sos,new ByteArrayInputStream(data)),10);
  }
  try {
    sos.writeUI16(fontId);
    sos.writeUB(1,fontFlagsHasLayout ? 1 : 0);
    sos.writeUB(1,fontFlagsShiftJIS ? 1 : 0);
    sos.writeUB(1,fontFlagsSmallText ? 1 : 0);
    sos.writeUB(1,fontFlagsANSI ? 1 : 0);
    sos.writeUB(1,fontFlagsWideOffsets ? 1 : 0);
    sos.writeUB(1,fontFlagsWideCodes ? 1 : 0);
    sos.writeUB(1,fontFlagsItalic ? 1 : 0);
    sos.writeUB(1,fontFlagsBold ? 1 : 0);
    sos.writeLANGCODE(languageCode);
    sos.writeUI8(fontName.getBytes().length);
    sos.write(fontName.getBytes());
    sos.writeUI16(numGlyphs);
    ByteArrayOutputStream baos2=new ByteArrayOutputStream();
    SWFOutputStream sos2=new SWFOutputStream(baos2,version);
    for (int i=0; i < numGlyphs; i++) {
      if (fontFlagsWideOffsets) {
        sos2.writeUI32(offsetTable[i]);
      }
 else {
        sos2.writeUI16((int)offsetTable[i]);
      }
    }
    byte ba2[]=baos2.toByteArray();
    ByteArrayOutputStream baos3=new ByteArrayOutputStream();
    SWFOutputStream sos3=new SWFOutputStream(baos3,version);
    for (int i=0; i < numGlyphs; i++) {
      sos3.writeSHAPE(glyphShapeTable[i],1);
    }
    byte ba3[]=baos3.toByteArray();
    sos.write(ba2);
    if (numGlyphs > 0) {
      if (fontFlagsWideOffsets) {
        long offset=ba2.length + ba3.length + 4;
        sos.writeUI32(offset);
      }
 else {
        long offset=ba2.length + ba3.length + 2;
        sos.writeUI16((int)offset);
      }
      sos.write(ba3);
      for (int i=0; i < numGlyphs; i++) {
        if (fontFlagsWideCodes) {
          sos.writeUI16(codeTable.get(i));
        }
 else {
          sos.writeUI8(codeTable.get(i));
        }
      }
    }
    if (fontFlagsHasLayout) {
      sos.writeSI16(fontAscent);
      sos.writeSI16(fontDescent);
      sos.writeSI16(fontLeading);
      for (int i=0; i < numGlyphs; i++) {
        sos.writeSI16(fontAdvanceTable[i]);
      }
      for (int i=0; i < numGlyphs; i++) {
        sos.writeRECT(fontBoundsTable[i]);
      }
      sos.writeUI16(fontKerningTable.length);
      for (int k=0; k < fontKerningTable.length; k++) {
        sos.writeKERNINGRECORD(fontKerningTable[k],fontFlagsWideCodes);
      }
    }
  }
 catch (  IOException e) {
  }
  return baos.toByteArray();
}","/** 
 * Gets data bytes
 * @param version SWF version
 * @return Bytes of data
 */
@Override public byte[] getData(int version){
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  OutputStream os=baos;
  SWFOutputStream sos=new SWFOutputStream(os,version);
  if (Configuration.DEBUG_COPY) {
    sos=new SWFOutputStream(new CopyOutputStream(sos,new ByteArrayInputStream(data)),10);
  }
  try {
    sos.writeUI16(fontId);
    sos.writeUB(1,fontFlagsHasLayout ? 1 : 0);
    sos.writeUB(1,fontFlagsShiftJIS ? 1 : 0);
    sos.writeUB(1,fontFlagsSmallText ? 1 : 0);
    sos.writeUB(1,fontFlagsANSI ? 1 : 0);
    sos.writeUB(1,fontFlagsWideOffsets ? 1 : 0);
    sos.writeUB(1,fontFlagsWideCodes ? 1 : 0);
    sos.writeUB(1,fontFlagsItalic ? 1 : 0);
    sos.writeUB(1,fontFlagsBold ? 1 : 0);
    sos.writeLANGCODE(languageCode);
    sos.writeUI8(fontName.getBytes(""String_Node_Str"").length);
    sos.write(fontName.getBytes(""String_Node_Str""));
    sos.writeUI16(numGlyphs);
    ByteArrayOutputStream baos2=new ByteArrayOutputStream();
    SWFOutputStream sos2=new SWFOutputStream(baos2,version);
    for (int i=0; i < numGlyphs; i++) {
      if (fontFlagsWideOffsets) {
        sos2.writeUI32(offsetTable[i]);
      }
 else {
        sos2.writeUI16((int)offsetTable[i]);
      }
    }
    byte ba2[]=baos2.toByteArray();
    ByteArrayOutputStream baos3=new ByteArrayOutputStream();
    SWFOutputStream sos3=new SWFOutputStream(baos3,version);
    for (int i=0; i < numGlyphs; i++) {
      sos3.writeSHAPE(glyphShapeTable[i],1);
    }
    byte ba3[]=baos3.toByteArray();
    sos.write(ba2);
    if (numGlyphs > 0) {
      if (fontFlagsWideOffsets) {
        long offset=ba2.length + ba3.length + 4;
        sos.writeUI32(offset);
      }
 else {
        long offset=ba2.length + ba3.length + 2;
        sos.writeUI16((int)offset);
      }
      sos.write(ba3);
      for (int i=0; i < numGlyphs; i++) {
        if (fontFlagsWideCodes) {
          sos.writeUI16(codeTable.get(i));
        }
 else {
          sos.writeUI8(codeTable.get(i));
        }
      }
    }
    if (fontFlagsHasLayout) {
      sos.writeSI16(fontAscent);
      sos.writeSI16(fontDescent);
      sos.writeSI16(fontLeading);
      for (int i=0; i < numGlyphs; i++) {
        sos.writeSI16(fontAdvanceTable[i]);
      }
      for (int i=0; i < numGlyphs; i++) {
        sos.writeRECT(fontBoundsTable[i]);
      }
      sos.writeUI16(fontKerningTable.length);
      for (int k=0; k < fontKerningTable.length; k++) {
        sos.writeKERNINGRECORD(fontKerningTable[k],fontFlagsWideCodes);
      }
    }
  }
 catch (  IOException e) {
  }
  return baos.toByteArray();
}",0.9935089728904162
62172,"/** 
 * Gets data bytes
 * @param version SWF version
 * @return Bytes of data
 */
@Override public byte[] getData(int version){
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  OutputStream os=baos;
  SWFOutputStream sos=new SWFOutputStream(os,version);
  try {
    sos.writeUI16(fontID);
    sos.writeUI8(fontName.getBytes().length);
    sos.write(fontName.getBytes());
    sos.writeUB(2,0);
    sos.writeUB(1,fontFlagsSmallText ? 1 : 0);
    sos.writeUB(1,fontFlagsShiftJIS ? 1 : 0);
    sos.writeUB(1,fontFlagsANSI ? 1 : 0);
    sos.writeUB(1,fontFlagsItalic ? 1 : 0);
    sos.writeUB(1,fontFlagsBold ? 1 : 0);
    sos.writeUB(1,fontFlagsWideCodes ? 1 : 0);
    sos.writeLANGCODE(languageCode);
    for (    int c : codeTable) {
      sos.writeUI16(c);
    }
  }
 catch (  IOException e) {
  }
  return baos.toByteArray();
}","/** 
 * Gets data bytes
 * @param version SWF version
 * @return Bytes of data
 */
@Override public byte[] getData(int version){
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  OutputStream os=baos;
  SWFOutputStream sos=new SWFOutputStream(os,version);
  try {
    sos.writeUI16(fontID);
    sos.writeUI8(fontName.getBytes(""String_Node_Str"").length);
    sos.write(fontName.getBytes(""String_Node_Str""));
    sos.writeUB(2,0);
    sos.writeUB(1,fontFlagsSmallText ? 1 : 0);
    sos.writeUB(1,fontFlagsShiftJIS ? 1 : 0);
    sos.writeUB(1,fontFlagsANSI ? 1 : 0);
    sos.writeUB(1,fontFlagsItalic ? 1 : 0);
    sos.writeUB(1,fontFlagsBold ? 1 : 0);
    sos.writeUB(1,fontFlagsWideCodes ? 1 : 0);
    sos.writeLANGCODE(languageCode);
    for (    int c : codeTable) {
      sos.writeUI16(c);
    }
  }
 catch (  IOException e) {
  }
  return baos.toByteArray();
}",0.980140186915888
62173,"/** 
 * Gets data bytes
 * @param version SWF version
 * @return Bytes of data
 */
@Override public byte[] getData(int version){
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  OutputStream os=baos;
  SWFOutputStream sos=new SWFOutputStream(os,version);
  try {
    sos.writeUI16(fontId);
    sos.writeUI8(fontName.getBytes().length);
    sos.write(fontName.getBytes());
    sos.writeUB(2,0);
    sos.writeUB(1,fontFlagsSmallText ? 1 : 0);
    sos.writeUB(1,fontFlagsShiftJIS ? 1 : 0);
    sos.writeUB(1,fontFlagsANSI ? 1 : 0);
    sos.writeUB(1,fontFlagsItalic ? 1 : 0);
    sos.writeUB(1,fontFlagsBold ? 1 : 0);
    sos.writeUB(1,fontFlagsWideCodes ? 1 : 0);
    for (    int code : codeTable) {
      if (fontFlagsWideCodes) {
        sos.writeUI16(code);
      }
 else {
        sos.writeUI8(code);
      }
    }
  }
 catch (  IOException e) {
  }
  return baos.toByteArray();
}","/** 
 * Gets data bytes
 * @param version SWF version
 * @return Bytes of data
 */
@Override public byte[] getData(int version){
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  OutputStream os=baos;
  SWFOutputStream sos=new SWFOutputStream(os,version);
  try {
    sos.writeUI16(fontId);
    sos.writeUI8(fontName.getBytes(""String_Node_Str"").length);
    sos.write(fontName.getBytes(""String_Node_Str""));
    sos.writeUB(2,0);
    sos.writeUB(1,fontFlagsSmallText ? 1 : 0);
    sos.writeUB(1,fontFlagsShiftJIS ? 1 : 0);
    sos.writeUB(1,fontFlagsANSI ? 1 : 0);
    sos.writeUB(1,fontFlagsItalic ? 1 : 0);
    sos.writeUB(1,fontFlagsBold ? 1 : 0);
    sos.writeUB(1,fontFlagsWideCodes ? 1 : 0);
    for (    int code : codeTable) {
      if (fontFlagsWideCodes) {
        sos.writeUI16(code);
      }
 else {
        sos.writeUI8(code);
      }
    }
  }
 catch (  IOException e) {
  }
  return baos.toByteArray();
}",0.9813391877058176
62174,"public static void convertSWF(SWF swf,String swfFileName,String outfile,boolean compressed,String generator,String generatorVerName,String generatorVersion,boolean paralel){
  File file=new File(outfile);
  File outDir=file.getParentFile();
  String domDocument=""String_Node_Str"";
  String baseName=swfFileName;
  File f=new File(baseName);
  baseName=f.getName();
  if (baseName.contains(""String_Node_Str"")) {
    baseName=baseName.substring(0,baseName.lastIndexOf(""String_Node_Str""));
  }
  HashMap<String,byte[]> files=new HashMap<>();
  HashMap<Integer,CharacterTag> characters=getCharacters(swf.tags);
  List<Integer> oneInstaceShapes=getOneInstanceShapes(swf.tags,characters);
  Map<Integer,String> characterClasses=getCharacterClasses(swf.tags);
  Map<Integer,String> characterVariables=getCharacterVariables(swf.tags);
  FileAttributesTag fa=null;
  for (  Tag t : swf.tags) {
    if (t instanceof FileAttributesTag) {
      fa=(FileAttributesTag)t;
    }
  }
  boolean useAS3=false;
  boolean useNetwork=false;
  if (fa != null) {
    useAS3=fa.actionScript3;
    useNetwork=fa.useNetwork;
  }
  String backgroundColor=""String_Node_Str"";
  for (  Tag t : swf.tags) {
    if (t instanceof SetBackgroundColorTag) {
      SetBackgroundColorTag sbc=(SetBackgroundColorTag)t;
      backgroundColor=sbc.backgroundColor.toHexRGB();
    }
  }
  domDocument+=""String_Node_Str"" + generator + ""String_Node_Str""+ generatorVerName+ ""String_Node_Str""+ generatorVersion+ ""String_Node_Str"";
  domDocument+=""String_Node_Str"" + backgroundColor + ""String_Node_Str"";
  domDocument+=""String_Node_Str"" + swf.frameRate + ""String_Node_Str"";
  domDocument+=""String_Node_Str"";
  domDocument+=convertLibrary(swf,characterVariables,characterClasses,oneInstaceShapes,backgroundColor,swf.tags,characters,files);
  domDocument+=""String_Node_Str"";
  domDocument+=convertTimeline(0,oneInstaceShapes,backgroundColor,swf.tags,swf.tags,characters,""String_Node_Str"");
  domDocument+=""String_Node_Str"";
  domDocument+=""String_Node_Str"";
  domDocument=prettyFormatXML(domDocument);
  for (  Tag t : swf.tags) {
    if (t instanceof DoInitActionTag) {
      DoInitActionTag dia=(DoInitActionTag)t;
      int chid=dia.getCharacterID();
      if (characters.containsKey(chid)) {
        if (characters.get(chid) instanceof DefineSpriteTag) {
          DefineSpriteTag sprite=(DefineSpriteTag)characters.get(chid);
          if (sprite.subTags.isEmpty()) {
            String data=convertActionScript(dia);
            String expPath=dia.getExportName();
            final String prefix=""String_Node_Str"";
            if (expPath.startsWith(prefix)) {
              expPath=expPath.substring(prefix.length());
            }
            String expDir=""String_Node_Str"";
            if (expPath.contains(""String_Node_Str"")) {
              expDir=expPath.substring(0,expPath.lastIndexOf(""String_Node_Str""));
              expDir=expDir.replace(""String_Node_Str"",File.separator);
            }
            expPath=expPath.replace(""String_Node_Str"",File.separator);
            File cdir=new File(outDir.getAbsolutePath() + File.separator + expDir);
            if (!cdir.exists()) {
              cdir.mkdirs();
            }
            try {
              writeFile(data.getBytes(""String_Node_Str""),outDir.getAbsolutePath() + File.separator + expPath+ ""String_Node_Str"");
            }
 catch (            UnsupportedEncodingException ex) {
              Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
            }
          }
        }
      }
    }
  }
  String publishSettings=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + baseName + ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ twipToPixel(swf.displayRect.getWidth())+ ""String_Node_Str""+ ""String_Node_Str""+ twipToPixel(swf.displayRect.getHeight())+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (useAS3 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (swf.compressed ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ (swf.lzma ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (useNetwork ? 1 : 0)+ ""String_Node_Str""+ ""String_Node_Str""+ xmlString(characterClasses.containsKey(0) ? characterClasses.get(0) : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ twipToPixel(swf.displayRect.getWidth())+ ""String_Node_Str""+ ""String_Node_Str""+ twipToPixel(swf.displayRect.getHeight())+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ twipToPixel(swf.displayRect.getWidth())+ ""String_Node_Str""+ ""String_Node_Str""+ twipToPixel(swf.displayRect.getHeight())+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ twipToPixel(swf.displayRect.getWidth())+ ""String_Node_Str""+ ""String_Node_Str""+ twipToPixel(swf.displayRect.getHeight())+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ twipToPixel(swf.displayRect.getWidth())+ ""String_Node_Str""+ ""String_Node_Str""+ twipToPixel(swf.displayRect.getHeight())+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  if (compressed) {
    try (ZipOutputStream out=new ZipOutputStream(new FileOutputStream(outfile))){
      out.putNextEntry(new ZipEntry(""String_Node_Str""));
      out.write(domDocument.getBytes(""String_Node_Str""));
      out.putNextEntry(new ZipEntry(""String_Node_Str""));
      out.write(publishSettings.getBytes(""String_Node_Str""));
      for (      String fileName : files.keySet()) {
        out.putNextEntry(new ZipEntry(""String_Node_Str"" + fileName));
        out.write(files.get(fileName));
      }
    }
 catch (    IOException ex) {
      Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
 else {
    outDir.mkdirs();
    try {
      writeFile(domDocument.getBytes(""String_Node_Str""),outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
    }
 catch (    UnsupportedEncodingException ex) {
      Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
    }
    try {
      writeFile(publishSettings.getBytes(""String_Node_Str""),outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
    }
 catch (    UnsupportedEncodingException ex) {
      Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
    }
    File libraryDir=new File(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
    libraryDir.mkdir();
    for (    String fileName : files.keySet()) {
      writeFile(files.get(fileName),libraryDir.getAbsolutePath() + File.separator + fileName);
    }
    writeFile(""String_Node_Str"".getBytes(),outfile);
  }
  if (useAS3) {
    try {
      swf.exportActionScript(outDir.getAbsolutePath(),false,paralel);
    }
 catch (    Exception ex) {
      Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
}","public static void convertSWF(SWF swf,String swfFileName,String outfile,boolean compressed,String generator,String generatorVerName,String generatorVersion,boolean paralel){
  File file=new File(outfile);
  File outDir=file.getParentFile();
  String domDocument=""String_Node_Str"";
  String baseName=swfFileName;
  File f=new File(baseName);
  baseName=f.getName();
  if (baseName.contains(""String_Node_Str"")) {
    baseName=baseName.substring(0,baseName.lastIndexOf(""String_Node_Str""));
  }
  HashMap<String,byte[]> files=new HashMap<>();
  HashMap<Integer,CharacterTag> characters=getCharacters(swf.tags);
  List<Integer> oneInstaceShapes=getOneInstanceShapes(swf.tags,characters);
  Map<Integer,String> characterClasses=getCharacterClasses(swf.tags);
  Map<Integer,String> characterVariables=getCharacterVariables(swf.tags);
  FileAttributesTag fa=null;
  for (  Tag t : swf.tags) {
    if (t instanceof FileAttributesTag) {
      fa=(FileAttributesTag)t;
    }
  }
  boolean useAS3=false;
  boolean useNetwork=false;
  if (fa != null) {
    useAS3=fa.actionScript3;
    useNetwork=fa.useNetwork;
  }
  String backgroundColor=""String_Node_Str"";
  for (  Tag t : swf.tags) {
    if (t instanceof SetBackgroundColorTag) {
      SetBackgroundColorTag sbc=(SetBackgroundColorTag)t;
      backgroundColor=sbc.backgroundColor.toHexRGB();
    }
  }
  domDocument+=""String_Node_Str"" + generator + ""String_Node_Str""+ generatorVerName+ ""String_Node_Str""+ generatorVersion+ ""String_Node_Str"";
  domDocument+=""String_Node_Str"" + backgroundColor + ""String_Node_Str"";
  domDocument+=""String_Node_Str"" + swf.frameRate + ""String_Node_Str"";
  domDocument+=""String_Node_Str"";
  domDocument+=convertLibrary(swf,characterVariables,characterClasses,oneInstaceShapes,backgroundColor,swf.tags,characters,files);
  domDocument+=""String_Node_Str"";
  domDocument+=convertTimeline(0,oneInstaceShapes,backgroundColor,swf.tags,swf.tags,characters,""String_Node_Str"");
  domDocument+=""String_Node_Str"";
  domDocument+=""String_Node_Str"";
  domDocument=prettyFormatXML(domDocument);
  for (  Tag t : swf.tags) {
    if (t instanceof DoInitActionTag) {
      DoInitActionTag dia=(DoInitActionTag)t;
      int chid=dia.getCharacterID();
      if (characters.containsKey(chid)) {
        if (characters.get(chid) instanceof DefineSpriteTag) {
          DefineSpriteTag sprite=(DefineSpriteTag)characters.get(chid);
          if (sprite.subTags.isEmpty()) {
            String data=convertActionScript(dia);
            String expPath=dia.getExportName();
            final String prefix=""String_Node_Str"";
            if (expPath.startsWith(prefix)) {
              expPath=expPath.substring(prefix.length());
            }
            String expDir=""String_Node_Str"";
            if (expPath.contains(""String_Node_Str"")) {
              expDir=expPath.substring(0,expPath.lastIndexOf(""String_Node_Str""));
              expDir=expDir.replace(""String_Node_Str"",File.separator);
            }
            expPath=expPath.replace(""String_Node_Str"",File.separator);
            File cdir=new File(outDir.getAbsolutePath() + File.separator + expDir);
            if (!cdir.exists()) {
              cdir.mkdirs();
            }
            try {
              writeFile(data.getBytes(""String_Node_Str""),outDir.getAbsolutePath() + File.separator + expPath+ ""String_Node_Str"");
            }
 catch (            UnsupportedEncodingException ex) {
              Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
            }
          }
        }
      }
    }
  }
  String publishSettings=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + baseName + ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ twipToPixel(swf.displayRect.getWidth())+ ""String_Node_Str""+ ""String_Node_Str""+ twipToPixel(swf.displayRect.getHeight())+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (useAS3 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (swf.compressed ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ (swf.lzma ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (useNetwork ? 1 : 0)+ ""String_Node_Str""+ ""String_Node_Str""+ xmlString(characterClasses.containsKey(0) ? characterClasses.get(0) : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ twipToPixel(swf.displayRect.getWidth())+ ""String_Node_Str""+ ""String_Node_Str""+ twipToPixel(swf.displayRect.getHeight())+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ twipToPixel(swf.displayRect.getWidth())+ ""String_Node_Str""+ ""String_Node_Str""+ twipToPixel(swf.displayRect.getHeight())+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ twipToPixel(swf.displayRect.getWidth())+ ""String_Node_Str""+ ""String_Node_Str""+ twipToPixel(swf.displayRect.getHeight())+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ twipToPixel(swf.displayRect.getWidth())+ ""String_Node_Str""+ ""String_Node_Str""+ twipToPixel(swf.displayRect.getHeight())+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  if (compressed) {
    try (ZipOutputStream out=new ZipOutputStream(new FileOutputStream(outfile))){
      out.putNextEntry(new ZipEntry(""String_Node_Str""));
      out.write(domDocument.getBytes(""String_Node_Str""));
      out.putNextEntry(new ZipEntry(""String_Node_Str""));
      out.write(publishSettings.getBytes(""String_Node_Str""));
      for (      String fileName : files.keySet()) {
        out.putNextEntry(new ZipEntry(""String_Node_Str"" + fileName));
        out.write(files.get(fileName));
      }
    }
 catch (    IOException ex) {
      Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
 else {
    outDir.mkdirs();
    try {
      writeFile(domDocument.getBytes(""String_Node_Str""),outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
    }
 catch (    UnsupportedEncodingException ex) {
      Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
    }
    try {
      writeFile(publishSettings.getBytes(""String_Node_Str""),outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
    }
 catch (    UnsupportedEncodingException ex) {
      Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
    }
    File libraryDir=new File(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
    libraryDir.mkdir();
    for (    String fileName : files.keySet()) {
      writeFile(files.get(fileName),libraryDir.getAbsolutePath() + File.separator + fileName);
    }
    try {
      writeFile(""String_Node_Str"".getBytes(""String_Node_Str""),outfile);
    }
 catch (    UnsupportedEncodingException ex) {
      Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
  if (useAS3) {
    try {
      swf.exportActionScript(outDir.getAbsolutePath(),false,paralel);
    }
 catch (    Exception ex) {
      Logger.getLogger(XFLConverter.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
}",0.9801467820850585
62175,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args) throws IOException {
  loadProperties();
  View.setLookAndFeel();
  Configuration.loadFromFile(getConfigFile(),getReplacementsFile());
  int pos=0;
  if (args.length > 0) {
    if (args[0].equals(""String_Node_Str"")) {
      Configuration.debugMode=true;
      pos++;
    }
  }
  initLogging(Configuration.debugMode);
  if (args.length < pos + 1) {
    autoCheckForUpdates();
    showModeFrame();
  }
 else {
    if (args[pos].equals(""String_Node_Str"")) {
      int port=55555;
      for (int i=pos; i < args.length; i++) {
        if (args[i].startsWith(""String_Node_Str"")) {
          try {
            port=Integer.parseInt(args[pos].substring(2));
          }
 catch (          NumberFormatException nex) {
            System.err.println(""String_Node_Str"");
          }
        }
      }
      if (proxyFrame == null) {
        proxyFrame=new ProxyFrame();
      }
      proxyFrame.setPort(port);
      addTrayIcon();
      switchProxy();
    }
 else     if (args[pos].equals(""String_Node_Str"")) {
      if (args.length < pos + 4) {
        badArguments();
      }
      String exportFormat=args[pos + 1];
      if (!exportFormat.toLowerCase().equals(""String_Node_Str"")) {
        if (!exportFormat.toLowerCase().equals(""String_Node_Str"")) {
          if (!exportFormat.toLowerCase().equals(""String_Node_Str"")) {
            if (!exportFormat.toLowerCase().equals(""String_Node_Str"")) {
              if (!exportFormat.toLowerCase().equals(""String_Node_Str"")) {
                if (!exportFormat.toLowerCase().equals(""String_Node_Str"")) {
                  if (!exportFormat.toLowerCase().equals(""String_Node_Str"")) {
                    if (!exportFormat.toLowerCase().equals(""String_Node_Str"")) {
                      if (!exportFormat.toLowerCase().equals(""String_Node_Str"")) {
                        if (!exportFormat.toLowerCase().equals(""String_Node_Str"")) {
                          if (!exportFormat.toLowerCase().equals(""String_Node_Str"")) {
                            if (!exportFormat.toLowerCase().equals(""String_Node_Str"")) {
                              System.err.println(""String_Node_Str"" + exportFormat);
                              badArguments();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      File outDir=new File(args[pos + 2]);
      File inFile=new File(args[pos + 3]);
      if (!inFile.exists()) {
        System.err.println(""String_Node_Str"");
        badArguments();
      }
      commandLineMode=true;
      boolean exportOK;
      try {
        printHeader();
        SWF exfile=new SWF(new FileInputStream(inFile),(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
        exfile.addEventListener(new EventListener(){
          @Override public void handleEvent(          String event,          Object data){
            if (event.equals(""String_Node_Str"")) {
              System.out.println((String)data);
            }
          }
        }
);
        if (exportFormat.equals(""String_Node_Str"")) {
          System.out.println(""String_Node_Str"");
          exfile.exportImages(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
          System.out.println(""String_Node_Str"");
          exfile.exportShapes(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
          System.out.println(""String_Node_Str"");
          exfile.exportActionScript(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"",false,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
          System.out.println(""String_Node_Str"");
          exfile.exportMovies(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
          System.out.println(""String_Node_Str"");
          exfile.exportSounds(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"",true,true);
          System.out.println(""String_Node_Str"");
          exfile.exportBinaryData(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
          System.out.println(""String_Node_Str"");
          exfile.exportTexts(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"",true);
          exportOK=true;
        }
 else         if (exportFormat.equals(""String_Node_Str"")) {
          exfile.exportImages(outDir.getAbsolutePath());
          exportOK=true;
        }
 else         if (exportFormat.equals(""String_Node_Str"")) {
          exfile.exportShapes(outDir.getAbsolutePath());
          exportOK=true;
        }
 else         if (exportFormat.equals(""String_Node_Str"") || exportFormat.equals(""String_Node_Str"")) {
          if ((pos + 5 < args.length) && (args[pos + 4].equals(""String_Node_Str""))) {
            exportOK=true;
            for (int i=pos + 5; i < args.length; i++) {
              exportOK=exportOK && exfile.exportAS3Class(args[i],outDir.getAbsolutePath(),exportFormat.equals(""String_Node_Str""),(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
            }
          }
 else {
            exportOK=!exfile.exportActionScript(outDir.getAbsolutePath(),exportFormat.equals(""String_Node_Str""),(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE)).isEmpty();
          }
        }
 else         if (exportFormat.equals(""String_Node_Str"")) {
          exfile.exportMovies(outDir.getAbsolutePath());
          exportOK=true;
        }
 else         if (exportFormat.equals(""String_Node_Str"")) {
          exfile.exportSounds(outDir.getAbsolutePath(),true,true);
          exportOK=true;
        }
 else         if (exportFormat.equals(""String_Node_Str"")) {
          exfile.exportBinaryData(outDir.getAbsolutePath());
          exportOK=true;
        }
 else         if (exportFormat.equals(""String_Node_Str"")) {
          exfile.exportTexts(outDir.getAbsolutePath(),true);
          exportOK=true;
        }
 else         if (exportFormat.equals(""String_Node_Str"")) {
          exfile.exportTexts(outDir.getAbsolutePath(),false);
          exportOK=true;
        }
 else         if (exportFormat.equals(""String_Node_Str"")) {
          exfile.exportFla(outDir.getAbsolutePath(),inFile.getName(),applicationName,applicationVerName,version,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
          exportOK=true;
        }
 else         if (exportFormat.equals(""String_Node_Str"")) {
          exfile.exportXfl(outDir.getAbsolutePath(),inFile.getName(),applicationName,applicationVerName,version,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
          exportOK=true;
        }
 else {
          exportOK=false;
        }
      }
 catch (      Exception ex) {
        exportOK=false;
        System.err.print(""String_Node_Str"");
        Logger.getLogger(Main.class.getName()).log(Level.SEVERE,null,ex);
        System.exit(1);
      }
      if (exportOK) {
        System.out.println(""String_Node_Str"");
        System.exit(0);
      }
 else {
        System.err.println(""String_Node_Str"");
        System.exit(1);
      }
    }
 else     if (args[pos].equals(""String_Node_Str"")) {
      if (args.length < pos + 3) {
        badArguments();
      }
      if (SWF.fws2cws(new FileInputStream(args[pos + 1]),new FileOutputStream(args[pos + 2]))) {
        System.out.println(""String_Node_Str"");
      }
 else {
        System.err.println(""String_Node_Str"");
      }
    }
 else     if (args[pos].equals(""String_Node_Str"")) {
      if (args.length < pos + 3) {
        badArguments();
      }
      if (SWF.decompress(new FileInputStream(args[pos + 1]),new FileOutputStream(args[pos + 2]))) {
        System.out.println(""String_Node_Str"");
        System.exit(0);
      }
 else {
        System.err.println(""String_Node_Str"");
        System.exit(1);
      }
    }
 else     if (args[pos].equals(""String_Node_Str"")) {
      if (args.length < pos + 2) {
        badArguments();
      }
      try {
        Configuration.dump_tags=true;
        SWF swf=parseSWF(args[pos + 1]);
      }
 catch (      Exception ex) {
        Logger.getLogger(Main.class.getName()).log(Level.SEVERE,null,ex);
        System.exit(1);
      }
      System.exit(0);
    }
 else     if (args[pos].equals(""String_Node_Str"") || args[pos].equals(""String_Node_Str"") || args[pos].equals(""String_Node_Str"")) {
      printHeader();
      printCmdLineUsage();
      System.exit(0);
    }
 else     if (args.length == pos + 1) {
      autoCheckForUpdates();
      openFile(args[pos]);
    }
 else {
      badArguments();
    }
  }
}","/** 
 * @param args the command line arguments
 */
public static void main(String[] args) throws IOException {
  loadProperties();
  View.setLookAndFeel();
  Configuration.loadFromFile(getConfigFile(),getReplacementsFile());
  int pos=0;
  if (args.length > 0) {
    if (args[0].equals(""String_Node_Str"")) {
      Configuration.debugMode=true;
      pos++;
    }
  }
  initLogging(Configuration.debugMode);
  if (args.length < pos + 1) {
    autoCheckForUpdates();
    offerAssociation();
    showModeFrame();
  }
 else {
    if (args[pos].equals(""String_Node_Str"")) {
      associate(false);
    }
 else     if (args[pos].equals(""String_Node_Str"")) {
      associate(true);
    }
 else     if (args[pos].equals(""String_Node_Str"")) {
      int port=55555;
      for (int i=pos; i < args.length; i++) {
        if (args[i].startsWith(""String_Node_Str"")) {
          try {
            port=Integer.parseInt(args[pos].substring(2));
          }
 catch (          NumberFormatException nex) {
            System.err.println(""String_Node_Str"");
          }
        }
      }
      if (proxyFrame == null) {
        proxyFrame=new ProxyFrame();
      }
      proxyFrame.setPort(port);
      addTrayIcon();
      switchProxy();
    }
 else     if (args[pos].equals(""String_Node_Str"")) {
      if (args.length < pos + 4) {
        badArguments();
      }
      String validExportFormats[]=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      String exportFormat=args[pos + 1].toLowerCase();
      if (!Arrays.asList(validExportFormats).contains(exportFormat)) {
        System.err.println(""String_Node_Str"" + exportFormat);
        badArguments();
      }
      File outDir=new File(args[pos + 2]);
      File inFile=new File(args[pos + 3]);
      if (!inFile.exists()) {
        System.err.println(""String_Node_Str"");
        badArguments();
      }
      commandLineMode=true;
      boolean exportOK;
      try {
        printHeader();
        SWF exfile=new SWF(new FileInputStream(inFile),(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
        exfile.addEventListener(new EventListener(){
          @Override public void handleEvent(          String event,          Object data){
            if (event.equals(""String_Node_Str"")) {
              System.out.println((String)data);
            }
          }
        }
);
switch (exportFormat) {
case ""String_Node_Str"":
          System.out.println(""String_Node_Str"");
        exfile.exportImages(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
      System.out.println(""String_Node_Str"");
    exfile.exportShapes(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
  System.out.println(""String_Node_Str"");
exfile.exportActionScript(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"",false,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
System.out.println(""String_Node_Str"");
exfile.exportMovies(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
System.out.println(""String_Node_Str"");
exfile.exportSounds(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"",true,true);
System.out.println(""String_Node_Str"");
exfile.exportBinaryData(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
System.out.println(""String_Node_Str"");
exfile.exportTexts(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"",true);
exportOK=true;
break;
case ""String_Node_Str"":
exfile.exportImages(outDir.getAbsolutePath());
exportOK=true;
break;
case ""String_Node_Str"":
exfile.exportShapes(outDir.getAbsolutePath());
exportOK=true;
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
if ((pos + 5 < args.length) && (args[pos + 4].equals(""String_Node_Str""))) {
exportOK=true;
for (int i=pos + 5; i < args.length; i++) {
exportOK=exportOK && exfile.exportAS3Class(args[i],outDir.getAbsolutePath(),exportFormat.equals(""String_Node_Str""),(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
}
}
 else {
exportOK=!exfile.exportActionScript(outDir.getAbsolutePath(),exportFormat.equals(""String_Node_Str""),(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE)).isEmpty();
}
break;
case ""String_Node_Str"":
exfile.exportMovies(outDir.getAbsolutePath());
exportOK=true;
break;
case ""String_Node_Str"":
exfile.exportSounds(outDir.getAbsolutePath(),true,true);
exportOK=true;
break;
case ""String_Node_Str"":
exfile.exportBinaryData(outDir.getAbsolutePath());
exportOK=true;
break;
case ""String_Node_Str"":
exfile.exportTexts(outDir.getAbsolutePath(),true);
exportOK=true;
break;
case ""String_Node_Str"":
exfile.exportTexts(outDir.getAbsolutePath(),false);
exportOK=true;
break;
case ""String_Node_Str"":
exfile.exportFla(outDir.getAbsolutePath(),inFile.getName(),applicationName,applicationVerName,version,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
exportOK=true;
break;
case ""String_Node_Str"":
exfile.exportXfl(outDir.getAbsolutePath(),inFile.getName(),applicationName,applicationVerName,version,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
exportOK=true;
break;
default :
exportOK=false;
}
}
 catch (Exception ex) {
exportOK=false;
System.err.print(""String_Node_Str"");
Logger.getLogger(Main.class.getName()).log(Level.SEVERE,null,ex);
System.exit(1);
}
if (exportOK) {
System.out.println(""String_Node_Str"");
System.exit(0);
}
 else {
System.err.println(""String_Node_Str"");
System.exit(1);
}
}
 else if (args[pos].equals(""String_Node_Str"")) {
if (args.length < pos + 3) {
badArguments();
}
if (SWF.fws2cws(new FileInputStream(args[pos + 1]),new FileOutputStream(args[pos + 2]))) {
System.out.println(""String_Node_Str"");
}
 else {
System.err.println(""String_Node_Str"");
}
}
 else if (args[pos].equals(""String_Node_Str"")) {
if (args.length < pos + 3) {
badArguments();
}
if (SWF.decompress(new FileInputStream(args[pos + 1]),new FileOutputStream(args[pos + 2]))) {
System.out.println(""String_Node_Str"");
System.exit(0);
}
 else {
System.err.println(""String_Node_Str"");
System.exit(1);
}
}
 else if (args[pos].equals(""String_Node_Str"")) {
if (args.length < pos + 2) {
badArguments();
}
try {
Configuration.dump_tags=true;
SWF swf=parseSWF(args[pos + 1]);
}
 catch (Exception ex) {
Logger.getLogger(Main.class.getName()).log(Level.SEVERE,null,ex);
System.exit(1);
}
System.exit(0);
}
 else if (args[pos].equals(""String_Node_Str"") || args[pos].equals(""String_Node_Str"") || args[pos].equals(""String_Node_Str"")) {
printHeader();
printCmdLineUsage();
System.exit(0);
}
 else if (args.length == pos + 1) {
autoCheckForUpdates();
offerAssociation();
openFile(args[pos]);
}
 else {
badArguments();
}
}
}",0.7552928951811924
62176,"public MainFrame(SWF swf){
  setSize(1000,700);
  tabPane=new JTabbedPane();
  View.setWindowIcon(this);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      if (Main.proxyFrame != null) {
        if (Main.proxyFrame.isVisible()) {
          return;
        }
      }
      Main.exit();
    }
  }
);
  setTitle(Main.applicationVerName + (Configuration.DISPLAY_FILENAME ? ""String_Node_Str"" + Main.getFileTitle() : ""String_Node_Str""));
  JMenuBar menuBar=new JMenuBar();
  try {
    flashPanel=new FlashPlayerPanel(this);
  }
 catch (  FlashUnsupportedException fue) {
  }
  JMenu menuFile=new JMenu(""String_Node_Str"");
  JMenuItem miOpen=new JMenuItem(""String_Node_Str"");
  miOpen.setIcon(View.getIcon(""String_Node_Str""));
  miOpen.setActionCommand(""String_Node_Str"");
  miOpen.addActionListener(this);
  JMenuItem miSave=new JMenuItem(""String_Node_Str"");
  miSave.setIcon(View.getIcon(""String_Node_Str""));
  miSave.setActionCommand(""String_Node_Str"");
  miSave.addActionListener(this);
  JMenuItem miSaveAs=new JMenuItem(""String_Node_Str"");
  miSaveAs.setIcon(View.getIcon(""String_Node_Str""));
  miSaveAs.setActionCommand(""String_Node_Str"");
  miSaveAs.addActionListener(this);
  JMenuItem menuExportFla=new JMenuItem(""String_Node_Str"");
  menuExportFla.setActionCommand(""String_Node_Str"");
  menuExportFla.addActionListener(this);
  menuExportFla.setIcon(View.getIcon(""String_Node_Str""));
  JMenuItem menuExportAll=new JMenuItem(""String_Node_Str"");
  menuExportAll.setActionCommand(""String_Node_Str"");
  menuExportAll.addActionListener(this);
  JMenuItem menuExportSel=new JMenuItem(""String_Node_Str"");
  menuExportSel.setActionCommand(""String_Node_Str"");
  menuExportSel.addActionListener(this);
  menuExportAll.setIcon(View.getIcon(""String_Node_Str""));
  menuExportSel.setIcon(View.getIcon(""String_Node_Str""));
  menuFile.add(miOpen);
  menuFile.add(miSave);
  menuFile.add(miSaveAs);
  menuFile.add(menuExportFla);
  menuFile.add(menuExportAll);
  menuFile.add(menuExportSel);
  menuFile.addSeparator();
  JMenuItem miClose=new JMenuItem(""String_Node_Str"");
  miClose.setIcon(View.getIcon(""String_Node_Str""));
  miClose.setActionCommand(""String_Node_Str"");
  miClose.addActionListener(this);
  menuFile.add(miClose);
  menuBar.add(menuFile);
  JMenu menuDeobfuscation=new JMenu(""String_Node_Str"");
  menuDeobfuscation.setIcon(View.getIcon(""String_Node_Str""));
  JMenuItem miDeobfuscation=new JMenuItem(""String_Node_Str"");
  miDeobfuscation.setActionCommand(""String_Node_Str"");
  miDeobfuscation.addActionListener(this);
  autoDeobfuscateMenuItem=new JCheckBoxMenuItem(""String_Node_Str"");
  autoDeobfuscateMenuItem.setState((Boolean)Configuration.getConfig(""String_Node_Str"",true));
  autoDeobfuscateMenuItem.addActionListener(this);
  autoDeobfuscateMenuItem.setActionCommand(""String_Node_Str"");
  menuDeobfuscation.add(autoDeobfuscateMenuItem);
  JCheckBoxMenuItem miSubLimiter=new JCheckBoxMenuItem(""String_Node_Str"");
  miSubLimiter.setActionCommand(""String_Node_Str"");
  miSubLimiter.addActionListener(this);
  JMenuItem miRenameOneIdentifier=new JMenuItem(""String_Node_Str"");
  miRenameOneIdentifier.setActionCommand(""String_Node_Str"");
  miRenameOneIdentifier.addActionListener(this);
  JMenuItem miRenameIdentifiers=new JMenuItem(""String_Node_Str"");
  miRenameIdentifiers.setActionCommand(""String_Node_Str"");
  miRenameIdentifiers.addActionListener(this);
  JMenuItem miRemoveDeadCode=new JMenuItem(""String_Node_Str"");
  miRemoveDeadCode.setActionCommand(""String_Node_Str"");
  miRemoveDeadCode.addActionListener(this);
  JMenuItem miRemoveDeadCodeAll=new JMenuItem(""String_Node_Str"");
  miRemoveDeadCodeAll.setActionCommand(""String_Node_Str"");
  miRemoveDeadCodeAll.addActionListener(this);
  JMenuItem miTraps=new JMenuItem(""String_Node_Str"");
  miTraps.setActionCommand(""String_Node_Str"");
  miTraps.addActionListener(this);
  JMenuItem miTrapsAll=new JMenuItem(""String_Node_Str"");
  miTrapsAll.setActionCommand(""String_Node_Str"");
  miTrapsAll.addActionListener(this);
  JMenuItem miControlFlow=new JMenuItem(""String_Node_Str"");
  miControlFlow.setActionCommand(""String_Node_Str"");
  miControlFlow.addActionListener(this);
  JMenuItem miControlFlowAll=new JMenuItem(""String_Node_Str"");
  miControlFlowAll.setActionCommand(""String_Node_Str"");
  miControlFlowAll.addActionListener(this);
  menuDeobfuscation.add(miRenameOneIdentifier);
  menuDeobfuscation.add(miRenameIdentifiers);
  menuDeobfuscation.add(miDeobfuscation);
  JMenu menuTools=new JMenu(""String_Node_Str"");
  JMenuItem miProxy=new JMenuItem(""String_Node_Str"");
  miProxy.setActionCommand(""String_Node_Str"");
  miProxy.setIcon(View.getIcon(""String_Node_Str""));
  miProxy.addActionListener(this);
  JMenuItem miSearchScript=new JMenuItem(""String_Node_Str"");
  miSearchScript.addActionListener(this);
  miSearchScript.setActionCommand(""String_Node_Str"");
  miSearchScript.setIcon(View.getIcon(""String_Node_Str""));
  menuTools.add(miSearchScript);
  miInternalViewer=new JCheckBoxMenuItem(""String_Node_Str"");
  miInternalViewer.setSelected((Boolean)Configuration.getConfig(""String_Node_Str"",(Boolean)(flashPanel == null)));
  if (flashPanel == null) {
    miInternalViewer.setSelected(true);
    miInternalViewer.setEnabled(false);
  }
  miInternalViewer.setActionCommand(""String_Node_Str"");
  miInternalViewer.addActionListener(this);
  menuTools.add(miInternalViewer);
  miParallelSpeedUp=new JCheckBoxMenuItem(""String_Node_Str"");
  miParallelSpeedUp.setSelected((Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
  miParallelSpeedUp.setActionCommand(""String_Node_Str"");
  miParallelSpeedUp.addActionListener(this);
  menuTools.add(miParallelSpeedUp);
  menuTools.add(miProxy);
  menuTools.add(menuDeobfuscation);
  JMenuItem miGotoDocumentClass=new JMenuItem(""String_Node_Str"");
  miGotoDocumentClass.setActionCommand(""String_Node_Str"");
  miGotoDocumentClass.addActionListener(this);
  if (swf.fileAttributes.actionScript3) {
    menuTools.add(miGotoDocumentClass);
  }
  menuBar.add(menuTools);
  JMenu menuHelp=new JMenu(""String_Node_Str"");
  JMenuItem miAbout=new JMenuItem(""String_Node_Str"");
  miAbout.setIcon(View.getIcon(""String_Node_Str""));
  miAbout.setActionCommand(""String_Node_Str"");
  miAbout.addActionListener(this);
  JMenuItem miCheckUpdates=new JMenuItem(""String_Node_Str"");
  miCheckUpdates.setActionCommand(""String_Node_Str"");
  miCheckUpdates.setIcon(View.getIcon(""String_Node_Str""));
  miCheckUpdates.addActionListener(this);
  JMenuItem miHelpUs=new JMenuItem(""String_Node_Str"");
  miHelpUs.setActionCommand(""String_Node_Str"");
  miHelpUs.setIcon(View.getIcon(""String_Node_Str""));
  miHelpUs.addActionListener(this);
  JMenuItem miHomepage=new JMenuItem(""String_Node_Str"");
  miHomepage.setActionCommand(""String_Node_Str"");
  miHomepage.setIcon(View.getIcon(""String_Node_Str""));
  miHomepage.addActionListener(this);
  menuHelp.add(miCheckUpdates);
  menuHelp.add(miHelpUs);
  menuHelp.add(miHomepage);
  menuHelp.add(miAbout);
  menuBar.add(menuHelp);
  setJMenuBar(menuBar);
  List<Object> objs=new ArrayList<>();
  objs.addAll(swf.tags);
  this.swf=swf;
  java.awt.Container cnt=getContentPane();
  cnt.setLayout(new BorderLayout());
  detailPanel=new JPanel();
  detailPanel.setLayout(new CardLayout());
  JPanel whitePanel=new JPanel();
  whitePanel.setBackground(Color.white);
  detailPanel.add(whitePanel,DETAILCARDEMPTYPANEL);
  CardLayout cl2=(CardLayout)(detailPanel.getLayout());
  cl2.show(detailPanel,DETAILCARDEMPTYPANEL);
  abcList=new ArrayList<>();
  getActionScript3(objs,abcList);
  if (!abcList.isEmpty()) {
    addTab(tabPane,abcPanel=new ABCPanel(abcList),""String_Node_Str"",View.getIcon(""String_Node_Str""));
    detailPanel.add(abcPanel.tabbedPane,DETAILCARDAS3NAVIGATOR);
  }
 else {
    actionPanel=new ActionPanel();
    addTab(tabPane,actionPanel,""String_Node_Str"",View.getIcon(""String_Node_Str""));
    miDeobfuscation.setEnabled(false);
  }
  tagTree=new JTree(new TagTreeModel(createTagList(objs,null),new SWFRoot((new File(Main.file)).getName())));
  tagTree.addTreeSelectionListener(this);
  DragSource dragSource=DragSource.getDefaultDragSource();
  dragSource.createDefaultDragGestureRecognizer(tagTree,DnDConstants.ACTION_COPY_OR_MOVE,new DragGestureListener(){
    @Override public void dragGestureRecognized(    DragGestureEvent dge){
      dge.startDrag(DragSource.DefaultCopyDrop,new Transferable(){
        @Override public DataFlavor[] getTransferDataFlavors(){
          return new DataFlavor[]{DataFlavor.javaFileListFlavor};
        }
        @Override public boolean isDataFlavorSupported(        DataFlavor flavor){
          return flavor.equals(DataFlavor.javaFileListFlavor);
        }
        @Override public Object getTransferData(        DataFlavor flavor) throws UnsupportedFlavorException, IOException {
          if (flavor.equals(DataFlavor.javaFileListFlavor)) {
            List<File> files=new ArrayList<>();
            String tempDir=System.getProperty(""String_Node_Str"");
            if (!tempDir.endsWith(File.separator)) {
              tempDir+=File.separator;
            }
            Random rnd=new Random();
            tempDir+=""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ System.currentTimeMillis()+ ""String_Node_Str""+ rnd.nextInt(1000);
            new File(tempDir).mkdirs();
            final ExportDialog export=new ExportDialog();
            try {
              File ftemp=new File(tempDir);
              files=exportSelection(tempDir,export);
              files.clear();
              File fs[]=ftemp.listFiles();
              for (              File f : fs) {
                files.add(f);
              }
              Main.stopWork();
            }
 catch (            IOException ex) {
              return null;
            }
            for (            File f : files) {
              f.deleteOnExit();
            }
            new File(tempDir).deleteOnExit();
            return files;
          }
          return null;
        }
      }
,new DragSourceListener(){
        @Override public void dragEnter(        DragSourceDragEvent dsde){
          enableDrop(false);
        }
        @Override public void dragOver(        DragSourceDragEvent dsde){
        }
        @Override public void dropActionChanged(        DragSourceDragEvent dsde){
        }
        @Override public void dragExit(        DragSourceEvent dse){
        }
        @Override public void dragDropEnd(        DragSourceDropEvent dsde){
          enableDrop(true);
        }
      }
);
    }
  }
);
  final JPopupMenu spritePopupMenu=new JPopupMenu();
  JMenuItem removeMenuItem=new JMenuItem(""String_Node_Str"");
  removeMenuItem.addActionListener(this);
  removeMenuItem.setActionCommand(""String_Node_Str"");
  spritePopupMenu.add(removeMenuItem);
  tagTree.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (SwingUtilities.isRightMouseButton(e)) {
        int row=tagTree.getClosestRowForLocation(e.getX(),e.getY());
        tagTree.setSelectionRow(row);
        Object tagObj=tagTree.getLastSelectedPathComponent();
        if (tagObj == null) {
          return;
        }
        if (tagObj instanceof TagNode) {
          tagObj=((TagNode)tagObj).tag;
        }
        if (tagObj instanceof DefineSpriteTag) {
          spritePopupMenu.show(e.getComponent(),e.getX(),e.getY());
        }
      }
    }
  }
);
  TreeCellRenderer tcr=new DefaultTreeCellRenderer(){
    @Override public Component getTreeCellRendererComponent(    JTree tree,    Object value,    boolean sel,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      super.getTreeCellRendererComponent(tree,value,sel,expanded,leaf,row,hasFocus);
      Object val=value;
      if (val instanceof TagNode) {
        val=((TagNode)val).tag;
      }
      String type=getTagType(val);
      if (row == 0) {
        setIcon(View.getIcon(""String_Node_Str""));
      }
 else       if (type != null) {
        if (type.equals(""String_Node_Str"") && expanded) {
          type=""String_Node_Str"";
        }
        setIcon(View.getIcon(type + ""String_Node_Str""));
      }
 else {
      }
      return this;
    }
  }
;
  tagTree.setCellRenderer(tcr);
  loadingPanel.setPreferredSize(new Dimension(30,30));
  statusPanel=new JPanel();
  statusPanel.setPreferredSize(new Dimension(1,30));
  statusPanel.setBorder(new BevelBorder(BevelBorder.LOWERED));
  statusPanel.setLayout(new BorderLayout());
  statusPanel.add(loadingPanel,BorderLayout.WEST);
  statusPanel.add(statusLabel,BorderLayout.CENTER);
  loadingPanel.setVisible(false);
  cnt.add(statusPanel,BorderLayout.SOUTH);
  for (  Tag t : swf.tags) {
    if (t instanceof JPEGTablesTag) {
      jtt=(JPEGTablesTag)t;
    }
  }
  characters=new HashMap<>();
  List<Object> list2=new ArrayList<>();
  list2.addAll(swf.tags);
  parseCharacters(list2);
  JPanel textTopPanel=new JPanel(new BorderLayout());
  textValue=new LineMarkedEditorPane();
  textTopPanel.add(new JScrollPane(textValue),BorderLayout.CENTER);
  textValue.setEditable(false);
  JPanel buttonsPanel=new JPanel();
  buttonsPanel.setLayout(new FlowLayout());
  textSaveButton=new JButton(""String_Node_Str"",View.getIcon(""String_Node_Str""));
  textSaveButton.setMargin(new Insets(3,3,3,10));
  textSaveButton.setActionCommand(""String_Node_Str"");
  textSaveButton.addActionListener(this);
  textEditButton=new JButton(""String_Node_Str"",View.getIcon(""String_Node_Str""));
  textEditButton.setMargin(new Insets(3,3,3,10));
  textEditButton.setActionCommand(""String_Node_Str"");
  textEditButton.addActionListener(this);
  textCancelButton=new JButton(""String_Node_Str"",View.getIcon(""String_Node_Str""));
  textCancelButton.setMargin(new Insets(3,3,3,10));
  textCancelButton.setActionCommand(""String_Node_Str"");
  textCancelButton.addActionListener(this);
  buttonsPanel.add(textEditButton);
  buttonsPanel.add(textSaveButton);
  buttonsPanel.add(textCancelButton);
  textSaveButton.setVisible(false);
  textCancelButton.setVisible(false);
  textTopPanel.add(buttonsPanel,BorderLayout.SOUTH);
  displayWithPreview=new JPanel(new CardLayout());
  JPanel textPanel=new JPanel();
  textPanel.setLayout(new BoxLayout(textPanel,BoxLayout.Y_AXIS));
  textPanel.add(textTopPanel);
  displayWithPreview.add(textPanel,CARDTEXTPANEL);
  Component leftComponent=null;
  displayPanel=new JPanel(new CardLayout());
  if (flashPanel != null) {
    leftComponent=flashPanel;
  }
 else {
    JPanel swtPanel=new JPanel(new BorderLayout());
    swtPanel.add(new JLabel(""String_Node_Str"",JLabel.CENTER),BorderLayout.CENTER);
    swtPanel.setBackground(Color.white);
    leftComponent=swtPanel;
  }
  textValue.setContentType(""String_Node_Str"");
  previewSplitPane=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
  previewSplitPane.setDividerLocation(300);
  JPanel pan=new JPanel(new BorderLayout());
  JLabel prevLabel=new JLabel(""String_Node_Str"");
  prevLabel.setHorizontalAlignment(SwingConstants.CENTER);
  prevLabel.setBorder(new BevelBorder(BevelBorder.RAISED));
  JLabel paramsLabel=new JLabel(""String_Node_Str"");
  paramsLabel.setHorizontalAlignment(SwingConstants.CENTER);
  paramsLabel.setBorder(new BevelBorder(BevelBorder.RAISED));
  pan.add(prevLabel,BorderLayout.NORTH);
  pan.add(leftComponent,BorderLayout.CENTER);
  previewSplitPane.setLeftComponent(pan);
  parametersPanel=new JPanel(new BorderLayout());
  parametersPanel.add(paramsLabel,BorderLayout.NORTH);
  parametersPanel.add(displayWithPreview,BorderLayout.CENTER);
  previewSplitPane.setRightComponent(parametersPanel);
  parametersPanel.setVisible(false);
  displayPanel.add(previewSplitPane,CARDFLASHPANEL);
  imagePanel=new ImagePanel();
  JPanel imagesCard=new JPanel(new BorderLayout());
  imagesCard.add(imagePanel,BorderLayout.CENTER);
  imageReplaceButton=new JButton(""String_Node_Str"",View.getIcon(""String_Node_Str""));
  imageReplaceButton.setMargin(new Insets(3,3,3,10));
  imageReplaceButton.setActionCommand(""String_Node_Str"");
  imageReplaceButton.addActionListener(this);
  imageButtonsPanel=new JPanel(new FlowLayout());
  imageButtonsPanel.add(imageReplaceButton);
  imagesCard.add(imageButtonsPanel,BorderLayout.SOUTH);
  displayPanel.add(imagesCard,CARDIMAGEPANEL);
  JPanel shapesCard=new JPanel(new BorderLayout());
  JPanel previewPanel=new JPanel(new BorderLayout());
  previewImagePanel=new ImagePanel();
  previewPanel.add(previewImagePanel,BorderLayout.CENTER);
  JLabel prevIntLabel=new JLabel(""String_Node_Str"");
  prevIntLabel.setHorizontalAlignment(SwingConstants.CENTER);
  prevIntLabel.setBorder(new BevelBorder(BevelBorder.RAISED));
  previewPanel.add(prevIntLabel,BorderLayout.NORTH);
  shapesCard.add(previewPanel,BorderLayout.CENTER);
  displayPanel.add(shapesCard,CARDDRAWPREVIEWPANEL);
  swfPreviewPanel=new SWFPreviwPanel();
  displayPanel.add(swfPreviewPanel,CARDSWFPREVIEWPANEL);
  displayPanel.add(new JPanel(),CARDEMPTYPANEL);
  if (actionPanel != null) {
    displayPanel.add(actionPanel,CARDACTIONSCRIPTPANEL);
  }
  if (abcPanel != null) {
    displayPanel.add(abcPanel,CARDACTIONSCRIPTPANEL);
  }
  CardLayout cl=(CardLayout)(displayPanel.getLayout());
  cl.show(displayPanel,CARDEMPTYPANEL);
  searchPanel=new JPanel();
  searchPanel.setLayout(new BorderLayout());
  searchPanel.add(filterField,BorderLayout.CENTER);
  searchPanel.add(new JLabel(View.getIcon(""String_Node_Str"")),BorderLayout.WEST);
  JLabel closeSearchButton=new JLabel(View.getIcon(""String_Node_Str""));
  closeSearchButton.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      filterField.setText(""String_Node_Str"");
      doFilter();
      searchPanel.setVisible(false);
    }
  }
);
  searchPanel.add(closeSearchButton,BorderLayout.EAST);
  JPanel pan1=new JPanel(new BorderLayout());
  pan1.add(new JScrollPane(tagTree),BorderLayout.CENTER);
  pan1.add(searchPanel,BorderLayout.SOUTH);
  filterField.setActionCommand(""String_Node_Str"");
  filterField.addActionListener(this);
  searchPanel.setVisible(false);
  filterField.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      warn();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      warn();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      warn();
    }
    public void warn(){
      doFilter();
    }
  }
);
  splitPane2=new JSplitPane(JSplitPane.VERTICAL_SPLIT,pan1,detailPanel);
  splitPane1=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,splitPane2,displayPanel);
  cnt.add(splitPane1,BorderLayout.CENTER);
  splitPane1.setDividerLocation(0.5);
  View.centerScreen(this);
  tagTree.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if ((e.getKeyCode() == 'F') && (e.isControlDown())) {
        searchPanel.setVisible(true);
        filterField.requestFocusInWindow();
      }
    }
  }
);
  detailPanel.setVisible(false);
  enableDrop(true);
}","public MainFrame(SWF swf){
  setSize(1000,700);
  tabPane=new JTabbedPane();
  View.setWindowIcon(this);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      if (Main.proxyFrame != null) {
        if (Main.proxyFrame.isVisible()) {
          return;
        }
      }
      Main.exit();
    }
  }
);
  setTitle(Main.applicationVerName + (Configuration.DISPLAY_FILENAME ? ""String_Node_Str"" + Main.getFileTitle() : ""String_Node_Str""));
  JMenuBar menuBar=new JMenuBar();
  try {
    flashPanel=new FlashPlayerPanel(this);
  }
 catch (  FlashUnsupportedException fue) {
  }
  JMenu menuFile=new JMenu(""String_Node_Str"");
  JMenuItem miOpen=new JMenuItem(""String_Node_Str"");
  miOpen.setIcon(View.getIcon(""String_Node_Str""));
  miOpen.setActionCommand(""String_Node_Str"");
  miOpen.addActionListener(this);
  JMenuItem miSave=new JMenuItem(""String_Node_Str"");
  miSave.setIcon(View.getIcon(""String_Node_Str""));
  miSave.setActionCommand(""String_Node_Str"");
  miSave.addActionListener(this);
  JMenuItem miSaveAs=new JMenuItem(""String_Node_Str"");
  miSaveAs.setIcon(View.getIcon(""String_Node_Str""));
  miSaveAs.setActionCommand(""String_Node_Str"");
  miSaveAs.addActionListener(this);
  JMenuItem menuExportFla=new JMenuItem(""String_Node_Str"");
  menuExportFla.setActionCommand(""String_Node_Str"");
  menuExportFla.addActionListener(this);
  menuExportFla.setIcon(View.getIcon(""String_Node_Str""));
  JMenuItem menuExportAll=new JMenuItem(""String_Node_Str"");
  menuExportAll.setActionCommand(""String_Node_Str"");
  menuExportAll.addActionListener(this);
  JMenuItem menuExportSel=new JMenuItem(""String_Node_Str"");
  menuExportSel.setActionCommand(""String_Node_Str"");
  menuExportSel.addActionListener(this);
  menuExportAll.setIcon(View.getIcon(""String_Node_Str""));
  menuExportSel.setIcon(View.getIcon(""String_Node_Str""));
  menuFile.add(miOpen);
  menuFile.add(miSave);
  menuFile.add(miSaveAs);
  menuFile.add(menuExportFla);
  menuFile.add(menuExportAll);
  menuFile.add(menuExportSel);
  menuFile.addSeparator();
  JMenuItem miClose=new JMenuItem(""String_Node_Str"");
  miClose.setIcon(View.getIcon(""String_Node_Str""));
  miClose.setActionCommand(""String_Node_Str"");
  miClose.addActionListener(this);
  menuFile.add(miClose);
  menuBar.add(menuFile);
  JMenu menuDeobfuscation=new JMenu(""String_Node_Str"");
  menuDeobfuscation.setIcon(View.getIcon(""String_Node_Str""));
  JMenuItem miDeobfuscation=new JMenuItem(""String_Node_Str"");
  miDeobfuscation.setActionCommand(""String_Node_Str"");
  miDeobfuscation.addActionListener(this);
  autoDeobfuscateMenuItem=new JCheckBoxMenuItem(""String_Node_Str"");
  autoDeobfuscateMenuItem.setState((Boolean)Configuration.getConfig(""String_Node_Str"",true));
  autoDeobfuscateMenuItem.addActionListener(this);
  autoDeobfuscateMenuItem.setActionCommand(""String_Node_Str"");
  JCheckBoxMenuItem miSubLimiter=new JCheckBoxMenuItem(""String_Node_Str"");
  miSubLimiter.setActionCommand(""String_Node_Str"");
  miSubLimiter.addActionListener(this);
  JMenuItem miRenameOneIdentifier=new JMenuItem(""String_Node_Str"");
  miRenameOneIdentifier.setActionCommand(""String_Node_Str"");
  miRenameOneIdentifier.addActionListener(this);
  JMenuItem miRenameIdentifiers=new JMenuItem(""String_Node_Str"");
  miRenameIdentifiers.setActionCommand(""String_Node_Str"");
  miRenameIdentifiers.addActionListener(this);
  JMenuItem miRemoveDeadCode=new JMenuItem(""String_Node_Str"");
  miRemoveDeadCode.setActionCommand(""String_Node_Str"");
  miRemoveDeadCode.addActionListener(this);
  JMenuItem miRemoveDeadCodeAll=new JMenuItem(""String_Node_Str"");
  miRemoveDeadCodeAll.setActionCommand(""String_Node_Str"");
  miRemoveDeadCodeAll.addActionListener(this);
  JMenuItem miTraps=new JMenuItem(""String_Node_Str"");
  miTraps.setActionCommand(""String_Node_Str"");
  miTraps.addActionListener(this);
  JMenuItem miTrapsAll=new JMenuItem(""String_Node_Str"");
  miTrapsAll.setActionCommand(""String_Node_Str"");
  miTrapsAll.addActionListener(this);
  JMenuItem miControlFlow=new JMenuItem(""String_Node_Str"");
  miControlFlow.setActionCommand(""String_Node_Str"");
  miControlFlow.addActionListener(this);
  JMenuItem miControlFlowAll=new JMenuItem(""String_Node_Str"");
  miControlFlowAll.setActionCommand(""String_Node_Str"");
  miControlFlowAll.addActionListener(this);
  menuDeobfuscation.add(miRenameOneIdentifier);
  menuDeobfuscation.add(miRenameIdentifiers);
  menuDeobfuscation.add(miDeobfuscation);
  JMenu menuTools=new JMenu(""String_Node_Str"");
  JMenuItem miProxy=new JMenuItem(""String_Node_Str"");
  miProxy.setActionCommand(""String_Node_Str"");
  miProxy.setIcon(View.getIcon(""String_Node_Str""));
  miProxy.addActionListener(this);
  JMenuItem miSearchScript=new JMenuItem(""String_Node_Str"");
  miSearchScript.addActionListener(this);
  miSearchScript.setActionCommand(""String_Node_Str"");
  miSearchScript.setIcon(View.getIcon(""String_Node_Str""));
  menuTools.add(miSearchScript);
  miInternalViewer=new JCheckBoxMenuItem(""String_Node_Str"");
  miInternalViewer.setSelected((Boolean)Configuration.getConfig(""String_Node_Str"",(Boolean)(flashPanel == null)));
  if (flashPanel == null) {
    miInternalViewer.setSelected(true);
    miInternalViewer.setEnabled(false);
  }
  miInternalViewer.setActionCommand(""String_Node_Str"");
  miInternalViewer.addActionListener(this);
  miParallelSpeedUp=new JCheckBoxMenuItem(""String_Node_Str"");
  miParallelSpeedUp.setSelected((Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
  miParallelSpeedUp.setActionCommand(""String_Node_Str"");
  miParallelSpeedUp.addActionListener(this);
  menuTools.add(miProxy);
  menuTools.add(menuDeobfuscation);
  JMenuItem miGotoDocumentClass=new JMenuItem(""String_Node_Str"");
  miGotoDocumentClass.setActionCommand(""String_Node_Str"");
  miGotoDocumentClass.addActionListener(this);
  if (swf.fileAttributes.actionScript3) {
    menuTools.add(miGotoDocumentClass);
  }
  menuBar.add(menuTools);
  JMenu menuSettings=new JMenu(""String_Node_Str"");
  menuSettings.add(autoDeobfuscateMenuItem);
  menuSettings.add(miInternalViewer);
  menuSettings.add(miParallelSpeedUp);
  miAssociate=new JCheckBoxMenuItem(""String_Node_Str"");
  miAssociate.setActionCommand(""String_Node_Str"");
  miAssociate.addActionListener(this);
  miAssociate.setState(isAssociated());
  if (Platform.isWindows()) {
    menuSettings.add(miAssociate);
  }
  menuBar.add(menuSettings);
  JMenu menuHelp=new JMenu(""String_Node_Str"");
  JMenuItem miAbout=new JMenuItem(""String_Node_Str"");
  miAbout.setIcon(View.getIcon(""String_Node_Str""));
  miAbout.setActionCommand(""String_Node_Str"");
  miAbout.addActionListener(this);
  JMenuItem miCheckUpdates=new JMenuItem(""String_Node_Str"");
  miCheckUpdates.setActionCommand(""String_Node_Str"");
  miCheckUpdates.setIcon(View.getIcon(""String_Node_Str""));
  miCheckUpdates.addActionListener(this);
  JMenuItem miHelpUs=new JMenuItem(""String_Node_Str"");
  miHelpUs.setActionCommand(""String_Node_Str"");
  miHelpUs.setIcon(View.getIcon(""String_Node_Str""));
  miHelpUs.addActionListener(this);
  JMenuItem miHomepage=new JMenuItem(""String_Node_Str"");
  miHomepage.setActionCommand(""String_Node_Str"");
  miHomepage.setIcon(View.getIcon(""String_Node_Str""));
  miHomepage.addActionListener(this);
  menuHelp.add(miCheckUpdates);
  menuHelp.add(miHelpUs);
  menuHelp.add(miHomepage);
  menuHelp.add(miAbout);
  menuBar.add(menuHelp);
  setJMenuBar(menuBar);
  List<Object> objs=new ArrayList<>();
  objs.addAll(swf.tags);
  this.swf=swf;
  java.awt.Container cnt=getContentPane();
  cnt.setLayout(new BorderLayout());
  detailPanel=new JPanel();
  detailPanel.setLayout(new CardLayout());
  JPanel whitePanel=new JPanel();
  whitePanel.setBackground(Color.white);
  detailPanel.add(whitePanel,DETAILCARDEMPTYPANEL);
  CardLayout cl2=(CardLayout)(detailPanel.getLayout());
  cl2.show(detailPanel,DETAILCARDEMPTYPANEL);
  abcList=new ArrayList<>();
  getActionScript3(objs,abcList);
  if (!abcList.isEmpty()) {
    addTab(tabPane,abcPanel=new ABCPanel(abcList),""String_Node_Str"",View.getIcon(""String_Node_Str""));
    detailPanel.add(abcPanel.tabbedPane,DETAILCARDAS3NAVIGATOR);
  }
 else {
    actionPanel=new ActionPanel();
    addTab(tabPane,actionPanel,""String_Node_Str"",View.getIcon(""String_Node_Str""));
    miDeobfuscation.setEnabled(false);
  }
  tagTree=new JTree(new TagTreeModel(createTagList(objs,null),new SWFRoot((new File(Main.file)).getName())));
  tagTree.addTreeSelectionListener(this);
  DragSource dragSource=DragSource.getDefaultDragSource();
  dragSource.createDefaultDragGestureRecognizer(tagTree,DnDConstants.ACTION_COPY_OR_MOVE,new DragGestureListener(){
    @Override public void dragGestureRecognized(    DragGestureEvent dge){
      dge.startDrag(DragSource.DefaultCopyDrop,new Transferable(){
        @Override public DataFlavor[] getTransferDataFlavors(){
          return new DataFlavor[]{DataFlavor.javaFileListFlavor};
        }
        @Override public boolean isDataFlavorSupported(        DataFlavor flavor){
          return flavor.equals(DataFlavor.javaFileListFlavor);
        }
        @Override public Object getTransferData(        DataFlavor flavor) throws UnsupportedFlavorException, IOException {
          if (flavor.equals(DataFlavor.javaFileListFlavor)) {
            List<File> files=new ArrayList<>();
            String tempDir=System.getProperty(""String_Node_Str"");
            if (!tempDir.endsWith(File.separator)) {
              tempDir+=File.separator;
            }
            Random rnd=new Random();
            tempDir+=""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ System.currentTimeMillis()+ ""String_Node_Str""+ rnd.nextInt(1000);
            new File(tempDir).mkdirs();
            final ExportDialog export=new ExportDialog();
            try {
              File ftemp=new File(tempDir);
              files=exportSelection(tempDir,export);
              files.clear();
              File fs[]=ftemp.listFiles();
              for (              File f : fs) {
                files.add(f);
              }
              Main.stopWork();
            }
 catch (            IOException ex) {
              return null;
            }
            for (            File f : files) {
              f.deleteOnExit();
            }
            new File(tempDir).deleteOnExit();
            return files;
          }
          return null;
        }
      }
,new DragSourceListener(){
        @Override public void dragEnter(        DragSourceDragEvent dsde){
          enableDrop(false);
        }
        @Override public void dragOver(        DragSourceDragEvent dsde){
        }
        @Override public void dropActionChanged(        DragSourceDragEvent dsde){
        }
        @Override public void dragExit(        DragSourceEvent dse){
        }
        @Override public void dragDropEnd(        DragSourceDropEvent dsde){
          enableDrop(true);
        }
      }
);
    }
  }
);
  final JPopupMenu spritePopupMenu=new JPopupMenu();
  JMenuItem removeMenuItem=new JMenuItem(""String_Node_Str"");
  removeMenuItem.addActionListener(this);
  removeMenuItem.setActionCommand(""String_Node_Str"");
  spritePopupMenu.add(removeMenuItem);
  tagTree.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (SwingUtilities.isRightMouseButton(e)) {
        int row=tagTree.getClosestRowForLocation(e.getX(),e.getY());
        tagTree.setSelectionRow(row);
        Object tagObj=tagTree.getLastSelectedPathComponent();
        if (tagObj == null) {
          return;
        }
        if (tagObj instanceof TagNode) {
          tagObj=((TagNode)tagObj).tag;
        }
        if (tagObj instanceof DefineSpriteTag) {
          spritePopupMenu.show(e.getComponent(),e.getX(),e.getY());
        }
      }
    }
  }
);
  TreeCellRenderer tcr=new DefaultTreeCellRenderer(){
    @Override public Component getTreeCellRendererComponent(    JTree tree,    Object value,    boolean sel,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      super.getTreeCellRendererComponent(tree,value,sel,expanded,leaf,row,hasFocus);
      Object val=value;
      if (val instanceof TagNode) {
        val=((TagNode)val).tag;
      }
      String type=getTagType(val);
      if (row == 0) {
        setIcon(View.getIcon(""String_Node_Str""));
      }
 else       if (type != null) {
        if (type.equals(""String_Node_Str"") && expanded) {
          type=""String_Node_Str"";
        }
        setIcon(View.getIcon(type + ""String_Node_Str""));
      }
 else {
      }
      return this;
    }
  }
;
  tagTree.setCellRenderer(tcr);
  loadingPanel.setPreferredSize(new Dimension(30,30));
  statusPanel=new JPanel();
  statusPanel.setPreferredSize(new Dimension(1,30));
  statusPanel.setBorder(new BevelBorder(BevelBorder.LOWERED));
  statusPanel.setLayout(new BorderLayout());
  statusPanel.add(loadingPanel,BorderLayout.WEST);
  statusPanel.add(statusLabel,BorderLayout.CENTER);
  loadingPanel.setVisible(false);
  cnt.add(statusPanel,BorderLayout.SOUTH);
  for (  Tag t : swf.tags) {
    if (t instanceof JPEGTablesTag) {
      jtt=(JPEGTablesTag)t;
    }
  }
  characters=new HashMap<>();
  List<Object> list2=new ArrayList<>();
  list2.addAll(swf.tags);
  parseCharacters(list2);
  JPanel textTopPanel=new JPanel(new BorderLayout());
  textValue=new LineMarkedEditorPane();
  textTopPanel.add(new JScrollPane(textValue),BorderLayout.CENTER);
  textValue.setEditable(false);
  JPanel buttonsPanel=new JPanel();
  buttonsPanel.setLayout(new FlowLayout());
  textSaveButton=new JButton(""String_Node_Str"",View.getIcon(""String_Node_Str""));
  textSaveButton.setMargin(new Insets(3,3,3,10));
  textSaveButton.setActionCommand(""String_Node_Str"");
  textSaveButton.addActionListener(this);
  textEditButton=new JButton(""String_Node_Str"",View.getIcon(""String_Node_Str""));
  textEditButton.setMargin(new Insets(3,3,3,10));
  textEditButton.setActionCommand(""String_Node_Str"");
  textEditButton.addActionListener(this);
  textCancelButton=new JButton(""String_Node_Str"",View.getIcon(""String_Node_Str""));
  textCancelButton.setMargin(new Insets(3,3,3,10));
  textCancelButton.setActionCommand(""String_Node_Str"");
  textCancelButton.addActionListener(this);
  buttonsPanel.add(textEditButton);
  buttonsPanel.add(textSaveButton);
  buttonsPanel.add(textCancelButton);
  textSaveButton.setVisible(false);
  textCancelButton.setVisible(false);
  textTopPanel.add(buttonsPanel,BorderLayout.SOUTH);
  displayWithPreview=new JPanel(new CardLayout());
  JPanel textPanel=new JPanel();
  textPanel.setLayout(new BoxLayout(textPanel,BoxLayout.Y_AXIS));
  textPanel.add(textTopPanel);
  displayWithPreview.add(textPanel,CARDTEXTPANEL);
  Component leftComponent=null;
  displayPanel=new JPanel(new CardLayout());
  if (flashPanel != null) {
    leftComponent=flashPanel;
  }
 else {
    JPanel swtPanel=new JPanel(new BorderLayout());
    swtPanel.add(new JLabel(""String_Node_Str"",JLabel.CENTER),BorderLayout.CENTER);
    swtPanel.setBackground(Color.white);
    leftComponent=swtPanel;
  }
  textValue.setContentType(""String_Node_Str"");
  previewSplitPane=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
  previewSplitPane.setDividerLocation(300);
  JPanel pan=new JPanel(new BorderLayout());
  JLabel prevLabel=new JLabel(""String_Node_Str"");
  prevLabel.setHorizontalAlignment(SwingConstants.CENTER);
  prevLabel.setBorder(new BevelBorder(BevelBorder.RAISED));
  JLabel paramsLabel=new JLabel(""String_Node_Str"");
  paramsLabel.setHorizontalAlignment(SwingConstants.CENTER);
  paramsLabel.setBorder(new BevelBorder(BevelBorder.RAISED));
  pan.add(prevLabel,BorderLayout.NORTH);
  pan.add(leftComponent,BorderLayout.CENTER);
  previewSplitPane.setLeftComponent(pan);
  parametersPanel=new JPanel(new BorderLayout());
  parametersPanel.add(paramsLabel,BorderLayout.NORTH);
  parametersPanel.add(displayWithPreview,BorderLayout.CENTER);
  previewSplitPane.setRightComponent(parametersPanel);
  parametersPanel.setVisible(false);
  displayPanel.add(previewSplitPane,CARDFLASHPANEL);
  imagePanel=new ImagePanel();
  JPanel imagesCard=new JPanel(new BorderLayout());
  imagesCard.add(imagePanel,BorderLayout.CENTER);
  imageReplaceButton=new JButton(""String_Node_Str"",View.getIcon(""String_Node_Str""));
  imageReplaceButton.setMargin(new Insets(3,3,3,10));
  imageReplaceButton.setActionCommand(""String_Node_Str"");
  imageReplaceButton.addActionListener(this);
  imageButtonsPanel=new JPanel(new FlowLayout());
  imageButtonsPanel.add(imageReplaceButton);
  imagesCard.add(imageButtonsPanel,BorderLayout.SOUTH);
  displayPanel.add(imagesCard,CARDIMAGEPANEL);
  JPanel shapesCard=new JPanel(new BorderLayout());
  JPanel previewPanel=new JPanel(new BorderLayout());
  previewImagePanel=new ImagePanel();
  previewPanel.add(previewImagePanel,BorderLayout.CENTER);
  JLabel prevIntLabel=new JLabel(""String_Node_Str"");
  prevIntLabel.setHorizontalAlignment(SwingConstants.CENTER);
  prevIntLabel.setBorder(new BevelBorder(BevelBorder.RAISED));
  previewPanel.add(prevIntLabel,BorderLayout.NORTH);
  shapesCard.add(previewPanel,BorderLayout.CENTER);
  displayPanel.add(shapesCard,CARDDRAWPREVIEWPANEL);
  swfPreviewPanel=new SWFPreviwPanel();
  displayPanel.add(swfPreviewPanel,CARDSWFPREVIEWPANEL);
  displayPanel.add(new JPanel(),CARDEMPTYPANEL);
  if (actionPanel != null) {
    displayPanel.add(actionPanel,CARDACTIONSCRIPTPANEL);
  }
  if (abcPanel != null) {
    displayPanel.add(abcPanel,CARDACTIONSCRIPTPANEL);
  }
  CardLayout cl=(CardLayout)(displayPanel.getLayout());
  cl.show(displayPanel,CARDEMPTYPANEL);
  searchPanel=new JPanel();
  searchPanel.setLayout(new BorderLayout());
  searchPanel.add(filterField,BorderLayout.CENTER);
  searchPanel.add(new JLabel(View.getIcon(""String_Node_Str"")),BorderLayout.WEST);
  JLabel closeSearchButton=new JLabel(View.getIcon(""String_Node_Str""));
  closeSearchButton.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      filterField.setText(""String_Node_Str"");
      doFilter();
      searchPanel.setVisible(false);
    }
  }
);
  searchPanel.add(closeSearchButton,BorderLayout.EAST);
  JPanel pan1=new JPanel(new BorderLayout());
  pan1.add(new JScrollPane(tagTree),BorderLayout.CENTER);
  pan1.add(searchPanel,BorderLayout.SOUTH);
  filterField.setActionCommand(""String_Node_Str"");
  filterField.addActionListener(this);
  searchPanel.setVisible(false);
  filterField.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      warn();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      warn();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      warn();
    }
    public void warn(){
      doFilter();
    }
  }
);
  splitPane2=new JSplitPane(JSplitPane.VERTICAL_SPLIT,pan1,detailPanel);
  splitPane1=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,splitPane2,displayPanel);
  cnt.add(splitPane1,BorderLayout.CENTER);
  splitPane1.setDividerLocation(0.5);
  View.centerScreen(this);
  tagTree.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if ((e.getKeyCode() == 'F') && (e.isControlDown())) {
        searchPanel.setVisible(true);
        filterField.requestFocusInWindow();
      }
    }
  }
);
  detailPanel.setVisible(false);
  enableDrop(true);
}",0.9849070398997284
62177,"@Override public void actionPerformed(ActionEvent e){
switch (e.getActionCommand()) {
case ""String_Node_Str"":
    String documentClass=null;
  loopdc:   for (  Tag t : swf.tags) {
    if (t instanceof SymbolClassTag) {
      SymbolClassTag sc=(SymbolClassTag)t;
      for (int i=0; i < sc.tagIDs.length; i++) {
        if (sc.tagIDs[i] == 0) {
          documentClass=sc.classNames[i];
          break loopdc;
        }
      }
    }
  }
if (documentClass != null) {
  abcPanel.hilightScript(documentClass);
}
break;
case ""String_Node_Str"":
String confStr=""String_Node_Str"";
if (miParallelSpeedUp.isSelected()) {
confStr+=""String_Node_Str"";
}
 else {
confStr+=""String_Node_Str"";
}
if (JOptionPane.showConfirmDialog(null,confStr,""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
Configuration.setConfig(""String_Node_Str"",(Boolean)miParallelSpeedUp.isSelected());
}
 else {
miParallelSpeedUp.setSelected(!miParallelSpeedUp.isSelected());
}
break;
case ""String_Node_Str"":
Configuration.setConfig(""String_Node_Str"",(Boolean)miInternalViewer.isSelected());
break;
case ""String_Node_Str"":
if (searchDialog == null) {
searchDialog=new SearchDialog();
}
searchDialog.setVisible(true);
if (searchDialog.result) {
final String txt=searchDialog.searchField.getText();
if (!txt.equals(""String_Node_Str"")) {
Main.startWork(""String_Node_Str"" + txt + ""String_Node_Str"");
if (abcPanel != null) {
(new Thread(){
@Override public void run(){
if (abcPanel.search(txt,searchDialog.ignoreCaseCheckBox.isSelected(),searchDialog.regexpCheckBox.isSelected())) {
showDetail(DETAILCARDAS3NAVIGATOR);
showCard(CARDACTIONSCRIPTPANEL);
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"" + txt + ""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
}
Main.stopWork();
}
}
).start();
}
 else {
(new Thread(){
@Override public void run(){
if (actionPanel.search(txt,searchDialog.ignoreCaseCheckBox.isSelected(),searchDialog.regexpCheckBox.isSelected())) {
showCard(CARDACTIONSCRIPTPANEL);
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"" + txt + ""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
}
Main.stopWork();
}
}
).start();
}
}
}
break;
case ""String_Node_Str"":
Object tagObj=tagTree.getLastSelectedPathComponent();
if (tagObj == null) {
return;
}
if (tagObj instanceof TagNode) {
tagObj=((TagNode)tagObj).tag;
}
if (tagObj instanceof ImageTag) {
ImageTag it=(ImageTag)tagObj;
if (it.importSupported()) {
JFileChooser fc=new JFileChooser();
fc.setCurrentDirectory(new File((String)Configuration.getConfig(""String_Node_Str"",""String_Node_Str"")));
fc.setFileFilter(new FileFilter(){
@Override public boolean accept(File f){
return (f.getName().toLowerCase().endsWith(""String_Node_Str"")) || (f.getName().toLowerCase().endsWith(""String_Node_Str"")) || (f.getName().toLowerCase().endsWith(""String_Node_Str""))|| (f.getName().toLowerCase().endsWith(""String_Node_Str""))|| (f.isDirectory());
}
@Override public String getDescription(){
return ""String_Node_Str"";
}
}
);
JFrame f=new JFrame();
View.setWindowIcon(f);
int returnVal=fc.showOpenDialog(f);
if (returnVal == JFileChooser.APPROVE_OPTION) {
Configuration.setConfig(""String_Node_Str"",Helper.fixDialogFile(fc.getSelectedFile()).getParentFile().getAbsolutePath());
File selfile=Helper.fixDialogFile(fc.getSelectedFile());
byte data[]=Helper.readFile(selfile.getAbsolutePath());
try {
it.setImage(data);
}
 catch (IOException ex) {
Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}
reload(true);
}
}
}
break;
case ""String_Node_Str"":
tagObj=tagTree.getLastSelectedPathComponent();
if (tagObj == null) {
return;
}
if (tagObj instanceof TagNode) {
tagObj=((TagNode)tagObj).tag;
}
if (tagObj instanceof DefineSpriteTag) {
DefineSpriteTag sprite=(DefineSpriteTag)tagObj;
for (int i=0; i < swf.tags.size(); i++) {
Tag t=swf.tags.get(i);
if (t == sprite) {
swf.tags.remove(i);
i--;
}
 else if (t instanceof DefineSpriteTag) {
DefineSpriteTag st=(DefineSpriteTag)t;
for (int j=0; j < st.subTags.size(); j++) {
Tag t2=st.subTags.get(j);
Set<Integer> needed=t2.getNeededCharacters();
if (needed.contains(sprite.spriteId)) {
st.subTags.remove(j);
j--;
}
}
}
 else {
Set<Integer> needed=t.getNeededCharacters();
if (needed.contains(sprite.spriteId)) {
swf.tags.remove(i);
i--;
}
}
}
showCard(CARDEMPTYPANEL);
refreshTree();
}
break;
case ""String_Node_Str"":
setEditText(true);
break;
case ""String_Node_Str"":
setEditText(false);
break;
case ""String_Node_Str"":
if (oldValue instanceof TextTag) {
try {
((TextTag)oldValue).setFormattedText(swf.tags,textValue.getText());
setEditText(false);
}
 catch (ParseException ex) {
JOptionPane.showMessageDialog(null,""String_Node_Str"" + ex.text + ""String_Node_Str""+ ex.line,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}
}
break;
case ""String_Node_Str"":
if (JOptionPane.showConfirmDialog(this,""String_Node_Str"" + (autoDeobfuscateMenuItem.getState() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
Configuration.setConfig(""String_Node_Str"",autoDeobfuscateMenuItem.getState());
}
 else {
autoDeobfuscateMenuItem.setState(!autoDeobfuscateMenuItem.getState());
}
break;
case ""String_Node_Str"":
setVisible(false);
if (Main.proxyFrame != null) {
if (Main.proxyFrame.isVisible()) {
return;
}
}
Main.exit();
break;
}
if (Main.isWorking()) {
return;
}
switch (e.getActionCommand()) {
case ""String_Node_Str"":
if (swf.fileAttributes.actionScript3) {
final int multiName=abcPanel.decompiledTextArea.getMultinameUnderCursor();
if (multiName > 0) {
(new Thread(){
@Override public void run(){
Main.startWork(""String_Node_Str"");
renameMultiname(multiName);
Main.stopWork();
}
}
).start();
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
}
}
 else {
final String identifier=actionPanel.getStringUnderCursor();
if (identifier != null) {
(new Thread(){
@Override public void run(){
Main.startWork(""String_Node_Str"");
renameIdentifier(identifier);
Main.stopWork();
}
}
).start();
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
}
}
break;
case ""String_Node_Str"":
Main.about();
break;
case ""String_Node_Str"":
Main.showProxy();
break;
case ""String_Node_Str"":
if (e.getSource() instanceof JCheckBoxMenuItem) {
Main.setSubLimiter(((JCheckBoxMenuItem)e.getSource()).getState());
}
break;
case ""String_Node_Str"":
try {
Main.saveFile(Main.file);
}
 catch (IOException ex) {
Logger.getLogger(com.jpexs.decompiler.flash.abc.gui.ABCPanel.class.getName()).log(Level.SEVERE,null,ex);
JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}
break;
case ""String_Node_Str"":
if (Main.saveFileDialog()) {
setTitle(Main.applicationVerName + (Configuration.DISPLAY_FILENAME ? ""String_Node_Str"" + Main.getFileTitle() : ""String_Node_Str""));
}
break;
case ""String_Node_Str"":
Main.openFileDialog();
break;
case ""String_Node_Str"":
JFileChooser fc=new JFileChooser();
String selDir=(String)Configuration.getConfig(""String_Node_Str"",""String_Node_Str"");
fc.setCurrentDirectory(new File(selDir));
if (!selDir.endsWith(File.separator)) {
selDir+=File.separator;
}
String fileName=(new File(Main.file).getName());
fileName=fileName.substring(0,fileName.length() - 4) + ""String_Node_Str"";
fc.setSelectedFile(new File(selDir + fileName));
FileFilter fla=new FileFilter(){
@Override public boolean accept(File f){
return f.isDirectory() || (f.getName().toLowerCase().endsWith(""String_Node_Str""));
}
@Override public String getDescription(){
return ""String_Node_Str"";
}
}
;
FileFilter xfl=new FileFilter(){
@Override public boolean accept(File f){
return f.isDirectory() || (f.getName().toLowerCase().endsWith(""String_Node_Str""));
}
@Override public String getDescription(){
return ""String_Node_Str"";
}
}
;
fc.setFileFilter(fla);
fc.addChoosableFileFilter(xfl);
fc.setAcceptAllFileFilterUsed(false);
JFrame f=new JFrame();
View.setWindowIcon(f);
int returnVal=fc.showSaveDialog(f);
if (returnVal == JFileChooser.APPROVE_OPTION) {
Configuration.setConfig(""String_Node_Str"",Helper.fixDialogFile(fc.getSelectedFile()).getParentFile().getAbsolutePath());
File sf=Helper.fixDialogFile(fc.getSelectedFile());
Main.startWork(""String_Node_Str"");
final boolean compressed=fc.getFileFilter() == fla;
if (!compressed) {
if (sf.getName().endsWith(""String_Node_Str"")) {
sf=new File(sf.getAbsolutePath().substring(0,sf.getAbsolutePath().length() - 4) + ""String_Node_Str"");
}
}
final File selfile=sf;
(new Thread(){
@Override public void run(){
if (compressed) {
swf.exportFla(selfile.getAbsolutePath(),new File(Main.file).getName(),Main.applicationName,Main.applicationVerName,Main.version,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
}
 else {
swf.exportXfl(selfile.getAbsolutePath(),new File(Main.file).getName(),Main.applicationName,Main.applicationVerName,Main.version,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
}
Main.stopWork();
}
}
).start();
}
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
final ExportDialog export=new ExportDialog();
export.setVisible(true);
if (!export.cancelled) {
JFileChooser chooser=new JFileChooser();
chooser.setCurrentDirectory(new java.io.File((String)Configuration.getConfig(""String_Node_Str"",""String_Node_Str"")));
chooser.setDialogTitle(""String_Node_Str"");
chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
chooser.setAcceptAllFileFilterUsed(false);
if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
final long timeBefore=System.currentTimeMillis();
Main.startWork(""String_Node_Str"");
final String selFile=Helper.fixDialogFile(chooser.getSelectedFile()).getAbsolutePath();
Configuration.setConfig(""String_Node_Str"",Helper.fixDialogFile(chooser.getSelectedFile()).getParentFile().getAbsolutePath());
final boolean isPcode=export.getOption(ExportDialog.OPTION_ACTIONSCRIPT) == 1;
final boolean isMp3OrWav=export.getOption(ExportDialog.OPTION_SOUNDS) == 0;
final boolean isFormatted=export.getOption(ExportDialog.OPTION_TEXTS) == 1;
final boolean onlySel=e.getActionCommand().endsWith(""String_Node_Str"");
(new Thread(){
@Override public void run(){
try {
if (onlySel) {
exportSelection(selFile,export);
}
 else {
swf.exportImages(selFile + File.separator + ""String_Node_Str"");
swf.exportShapes(selFile + File.separator + ""String_Node_Str"");
swf.exportTexts(selFile + File.separator + ""String_Node_Str"",isFormatted);
swf.exportMovies(selFile + File.separator + ""String_Node_Str"");
swf.exportSounds(selFile + File.separator + ""String_Node_Str"",isMp3OrWav,isMp3OrWav);
swf.exportBinaryData(selFile + File.separator + ""String_Node_Str"");
swf.exportActionScript(selFile,isPcode,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
}
}
 catch (Exception ex) {
Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
JOptionPane.showMessageDialog(null,""String_Node_Str"");
}
Main.stopWork();
long timeAfter=System.currentTimeMillis();
long timeMs=timeAfter - timeBefore;
long timeS=timeMs / 1000;
timeMs=timeMs % 1000;
long timeM=timeS / 60;
timeS=timeS % 60;
long timeH=timeM / 60;
timeM=timeM % 60;
String timeStr=""String_Node_Str"";
if (timeH > 0) {
timeStr+=Helper.padZeros(timeH,2) + ""String_Node_Str"";
}
timeStr+=Helper.padZeros(timeM,2) + ""String_Node_Str"";
timeStr+=Helper.padZeros(timeS,2) + ""String_Node_Str"" + Helper.padZeros(timeMs,3);
setStatus(""String_Node_Str"" + timeStr);
}
}
).start();
}
}
break;
case ""String_Node_Str"":
if (!Main.checkForUpdates()) {
JOptionPane.showMessageDialog(null,""String_Node_Str"");
}
break;
case ""String_Node_Str"":
String helpUsURL=Main.projectPage + ""String_Node_Str"";
if (java.awt.Desktop.isDesktopSupported()) {
java.awt.Desktop desktop=java.awt.Desktop.getDesktop();
try {
java.net.URI uri=new java.net.URI(helpUsURL);
desktop.browse(uri);
}
 catch (Exception ex) {
}
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"" + helpUsURL + ""String_Node_Str"");
}
break;
case ""String_Node_Str"":
String homePageURL=Main.projectPage;
if (java.awt.Desktop.isDesktopSupported()) {
java.awt.Desktop desktop=java.awt.Desktop.getDesktop();
try {
java.net.URI uri=new java.net.URI(homePageURL);
desktop.browse(uri);
}
 catch (Exception ex) {
}
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"" + homePageURL);
}
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
Main.startWork(""String_Node_Str"");
final boolean all=e.getActionCommand().endsWith(""String_Node_Str"");
if ((!all) || confirmExperimental()) {
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
int cnt=0;
if (all) {
for (ABCContainerTag tag : abcPanel.list) {
tag.getABC().restoreControlFlow();
}
}
 else {
int bi=abcPanel.detailPanel.methodTraitPanel.methodCodePanel.getBodyIndex();
if (bi != -1) {
abcPanel.abc.bodies[bi].restoreControlFlow(abcPanel.abc.constants);
}
abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setBodyIndex(bi,abcPanel.abc);
}
Main.stopWork();
JOptionPane.showMessageDialog(null,""String_Node_Str"");
abcPanel.reload();
return true;
}
}
.execute();
}
break;
case ""String_Node_Str"":
if (confirmExperimental()) {
final RenameType renameType=new RenameDialog().display();
if (renameType != null) {
Main.startWork(""String_Node_Str"");
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
try {
int cnt=0;
cnt=swf.deobfuscateIdentifiers(renameType);
Main.stopWork();
JOptionPane.showMessageDialog(null,""String_Node_Str"" + cnt);
if (abcPanel != null) {
abcPanel.reload();
}
doFilter();
reload(true);
}
 catch (Exception ex) {
Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
}
return true;
}
}
.execute();
}
}
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
if (deobfuscationDialog == null) {
deobfuscationDialog=new DeobfuscationDialog();
}
deobfuscationDialog.setVisible(true);
if (deobfuscationDialog.ok) {
Main.startWork(""String_Node_Str"");
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
try {
if (deobfuscationDialog.processAllCheckbox.isSelected()) {
for (ABCContainerTag tag : abcPanel.list) {
if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_REMOVE_DEAD_CODE) {
tag.getABC().removeDeadCode();
}
 else if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_REMOVE_TRAPS) {
tag.getABC().removeTraps();
}
 else if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_RESTORE_CONTROL_FLOW) {
tag.getABC().removeTraps();
tag.getABC().restoreControlFlow();
}
}
}
 else {
int bi=abcPanel.detailPanel.methodTraitPanel.methodCodePanel.getBodyIndex();
if (bi != -1) {
if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_REMOVE_DEAD_CODE) {
abcPanel.abc.bodies[bi].removeDeadCode(abcPanel.abc.constants);
}
 else if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_REMOVE_TRAPS) {
abcPanel.abc.bodies[bi].removeTraps(abcPanel.abc.constants,abcPanel.abc,abcPanel.decompiledTextArea.getScriptLeaf().scriptIndex,abcPanel.decompiledTextArea.getClassIndex(),abcPanel.decompiledTextArea.getIsStatic());
}
 else if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_RESTORE_CONTROL_FLOW) {
abcPanel.abc.bodies[bi].removeTraps(abcPanel.abc.constants,abcPanel.abc,abcPanel.decompiledTextArea.getScriptLeaf().scriptIndex,abcPanel.decompiledTextArea.getClassIndex(),abcPanel.decompiledTextArea.getIsStatic());
abcPanel.abc.bodies[bi].restoreControlFlow(abcPanel.abc.constants);
}
}
abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setBodyIndex(bi,abcPanel.abc);
}
}
 catch (Exception ex) {
Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
}
Main.stopWork();
JOptionPane.showMessageDialog(null,""String_Node_Str"");
abcPanel.reload();
return true;
}
}
.execute();
}
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
Main.startWork(""String_Node_Str"");
final boolean rall=e.getActionCommand().endsWith(""String_Node_Str"");
if ((!rall) || confirmExperimental()) {
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
int cnt=0;
if (rall) {
for (ABCContainerTag tag : abcPanel.list) {
cnt+=tag.getABC().removeTraps();
}
}
 else {
int bi=abcPanel.detailPanel.methodTraitPanel.methodCodePanel.getBodyIndex();
if (bi != -1) {
cnt+=abcPanel.abc.bodies[bi].removeTraps(abcPanel.abc.constants,abcPanel.abc,abcPanel.decompiledTextArea.getScriptLeaf().scriptIndex,abcPanel.decompiledTextArea.getClassIndex(),abcPanel.decompiledTextArea.getIsStatic());
}
abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setBodyIndex(bi,abcPanel.abc);
}
Main.stopWork();
JOptionPane.showMessageDialog(null,""String_Node_Str"" + cnt);
abcPanel.reload();
return true;
}
}
.execute();
}
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
Main.startWork(""String_Node_Str"");
final boolean dall=e.getActionCommand().endsWith(""String_Node_Str"");
if ((!dall) || confirmExperimental()) {
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
int cnt=0;
if (dall) {
for (ABCContainerTag tag : abcPanel.list) {
cnt+=tag.getABC().removeDeadCode();
}
}
 else {
int bi=abcPanel.detailPanel.methodTraitPanel.methodCodePanel.getBodyIndex();
if (bi != -1) {
cnt+=abcPanel.abc.bodies[bi].removeDeadCode(abcPanel.abc.constants);
}
abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setBodyIndex(bi,abcPanel.abc);
}
Main.stopWork();
JOptionPane.showMessageDialog(null,""String_Node_Str"" + cnt);
abcPanel.reload();
return true;
}
}
.execute();
}
break;
}
}","@Override public void actionPerformed(ActionEvent e){
switch (e.getActionCommand()) {
case ""String_Node_Str"":
    if (miAssociate.getState() == Main.isAssociated()) {
      return;
    }
  Main.associate(miAssociate.getState());
new Timer().schedule(new TimerTask(){
  @Override public void run(){
    miAssociate.setState(Main.isAssociated());
  }
}
,500);
break;
case ""String_Node_Str"":
String documentClass=null;
loopdc: for (Tag t : swf.tags) {
if (t instanceof SymbolClassTag) {
SymbolClassTag sc=(SymbolClassTag)t;
for (int i=0; i < sc.tagIDs.length; i++) {
if (sc.tagIDs[i] == 0) {
  documentClass=sc.classNames[i];
  break loopdc;
}
}
}
}
if (documentClass != null) {
abcPanel.hilightScript(documentClass);
}
break;
case ""String_Node_Str"":
String confStr=""String_Node_Str"";
if (miParallelSpeedUp.isSelected()) {
confStr+=""String_Node_Str"";
}
 else {
confStr+=""String_Node_Str"";
}
if (JOptionPane.showConfirmDialog(null,confStr,""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
Configuration.setConfig(""String_Node_Str"",(Boolean)miParallelSpeedUp.isSelected());
}
 else {
miParallelSpeedUp.setSelected(!miParallelSpeedUp.isSelected());
}
break;
case ""String_Node_Str"":
Configuration.setConfig(""String_Node_Str"",(Boolean)miInternalViewer.isSelected());
break;
case ""String_Node_Str"":
if (searchDialog == null) {
searchDialog=new SearchDialog();
}
searchDialog.setVisible(true);
if (searchDialog.result) {
final String txt=searchDialog.searchField.getText();
if (!txt.equals(""String_Node_Str"")) {
Main.startWork(""String_Node_Str"" + txt + ""String_Node_Str"");
if (abcPanel != null) {
(new Thread(){
@Override public void run(){
if (abcPanel.search(txt,searchDialog.ignoreCaseCheckBox.isSelected(),searchDialog.regexpCheckBox.isSelected())) {
showDetail(DETAILCARDAS3NAVIGATOR);
showCard(CARDACTIONSCRIPTPANEL);
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"" + txt + ""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
}
Main.stopWork();
}
}
).start();
}
 else {
(new Thread(){
@Override public void run(){
if (actionPanel.search(txt,searchDialog.ignoreCaseCheckBox.isSelected(),searchDialog.regexpCheckBox.isSelected())) {
showCard(CARDACTIONSCRIPTPANEL);
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"" + txt + ""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
}
Main.stopWork();
}
}
).start();
}
}
}
break;
case ""String_Node_Str"":
Object tagObj=tagTree.getLastSelectedPathComponent();
if (tagObj == null) {
return;
}
if (tagObj instanceof TagNode) {
tagObj=((TagNode)tagObj).tag;
}
if (tagObj instanceof ImageTag) {
ImageTag it=(ImageTag)tagObj;
if (it.importSupported()) {
JFileChooser fc=new JFileChooser();
fc.setCurrentDirectory(new File((String)Configuration.getConfig(""String_Node_Str"",""String_Node_Str"")));
fc.setFileFilter(new FileFilter(){
@Override public boolean accept(File f){
return (f.getName().toLowerCase().endsWith(""String_Node_Str"")) || (f.getName().toLowerCase().endsWith(""String_Node_Str"")) || (f.getName().toLowerCase().endsWith(""String_Node_Str""))|| (f.getName().toLowerCase().endsWith(""String_Node_Str""))|| (f.isDirectory());
}
@Override public String getDescription(){
return ""String_Node_Str"";
}
}
);
JFrame f=new JFrame();
View.setWindowIcon(f);
int returnVal=fc.showOpenDialog(f);
if (returnVal == JFileChooser.APPROVE_OPTION) {
Configuration.setConfig(""String_Node_Str"",Helper.fixDialogFile(fc.getSelectedFile()).getParentFile().getAbsolutePath());
File selfile=Helper.fixDialogFile(fc.getSelectedFile());
byte data[]=Helper.readFile(selfile.getAbsolutePath());
try {
it.setImage(data);
}
 catch (IOException ex) {
Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}
reload(true);
}
}
}
break;
case ""String_Node_Str"":
tagObj=tagTree.getLastSelectedPathComponent();
if (tagObj == null) {
return;
}
if (tagObj instanceof TagNode) {
tagObj=((TagNode)tagObj).tag;
}
if (tagObj instanceof DefineSpriteTag) {
DefineSpriteTag sprite=(DefineSpriteTag)tagObj;
for (int i=0; i < swf.tags.size(); i++) {
Tag t=swf.tags.get(i);
if (t == sprite) {
swf.tags.remove(i);
i--;
}
 else if (t instanceof DefineSpriteTag) {
DefineSpriteTag st=(DefineSpriteTag)t;
for (int j=0; j < st.subTags.size(); j++) {
Tag t2=st.subTags.get(j);
Set<Integer> needed=t2.getNeededCharacters();
if (needed.contains(sprite.spriteId)) {
st.subTags.remove(j);
j--;
}
}
}
 else {
Set<Integer> needed=t.getNeededCharacters();
if (needed.contains(sprite.spriteId)) {
swf.tags.remove(i);
i--;
}
}
}
showCard(CARDEMPTYPANEL);
refreshTree();
}
break;
case ""String_Node_Str"":
setEditText(true);
break;
case ""String_Node_Str"":
setEditText(false);
break;
case ""String_Node_Str"":
if (oldValue instanceof TextTag) {
try {
((TextTag)oldValue).setFormattedText(swf.tags,textValue.getText());
setEditText(false);
}
 catch (ParseException ex) {
JOptionPane.showMessageDialog(null,""String_Node_Str"" + ex.text + ""String_Node_Str""+ ex.line,""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}
}
break;
case ""String_Node_Str"":
if (JOptionPane.showConfirmDialog(this,""String_Node_Str"" + (autoDeobfuscateMenuItem.getState() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
Configuration.setConfig(""String_Node_Str"",autoDeobfuscateMenuItem.getState());
}
 else {
autoDeobfuscateMenuItem.setState(!autoDeobfuscateMenuItem.getState());
}
break;
case ""String_Node_Str"":
setVisible(false);
if (Main.proxyFrame != null) {
if (Main.proxyFrame.isVisible()) {
return;
}
}
Main.exit();
break;
}
if (Main.isWorking()) {
return;
}
switch (e.getActionCommand()) {
case ""String_Node_Str"":
if (swf.fileAttributes.actionScript3) {
final int multiName=abcPanel.decompiledTextArea.getMultinameUnderCursor();
if (multiName > 0) {
(new Thread(){
@Override public void run(){
Main.startWork(""String_Node_Str"");
renameMultiname(multiName);
Main.stopWork();
}
}
).start();
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
}
}
 else {
final String identifier=actionPanel.getStringUnderCursor();
if (identifier != null) {
(new Thread(){
@Override public void run(){
Main.startWork(""String_Node_Str"");
renameIdentifier(identifier);
Main.stopWork();
}
}
).start();
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
}
}
break;
case ""String_Node_Str"":
Main.about();
break;
case ""String_Node_Str"":
Main.showProxy();
break;
case ""String_Node_Str"":
if (e.getSource() instanceof JCheckBoxMenuItem) {
Main.setSubLimiter(((JCheckBoxMenuItem)e.getSource()).getState());
}
break;
case ""String_Node_Str"":
try {
Main.saveFile(Main.file);
}
 catch (IOException ex) {
Logger.getLogger(com.jpexs.decompiler.flash.abc.gui.ABCPanel.class.getName()).log(Level.SEVERE,null,ex);
JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}
break;
case ""String_Node_Str"":
if (Main.saveFileDialog()) {
setTitle(Main.applicationVerName + (Configuration.DISPLAY_FILENAME ? ""String_Node_Str"" + Main.getFileTitle() : ""String_Node_Str""));
}
break;
case ""String_Node_Str"":
Main.openFileDialog();
break;
case ""String_Node_Str"":
JFileChooser fc=new JFileChooser();
String selDir=(String)Configuration.getConfig(""String_Node_Str"",""String_Node_Str"");
fc.setCurrentDirectory(new File(selDir));
if (!selDir.endsWith(File.separator)) {
selDir+=File.separator;
}
String fileName=(new File(Main.file).getName());
fileName=fileName.substring(0,fileName.length() - 4) + ""String_Node_Str"";
fc.setSelectedFile(new File(selDir + fileName));
FileFilter fla=new FileFilter(){
@Override public boolean accept(File f){
return f.isDirectory() || (f.getName().toLowerCase().endsWith(""String_Node_Str""));
}
@Override public String getDescription(){
return ""String_Node_Str"";
}
}
;
FileFilter xfl=new FileFilter(){
@Override public boolean accept(File f){
return f.isDirectory() || (f.getName().toLowerCase().endsWith(""String_Node_Str""));
}
@Override public String getDescription(){
return ""String_Node_Str"";
}
}
;
fc.setFileFilter(fla);
fc.addChoosableFileFilter(xfl);
fc.setAcceptAllFileFilterUsed(false);
JFrame f=new JFrame();
View.setWindowIcon(f);
int returnVal=fc.showSaveDialog(f);
if (returnVal == JFileChooser.APPROVE_OPTION) {
Configuration.setConfig(""String_Node_Str"",Helper.fixDialogFile(fc.getSelectedFile()).getParentFile().getAbsolutePath());
File sf=Helper.fixDialogFile(fc.getSelectedFile());
Main.startWork(""String_Node_Str"");
final boolean compressed=fc.getFileFilter() == fla;
if (!compressed) {
if (sf.getName().endsWith(""String_Node_Str"")) {
sf=new File(sf.getAbsolutePath().substring(0,sf.getAbsolutePath().length() - 4) + ""String_Node_Str"");
}
}
final File selfile=sf;
(new Thread(){
@Override public void run(){
if (compressed) {
swf.exportFla(selfile.getAbsolutePath(),new File(Main.file).getName(),Main.applicationName,Main.applicationVerName,Main.version,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
}
 else {
swf.exportXfl(selfile.getAbsolutePath(),new File(Main.file).getName(),Main.applicationName,Main.applicationVerName,Main.version,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
}
Main.stopWork();
}
}
).start();
}
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
final ExportDialog export=new ExportDialog();
export.setVisible(true);
if (!export.cancelled) {
JFileChooser chooser=new JFileChooser();
chooser.setCurrentDirectory(new java.io.File((String)Configuration.getConfig(""String_Node_Str"",""String_Node_Str"")));
chooser.setDialogTitle(""String_Node_Str"");
chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
chooser.setAcceptAllFileFilterUsed(false);
if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
final long timeBefore=System.currentTimeMillis();
Main.startWork(""String_Node_Str"");
final String selFile=Helper.fixDialogFile(chooser.getSelectedFile()).getAbsolutePath();
Configuration.setConfig(""String_Node_Str"",Helper.fixDialogFile(chooser.getSelectedFile()).getParentFile().getAbsolutePath());
final boolean isPcode=export.getOption(ExportDialog.OPTION_ACTIONSCRIPT) == 1;
final boolean isMp3OrWav=export.getOption(ExportDialog.OPTION_SOUNDS) == 0;
final boolean isFormatted=export.getOption(ExportDialog.OPTION_TEXTS) == 1;
final boolean onlySel=e.getActionCommand().endsWith(""String_Node_Str"");
(new Thread(){
@Override public void run(){
try {
if (onlySel) {
exportSelection(selFile,export);
}
 else {
swf.exportImages(selFile + File.separator + ""String_Node_Str"");
swf.exportShapes(selFile + File.separator + ""String_Node_Str"");
swf.exportTexts(selFile + File.separator + ""String_Node_Str"",isFormatted);
swf.exportMovies(selFile + File.separator + ""String_Node_Str"");
swf.exportSounds(selFile + File.separator + ""String_Node_Str"",isMp3OrWav,isMp3OrWav);
swf.exportBinaryData(selFile + File.separator + ""String_Node_Str"");
swf.exportActionScript(selFile,isPcode,(Boolean)Configuration.getConfig(""String_Node_Str"",Boolean.TRUE));
}
}
 catch (Exception ex) {
Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
JOptionPane.showMessageDialog(null,""String_Node_Str"");
}
Main.stopWork();
long timeAfter=System.currentTimeMillis();
long timeMs=timeAfter - timeBefore;
long timeS=timeMs / 1000;
timeMs=timeMs % 1000;
long timeM=timeS / 60;
timeS=timeS % 60;
long timeH=timeM / 60;
timeM=timeM % 60;
String timeStr=""String_Node_Str"";
if (timeH > 0) {
timeStr+=Helper.padZeros(timeH,2) + ""String_Node_Str"";
}
timeStr+=Helper.padZeros(timeM,2) + ""String_Node_Str"";
timeStr+=Helper.padZeros(timeS,2) + ""String_Node_Str"" + Helper.padZeros(timeMs,3);
setStatus(""String_Node_Str"" + timeStr);
}
}
).start();
}
}
break;
case ""String_Node_Str"":
if (!Main.checkForUpdates()) {
JOptionPane.showMessageDialog(null,""String_Node_Str"");
}
break;
case ""String_Node_Str"":
String helpUsURL=Main.projectPage + ""String_Node_Str"";
if (java.awt.Desktop.isDesktopSupported()) {
java.awt.Desktop desktop=java.awt.Desktop.getDesktop();
try {
java.net.URI uri=new java.net.URI(helpUsURL);
desktop.browse(uri);
}
 catch (Exception ex) {
}
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"" + helpUsURL + ""String_Node_Str"");
}
break;
case ""String_Node_Str"":
String homePageURL=Main.projectPage;
if (java.awt.Desktop.isDesktopSupported()) {
java.awt.Desktop desktop=java.awt.Desktop.getDesktop();
try {
java.net.URI uri=new java.net.URI(homePageURL);
desktop.browse(uri);
}
 catch (Exception ex) {
}
}
 else {
JOptionPane.showMessageDialog(null,""String_Node_Str"" + homePageURL);
}
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
Main.startWork(""String_Node_Str"");
final boolean all=e.getActionCommand().endsWith(""String_Node_Str"");
if ((!all) || confirmExperimental()) {
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
int cnt=0;
if (all) {
for (ABCContainerTag tag : abcPanel.list) {
tag.getABC().restoreControlFlow();
}
}
 else {
int bi=abcPanel.detailPanel.methodTraitPanel.methodCodePanel.getBodyIndex();
if (bi != -1) {
abcPanel.abc.bodies[bi].restoreControlFlow(abcPanel.abc.constants);
}
abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setBodyIndex(bi,abcPanel.abc);
}
Main.stopWork();
JOptionPane.showMessageDialog(null,""String_Node_Str"");
abcPanel.reload();
return true;
}
}
.execute();
}
break;
case ""String_Node_Str"":
if (confirmExperimental()) {
final RenameType renameType=new RenameDialog().display();
if (renameType != null) {
Main.startWork(""String_Node_Str"");
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
try {
int cnt=0;
cnt=swf.deobfuscateIdentifiers(renameType);
Main.stopWork();
JOptionPane.showMessageDialog(null,""String_Node_Str"" + cnt);
if (abcPanel != null) {
abcPanel.reload();
}
doFilter();
reload(true);
}
 catch (Exception ex) {
Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
}
return true;
}
}
.execute();
}
}
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
if (deobfuscationDialog == null) {
deobfuscationDialog=new DeobfuscationDialog();
}
deobfuscationDialog.setVisible(true);
if (deobfuscationDialog.ok) {
Main.startWork(""String_Node_Str"");
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
try {
if (deobfuscationDialog.processAllCheckbox.isSelected()) {
for (ABCContainerTag tag : abcPanel.list) {
if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_REMOVE_DEAD_CODE) {
tag.getABC().removeDeadCode();
}
 else if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_REMOVE_TRAPS) {
tag.getABC().removeTraps();
}
 else if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_RESTORE_CONTROL_FLOW) {
tag.getABC().removeTraps();
tag.getABC().restoreControlFlow();
}
}
}
 else {
int bi=abcPanel.detailPanel.methodTraitPanel.methodCodePanel.getBodyIndex();
if (bi != -1) {
if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_REMOVE_DEAD_CODE) {
abcPanel.abc.bodies[bi].removeDeadCode(abcPanel.abc.constants);
}
 else if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_REMOVE_TRAPS) {
abcPanel.abc.bodies[bi].removeTraps(abcPanel.abc.constants,abcPanel.abc,abcPanel.decompiledTextArea.getScriptLeaf().scriptIndex,abcPanel.decompiledTextArea.getClassIndex(),abcPanel.decompiledTextArea.getIsStatic());
}
 else if (deobfuscationDialog.codeProcessingLevel.getValue() == DeobfuscationDialog.LEVEL_RESTORE_CONTROL_FLOW) {
abcPanel.abc.bodies[bi].removeTraps(abcPanel.abc.constants,abcPanel.abc,abcPanel.decompiledTextArea.getScriptLeaf().scriptIndex,abcPanel.decompiledTextArea.getClassIndex(),abcPanel.decompiledTextArea.getIsStatic());
abcPanel.abc.bodies[bi].restoreControlFlow(abcPanel.abc.constants);
}
}
abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setBodyIndex(bi,abcPanel.abc);
}
}
 catch (Exception ex) {
Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
}
Main.stopWork();
JOptionPane.showMessageDialog(null,""String_Node_Str"");
abcPanel.reload();
return true;
}
}
.execute();
}
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
Main.startWork(""String_Node_Str"");
final boolean rall=e.getActionCommand().endsWith(""String_Node_Str"");
if ((!rall) || confirmExperimental()) {
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
int cnt=0;
if (rall) {
for (ABCContainerTag tag : abcPanel.list) {
cnt+=tag.getABC().removeTraps();
}
}
 else {
int bi=abcPanel.detailPanel.methodTraitPanel.methodCodePanel.getBodyIndex();
if (bi != -1) {
cnt+=abcPanel.abc.bodies[bi].removeTraps(abcPanel.abc.constants,abcPanel.abc,abcPanel.decompiledTextArea.getScriptLeaf().scriptIndex,abcPanel.decompiledTextArea.getClassIndex(),abcPanel.decompiledTextArea.getIsStatic());
}
abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setBodyIndex(bi,abcPanel.abc);
}
Main.stopWork();
JOptionPane.showMessageDialog(null,""String_Node_Str"" + cnt);
abcPanel.reload();
return true;
}
}
.execute();
}
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
Main.startWork(""String_Node_Str"");
final boolean dall=e.getActionCommand().endsWith(""String_Node_Str"");
if ((!dall) || confirmExperimental()) {
new SwingWorker(){
@Override protected Object doInBackground() throws Exception {
int cnt=0;
if (dall) {
for (ABCContainerTag tag : abcPanel.list) {
cnt+=tag.getABC().removeDeadCode();
}
}
 else {
int bi=abcPanel.detailPanel.methodTraitPanel.methodCodePanel.getBodyIndex();
if (bi != -1) {
cnt+=abcPanel.abc.bodies[bi].removeDeadCode(abcPanel.abc.constants);
}
abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setBodyIndex(bi,abcPanel.abc);
}
Main.stopWork();
JOptionPane.showMessageDialog(null,""String_Node_Str"" + cnt);
abcPanel.reload();
return true;
}
}
.execute();
}
break;
}
}",0.990130015378163
62178,"private void fixGraph(GraphPart part){
  while (fixGraphOnce(part,new ArrayList<GraphPart>(),false)) {
  }
}","private void fixGraph(GraphPart part){
  try {
    while (fixGraphOnce(part,new ArrayList<GraphPart>(),false)) {
    }
  }
 catch (  Exception|Error ex) {
  }
}",0.8059701492537313
62179,"public void updateSearchPos(){
  searchPos.setText((foundPos + 1) + ""String_Node_Str"" + found.size());
  decompiledTextArea.setScript(found.get(foundPos),list);
  hilightScript(found.get(foundPos));
  decompiledTextArea.setCaretPosition(0);
  java.util.Timer t=new java.util.Timer();
  t.schedule(new TimerTask(){
    @Override public void run(){
      DocumentSearchData dsd=DocumentSearchData.getFromEditor(decompiledTextArea);
      dsd.setPattern(searchFor,searchRegexp,searchIgnoreCase);
      dsd.showQuickFindDialogEx(decompiledTextArea,searchIgnoreCase,searchRegexp);
    }
  }
,1000);
}","public void updateSearchPos(){
  searchPos.setText((foundPos + 1) + ""String_Node_Str"" + found.size());
  decompiledTextArea.setScript(found.get(foundPos),list);
  hilightScript(found.get(foundPos));
  decompiledTextArea.setCaretPosition(0);
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      DocumentSearchData dsd=DocumentSearchData.getFromEditor(decompiledTextArea);
      dsd.setPattern(searchFor,searchRegexp,searchIgnoreCase);
      dsd.showQuickFindDialogEx(decompiledTextArea,searchIgnoreCase,searchRegexp);
    }
  }
);
}",0.912705272255834
62180,"public void updateSearchPos(){
  searchPos.setText((foundPos + 1) + ""String_Node_Str"" + found.size());
  setSource(found.get(foundPos),true);
  TagTreeModel ttm=(TagTreeModel)Main.mainFrame.tagTree.getModel();
  TreePath tp=ttm.getTagPath(found.get(foundPos));
  Main.mainFrame.tagTree.setSelectionPath(tp);
  Main.mainFrame.tagTree.scrollPathToVisible(tp);
  decompiledEditor.setCaretPosition(0);
  java.util.Timer t=new java.util.Timer();
  t.schedule(new TimerTask(){
    @Override public void run(){
      DocumentSearchData dsd=DocumentSearchData.getFromEditor(decompiledEditor);
      dsd.setPattern(searchFor,searchRegexp,searchIgnoreCase);
      dsd.showQuickFindDialogEx(decompiledEditor,searchIgnoreCase,searchRegexp);
    }
  }
,1000);
}","public void updateSearchPos(){
  searchPos.setText((foundPos + 1) + ""String_Node_Str"" + found.size());
  setSource(found.get(foundPos),true);
  TagTreeModel ttm=(TagTreeModel)Main.mainFrame.tagTree.getModel();
  TreePath tp=ttm.getTagPath(found.get(foundPos));
  Main.mainFrame.tagTree.setSelectionPath(tp);
  Main.mainFrame.tagTree.scrollPathToVisible(tp);
  decompiledEditor.setCaretPosition(0);
  java.util.Timer t=new java.util.Timer();
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      DocumentSearchData dsd=DocumentSearchData.getFromEditor(decompiledEditor);
      dsd.setPattern(searchFor,searchRegexp,searchIgnoreCase);
      dsd.showQuickFindDialogEx(decompiledEditor,searchIgnoreCase,searchRegexp);
    }
  }
);
}",0.9575033200531208
62181,"/** 
 * Converts list of TreeItems to string
 * @param tree List of TreeItem
 * @return String
 */
public static String graphToString(List<GraphTargetItem> tree,Object... localData){
  StringBuilder ret=new StringBuilder();
  List<Object> localDataList=new ArrayList<>();
  for (  Object o : localData) {
    localDataList.add(o);
  }
  for (  GraphTargetItem ti : tree) {
    if (!ti.isEmpty()) {
      ret.append(ti.toStringSemicoloned(localDataList));
      ret.append(""String_Node_Str"");
    }
  }
  String parts[]=ret.toString().split(""String_Node_Str"");
  ret=new StringBuilder();
  String labelPattern=""String_Node_Str"";
  try {
    Stack<String> loopStack=new Stack<>();
    for (int p=0; p < parts.length; p++) {
      String stripped=Highlighting.stripHilights(parts[p]);
      if (stripped.matches(labelPattern)) {
        loopStack.add(stripped.substring(0,stripped.length() - 1));
      }
      if (stripped.startsWith(""String_Node_Str"")) {
        if (stripped.equals(""String_Node_Str"" + loopStack.peek().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"")) {
          parts[p]=parts[p].replace(""String_Node_Str"" + loopStack.peek().replace(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
        }
      }
      if (stripped.startsWith(""String_Node_Str"")) {
        if (loopStack.size() > 0) {
          int pos=loopStack.size() - 1;
          String loopname=""String_Node_Str"";
          do {
            loopname=loopStack.get(pos);
            pos--;
          }
 while ((pos >= 0) && (loopname.startsWith(""String_Node_Str"")));
          if (stripped.equals(""String_Node_Str"" + loopname + ""String_Node_Str"")) {
            parts[p]=parts[p].replace(""String_Node_Str"" + loopname,""String_Node_Str"");
          }
        }
      }
      if (stripped.startsWith(""String_Node_Str"")) {
        loopStack.pop();
      }
    }
  }
 catch (  Exception ex) {
  }
  int level=0;
  for (int p=0; p < parts.length; p++) {
    String strippedP=Highlighting.stripHilights(parts[p]).trim();
    if (strippedP.matches(labelPattern)) {
      String loopname=strippedP.substring(0,strippedP.length() - 1);
      boolean dorefer=false;
      for (int q=p + 1; q < parts.length; q++) {
        String strippedQ=Highlighting.stripHilights(parts[q]).trim();
        if (strippedQ.equals(""String_Node_Str"" + loopname.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"")) {
          dorefer=true;
          break;
        }
        if (strippedQ.equals(""String_Node_Str"" + loopname + ""String_Node_Str"")) {
          dorefer=true;
          break;
        }
        if (strippedQ.equals(""String_Node_Str"" + loopname)) {
          break;
        }
      }
      if (!dorefer) {
        continue;
      }
    }
    if (strippedP.startsWith(""String_Node_Str"")) {
      continue;
    }
    if (Highlighting.stripHilights(parts[p]).equals(INDENTOPEN)) {
      level++;
      continue;
    }
    if (Highlighting.stripHilights(parts[p]).equals(INDENTCLOSE)) {
      level--;
      continue;
    }
    if (Highlighting.stripHilights(parts[p]).equals(""String_Node_Str"")) {
      level--;
    }
    if (Highlighting.stripHilights(parts[p]).equals(""String_Node_Str"")) {
      level--;
    }
    ret.append(tabString(level));
    ret.append(parts[p]);
    ret.append(""String_Node_Str"");
    if (Highlighting.stripHilights(parts[p]).equals(""String_Node_Str"")) {
      level++;
    }
  }
  return ret.toString();
}","/** 
 * Converts list of TreeItems to string
 * @param tree List of TreeItem
 * @return String
 */
public static String graphToString(List<GraphTargetItem> tree,Object... localData){
  StringBuilder ret=new StringBuilder();
  List<Object> localDataList=new ArrayList<>();
  if ((localData.length == 1) && (localData[0] instanceof List)) {
    localDataList=(List<Object>)localData[0];
  }
 else {
    for (    Object o : localData) {
      localDataList.add(o);
    }
  }
  for (  GraphTargetItem ti : tree) {
    if (!ti.isEmpty()) {
      ret.append(ti.toStringSemicoloned(localDataList));
      ret.append(""String_Node_Str"");
    }
  }
  String parts[]=ret.toString().split(""String_Node_Str"");
  ret=new StringBuilder();
  String labelPattern=""String_Node_Str"";
  try {
    Stack<String> loopStack=new Stack<>();
    for (int p=0; p < parts.length; p++) {
      String stripped=Highlighting.stripHilights(parts[p]);
      if (stripped.matches(labelPattern)) {
        loopStack.add(stripped.substring(0,stripped.length() - 1));
      }
      if (stripped.startsWith(""String_Node_Str"")) {
        if (stripped.equals(""String_Node_Str"" + loopStack.peek().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"")) {
          parts[p]=parts[p].replace(""String_Node_Str"" + loopStack.peek().replace(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
        }
      }
      if (stripped.startsWith(""String_Node_Str"")) {
        if (loopStack.size() > 0) {
          int pos=loopStack.size() - 1;
          String loopname=""String_Node_Str"";
          do {
            loopname=loopStack.get(pos);
            pos--;
          }
 while ((pos >= 0) && (loopname.startsWith(""String_Node_Str"")));
          if (stripped.equals(""String_Node_Str"" + loopname + ""String_Node_Str"")) {
            parts[p]=parts[p].replace(""String_Node_Str"" + loopname,""String_Node_Str"");
          }
        }
      }
      if (stripped.startsWith(""String_Node_Str"")) {
        loopStack.pop();
      }
    }
  }
 catch (  Exception ex) {
  }
  int level=0;
  for (int p=0; p < parts.length; p++) {
    String strippedP=Highlighting.stripHilights(parts[p]).trim();
    if (strippedP.matches(labelPattern)) {
      String loopname=strippedP.substring(0,strippedP.length() - 1);
      boolean dorefer=false;
      for (int q=p + 1; q < parts.length; q++) {
        String strippedQ=Highlighting.stripHilights(parts[q]).trim();
        if (strippedQ.equals(""String_Node_Str"" + loopname.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"")) {
          dorefer=true;
          break;
        }
        if (strippedQ.equals(""String_Node_Str"" + loopname + ""String_Node_Str"")) {
          dorefer=true;
          break;
        }
        if (strippedQ.equals(""String_Node_Str"" + loopname)) {
          break;
        }
      }
      if (!dorefer) {
        continue;
      }
    }
    if (strippedP.startsWith(""String_Node_Str"")) {
      continue;
    }
    if (Highlighting.stripHilights(parts[p]).equals(INDENTOPEN)) {
      level++;
      continue;
    }
    if (Highlighting.stripHilights(parts[p]).equals(INDENTCLOSE)) {
      level--;
      continue;
    }
    if (Highlighting.stripHilights(parts[p]).equals(""String_Node_Str"")) {
      level--;
    }
    if (Highlighting.stripHilights(parts[p]).equals(""String_Node_Str"")) {
      level--;
    }
    ret.append(tabString(level));
    ret.append(parts[p]);
    ret.append(""String_Node_Str"");
    if (Highlighting.stripHilights(parts[p]).equals(""String_Node_Str"")) {
      level++;
    }
  }
  return ret.toString();
}",0.9787051593540088
62182,"public List<GraphTargetItem> translate(List<Object> localData){
  try {
    List<GraphPart> allParts=new ArrayList<>();
    for (    GraphPart head : heads) {
      populateParts(head,allParts);
    }
    Stack<GraphTargetItem> stack=new Stack<>();
    List<Loop> loops=new ArrayList<>();
    loops=getLoopsFromCFG();
    getPrecontinues(null,heads.get(0),loops,null);
    List<GraphTargetItem> ret=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,heads.get(0),null,loops);
    processIfs(ret);
    finalProcessStack(stack,ret);
    finalProcessAll(ret,0);
    return ret;
  }
 catch (  StackOverflowError soe) {
    List<GraphTargetItem> ret=new ArrayList<>();
    ret.add(new CommentTreeItem(null,""String_Node_Str""));
    Logger.getLogger(Graph.class.getName()).log(Level.SEVERE,""String_Node_Str"",soe);
    return ret;
  }
}","public List<GraphTargetItem> translate(List<Object> localData){
  try {
    List<GraphPart> allParts=new ArrayList<>();
    for (    GraphPart head : heads) {
      populateParts(head,allParts);
    }
    Stack<GraphTargetItem> stack=new Stack<>();
    List<Loop> loops=new ArrayList<>();
    loops=getLoopsFromCFG();
    getPrecontinues(null,heads.get(0),loops,null);
    List<GraphTargetItem> ret=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,heads.get(0),null,loops);
    processIfs(ret);
    finalProcessStack(stack,ret);
    finalProcessAll(ret,0);
    return ret;
  }
 catch (  StackOverflowError soe) {
    List<GraphTargetItem> ret=new ArrayList<>();
    ret.add(new CommentItem(""String_Node_Str""));
    Logger.getLogger(Graph.class.getName()).log(Level.SEVERE,""String_Node_Str"",soe);
    return ret;
  }
}",0.994646044021416
62183,"protected List<GraphTargetItem> printGraph(List<GraphPart> visited,List<Object> localData,Stack<GraphTargetItem> stack,List<GraphPart> allParts,GraphPart parent,GraphPart part,List<GraphPart> stopPart,List<Loop> loops,List<GraphTargetItem> ret){
  if (stopPart == null) {
    stopPart=new ArrayList<>();
  }
  if (visited.contains(part)) {
  }
 else {
    visited.add(part);
  }
  if (ret == null) {
    ret=new ArrayList<>();
  }
  boolean debugMode=true;
  if (debugMode) {
    System.err.println(""String_Node_Str"" + part);
  }
  if (part == null) {
    return ret;
  }
  part=checkPart(localData,part);
  if (part == null) {
    return ret;
  }
  if (part.ignored) {
    return ret;
  }
  List<GraphPart> loopContinues=getLoopsContinues(loops);
  boolean isLoop=false;
  Loop currentLoop=null;
  for (  Loop el : loops) {
    if ((el.loopContinue == part) && (el.phase == 0)) {
      currentLoop=el;
      currentLoop.phase=1;
      isLoop=true;
      break;
    }
  }
  if (debugMode) {
    System.err.println(""String_Node_Str"" + loops.size());
  }
  for (int l=loops.size() - 1; l >= 0; l--) {
    Loop el=loops.get(l);
    if (el == currentLoop) {
      if (debugMode) {
        System.err.println(""String_Node_Str"" + el);
      }
      continue;
    }
    if (el.phase != 1) {
      if (debugMode) {
      }
      continue;
    }
    if (el.loopBreak == part) {
      ret.add(new BreakItem(null,el.id));
      return ret;
    }
    if (el.loopPreContinue == part) {
      ret.add(new ContinueItem(null,el.id));
      return ret;
    }
    if (el.loopContinue == part) {
      ret.add(new ContinueItem(null,el.id));
      return ret;
    }
  }
  if (stopPart.contains(part)) {
    return ret;
  }
  if ((part != null) && (code.size() <= part.start)) {
    ret.add(new ScriptEndItem());
    return ret;
  }
  if (currentLoop != null) {
    currentLoop.used=true;
  }
  List<GraphTargetItem> currentRet=ret;
  UniversalLoopItem loopItem=null;
  if (isLoop) {
    loopItem=new UniversalLoopItem(null,currentLoop);
    currentRet.add(loopItem);
    loopItem.commands=new ArrayList<>();
    currentRet=loopItem.commands;
  }
  boolean parseNext=true;
  List<GraphTargetItem> output=new ArrayList<>();
  List<GraphPart> parts=new ArrayList<>();
  if (part instanceof GraphPartMulti) {
    parts=((GraphPartMulti)part).parts;
  }
 else {
    parts.add(part);
  }
  int end=part.end;
  for (  GraphPart p : parts) {
    end=p.end;
    int start=p.start;
    try {
      output.addAll(code.translatePart(p,localData,stack,start,end));
      if ((end >= code.size() - 1) && p.nextParts.isEmpty()) {
        output.add(new ScriptEndItem());
      }
    }
 catch (    Exception ex) {
      Logger.getLogger(Graph.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
      return ret;
    }
  }
  if (part.nextParts.size() == 2) {
    if ((stack.size() >= 2) && (stack.get(stack.size() - 1) instanceof NotItem) && (((NotItem)(stack.get(stack.size() - 1))).getOriginal().getNotCoerced() == stack.get(stack.size() - 2).getNotCoerced())) {
      currentRet.addAll(output);
      GraphPart sp0=getNextNoJump(part.nextParts.get(0));
      GraphPart sp1=getNextNoJump(part.nextParts.get(1));
      boolean reversed=false;
      loopContinues=getLoopsContinues(loops);
      loopContinues.add(part);
      if (sp1.leadsTo(code,sp0,loops)) {
      }
 else       if (sp0.leadsTo(code,sp1,loops)) {
        reversed=true;
      }
      GraphPart next=reversed ? sp0 : sp1;
      GraphTargetItem ti;
      if ((ti=checkLoop(next,stopPart,loops)) != null) {
        currentRet.add(ti);
      }
 else {
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(reversed ? sp1 : sp0);
        printGraph(visited,localData,stack,allParts,parent,next,stopPart2,loops);
        GraphTargetItem second=stack.pop();
        GraphTargetItem first=stack.pop();
        if (!reversed) {
          AndItem a=new AndItem(null,first,second);
          stack.push(a);
          a.firstPart=part;
          if (second instanceof AndItem) {
            a.firstPart=((AndItem)second).firstPart;
          }
          if (second instanceof OrItem) {
            a.firstPart=((OrItem)second).firstPart;
          }
        }
 else {
          OrItem o=new OrItem(null,first,second);
          stack.push(o);
          o.firstPart=part;
          if (second instanceof AndItem) {
            o.firstPart=((AndItem)second).firstPart;
          }
          if (second instanceof OrItem) {
            o.firstPart=((OrItem)second).firstPart;
          }
        }
        next=reversed ? sp1 : sp0;
        if ((ti=checkLoop(next,stopPart,loops)) != null) {
          currentRet.add(ti);
        }
 else {
          currentRet.addAll(printGraph(visited,localData,stack,allParts,parent,next,stopPart,loops));
        }
      }
      parseNext=false;
    }
 else     if ((stack.size() >= 2) && (stack.get(stack.size() - 1).getNotCoerced() == stack.get(stack.size() - 2).getNotCoerced())) {
      currentRet.addAll(output);
      GraphPart sp0=getNextNoJump(part.nextParts.get(0));
      GraphPart sp1=getNextNoJump(part.nextParts.get(1));
      boolean reversed=false;
      loopContinues=getLoopsContinues(loops);
      loopContinues.add(part);
      if (sp1.leadsTo(code,sp0,loops)) {
      }
 else       if (sp0.leadsTo(code,sp1,loops)) {
        reversed=true;
      }
      GraphPart next=reversed ? sp0 : sp1;
      GraphTargetItem ti;
      if ((ti=checkLoop(next,stopPart,loops)) != null) {
        currentRet.add(ti);
      }
 else {
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(reversed ? sp1 : sp0);
        printGraph(visited,localData,stack,allParts,parent,next,stopPart2,loops);
        GraphTargetItem second=stack.pop();
        GraphTargetItem first=stack.pop();
        if (reversed) {
          AndItem a=new AndItem(null,first,second);
          stack.push(a);
          a.firstPart=part;
          if (second instanceof AndItem) {
            a.firstPart=((AndItem)second).firstPart;
          }
          if (second instanceof OrItem) {
            a.firstPart=((AndItem)second).firstPart;
          }
        }
 else {
          OrItem o=new OrItem(null,first,second);
          stack.push(o);
          o.firstPart=part;
          if (second instanceof OrItem) {
            o.firstPart=((OrItem)second).firstPart;
          }
          if (second instanceof OrItem) {
            o.firstPart=((OrItem)second).firstPart;
          }
        }
        next=reversed ? sp1 : sp0;
        if ((ti=checkLoop(next,stopPart,loops)) != null) {
          currentRet.add(ti);
        }
 else {
          currentRet.addAll(printGraph(visited,localData,stack,allParts,parent,next,stopPart,loops));
        }
      }
      parseNext=false;
    }
  }
  if (parseNext) {
    List<GraphTargetItem> retCheck=check(code,localData,allParts,stack,parent,part,stopPart,loops,output);
    if (retCheck != null) {
      if (!retCheck.isEmpty()) {
        currentRet.addAll(retCheck);
      }
      return ret;
    }
 else {
      currentRet.addAll(output);
    }
    if (part.nextParts.size() == 2) {
      GraphTargetItem expr=stack.pop();
      if (expr instanceof LogicalOpItem) {
        expr=((LogicalOpItem)expr).invert();
      }
 else {
        expr=new NotItem(null,expr);
      }
      GraphPart next=getNextCommonPart(part,loops);
      @SuppressWarnings(""String_Node_Str"") Stack<GraphTargetItem> trueStack=(Stack<GraphTargetItem>)stack.clone();
      @SuppressWarnings(""String_Node_Str"") Stack<GraphTargetItem> falseStack=(Stack<GraphTargetItem>)stack.clone();
      int trueStackSizeBefore=trueStack.size();
      int falseStackSizeBefore=falseStack.size();
      List<GraphTargetItem> onTrue=new ArrayList<>();
      boolean isEmpty=part.nextParts.get(0) == part.nextParts.get(1);
      if (isEmpty) {
        next=part.nextParts.get(0);
      }
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      if (next != null) {
        stopPart2.add(next);
      }
      if (!isEmpty) {
        onTrue=printGraph(visited,localData,trueStack,allParts,part,part.nextParts.get(1),stopPart2,loops);
      }
      List<GraphTargetItem> onFalse=new ArrayList<>();
      if (!isEmpty) {
        onFalse=printGraph(visited,localData,falseStack,allParts,part,part.nextParts.get(0),stopPart2,loops);
      }
      if (isEmpty(onTrue) && isEmpty(onFalse) && (trueStack.size() > trueStackSizeBefore)&& (falseStack.size() > falseStackSizeBefore)) {
        stack.push(new TernarOpItem(null,expr,trueStack.pop(),falseStack.pop()));
      }
 else {
        currentRet.add(new IfItem(null,expr,onTrue,onFalse));
      }
      if (next != null) {
        printGraph(visited,localData,stack,allParts,part,next,stopPart,loops,currentRet);
      }
    }
 else     if (part.nextParts.size() == 1) {
      printGraph(visited,localData,stack,allParts,part,part.nextParts.get(0),stopPart,loops,currentRet);
    }
  }
  if (isLoop) {
    currentLoop.phase=2;
    LoopItem li=loopItem;
    boolean loopTypeFound=false;
    checkContinueAtTheEnd(loopItem.commands,currentLoop);
    if (!loopTypeFound && (!loopItem.commands.isEmpty())) {
      if (loopItem.commands.get(0) instanceof IfItem) {
        IfItem ifi=(IfItem)loopItem.commands.get(0);
        List<GraphTargetItem> bodyBranch=null;
        boolean inverted=false;
        if ((ifi.onTrue.size() == 1) && (ifi.onTrue.get(0) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)ifi.onTrue.get(0);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onFalse;
            inverted=true;
          }
        }
 else         if ((ifi.onFalse.size() == 1) && (ifi.onFalse.get(0) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)ifi.onFalse.get(0);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onTrue;
          }
        }
        if (bodyBranch != null) {
          int index=ret.indexOf(loopItem);
          ret.remove(index);
          List<GraphTargetItem> exprList=new ArrayList<>();
          GraphTargetItem expr=ifi.expression;
          if (inverted) {
            if (expr instanceof LogicalOpItem) {
              expr=((LogicalOpItem)expr).invert();
            }
 else {
              expr=new NotItem(null,expr);
            }
          }
          exprList.add(expr);
          List<GraphTargetItem> commands=new ArrayList<>();
          commands.addAll(bodyBranch);
          loopItem.commands.remove(0);
          commands.addAll(loopItem.commands);
          checkContinueAtTheEnd(commands,currentLoop);
          List<GraphTargetItem> finalComm=new ArrayList<>();
          if (currentLoop.loopPreContinue != null) {
            GraphPart backup=currentLoop.loopPreContinue;
            currentLoop.loopPreContinue=null;
            List<GraphPart> stopPart2=new ArrayList<>(stopPart);
            stopPart2.add(currentLoop.loopContinue);
            finalComm=printGraph(visited,localData,new Stack<GraphTargetItem>(),allParts,null,backup,stopPart2,loops);
            currentLoop.loopPreContinue=backup;
            checkContinueAtTheEnd(finalComm,currentLoop);
          }
          if (!finalComm.isEmpty()) {
            ret.add(index,li=new ForTreeItem(null,currentLoop,new ArrayList<GraphTargetItem>(),exprList.get(exprList.size() - 1),finalComm,commands));
          }
 else {
            ret.add(index,li=new WhileItem(null,currentLoop,exprList,commands));
          }
          loopTypeFound=true;
        }
      }
    }
    if (!loopTypeFound && (!loopItem.commands.isEmpty())) {
      if (loopItem.commands.get(loopItem.commands.size() - 1) instanceof IfItem) {
        IfItem ifi=(IfItem)loopItem.commands.get(loopItem.commands.size() - 1);
        List<GraphTargetItem> bodyBranch=null;
        boolean inverted=false;
        if ((ifi.onTrue.size() == 1) && (ifi.onTrue.get(0) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)ifi.onTrue.get(0);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onFalse;
            inverted=true;
          }
        }
 else         if ((ifi.onFalse.size() == 1) && (ifi.onFalse.get(0) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)ifi.onFalse.get(0);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onTrue;
          }
        }
        if (bodyBranch != null) {
          int index=ret.indexOf(loopItem);
          ret.remove(index);
          List<GraphTargetItem> exprList=new ArrayList<>();
          GraphTargetItem expr=ifi.expression;
          if (inverted) {
            if (expr instanceof LogicalOpItem) {
              expr=((LogicalOpItem)expr).invert();
            }
 else {
              expr=new NotItem(null,expr);
            }
          }
          checkContinueAtTheEnd(bodyBranch,currentLoop);
          List<GraphTargetItem> commands=new ArrayList<>();
          loopItem.commands.remove(loopItem.commands.size() - 1);
          if (!bodyBranch.isEmpty()) {
          }
 else {
            commands.addAll(loopItem.commands);
            commands.addAll(bodyBranch);
            exprList.add(expr);
            checkContinueAtTheEnd(commands,currentLoop);
            ret.add(index,li=new DoWhileItem(null,currentLoop,commands,exprList));
          }
          loopTypeFound=true;
        }
      }
    }
    if (!loopTypeFound) {
      if (currentLoop.loopPreContinue != null) {
        loopTypeFound=true;
        GraphPart backup=currentLoop.loopPreContinue;
        currentLoop.loopPreContinue=null;
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(currentLoop.loopContinue);
        List<GraphTargetItem> finalComm=printGraph(visited,localData,new Stack<GraphTargetItem>(),allParts,null,backup,stopPart2,loops);
        currentLoop.loopPreContinue=backup;
        checkContinueAtTheEnd(finalComm,currentLoop);
        if (!finalComm.isEmpty()) {
          if (finalComm.get(finalComm.size() - 1) instanceof IfItem) {
            IfItem ifi=(IfItem)finalComm.get(finalComm.size() - 1);
            boolean ok=false;
            boolean invert=false;
            if (((ifi.onTrue.size() == 1) && (ifi.onTrue.get(0) instanceof BreakItem) && (((BreakItem)ifi.onTrue.get(0)).loopId == currentLoop.id)) && ((ifi.onTrue.size() == 1) && (ifi.onFalse.get(0) instanceof ContinueItem) && (((ContinueItem)ifi.onFalse.get(0)).loopId == currentLoop.id))) {
              ok=true;
              invert=true;
            }
            if (((ifi.onTrue.size() == 1) && (ifi.onTrue.get(0) instanceof ContinueItem) && (((ContinueItem)ifi.onTrue.get(0)).loopId == currentLoop.id)) && ((ifi.onTrue.size() == 1) && (ifi.onFalse.get(0) instanceof BreakItem) && (((BreakItem)ifi.onFalse.get(0)).loopId == currentLoop.id))) {
              ok=true;
            }
            if (ok) {
              finalComm.remove(finalComm.size() - 1);
              int index=ret.indexOf(loopItem);
              ret.remove(index);
              List<GraphTargetItem> exprList=new ArrayList<>(finalComm);
              GraphTargetItem expr=ifi.expression;
              if (invert) {
                if (expr instanceof LogicalOpItem) {
                  expr=((LogicalOpItem)expr).invert();
                }
 else {
                  expr=new NotItem(null,expr);
                }
              }
              exprList.add(expr);
              ret.add(index,li=new DoWhileItem(null,currentLoop,loopItem.commands,exprList));
            }
          }
        }
      }
    }
    if (!loopTypeFound) {
      checkContinueAtTheEnd(loopItem.commands,currentLoop);
    }
    GraphTargetItem replaced=checkLoop(li,localData,loops);
    if (replaced != li) {
      int index=ret.indexOf(li);
      ret.remove(index);
      if (replaced != null) {
        ret.add(index,replaced);
      }
    }
    if (currentLoop.loopBreak != null) {
      ret.addAll(printGraph(visited,localData,stack,allParts,part,currentLoop.loopBreak,stopPart,loops));
    }
  }
  return ret;
}","protected List<GraphTargetItem> printGraph(List<GraphPart> visited,List<Object> localData,Stack<GraphTargetItem> stack,List<GraphPart> allParts,GraphPart parent,GraphPart part,List<GraphPart> stopPart,List<Loop> loops,List<GraphTargetItem> ret){
  if (stopPart == null) {
    stopPart=new ArrayList<>();
  }
  if (visited.contains(part)) {
  }
 else {
    visited.add(part);
  }
  if (ret == null) {
    ret=new ArrayList<>();
  }
  boolean debugMode=false;
  if (debugMode) {
    System.err.println(""String_Node_Str"" + part);
  }
  if (part == null) {
    return ret;
  }
  part=checkPart(localData,part);
  if (part == null) {
    return ret;
  }
  if (part.ignored) {
    return ret;
  }
  List<GraphPart> loopContinues=getLoopsContinues(loops);
  boolean isLoop=false;
  Loop currentLoop=null;
  for (  Loop el : loops) {
    if ((el.loopContinue == part) && (el.phase == 0)) {
      currentLoop=el;
      currentLoop.phase=1;
      isLoop=true;
      break;
    }
  }
  if (debugMode) {
    System.err.println(""String_Node_Str"" + loops.size());
  }
  for (int l=loops.size() - 1; l >= 0; l--) {
    Loop el=loops.get(l);
    if (el == currentLoop) {
      if (debugMode) {
        System.err.println(""String_Node_Str"" + el);
      }
      continue;
    }
    if (el.phase != 1) {
      if (debugMode) {
      }
      continue;
    }
    if (el.loopBreak == part) {
      ret.add(new BreakItem(null,el.id));
      return ret;
    }
    if (el.loopPreContinue == part) {
      ret.add(new ContinueItem(null,el.id));
      return ret;
    }
    if (el.loopContinue == part) {
      ret.add(new ContinueItem(null,el.id));
      return ret;
    }
  }
  if (stopPart.contains(part)) {
    return ret;
  }
  if ((part != null) && (code.size() <= part.start)) {
    ret.add(new ScriptEndItem());
    return ret;
  }
  if (currentLoop != null) {
    currentLoop.used=true;
  }
  List<GraphTargetItem> currentRet=ret;
  UniversalLoopItem loopItem=null;
  if (isLoop) {
    loopItem=new UniversalLoopItem(null,currentLoop);
    currentRet.add(loopItem);
    loopItem.commands=new ArrayList<>();
    currentRet=loopItem.commands;
  }
  boolean parseNext=true;
  List<GraphTargetItem> output=new ArrayList<>();
  List<GraphPart> parts=new ArrayList<>();
  if (part instanceof GraphPartMulti) {
    parts=((GraphPartMulti)part).parts;
  }
 else {
    parts.add(part);
  }
  int end=part.end;
  for (  GraphPart p : parts) {
    end=p.end;
    int start=p.start;
    try {
      output.addAll(code.translatePart(p,localData,stack,start,end));
      if ((end >= code.size() - 1) && p.nextParts.isEmpty()) {
        output.add(new ScriptEndItem());
      }
    }
 catch (    Exception ex) {
      Logger.getLogger(Graph.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
      return ret;
    }
  }
  if (part.nextParts.size() == 2) {
    if ((stack.size() >= 2) && (stack.get(stack.size() - 1) instanceof NotItem) && (((NotItem)(stack.get(stack.size() - 1))).getOriginal().getNotCoerced() == stack.get(stack.size() - 2).getNotCoerced())) {
      currentRet.addAll(output);
      GraphPart sp0=getNextNoJump(part.nextParts.get(0));
      GraphPart sp1=getNextNoJump(part.nextParts.get(1));
      boolean reversed=false;
      loopContinues=getLoopsContinues(loops);
      loopContinues.add(part);
      if (sp1.leadsTo(code,sp0,loops)) {
      }
 else       if (sp0.leadsTo(code,sp1,loops)) {
        reversed=true;
      }
      GraphPart next=reversed ? sp0 : sp1;
      GraphTargetItem ti;
      if ((ti=checkLoop(next,stopPart,loops)) != null) {
        currentRet.add(ti);
      }
 else {
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(reversed ? sp1 : sp0);
        printGraph(visited,localData,stack,allParts,parent,next,stopPart2,loops);
        GraphTargetItem second=stack.pop();
        GraphTargetItem first=stack.pop();
        if (!reversed) {
          AndItem a=new AndItem(null,first,second);
          stack.push(a);
          a.firstPart=part;
          if (second instanceof AndItem) {
            a.firstPart=((AndItem)second).firstPart;
          }
          if (second instanceof OrItem) {
            a.firstPart=((OrItem)second).firstPart;
          }
        }
 else {
          OrItem o=new OrItem(null,first,second);
          stack.push(o);
          o.firstPart=part;
          if (second instanceof AndItem) {
            o.firstPart=((AndItem)second).firstPart;
          }
          if (second instanceof OrItem) {
            o.firstPart=((OrItem)second).firstPart;
          }
        }
        next=reversed ? sp1 : sp0;
        if ((ti=checkLoop(next,stopPart,loops)) != null) {
          currentRet.add(ti);
        }
 else {
          currentRet.addAll(printGraph(visited,localData,stack,allParts,parent,next,stopPart,loops));
        }
      }
      parseNext=false;
    }
 else     if ((stack.size() >= 2) && (stack.get(stack.size() - 1).getNotCoerced() == stack.get(stack.size() - 2).getNotCoerced())) {
      currentRet.addAll(output);
      GraphPart sp0=getNextNoJump(part.nextParts.get(0));
      GraphPart sp1=getNextNoJump(part.nextParts.get(1));
      boolean reversed=false;
      loopContinues=getLoopsContinues(loops);
      loopContinues.add(part);
      if (sp1.leadsTo(code,sp0,loops)) {
      }
 else       if (sp0.leadsTo(code,sp1,loops)) {
        reversed=true;
      }
      GraphPart next=reversed ? sp0 : sp1;
      GraphTargetItem ti;
      if ((ti=checkLoop(next,stopPart,loops)) != null) {
        currentRet.add(ti);
      }
 else {
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(reversed ? sp1 : sp0);
        printGraph(visited,localData,stack,allParts,parent,next,stopPart2,loops);
        GraphTargetItem second=stack.pop();
        GraphTargetItem first=stack.pop();
        if (reversed) {
          AndItem a=new AndItem(null,first,second);
          stack.push(a);
          a.firstPart=part;
          if (second instanceof AndItem) {
            a.firstPart=((AndItem)second).firstPart;
          }
          if (second instanceof OrItem) {
            a.firstPart=((AndItem)second).firstPart;
          }
        }
 else {
          OrItem o=new OrItem(null,first,second);
          stack.push(o);
          o.firstPart=part;
          if (second instanceof OrItem) {
            o.firstPart=((OrItem)second).firstPart;
          }
          if (second instanceof OrItem) {
            o.firstPart=((OrItem)second).firstPart;
          }
        }
        next=reversed ? sp1 : sp0;
        if ((ti=checkLoop(next,stopPart,loops)) != null) {
          currentRet.add(ti);
        }
 else {
          currentRet.addAll(printGraph(visited,localData,stack,allParts,parent,next,stopPart,loops));
        }
      }
      parseNext=false;
    }
  }
  if (parseNext) {
    List<GraphTargetItem> retCheck=check(code,localData,allParts,stack,parent,part,stopPart,loops,output);
    if (retCheck != null) {
      if (!retCheck.isEmpty()) {
        currentRet.addAll(retCheck);
      }
      return ret;
    }
 else {
      currentRet.addAll(output);
    }
    if (part.nextParts.size() == 2) {
      GraphTargetItem expr=stack.pop();
      if (expr instanceof LogicalOpItem) {
        expr=((LogicalOpItem)expr).invert();
      }
 else {
        expr=new NotItem(null,expr);
      }
      GraphPart next=getNextCommonPart(part,loops);
      @SuppressWarnings(""String_Node_Str"") Stack<GraphTargetItem> trueStack=(Stack<GraphTargetItem>)stack.clone();
      @SuppressWarnings(""String_Node_Str"") Stack<GraphTargetItem> falseStack=(Stack<GraphTargetItem>)stack.clone();
      int trueStackSizeBefore=trueStack.size();
      int falseStackSizeBefore=falseStack.size();
      List<GraphTargetItem> onTrue=new ArrayList<>();
      boolean isEmpty=part.nextParts.get(0) == part.nextParts.get(1);
      if (isEmpty) {
        next=part.nextParts.get(0);
      }
      List<GraphPart> stopPart2=new ArrayList<>(stopPart);
      if (next != null) {
        stopPart2.add(next);
      }
      if (!isEmpty) {
        onTrue=printGraph(visited,localData,trueStack,allParts,part,part.nextParts.get(1),stopPart2,loops);
      }
      List<GraphTargetItem> onFalse=new ArrayList<>();
      if (!isEmpty) {
        onFalse=printGraph(visited,localData,falseStack,allParts,part,part.nextParts.get(0),stopPart2,loops);
      }
      if (isEmpty(onTrue) && isEmpty(onFalse) && (trueStack.size() > trueStackSizeBefore)&& (falseStack.size() > falseStackSizeBefore)) {
        stack.push(new TernarOpItem(null,expr,trueStack.pop(),falseStack.pop()));
      }
 else {
        currentRet.add(new IfItem(null,expr,onTrue,onFalse));
      }
      if (next != null) {
        printGraph(visited,localData,stack,allParts,part,next,stopPart,loops,currentRet);
      }
    }
 else     if (part.nextParts.size() == 1) {
      printGraph(visited,localData,stack,allParts,part,part.nextParts.get(0),stopPart,loops,currentRet);
    }
  }
  if (isLoop) {
    currentLoop.phase=2;
    LoopItem li=loopItem;
    boolean loopTypeFound=false;
    checkContinueAtTheEnd(loopItem.commands,currentLoop);
    if (!loopTypeFound && (!loopItem.commands.isEmpty())) {
      if (loopItem.commands.get(0) instanceof IfItem) {
        IfItem ifi=(IfItem)loopItem.commands.get(0);
        List<GraphTargetItem> bodyBranch=null;
        boolean inverted=false;
        if ((ifi.onTrue.size() == 1) && (ifi.onTrue.get(0) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)ifi.onTrue.get(0);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onFalse;
            inverted=true;
          }
        }
 else         if ((ifi.onFalse.size() == 1) && (ifi.onFalse.get(0) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)ifi.onFalse.get(0);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onTrue;
          }
        }
        if (bodyBranch != null) {
          int index=ret.indexOf(loopItem);
          ret.remove(index);
          List<GraphTargetItem> exprList=new ArrayList<>();
          GraphTargetItem expr=ifi.expression;
          if (inverted) {
            if (expr instanceof LogicalOpItem) {
              expr=((LogicalOpItem)expr).invert();
            }
 else {
              expr=new NotItem(null,expr);
            }
          }
          exprList.add(expr);
          List<GraphTargetItem> commands=new ArrayList<>();
          commands.addAll(bodyBranch);
          loopItem.commands.remove(0);
          commands.addAll(loopItem.commands);
          checkContinueAtTheEnd(commands,currentLoop);
          List<GraphTargetItem> finalComm=new ArrayList<>();
          if (currentLoop.loopPreContinue != null) {
            GraphPart backup=currentLoop.loopPreContinue;
            currentLoop.loopPreContinue=null;
            List<GraphPart> stopPart2=new ArrayList<>(stopPart);
            stopPart2.add(currentLoop.loopContinue);
            finalComm=printGraph(visited,localData,new Stack<GraphTargetItem>(),allParts,null,backup,stopPart2,loops);
            currentLoop.loopPreContinue=backup;
            checkContinueAtTheEnd(finalComm,currentLoop);
          }
          if (!finalComm.isEmpty()) {
            ret.add(index,li=new ForTreeItem(null,currentLoop,new ArrayList<GraphTargetItem>(),exprList.get(exprList.size() - 1),finalComm,commands));
          }
 else {
            ret.add(index,li=new WhileItem(null,currentLoop,exprList,commands));
          }
          loopTypeFound=true;
        }
      }
    }
    if (!loopTypeFound && (!loopItem.commands.isEmpty())) {
      if (loopItem.commands.get(loopItem.commands.size() - 1) instanceof IfItem) {
        IfItem ifi=(IfItem)loopItem.commands.get(loopItem.commands.size() - 1);
        List<GraphTargetItem> bodyBranch=null;
        boolean inverted=false;
        if ((ifi.onTrue.size() == 1) && (ifi.onTrue.get(0) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)ifi.onTrue.get(0);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onFalse;
            inverted=true;
          }
        }
 else         if ((ifi.onFalse.size() == 1) && (ifi.onFalse.get(0) instanceof BreakItem)) {
          BreakItem bi=(BreakItem)ifi.onFalse.get(0);
          if (bi.loopId == currentLoop.id) {
            bodyBranch=ifi.onTrue;
          }
        }
        if (bodyBranch != null) {
          int index=ret.indexOf(loopItem);
          ret.remove(index);
          List<GraphTargetItem> exprList=new ArrayList<>();
          GraphTargetItem expr=ifi.expression;
          if (inverted) {
            if (expr instanceof LogicalOpItem) {
              expr=((LogicalOpItem)expr).invert();
            }
 else {
              expr=new NotItem(null,expr);
            }
          }
          checkContinueAtTheEnd(bodyBranch,currentLoop);
          List<GraphTargetItem> commands=new ArrayList<>();
          loopItem.commands.remove(loopItem.commands.size() - 1);
          if (!bodyBranch.isEmpty()) {
          }
 else {
            commands.addAll(loopItem.commands);
            commands.addAll(bodyBranch);
            exprList.add(expr);
            checkContinueAtTheEnd(commands,currentLoop);
            ret.add(index,li=new DoWhileItem(null,currentLoop,commands,exprList));
          }
          loopTypeFound=true;
        }
      }
    }
    if (!loopTypeFound) {
      if (currentLoop.loopPreContinue != null) {
        loopTypeFound=true;
        GraphPart backup=currentLoop.loopPreContinue;
        currentLoop.loopPreContinue=null;
        List<GraphPart> stopPart2=new ArrayList<>(stopPart);
        stopPart2.add(currentLoop.loopContinue);
        List<GraphTargetItem> finalComm=printGraph(visited,localData,new Stack<GraphTargetItem>(),allParts,null,backup,stopPart2,loops);
        currentLoop.loopPreContinue=backup;
        checkContinueAtTheEnd(finalComm,currentLoop);
        if (!finalComm.isEmpty()) {
          if (finalComm.get(finalComm.size() - 1) instanceof IfItem) {
            IfItem ifi=(IfItem)finalComm.get(finalComm.size() - 1);
            boolean ok=false;
            boolean invert=false;
            if (((ifi.onTrue.size() == 1) && (ifi.onTrue.get(0) instanceof BreakItem) && (((BreakItem)ifi.onTrue.get(0)).loopId == currentLoop.id)) && ((ifi.onTrue.size() == 1) && (ifi.onFalse.get(0) instanceof ContinueItem) && (((ContinueItem)ifi.onFalse.get(0)).loopId == currentLoop.id))) {
              ok=true;
              invert=true;
            }
            if (((ifi.onTrue.size() == 1) && (ifi.onTrue.get(0) instanceof ContinueItem) && (((ContinueItem)ifi.onTrue.get(0)).loopId == currentLoop.id)) && ((ifi.onTrue.size() == 1) && (ifi.onFalse.get(0) instanceof BreakItem) && (((BreakItem)ifi.onFalse.get(0)).loopId == currentLoop.id))) {
              ok=true;
            }
            if (ok) {
              finalComm.remove(finalComm.size() - 1);
              int index=ret.indexOf(loopItem);
              ret.remove(index);
              List<GraphTargetItem> exprList=new ArrayList<>(finalComm);
              GraphTargetItem expr=ifi.expression;
              if (invert) {
                if (expr instanceof LogicalOpItem) {
                  expr=((LogicalOpItem)expr).invert();
                }
 else {
                  expr=new NotItem(null,expr);
                }
              }
              exprList.add(expr);
              ret.add(index,li=new DoWhileItem(null,currentLoop,loopItem.commands,exprList));
            }
          }
        }
      }
    }
    if (!loopTypeFound) {
      checkContinueAtTheEnd(loopItem.commands,currentLoop);
    }
    GraphTargetItem replaced=checkLoop(li,localData,loops);
    if (replaced != li) {
      int index=ret.indexOf(li);
      ret.remove(index);
      if (replaced != null) {
        ret.add(index,replaced);
      }
    }
    if (currentLoop.loopBreak != null) {
      ret.addAll(printGraph(visited,localData,stack,allParts,part,currentLoop.loopBreak,stopPart,loops));
    }
  }
  return ret;
}",0.9997806811417111
62184,"@Override public void translate(boolean isStatic,int scriptIndex,int classIndex,java.util.HashMap<Integer,GraphTargetItem> localRegs,Stack<GraphTargetItem> stack,java.util.Stack<GraphTargetItem> scopeStack,ConstantPool constants,AVM2Instruction ins,MethodInfo[] method_info,List<GraphTargetItem> output,com.jpexs.decompiler.flash.abc.types.MethodBody body,com.jpexs.decompiler.flash.abc.ABC abc,HashMap<Integer,String> localRegNames,List<String> fullyQualifiedNames){
  int slotIndex=ins.operands[0];
  GraphTargetItem value=(GraphTargetItem)stack.pop();
  GraphTargetItem obj=(GraphTargetItem)stack.pop();
  obj=obj.getThroughRegister();
  Multiname slotname=null;
  if (obj instanceof NewActivationTreeItem) {
    ((NewActivationTreeItem)obj).slots.put(slotIndex,value);
  }
  if (obj instanceof ExceptionTreeItem) {
    slotname=constants.constant_multiname[((ExceptionTreeItem)obj).exception.name_index];
  }
 else   if (obj instanceof ClassTreeItem) {
    slotname=((ClassTreeItem)obj).className;
  }
 else   if (obj instanceof ThisTreeItem) {
    slotname=((ThisTreeItem)obj).className;
  }
 else   if (obj instanceof ScriptTreeItem) {
    for (int t=0; t < abc.script_info[((ScriptTreeItem)obj).scriptIndex].traits.traits.length; t++) {
      Trait tr=abc.script_info[((ScriptTreeItem)obj).scriptIndex].traits.traits[t];
      if (tr instanceof TraitWithSlot) {
        if (((TraitWithSlot)tr).getSlotIndex() == slotIndex) {
          slotname=tr.getName(abc);
        }
      }
    }
  }
 else   if (obj instanceof NewActivationTreeItem) {
    for (int t=0; t < body.traits.traits.length; t++) {
      if (body.traits.traits[t] instanceof TraitWithSlot) {
        if (((TraitWithSlot)body.traits.traits[t]).getSlotIndex() == slotIndex) {
          slotname=body.traits.traits[t].getName(abc);
        }
      }
    }
  }
  if (slotname != null) {
    if (localRegNames.containsValue(slotname.getName(constants,fullyQualifiedNames))) {
      return;
    }
    ;
  }
  if (value.getNotCoerced().getThroughDuplicate() instanceof IncrementTreeItem) {
    GraphTargetItem inside=((IncrementTreeItem)value.getNotCoerced()).object.getThroughRegister().getNotCoerced().getThroughDuplicate();
    if (inside instanceof GetSlotTreeItem) {
      GetSlotTreeItem slotItem=(GetSlotTreeItem)inside;
      if ((slotItem.scope.getThroughRegister() == obj.getThroughRegister()) && (slotItem.slotName == slotname)) {
        if (stack.size() > 0) {
          GraphTargetItem top=stack.peek().getNotCoerced().getThroughDuplicate();
          if (top == inside) {
            stack.pop();
            stack.push(new PostIncrementTreeItem(ins,inside));
          }
 else           if ((top instanceof IncrementTreeItem) && (((IncrementTreeItem)top).object == inside)) {
            stack.pop();
            stack.push(new PreIncrementTreeItem(ins,inside));
          }
 else {
            output.add(new PostIncrementTreeItem(ins,inside));
          }
        }
 else {
          output.add(new PostIncrementTreeItem(ins,inside));
        }
        return;
      }
    }
  }
  if (value.getNotCoerced().getThroughDuplicate() instanceof DecrementTreeItem) {
    GraphTargetItem inside=((DecrementTreeItem)value.getNotCoerced()).object.getThroughRegister().getNotCoerced().getThroughDuplicate();
    if (inside instanceof GetSlotTreeItem) {
      GetSlotTreeItem slotItem=(GetSlotTreeItem)inside;
      if ((slotItem.scope.getThroughRegister() == obj.getThroughRegister()) && (slotItem.slotName == slotname)) {
        if (stack.size() > 0) {
          GraphTargetItem top=stack.peek().getNotCoerced().getThroughDuplicate();
          if (top == inside) {
            stack.pop();
            stack.push(new PostDecrementTreeItem(ins,inside));
          }
 else           if ((top instanceof DecrementTreeItem) && (((DecrementTreeItem)top).object == inside)) {
            stack.pop();
            stack.push(new PreDecrementTreeItem(ins,inside));
          }
 else {
            output.add(new PostDecrementTreeItem(ins,inside));
          }
        }
 else {
          output.add(new PostDecrementTreeItem(ins,inside));
        }
        return;
      }
    }
  }
  output.add(new SetSlotTreeItem(ins,obj,slotname,value));
}","@Override public void translate(boolean isStatic,int scriptIndex,int classIndex,java.util.HashMap<Integer,GraphTargetItem> localRegs,Stack<GraphTargetItem> stack,java.util.Stack<GraphTargetItem> scopeStack,ConstantPool constants,AVM2Instruction ins,MethodInfo[] method_info,List<GraphTargetItem> output,com.jpexs.decompiler.flash.abc.types.MethodBody body,com.jpexs.decompiler.flash.abc.ABC abc,HashMap<Integer,String> localRegNames,List<String> fullyQualifiedNames){
  int slotIndex=ins.operands[0];
  GraphTargetItem value=(GraphTargetItem)stack.pop();
  GraphTargetItem obj=(GraphTargetItem)stack.pop();
  obj=obj.getThroughRegister();
  Multiname slotname=null;
  if (obj instanceof NewActivationTreeItem) {
    ((NewActivationTreeItem)obj).slots.put(slotIndex,value);
  }
  if (obj instanceof ExceptionTreeItem) {
    slotname=constants.constant_multiname[((ExceptionTreeItem)obj).exception.name_index];
  }
 else   if (obj instanceof ClassTreeItem) {
    slotname=((ClassTreeItem)obj).className;
  }
 else   if (obj instanceof ThisTreeItem) {
    slotname=((ThisTreeItem)obj).className;
  }
 else   if (obj instanceof ScriptTreeItem) {
    for (int t=0; t < abc.script_info[((ScriptTreeItem)obj).scriptIndex].traits.traits.length; t++) {
      Trait tr=abc.script_info[((ScriptTreeItem)obj).scriptIndex].traits.traits[t];
      if (tr instanceof TraitWithSlot) {
        if (((TraitWithSlot)tr).getSlotIndex() == slotIndex) {
          slotname=tr.getName(abc);
        }
      }
    }
  }
 else   if (obj instanceof NewActivationTreeItem) {
    for (int t=0; t < body.traits.traits.length; t++) {
      if (body.traits.traits[t] instanceof TraitWithSlot) {
        if (((TraitWithSlot)body.traits.traits[t]).getSlotIndex() == slotIndex) {
          slotname=body.traits.traits[t].getName(abc);
        }
      }
    }
  }
  if (slotname != null) {
    if (value instanceof LocalRegTreeItem) {
      LocalRegTreeItem lr=(LocalRegTreeItem)value;
      String slotNameStr=slotname.getName(constants,fullyQualifiedNames);
      if (localRegNames.containsKey(lr.regIndex)) {
        if (localRegNames.get(lr.regIndex).equals(slotNameStr)) {
          return;
        }
      }
    }
  }
  if (value.getNotCoerced().getThroughDuplicate() instanceof IncrementTreeItem) {
    GraphTargetItem inside=((IncrementTreeItem)value.getNotCoerced()).object.getThroughRegister().getNotCoerced().getThroughDuplicate();
    if (inside instanceof GetSlotTreeItem) {
      GetSlotTreeItem slotItem=(GetSlotTreeItem)inside;
      if ((slotItem.scope.getThroughRegister() == obj.getThroughRegister()) && (slotItem.slotName == slotname)) {
        if (stack.size() > 0) {
          GraphTargetItem top=stack.peek().getNotCoerced().getThroughDuplicate();
          if (top == inside) {
            stack.pop();
            stack.push(new PostIncrementTreeItem(ins,inside));
          }
 else           if ((top instanceof IncrementTreeItem) && (((IncrementTreeItem)top).object == inside)) {
            stack.pop();
            stack.push(new PreIncrementTreeItem(ins,inside));
          }
 else {
            output.add(new PostIncrementTreeItem(ins,inside));
          }
        }
 else {
          output.add(new PostIncrementTreeItem(ins,inside));
        }
        return;
      }
    }
  }
  if (value.getNotCoerced().getThroughDuplicate() instanceof DecrementTreeItem) {
    GraphTargetItem inside=((DecrementTreeItem)value.getNotCoerced()).object.getThroughRegister().getNotCoerced().getThroughDuplicate();
    if (inside instanceof GetSlotTreeItem) {
      GetSlotTreeItem slotItem=(GetSlotTreeItem)inside;
      if ((slotItem.scope.getThroughRegister() == obj.getThroughRegister()) && (slotItem.slotName == slotname)) {
        if (stack.size() > 0) {
          GraphTargetItem top=stack.peek().getNotCoerced().getThroughDuplicate();
          if (top == inside) {
            stack.pop();
            stack.push(new PostDecrementTreeItem(ins,inside));
          }
 else           if ((top instanceof DecrementTreeItem) && (((DecrementTreeItem)top).object == inside)) {
            stack.pop();
            stack.push(new PreDecrementTreeItem(ins,inside));
          }
 else {
            output.add(new PostDecrementTreeItem(ins,inside));
          }
        }
 else {
          output.add(new PostDecrementTreeItem(ins,inside));
        }
        return;
      }
    }
  }
  output.add(new SetSlotTreeItem(ins,obj,slotname,value));
}",0.9708265802269044
62185,"@Override public String convert(String path,List<ABCContainerTag> abcTags,ABC abc,boolean isStatic,boolean pcode,int scriptIndex,int classIndex,boolean highlight,List<String> fullyQualifiedNames){
  if (!highlight) {
    Highlighting.doHighlight=false;
  }
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  PrintStream out=null;
  try {
    out=new PrintStream(baos,true,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException ex) {
    Logger.getLogger(TraitClass.class.getName()).log(Level.SEVERE,null,ex);
    return ""String_Node_Str"";
  }
  String packageName=abc.instance_info[class_info].getName(abc.constants).getNamespace(abc.constants).getName(abc.constants);
  if (debugMode) {
    System.err.println(""String_Node_Str"" + packageName + ""String_Node_Str""+ abc.instance_info[class_info].getName(abc.constants).getName(abc.constants,fullyQualifiedNames));
  }
  List<String> namesInThisPackage=new ArrayList<String>();
  for (  ABCContainerTag tag : abcTags) {
    for (    ScriptInfo si : tag.getABC().script_info) {
      for (      Trait t : si.traits.traits) {
        String spath=t.getPath(tag.getABC());
        String pkg=""String_Node_Str"";
        String name=spath;
        if (spath.contains(""String_Node_Str"")) {
          pkg=spath.substring(0,spath.lastIndexOf(""String_Node_Str""));
          name=spath.substring(spath.lastIndexOf(""String_Node_Str"") + 1);
        }
        if (pkg.equals(packageName)) {
          namesInThisPackage.add(name);
        }
      }
    }
  }
  List<String> imports=new ArrayList<String>();
  List<String> uses=new ArrayList<String>();
  getImportsUsages(abcTags,abc,imports,uses,new ArrayList<String>());
  fullyQualifiedNames=new ArrayList<String>();
  List<String> importnames=new ArrayList<String>();
  importnames.addAll(namesInThisPackage);
  for (  String ipath : imports) {
    String name=ipath;
    String pkg=""String_Node_Str"";
    if (name.contains(""String_Node_Str"")) {
      pkg=name.substring(0,name.lastIndexOf(""String_Node_Str""));
      name=name.substring(name.lastIndexOf(""String_Node_Str"") + 1);
    }
    if (importnames.contains(name) || ((!pkg.equals(""String_Node_Str"")) && isBuiltInClass(name))) {
      fullyQualifiedNames.add(name);
    }
 else {
      importnames.add(name);
    }
  }
  for (  String imp : imports) {
    if (!imp.startsWith(""String_Node_Str"")) {
      out.println(ABC.IDENT_STRING + ""String_Node_Str"" + imp+ ""String_Node_Str"");
    }
  }
  out.println();
  for (  String us : uses) {
    out.println(ABC.IDENT_STRING + ""String_Node_Str"" + us+ ""String_Node_Str"");
  }
  out.println();
  String classHeader=abc.instance_info[class_info].getClassHeaderStr(abc,fullyQualifiedNames);
  if (classHeader.startsWith(""String_Node_Str"")) {
    classHeader=classHeader.substring(""String_Node_Str"".length());
  }
  out.println(ABC.IDENT_STRING + classHeader);
  out.println(ABC.IDENT_STRING + ""String_Node_Str"");
  String toPrint;
  List<String> outTraits=new LinkedList<String>();
  int bodyIndex;
  String bodyStr=""String_Node_Str"";
  bodyIndex=abc.findBodyIndex(abc.class_info[class_info].cinit_index);
  if (bodyIndex != -1) {
    if (Main.DO_DECOMPILE) {
      bodyStr=abc.bodies[bodyIndex].toString(packageName + ""String_Node_Str"" + abc.instance_info[class_info].getName(abc.constants).getName(abc.constants,fullyQualifiedNames)+ ""String_Node_Str"",pcode,true,scriptIndex,class_info,abc,abc.constants,abc.method_info,new Stack<GraphTargetItem>(),true,highlight,fullyQualifiedNames,abc.class_info[class_info].static_traits);
    }
  }
  if (Highlighting.stripHilights(bodyStr).equals(""String_Node_Str"")) {
    toPrint=ABC.addTabs(bodyStr,3);
  }
 else {
    toPrint=ABC.IDENT_STRING + ABC.IDENT_STRING + ""String_Node_Str""+ ABC.addTabs(bodyStr,3)+ ""String_Node_Str""+ ABC.IDENT_STRING+ ABC.IDENT_STRING+ ""String_Node_Str"";
  }
  if (highlight) {
    toPrint=Highlighting.hilighTrait(toPrint,abc.class_info[class_info].static_traits.traits.length + abc.instance_info[class_info].instance_traits.traits.length + 1);
  }
  outTraits.add(toPrint);
  if (!abc.instance_info[class_info].isInterface()) {
    String modifier=""String_Node_Str"";
    Multiname m=abc.constants.constant_multiname[abc.instance_info[class_info].name_index];
    if (m != null) {
      Namespace ns=m.getNamespace(abc.constants);
      if (ns != null) {
        modifier=ns.getPrefix(abc) + ""String_Node_Str"";
        if (modifier.equals(""String_Node_Str"")) {
          modifier=""String_Node_Str"";
        }
        if (modifier.startsWith(""String_Node_Str"")) {
          modifier=""String_Node_Str"";
        }
      }
    }
    String constructorParams;
    bodyStr=""String_Node_Str"";
    bodyIndex=abc.findBodyIndex(abc.instance_info[class_info].iinit_index);
    if (bodyIndex != -1) {
      if (Main.DO_DECOMPILE) {
        bodyStr=ABC.addTabs(abc.bodies[bodyIndex].toString(packageName + ""String_Node_Str"" + abc.instance_info[class_info].getName(abc.constants).getName(abc.constants,fullyQualifiedNames)+ ""String_Node_Str"",pcode,false,scriptIndex,class_info,abc,abc.constants,abc.method_info,new Stack<GraphTargetItem>(),false,highlight,fullyQualifiedNames,abc.instance_info[class_info].instance_traits),3);
      }
      constructorParams=abc.method_info[abc.instance_info[class_info].iinit_index].getParamStr(abc.constants,abc.bodies[bodyIndex],abc,fullyQualifiedNames);
    }
 else {
      constructorParams=abc.method_info[abc.instance_info[class_info].iinit_index].getParamStr(abc.constants,null,abc,fullyQualifiedNames);
    }
    toPrint=ABC.IDENT_STRING + ABC.IDENT_STRING + modifier+ ""String_Node_Str""+ abc.constants.constant_multiname[abc.instance_info[class_info].name_index].getName(abc.constants,new ArrayList<String>())+ ""String_Node_Str""+ constructorParams+ ""String_Node_Str""+ bodyStr+ ""String_Node_Str""+ ABC.IDENT_STRING+ ABC.IDENT_STRING+ ""String_Node_Str"";
    if (highlight) {
      toPrint=Highlighting.hilighTrait(toPrint,abc.class_info[class_info].static_traits.traits.length + abc.instance_info[class_info].instance_traits.traits.length);
    }
    outTraits.add(toPrint);
  }
  outTraits.add(abc.class_info[class_info].static_traits.convert(packageName + ""String_Node_Str"" + abc.instance_info[class_info].getName(abc.constants).getName(abc.constants,fullyQualifiedNames),abcTags,abc,true,pcode,false,scriptIndex,class_info,highlight,fullyQualifiedNames));
  outTraits.add(abc.instance_info[class_info].instance_traits.convert(packageName + ""String_Node_Str"" + abc.instance_info[class_info].getName(abc.constants).getName(abc.constants,fullyQualifiedNames),abcTags,abc,false,pcode,false,scriptIndex,class_info,highlight,fullyQualifiedNames));
  StringBuilder bui=new StringBuilder();
  boolean first=true;
  String glue=""String_Node_Str"";
  for (  String s : outTraits) {
    if (!Highlighting.stripHilights(s).trim().equals(""String_Node_Str"")) {
      if (!first) {
        bui.append(glue);
      }
 else {
        first=false;
      }
    }
 else {
      s=s.replace(ABC.IDENT_STRING,""String_Node_Str"");
    }
    bui.append(s);
  }
  out.println(bui.toString());
  out.println(ABC.IDENT_STRING + ""String_Node_Str"");
  out.flush();
  Highlighting.doHighlight=true;
  try {
    return Highlighting.hilighClass(new String(baos.toByteArray(),""String_Node_Str""),class_info);
  }
 catch (  UnsupportedEncodingException ex) {
    Logger.getLogger(TraitClass.class.getName()).log(Level.SEVERE,null,ex);
    return ""String_Node_Str"";
  }
}","@Override public String convert(String path,List<ABCContainerTag> abcTags,ABC abc,boolean isStatic,boolean pcode,int scriptIndex,int classIndex,boolean highlight,List<String> fullyQualifiedNames){
  if (!highlight) {
    Highlighting.doHighlight=false;
  }
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  PrintStream out=null;
  try {
    out=new PrintStream(baos,true,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException ex) {
    Logger.getLogger(TraitClass.class.getName()).log(Level.SEVERE,null,ex);
    return ""String_Node_Str"";
  }
  String packageName=abc.instance_info[class_info].getName(abc.constants).getNamespace(abc.constants).getName(abc.constants);
  if (debugMode) {
    System.err.println(""String_Node_Str"" + packageName + ""String_Node_Str""+ abc.instance_info[class_info].getName(abc.constants).getName(abc.constants,fullyQualifiedNames));
  }
  List<String> namesInThisPackage=new ArrayList<String>();
  for (  ABCContainerTag tag : abcTags) {
    for (    ScriptInfo si : tag.getABC().script_info) {
      for (      Trait t : si.traits.traits) {
        String spath=t.getPath(tag.getABC());
        String pkg=""String_Node_Str"";
        String name=spath;
        if (spath.contains(""String_Node_Str"")) {
          pkg=spath.substring(0,spath.lastIndexOf(""String_Node_Str""));
          name=spath.substring(spath.lastIndexOf(""String_Node_Str"") + 1);
        }
        if (pkg.equals(packageName)) {
          namesInThisPackage.add(name);
        }
      }
    }
  }
  List<String> imports=new ArrayList<String>();
  List<String> uses=new ArrayList<String>();
  getImportsUsages(abcTags,abc,imports,uses,new ArrayList<String>());
  fullyQualifiedNames=new ArrayList<String>();
  List<String> importnames=new ArrayList<String>();
  importnames.addAll(namesInThisPackage);
  for (  String ipath : imports) {
    String name=ipath;
    String pkg=""String_Node_Str"";
    if (name.contains(""String_Node_Str"")) {
      pkg=name.substring(0,name.lastIndexOf(""String_Node_Str""));
      name=name.substring(name.lastIndexOf(""String_Node_Str"") + 1);
    }
    if (importnames.contains(name) || ((!pkg.equals(""String_Node_Str"")) && isBuiltInClass(name))) {
      fullyQualifiedNames.add(name);
    }
 else {
      importnames.add(name);
    }
  }
  for (  String imp : imports) {
    if (!imp.startsWith(""String_Node_Str"")) {
      out.println(ABC.IDENT_STRING + ""String_Node_Str"" + imp+ ""String_Node_Str"");
    }
  }
  out.println();
  for (  String us : uses) {
    out.println(ABC.IDENT_STRING + ""String_Node_Str"" + us+ ""String_Node_Str"");
  }
  out.println();
  String classHeader=abc.instance_info[class_info].getClassHeaderStr(abc,fullyQualifiedNames);
  if (classHeader.startsWith(""String_Node_Str"")) {
    classHeader=classHeader.substring(""String_Node_Str"".length());
  }
  out.println(ABC.IDENT_STRING + classHeader);
  out.println(ABC.IDENT_STRING + ""String_Node_Str"");
  String toPrint;
  List<String> outTraits=new LinkedList<String>();
  int bodyIndex;
  String bodyStr=""String_Node_Str"";
  bodyIndex=abc.findBodyIndex(abc.class_info[class_info].cinit_index);
  if (bodyIndex != -1) {
    if (Main.DO_DECOMPILE) {
      bodyStr=abc.bodies[bodyIndex].toString(packageName + ""String_Node_Str"" + abc.instance_info[class_info].getName(abc.constants).getName(abc.constants,fullyQualifiedNames)+ ""String_Node_Str"",pcode,true,scriptIndex,class_info,abc,abc.constants,abc.method_info,new Stack<GraphTargetItem>(),true,highlight,fullyQualifiedNames,abc.class_info[class_info].static_traits);
    }
  }
  if (Highlighting.stripHilights(bodyStr).equals(""String_Node_Str"")) {
    toPrint=ABC.addTabs(bodyStr,3);
  }
 else {
    toPrint=ABC.IDENT_STRING + ABC.IDENT_STRING + ""String_Node_Str""+ ABC.addTabs(bodyStr,3)+ ""String_Node_Str""+ ABC.IDENT_STRING+ ABC.IDENT_STRING+ ""String_Node_Str"";
  }
  if (highlight) {
    toPrint=Highlighting.hilighTrait(toPrint,abc.class_info[class_info].static_traits.traits.length + abc.instance_info[class_info].instance_traits.traits.length + 1);
  }
  outTraits.add(toPrint);
  if (!abc.instance_info[class_info].isInterface()) {
    String modifier=""String_Node_Str"";
    Multiname m=abc.constants.constant_multiname[abc.instance_info[class_info].name_index];
    if (m != null) {
      Namespace ns=m.getNamespace(abc.constants);
      if (ns != null) {
        modifier=ns.getPrefix(abc) + ""String_Node_Str"";
        if (modifier.equals(""String_Node_Str"")) {
          modifier=""String_Node_Str"";
        }
        if (modifier.startsWith(""String_Node_Str"")) {
          modifier=""String_Node_Str"";
        }
      }
    }
    String constructorParams;
    bodyStr=""String_Node_Str"";
    bodyIndex=abc.findBodyIndex(abc.instance_info[class_info].iinit_index);
    if (bodyIndex != -1) {
      if (Main.DO_DECOMPILE) {
        bodyStr=ABC.addTabs(abc.bodies[bodyIndex].toString(packageName + ""String_Node_Str"" + abc.instance_info[class_info].getName(abc.constants).getName(abc.constants,fullyQualifiedNames)+ ""String_Node_Str"",pcode,false,scriptIndex,class_info,abc,abc.constants,abc.method_info,new Stack<GraphTargetItem>(),false,highlight,fullyQualifiedNames,abc.instance_info[class_info].instance_traits),3);
      }
      constructorParams=abc.method_info[abc.instance_info[class_info].iinit_index].getParamStr(abc.constants,abc.bodies[bodyIndex],abc,fullyQualifiedNames);
    }
 else {
      constructorParams=abc.method_info[abc.instance_info[class_info].iinit_index].getParamStr(abc.constants,null,abc,fullyQualifiedNames);
    }
    toPrint=ABC.IDENT_STRING + ABC.IDENT_STRING + modifier+ ""String_Node_Str""+ abc.constants.constant_multiname[abc.instance_info[class_info].name_index].getName(abc.constants,new ArrayList<String>())+ ""String_Node_Str""+ constructorParams+ ""String_Node_Str""+ bodyStr+ ""String_Node_Str""+ ABC.IDENT_STRING+ ABC.IDENT_STRING+ ""String_Node_Str"";
    if (highlight) {
      toPrint=Highlighting.hilighTrait(toPrint,abc.class_info[class_info].static_traits.traits.length + abc.instance_info[class_info].instance_traits.traits.length);
    }
    outTraits.add(toPrint);
  }
  outTraits.add(abc.class_info[class_info].static_traits.convert(packageName + ""String_Node_Str"" + abc.instance_info[class_info].getName(abc.constants).getName(abc.constants,fullyQualifiedNames),abcTags,abc,true,pcode,false,scriptIndex,class_info,highlight,fullyQualifiedNames));
  outTraits.add(abc.instance_info[class_info].instance_traits.convert(packageName + ""String_Node_Str"" + abc.instance_info[class_info].getName(abc.constants).getName(abc.constants,fullyQualifiedNames),abcTags,abc,false,pcode,false,scriptIndex,class_info,highlight,fullyQualifiedNames));
  StringBuilder bui=new StringBuilder();
  boolean first=true;
  String glue=""String_Node_Str"";
  for (  String s : outTraits) {
    if (!Highlighting.stripHilights(s).trim().equals(""String_Node_Str"")) {
      if (!first) {
        bui.append(glue);
      }
 else {
        first=false;
      }
    }
 else {
      s=s.replace(ABC.IDENT_STRING,""String_Node_Str"");
    }
    bui.append(s);
  }
  out.println(bui.toString());
  out.println(ABC.IDENT_STRING + ""String_Node_Str"");
  out.flush();
  Highlighting.doHighlight=true;
  try {
    if (highlight) {
      return Highlighting.hilighClass(new String(baos.toByteArray(),""String_Node_Str""),class_info);
    }
 else {
      return new String(baos.toByteArray(),""String_Node_Str"");
    }
  }
 catch (  UnsupportedEncodingException ex) {
    Logger.getLogger(TraitClass.class.getName()).log(Level.SEVERE,null,ex);
    return ""String_Node_Str"";
  }
}",0.9929201175527652
62186,"protected List<GraphTargetItem> printGraph(List<GraphPart> visited,List localData,Stack<GraphTargetItem> stack,List<GraphPart> allParts,GraphPart parent,GraphPart part,GraphPart stopPart,List<Loop> loops,HashMap<Loop,List<GraphTargetItem>> forFinalCommands){
  if (visited.contains(part)) {
  }
 else {
    visited.add(part);
  }
  List<GraphTargetItem> ret=new ArrayList<GraphTargetItem>();
  try {
    boolean debugMode=false;
    if (debugMode) {
      System.err.println(""String_Node_Str"" + part);
    }
    while (((part != null) && (part.getHeight() == 1)) && (code.size() > part.start) && (code.get(part.start).isJump())) {
      if (part == stopPart) {
        return ret;
      }
      GraphTargetItem lop=checkLoop(part.nextParts.get(0),stopPart,loops);
      if (lop == null) {
        part=part.nextParts.get(0);
      }
 else {
        break;
      }
    }
    if ((part != null) && (code.size() <= part.start)) {
      ret.add(new ScriptEndItem());
      return ret;
    }
    if (part == stopPart) {
      return ret;
    }
    if (part == null) {
    }
    part=checkPart(localData,part);
    if (part == null) {
      return ret;
    }
    if (part.ignored) {
      return ret;
    }
    List<String> fqn=new ArrayList<String>();
    List<GraphTargetItem> output=new ArrayList<GraphTargetItem>();
    List<GraphPart> parts=new ArrayList<GraphPart>();
    if (part instanceof GraphPartMulti) {
      parts=((GraphPartMulti)part).parts;
    }
 else {
      parts.add(part);
    }
    boolean isIf=false;
    int end=part.end;
    for (    GraphPart p : parts) {
      end=p.end;
      int start=p.start;
      isIf=false;
      try {
        output.addAll(code.translatePart(p,localData,stack,start,end));
        if ((end >= code.size() - 1) && p.nextParts.isEmpty()) {
          output.add(new ScriptEndItem());
        }
      }
 catch (      Exception ex) {
        Logger.getLogger(Graph.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
        return ret;
      }
    }
    if (part.nextParts.size() == 2) {
      if (!stack.isEmpty()) {
        GraphTargetItem top=stack.peek();
        if (false) {
          stack.pop();
          if (top.toBoolean()) {
            ret.addAll(output);
            ret.addAll(printGraph(visited,localData,stack,allParts,parent,part.nextParts.get(0),stopPart,loops,forFinalCommands));
            return ret;
          }
 else {
            ret.addAll(output);
            ret.addAll(printGraph(visited,localData,stack,allParts,parent,part.nextParts.get(1),stopPart,loops,forFinalCommands));
            return ret;
          }
        }
 else {
        }
      }
 else {
      }
    }
    if (part.nextParts.size() == 2) {
      if (part.nextParts.get(0) == part.nextParts.get(1)) {
        if (!stack.isEmpty()) {
          GraphTargetItem expr=stack.pop();
          if (expr instanceof LogicalOpItem) {
            expr=((LogicalOpItem)expr).invert();
          }
 else {
            expr=new NotItem(null,expr);
          }
          output.add(new IfItem(null,expr,new ArrayList<GraphTargetItem>(),new ArrayList<GraphTargetItem>()));
        }
        part.nextParts.remove(0);
      }
    }
    if (part.nextParts.size() == 2) {
      if ((stack.size() >= 2) && (stack.get(stack.size() - 1) instanceof NotItem) && (((NotItem)(stack.get(stack.size() - 1))).getOriginal().getNotCoerced() == stack.get(stack.size() - 2).getNotCoerced())) {
        ret.addAll(output);
        GraphPart sp0=getNextNoJump(part.nextParts.get(0));
        GraphPart sp1=getNextNoJump(part.nextParts.get(1));
        boolean reversed=false;
        List<GraphPart> loopContinues=getLoopsContinues(loops);
        loopContinues.add(part);
        if (sp1.leadsTo(code,sp0,loopContinues)) {
        }
 else         if (sp0.leadsTo(code,sp1,loopContinues)) {
          reversed=true;
        }
        GraphPart next=reversed ? sp0 : sp1;
        GraphTargetItem ti;
        if ((ti=checkLoop(next,stopPart,loops)) != null) {
          ret.add(ti);
        }
 else {
          printGraph(visited,localData,stack,allParts,parent,next,reversed ? sp1 : sp0,loops,forFinalCommands);
          GraphTargetItem second=stack.pop();
          GraphTargetItem first=stack.pop();
          if (!reversed) {
            AndItem a=new AndItem(null,first,second);
            stack.push(a);
            a.firstPart=part;
            if (second instanceof AndItem) {
              a.firstPart=((AndItem)second).firstPart;
            }
            if (second instanceof OrItem) {
              a.firstPart=((OrItem)second).firstPart;
            }
          }
 else {
            OrItem o=new OrItem(null,first,second);
            stack.push(o);
            o.firstPart=part;
            if (second instanceof AndItem) {
              o.firstPart=((AndItem)second).firstPart;
            }
            if (second instanceof OrItem) {
              o.firstPart=((OrItem)second).firstPart;
            }
          }
          next=reversed ? sp1 : sp0;
          if ((ti=checkLoop(next,stopPart,loops)) != null) {
            ret.add(ti);
          }
 else {
            ret.addAll(printGraph(visited,localData,stack,allParts,parent,next,stopPart,loops,forFinalCommands));
          }
        }
        return ret;
      }
 else       if ((stack.size() >= 2) && (stack.get(stack.size() - 1).getNotCoerced() == stack.get(stack.size() - 2).getNotCoerced())) {
        ret.addAll(output);
        GraphPart sp0=getNextNoJump(part.nextParts.get(0));
        GraphPart sp1=getNextNoJump(part.nextParts.get(1));
        boolean reversed=false;
        List<GraphPart> loopContinues=getLoopsContinues(loops);
        loopContinues.add(part);
        if (sp1.leadsTo(code,sp0,loopContinues)) {
        }
 else         if (sp0.leadsTo(code,sp1,loopContinues)) {
          reversed=true;
        }
        GraphPart next=reversed ? sp0 : sp1;
        GraphTargetItem ti;
        if ((ti=checkLoop(next,stopPart,loops)) != null) {
          ret.add(ti);
        }
 else {
          printGraph(visited,localData,stack,allParts,parent,next,reversed ? sp1 : sp0,loops,forFinalCommands);
          GraphTargetItem second=stack.pop();
          GraphTargetItem first=stack.pop();
          if (reversed) {
            AndItem a=new AndItem(null,first,second);
            stack.push(a);
            a.firstPart=part;
            if (second instanceof AndItem) {
              a.firstPart=((AndItem)second).firstPart;
            }
            if (second instanceof OrItem) {
              a.firstPart=((AndItem)second).firstPart;
            }
          }
 else {
            OrItem o=new OrItem(null,first,second);
            stack.push(o);
            o.firstPart=part;
            if (second instanceof OrItem) {
              o.firstPart=((OrItem)second).firstPart;
            }
            if (second instanceof OrItem) {
              o.firstPart=((OrItem)second).firstPart;
            }
          }
          next=reversed ? sp1 : sp0;
          if ((ti=checkLoop(next,stopPart,loops)) != null) {
            ret.add(ti);
          }
 else {
            ret.addAll(printGraph(visited,localData,stack,allParts,parent,next,stopPart,loops,forFinalCommands));
          }
        }
        return ret;
      }
    }
    List<GraphPart> loopContinues=getLoopsContinues(loops);
    boolean loop=false;
    boolean reversed=false;
    boolean whileTrue=false;
    Loop whileTrueLoop=null;
    if ((!part.nextParts.isEmpty()) && part.nextParts.get(0).leadsTo(code,part,loopContinues)) {
      if ((part.nextParts.size() > 1) && part.nextParts.get(1).leadsTo(code,part,loopContinues)) {
        if (output.isEmpty()) {
          whileTrueLoop=new Loop(loops.size(),part,null);
          loops.add(whileTrueLoop);
          whileTrue=true;
        }
 else {
          loop=true;
        }
      }
 else {
        loop=true;
      }
    }
 else     if ((part.nextParts.size() > 1) && part.nextParts.get(1).leadsTo(code,part,loopContinues)) {
      loop=true;
      reversed=true;
    }
    Loop lc=null;
    if (part.leadsTo(code,part,loopContinues)) {
      lc=new Loop(loops.size(),part,null);
      loops.add(lc);
    }
    List<GraphTargetItem> retChecked=null;
    if ((retChecked=check(code,localData,allParts,stack,parent,part,stopPart,loops,output,forFinalCommands)) != null) {
      if (lc != null) {
        List<GraphTargetItem> trueExp=new ArrayList<GraphTargetItem>();
        trueExp.add(new TrueItem(null));
        boolean chwt=true;
        if (!retChecked.isEmpty()) {
          checkContinueAtTheEnd(retChecked,lc);
          List<GraphTargetItem> finalCommands=forFinalCommands.get(lc);
          IfItem ifi=null;
          if ((finalCommands != null) && !finalCommands.isEmpty()) {
            if (finalCommands.get(finalCommands.size() - 1) instanceof IfItem) {
              ifi=(IfItem)finalCommands.get(finalCommands.size() - 1);
              finalCommands.remove(finalCommands.size() - 1);
            }
          }
 else           if (retChecked.get(retChecked.size() - 1) instanceof IfItem) {
            ifi=(IfItem)retChecked.get(retChecked.size() - 1);
            retChecked.remove(retChecked.size() - 1);
          }
          if (ifi != null) {
            if (ifi.onFalse.isEmpty()) {
              if (!ifi.onTrue.isEmpty()) {
                if (ifi.onTrue.get(ifi.onTrue.size() - 1) instanceof ExitItem) {
                  whileTrue=false;
                  List<GraphTargetItem> tr=new ArrayList<GraphTargetItem>();
                  GraphTargetItem ex=ifi.expression;
                  if (ex instanceof LogicalOpItem) {
                    ex=((LogicalOpItem)ex).invert();
                  }
 else {
                    ex=new NotItem(null,ex);
                  }
                  if ((finalCommands != null) && (!finalCommands.isEmpty())) {
                    tr.addAll(finalCommands);
                  }
                  tr.add(ex);
                  ret.add(new DoWhileItem(null,lc,retChecked,tr));
                  ret.addAll(ifi.onTrue);
                  chwt=false;
                }
              }
            }
          }
        }
        if (chwt) {
          ret.add(new WhileItem(null,lc,trueExp,retChecked));
        }
      }
 else {
        ret.addAll(retChecked);
      }
      return ret;
    }
 else {
      if (lc != null) {
        loops.remove(lc);
      }
    }
    if (((part.nextParts.size() == 2) || ((part.nextParts.size() == 1) && loop))) {
      boolean doWhile=loop;
      if (loop && output.isEmpty()) {
        doWhile=false;
      }
      Loop currentLoop=null;
      if (loop) {
        currentLoop=new Loop(loops.size(),part,null);
        loops.add(currentLoop);
      }
      if ((!whileTrue) && loop && (part.nextParts.size() > 1)&& (!doWhile)) {
        currentLoop.loopBreak=part.nextParts.get(reversed ? 0 : 1);
      }
      forFinalCommands.put(currentLoop,new ArrayList<GraphTargetItem>());
      GraphTargetItem expr=null;
      if (part.nextParts.size() == 1) {
        expr=new TrueItem(null);
      }
 else {
        if (!stack.isEmpty()) {
          expr=stack.pop();
        }
      }
      if (doWhile) {
      }
 else {
        ret.addAll(output);
      }
      if (loop) {
        GraphPart f=expr.getFirstPart();
        if (f != null) {
          currentLoop.loopContinue=f;
        }
      }
      GraphPart loopBodyStart=null;
      if ((reversed == loop) || doWhile) {
        if (expr instanceof LogicalOpItem) {
          expr=((LogicalOpItem)expr).invert();
        }
 else {
          expr=new NotItem(null,expr);
        }
      }
      loopContinues=getLoopsContinues(loops);
      GraphPart next=part.getNextPartPath(loopContinues);
      List<GraphTargetItem> retx=ret;
      if ((!loop) || (doWhile && (part.nextParts.size() > 1))) {
        if (doWhile) {
          retx=output;
        }
        int stackSizeBefore=stack.size();
        Stack<GraphTargetItem> trueStack=(Stack<GraphTargetItem>)stack.clone();
        Stack<GraphTargetItem> falseStack=(Stack<GraphTargetItem>)stack.clone();
        GraphTargetItem lopTrue=checkLoop(part.nextParts.get(1),stopPart,loops);
        GraphTargetItem lopFalse=null;
        if (next != part.nextParts.get(0)) {
          lopFalse=checkLoop(part.nextParts.get(0),stopPart,loops);
        }
        List<GraphTargetItem> onTrue=new ArrayList<GraphTargetItem>();
        if (lopTrue != null) {
          onTrue.add(lopTrue);
        }
 else {
          if (debugMode) {
            System.err.println(""String_Node_Str"" + part + ""String_Node_Str"");
          }
          onTrue=printGraph(visited,prepareBranchLocalData(localData),trueStack,allParts,part,part.nextParts.get(1),next == null ? stopPart : next,loops,forFinalCommands);
          if (debugMode) {
            System.err.println(""String_Node_Str"" + part + ""String_Node_Str"");
          }
        }
        List<GraphTargetItem> onFalse=new ArrayList<GraphTargetItem>();
        if ((!onTrue.isEmpty()) && onTrue.get(onTrue.size() - 1) instanceof ExitItem) {
          next=part.nextParts.get(0);
        }
 else {
          if (lopFalse != null) {
            onFalse.add(lopFalse);
          }
 else {
            if (debugMode) {
              System.err.println(""String_Node_Str"" + part + ""String_Node_Str"");
            }
            if ((next == part.nextParts.get(0)) || (part.nextParts.get(0).path.equals(part.path) || part.nextParts.get(0).path.length() < part.path.length())) {
              onFalse=new ArrayList<GraphTargetItem>();
            }
 else {
              onFalse=(printGraph(visited,prepareBranchLocalData(localData),falseStack,allParts,part,part.nextParts.get(0),next == null ? stopPart : next,loops,forFinalCommands));
            }
            if (debugMode) {
              System.err.println(""String_Node_Str"" + part + ""String_Node_Str"");
            }
          }
        }
        if (isEmpty(onTrue) && isEmpty(onFalse) && (trueStack.size() > stackSizeBefore)&& (falseStack.size() > stackSizeBefore)) {
          stack.push(new TernarOpItem(null,expr,trueStack.pop(),falseStack.pop()));
        }
 else {
          List<GraphTargetItem> retw=retx;
          if (whileTrue) {
            retw=new ArrayList<GraphTargetItem>();
            retw.add(new IfItem(null,expr,onTrue,onFalse));
            List<GraphTargetItem> body=new ArrayList<GraphTargetItem>();
            if (next != null) {
              body=printGraph(visited,prepareBranchLocalData(localData),stack,allParts,part,next,stopPart,loops,forFinalCommands);
            }
            retw.addAll(body);
            if (!retw.isEmpty()) {
              checkContinueAtTheEnd(retw,whileTrueLoop);
              List<GraphTargetItem> finalCommands=forFinalCommands.get(whileTrueLoop);
              IfItem ifi=null;
              if ((finalCommands != null) && !finalCommands.isEmpty()) {
                if (finalCommands.get(finalCommands.size() - 1) instanceof IfItem) {
                  ifi=(IfItem)finalCommands.get(finalCommands.size() - 1);
                  finalCommands.remove(finalCommands.size() - 1);
                }
              }
 else               if (retw.get(retw.size() - 1) instanceof IfItem) {
                ifi=(IfItem)retw.get(retw.size() - 1);
                retw.remove(retw.size() - 1);
              }
              if (ifi != null) {
                if (ifi.onFalse.isEmpty()) {
                  if (!ifi.onTrue.isEmpty()) {
                    if (ifi.onTrue.get(ifi.onTrue.size() - 1) instanceof ExitItem) {
                      whileTrue=false;
                      List<GraphTargetItem> tr=new ArrayList<GraphTargetItem>();
                      GraphTargetItem ex=ifi.expression;
                      if (ex instanceof LogicalOpItem) {
                        ex=((LogicalOpItem)ex).invert();
                      }
 else {
                        ex=new NotItem(null,ex);
                      }
                      if ((finalCommands != null) && (!finalCommands.isEmpty())) {
                        tr.addAll(finalCommands);
                      }
                      tr.add(ex);
                      retx.add(new DoWhileItem(null,whileTrueLoop,retw,tr));
                      retx.addAll(ifi.onTrue);
                      next=null;
                    }
                  }
                }
              }
            }
            if (whileTrue) {
              List<GraphTargetItem> tr=new ArrayList<GraphTargetItem>();
              tr.add(new TrueItem(null));
              retx.add(new WhileItem(null,whileTrueLoop,tr,retw));
              next=null;
            }
          }
 else {
            retx.add(new IfItem(null,expr,onTrue,onFalse));
          }
        }
        if (doWhile) {
          loopBodyStart=next;
        }
        if (whileTrue) {
          loopBodyStart=part;
        }
      }
      if (loop) {
        List<GraphTargetItem> loopBody=new ArrayList<GraphTargetItem>();
        List<GraphTargetItem> finalCommands=null;
        GraphPart finalPart=null;
        GraphTargetItem ti;
        if ((loopBodyStart != null) && ((ti=checkLoop(loopBodyStart,stopPart,loops)) != null)) {
          loopBody.add(ti);
        }
 else {
          if (!(doWhile && (loopBodyStart == null))) {
            loopBody=printGraph(visited,prepareBranchLocalData(localData),stack,allParts,part,loopBodyStart != null ? loopBodyStart : part.nextParts.get(reversed ? 1 : 0),stopPart,loops,forFinalCommands);
          }
        }
        checkContinueAtTheEnd(loopBody,currentLoop);
        finalCommands=forFinalCommands.get(currentLoop);
        if (!finalCommands.isEmpty()) {
          ret.add(new ForTreeItem(null,currentLoop,new ArrayList<GraphTargetItem>(),expr,finalCommands,loopBody));
        }
 else {
          if (doWhile) {
            if (stack.isEmpty() || (part.nextParts.size() == 1)) {
              expr=new TrueItem(null);
            }
 else {
              expr=stack.pop();
            }
            loopBody.addAll(0,output);
            if (part.nextParts.size() == 1) {
              loopBody.addAll(printGraph(visited,prepareBranchLocalData(localData),stack,allParts,part,part.nextParts.get(0),stopPart,loops,forFinalCommands));
            }
            checkContinueAtTheEnd(loopBody,currentLoop);
            List<GraphTargetItem> newBody=new ArrayList<GraphTargetItem>();
            List<GraphTargetItem> nextcmds=new ArrayList<GraphTargetItem>();
            if ((!loopBody.isEmpty()) && (loopBody.get(loopBody.size() - 1) instanceof IfItem)) {
              IfItem ift=(IfItem)loopBody.get(loopBody.size() - 1);
              if ((!ift.onFalse.isEmpty()) && (ift.onFalse.get(ift.onFalse.size() - 1) instanceof ExitItem)) {
                if (ift.expression != null) {
                  expr=ift.expression;
                }
                nextcmds=ift.onFalse;
                newBody=ift.onTrue;
                loopBody.remove(loopBody.size() - 1);
              }
 else               if ((!ift.onTrue.isEmpty()) && (ift.onTrue.get(ift.onTrue.size() - 1) instanceof ExitItem)) {
                if (ift.expression != null) {
                  expr=ift.expression;
                  if (expr instanceof LogicalOpItem) {
                    expr=((LogicalOpItem)expr).invert();
                  }
 else {
                    expr=new NotItem(null,expr);
                  }
                }
                newBody=ift.onFalse;
                nextcmds=ift.onTrue;
                loopBody.remove(loopBody.size() - 1);
                if (newBody.isEmpty()) {
                }
              }
            }
            checkContinueAtTheEnd(newBody,currentLoop);
            if ((!newBody.isEmpty()) && (!(newBody.get(0) instanceof ScriptEndItem))) {
              loopBody.add(expr);
              ret.add(new WhileItem(null,currentLoop,loopBody,newBody));
              ret.addAll(nextcmds);
            }
 else {
              List<GraphTargetItem> ex=new ArrayList<GraphTargetItem>();
              ex.add(expr);
              ret.add(new DoWhileItem(null,currentLoop,loopBody,ex));
              ret.addAll(nextcmds);
            }
          }
 else {
            List<GraphTargetItem> ex=new ArrayList<GraphTargetItem>();
            ex.add(expr);
            ret.add(new WhileItem(null,currentLoop,ex,loopBody));
          }
        }
      }
      if ((!doWhile) && (!whileTrue) && loop&& (part.nextParts.size() > 1)) {
        loops.remove(currentLoop);
        next=part.nextParts.get(reversed ? 0 : 1);
      }
      if (doWhile) {
        next=null;
      }
      if (next != null) {
        GraphTargetItem ti=checkLoop(next,stopPart,loops);
        if (ti != null) {
          ret.add(ti);
        }
 else {
          if (debugMode) {
            System.err.println(""String_Node_Str"" + part + ""String_Node_Str"");
          }
          ret.addAll(printGraph(visited,localData,stack,allParts,part,next,stopPart,loops,forFinalCommands));
          if (debugMode) {
            System.err.println(""String_Node_Str"" + part + ""String_Node_Str"");
          }
        }
      }
    }
 else {
      ret.addAll(output);
    }
    onepart:     if (part.nextParts.size() == 1 && (!loop)) {
      GraphPart p=part.nextParts.get(0);
      GraphTargetItem lop=checkLoop(p,stopPart,loops);
      if (lop == null) {
        if (p.path.length() >= part.path.length()) {
          ret.addAll(printGraph(visited,localData,stack,allParts,part,p,stopPart,loops,forFinalCommands));
        }
 else {
          if ((p != stopPart) && (p.refs.size() > 1)) {
            List<GraphPart> nextList=new ArrayList<GraphPart>();
            populateParts(p,nextList);
            Loop nearestLoop=null;
            loopn:             for (            GraphPart n : nextList) {
              for (              Loop l : loops) {
                if (l.loopContinue == n) {
                  nearestLoop=l;
                  break loopn;
                }
              }
            }
            if ((nearestLoop != null)) {
              List<GraphTargetItem> finalCommands=printGraph(visited,localData,stack,allParts,part,p,nearestLoop.loopContinue,loops,forFinalCommands);
              nearestLoop.loopContinue=p;
              forFinalCommands.put(nearestLoop,finalCommands);
              ContinueItem cti=new ContinueItem(null,nearestLoop.id);
              ret.add(cti);
            }
          }
        }
      }
 else {
        ret.add(lop);
      }
    }
    return ret;
  }
 catch (  StackOverflowError soe) {
    ret.add(new CommentTreeItem(null,""String_Node_Str""));
    Logger.getLogger(Graph.class.getName()).log(Level.SEVERE,""String_Node_Str"",soe);
    return ret;
  }
}","protected List<GraphTargetItem> printGraph(List<GraphPart> visited,List localData,Stack<GraphTargetItem> stack,List<GraphPart> allParts,GraphPart parent,GraphPart part,GraphPart stopPart,List<Loop> loops,HashMap<Loop,List<GraphTargetItem>> forFinalCommands){
  if (visited.contains(part)) {
  }
 else {
    visited.add(part);
  }
  List<GraphTargetItem> ret=new ArrayList<GraphTargetItem>();
  try {
    boolean debugMode=false;
    if (debugMode) {
      System.err.println(""String_Node_Str"" + part);
    }
    while (((part != null) && (part.getHeight() == 1)) && (code.size() > part.start) && (code.get(part.start).isJump())) {
      if (part == stopPart) {
        return ret;
      }
      GraphTargetItem lop=checkLoop(part.nextParts.get(0),stopPart,loops);
      if (lop == null) {
        part=part.nextParts.get(0);
      }
 else {
        break;
      }
    }
    if ((part != null) && (code.size() <= part.start)) {
      ret.add(new ScriptEndItem());
      return ret;
    }
    if (part == stopPart) {
      return ret;
    }
    if (part == null) {
    }
    part=checkPart(localData,part);
    if (part == null) {
      return ret;
    }
    if (part.ignored) {
      return ret;
    }
    List<String> fqn=new ArrayList<String>();
    List<GraphTargetItem> output=new ArrayList<GraphTargetItem>();
    List<GraphPart> parts=new ArrayList<GraphPart>();
    if (part instanceof GraphPartMulti) {
      parts=((GraphPartMulti)part).parts;
    }
 else {
      parts.add(part);
    }
    boolean isIf=false;
    int end=part.end;
    for (    GraphPart p : parts) {
      end=p.end;
      int start=p.start;
      isIf=false;
      try {
        output.addAll(code.translatePart(p,localData,stack,start,end));
        if ((end >= code.size() - 1) && p.nextParts.isEmpty()) {
          output.add(new ScriptEndItem());
        }
      }
 catch (      Exception ex) {
        Logger.getLogger(Graph.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
        return ret;
      }
    }
    if (part.nextParts.size() == 2) {
      if (!stack.isEmpty()) {
        GraphTargetItem top=stack.peek();
        if (false) {
          stack.pop();
          if (top.toBoolean()) {
            ret.addAll(output);
            ret.addAll(printGraph(visited,localData,stack,allParts,parent,part.nextParts.get(0),stopPart,loops,forFinalCommands));
            return ret;
          }
 else {
            ret.addAll(output);
            ret.addAll(printGraph(visited,localData,stack,allParts,parent,part.nextParts.get(1),stopPart,loops,forFinalCommands));
            return ret;
          }
        }
 else {
        }
      }
 else {
      }
    }
    if (part.nextParts.size() == 2) {
      if (part.nextParts.get(0) == part.nextParts.get(1)) {
        if (!stack.isEmpty()) {
          GraphTargetItem expr=stack.pop();
          if (expr instanceof LogicalOpItem) {
            expr=((LogicalOpItem)expr).invert();
          }
 else {
            expr=new NotItem(null,expr);
          }
          output.add(new IfItem(null,expr,new ArrayList<GraphTargetItem>(),new ArrayList<GraphTargetItem>()));
        }
        part.nextParts.remove(0);
      }
    }
    if (part.nextParts.size() == 2) {
      if ((stack.size() >= 2) && (stack.get(stack.size() - 1) instanceof NotItem) && (((NotItem)(stack.get(stack.size() - 1))).getOriginal().getNotCoerced() == stack.get(stack.size() - 2).getNotCoerced())) {
        ret.addAll(output);
        GraphPart sp0=getNextNoJump(part.nextParts.get(0));
        GraphPart sp1=getNextNoJump(part.nextParts.get(1));
        boolean reversed=false;
        List<GraphPart> loopContinues=getLoopsContinues(loops);
        loopContinues.add(part);
        if (sp1.leadsTo(code,sp0,loopContinues)) {
        }
 else         if (sp0.leadsTo(code,sp1,loopContinues)) {
          reversed=true;
        }
        GraphPart next=reversed ? sp0 : sp1;
        GraphTargetItem ti;
        if ((ti=checkLoop(next,stopPart,loops)) != null) {
          ret.add(ti);
        }
 else {
          printGraph(visited,localData,stack,allParts,parent,next,reversed ? sp1 : sp0,new ArrayList<Loop>(),forFinalCommands);
          GraphTargetItem second=stack.pop();
          GraphTargetItem first=stack.pop();
          if (!reversed) {
            AndItem a=new AndItem(null,first,second);
            stack.push(a);
            a.firstPart=part;
            if (second instanceof AndItem) {
              a.firstPart=((AndItem)second).firstPart;
            }
            if (second instanceof OrItem) {
              a.firstPart=((OrItem)second).firstPart;
            }
          }
 else {
            OrItem o=new OrItem(null,first,second);
            stack.push(o);
            o.firstPart=part;
            if (second instanceof AndItem) {
              o.firstPart=((AndItem)second).firstPart;
            }
            if (second instanceof OrItem) {
              o.firstPart=((OrItem)second).firstPart;
            }
          }
          next=reversed ? sp1 : sp0;
          if ((ti=checkLoop(next,stopPart,loops)) != null) {
            ret.add(ti);
          }
 else {
            ret.addAll(printGraph(visited,localData,stack,allParts,parent,next,stopPart,loops,forFinalCommands));
          }
        }
        return ret;
      }
 else       if ((stack.size() >= 2) && (stack.get(stack.size() - 1).getNotCoerced() == stack.get(stack.size() - 2).getNotCoerced())) {
        ret.addAll(output);
        GraphPart sp0=getNextNoJump(part.nextParts.get(0));
        GraphPart sp1=getNextNoJump(part.nextParts.get(1));
        boolean reversed=false;
        List<GraphPart> loopContinues=getLoopsContinues(loops);
        loopContinues.add(part);
        if (sp1.leadsTo(code,sp0,loopContinues)) {
        }
 else         if (sp0.leadsTo(code,sp1,loopContinues)) {
          reversed=true;
        }
        GraphPart next=reversed ? sp0 : sp1;
        GraphTargetItem ti;
        if ((ti=checkLoop(next,stopPart,loops)) != null) {
          ret.add(ti);
        }
 else {
          printGraph(visited,localData,stack,allParts,parent,next,reversed ? sp1 : sp0,new ArrayList<Loop>(),forFinalCommands);
          GraphTargetItem second=stack.pop();
          GraphTargetItem first=stack.pop();
          if (reversed) {
            AndItem a=new AndItem(null,first,second);
            stack.push(a);
            a.firstPart=part;
            if (second instanceof AndItem) {
              a.firstPart=((AndItem)second).firstPart;
            }
            if (second instanceof OrItem) {
              a.firstPart=((AndItem)second).firstPart;
            }
          }
 else {
            OrItem o=new OrItem(null,first,second);
            stack.push(o);
            o.firstPart=part;
            if (second instanceof OrItem) {
              o.firstPart=((OrItem)second).firstPart;
            }
            if (second instanceof OrItem) {
              o.firstPart=((OrItem)second).firstPart;
            }
          }
          next=reversed ? sp1 : sp0;
          if ((ti=checkLoop(next,stopPart,loops)) != null) {
            ret.add(ti);
          }
 else {
            ret.addAll(printGraph(visited,localData,stack,allParts,parent,next,stopPart,loops,forFinalCommands));
          }
        }
        return ret;
      }
    }
    List<GraphPart> loopContinues=getLoopsContinues(loops);
    boolean loop=false;
    boolean reversed=false;
    boolean whileTrue=false;
    Loop whileTrueLoop=null;
    if ((!part.nextParts.isEmpty()) && part.nextParts.get(0).leadsTo(code,part,loopContinues)) {
      if ((part.nextParts.size() > 1) && part.nextParts.get(1).leadsTo(code,part,loopContinues)) {
        if (output.isEmpty()) {
          whileTrueLoop=new Loop(loops.size(),part,null);
          loops.add(whileTrueLoop);
          whileTrue=true;
        }
 else {
          loop=true;
        }
      }
 else {
        loop=true;
      }
    }
 else     if ((part.nextParts.size() > 1) && part.nextParts.get(1).leadsTo(code,part,loopContinues)) {
      loop=true;
      reversed=true;
    }
    Loop lc=null;
    if (part.leadsTo(code,part,loopContinues)) {
      lc=new Loop(loops.size(),part,null);
      loops.add(lc);
    }
    List<GraphTargetItem> retChecked=null;
    if ((retChecked=check(code,localData,allParts,stack,parent,part,stopPart,loops,output,forFinalCommands)) != null) {
      if (lc != null) {
        List<GraphTargetItem> trueExp=new ArrayList<GraphTargetItem>();
        trueExp.add(new TrueItem(null));
        boolean chwt=true;
        if (!retChecked.isEmpty()) {
          checkContinueAtTheEnd(retChecked,lc);
          List<GraphTargetItem> finalCommands=forFinalCommands.get(lc);
          IfItem ifi=null;
          if ((finalCommands != null) && !finalCommands.isEmpty()) {
            if (finalCommands.get(finalCommands.size() - 1) instanceof IfItem) {
              ifi=(IfItem)finalCommands.get(finalCommands.size() - 1);
              finalCommands.remove(finalCommands.size() - 1);
            }
          }
 else           if (retChecked.get(retChecked.size() - 1) instanceof IfItem) {
            ifi=(IfItem)retChecked.get(retChecked.size() - 1);
            retChecked.remove(retChecked.size() - 1);
          }
          if (ifi != null) {
            if (ifi.onFalse.isEmpty()) {
              if (!ifi.onTrue.isEmpty()) {
                if (ifi.onTrue.get(ifi.onTrue.size() - 1) instanceof ExitItem) {
                  whileTrue=false;
                  List<GraphTargetItem> tr=new ArrayList<GraphTargetItem>();
                  GraphTargetItem ex=ifi.expression;
                  if (ex instanceof LogicalOpItem) {
                    ex=((LogicalOpItem)ex).invert();
                  }
 else {
                    ex=new NotItem(null,ex);
                  }
                  if ((finalCommands != null) && (!finalCommands.isEmpty())) {
                    tr.addAll(finalCommands);
                  }
                  tr.add(ex);
                  ret.add(new DoWhileItem(null,lc,retChecked,tr));
                  ret.addAll(ifi.onTrue);
                  chwt=false;
                }
              }
            }
          }
        }
        if (chwt) {
          ret.add(new WhileItem(null,lc,trueExp,retChecked));
        }
      }
 else {
        ret.addAll(retChecked);
      }
      return ret;
    }
 else {
      if (lc != null) {
        loops.remove(lc);
      }
    }
    if (((part.nextParts.size() == 2) || ((part.nextParts.size() == 1) && loop))) {
      boolean doWhile=loop;
      if (loop && output.isEmpty()) {
        doWhile=false;
      }
      Loop currentLoop=null;
      if (loop) {
        currentLoop=new Loop(loops.size(),part,null);
        loops.add(currentLoop);
      }
      if ((!whileTrue) && loop && (part.nextParts.size() > 1)&& (!doWhile)) {
        currentLoop.loopBreak=part.nextParts.get(reversed ? 0 : 1);
      }
      forFinalCommands.put(currentLoop,new ArrayList<GraphTargetItem>());
      GraphTargetItem expr=null;
      if (part.nextParts.size() == 1) {
        expr=new TrueItem(null);
      }
 else {
        if (!stack.isEmpty()) {
          expr=stack.pop();
        }
      }
      if (doWhile) {
      }
 else {
        ret.addAll(output);
      }
      if (loop) {
        GraphPart f=expr.getFirstPart();
        if (f != null) {
          currentLoop.loopContinue=f;
        }
      }
      GraphPart loopBodyStart=null;
      if ((reversed == loop) || doWhile) {
        if (expr instanceof LogicalOpItem) {
          expr=((LogicalOpItem)expr).invert();
        }
 else {
          expr=new NotItem(null,expr);
        }
      }
      loopContinues=getLoopsContinues(loops);
      GraphPart next=part.getNextPartPath(loopContinues);
      List<GraphTargetItem> retx=ret;
      if ((!loop) || (doWhile && (part.nextParts.size() > 1))) {
        if (doWhile) {
          retx=output;
        }
        int stackSizeBefore=stack.size();
        Stack<GraphTargetItem> trueStack=(Stack<GraphTargetItem>)stack.clone();
        Stack<GraphTargetItem> falseStack=(Stack<GraphTargetItem>)stack.clone();
        GraphTargetItem lopTrue=checkLoop(part.nextParts.get(1),stopPart,loops);
        GraphTargetItem lopFalse=null;
        if (next != part.nextParts.get(0)) {
          lopFalse=checkLoop(part.nextParts.get(0),stopPart,loops);
        }
        List<GraphTargetItem> onTrue=new ArrayList<GraphTargetItem>();
        if (lopTrue != null) {
          onTrue.add(lopTrue);
        }
 else {
          if (debugMode) {
            System.err.println(""String_Node_Str"" + part + ""String_Node_Str"");
          }
          onTrue=printGraph(visited,prepareBranchLocalData(localData),trueStack,allParts,part,part.nextParts.get(1),next == null ? stopPart : next,loops,forFinalCommands);
          if (debugMode) {
            System.err.println(""String_Node_Str"" + part + ""String_Node_Str"");
          }
        }
        List<GraphTargetItem> onFalse=new ArrayList<GraphTargetItem>();
        if ((!onTrue.isEmpty()) && onTrue.get(onTrue.size() - 1) instanceof ExitItem) {
          next=part.nextParts.get(0);
        }
 else {
          if (lopFalse != null) {
            onFalse.add(lopFalse);
          }
 else {
            if (debugMode) {
              System.err.println(""String_Node_Str"" + part + ""String_Node_Str"");
            }
            if ((next == part.nextParts.get(0)) || (part.nextParts.get(0).path.equals(part.path) || part.nextParts.get(0).path.length() < part.path.length())) {
              onFalse=new ArrayList<GraphTargetItem>();
            }
 else {
              onFalse=(printGraph(visited,prepareBranchLocalData(localData),falseStack,allParts,part,part.nextParts.get(0),next == null ? stopPart : next,loops,forFinalCommands));
            }
            if (debugMode) {
              System.err.println(""String_Node_Str"" + part + ""String_Node_Str"");
            }
          }
        }
        if (isEmpty(onTrue) && isEmpty(onFalse) && (trueStack.size() > stackSizeBefore)&& (falseStack.size() > stackSizeBefore)) {
          stack.push(new TernarOpItem(null,expr,trueStack.pop(),falseStack.pop()));
        }
 else {
          List<GraphTargetItem> retw=retx;
          if (whileTrue) {
            retw=new ArrayList<GraphTargetItem>();
            retw.add(new IfItem(null,expr,onTrue,onFalse));
            List<GraphTargetItem> body=new ArrayList<GraphTargetItem>();
            if (next != null) {
              body=printGraph(visited,prepareBranchLocalData(localData),stack,allParts,part,next,stopPart,loops,forFinalCommands);
            }
            retw.addAll(body);
            if (!retw.isEmpty()) {
              checkContinueAtTheEnd(retw,whileTrueLoop);
              List<GraphTargetItem> finalCommands=forFinalCommands.get(whileTrueLoop);
              IfItem ifi=null;
              if ((finalCommands != null) && !finalCommands.isEmpty()) {
                if (finalCommands.get(finalCommands.size() - 1) instanceof IfItem) {
                  ifi=(IfItem)finalCommands.get(finalCommands.size() - 1);
                  finalCommands.remove(finalCommands.size() - 1);
                }
              }
 else               if (retw.get(retw.size() - 1) instanceof IfItem) {
                ifi=(IfItem)retw.get(retw.size() - 1);
                retw.remove(retw.size() - 1);
              }
              if (ifi != null) {
                if (ifi.onFalse.isEmpty()) {
                  if (!ifi.onTrue.isEmpty()) {
                    if (ifi.onTrue.get(ifi.onTrue.size() - 1) instanceof ExitItem) {
                      whileTrue=false;
                      List<GraphTargetItem> tr=new ArrayList<GraphTargetItem>();
                      GraphTargetItem ex=ifi.expression;
                      if (ex instanceof LogicalOpItem) {
                        ex=((LogicalOpItem)ex).invert();
                      }
 else {
                        ex=new NotItem(null,ex);
                      }
                      if ((finalCommands != null) && (!finalCommands.isEmpty())) {
                        tr.addAll(finalCommands);
                      }
                      tr.add(ex);
                      retx.add(new DoWhileItem(null,whileTrueLoop,retw,tr));
                      retx.addAll(ifi.onTrue);
                      next=null;
                    }
                  }
                }
              }
            }
            if (whileTrue) {
              List<GraphTargetItem> tr=new ArrayList<GraphTargetItem>();
              tr.add(new TrueItem(null));
              retx.add(new WhileItem(null,whileTrueLoop,tr,retw));
              next=null;
            }
          }
 else {
            retx.add(new IfItem(null,expr,onTrue,onFalse));
          }
        }
        if (doWhile) {
          loopBodyStart=next;
        }
        if (whileTrue) {
          loopBodyStart=part;
        }
      }
      if (loop) {
        List<GraphTargetItem> loopBody=new ArrayList<GraphTargetItem>();
        List<GraphTargetItem> finalCommands=null;
        GraphPart finalPart=null;
        GraphTargetItem ti;
        if ((loopBodyStart != null) && ((ti=checkLoop(loopBodyStart,stopPart,loops)) != null)) {
          loopBody.add(ti);
        }
 else {
          if (!(doWhile && (loopBodyStart == null))) {
            loopBody=printGraph(visited,prepareBranchLocalData(localData),stack,allParts,part,loopBodyStart != null ? loopBodyStart : part.nextParts.get(reversed ? 1 : 0),stopPart,loops,forFinalCommands);
          }
        }
        checkContinueAtTheEnd(loopBody,currentLoop);
        finalCommands=forFinalCommands.get(currentLoop);
        checkContinueAtTheEnd(finalCommands,currentLoop);
        if (!finalCommands.isEmpty()) {
          ret.add(new ForTreeItem(null,currentLoop,new ArrayList<GraphTargetItem>(),expr,finalCommands,loopBody));
        }
 else {
          if (doWhile) {
            if (stack.isEmpty() || (part.nextParts.size() == 1)) {
              expr=new TrueItem(null);
            }
 else {
              expr=stack.pop();
            }
            loopBody.addAll(0,output);
            if (part.nextParts.size() == 1) {
              loopBody.addAll(printGraph(visited,prepareBranchLocalData(localData),stack,allParts,part,part.nextParts.get(0),stopPart,loops,forFinalCommands));
            }
            checkContinueAtTheEnd(loopBody,currentLoop);
            List<GraphTargetItem> newBody=new ArrayList<GraphTargetItem>();
            List<GraphTargetItem> nextcmds=new ArrayList<GraphTargetItem>();
            if ((!loopBody.isEmpty()) && (loopBody.get(loopBody.size() - 1) instanceof IfItem)) {
              IfItem ift=(IfItem)loopBody.get(loopBody.size() - 1);
              if ((!ift.onFalse.isEmpty()) && (ift.onFalse.get(ift.onFalse.size() - 1) instanceof ExitItem)) {
                if (ift.expression != null) {
                  expr=ift.expression;
                }
                nextcmds=ift.onFalse;
                newBody=ift.onTrue;
                loopBody.remove(loopBody.size() - 1);
              }
 else               if ((!ift.onTrue.isEmpty()) && (ift.onTrue.get(ift.onTrue.size() - 1) instanceof ExitItem)) {
                if (ift.expression != null) {
                  expr=ift.expression;
                  if (expr instanceof LogicalOpItem) {
                    expr=((LogicalOpItem)expr).invert();
                  }
 else {
                    expr=new NotItem(null,expr);
                  }
                }
                newBody=ift.onFalse;
                nextcmds=ift.onTrue;
                loopBody.remove(loopBody.size() - 1);
                if (newBody.isEmpty()) {
                }
              }
            }
            checkContinueAtTheEnd(newBody,currentLoop);
            if ((!newBody.isEmpty()) && (!(newBody.get(0) instanceof ScriptEndItem))) {
              loopBody.add(expr);
              ret.add(new WhileItem(null,currentLoop,loopBody,newBody));
              ret.addAll(nextcmds);
            }
 else {
              List<GraphTargetItem> ex=new ArrayList<GraphTargetItem>();
              ex.add(expr);
              ret.add(new DoWhileItem(null,currentLoop,loopBody,ex));
              ret.addAll(nextcmds);
            }
          }
 else {
            List<GraphTargetItem> ex=new ArrayList<GraphTargetItem>();
            ex.add(expr);
            ret.add(new WhileItem(null,currentLoop,ex,loopBody));
          }
        }
      }
      if ((!doWhile) && (!whileTrue) && loop&& (part.nextParts.size() > 1)) {
        loops.remove(currentLoop);
        next=part.nextParts.get(reversed ? 0 : 1);
      }
      if (doWhile) {
        next=null;
      }
      if (next != null) {
        GraphTargetItem ti=checkLoop(next,stopPart,loops);
        if (ti != null) {
          ret.add(ti);
        }
 else {
          if (debugMode) {
            System.err.println(""String_Node_Str"" + part + ""String_Node_Str"");
          }
          ret.addAll(printGraph(visited,localData,stack,allParts,part,next,stopPart,loops,forFinalCommands));
          if (debugMode) {
            System.err.println(""String_Node_Str"" + part + ""String_Node_Str"");
          }
        }
      }
    }
 else {
      ret.addAll(output);
    }
    onepart:     if (part.nextParts.size() == 1 && (!loop)) {
      GraphPart p=part.nextParts.get(0);
      GraphTargetItem lop=checkLoop(p,stopPart,loops);
      if (lop == null) {
        if (p.path.length() >= part.path.length()) {
          ret.addAll(printGraph(visited,localData,stack,allParts,part,p,stopPart,loops,forFinalCommands));
        }
 else {
          if ((p != stopPart) && (p.refs.size() > 1)) {
            List<GraphPart> nextList=new ArrayList<GraphPart>();
            populateParts(p,nextList);
            Loop nearestLoop=null;
            loopn:             for (            GraphPart n : nextList) {
              for (              Loop l : loops) {
                if (l.loopContinue == n) {
                  nearestLoop=l;
                  break loopn;
                }
              }
            }
            if ((nearestLoop != null)) {
              GraphPart oldCont=nearestLoop.loopContinue;
              nearestLoop.loopContinue=p;
              List<GraphTargetItem> finalCommands=printGraph(visited,localData,stack,allParts,part,p,oldCont,loops,forFinalCommands);
              forFinalCommands.put(nearestLoop,finalCommands);
              ContinueItem cti=new ContinueItem(null,nearestLoop.id);
              ret.add(cti);
            }
          }
        }
      }
 else {
        ret.add(lop);
      }
    }
    return ret;
  }
 catch (  StackOverflowError soe) {
    ret.add(new CommentTreeItem(null,""String_Node_Str""));
    Logger.getLogger(Graph.class.getName()).log(Level.SEVERE,""String_Node_Str"",soe);
    return ret;
  }
}",0.9939351167765696
62187,"@Override public void translate(boolean isStatic,int scriptIndex,int classIndex,java.util.HashMap<Integer,GraphTargetItem> localRegs,Stack<GraphTargetItem> stack,java.util.Stack<GraphTargetItem> scopeStack,ConstantPool constants,AVM2Instruction ins,MethodInfo[] method_info,List<GraphTargetItem> output,com.jpexs.decompiler.flash.abc.types.MethodBody body,com.jpexs.decompiler.flash.abc.ABC abc,HashMap<Integer,String> localRegNames,List<String> fullyQualifiedNames){
  int regIndex=ins.operands[0];
  output.add(new DecLocalTreeItem(ins,regIndex));
  if (localRegs.containsKey(regIndex)) {
    localRegs.put(regIndex,new NotCompileTimeTreeItem(ins,new SubtractTreeItem(ins,localRegs.get(regIndex),new IntegerValueTreeItem(ins,new Long(1)))));
  }
 else {
    localRegs.put(regIndex,new SubtractTreeItem(ins,localRegs.get(regIndex),new IntegerValueTreeItem(ins,new Long(1))));
  }
}","@Override public void translate(boolean isStatic,int scriptIndex,int classIndex,java.util.HashMap<Integer,GraphTargetItem> localRegs,Stack<GraphTargetItem> stack,java.util.Stack<GraphTargetItem> scopeStack,ConstantPool constants,AVM2Instruction ins,MethodInfo[] method_info,List<GraphTargetItem> output,com.jpexs.decompiler.flash.abc.types.MethodBody body,com.jpexs.decompiler.flash.abc.ABC abc,HashMap<Integer,String> localRegNames,List<String> fullyQualifiedNames){
  int regIndex=ins.operands[0];
  output.add(new DecLocalTreeItem(ins,regIndex));
  if (localRegs.containsKey(regIndex)) {
    localRegs.put(regIndex,new NotCompileTimeTreeItem(ins,new SubtractTreeItem(ins,localRegs.get(regIndex),new IntegerValueTreeItem(ins,new Long(1)))));
  }
 else {
    localRegs.put(regIndex,new SubtractTreeItem(ins,new IntegerValueTreeItem(ins,new Long(0)),new IntegerValueTreeItem(ins,new Long(1))));
  }
}",0.9652076318742986
62188,"@Override public void translate(boolean isStatic,int scriptIndex,int classIndex,java.util.HashMap<Integer,GraphTargetItem> localRegs,Stack<GraphTargetItem> stack,java.util.Stack<GraphTargetItem> scopeStack,ConstantPool constants,AVM2Instruction ins,MethodInfo[] method_info,List<GraphTargetItem> output,com.jpexs.decompiler.flash.abc.types.MethodBody body,com.jpexs.decompiler.flash.abc.ABC abc,HashMap<Integer,String> localRegNames,List<String> fullyQualifiedNames){
  int regIndex=ins.operands[0];
  output.add(new DecLocalTreeItem(ins,regIndex));
  if (localRegs.containsKey(regIndex)) {
    localRegs.put(regIndex,new NotCompileTimeTreeItem(ins,new SubtractTreeItem(ins,localRegs.get(regIndex),new IntegerValueTreeItem(ins,new Long(1)))));
  }
 else {
    localRegs.put(regIndex,new SubtractTreeItem(ins,localRegs.get(regIndex),new IntegerValueTreeItem(ins,new Long(1))));
  }
}","@Override public void translate(boolean isStatic,int scriptIndex,int classIndex,java.util.HashMap<Integer,GraphTargetItem> localRegs,Stack<GraphTargetItem> stack,java.util.Stack<GraphTargetItem> scopeStack,ConstantPool constants,AVM2Instruction ins,MethodInfo[] method_info,List<GraphTargetItem> output,com.jpexs.decompiler.flash.abc.types.MethodBody body,com.jpexs.decompiler.flash.abc.ABC abc,HashMap<Integer,String> localRegNames,List<String> fullyQualifiedNames){
  int regIndex=ins.operands[0];
  output.add(new DecLocalTreeItem(ins,regIndex));
  if (localRegs.containsKey(regIndex)) {
    localRegs.put(regIndex,new NotCompileTimeTreeItem(ins,new SubtractTreeItem(ins,localRegs.get(regIndex),new IntegerValueTreeItem(ins,new Long(1)))));
  }
 else {
    localRegs.put(regIndex,new SubtractTreeItem(ins,new IntegerValueTreeItem(ins,new Long(0)),new IntegerValueTreeItem(ins,new Long(1))));
  }
}",0.9652076318742986
62189,"@Override public void translate(boolean isStatic,int scriptIndex,int classIndex,java.util.HashMap<Integer,GraphTargetItem> localRegs,Stack<GraphTargetItem> stack,java.util.Stack<GraphTargetItem> scopeStack,ConstantPool constants,AVM2Instruction ins,MethodInfo[] method_info,List<GraphTargetItem> output,com.jpexs.decompiler.flash.abc.types.MethodBody body,com.jpexs.decompiler.flash.abc.ABC abc,HashMap<Integer,String> localRegNames,List<String> fullyQualifiedNames){
  int regIndex=ins.operands[0];
  output.add(new IncLocalTreeItem(ins,regIndex));
  if (localRegs.containsKey(regIndex)) {
    localRegs.put(regIndex,new NotCompileTimeTreeItem(ins,new AddTreeItem(ins,localRegs.get(regIndex),new IntegerValueTreeItem(ins,new Long(1)))));
  }
 else {
    localRegs.put(regIndex,new AddTreeItem(ins,localRegs.get(regIndex),new IntegerValueTreeItem(ins,new Long(1))));
  }
}","@Override public void translate(boolean isStatic,int scriptIndex,int classIndex,java.util.HashMap<Integer,GraphTargetItem> localRegs,Stack<GraphTargetItem> stack,java.util.Stack<GraphTargetItem> scopeStack,ConstantPool constants,AVM2Instruction ins,MethodInfo[] method_info,List<GraphTargetItem> output,com.jpexs.decompiler.flash.abc.types.MethodBody body,com.jpexs.decompiler.flash.abc.ABC abc,HashMap<Integer,String> localRegNames,List<String> fullyQualifiedNames){
  int regIndex=ins.operands[0];
  output.add(new IncLocalTreeItem(ins,regIndex));
  if (localRegs.containsKey(regIndex)) {
    localRegs.put(regIndex,new NotCompileTimeTreeItem(ins,new AddTreeItem(ins,localRegs.get(regIndex),new IntegerValueTreeItem(ins,new Long(1)))));
  }
 else {
    localRegs.put(regIndex,new AddTreeItem(ins,new IntegerValueTreeItem(ins,new Long(0)),new IntegerValueTreeItem(ins,new Long(1))));
  }
}",0.9648127128263336
62190,"@Override public void translate(boolean isStatic,int scriptIndex,int classIndex,java.util.HashMap<Integer,GraphTargetItem> localRegs,Stack<GraphTargetItem> stack,java.util.Stack<GraphTargetItem> scopeStack,ConstantPool constants,AVM2Instruction ins,MethodInfo[] method_info,List<GraphTargetItem> output,com.jpexs.decompiler.flash.abc.types.MethodBody body,com.jpexs.decompiler.flash.abc.ABC abc,HashMap<Integer,String> localRegNames,List<String> fullyQualifiedNames){
  int regIndex=ins.operands[0];
  output.add(new IncLocalTreeItem(ins,regIndex));
  if (localRegs.containsKey(regIndex)) {
    localRegs.put(regIndex,new NotCompileTimeTreeItem(ins,new AddTreeItem(ins,localRegs.get(regIndex),new IntegerValueTreeItem(ins,new Long(1)))));
  }
 else {
    localRegs.put(regIndex,new AddTreeItem(ins,localRegs.get(regIndex),new IntegerValueTreeItem(ins,new Long(1))));
  }
}","@Override public void translate(boolean isStatic,int scriptIndex,int classIndex,java.util.HashMap<Integer,GraphTargetItem> localRegs,Stack<GraphTargetItem> stack,java.util.Stack<GraphTargetItem> scopeStack,ConstantPool constants,AVM2Instruction ins,MethodInfo[] method_info,List<GraphTargetItem> output,com.jpexs.decompiler.flash.abc.types.MethodBody body,com.jpexs.decompiler.flash.abc.ABC abc,HashMap<Integer,String> localRegNames,List<String> fullyQualifiedNames){
  int regIndex=ins.operands[0];
  output.add(new IncLocalTreeItem(ins,regIndex));
  if (localRegs.containsKey(regIndex)) {
    localRegs.put(regIndex,new NotCompileTimeTreeItem(ins,new AddTreeItem(ins,localRegs.get(regIndex),new IntegerValueTreeItem(ins,new Long(1)))));
  }
 else {
    localRegs.put(regIndex,new AddTreeItem(ins,new IntegerValueTreeItem(ins,new Long(0)),new IntegerValueTreeItem(ins,new Long(1))));
  }
}",0.9648127128263336
62191,"public ActionTry(long containerSWFPos,boolean ignoreNops,List<Label> labels,long address,FlasmLexer lexer,List<String> constantPool,int version) throws IOException, ParseException {
  super(0x8F,0);
  this.version=version;
  ASMParsedSymbol symb=lexer.yylex();
  if (symb.type == ASMParsedSymbol.TYPE_STRING) {
    catchInRegisterFlag=false;
    catchName=(String)symb.value;
  }
 else   if (symb.type == ASMParsedSymbol.TYPE_REGISTER) {
    catchRegister=(Integer)symb.value;
    catchInRegisterFlag=true;
  }
 else   if (symb.type == ASMParsedSymbol.TYPE_BLOCK_START) {
    return;
  }
 else {
    throw new ParseException(""String_Node_Str"",lexer.yyline());
  }
  lexBlockOpen(lexer);
}","public ActionTry(long containerSWFPos,boolean ignoreNops,List<Label> labels,long address,FlasmLexer lexer,List<String> constantPool,int version) throws IOException, ParseException {
  super(0x8F,0);
  this.version=version;
  ASMParsedSymbol symb=lexer.yylex();
  if (symb.type == ASMParsedSymbol.TYPE_STRING) {
    catchInRegisterFlag=false;
    catchName=(String)symb.value;
  }
 else   if (symb.type == ASMParsedSymbol.TYPE_REGISTER) {
    catchRegister=((RegisterNumber)symb.value).number;
    catchInRegisterFlag=true;
  }
 else   if (symb.type == ASMParsedSymbol.TYPE_BLOCK_START) {
    return;
  }
 else {
    throw new ParseException(""String_Node_Str"",lexer.yyline());
  }
  lexBlockOpen(lexer);
}",0.9813218390804598
62192,"@Override public void translate(Stack<GraphTargetItem> stack,List<GraphTargetItem> output,java.util.HashMap<Integer,String> regNames,HashMap<String,GraphTargetItem> variables,HashMap<String,GraphTargetItem> functions){
  GraphTargetItem target=stack.pop();
  GraphTargetItem lockCenter=stack.pop();
  GraphTargetItem constrain=stack.pop();
  boolean hasConstrains=true;
  if (constrain instanceof DirectValueTreeItem) {
    if (((DirectValueTreeItem)constrain).value instanceof Long) {
      if (((long)(Long)((DirectValueTreeItem)constrain).value) == 0) {
        hasConstrains=false;
      }
    }
    if (((DirectValueTreeItem)constrain).value instanceof Boolean) {
      if (((boolean)(Boolean)((DirectValueTreeItem)constrain).value) == false) {
        hasConstrains=false;
      }
    }
  }
  GraphTargetItem x1=null;
  GraphTargetItem y1=null;
  GraphTargetItem x2=null;
  GraphTargetItem y2=null;
  if (hasConstrains) {
    y2=stack.pop();
    x2=stack.pop();
    y1=stack.pop();
    x1=stack.pop();
  }
  output.add(new StartDragTreeItem(this,target,lockCenter,constrain,x1,y1,x2,y2));
}","@Override public void translate(Stack<GraphTargetItem> stack,List<GraphTargetItem> output,java.util.HashMap<Integer,String> regNames,HashMap<String,GraphTargetItem> variables,HashMap<String,GraphTargetItem> functions){
  GraphTargetItem target=stack.pop();
  GraphTargetItem lockCenter=stack.pop();
  GraphTargetItem constrain=stack.pop();
  boolean hasConstrains=true;
  if (constrain instanceof DirectValueTreeItem) {
    if (Double.compare(constrain.toNumber(),0) == 0) {
      hasConstrains=false;
    }
  }
  GraphTargetItem x1=null;
  GraphTargetItem y1=null;
  GraphTargetItem x2=null;
  GraphTargetItem y2=null;
  if (hasConstrains) {
    y2=stack.pop();
    x2=stack.pop();
    y1=stack.pop();
    x1=stack.pop();
  }
  output.add(new StartDragTreeItem(this,target,lockCenter,constrain,x1,y1,x2,y2));
}",0.7760880964866282
62193,"@Override public String toString(ConstantPool constants){
  boolean hasConstrains=true;
  if (constrain instanceof DirectValueTreeItem) {
    if (((DirectValueTreeItem)constrain).value instanceof Long) {
      if (((long)(Long)((DirectValueTreeItem)constrain).value) == 0) {
        hasConstrains=false;
      }
    }
    if (((DirectValueTreeItem)constrain).value instanceof Boolean) {
      if (((boolean)(Boolean)((DirectValueTreeItem)constrain).value) == false) {
        hasConstrains=false;
      }
    }
  }
  return hilight(""String_Node_Str"") + target.toString(constants) + hilight(""String_Node_Str"")+ lockCenter.toString(constants)+ (hasConstrains ? hilight(""String_Node_Str"") + x1.toString(constants) + hilight(""String_Node_Str"")+ y1.toString(constants)+ hilight(""String_Node_Str"")+ x2.toString(constants)+ hilight(""String_Node_Str"")+ y2.toString(constants) : ""String_Node_Str"")+ hilight(""String_Node_Str"");
}","@Override public String toString(ConstantPool constants){
  boolean hasConstrains=true;
  if (constrain instanceof DirectValueTreeItem) {
    if (Double.compare(constrain.toNumber(),0) == 0) {
      hasConstrains=false;
    }
  }
  return hilight(""String_Node_Str"") + target.toString(constants) + hilight(""String_Node_Str"")+ lockCenter.toString(constants)+ (hasConstrains ? hilight(""String_Node_Str"") + x1.toString(constants) + hilight(""String_Node_Str"")+ y1.toString(constants)+ hilight(""String_Node_Str"")+ x2.toString(constants)+ hilight(""String_Node_Str"")+ y2.toString(constants) : ""String_Node_Str"")+ hilight(""String_Node_Str"");
}",0.7752736638763683
62194,"@Override public void setImage(byte data[]){
  imageData=data;
  if (ImageTag.getImageFormat(data).equals(""String_Node_Str"")) {
    BufferedImage image=getImage(new ArrayList<Tag>());
    bitmapAlphaData=new byte[image.getWidth() * image.getHeight()];
    for (int i=0; i < bitmapAlphaData.length; i++) {
      bitmapAlphaData[i]=(byte)255;
    }
  }
 else {
    bitmapAlphaData=new byte[0];
  }
}","@Override public void setImage(byte data[]){
  imageData=data;
  if (ImageTag.getImageFormat(data).equals(""String_Node_Str"")) {
    BufferedImage image=getImage(new ArrayList<Tag>());
    byte ba[]=new byte[image.getWidth() * image.getHeight()];
    for (int i=0; i < ba.length; i++) {
      ba[i]=(byte)255;
    }
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    SWFOutputStream sos=new SWFOutputStream(baos,SWF.DEFAULT_VERSION);
    try {
      sos.writeBytesZlib(ba);
    }
 catch (    IOException ex) {
      Logger.getLogger(DefineBitsJPEG3Tag.class.getName()).log(Level.SEVERE,null,ex);
    }
    bitmapAlphaData=baos.toByteArray();
  }
 else {
    bitmapAlphaData=new byte[0];
  }
}",0.5740236148955495
62195,"@Override public void setImage(byte data[]){
  imageData=data;
  if (ImageTag.getImageFormat(data).equals(""String_Node_Str"")) {
    BufferedImage image=getImage(new ArrayList<Tag>());
    bitmapAlphaData=new byte[image.getWidth() * image.getHeight()];
    for (int i=0; i < bitmapAlphaData.length; i++) {
      bitmapAlphaData[i]=(byte)255;
    }
  }
 else {
    bitmapAlphaData=new byte[0];
  }
}","@Override public void setImage(byte data[]){
  imageData=data;
  if (ImageTag.getImageFormat(data).equals(""String_Node_Str"")) {
    BufferedImage image=getImage(new ArrayList<Tag>());
    byte ba[]=new byte[image.getWidth() * image.getHeight()];
    for (int i=0; i < ba.length; i++) {
      ba[i]=(byte)255;
    }
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    SWFOutputStream sos=new SWFOutputStream(baos,SWF.DEFAULT_VERSION);
    try {
      sos.writeBytesZlib(ba);
    }
 catch (    IOException ex) {
      Logger.getLogger(DefineBitsJPEG4Tag.class.getName()).log(Level.SEVERE,null,ex);
    }
    bitmapAlphaData=baos.toByteArray();
  }
 else {
    bitmapAlphaData=new byte[0];
  }
}",0.5740236148955495
62196,"@Override protected List<GraphTargetItem> check(GraphSource srcCode,List localData,List<GraphPart> allParts,Stack<GraphTargetItem> stack,GraphPart parent,GraphPart part,GraphPart stopPart,List<Loop> loops,List<GraphTargetItem> output,HashMap<Loop,List<GraphTargetItem>> forFinalCommands){
  List<GraphTargetItem> ret=null;
  List<ABCException> parsedExceptions=(List<ABCException>)localData.get(DATA_PARSEDEXCEPTIONS);
  List<Integer> finallyJumps=(List<Integer>)localData.get(DATA_FINALLYJUMPS);
  List<Integer> ignoredSwitches=(List<Integer>)localData.get(DATA_IGNOREDSWITCHES);
  int ip=part.start;
  int addr=code.fixAddrAfterDebugLine(code.pos2adr(part.start));
  int maxend=-1;
  List<ABCException> catchedExceptions=new ArrayList<ABCException>();
  for (int e=0; e < body.exceptions.length; e++) {
    if (addr == code.fixAddrAfterDebugLine(body.exceptions[e].start)) {
      if (!body.exceptions[e].isFinally()) {
        if (((body.exceptions[e].end) > maxend) && (!parsedExceptions.contains(body.exceptions[e]))) {
          catchedExceptions.clear();
          maxend=code.fixAddrAfterDebugLine(body.exceptions[e].end);
          catchedExceptions.add(body.exceptions[e]);
        }
 else         if (code.fixAddrAfterDebugLine(body.exceptions[e].end) == maxend) {
          catchedExceptions.add(body.exceptions[e]);
        }
      }
    }
  }
  if (catchedExceptions.size() > 0) {
    parsedExceptions.addAll(catchedExceptions);
    int endpos=code.adr2pos(code.fixAddrAfterDebugLine(catchedExceptions.get(0).end));
    int endposStartBlock=code.adr2pos(catchedExceptions.get(0).end);
    List<List<GraphTargetItem>> catchedCommands=new ArrayList<List<GraphTargetItem>>();
    if (code.code.get(endpos).definition instanceof JumpIns) {
      int afterCatchAddr=code.pos2adr(endpos + 1) + code.code.get(endpos).operands[0];
      int afterCatchPos=code.adr2pos(afterCatchAddr);
      Collections.sort(catchedExceptions,new Comparator<ABCException>(){
        @Override public int compare(        ABCException o1,        ABCException o2){
          return code.fixAddrAfterDebugLine(o1.target) - code.fixAddrAfterDebugLine(o2.target);
        }
      }
);
      List<GraphTargetItem> finallyCommands=new ArrayList<GraphTargetItem>();
      int returnPos=afterCatchPos;
      for (int e=0; e < body.exceptions.length; e++) {
        if (body.exceptions[e].isFinally()) {
          if (addr == code.fixAddrAfterDebugLine(body.exceptions[e].start)) {
            if (afterCatchPos + 1 == code.adr2pos(code.fixAddrAfterDebugLine(body.exceptions[e].end))) {
              AVM2Instruction jmpIns=code.code.get(code.adr2pos(code.fixAddrAfterDebugLine(body.exceptions[e].end)));
              if (jmpIns.definition instanceof JumpIns) {
                int finStart=code.adr2pos(code.fixAddrAfterDebugLine(body.exceptions[e].end) + jmpIns.getBytes().length + jmpIns.operands[0]);
                boolean switchFound=false;
                GraphPart fpart=null;
                for (                GraphPart p : allParts) {
                  if (p.start == finStart) {
                    fpart=p;
                    break;
                  }
                }
                for (int f=finStart; f < code.code.size(); f++) {
                  if (code.code.get(f).definition instanceof LookupSwitchIns) {
                    AVM2Instruction swins=code.code.get(f);
                    if (swins.operands.length >= 3) {
                      if (swins.operands[0] == swins.getBytes().length) {
                        if (code.adr2pos(code.pos2adr(f) + swins.operands[2]) < finStart) {
                          stack.push(new ExceptionTreeItem(body.exceptions[e]));
                          GraphPart fepart=null;
                          for (                          GraphPart p : allParts) {
                            if (p.start == f + 1) {
                              fepart=p;
                              break;
                            }
                          }
                          ignoredSwitches.add(f);
                          finallyCommands=printGraph(localData,stack,allParts,parent,fpart,fepart,loops,forFinalCommands);
                          returnPos=f + 1;
                          break;
                        }
                      }
                    }
                  }
                }
                if (!switchFound) {
                  finallyCommands=printGraph(localData,stack,allParts,parent,fpart,null,loops,forFinalCommands);
                }
                finallyJumps.add(finStart);
                break;
              }
            }
          }
        }
      }
      for (int e=0; e < catchedExceptions.size(); e++) {
        int eendpos;
        if (e < catchedExceptions.size() - 1) {
          eendpos=code.adr2pos(code.fixAddrAfterDebugLine(catchedExceptions.get(e + 1).target)) - 2;
        }
 else {
          eendpos=afterCatchPos - 1;
        }
        GraphPart npart=null;
        int findpos=code.adr2pos(catchedExceptions.get(e).target);
        for (        GraphPart p : allParts) {
          if (p.start == findpos) {
            npart=p;
            break;
          }
        }
        GraphPart nepart=null;
        for (        GraphPart p : allParts) {
          if (p.start == eendpos + 1) {
            nepart=p;
            break;
          }
        }
        stack.add(new ExceptionTreeItem(catchedExceptions.get(e)));
        List localData2=new ArrayList();
        localData2.addAll(localData);
        localData2.set(DATA_SCOPESTACK,new Stack<GraphTargetItem>());
        catchedCommands.add(printGraph(localData2,stack,allParts,parent,npart,nepart,loops,forFinalCommands));
      }
      GraphPart nepart=null;
      for (      GraphPart p : allParts) {
        if (p.start == endposStartBlock) {
          nepart=p;
          break;
        }
      }
      List<GraphTargetItem> tryCommands=printGraph(localData,stack,allParts,parent,part,nepart,loops,forFinalCommands);
      output.clear();
      output.add(new TryTreeItem(tryCommands,catchedExceptions,catchedCommands,finallyCommands));
      ip=returnPos;
    }
  }
  if (ip != part.start) {
    part=null;
    for (    GraphPart p : allParts) {
      List<GraphPart> ps=p.getSubParts();
      for (      GraphPart p2 : ps) {
        if (p2.start == ip) {
          part=p2;
          break;
        }
      }
    }
    ret=new ArrayList<GraphTargetItem>();
    ret.addAll(output);
    GraphTargetItem lop=checkLoop(part,stopPart,loops);
    if (lop == null) {
      ret.addAll(printGraph(localData,stack,allParts,null,part,stopPart,loops,forFinalCommands));
    }
 else {
      ret.add(lop);
    }
    return ret;
  }
  if (part.nextParts.isEmpty()) {
    if (code.code.get(part.end).definition instanceof ReturnValueIns) {
      if (part.getHeight() >= 3) {
        if (code.code.get(part.getPosAt(part.getHeight() - 2)).definition instanceof KillIns) {
          if (code.code.get(part.getPosAt(part.getHeight() - 3)).definition instanceof GetLocalTypeIns) {
            if (output.size() >= 2) {
              if (output.get(output.size() - 2) instanceof SetLocalTreeItem) {
                ret=new ArrayList<GraphTargetItem>();
                ret.addAll(output);
                ret.remove(ret.size() - 1);
                ret.add(new ReturnValueTreeItem(code.code.get(part.end),((SetLocalTreeItem)output.get(output.size() - 2)).value));
                return ret;
              }
            }
          }
        }
      }
    }
  }
  if (code.code.get(part.end).definition instanceof LookupSwitchIns) {
    ret=new ArrayList<GraphTargetItem>();
    ret.addAll(output);
    return ret;
  }
  if (((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictEqTreeItem)&& (part.nextParts.get(0).getHeight() >= 2)&& (code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(0).start)).definition instanceof PushIntegerTypeIns)&& (code.code.get(part.nextParts.get(0).nextParts.get(0).end).definition instanceof LookupSwitchIns)) || ((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictNeqTreeItem)&& (part.nextParts.get(1).getHeight() >= 2)&& (code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(1).start)).definition instanceof PushIntegerTypeIns)&& (code.code.get(part.nextParts.get(1).nextParts.get(0).end).definition instanceof LookupSwitchIns))) {
    ret=new ArrayList<GraphTargetItem>();
    ret.addAll(output);
    boolean reversed=false;
    if (stack.peek() instanceof StrictEqTreeItem) {
      reversed=true;
    }
    GraphTargetItem switchedObject=null;
    if (!output.isEmpty()) {
      if (output.get(output.size() - 1) instanceof SetLocalTreeItem) {
        switchedObject=((SetLocalTreeItem)output.get(output.size() - 1)).value;
      }
    }
    if (switchedObject == null) {
      switchedObject=new NullTreeItem(null);
    }
    HashMap<Integer,GraphTargetItem> caseValuesMap=new HashMap<Integer,GraphTargetItem>();
    GraphTargetItem tar=stack.pop();
    if (tar instanceof StrictEqTreeItem) {
      tar=((StrictEqTreeItem)tar).leftSide;
    }
    if (tar instanceof StrictNeqTreeItem) {
      tar=((StrictNeqTreeItem)tar).leftSide;
    }
    caseValuesMap.put(code.code.get(part.nextParts.get(reversed ? 0 : 1).start).operands[0],tar);
    GraphPart switchLoc=part.nextParts.get(reversed ? 0 : 1).nextParts.get(0);
    while ((code.code.get(part.nextParts.get(reversed ? 1 : 0).end).definition instanceof IfStrictNeIns) || (code.code.get(part.nextParts.get(reversed ? 1 : 0).end).definition instanceof IfStrictEqIns)) {
      part=part.nextParts.get(reversed ? 1 : 0);
      translatePart(localData,part,stack);
      tar=stack.pop();
      if (tar instanceof StrictEqTreeItem) {
        tar=((StrictEqTreeItem)tar).leftSide;
      }
      if (tar instanceof StrictNeqTreeItem) {
        tar=((StrictNeqTreeItem)tar).leftSide;
      }
      if (code.code.get(part.end).definition instanceof IfStrictNeIns) {
        reversed=false;
      }
 else {
        reversed=true;
      }
      caseValuesMap.put(code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(reversed ? 0 : 1).start)).operands[0],tar);
    }
    boolean hasDefault=false;
    GraphPart dp=part.nextParts.get(reversed ? 1 : 0);
    while (code.code.get(dp.start).definition instanceof JumpIns) {
      if (dp instanceof GraphPartMulti) {
        dp=((GraphPartMulti)dp).parts.get(0);
      }
      dp=dp.nextParts.get(0);
    }
    if (code.code.get(dp.start).definition instanceof PushIntegerTypeIns) {
      hasDefault=true;
    }
    List<GraphTargetItem> caseValues=new ArrayList<GraphTargetItem>();
    for (int i=0; i < switchLoc.nextParts.size() - 1; i++) {
      if (caseValuesMap.containsKey(i)) {
        caseValues.add(caseValuesMap.get(i));
      }
 else {
        continue;
      }
    }
    List<List<GraphTargetItem>> caseCommands=new ArrayList<List<GraphTargetItem>>();
    GraphPart next=null;
    List<GraphPart> loopContinues=getLoopsContinues(loops);
    next=switchLoc.getNextPartPath(loopContinues);
    if (next == null) {
      next=switchLoc.getNextSuperPartPath(loopContinues);
    }
    GraphTargetItem ti=checkLoop(next,stopPart,loops);
    Loop currentLoop=new Loop(loops.size(),null,next);
    loops.add(currentLoop);
    List<Integer> valuesMapping=new ArrayList<Integer>();
    List<GraphPart> caseBodies=new ArrayList<GraphPart>();
    for (int i=0; i < caseValues.size(); i++) {
      GraphPart cur=switchLoc.nextParts.get(1 + i);
      if (!caseBodies.contains(cur)) {
        caseBodies.add(cur);
      }
      valuesMapping.add(caseBodies.indexOf(cur));
    }
    List<GraphTargetItem> defaultCommands=new ArrayList<GraphTargetItem>();
    GraphPart defaultPart=null;
    if (hasDefault) {
      defaultPart=switchLoc.nextParts.get(switchLoc.nextParts.size() - 1);
      defaultCommands=printGraph(localData,stack,allParts,switchLoc,defaultPart,next,loops,forFinalCommands);
    }
    List<GraphPart> ignored=new ArrayList<GraphPart>();
    for (    Loop l : loops) {
      ignored.add(l.loopContinue);
    }
    for (int i=0; i < caseBodies.size(); i++) {
      List<GraphTargetItem> cc=new ArrayList<GraphTargetItem>();
      GraphPart nextCase=null;
      nextCase=next;
      if (next != null) {
        if (i < caseBodies.size() - 1) {
          if (!caseBodies.get(i).leadsTo(srcCode,caseBodies.get(i + 1),ignored)) {
            cc.add(new BreakItem(null,currentLoop.id));
          }
 else {
            nextCase=caseBodies.get(i + 1);
          }
        }
 else         if (hasDefault) {
          if (!caseBodies.get(i).leadsTo(srcCode,defaultPart,ignored)) {
            cc.add(new BreakItem(null,currentLoop.id));
          }
 else {
            nextCase=defaultPart;
          }
        }
      }
      cc.addAll(0,printGraph(localData,stack,allParts,switchLoc,caseBodies.get(i),nextCase,loops,forFinalCommands));
      caseCommands.add(cc);
    }
    SwitchItem sti=new SwitchItem(null,currentLoop,switchedObject,caseValues,caseCommands,defaultCommands,valuesMapping);
    ret.add(sti);
    loops.remove(currentLoop);
    if (next != null) {
      if (ti != null) {
        ret.add(ti);
      }
 else {
        ret.addAll(printGraph(localData,stack,allParts,null,next,stopPart,loops,forFinalCommands));
      }
    }
  }
  return ret;
}","@Override protected List<GraphTargetItem> check(GraphSource srcCode,List localData,List<GraphPart> allParts,Stack<GraphTargetItem> stack,GraphPart parent,GraphPart part,GraphPart stopPart,List<Loop> loops,List<GraphTargetItem> output,HashMap<Loop,List<GraphTargetItem>> forFinalCommands){
  List<GraphTargetItem> ret=null;
  List<ABCException> parsedExceptions=(List<ABCException>)localData.get(DATA_PARSEDEXCEPTIONS);
  List<Integer> finallyJumps=(List<Integer>)localData.get(DATA_FINALLYJUMPS);
  List<Integer> ignoredSwitches=(List<Integer>)localData.get(DATA_IGNOREDSWITCHES);
  int ip=part.start;
  int addr=code.fixAddrAfterDebugLine(code.pos2adr(part.start));
  int maxend=-1;
  List<ABCException> catchedExceptions=new ArrayList<ABCException>();
  for (int e=0; e < body.exceptions.length; e++) {
    if (addr == code.fixAddrAfterDebugLine(body.exceptions[e].start)) {
      if (!body.exceptions[e].isFinally()) {
        if (((body.exceptions[e].end) > maxend) && (!parsedExceptions.contains(body.exceptions[e]))) {
          catchedExceptions.clear();
          maxend=code.fixAddrAfterDebugLine(body.exceptions[e].end);
          catchedExceptions.add(body.exceptions[e]);
        }
 else         if (code.fixAddrAfterDebugLine(body.exceptions[e].end) == maxend) {
          catchedExceptions.add(body.exceptions[e]);
        }
      }
    }
  }
  if (catchedExceptions.size() > 0) {
    parsedExceptions.addAll(catchedExceptions);
    int endpos=code.adr2pos(code.fixAddrAfterDebugLine(catchedExceptions.get(0).end));
    int endposStartBlock=code.adr2pos(catchedExceptions.get(0).end);
    List<List<GraphTargetItem>> catchedCommands=new ArrayList<List<GraphTargetItem>>();
    if (code.code.get(endpos).definition instanceof JumpIns) {
      int afterCatchAddr=code.pos2adr(endpos + 1) + code.code.get(endpos).operands[0];
      int afterCatchPos=code.adr2pos(afterCatchAddr);
      Collections.sort(catchedExceptions,new Comparator<ABCException>(){
        @Override public int compare(        ABCException o1,        ABCException o2){
          return code.fixAddrAfterDebugLine(o1.target) - code.fixAddrAfterDebugLine(o2.target);
        }
      }
);
      List<GraphTargetItem> finallyCommands=new ArrayList<GraphTargetItem>();
      int returnPos=afterCatchPos;
      for (int e=0; e < body.exceptions.length; e++) {
        if (body.exceptions[e].isFinally()) {
          if (addr == code.fixAddrAfterDebugLine(body.exceptions[e].start)) {
            if (afterCatchPos + 1 == code.adr2pos(code.fixAddrAfterDebugLine(body.exceptions[e].end))) {
              AVM2Instruction jmpIns=code.code.get(code.adr2pos(code.fixAddrAfterDebugLine(body.exceptions[e].end)));
              if (jmpIns.definition instanceof JumpIns) {
                int finStart=code.adr2pos(code.fixAddrAfterDebugLine(body.exceptions[e].end) + jmpIns.getBytes().length + jmpIns.operands[0]);
                boolean switchFound=false;
                GraphPart fpart=null;
                for (                GraphPart p : allParts) {
                  if (p.start == finStart) {
                    fpart=p;
                    break;
                  }
                }
                for (int f=finStart; f < code.code.size(); f++) {
                  if (code.code.get(f).definition instanceof LookupSwitchIns) {
                    AVM2Instruction swins=code.code.get(f);
                    if (swins.operands.length >= 3) {
                      if (swins.operands[0] == swins.getBytes().length) {
                        if (code.adr2pos(code.pos2adr(f) + swins.operands[2]) < finStart) {
                          stack.push(new ExceptionTreeItem(body.exceptions[e]));
                          GraphPart fepart=null;
                          for (                          GraphPart p : allParts) {
                            if (p.start == f + 1) {
                              fepart=p;
                              break;
                            }
                          }
                          ignoredSwitches.add(f);
                          finallyCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,fpart,fepart,loops,forFinalCommands);
                          returnPos=f + 1;
                          break;
                        }
                      }
                    }
                  }
                }
                if (!switchFound) {
                  finallyCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,fpart,null,loops,forFinalCommands);
                }
                finallyJumps.add(finStart);
                break;
              }
            }
          }
        }
      }
      for (int e=0; e < catchedExceptions.size(); e++) {
        int eendpos;
        if (e < catchedExceptions.size() - 1) {
          eendpos=code.adr2pos(code.fixAddrAfterDebugLine(catchedExceptions.get(e + 1).target)) - 2;
        }
 else {
          eendpos=afterCatchPos - 1;
        }
        GraphPart npart=null;
        int findpos=code.adr2pos(catchedExceptions.get(e).target);
        for (        GraphPart p : allParts) {
          if (p.start == findpos) {
            npart=p;
            break;
          }
        }
        GraphPart nepart=null;
        for (        GraphPart p : allParts) {
          if (p.start == eendpos + 1) {
            nepart=p;
            break;
          }
        }
        stack.add(new ExceptionTreeItem(catchedExceptions.get(e)));
        List localData2=new ArrayList();
        localData2.addAll(localData);
        localData2.set(DATA_SCOPESTACK,new Stack<GraphTargetItem>());
        catchedCommands.add(printGraph(new ArrayList<GraphPart>(),localData2,stack,allParts,parent,npart,nepart,loops,forFinalCommands));
      }
      GraphPart nepart=null;
      for (      GraphPart p : allParts) {
        if (p.start == endposStartBlock) {
          nepart=p;
          break;
        }
      }
      List<GraphTargetItem> tryCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,parent,part,nepart,loops,forFinalCommands);
      output.clear();
      output.add(new TryTreeItem(tryCommands,catchedExceptions,catchedCommands,finallyCommands));
      ip=returnPos;
    }
  }
  if (ip != part.start) {
    part=null;
    for (    GraphPart p : allParts) {
      List<GraphPart> ps=p.getSubParts();
      for (      GraphPart p2 : ps) {
        if (p2.start == ip) {
          part=p2;
          break;
        }
      }
    }
    ret=new ArrayList<GraphTargetItem>();
    ret.addAll(output);
    GraphTargetItem lop=checkLoop(part,stopPart,loops);
    if (lop == null) {
      ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,part,stopPart,loops,forFinalCommands));
    }
 else {
      ret.add(lop);
    }
    return ret;
  }
  if (part.nextParts.isEmpty()) {
    if (code.code.get(part.end).definition instanceof ReturnValueIns) {
      if (part.getHeight() >= 3) {
        if (code.code.get(part.getPosAt(part.getHeight() - 2)).definition instanceof KillIns) {
          if (code.code.get(part.getPosAt(part.getHeight() - 3)).definition instanceof GetLocalTypeIns) {
            if (output.size() >= 2) {
              if (output.get(output.size() - 2) instanceof SetLocalTreeItem) {
                ret=new ArrayList<GraphTargetItem>();
                ret.addAll(output);
                ret.remove(ret.size() - 1);
                ret.add(new ReturnValueTreeItem(code.code.get(part.end),((SetLocalTreeItem)output.get(output.size() - 2)).value));
                return ret;
              }
            }
          }
        }
      }
    }
  }
  if (code.code.get(part.end).definition instanceof LookupSwitchIns) {
    ret=new ArrayList<GraphTargetItem>();
    ret.addAll(output);
    return ret;
  }
  if (((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictEqTreeItem)&& (part.nextParts.get(0).getHeight() >= 2)&& (code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(0).start)).definition instanceof PushIntegerTypeIns)&& (code.code.get(part.nextParts.get(0).nextParts.get(0).end).definition instanceof LookupSwitchIns)) || ((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictNeqTreeItem)&& (part.nextParts.get(1).getHeight() >= 2)&& (code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(1).start)).definition instanceof PushIntegerTypeIns)&& (code.code.get(part.nextParts.get(1).nextParts.get(0).end).definition instanceof LookupSwitchIns))) {
    ret=new ArrayList<GraphTargetItem>();
    ret.addAll(output);
    boolean reversed=false;
    if (stack.peek() instanceof StrictEqTreeItem) {
      reversed=true;
    }
    GraphTargetItem switchedObject=null;
    if (!output.isEmpty()) {
      if (output.get(output.size() - 1) instanceof SetLocalTreeItem) {
        switchedObject=((SetLocalTreeItem)output.get(output.size() - 1)).value;
      }
    }
    if (switchedObject == null) {
      switchedObject=new NullTreeItem(null);
    }
    HashMap<Integer,GraphTargetItem> caseValuesMap=new HashMap<Integer,GraphTargetItem>();
    GraphTargetItem tar=stack.pop();
    if (tar instanceof StrictEqTreeItem) {
      tar=((StrictEqTreeItem)tar).leftSide;
    }
    if (tar instanceof StrictNeqTreeItem) {
      tar=((StrictNeqTreeItem)tar).leftSide;
    }
    caseValuesMap.put(code.code.get(part.nextParts.get(reversed ? 0 : 1).start).operands[0],tar);
    GraphPart switchLoc=part.nextParts.get(reversed ? 0 : 1).nextParts.get(0);
    while ((code.code.get(part.nextParts.get(reversed ? 1 : 0).end).definition instanceof IfStrictNeIns) || (code.code.get(part.nextParts.get(reversed ? 1 : 0).end).definition instanceof IfStrictEqIns)) {
      part=part.nextParts.get(reversed ? 1 : 0);
      translatePart(localData,part,stack);
      tar=stack.pop();
      if (tar instanceof StrictEqTreeItem) {
        tar=((StrictEqTreeItem)tar).leftSide;
      }
      if (tar instanceof StrictNeqTreeItem) {
        tar=((StrictNeqTreeItem)tar).leftSide;
      }
      if (code.code.get(part.end).definition instanceof IfStrictNeIns) {
        reversed=false;
      }
 else {
        reversed=true;
      }
      caseValuesMap.put(code.code.get(code.fixIPAfterDebugLine(part.nextParts.get(reversed ? 0 : 1).start)).operands[0],tar);
    }
    boolean hasDefault=false;
    GraphPart dp=part.nextParts.get(reversed ? 1 : 0);
    while (code.code.get(dp.start).definition instanceof JumpIns) {
      if (dp instanceof GraphPartMulti) {
        dp=((GraphPartMulti)dp).parts.get(0);
      }
      dp=dp.nextParts.get(0);
    }
    if (code.code.get(dp.start).definition instanceof PushIntegerTypeIns) {
      hasDefault=true;
    }
    List<GraphTargetItem> caseValues=new ArrayList<GraphTargetItem>();
    for (int i=0; i < switchLoc.nextParts.size() - 1; i++) {
      if (caseValuesMap.containsKey(i)) {
        caseValues.add(caseValuesMap.get(i));
      }
 else {
        continue;
      }
    }
    List<List<GraphTargetItem>> caseCommands=new ArrayList<List<GraphTargetItem>>();
    GraphPart next=null;
    List<GraphPart> loopContinues=getLoopsContinues(loops);
    next=switchLoc.getNextPartPath(loopContinues);
    if (next == null) {
      next=switchLoc.getNextSuperPartPath(loopContinues);
    }
    GraphTargetItem ti=checkLoop(next,stopPart,loops);
    Loop currentLoop=new Loop(loops.size(),null,next);
    loops.add(currentLoop);
    List<Integer> valuesMapping=new ArrayList<Integer>();
    List<GraphPart> caseBodies=new ArrayList<GraphPart>();
    for (int i=0; i < caseValues.size(); i++) {
      GraphPart cur=switchLoc.nextParts.get(1 + i);
      if (!caseBodies.contains(cur)) {
        caseBodies.add(cur);
      }
      valuesMapping.add(caseBodies.indexOf(cur));
    }
    List<GraphTargetItem> defaultCommands=new ArrayList<GraphTargetItem>();
    GraphPart defaultPart=null;
    if (hasDefault) {
      defaultPart=switchLoc.nextParts.get(switchLoc.nextParts.size() - 1);
      defaultCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,switchLoc,defaultPart,next,loops,forFinalCommands);
    }
    List<GraphPart> ignored=new ArrayList<GraphPart>();
    for (    Loop l : loops) {
      ignored.add(l.loopContinue);
    }
    for (int i=0; i < caseBodies.size(); i++) {
      List<GraphTargetItem> cc=new ArrayList<GraphTargetItem>();
      GraphPart nextCase=null;
      nextCase=next;
      if (next != null) {
        if (i < caseBodies.size() - 1) {
          if (!caseBodies.get(i).leadsTo(srcCode,caseBodies.get(i + 1),ignored)) {
            cc.add(new BreakItem(null,currentLoop.id));
          }
 else {
            nextCase=caseBodies.get(i + 1);
          }
        }
 else         if (hasDefault) {
          if (!caseBodies.get(i).leadsTo(srcCode,defaultPart,ignored)) {
            cc.add(new BreakItem(null,currentLoop.id));
          }
 else {
            nextCase=defaultPart;
          }
        }
      }
      cc.addAll(0,printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,switchLoc,caseBodies.get(i),nextCase,loops,forFinalCommands));
      caseCommands.add(cc);
    }
    SwitchItem sti=new SwitchItem(null,currentLoop,switchedObject,caseValues,caseCommands,defaultCommands,valuesMapping);
    ret.add(sti);
    loops.remove(currentLoop);
    if (next != null) {
      if (ti != null) {
        ret.add(ti);
      }
 else {
        ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,next,stopPart,loops,forFinalCommands));
      }
    }
  }
  return ret;
}",0.9919583023082652
62197,"@Override protected List<GraphTargetItem> check(GraphSource code,List localData,List<GraphPart> allParts,Stack<GraphTargetItem> stack,GraphPart parent,GraphPart part,GraphPart stopPart,List<Loop> loops,List<GraphTargetItem> output,HashMap<Loop,List<GraphTargetItem>> forFinalCommands){
  if (!output.isEmpty()) {
    if (output.get(output.size() - 1) instanceof StoreRegisterTreeItem) {
      StoreRegisterTreeItem str=(StoreRegisterTreeItem)output.get(output.size() - 1);
      if (str.value instanceof EnumerateTreeItem) {
        output.remove(output.size() - 1);
      }
    }
  }
  List<GraphTargetItem> ret=null;
  if ((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictEqTreeItem)) {
    GraphTargetItem switchedObject=null;
    if (!output.isEmpty()) {
      if (output.get(output.size() - 1) instanceof StoreRegisterTreeItem) {
        switchedObject=((StoreRegisterTreeItem)output.get(output.size() - 1)).value;
      }
    }
    if (switchedObject == null) {
      switchedObject=new DirectValueTreeItem(null,-1,new Null(),null);
    }
    HashMap<Integer,GraphTargetItem> caseValuesMap=new HashMap<Integer,GraphTargetItem>();
    int pos=0;
    StrictEqTreeItem set=(StrictEqTreeItem)stack.pop();
    caseValuesMap.put(pos,set.rightSide);
    if (set.leftSide instanceof StoreRegisterTreeItem) {
      switchedObject=((StoreRegisterTreeItem)set.leftSide).value;
    }
    List<GraphPart> caseBodyParts=new ArrayList<GraphPart>();
    caseBodyParts.add(part.nextParts.get(0));
    GraphTargetItem top=null;
    int cnt=1;
    while (part.nextParts.size() > 1 && part.nextParts.get(1).getHeight() > 1 && code.get(part.nextParts.get(1).end) instanceof ActionIf && ((top=translatePartGetStack(localData,part.nextParts.get(1),stack)) instanceof StrictEqTreeItem)) {
      cnt++;
      part=part.nextParts.get(1);
      pos++;
      caseBodyParts.add(part.nextParts.get(0));
      set=(StrictEqTreeItem)top;
      caseValuesMap.put(pos,set.rightSide);
    }
    if (cnt == 1) {
      stack.push(set);
    }
 else {
      part=part.nextParts.get(1);
      GraphPart defaultPart=part;
      List<GraphPart> defaultAndLastPart=new ArrayList<GraphPart>();
      defaultAndLastPart.add(defaultPart);
      defaultAndLastPart.add(caseBodyParts.get(caseBodyParts.size() - 1));
      GraphPart defaultPart2=getCommonPart(defaultAndLastPart);
      List<GraphTargetItem> defaultCommands=new ArrayList<GraphTargetItem>();
      defaultCommands=printGraph(localData,stack,allParts,null,defaultPart,defaultPart2,loops,forFinalCommands);
      List<GraphPart> loopContinues=new ArrayList<GraphPart>();
      for (      Loop l : loops) {
        if (l.loopContinue != null) {
          loopContinues.add(l.loopContinue);
        }
      }
      List<GraphPart> breakParts=new ArrayList<GraphPart>();
      for (int g=0; g < caseBodyParts.size(); g++) {
        if (g < caseBodyParts.size() - 1) {
          if (caseBodyParts.get(g).leadsTo(code,caseBodyParts.get(g + 1),loopContinues)) {
            continue;
          }
        }
        GraphPart nsp=caseBodyParts.get(g).getNextSuperPartPath(loopContinues);
        if (nsp != null) {
          breakParts.add(nsp);
        }
      }
      Collections.sort(breakParts,new Comparator<GraphPart>(){
        @Override public int compare(        GraphPart o1,        GraphPart o2){
          return o2.path.length() - o1.path.length();
        }
      }
);
      GraphPart breakPart=breakParts.isEmpty() ? null : breakParts.get(0);
      if ((defaultPart2 != breakPart) && (defaultCommands.isEmpty())) {
        defaultPart=defaultPart2;
      }
      List<GraphTargetItem> caseValues=new ArrayList<GraphTargetItem>();
      for (int i=0; i < caseBodyParts.size(); i++) {
        if (caseValuesMap.containsKey(i)) {
          caseValues.add(caseValuesMap.get(i));
        }
 else {
          continue;
        }
      }
      List<List<GraphTargetItem>> caseCommands=new ArrayList<List<GraphTargetItem>>();
      GraphPart next=null;
      next=breakPart;
      GraphTargetItem ti=checkLoop(next,stopPart,loops);
      Loop currentLoop=new Loop(loops.size(),null,next);
      loops.add(currentLoop);
      List<Integer> valuesMapping=new ArrayList<Integer>();
      List<GraphPart> caseBodies=new ArrayList<GraphPart>();
      for (int i=0; i < caseValues.size(); i++) {
        GraphPart cur=caseBodyParts.get(i);
        if (!caseBodies.contains(cur)) {
          caseBodies.add(cur);
        }
        valuesMapping.add(caseBodies.indexOf(cur));
      }
      if (defaultPart == breakPart) {
        defaultPart=null;
      }
      if ((defaultPart != null) && (defaultCommands.isEmpty())) {
        defaultCommands=printGraph(localData,stack,allParts,null,defaultPart,next,loops,forFinalCommands);
      }
      List<GraphPart> ignored=new ArrayList<GraphPart>();
      for (      Loop l : loops) {
        ignored.add(l.loopContinue);
      }
      for (int i=0; i < caseBodies.size(); i++) {
        List<GraphTargetItem> cc=new ArrayList<GraphTargetItem>();
        GraphPart nextCase=null;
        nextCase=next;
        if (next != null) {
          if (i < caseBodies.size() - 1) {
            if (!caseBodies.get(i).leadsTo(code,caseBodies.get(i + 1),ignored)) {
              cc.add(new BreakItem(null,currentLoop.id));
            }
 else {
              nextCase=caseBodies.get(i + 1);
            }
          }
 else           if (!defaultCommands.isEmpty()) {
            if (!caseBodies.get(i).leadsTo(code,defaultPart,ignored)) {
              cc.add(new BreakItem(null,currentLoop.id));
            }
 else {
              nextCase=defaultPart;
            }
          }
        }
        cc.addAll(0,printGraph(localData,stack,allParts,null,caseBodies.get(i),nextCase,loops,forFinalCommands));
        if (cc.size() >= 2) {
          if (cc.get(cc.size() - 1) instanceof BreakItem) {
            if ((cc.get(cc.size() - 2) instanceof ContinueItem) || (cc.get(cc.size() - 2) instanceof BreakItem)) {
              cc.remove(cc.size() - 1);
            }
          }
        }
        caseCommands.add(cc);
      }
      ret=new ArrayList<GraphTargetItem>();
      if (!output.isEmpty()) {
        if (output.get(output.size() - 1) instanceof StoreRegisterTreeItem) {
          output.remove(output.size() - 1);
        }
      }
      ret.addAll(output);
      SwitchItem sti=new SwitchItem(null,currentLoop,switchedObject,caseValues,caseCommands,defaultCommands,valuesMapping);
      ret.add(sti);
      if (next != null) {
        if (ti != null) {
          ret.add(ti);
        }
 else {
          ret.addAll(printGraph(localData,stack,allParts,null,next,stopPart,loops,forFinalCommands));
        }
      }
    }
  }
  return ret;
}","@Override protected List<GraphTargetItem> check(GraphSource code,List localData,List<GraphPart> allParts,Stack<GraphTargetItem> stack,GraphPart parent,GraphPart part,GraphPart stopPart,List<Loop> loops,List<GraphTargetItem> output,HashMap<Loop,List<GraphTargetItem>> forFinalCommands){
  if (!output.isEmpty()) {
    if (output.get(output.size() - 1) instanceof StoreRegisterTreeItem) {
      StoreRegisterTreeItem str=(StoreRegisterTreeItem)output.get(output.size() - 1);
      if (str.value instanceof EnumerateTreeItem) {
        output.remove(output.size() - 1);
      }
    }
  }
  List<GraphTargetItem> ret=null;
  if ((part.nextParts.size() == 2) && (!stack.isEmpty()) && (stack.peek() instanceof StrictEqTreeItem)) {
    GraphTargetItem switchedObject=null;
    if (!output.isEmpty()) {
      if (output.get(output.size() - 1) instanceof StoreRegisterTreeItem) {
        switchedObject=((StoreRegisterTreeItem)output.get(output.size() - 1)).value;
      }
    }
    if (switchedObject == null) {
      switchedObject=new DirectValueTreeItem(null,-1,new Null(),null);
    }
    HashMap<Integer,GraphTargetItem> caseValuesMap=new HashMap<Integer,GraphTargetItem>();
    int pos=0;
    StrictEqTreeItem set=(StrictEqTreeItem)stack.pop();
    caseValuesMap.put(pos,set.rightSide);
    if (set.leftSide instanceof StoreRegisterTreeItem) {
      switchedObject=((StoreRegisterTreeItem)set.leftSide).value;
    }
    List<GraphPart> caseBodyParts=new ArrayList<GraphPart>();
    caseBodyParts.add(part.nextParts.get(0));
    GraphTargetItem top=null;
    int cnt=1;
    while (part.nextParts.size() > 1 && part.nextParts.get(1).getHeight() > 1 && code.get(part.nextParts.get(1).end) instanceof ActionIf && ((top=translatePartGetStack(localData,part.nextParts.get(1),stack)) instanceof StrictEqTreeItem)) {
      cnt++;
      part=part.nextParts.get(1);
      pos++;
      caseBodyParts.add(part.nextParts.get(0));
      set=(StrictEqTreeItem)top;
      caseValuesMap.put(pos,set.rightSide);
    }
    if (cnt == 1) {
      stack.push(set);
    }
 else {
      part=part.nextParts.get(1);
      GraphPart defaultPart=part;
      List<GraphPart> defaultAndLastPart=new ArrayList<GraphPart>();
      defaultAndLastPart.add(defaultPart);
      defaultAndLastPart.add(caseBodyParts.get(caseBodyParts.size() - 1));
      GraphPart defaultPart2=getCommonPart(defaultAndLastPart);
      List<GraphTargetItem> defaultCommands=new ArrayList<GraphTargetItem>();
      defaultCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,defaultPart,defaultPart2,loops,forFinalCommands);
      List<GraphPart> loopContinues=new ArrayList<GraphPart>();
      for (      Loop l : loops) {
        if (l.loopContinue != null) {
          loopContinues.add(l.loopContinue);
        }
      }
      List<GraphPart> breakParts=new ArrayList<GraphPart>();
      for (int g=0; g < caseBodyParts.size(); g++) {
        if (g < caseBodyParts.size() - 1) {
          if (caseBodyParts.get(g).leadsTo(code,caseBodyParts.get(g + 1),loopContinues)) {
            continue;
          }
        }
        GraphPart nsp=caseBodyParts.get(g).getNextSuperPartPath(loopContinues);
        if (nsp != null) {
          breakParts.add(nsp);
        }
      }
      Collections.sort(breakParts,new Comparator<GraphPart>(){
        @Override public int compare(        GraphPart o1,        GraphPart o2){
          return o2.path.length() - o1.path.length();
        }
      }
);
      GraphPart breakPart=breakParts.isEmpty() ? null : breakParts.get(0);
      if ((defaultPart2 != breakPart) && (defaultCommands.isEmpty())) {
        defaultPart=defaultPart2;
      }
      List<GraphTargetItem> caseValues=new ArrayList<GraphTargetItem>();
      for (int i=0; i < caseBodyParts.size(); i++) {
        if (caseValuesMap.containsKey(i)) {
          caseValues.add(caseValuesMap.get(i));
        }
 else {
          continue;
        }
      }
      List<List<GraphTargetItem>> caseCommands=new ArrayList<List<GraphTargetItem>>();
      GraphPart next=null;
      next=breakPart;
      GraphTargetItem ti=checkLoop(next,stopPart,loops);
      Loop currentLoop=new Loop(loops.size(),null,next);
      loops.add(currentLoop);
      List<Integer> valuesMapping=new ArrayList<Integer>();
      List<GraphPart> caseBodies=new ArrayList<GraphPart>();
      for (int i=0; i < caseValues.size(); i++) {
        GraphPart cur=caseBodyParts.get(i);
        if (!caseBodies.contains(cur)) {
          caseBodies.add(cur);
        }
        valuesMapping.add(caseBodies.indexOf(cur));
      }
      if (defaultPart == breakPart) {
        defaultPart=null;
      }
      if ((defaultPart != null) && (defaultCommands.isEmpty())) {
        defaultCommands=printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,defaultPart,next,loops,forFinalCommands);
      }
      List<GraphPart> ignored=new ArrayList<GraphPart>();
      for (      Loop l : loops) {
        ignored.add(l.loopContinue);
      }
      for (int i=0; i < caseBodies.size(); i++) {
        List<GraphTargetItem> cc=new ArrayList<GraphTargetItem>();
        GraphPart nextCase=null;
        nextCase=next;
        if (next != null) {
          if (i < caseBodies.size() - 1) {
            if (!caseBodies.get(i).leadsTo(code,caseBodies.get(i + 1),ignored)) {
              cc.add(new BreakItem(null,currentLoop.id));
            }
 else {
              nextCase=caseBodies.get(i + 1);
            }
          }
 else           if (!defaultCommands.isEmpty()) {
            if (!caseBodies.get(i).leadsTo(code,defaultPart,ignored)) {
              cc.add(new BreakItem(null,currentLoop.id));
            }
 else {
              nextCase=defaultPart;
            }
          }
        }
        cc.addAll(0,printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,caseBodies.get(i),nextCase,loops,forFinalCommands));
        if (cc.size() >= 2) {
          if (cc.get(cc.size() - 1) instanceof BreakItem) {
            if ((cc.get(cc.size() - 2) instanceof ContinueItem) || (cc.get(cc.size() - 2) instanceof BreakItem)) {
              cc.remove(cc.size() - 1);
            }
          }
        }
        caseCommands.add(cc);
      }
      ret=new ArrayList<GraphTargetItem>();
      if (!output.isEmpty()) {
        if (output.get(output.size() - 1) instanceof StoreRegisterTreeItem) {
          output.remove(output.size() - 1);
        }
      }
      ret.addAll(output);
      SwitchItem sti=new SwitchItem(null,currentLoop,switchedObject,caseValues,caseCommands,defaultCommands,valuesMapping);
      ret.add(sti);
      if (next != null) {
        if (ti != null) {
          ret.add(ti);
        }
 else {
          ret.addAll(printGraph(new ArrayList<GraphPart>(),localData,stack,allParts,null,next,stopPart,loops,forFinalCommands));
        }
      }
    }
  }
  return ret;
}",0.9793692897141172
62198,"public static List<GraphTargetItem> checkClass(List<GraphTargetItem> output){
  if (true) {
  }
  List<GraphTargetItem> ret=new ArrayList<GraphTargetItem>();
  List<GraphTargetItem> functions=new ArrayList<GraphTargetItem>();
  List<GraphTargetItem> staticFunctions=new ArrayList<GraphTargetItem>();
  HashMap<GraphTargetItem,GraphTargetItem> vars=new HashMap<GraphTargetItem,GraphTargetItem>();
  HashMap<GraphTargetItem,GraphTargetItem> staticVars=new HashMap<GraphTargetItem,GraphTargetItem>();
  GraphTargetItem className;
  GraphTargetItem extendsOp=null;
  List<GraphTargetItem> implementsOp=new ArrayList<GraphTargetItem>();
  boolean ok=true;
  int prevCount=0;
  for (  GraphTargetItem t : output) {
    if (t instanceof IfItem) {
      IfItem it=(IfItem)t;
      if (it.expression instanceof NotItem) {
        NotItem nti=(NotItem)it.expression;
        if (nti.value instanceof GetMemberTreeItem) {
          if (true) {
            if ((it.onTrue.size() == 1) && (it.onTrue.get(0) instanceof SetMemberTreeItem) && (((SetMemberTreeItem)it.onTrue.get(0)).value instanceof NewObjectTreeItem)) {
            }
 else {
              List<GraphTargetItem> parts=it.onTrue;
              className=getWithoutGlobal((GetMemberTreeItem)nti.value);
              if (parts.size() >= 1) {
                if (parts.get(0) instanceof SetMemberTreeItem) {
                  SetMemberTreeItem smt=(SetMemberTreeItem)parts.get(0);
                  if (smt.value instanceof StoreRegisterTreeItem) {
                    parts.add(0,smt.value);
                    smt.value=((StoreRegisterTreeItem)smt.value).value;
                  }
                }
                if (parts.get(0) instanceof StoreRegisterTreeItem) {
                  StoreRegisterTreeItem str1=(StoreRegisterTreeItem)parts.get(0);
                  int classReg=str1.register.number;
                  int instanceReg=-1;
                  if ((parts.size() >= 2) && (parts.get(1) instanceof SetMemberTreeItem)) {
                    GraphTargetItem ti1=((SetMemberTreeItem)parts.get(1)).value;
                    GraphTargetItem ti2=((StoreRegisterTreeItem)parts.get(0)).value;
                    if (ti1 == ti2) {
                      if (((SetMemberTreeItem)parts.get(1)).value instanceof FunctionTreeItem) {
                        ((FunctionTreeItem)((SetMemberTreeItem)parts.get(1)).value).calculatedFunctionName=(className instanceof GetMemberTreeItem) ? ((GetMemberTreeItem)className).memberName : className;
                        functions.add((FunctionTreeItem)((SetMemberTreeItem)parts.get(1)).value);
                        int pos=2;
                        if (parts.size() <= pos) {
                          ok=false;
                          break;
                        }
                        if (parts.get(pos) instanceof ExtendsTreeItem) {
                          ExtendsTreeItem et=(ExtendsTreeItem)parts.get(pos);
                          extendsOp=getWithoutGlobal(et.superclass);
                          pos++;
                        }
                        if (parts.size() <= pos) {
                          List<GraphTargetItem> output2=new ArrayList<GraphTargetItem>();
                          for (int i=0; i < prevCount; i++) {
                            output2.add(output.get(i));
                          }
                          output2.add(new ClassTreeItem(className,extendsOp,implementsOp,functions,vars,staticFunctions,staticVars));
                          return output2;
                        }
                        if (parts.get(pos) instanceof SetMemberTreeItem) {
                          SetMemberTreeItem smt=(SetMemberTreeItem)parts.get(pos);
                          if (smt.value instanceof StoreRegisterTreeItem) {
                            parts.add(pos,smt.value);
                            smt.value=((StoreRegisterTreeItem)smt.value).value;
                          }
                        }
                        if (parts.get(pos) instanceof StoreRegisterTreeItem) {
                          if (((StoreRegisterTreeItem)parts.get(pos)).value instanceof GetMemberTreeItem) {
                            GraphTargetItem obj=((GetMemberTreeItem)((StoreRegisterTreeItem)parts.get(pos)).value).object;
                            if (obj instanceof DirectValueTreeItem) {
                              if (((DirectValueTreeItem)obj).value instanceof RegisterNumber) {
                                if (((RegisterNumber)((DirectValueTreeItem)obj).value).number == classReg) {
                                  instanceReg=((StoreRegisterTreeItem)parts.get(pos)).register.number;
                                }
                              }
                            }
                          }
 else                           if (((StoreRegisterTreeItem)parts.get(pos)).value instanceof NewMethodTreeItem) {
                            if (parts.get(pos + 1) instanceof SetMemberTreeItem) {
                              if (((SetMemberTreeItem)parts.get(pos + 1)).value == ((StoreRegisterTreeItem)parts.get(pos)).value) {
                                instanceReg=((StoreRegisterTreeItem)parts.get(pos)).register.number;
                                NewMethodTreeItem nm=(NewMethodTreeItem)((StoreRegisterTreeItem)parts.get(pos)).value;
                                GetMemberTreeItem gm=new GetMemberTreeItem(null,nm.scriptObject,nm.methodName);
                                extendsOp=gm;
                              }
 else {
                                ok=false;
                                break;
                              }
                            }
 else {
                              ok=false;
                              break;
                            }
                            pos++;
                          }
 else                           if (((StoreRegisterTreeItem)parts.get(pos)).value instanceof NewObjectTreeItem) {
                            if (parts.get(pos + 1) instanceof SetMemberTreeItem) {
                              if (((SetMemberTreeItem)parts.get(pos + 1)).value == ((StoreRegisterTreeItem)parts.get(pos)).value) {
                                instanceReg=((StoreRegisterTreeItem)parts.get(pos)).register.number;
                                NewObjectTreeItem nm=(NewObjectTreeItem)((StoreRegisterTreeItem)parts.get(pos)).value;
                                extendsOp=new GetVariableTreeItem(null,nm.objectName);
                              }
 else {
                                ok=false;
                                break;
                              }
                            }
 else {
                              ok=false;
                              break;
                            }
                            pos++;
                          }
 else {
                            ok=false;
                            break;
                          }
                          if (instanceReg == -1) {
                            ok=false;
                            break;
                          }
                          pos++;
                          if (parts.size() <= pos) {
                            ok=false;
                            break;
                          }
                          if (parts.get(pos) instanceof PopTreeItem) {
                            pos++;
                          }
                          if (parts.size() <= pos) {
                            ok=false;
                            break;
                          }
                          if (parts.get(pos) instanceof ImplementsOpTreeItem) {
                            ImplementsOpTreeItem io=(ImplementsOpTreeItem)parts.get(pos);
                            implementsOp=io.superclasses;
                            pos++;
                          }
                          while ((parts.size() > pos) && ok) {
                            if (parts.get(pos) instanceof SetMemberTreeItem) {
                              SetMemberTreeItem smt=(SetMemberTreeItem)parts.get(pos);
                              if (smt.object instanceof DirectValueTreeItem) {
                                if (((DirectValueTreeItem)smt.object).value instanceof RegisterNumber) {
                                  if (((RegisterNumber)((DirectValueTreeItem)smt.object).value).number == instanceReg) {
                                    if (smt.value instanceof FunctionTreeItem) {
                                      ((FunctionTreeItem)smt.value).calculatedFunctionName=smt.objectName;
                                      functions.add((FunctionTreeItem)smt.value);
                                    }
 else {
                                      vars.put(smt.objectName,smt.value);
                                    }
                                  }
 else                                   if (((RegisterNumber)((DirectValueTreeItem)smt.object).value).number == classReg) {
                                    if (smt.value instanceof FunctionTreeItem) {
                                      ((FunctionTreeItem)smt.value).calculatedFunctionName=smt.objectName;
                                      staticFunctions.add((FunctionTreeItem)smt.value);
                                    }
 else {
                                      staticVars.put(smt.objectName,smt.value);
                                    }
                                  }
 else {
                                    ok=false;
                                  }
                                }
                              }
 else {
                                ok=false;
                              }
                            }
 else                             if (parts.get(pos) instanceof CallFunctionTreeItem) {
                              if (((CallFunctionTreeItem)parts.get(pos)).functionName instanceof DirectValueTreeItem) {
                                if (((DirectValueTreeItem)((CallFunctionTreeItem)parts.get(pos)).functionName).value.equals(""String_Node_Str"")) {
                                }
 else {
                                  ok=false;
                                }
                              }
 else {
                                ok=false;
                              }
                            }
 else {
                              ok=false;
                              break;
                            }
                            pos++;
                          }
                          if (ok) {
                            List<GraphTargetItem> output2=new ArrayList<GraphTargetItem>();
                            for (int i=0; i < prevCount; i++) {
                              output2.add(output.get(i));
                            }
                            output2.add(new ClassTreeItem(className,extendsOp,implementsOp,functions,vars,staticFunctions,staticVars));
                            return output2;
                          }
                        }
 else {
                          ok=false;
                        }
                      }
 else {
                        ok=false;
                      }
                    }
 else {
                      ok=false;
                    }
                  }
 else {
                    ok=false;
                  }
                }
 else                 if (parts.get(0) instanceof SetMemberTreeItem) {
                  SetMemberTreeItem sm=(SetMemberTreeItem)parts.get(0);
                  if (sm.value instanceof FunctionTreeItem) {
                    FunctionTreeItem f=(FunctionTreeItem)sm.value;
                    if (f.actions.isEmpty()) {
                      if (parts.size() == 2) {
                        if (parts.get(1) instanceof ImplementsOpTreeItem) {
                          ImplementsOpTreeItem iot=(ImplementsOpTreeItem)parts.get(1);
                          implementsOp=iot.superclasses;
                        }
 else {
                          ok=false;
                          break;
                        }
                      }
                      List<GraphTargetItem> output2=new ArrayList<GraphTargetItem>();
                      for (int i=0; i < prevCount; i++) {
                        output2.add(output.get(i));
                      }
                      output2.add(new InterfaceTreeItem(sm.objectName,implementsOp));
                      return output2;
                    }
 else {
                      ok=false;
                    }
                  }
 else {
                    ok=false;
                  }
                }
 else {
                  ok=false;
                }
              }
 else {
                ok=false;
              }
            }
          }
 else {
            ok=false;
          }
        }
 else {
          ok=false;
        }
      }
 else {
        ok=false;
      }
    }
 else {
      prevCount++;
    }
    if (!ok) {
      break;
    }
  }
  return output;
}","public static List<GraphTargetItem> checkClass(List<GraphTargetItem> output){
  if (true) {
  }
  List<GraphTargetItem> ret=new ArrayList<GraphTargetItem>();
  List<GraphTargetItem> functions=new ArrayList<GraphTargetItem>();
  List<GraphTargetItem> staticFunctions=new ArrayList<GraphTargetItem>();
  HashMap<GraphTargetItem,GraphTargetItem> vars=new HashMap<GraphTargetItem,GraphTargetItem>();
  HashMap<GraphTargetItem,GraphTargetItem> staticVars=new HashMap<GraphTargetItem,GraphTargetItem>();
  GraphTargetItem className;
  GraphTargetItem extendsOp=null;
  List<GraphTargetItem> implementsOp=new ArrayList<GraphTargetItem>();
  boolean ok=true;
  int prevCount=0;
  for (  GraphTargetItem t : output) {
    if (t instanceof IfItem) {
      IfItem it=(IfItem)t;
      if (it.expression instanceof NotItem) {
        NotItem nti=(NotItem)it.expression;
        if (nti.value instanceof GetMemberTreeItem) {
          if (true) {
            if ((it.onTrue.size() == 1) && (it.onTrue.get(0) instanceof SetMemberTreeItem) && (((SetMemberTreeItem)it.onTrue.get(0)).value instanceof NewObjectTreeItem)) {
            }
 else {
              List<GraphTargetItem> parts=it.onTrue;
              className=getWithoutGlobal((GetMemberTreeItem)nti.value);
              if (parts.size() >= 1) {
                if (parts.get(0) instanceof SetMemberTreeItem) {
                  SetMemberTreeItem smt=(SetMemberTreeItem)parts.get(0);
                  if (smt.value instanceof StoreRegisterTreeItem) {
                    parts.add(0,smt.value);
                    smt.value=((StoreRegisterTreeItem)smt.value).value;
                  }
                }
                if (parts.get(0) instanceof StoreRegisterTreeItem) {
                  StoreRegisterTreeItem str1=(StoreRegisterTreeItem)parts.get(0);
                  int classReg=str1.register.number;
                  int instanceReg=-1;
                  if ((parts.size() >= 2) && (parts.get(1) instanceof SetMemberTreeItem)) {
                    GraphTargetItem ti1=((SetMemberTreeItem)parts.get(1)).value;
                    GraphTargetItem ti2=((StoreRegisterTreeItem)parts.get(0)).value;
                    if (ti1 == ti2) {
                      if (((SetMemberTreeItem)parts.get(1)).value instanceof FunctionTreeItem) {
                        ((FunctionTreeItem)((SetMemberTreeItem)parts.get(1)).value).calculatedFunctionName=(className instanceof GetMemberTreeItem) ? ((GetMemberTreeItem)className).memberName : className;
                        functions.add((FunctionTreeItem)((SetMemberTreeItem)parts.get(1)).value);
                        int pos=2;
                        if (parts.size() <= pos) {
                          ok=false;
                          break;
                        }
                        if (parts.get(pos) instanceof ExtendsTreeItem) {
                          ExtendsTreeItem et=(ExtendsTreeItem)parts.get(pos);
                          extendsOp=getWithoutGlobal(et.superclass);
                          pos++;
                        }
                        if (parts.size() <= pos) {
                          List<GraphTargetItem> output2=new ArrayList<GraphTargetItem>();
                          for (int i=0; i < prevCount; i++) {
                            output2.add(output.get(i));
                          }
                          output2.add(new ClassTreeItem(className,extendsOp,implementsOp,functions,vars,staticFunctions,staticVars));
                          return output2;
                        }
                        if (parts.get(pos) instanceof SetMemberTreeItem) {
                          SetMemberTreeItem smt=(SetMemberTreeItem)parts.get(pos);
                          if (smt.value instanceof StoreRegisterTreeItem) {
                            parts.add(pos,smt.value);
                            smt.value=((StoreRegisterTreeItem)smt.value).value;
                          }
                        }
                        if (parts.get(pos) instanceof StoreRegisterTreeItem) {
                          if (((StoreRegisterTreeItem)parts.get(pos)).value instanceof GetMemberTreeItem) {
                            GraphTargetItem obj=((GetMemberTreeItem)((StoreRegisterTreeItem)parts.get(pos)).value).object;
                            if (obj instanceof DirectValueTreeItem) {
                              if (((DirectValueTreeItem)obj).value instanceof RegisterNumber) {
                                if (((RegisterNumber)((DirectValueTreeItem)obj).value).number == classReg) {
                                  instanceReg=((StoreRegisterTreeItem)parts.get(pos)).register.number;
                                }
                              }
                            }
                          }
 else                           if (((StoreRegisterTreeItem)parts.get(pos)).value instanceof NewMethodTreeItem) {
                            if (parts.get(pos + 1) instanceof SetMemberTreeItem) {
                              if (((SetMemberTreeItem)parts.get(pos + 1)).value == ((StoreRegisterTreeItem)parts.get(pos)).value) {
                                instanceReg=((StoreRegisterTreeItem)parts.get(pos)).register.number;
                                NewMethodTreeItem nm=(NewMethodTreeItem)((StoreRegisterTreeItem)parts.get(pos)).value;
                                GetMemberTreeItem gm=new GetMemberTreeItem(null,nm.scriptObject,nm.methodName);
                                extendsOp=gm;
                              }
 else {
                                ok=false;
                                break;
                              }
                            }
 else {
                              ok=false;
                              break;
                            }
                            pos++;
                          }
 else                           if (((StoreRegisterTreeItem)parts.get(pos)).value instanceof NewObjectTreeItem) {
                            if (parts.get(pos + 1) instanceof SetMemberTreeItem) {
                              if (((SetMemberTreeItem)parts.get(pos + 1)).value == ((StoreRegisterTreeItem)parts.get(pos)).value) {
                                instanceReg=((StoreRegisterTreeItem)parts.get(pos)).register.number;
                                NewObjectTreeItem nm=(NewObjectTreeItem)((StoreRegisterTreeItem)parts.get(pos)).value;
                                extendsOp=new GetVariableTreeItem(null,nm.objectName);
                              }
 else {
                                ok=false;
                                break;
                              }
                            }
 else {
                              ok=false;
                              break;
                            }
                            pos++;
                          }
 else {
                            ok=false;
                            break;
                          }
                          if (instanceReg == -1) {
                            ok=false;
                            break;
                          }
                          pos++;
                          if (parts.size() <= pos) {
                            List<GraphTargetItem> output2=new ArrayList<GraphTargetItem>();
                            for (int i=0; i < prevCount; i++) {
                              output2.add(output.get(i));
                            }
                            output2.add(new ClassTreeItem(className,extendsOp,implementsOp,functions,vars,staticFunctions,staticVars));
                            return output2;
                          }
                          if (parts.get(pos) instanceof PopTreeItem) {
                            pos++;
                          }
                          if (parts.size() <= pos) {
                            ok=false;
                            break;
                          }
                          if (parts.get(pos) instanceof ImplementsOpTreeItem) {
                            ImplementsOpTreeItem io=(ImplementsOpTreeItem)parts.get(pos);
                            implementsOp=io.superclasses;
                            pos++;
                          }
                          while ((parts.size() > pos) && ok) {
                            if (parts.get(pos) instanceof SetMemberTreeItem) {
                              SetMemberTreeItem smt=(SetMemberTreeItem)parts.get(pos);
                              if (smt.object instanceof DirectValueTreeItem) {
                                if (((DirectValueTreeItem)smt.object).value instanceof RegisterNumber) {
                                  if (((RegisterNumber)((DirectValueTreeItem)smt.object).value).number == instanceReg) {
                                    if (smt.value instanceof FunctionTreeItem) {
                                      ((FunctionTreeItem)smt.value).calculatedFunctionName=smt.objectName;
                                      functions.add((FunctionTreeItem)smt.value);
                                    }
 else {
                                      vars.put(smt.objectName,smt.value);
                                    }
                                  }
 else                                   if (((RegisterNumber)((DirectValueTreeItem)smt.object).value).number == classReg) {
                                    if (smt.value instanceof FunctionTreeItem) {
                                      ((FunctionTreeItem)smt.value).calculatedFunctionName=smt.objectName;
                                      staticFunctions.add((FunctionTreeItem)smt.value);
                                    }
 else {
                                      staticVars.put(smt.objectName,smt.value);
                                    }
                                  }
 else {
                                    ok=false;
                                  }
                                }
                              }
 else {
                                ok=false;
                              }
                            }
 else                             if (parts.get(pos) instanceof CallFunctionTreeItem) {
                              if (((CallFunctionTreeItem)parts.get(pos)).functionName instanceof DirectValueTreeItem) {
                                if (((DirectValueTreeItem)((CallFunctionTreeItem)parts.get(pos)).functionName).value.equals(""String_Node_Str"")) {
                                }
 else {
                                  ok=false;
                                }
                              }
 else {
                                ok=false;
                              }
                            }
 else {
                              ok=false;
                              break;
                            }
                            pos++;
                          }
                          if (ok) {
                            List<GraphTargetItem> output2=new ArrayList<GraphTargetItem>();
                            for (int i=0; i < prevCount; i++) {
                              output2.add(output.get(i));
                            }
                            output2.add(new ClassTreeItem(className,extendsOp,implementsOp,functions,vars,staticFunctions,staticVars));
                            return output2;
                          }
                        }
 else {
                          ok=false;
                        }
                      }
 else {
                        ok=false;
                      }
                    }
 else {
                      ok=false;
                    }
                  }
 else {
                    ok=false;
                  }
                }
 else                 if (parts.get(0) instanceof SetMemberTreeItem) {
                  SetMemberTreeItem sm=(SetMemberTreeItem)parts.get(0);
                  if (sm.value instanceof FunctionTreeItem) {
                    FunctionTreeItem f=(FunctionTreeItem)sm.value;
                    if (f.actions.isEmpty()) {
                      if (parts.size() == 2) {
                        if (parts.get(1) instanceof ImplementsOpTreeItem) {
                          ImplementsOpTreeItem iot=(ImplementsOpTreeItem)parts.get(1);
                          implementsOp=iot.superclasses;
                        }
 else {
                          ok=false;
                          break;
                        }
                      }
                      List<GraphTargetItem> output2=new ArrayList<GraphTargetItem>();
                      for (int i=0; i < prevCount; i++) {
                        output2.add(output.get(i));
                      }
                      output2.add(new InterfaceTreeItem(sm.objectName,implementsOp));
                      return output2;
                    }
 else {
                      ok=false;
                    }
                  }
 else {
                    ok=false;
                  }
                }
 else {
                  ok=false;
                }
              }
 else {
                ok=false;
              }
            }
          }
 else {
            ok=false;
          }
        }
 else {
          ok=false;
        }
      }
 else {
        ok=false;
      }
    }
 else {
      prevCount++;
    }
    if (!ok) {
      break;
    }
  }
  return output;
}",0.6295720729257477
62199,"public int removeTraps(){
  int rem=0;
  for (  MethodBody body : bodies) {
    rem+=body.removeTraps(constants,this);
  }
  return rem;
}","public int removeTraps(){
  int rem=0;
  for (int s=0; s < script_info.length; s++) {
    rem+=script_info[s].removeTraps(s,this);
  }
  return rem;
}",0.75
62200,"public static int removeTraps(List localData,AVM2GraphSource code,int addr){
  HashMap<GraphSourceItem,AVM2Code.Decision> decisions=new HashMap<GraphSourceItem,AVM2Code.Decision>();
  removeTraps(false,false,localData,new Stack<GraphTargetItem>(),new ArrayList<GraphTargetItem>(),code,code.adr2pos(addr),0,new HashMap<Integer,Integer>(),new HashMap<Integer,HashMap<Integer,GraphTargetItem>>(),decisions);
  localData.set(2,new HashMap<Integer,GraphTargetItem>());
  return removeTraps(true,true,localData,new Stack<GraphTargetItem>(),new ArrayList<GraphTargetItem>(),code,code.adr2pos(addr),0,new HashMap<Integer,Integer>(),new HashMap<Integer,HashMap<Integer,GraphTargetItem>>(),decisions);
}","public static int removeTraps(List localData,AVM2GraphSource code,int addr){
  HashMap<GraphSourceItem,AVM2Code.Decision> decisions=new HashMap<GraphSourceItem,AVM2Code.Decision>();
  removeTraps(false,false,localData,new Stack<GraphTargetItem>(),new ArrayList<GraphTargetItem>(),code,code.adr2pos(addr),0,new HashMap<Integer,Integer>(),new HashMap<Integer,HashMap<Integer,GraphTargetItem>>(),decisions);
  localData.set(2,new HashMap<Integer,GraphTargetItem>());
  return removeTraps(true,false,localData,new Stack<GraphTargetItem>(),new ArrayList<GraphTargetItem>(),code,code.adr2pos(addr),0,new HashMap<Integer,Integer>(),new HashMap<Integer,HashMap<Integer,GraphTargetItem>>(),decisions);
}",0.9949531362653208
62201,"@Override public void caretUpdate(CaretEvent e){
  if (abc == null) {
    return;
  }
  if (ignoreCarret) {
    return;
  }
  getCaret().setVisible(true);
  int pos=getCaretPosition();
  abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setIgnoreCarret(true);
  try {
    classIndex=-1;
    for (    Highlighting cm : classHighlights) {
      if ((pos >= cm.startPos) && (pos < cm.startPos + cm.len)) {
        classIndex=(int)cm.offset;
        displayClass(classIndex,scriptIndex);
        break;
      }
    }
    for (    Highlighting tm : methodHighlights) {
      if ((pos >= tm.startPos) && (pos < tm.startPos + tm.len)) {
        String name=""String_Node_Str"";
        if (abc != null) {
          if (classIndex > -1) {
            name=abc.instance_info[classIndex].getName(abc.constants).getNameWithNamespace(abc.constants);
          }
        }
        Trait t=null;
        for (        Highlighting th : traitHighlights) {
          if ((pos >= th.startPos) && (pos < th.startPos + th.len)) {
            lastTraitIndex=(int)th.offset;
            if (abc != null) {
              t=abc.findTraitByTraitId(classIndex,lastTraitIndex);
              if (t != null) {
                name+=""String_Node_Str"" + t.getName(abc).getName(abc.constants,new ArrayList<String>());
              }
            }
          }
        }
        displayMethod(pos,(int)tm.offset,name,t);
        currentMethodHighlight=tm;
        return;
      }
    }
    if (classIndex == -1) {
      setNoTrait();
      return;
    }
    for (    Highlighting th : traitHighlights) {
      if ((pos >= th.startPos) && (pos < th.startPos + th.len)) {
        lastTraitIndex=(int)th.offset;
        Trait tr=abc.findTraitByTraitId(classIndex,(int)th.offset);
        if (tr != null) {
          if (tr instanceof TraitSlotConst) {
            abcPanel.detailPanel.slotConstTraitPanel.load((TraitSlotConst)tr,abc);
            abcPanel.detailPanel.showCard(DetailPanel.SLOT_CONST_TRAIT_CARD,tr);
            abcPanel.detailPanel.setEditMode(false);
            return;
          }
        }
        currentMethodHighlight=th;
        String name=""String_Node_Str"";
        Trait t=null;
        if (abc != null) {
          name=abc.instance_info[classIndex].getName(abc.constants).getNameWithNamespace(abc.constants);
          t=abc.findTraitByTraitId(classIndex,lastTraitIndex);
          if (t != null) {
            name+=""String_Node_Str"" + t.getName(abc).getName(abc.constants,new ArrayList<String>());
          }
        }
        displayMethod(pos,abc.findMethodIdByTraitId(classIndex,(int)th.offset),name,t);
        return;
      }
    }
    setNoTrait();
  }
  finally {
    abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setIgnoreCarret(false);
  }
}","@Override public void caretUpdate(CaretEvent e){
  if (abc == null) {
    return;
  }
  if (ignoreCarret) {
    return;
  }
  getCaret().setVisible(true);
  int pos=getCaretPosition();
  abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setIgnoreCarret(true);
  try {
    classIndex=-1;
    for (    Highlighting cm : classHighlights) {
      if ((pos >= cm.startPos) && (pos < cm.startPos + cm.len)) {
        classIndex=(int)cm.offset;
        displayClass(classIndex,scriptIndex);
        break;
      }
    }
    for (    Highlighting tm : methodHighlights) {
      if ((pos >= tm.startPos) && (pos < tm.startPos + tm.len)) {
        String name=""String_Node_Str"";
        if (abc != null) {
          if (classIndex > -1) {
            name=abc.instance_info[classIndex].getName(abc.constants).getNameWithNamespace(abc.constants);
          }
        }
        Trait t=null;
        for (        Highlighting th : traitHighlights) {
          if ((pos >= th.startPos) && (pos < th.startPos + th.len)) {
            lastTraitIndex=(int)th.offset;
            if (abc != null) {
              t=abc.findTraitByTraitId(classIndex,lastTraitIndex);
              isStatic=abc.isStaticTraitId(classIndex,lastTraitIndex);
              if (t != null) {
                name+=""String_Node_Str"" + t.getName(abc).getName(abc.constants,new ArrayList<String>());
              }
            }
          }
        }
        displayMethod(pos,(int)tm.offset,name,t,isStatic);
        currentMethodHighlight=tm;
        return;
      }
    }
    if (classIndex == -1) {
      setNoTrait();
      return;
    }
    for (    Highlighting th : traitHighlights) {
      if ((pos >= th.startPos) && (pos < th.startPos + th.len)) {
        lastTraitIndex=(int)th.offset;
        Trait tr=abc.findTraitByTraitId(classIndex,(int)th.offset);
        if (tr != null) {
          if (tr instanceof TraitSlotConst) {
            abcPanel.detailPanel.slotConstTraitPanel.load((TraitSlotConst)tr,abc);
            abcPanel.detailPanel.showCard(DetailPanel.SLOT_CONST_TRAIT_CARD,tr);
            abcPanel.detailPanel.setEditMode(false);
            return;
          }
        }
        currentMethodHighlight=th;
        String name=""String_Node_Str"";
        Trait t=null;
        if (abc != null) {
          name=abc.instance_info[classIndex].getName(abc.constants).getNameWithNamespace(abc.constants);
          t=abc.findTraitByTraitId(classIndex,lastTraitIndex);
          isStatic=abc.isStaticTraitId(classIndex,lastTraitIndex);
          if (t != null) {
            name+=""String_Node_Str"" + t.getName(abc).getName(abc.constants,new ArrayList<String>());
          }
        }
        displayMethod(pos,abc.findMethodIdByTraitId(classIndex,(int)th.offset),name,t,isStatic);
        return;
      }
    }
    setNoTrait();
  }
  finally {
    abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setIgnoreCarret(false);
  }
}",0.9724964739069112
62202,"private boolean displayMethod(int pos,int methodIndex,String name,Trait trait){
  if (abc == null) {
    return false;
  }
  int bi=abc.findBodyIndex(methodIndex);
  if (bi == -1) {
    return false;
  }
  abcPanel.detailPanel.showCard(DetailPanel.METHOD_TRAIT_CARD,trait);
  if (reset || (abcPanel.detailPanel.methodTraitPanel.methodCodePanel.getBodyIndex() != bi)) {
    abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setBodyIndex(bi,abc,name);
    abcPanel.detailPanel.methodTraitPanel.methodBodyParamsPanel.loadFromBody(abc.bodies[bi]);
    abcPanel.detailPanel.methodTraitPanel.methodInfoPanel.load(abc.bodies[bi].method_info,abc);
    abcPanel.detailPanel.setEditMode(false);
  }
  boolean success=false;
  for (  Highlighting h : highlights) {
    if ((pos >= h.startPos) && (pos < h.startPos + h.len)) {
      abcPanel.detailPanel.methodTraitPanel.methodCodePanel.hilighOffset(h.offset);
      success=true;
    }
  }
  return success;
}","private boolean displayMethod(int pos,int methodIndex,String name,Trait trait,boolean isStatic){
  if (abc == null) {
    return false;
  }
  int bi=abc.findBodyIndex(methodIndex);
  if (bi == -1) {
    return false;
  }
  abcPanel.detailPanel.showCard(DetailPanel.METHOD_TRAIT_CARD,trait);
  if (reset || (abcPanel.detailPanel.methodTraitPanel.methodCodePanel.getBodyIndex() != bi)) {
    abcPanel.detailPanel.methodTraitPanel.methodCodePanel.setBodyIndex(bi,abc,name);
    abcPanel.detailPanel.methodTraitPanel.methodBodyParamsPanel.loadFromBody(abc.bodies[bi]);
    abcPanel.detailPanel.methodTraitPanel.methodInfoPanel.load(abc.bodies[bi].method_info,abc);
    abcPanel.detailPanel.setEditMode(false);
    this.isStatic=isStatic;
  }
  boolean success=false;
  for (  Highlighting h : highlights) {
    if ((pos >= h.startPos) && (pos < h.startPos + h.len)) {
      abcPanel.detailPanel.methodTraitPanel.methodCodePanel.hilighOffset(h.offset);
      success=true;
    }
  }
  return success;
}",0.9769112365315546
62203,"public int removeTraps(ConstantPool constants,ABC abc){
  return code.removeTraps(constants,this,abc);
}","public int removeTraps(ConstantPool constants,ABC abc,int scriptIndex,int classIndex,boolean isStatic){
  return code.removeTraps(constants,this,abc,scriptIndex,classIndex,isStatic);
}",0.7222222222222222
62204,"public String toString(String path,boolean pcode,boolean isStatic,int scriptIndex,int classIndex,ABC abc,ConstantPool constants,MethodInfo method_info[],Stack<GraphTargetItem> scopeStack,boolean isStaticInitializer,boolean hilight,List<String> fullyQualifiedNames,Traits initTraits){
  String s=""String_Node_Str"";
  if (!Main.DO_DECOMPILE) {
    s=""String_Node_Str"";
    if (hilight) {
      s=Highlighting.hilighMethod(s,this.method_info);
    }
    return s;
  }
  if (pcode) {
    s+=code.toASMSource(constants,this,false);
  }
 else {
    AVM2Code deobfuscated=null;
    MethodBody b=(MethodBody)Helper.deepCopy(this);
    deobfuscated=b.code;
    deobfuscated.markMappedOffsets();
    if ((Boolean)Configuration.getConfig(""String_Node_Str"",true)) {
      deobfuscated.removeTraps(constants,b,abc);
    }
    try {
      s+=deobfuscated.toSource(path,isStatic,scriptIndex,classIndex,abc,constants,method_info,b,hilight,getLocalRegNames(abc),scopeStack,isStaticInitializer,fullyQualifiedNames,initTraits);
      s=s.trim();
      if (hilight) {
        s=Highlighting.hilighMethod(s,this.method_info);
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      s=""String_Node_Str"" + ex.toString();
    }
  }
  return s;
}","public String toString(String path,boolean pcode,boolean isStatic,int scriptIndex,int classIndex,ABC abc,ConstantPool constants,MethodInfo method_info[],Stack<GraphTargetItem> scopeStack,boolean isStaticInitializer,boolean hilight,List<String> fullyQualifiedNames,Traits initTraits){
  String s=""String_Node_Str"";
  if (!Main.DO_DECOMPILE) {
    s=""String_Node_Str"";
    if (hilight) {
      s=Highlighting.hilighMethod(s,this.method_info);
    }
    return s;
  }
  if (pcode) {
    s+=code.toASMSource(constants,this,false);
  }
 else {
    AVM2Code deobfuscated=null;
    MethodBody b=(MethodBody)Helper.deepCopy(this);
    deobfuscated=b.code;
    deobfuscated.markMappedOffsets();
    if ((Boolean)Configuration.getConfig(""String_Node_Str"",true)) {
      try {
        deobfuscated.removeTraps(constants,b,abc,scriptIndex,classIndex,isStatic);
      }
 catch (      Exception ex) {
        Logger.getLogger(MethodBody.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
      }
    }
    try {
      s+=deobfuscated.toSource(path,isStatic,scriptIndex,classIndex,abc,constants,method_info,b,hilight,getLocalRegNames(abc),scopeStack,isStaticInitializer,fullyQualifiedNames,initTraits);
      s=s.trim();
      if (hilight) {
        s=Highlighting.hilighMethod(s,this.method_info);
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      s=""String_Node_Str"" + ex.toString();
    }
  }
  return s;
}",0.9291338582677166
62205,"public boolean exportAS3Class(String className,String outdir,boolean isPcode) throws Exception {
  List<ABCContainerTag> abcTags=new ArrayList<ABCContainerTag>();
  for (  Tag t : tags) {
    if (t instanceof ABCContainerTag) {
      ABCContainerTag cnt=(ABCContainerTag)t;
      abcTags.add(cnt);
    }
  }
  for (int i=0; i < abcTags.size(); i++) {
    ABC abc=abcTags.get(i).getABC();
    int scriptIndex=abc.findScriptByPath(className);
    if (scriptIndex > -1) {
      String cnt=""String_Node_Str"";
      if (abc.script_info.length > 1) {
        cnt=""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ abc.script_info.length+ ""String_Node_Str"";
      }
      String path=abc.script_info[scriptIndex].getPath(abc);
      String packageName=path.substring(0,path.lastIndexOf(""String_Node_Str""));
      if (packageName.equals(""String_Node_Str"")) {
        path=path.substring(1);
      }
      String exStr=""String_Node_Str"" + ""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ abcTags.size()+ ""String_Node_Str""+ cnt+ path+ ""String_Node_Str"";
      informListeners(""String_Node_Str"",exStr);
      abc.script_info[scriptIndex].export(abc,abcTags,outdir,isPcode);
      return true;
    }
  }
  return false;
}","public boolean exportAS3Class(String className,String outdir,boolean isPcode) throws Exception {
  List<ABCContainerTag> abcTags=new ArrayList<ABCContainerTag>();
  for (  Tag t : tags) {
    if (t instanceof ABCContainerTag) {
      ABCContainerTag cnt=(ABCContainerTag)t;
      abcTags.add(cnt);
    }
  }
  for (int i=0; i < abcTags.size(); i++) {
    ABC abc=abcTags.get(i).getABC();
    int scriptIndex=abc.findScriptByPath(className);
    if (scriptIndex > -1) {
      String cnt=""String_Node_Str"";
      if (abc.script_info.length > 1) {
        cnt=""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ abc.script_info.length+ ""String_Node_Str"";
      }
      String path=abc.script_info[scriptIndex].getPath(abc);
      String packageName=path.substring(0,path.lastIndexOf(""String_Node_Str""));
      if (packageName.equals(""String_Node_Str"")) {
        path=path.substring(1);
      }
      String exStr=""String_Node_Str"" + ""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ abcTags.size()+ ""String_Node_Str""+ cnt+ path+ ""String_Node_Str"";
      informListeners(""String_Node_Str"",exStr);
      abc.script_info[scriptIndex].export(abc,abcTags,outdir,isPcode,scriptIndex);
      return true;
    }
  }
  return false;
}",0.9950535861500412
62206,"public void export(String directory,boolean pcode,List<ABCContainerTag> abcList,String abcStr) throws IOException {
  for (int i=0; i < script_info.length; i++) {
    String path=script_info[i].getPath(this);
    String packageName=path.substring(0,path.lastIndexOf(""String_Node_Str""));
    if (packageName.equals(""String_Node_Str"")) {
      path=path.substring(1);
    }
    String cnt=""String_Node_Str"";
    if (script_info.length > 1) {
      cnt=""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ script_info.length+ ""String_Node_Str"";
    }
    String exStr=""String_Node_Str"" + abcStr + cnt+ path+ ""String_Node_Str"";
    informListeners(""String_Node_Str"",exStr);
    script_info[i].export(this,abcList,directory,pcode);
  }
}","public void export(String directory,boolean pcode,List<ABCContainerTag> abcList,String abcStr) throws IOException {
  for (int i=0; i < script_info.length; i++) {
    String path=script_info[i].getPath(this);
    String packageName=path.substring(0,path.lastIndexOf(""String_Node_Str""));
    if (packageName.equals(""String_Node_Str"")) {
      path=path.substring(1);
    }
    String cnt=""String_Node_Str"";
    if (script_info.length > 1) {
      cnt=""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ script_info.length+ ""String_Node_Str"";
    }
    String exStr=""String_Node_Str"" + abcStr + cnt+ path+ ""String_Node_Str"";
    informListeners(""String_Node_Str"",exStr);
    script_info[i].export(this,abcList,directory,pcode,i);
  }
}",0.9986282578875172
62207,"public String toSource(String path,boolean isStatic,int classIndex,ABC abc,ConstantPool constants,MethodInfo method_info[],MethodBody body,boolean hilighted,HashMap<Integer,String> localRegNames,Stack<GraphTargetItem> scopeStack,boolean isStaticInitializer,List<String> fullyQualifiedNames,Traits initTraits){
  initToSource();
  List<GraphTargetItem> list;
  String s;
  HashMap<Integer,GraphTargetItem> localRegs=new HashMap<Integer,GraphTargetItem>();
  int regCount=getRegisterCount();
  int paramCount;
  if (body.method_info != -1) {
    MethodInfo mi=method_info[body.method_info];
    paramCount=mi.param_types.length;
    if (mi.flagNeed_rest()) {
      paramCount++;
    }
  }
  try {
    list=AVM2Graph.translateViaGraph(path,this,abc,body,isStatic,classIndex,localRegs,scopeStack,localRegNames,fullyQualifiedNames);
  }
 catch (  Exception ex2) {
    Logger.getLogger(AVM2Code.class.getName()).log(Level.SEVERE,""String_Node_Str"" + path,ex2);
    return ""String_Node_Str"" + ex2.getMessage() + ""String_Node_Str"";
  }
  if (initTraits != null) {
    for (int i=0; i < list.size(); i++) {
      GraphTargetItem ti=list.get(i);
      if ((ti instanceof InitPropertyTreeItem) || (ti instanceof SetPropertyTreeItem)) {
        int multinameIndex=0;
        GraphTargetItem value=null;
        if (ti instanceof InitPropertyTreeItem) {
          multinameIndex=((InitPropertyTreeItem)ti).propertyName.multinameIndex;
          value=((InitPropertyTreeItem)ti).value;
        }
        if (ti instanceof SetPropertyTreeItem) {
          multinameIndex=((SetPropertyTreeItem)ti).propertyName.multinameIndex;
          value=((SetPropertyTreeItem)ti).value;
        }
        for (        Trait t : initTraits.traits) {
          if (t.name_index == multinameIndex) {
            if ((t instanceof TraitSlotConst)) {
              if (((TraitSlotConst)t).isConst() || isStaticInitializer) {
                ((TraitSlotConst)t).assignedValue=value;
                list.remove(i);
                i--;
                continue;
              }
              break;
            }
          }
        }
      }
 else {
      }
    }
  }
  if (isStaticInitializer) {
    List<GraphTargetItem> newList=new ArrayList<GraphTargetItem>();
    for (    GraphTargetItem ti : list) {
      if (!(ti instanceof ReturnVoidTreeItem)) {
        if (!(ti instanceof InitPropertyTreeItem)) {
          if (!(ti instanceof SetPropertyTreeItem)) {
            newList.add(ti);
          }
        }
      }
    }
    list=newList;
    if (list.isEmpty()) {
      return ""String_Node_Str"";
    }
  }
  boolean declaredRegisters[]=new boolean[regCount];
  for (int b=0; b < declaredRegisters.length; b++) {
    declaredRegisters[b]=false;
  }
  List<Slot> declaredSlots=new ArrayList<Slot>();
  for (int i=0; i < list.size(); i++) {
    GraphTargetItem ti=list.get(i);
    if (ti instanceof SetLocalTreeItem) {
      int reg=((SetLocalTreeItem)ti).regIndex;
      if (!declaredRegisters[reg]) {
        list.set(i,new DeclarationTreeItem(ti));
        declaredRegisters[reg]=true;
      }
    }
    if (ti instanceof SetSlotTreeItem) {
      SetSlotTreeItem ssti=(SetSlotTreeItem)ti;
      Slot sl=new Slot(ssti.scope,ssti.slotName);
      if (!declaredSlots.contains(sl)) {
        String type=""String_Node_Str"";
        for (int t=0; t < body.traits.traits.length; t++) {
          if (body.traits.traits[t].getName(abc) == sl.multiname) {
            if (body.traits.traits[t] instanceof TraitSlotConst) {
              type=((TraitSlotConst)body.traits.traits[t]).getType(constants,fullyQualifiedNames);
            }
          }
        }
        list.set(i,new DeclarationTreeItem(ti,type));
        declaredSlots.add(sl);
      }
    }
  }
  s=Graph.graphToString(list,constants,localRegNames,fullyQualifiedNames);
  if (!hilighted) {
    return Highlighting.stripHilights(s);
  }
  return s;
}","public String toSource(String path,boolean isStatic,int scriptIndex,int classIndex,ABC abc,ConstantPool constants,MethodInfo method_info[],MethodBody body,boolean hilighted,HashMap<Integer,String> localRegNames,Stack<GraphTargetItem> scopeStack,boolean isStaticInitializer,List<String> fullyQualifiedNames,Traits initTraits){
  initToSource();
  List<GraphTargetItem> list;
  String s;
  HashMap<Integer,GraphTargetItem> localRegs=new HashMap<Integer,GraphTargetItem>();
  int regCount=getRegisterCount();
  int paramCount;
  if (body.method_info != -1) {
    MethodInfo mi=method_info[body.method_info];
    paramCount=mi.param_types.length;
    if (mi.flagNeed_rest()) {
      paramCount++;
    }
  }
  try {
    list=AVM2Graph.translateViaGraph(path,this,abc,body,isStatic,scriptIndex,classIndex,localRegs,scopeStack,localRegNames,fullyQualifiedNames);
  }
 catch (  Exception ex2) {
    Logger.getLogger(AVM2Code.class.getName()).log(Level.SEVERE,""String_Node_Str"" + path,ex2);
    return ""String_Node_Str"" + ex2.getMessage() + ""String_Node_Str"";
  }
  if (initTraits != null) {
    for (int i=0; i < list.size(); i++) {
      GraphTargetItem ti=list.get(i);
      if ((ti instanceof InitPropertyTreeItem) || (ti instanceof SetPropertyTreeItem)) {
        int multinameIndex=0;
        GraphTargetItem value=null;
        if (ti instanceof InitPropertyTreeItem) {
          multinameIndex=((InitPropertyTreeItem)ti).propertyName.multinameIndex;
          value=((InitPropertyTreeItem)ti).value;
        }
        if (ti instanceof SetPropertyTreeItem) {
          multinameIndex=((SetPropertyTreeItem)ti).propertyName.multinameIndex;
          value=((SetPropertyTreeItem)ti).value;
        }
        for (        Trait t : initTraits.traits) {
          if (t.name_index == multinameIndex) {
            if ((t instanceof TraitSlotConst)) {
              if (((TraitSlotConst)t).isConst() || isStaticInitializer) {
                ((TraitSlotConst)t).assignedValue=value;
                list.remove(i);
                i--;
                continue;
              }
              break;
            }
          }
        }
      }
 else {
      }
    }
  }
  if (isStaticInitializer) {
    List<GraphTargetItem> newList=new ArrayList<GraphTargetItem>();
    for (    GraphTargetItem ti : list) {
      if (!(ti instanceof ReturnVoidTreeItem)) {
        if (!(ti instanceof InitPropertyTreeItem)) {
          if (!(ti instanceof SetPropertyTreeItem)) {
            newList.add(ti);
          }
        }
      }
    }
    list=newList;
    if (list.isEmpty()) {
      return ""String_Node_Str"";
    }
  }
  boolean declaredRegisters[]=new boolean[regCount];
  for (int b=0; b < declaredRegisters.length; b++) {
    declaredRegisters[b]=false;
  }
  List<Slot> declaredSlots=new ArrayList<Slot>();
  for (int i=0; i < list.size(); i++) {
    GraphTargetItem ti=list.get(i);
    if (ti instanceof SetLocalTreeItem) {
      int reg=((SetLocalTreeItem)ti).regIndex;
      if (!declaredRegisters[reg]) {
        list.set(i,new DeclarationTreeItem(ti));
        declaredRegisters[reg]=true;
      }
    }
    if (ti instanceof SetSlotTreeItem) {
      SetSlotTreeItem ssti=(SetSlotTreeItem)ti;
      Slot sl=new Slot(ssti.scope,ssti.slotName);
      if (!declaredSlots.contains(sl)) {
        String type=""String_Node_Str"";
        for (int t=0; t < body.traits.traits.length; t++) {
          if (body.traits.traits[t].getName(abc) == sl.multiname) {
            if (body.traits.traits[t] instanceof TraitSlotConst) {
              type=((TraitSlotConst)body.traits.traits[t]).getType(constants,fullyQualifiedNames);
            }
          }
        }
        list.set(i,new DeclarationTreeItem(ti,type));
        declaredSlots.add(sl);
      }
    }
  }
  s=Graph.graphToString(list,constants,localRegNames,fullyQualifiedNames);
  if (!hilighted) {
    return Highlighting.stripHilights(s);
  }
  return s;
}",0.996405648267009
62208,"public ConvertOutput toSourceOutput(boolean processJumps,boolean isStatic,int classIndex,java.util.HashMap<Integer,GraphTargetItem> localRegs,Stack<GraphTargetItem> stack,Stack<GraphTargetItem> scopeStack,ABC abc,ConstantPool constants,MethodInfo method_info[],MethodBody body,int start,int end,HashMap<Integer,String> localRegNames,List<String> fullyQualifiedNames,boolean visited[]) throws ConvertException {
  boolean debugMode=DEBUG_MODE;
  if (debugMode) {
    System.out.println(""String_Node_Str"" + start + ""String_Node_Str""+ end+ ""String_Node_Str""+ code.get(start).toString()+ ""String_Node_Str""+ code.get(end).toString());
  }
  if (visited == null) {
    visited=new boolean[code.size()];
  }
  toSourceCount++;
  if (toSourceLimit > 0) {
    if (toSourceCount > toSourceLimit) {
      throw new ConvertException(""String_Node_Str"" + toSourceLimit + ""String_Node_Str"",start);
    }
  }
  List<GraphTargetItem> output=new ArrayList<GraphTargetItem>();
  String ret=""String_Node_Str"";
  int ip=start;
  try {
    int addr;
    iploop:     while (ip <= end) {
      if (ignoredIns.contains(ip)) {
        ip++;
        continue;
      }
      boolean processTry=processJumps;
      addr=pos2adr(ip);
      int ipfix=fixIPAfterDebugLine(ip);
      int addrfix=pos2adr(ipfix);
      int maxend=-1;
      if (processTry) {
        List<ABCException> catchedExceptions=new ArrayList<ABCException>();
        for (int e=0; e < body.exceptions.length; e++) {
          if (addrfix == fixAddrAfterDebugLine(body.exceptions[e].start)) {
            if (!body.exceptions[e].isFinally()) {
              if ((fixAddrAfterDebugLine(body.exceptions[e].end) > maxend) && (!parsedExceptions.contains(body.exceptions[e]))) {
                catchedExceptions.clear();
                maxend=fixAddrAfterDebugLine(body.exceptions[e].end);
                catchedExceptions.add(body.exceptions[e]);
              }
 else               if (fixAddrAfterDebugLine(body.exceptions[e].end) == maxend) {
                catchedExceptions.add(body.exceptions[e]);
              }
            }
          }
        }
        if (catchedExceptions.size() > 0) {
          ip=ipfix;
          addr=addrfix;
          parsedExceptions.addAll(catchedExceptions);
          int endpos=adr2pos(fixAddrAfterDebugLine(catchedExceptions.get(0).end));
          List<List<GraphTargetItem>> catchedCommands=new ArrayList<List<GraphTargetItem>>();
          if (code.get(endpos).definition instanceof JumpIns) {
            int afterCatchAddr=pos2adr(endpos + 1) + code.get(endpos).operands[0];
            int afterCatchPos=adr2pos(afterCatchAddr);
            Collections.sort(catchedExceptions,new Comparator<ABCException>(){
              @Override public int compare(              ABCException o1,              ABCException o2){
                try {
                  return fixAddrAfterDebugLine(o1.target) - fixAddrAfterDebugLine(o2.target);
                }
 catch (                ConvertException ex) {
                  return 0;
                }
              }
            }
);
            List<GraphTargetItem> finallyCommands=new ArrayList<GraphTargetItem>();
            int returnPos=afterCatchPos;
            for (int e=0; e < body.exceptions.length; e++) {
              if (body.exceptions[e].isFinally()) {
                if (addr == fixAddrAfterDebugLine(body.exceptions[e].start)) {
                  if (afterCatchPos + 1 == adr2pos(fixAddrAfterDebugLine(body.exceptions[e].end))) {
                    AVM2Instruction jmpIns=code.get(adr2pos(fixAddrAfterDebugLine(body.exceptions[e].end)));
                    if (jmpIns.definition instanceof JumpIns) {
                      int finStart=adr2pos(fixAddrAfterDebugLine(body.exceptions[e].end) + jmpIns.getBytes().length + jmpIns.operands[0]);
                      finallyJumps.add(finStart);
                      if (unknownJumps.contains(finStart)) {
                        unknownJumps.remove((Integer)finStart);
                      }
                      for (int f=finStart; f <= end; f++) {
                        if (code.get(f).definition instanceof LookupSwitchIns) {
                          AVM2Instruction swins=code.get(f);
                          if (swins.operands.length >= 3) {
                            if (swins.operands[0] == swins.getBytes().length) {
                              if (adr2pos(pos2adr(f) + swins.operands[2]) < finStart) {
                                finallyCommands=toSourceOutput(processJumps,isStatic,classIndex,localRegs,stack,scopeStack,abc,constants,method_info,body,finStart,f - 1,localRegNames,fullyQualifiedNames,visited).output;
                                returnPos=f + 1;
                                break;
                              }
                            }
                          }
                        }
                      }
                      break;
                    }
                  }
                }
              }
            }
            for (int e=0; e < catchedExceptions.size(); e++) {
              int eendpos;
              if (e < catchedExceptions.size() - 1) {
                eendpos=adr2pos(fixAddrAfterDebugLine(catchedExceptions.get(e + 1).target)) - 2;
              }
 else {
                eendpos=afterCatchPos - 1;
              }
              Stack<GraphTargetItem> substack=new Stack<GraphTargetItem>();
              substack.add(new ExceptionTreeItem(catchedExceptions.get(e)));
              catchedCommands.add(toSourceOutput(processJumps,isStatic,classIndex,localRegs,substack,new Stack<GraphTargetItem>(),abc,constants,method_info,body,adr2pos(fixAddrAfterDebugLine(catchedExceptions.get(e).target)),eendpos,localRegNames,fullyQualifiedNames,visited).output);
            }
            List<GraphTargetItem> tryCommands=toSourceOutput(processJumps,isStatic,classIndex,localRegs,stack,scopeStack,abc,constants,method_info,body,ip,endpos - 1,localRegNames,fullyQualifiedNames,visited).output;
            output.add(new TryTreeItem(tryCommands,catchedExceptions,catchedCommands,finallyCommands));
            ip=returnPos;
            addr=pos2adr(ip);
          }
        }
      }
      if (ip > end) {
        break;
      }
      if (unknownJumps.contains(ip)) {
        unknownJumps.remove(new Integer(ip));
        throw new UnknownJumpException(stack,ip,output);
      }
      if (visited[ip]) {
        Logger.getLogger(AVM2Code.class.getName()).warning(""String_Node_Str"" + Helper.formatAddress(pos2adr(ip)) + ""String_Node_Str""+ ip);
        break;
      }
      visited[ip]=true;
      AVM2Instruction ins=code.get(ip);
      if (debugMode) {
        System.err.println(""String_Node_Str"" + ip + ""String_Node_Str""+ ins.toString()+ ""String_Node_Str""+ Highlighting.stripHilights(stack.toString())+ ""String_Node_Str""+ Highlighting.stripHilights(scopeStack.toString()));
      }
      if (ins.definition instanceof NewFunctionIns) {
        if (ip + 1 <= end) {
          if (code.get(ip + 1).definition instanceof PopIns) {
            ip+=2;
            continue;
          }
        }
      }
      if ((ip + 8 < code.size())) {
        if (ins.definition instanceof SetLocalTypeIns) {
          if (code.get(ip + 1).definition instanceof PushByteIns) {
            AVM2Instruction jmp=code.get(ip + 2);
            if (jmp.definition instanceof JumpIns) {
              if (jmp.operands[0] == 0) {
                if (code.get(ip + 3).definition instanceof LabelIns) {
                  if (code.get(ip + 4).definition instanceof PopIns) {
                    if (code.get(ip + 5).definition instanceof LabelIns) {
                      AVM2Instruction gl=code.get(ip + 6);
                      if (gl.definition instanceof GetLocalTypeIns) {
                        if (((GetLocalTypeIns)gl.definition).getRegisterId(gl) == ((SetLocalTypeIns)ins.definition).getRegisterId(ins)) {
                          AVM2Instruction ki=code.get(ip + 7);
                          if (ki.definition instanceof KillIns) {
                            if (ki.operands[0] == ((SetLocalTypeIns)ins.definition).getRegisterId(ins)) {
                              if (code.get(ip + 8).definition instanceof ReturnValueIns) {
                                ip=ip + 8;
                                continue;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((ins.definition instanceof GetLocalTypeIns) && (!output.isEmpty()) && (output.get(output.size() - 1) instanceof SetLocalTreeItem)&& (((SetLocalTreeItem)output.get(output.size() - 1)).regIndex == ((GetLocalTypeIns)ins.definition).getRegisterId(ins))&& isKilled(((SetLocalTreeItem)output.get(output.size() - 1)).regIndex,start,end)) {
        SetLocalTreeItem slt=(SetLocalTreeItem)output.remove(output.size() - 1);
        stack.push(slt.getValue());
        ip++;
      }
 else       if ((ins.definition instanceof SetLocalTypeIns) && (ip + 1 <= end) && (isKilled(((SetLocalTypeIns)ins.definition).getRegisterId(ins),ip,end))) {
        AVM2Instruction insAfter=code.get(ip + 1);
        if ((insAfter.definition instanceof GetLocalTypeIns) && (((GetLocalTypeIns)insAfter.definition).getRegisterId(insAfter) == ((SetLocalTypeIns)ins.definition).getRegisterId(ins))) {
          GraphTargetItem before=stack.peek();
          ins.definition.translate(isStatic,classIndex,localRegs,stack,scopeStack,constants,ins,method_info,output,body,abc,localRegNames,fullyQualifiedNames);
          stack.push(before);
          ip+=2;
          continue iploop;
        }
 else {
          ins.definition.translate(isStatic,classIndex,localRegs,stack,scopeStack,constants,ins,method_info,output,body,abc,localRegNames,fullyQualifiedNames);
          ip++;
          continue iploop;
        }
      }
 else       if (ins.definition instanceof DupIns) {
        int nextPos;
        do {
          AVM2Instruction insAfter=code.get(ip + 1);
          AVM2Instruction insBefore=ins;
          if (ip - 1 >= start) {
            insBefore=code.get(ip - 1);
          }
          if (insAfter.definition instanceof ConvertBIns) {
            ip++;
            addr=pos2adr(ip);
            insAfter=code.get(ip + 1);
          }
          boolean isAnd;
          if (processJumps && (insAfter.definition instanceof IfFalseIns)) {
            isAnd=true;
          }
 else           if (processJumps && (insAfter.definition instanceof IfTrueIns)) {
            isAnd=false;
          }
 else           if (insAfter.definition instanceof SetLocalTypeIns) {
            int reg=(((SetLocalTypeIns)insAfter.definition).getRegisterId(insAfter));
            for (int t=ip + 1; t <= end - 1; t++) {
              if (code.get(t).definition instanceof KillIns) {
                if (code.get(t).operands[0] == reg) {
                  break;
                }
              }
              if (code.get(t).definition instanceof GetLocalTypeIns) {
                if (((GetLocalTypeIns)code.get(t).definition).getRegisterId(code.get(t)) == reg) {
                  if (code.get(t + 1).definition instanceof KillIns) {
                    if (code.get(t + 1).operands[0] == reg) {
                      ConvertOutput assignment=toSourceOutput(processJumps,isStatic,classIndex,localRegs,stack,scopeStack,abc,constants,method_info,body,ip + 2,t - 1,localRegNames,fullyQualifiedNames,visited);
                      stack.push(assignment.output.remove(assignment.output.size() - 1));
                      ip=t + 2;
                      continue iploop;
                    }
                  }
                }
              }
            }
            if (!isKilled(reg,0,end)) {
              for (int i=ip; i >= start; i--) {
                if (code.get(i).definition instanceof DupIns) {
                  GraphTargetItem v=stack.pop();
                  stack.push(new LocalRegTreeItem(ins,reg,v));
                  stack.push(v);
                }
 else {
                  break;
                }
              }
            }
 else {
              ins.definition.translate(isStatic,classIndex,localRegs,stack,scopeStack,constants,ins,method_info,output,body,abc,localRegNames,fullyQualifiedNames);
            }
            ip++;
            break;
          }
 else {
            ins.definition.translate(isStatic,classIndex,localRegs,stack,scopeStack,constants,ins,method_info,output,body,abc,localRegNames,fullyQualifiedNames);
            ip++;
            break;
          }
        }
 while (ins.definition instanceof DupIns);
      }
 else       if ((ins.definition instanceof ReturnValueIns) || (ins.definition instanceof ReturnVoidIns) || (ins.definition instanceof ThrowIns)) {
        ins.definition.translate(isStatic,classIndex,localRegs,stack,scopeStack,constants,ins,method_info,output,body,abc,localRegNames,fullyQualifiedNames);
        ip=end + 1;
        break;
      }
 else       if (ins.definition instanceof NewFunctionIns) {
        String functionName=""String_Node_Str"";
        if ((ip >= start + 2) && (ip <= end - 4)) {
          AVM2Instruction prev2=code.get(ip - 2);
          if (prev2.definition instanceof NewObjectIns) {
            if (prev2.operands[0] == 0) {
              if (code.get(ip - 1).definition instanceof PushWithIns) {
                boolean hasDup=false;
                int plus=0;
                if (code.get(ip + 1).definition instanceof DupIns) {
                  hasDup=true;
                  plus=1;
                }
                AVM2Instruction psco=code.get(ip + 1 + plus);
                if (psco.definition instanceof GetScopeObjectIns) {
                  if (psco.operands[0] == scopeStack.size() - 1) {
                    if (code.get(ip + plus + 2).definition instanceof SwapIns) {
                      if (code.get(ip + plus + 4).definition instanceof PopScopeIns) {
                        if (code.get(ip + plus + 3).definition instanceof SetPropertyIns) {
                          functionName=abc.constants.constant_multiname[code.get(ip + plus + 3).operands[0]].getName(constants,fullyQualifiedNames);
                          scopeStack.pop();
                          output.remove(output.size() - 1);
                          ip=ip + plus + 4;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ins.definition.translate(isStatic,classIndex,localRegs,stack,scopeStack,constants,ins,method_info,output,body,abc,localRegNames,fullyQualifiedNames);
        NewFunctionTreeItem nft=(NewFunctionTreeItem)stack.peek();
        nft.functionName=functionName;
        ip++;
      }
 else {
        ins.definition.translate(isStatic,classIndex,localRegs,stack,scopeStack,constants,ins,method_info,output,body,abc,localRegNames,fullyQualifiedNames);
        ip++;
        addr=pos2adr(ip);
      }
    }
    if (debugMode) {
      System.out.println(""String_Node_Str"" + start + ""String_Node_Str""+ end+ ""String_Node_Str""+ code.get(start).toString()+ ""String_Node_Str""+ code.get(end).toString());
    }
    return new ConvertOutput(stack,output);
  }
 catch (  ConvertException cex) {
    throw cex;
  }
}","public ConvertOutput toSourceOutput(boolean processJumps,boolean isStatic,int scriptIndex,int classIndex,java.util.HashMap<Integer,GraphTargetItem> localRegs,Stack<GraphTargetItem> stack,Stack<GraphTargetItem> scopeStack,ABC abc,ConstantPool constants,MethodInfo method_info[],MethodBody body,int start,int end,HashMap<Integer,String> localRegNames,List<String> fullyQualifiedNames,boolean visited[]) throws ConvertException {
  boolean debugMode=DEBUG_MODE;
  if (debugMode) {
    System.out.println(""String_Node_Str"" + start + ""String_Node_Str""+ end+ ""String_Node_Str""+ code.get(start).toString()+ ""String_Node_Str""+ code.get(end).toString());
  }
  if (visited == null) {
    visited=new boolean[code.size()];
  }
  toSourceCount++;
  if (toSourceLimit > 0) {
    if (toSourceCount > toSourceLimit) {
      throw new ConvertException(""String_Node_Str"" + toSourceLimit + ""String_Node_Str"",start);
    }
  }
  List<GraphTargetItem> output=new ArrayList<GraphTargetItem>();
  String ret=""String_Node_Str"";
  int ip=start;
  try {
    int addr;
    iploop:     while (ip <= end) {
      if (ignoredIns.contains(ip)) {
        ip++;
        continue;
      }
      boolean processTry=processJumps;
      addr=pos2adr(ip);
      int ipfix=fixIPAfterDebugLine(ip);
      int addrfix=pos2adr(ipfix);
      int maxend=-1;
      if (processTry) {
        List<ABCException> catchedExceptions=new ArrayList<ABCException>();
        for (int e=0; e < body.exceptions.length; e++) {
          if (addrfix == fixAddrAfterDebugLine(body.exceptions[e].start)) {
            if (!body.exceptions[e].isFinally()) {
              if ((fixAddrAfterDebugLine(body.exceptions[e].end) > maxend) && (!parsedExceptions.contains(body.exceptions[e]))) {
                catchedExceptions.clear();
                maxend=fixAddrAfterDebugLine(body.exceptions[e].end);
                catchedExceptions.add(body.exceptions[e]);
              }
 else               if (fixAddrAfterDebugLine(body.exceptions[e].end) == maxend) {
                catchedExceptions.add(body.exceptions[e]);
              }
            }
          }
        }
        if (catchedExceptions.size() > 0) {
          ip=ipfix;
          addr=addrfix;
          parsedExceptions.addAll(catchedExceptions);
          int endpos=adr2pos(fixAddrAfterDebugLine(catchedExceptions.get(0).end));
          List<List<GraphTargetItem>> catchedCommands=new ArrayList<List<GraphTargetItem>>();
          if (code.get(endpos).definition instanceof JumpIns) {
            int afterCatchAddr=pos2adr(endpos + 1) + code.get(endpos).operands[0];
            int afterCatchPos=adr2pos(afterCatchAddr);
            Collections.sort(catchedExceptions,new Comparator<ABCException>(){
              @Override public int compare(              ABCException o1,              ABCException o2){
                try {
                  return fixAddrAfterDebugLine(o1.target) - fixAddrAfterDebugLine(o2.target);
                }
 catch (                ConvertException ex) {
                  return 0;
                }
              }
            }
);
            List<GraphTargetItem> finallyCommands=new ArrayList<GraphTargetItem>();
            int returnPos=afterCatchPos;
            for (int e=0; e < body.exceptions.length; e++) {
              if (body.exceptions[e].isFinally()) {
                if (addr == fixAddrAfterDebugLine(body.exceptions[e].start)) {
                  if (afterCatchPos + 1 == adr2pos(fixAddrAfterDebugLine(body.exceptions[e].end))) {
                    AVM2Instruction jmpIns=code.get(adr2pos(fixAddrAfterDebugLine(body.exceptions[e].end)));
                    if (jmpIns.definition instanceof JumpIns) {
                      int finStart=adr2pos(fixAddrAfterDebugLine(body.exceptions[e].end) + jmpIns.getBytes().length + jmpIns.operands[0]);
                      finallyJumps.add(finStart);
                      if (unknownJumps.contains(finStart)) {
                        unknownJumps.remove((Integer)finStart);
                      }
                      for (int f=finStart; f <= end; f++) {
                        if (code.get(f).definition instanceof LookupSwitchIns) {
                          AVM2Instruction swins=code.get(f);
                          if (swins.operands.length >= 3) {
                            if (swins.operands[0] == swins.getBytes().length) {
                              if (adr2pos(pos2adr(f) + swins.operands[2]) < finStart) {
                                finallyCommands=toSourceOutput(processJumps,isStatic,scriptIndex,classIndex,localRegs,stack,scopeStack,abc,constants,method_info,body,finStart,f - 1,localRegNames,fullyQualifiedNames,visited).output;
                                returnPos=f + 1;
                                break;
                              }
                            }
                          }
                        }
                      }
                      break;
                    }
                  }
                }
              }
            }
            for (int e=0; e < catchedExceptions.size(); e++) {
              int eendpos;
              if (e < catchedExceptions.size() - 1) {
                eendpos=adr2pos(fixAddrAfterDebugLine(catchedExceptions.get(e + 1).target)) - 2;
              }
 else {
                eendpos=afterCatchPos - 1;
              }
              Stack<GraphTargetItem> substack=new Stack<GraphTargetItem>();
              substack.add(new ExceptionTreeItem(catchedExceptions.get(e)));
              catchedCommands.add(toSourceOutput(processJumps,isStatic,scriptIndex,classIndex,localRegs,substack,new Stack<GraphTargetItem>(),abc,constants,method_info,body,adr2pos(fixAddrAfterDebugLine(catchedExceptions.get(e).target)),eendpos,localRegNames,fullyQualifiedNames,visited).output);
            }
            List<GraphTargetItem> tryCommands=toSourceOutput(processJumps,isStatic,scriptIndex,classIndex,localRegs,stack,scopeStack,abc,constants,method_info,body,ip,endpos - 1,localRegNames,fullyQualifiedNames,visited).output;
            output.add(new TryTreeItem(tryCommands,catchedExceptions,catchedCommands,finallyCommands));
            ip=returnPos;
            addr=pos2adr(ip);
          }
        }
      }
      if (ip > end) {
        break;
      }
      if (unknownJumps.contains(ip)) {
        unknownJumps.remove(new Integer(ip));
        throw new UnknownJumpException(stack,ip,output);
      }
      if (visited[ip]) {
        Logger.getLogger(AVM2Code.class.getName()).warning(""String_Node_Str"" + Helper.formatAddress(pos2adr(ip)) + ""String_Node_Str""+ ip);
        break;
      }
      visited[ip]=true;
      AVM2Instruction ins=code.get(ip);
      if (debugMode) {
        System.err.println(""String_Node_Str"" + ip + ""String_Node_Str""+ ins.toString()+ ""String_Node_Str""+ Highlighting.stripHilights(stack.toString())+ ""String_Node_Str""+ Highlighting.stripHilights(scopeStack.toString()));
      }
      if (ins.definition instanceof NewFunctionIns) {
        if (ip + 1 <= end) {
          if (code.get(ip + 1).definition instanceof PopIns) {
            ip+=2;
            continue;
          }
        }
      }
      if ((ip + 8 < code.size())) {
        if (ins.definition instanceof SetLocalTypeIns) {
          if (code.get(ip + 1).definition instanceof PushByteIns) {
            AVM2Instruction jmp=code.get(ip + 2);
            if (jmp.definition instanceof JumpIns) {
              if (jmp.operands[0] == 0) {
                if (code.get(ip + 3).definition instanceof LabelIns) {
                  if (code.get(ip + 4).definition instanceof PopIns) {
                    if (code.get(ip + 5).definition instanceof LabelIns) {
                      AVM2Instruction gl=code.get(ip + 6);
                      if (gl.definition instanceof GetLocalTypeIns) {
                        if (((GetLocalTypeIns)gl.definition).getRegisterId(gl) == ((SetLocalTypeIns)ins.definition).getRegisterId(ins)) {
                          AVM2Instruction ki=code.get(ip + 7);
                          if (ki.definition instanceof KillIns) {
                            if (ki.operands[0] == ((SetLocalTypeIns)ins.definition).getRegisterId(ins)) {
                              if (code.get(ip + 8).definition instanceof ReturnValueIns) {
                                ip=ip + 8;
                                continue;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((ins.definition instanceof GetLocalTypeIns) && (!output.isEmpty()) && (output.get(output.size() - 1) instanceof SetLocalTreeItem)&& (((SetLocalTreeItem)output.get(output.size() - 1)).regIndex == ((GetLocalTypeIns)ins.definition).getRegisterId(ins))&& isKilled(((SetLocalTreeItem)output.get(output.size() - 1)).regIndex,start,end)) {
        SetLocalTreeItem slt=(SetLocalTreeItem)output.remove(output.size() - 1);
        stack.push(slt.getValue());
        ip++;
      }
 else       if ((ins.definition instanceof SetLocalTypeIns) && (ip + 1 <= end) && (isKilled(((SetLocalTypeIns)ins.definition).getRegisterId(ins),ip,end))) {
        AVM2Instruction insAfter=code.get(ip + 1);
        if ((insAfter.definition instanceof GetLocalTypeIns) && (((GetLocalTypeIns)insAfter.definition).getRegisterId(insAfter) == ((SetLocalTypeIns)ins.definition).getRegisterId(ins))) {
          GraphTargetItem before=stack.peek();
          ins.definition.translate(isStatic,scriptIndex,classIndex,localRegs,stack,scopeStack,constants,ins,method_info,output,body,abc,localRegNames,fullyQualifiedNames);
          stack.push(before);
          ip+=2;
          continue iploop;
        }
 else {
          ins.definition.translate(isStatic,scriptIndex,classIndex,localRegs,stack,scopeStack,constants,ins,method_info,output,body,abc,localRegNames,fullyQualifiedNames);
          ip++;
          continue iploop;
        }
      }
 else       if (ins.definition instanceof DupIns) {
        int nextPos;
        do {
          AVM2Instruction insAfter=code.get(ip + 1);
          AVM2Instruction insBefore=ins;
          if (ip - 1 >= start) {
            insBefore=code.get(ip - 1);
          }
          if (insAfter.definition instanceof ConvertBIns) {
            ip++;
            addr=pos2adr(ip);
            insAfter=code.get(ip + 1);
          }
          boolean isAnd;
          if (processJumps && (insAfter.definition instanceof IfFalseIns)) {
            isAnd=true;
          }
 else           if (processJumps && (insAfter.definition instanceof IfTrueIns)) {
            isAnd=false;
          }
 else           if (insAfter.definition instanceof SetLocalTypeIns) {
            int reg=(((SetLocalTypeIns)insAfter.definition).getRegisterId(insAfter));
            for (int t=ip + 1; t <= end - 1; t++) {
              if (code.get(t).definition instanceof KillIns) {
                if (code.get(t).operands[0] == reg) {
                  break;
                }
              }
              if (code.get(t).definition instanceof GetLocalTypeIns) {
                if (((GetLocalTypeIns)code.get(t).definition).getRegisterId(code.get(t)) == reg) {
                  if (code.get(t + 1).definition instanceof KillIns) {
                    if (code.get(t + 1).operands[0] == reg) {
                      ConvertOutput assignment=toSourceOutput(processJumps,isStatic,scriptIndex,classIndex,localRegs,stack,scopeStack,abc,constants,method_info,body,ip + 2,t - 1,localRegNames,fullyQualifiedNames,visited);
                      stack.push(assignment.output.remove(assignment.output.size() - 1));
                      ip=t + 2;
                      continue iploop;
                    }
                  }
                }
              }
            }
            if (!isKilled(reg,0,end)) {
              for (int i=ip; i >= start; i--) {
                if (code.get(i).definition instanceof DupIns) {
                  GraphTargetItem v=stack.pop();
                  stack.push(new LocalRegTreeItem(ins,reg,v));
                  stack.push(v);
                }
 else {
                  break;
                }
              }
            }
 else {
              ins.definition.translate(isStatic,scriptIndex,classIndex,localRegs,stack,scopeStack,constants,ins,method_info,output,body,abc,localRegNames,fullyQualifiedNames);
            }
            ip++;
            break;
          }
 else {
            ins.definition.translate(isStatic,scriptIndex,classIndex,localRegs,stack,scopeStack,constants,ins,method_info,output,body,abc,localRegNames,fullyQualifiedNames);
            ip++;
            break;
          }
        }
 while (ins.definition instanceof DupIns);
      }
 else       if ((ins.definition instanceof ReturnValueIns) || (ins.definition instanceof ReturnVoidIns) || (ins.definition instanceof ThrowIns)) {
        ins.definition.translate(isStatic,scriptIndex,classIndex,localRegs,stack,scopeStack,constants,ins,method_info,output,body,abc,localRegNames,fullyQualifiedNames);
        ip=end + 1;
        break;
      }
 else       if (ins.definition instanceof NewFunctionIns) {
        String functionName=""String_Node_Str"";
        if ((ip >= start + 2) && (ip <= end - 4)) {
          AVM2Instruction prev2=code.get(ip - 2);
          if (prev2.definition instanceof NewObjectIns) {
            if (prev2.operands[0] == 0) {
              if (code.get(ip - 1).definition instanceof PushWithIns) {
                boolean hasDup=false;
                int plus=0;
                if (code.get(ip + 1).definition instanceof DupIns) {
                  hasDup=true;
                  plus=1;
                }
                AVM2Instruction psco=code.get(ip + 1 + plus);
                if (psco.definition instanceof GetScopeObjectIns) {
                  if (psco.operands[0] == scopeStack.size() - 1) {
                    if (code.get(ip + plus + 2).definition instanceof SwapIns) {
                      if (code.get(ip + plus + 4).definition instanceof PopScopeIns) {
                        if (code.get(ip + plus + 3).definition instanceof SetPropertyIns) {
                          functionName=abc.constants.constant_multiname[code.get(ip + plus + 3).operands[0]].getName(constants,fullyQualifiedNames);
                          scopeStack.pop();
                          output.remove(output.size() - 1);
                          ip=ip + plus + 4;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ins.definition.translate(isStatic,scriptIndex,classIndex,localRegs,stack,scopeStack,constants,ins,method_info,output,body,abc,localRegNames,fullyQualifiedNames);
        NewFunctionTreeItem nft=(NewFunctionTreeItem)stack.peek();
        nft.functionName=functionName;
        ip++;
      }
 else {
        ins.definition.translate(isStatic,scriptIndex,classIndex,localRegs,stack,scopeStack,constants,ins,method_info,output,body,abc,localRegNames,fullyQualifiedNames);
        ip++;
        addr=pos2adr(ip);
      }
    }
    if (debugMode) {
      System.out.println(""String_Node_Str"" + start + ""String_Node_Str""+ end+ ""String_Node_Str""+ code.get(start).toString()+ ""String_Node_Str""+ code.get(end).toString());
    }
    return new ConvertOutput(stack,output);
  }
 catch (  ConvertException cex) {
    throw cex;
  }
}",0.995201037613489
62209,"public AVM2Graph(AVM2Code code,ABC abc,MethodBody body,boolean isStatic,int classIndex,HashMap<Integer,GraphTargetItem> localRegs,Stack<GraphTargetItem> scopeStack,HashMap<Integer,String> localRegNames,List<String> fullyQualifiedNames){
  super(new AVM2GraphSource(code,isStatic,classIndex,localRegs,scopeStack,abc,body,localRegNames,fullyQualifiedNames),body.getExceptionEntries());
  this.code=code;
  this.abc=abc;
  this.body=body;
}","public AVM2Graph(AVM2Code code,ABC abc,MethodBody body,boolean isStatic,int scriptIndex,int classIndex,HashMap<Integer,GraphTargetItem> localRegs,Stack<GraphTargetItem> scopeStack,HashMap<Integer,String> localRegNames,List<String> fullyQualifiedNames){
  super(new AVM2GraphSource(code,isStatic,scriptIndex,classIndex,localRegs,scopeStack,abc,body,localRegNames,fullyQualifiedNames),body.getExceptionEntries());
  this.code=code;
  this.abc=abc;
  this.body=body;
}",0.9689578713968958
62210,"public static List<GraphTargetItem> translateViaGraph(String path,AVM2Code code,ABC abc,MethodBody body,boolean isStatic,int classIndex,HashMap<Integer,GraphTargetItem> localRegs,Stack<GraphTargetItem> scopeStack,HashMap<Integer,String> localRegNames,List<String> fullyQualifiedNames){
  AVM2Graph g=new AVM2Graph(code,abc,body,isStatic,classIndex,localRegs,scopeStack,localRegNames,fullyQualifiedNames);
  List<GraphPart> allParts=new ArrayList<GraphPart>();
  for (  GraphPart head : g.heads) {
    populateParts(head,allParts);
  }
  List localData=new ArrayList();
  localData.add((Boolean)isStatic);
  localData.add((Integer)classIndex);
  localData.add(localRegs);
  localData.add(scopeStack);
  localData.add(abc.constants);
  localData.add(abc.method_info);
  localData.add(body);
  localData.add(abc);
  localData.add(localRegNames);
  localData.add(fullyQualifiedNames);
  localData.add(new ArrayList<ABCException>());
  localData.add(new ArrayList<Integer>());
  localData.add(new ArrayList<Integer>());
  return g.translate(localData);
}","public static List<GraphTargetItem> translateViaGraph(String path,AVM2Code code,ABC abc,MethodBody body,boolean isStatic,int scriptIndex,int classIndex,HashMap<Integer,GraphTargetItem> localRegs,Stack<GraphTargetItem> scopeStack,HashMap<Integer,String> localRegNames,List<String> fullyQualifiedNames){
  AVM2Graph g=new AVM2Graph(code,abc,body,isStatic,scriptIndex,classIndex,localRegs,scopeStack,localRegNames,fullyQualifiedNames);
  List<GraphPart> allParts=new ArrayList<GraphPart>();
  for (  GraphPart head : g.heads) {
    populateParts(head,allParts);
  }
  List localData=new ArrayList();
  localData.add((Boolean)isStatic);
  localData.add((Integer)classIndex);
  localData.add(localRegs);
  localData.add(scopeStack);
  localData.add(abc.constants);
  localData.add(abc.method_info);
  localData.add(body);
  localData.add(abc);
  localData.add(localRegNames);
  localData.add(fullyQualifiedNames);
  localData.add(new ArrayList<ABCException>());
  localData.add(new ArrayList<Integer>());
  localData.add(new ArrayList<Integer>());
  localData.add((Integer)scriptIndex);
  return g.translate(localData);
}",0.96905311778291
62211,"@Override public void translate(boolean isStatic,int classIndex,java.util.HashMap<Integer,GraphTargetItem> localRegs,Stack<GraphTargetItem> stack,java.util.Stack<GraphTargetItem> scopeStack,ConstantPool constants,AVM2Instruction ins,MethodInfo[] method_info,List<GraphTargetItem> output,com.jpexs.decompiler.flash.abc.types.MethodBody body,com.jpexs.decompiler.flash.abc.ABC abc,HashMap<Integer,String> localRegNames,List<String> fullyQualifiedNames){
  stack.push(new BooleanTreeItem(ins,Boolean.TRUE));
}","@Override public void translate(boolean isStatic,int classIndex,java.util.HashMap<Integer,GraphTargetItem> localRegs,Stack<GraphTargetItem> stack,java.util.Stack<GraphTargetItem> scopeStack,ConstantPool constants,AVM2Instruction ins,MethodInfo[] method_info,List<GraphTargetItem> output,com.jpexs.decompiler.flash.abc.types.MethodBody body,com.jpexs.decompiler.flash.abc.ABC abc,HashMap<Integer,String> localRegNames,List<String> fullyQualifiedNames){
}",0.9447340980187696
62212,"public static List<GraphTargetItem> checkClass(List<GraphTargetItem> output){
  List<GraphTargetItem> ret=new ArrayList<GraphTargetItem>();
  List<GraphTargetItem> functions=new ArrayList<GraphTargetItem>();
  List<GraphTargetItem> staticFunctions=new ArrayList<GraphTargetItem>();
  HashMap<GraphTargetItem,GraphTargetItem> vars=new HashMap<GraphTargetItem,GraphTargetItem>();
  HashMap<GraphTargetItem,GraphTargetItem> staticVars=new HashMap<GraphTargetItem,GraphTargetItem>();
  GraphTargetItem className;
  GraphTargetItem extendsOp=null;
  List<GraphTargetItem> implementsOp=new ArrayList<GraphTargetItem>();
  boolean ok=true;
  int prevCount=0;
  for (  GraphTargetItem t : output) {
    if (t instanceof IfItem) {
      IfItem it=(IfItem)t;
      if (it.expression instanceof NotItem) {
        NotItem nti=(NotItem)it.expression;
        if (nti.value instanceof GetMemberTreeItem) {
          if (true) {
            if ((it.onTrue.size() == 1) && (it.onTrue.get(0) instanceof SetMemberTreeItem) && (((SetMemberTreeItem)it.onTrue.get(0)).value instanceof NewObjectTreeItem)) {
            }
 else {
              List<GraphTargetItem> parts=it.onTrue;
              className=getWithoutGlobal((GetMemberTreeItem)nti.value);
              if (parts.size() >= 1) {
                if (parts.get(0) instanceof StoreRegisterTreeItem) {
                  int classReg=((StoreRegisterTreeItem)parts.get(0)).register.number;
                  if ((parts.size() >= 2) && (parts.get(1) instanceof SetMemberTreeItem)) {
                    GraphTargetItem ti1=((SetMemberTreeItem)parts.get(1)).value;
                    GraphTargetItem ti2=((StoreRegisterTreeItem)parts.get(0)).value;
                    if (ti1 == ti2) {
                      if (((SetMemberTreeItem)parts.get(1)).value instanceof FunctionTreeItem) {
                        ((FunctionTreeItem)((SetMemberTreeItem)parts.get(1)).value).calculatedFunctionName=(className instanceof GetMemberTreeItem) ? ((GetMemberTreeItem)className).memberName : className;
                        functions.add((FunctionTreeItem)((SetMemberTreeItem)parts.get(1)).value);
                        int pos=2;
                        if (parts.size() <= pos) {
                          ok=false;
                          break;
                        }
                        if (parts.get(pos) instanceof ExtendsTreeItem) {
                          ExtendsTreeItem et=(ExtendsTreeItem)parts.get(pos);
                          extendsOp=getWithoutGlobal(et.superclass);
                          pos++;
                        }
                        if (parts.size() <= pos) {
                          List<GraphTargetItem> output2=new ArrayList<GraphTargetItem>();
                          for (int i=0; i < prevCount; i++) {
                            output2.add(output.get(i));
                          }
                          output2.add(new ClassTreeItem(className,extendsOp,implementsOp,functions,vars,staticFunctions,staticVars));
                          return output2;
                        }
                        if (parts.get(pos) instanceof StoreRegisterTreeItem) {
                          int instanceReg=-1;
                          if (((StoreRegisterTreeItem)parts.get(pos)).value instanceof GetMemberTreeItem) {
                            GraphTargetItem obj=((GetMemberTreeItem)((StoreRegisterTreeItem)parts.get(pos)).value).object;
                            if (obj instanceof DirectValueTreeItem) {
                              if (((DirectValueTreeItem)obj).value instanceof RegisterNumber) {
                                if (((RegisterNumber)((DirectValueTreeItem)obj).value).number == classReg) {
                                  instanceReg=((StoreRegisterTreeItem)parts.get(pos)).register.number;
                                }
                              }
                            }
                          }
 else                           if (((StoreRegisterTreeItem)parts.get(pos)).value instanceof NewMethodTreeItem) {
                            if (parts.get(pos + 1) instanceof SetMemberTreeItem) {
                              if (((SetMemberTreeItem)parts.get(pos + 1)).value == ((StoreRegisterTreeItem)parts.get(pos)).value) {
                                instanceReg=((StoreRegisterTreeItem)parts.get(pos)).register.number;
                                NewMethodTreeItem nm=(NewMethodTreeItem)((StoreRegisterTreeItem)parts.get(pos)).value;
                                GetMemberTreeItem gm=new GetMemberTreeItem(null,nm.scriptObject,nm.methodName);
                                extendsOp=gm;
                              }
 else {
                                ok=false;
                                break;
                              }
                            }
 else {
                              ok=false;
                              break;
                            }
                            pos++;
                          }
 else                           if (((StoreRegisterTreeItem)parts.get(pos)).value instanceof NewObjectTreeItem) {
                            if (parts.get(pos + 1) instanceof SetMemberTreeItem) {
                              if (((SetMemberTreeItem)parts.get(pos + 1)).value == ((StoreRegisterTreeItem)parts.get(pos)).value) {
                                instanceReg=((StoreRegisterTreeItem)parts.get(pos)).register.number;
                                NewObjectTreeItem nm=(NewObjectTreeItem)((StoreRegisterTreeItem)parts.get(pos)).value;
                                extendsOp=new GetVariableTreeItem(null,nm.objectName);
                              }
 else {
                                ok=false;
                                break;
                              }
                            }
 else {
                              ok=false;
                              break;
                            }
                            pos++;
                          }
 else {
                            ok=false;
                            break;
                          }
                          if (instanceReg == -1) {
                            ok=false;
                            break;
                          }
                          pos++;
                          if (parts.size() <= pos) {
                            ok=false;
                            break;
                          }
                          if (parts.get(pos) instanceof ImplementsOpTreeItem) {
                            ImplementsOpTreeItem io=(ImplementsOpTreeItem)parts.get(pos);
                            implementsOp=io.superclasses;
                            pos++;
                          }
                          while ((parts.size() > pos) && ok) {
                            if (parts.get(pos) instanceof SetMemberTreeItem) {
                              SetMemberTreeItem smt=(SetMemberTreeItem)parts.get(pos);
                              if (smt.object instanceof DirectValueTreeItem) {
                                if (((DirectValueTreeItem)smt.object).value instanceof RegisterNumber) {
                                  if (((RegisterNumber)((DirectValueTreeItem)smt.object).value).number == instanceReg) {
                                    if (smt.value instanceof FunctionTreeItem) {
                                      ((FunctionTreeItem)smt.value).calculatedFunctionName=smt.objectName;
                                      functions.add((FunctionTreeItem)smt.value);
                                    }
 else {
                                      vars.put(smt.objectName,smt.value);
                                    }
                                  }
 else                                   if (((RegisterNumber)((DirectValueTreeItem)smt.object).value).number == classReg) {
                                    if (smt.value instanceof FunctionTreeItem) {
                                      ((FunctionTreeItem)smt.value).calculatedFunctionName=smt.objectName;
                                      staticFunctions.add((FunctionTreeItem)smt.value);
                                    }
 else {
                                      staticVars.put(smt.objectName,smt.value);
                                    }
                                  }
 else {
                                    ok=false;
                                  }
                                }
                              }
 else {
                                ok=false;
                              }
                            }
 else                             if (parts.get(pos) instanceof CallFunctionTreeItem) {
                              if (((CallFunctionTreeItem)parts.get(pos)).functionName instanceof DirectValueTreeItem) {
                                if (((DirectValueTreeItem)((CallFunctionTreeItem)parts.get(pos)).functionName).value.equals(""String_Node_Str"")) {
                                }
 else {
                                  ok=false;
                                }
                              }
 else {
                                ok=false;
                              }
                            }
 else {
                              ok=false;
                              break;
                            }
                            pos++;
                          }
                          if (ok) {
                            List<GraphTargetItem> output2=new ArrayList<GraphTargetItem>();
                            for (int i=0; i < prevCount; i++) {
                              output2.add(output.get(i));
                            }
                            output2.add(new ClassTreeItem(className,extendsOp,implementsOp,functions,vars,staticFunctions,staticVars));
                            return output2;
                          }
                        }
 else {
                          ok=false;
                        }
                      }
 else {
                        ok=false;
                      }
                    }
 else {
                      ok=false;
                    }
                  }
 else {
                    ok=false;
                  }
                }
 else                 if (parts.get(0) instanceof SetMemberTreeItem) {
                  SetMemberTreeItem sm=(SetMemberTreeItem)parts.get(0);
                  if (sm.value instanceof FunctionTreeItem) {
                    FunctionTreeItem f=(FunctionTreeItem)sm.value;
                    if (f.actions.isEmpty()) {
                      if (parts.size() == 2) {
                        if (parts.get(1) instanceof ImplementsOpTreeItem) {
                          ImplementsOpTreeItem iot=(ImplementsOpTreeItem)parts.get(1);
                          implementsOp=iot.superclasses;
                        }
 else {
                          ok=false;
                          break;
                        }
                      }
                      List<GraphTargetItem> output2=new ArrayList<GraphTargetItem>();
                      for (int i=0; i < prevCount; i++) {
                        output2.add(output.get(i));
                      }
                      output2.add(new InterfaceTreeItem(sm.objectName,implementsOp));
                      return output2;
                    }
 else {
                      ok=false;
                    }
                  }
 else {
                    ok=false;
                  }
                }
 else {
                  ok=false;
                }
              }
 else {
                ok=false;
              }
            }
          }
 else {
            ok=false;
          }
        }
 else {
          ok=false;
        }
      }
 else {
        ok=false;
      }
    }
 else {
      prevCount++;
    }
    if (!ok) {
      break;
    }
  }
  return output;
}","public static List<GraphTargetItem> checkClass(List<GraphTargetItem> output){
  if (true) {
    return output;
  }
  List<GraphTargetItem> ret=new ArrayList<GraphTargetItem>();
  List<GraphTargetItem> functions=new ArrayList<GraphTargetItem>();
  List<GraphTargetItem> staticFunctions=new ArrayList<GraphTargetItem>();
  HashMap<GraphTargetItem,GraphTargetItem> vars=new HashMap<GraphTargetItem,GraphTargetItem>();
  HashMap<GraphTargetItem,GraphTargetItem> staticVars=new HashMap<GraphTargetItem,GraphTargetItem>();
  GraphTargetItem className;
  GraphTargetItem extendsOp=null;
  List<GraphTargetItem> implementsOp=new ArrayList<GraphTargetItem>();
  boolean ok=true;
  int prevCount=0;
  for (  GraphTargetItem t : output) {
    if (t instanceof IfItem) {
      IfItem it=(IfItem)t;
      if (it.expression instanceof NotItem) {
        NotItem nti=(NotItem)it.expression;
        if (nti.value instanceof GetMemberTreeItem) {
          if (true) {
            if ((it.onTrue.size() == 1) && (it.onTrue.get(0) instanceof SetMemberTreeItem) && (((SetMemberTreeItem)it.onTrue.get(0)).value instanceof NewObjectTreeItem)) {
            }
 else {
              List<GraphTargetItem> parts=it.onTrue;
              className=getWithoutGlobal((GetMemberTreeItem)nti.value);
              if (parts.size() >= 1) {
                if (parts.get(0) instanceof StoreRegisterTreeItem) {
                  int classReg=((StoreRegisterTreeItem)parts.get(0)).register.number;
                  if ((parts.size() >= 2) && (parts.get(1) instanceof SetMemberTreeItem)) {
                    GraphTargetItem ti1=((SetMemberTreeItem)parts.get(1)).value;
                    GraphTargetItem ti2=((StoreRegisterTreeItem)parts.get(0)).value;
                    if (ti1 == ti2) {
                      if (((SetMemberTreeItem)parts.get(1)).value instanceof FunctionTreeItem) {
                        ((FunctionTreeItem)((SetMemberTreeItem)parts.get(1)).value).calculatedFunctionName=(className instanceof GetMemberTreeItem) ? ((GetMemberTreeItem)className).memberName : className;
                        functions.add((FunctionTreeItem)((SetMemberTreeItem)parts.get(1)).value);
                        int pos=2;
                        if (parts.size() <= pos) {
                          ok=false;
                          break;
                        }
                        if (parts.get(pos) instanceof ExtendsTreeItem) {
                          ExtendsTreeItem et=(ExtendsTreeItem)parts.get(pos);
                          extendsOp=getWithoutGlobal(et.superclass);
                          pos++;
                        }
                        if (parts.size() <= pos) {
                          List<GraphTargetItem> output2=new ArrayList<GraphTargetItem>();
                          for (int i=0; i < prevCount; i++) {
                            output2.add(output.get(i));
                          }
                          output2.add(new ClassTreeItem(className,extendsOp,implementsOp,functions,vars,staticFunctions,staticVars));
                          return output2;
                        }
                        if (parts.get(pos) instanceof StoreRegisterTreeItem) {
                          int instanceReg=-1;
                          if (((StoreRegisterTreeItem)parts.get(pos)).value instanceof GetMemberTreeItem) {
                            GraphTargetItem obj=((GetMemberTreeItem)((StoreRegisterTreeItem)parts.get(pos)).value).object;
                            if (obj instanceof DirectValueTreeItem) {
                              if (((DirectValueTreeItem)obj).value instanceof RegisterNumber) {
                                if (((RegisterNumber)((DirectValueTreeItem)obj).value).number == classReg) {
                                  instanceReg=((StoreRegisterTreeItem)parts.get(pos)).register.number;
                                }
                              }
                            }
                          }
 else                           if (((StoreRegisterTreeItem)parts.get(pos)).value instanceof NewMethodTreeItem) {
                            if (parts.get(pos + 1) instanceof SetMemberTreeItem) {
                              if (((SetMemberTreeItem)parts.get(pos + 1)).value == ((StoreRegisterTreeItem)parts.get(pos)).value) {
                                instanceReg=((StoreRegisterTreeItem)parts.get(pos)).register.number;
                                NewMethodTreeItem nm=(NewMethodTreeItem)((StoreRegisterTreeItem)parts.get(pos)).value;
                                GetMemberTreeItem gm=new GetMemberTreeItem(null,nm.scriptObject,nm.methodName);
                                extendsOp=gm;
                              }
 else {
                                ok=false;
                                break;
                              }
                            }
 else {
                              ok=false;
                              break;
                            }
                            pos++;
                          }
 else                           if (((StoreRegisterTreeItem)parts.get(pos)).value instanceof NewObjectTreeItem) {
                            if (parts.get(pos + 1) instanceof SetMemberTreeItem) {
                              if (((SetMemberTreeItem)parts.get(pos + 1)).value == ((StoreRegisterTreeItem)parts.get(pos)).value) {
                                instanceReg=((StoreRegisterTreeItem)parts.get(pos)).register.number;
                                NewObjectTreeItem nm=(NewObjectTreeItem)((StoreRegisterTreeItem)parts.get(pos)).value;
                                extendsOp=new GetVariableTreeItem(null,nm.objectName);
                              }
 else {
                                ok=false;
                                break;
                              }
                            }
 else {
                              ok=false;
                              break;
                            }
                            pos++;
                          }
 else {
                            ok=false;
                            break;
                          }
                          if (instanceReg == -1) {
                            ok=false;
                            break;
                          }
                          pos++;
                          if (parts.size() <= pos) {
                            ok=false;
                            break;
                          }
                          if (parts.get(pos) instanceof ImplementsOpTreeItem) {
                            ImplementsOpTreeItem io=(ImplementsOpTreeItem)parts.get(pos);
                            implementsOp=io.superclasses;
                            pos++;
                          }
                          while ((parts.size() > pos) && ok) {
                            if (parts.get(pos) instanceof SetMemberTreeItem) {
                              SetMemberTreeItem smt=(SetMemberTreeItem)parts.get(pos);
                              if (smt.object instanceof DirectValueTreeItem) {
                                if (((DirectValueTreeItem)smt.object).value instanceof RegisterNumber) {
                                  if (((RegisterNumber)((DirectValueTreeItem)smt.object).value).number == instanceReg) {
                                    if (smt.value instanceof FunctionTreeItem) {
                                      ((FunctionTreeItem)smt.value).calculatedFunctionName=smt.objectName;
                                      functions.add((FunctionTreeItem)smt.value);
                                    }
 else {
                                      vars.put(smt.objectName,smt.value);
                                    }
                                  }
 else                                   if (((RegisterNumber)((DirectValueTreeItem)smt.object).value).number == classReg) {
                                    if (smt.value instanceof FunctionTreeItem) {
                                      ((FunctionTreeItem)smt.value).calculatedFunctionName=smt.objectName;
                                      staticFunctions.add((FunctionTreeItem)smt.value);
                                    }
 else {
                                      staticVars.put(smt.objectName,smt.value);
                                    }
                                  }
 else {
                                    ok=false;
                                  }
                                }
                              }
 else {
                                ok=false;
                              }
                            }
 else                             if (parts.get(pos) instanceof CallFunctionTreeItem) {
                              if (((CallFunctionTreeItem)parts.get(pos)).functionName instanceof DirectValueTreeItem) {
                                if (((DirectValueTreeItem)((CallFunctionTreeItem)parts.get(pos)).functionName).value.equals(""String_Node_Str"")) {
                                }
 else {
                                  ok=false;
                                }
                              }
 else {
                                ok=false;
                              }
                            }
 else {
                              ok=false;
                              break;
                            }
                            pos++;
                          }
                          if (ok) {
                            List<GraphTargetItem> output2=new ArrayList<GraphTargetItem>();
                            for (int i=0; i < prevCount; i++) {
                              output2.add(output.get(i));
                            }
                            output2.add(new ClassTreeItem(className,extendsOp,implementsOp,functions,vars,staticFunctions,staticVars));
                            return output2;
                          }
                        }
 else {
                          ok=false;
                        }
                      }
 else {
                        ok=false;
                      }
                    }
 else {
                      ok=false;
                    }
                  }
 else {
                    ok=false;
                  }
                }
 else                 if (parts.get(0) instanceof SetMemberTreeItem) {
                  SetMemberTreeItem sm=(SetMemberTreeItem)parts.get(0);
                  if (sm.value instanceof FunctionTreeItem) {
                    FunctionTreeItem f=(FunctionTreeItem)sm.value;
                    if (f.actions.isEmpty()) {
                      if (parts.size() == 2) {
                        if (parts.get(1) instanceof ImplementsOpTreeItem) {
                          ImplementsOpTreeItem iot=(ImplementsOpTreeItem)parts.get(1);
                          implementsOp=iot.superclasses;
                        }
 else {
                          ok=false;
                          break;
                        }
                      }
                      List<GraphTargetItem> output2=new ArrayList<GraphTargetItem>();
                      for (int i=0; i < prevCount; i++) {
                        output2.add(output.get(i));
                      }
                      output2.add(new InterfaceTreeItem(sm.objectName,implementsOp));
                      return output2;
                    }
 else {
                      ok=false;
                    }
                  }
 else {
                    ok=false;
                  }
                }
 else {
                  ok=false;
                }
              }
 else {
                ok=false;
              }
            }
          }
 else {
            ok=false;
          }
        }
 else {
          ok=false;
        }
      }
 else {
        ok=false;
      }
    }
 else {
      prevCount++;
    }
    if (!ok) {
      break;
    }
  }
  return output;
}",0.9984460963420267
62213,"private void decompileMethod(String methodName,String expectedResult,boolean isStatic){
  int bodyIndex=abc.findMethodBodyByName(clsIndex,methodName);
  assertTrue(bodyIndex > -1);
  String actualResult=abc.bodies[bodyIndex].toString(methodName,false,isStatic,clsIndex,abc,abc.constants,abc.method_info,new Stack<GraphTargetItem>(),false,false,new ArrayList<String>(),abc.instance_info[clsIndex].instance_traits);
  actualResult=actualResult.replaceAll(""String_Node_Str"",""String_Node_Str"");
  expectedResult=expectedResult.replaceAll(""String_Node_Str"",""String_Node_Str"");
  assertEquals(expectedResult,actualResult);
}","private void decompileMethod(String methodName,String expectedResult,boolean isStatic){
  int bodyIndex=abc.findMethodBodyByName(clsIndex,methodName);
  assertTrue(bodyIndex > -1);
  String actualResult=abc.bodies[bodyIndex].toString(methodName,false,isStatic,clsIndex,abc,abc.constants,abc.method_info,new Stack<GraphTargetItem>(),false,false,new ArrayList<String>(),abc.instance_info[clsIndex].instance_traits);
  actualResult=actualResult.replaceAll(""String_Node_Str"",""String_Node_Str"");
  expectedResult=expectedResult.replaceAll(""String_Node_Str"",""String_Node_Str"");
  assertEquals(actualResult,expectedResult);
}",0.9660194174757282
62214,"@Override public void translate(Stack<GraphTargetItem> stack,List<GraphTargetItem> output,java.util.HashMap<Integer,String> regNames,HashMap<String,GraphTargetItem> variables,HashMap<String,GraphTargetItem> functions){
  GraphTargetItem name=stack.pop();
  GraphTargetItem computedVal=variables.get(Highlighting.stripHilights(name.toStringNoQuotes(null)));
  GetVariableTreeItem gvt=new GetVariableTreeItem(this,name);
  gvt.setComputedValue(computedVal);
  stack.push(gvt);
}","@Override public void translate(Stack<GraphTargetItem> stack,List<GraphTargetItem> output,java.util.HashMap<Integer,String> regNames,HashMap<String,GraphTargetItem> variables,HashMap<String,GraphTargetItem> functions){
  GraphTargetItem name=stack.pop();
  GraphTargetItem computedVal=variables.get(Highlighting.stripHilights(name.toStringNoQuotes((ConstantPool)null)));
  GetVariableTreeItem gvt=new GetVariableTreeItem(this,name);
  gvt.setComputedValue(computedVal);
  stack.push(gvt);
}",0.9855072463768116
62215,"@Override public void translate(Stack<GraphTargetItem> stack,List<GraphTargetItem> output,java.util.HashMap<Integer,String> regNames,HashMap<String,GraphTargetItem> variables,HashMap<String,GraphTargetItem> functions){
  GraphTargetItem value=stack.pop();
  GraphTargetItem name=stack.pop();
  SetVariableTreeItem svt=new SetVariableTreeItem(this,name,value);
  variables.put(Highlighting.stripHilights(name.toStringNoQuotes(null)),value);
  output.add(svt);
}","@Override public void translate(Stack<GraphTargetItem> stack,List<GraphTargetItem> output,java.util.HashMap<Integer,String> regNames,HashMap<String,GraphTargetItem> variables,HashMap<String,GraphTargetItem> functions){
  GraphTargetItem value=stack.pop();
  GraphTargetItem name=stack.pop();
  SetVariableTreeItem svt=new SetVariableTreeItem(this,name,value);
  variables.put(Highlighting.stripHilights(name.toStringNoQuotes((ConstantPool)null)),value);
  output.add(svt);
}",0.9850107066381156
62216,"@Override public void translate(Stack<GraphTargetItem> stack,List<GraphTargetItem> output,java.util.HashMap<Integer,String> regNames,HashMap<String,GraphTargetItem> variables,HashMap<String,GraphTargetItem> functions){
  GraphTargetItem functionName=stack.pop();
  long numArgs=popLong(stack);
  List<GraphTargetItem> args=new ArrayList<GraphTargetItem>();
  for (long l=0; l < numArgs; l++) {
    args.add(stack.pop());
  }
  CallFunctionTreeItem cft=new CallFunctionTreeItem(this,functionName,args);
  cft.calculatedFunction=functions.get(Highlighting.stripHilights(functionName.toStringNoQuotes(null)));
  stack.push(cft);
}","@Override public void translate(Stack<GraphTargetItem> stack,List<GraphTargetItem> output,java.util.HashMap<Integer,String> regNames,HashMap<String,GraphTargetItem> variables,HashMap<String,GraphTargetItem> functions){
  GraphTargetItem functionName=stack.pop();
  long numArgs=popLong(stack);
  List<GraphTargetItem> args=new ArrayList<GraphTargetItem>();
  for (long l=0; l < numArgs; l++) {
    args.add(stack.pop());
  }
  CallFunctionTreeItem cft=new CallFunctionTreeItem(this,functionName,args);
  cft.calculatedFunction=functions.get(Highlighting.stripHilights(functionName.toStringNoQuotes((ConstantPool)null)));
  stack.push(cft);
}",0.9889589905362776
62217,"@Override public void translate(Stack<GraphTargetItem> stack,List<GraphTargetItem> output,java.util.HashMap<Integer,String> regNames,HashMap<String,GraphTargetItem> variables,HashMap<String,GraphTargetItem> functions){
  GraphTargetItem value=stack.pop();
  GraphTargetItem name=stack.pop();
  variables.put(Highlighting.stripHilights(name.toStringNoQuotes(null)),value);
  output.add(new DefineLocalTreeItem(this,name,value));
}","@Override public void translate(Stack<GraphTargetItem> stack,List<GraphTargetItem> output,java.util.HashMap<Integer,String> regNames,HashMap<String,GraphTargetItem> variables,HashMap<String,GraphTargetItem> functions){
  GraphTargetItem value=stack.pop();
  GraphTargetItem name=stack.pop();
  variables.put(Highlighting.stripHilights(name.toStringNoQuotes((ConstantPool)null)),value);
  output.add(new DefineLocalTreeItem(this,name,value));
}",0.9839449541284404
62218,"/** 
 * Reads list of actions from the stream. Reading ends with ActionEndFlag(=0) or end of the stream.
 * @return List of actions
 * @throws IOException
 */
public static List<Action> readActionList(ReReadableInputStream rri,int version,int ip) throws IOException {
  List<Action> retdups=new ArrayList<Action>();
  ConstantPool cpool=new ConstantPool();
  Stack<GraphTargetItem> stack=new Stack<GraphTargetItem>();
  List localData=Helper.toList(new HashMap<Integer,String>(),new HashMap<String,GraphTargetItem>(),new HashMap<String,GraphTargetItem>());
  SWFInputStream sis=new SWFInputStream(rri,version);
  boolean goesPrev=false;
  int method=1;
  try {
    goesPrev=readActionListAtPos(false,localData,stack,cpool,sis,rri,ip,retdups,ip);
  }
 catch (  Exception ex) {
    method=2;
    goesPrev=readActionListAtPos(true,localData,stack,cpool,sis,rri,ip,retdups,ip);
  }
  if (goesPrev) {
  }
 else {
    for (int i=0; i < ip; i++) {
      retdups.remove(0);
    }
  }
  List<Action> ret=new ArrayList<Action>();
  Action last=null;
  for (  Action a : retdups) {
    if (a != last) {
      ret.add(a);
    }
    last=a;
  }
  List<ConstantPool> pools=new ArrayList<ConstantPool>();
  pools=getConstantPool(new ActionGraphSource(ret,version,new HashMap<Integer,String>(),new HashMap<String,GraphTargetItem>(),new HashMap<String,GraphTargetItem>()),ip);
  if (pools.size() == 1) {
    Action.setConstantPool(ret,pools.get(0));
  }
  if (goesPrev && (!DEOBFUSCATION_ALL_CODE_IN_PREVIOUS_TAG)) {
    ActionJump aj=new ActionJump(ip);
    int skip=aj.getBytes(version).length;
    for (    Action a : ret) {
      a.setAddress(a.getAddress() + skip,version);
    }
    ret.add(0,aj);
  }
  String s=null;
  try {
    s=Highlighting.stripHilights(Action.actionsToString(ret,null,version,false));
    ret=ASMParser.parse(false,new ByteArrayInputStream(s.getBytes()),SWF.DEFAULT_VERSION);
  }
 catch (  ParseException ex) {
    Logger.getLogger(SWFInputStream.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
  }
  return ret;
}","/** 
 * Reads list of actions from the stream. Reading ends with ActionEndFlag(=0) or end of the stream.
 * @return List of actions
 * @throws IOException
 */
public static List<Action> readActionList(ReReadableInputStream rri,int version,int ip) throws IOException {
  List<Action> retdups=new ArrayList<Action>();
  ConstantPool cpool=new ConstantPool();
  Stack<GraphTargetItem> stack=new Stack<GraphTargetItem>();
  List localData=Helper.toList(new HashMap<Integer,String>(),new HashMap<String,GraphTargetItem>(),new HashMap<String,GraphTargetItem>());
  SWFInputStream sis=new SWFInputStream(rri,version);
  boolean goesPrev=false;
  int method=1;
  try {
    goesPrev=readActionListAtPos(false,localData,stack,cpool,sis,rri,ip,retdups,ip);
  }
 catch (  Exception ex) {
    method=2;
    goesPrev=readActionListAtPos(true,localData,stack,cpool,sis,rri,ip,retdups,ip);
  }
  if (goesPrev) {
  }
 else {
    if (!retdups.isEmpty()) {
      for (int i=0; i < ip; i++) {
        retdups.remove(0);
      }
    }
  }
  List<Action> ret=new ArrayList<Action>();
  Action last=null;
  for (  Action a : retdups) {
    if (a != last) {
      ret.add(a);
    }
    last=a;
  }
  List<ConstantPool> pools=new ArrayList<ConstantPool>();
  pools=getConstantPool(new ActionGraphSource(ret,version,new HashMap<Integer,String>(),new HashMap<String,GraphTargetItem>(),new HashMap<String,GraphTargetItem>()),ip);
  if (pools.size() == 1) {
    Action.setConstantPool(ret,pools.get(0));
  }
  if (goesPrev && (!DEOBFUSCATION_ALL_CODE_IN_PREVIOUS_TAG)) {
    ActionJump aj=new ActionJump(ip);
    int skip=aj.getBytes(version).length;
    for (    Action a : ret) {
      a.setAddress(a.getAddress() + skip,version);
    }
    ret.add(0,aj);
  }
  String s=null;
  try {
    s=Highlighting.stripHilights(Action.actionsToString(ret,null,version,false));
    ret=ASMParser.parse(false,new ByteArrayInputStream(s.getBytes()),SWF.DEFAULT_VERSION);
  }
 catch (  ParseException ex) {
    Logger.getLogger(SWFInputStream.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
  }
  return ret;
}",0.9897909577053962
62219,"@Override public void translate(Stack<GraphTargetItem> stack,List<GraphTargetItem> output,java.util.HashMap<Integer,String> regNames,HashMap<String,GraphTargetItem> variables,HashMap<String,GraphTargetItem> functions){
  GraphTargetItem name=stack.pop();
  GraphTargetItem computedVal=variables.get(Highlighting.stripHilights(name.toStringNoQuotes()));
  GetVariableTreeItem gvt=new GetVariableTreeItem(this,name);
  gvt.setComputedValue(computedVal);
  stack.push(gvt);
}","@Override public void translate(Stack<GraphTargetItem> stack,List<GraphTargetItem> output,java.util.HashMap<Integer,String> regNames,HashMap<String,GraphTargetItem> variables,HashMap<String,GraphTargetItem> functions){
  GraphTargetItem name=stack.pop();
  GraphTargetItem computedVal=variables.get(Highlighting.stripHilights(name.toStringNoQuotes(null)));
  GetVariableTreeItem gvt=new GetVariableTreeItem(this,name);
  gvt.setComputedValue(computedVal);
  stack.push(gvt);
}",0.9957805907172996
62220,"@Override public void translate(Stack<GraphTargetItem> stack,List<GraphTargetItem> output,java.util.HashMap<Integer,String> regNames,HashMap<String,GraphTargetItem> variables,HashMap<String,GraphTargetItem> functions){
  GraphTargetItem value=stack.pop();
  GraphTargetItem name=stack.pop();
  SetVariableTreeItem svt=new SetVariableTreeItem(this,name,value);
  variables.put(Highlighting.stripHilights(name.toStringNoQuotes(regNames,variables)),value);
  output.add(svt);
}","@Override public void translate(Stack<GraphTargetItem> stack,List<GraphTargetItem> output,java.util.HashMap<Integer,String> regNames,HashMap<String,GraphTargetItem> variables,HashMap<String,GraphTargetItem> functions){
  GraphTargetItem value=stack.pop();
  GraphTargetItem name=stack.pop();
  SetVariableTreeItem svt=new SetVariableTreeItem(this,name,value);
  variables.put(Highlighting.stripHilights(name.toStringNoQuotes(null)),value);
  output.add(svt);
}",0.9764453961456104
62221,"@Override public void translate(Stack<GraphTargetItem> stack,List<GraphTargetItem> output,java.util.HashMap<Integer,String> regNames,HashMap<String,GraphTargetItem> variables,HashMap<String,GraphTargetItem> functions){
  GraphTargetItem functionName=stack.pop();
  long numArgs=popLong(stack);
  List<GraphTargetItem> args=new ArrayList<GraphTargetItem>();
  for (long l=0; l < numArgs; l++) {
    args.add(stack.pop());
  }
  CallFunctionTreeItem cft=new CallFunctionTreeItem(this,functionName,args);
  cft.calculatedFunction=functions.get(Highlighting.stripHilights(functionName.toStringNoQuotes(variables,functions)));
  stack.push(cft);
}","@Override public void translate(Stack<GraphTargetItem> stack,List<GraphTargetItem> output,java.util.HashMap<Integer,String> regNames,HashMap<String,GraphTargetItem> variables,HashMap<String,GraphTargetItem> functions){
  GraphTargetItem functionName=stack.pop();
  long numArgs=popLong(stack);
  List<GraphTargetItem> args=new ArrayList<GraphTargetItem>();
  for (long l=0; l < numArgs; l++) {
    args.add(stack.pop());
  }
  CallFunctionTreeItem cft=new CallFunctionTreeItem(this,functionName,args);
  cft.calculatedFunction=functions.get(Highlighting.stripHilights(functionName.toStringNoQuotes(null)));
  stack.push(cft);
}",0.9818754925137904
62222,"@Override public void translate(Stack<GraphTargetItem> stack,List<GraphTargetItem> output,java.util.HashMap<Integer,String> regNames,HashMap<String,GraphTargetItem> variables,HashMap<String,GraphTargetItem> functions){
  GraphTargetItem value=stack.pop();
  GraphTargetItem name=stack.pop();
  variables.put(Highlighting.stripHilights(name.toStringNoQuotes(regNames,variables,functions)),value);
  output.add(new DefineLocalTreeItem(this,name,value));
}","@Override public void translate(Stack<GraphTargetItem> stack,List<GraphTargetItem> output,java.util.HashMap<Integer,String> regNames,HashMap<String,GraphTargetItem> variables,HashMap<String,GraphTargetItem> functions){
  GraphTargetItem value=stack.pop();
  GraphTargetItem name=stack.pop();
  variables.put(Highlighting.stripHilights(name.toStringNoQuotes(null)),value);
  output.add(new DefineLocalTreeItem(this,name,value));
}",0.963718820861678
62223,"public static void stopWork(){
  working=false;
  if (abcMainFrame != null) {
    abcMainFrame.setStatus(""String_Node_Str"");
  }
  if (actionMainFrame != null) {
    actionMainFrame.setStatus(""String_Node_Str"");
  }
}","public static void stopWork(){
  working=false;
  if (abcMainFrame != null) {
    abcMainFrame.setStatus(""String_Node_Str"");
  }
  if (actionMainFrame != null) {
    actionMainFrame.setStatus(""String_Node_Str"");
  }
  if (loadingDialog != null) {
    loadingDialog.setDetail(""String_Node_Str"");
  }
}",0.839458413926499
62224,"public static void startWork(String name){
  working=true;
  if (abcMainFrame != null) {
    abcMainFrame.setStatus(name);
  }
  if (actionMainFrame != null) {
    actionMainFrame.setStatus(name);
  }
  if (Main.isCommandLineMode()) {
    System.out.println(name);
  }
}","public static void startWork(String name){
  working=true;
  if (abcMainFrame != null) {
    abcMainFrame.setStatus(name);
  }
  if (actionMainFrame != null) {
    actionMainFrame.setStatus(name);
  }
  if (loadingDialog != null) {
    loadingDialog.setDetail(name);
  }
  if (Main.isCommandLineMode()) {
    System.out.println(name);
  }
}",0.8852459016393442
62225,"@Override protected Object doInBackground() throws Exception {
  try {
    swf=parseSWF(Main.file);
    FileInputStream fis=new FileInputStream(file);
    DEBUG_COPY=true;
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      swf.saveTo(baos);
    }
 catch (    NotSameException nse) {
      Logger.getLogger(Main.class.getName()).log(Level.FINE,null,nse);
      JOptionPane.showMessageDialog(null,""String_Node_Str"");
    }
    DEBUG_COPY=false;
  }
 catch (  Exception ex) {
    Logger.getLogger(Main.class.getName()).log(Level.SEVERE,null,ex);
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    loadingDialog.setVisible(false);
    return false;
  }
  List<Tag> listAbc=new ArrayList<Tag>();
  for (  Tag t : swf.tags) {
    if (t instanceof DoABCTag) {
      listAbc.add(t);
    }
  }
  if (false) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    loadingDialog.setVisible(false);
    if (!openFileDialog()) {
      System.exit(0);
    }
  }
 else {
    if (listAbc.size() > 0) {
      List<DoABCTag> listAbc2=new ArrayList<DoABCTag>();
      for (      Tag tag : listAbc) {
        listAbc2.add((DoABCTag)tag);
      }
      abcMainFrame=new com.jpexs.asdec.abc.gui.MainFrame(listAbc2);
      abcMainFrame.display();
    }
 else {
      actionMainFrame=new com.jpexs.asdec.action.gui.MainFrame(swf.tags);
      actionMainFrame.display();
    }
  }
  loadingDialog.setVisible(false);
  return true;
}","@Override protected Object doInBackground() throws Exception {
  try {
    Main.startWork(""String_Node_Str"");
    swf=parseSWF(Main.file);
    FileInputStream fis=new FileInputStream(file);
    DEBUG_COPY=true;
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    try {
      swf.saveTo(baos);
    }
 catch (    NotSameException nse) {
      Logger.getLogger(Main.class.getName()).log(Level.FINE,null,nse);
      JOptionPane.showMessageDialog(null,""String_Node_Str"");
    }
    DEBUG_COPY=false;
  }
 catch (  Exception ex) {
    Logger.getLogger(Main.class.getName()).log(Level.SEVERE,null,ex);
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    loadingDialog.setVisible(false);
    return false;
  }
  List<Tag> listAbc=new ArrayList<Tag>();
  for (  Tag t : swf.tags) {
    if (t instanceof DoABCTag) {
      listAbc.add(t);
    }
  }
  if (false) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"");
    loadingDialog.setVisible(false);
    if (!openFileDialog()) {
      System.exit(0);
    }
  }
 else {
    if (listAbc.size() > 0) {
      List<DoABCTag> listAbc2=new ArrayList<DoABCTag>();
      for (      Tag tag : listAbc) {
        listAbc2.add((DoABCTag)tag);
      }
      abcMainFrame=new com.jpexs.asdec.abc.gui.MainFrame(listAbc2);
      abcMainFrame.display();
    }
 else {
      actionMainFrame=new com.jpexs.asdec.action.gui.MainFrame(swf.tags);
      actionMainFrame.display();
    }
  }
  loadingDialog.setVisible(false);
  return true;
}",0.9867482161060144
62226,"private void clearTemporaryRegisters(List<TreeItem> output){
  for (int i=0; i < output.size(); i++) {
    if (output.get(i) instanceof SetLocalTreeItem) {
      if (isKilled(((SetLocalTreeItem)output.get(i)).regIndex,0,code.size() - 1)) {
        output.remove(i);
        i--;
      }
    }
  }
}","public void clearTemporaryRegisters(List<TreeItem> output){
  for (int i=0; i < output.size(); i++) {
    if (output.get(i) instanceof SetLocalTreeItem) {
      if (isKilled(((SetLocalTreeItem)output.get(i)).regIndex,0,code.size() - 1)) {
        output.remove(i);
        i--;
      }
    }
 else     if (output.get(i) instanceof WithTreeItem) {
      clearTemporaryRegisters(((WithTreeItem)output.get(i)).items);
    }
  }
}",0.8066298342541437
62227,"public MainFrame(List<DoABCTag> list){
  View.setWindowIcon(this);
  DefaultSyntaxKit.initKit();
  this.list=list;
  setSize(1024,600);
  this.abc=list.get(listIndex).abc;
  getContentPane().setLayout(new BorderLayout());
  decompiledTextArea=new DecompiledEditorPane();
  decompiledScrollPane=new JScrollPane(decompiledTextArea);
  detailPanel=new DetailPanel();
  JPanel panB=new JPanel();
  panB.setLayout(new BorderLayout());
  panB.add(decompiledScrollPane,BorderLayout.CENTER);
  panB.add(decLabel,BorderLayout.NORTH);
  decLabel.setHorizontalAlignment(SwingConstants.CENTER);
  decLabel.setBorder(new BevelBorder(BevelBorder.RAISED));
  splitPane1=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,panB,detailPanel);
  decompiledTextArea.setContentType(""String_Node_Str"");
  JPanel pan2=new JPanel();
  pan2.setLayout(new BorderLayout());
  pan2.add((abcComboBox=new JComboBox(new ABCComboBoxModel(list))),BorderLayout.NORTH);
  navigator=new TraitsList();
  navigator.setABC(list,abc);
  JPanel navPanel=new JPanel(new BorderLayout());
  JLabel traitsLabel=new JLabel(""String_Node_Str"");
  navPanel.add(traitsLabel,BorderLayout.NORTH);
  traitsLabel.setBorder(new BevelBorder(BevelBorder.RAISED));
  navPanel.add(new JScrollPane(navigator),BorderLayout.CENTER);
  splitPane2=new JSplitPane(JSplitPane.VERTICAL_SPLIT,new JScrollPane(classTree=new ClassesListTree(list)),navPanel);
  JTabbedPane tabbedPane=new JTabbedPane();
  tabbedPane.addTab(""String_Node_Str"",splitPane2);
  pan2.add(tabbedPane,BorderLayout.CENTER);
  abcComboBox.addItemListener(this);
  splitPane3=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,pan2,splitPane1);
  pan2.setPreferredSize(new Dimension(300,200));
  loadingPanel.setPreferredSize(new Dimension(30,30));
  statusPanel=new JPanel();
  statusPanel.setPreferredSize(new Dimension(1,30));
  statusPanel.setBorder(new BevelBorder(BevelBorder.LOWERED));
  statusPanel.setLayout(new BorderLayout());
  statusPanel.add(loadingPanel,BorderLayout.WEST);
  statusPanel.add(statusLabel,BorderLayout.CENTER);
  loadingPanel.setVisible(false);
  getContentPane().add(splitPane3,BorderLayout.CENTER);
  getContentPane().add(statusPanel,BorderLayout.SOUTH);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      if (Main.proxyFrame != null) {
        if (Main.proxyFrame.isVisible()) {
          return;
        }
      }
      Main.exit();
    }
  }
);
  setTitle(Main.applicationName + ""String_Node_Str"" + Main.getFileTitle());
  JMenuBar menuBar=new JMenuBar();
  JMenu menuFile=new JMenu(""String_Node_Str"");
  JMenuItem miOpen=new JMenuItem(""String_Node_Str"");
  miOpen.setIcon(new ImageIcon(View.loadImage(""String_Node_Str"")));
  miOpen.setActionCommand(""String_Node_Str"");
  miOpen.addActionListener(this);
  JMenuItem miSave=new JMenuItem(""String_Node_Str"");
  miSave.setIcon(new ImageIcon(View.loadImage(""String_Node_Str"")));
  miSave.setActionCommand(""String_Node_Str"");
  miSave.addActionListener(this);
  JMenuItem miSaveAs=new JMenuItem(""String_Node_Str"");
  miSaveAs.setIcon(new ImageIcon(View.loadImage(""String_Node_Str"")));
  miSaveAs.setActionCommand(""String_Node_Str"");
  miSaveAs.addActionListener(this);
  JMenuItem miExport=new JMenuItem(""String_Node_Str"");
  miExport.setIcon(new ImageIcon(View.loadImage(""String_Node_Str"")));
  miExport.setActionCommand(""String_Node_Str"");
  miExport.addActionListener(this);
  JMenuItem miExportPCode=new JMenuItem(""String_Node_Str"");
  miExportPCode.setIcon(new ImageIcon(View.loadImage(""String_Node_Str"")));
  miExportPCode.setActionCommand(""String_Node_Str"");
  miExportPCode.addActionListener(this);
  menuFile.add(miOpen);
  menuFile.add(miSave);
  menuFile.add(miSaveAs);
  menuFile.add(miExport);
  menuFile.add(miExportPCode);
  menuFile.addSeparator();
  JMenuItem miClose=new JMenuItem(""String_Node_Str"");
  miClose.setIcon(new ImageIcon(View.loadImage(""String_Node_Str"")));
  miClose.setActionCommand(""String_Node_Str"");
  miClose.addActionListener(this);
  menuFile.add(miClose);
  menuBar.add(menuFile);
  JMenu menuDeobfuscation=new JMenu(""String_Node_Str"");
  JCheckBoxMenuItem miSubLimiter=new JCheckBoxMenuItem(""String_Node_Str"");
  miSubLimiter.setActionCommand(""String_Node_Str"");
  miSubLimiter.addActionListener(this);
  JMenuItem miRenameIdentifiers=new JMenuItem(""String_Node_Str"");
  miRenameIdentifiers.setActionCommand(""String_Node_Str"");
  miRenameIdentifiers.addActionListener(this);
  menuDeobfuscation.add(miSubLimiter);
  menuDeobfuscation.add(miRenameIdentifiers);
  JMenu menuTools=new JMenu(""String_Node_Str"");
  JMenuItem miProxy=new JMenuItem(""String_Node_Str"");
  miProxy.setActionCommand(""String_Node_Str"");
  miProxy.setIcon(new ImageIcon(View.loadImage(""String_Node_Str"")));
  miProxy.addActionListener(this);
  menuTools.add(miProxy);
  menuTools.add(menuDeobfuscation);
  menuBar.add(menuTools);
  JMenu menuHelp=new JMenu(""String_Node_Str"");
  JMenuItem miAbout=new JMenuItem(""String_Node_Str"");
  miAbout.setActionCommand(""String_Node_Str"");
  miAbout.addActionListener(this);
  JMenuItem miCheckUpdates=new JMenuItem(""String_Node_Str"");
  miCheckUpdates.setActionCommand(""String_Node_Str"");
  miCheckUpdates.addActionListener(this);
  menuHelp.add(miAbout);
  menuHelp.add(miCheckUpdates);
  menuBar.add(menuHelp);
  setJMenuBar(menuBar);
  JPanel panConstants=new JPanel();
  panConstants.setLayout(new BorderLayout());
  constantTypeList=new JComboBox(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  constantTable=new JTable();
  autoResizeColWidth(constantTable,new UIntTableModel(abc));
  constantTable.setAutoCreateRowSorter(true);
  final List<DoABCTag> inlist=list;
  constantTable.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        if (constantTypeList.getSelectedIndex() == 7) {
          int rowIndex=constantTable.getSelectedRow();
          if (rowIndex == -1) {
            return;
          }
          int multinameIndex=constantTable.convertRowIndexToModel(rowIndex);
          if (multinameIndex > 0) {
            UsageFrame usageFrame=new UsageFrame(inlist,abc,multinameIndex);
            usageFrame.setVisible(true);
          }
        }
      }
    }
  }
);
  constantTypeList.addItemListener(this);
  panConstants.add(constantTypeList,BorderLayout.NORTH);
  panConstants.add(new JScrollPane(constantTable),BorderLayout.CENTER);
  tabbedPane.addTab(""String_Node_Str"",panConstants);
  View.centerScreen(this);
}","public MainFrame(List<DoABCTag> list){
  View.setWindowIcon(this);
  DefaultSyntaxKit.initKit();
  this.list=list;
  setSize(1024,600);
  this.abc=list.get(listIndex).abc;
  getContentPane().setLayout(new BorderLayout());
  decompiledTextArea=new DecompiledEditorPane();
  decompiledScrollPane=new JScrollPane(decompiledTextArea);
  detailPanel=new DetailPanel();
  JPanel panB=new JPanel();
  panB.setLayout(new BorderLayout());
  panB.add(decompiledScrollPane,BorderLayout.CENTER);
  panB.add(decLabel,BorderLayout.NORTH);
  decLabel.setHorizontalAlignment(SwingConstants.CENTER);
  decLabel.setBorder(new BevelBorder(BevelBorder.RAISED));
  splitPane1=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,panB,detailPanel);
  decompiledTextArea.setContentType(""String_Node_Str"");
  JPanel pan2=new JPanel();
  pan2.setLayout(new BorderLayout());
  pan2.add((abcComboBox=new JComboBox(new ABCComboBoxModel(list))),BorderLayout.NORTH);
  navigator=new TraitsList();
  navigator.setABC(list,abc);
  JPanel navPanel=new JPanel(new BorderLayout());
  JLabel traitsLabel=new JLabel(""String_Node_Str"");
  navPanel.add(traitsLabel,BorderLayout.NORTH);
  traitsLabel.setBorder(new BevelBorder(BevelBorder.RAISED));
  navPanel.add(new JScrollPane(navigator),BorderLayout.CENTER);
  Main.startWork(""String_Node_Str"");
  splitPane2=new JSplitPane(JSplitPane.VERTICAL_SPLIT,new JScrollPane(classTree=new ClassesListTree(list)),navPanel);
  Main.startWork(""String_Node_Str"");
  JTabbedPane tabbedPane=new JTabbedPane();
  tabbedPane.addTab(""String_Node_Str"",splitPane2);
  pan2.add(tabbedPane,BorderLayout.CENTER);
  abcComboBox.addItemListener(this);
  splitPane3=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,pan2,splitPane1);
  pan2.setPreferredSize(new Dimension(300,200));
  loadingPanel.setPreferredSize(new Dimension(30,30));
  statusPanel=new JPanel();
  statusPanel.setPreferredSize(new Dimension(1,30));
  statusPanel.setBorder(new BevelBorder(BevelBorder.LOWERED));
  statusPanel.setLayout(new BorderLayout());
  statusPanel.add(loadingPanel,BorderLayout.WEST);
  statusPanel.add(statusLabel,BorderLayout.CENTER);
  loadingPanel.setVisible(false);
  getContentPane().add(splitPane3,BorderLayout.CENTER);
  getContentPane().add(statusPanel,BorderLayout.SOUTH);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      if (Main.proxyFrame != null) {
        if (Main.proxyFrame.isVisible()) {
          return;
        }
      }
      Main.exit();
    }
  }
);
  setTitle(Main.applicationName + ""String_Node_Str"" + Main.getFileTitle());
  JMenuBar menuBar=new JMenuBar();
  JMenu menuFile=new JMenu(""String_Node_Str"");
  JMenuItem miOpen=new JMenuItem(""String_Node_Str"");
  miOpen.setIcon(new ImageIcon(View.loadImage(""String_Node_Str"")));
  miOpen.setActionCommand(""String_Node_Str"");
  miOpen.addActionListener(this);
  JMenuItem miSave=new JMenuItem(""String_Node_Str"");
  miSave.setIcon(new ImageIcon(View.loadImage(""String_Node_Str"")));
  miSave.setActionCommand(""String_Node_Str"");
  miSave.addActionListener(this);
  JMenuItem miSaveAs=new JMenuItem(""String_Node_Str"");
  miSaveAs.setIcon(new ImageIcon(View.loadImage(""String_Node_Str"")));
  miSaveAs.setActionCommand(""String_Node_Str"");
  miSaveAs.addActionListener(this);
  JMenuItem miExport=new JMenuItem(""String_Node_Str"");
  miExport.setIcon(new ImageIcon(View.loadImage(""String_Node_Str"")));
  miExport.setActionCommand(""String_Node_Str"");
  miExport.addActionListener(this);
  JMenuItem miExportPCode=new JMenuItem(""String_Node_Str"");
  miExportPCode.setIcon(new ImageIcon(View.loadImage(""String_Node_Str"")));
  miExportPCode.setActionCommand(""String_Node_Str"");
  miExportPCode.addActionListener(this);
  menuFile.add(miOpen);
  menuFile.add(miSave);
  menuFile.add(miSaveAs);
  menuFile.add(miExport);
  menuFile.add(miExportPCode);
  menuFile.addSeparator();
  JMenuItem miClose=new JMenuItem(""String_Node_Str"");
  miClose.setIcon(new ImageIcon(View.loadImage(""String_Node_Str"")));
  miClose.setActionCommand(""String_Node_Str"");
  miClose.addActionListener(this);
  menuFile.add(miClose);
  menuBar.add(menuFile);
  JMenu menuDeobfuscation=new JMenu(""String_Node_Str"");
  JCheckBoxMenuItem miSubLimiter=new JCheckBoxMenuItem(""String_Node_Str"");
  miSubLimiter.setActionCommand(""String_Node_Str"");
  miSubLimiter.addActionListener(this);
  JMenuItem miRenameIdentifiers=new JMenuItem(""String_Node_Str"");
  miRenameIdentifiers.setActionCommand(""String_Node_Str"");
  miRenameIdentifiers.addActionListener(this);
  menuDeobfuscation.add(miSubLimiter);
  menuDeobfuscation.add(miRenameIdentifiers);
  JMenu menuTools=new JMenu(""String_Node_Str"");
  JMenuItem miProxy=new JMenuItem(""String_Node_Str"");
  miProxy.setActionCommand(""String_Node_Str"");
  miProxy.setIcon(new ImageIcon(View.loadImage(""String_Node_Str"")));
  miProxy.addActionListener(this);
  menuTools.add(miProxy);
  menuTools.add(menuDeobfuscation);
  menuBar.add(menuTools);
  JMenu menuHelp=new JMenu(""String_Node_Str"");
  JMenuItem miAbout=new JMenuItem(""String_Node_Str"");
  miAbout.setActionCommand(""String_Node_Str"");
  miAbout.addActionListener(this);
  JMenuItem miCheckUpdates=new JMenuItem(""String_Node_Str"");
  miCheckUpdates.setActionCommand(""String_Node_Str"");
  miCheckUpdates.addActionListener(this);
  menuHelp.add(miAbout);
  menuHelp.add(miCheckUpdates);
  menuBar.add(menuHelp);
  setJMenuBar(menuBar);
  JPanel panConstants=new JPanel();
  panConstants.setLayout(new BorderLayout());
  constantTypeList=new JComboBox(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  constantTable=new JTable();
  autoResizeColWidth(constantTable,new UIntTableModel(abc));
  constantTable.setAutoCreateRowSorter(true);
  final List<DoABCTag> inlist=list;
  constantTable.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        if (constantTypeList.getSelectedIndex() == 7) {
          int rowIndex=constantTable.getSelectedRow();
          if (rowIndex == -1) {
            return;
          }
          int multinameIndex=constantTable.convertRowIndexToModel(rowIndex);
          if (multinameIndex > 0) {
            UsageFrame usageFrame=new UsageFrame(inlist,abc,multinameIndex);
            usageFrame.setVisible(true);
          }
        }
      }
    }
  }
);
  constantTypeList.addItemListener(this);
  panConstants.add(constantTypeList,BorderLayout.NORTH);
  panConstants.add(new JScrollPane(constantTable),BorderLayout.CENTER);
  tabbedPane.addTab(""String_Node_Str"",panConstants);
  View.centerScreen(this);
  Main.stopWork();
}",0.9930090956927008
62228,"public String getPath(ABC abc){
  for (  Trait t : traits.traits) {
    Multiname name=t.getName(abc);
    Namespace ns=name.getNamespace(abc.constants);
    if (ns.kind == Namespace.KIND_PACKAGE) {
      return ns.getName(abc.constants) + ""String_Node_Str"" + name.getName(abc.constants,new ArrayList<String>());
    }
  }
  return ""String_Node_Str"";
}","public String getPath(ABC abc){
  for (  Trait t : traits.traits) {
    Multiname name=t.getName(abc);
    Namespace ns=name.getNamespace(abc.constants);
    if ((ns.kind == Namespace.KIND_PACKAGE) || (ns.kind == Namespace.KIND_PACKAGE_INTERNAL)) {
      return ns.getName(abc.constants) + ""String_Node_Str"" + name.getName(abc.constants,new ArrayList<String>());
    }
  }
  return ""String_Node_Str"";
}",0.93368700265252
62229,"/** 
 * Constructor
 */
public LoadingDialog(){
  setResizable(false);
  setTitle(Main.shortApplicationVerName);
  setSize(300,150);
  setLayout(new BorderLayout());
  loadingPanel=new LoadingPanel(50,50);
  loadingPanel.setPreferredSize(new Dimension(100,100));
  add(loadingPanel,BorderLayout.WEST);
  add(loadingLabel,BorderLayout.CENTER);
  View.centerScreen(this);
  View.setWindowIcon(this);
  loadingLabel.setHorizontalAlignment(SwingConstants.LEFT);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      System.exit(0);
    }
  }
);
}","/** 
 * Constructor
 */
public LoadingDialog(){
  setResizable(false);
  setTitle(Main.shortApplicationVerName);
  setSize(250,150);
  setLayout(new BorderLayout());
  loadingPanel=new LoadingPanel(50,50);
  loadingPanel.setPreferredSize(new Dimension(100,100));
  add(loadingPanel,BorderLayout.WEST);
  add(loadingLabel,BorderLayout.CENTER);
  View.centerScreen(this);
  View.setWindowIcon(this);
  loadingLabel.setHorizontalAlignment(SwingConstants.LEFT);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      System.exit(0);
    }
  }
);
}",0.9966386554621848
62230,"public String getParamStr(ConstantPool constants,MethodBody body,ABC abc){
  HashMap<Integer,String> localRegNames=new HashMap<Integer,String>();
  if (body != null) {
    localRegNames=body.code.getLocalRegNamesFromDebug(abc);
  }
  String paramStr=""String_Node_Str"";
  for (int i=0; i < param_types.length; i++) {
    if (i > 0) {
      paramStr+=""String_Node_Str"";
    }
    if (!localRegNames.isEmpty()) {
      paramStr+=localRegNames.get(i + 1);
    }
 else     if ((paramNames.length > i) && (paramNames[i] != 0) && Main.PARAM_NAMES_ENABLE) {
      paramStr+=constants.constant_string[paramNames[i]];
    }
 else {
      paramStr+=""String_Node_Str"" + (i + 1);
    }
    paramStr+=""String_Node_Str"";
    if (param_types[i] == 0) {
      paramStr+=""String_Node_Str"";
    }
 else {
      paramStr+=constants.constant_multiname[param_types[i]].getName(constants);
    }
    if (optional != null) {
      if (i >= param_types.length - optional.length) {
        paramStr+=""String_Node_Str"" + optional[i - (param_types.length - optional.length)].toString(constants);
      }
    }
  }
  if (flagNeed_rest()) {
    paramStr+=""String_Node_Str"";
    if (!localRegNames.isEmpty()) {
      paramStr+=localRegNames.get(param_types.length + 1);
    }
 else {
      paramStr+=""String_Node_Str"";
    }
  }
  return paramStr;
}","public String getParamStr(ConstantPool constants,MethodBody body,ABC abc){
  HashMap<Integer,String> localRegNames=new HashMap<Integer,String>();
  if (body != null) {
    localRegNames=body.code.getLocalRegNamesFromDebug(abc);
  }
  String paramStr=""String_Node_Str"";
  for (int i=0; i < param_types.length; i++) {
    if (i > 0) {
      paramStr+=""String_Node_Str"";
    }
    if (!localRegNames.isEmpty()) {
      paramStr+=localRegNames.get(i + 1);
    }
 else     if ((paramNames.length > i) && (paramNames[i] != 0) && Main.PARAM_NAMES_ENABLE) {
      paramStr+=constants.constant_string[paramNames[i]];
    }
 else {
      paramStr+=""String_Node_Str"" + (i + 1);
    }
    paramStr+=""String_Node_Str"";
    if (param_types[i] == 0) {
      paramStr+=""String_Node_Str"";
    }
 else {
      paramStr+=constants.constant_multiname[param_types[i]].getName(constants);
    }
    if (optional != null) {
      if (i >= param_types.length - optional.length) {
        paramStr+=""String_Node_Str"" + optional[i - (param_types.length - optional.length)].toString(constants);
      }
    }
  }
  if (flagNeed_rest()) {
    if ((param_types != null) && (param_types.length > 0)) {
      paramStr+=""String_Node_Str"";
    }
    paramStr+=""String_Node_Str"";
    if (!localRegNames.isEmpty()) {
      paramStr+=localRegNames.get(param_types.length + 1);
    }
 else {
      paramStr+=""String_Node_Str"";
    }
  }
  return paramStr;
}",0.9386413440467496
62231,"protected RedisVersion getRedisVersion(){
  String info=jedis.info();
  String[] infos=info.split(""String_Node_Str"");
  String version=null;
  for (int i=0; i < infos.length; i++) {
    if (infos[i].startsWith(""String_Node_Str"")) {
      String[] versionInfo=infos[i].split(""String_Node_Str"");
      version=versionInfo[1];
      break;
    }
  }
  if (version.startsWith(""String_Node_Str""))   return RedisVersion.REDIS_3_0;
 else   if (version.startsWith(""String_Node_Str""))   return RedisVersion.REDIS_2_8;
 else   if (version.startsWith(""String_Node_Str""))   return RedisVersion.REDIS_2_6;
 else   if (version.startsWith(""String_Node_Str""))   return RedisVersion.REDIS_2_4;
 else   if (version.startsWith(""String_Node_Str""))   return RedisVersion.REDIS_2_2;
 else   if (version.startsWith(""String_Node_Str""))   return RedisVersion.REDIS_2_0;
 else   return RedisVersion.REDIS_1_0;
}","protected RedisVersion getRedisVersion(){
  String info=jedis.info();
  String[] infos=info.split(""String_Node_Str"");
  String version=null;
  for (int i=0; i < infos.length; i++) {
    if (infos[i].startsWith(""String_Node_Str"")) {
      String[] versionInfo=infos[i].split(""String_Node_Str"");
      version=versionInfo[1];
      break;
    }
  }
  if (version.startsWith(""String_Node_Str""))   return RedisVersion.REDIS_3_0;
 else   if (version.startsWith(""String_Node_Str""))   return RedisVersion.REDIS_2_8;
 else   if (version.startsWith(""String_Node_Str""))   return RedisVersion.REDIS_2_6;
 else   if (version.startsWith(""String_Node_Str""))   return RedisVersion.REDIS_2_4;
 else   if (version.startsWith(""String_Node_Str""))   return RedisVersion.REDIS_2_2;
 else   if (version.startsWith(""String_Node_Str""))   return RedisVersion.REDIS_2_0;
 else   if (version.startsWith(""String_Node_Str""))   return RedisVersion.REDIS_1_0;
 else   return RedisVersion.UNKNOWN;
}",0.9557235421166308
62232,"@Override public RedisVersion getSupportVersion(){
  return RedisVersion.REDIS_1_0;
}","@Override public RedisVersion getSupportVersion(){
  if (second != -1)   return RedisVersion.REDIS_1_0;
 else   return RedisVersion.REDIS_2_2;
}",0.74235807860262
62233,"@Override public RedisVersion getSupportVersion(){
  return RedisVersion.REDIS_2_4;
}","@Override public RedisVersion getSupportVersion(){
  if (headTail && exist)   return RedisVersion.REDIS_1_0;
 else   if (headTail && !exist)   return RedisVersion.REDIS_2_2;
 else   if (!headTail && exist)   return RedisVersion.REDIS_1_0;
 else   return RedisVersion.REDIS_2_2;
}",0.3076923076923077
62234,"public void add(int id,int db,String key,Map<String,String> values,int ttl){
  AddHash command=new AddHash(id,db,key,values);
  command.execute();
  Expire command1=new Expire(id,db,key,ttl);
  command1.execute();
}","public void add(int id,int db,String key,Map<String,String> values,int ttl){
  AddHash command=new AddHash(id,db,key,values);
  command.execute();
  if (ttl != -1) {
    Expire command1=new Expire(id,db,key,ttl);
    command1.execute();
  }
}",0.9409190371991248
62235,"public void add(int id,int db,String key,List<String> values,boolean headTail,boolean exist,int ttl){
  AddList command=new AddList(id,db,key,values,headTail,exist);
  command.execute();
  Expire command1=new Expire(id,db,key,ttl);
  command1.execute();
}","public void add(int id,int db,String key,List<String> values,boolean headTail,boolean exist,int ttl){
  AddList command=new AddList(id,db,key,values,headTail,exist);
  command.execute();
  if (ttl != -1) {
    Expire command1=new Expire(id,db,key,ttl);
    command1.execute();
  }
}",0.9497206703910616
62236,"public long add(int id,int db,String key,Set<String> values,int ttl){
  AddSet command=(AddSet)new AddSetFactory(id,db,key,values).getCommand();
  command.execute();
  Expire command1=new Expire(id,db,key,ttl);
  command1.execute();
  return command.getSize();
}","public long add(int id,int db,String key,Set<String> values,int ttl){
  AddSet command=(AddSet)new AddSetFactory(id,db,key,values).getCommand();
  command.execute();
  if (ttl != -1) {
    Expire command1=new Expire(id,db,key,ttl);
    command1.execute();
  }
  return command.getSize();
}",0.9509981851179672
62237,"public void add(int id,int db,String key,Map<String,Double> values,int ttl){
  AddZSet command=(AddZSet)new AddZSetFactory(id,db,key,values).getCommand();
  command.execute();
  Expire command1=new Expire(id,db,key,ttl);
  command1.execute();
}","public void add(int id,int db,String key,Map<String,Double> values,int ttl){
  AddZSet command=(AddZSet)new AddZSetFactory(id,db,key,values).getCommand();
  command.execute();
  if (ttl != -1) {
    Expire command1=new Expire(id,db,key,ttl);
    command1.execute();
  }
}",0.9475728155339804
62238,"@Override public Result parse(String head,BufferedReader reader) throws IOException {
  int replys=Integer.parseInt(head.substring(1,head.length()));
  if (replys == -1)   throw new NullReplyException(""String_Node_Str"");
  String result=""String_Node_Str"";
  for (int i=0; i < replys; i++) {
    String subHead=reader.readLine();
    ProtocolParser parser=ProtocolParser.getParser(subHead);
    result+=parser.parse(subHead,reader).getResult();
    result+=""String_Node_Str"";
  }
  return new Result(result,ResultType.MultiBulk);
}","@Override public Result parse(String head,BufferedReader reader) throws IOException {
  int replys=Integer.parseInt(head.substring(1,head.length()));
  if (replys == -1)   throw new NullReplyException(""String_Node_Str"");
  String result=""String_Node_Str"";
  for (int i=0; i < replys; i++) {
    String subHead=reader.readLine();
    ReplyParser parser=ReplyParser.getParser(subHead);
    result+=parser.parse(subHead,reader).getResult();
    result+=""String_Node_Str"";
  }
  return new Result(result,ResultType.MultiBulk);
}",0.9506641366223908
62239,"public Result execute(String command) throws IOException {
  String[] parameters=command.trim().replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  int number=parameters.length;
  String cmd=""String_Node_Str"" + number + NEWLINE;
  for (  String parameter : parameters) {
    cmd+=""String_Node_Str"";
    cmd+=parameter.length();
    cmd+=NEWLINE;
    cmd+=parameter;
    cmd+=NEWLINE;
  }
  writer.write(cmd);
  writer.flush();
  String head=reader.readLine();
  ProtocolParser parser=ProtocolParser.getParser(head);
  return parser.parse(head,reader);
}","public Result execute(String command) throws IOException {
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(command.trim());
  int number=0;
  String cmd=""String_Node_Str"";
  String parameter;
  while (matcher.find()) {
    parameter=matcher.group();
    if (parameter.charAt(0) == '""') {
      int index=parameter.lastIndexOf('""');
      parameter=parameter.substring(1,index);
    }
    cmd+=""String_Node_Str"";
    cmd+=parameter.length();
    cmd+=NEWLINE;
    cmd+=parameter;
    cmd+=NEWLINE;
    number++;
  }
  String cmdStr=""String_Node_Str"" + number + NEWLINE+ cmd;
  writer.write(cmdStr);
  writer.flush();
  String head=reader.readLine();
  ReplyParser parser=ReplyParser.getParser(head);
  return parser.parse(head,reader);
}",0.180339985218034
62240,"public Result execute(String command) throws IOException {
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(command.trim());
  int number=0;
  String cmd=""String_Node_Str"";
  String parameter;
  while (matcher.find()) {
    parameter=matcher.group();
    if (parameter.charAt(0) == '""') {
      int index=parameter.lastIndexOf('""');
      parameter=parameter.substring(1,index);
    }
    cmd+=""String_Node_Str"";
    cmd+=parameter.length();
    cmd+=NEWLINE;
    cmd+=parameter;
    cmd+=NEWLINE;
    number++;
  }
  String cmdStr1=""String_Node_Str"" + number + NEWLINE+ cmd;
  String cmdStr=cmdStr1;
  writer.write(cmdStr);
  writer.flush();
  String head=reader.readLine();
  ReplyParser parser=ReplyParser.getParser(head);
  return parser.parse(head,reader);
}","public Result execute(String command) throws IOException {
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(command.trim());
  int number=0;
  String cmd=""String_Node_Str"";
  String parameter;
  while (matcher.find()) {
    parameter=matcher.group();
    if (parameter.charAt(0) == '""') {
      int index=parameter.lastIndexOf('""');
      if (index == 0)       throw new RuntimeException(RedisClient.i18nFile.getText(I18nFile.CMDEXCEPTION));
      parameter=parameter.substring(1,index);
    }
    cmd+=""String_Node_Str"";
    cmd+=parameter.length();
    cmd+=NEWLINE;
    cmd+=parameter;
    cmd+=NEWLINE;
    number++;
  }
  String cmdStr1=""String_Node_Str"" + number + NEWLINE+ cmd;
  String cmdStr=cmdStr1;
  writer.write(cmdStr);
  writer.flush();
  String head=reader.readLine();
  ReplyParser parser=ReplyParser.getParser(head);
  return parser.parse(head,reader);
}",0.9363689433741972
62241,"public void widgetDisposed(DisposeEvent e){
  DataContent dataContent=(DataContent)tbtmNewItem.getData();
  openDataContent.remove(dataContent);
  tbtmNewItem.dispose();
  logger.info(""String_Node_Str"");
}","public void widgetDisposed(DisposeEvent e){
  DataContent dataContent=(DataContent)tbtmNewItem.getData();
  openDataContent.remove(dataContent);
  tbtmNewItem.dispose();
}",0.9095744680851064
62242,"private void initTable(CTabFolder tabFolder){
  table=new Table(tabFolder,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI);
  mainTabItem.setControl(table);
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      tableItemSelected();
    }
  }
);
  table.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      logger.debug(""String_Node_Str"");
      TreeItem[] treeItems=tree.getSelection();
      Point point=new Point(e.x,e.y);
      TableItem selectedItem=table.getItem(point);
      if (selectedItem != null) {
        NodeType type=(NodeType)selectedItem.getData(NODE_TYPE);
        if (type == NodeType.CONTAINER || type == NodeType.DATABASE || type == NodeType.SERVER) {
          boolean find=false;
          for (          TreeItem treeItem : treeItems[0].getItems()) {
            String treeText=treeItem.getText();
            String tableText=selectedItem.getText(0);
            if (treeText.equals(tableText)) {
              find=true;
              if (type == NodeType.CONTAINER || type == NodeType.DATABASE)               dbContainerTreeItemSelected(treeItem,false);
 else               if (type == NodeType.SERVER)               serverTreeItemSelected(treeItem,false);
              history.add(treeItem);
              btnBackward.setEnabled(true);
              btnForward.setEnabled(false);
              break;
            }
          }
          if (!find)           MessageDialog.openInformation(shell,i18nFile.getText(I18nFile.INFORMATION),i18nFile.getText(I18nFile.NEWKEYFOUND) + text.getText());
        }
 else {
          dataProperties();
        }
      }
    }
    @Override public void mouseDown(    MouseEvent e){
      Point point=new Point(e.x,e.y);
      TableItem selectedItem=table.getItem(point);
      if (e.button == 3) {
        if (selectedItem == null)         table.setMenu(menu_null);
 else {
          NodeType type=(NodeType)selectedItem.getData(NODE_TYPE);
          if (type == NodeType.ROOT)           table.setMenu(menu_null);
 else           if (type == NodeType.SERVER) {
            updateMenuServer(true,menuTableServer);
            table.setMenu(menuTableServer);
          }
 else           if (type == NodeType.CONTAINER) {
            TableItem[] items=table.getSelection();
            if (items.length == 1) {
              updateMenuDBContainer(type,menuTableDBContainer);
              table.setMenu(menuTableDBContainer);
            }
 else {
              table.setMenu(menu_Multi);
            }
          }
 else           if (type == NodeType.DATABASE) {
            updateMenuDBContainer(type,menuTableDBContainer);
            table.setMenu(menuTableDBContainer);
          }
 else {
            TableItem[] items=table.getSelection();
            if (items.length == 1)             table.setMenu(menu_key);
 else             table.setMenu(menu_Multi);
          }
        }
      }
    }
  }
);
  table.setHeaderVisible(true);
  tblclmnName=new TableColumn(table,SWT.NONE);
  tblclmnName.setWidth(150);
  tblclmnName.setText(i18nFile.getText(I18nFile.NAME));
  tblclmnName.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      orderColumnSelected(OrderBy.NAME);
    }
  }
);
  tblclmnType=new TableColumn(table,SWT.NONE);
  tblclmnType.setWidth(150);
  tblclmnType.setText(i18nFile.getText(I18nFile.TYPE));
  tblclmnType.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      orderColumnSelected(OrderBy.TYPE);
    }
  }
);
  tblclmnSize=new TableColumn(table,SWT.NONE);
  tblclmnSize.setWidth(100);
  tblclmnSize.setText(i18nFile.getText(I18nFile.SIZE));
  tblclmnSize.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      orderColumnSelected(OrderBy.SIZE);
    }
  }
);
}","private void initTable(CTabFolder tabFolder){
  table=new Table(tabFolder,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI);
  mainTabItem.setControl(table);
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      tableItemSelected();
    }
  }
);
  table.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      TreeItem[] treeItems=tree.getSelection();
      Point point=new Point(e.x,e.y);
      TableItem selectedItem=table.getItem(point);
      if (selectedItem != null) {
        NodeType type=(NodeType)selectedItem.getData(NODE_TYPE);
        if (type == NodeType.CONTAINER || type == NodeType.DATABASE || type == NodeType.SERVER) {
          boolean find=false;
          for (          TreeItem treeItem : treeItems[0].getItems()) {
            String treeText=treeItem.getText();
            String tableText=selectedItem.getText(0);
            if (treeText.equals(tableText)) {
              find=true;
              if (type == NodeType.CONTAINER || type == NodeType.DATABASE)               dbContainerTreeItemSelected(treeItem,false);
 else               if (type == NodeType.SERVER)               serverTreeItemSelected(treeItem,false);
              history.add(treeItem);
              btnBackward.setEnabled(true);
              btnForward.setEnabled(false);
              break;
            }
          }
          if (!find)           MessageDialog.openInformation(shell,i18nFile.getText(I18nFile.INFORMATION),i18nFile.getText(I18nFile.NEWKEYFOUND) + text.getText());
        }
 else {
          dataProperties();
        }
      }
    }
    @Override public void mouseDown(    MouseEvent e){
      Point point=new Point(e.x,e.y);
      TableItem selectedItem=table.getItem(point);
      if (e.button == 3) {
        if (selectedItem == null)         table.setMenu(menu_null);
 else {
          NodeType type=(NodeType)selectedItem.getData(NODE_TYPE);
          if (type == NodeType.ROOT)           table.setMenu(menu_null);
 else           if (type == NodeType.SERVER) {
            updateMenuServer(true,menuTableServer);
            table.setMenu(menuTableServer);
          }
 else           if (type == NodeType.CONTAINER) {
            TableItem[] items=table.getSelection();
            if (items.length == 1) {
              updateMenuDBContainer(type,menuTableDBContainer);
              table.setMenu(menuTableDBContainer);
            }
 else {
              table.setMenu(menu_Multi);
            }
          }
 else           if (type == NodeType.DATABASE) {
            updateMenuDBContainer(type,menuTableDBContainer);
            table.setMenu(menuTableDBContainer);
          }
 else {
            TableItem[] items=table.getSelection();
            if (items.length == 1)             table.setMenu(menu_key);
 else             table.setMenu(menu_Multi);
          }
        }
      }
    }
  }
);
  table.setHeaderVisible(true);
  tblclmnName=new TableColumn(table,SWT.NONE);
  tblclmnName.setWidth(150);
  tblclmnName.setText(i18nFile.getText(I18nFile.NAME));
  tblclmnName.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      orderColumnSelected(OrderBy.NAME);
    }
  }
);
  tblclmnType=new TableColumn(table,SWT.NONE);
  tblclmnType.setWidth(150);
  tblclmnType.setText(i18nFile.getText(I18nFile.TYPE));
  tblclmnType.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      orderColumnSelected(OrderBy.TYPE);
    }
  }
);
  tblclmnSize=new TableColumn(table,SWT.NONE);
  tblclmnSize.setWidth(100);
  tblclmnSize.setText(i18nFile.getText(I18nFile.SIZE));
  tblclmnSize.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      orderColumnSelected(OrderBy.SIZE);
    }
  }
);
}",0.9950324799388612
62243,"@Override public void mouseDoubleClick(MouseEvent e){
  logger.debug(""String_Node_Str"");
  TreeItem[] treeItems=tree.getSelection();
  Point point=new Point(e.x,e.y);
  TableItem selectedItem=table.getItem(point);
  if (selectedItem != null) {
    NodeType type=(NodeType)selectedItem.getData(NODE_TYPE);
    if (type == NodeType.CONTAINER || type == NodeType.DATABASE || type == NodeType.SERVER) {
      boolean find=false;
      for (      TreeItem treeItem : treeItems[0].getItems()) {
        String treeText=treeItem.getText();
        String tableText=selectedItem.getText(0);
        if (treeText.equals(tableText)) {
          find=true;
          if (type == NodeType.CONTAINER || type == NodeType.DATABASE)           dbContainerTreeItemSelected(treeItem,false);
 else           if (type == NodeType.SERVER)           serverTreeItemSelected(treeItem,false);
          history.add(treeItem);
          btnBackward.setEnabled(true);
          btnForward.setEnabled(false);
          break;
        }
      }
      if (!find)       MessageDialog.openInformation(shell,i18nFile.getText(I18nFile.INFORMATION),i18nFile.getText(I18nFile.NEWKEYFOUND) + text.getText());
    }
 else {
      dataProperties();
    }
  }
}","@Override public void mouseDoubleClick(MouseEvent e){
  TreeItem[] treeItems=tree.getSelection();
  Point point=new Point(e.x,e.y);
  TableItem selectedItem=table.getItem(point);
  if (selectedItem != null) {
    NodeType type=(NodeType)selectedItem.getData(NODE_TYPE);
    if (type == NodeType.CONTAINER || type == NodeType.DATABASE || type == NodeType.SERVER) {
      boolean find=false;
      for (      TreeItem treeItem : treeItems[0].getItems()) {
        String treeText=treeItem.getText();
        String tableText=selectedItem.getText(0);
        if (treeText.equals(tableText)) {
          find=true;
          if (type == NodeType.CONTAINER || type == NodeType.DATABASE)           dbContainerTreeItemSelected(treeItem,false);
 else           if (type == NodeType.SERVER)           serverTreeItemSelected(treeItem,false);
          history.add(treeItem);
          btnBackward.setEnabled(true);
          btnForward.setEnabled(false);
          break;
        }
      }
      if (!find)       MessageDialog.openInformation(shell,i18nFile.getText(I18nFile.INFORMATION),i18nFile.getText(I18nFile.NEWKEYFOUND) + text.getText());
    }
 else {
      dataProperties();
    }
  }
}",0.9854469854469856
62244,"private void selectTreeItem(){
  logger.debug(""String_Node_Str"");
  TreeItem[] items=tree.getSelection();
  if ((itemsSelected[0] instanceof TreeItem && items[0] != itemsSelected[0])) {
    history.add(items[0]);
    btnBackward.setEnabled(true);
    btnForward.setEnabled(false);
  }
 else   if (itemsSelected[0] instanceof TableItem && items[0] != treeItemSelected) {
    history.add(items[0]);
    btnBackward.setEnabled(true);
    btnForward.setEnabled(false);
  }
  treeItemSelected(false);
}","private void selectTreeItem(){
  TreeItem[] items=tree.getSelection();
  if ((itemsSelected[0] instanceof TreeItem && items[0] != itemsSelected[0])) {
    history.add(items[0]);
    btnBackward.setEnabled(true);
    btnForward.setEnabled(false);
  }
 else   if (itemsSelected[0] instanceof TableItem && items[0] != treeItemSelected) {
    history.add(items[0]);
    btnBackward.setEnabled(true);
    btnForward.setEnabled(false);
  }
  treeItemSelected(false);
}",0.9635036496350364
62245,"private void dataProperties(){
  TableItem[] items=table.getSelection();
  NodeType type=(NodeType)items[0].getData(NODE_TYPE);
  TreeItem treeItem=getTreeItemByTableItem(items[0]);
  ContainerKeyInfo cinfo=new ContainerKeyInfo();
  parseContainer(treeItem,cinfo);
  String key=cinfo.getContainerStr() + items[0].getText();
  if (!service2.isKeyExist(cinfo.getId(),cinfo.getDb(),key))   throw new KeyNotExistException(cinfo.getId(),cinfo.getDb(),key);
  if (!openDataContent.isOpen(cinfo.getId(),cinfo.getDb(),key)) {
    final CTabItem tbtmNewItem=new CTabItem(tabFolder_1,SWT.NONE);
    tbtmNewItem.setText(""String_Node_Str"");
    tbtmNewItem.setShowClose(true);
    tbtmNewItem.addDisposeListener(new DisposeListener(){
      public void widgetDisposed(      DisposeEvent e){
        DataContent dataContent=(DataContent)tbtmNewItem.getData();
        openDataContent.remove(dataContent);
        tbtmNewItem.dispose();
        logger.info(""String_Node_Str"");
      }
    }
);
    Composite composite_2=new Composite(tabFolder_1,SWT.NONE);
    tbtmNewItem.setControl(composite_2);
    composite_2.setLayout(new GridLayout(1,false));
    tbtmNewItem.setText(key);
    DataContent content=null;
    if (type == NodeType.STRING) {
      tbtmNewItem.setImage(strImage);
      content=new StringDataContent(tbtmNewItem,cinfo.getId(),cinfo.getServerName(),cinfo.getDb(),key,I18nFile.STRING);
    }
 else     if (type == NodeType.HASH) {
      tbtmNewItem.setImage(hashImage);
      content=new HashDataContent(tbtmNewItem,cinfo.getId(),cinfo.getServerName(),cinfo.getDb(),key,I18nFile.HASH);
    }
 else     if (type == NodeType.LIST) {
      tbtmNewItem.setImage(listImage);
      content=new ListDataContent(tbtmNewItem,cinfo.getId(),cinfo.getServerName(),cinfo.getDb(),key,I18nFile.LIST);
    }
 else     if (type == NodeType.SET) {
      tbtmNewItem.setImage(setImage);
      content=new SetDataContent(tbtmNewItem,cinfo.getId(),cinfo.getServerName(),cinfo.getDb(),key,I18nFile.SET);
    }
 else     if (type == NodeType.SORTEDSET) {
      tbtmNewItem.setImage(zsetImage);
      content=new ZSetDataContent(tbtmNewItem,cinfo.getId(),cinfo.getServerName(),cinfo.getDb(),key,I18nFile.ZSET);
    }
    content.setShell(composite_2);
    content.initContents();
    openDataContent.add(content);
    tabFolder_1.setSelection(tbtmNewItem);
  }
 else {
    tabFolder_1.setSelection(openDataContent.getTabItem(cinfo.getId(),cinfo.getDb(),key));
  }
}","private void dataProperties(){
  TableItem[] items=table.getSelection();
  NodeType type=(NodeType)items[0].getData(NODE_TYPE);
  TreeItem treeItem=getTreeItemByTableItem(items[0]);
  ContainerKeyInfo cinfo=new ContainerKeyInfo();
  parseContainer(treeItem,cinfo);
  String key=cinfo.getContainerStr() + items[0].getText();
  if (!service2.isKeyExist(cinfo.getId(),cinfo.getDb(),key))   throw new KeyNotExistException(cinfo.getId(),cinfo.getDb(),key);
  if (!openDataContent.isOpen(cinfo.getId(),cinfo.getDb(),key)) {
    final CTabItem tbtmNewItem=new CTabItem(tabFolder_1,SWT.NONE);
    tbtmNewItem.setText(""String_Node_Str"");
    tbtmNewItem.setShowClose(true);
    tbtmNewItem.addDisposeListener(new DisposeListener(){
      public void widgetDisposed(      DisposeEvent e){
        DataContent dataContent=(DataContent)tbtmNewItem.getData();
        openDataContent.remove(dataContent);
        tbtmNewItem.dispose();
      }
    }
);
    Composite composite_2=new Composite(tabFolder_1,SWT.NONE);
    tbtmNewItem.setControl(composite_2);
    composite_2.setLayout(new GridLayout(1,false));
    tbtmNewItem.setText(key);
    DataContent content=null;
    if (type == NodeType.STRING) {
      tbtmNewItem.setImage(strImage);
      content=new StringDataContent(tbtmNewItem,cinfo.getId(),cinfo.getServerName(),cinfo.getDb(),key,I18nFile.STRING);
    }
 else     if (type == NodeType.HASH) {
      tbtmNewItem.setImage(hashImage);
      content=new HashDataContent(tbtmNewItem,cinfo.getId(),cinfo.getServerName(),cinfo.getDb(),key,I18nFile.HASH);
    }
 else     if (type == NodeType.LIST) {
      tbtmNewItem.setImage(listImage);
      content=new ListDataContent(tbtmNewItem,cinfo.getId(),cinfo.getServerName(),cinfo.getDb(),key,I18nFile.LIST);
    }
 else     if (type == NodeType.SET) {
      tbtmNewItem.setImage(setImage);
      content=new SetDataContent(tbtmNewItem,cinfo.getId(),cinfo.getServerName(),cinfo.getDb(),key,I18nFile.SET);
    }
 else     if (type == NodeType.SORTEDSET) {
      tbtmNewItem.setImage(zsetImage);
      content=new ZSetDataContent(tbtmNewItem,cinfo.getId(),cinfo.getServerName(),cinfo.getDb(),key,I18nFile.ZSET);
    }
    content.setShell(composite_2);
    content.initContents();
    openDataContent.add(content);
    tabFolder_1.setSelection(tbtmNewItem);
  }
 else {
    tabFolder_1.setSelection(openDataContent.getTabItem(cinfo.getId(),cinfo.getDb(),key));
  }
}",0.9917491749174916
62246,"private void tableItemSelected(){
  logger.debug(""String_Node_Str"");
  TableItem[] items=table.getSelection();
  if (items.length == 1) {
    itemsSelected=items;
    TreeItem[] treeItems=tree.getSelection();
    treeItemSelected=treeItems[0];
    NodeType type=(NodeType)items[0].getData(NODE_TYPE);
switch (type) {
case SERVER:
      serverItemSelected();
    break;
case DATABASE:
case CONTAINER:
  dbContainerItemSelected(items[0]);
break;
default :
dataItemSelected();
break;
}
}
 else if (items.length > 1) {
NodeType type=(NodeType)items[0].getData(NODE_TYPE);
switch (type) {
case SERVER:
itemsSelected=items;
TreeItem[] treeItems=tree.getSelection();
treeItemSelected=treeItems[0];
serverItemsSelected();
break;
case DATABASE:
for (TableItem item : items) {
if (item != itemsSelected[0]) {
itemsSelected[0]=item;
table.setSelection(item);
break;
}
}
break;
default :
itemsSelected=items;
TreeItem[] treeItems1=tree.getSelection();
treeItemSelected=treeItems1[0];
containerItemsSelected();
break;
}
}
 else {
TreeItem[] treeItems=tree.getSelection();
itemsSelected=treeItems;
NodeType type=(NodeType)itemsSelected[0].getData(NODE_TYPE);
switch (type) {
case SERVER:
serverItemSelected();
break;
case DATABASE:
case CONTAINER:
dbContainerItemSelected(itemsSelected[0]);
break;
default :
dataItemSelected();
break;
}
}
}","private void tableItemSelected(){
  TableItem[] items=table.getSelection();
  if (items.length == 1) {
    itemsSelected=items;
    TreeItem[] treeItems=tree.getSelection();
    treeItemSelected=treeItems[0];
    NodeType type=(NodeType)items[0].getData(NODE_TYPE);
switch (type) {
case SERVER:
      serverItemSelected();
    break;
case DATABASE:
case CONTAINER:
  dbContainerItemSelected(items[0]);
break;
default :
dataItemSelected();
break;
}
}
 else if (items.length > 1) {
NodeType type=(NodeType)items[0].getData(NODE_TYPE);
switch (type) {
case SERVER:
itemsSelected=items;
TreeItem[] treeItems=tree.getSelection();
treeItemSelected=treeItems[0];
serverItemsSelected();
break;
case DATABASE:
for (TableItem item : items) {
if (item != itemsSelected[0]) {
itemsSelected[0]=item;
table.setSelection(item);
break;
}
}
break;
default :
itemsSelected=items;
TreeItem[] treeItems1=tree.getSelection();
treeItemSelected=treeItems1[0];
containerItemsSelected();
break;
}
}
 else {
TreeItem[] treeItems=tree.getSelection();
itemsSelected=treeItems;
NodeType type=(NodeType)itemsSelected[0].getData(NODE_TYPE);
switch (type) {
case SERVER:
serverItemSelected();
break;
case DATABASE:
case CONTAINER:
dbContainerItemSelected(itemsSelected[0]);
break;
default :
dataItemSelected();
break;
}
}
}",0.9866259075277036
62247,"@Override protected void createContents(){
  super.createContents();
  text_3.setText(server.getName());
  text_3.selectAll();
  text_3.setFocus();
  text_4.setText(server.getHost());
  text_4.selectAll();
  text_5.setText(server.getPort());
  text_5.selectAll();
  text_6.setText(server.getPassword());
  text_6.selectAll();
}","@Override protected void createContents(){
  super.createContents();
  text_3.setText(server.getName());
  text_3.selectAll();
  text_3.setFocus();
  text_4.setText(server.getHost());
  text_4.selectAll();
  text_5.setText(server.getPort());
  text_5.selectAll();
  if (server.getPassword() != null) {
    text_6.setText(server.getPassword());
    text_6.selectAll();
  }
}",0.9342857142857144
62248,"@Override protected void initData(Composite dataComposite){
  Label label=new Label(dataComposite,SWT.NONE);
  label.setText(RedisClient.i18nFile.getText(I18nFile.VALUE));
  text_value=new Text(dataComposite,SWT.BORDER);
  text_value.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,3,1));
}","@Override protected void initData(Composite dataComposite){
  Label label=new Label(dataComposite,SWT.NONE);
  label.setText(RedisClient.i18nFile.getText(I18nFile.VALUE));
  text_value=new Text(dataComposite,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.MULTI);
  text_value.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
}",0.890282131661442
62249,"@Override protected void initData(Composite dataComposite){
  label=new Label(dataComposite,SWT.NONE);
  label.setText(RedisClient.i18nFile.getText(I18nFile.VALUE));
  final Text text_value=new Text(dataComposite,SWT.BORDER);
  text_value.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,3,1));
  value=service.readString(id,db,key);
  text_value.setText(value);
  text_value.selectAll();
  text_value.setFocus();
  new Label(dataComposite,SWT.NONE);
  new Label(dataComposite,SWT.NONE);
  new Label(dataComposite,SWT.NONE);
  Composite composite=new Composite(dataComposite,SWT.NONE);
  composite.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,true,false,1,1));
  composite.setLayout(new GridLayout(2,false));
  btnOk=new Button(composite,SWT.NONE);
  btnOk.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  btnOk.setText(RedisClient.i18nFile.getText(I18nFile.APPLY));
  setApply(false);
  btnCancel=new Button(composite,SWT.NONE);
  btnCancel.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  btnCancel.setEnabled(false);
  btnCancel.setText(RedisClient.i18nFile.getText(I18nFile.CANCEL));
  text_value.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String newValue=text_value.getText() == null ? ""String_Node_Str"" : text_value.getText();
      if (newValue.equals(value)) {
        setApply(false);
        btnCancel.setEnabled(false);
      }
 else {
        setApply(true);
        btnCancel.setEnabled(true);
      }
    }
  }
);
  btnOk.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String key=getKey();
      value=text_value.getText();
      service.updateString(id,db,key,value);
      setApply(false);
      btnCancel.setEnabled(false);
    }
  }
);
  btnCancel.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      text_value.setText(value);
      setApply(false);
      btnCancel.setEnabled(false);
    }
  }
);
}","@Override protected void initData(Composite dataComposite){
  label=new Label(dataComposite,SWT.NONE);
  label.setText(RedisClient.i18nFile.getText(I18nFile.VALUE));
  final Text text_value=new Text(dataComposite,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.MULTI);
  text_value.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,1));
  value=service.readString(id,db,key);
  text_value.setText(value);
  text_value.selectAll();
  text_value.setFocus();
  new Label(dataComposite,SWT.NONE);
  new Label(dataComposite,SWT.NONE);
  new Label(dataComposite,SWT.NONE);
  Composite composite=new Composite(dataComposite,SWT.NONE);
  composite.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,true,false,1,1));
  composite.setLayout(new GridLayout(2,false));
  btnOk=new Button(composite,SWT.NONE);
  btnOk.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  btnOk.setText(RedisClient.i18nFile.getText(I18nFile.APPLY));
  setApply(false);
  btnCancel=new Button(composite,SWT.NONE);
  btnCancel.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  btnCancel.setEnabled(false);
  btnCancel.setText(RedisClient.i18nFile.getText(I18nFile.CANCEL));
  text_value.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String newValue=text_value.getText() == null ? ""String_Node_Str"" : text_value.getText();
      if (newValue.equals(value)) {
        setApply(false);
        btnCancel.setEnabled(false);
      }
 else {
        setApply(true);
        btnCancel.setEnabled(true);
      }
    }
  }
);
  btnOk.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String key=getKey();
      value=text_value.getText();
      service.updateString(id,db,key,value);
      setApply(false);
      btnCancel.setEnabled(false);
    }
  }
);
  btnCancel.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      text_value.setText(value);
      setApply(false);
      btnCancel.setEnabled(false);
    }
  }
);
}",0.9830836152730787
62250,"private Command getCommand(String cmd){
  if (cmd.trim().equalsIgnoreCase(""String_Node_Str""))   return new QuitCmd(this,cmd);
 else   return new Command(this,cmd);
}","private Command getCommand(String cmd){
  String[] strs=cmd.trim().split(""String_Node_Str"");
  if (strs[0].equalsIgnoreCase(""String_Node_Str""))   return new QuitCmd(this,cmd);
 else   return new Command(this,cmd);
}",0.8157894736842105
62251,"public I18nFile(){
  propertyFile=getClass().getResource(""String_Node_Str"").getFile();
  try {
    properties=getProperty(propertyFile);
  }
 catch (  IOException e) {
    throw new RuntimeException(e.getLocalizedMessage());
  }
}","public I18nFile(){
  propertyFile=getClass().getResourceAsStream(""String_Node_Str"");
  try {
    properties=getProperty(propertyFile);
  }
 catch (  IOException e) {
    throw new RuntimeException(e.getLocalizedMessage());
  }
}",0.960698689956332
62252,"protected static Properties getProperty(String propertyFile) throws IOException {
  Properties props=new Properties();
  File file=new File(propertyFile);
  if (!file.exists())   file.createNewFile();
  InputStream is;
  try {
    is=new BufferedInputStream(new FileInputStream(propertyFile));
  }
 catch (  FileNotFoundException e) {
    throw new IllegalArgumentException();
  }
  props.load(is);
  is.close();
  return props;
}","protected static Properties getProperty(InputStream is) throws IOException {
  Properties props=new Properties();
  props.load(is);
  is.close();
  return props;
}",0.5160202360876898
62253,"public void handleEvent(final Event e){
switch (e.type) {
case SWT.FocusOut:
    logger.info(""String_Node_Str"");
  item.setText(column,text.getText());
text.dispose();
break;
case SWT.Traverse:
switch (e.detail) {
case SWT.TRAVERSE_RETURN:
item.setText(column,text.getText());
case SWT.TRAVERSE_ESCAPE:
text.dispose();
e.doit=false;
}
break;
}
}","public void handleEvent(final Event e){
switch (e.type) {
case SWT.FocusOut:
    item.setText(column,text.getText());
  text.dispose();
break;
case SWT.Traverse:
switch (e.detail) {
case SWT.TRAVERSE_RETURN:
item.setText(column,text.getText());
case SWT.TRAVERSE_ESCAPE:
text.dispose();
e.doit=false;
}
break;
}
}",0.8358662613981763
62254,"public void clickRow(final TableItem item,final int column){
  logger.info(""String_Node_Str"");
  text=new Text(table,SWT.NONE);
  text.setEditable(edit);
  Listener textListener=new Listener(){
    public void handleEvent(    final Event e){
switch (e.type) {
case SWT.FocusOut:
        logger.info(""String_Node_Str"");
      item.setText(column,text.getText());
    text.dispose();
  break;
case SWT.Traverse:
switch (e.detail) {
case SWT.TRAVERSE_RETURN:
  item.setText(column,text.getText());
case SWT.TRAVERSE_ESCAPE:
text.dispose();
e.doit=false;
}
break;
}
}
}
;
text.addListener(SWT.FocusOut,textListener);
text.addListener(SWT.Traverse,textListener);
editor.setEditor(text,item,column);
text.setText(item.getText(column));
text.selectAll();
text.setFocus();
beginEdit();
}","public void clickRow(final TableItem item,final int column){
  text=new Text(table,SWT.NONE);
  text.setEditable(edit);
  Listener textListener=new Listener(){
    public void handleEvent(    final Event e){
switch (e.type) {
case SWT.FocusOut:
        item.setText(column,text.getText());
      text.dispose();
    break;
case SWT.Traverse:
switch (e.detail) {
case SWT.TRAVERSE_RETURN:
    item.setText(column,text.getText());
case SWT.TRAVERSE_ESCAPE:
  text.dispose();
e.doit=false;
}
break;
}
}
}
;
text.addListener(SWT.FocusOut,textListener);
text.addListener(SWT.Traverse,textListener);
editor.setEditor(text,item,column);
text.setText(item.getText(column));
text.selectAll();
text.setFocus();
beginEdit();
}",0.8982597054886211
62255,"@Override public void handleEvent(Event event){
  logger.info(""String_Node_Str"");
  TableItem item=(TableItem)event.item;
  setPage(table.indexOf(item));
}","@Override public void handleEvent(Event event){
  TableItem item=(TableItem)event.item;
  setPage(table.indexOf(item));
}",0.8768115942028986
62256,"public PagingListener(Table table,IPage page,boolean addHead){
  this.table=table;
  this.page=page;
  this.addHead=addHead;
  logger.info(""String_Node_Str"" + addHead);
  if (!addHead) {
    this.count=(int)page.getCount();
  }
 else {
    this.count=(int)page.getCount() + 1;
  }
  this.table.setItemCount(count);
}","public PagingListener(Table table,IPage page,boolean addHead){
  this.table=table;
  this.page=page;
  this.addHead=addHead;
  if (!addHead) {
    this.count=(int)page.getCount();
  }
 else {
    this.count=(int)page.getCount() + 1;
  }
  this.table.setItemCount(count);
}",0.9251700680272108
62257,"private void add(){
  TableItem item=new TableItem(table,SWT.NONE,0);
  table.setSelection(item);
  listener.clickRow(item,0);
  currentStatus=Status.Add;
  currentData.setItem(item);
  addModifyTextListener();
  logger.info(""String_Node_Str"" + currentStatus);
  statusChanged();
}","private void add(){
  TableItem item=new TableItem(table,SWT.NONE,0);
  table.setSelection(item);
  listener.clickRow(item,0);
  currentStatus=Status.Add;
  currentData.setItem(item);
  addModifyTextListener();
  statusChanged();
}",0.90234375
62258,"private void addModifyTextListener(){
  Text editor=listener.getText();
  if (!editor.isDisposed()) {
    editor.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
switch (currentStatus) {
case Normal:
          break;
case Add:
        currentStatus=Status.Adding;
      statusChanged();
    break;
case Adding:
  break;
case Edit:
currentStatus=Status.Editing;
statusChanged();
break;
case Editing:
break;
}
logger.info(""String_Node_Str"" + currentStatus);
}
}
);
}
}","private void addModifyTextListener(){
  Text editor=listener.getText();
  if (!editor.isDisposed()) {
    editor.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
switch (currentStatus) {
case Normal:
          break;
case Add:
        currentStatus=Status.Adding;
      statusChanged();
    break;
case Adding:
  break;
case Edit:
currentStatus=Status.Editing;
statusChanged();
break;
case Editing:
break;
}
}
}
);
}
}",0.950413223140496
62259,"public void modifyText(ModifyEvent e){
switch (currentStatus) {
case Normal:
    break;
case Add:
  currentStatus=Status.Adding;
statusChanged();
break;
case Adding:
break;
case Edit:
currentStatus=Status.Editing;
statusChanged();
break;
case Editing:
break;
}
logger.info(""String_Node_Str"" + currentStatus);
}","public void modifyText(ModifyEvent e){
switch (currentStatus) {
case Normal:
    break;
case Add:
  currentStatus=Status.Adding;
statusChanged();
break;
case Adding:
break;
case Edit:
currentStatus=Status.Editing;
statusChanged();
break;
case Editing:
break;
}
}",0.916083916083916
62260,"protected void tableItemSelected(){
  logger.info(""String_Node_Str"");
  addModifyTextListener();
  TableItem[] items=table.getSelection();
  if (items.length > 0 && currentData.isItemChanged(items[0])) {
switch (currentStatus) {
case Normal:
      currentStatus=Status.Edit;
    statusChanged();
  break;
case Add:
currentData.getItem().dispose();
currentStatus=Status.Edit;
statusChanged();
break;
case Adding:
currentData.getItem().dispose();
currentStatus=Status.Edit;
statusChanged();
break;
case Edit:
break;
case Editing:
currentData.reset();
currentStatus=Status.Edit;
statusChanged();
break;
}
currentData.setItem(items[0]);
logger.info(""String_Node_Str"" + currentStatus);
}
}","protected void tableItemSelected(){
  addModifyTextListener();
  TableItem[] items=table.getSelection();
  if (items.length > 0 && currentData.isItemChanged(items[0])) {
switch (currentStatus) {
case Normal:
      currentStatus=Status.Edit;
    statusChanged();
  break;
case Add:
currentData.getItem().dispose();
currentStatus=Status.Edit;
statusChanged();
break;
case Adding:
currentData.getItem().dispose();
currentStatus=Status.Edit;
statusChanged();
break;
case Edit:
break;
case Editing:
currentData.reset();
currentStatus=Status.Edit;
statusChanged();
break;
}
currentData.setItem(items[0]);
}
}",0.9362363919129082
62261,"public void statusChanged(){
switch (currentStatus) {
case Normal:
    btnAdd.setEnabled(true);
  btnDelete.setEnabled(false);
setApply(false);
btnCancel.setEnabled(false);
btnRefresh.setEnabled(true);
break;
case Add:
btnAdd.setEnabled(false);
btnDelete.setEnabled(true);
setApply(false);
btnCancel.setEnabled(true);
btnRefresh.setEnabled(true);
break;
case Adding:
btnAdd.setEnabled(false);
btnDelete.setEnabled(true);
setApply(true);
btnCancel.setEnabled(true);
btnRefresh.setEnabled(false);
break;
case Edit:
btnAdd.setEnabled(true);
btnDelete.setEnabled(true);
setApply(false);
btnCancel.setEnabled(true);
btnRefresh.setEnabled(true);
break;
case Editing:
btnAdd.setEnabled(false);
btnDelete.setEnabled(true);
setApply(true);
btnCancel.setEnabled(true);
btnRefresh.setEnabled(false);
break;
}
logger.info(""String_Node_Str"" + currentStatus);
}","public void statusChanged(){
switch (currentStatus) {
case Normal:
    btnAdd.setEnabled(true);
  btnDelete.setEnabled(false);
setApply(false);
btnCancel.setEnabled(false);
btnRefresh.setEnabled(true);
break;
case Add:
btnAdd.setEnabled(false);
btnDelete.setEnabled(true);
setApply(false);
btnCancel.setEnabled(true);
btnRefresh.setEnabled(true);
break;
case Adding:
btnAdd.setEnabled(false);
btnDelete.setEnabled(true);
setApply(true);
btnCancel.setEnabled(true);
btnRefresh.setEnabled(false);
break;
case Edit:
btnAdd.setEnabled(true);
btnDelete.setEnabled(true);
setApply(false);
btnCancel.setEnabled(true);
btnRefresh.setEnabled(true);
break;
case Editing:
btnAdd.setEnabled(false);
btnDelete.setEnabled(true);
setApply(true);
btnCancel.setEnabled(true);
btnRefresh.setEnabled(false);
break;
}
}",0.970838396111786
62262,"/** 
 * @wbp.parser.entryPoint
 */
@Override protected void initData(Composite dataComposite){
  grpValues=new Group(dataComposite,SWT.NONE);
  grpValues.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,4,1));
  grpValues.setText(RedisClient.i18nFile.getText(I18nFile.VALUES));
  grpValues.setLayout(new GridLayout(4,false));
  table=new Table(grpValues,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI| SWT.VIRTUAL);
  table.setHeaderVisible(true);
  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,5));
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      tableItemSelected();
    }
  }
);
  table.setLinesVisible(true);
  listener=new EditListener(table,true);
  table.addListener(SWT.MouseDown,listener);
  pageListener=new PagingListener(table,new ListPage(id,db,key));
  table.addListener(SWT.SetData,pageListener);
  tblclmnNewColumn=new TableColumn(table,SWT.NONE);
  tblclmnNewColumn.setText(RedisClient.i18nFile.getText(I18nFile.VALUE));
  tblclmnNewColumn.setWidth(200);
  btnInsertHead=new Button(grpValues,SWT.NONE);
  btnInsertHead.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnInsertHead.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      InputDialog dialog=new InputDialog(shell.getParent().getShell(),RedisClient.i18nFile.getText(I18nFile.INSERTHEAD),RedisClient.i18nFile.getText(I18nFile.INPUTVALUES),""String_Node_Str"",null);
      if (dialog.open() == InputDialog.OK) {
        String value=dialog.getValue();
        service.addHead(id,db,key,value);
        refresh();
      }
    }
  }
);
  btnInsertHead.setText(RedisClient.i18nFile.getText(I18nFile.INSERTHEAD));
  btnAppendTail=new Button(grpValues,SWT.NONE);
  btnAppendTail.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnAppendTail.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      InputDialog dialog=new InputDialog(shell.getParent().getShell(),RedisClient.i18nFile.getText(I18nFile.APPENDTAIL),RedisClient.i18nFile.getText(I18nFile.INPUTVALUES),""String_Node_Str"",null);
      if (dialog.open() == InputDialog.OK) {
        String value=dialog.getValue();
        service.addTail(id,db,key,value);
        pageListener.setCount();
        table.clear(table.getItemCount() - 1);
        table.setSelection(table.getItemCount() - 1);
        table.setSelection(-1);
        currentData.setItem(null);
        status=Status.Normal;
        statusChanged();
      }
    }
  }
);
  btnAppendTail.setText(RedisClient.i18nFile.getText(I18nFile.APPENDTAIL));
  btnDeleteHead=new Button(grpValues,SWT.NONE);
  btnDeleteHead.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnDeleteHead.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      service.removeFirst(id,db,key);
      refresh();
    }
  }
);
  btnDeleteHead.setText(RedisClient.i18nFile.getText(I18nFile.DELETEHEAD));
  btnDeleteTail=new Button(grpValues,SWT.NONE);
  btnDeleteTail.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnDeleteTail.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      service.removeLast(id,db,key);
      pageListener.setCount();
      table.getItem(table.getItemCount() - 1);
      table.setSelection(table.getItemCount() - 1);
      table.setSelection(-1);
      currentData.setItem(null);
      status=Status.Normal;
      statusChanged();
    }
  }
);
  btnDeleteTail.setText(RedisClient.i18nFile.getText(I18nFile.DELETETAIL));
  btnApply=new Button(grpValues,SWT.NONE);
  btnApply.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TableItem[] items=table.getSelection();
      service.setValue(id,db,key,table.getSelectionIndex(),items[0].getText());
      table.setSelection(-1);
      currentData.setItem(null);
      status=Status.Normal;
      statusChanged();
    }
  }
);
  btnApply.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  setApply(false);
  btnApply.setText(RedisClient.i18nFile.getText(I18nFile.APPLY));
  btnCancel=new Button(grpValues,SWT.NONE);
  btnCancel.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
switch (status) {
case Normal:
        break;
case Update:
      table.setSelection(-1);
    status=Status.Normal;
  currentData.setItem(null);
statusChanged();
break;
case Updating:
currentData.reset();
status=Status.Update;
listener.clickRow(currentData.getItem(),0);
addModifyTextListener();
statusChanged();
break;
}
logger.info(""String_Node_Str"" + status);
}
}
);
btnCancel.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
btnCancel.setEnabled(false);
btnCancel.setText(RedisClient.i18nFile.getText(I18nFile.CANCEL));
btnRefresh=new Button(grpValues,SWT.NONE);
btnRefresh.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
refresh();
}
}
);
btnRefresh.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
btnRefresh.setEnabled(true);
btnRefresh.setText(RedisClient.i18nFile.getText(I18nFile.REFRESH));
new Label(grpValues,SWT.NONE);
new Label(grpValues,SWT.NONE);
new Label(grpValues,SWT.NONE);
}","/** 
 * @wbp.parser.entryPoint
 */
@Override protected void initData(Composite dataComposite){
  grpValues=new Group(dataComposite,SWT.NONE);
  grpValues.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,4,1));
  grpValues.setText(RedisClient.i18nFile.getText(I18nFile.VALUES));
  grpValues.setLayout(new GridLayout(4,false));
  table=new Table(grpValues,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI| SWT.VIRTUAL);
  table.setHeaderVisible(true);
  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,5));
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      tableItemSelected();
    }
  }
);
  table.setLinesVisible(true);
  listener=new EditListener(table,true);
  table.addListener(SWT.MouseDown,listener);
  pageListener=new PagingListener(table,new ListPage(id,db,key));
  table.addListener(SWT.SetData,pageListener);
  tblclmnNewColumn=new TableColumn(table,SWT.NONE);
  tblclmnNewColumn.setText(RedisClient.i18nFile.getText(I18nFile.VALUE));
  tblclmnNewColumn.setWidth(200);
  btnInsertHead=new Button(grpValues,SWT.NONE);
  btnInsertHead.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnInsertHead.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      InputDialog dialog=new InputDialog(shell.getParent().getShell(),RedisClient.i18nFile.getText(I18nFile.INSERTHEAD),RedisClient.i18nFile.getText(I18nFile.INPUTVALUES),""String_Node_Str"",null);
      if (dialog.open() == InputDialog.OK) {
        String value=dialog.getValue();
        service.addHead(id,db,key,value);
        refresh();
      }
    }
  }
);
  btnInsertHead.setText(RedisClient.i18nFile.getText(I18nFile.INSERTHEAD));
  btnAppendTail=new Button(grpValues,SWT.NONE);
  btnAppendTail.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnAppendTail.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      InputDialog dialog=new InputDialog(shell.getParent().getShell(),RedisClient.i18nFile.getText(I18nFile.APPENDTAIL),RedisClient.i18nFile.getText(I18nFile.INPUTVALUES),""String_Node_Str"",null);
      if (dialog.open() == InputDialog.OK) {
        String value=dialog.getValue();
        service.addTail(id,db,key,value);
        pageListener.setCount();
        table.clear(table.getItemCount() - 1);
        table.setSelection(table.getItemCount() - 1);
        table.setSelection(-1);
        currentData.setItem(null);
        status=Status.Normal;
        statusChanged();
      }
    }
  }
);
  btnAppendTail.setText(RedisClient.i18nFile.getText(I18nFile.APPENDTAIL));
  btnDeleteHead=new Button(grpValues,SWT.NONE);
  btnDeleteHead.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnDeleteHead.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      service.removeFirst(id,db,key);
      refresh();
    }
  }
);
  btnDeleteHead.setText(RedisClient.i18nFile.getText(I18nFile.DELETEHEAD));
  btnDeleteTail=new Button(grpValues,SWT.NONE);
  btnDeleteTail.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnDeleteTail.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      service.removeLast(id,db,key);
      pageListener.setCount();
      table.getItem(table.getItemCount() - 1);
      table.setSelection(table.getItemCount() - 1);
      table.setSelection(-1);
      currentData.setItem(null);
      status=Status.Normal;
      statusChanged();
    }
  }
);
  btnDeleteTail.setText(RedisClient.i18nFile.getText(I18nFile.DELETETAIL));
  btnApply=new Button(grpValues,SWT.NONE);
  btnApply.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TableItem[] items=table.getSelection();
      service.setValue(id,db,key,table.getSelectionIndex(),items[0].getText());
      table.setSelection(-1);
      currentData.setItem(null);
      status=Status.Normal;
      statusChanged();
    }
  }
);
  btnApply.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  setApply(false);
  btnApply.setText(RedisClient.i18nFile.getText(I18nFile.APPLY));
  btnCancel=new Button(grpValues,SWT.NONE);
  btnCancel.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
switch (status) {
case Normal:
        break;
case Update:
      table.setSelection(-1);
    status=Status.Normal;
  currentData.setItem(null);
statusChanged();
break;
case Updating:
currentData.reset();
status=Status.Update;
listener.clickRow(currentData.getItem(),0);
addModifyTextListener();
statusChanged();
break;
}
}
}
);
btnCancel.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
btnCancel.setEnabled(false);
btnCancel.setText(RedisClient.i18nFile.getText(I18nFile.CANCEL));
btnRefresh=new Button(grpValues,SWT.NONE);
btnRefresh.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
refresh();
}
}
);
btnRefresh.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
btnRefresh.setEnabled(true);
btnRefresh.setText(RedisClient.i18nFile.getText(I18nFile.REFRESH));
new Label(grpValues,SWT.NONE);
new Label(grpValues,SWT.NONE);
new Label(grpValues,SWT.NONE);
}",0.9962033521622372
62263,"public void modifyText(ModifyEvent e){
switch (status) {
case Normal:
    break;
case Update:
  status=Status.Updating;
statusChanged();
break;
case Updating:
break;
}
logger.info(""String_Node_Str"" + status);
}","public void modifyText(ModifyEvent e){
switch (status) {
case Normal:
    break;
case Update:
  status=Status.Updating;
statusChanged();
break;
case Updating:
break;
}
}",0.8918205804749341
62264,"private void addModifyTextListener(){
  editor=listener.getText();
  if (!editor.isDisposed()) {
    editor.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
switch (status) {
case Normal:
          break;
case Update:
        status=Status.Updating;
      statusChanged();
    break;
case Updating:
  break;
}
logger.info(""String_Node_Str"" + status);
}
}
);
}
}","private void addModifyTextListener(){
  editor=listener.getText();
  if (!editor.isDisposed()) {
    editor.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
switch (status) {
case Normal:
          break;
case Update:
        status=Status.Updating;
      statusChanged();
    break;
case Updating:
  break;
}
}
}
);
}
}",0.9202614379084968
62265,"/** 
 * @wbp.parser.entryPoint
 */
@Override protected void initData(Composite dataComposite){
  grpValues=new Group(dataComposite,SWT.NONE);
  grpValues.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,4,1));
  grpValues.setText(RedisClient.i18nFile.getText(I18nFile.VALUES));
  grpValues.setLayout(new GridLayout(4,false));
  table=new Table(grpValues,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI| SWT.VIRTUAL);
  ;
  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,5));
  table.setHeaderVisible(true);
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      tableItemSelected();
    }
  }
);
  table.setLinesVisible(true);
  table.addListener(SWT.MouseDown,new EditListener(table,false));
  editListener=new EditListener(table,true);
  pageListener=new PagingListener(table,new ZSetPage(id,db,key));
  table.addListener(SWT.SetData,pageListener);
  tblclmnNewColumn=new TableColumn(table,SWT.NONE);
  tblclmnNewColumn.setWidth(88);
  tblclmnNewColumn.setText(RedisClient.i18nFile.getText(I18nFile.SCORE));
  tblclmnMember=new TableColumn(table,SWT.NONE);
  tblclmnMember.setWidth(164);
  tblclmnMember.setText(RedisClient.i18nFile.getText(I18nFile.MEMBER));
  btnAdd=new Button(grpValues,SWT.NONE);
  btnAdd.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnAdd.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      table.addListener(SWT.MouseDown,editListener);
      table.removeListener(SWT.SetData,pageListener);
      pageListener=new PagingListener(table,new ZSetPage(id,db,key),true);
      table.addListener(SWT.SetData,pageListener);
      table.clearAll();
      TableItem item=table.getItem(0);
      table.setSelection(item);
      item.setText(new String[]{""String_Node_Str"",""String_Node_Str""});
      editListener.clickRow(item,0);
      addModifyTextListener();
      currentItem=item;
      status=Status.Add;
      statusChanged();
    }
  }
);
  btnAdd.setText(RedisClient.i18nFile.getText(I18nFile.ADD));
  btnDelete=new Button(grpValues,SWT.NONE);
  btnDelete.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnDelete.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (table.getSelectionCount() > 0) {
        String[] members=new String[table.getSelectionCount()];
        int i=0;
        TableItem[] items=table.getSelection();
        for (        TableItem item : items) {
          members[i++]=item.getText(1);
        }
        service.removeMembers(id,db,key,members);
        for (        TableItem item : items) {
          item.dispose();
        }
        table.setSelection(-1);
        currentItem=null;
        btnDelete.setEnabled(false);
      }
    }
  }
);
  btnDelete.setEnabled(false);
  btnDelete.setText(RedisClient.i18nFile.getText(I18nFile.DELETE));
  btnApply=new Button(grpValues,SWT.NONE);
  btnApply.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      add();
    }
  }
);
  setApply(false);
  btnApply.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnApply.setText(RedisClient.i18nFile.getText(I18nFile.APPLY));
  btnCancel=new Button(grpValues,SWT.NONE);
  btnCancel.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
switch (status) {
case Normal:
        break;
case Add:
      refresh();
    status=Status.Normal;
  currentItem=null;
statusChanged();
break;
case Adding:
refresh();
status=Status.Normal;
currentItem=null;
statusChanged();
break;
}
logger.info(""String_Node_Str"" + status);
}
}
);
btnCancel.setEnabled(false);
btnCancel.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
btnCancel.setText(RedisClient.i18nFile.getText(I18nFile.CANCEL));
btnRefresh=new Button(grpValues,SWT.NONE);
btnRefresh.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
refresh();
}
}
);
btnRefresh.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
btnRefresh.setText(RedisClient.i18nFile.getText(I18nFile.REFRESH));
}","/** 
 * @wbp.parser.entryPoint
 */
@Override protected void initData(Composite dataComposite){
  grpValues=new Group(dataComposite,SWT.NONE);
  grpValues.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,4,1));
  grpValues.setText(RedisClient.i18nFile.getText(I18nFile.VALUES));
  grpValues.setLayout(new GridLayout(4,false));
  table=new Table(grpValues,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI| SWT.VIRTUAL);
  ;
  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,5));
  table.setHeaderVisible(true);
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      tableItemSelected();
    }
  }
);
  table.setLinesVisible(true);
  table.addListener(SWT.MouseDown,new EditListener(table,false));
  editListener=new EditListener(table,true);
  pageListener=new PagingListener(table,new ZSetPage(id,db,key));
  table.addListener(SWT.SetData,pageListener);
  tblclmnNewColumn=new TableColumn(table,SWT.NONE);
  tblclmnNewColumn.setWidth(88);
  tblclmnNewColumn.setText(RedisClient.i18nFile.getText(I18nFile.SCORE));
  tblclmnMember=new TableColumn(table,SWT.NONE);
  tblclmnMember.setWidth(164);
  tblclmnMember.setText(RedisClient.i18nFile.getText(I18nFile.MEMBER));
  btnAdd=new Button(grpValues,SWT.NONE);
  btnAdd.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnAdd.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      table.addListener(SWT.MouseDown,editListener);
      table.removeListener(SWT.SetData,pageListener);
      pageListener=new PagingListener(table,new ZSetPage(id,db,key),true);
      table.addListener(SWT.SetData,pageListener);
      table.clearAll();
      TableItem item=table.getItem(0);
      table.setSelection(item);
      item.setText(new String[]{""String_Node_Str"",""String_Node_Str""});
      editListener.clickRow(item,0);
      addModifyTextListener();
      currentItem=item;
      status=Status.Add;
      statusChanged();
    }
  }
);
  btnAdd.setText(RedisClient.i18nFile.getText(I18nFile.ADD));
  btnDelete=new Button(grpValues,SWT.NONE);
  btnDelete.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnDelete.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (table.getSelectionCount() > 0) {
        String[] members=new String[table.getSelectionCount()];
        int i=0;
        TableItem[] items=table.getSelection();
        for (        TableItem item : items) {
          members[i++]=item.getText(1);
        }
        service.removeMembers(id,db,key,members);
        for (        TableItem item : items) {
          item.dispose();
        }
        table.setSelection(-1);
        currentItem=null;
        btnDelete.setEnabled(false);
      }
    }
  }
);
  btnDelete.setEnabled(false);
  btnDelete.setText(RedisClient.i18nFile.getText(I18nFile.DELETE));
  btnApply=new Button(grpValues,SWT.NONE);
  btnApply.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      add();
    }
  }
);
  setApply(false);
  btnApply.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnApply.setText(RedisClient.i18nFile.getText(I18nFile.APPLY));
  btnCancel=new Button(grpValues,SWT.NONE);
  btnCancel.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
switch (status) {
case Normal:
        break;
case Add:
      refresh();
    status=Status.Normal;
  currentItem=null;
statusChanged();
break;
case Adding:
refresh();
status=Status.Normal;
currentItem=null;
statusChanged();
break;
}
}
}
);
btnCancel.setEnabled(false);
btnCancel.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
btnCancel.setText(RedisClient.i18nFile.getText(I18nFile.CANCEL));
btnRefresh=new Button(grpValues,SWT.NONE);
btnRefresh.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
refresh();
}
}
);
btnRefresh.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
btnRefresh.setText(RedisClient.i18nFile.getText(I18nFile.REFRESH));
}",0.9951277480689246
62266,"public void modifyText(ModifyEvent e){
switch (status) {
case Normal:
    break;
case Add:
  status=Status.Adding;
statusChanged();
break;
case Adding:
break;
}
logger.info(""String_Node_Str"" + status);
}","public void modifyText(ModifyEvent e){
switch (status) {
case Normal:
    break;
case Add:
  status=Status.Adding;
statusChanged();
break;
case Adding:
break;
}
}",0.8876712328767123
62267,"private void addModifyTextListener(){
  editor=editListener.getText();
  if (!editor.isDisposed()) {
    editor.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
switch (status) {
case Normal:
          break;
case Add:
        status=Status.Adding;
      statusChanged();
    break;
case Adding:
  break;
}
logger.info(""String_Node_Str"" + status);
}
}
);
}
}","private void addModifyTextListener(){
  editor=editListener.getText();
  if (!editor.isDisposed()) {
    editor.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
switch (status) {
case Normal:
          break;
case Add:
        status=Status.Adding;
      statusChanged();
    break;
case Adding:
  break;
}
}
}
);
}
}",0.919631093544137
62268,"protected void tableItemSelected(){
  TableItem[] items=table.getSelection();
  if (status != Status.Normal)   addModifyTextListener();
  logger.info(""String_Node_Str"" + status);
  if (items.length > 0 && currentItem != items[0]) {
switch (status) {
case Normal:
      break;
case Add:
    refresh();
  editListener.getText().dispose();
break;
case Adding:
add();
editListener.getText().dispose();
break;
}
currentItem=items[0];
status=Status.Normal;
logger.info(""String_Node_Str"" + status);
}
statusChanged();
}","protected void tableItemSelected(){
  TableItem[] items=table.getSelection();
  if (status != Status.Normal)   addModifyTextListener();
  if (items.length > 0 && currentItem != items[0]) {
switch (status) {
case Normal:
      break;
case Add:
    refresh();
  editListener.getText().dispose();
break;
case Adding:
add();
editListener.getText().dispose();
break;
}
currentItem=items[0];
status=Status.Normal;
}
statusChanged();
}",0.9106382978723404
62269,"public void statusChanged(){
switch (status) {
case Normal:
    btnAdd.setEnabled(true);
  if (table.getSelectionCount() > 0)   btnDelete.setEnabled(true);
 else   btnDelete.setEnabled(false);
setApply(false);
btnCancel.setEnabled(false);
btnRefresh.setEnabled(true);
break;
case Add:
btnAdd.setEnabled(false);
btnDelete.setEnabled(false);
setApply(false);
btnCancel.setEnabled(true);
btnRefresh.setEnabled(false);
break;
case Adding:
btnAdd.setEnabled(false);
btnDelete.setEnabled(false);
setApply(true);
btnCancel.setEnabled(true);
btnRefresh.setEnabled(false);
break;
}
logger.info(""String_Node_Str"" + status);
}","public void statusChanged(){
switch (status) {
case Normal:
    btnAdd.setEnabled(true);
  if (table.getSelectionCount() > 0)   btnDelete.setEnabled(true);
 else   btnDelete.setEnabled(false);
setApply(false);
btnCancel.setEnabled(false);
btnRefresh.setEnabled(true);
break;
case Add:
btnAdd.setEnabled(false);
btnDelete.setEnabled(false);
setApply(false);
btnCancel.setEnabled(true);
btnRefresh.setEnabled(false);
break;
case Adding:
btnAdd.setEnabled(false);
btnDelete.setEnabled(false);
setApply(true);
btnCancel.setEnabled(true);
btnRefresh.setEnabled(false);
break;
}
}",0.9655172413793104
62270,"private void pasteOne(ContainerKeyInfo target,ContainerKeyInfo source){
  if (!pBuffer.isCopy() && !source.getContainer().isKey()) {
    pBuffer.getCutItem().dispose();
  }
  if (source.getContainer().isKey()) {
    String newKey=service2.pasteKey(source.getId(),source.getDb(),source.getContainerStr(),target.getId(),target.getDb(),target.getContainerStr() + source.getContainer().getKeyOnly(),pBuffer.isCopy(),true);
    if (newKey == null)     gotoDBContainer(target.getId(),target.getDb(),target.getContainerStr() + source.getContainer().getKeyOnly(),true,true);
 else     gotoDBContainer(target.getId(),target.getDb(),newKey,true,true);
  }
 else {
    service2.pasteContainer(source.getId(),source.getDb(),source.getContainerStr(),target.getId(),target.getDb(),target.getContainerStr(),pBuffer.isCopy(),true);
    gotoDBContainer(target.getId(),target.getDb(),target.getContainerStr(),false,true);
  }
}","private void pasteOne(ContainerKeyInfo target,ContainerKeyInfo source){
  if (!pBuffer.isCopy() && !source.getContainer().isKey()) {
    pBuffer.getCutItem().dispose();
  }
  if (source.getContainer() != null && source.getContainer().isKey()) {
    String newKey=service2.pasteKey(source.getId(),source.getDb(),source.getContainerStr(),target.getId(),target.getDb(),target.getContainerStr() + source.getContainer().getKeyOnly(),pBuffer.isCopy(),true);
    if (newKey == null)     gotoDBContainer(target.getId(),target.getDb(),target.getContainerStr() + source.getContainer().getKeyOnly(),true,true);
 else     gotoDBContainer(target.getId(),target.getDb(),newKey,true,true);
  }
 else {
    service2.pasteContainer(source.getId(),source.getDb(),source.getContainerStr(),target.getId(),target.getDb(),target.getContainerStr(),pBuffer.isCopy(),true);
    gotoDBContainer(target.getId(),target.getDb(),target.getContainerStr(),false,true);
  }
}",0.9821717990275528
62271,"private void initShell(){
  shell=new Shell();
  shell.addListener(SWT.Close,new Listener(){
    public void handleEvent(    Event event){
      if (!openDataContent.canClose()) {
        boolean ok=MessageDialog.openConfirm(shell,i18nFile.getText(I18nFile.CLOSEAPP),i18nFile.getText(I18nFile.CLOSEAPPERROR));
        event.doit=ok;
      }
 else       event.doit=true;
    }
  }
);
  shell.setSize(1074,772);
  shell.setText(""String_Node_Str"");
  shell.setLayout(new GridLayout(1,false));
}","private void initShell(){
  shell=new Shell();
  shell.addListener(SWT.Close,new Listener(){
    public void handleEvent(    Event event){
      if (!openDataContent.canClose()) {
        boolean ok=MessageDialog.openConfirm(shell,i18nFile.getText(I18nFile.CLOSEAPP),i18nFile.getText(I18nFile.CLOSEAPPERROR));
        event.doit=ok;
      }
 else       event.doit=true;
    }
  }
);
  shell.setText(""String_Node_Str"");
  shell.setLayout(new GridLayout(1,false));
}",0.9717277486910996
62272,"/** 
 * @wbp.parser.entryPoint
 */
@Override protected void initTTLTabItem(TabFolder tabFolder){
  super.initTTLTabItem(tabFolder);
  new Label(ttlComposite,SWT.NONE);
  Composite composite=new Composite(ttlComposite,SWT.NONE);
  composite.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,true,false,1,1));
  composite.setLayout(new GridLayout(2,false));
  btnApply=new Button(composite,SWT.NONE);
  btnApply.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      try {
        service.expire(id,db,key,getTTL());
      }
 catch (      KeyNotExistException e1) {
        setTTLApply(false);
        throw e1;
      }
    }
  }
);
  btnApply.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  btnApply.setText(RedisClient.i18nFile.getText(I18nFile.APPLY));
  setTTLApply(false);
  btnRefresh=new Button(composite,SWT.NONE);
  btnRefresh.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  btnRefresh.setText(RedisClient.i18nFile.getText(I18nFile.REFRESH));
  btnRefresh.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      try {
        setTTL((int)service.getTTL(id,db,key));
      }
 catch (      KeyNotExistException e1) {
        setTTLApply(false);
        throw e1;
      }
    }
  }
);
  btnExpire.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (btnExpire.getSelection()) {
        labelTTL.setEnabled(true);
        ttl.setEnabled(true);
        ttl.selectAll();
        ttl.setFocus();
        setTTLApply(true);
      }
 else {
        labelTTL.setEnabled(false);
        ttl.setEnabled(false);
        setTTLApply(true);
      }
    }
  }
);
  ttl.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setTTLApply(true);
    }
  }
);
  setTTL((int)service.getTTL(id,db,key));
}","/** 
 * @wbp.parser.entryPoint
 */
@Override protected void initTTLTabItem(TabFolder tabFolder){
  super.initTTLTabItem(tabFolder);
  new Label(ttlComposite,SWT.NONE);
  Composite composite=new Composite(ttlComposite,SWT.NONE);
  composite.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,true,false,1,1));
  composite.setLayout(new GridLayout(2,false));
  btnApply=new Button(composite,SWT.NONE);
  btnApply.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      try {
        service.expire(id,db,key,getTTL());
      }
  finally {
        setTTLApply(false);
      }
    }
  }
);
  btnApply.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  btnApply.setText(RedisClient.i18nFile.getText(I18nFile.APPLY));
  setTTLApply(false);
  btnRefresh=new Button(composite,SWT.NONE);
  btnRefresh.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  btnRefresh.setText(RedisClient.i18nFile.getText(I18nFile.REFRESH));
  btnRefresh.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      try {
        setTTL((int)service.getTTL(id,db,key));
      }
  finally {
        setTTLApply(false);
      }
    }
  }
);
  btnExpire.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (btnExpire.getSelection()) {
        labelTTL.setEnabled(true);
        ttl.setEnabled(true);
        ttl.selectAll();
        ttl.setFocus();
        setTTLApply(true);
      }
 else {
        labelTTL.setEnabled(false);
        ttl.setEnabled(false);
        setTTLApply(true);
      }
    }
  }
);
  ttl.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setTTLApply(true);
    }
  }
);
  setTTL((int)service.getTTL(id,db,key));
}",0.96694648478489
62273,"public void setCount(){
  this.count=(int)page.getCount();
  table.setItemCount(count);
}","public void setCount(){
  this.count=(int)page.getCount();
  if (count == 0)   throw new RuntimeException(RedisClient.i18nFile.getText(I18nFile.KEYNOTEXIST));
  table.setItemCount(count);
}",0.6402877697841727
62274,"@Override public String getMessage(){
  return RedisClient.i18nFile.getText(I18nFile.KEYNOTEXIST) + key;
}","@Override public String getMessage(){
  return RedisClient.i18nFile.getText(I18nFile.KEYNOTEXIST) + ""String_Node_Str"" + key;
}",0.913793103448276
62275,"public boolean canClose(){
  for (  DataContent dataContent : dataContents)   if (!dataContent.canClose())   return false;
  return true;
}","public String canClose(){
  for (  DataContent dataContent : dataContents)   if (!dataContent.canClose())   return dataContent.getKey();
  return null;
}",0.8698630136986302
62276,"public void handleEvent(Event event){
  if (!openDataContent.canClose()) {
    boolean ok=MessageDialog.openConfirm(shell,i18nFile.getText(I18nFile.CLOSEAPP),i18nFile.getText(I18nFile.CLOSEAPPERROR));
    event.doit=ok;
  }
 else   event.doit=true;
}","public void handleEvent(Event event){
  String key=openDataContent.canClose();
  if (key != null) {
    boolean ok=MessageDialog.openConfirm(shell,i18nFile.getText(I18nFile.CLOSEAPP),key + ""String_Node_Str"" + i18nFile.getText(I18nFile.CLOSEAPPERROR));
    event.doit=ok;
  }
 else   event.doit=true;
}",0.8130671506352087
62277,"private void initShell(){
  shell=new Shell();
  shell.addListener(SWT.Close,new Listener(){
    public void handleEvent(    Event event){
      if (!openDataContent.canClose()) {
        boolean ok=MessageDialog.openConfirm(shell,i18nFile.getText(I18nFile.CLOSEAPP),i18nFile.getText(I18nFile.CLOSEAPPERROR));
        event.doit=ok;
      }
 else       event.doit=true;
    }
  }
);
  shell.setText(""String_Node_Str"");
  shell.setLayout(new GridLayout(1,false));
}","private void initShell(){
  shell=new Shell();
  shell.addListener(SWT.Close,new Listener(){
    public void handleEvent(    Event event){
      String key=openDataContent.canClose();
      if (key != null) {
        boolean ok=MessageDialog.openConfirm(shell,i18nFile.getText(I18nFile.CLOSEAPP),key + ""String_Node_Str"" + i18nFile.getText(I18nFile.CLOSEAPPERROR));
        event.doit=ok;
      }
 else       event.doit=true;
    }
  }
);
  shell.setText(""String_Node_Str"");
  shell.setLayout(new GridLayout(1,false));
}",0.8911495422177009
62278,"@Override protected void initTTLTabItem(TabFolder tabFolder){
  super.initTTLTabItem(tabFolder);
  new Label(ttlComposite,SWT.NONE);
  Composite composite=new Composite(ttlComposite,SWT.NONE);
  composite.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,true,false,1,1));
  composite.setLayout(new GridLayout(2,false));
  btnApply=new Button(composite,SWT.NONE);
  btnApply.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      service.expire(id,db,key,getTTL());
      setTTLApply(false);
    }
  }
);
  btnApply.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  btnApply.setText(RedisClient.i18nFile.getText(I18nFile.APPLY));
  setTTLApply(false);
  btnRefresh=new Button(composite,SWT.NONE);
  btnRefresh.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  btnRefresh.setText(RedisClient.i18nFile.getText(I18nFile.REFRESH));
  btnRefresh.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setTTL((int)service.getTTL(id,db,key));
      setTTLApply(false);
    }
  }
);
  btnExpire.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (btnExpire.getSelection()) {
        labelTTL.setEnabled(true);
        ttl.setEnabled(true);
        ttl.selectAll();
        ttl.setFocus();
        setTTLApply(true);
      }
 else {
        labelTTL.setEnabled(false);
        ttl.setEnabled(false);
        setTTLApply(true);
      }
    }
  }
);
  ttl.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setTTLApply(true);
    }
  }
);
  setTTL((int)service.getTTL(id,db,key));
}","/** 
 * @wbp.parser.entryPoint
 */
@Override protected void initTTLTabItem(TabFolder tabFolder){
  super.initTTLTabItem(tabFolder);
  new Label(ttlComposite,SWT.NONE);
  Composite composite=new Composite(ttlComposite,SWT.NONE);
  composite.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,true,false,1,1));
  composite.setLayout(new GridLayout(2,false));
  btnApply=new Button(composite,SWT.NONE);
  btnApply.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      try {
        service.expire(id,db,key,getTTL());
      }
 catch (      KeyNotExistException e1) {
        setTTLApply(false);
        throw e1;
      }
    }
  }
);
  btnApply.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  btnApply.setText(RedisClient.i18nFile.getText(I18nFile.APPLY));
  setTTLApply(false);
  btnRefresh=new Button(composite,SWT.NONE);
  btnRefresh.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  btnRefresh.setText(RedisClient.i18nFile.getText(I18nFile.REFRESH));
  btnRefresh.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      try {
        setTTL((int)service.getTTL(id,db,key));
      }
 catch (      KeyNotExistException e1) {
        setTTLApply(false);
        throw e1;
      }
    }
  }
);
  btnExpire.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (btnExpire.getSelection()) {
        labelTTL.setEnabled(true);
        ttl.setEnabled(true);
        ttl.selectAll();
        ttl.setFocus();
        setTTLApply(true);
      }
 else {
        labelTTL.setEnabled(false);
        ttl.setEnabled(false);
        setTTLApply(true);
      }
    }
  }
);
  ttl.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setTTLApply(true);
    }
  }
);
  setTTL((int)service.getTTL(id,db,key));
}",0.9411764705882352
62279,"protected void createContents(){
  shell.setText(title);
  shell.setLayout(new GridLayout(1,false));
  dataContent.setShell(shell);
  okCancel.setShell(shell);
  shell.setSize(width,height);
  dataContent.initContents();
  okCancel.initContents();
  inputKey=dataContent.getInputKey();
  btnOk=okCancel.getOkButton();
  minWidth=500;
  minHeight=500;
  super.createContents();
}","protected void createContents(){
  shell.setText(title);
  shell.setLayout(new GridLayout(1,false));
  dataContent.setShell(shell);
  okCancel.setShell(shell);
  shell.setSize(width,height);
  dataContent.initContents();
  okCancel.initContents();
  inputKey=dataContent.getInputKey();
  btnOk=okCancel.getOkButton();
  minWidth=600;
  minHeight=500;
  super.createContents();
}",0.955026455026455
62280,"private void add(){
  TableItem item=new TableItem(table,SWT.NONE);
  table.setSelection(item);
  listener.clickRow(item,0);
  currentStatus=Status.Add;
  currentData.setItem(item);
  addModifyTextListener();
  logger.info(""String_Node_Str"" + currentStatus);
  statusChanged();
}","private void add(){
  TableItem item=new TableItem(table,SWT.NONE,0);
  table.setSelection(item);
  listener.clickRow(item,0);
  currentStatus=Status.Add;
  currentData.setItem(item);
  addModifyTextListener();
  logger.info(""String_Node_Str"" + currentStatus);
  statusChanged();
}",0.9964285714285714
62281,"@Override public void refreshLangUI(){
  grpValues.setText(RedisClient.i18nFile.getText(I18nFile.VALUES));
  btnInsertHead.setText(RedisClient.i18nFile.getText(I18nFile.INSERTHEAD));
  btnAppendTail.setText(RedisClient.i18nFile.getText(I18nFile.APPENDTAIL));
  btnDeleteHead.setText(RedisClient.i18nFile.getText(I18nFile.DELETEHEAD));
  btnDeleteTail.setText(RedisClient.i18nFile.getText(I18nFile.DELETETAIL));
  btnApply.setText(RedisClient.i18nFile.getText(I18nFile.APPLY));
  btnCancel.setText(RedisClient.i18nFile.getText(I18nFile.CANCEL));
  btnRefresh.setText(RedisClient.i18nFile.getText(I18nFile.REFRESH));
  super.refreshLangUI();
}","@Override public void refreshLangUI(){
  grpValues.setText(RedisClient.i18nFile.getText(I18nFile.VALUES));
  tblclmnNewColumn.setText(RedisClient.i18nFile.getText(I18nFile.VALUE));
  btnInsertHead.setText(RedisClient.i18nFile.getText(I18nFile.INSERTHEAD));
  btnAppendTail.setText(RedisClient.i18nFile.getText(I18nFile.APPENDTAIL));
  btnDeleteHead.setText(RedisClient.i18nFile.getText(I18nFile.DELETEHEAD));
  btnDeleteTail.setText(RedisClient.i18nFile.getText(I18nFile.DELETETAIL));
  btnApply.setText(RedisClient.i18nFile.getText(I18nFile.APPLY));
  btnCancel.setText(RedisClient.i18nFile.getText(I18nFile.CANCEL));
  btnRefresh.setText(RedisClient.i18nFile.getText(I18nFile.REFRESH));
  super.refreshLangUI();
}",0.9454277286135692
62282,"/** 
 * @wbp.parser.entryPoint
 */
@Override protected void initData(Composite dataComposite){
  grpValues=new Group(dataComposite,SWT.NONE);
  grpValues.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,4,1));
  grpValues.setText(RedisClient.i18nFile.getText(I18nFile.VALUES));
  grpValues.setLayout(new GridLayout(4,false));
  table=new Table(grpValues,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI| SWT.VIRTUAL);
  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,5));
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      tableItemSelected();
    }
  }
);
  table.setLinesVisible(true);
  listener=new EditListener(table,true);
  table.addListener(SWT.MouseDown,listener);
  pageListener=new PagingListener(table,new ListPage(id,db,key));
  table.addListener(SWT.SetData,pageListener);
  TableColumn tblclmnNewColumn=new TableColumn(table,SWT.NONE);
  tblclmnNewColumn.setWidth(200);
  btnInsertHead=new Button(grpValues,SWT.NONE);
  btnInsertHead.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnInsertHead.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      InputDialog dialog=new InputDialog(shell.getParent().getShell(),RedisClient.i18nFile.getText(I18nFile.INSERTHEAD),RedisClient.i18nFile.getText(I18nFile.INPUTVALUES),""String_Node_Str"",null);
      if (dialog.open() == InputDialog.OK) {
        String value=dialog.getValue();
        service.addHead(id,db,key,value);
        refresh();
      }
    }
  }
);
  btnInsertHead.setText(RedisClient.i18nFile.getText(I18nFile.INSERTHEAD));
  btnAppendTail=new Button(grpValues,SWT.NONE);
  btnAppendTail.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnAppendTail.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      InputDialog dialog=new InputDialog(shell.getParent().getShell(),RedisClient.i18nFile.getText(I18nFile.APPENDTAIL),RedisClient.i18nFile.getText(I18nFile.INPUTVALUES),""String_Node_Str"",null);
      if (dialog.open() == InputDialog.OK) {
        String value=dialog.getValue();
        service.addTail(id,db,key,value);
        pageListener.setCount();
        table.clear(table.getItemCount() - 1);
        table.setSelection(table.getItemCount() - 1);
        table.setSelection(-1);
        currentData.setItem(null);
        status=Status.Normal;
        statusChanged();
      }
    }
  }
);
  btnAppendTail.setText(RedisClient.i18nFile.getText(I18nFile.APPENDTAIL));
  btnDeleteHead=new Button(grpValues,SWT.NONE);
  btnDeleteHead.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnDeleteHead.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      service.removeFirst(id,db,key);
      refresh();
    }
  }
);
  btnDeleteHead.setText(RedisClient.i18nFile.getText(I18nFile.DELETEHEAD));
  btnDeleteTail=new Button(grpValues,SWT.NONE);
  btnDeleteTail.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnDeleteTail.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      service.removeLast(id,db,key);
      pageListener.setCount();
      table.getItem(table.getItemCount() - 1);
      table.setSelection(table.getItemCount() - 1);
      table.setSelection(-1);
      currentData.setItem(null);
      status=Status.Normal;
      statusChanged();
    }
  }
);
  btnDeleteTail.setText(RedisClient.i18nFile.getText(I18nFile.DELETETAIL));
  btnApply=new Button(grpValues,SWT.NONE);
  btnApply.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TableItem[] items=table.getSelection();
      service.setValue(id,db,key,table.getSelectionIndex(),items[0].getText());
      table.setSelection(-1);
      currentData.setItem(null);
      status=Status.Normal;
      statusChanged();
    }
  }
);
  btnApply.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  setApply(false);
  btnApply.setText(RedisClient.i18nFile.getText(I18nFile.APPLY));
  btnCancel=new Button(grpValues,SWT.NONE);
  btnCancel.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
switch (status) {
case Normal:
        break;
case Update:
      table.setSelection(-1);
    status=Status.Normal;
  currentData.setItem(null);
statusChanged();
break;
case Updating:
currentData.reset();
status=Status.Update;
listener.clickRow(currentData.getItem(),0);
addModifyTextListener();
statusChanged();
break;
}
logger.info(""String_Node_Str"" + status);
}
}
);
btnCancel.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
btnCancel.setEnabled(false);
btnCancel.setText(RedisClient.i18nFile.getText(I18nFile.CANCEL));
btnRefresh=new Button(grpValues,SWT.NONE);
btnRefresh.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
refresh();
}
}
);
btnRefresh.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
btnRefresh.setEnabled(true);
btnRefresh.setText(RedisClient.i18nFile.getText(I18nFile.REFRESH));
new Label(grpValues,SWT.NONE);
new Label(grpValues,SWT.NONE);
new Label(grpValues,SWT.NONE);
}","/** 
 * @wbp.parser.entryPoint
 */
@Override protected void initData(Composite dataComposite){
  grpValues=new Group(dataComposite,SWT.NONE);
  grpValues.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,4,1));
  grpValues.setText(RedisClient.i18nFile.getText(I18nFile.VALUES));
  grpValues.setLayout(new GridLayout(4,false));
  table=new Table(grpValues,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI| SWT.VIRTUAL);
  table.setHeaderVisible(true);
  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,5));
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      tableItemSelected();
    }
  }
);
  table.setLinesVisible(true);
  listener=new EditListener(table,true);
  table.addListener(SWT.MouseDown,listener);
  pageListener=new PagingListener(table,new ListPage(id,db,key));
  table.addListener(SWT.SetData,pageListener);
  tblclmnNewColumn=new TableColumn(table,SWT.NONE);
  tblclmnNewColumn.setText(RedisClient.i18nFile.getText(I18nFile.VALUE));
  tblclmnNewColumn.setWidth(200);
  btnInsertHead=new Button(grpValues,SWT.NONE);
  btnInsertHead.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnInsertHead.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      InputDialog dialog=new InputDialog(shell.getParent().getShell(),RedisClient.i18nFile.getText(I18nFile.INSERTHEAD),RedisClient.i18nFile.getText(I18nFile.INPUTVALUES),""String_Node_Str"",null);
      if (dialog.open() == InputDialog.OK) {
        String value=dialog.getValue();
        service.addHead(id,db,key,value);
        refresh();
      }
    }
  }
);
  btnInsertHead.setText(RedisClient.i18nFile.getText(I18nFile.INSERTHEAD));
  btnAppendTail=new Button(grpValues,SWT.NONE);
  btnAppendTail.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnAppendTail.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      InputDialog dialog=new InputDialog(shell.getParent().getShell(),RedisClient.i18nFile.getText(I18nFile.APPENDTAIL),RedisClient.i18nFile.getText(I18nFile.INPUTVALUES),""String_Node_Str"",null);
      if (dialog.open() == InputDialog.OK) {
        String value=dialog.getValue();
        service.addTail(id,db,key,value);
        pageListener.setCount();
        table.clear(table.getItemCount() - 1);
        table.setSelection(table.getItemCount() - 1);
        table.setSelection(-1);
        currentData.setItem(null);
        status=Status.Normal;
        statusChanged();
      }
    }
  }
);
  btnAppendTail.setText(RedisClient.i18nFile.getText(I18nFile.APPENDTAIL));
  btnDeleteHead=new Button(grpValues,SWT.NONE);
  btnDeleteHead.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnDeleteHead.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      service.removeFirst(id,db,key);
      refresh();
    }
  }
);
  btnDeleteHead.setText(RedisClient.i18nFile.getText(I18nFile.DELETEHEAD));
  btnDeleteTail=new Button(grpValues,SWT.NONE);
  btnDeleteTail.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnDeleteTail.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      service.removeLast(id,db,key);
      pageListener.setCount();
      table.getItem(table.getItemCount() - 1);
      table.setSelection(table.getItemCount() - 1);
      table.setSelection(-1);
      currentData.setItem(null);
      status=Status.Normal;
      statusChanged();
    }
  }
);
  btnDeleteTail.setText(RedisClient.i18nFile.getText(I18nFile.DELETETAIL));
  btnApply=new Button(grpValues,SWT.NONE);
  btnApply.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TableItem[] items=table.getSelection();
      service.setValue(id,db,key,table.getSelectionIndex(),items[0].getText());
      table.setSelection(-1);
      currentData.setItem(null);
      status=Status.Normal;
      statusChanged();
    }
  }
);
  btnApply.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  setApply(false);
  btnApply.setText(RedisClient.i18nFile.getText(I18nFile.APPLY));
  btnCancel=new Button(grpValues,SWT.NONE);
  btnCancel.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
switch (status) {
case Normal:
        break;
case Update:
      table.setSelection(-1);
    status=Status.Normal;
  currentData.setItem(null);
statusChanged();
break;
case Updating:
currentData.reset();
status=Status.Update;
listener.clickRow(currentData.getItem(),0);
addModifyTextListener();
statusChanged();
break;
}
logger.info(""String_Node_Str"" + status);
}
}
);
btnCancel.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
btnCancel.setEnabled(false);
btnCancel.setText(RedisClient.i18nFile.getText(I18nFile.CANCEL));
btnRefresh=new Button(grpValues,SWT.NONE);
btnRefresh.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
refresh();
}
}
);
btnRefresh.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
btnRefresh.setEnabled(true);
btnRefresh.setText(RedisClient.i18nFile.getText(I18nFile.REFRESH));
new Label(grpValues,SWT.NONE);
new Label(grpValues,SWT.NONE);
new Label(grpValues,SWT.NONE);
}",0.9890191699236924
62283,"@Override protected void initData(Composite dataComposite){
  grpValues=new Group(dataComposite,SWT.NONE);
  grpValues.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,4,1));
  grpValues.setText(RedisClient.i18nFile.getText(I18nFile.VALUES));
  grpValues.setLayout(new GridLayout(4,false));
  table=new Table(grpValues,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI);
  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,2));
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      tableItemSelected();
    }
  }
);
  table.setLinesVisible(true);
  table.addListener(SWT.MouseDown,new EditListener(table,true));
  TableColumn tblclmnNewColumn=new TableColumn(table,SWT.NONE);
  tblclmnNewColumn.setWidth(200);
  Button btnAdd=new Button(grpValues,SWT.NONE);
  btnAdd.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnAdd.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      InputDialog inputDialog=new InputDialog((Shell)shell,RedisClient.i18nFile.getText(I18nFile.INPUTVALUES),RedisClient.i18nFile.getText(I18nFile.LISTINPUTFORMAT),""String_Node_Str"",null);
      if (inputDialog.open() == InputDialog.OK) {
        String values=inputDialog.getValue();
        String[] listValues=values.split(""String_Node_Str"");
        TableItem item=null;
        for (        String value : listValues) {
          item=new TableItem(table,SWT.NONE);
          item.setText(value);
        }
        if (item != null)         table.setSelection(item);
      }
    }
  }
);
  btnAdd.setText(RedisClient.i18nFile.getText(I18nFile.ADD));
  btnDelete=new Button(grpValues,SWT.NONE);
  btnDelete.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnDelete.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TableItem[] items=table.getSelection();
      for (      TableItem item : items) {
        item.dispose();
      }
      tableItemSelected();
    }
  }
);
  btnDelete.setEnabled(false);
  btnDelete.setText(RedisClient.i18nFile.getText(I18nFile.DELETE));
}","/** 
 * @wbp.parser.entryPoint
 */
@Override protected void initData(Composite dataComposite){
  grpValues=new Group(dataComposite,SWT.NONE);
  grpValues.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,4,1));
  grpValues.setText(RedisClient.i18nFile.getText(I18nFile.VALUES));
  grpValues.setLayout(new GridLayout(4,false));
  table=new Table(grpValues,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI);
  table.setHeaderVisible(true);
  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,2));
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      tableItemSelected();
    }
  }
);
  table.setLinesVisible(true);
  table.addListener(SWT.MouseDown,new EditListener(table,true));
  tblclmnNewColumn=new TableColumn(table,SWT.NONE);
  tblclmnNewColumn.setText(RedisClient.i18nFile.getText(I18nFile.VALUE));
  tblclmnNewColumn.setWidth(200);
  Button btnAdd=new Button(grpValues,SWT.NONE);
  btnAdd.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnAdd.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      InputDialog inputDialog=new InputDialog((Shell)shell,RedisClient.i18nFile.getText(I18nFile.INPUTVALUES),RedisClient.i18nFile.getText(I18nFile.LISTINPUTFORMAT),""String_Node_Str"",null);
      if (inputDialog.open() == InputDialog.OK) {
        String values=inputDialog.getValue();
        String[] listValues=values.split(""String_Node_Str"");
        TableItem item=null;
        for (        String value : listValues) {
          item=new TableItem(table,SWT.NONE);
          item.setText(value);
        }
        if (item != null)         table.setSelection(item);
      }
    }
  }
);
  btnAdd.setText(RedisClient.i18nFile.getText(I18nFile.ADD));
  btnDelete=new Button(grpValues,SWT.NONE);
  btnDelete.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnDelete.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TableItem[] items=table.getSelection();
      for (      TableItem item : items) {
        item.dispose();
      }
      tableItemSelected();
    }
  }
);
  btnDelete.setEnabled(false);
  btnDelete.setText(RedisClient.i18nFile.getText(I18nFile.DELETE));
}",0.966022651565623
62284,"@Override public void refreshLangUI(){
  grpValues.setText(RedisClient.i18nFile.getText(I18nFile.VALUES));
  btnAdd.setText(RedisClient.i18nFile.getText(I18nFile.ADD));
  btnDelete.setText(RedisClient.i18nFile.getText(I18nFile.DELETE));
  btnRefresh.setText(RedisClient.i18nFile.getText(I18nFile.REFRESH));
  super.refreshLangUI();
}","@Override public void refreshLangUI(){
  grpValues.setText(RedisClient.i18nFile.getText(I18nFile.VALUES));
  tblclmnNewColumn.setText(RedisClient.i18nFile.getText(I18nFile.VALUE));
  btnAdd.setText(RedisClient.i18nFile.getText(I18nFile.ADD));
  btnDelete.setText(RedisClient.i18nFile.getText(I18nFile.DELETE));
  btnRefresh.setText(RedisClient.i18nFile.getText(I18nFile.REFRESH));
  super.refreshLangUI();
}",0.9
62285,"/** 
 * @wbp.parser.entryPoint
 */
@Override protected void initData(Composite dataComposite){
  grpValues=new Group(dataComposite,SWT.NONE);
  grpValues.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,4,1));
  grpValues.setText(RedisClient.i18nFile.getText(I18nFile.VALUES));
  grpValues.setLayout(new GridLayout(4,false));
  table=new Table(grpValues,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI| SWT.VIRTUAL);
  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,3));
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      tableItemSelected();
    }
  }
);
  table.setLinesVisible(true);
  table.addListener(SWT.MouseDown,new EditListener(table,false));
  pageListener=new PagingListener(table,new SetPage(id,db,key));
  table.addListener(SWT.SetData,pageListener);
  TableColumn tblclmnNewColumn=new TableColumn(table,SWT.NONE);
  tblclmnNewColumn.setWidth(200);
  btnAdd=new Button(grpValues,SWT.NONE);
  btnAdd.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnAdd.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      InputDialog inputDialog=new InputDialog(shell.getParent().getShell(),RedisClient.i18nFile.getText(I18nFile.INPUTVALUES),RedisClient.i18nFile.getText(I18nFile.LISTINPUTFORMAT),""String_Node_Str"",null);
      if (inputDialog.open() == InputDialog.OK) {
        String values=inputDialog.getValue();
        String[] setValues=values.split(""String_Node_Str"");
        long size=service.addValues(id,db,key,setValues);
        if (size == 0)         MessageDialog.openInformation(shell.getParent().getShell(),RedisClient.i18nFile.getText(I18nFile.INPUTVALUES),RedisClient.i18nFile.getText(I18nFile.ADDSETVALUES));
        refresh();
      }
    }
  }
);
  btnAdd.setText(RedisClient.i18nFile.getText(I18nFile.ADD));
  btnDelete=new Button(grpValues,SWT.NONE);
  btnDelete.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnDelete.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Set<String> values=new HashSet<String>();
      TableItem[] items=table.getSelection();
      for (      TableItem item : items) {
        values.add(item.getText());
      }
      service.remove(id,db,key,values);
      for (      TableItem item : items) {
        item.dispose();
      }
      tableItemSelected();
    }
  }
);
  btnDelete.setEnabled(false);
  btnDelete.setText(RedisClient.i18nFile.getText(I18nFile.DELETE));
  btnRefresh=new Button(grpValues,SWT.NONE);
  btnRefresh.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      refresh();
    }
  }
);
  btnRefresh.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnRefresh.setText(RedisClient.i18nFile.getText(I18nFile.REFRESH));
}","/** 
 * @wbp.parser.entryPoint
 */
@Override protected void initData(Composite dataComposite){
  grpValues=new Group(dataComposite,SWT.NONE);
  grpValues.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,4,1));
  grpValues.setText(RedisClient.i18nFile.getText(I18nFile.VALUES));
  grpValues.setLayout(new GridLayout(4,false));
  table=new Table(grpValues,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI| SWT.VIRTUAL);
  table.setHeaderVisible(true);
  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,3));
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      tableItemSelected();
    }
  }
);
  table.setLinesVisible(true);
  table.addListener(SWT.MouseDown,new EditListener(table,false));
  pageListener=new PagingListener(table,new SetPage(id,db,key));
  table.addListener(SWT.SetData,pageListener);
  tblclmnNewColumn=new TableColumn(table,SWT.NONE);
  tblclmnNewColumn.setText(RedisClient.i18nFile.getText(I18nFile.VALUE));
  tblclmnNewColumn.setWidth(200);
  btnAdd=new Button(grpValues,SWT.NONE);
  btnAdd.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnAdd.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      InputDialog inputDialog=new InputDialog(shell.getParent().getShell(),RedisClient.i18nFile.getText(I18nFile.INPUTVALUES),RedisClient.i18nFile.getText(I18nFile.LISTINPUTFORMAT),""String_Node_Str"",null);
      if (inputDialog.open() == InputDialog.OK) {
        String values=inputDialog.getValue();
        String[] setValues=values.split(""String_Node_Str"");
        long size=service.addValues(id,db,key,setValues);
        if (size == 0)         MessageDialog.openInformation(shell.getParent().getShell(),RedisClient.i18nFile.getText(I18nFile.INPUTVALUES),RedisClient.i18nFile.getText(I18nFile.ADDSETVALUES));
        refresh();
      }
    }
  }
);
  btnAdd.setText(RedisClient.i18nFile.getText(I18nFile.ADD));
  btnDelete=new Button(grpValues,SWT.NONE);
  btnDelete.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnDelete.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Set<String> values=new HashSet<String>();
      TableItem[] items=table.getSelection();
      for (      TableItem item : items) {
        values.add(item.getText());
      }
      service.remove(id,db,key,values);
      for (      TableItem item : items) {
        item.dispose();
      }
      tableItemSelected();
    }
  }
);
  btnDelete.setEnabled(false);
  btnDelete.setText(RedisClient.i18nFile.getText(I18nFile.DELETE));
  btnRefresh=new Button(grpValues,SWT.NONE);
  btnRefresh.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      refresh();
    }
  }
);
  btnRefresh.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnRefresh.setText(RedisClient.i18nFile.getText(I18nFile.REFRESH));
}",0.9801145938658578
62286,"public void expire(int id,int db,String key,int ttl){
  Expire command1=new Expire(id,db,key,ttl);
  command1.execute();
}","public void expire(int id,int db,String key,int ttl){
  if (!isKeyExist(id,db,key))   throw new KeyNotExistException(id,db,key);
  Expire command1=new Expire(id,db,key,ttl);
  command1.execute();
}",0.7648902821316614
62287,"public long getTTL(int id,int db,String key){
  TTLs command=new TTLs(id,db,key);
  command.execute();
  long ttl=command.getSecond();
  if (ttl == -2)   throw new KeyNotExistException(id,db,key);
  return ttl;
}","public long getTTL(int id,int db,String key){
  if (!isKeyExist(id,db,key))   throw new KeyNotExistException(id,db,key);
  TTLs command=new TTLs(id,db,key);
  command.execute();
  long ttl=command.getSecond();
  if (ttl == -2)   throw new KeyNotExistException(id,db,key);
  return ttl;
}",0.8496993987975952
62288,"public PagingListener(Table table,IPage page,boolean addHead){
  this.table=table;
  this.page=page;
  this.count=(int)page.getCount();
  this.addHead=addHead;
  logger.info(""String_Node_Str"" + addHead);
  if (!addHead)   table.setItemCount(count);
 else   table.setItemCount(count + 1);
}","public PagingListener(Table table,IPage page,boolean addHead){
  this.table=table;
  this.page=page;
  this.addHead=addHead;
  logger.info(""String_Node_Str"" + addHead);
  if (!addHead) {
    this.count=(int)page.getCount();
  }
 else {
    this.count=(int)page.getCount() + 1;
  }
  this.table.setItemCount(count);
}",0.7041322314049587
62289,"private void setPage(int index){
  TableItem item;
  int start=index / PAGE_SIZE * PAGE_SIZE;
  int end=Math.min(start + PAGE_SIZE,table.getItemCount());
  this.page.initPage(start,end);
  logger.info(""String_Node_Str"" + addHead);
  for (int i=start; i < end; i++) {
    if (!addHead)     item=table.getItem(i);
 else     item=table.getItem(i + 1);
    item.setText(this.page.getText(i));
  }
}","private void setPage(int index){
  TableItem item;
  int start;
  int end;
  if (!addHead) {
    start=index / PAGE_SIZE * PAGE_SIZE;
    end=Math.min(start + PAGE_SIZE,count);
  }
 else {
    start=index / PAGE_SIZE * PAGE_SIZE - 1;
    if (start < 0)     start=0;
    end=Math.min(start + PAGE_SIZE,count - 1);
  }
  this.page.initPage(start,end);
  for (int i=start; i < end; i++) {
    if (!addHead)     item=table.getItem(i);
 else {
      item=table.getItem(i + 1);
    }
    item.setText(this.page.getText(i));
  }
}",0.4863685932388222
62290,"/** 
 * @wbp.parser.entryPoint
 */
@Override protected void initData(Composite dataComposite){
  grpValues=new Group(dataComposite,SWT.NONE);
  grpValues.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,4,1));
  grpValues.setText(RedisClient.i18nFile.getText(I18nFile.VALUES));
  grpValues.setLayout(new GridLayout(4,false));
  table=new Table(grpValues,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI| SWT.VIRTUAL);
  ;
  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,5));
  table.setHeaderVisible(true);
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      tableItemSelected();
    }
  }
);
  table.setLinesVisible(true);
  table.addListener(SWT.MouseDown,new EditListener(table,false));
  editListener=new EditListener(table,true);
  pageListener=new PagingListener(table,new ZSetPage(id,db,key));
  table.addListener(SWT.SetData,pageListener);
  tblclmnNewColumn=new TableColumn(table,SWT.NONE);
  tblclmnNewColumn.setWidth(88);
  tblclmnNewColumn.setText(RedisClient.i18nFile.getText(I18nFile.SCORE));
  tblclmnMember=new TableColumn(table,SWT.NONE);
  tblclmnMember.setWidth(164);
  tblclmnMember.setText(RedisClient.i18nFile.getText(I18nFile.MEMBER));
  btnAdd=new Button(grpValues,SWT.NONE);
  btnAdd.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnAdd.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      table.clearAll();
      table.addListener(SWT.MouseDown,editListener);
      table.removeListener(SWT.SetData,pageListener);
      pageListener=new PagingListener(table,new ZSetPage(id,db,key),true);
      table.addListener(SWT.SetData,pageListener);
      TableItem item=table.getItem(0);
      table.setSelection(item);
      item.setText(new String[]{""String_Node_Str"",""String_Node_Str""});
      editListener.clickRow(item,0);
      addModifyTextListener();
      currentItem=item;
      status=Status.Add;
      statusChanged();
    }
  }
);
  btnAdd.setText(RedisClient.i18nFile.getText(I18nFile.ADD));
  btnDelete=new Button(grpValues,SWT.NONE);
  btnDelete.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnDelete.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (table.getSelectionCount() > 0) {
        String[] members=new String[table.getSelectionCount()];
        int i=0;
        TableItem[] items=table.getSelection();
        for (        TableItem item : items) {
          members[i++]=item.getText(1);
        }
        service.removeMembers(id,db,key,members);
        for (        TableItem item : items) {
          item.dispose();
        }
        table.setSelection(-1);
        currentItem=null;
        btnDelete.setEnabled(false);
      }
    }
  }
);
  btnDelete.setEnabled(false);
  btnDelete.setText(RedisClient.i18nFile.getText(I18nFile.DELETE));
  btnApply=new Button(grpValues,SWT.NONE);
  btnApply.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      add();
    }
  }
);
  setApply(false);
  btnApply.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnApply.setText(RedisClient.i18nFile.getText(I18nFile.APPLY));
  btnCancel=new Button(grpValues,SWT.NONE);
  btnCancel.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
switch (status) {
case Normal:
        break;
case Add:
      refresh();
    status=Status.Normal;
  currentItem=null;
statusChanged();
break;
case Adding:
refresh();
status=Status.Normal;
currentItem=null;
statusChanged();
break;
}
logger.info(""String_Node_Str"" + status);
}
}
);
btnCancel.setEnabled(false);
btnCancel.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
btnCancel.setText(RedisClient.i18nFile.getText(I18nFile.CANCEL));
btnRefresh=new Button(grpValues,SWT.NONE);
btnRefresh.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
refresh();
}
}
);
btnRefresh.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
btnRefresh.setText(RedisClient.i18nFile.getText(I18nFile.REFRESH));
}","/** 
 * @wbp.parser.entryPoint
 */
@Override protected void initData(Composite dataComposite){
  grpValues=new Group(dataComposite,SWT.NONE);
  grpValues.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,4,1));
  grpValues.setText(RedisClient.i18nFile.getText(I18nFile.VALUES));
  grpValues.setLayout(new GridLayout(4,false));
  table=new Table(grpValues,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI| SWT.VIRTUAL);
  ;
  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,3,5));
  table.setHeaderVisible(true);
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      tableItemSelected();
    }
  }
);
  table.setLinesVisible(true);
  table.addListener(SWT.MouseDown,new EditListener(table,false));
  editListener=new EditListener(table,true);
  pageListener=new PagingListener(table,new ZSetPage(id,db,key));
  table.addListener(SWT.SetData,pageListener);
  tblclmnNewColumn=new TableColumn(table,SWT.NONE);
  tblclmnNewColumn.setWidth(88);
  tblclmnNewColumn.setText(RedisClient.i18nFile.getText(I18nFile.SCORE));
  tblclmnMember=new TableColumn(table,SWT.NONE);
  tblclmnMember.setWidth(164);
  tblclmnMember.setText(RedisClient.i18nFile.getText(I18nFile.MEMBER));
  btnAdd=new Button(grpValues,SWT.NONE);
  btnAdd.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnAdd.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      table.addListener(SWT.MouseDown,editListener);
      table.removeListener(SWT.SetData,pageListener);
      pageListener=new PagingListener(table,new ZSetPage(id,db,key),true);
      table.addListener(SWT.SetData,pageListener);
      table.clearAll();
      TableItem item=table.getItem(0);
      table.setSelection(item);
      item.setText(new String[]{""String_Node_Str"",""String_Node_Str""});
      editListener.clickRow(item,0);
      addModifyTextListener();
      currentItem=item;
      status=Status.Add;
      statusChanged();
    }
  }
);
  btnAdd.setText(RedisClient.i18nFile.getText(I18nFile.ADD));
  btnDelete=new Button(grpValues,SWT.NONE);
  btnDelete.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnDelete.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (table.getSelectionCount() > 0) {
        String[] members=new String[table.getSelectionCount()];
        int i=0;
        TableItem[] items=table.getSelection();
        for (        TableItem item : items) {
          members[i++]=item.getText(1);
        }
        service.removeMembers(id,db,key,members);
        for (        TableItem item : items) {
          item.dispose();
        }
        table.setSelection(-1);
        currentItem=null;
        btnDelete.setEnabled(false);
      }
    }
  }
);
  btnDelete.setEnabled(false);
  btnDelete.setText(RedisClient.i18nFile.getText(I18nFile.DELETE));
  btnApply=new Button(grpValues,SWT.NONE);
  btnApply.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      add();
    }
  }
);
  setApply(false);
  btnApply.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
  btnApply.setText(RedisClient.i18nFile.getText(I18nFile.APPLY));
  btnCancel=new Button(grpValues,SWT.NONE);
  btnCancel.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
switch (status) {
case Normal:
        break;
case Add:
      refresh();
    status=Status.Normal;
  currentItem=null;
statusChanged();
break;
case Adding:
refresh();
status=Status.Normal;
currentItem=null;
statusChanged();
break;
}
logger.info(""String_Node_Str"" + status);
}
}
);
btnCancel.setEnabled(false);
btnCancel.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
btnCancel.setText(RedisClient.i18nFile.getText(I18nFile.CANCEL));
btnRefresh=new Button(grpValues,SWT.NONE);
btnRefresh.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
refresh();
}
}
);
btnRefresh.setLayoutData(new GridData(SWT.FILL,SWT.TOP,false,false,1,1));
btnRefresh.setText(RedisClient.i18nFile.getText(I18nFile.REFRESH));
}",0.944891201513718
62291,"@Override public String[] getText(int row){
  String[] values=new String[]{""String_Node_Str"",""String_Node_Str""};
  int index=row - start;
  if (index < page.length) {
    Tuple tuple=(Tuple)page[index];
    values=new String[]{String.valueOf(tuple.getScore()),tuple.getElement()};
  }
  return values;
}","@Override public String[] getText(int row){
  String[] values=new String[]{""String_Node_Str"",""String_Node_Str""};
  int index=row - start;
  if (index == -1)   return new String[]{""String_Node_Str"",""String_Node_Str""};
  if (index < page.length) {
    Tuple tuple=(Tuple)page[index];
    values=new String[]{String.valueOf(tuple.getScore()),tuple.getElement()};
  }
  return values;
}",0.8846715328467153
62292,"private TreeItem gotoDBContainer(int id,int db,String container,boolean isKey,boolean refresh){
  rootTreeItemSelected(false);
  TreeItem dbItem=findDBTreeItem(id,db);
  TreeItem dataItemSelected=dbItem;
  if (dbItem != null) {
    dbContainerTreeItemSelected(dbItem,refresh);
    TreeItem[] dataItems=dbItem.getItems();
    String[] containers=container.split(""String_Node_Str"");
    if (!isKey) {
      for (int i=0; i < containers.length; i++) {
        for (        TreeItem dataItem : dataItems) {
          if (dataItem.getText().equals(containers[i])) {
            tree.setSelection(dataItem);
            dbContainerTreeItemSelected(dataItem,refresh);
            dataItems=dataItem.getItems();
            dataItemSelected=dataItem;
            break;
          }
        }
      }
    }
 else {
      for (int i=0; i < containers.length - 1; i++) {
        for (        TreeItem dataItem : dataItems) {
          if (dataItem.getText().equals(containers[i])) {
            tree.setSelection(dataItem);
            dbContainerTreeItemSelected(dataItem,false);
            dataItems=dataItem.getItems();
            dataItemSelected=dataItem;
            break;
          }
        }
      }
      TableItem[] tableItems=table.getItems();
      for (      TableItem tableItem : tableItems) {
        NodeType type=(NodeType)tableItem.getData(NODE_TYPE);
        if (type != NodeType.SERVER && type != NodeType.DATABASE && type != NodeType.CONTAINER && tableItem.getText().equals(containers[containers.length - 1])) {
          table.setSelection(tableItem);
          table.setFocus();
          dataItemSelected();
          break;
        }
      }
    }
  }
  return dataItemSelected;
}","private TreeItem gotoDBContainer(int id,int db,String container,boolean isKey,boolean refresh){
  rootTreeItemSelected(false);
  TreeItem dbItem=findDBTreeItem(id,db);
  TreeItem dataItemSelected=dbItem;
  if (dbItem != null) {
    dbContainerTreeItemSelected(dbItem,refresh);
    TreeItem[] dataItems=dbItem.getItems();
    String[] containers=container.split(""String_Node_Str"");
    if (!isKey) {
      for (int i=0; i < containers.length; i++) {
        for (        TreeItem dataItem : dataItems) {
          if (dataItem.getText().equals(containers[i])) {
            tree.setSelection(dataItem);
            dbContainerTreeItemSelected(dataItem,refresh);
            dataItems=dataItem.getItems();
            dataItemSelected=dataItem;
            break;
          }
        }
      }
    }
 else {
      for (int i=0; i < containers.length - 1; i++) {
        for (        TreeItem dataItem : dataItems) {
          if (dataItem.getText().equals(containers[i])) {
            tree.setSelection(dataItem);
            dbContainerTreeItemSelected(dataItem,false);
            dataItems=dataItem.getItems();
            dataItemSelected=dataItem;
            break;
          }
        }
      }
      TableItem[] tableItems=table.getItems();
      for (      TableItem tableItem : tableItems) {
        NodeType type=(NodeType)tableItem.getData(NODE_TYPE);
        if (type != NodeType.SERVER && type != NodeType.DATABASE && type != NodeType.CONTAINER && tableItem.getText().equals(containers[containers.length - 1])) {
          table.setSelection(tableItem);
          table.setFocus();
          tableItemSelected();
          break;
        }
      }
    }
  }
  return dataItemSelected;
}",0.9973506034736532
62293,"private void initTable(SashForm sashForm_1){
  table=new Table(sashForm_1,SWT.BORDER | SWT.FULL_SELECTION);
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TableItem[] items=table.getSelection();
      itemSelected=items[0];
      TreeItem[] treeItems=tree.getSelection();
      treeItemSelected=treeItems[0];
      NodeType type=(NodeType)items[0].getData(NODE_TYPE);
switch (type) {
case SERVER:
        serverItemSelected();
      break;
case DATABASE:
case CONTAINER:
    dbContainerItemSelected(items[0]);
  break;
default :
dataItemSelected();
break;
}
}
}
);
table.addMouseListener(new MouseAdapter(){
@Override public void mouseDoubleClick(MouseEvent e){
TreeItem[] treeItems=tree.getSelection();
Point point=new Point(e.x,e.y);
TableItem selectedItem=table.getItem(point);
if (selectedItem != null) {
NodeType type=(NodeType)selectedItem.getData(NODE_TYPE);
if (type == NodeType.CONTAINER || type == NodeType.DATABASE || type == NodeType.SERVER) {
boolean find=false;
for (TreeItem treeItem : treeItems[0].getItems()) {
String treeText=treeItem.getText();
String tableText=selectedItem.getText(0);
if (treeText.equals(tableText)) {
  find=true;
  if (type == NodeType.CONTAINER || type == NodeType.DATABASE)   dbContainerTreeItemSelected(treeItem,false);
 else   if (type == NodeType.SERVER)   serverTreeItemSelected(treeItem,false);
  history.add(treeItem);
  btnBackward.setEnabled(true);
  btnForward.setEnabled(false);
  break;
}
}
if (!find) MessageDialog.openInformation(shlRedisClient,""String_Node_Str"",""String_Node_Str"" + text.getText());
}
 else {
properties();
}
}
}
@Override public void mouseDown(MouseEvent e){
Point point=new Point(e.x,e.y);
TableItem selectedItem=table.getItem(point);
if (e.button == 3) {
if (selectedItem == null) table.setMenu(menu_null);
 else {
NodeType type=(NodeType)selectedItem.getData(NODE_TYPE);
if (type == NodeType.ROOT) table.setMenu(menu_null);
 else if (type == NodeType.SERVER) table.setMenu(menuTableServer);
 else if (type == NodeType.DATABASE || type == NodeType.CONTAINER) {
updateMenuDBContainer(type,menuTableDBContainer);
table.setMenu(menuTableDBContainer);
}
 else {
table.setMenu(menu_key);
}
}
}
}
}
);
table.setHeaderVisible(true);
tblclmnName=new TableColumn(table,SWT.NONE);
tblclmnName.setWidth(150);
tblclmnName.setText(""String_Node_Str"");
tblclmnName.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
columnSelected(tblclmnName,OrderBy.NAME);
}
}
);
tblclmnType=new TableColumn(table,SWT.NONE);
tblclmnType.setWidth(150);
tblclmnType.setText(""String_Node_Str"");
tblclmnType.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
columnSelected(tblclmnType,OrderBy.TYPE);
}
}
);
tblclmnSize=new TableColumn(table,SWT.NONE);
tblclmnSize.setWidth(100);
tblclmnSize.setText(""String_Node_Str"");
tblclmnSize.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
columnSelected(tblclmnSize,OrderBy.SIZE);
}
}
);
}","private void initTable(SashForm sashForm_1){
  table=new Table(sashForm_1,SWT.BORDER | SWT.FULL_SELECTION);
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      tableItemSelected();
    }
  }
);
  table.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      TreeItem[] treeItems=tree.getSelection();
      Point point=new Point(e.x,e.y);
      TableItem selectedItem=table.getItem(point);
      if (selectedItem != null) {
        NodeType type=(NodeType)selectedItem.getData(NODE_TYPE);
        if (type == NodeType.CONTAINER || type == NodeType.DATABASE || type == NodeType.SERVER) {
          boolean find=false;
          for (          TreeItem treeItem : treeItems[0].getItems()) {
            String treeText=treeItem.getText();
            String tableText=selectedItem.getText(0);
            if (treeText.equals(tableText)) {
              find=true;
              if (type == NodeType.CONTAINER || type == NodeType.DATABASE)               dbContainerTreeItemSelected(treeItem,false);
 else               if (type == NodeType.SERVER)               serverTreeItemSelected(treeItem,false);
              history.add(treeItem);
              btnBackward.setEnabled(true);
              btnForward.setEnabled(false);
              break;
            }
          }
          if (!find)           MessageDialog.openInformation(shlRedisClient,""String_Node_Str"",""String_Node_Str"" + text.getText());
        }
 else {
          dataProperties();
        }
      }
    }
    @Override public void mouseDown(    MouseEvent e){
      Point point=new Point(e.x,e.y);
      TableItem selectedItem=table.getItem(point);
      if (e.button == 3) {
        if (selectedItem == null)         table.setMenu(menu_null);
 else {
          NodeType type=(NodeType)selectedItem.getData(NODE_TYPE);
          if (type == NodeType.ROOT)           table.setMenu(menu_null);
 else           if (type == NodeType.SERVER)           table.setMenu(menuTableServer);
 else           if (type == NodeType.DATABASE || type == NodeType.CONTAINER) {
            updateMenuDBContainer(type,menuTableDBContainer);
            table.setMenu(menuTableDBContainer);
          }
 else {
            table.setMenu(menu_key);
          }
        }
      }
    }
  }
);
  table.setHeaderVisible(true);
  tblclmnName=new TableColumn(table,SWT.NONE);
  tblclmnName.setWidth(150);
  tblclmnName.setText(""String_Node_Str"");
  tblclmnName.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      columnSelected(tblclmnName,OrderBy.NAME);
    }
  }
);
  tblclmnType=new TableColumn(table,SWT.NONE);
  tblclmnType.setWidth(150);
  tblclmnType.setText(""String_Node_Str"");
  tblclmnType.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      columnSelected(tblclmnType,OrderBy.TYPE);
    }
  }
);
  tblclmnSize=new TableColumn(table,SWT.NONE);
  tblclmnSize.setWidth(100);
  tblclmnSize.setText(""String_Node_Str"");
  tblclmnSize.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      columnSelected(tblclmnSize,OrderBy.SIZE);
    }
  }
);
}",0.2192680638098217
62294,"@Override public void mouseDoubleClick(MouseEvent e){
  TreeItem[] treeItems=tree.getSelection();
  Point point=new Point(e.x,e.y);
  TableItem selectedItem=table.getItem(point);
  if (selectedItem != null) {
    NodeType type=(NodeType)selectedItem.getData(NODE_TYPE);
    if (type == NodeType.CONTAINER || type == NodeType.DATABASE || type == NodeType.SERVER) {
      boolean find=false;
      for (      TreeItem treeItem : treeItems[0].getItems()) {
        String treeText=treeItem.getText();
        String tableText=selectedItem.getText(0);
        if (treeText.equals(tableText)) {
          find=true;
          if (type == NodeType.CONTAINER || type == NodeType.DATABASE)           dbContainerTreeItemSelected(treeItem,false);
 else           if (type == NodeType.SERVER)           serverTreeItemSelected(treeItem,false);
          history.add(treeItem);
          btnBackward.setEnabled(true);
          btnForward.setEnabled(false);
          break;
        }
      }
      if (!find)       MessageDialog.openInformation(shlRedisClient,""String_Node_Str"",""String_Node_Str"" + text.getText());
    }
 else {
      properties();
    }
  }
}","@Override public void mouseDoubleClick(MouseEvent e){
  TreeItem[] treeItems=tree.getSelection();
  Point point=new Point(e.x,e.y);
  TableItem selectedItem=table.getItem(point);
  if (selectedItem != null) {
    NodeType type=(NodeType)selectedItem.getData(NODE_TYPE);
    if (type == NodeType.CONTAINER || type == NodeType.DATABASE || type == NodeType.SERVER) {
      boolean find=false;
      for (      TreeItem treeItem : treeItems[0].getItems()) {
        String treeText=treeItem.getText();
        String tableText=selectedItem.getText(0);
        if (treeText.equals(tableText)) {
          find=true;
          if (type == NodeType.CONTAINER || type == NodeType.DATABASE)           dbContainerTreeItemSelected(treeItem,false);
 else           if (type == NodeType.SERVER)           serverTreeItemSelected(treeItem,false);
          history.add(treeItem);
          btnBackward.setEnabled(true);
          btnForward.setEnabled(false);
          break;
        }
      }
      if (!find)       MessageDialog.openInformation(shlRedisClient,""String_Node_Str"",""String_Node_Str"" + text.getText());
    }
 else {
      dataProperties();
    }
  }
}",0.997391304347826
62295,"private void initMenuData(){
  menu_key=new Menu(shlRedisClient);
  MenuItem mntmRename=new MenuItem(menu_key,SWT.NONE);
  mntmRename.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      renameKey();
    }
  }
);
  mntmRename.setText(""String_Node_Str"");
  MenuItem mntmDelete_4=new MenuItem(menu_key,SWT.NONE);
  mntmDelete_4.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      deleteKey();
    }
  }
);
  mntmDelete_4.setText(""String_Node_Str"");
  MenuItem mntmProperties_1=new MenuItem(menu_key,SWT.NONE);
  mntmProperties_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      properties();
    }
  }
);
  mntmProperties_1.setText(""String_Node_Str"");
  new MenuItem(menu_key,SWT.SEPARATOR);
  MenuItem menuItem=new MenuItem(menu_key,SWT.NONE);
  menuItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      addFavorite();
    }
  }
);
  menuItem.setText(""String_Node_Str"");
  new MenuItem(menu_key,SWT.SEPARATOR);
  MenuItem mntmCut_1=new MenuItem(menu_key,SWT.NONE);
  mntmCut_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      cut();
    }
  }
);
  mntmCut_1.setText(""String_Node_Str"");
  MenuItem mntmCopy_2=new MenuItem(menu_key,SWT.NONE);
  mntmCopy_2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      copy();
    }
  }
);
  mntmCopy_2.setText(""String_Node_Str"");
}","private void initMenuData(){
  menu_key=new Menu(shlRedisClient);
  MenuItem mntmRename=new MenuItem(menu_key,SWT.NONE);
  mntmRename.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      renameKey();
    }
  }
);
  mntmRename.setText(""String_Node_Str"");
  MenuItem mntmDelete_4=new MenuItem(menu_key,SWT.NONE);
  mntmDelete_4.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      deleteKey();
    }
  }
);
  mntmDelete_4.setText(""String_Node_Str"");
  MenuItem mntmProperties_1=new MenuItem(menu_key,SWT.NONE);
  mntmProperties_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      dataProperties();
    }
  }
);
  mntmProperties_1.setText(""String_Node_Str"");
  new MenuItem(menu_key,SWT.SEPARATOR);
  MenuItem menuItem=new MenuItem(menu_key,SWT.NONE);
  menuItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      addFavorite();
    }
  }
);
  menuItem.setText(""String_Node_Str"");
  new MenuItem(menu_key,SWT.SEPARATOR);
  MenuItem mntmCut_1=new MenuItem(menu_key,SWT.NONE);
  mntmCut_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      cut();
    }
  }
);
  mntmCut_1.setText(""String_Node_Str"");
  MenuItem mntmCopy_2=new MenuItem(menu_key,SWT.NONE);
  mntmCopy_2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      copy();
    }
  }
);
  mntmCopy_2.setText(""String_Node_Str"");
}",0.9981884057971014
62296,"private void initMenu(){
  menu=new Menu(shlRedisClient,SWT.BAR);
  shlRedisClient.setMenuBar(menu);
  MenuItem mntmServer=new MenuItem(menu,SWT.CASCADE);
  mntmServer.setText(""String_Node_Str"");
  menuServer=new Menu(mntmServer);
  mntmServer.setMenu(menuServer);
  MenuItem mntmNew=new MenuItem(menuServer,SWT.NONE);
  mntmNew.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      addServer();
    }
  }
);
  mntmNew.setText(""String_Node_Str"");
  MenuItem mntmEdit=new MenuItem(menuServer,SWT.NONE);
  mntmEdit.setEnabled(false);
  mntmEdit.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      updateServer();
    }
  }
);
  mntmEdit.setText(""String_Node_Str"");
  MenuItem mntmDelete_1=new MenuItem(menuServer,SWT.NONE);
  mntmDelete_1.setEnabled(false);
  mntmDelete_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      removeServer();
    }
  }
);
  mntmDelete_1.setText(""String_Node_Str"");
  MenuItem mntmProperties=new MenuItem(menuServer,SWT.NONE);
  mntmProperties.setEnabled(false);
  mntmProperties.setText(""String_Node_Str"");
  new MenuItem(menuServer,SWT.SEPARATOR);
  MenuItem mntmExit=new MenuItem(menuServer,SWT.NONE);
  mntmExit.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      shlRedisClient.close();
    }
  }
);
  mntmExit.setText(""String_Node_Str"");
  MenuItem mntmData=new MenuItem(menu,SWT.CASCADE);
  mntmData.setText(""String_Node_Str"");
  menuData=new Menu(mntmData);
  mntmData.setMenu(menuData);
  MenuItem mntmAdd=new MenuItem(menuData,SWT.CASCADE);
  mntmAdd.setEnabled(false);
  mntmAdd.setText(""String_Node_Str"");
  Menu menu_5=new Menu(mntmAdd);
  mntmAdd.setMenu(menu_5);
  MenuItem mntmString=new MenuItem(menu_5,SWT.NONE);
  mntmString.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newString();
    }
  }
);
  mntmString.setText(""String_Node_Str"");
  mntmString.setAccelerator(SWT.ALT + '1');
  mntmString.setImage(strImage);
  MenuItem mntmList=new MenuItem(menu_5,SWT.NONE);
  mntmList.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newList();
    }
  }
);
  mntmList.setText(""String_Node_Str"");
  mntmList.setAccelerator(SWT.ALT + '2');
  mntmList.setImage(listImage);
  MenuItem mntmSet=new MenuItem(menu_5,SWT.NONE);
  mntmSet.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newSet();
    }
  }
);
  mntmSet.setText(""String_Node_Str"");
  mntmSet.setAccelerator(SWT.ALT + '3');
  mntmSet.setImage(setImage);
  MenuItem mntmSortset=new MenuItem(menu_5,SWT.NONE);
  mntmSortset.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newZSet();
    }
  }
);
  mntmSortset.setText(""String_Node_Str"");
  mntmSortset.setAccelerator(SWT.ALT + '4');
  mntmSortset.setImage(zsetImage);
  MenuItem mntmHash=new MenuItem(menu_5,SWT.NONE);
  mntmHash.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newHash();
    }
  }
);
  mntmHash.setText(""String_Node_Str"");
  mntmHash.setAccelerator(SWT.ALT + '5');
  mntmHash.setImage(hashImage);
  MenuItem mntmRename_2=new MenuItem(menuData,SWT.NONE);
  mntmRename_2.setEnabled(false);
  mntmRename_2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (itemSelected instanceof TreeItem)       renameContainer();
 else       renameKey();
    }
  }
);
  mntmRename_2.setText(""String_Node_Str"");
  MenuItem mntmDelete_3=new MenuItem(menuData,SWT.NONE);
  mntmDelete_3.setEnabled(false);
  mntmDelete_3.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (itemSelected instanceof TreeItem)       deleteCotainer();
 else {
        NodeType type=(NodeType)itemSelected.getData(NODE_TYPE);
        if (type == NodeType.CONTAINER)         deleteCotainer();
 else         deleteKey();
      }
    }
  }
);
  mntmDelete_3.setText(""String_Node_Str"");
  mntmDelete_3.setAccelerator(SWT.DEL);
  MenuItem mntmProperties_2=new MenuItem(menuData,SWT.NONE);
  mntmProperties_2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (itemSelected instanceof TreeItem) {
      }
 else {
        NodeType type=(NodeType)itemSelected.getData(NODE_TYPE);
        if (type == NodeType.CONTAINER)         ;
 else         properties();
      }
    }
  }
);
  mntmProperties_2.setEnabled(false);
  mntmProperties_2.setText(""String_Node_Str"");
  new MenuItem(menuData,SWT.SEPARATOR);
  MenuItem mntmcut=new MenuItem(menuData,SWT.NONE);
  mntmcut.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      cut();
    }
  }
);
  mntmcut.setEnabled(false);
  mntmcut.setText(""String_Node_Str"");
  mntmcut.setAccelerator(SWT.CTRL + 'X');
  MenuItem mntmCopy=new MenuItem(menuData,SWT.NONE);
  mntmCopy.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      copy();
    }
  }
);
  mntmCopy.setEnabled(false);
  mntmCopy.setText(""String_Node_Str"");
  mntmCopy.setAccelerator(SWT.CTRL + 'C');
  MenuItem mntmPaste=new MenuItem(menuData,SWT.NONE);
  mntmPaste.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      paste();
    }
  }
);
  mntmPaste.setEnabled(false);
  mntmPaste.setText(""String_Node_Str"");
  mntmPaste.setAccelerator(SWT.CTRL + 'V');
  new MenuItem(menuData,SWT.SEPARATOR);
  MenuItem mntmImport=new MenuItem(menuData,SWT.NONE);
  mntmImport.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      importFile();
    }
  }
);
  mntmImport.setEnabled(false);
  mntmImport.setText(""String_Node_Str"");
  MenuItem mntmExport=new MenuItem(menuData,SWT.NONE);
  mntmExport.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      export();
    }
  }
);
  mntmExport.setEnabled(false);
  mntmExport.setText(""String_Node_Str"");
  new MenuItem(menuData,SWT.SEPARATOR);
  MenuItem mntmFind_2=new MenuItem(menuData,SWT.NONE);
  mntmFind_2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      find();
    }
  }
);
  mntmFind_2.setText(""String_Node_Str"");
  mntmFind_2.setAccelerator(SWT.CTRL + 'F');
  MenuItem mntmFindNext_2=new MenuItem(menuData,SWT.NONE);
  mntmFindNext_2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      findForward();
    }
  }
);
  mntmFindNext_2.setText(""String_Node_Str"");
  mntmFindNext_2.setAccelerator(SWT.F3);
  MenuItem mntmFindBackward_1=new MenuItem(menuData,SWT.NONE);
  mntmFindBackward_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      findBackward();
    }
  }
);
  mntmFindBackward_1.setText(""String_Node_Str"");
  mntmFindBackward_1.setAccelerator(SWT.CTRL + SWT.F3);
  new MenuItem(menuData,SWT.SEPARATOR);
  MenuItem mntmRefresh_1=new MenuItem(menuData,SWT.NONE);
  mntmRefresh_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      treeItemSelected(true);
    }
  }
);
  mntmRefresh_1.setText(""String_Node_Str"");
  mntmRefresh_1.setAccelerator(SWT.F5);
  MenuItem mntmFavorites=new MenuItem(menu,SWT.CASCADE);
  mntmFavorites.setText(""String_Node_Str"");
  menuFavorite=new Menu(mntmFavorites);
  mntmFavorites.setMenu(menuFavorite);
  MenuItem mntmAdd_Favorite=new MenuItem(menuFavorite,SWT.NONE);
  mntmAdd_Favorite.setEnabled(false);
  mntmAdd_Favorite.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      addFavorite();
    }
  }
);
  mntmAdd_Favorite.setText(""String_Node_Str"");
  MenuItem mntmOrganize=new MenuItem(menuFavorite,SWT.NONE);
  mntmOrganize.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      OrganizeFavoriteDialog dialog=new OrganizeFavoriteDialog(shlRedisClient,SWT.SHELL_TRIM | SWT.APPLICATION_MODAL);
      List<Favorite> favorites=(List<Favorite>)dialog.open();
      if (favorites != null) {
        service3.updateList(favorites);
        removeFavoriteMenuItem();
        addFavoriteMenuItem();
      }
    }
  }
);
  mntmOrganize.setText(""String_Node_Str"");
  addFavoriteMenuItem();
  MenuItem mntmTool=new MenuItem(menu,SWT.CASCADE);
  mntmTool.setText(""String_Node_Str"");
  Menu menu_6=new Menu(mntmTool);
  mntmTool.setMenu(menu_6);
  MenuItem mntmSet_2=new MenuItem(menu_6,SWT.CASCADE);
  mntmSet_2.setText(""String_Node_Str"");
  Menu menu_3=new Menu(mntmSet_2);
  mntmSet_2.setMenu(menu_3);
  MenuItem mntmDiff=new MenuItem(menu_3,SWT.NONE);
  mntmDiff.setText(""String_Node_Str"");
  MenuItem mntmInter=new MenuItem(menu_3,SWT.NONE);
  mntmInter.setText(""String_Node_Str"");
  MenuItem mntmUnion=new MenuItem(menu_3,SWT.NONE);
  mntmUnion.setText(""String_Node_Str"");
  new MenuItem(menu_6,SWT.SEPARATOR);
  MenuItem mntmPubsub=new MenuItem(menu_6,SWT.NONE);
  mntmPubsub.setText(""String_Node_Str"");
  MenuItem mntmHelp=new MenuItem(menu,SWT.CASCADE);
  mntmHelp.setText(""String_Node_Str"");
  Menu menu_2=new Menu(mntmHelp);
  mntmHelp.setMenu(menu_2);
  MenuItem mntmReportBug=new MenuItem(menu_2,SWT.NONE);
  mntmReportBug.setText(""String_Node_Str"");
  MenuItem mntmDonation=new MenuItem(menu_2,SWT.NONE);
  mntmDonation.setText(""String_Node_Str"");
  new MenuItem(menu_2,SWT.SEPARATOR);
  MenuItem mntmAbout=new MenuItem(menu_2,SWT.NONE);
  mntmAbout.setText(""String_Node_Str"");
}","private void initMenu(){
  menu=new Menu(shlRedisClient,SWT.BAR);
  shlRedisClient.setMenuBar(menu);
  MenuItem mntmServer=new MenuItem(menu,SWT.CASCADE);
  mntmServer.setText(""String_Node_Str"");
  menuServer=new Menu(mntmServer);
  mntmServer.setMenu(menuServer);
  MenuItem mntmNew=new MenuItem(menuServer,SWT.NONE);
  mntmNew.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      addServer();
    }
  }
);
  mntmNew.setText(""String_Node_Str"");
  MenuItem mntmEdit=new MenuItem(menuServer,SWT.NONE);
  mntmEdit.setEnabled(false);
  mntmEdit.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      updateServer();
    }
  }
);
  mntmEdit.setText(""String_Node_Str"");
  MenuItem mntmDelete_1=new MenuItem(menuServer,SWT.NONE);
  mntmDelete_1.setEnabled(false);
  mntmDelete_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      removeServer();
    }
  }
);
  mntmDelete_1.setText(""String_Node_Str"");
  MenuItem mntmProperties=new MenuItem(menuServer,SWT.NONE);
  mntmProperties.setEnabled(false);
  mntmProperties.setText(""String_Node_Str"");
  new MenuItem(menuServer,SWT.SEPARATOR);
  MenuItem mntmExit=new MenuItem(menuServer,SWT.NONE);
  mntmExit.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      shlRedisClient.close();
    }
  }
);
  mntmExit.setText(""String_Node_Str"");
  MenuItem mntmData=new MenuItem(menu,SWT.CASCADE);
  mntmData.setText(""String_Node_Str"");
  menuData=new Menu(mntmData);
  mntmData.setMenu(menuData);
  MenuItem mntmAdd=new MenuItem(menuData,SWT.CASCADE);
  mntmAdd.setEnabled(false);
  mntmAdd.setText(""String_Node_Str"");
  Menu menu_5=new Menu(mntmAdd);
  mntmAdd.setMenu(menu_5);
  MenuItem mntmString=new MenuItem(menu_5,SWT.NONE);
  mntmString.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newString();
    }
  }
);
  mntmString.setText(""String_Node_Str"");
  mntmString.setAccelerator(SWT.ALT + '1');
  mntmString.setImage(strImage);
  MenuItem mntmList=new MenuItem(menu_5,SWT.NONE);
  mntmList.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newList();
    }
  }
);
  mntmList.setText(""String_Node_Str"");
  mntmList.setAccelerator(SWT.ALT + '2');
  mntmList.setImage(listImage);
  MenuItem mntmSet=new MenuItem(menu_5,SWT.NONE);
  mntmSet.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newSet();
    }
  }
);
  mntmSet.setText(""String_Node_Str"");
  mntmSet.setAccelerator(SWT.ALT + '3');
  mntmSet.setImage(setImage);
  MenuItem mntmSortset=new MenuItem(menu_5,SWT.NONE);
  mntmSortset.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newZSet();
    }
  }
);
  mntmSortset.setText(""String_Node_Str"");
  mntmSortset.setAccelerator(SWT.ALT + '4');
  mntmSortset.setImage(zsetImage);
  MenuItem mntmHash=new MenuItem(menu_5,SWT.NONE);
  mntmHash.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newHash();
    }
  }
);
  mntmHash.setText(""String_Node_Str"");
  mntmHash.setAccelerator(SWT.ALT + '5');
  mntmHash.setImage(hashImage);
  MenuItem mntmRename_2=new MenuItem(menuData,SWT.NONE);
  mntmRename_2.setEnabled(false);
  mntmRename_2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (itemSelected instanceof TreeItem)       renameContainer();
 else       renameKey();
    }
  }
);
  mntmRename_2.setText(""String_Node_Str"");
  MenuItem mntmDelete_3=new MenuItem(menuData,SWT.NONE);
  mntmDelete_3.setEnabled(false);
  mntmDelete_3.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (itemSelected instanceof TreeItem)       deleteCotainer();
 else {
        NodeType type=(NodeType)itemSelected.getData(NODE_TYPE);
        if (type == NodeType.CONTAINER)         deleteCotainer();
 else         deleteKey();
      }
    }
  }
);
  mntmDelete_3.setText(""String_Node_Str"");
  mntmDelete_3.setAccelerator(SWT.DEL);
  MenuItem mntmProperties_2=new MenuItem(menuData,SWT.NONE);
  mntmProperties_2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (itemSelected instanceof TreeItem) {
      }
      if (itemSelected instanceof TableItem) {
        NodeType type=(NodeType)itemSelected.getData(NODE_TYPE);
        if (type == NodeType.CONTAINER)         ;
 else         dataProperties();
      }
    }
  }
);
  mntmProperties_2.setEnabled(false);
  mntmProperties_2.setText(""String_Node_Str"");
  new MenuItem(menuData,SWT.SEPARATOR);
  MenuItem mntmcut=new MenuItem(menuData,SWT.NONE);
  mntmcut.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      cut();
    }
  }
);
  mntmcut.setEnabled(false);
  mntmcut.setText(""String_Node_Str"");
  mntmcut.setAccelerator(SWT.CTRL + 'X');
  MenuItem mntmCopy=new MenuItem(menuData,SWT.NONE);
  mntmCopy.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      copy();
    }
  }
);
  mntmCopy.setEnabled(false);
  mntmCopy.setText(""String_Node_Str"");
  mntmCopy.setAccelerator(SWT.CTRL + 'C');
  MenuItem mntmPaste=new MenuItem(menuData,SWT.NONE);
  mntmPaste.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      paste();
    }
  }
);
  mntmPaste.setEnabled(false);
  mntmPaste.setText(""String_Node_Str"");
  mntmPaste.setAccelerator(SWT.CTRL + 'V');
  new MenuItem(menuData,SWT.SEPARATOR);
  MenuItem mntmImport=new MenuItem(menuData,SWT.NONE);
  mntmImport.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      importFile();
    }
  }
);
  mntmImport.setEnabled(false);
  mntmImport.setText(""String_Node_Str"");
  MenuItem mntmExport=new MenuItem(menuData,SWT.NONE);
  mntmExport.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      export();
    }
  }
);
  mntmExport.setEnabled(false);
  mntmExport.setText(""String_Node_Str"");
  new MenuItem(menuData,SWT.SEPARATOR);
  MenuItem mntmFind_2=new MenuItem(menuData,SWT.NONE);
  mntmFind_2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      find();
    }
  }
);
  mntmFind_2.setText(""String_Node_Str"");
  mntmFind_2.setAccelerator(SWT.CTRL + 'F');
  MenuItem mntmFindNext_2=new MenuItem(menuData,SWT.NONE);
  mntmFindNext_2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      findForward();
    }
  }
);
  mntmFindNext_2.setText(""String_Node_Str"");
  mntmFindNext_2.setAccelerator(SWT.F3);
  MenuItem mntmFindBackward_1=new MenuItem(menuData,SWT.NONE);
  mntmFindBackward_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      findBackward();
    }
  }
);
  mntmFindBackward_1.setText(""String_Node_Str"");
  mntmFindBackward_1.setAccelerator(SWT.CTRL + SWT.F3);
  new MenuItem(menuData,SWT.SEPARATOR);
  MenuItem mntmRefresh_1=new MenuItem(menuData,SWT.NONE);
  mntmRefresh_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      treeItemSelected(true);
    }
  }
);
  mntmRefresh_1.setText(""String_Node_Str"");
  mntmRefresh_1.setAccelerator(SWT.F5);
  MenuItem mntmFavorites=new MenuItem(menu,SWT.CASCADE);
  mntmFavorites.setText(""String_Node_Str"");
  menuFavorite=new Menu(mntmFavorites);
  mntmFavorites.setMenu(menuFavorite);
  MenuItem mntmAdd_Favorite=new MenuItem(menuFavorite,SWT.NONE);
  mntmAdd_Favorite.setEnabled(false);
  mntmAdd_Favorite.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      addFavorite();
    }
  }
);
  mntmAdd_Favorite.setText(""String_Node_Str"");
  MenuItem mntmOrganize=new MenuItem(menuFavorite,SWT.NONE);
  mntmOrganize.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      OrganizeFavoriteDialog dialog=new OrganizeFavoriteDialog(shlRedisClient,SWT.SHELL_TRIM | SWT.APPLICATION_MODAL);
      List<Favorite> favorites=(List<Favorite>)dialog.open();
      if (favorites != null) {
        service3.updateList(favorites);
        removeFavoriteMenuItem();
        addFavoriteMenuItem();
      }
    }
  }
);
  mntmOrganize.setText(""String_Node_Str"");
  addFavoriteMenuItem();
  MenuItem mntmTool=new MenuItem(menu,SWT.CASCADE);
  mntmTool.setText(""String_Node_Str"");
  Menu menu_6=new Menu(mntmTool);
  mntmTool.setMenu(menu_6);
  MenuItem mntmSet_2=new MenuItem(menu_6,SWT.CASCADE);
  mntmSet_2.setText(""String_Node_Str"");
  Menu menu_3=new Menu(mntmSet_2);
  mntmSet_2.setMenu(menu_3);
  MenuItem mntmDiff=new MenuItem(menu_3,SWT.NONE);
  mntmDiff.setText(""String_Node_Str"");
  MenuItem mntmInter=new MenuItem(menu_3,SWT.NONE);
  mntmInter.setText(""String_Node_Str"");
  MenuItem mntmUnion=new MenuItem(menu_3,SWT.NONE);
  mntmUnion.setText(""String_Node_Str"");
  new MenuItem(menu_6,SWT.SEPARATOR);
  MenuItem mntmPubsub=new MenuItem(menu_6,SWT.NONE);
  mntmPubsub.setText(""String_Node_Str"");
  MenuItem mntmHelp=new MenuItem(menu,SWT.CASCADE);
  mntmHelp.setText(""String_Node_Str"");
  Menu menu_2=new Menu(mntmHelp);
  mntmHelp.setMenu(menu_2);
  MenuItem mntmReportBug=new MenuItem(menu_2,SWT.NONE);
  mntmReportBug.setText(""String_Node_Str"");
  MenuItem mntmDonation=new MenuItem(menu_2,SWT.NONE);
  mntmDonation.setText(""String_Node_Str"");
  new MenuItem(menu_2,SWT.SEPARATOR);
  MenuItem mntmAbout=new MenuItem(menu_2,SWT.NONE);
  mntmAbout.setText(""String_Node_Str"");
}",0.9973701185927654
62297,"private Menu initMenuTableDB(){
  menu_dbContainer=new Menu(shlRedisClient);
  MenuItem mntmNew_1=new MenuItem(menu_dbContainer,SWT.CASCADE);
  mntmNew_1.setText(""String_Node_Str"");
  Menu menu_1=new Menu(mntmNew_1);
  mntmNew_1.setMenu(menu_1);
  MenuItem menuItem_1=new MenuItem(menu_1,SWT.NONE);
  menuItem_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newString();
    }
  }
);
  menuItem_1.setText(""String_Node_Str"");
  menuItem_1.setImage(strImage);
  MenuItem menuItem_2=new MenuItem(menu_1,SWT.NONE);
  menuItem_2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newList();
    }
  }
);
  menuItem_2.setText(""String_Node_Str"");
  menuItem_2.setImage(listImage);
  MenuItem menuItem_3=new MenuItem(menu_1,SWT.NONE);
  menuItem_3.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newSet();
    }
  }
);
  menuItem_3.setText(""String_Node_Str"");
  menuItem_3.setImage(setImage);
  MenuItem mntmSortedSet=new MenuItem(menu_1,SWT.NONE);
  mntmSortedSet.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newZSet();
    }
  }
);
  mntmSortedSet.setText(""String_Node_Str"");
  mntmSortedSet.setImage(zsetImage);
  MenuItem mntmHash_1=new MenuItem(menu_1,SWT.NONE);
  mntmHash_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newHash();
    }
  }
);
  mntmHash_1.setText(""String_Node_Str"");
  mntmHash_1.setImage(hashImage);
  MenuItem mntmRename_1=new MenuItem(menu_dbContainer,SWT.NONE);
  mntmRename_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      renameContainer();
    }
  }
);
  mntmRename_1.setText(""String_Node_Str"");
  MenuItem mntmDelete_2=new MenuItem(menu_dbContainer,SWT.NONE);
  mntmDelete_2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      deleteCotainer();
    }
  }
);
  mntmDelete_2.setText(""String_Node_Str"");
  MenuItem mntmProperties_3=new MenuItem(menu_dbContainer,SWT.NONE);
  mntmProperties_3.setText(""String_Node_Str"");
  new MenuItem(menu_dbContainer,SWT.SEPARATOR);
  MenuItem mntmAddToFavorites=new MenuItem(menu_dbContainer,SWT.NONE);
  mntmAddToFavorites.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      addFavorite();
    }
  }
);
  mntmAddToFavorites.setText(""String_Node_Str"");
  new MenuItem(menu_dbContainer,SWT.SEPARATOR);
  MenuItem mntmCut=new MenuItem(menu_dbContainer,SWT.NONE);
  mntmCut.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      cut();
    }
  }
);
  mntmCut.setText(""String_Node_Str"");
  MenuItem mntmCopy_1=new MenuItem(menu_dbContainer,SWT.NONE);
  mntmCopy_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      copy();
    }
  }
);
  mntmCopy_1.setText(""String_Node_Str"");
  MenuItem mntmPaste_1=new MenuItem(menu_dbContainer,SWT.NONE);
  mntmPaste_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      paste();
    }
  }
);
  mntmPaste_1.setEnabled(false);
  mntmPaste_1.setText(""String_Node_Str"");
  new MenuItem(menu_dbContainer,SWT.SEPARATOR);
  MenuItem mntmImport_1=new MenuItem(menu_dbContainer,SWT.NONE);
  mntmImport_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      importFile();
    }
  }
);
  mntmImport_1.setEnabled(false);
  mntmImport_1.setText(""String_Node_Str"");
  MenuItem mntmExport_1=new MenuItem(menu_dbContainer,SWT.NONE);
  mntmExport_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      export();
    }
  }
);
  mntmExport_1.setText(""String_Node_Str"");
  new MenuItem(menu_dbContainer,SWT.SEPARATOR);
  MenuItem mntmFind_1=new MenuItem(menu_dbContainer,SWT.NONE);
  mntmFind_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      find();
    }
  }
);
  mntmFind_1.setText(""String_Node_Str"");
  MenuItem mntmFindNext_1=new MenuItem(menu_dbContainer,SWT.NONE);
  mntmFindNext_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      findForward();
    }
  }
);
  mntmFindNext_1.setText(""String_Node_Str"");
  MenuItem mntmFindBackward_3=new MenuItem(menu_dbContainer,SWT.NONE);
  mntmFindBackward_3.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      findBackward();
    }
  }
);
  mntmFindBackward_3.setText(""String_Node_Str"");
  return menu_dbContainer;
}","private Menu initMenuTableDB(){
  Menu menu_dbContainer=new Menu(shlRedisClient);
  MenuItem mntmNew_1=new MenuItem(menu_dbContainer,SWT.CASCADE);
  mntmNew_1.setText(""String_Node_Str"");
  Menu menu_1=new Menu(mntmNew_1);
  mntmNew_1.setMenu(menu_1);
  MenuItem menuItem_1=new MenuItem(menu_1,SWT.NONE);
  menuItem_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newString();
    }
  }
);
  menuItem_1.setText(""String_Node_Str"");
  menuItem_1.setImage(strImage);
  MenuItem menuItem_2=new MenuItem(menu_1,SWT.NONE);
  menuItem_2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newList();
    }
  }
);
  menuItem_2.setText(""String_Node_Str"");
  menuItem_2.setImage(listImage);
  MenuItem menuItem_3=new MenuItem(menu_1,SWT.NONE);
  menuItem_3.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newSet();
    }
  }
);
  menuItem_3.setText(""String_Node_Str"");
  menuItem_3.setImage(setImage);
  MenuItem mntmSortedSet=new MenuItem(menu_1,SWT.NONE);
  mntmSortedSet.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newZSet();
    }
  }
);
  mntmSortedSet.setText(""String_Node_Str"");
  mntmSortedSet.setImage(zsetImage);
  MenuItem mntmHash_1=new MenuItem(menu_1,SWT.NONE);
  mntmHash_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newHash();
    }
  }
);
  mntmHash_1.setText(""String_Node_Str"");
  mntmHash_1.setImage(hashImage);
  MenuItem mntmRename_1=new MenuItem(menu_dbContainer,SWT.NONE);
  mntmRename_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      renameContainer();
    }
  }
);
  mntmRename_1.setText(""String_Node_Str"");
  MenuItem mntmDelete_2=new MenuItem(menu_dbContainer,SWT.NONE);
  mntmDelete_2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      deleteCotainer();
    }
  }
);
  mntmDelete_2.setText(""String_Node_Str"");
  MenuItem mntmProperties_3=new MenuItem(menu_dbContainer,SWT.NONE);
  mntmProperties_3.setText(""String_Node_Str"");
  new MenuItem(menu_dbContainer,SWT.SEPARATOR);
  MenuItem mntmAddToFavorites=new MenuItem(menu_dbContainer,SWT.NONE);
  mntmAddToFavorites.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      addFavorite();
    }
  }
);
  mntmAddToFavorites.setText(""String_Node_Str"");
  new MenuItem(menu_dbContainer,SWT.SEPARATOR);
  MenuItem mntmCut=new MenuItem(menu_dbContainer,SWT.NONE);
  mntmCut.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      cut();
    }
  }
);
  mntmCut.setText(""String_Node_Str"");
  MenuItem mntmCopy_1=new MenuItem(menu_dbContainer,SWT.NONE);
  mntmCopy_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      copy();
    }
  }
);
  mntmCopy_1.setText(""String_Node_Str"");
  MenuItem mntmPaste_1=new MenuItem(menu_dbContainer,SWT.NONE);
  mntmPaste_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      paste();
    }
  }
);
  mntmPaste_1.setEnabled(false);
  mntmPaste_1.setText(""String_Node_Str"");
  new MenuItem(menu_dbContainer,SWT.SEPARATOR);
  MenuItem mntmImport_1=new MenuItem(menu_dbContainer,SWT.NONE);
  mntmImport_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      importFile();
    }
  }
);
  mntmImport_1.setEnabled(false);
  mntmImport_1.setText(""String_Node_Str"");
  MenuItem mntmExport_1=new MenuItem(menu_dbContainer,SWT.NONE);
  mntmExport_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      export();
    }
  }
);
  mntmExport_1.setText(""String_Node_Str"");
  new MenuItem(menu_dbContainer,SWT.SEPARATOR);
  MenuItem mntmFind_1=new MenuItem(menu_dbContainer,SWT.NONE);
  mntmFind_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      find();
    }
  }
);
  mntmFind_1.setText(""String_Node_Str"");
  MenuItem mntmFindNext_1=new MenuItem(menu_dbContainer,SWT.NONE);
  mntmFindNext_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      findForward();
    }
  }
);
  mntmFindNext_1.setText(""String_Node_Str"");
  MenuItem mntmFindBackward_3=new MenuItem(menu_dbContainer,SWT.NONE);
  mntmFindBackward_3.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      findBackward();
    }
  }
);
  mntmFindBackward_3.setText(""String_Node_Str"");
  return menu_dbContainer;
}",0.9994977398292316
62298,"@Override protected void createContents(){
  super.createContents();
  shlNewHash.setText(""String_Node_Str"");
  text.setEnabled(false);
  text.removeModifyListener(new ModifyKey());
  btnOk.setEnabled(true);
  Set<Entry<String,String>> set=value.entrySet();
  Iterator<Entry<String,String>> i=set.iterator();
  while (i.hasNext()) {
    Map.Entry<String,String> entry=(Map.Entry<String,String>)i.next();
    TableItem item=new TableItem(table,SWT.NONE);
    String[] values=new String[]{entry.getKey(),entry.getValue()};
    item.setText(values);
  }
}","@Override protected void createContents(){
  super.createContents();
  shlNewHash.setText(""String_Node_Str"");
  text.setEditable(false);
  text.removeModifyListener(new ModifyKey());
  btnOk.setEnabled(true);
  Set<Entry<String,String>> set=value.entrySet();
  Iterator<Entry<String,String>> i=set.iterator();
  while (i.hasNext()) {
    Map.Entry<String,String> entry=(Map.Entry<String,String>)i.next();
    TableItem item=new TableItem(table,SWT.NONE);
    String[] values=new String[]{entry.getKey(),entry.getValue()};
    item.setText(values);
  }
}",0.995475113122172
62299,"@Override protected void createContents(){
  super.createContents();
  shell.setText(""String_Node_Str"");
  grpWhenListNot.setVisible(false);
  text.setEnabled(false);
  text.removeModifyListener(new ModifyKey());
  btnOk.setEnabled(true);
  for (  String value : values) {
    TableItem item=new TableItem(table,SWT.NONE);
    item.setText(value);
  }
}","@Override protected void createContents(){
  super.createContents();
  shell.setText(""String_Node_Str"");
  grpWhenListNot.setVisible(false);
  text.setEditable(false);
  text.removeModifyListener(new ModifyKey());
  btnOk.setEnabled(true);
  for (  String value : values) {
    TableItem item=new TableItem(table,SWT.NONE);
    item.setText(value);
  }
}",0.9816124469589816
62300,"@Override protected void createContents(){
  super.createContents();
  shlNewSet.setText(""String_Node_Str"");
  text.setEnabled(false);
  text.removeModifyListener(new ModifyKey());
  btnOk.setEnabled(true);
  for (  String value : values) {
    TableItem item=new TableItem(table,SWT.NONE);
    item.setText(value);
  }
}","@Override protected void createContents(){
  super.createContents();
  shlNewSet.setText(""String_Node_Str"");
  text.setEditable(false);
  text.removeModifyListener(new ModifyKey());
  btnOk.setEnabled(true);
  for (  String value : values) {
    TableItem item=new TableItem(table,SWT.NONE);
    item.setText(value);
  }
}",0.979782270606532
62301,"@Override protected void createContents(){
  super.createContents();
  shlNString.setText(""String_Node_Str"");
  text_key.setEnabled(false);
  text_key.removeModifyListener(new ModifyKey());
  text_value.setText(value);
  text_value.selectAll();
  text_value.setFocus();
  text_value.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String newValue=text_value.getText() == null ? ""String_Node_Str"" : text_value.getText();
      if (newValue.equals(value))       btnOk.setEnabled(false);
 else       btnOk.setEnabled(true);
    }
  }
);
}","@Override protected void createContents(){
  super.createContents();
  shlNString.setText(""String_Node_Str"");
  text_key.setEditable(false);
  text_key.removeModifyListener(new ModifyKey());
  text_value.setText(value);
  text_value.selectAll();
  text_value.setFocus();
  text_value.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String newValue=text_value.getText() == null ? ""String_Node_Str"" : text_value.getText();
      if (newValue.equals(value))       btnOk.setEnabled(false);
 else       btnOk.setEnabled(true);
    }
  }
);
}",0.9956933677863912
62302,"@Override protected void createContents(){
  super.createContents();
  shlNewSortedSet.setText(""String_Node_Str"");
  text.setEnabled(false);
  text.removeModifyListener(new ModifyKey());
  btnOk.setEnabled(true);
  Iterator<Tuple> i=values.iterator();
  while (i.hasNext()) {
    Tuple entry=i.next();
    TableItem item=new TableItem(table,SWT.NONE);
    String[] zvalues=new String[]{Double.toString(entry.getScore()),entry.getElement()};
    item.setText(zvalues);
  }
}","@Override protected void createContents(){
  super.createContents();
  shlNewSortedSet.setText(""String_Node_Str"");
  text.setEditable(false);
  text.removeModifyListener(new ModifyKey());
  btnOk.setEnabled(true);
  Iterator<Tuple> i=values.iterator();
  while (i.hasNext()) {
    Tuple entry=i.next();
    TableItem item=new TableItem(table,SWT.NONE);
    String[] zvalues=new String[]{Double.toString(entry.getScore()),entry.getElement()};
    item.setText(zvalues);
  }
}",0.986272439281943
62303,"@Override protected void command(){
  jedis.select(db);
  if (jedis.exists(key) && getValueType(key) != NodeType.HASH)   throw new RuntimeException(""String_Node_Str"" + key + ""String_Node_Str"");
 else   if (jedis.exists(key) && getValueType(key) == NodeType.HASH) {
    ReadHash command=new ReadHash(id,db,key);
    command.execute(jedis);
    Map<String,String> hashValues=command.getValue();
    Set<Entry<String,String>> set=values.entrySet();
    Iterator<Entry<String,String>> i=set.iterator();
    while (i.hasNext()) {
      Map.Entry<String,String> entry=(Map.Entry<String,String>)i.next();
      String field=entry.getKey();
      String value=entry.getValue();
      jedis.hset(key,field,value);
    }
    Set<Entry<String,String>> hashSet=hashValues.entrySet();
    Iterator<Entry<String,String>> hashI=hashSet.iterator();
    while (hashI.hasNext()) {
      Map.Entry<String,String> entry=(Map.Entry<String,String>)hashI.next();
      String field=entry.getKey();
      String oldValue=values.get(field);
      if (oldValue == null)       jedis.hdel(key,field);
    }
  }
 else   jedis.hmset(key,values);
}","@Override protected void command(){
  jedis.select(db);
  if (jedis.exists(key) && getValueType(key) != NodeType.HASH)   throw new RuntimeException(""String_Node_Str"" + key + ""String_Node_Str"");
 else   if (jedis.exists(key) && getValueType(key) == NodeType.HASH) {
    DeleteKey command=new DeleteKey(id,db,key);
    command.execute(jedis);
    jedis.hmset(key,values);
  }
 else   jedis.hmset(key,values);
}",0.4891803278688524
62304,"private TreeItem gotoDBContainer(int id,int db,String container,boolean isKey,boolean refresh){
  rootTreeItemSelected(false);
  TreeItem dbItem=findDBTreeItem(id,db);
  TreeItem dataItemSelected=null;
  if (dbItem != null) {
    dbContainerTreeItemSelected(dbItem,refresh);
    TreeItem[] dataItems=dbItem.getItems();
    if (container.length() == 0)     return dbItem;
 else {
      String[] containers=container.split(""String_Node_Str"");
      if (!isKey) {
        for (int i=0; i < containers.length; i++) {
          for (          TreeItem dataItem : dataItems) {
            if (dataItem.getText().equals(containers[i])) {
              tree.setSelection(dataItem);
              dbContainerTreeItemSelected(dataItem,refresh);
              dataItems=dataItem.getItems();
              dataItemSelected=dataItem;
              break;
            }
          }
        }
      }
 else {
        for (int i=0; i < containers.length - 1; i++) {
          for (          TreeItem dataItem : dataItems) {
            if (dataItem.getText().equals(containers[i])) {
              tree.setSelection(dataItem);
              dbContainerTreeItemSelected(dataItem,false);
              dataItems=dataItem.getItems();
              dataItemSelected=dataItem;
              break;
            }
          }
        }
        TableItem[] tableItems=table.getItems();
        for (        TableItem tableItem : tableItems) {
          NodeType type=(NodeType)tableItem.getData(NODE_TYPE);
          if (type != NodeType.SERVER && type != NodeType.DATABASE && type != NodeType.CONTAINER && tableItem.getText().equals(containers[containers.length - 1])) {
            table.setSelection(tableItem);
            dataItemSelected();
            break;
          }
        }
      }
    }
  }
  return dataItemSelected;
}","private TreeItem gotoDBContainer(int id,int db,String container,boolean isKey,boolean refresh){
  rootTreeItemSelected(false);
  TreeItem dbItem=findDBTreeItem(id,db);
  TreeItem dataItemSelected=dbItem;
  if (dbItem != null) {
    dbContainerTreeItemSelected(dbItem,refresh);
    TreeItem[] dataItems=dbItem.getItems();
    String[] containers=container.split(""String_Node_Str"");
    if (!isKey) {
      for (int i=0; i < containers.length; i++) {
        for (        TreeItem dataItem : dataItems) {
          if (dataItem.getText().equals(containers[i])) {
            tree.setSelection(dataItem);
            dbContainerTreeItemSelected(dataItem,refresh);
            dataItems=dataItem.getItems();
            dataItemSelected=dataItem;
            break;
          }
        }
      }
    }
 else {
      for (int i=0; i < containers.length - 1; i++) {
        for (        TreeItem dataItem : dataItems) {
          if (dataItem.getText().equals(containers[i])) {
            tree.setSelection(dataItem);
            dbContainerTreeItemSelected(dataItem,false);
            dataItems=dataItem.getItems();
            dataItemSelected=dataItem;
            break;
          }
        }
      }
      TableItem[] tableItems=table.getItems();
      for (      TableItem tableItem : tableItems) {
        NodeType type=(NodeType)tableItem.getData(NODE_TYPE);
        if (type != NodeType.SERVER && type != NodeType.DATABASE && type != NodeType.CONTAINER && tableItem.getText().equals(containers[containers.length - 1])) {
          table.setSelection(tableItem);
          dataItemSelected();
          break;
        }
      }
    }
  }
  return dataItemSelected;
}",0.8735632183908046
62305,"@Override public int compareTo(Node o){
  int result=this.getKey().compareTo(o.getKey());
  if (order == Order.Ascend)   return result;
  return result * -1;
}","public int compareTo(Node o){
  int result=this.getKey().compareTo(o.getKey());
  if (order == Order.Ascend)   return result;
  return result * -1;
}",0.9675324675324676
62306,"private void deleteKey(){
  boolean ok=MessageDialog.openConfirm(shlRedisClient,""String_Node_Str"",""String_Node_Str"");
  if (ok) {
    ContainerInfo cinfo=new ContainerInfo();
    TreeItem[] items=tree.getSelection();
    parseContainer(items[0],cinfo);
    String key=cinfo.getContainer() == null ? ""String_Node_Str"" : cinfo.getContainer();
    key+=itemSelected.getText();
    service2.deleteKey(cinfo.getId(),cinfo.getDb(),key);
    itemSelected.dispose();
  }
}","private void deleteKey(){
  boolean ok=MessageDialog.openConfirm(shlRedisClient,""String_Node_Str"",""String_Node_Str"");
  if (ok) {
    ContainerInfo cinfo=new ContainerInfo();
    TreeItem[] items=tree.getSelection();
    parseContainer(items[0],cinfo);
    String key=cinfo.getContainer() == null ? ""String_Node_Str"" : cinfo.getContainer();
    key+=itemSelected.getText();
    service2.deleteKey(cinfo.getId(),cinfo.getDb(),key);
    itemSelected.dispose();
    treeItemSelected(false);
  }
}",0.9696969696969696
62307,"private void deleteCotainer(){
  boolean ok=MessageDialog.openConfirm(shlRedisClient,""String_Node_Str"",""String_Node_Str"");
  if (ok) {
    TreeItem treeItem;
    ContainerInfo cinfo=new ContainerInfo();
    if (itemSelected instanceof TreeItem)     treeItem=(TreeItem)itemSelected;
 else     treeItem=getTreeItemByTableItem((TableItem)itemSelected);
    parseContainer(treeItem,cinfo);
    service2.deleteContainer(cinfo.getId(),cinfo.getDb(),cinfo.getContainer());
    if (itemSelected instanceof TableItem) {
      treeItem.dispose();
    }
    itemSelected.dispose();
  }
}","private void deleteCotainer(){
  boolean ok=MessageDialog.openConfirm(shlRedisClient,""String_Node_Str"",""String_Node_Str"");
  if (ok) {
    TreeItem treeItem;
    ContainerInfo cinfo=new ContainerInfo();
    if (itemSelected instanceof TreeItem)     treeItem=(TreeItem)itemSelected;
 else     treeItem=getTreeItemByTableItem((TableItem)itemSelected);
    parseContainer(treeItem,cinfo);
    service2.deleteContainer(cinfo.getId(),cinfo.getDb(),cinfo.getContainer());
    if (itemSelected instanceof TableItem) {
      treeItem.dispose();
    }
    itemSelected.dispose();
    treeItemSelected(false);
  }
}",0.9754445385266723
62308,"public JedisCommand getCommand(){
  if (redisVersion.containsKey(String.valueOf(id))) {
    version=redisVersion.get(String.valueOf(id));
  }
 else {
    version=getRedisVersion();
    redisVersion.put(String.valueOf(id),version);
  }
  JedisCommand command=null;
  for (int i=commands.size(); i > 0; i--) {
    command=commands.get(i - 1);
    if (command.getVersion().getVersion() <= version.getVersion()) {
      return command;
    }
  }
  return command;
}","public JedisCommand getCommand(){
  if (redisVersion.containsKey(String.valueOf(id))) {
    version=redisVersion.get(String.valueOf(id));
  }
 else {
    version=getRedisVersion();
    redisVersion.put(String.valueOf(id),version);
  }
  for (  JedisCommand command : commands) {
    if (command.getVersion().getVersion() <= version.getVersion()) {
      return command;
    }
  }
  return null;
}",0.8588098016336057
62309,"@Override protected void command(){
  jedis.select(db);
  if (jedis.exists(key) && getNodeType(key) != NodeType.HASH)   throw new RuntimeException(""String_Node_Str"" + key + ""String_Node_Str"");
  jedis.hmset(key,values);
}","@Override protected void command(){
  jedis.select(db);
  if (jedis.exists(key) && getValueType(key) != NodeType.HASH)   throw new RuntimeException(""String_Node_Str"" + key + ""String_Node_Str"");
  jedis.hmset(key,values);
}",0.984198645598194
62310,"@Override public void command(){
  jedis.select(db);
  Set<String> nodekeys=null;
  int length;
  if (key != null) {
    nodekeys=jedis.keys(key + ""String_Node_Str"");
    length=key.length();
  }
 else {
    nodekeys=jedis.keys(""String_Node_Str"");
    length=0;
  }
  Iterator<String> it=nodekeys.iterator();
  while (it.hasNext()) {
    String nextKey=it.next();
    String[] ckey=nextKey.substring(length).split(""String_Node_Str"");
    if (ckey.length == 1) {
      NodeType nodeType=getNodeType(nextKey);
      long size=getSize(nextKey);
      DataNode node=new DataNode(ckey[0],nodeType,size,order,orderBy);
      keys.add(node);
    }
  }
}","@Override public void command(){
  jedis.select(db);
  Set<String> nodekeys=null;
  int length;
  if (key != null) {
    nodekeys=jedis.keys(key + ""String_Node_Str"");
    length=key.length();
  }
 else {
    nodekeys=jedis.keys(""String_Node_Str"");
    length=0;
  }
  Iterator<String> it=nodekeys.iterator();
  while (it.hasNext()) {
    String nextKey=it.next();
    String[] ckey=nextKey.substring(length).split(""String_Node_Str"");
    if (ckey.length == 1) {
      NodeType nodeType=getValueType(nextKey);
      long size=getSize(nextKey);
      DataNode node=new DataNode(ckey[0],nodeType,size,order,orderBy);
      keys.add(node);
    }
  }
}",0.994586233565352
62311,"@Override public void command(){
  jedis.select(db);
  Set<String> nodekeys=jedis.keys(""String_Node_Str"");
  Iterator<String> it=nodekeys.iterator();
  while (it.hasNext()) {
    String key=(String)it.next();
    NodeType nodeType=getNodeType(key);
    Node node=new Node(key,nodeType);
    nodes.add(node);
  }
}","@Override public void command(){
  jedis.select(db);
  Set<String> nodekeys=jedis.keys(""String_Node_Str"");
  Iterator<String> it=nodekeys.iterator();
  while (it.hasNext()) {
    String key=(String)it.next();
    NodeType nodeType=getValueType(key);
    Node node=new Node(key,nodeType);
    nodes.add(node);
  }
}",0.988835725677831
62312,"@Override protected void command(){
  jedis.select(db);
  if (jedis.exists(key) && getNodeType(key) != NodeType.LIST)   throw new RuntimeException(""String_Node_Str"" + key + ""String_Node_Str"");
  for (  String value : values) {
    if (headTail && exist)     jedis.lpush(key,value);
 else     if (headTail && !exist)     jedis.lpushx(key,value);
 else     if (!headTail && exist)     jedis.rpush(key,value);
 else     jedis.rpushx(key,value);
  }
}","@Override protected void command(){
  jedis.select(db);
  if (jedis.exists(key) && getValueType(key) != NodeType.LIST)   throw new RuntimeException(""String_Node_Str"" + key + ""String_Node_Str"");
  for (  String value : values) {
    if (headTail && exist)     jedis.lpush(key,value);
 else     if (headTail && !exist)     jedis.lpushx(key,value);
 else     if (!headTail && exist)     jedis.rpush(key,value);
 else     jedis.rpushx(key,value);
  }
}",0.9921787709497206
62313,"@Override protected void command(){
  jedis.select(db);
  if (jedis.exists(key) && getNodeType(key) != NodeType.SET)   throw new RuntimeException(""String_Node_Str"" + key + ""String_Node_Str"");
}","@Override protected void command(){
  jedis.select(db);
  if (jedis.exists(key) && getValueType(key) != NodeType.SET)   throw new RuntimeException(""String_Node_Str"" + key + ""String_Node_Str"");
}",0.9819121447028424
62314,"@Override protected void command(){
  jedis.select(db);
  if (jedis.exists(key) && getNodeType(key) != NodeType.SORTEDSET)   throw new RuntimeException(""String_Node_Str"" + key + ""String_Node_Str"");
}","@Override protected void command(){
  jedis.select(db);
  if (jedis.exists(key) && getValueType(key) != NodeType.SORTEDSET)   throw new RuntimeException(""String_Node_Str"" + key + ""String_Node_Str"");
}",0.9824561403508772
62315,"private void export(){
  TreeItem treeItem;
  ContainerInfo cinfo=new ContainerInfo();
  if (itemSelected instanceof TreeItem) {
    treeItem=(TreeItem)itemSelected;
  }
 else {
    treeItem=getTreeItemByTableItem((TableItem)itemSelected);
  }
  parseContainer(treeItem,cinfo);
  FileDialog dialog=new FileDialog(shlRedisClient,SWT.SAVE);
  dialog.setText(""String_Node_Str"");
  String[] filterExt={""String_Node_Str""};
  dialog.setFilterExtensions(filterExt);
  String file=dialog.open();
  File exportFile=new File(file);
  boolean ok=false;
  if (exportFile.exists())   ok=MessageDialog.openConfirm(shlRedisClient,""String_Node_Str"",""String_Node_Str"");
  if (ok) {
    ExportService service=new ExportService(file,cinfo.getId(),cinfo.getDb(),cinfo.getContainer());
    try {
      service.export();
    }
 catch (    IOException e) {
      throw new RuntimeException(e.getMessage());
    }
  }
}","private void export(){
  TreeItem treeItem;
  ContainerInfo cinfo=new ContainerInfo();
  if (itemSelected instanceof TreeItem) {
    treeItem=(TreeItem)itemSelected;
  }
 else {
    treeItem=getTreeItemByTableItem((TableItem)itemSelected);
  }
  parseContainer(treeItem,cinfo);
  FileDialog dialog=new FileDialog(shlRedisClient,SWT.SAVE);
  dialog.setText(""String_Node_Str"");
  String[] filterExt={""String_Node_Str""};
  dialog.setFilterExtensions(filterExt);
  String file=dialog.open();
  if (file != null) {
    File exportFile=new File(file);
    boolean ok=false;
    boolean exist=exportFile.exists();
    if (exist)     ok=MessageDialog.openConfirm(shlRedisClient,""String_Node_Str"",""String_Node_Str"");
    if (!exist || ok) {
      ExportService service=new ExportService(file,cinfo.getId(),cinfo.getDb(),cinfo.getContainer());
      try {
        service.export();
      }
 catch (      IOException e) {
        throw new RuntimeException(e.getMessage());
      }
    }
  }
}",0.9440596696856686
62316,"private void importFile(){
  TreeItem treeItem;
  ContainerInfo cinfo=new ContainerInfo();
  if (itemSelected instanceof TreeItem) {
    treeItem=(TreeItem)itemSelected;
  }
 else {
    treeItem=getTreeItemByTableItem((TableItem)itemSelected);
  }
  parseContainer(treeItem,cinfo);
  FileDialog dialog=new FileDialog(shlRedisClient,SWT.OPEN);
  dialog.setText(""String_Node_Str"");
  String[] filterExt={""String_Node_Str""};
  dialog.setFilterExtensions(filterExt);
  String file=dialog.open();
  ImportService service=new ImportService(file,cinfo.getId(),cinfo.getDb());
  try {
    service.importFile();
  }
 catch (  IOException e) {
    throw new RuntimeException(e.getMessage());
  }
  dbContainerTreeItemSelected(treeItem,true);
}","private void importFile(){
  TreeItem treeItem;
  ContainerInfo cinfo=new ContainerInfo();
  if (itemSelected instanceof TreeItem) {
    treeItem=(TreeItem)itemSelected;
  }
 else {
    treeItem=getTreeItemByTableItem((TableItem)itemSelected);
  }
  parseContainer(treeItem,cinfo);
  FileDialog dialog=new FileDialog(shlRedisClient,SWT.OPEN);
  dialog.setText(""String_Node_Str"");
  String[] filterExt={""String_Node_Str""};
  dialog.setFilterExtensions(filterExt);
  String file=dialog.open();
  if (file != null) {
    ImportService service=new ImportService(file,cinfo.getId(),cinfo.getDb());
    try {
      service.importFile();
    }
 catch (    IOException e) {
      throw new RuntimeException(e.getMessage());
    }
    dbContainerTreeItemSelected(treeItem,true);
  }
}",0.9721485411140584
62317,"private void initMenu(){
  menu=new Menu(shlRedisClient,SWT.BAR);
  shlRedisClient.setMenuBar(menu);
  MenuItem mntmServer=new MenuItem(menu,SWT.CASCADE);
  mntmServer.setText(""String_Node_Str"");
  menuServer=new Menu(mntmServer);
  mntmServer.setMenu(menuServer);
  MenuItem mntmNew=new MenuItem(menuServer,SWT.NONE);
  mntmNew.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      addServer();
    }
  }
);
  mntmNew.setText(""String_Node_Str"");
  MenuItem mntmEdit=new MenuItem(menuServer,SWT.NONE);
  mntmEdit.setEnabled(false);
  mntmEdit.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      updateServer();
    }
  }
);
  mntmEdit.setText(""String_Node_Str"");
  MenuItem mntmDelete_1=new MenuItem(menuServer,SWT.NONE);
  mntmDelete_1.setEnabled(false);
  mntmDelete_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      removeServer();
    }
  }
);
  mntmDelete_1.setText(""String_Node_Str"");
  MenuItem mntmProperties=new MenuItem(menuServer,SWT.NONE);
  mntmProperties.setEnabled(false);
  mntmProperties.setText(""String_Node_Str"");
  new MenuItem(menuServer,SWT.SEPARATOR);
  MenuItem mntmExit=new MenuItem(menuServer,SWT.NONE);
  mntmExit.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      shlRedisClient.close();
    }
  }
);
  mntmExit.setText(""String_Node_Str"");
  MenuItem mntmData=new MenuItem(menu,SWT.CASCADE);
  mntmData.setText(""String_Node_Str"");
  menuData=new Menu(mntmData);
  mntmData.setMenu(menuData);
  MenuItem mntmAdd=new MenuItem(menuData,SWT.CASCADE);
  mntmAdd.setEnabled(false);
  mntmAdd.setText(""String_Node_Str"");
  Menu menu_5=new Menu(mntmAdd);
  mntmAdd.setMenu(menu_5);
  MenuItem mntmString=new MenuItem(menu_5,SWT.NONE);
  mntmString.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newString();
    }
  }
);
  mntmString.setText(""String_Node_Str"");
  mntmString.setAccelerator(SWT.ALT + '1');
  mntmString.setImage(strImage);
  MenuItem mntmList=new MenuItem(menu_5,SWT.NONE);
  mntmList.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newList();
    }
  }
);
  mntmList.setText(""String_Node_Str"");
  mntmList.setAccelerator(SWT.ALT + '2');
  mntmList.setImage(listImage);
  MenuItem mntmSet=new MenuItem(menu_5,SWT.NONE);
  mntmSet.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newSet();
    }
  }
);
  mntmSet.setText(""String_Node_Str"");
  mntmSet.setAccelerator(SWT.ALT + '3');
  mntmSet.setImage(setImage);
  MenuItem mntmSortset=new MenuItem(menu_5,SWT.NONE);
  mntmSortset.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newZSet();
    }
  }
);
  mntmSortset.setText(""String_Node_Str"");
  mntmSortset.setAccelerator(SWT.ALT + '4');
  mntmSortset.setImage(zsetImage);
  MenuItem mntmHash=new MenuItem(menu_5,SWT.NONE);
  mntmHash.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newHash();
    }
  }
);
  mntmHash.setText(""String_Node_Str"");
  mntmHash.setAccelerator(SWT.ALT + '5');
  mntmHash.setImage(hashImage);
  MenuItem mntmRename_2=new MenuItem(menuData,SWT.NONE);
  mntmRename_2.setEnabled(false);
  mntmRename_2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (itemSelected instanceof TreeItem)       renameContainer();
 else       renameKey();
    }
  }
);
  mntmRename_2.setText(""String_Node_Str"");
  MenuItem mntmDelete_3=new MenuItem(menuData,SWT.NONE);
  mntmDelete_3.setEnabled(false);
  mntmDelete_3.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (itemSelected instanceof TreeItem)       deleteCotainer();
 else {
        NodeType type=(NodeType)itemSelected.getData(NODE_TYPE);
        if (type == NodeType.CONTAINER)         deleteCotainer();
 else         deleteKey();
      }
    }
  }
);
  mntmDelete_3.setText(""String_Node_Str"");
  mntmDelete_3.setAccelerator(SWT.DEL);
  MenuItem mntmProperties_2=new MenuItem(menuData,SWT.NONE);
  mntmProperties_2.setEnabled(false);
  mntmProperties_2.setText(""String_Node_Str"");
  new MenuItem(menuData,SWT.SEPARATOR);
  MenuItem mntmcut=new MenuItem(menuData,SWT.NONE);
  mntmcut.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      cut();
    }
  }
);
  mntmcut.setEnabled(false);
  mntmcut.setText(""String_Node_Str"");
  mntmcut.setAccelerator(SWT.CTRL + 'X');
  MenuItem mntmCopy=new MenuItem(menuData,SWT.NONE);
  mntmCopy.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      copy();
    }
  }
);
  mntmCopy.setEnabled(false);
  mntmCopy.setText(""String_Node_Str"");
  mntmCopy.setAccelerator(SWT.CTRL + 'C');
  MenuItem mntmPaste=new MenuItem(menuData,SWT.NONE);
  mntmPaste.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      paste();
    }
  }
);
  mntmPaste.setEnabled(false);
  mntmPaste.setText(""String_Node_Str"");
  mntmPaste.setAccelerator(SWT.CTRL + 'V');
  new MenuItem(menuData,SWT.SEPARATOR);
  MenuItem mntmImport=new MenuItem(menuData,SWT.NONE);
  mntmImport.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      importFile();
    }
  }
);
  mntmImport.setEnabled(false);
  mntmImport.setText(""String_Node_Str"");
  MenuItem mntmExport=new MenuItem(menuData,SWT.NONE);
  mntmExport.setEnabled(false);
  mntmExport.setText(""String_Node_Str"");
  new MenuItem(menuData,SWT.SEPARATOR);
  MenuItem mntmRefresh_1=new MenuItem(menuData,SWT.NONE);
  mntmRefresh_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      treeItemSelected(true);
    }
  }
);
  mntmRefresh_1.setText(""String_Node_Str"");
  mntmRefresh_1.setAccelerator(SWT.F5);
  MenuItem mntmFavorites=new MenuItem(menu,SWT.CASCADE);
  mntmFavorites.setText(""String_Node_Str"");
  menuFavorite=new Menu(mntmFavorites);
  mntmFavorites.setMenu(menuFavorite);
  MenuItem mntmAdd_Favorite=new MenuItem(menuFavorite,SWT.NONE);
  mntmAdd_Favorite.setEnabled(false);
  mntmAdd_Favorite.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      addFavorite();
    }
  }
);
  mntmAdd_Favorite.setText(""String_Node_Str"");
  MenuItem mntmOrganize=new MenuItem(menuFavorite,SWT.NONE);
  mntmOrganize.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      OrganizeFavoriteDialog dialog=new OrganizeFavoriteDialog(shlRedisClient,SWT.SHELL_TRIM | SWT.APPLICATION_MODAL);
      List<Favorite> favorites=(List<Favorite>)dialog.open();
      if (favorites != null) {
        service3.updateList(favorites);
        removeFavoriteMenuItem();
        addFavoriteMenuItem();
      }
    }
  }
);
  mntmOrganize.setText(""String_Node_Str"");
  addFavoriteMenuItem();
  MenuItem mntmTool=new MenuItem(menu,SWT.CASCADE);
  mntmTool.setText(""String_Node_Str"");
  Menu menu_6=new Menu(mntmTool);
  mntmTool.setMenu(menu_6);
  MenuItem mntmSet_2=new MenuItem(menu_6,SWT.CASCADE);
  mntmSet_2.setText(""String_Node_Str"");
  Menu menu_3=new Menu(mntmSet_2);
  mntmSet_2.setMenu(menu_3);
  MenuItem mntmDiff=new MenuItem(menu_3,SWT.NONE);
  mntmDiff.setText(""String_Node_Str"");
  MenuItem mntmInter=new MenuItem(menu_3,SWT.NONE);
  mntmInter.setText(""String_Node_Str"");
  MenuItem mntmUnion=new MenuItem(menu_3,SWT.NONE);
  mntmUnion.setText(""String_Node_Str"");
  new MenuItem(menu_6,SWT.SEPARATOR);
  MenuItem mntmPubsub=new MenuItem(menu_6,SWT.NONE);
  mntmPubsub.setText(""String_Node_Str"");
  MenuItem mntmHelp=new MenuItem(menu,SWT.CASCADE);
  mntmHelp.setText(""String_Node_Str"");
  Menu menu_2=new Menu(mntmHelp);
  mntmHelp.setMenu(menu_2);
  MenuItem mntmReportBug=new MenuItem(menu_2,SWT.NONE);
  mntmReportBug.setText(""String_Node_Str"");
  MenuItem mntmDonation=new MenuItem(menu_2,SWT.NONE);
  mntmDonation.setText(""String_Node_Str"");
  new MenuItem(menu_2,SWT.SEPARATOR);
  MenuItem mntmAbout=new MenuItem(menu_2,SWT.NONE);
  mntmAbout.setText(""String_Node_Str"");
}","private void initMenu(){
  menu=new Menu(shlRedisClient,SWT.BAR);
  shlRedisClient.setMenuBar(menu);
  MenuItem mntmServer=new MenuItem(menu,SWT.CASCADE);
  mntmServer.setText(""String_Node_Str"");
  menuServer=new Menu(mntmServer);
  mntmServer.setMenu(menuServer);
  MenuItem mntmNew=new MenuItem(menuServer,SWT.NONE);
  mntmNew.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      addServer();
    }
  }
);
  mntmNew.setText(""String_Node_Str"");
  MenuItem mntmEdit=new MenuItem(menuServer,SWT.NONE);
  mntmEdit.setEnabled(false);
  mntmEdit.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      updateServer();
    }
  }
);
  mntmEdit.setText(""String_Node_Str"");
  MenuItem mntmDelete_1=new MenuItem(menuServer,SWT.NONE);
  mntmDelete_1.setEnabled(false);
  mntmDelete_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      removeServer();
    }
  }
);
  mntmDelete_1.setText(""String_Node_Str"");
  MenuItem mntmProperties=new MenuItem(menuServer,SWT.NONE);
  mntmProperties.setEnabled(false);
  mntmProperties.setText(""String_Node_Str"");
  new MenuItem(menuServer,SWT.SEPARATOR);
  MenuItem mntmExit=new MenuItem(menuServer,SWT.NONE);
  mntmExit.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      shlRedisClient.close();
    }
  }
);
  mntmExit.setText(""String_Node_Str"");
  MenuItem mntmData=new MenuItem(menu,SWT.CASCADE);
  mntmData.setText(""String_Node_Str"");
  menuData=new Menu(mntmData);
  mntmData.setMenu(menuData);
  MenuItem mntmAdd=new MenuItem(menuData,SWT.CASCADE);
  mntmAdd.setEnabled(false);
  mntmAdd.setText(""String_Node_Str"");
  Menu menu_5=new Menu(mntmAdd);
  mntmAdd.setMenu(menu_5);
  MenuItem mntmString=new MenuItem(menu_5,SWT.NONE);
  mntmString.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newString();
    }
  }
);
  mntmString.setText(""String_Node_Str"");
  mntmString.setAccelerator(SWT.ALT + '1');
  mntmString.setImage(strImage);
  MenuItem mntmList=new MenuItem(menu_5,SWT.NONE);
  mntmList.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newList();
    }
  }
);
  mntmList.setText(""String_Node_Str"");
  mntmList.setAccelerator(SWT.ALT + '2');
  mntmList.setImage(listImage);
  MenuItem mntmSet=new MenuItem(menu_5,SWT.NONE);
  mntmSet.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newSet();
    }
  }
);
  mntmSet.setText(""String_Node_Str"");
  mntmSet.setAccelerator(SWT.ALT + '3');
  mntmSet.setImage(setImage);
  MenuItem mntmSortset=new MenuItem(menu_5,SWT.NONE);
  mntmSortset.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newZSet();
    }
  }
);
  mntmSortset.setText(""String_Node_Str"");
  mntmSortset.setAccelerator(SWT.ALT + '4');
  mntmSortset.setImage(zsetImage);
  MenuItem mntmHash=new MenuItem(menu_5,SWT.NONE);
  mntmHash.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newHash();
    }
  }
);
  mntmHash.setText(""String_Node_Str"");
  mntmHash.setAccelerator(SWT.ALT + '5');
  mntmHash.setImage(hashImage);
  MenuItem mntmRename_2=new MenuItem(menuData,SWT.NONE);
  mntmRename_2.setEnabled(false);
  mntmRename_2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (itemSelected instanceof TreeItem)       renameContainer();
 else       renameKey();
    }
  }
);
  mntmRename_2.setText(""String_Node_Str"");
  MenuItem mntmDelete_3=new MenuItem(menuData,SWT.NONE);
  mntmDelete_3.setEnabled(false);
  mntmDelete_3.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (itemSelected instanceof TreeItem)       deleteCotainer();
 else {
        NodeType type=(NodeType)itemSelected.getData(NODE_TYPE);
        if (type == NodeType.CONTAINER)         deleteCotainer();
 else         deleteKey();
      }
    }
  }
);
  mntmDelete_3.setText(""String_Node_Str"");
  mntmDelete_3.setAccelerator(SWT.DEL);
  MenuItem mntmProperties_2=new MenuItem(menuData,SWT.NONE);
  mntmProperties_2.setEnabled(false);
  mntmProperties_2.setText(""String_Node_Str"");
  new MenuItem(menuData,SWT.SEPARATOR);
  MenuItem mntmcut=new MenuItem(menuData,SWT.NONE);
  mntmcut.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      cut();
    }
  }
);
  mntmcut.setEnabled(false);
  mntmcut.setText(""String_Node_Str"");
  mntmcut.setAccelerator(SWT.CTRL + 'X');
  MenuItem mntmCopy=new MenuItem(menuData,SWT.NONE);
  mntmCopy.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      copy();
    }
  }
);
  mntmCopy.setEnabled(false);
  mntmCopy.setText(""String_Node_Str"");
  mntmCopy.setAccelerator(SWT.CTRL + 'C');
  MenuItem mntmPaste=new MenuItem(menuData,SWT.NONE);
  mntmPaste.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      paste();
    }
  }
);
  mntmPaste.setEnabled(false);
  mntmPaste.setText(""String_Node_Str"");
  mntmPaste.setAccelerator(SWT.CTRL + 'V');
  new MenuItem(menuData,SWT.SEPARATOR);
  MenuItem mntmImport=new MenuItem(menuData,SWT.NONE);
  mntmImport.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      importFile();
    }
  }
);
  mntmImport.setEnabled(false);
  mntmImport.setText(""String_Node_Str"");
  MenuItem mntmExport=new MenuItem(menuData,SWT.NONE);
  mntmExport.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      export();
    }
  }
);
  mntmExport.setEnabled(false);
  mntmExport.setText(""String_Node_Str"");
  new MenuItem(menuData,SWT.SEPARATOR);
  MenuItem mntmRefresh_1=new MenuItem(menuData,SWT.NONE);
  mntmRefresh_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      treeItemSelected(true);
    }
  }
);
  mntmRefresh_1.setText(""String_Node_Str"");
  mntmRefresh_1.setAccelerator(SWT.F5);
  MenuItem mntmFavorites=new MenuItem(menu,SWT.CASCADE);
  mntmFavorites.setText(""String_Node_Str"");
  menuFavorite=new Menu(mntmFavorites);
  mntmFavorites.setMenu(menuFavorite);
  MenuItem mntmAdd_Favorite=new MenuItem(menuFavorite,SWT.NONE);
  mntmAdd_Favorite.setEnabled(false);
  mntmAdd_Favorite.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      addFavorite();
    }
  }
);
  mntmAdd_Favorite.setText(""String_Node_Str"");
  MenuItem mntmOrganize=new MenuItem(menuFavorite,SWT.NONE);
  mntmOrganize.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      OrganizeFavoriteDialog dialog=new OrganizeFavoriteDialog(shlRedisClient,SWT.SHELL_TRIM | SWT.APPLICATION_MODAL);
      List<Favorite> favorites=(List<Favorite>)dialog.open();
      if (favorites != null) {
        service3.updateList(favorites);
        removeFavoriteMenuItem();
        addFavoriteMenuItem();
      }
    }
  }
);
  mntmOrganize.setText(""String_Node_Str"");
  addFavoriteMenuItem();
  MenuItem mntmTool=new MenuItem(menu,SWT.CASCADE);
  mntmTool.setText(""String_Node_Str"");
  Menu menu_6=new Menu(mntmTool);
  mntmTool.setMenu(menu_6);
  MenuItem mntmSet_2=new MenuItem(menu_6,SWT.CASCADE);
  mntmSet_2.setText(""String_Node_Str"");
  Menu menu_3=new Menu(mntmSet_2);
  mntmSet_2.setMenu(menu_3);
  MenuItem mntmDiff=new MenuItem(menu_3,SWT.NONE);
  mntmDiff.setText(""String_Node_Str"");
  MenuItem mntmInter=new MenuItem(menu_3,SWT.NONE);
  mntmInter.setText(""String_Node_Str"");
  MenuItem mntmUnion=new MenuItem(menu_3,SWT.NONE);
  mntmUnion.setText(""String_Node_Str"");
  new MenuItem(menu_6,SWT.SEPARATOR);
  MenuItem mntmPubsub=new MenuItem(menu_6,SWT.NONE);
  mntmPubsub.setText(""String_Node_Str"");
  MenuItem mntmHelp=new MenuItem(menu,SWT.CASCADE);
  mntmHelp.setText(""String_Node_Str"");
  Menu menu_2=new Menu(mntmHelp);
  mntmHelp.setMenu(menu_2);
  MenuItem mntmReportBug=new MenuItem(menu_2,SWT.NONE);
  mntmReportBug.setText(""String_Node_Str"");
  MenuItem mntmDonation=new MenuItem(menu_2,SWT.NONE);
  mntmDonation.setText(""String_Node_Str"");
  new MenuItem(menu_2,SWT.SEPARATOR);
  MenuItem mntmAbout=new MenuItem(menu_2,SWT.NONE);
  mntmAbout.setText(""String_Node_Str"");
}",0.9911044362292052
62318,"private void initTable(SashForm sashForm_1){
  table=new Table(sashForm_1,SWT.BORDER | SWT.FULL_SELECTION);
  table.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      TableItem[] tableItems=table.getSelection();
      TreeItem[] treeItems=tree.getSelection();
      if (treeItems.length > 0) {
        for (        TreeItem treeItem : treeItems[0].getItems()) {
          String treeText=treeItem.getText();
          String tableText=tableItems[0].getText(0);
          String type=tableItems[0].getText(1);
          if (treeText.equals(tableText)) {
            if (type.equals(NodeType.DATABASE.toString()) || type.equals(NodeType.CONTAINER.toString()))             dbContainerItemSelected(treeItem,false);
 else             if (type.equals(NodeType.SERVER.toString()))             serverItemSelected(treeItem,false);
            break;
          }
        }
      }
    }
    @Override public void mouseDown(    MouseEvent e){
    }
  }
);
  table.setHeaderVisible(true);
  tblclmnName=new TableColumn(table,SWT.NONE);
  tblclmnName.setWidth(100);
  tblclmnName.setText(COL_NAME);
  tblclmnName.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      columnSelected(tblclmnName,COL_NAME,OrderBy.NAME);
      tblclmnType.setText(COL_TYPE);
      tblclmnSize.setText(COL_SIZE);
    }
  }
);
  tblclmnType=new TableColumn(table,SWT.NONE);
  tblclmnType.setWidth(100);
  tblclmnType.setText(COL_TYPE);
  tblclmnType.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      columnSelected(tblclmnType,COL_TYPE,OrderBy.TYPE);
      tblclmnName.setText(COL_NAME);
      tblclmnSize.setText(COL_SIZE);
    }
  }
);
  tblclmnSize=new TableColumn(table,SWT.NONE);
  tblclmnSize.setWidth(100);
  tblclmnSize.setText(COL_SIZE);
  tblclmnSize.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      columnSelected(tblclmnSize,COL_SIZE,OrderBy.SIZE);
      tblclmnName.setText(COL_NAME);
      tblclmnType.setText(COL_TYPE);
    }
  }
);
}","private void initTable(SashForm sashForm_1){
  table=new Table(sashForm_1,SWT.BORDER | SWT.FULL_SELECTION);
  table.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      TableItem[] tableItems=table.getSelection();
      TreeItem[] treeItems=tree.getSelection();
      if (treeItems.length > 0) {
        for (        TreeItem treeItem : treeItems[0].getItems()) {
          String treeText=treeItem.getText();
          String tableText=tableItems[0].getText(0);
          String type=tableItems[0].getText(1);
          if (treeText.equals(tableText)) {
            if (type.equals(NodeType.DATABASE.toString()) || type.equals(NodeType.CONTAINER.toString()))             dbContainerItemSelected(treeItem,false);
 else             if (type.equals(NodeType.SERVER.toString()))             serverItemSelected(treeItem,false);
            break;
          }
        }
      }
    }
  }
);
  table.setHeaderVisible(true);
  tblclmnName=new TableColumn(table,SWT.NONE);
  tblclmnName.setWidth(100);
  tblclmnName.setText(COL_NAME);
  tblclmnName.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      columnSelected(tblclmnName,COL_NAME,OrderBy.NAME);
      tblclmnType.setText(COL_TYPE);
      tblclmnSize.setText(COL_SIZE);
    }
  }
);
  tblclmnType=new TableColumn(table,SWT.NONE);
  tblclmnType.setWidth(100);
  tblclmnType.setText(COL_TYPE);
  tblclmnType.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      columnSelected(tblclmnType,COL_TYPE,OrderBy.TYPE);
      tblclmnName.setText(COL_NAME);
      tblclmnSize.setText(COL_SIZE);
    }
  }
);
  tblclmnSize=new TableColumn(table,SWT.NONE);
  tblclmnSize.setWidth(100);
  tblclmnSize.setText(COL_SIZE);
  tblclmnSize.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      columnSelected(tblclmnSize,COL_SIZE,OrderBy.SIZE);
      tblclmnName.setText(COL_NAME);
      tblclmnType.setText(COL_TYPE);
    }
  }
);
}",0.9856773890584644
62319,"private void initMenu(){
  menu=new Menu(shlRedisClient,SWT.BAR);
  shlRedisClient.setMenuBar(menu);
  MenuItem mntmFile=new MenuItem(menu,SWT.CASCADE);
  mntmFile.setText(""String_Node_Str"");
  Menu menu_1=new Menu(mntmFile);
  mntmFile.setMenu(menu_1);
  MenuItem mntmNew=new MenuItem(menu_1,SWT.NONE);
  mntmNew.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      addServer();
    }
  }
);
  mntmNew.setText(""String_Node_Str"");
  MenuItem mntmEdit=new MenuItem(menu_1,SWT.NONE);
  mntmEdit.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      updateServer();
    }
  }
);
  mntmEdit.setText(""String_Node_Str"");
  MenuItem mntmDelete_1=new MenuItem(menu_1,SWT.NONE);
  mntmDelete_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      removeServer();
    }
  }
);
  mntmDelete_1.setText(""String_Node_Str"");
  new MenuItem(menu_1,SWT.SEPARATOR);
  MenuItem mntmProperties=new MenuItem(menu_1,SWT.NONE);
  mntmProperties.setText(""String_Node_Str"");
  MenuItem mntmExit=new MenuItem(menu_1,SWT.NONE);
  mntmExit.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      shlRedisClient.close();
    }
  }
);
  mntmExit.setText(""String_Node_Str"");
  MenuItem mntmData=new MenuItem(menu,SWT.CASCADE);
  mntmData.setText(""String_Node_Str"");
  Menu menu_4=new Menu(mntmData);
  mntmData.setMenu(menu_4);
  MenuItem mntmAdd=new MenuItem(menu_4,SWT.CASCADE);
  mntmAdd.setText(""String_Node_Str"");
  Menu menu_5=new Menu(mntmAdd);
  mntmAdd.setMenu(menu_5);
  MenuItem mntmString=new MenuItem(menu_5,SWT.NONE);
  mntmString.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newString();
    }
  }
);
  mntmString.setText(""String_Node_Str"");
  MenuItem mntmList=new MenuItem(menu_5,SWT.NONE);
  mntmList.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newList();
    }
  }
);
  mntmList.setText(""String_Node_Str"");
  MenuItem mntmSet=new MenuItem(menu_5,SWT.NONE);
  mntmSet.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newSet();
    }
  }
);
  mntmSet.setText(""String_Node_Str"");
  MenuItem mntmSortset=new MenuItem(menu_5,SWT.NONE);
  mntmSortset.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newZSet();
    }
  }
);
  mntmSortset.setText(""String_Node_Str"");
  MenuItem mntmHash=new MenuItem(menu_5,SWT.NONE);
  mntmHash.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newHash();
    }
  }
);
  mntmHash.setText(""String_Node_Str"");
  mntmRename_2=new MenuItem(menu_4,SWT.NONE);
  mntmRename_2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      renameContainer();
    }
  }
);
  mntmRename_2.setText(""String_Node_Str"");
  mntmDelete_3=new MenuItem(menu_4,SWT.NONE);
  mntmDelete_3.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem[] items=tree.getSelection();
      NodeType type=(NodeType)items[0].getData(NODE_TYPE);
      if (type == NodeType.CONTAINER)       deleteCotainer(items[0]);
 else       MessageDialog.openError(shlRedisClient,""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  mntmDelete_3.setText(""String_Node_Str"");
  new MenuItem(menu_4,SWT.SEPARATOR);
  MenuItem mntmcut=new MenuItem(menu_4,SWT.NONE);
  mntmcut.setText(""String_Node_Str"");
  MenuItem mntmCopy=new MenuItem(menu_4,SWT.NONE);
  mntmCopy.setText(""String_Node_Str"");
  MenuItem mntmPaste=new MenuItem(menu_4,SWT.NONE);
  mntmPaste.setText(""String_Node_Str"");
  new MenuItem(menu_4,SWT.SEPARATOR);
  MenuItem mntmFind=new MenuItem(menu_4,SWT.NONE);
  mntmFind.setText(""String_Node_Str"");
  MenuItem mntmReplace=new MenuItem(menu_4,SWT.NONE);
  mntmReplace.setText(""String_Node_Str"");
  new MenuItem(menu_4,SWT.SEPARATOR);
  MenuItem mntmImport=new MenuItem(menu_4,SWT.NONE);
  mntmImport.setText(""String_Node_Str"");
  MenuItem mntmExport=new MenuItem(menu_4,SWT.NONE);
  mntmExport.setText(""String_Node_Str"");
  new MenuItem(menu_4,SWT.SEPARATOR);
  MenuItem mntmRefresh_1=new MenuItem(menu_4,SWT.NONE);
  mntmRefresh_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      treeItemSelected(true);
    }
  }
);
  mntmRefresh_1.setText(""String_Node_Str"");
  MenuItem mntmFavorites=new MenuItem(menu,SWT.CASCADE);
  mntmFavorites.setText(""String_Node_Str"");
  menu_favorite=new Menu(mntmFavorites);
  mntmFavorites.setMenu(menu_favorite);
  mntmAdd_Favorite=new MenuItem(menu_favorite,SWT.NONE);
  mntmAdd_Favorite.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      addFavorite();
    }
  }
);
  mntmAdd_Favorite.setText(""String_Node_Str"");
  MenuItem mntmOrganize=new MenuItem(menu_favorite,SWT.NONE);
  mntmOrganize.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      OrganizeFavoriteDialog dialog=new OrganizeFavoriteDialog(shlRedisClient,SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);
      List<Favorite> favorites=(List<Favorite>)dialog.open();
      if (favorites != null) {
        service3.updateList(favorites);
        removeFavoriteMenuItem();
        addFavoriteMenuItem();
      }
    }
  }
);
  mntmOrganize.setText(""String_Node_Str"");
  addFavoriteMenuItem();
  MenuItem mntmTool=new MenuItem(menu,SWT.CASCADE);
  mntmTool.setText(""String_Node_Str"");
  Menu menu_6=new Menu(mntmTool);
  mntmTool.setMenu(menu_6);
  MenuItem mntmSet_2=new MenuItem(menu_6,SWT.CASCADE);
  mntmSet_2.setText(""String_Node_Str"");
  Menu menu_3=new Menu(mntmSet_2);
  mntmSet_2.setMenu(menu_3);
  MenuItem mntmDiff=new MenuItem(menu_3,SWT.NONE);
  mntmDiff.setText(""String_Node_Str"");
  MenuItem mntmInter=new MenuItem(menu_3,SWT.NONE);
  mntmInter.setText(""String_Node_Str"");
  MenuItem mntmUnion=new MenuItem(menu_3,SWT.NONE);
  mntmUnion.setText(""String_Node_Str"");
  new MenuItem(menu_6,SWT.SEPARATOR);
  MenuItem mntmPubsub=new MenuItem(menu_6,SWT.NONE);
  mntmPubsub.setText(""String_Node_Str"");
  MenuItem mntmHelp=new MenuItem(menu,SWT.CASCADE);
  mntmHelp.setText(""String_Node_Str"");
  Menu menu_2=new Menu(mntmHelp);
  mntmHelp.setMenu(menu_2);
  MenuItem mntmReportBug=new MenuItem(menu_2,SWT.NONE);
  mntmReportBug.setText(""String_Node_Str"");
  MenuItem mntmDonation=new MenuItem(menu_2,SWT.NONE);
  mntmDonation.setText(""String_Node_Str"");
  new MenuItem(menu_2,SWT.SEPARATOR);
  MenuItem mntmAbout=new MenuItem(menu_2,SWT.NONE);
  mntmAbout.setText(""String_Node_Str"");
}","private void initMenu(){
  menu=new Menu(shlRedisClient,SWT.BAR);
  shlRedisClient.setMenuBar(menu);
  MenuItem mntmFile=new MenuItem(menu,SWT.CASCADE);
  mntmFile.setText(""String_Node_Str"");
  Menu menu_1=new Menu(mntmFile);
  mntmFile.setMenu(menu_1);
  MenuItem mntmNew=new MenuItem(menu_1,SWT.NONE);
  mntmNew.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      addServer();
    }
  }
);
  mntmNew.setText(""String_Node_Str"");
  mntmEdit=new MenuItem(menu_1,SWT.NONE);
  mntmEdit.setEnabled(false);
  mntmEdit.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      updateServer();
    }
  }
);
  mntmEdit.setText(""String_Node_Str"");
  mntmDelete_1=new MenuItem(menu_1,SWT.NONE);
  mntmDelete_1.setEnabled(false);
  mntmDelete_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      removeServer();
    }
  }
);
  mntmDelete_1.setText(""String_Node_Str"");
  new MenuItem(menu_1,SWT.SEPARATOR);
  mntmProperties=new MenuItem(menu_1,SWT.NONE);
  mntmProperties.setEnabled(false);
  mntmProperties.setText(""String_Node_Str"");
  MenuItem mntmExit=new MenuItem(menu_1,SWT.NONE);
  mntmExit.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      shlRedisClient.close();
    }
  }
);
  mntmExit.setText(""String_Node_Str"");
  MenuItem mntmData=new MenuItem(menu,SWT.CASCADE);
  mntmData.setText(""String_Node_Str"");
  Menu menu_4=new Menu(mntmData);
  mntmData.setMenu(menu_4);
  mntmAdd=new MenuItem(menu_4,SWT.CASCADE);
  mntmAdd.setEnabled(false);
  mntmAdd.setText(""String_Node_Str"");
  Menu menu_5=new Menu(mntmAdd);
  mntmAdd.setMenu(menu_5);
  MenuItem mntmString=new MenuItem(menu_5,SWT.NONE);
  mntmString.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newString();
    }
  }
);
  mntmString.setText(""String_Node_Str"");
  MenuItem mntmList=new MenuItem(menu_5,SWT.NONE);
  mntmList.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newList();
    }
  }
);
  mntmList.setText(""String_Node_Str"");
  MenuItem mntmSet=new MenuItem(menu_5,SWT.NONE);
  mntmSet.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newSet();
    }
  }
);
  mntmSet.setText(""String_Node_Str"");
  MenuItem mntmSortset=new MenuItem(menu_5,SWT.NONE);
  mntmSortset.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newZSet();
    }
  }
);
  mntmSortset.setText(""String_Node_Str"");
  MenuItem mntmHash=new MenuItem(menu_5,SWT.NONE);
  mntmHash.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      newHash();
    }
  }
);
  mntmHash.setText(""String_Node_Str"");
  mntmRename_2=new MenuItem(menu_4,SWT.NONE);
  mntmRename_2.setEnabled(false);
  mntmRename_2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      renameContainer();
    }
  }
);
  mntmRename_2.setText(""String_Node_Str"");
  mntmDelete_3=new MenuItem(menu_4,SWT.NONE);
  mntmDelete_3.setEnabled(false);
  mntmDelete_3.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem[] items=tree.getSelection();
      NodeType type=(NodeType)items[0].getData(NODE_TYPE);
      if (type == NodeType.CONTAINER)       deleteCotainer(items[0]);
 else       MessageDialog.openError(shlRedisClient,""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  mntmDelete_3.setText(""String_Node_Str"");
  new MenuItem(menu_4,SWT.SEPARATOR);
  MenuItem mntmcut=new MenuItem(menu_4,SWT.NONE);
  mntmcut.setEnabled(false);
  mntmcut.setText(""String_Node_Str"");
  MenuItem mntmCopy=new MenuItem(menu_4,SWT.NONE);
  mntmCopy.setEnabled(false);
  mntmCopy.setText(""String_Node_Str"");
  MenuItem mntmPaste=new MenuItem(menu_4,SWT.NONE);
  mntmPaste.setEnabled(false);
  mntmPaste.setText(""String_Node_Str"");
  new MenuItem(menu_4,SWT.SEPARATOR);
  MenuItem mntmFind=new MenuItem(menu_4,SWT.NONE);
  mntmFind.setText(""String_Node_Str"");
  MenuItem mntmReplace=new MenuItem(menu_4,SWT.NONE);
  mntmReplace.setText(""String_Node_Str"");
  new MenuItem(menu_4,SWT.SEPARATOR);
  MenuItem mntmImport=new MenuItem(menu_4,SWT.NONE);
  mntmImport.setEnabled(false);
  mntmImport.setText(""String_Node_Str"");
  MenuItem mntmExport=new MenuItem(menu_4,SWT.NONE);
  mntmExport.setEnabled(false);
  mntmExport.setText(""String_Node_Str"");
  new MenuItem(menu_4,SWT.SEPARATOR);
  MenuItem mntmRefresh_1=new MenuItem(menu_4,SWT.NONE);
  mntmRefresh_1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      treeItemSelected(true);
    }
  }
);
  mntmRefresh_1.setText(""String_Node_Str"");
  MenuItem mntmFavorites=new MenuItem(menu,SWT.CASCADE);
  mntmFavorites.setText(""String_Node_Str"");
  menu_favorite=new Menu(mntmFavorites);
  mntmFavorites.setMenu(menu_favorite);
  mntmAdd_Favorite=new MenuItem(menu_favorite,SWT.NONE);
  mntmAdd_Favorite.setEnabled(false);
  mntmAdd_Favorite.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      addFavorite();
    }
  }
);
  mntmAdd_Favorite.setText(""String_Node_Str"");
  MenuItem mntmOrganize=new MenuItem(menu_favorite,SWT.NONE);
  mntmOrganize.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      OrganizeFavoriteDialog dialog=new OrganizeFavoriteDialog(shlRedisClient,SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);
      List<Favorite> favorites=(List<Favorite>)dialog.open();
      if (favorites != null) {
        service3.updateList(favorites);
        removeFavoriteMenuItem();
        addFavoriteMenuItem();
      }
    }
  }
);
  mntmOrganize.setText(""String_Node_Str"");
  addFavoriteMenuItem();
  MenuItem mntmTool=new MenuItem(menu,SWT.CASCADE);
  mntmTool.setText(""String_Node_Str"");
  Menu menu_6=new Menu(mntmTool);
  mntmTool.setMenu(menu_6);
  MenuItem mntmSet_2=new MenuItem(menu_6,SWT.CASCADE);
  mntmSet_2.setText(""String_Node_Str"");
  Menu menu_3=new Menu(mntmSet_2);
  mntmSet_2.setMenu(menu_3);
  MenuItem mntmDiff=new MenuItem(menu_3,SWT.NONE);
  mntmDiff.setText(""String_Node_Str"");
  MenuItem mntmInter=new MenuItem(menu_3,SWT.NONE);
  mntmInter.setText(""String_Node_Str"");
  MenuItem mntmUnion=new MenuItem(menu_3,SWT.NONE);
  mntmUnion.setText(""String_Node_Str"");
  new MenuItem(menu_6,SWT.SEPARATOR);
  MenuItem mntmPubsub=new MenuItem(menu_6,SWT.NONE);
  mntmPubsub.setText(""String_Node_Str"");
  MenuItem mntmHelp=new MenuItem(menu,SWT.CASCADE);
  mntmHelp.setText(""String_Node_Str"");
  Menu menu_2=new Menu(mntmHelp);
  mntmHelp.setMenu(menu_2);
  MenuItem mntmReportBug=new MenuItem(menu_2,SWT.NONE);
  mntmReportBug.setText(""String_Node_Str"");
  MenuItem mntmDonation=new MenuItem(menu_2,SWT.NONE);
  mntmDonation.setText(""String_Node_Str"");
  new MenuItem(menu_2,SWT.SEPARATOR);
  MenuItem mntmAbout=new MenuItem(menu_2,SWT.NONE);
  mntmAbout.setText(""String_Node_Str"");
}",0.9702151517275212
62320,"private void serverItemSelected(TreeItem selectedItem,boolean refresh){
  tree.setSelection(selectedItem);
  text.setText(selectedItem.getText() + ""String_Node_Str"");
  table.removeAll();
  mntmAdd_Favorite.setEnabled(false);
  if (refresh)   selectedItem.setData(ITEM_OPENED,false);
  if (selectedItem.getData(ITEM_OPENED) == null || ((Boolean)(selectedItem.getData(ITEM_OPENED)) == false)) {
    selectedItem.removeAll();
    addDBTreeItem((Integer)selectedItem.getData(NODE_ID),selectedItem);
  }
  int dbs=service1.listDBs((Integer)selectedItem.getData(NODE_ID));
  for (int i=0; i < dbs; i++) {
    TableItem item=new TableItem(table,SWT.NONE);
    item.setText(new String[]{DB_PREFIX + i,NodeType.DATABASE.toString()});
    item.setData(NODE_ID,i);
    item.setImage(dbImage);
  }
}","private void serverItemSelected(TreeItem selectedItem,boolean refresh){
  tree.setSelection(selectedItem);
  text.setText(selectedItem.getText() + ""String_Node_Str"");
  table.removeAll();
  mntmEdit.setEnabled(true);
  mntmDelete_1.setEnabled(true);
  mntmProperties.setEnabled(true);
  mntmAdd.setEnabled(false);
  mntmRename_2.setEnabled(false);
  mntmDelete_3.setEnabled(false);
  mntmAdd_Favorite.setEnabled(false);
  if (refresh)   selectedItem.setData(ITEM_OPENED,false);
  if (selectedItem.getData(ITEM_OPENED) == null || ((Boolean)(selectedItem.getData(ITEM_OPENED)) == false)) {
    selectedItem.removeAll();
    addDBTreeItem((Integer)selectedItem.getData(NODE_ID),selectedItem);
  }
  int dbs=service1.listDBs((Integer)selectedItem.getData(NODE_ID));
  for (int i=0; i < dbs; i++) {
    TableItem item=new TableItem(table,SWT.NONE);
    item.setText(new String[]{DB_PREFIX + i,NodeType.DATABASE.toString()});
    item.setData(NODE_ID,i);
    item.setImage(dbImage);
  }
}",0.8903954802259887
62321,"private void rootItemSelected(boolean refresh){
  tree.setSelection(rootRedisServers);
  text.setText(""String_Node_Str"");
  table.removeAll();
  mntmAdd_Favorite.setEnabled(false);
  if (refresh)   rootRedisServers.setData(ITEM_OPENED,false);
  if (rootRedisServers.getData(ITEM_OPENED) == null || ((Boolean)(rootRedisServers.getData(ITEM_OPENED)) == false)) {
    rootRedisServers.removeAll();
    initServers();
  }
  java.util.List<Server> servers=service1.listAll();
  for (  Server server : servers) {
    TableItem item=new TableItem(table,SWT.NONE);
    item.setText(new String[]{server.getName(),NodeType.SERVER.toString()});
    item.setImage(redisImage);
  }
}","private void rootItemSelected(boolean refresh){
  tree.setSelection(rootRedisServers);
  text.setText(""String_Node_Str"");
  table.removeAll();
  mntmEdit.setEnabled(false);
  mntmDelete_1.setEnabled(false);
  mntmProperties.setEnabled(false);
  mntmAdd.setEnabled(false);
  mntmRename_2.setEnabled(false);
  mntmDelete_3.setEnabled(false);
  mntmAdd_Favorite.setEnabled(false);
  if (refresh)   rootRedisServers.setData(ITEM_OPENED,false);
  if (rootRedisServers.getData(ITEM_OPENED) == null || ((Boolean)(rootRedisServers.getData(ITEM_OPENED)) == false)) {
    rootRedisServers.removeAll();
    initServers();
  }
  java.util.List<Server> servers=service1.listAll();
  for (  Server server : servers) {
    TableItem item=new TableItem(table,SWT.NONE);
    item.setText(new String[]{server.getName(),NodeType.SERVER.toString()});
    item.setImage(redisImage);
  }
}",0.8718282368249838
62322,"private void dbContainerItemSelected(TreeItem itemSelected,boolean refresh){
  tree.setSelection(itemSelected);
  ContainerInfo info=new ContainerInfo();
  parseContainer(itemSelected,info);
  String container=(info.getContainer() == null) ? ""String_Node_Str"" : info.getContainer();
  text.setText(info.getServerName() + ""String_Node_Str"" + DB_PREFIX+ info.getDb()+ ""String_Node_Str""+ container);
  mntmAdd_Favorite.setEnabled(true);
  Set<Node> cnodes=service2.listContainers(info.getId(),info.getDb(),info.getContainer());
  if (refresh)   itemSelected.setData(ITEM_OPENED,false);
  if (itemSelected.getData(ITEM_OPENED) == null || ((Boolean)(itemSelected.getData(ITEM_OPENED)) == false)) {
    itemSelected.removeAll();
    for (    Node node : cnodes) {
      TreeItem item=new TreeItem(itemSelected,SWT.NONE);
      item.setText(node.getKey());
      item.setData(NODE_TYPE,node.getType());
      item.setImage(containerImage);
    }
    itemSelected.setExpanded(true);
    itemSelected.setData(ITEM_OPENED,true);
  }
  tableItemOrderSelected(info,Order.Ascend,OrderBy.NAME);
  tblclmnName.setText(COL_NAME);
  tblclmnType.setText(COL_TYPE);
  tblclmnSize.setText(COL_SIZE);
}","private void dbContainerItemSelected(TreeItem itemSelected,boolean refresh){
  tree.setSelection(itemSelected);
  ContainerInfo info=new ContainerInfo();
  parseContainer(itemSelected,info);
  String container=(info.getContainer() == null) ? ""String_Node_Str"" : info.getContainer();
  text.setText(info.getServerName() + ""String_Node_Str"" + DB_PREFIX+ info.getDb()+ ""String_Node_Str""+ container);
  mntmEdit.setEnabled(false);
  mntmDelete_1.setEnabled(false);
  mntmProperties.setEnabled(false);
  TreeItem[] items=tree.getSelection();
  NodeType type=(NodeType)items[0].getData(NODE_TYPE);
  mntmAdd.setEnabled(true);
  if (type == NodeType.CONTAINER) {
    mntmRename_2.setEnabled(true);
    mntmDelete_3.setEnabled(true);
  }
 else {
    mntmRename_2.setEnabled(false);
    mntmDelete_3.setEnabled(false);
  }
  mntmAdd_Favorite.setEnabled(true);
  Set<Node> cnodes=service2.listContainers(info.getId(),info.getDb(),info.getContainer());
  if (refresh)   itemSelected.setData(ITEM_OPENED,false);
  if (itemSelected.getData(ITEM_OPENED) == null || ((Boolean)(itemSelected.getData(ITEM_OPENED)) == false)) {
    itemSelected.removeAll();
    for (    Node node : cnodes) {
      TreeItem item=new TreeItem(itemSelected,SWT.NONE);
      item.setText(node.getKey());
      item.setData(NODE_TYPE,node.getType());
      item.setImage(containerImage);
    }
    itemSelected.setExpanded(true);
    itemSelected.setData(ITEM_OPENED,true);
  }
  tableItemOrderSelected(info,Order.Ascend,OrderBy.NAME);
  tblclmnName.setText(COL_NAME);
  tblclmnType.setText(COL_TYPE);
  tblclmnSize.setText(COL_SIZE);
}",0.8499460237495502
62323,"/** 
 * Create contents of the dialog.
 */
private void createContents(){
  shell=new Shell(getParent(),getStyle());
  shell.setSize(326,201);
  shell.setText(""String_Node_Str"");
  Rectangle screenSize=shell.getParent().getBounds();
  Rectangle shellSize=shell.getBounds();
  shell.setLocation(screenSize.x + screenSize.width / 2 - shellSize.width / 2,screenSize.y + screenSize.height / 2 - shellSize.height / 2);
  TabFolder tabFolder=new TabFolder(shell,SWT.NONE);
  tabFolder.setBounds(10,10,300,121);
  TabItem tbtmString=new TabItem(tabFolder,SWT.NONE);
  tbtmString.setText(""String_Node_Str"");
  Composite composite=new Composite(tabFolder,SWT.NONE);
  tbtmString.setControl(composite);
  Label lblKey=new Label(composite,SWT.NONE);
  lblKey.setText(""String_Node_Str"");
  lblKey.setBounds(10,13,45,13);
  Label lblNewKey=new Label(composite,SWT.NONE);
  lblNewKey.setText(""String_Node_Str"");
  lblNewKey.setBounds(10,44,45,13);
  text_2=new Text(composite,SWT.BORDER);
  text_2.setBounds(62,41,220,19);
  text_2.setText(oldContainer);
  text_2.selectAll();
  text_2.setFocus();
  Label label_1=new Label(composite,SWT.NONE);
  label_1.setBounds(61,13,89,13);
  label_1.setText(server);
  Label lblDatabase=new Label(composite,SWT.NONE);
  lblDatabase.setText(""String_Node_Str"");
  lblDatabase.setBounds(156,13,45,13);
  Label label_3=new Label(composite,SWT.NONE);
  label_3.setBounds(223,13,45,13);
  label_3.setText(String.valueOf(db));
  final Button btnCheckButton=new Button(composite,SWT.CHECK);
  btnCheckButton.setSelection(true);
  btnCheckButton.setBounds(10,69,272,16);
  btnCheckButton.setText(""String_Node_Str"");
  Button button=new Button(shell,SWT.NONE);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      String newContainer=text_2.getText();
      boolean overwritten=btnCheckButton.getSelection();
      if (newContainer.length() == 0) {
        MessageDialog.openError(shell,""String_Node_Str"",""String_Node_Str"");
      }
 else {
        result=new RenameInfo(newContainer,overwritten);
        shell.dispose();
      }
    }
  }
);
  button.setText(""String_Node_Str"");
  button.setBounds(61,144,68,23);
  Button button_1=new Button(shell,SWT.NONE);
  button_1.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      shell.dispose();
    }
  }
);
  button_1.setText(""String_Node_Str"");
  button_1.setBounds(188,144,68,23);
}","/** 
 * Create contents of the dialog.
 */
private void createContents(){
  shell=new Shell(getParent(),getStyle());
  shell.setSize(326,201);
  shell.setText(""String_Node_Str"");
  Rectangle screenSize=shell.getParent().getBounds();
  Rectangle shellSize=shell.getBounds();
  shell.setLocation(screenSize.x + screenSize.width / 2 - shellSize.width / 2,screenSize.y + screenSize.height / 2 - shellSize.height / 2);
  TabFolder tabFolder=new TabFolder(shell,SWT.NONE);
  tabFolder.setBounds(10,10,300,121);
  TabItem tbtmString=new TabItem(tabFolder,SWT.NONE);
  tbtmString.setText(""String_Node_Str"");
  Composite composite=new Composite(tabFolder,SWT.NONE);
  tbtmString.setControl(composite);
  Label lblKey=new Label(composite,SWT.NONE);
  lblKey.setText(""String_Node_Str"");
  lblKey.setBounds(10,13,45,13);
  Label lblNewKey=new Label(composite,SWT.NONE);
  lblNewKey.setText(""String_Node_Str"");
  lblNewKey.setBounds(10,44,45,13);
  text_2=new Text(composite,SWT.BORDER);
  text_2.setBounds(62,41,220,19);
  text_2.setText(oldContainer);
  text_2.selectAll();
  text_2.setFocus();
  text_2.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String newContainer=text_2.getText() == null ? ""String_Node_Str"" : text_2.getText();
      if (newContainer.equals(oldContainer))       button.setEnabled(false);
 else       button.setEnabled(true);
    }
  }
);
  Label label_1=new Label(composite,SWT.NONE);
  label_1.setBounds(61,13,89,13);
  label_1.setText(server);
  Label lblDatabase=new Label(composite,SWT.NONE);
  lblDatabase.setText(""String_Node_Str"");
  lblDatabase.setBounds(156,13,45,13);
  Label label_3=new Label(composite,SWT.NONE);
  label_3.setBounds(223,13,45,13);
  label_3.setText(String.valueOf(db));
  final Button btnCheckButton=new Button(composite,SWT.CHECK);
  btnCheckButton.setSelection(true);
  btnCheckButton.setBounds(10,69,272,16);
  btnCheckButton.setText(""String_Node_Str"");
  button=new Button(shell,SWT.NONE);
  button.setEnabled(false);
  button.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      String newContainer=text_2.getText();
      boolean overwritten=btnCheckButton.getSelection();
      if (newContainer.length() == 0) {
        MessageDialog.openError(shell,""String_Node_Str"",""String_Node_Str"");
      }
 else {
        result=new RenameInfo(newContainer,overwritten);
        shell.dispose();
      }
    }
  }
);
  button.setText(""String_Node_Str"");
  button.setBounds(61,144,68,23);
  Button button_1=new Button(shell,SWT.NONE);
  button_1.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      shell.dispose();
    }
  }
);
  button_1.setText(""String_Node_Str"");
  button_1.setBounds(188,144,68,23);
}",0.9289135849779652
62324,"/** 
 * Create the dialog.
 * @param parent
 * @param style
 */
public RenameKeysDialog(Shell parent,int style,String server,int db,String oldContainer){
  super(parent,style);
  setText(""String_Node_Str"");
  this.server=server;
  this.db=db;
  this.oldContainer=oldContainer;
}","/** 
 * Create the dialog.
 * @param parent
 * @param style
 */
public RenameKeysDialog(Shell parent,int style,String server,int db,String oldContainer){
  super(parent,style);
  setText(""String_Node_Str"");
  this.server=server;
  this.db=db;
  this.oldContainer=oldContainer == null ? ""String_Node_Str"" : oldContainer;
}",0.9282136894824708
62325,"@Override public void widgetSelected(SelectionEvent e){
  Favorite favorite=(Favorite)menuItem.getData(FAVORITE);
  int sid=favorite.getServerID();
  TreeItem[] treeItems=tree.getItems();
  for (  TreeItem treeItem : treeItems) {
    int serverId=(Integer)treeItem.getData(NODE_ID);
    if (serverId == sid) {
      serverItemSelected(treeItem);
      String[] containers=favorite.getFavorite().split(""String_Node_Str"");
      TreeItem[] dbItems=treeItem.getItems();
      for (      TreeItem dbItem : dbItems) {
        if (dbItem.getText().equals(containers[1])) {
          tree.setSelection(dbItem);
          treeItemSelected(dbItem);
          TreeItem[] dataItems=dbItem.getItems();
          for (int i=2; i < containers.length; i++) {
            for (            TreeItem dataItem : dataItems) {
              if (dataItem.getText().equals(containers[i])) {
                tree.setSelection(dataItem);
                treeItemSelected(dataItem);
                dataItems=dataItem.getItems();
                break;
              }
            }
          }
        }
      }
    }
  }
}","@Override public void widgetSelected(SelectionEvent e){
  Favorite favorite=(Favorite)menuItem.getData(FAVORITE);
  int sid=favorite.getServerID();
  rootItemSelected();
  TreeItem[] treeItems=rootRedisServers.getItems();
  for (  TreeItem treeItem : treeItems) {
    int serverId=(Integer)treeItem.getData(NODE_ID);
    if (serverId == sid) {
      serverItemSelected(treeItem);
      String[] containers=favorite.getFavorite().split(""String_Node_Str"");
      TreeItem[] dbItems=treeItem.getItems();
      for (      TreeItem dbItem : dbItems) {
        if (dbItem.getText().equals(containers[1])) {
          tree.setSelection(dbItem);
          treeItemSelected(dbItem);
          TreeItem[] dataItems=dbItem.getItems();
          for (int i=2; i < containers.length; i++) {
            for (            TreeItem dataItem : dataItems) {
              if (dataItem.getText().equals(containers[i])) {
                tree.setSelection(dataItem);
                treeItemSelected(dataItem);
                dataItems=dataItem.getItems();
                break;
              }
            }
          }
        }
      }
    }
  }
}",0.9811659192825112
62326,"private void initSash(){
  SashForm sashForm_2=new SashForm(shlRedisClient,SWT.SMOOTH | SWT.VERTICAL);
  sashForm_2.setSashWidth(0);
  text=new Text(sashForm_2,SWT.BORDER | SWT.SEARCH);
  text.setEditable(false);
  SashForm sashForm=new SashForm(sashForm_2,SWT.NONE);
  tree=new Tree(sashForm,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
  rootRedisServers=new TreeItem(tree,SWT.NONE);
  rootRedisServers.setText(""String_Node_Str"");
  rootRedisServers.setData(NODE_TYPE,NodeType.ROOT);
  initMenuDB();
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem[] items=tree.getSelection();
      NodeType type=(NodeType)items[0].getData(NODE_TYPE);
switch (type) {
case ROOT:
        rootItemSelected();
      break;
case SERVER:
    serverItemSelected(items[0]);
  break;
case DATABASE:
case CONTAINER:
treeItemSelected(items[0]);
break;
default :
break;
}
}
}
);
SashForm sashForm_1=new SashForm(sashForm,SWT.VERTICAL);
initTable(sashForm_1);
sashForm_1.setWeights(new int[]{1});
sashForm.setWeights(new int[]{1,3});
sashForm_2.setWeights(new int[]{22,368});
initMenuNull();
initMenuServer();
initServers();
}","private void initSash(){
  SashForm sashForm_2=new SashForm(shlRedisClient,SWT.SMOOTH | SWT.VERTICAL);
  sashForm_2.setSashWidth(0);
  text=new Text(sashForm_2,SWT.BORDER | SWT.SEARCH);
  text.setEditable(false);
  SashForm sashForm=new SashForm(sashForm_2,SWT.NONE);
  tree=new Tree(sashForm,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
  rootRedisServers=new TreeItem(tree,SWT.NONE);
  rootRedisServers.setText(""String_Node_Str"");
  rootRedisServers.setData(NODE_TYPE,NodeType.ROOT);
  rootRedisServers.setExpanded(true);
  rootRedisServers.setData(ITEM_OPENED,true);
  initMenuDB();
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem[] items=tree.getSelection();
      NodeType type=(NodeType)items[0].getData(NODE_TYPE);
switch (type) {
case ROOT:
        rootItemSelected();
      break;
case SERVER:
    serverItemSelected(items[0]);
  break;
case DATABASE:
case CONTAINER:
treeItemSelected(items[0]);
break;
default :
break;
}
}
}
);
SashForm sashForm_1=new SashForm(sashForm,SWT.VERTICAL);
initTable(sashForm_1);
sashForm_1.setWeights(new int[]{1});
sashForm.setWeights(new int[]{1,3});
sashForm_2.setWeights(new int[]{22,368});
initMenuNull();
initMenuServer();
initServers();
}",0.965658217497956
62327,"private void addFavoriteMenuItem(){
  List<Favorite> favorites=service3.listAll();
  if (favorites.size() > 0) {
    new MenuItem(menu_favorite,SWT.SEPARATOR);
    for (    Favorite favorite : favorites) {
      final MenuItem menuItem=new MenuItem(menu_favorite,SWT.NONE);
      menuItem.setText(favorite.getName());
      menuItem.setData(FAVORITE,favorite);
      menuItem.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          Favorite favorite=(Favorite)menuItem.getData(FAVORITE);
          int sid=favorite.getServerID();
          TreeItem[] treeItems=tree.getItems();
          for (          TreeItem treeItem : treeItems) {
            int serverId=(Integer)treeItem.getData(NODE_ID);
            if (serverId == sid) {
              serverItemSelected(treeItem);
              String[] containers=favorite.getFavorite().split(""String_Node_Str"");
              TreeItem[] dbItems=treeItem.getItems();
              for (              TreeItem dbItem : dbItems) {
                if (dbItem.getText().equals(containers[1])) {
                  tree.setSelection(dbItem);
                  treeItemSelected(dbItem);
                  TreeItem[] dataItems=dbItem.getItems();
                  for (int i=2; i < containers.length; i++) {
                    for (                    TreeItem dataItem : dataItems) {
                      if (dataItem.getText().equals(containers[i])) {
                        tree.setSelection(dataItem);
                        treeItemSelected(dataItem);
                        dataItems=dataItem.getItems();
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
);
    }
  }
}","private void addFavoriteMenuItem(){
  List<Favorite> favorites=service3.listAll();
  if (favorites.size() > 0) {
    new MenuItem(menu_favorite,SWT.SEPARATOR);
    for (    Favorite favorite : favorites) {
      final MenuItem menuItem=new MenuItem(menu_favorite,SWT.NONE);
      menuItem.setText(favorite.getName());
      menuItem.setData(FAVORITE,favorite);
      menuItem.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          Favorite favorite=(Favorite)menuItem.getData(FAVORITE);
          int sid=favorite.getServerID();
          rootItemSelected();
          TreeItem[] treeItems=rootRedisServers.getItems();
          for (          TreeItem treeItem : treeItems) {
            int serverId=(Integer)treeItem.getData(NODE_ID);
            if (serverId == sid) {
              serverItemSelected(treeItem);
              String[] containers=favorite.getFavorite().split(""String_Node_Str"");
              TreeItem[] dbItems=treeItem.getItems();
              for (              TreeItem dbItem : dbItems) {
                if (dbItem.getText().equals(containers[1])) {
                  tree.setSelection(dbItem);
                  treeItemSelected(dbItem);
                  TreeItem[] dataItems=dbItem.getItems();
                  for (int i=2; i < containers.length; i++) {
                    for (                    TreeItem dataItem : dataItems) {
                      if (dataItem.getText().equals(containers[i])) {
                        tree.setSelection(dataItem);
                        treeItemSelected(dataItem);
                        dataItems=dataItem.getItems();
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
);
    }
  }
}",0.9863760217983653
62328,"private void initSash() throws IOException {
  SashForm sashForm_2=new SashForm(shlRedisClient,SWT.SMOOTH | SWT.VERTICAL);
  sashForm_2.setSashWidth(0);
  text=new Text(sashForm_2,SWT.BORDER | SWT.SEARCH);
  text.setEditable(false);
  SashForm sashForm=new SashForm(sashForm_2,SWT.NONE);
  tree=new Tree(sashForm,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
  initMenuDB();
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem[] items=tree.getSelection();
      NodeType type=(NodeType)items[0].getData(NODE_TYPE);
switch (type) {
case SERVER:
        table.removeAll();
      try {
        int dbs=service1.listDBs((Integer)items[0].getData(NODE_ID));
        for (int i=0; i < dbs; i++) {
          TableItem item=new TableItem(table,SWT.NONE);
          item.setText(new String[]{DB_PREFIX + i,NodeType.DATABASE.toString()});
          item.setData(NODE_ID,i);
        }
      }
 catch (      IOException e1) {
        MessageDialog.openError(shlRedisClient,""String_Node_Str"",e1.getMessage());
      }
    break;
case DATABASE:
case CONTAINER:
  table.removeAll();
items[0].removeAll();
ContainerInfo info=new ContainerInfo();
parseContainer(items[0],info);
Set<Node> cnodes=service2.listContainers(info.getId(),info.getDb(),info.getContainer());
for (Node node : cnodes) {
TreeItem item=new TreeItem(items[0],SWT.NONE);
item.setText(node.getKey());
item.setData(NODE_TYPE,node.getType());
item.setExpanded(true);
}
for (Node node : cnodes) {
TableItem item=new TableItem(table,SWT.NONE);
item.setText(new String[]{node.getKey(),node.getType().toString()});
}
Set<Node> knodes=service2.listContainerKeys(info.getId(),info.getDb(),info.getContainer());
for (Node node : knodes) {
TableItem item=new TableItem(table,SWT.NONE);
item.setText(new String[]{node.getKey(),node.getType().toString()});
}
break;
default :
break;
}
}
}
);
SashForm sashForm_1=new SashForm(sashForm,SWT.VERTICAL);
initTable(sashForm_1);
TabFolder tabFolder=new TabFolder(sashForm_1,SWT.NONE);
sashForm_1.setWeights(new int[]{1,1});
sashForm.setWeights(new int[]{1,3});
sashForm_2.setWeights(new int[]{22,368});
initMenuNull();
initMenuServer();
initServers();
}","private void initSash() throws IOException {
  SashForm sashForm_2=new SashForm(shlRedisClient,SWT.SMOOTH | SWT.VERTICAL);
  sashForm_2.setSashWidth(0);
  text=new Text(sashForm_2,SWT.BORDER | SWT.SEARCH);
  text.setEditable(false);
  SashForm sashForm=new SashForm(sashForm_2,SWT.NONE);
  tree=new Tree(sashForm,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
  initMenuDB();
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem[] items=tree.getSelection();
      NodeType type=(NodeType)items[0].getData(NODE_TYPE);
switch (type) {
case SERVER:
        text.setText(items[0].getText() + ""String_Node_Str"");
      table.removeAll();
    try {
      int dbs=service1.listDBs((Integer)items[0].getData(NODE_ID));
      for (int i=0; i < dbs; i++) {
        TableItem item=new TableItem(table,SWT.NONE);
        item.setText(new String[]{DB_PREFIX + i,NodeType.DATABASE.toString()});
        item.setData(NODE_ID,i);
      }
    }
 catch (    IOException e1) {
      MessageDialog.openError(shlRedisClient,""String_Node_Str"",e1.getMessage());
    }
  break;
case DATABASE:
case CONTAINER:
ContainerInfo info=new ContainerInfo();
parseContainer(items[0],info);
String container=(info.getContainer() == null) ? ""String_Node_Str"" : info.getContainer();
text.setText(info.getServerName() + ""String_Node_Str"" + DB_PREFIX+ info.getDb()+ ""String_Node_Str""+ container);
table.removeAll();
Set<Node> cnodes=service2.listContainers(info.getId(),info.getDb(),info.getContainer());
if (items[0].getData(ITEM_OPENED) == null) {
items[0].removeAll();
for (Node node : cnodes) {
TreeItem item=new TreeItem(items[0],SWT.NONE);
item.setText(node.getKey());
item.setData(NODE_TYPE,node.getType());
item.setExpanded(true);
}
items[0].setData(ITEM_OPENED,true);
}
for (Node node : cnodes) {
TableItem item=new TableItem(table,SWT.NONE);
item.setText(new String[]{node.getKey(),node.getType().toString()});
}
Set<Node> knodes=service2.listContainerKeys(info.getId(),info.getDb(),info.getContainer());
for (Node node1 : knodes) {
TableItem item=new TableItem(table,SWT.NONE);
item.setText(new String[]{node1.getKey(),node1.getType().toString()});
}
break;
default :
break;
}
}
}
);
SashForm sashForm_1=new SashForm(sashForm,SWT.VERTICAL);
initTable(sashForm_1);
TabFolder tabFolder=new TabFolder(sashForm_1,SWT.NONE);
sashForm_1.setWeights(new int[]{1,1});
sashForm.setWeights(new int[]{1,3});
sashForm_2.setWeights(new int[]{22,368});
initMenuNull();
initMenuServer();
initServers();
}",0.8558786346396966
62329,"private void parseContainer(TreeItem item,ContainerInfo info){
  TreeItem parent=item.getParentItem();
  if (item.getData(NODE_TYPE) == NodeType.CONTAINER) {
    String container=item.getText();
    if (info.getContainer() != null)     info.setContainer(container + ""String_Node_Str"" + info.getContainer());
 else     info.setContainer(container + ""String_Node_Str"");
    parseContainer(parent,info);
  }
 else   if (item.getData(NODE_TYPE) == NodeType.DATABASE) {
    int db=(Integer)item.getData(NODE_ID);
    info.setDb(db);
    parseContainer(parent,info);
  }
 else   if (item.getData(NODE_TYPE) == NodeType.SERVER) {
    int id=(Integer)item.getData(NODE_ID);
    info.setId(id);
    return;
  }
}","private void parseContainer(TreeItem item,ContainerInfo info){
  TreeItem parent=item.getParentItem();
  if (item.getData(NODE_TYPE) == NodeType.CONTAINER) {
    String container=item.getText();
    if (info.getContainer() != null)     info.setContainer(container + ""String_Node_Str"" + info.getContainer());
 else     info.setContainer(container + ""String_Node_Str"");
    parseContainer(parent,info);
  }
 else   if (item.getData(NODE_TYPE) == NodeType.DATABASE) {
    int db=(Integer)item.getData(NODE_ID);
    info.setDb(db);
    parseContainer(parent,info);
  }
 else   if (item.getData(NODE_TYPE) == NodeType.SERVER) {
    int id=(Integer)item.getData(NODE_ID);
    info.setId(id);
    info.setServerName(item.getText());
    return;
  }
}",0.9723374827109268
62330,"private void initTable(SashForm sashForm_1){
  table=new Table(sashForm_1,SWT.BORDER | SWT.FULL_SELECTION);
  table.setHeaderVisible(true);
  TableColumn tblclmnName=new TableColumn(table,SWT.NONE);
  tblclmnName.setWidth(100);
  tblclmnName.setText(""String_Node_Str"");
  TableColumn tblclmnType=new TableColumn(table,SWT.NONE);
  tblclmnType.setWidth(100);
  tblclmnType.setText(""String_Node_Str"");
  TableColumn tblclmnSize=new TableColumn(table,SWT.NONE);
  tblclmnSize.setWidth(100);
  tblclmnSize.setText(""String_Node_Str"");
}","private void initTable(SashForm sashForm_1){
  table=new Table(sashForm_1,SWT.BORDER | SWT.FULL_SELECTION);
  table.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
    }
  }
);
  table.setHeaderVisible(true);
  TableColumn tblclmnName=new TableColumn(table,SWT.NONE);
  tblclmnName.setWidth(100);
  tblclmnName.setText(""String_Node_Str"");
  TableColumn tblclmnType=new TableColumn(table,SWT.NONE);
  tblclmnType.setWidth(100);
  tblclmnType.setText(""String_Node_Str"");
  TableColumn tblclmnSize=new TableColumn(table,SWT.NONE);
  tblclmnSize.setWidth(100);
  tblclmnSize.setText(""String_Node_Str"");
}",0.8984771573604061
62331,"@Override public void convert(boolean askPath,Consumer<String>... nextStep){
  final Path currentTabPath=current.currentPath().get();
  final Path currentTabPathDir=currentTabPath.getParent();
  final Path configPath=asciiDocController.getConfigPath();
  final String tabText=current.getCurrentTabText().replace(""String_Node_Str"",""String_Node_Str"").trim();
  threadService.runActionLater(() -> {
    final Path pdfPath=directoryService.getSaveOutputPath(ExtensionFilters.PDF,askPath);
    docBookConverter.convert(false,docbook -> {
      indikatorService.startProgressBar();
      logger.debug(""String_Node_Str"");
      final Path docbookTempfile=IOHelper.createTempFile(currentTabPathDir,""String_Node_Str"");
      IOHelper.writeToFile(docbookTempfile,docbook,CREATE,WRITE,TRUNCATE_EXISTING);
      try (OutputStream outputStream=new BufferedOutputStream(new FileOutputStream(pdfPath.toFile()))){
        TransformerFactory factory=TransformerFactory.newInstance();
        Transformer transformer=factory.newTransformer(new StreamSource(configPath.resolve(""String_Node_Str"").toFile()));
        transformer.setParameter(""String_Node_Str"",configPath.resolve(""String_Node_Str"").toUri().toASCIIString());
        transformer.setParameter(""String_Node_Str"",configPath.resolve(""String_Node_Str"").toUri().toASCIIString());
        transformer.setParameter(""String_Node_Str"",configPath.resolve(""String_Node_Str"").toUri().toASCIIString());
        try (BufferedInputStream configStream=new BufferedInputStream(new FileInputStream(configPath.resolve(""String_Node_Str"").toFile()))){
          FopFactory fopFactory=FopFactory.newInstance(docbookTempfile.getParent().toUri(),configStream);
          FOUserAgent foUserAgent=fopFactory.newFOUserAgent();
          Fop fop=fopFactory.newFop(MimeConstants.MIME_PDF,foUserAgent,outputStream);
          try (BufferedInputStream inputStream=new BufferedInputStream(new FileInputStream(docbookTempfile.toFile()))){
            Source src=new StreamSource(inputStream);
            Result res=new SAXResult(fop.getDefaultHandler());
            transformer.transform(src,res);
            Files.deleteIfExists(docbookTempfile);
            FormattingResults foResults=fop.getResults();
            logger.info(""String_Node_Str"",foResults.getPageCount());
          }
         }
       }
 catch (      Exception e) {
        logger.error(""String_Node_Str"",e);
      }
 finally {
        indikatorService.stopProgressBar();
        logger.debug(""String_Node_Str"");
        asciiDocController.addRemoveRecentList(pdfPath);
      }
    }
);
  }
);
}","@Override public void convert(boolean askPath,Consumer<String>... nextStep){
  final Path currentTabPath=current.currentPath().get();
  final Path currentTabPathDir=currentTabPath.getParent();
  final Path configPath=asciiDocController.getConfigPath();
  threadService.runActionLater(() -> {
    final Path pdfPath=directoryService.getSaveOutputPath(ExtensionFilters.PDF,askPath);
    docBookConverter.convert(false,docbook -> {
      indikatorService.startProgressBar();
      logger.debug(""String_Node_Str"");
      final Path docbookTempfile=IOHelper.createTempFile(currentTabPathDir,""String_Node_Str"");
      IOHelper.writeToFile(docbookTempfile,docbook,CREATE,WRITE,TRUNCATE_EXISTING);
      try (OutputStream outputStream=new BufferedOutputStream(new FileOutputStream(pdfPath.toFile()))){
        TransformerFactory factory=TransformerFactory.newInstance();
        Transformer transformer=factory.newTransformer(new StreamSource(configPath.resolve(""String_Node_Str"").toFile()));
        transformer.setParameter(""String_Node_Str"",configPath.resolve(""String_Node_Str"").toUri().toASCIIString());
        transformer.setParameter(""String_Node_Str"",configPath.resolve(""String_Node_Str"").toUri().toASCIIString());
        transformer.setParameter(""String_Node_Str"",configPath.resolve(""String_Node_Str"").toUri().toASCIIString());
        if (Objects.isNull(fopFactory)) {
          fopFactory=FopFactory.newInstance(configPath.resolve(""String_Node_Str"").toFile());
        }
        Fop fop=fopFactory.newFop(MimeConstants.MIME_PDF,outputStream);
        Source src=new StreamSource(docbookTempfile.toFile());
        Result res=new SAXResult(fop.getDefaultHandler());
        transformer.transform(src,res);
        Files.deleteIfExists(docbookTempfile);
        FormattingResults foResults=fop.getResults();
        logger.info(""String_Node_Str"",foResults.getPageCount());
      }
 catch (      Exception e) {
        logger.error(""String_Node_Str"",e);
      }
 finally {
        indikatorService.stopProgressBar();
        logger.debug(""String_Node_Str"");
        asciiDocController.addRemoveRecentList(pdfPath);
      }
    }
);
  }
);
}",0.85
62332,"public void addPathToTree(Path path,final TreeItem<Item> treeItem){
  threadService.runTaskLater((() -> {
    if (Objects.isNull(path) || Objects.isNull(treeItem)) {
      return;
    }
    if (!Files.isDirectory(path)) {
      return;
    }
    if (!Files.exists(path)) {
      return;
    }
    if (treeItem == treeView.getRoot()) {
      pathItemMap.clear();
      directoryItemMap.clear();
      fileWatchService.reCreateWatchService();
    }
    directoryItemMap.put(path,treeItem);
    pathItemMap.put(path,treeItem);
    try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(path)){
      List<TreeItem<Item>> subItemList=StreamSupport.stream(directoryStream.spliterator(),false).sorted(pathOrder::comparePaths).map(p -> {
        TreeItem<Item> childItem=new PathItem(new Item(p),awesomeService.getIcon(p));
        if (Files.isDirectory(p)) {
          if (!IOHelper.isEmptyDir(p)) {
            childItem.getChildren().add(new PathItem(new Item(null,""String_Node_Str"")));
          }
          childItem.setExpanded(false);
          childItem.expandedProperty().addListener((observable,oldValue,newValue) -> {
            if (newValue) {
              addPathToTree(childItem.getValue().getPath(),childItem);
            }
          }
);
        }
        pathItemMap.put(p,childItem);
        return childItem;
      }
).collect(Collectors.toList());
      threadService.runActionLater(() -> {
        saveTreeSelectionState();
        treeItem.getChildren().clear();
        treeView.getSelectionModel().clearSelection();
        treeItem.getChildren().addAll(subItemList);
        restoreTreeSelectionState();
        restoreTreeScrollState();
        treeView.requestFocus();
        fileWatchService.registerPathWatcher(path);
      }
);
    }
 catch (    Exception e) {
      logger.warn(""String_Node_Str"",e);
    }
  }
));
}","public void addPathToTree(Path path,final TreeItem<Item> treeItem){
  threadService.runTaskLater((() -> {
    if (Objects.isNull(path) || Objects.isNull(treeItem)) {
      return;
    }
    if (!Files.isDirectory(path)) {
      return;
    }
    if (!Files.exists(path)) {
      return;
    }
    if (treeItem == treeView.getRoot()) {
      pathItemMap.clear();
      directoryItemMap.clear();
      fileWatchService.reCreateWatchService();
    }
    directoryItemMap.put(path,treeItem);
    pathItemMap.put(path,treeItem);
    try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(path)){
      List<TreeItem<Item>> subItemList=StreamSupport.stream(directoryStream.spliterator(),false).sorted(pathOrder::comparePaths).map(p -> {
        TreeItem<Item> childItem=new PathItem(new Item(p),awesomeService.getIcon(p));
        if (Files.isDirectory(p)) {
          if (!IOHelper.isEmptyDir(p)) {
            childItem.getChildren().add(new PathItem(new Item(null,""String_Node_Str"")));
          }
          childItem.setExpanded(false);
          childItem.expandedProperty().addListener((observable,oldValue,newValue) -> {
            if (newValue) {
              addPathToTree(childItem.getValue().getPath(),childItem);
            }
          }
);
        }
        pathItemMap.put(p,childItem);
        return childItem;
      }
).collect(Collectors.toList());
      threadService.runActionLater(() -> {
        saveTreeSelectionState();
        boolean treeViewFocused=treeView.isFocused();
        treeItem.getChildren().clear();
        treeView.getSelectionModel().clearSelection();
        treeItem.getChildren().addAll(subItemList);
        restoreTreeSelectionState();
        restoreTreeScrollState();
        if (treeViewFocused) {
          treeView.requestFocus();
        }
        fileWatchService.registerPathWatcher(path);
      }
);
    }
 catch (    Exception e) {
      logger.warn(""String_Node_Str"",e);
    }
  }
));
}",0.9745339984247834
62333,"public void addPathToTree(Path path,final TreeItem<Item> treeItem){
  threadService.runTaskLater((() -> {
    if (Objects.isNull(path) || Objects.isNull(treeItem)) {
      return;
    }
    if (!Files.isDirectory(path)) {
      return;
    }
    if (!Files.exists(path)) {
      return;
    }
    if (treeItem == treeView.getRoot()) {
      pathItemMap.clear();
      directoryItemMap.clear();
      fileWatchService.reCreateWatchService();
    }
    directoryItemMap.put(path,treeItem);
    pathItemMap.put(path,treeItem);
    try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(path)){
      List<TreeItem<Item>> subItemList=StreamSupport.stream(directoryStream.spliterator(),false).sorted(pathOrder::comparePaths).map(p -> {
        TreeItem<Item> childItem=new PathItem(new Item(p),awesomeService.getIcon(p));
        if (Files.isDirectory(p)) {
          if (!IOHelper.isEmptyDir(p)) {
            childItem.getChildren().add(new PathItem(new Item(null,""String_Node_Str"")));
          }
          childItem.setExpanded(false);
          childItem.expandedProperty().addListener((observable,oldValue,newValue) -> {
            if (newValue) {
              addPathToTree(childItem.getValue().getPath(),childItem);
            }
          }
);
        }
        pathItemMap.put(p,childItem);
        return childItem;
      }
).collect(Collectors.toList());
      threadService.runActionLater(() -> {
        saveTreeSelectionState();
        boolean treeViewFocused=treeView.isFocused();
        treeItem.getChildren().clear();
        treeView.getSelectionModel().clearSelection();
        treeItem.getChildren().addAll(subItemList);
        restoreTreeSelectionState();
        restoreTreeScrollState();
        if (treeViewFocused) {
          treeView.requestFocus();
        }
        fileWatchService.registerPathWatcher(path);
      }
);
    }
 catch (    Exception e) {
      logger.warn(""String_Node_Str"",e);
    }
  }
));
}","public void addPathToTree(Path path,final TreeItem<Item> treeItem){
  threadService.runTaskLater((() -> {
    if (Objects.isNull(path) || Objects.isNull(treeItem)) {
      return;
    }
    if (!Files.isDirectory(path)) {
      return;
    }
    if (!Files.exists(path)) {
      return;
    }
    if (treeItem == treeView.getRoot()) {
      pathItemMap.clear();
      directoryItemMap.clear();
      fileWatchService.reCreateWatchService();
    }
    directoryItemMap.put(path,treeItem);
    pathItemMap.put(path,treeItem);
    try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(path)){
      List<TreeItem<Item>> subItemList=StreamSupport.stream(directoryStream.spliterator(),false).sorted(pathOrder::comparePaths).map(p -> {
        TreeItem<Item> childItem=new PathItem(new Item(p),awesomeService.getIcon(p));
        if (Files.isDirectory(p)) {
          if (!IOHelper.isEmptyDir(p)) {
            childItem.getChildren().add(new PathItem(new Item(null,""String_Node_Str"")));
          }
          childItem.setExpanded(false);
          childItem.expandedProperty().addListener((observable,oldValue,newValue) -> {
            if (newValue) {
              addPathToTree(childItem.getValue().getPath(),childItem);
            }
            treeView.refresh();
          }
);
        }
        pathItemMap.put(p,childItem);
        return childItem;
      }
).collect(Collectors.toList());
      threadService.runActionLater(() -> {
        saveTreeSelectionState();
        boolean treeViewFocused=treeView.isFocused();
        treeItem.getChildren().clear();
        treeView.getSelectionModel().clearSelection();
        treeItem.getChildren().addAll(subItemList);
        restoreTreeSelectionState();
        restoreTreeScrollState();
        if (treeViewFocused) {
          treeView.requestFocus();
        }
        fileWatchService.registerPathWatcher(path);
      }
);
    }
 catch (    Exception e) {
      logger.warn(""String_Node_Str"",e);
    }
  }
));
}",0.9918740477399696
62334,"@Autowired public WebWorkerResource(Current current,TabService tabService,DirectoryService directoryService,FileService fileService,ThreadService threadService,ApplicationController controller){
  this.current=current;
  this.tabService=tabService;
  this.directoryService=directoryService;
  this.fileService=fileService;
  this.threadService=threadService;
  this.controller=controller;
}","@Autowired public WebWorkerResource(Current current,TabService tabService,DirectoryService directoryService,FileService fileService,ThreadService threadService,ApplicationController controller,DataUriController dataUriService){
  this.current=current;
  this.tabService=tabService;
  this.directoryService=directoryService;
  this.fileService=fileService;
  this.threadService=threadService;
  this.controller=controller;
  this.dataUriService=dataUriService;
}",0.9165687426556992
62335,"public void executeWorkerResource(AllController.Payload payload){
  String finalURI=payload.getFinalURI();
  if (finalURI.matches(""String_Node_Str"")) {
    if (controller.getIncludeAsciidocResource()) {
      payload.write(String.format(""String_Node_Str"",finalURI));
      return;
    }
    Path path=directoryService.findPathInConfigOrCurrentOrWorkDir(finalURI);
    fileService.processFile(payload,path);
  }
 else   if (payload.getRequestURI().endsWith(""String_Node_Str"")) {
    Path path=directoryService.findPathInConfigOrCurrentOrWorkDir(""String_Node_Str"");
    fileService.processFile(payload,path);
  }
 else   if (payload.getRequestURI().endsWith(""String_Node_Str"")) {
    final String stylesheet=controller.readDefaultStylesheet();
    payload.write(stylesheet);
  }
 else {
    Path path=directoryService.findPathInConfigOrCurrentOrWorkDir(finalURI);
    fileService.processFile(payload,path);
  }
}","public void executeWorkerResource(AllController.Payload payload){
  Optional.ofNullable(payload.getRequestURI()).filter(e -> e.endsWith(""String_Node_Str"")).ifPresent(e -> {
    payload.setFinalURI(payload.param(""String_Node_Str""));
  }
);
  String finalURI=payload.getFinalURI();
  if (finalURI.matches(""String_Node_Str"")) {
    if (controller.getIncludeAsciidocResource()) {
      payload.write(String.format(""String_Node_Str"",finalURI));
      return;
    }
    Path path=directoryService.findPathInConfigOrCurrentOrWorkDir(finalURI);
    fileService.processFile(payload,path);
  }
 else   if (payload.getRequestURI().endsWith(""String_Node_Str"")) {
    Path path=directoryService.findPathInConfigOrCurrentOrWorkDir(""String_Node_Str"");
    fileService.processFile(payload,path);
  }
 else   if (payload.getRequestURI().endsWith(""String_Node_Str"")) {
    final String stylesheet=controller.readDefaultStylesheet();
    payload.write(stylesheet);
  }
 else {
    Path path=directoryService.findPathInConfigOrCurrentOrWorkDir(finalURI);
    fileService.processFile(payload,path);
  }
}",0.9131961866532864
62336,"public void initializeEditorContextMenus(){
  webView.setContextMenuEnabled(false);
  this.contextMenu=new ContextMenu();
  MenuItem cut=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    controller.cutCopy(editorSelection());
    execCommand(""String_Node_Str"");
  }
);
  MenuItem copy=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    controller.cutCopy(editorSelection());
  }
);
  MenuItem paste=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    controller.paste();
  }
);
  MenuItem pasteRaw=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    controller.pasteRaw();
  }
);
  MenuItem indexSelection=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    shortcutProvider.getProvider().addIndexSelection();
  }
);
  MenuItem includeAsSubDocument=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    shortcutProvider.getProvider().includeAsSubdocument();
  }
);
  MenuItem replacements=MenuItemBuilt.item(""String_Node_Str"").click(this::replaceSubs);
  MenuItem markdownToAsciidoc=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    MarkdownService markdownService=applicationContext.getBean(MarkdownService.class);
    markdownService.convertToAsciidoc(getEditorValue(),content -> threadService.runActionLater(() -> {
      tabService.newDoc(content);
    }
));
  }
);
  final Menu editorLanguage=new Menu(""String_Node_Str"");
  final Menu defaultLanguage=new Menu(""String_Node_Str"");
  ToggleGroup editorLanguageGroup=new ToggleGroup();
  ToggleGroup defaultLanguageGroup=new ToggleGroup();
  final RadioMenuItem disableSpeller=CheckItemBuilt.check(""String_Node_Str"",false).bindBi(spellcheckConfigBean.disableSpellCheckProperty()).click(e -> {
    checkSpelling();
  }
).build();
  Menu languageMenu=new Menu(""String_Node_Str"");
  languageMenu.getItems().addAll(editorLanguage,defaultLanguage,disableSpeller);
  getWebView().setOnMouseClicked(event -> {
    final ObservableList<MenuItem> contextMenuItems=contextMenu.getItems();
    final List<MenuItem> menuItems=Arrays.asList(cut,copy,paste,pasteRaw,markdownToAsciidoc,replacements,indexSelection,includeAsSubDocument,languageMenu);
    for (    MenuItem menuItem : menuItems) {
      if (!contextMenuItems.contains(menuItem)) {
        contextMenuItems.add(menuItem);
      }
    }
    if (editorLanguage.getItems().isEmpty()) {
      editorLanguage.getItems().add(CheckItemBuilt.check(""String_Node_Str"",true).click(e -> {
        setSpellLanguage(null);
        checkSpelling();
      }
).group(editorLanguageGroup).build());
      final ObservableList<Path> languages=spellcheckConfigBean.getLanguages();
      for (      Path language : languages) {
        final String pathCleanName=IOHelper.getPathCleanName(language);
        editorLanguage.getItems().add(CheckItemBuilt.check(pathCleanName,false).click(e -> {
          setSpellLanguage(language);
          checkSpelling();
        }
).group(editorLanguageGroup).build());
        defaultLanguage.getItems().add(CheckItemBuilt.check(pathCleanName,spellcheckConfigBean.defaultLanguageProperty().isEqualTo(language).get()).click(e -> {
          spellcheckConfigBean.setDefaultLanguage(language);
          checkSpelling();
        }
).group(defaultLanguageGroup).build());
      }
    }
    if (contextMenu.isShowing()) {
      contextMenu.hide();
    }
    if (event.getButton() == MouseButton.SECONDARY) {
      markdownToAsciidoc.setVisible(isMarkdown());
      indexSelection.setVisible(isAsciidoc());
      contextMenu.show(getWebView(),event.getScreenX(),event.getScreenY());
      checkWordSuggestions();
    }
  }
);
  getWebView().setOnDragDropped(event -> {
    Dragboard dragboard=event.getDragboard();
    boolean success=false;
    if (dragboard.hasFiles() && !dragboard.hasString()) {
      List<File> dragboardFiles=dragboard.getFiles();
      if (dragboardFiles.size() == 1) {
        Path path=dragboardFiles.get(0).toPath();
        if (Files.isDirectory(path)) {
          threadService.runTaskLater(() -> {
            StringBuffer buffer=new StringBuffer();
            buffer.append(""String_Node_Str"");
            buffer.append(""String_Node_Str"");
            buffer.append(asciiTreeGenerator.generate(path));
            buffer.append(""String_Node_Str"");
            threadService.runActionLater(() -> {
              insert(buffer.toString());
            }
);
          }
);
          success=true;
        }
      }
      Optional<String> block=parserService.toImageBlock(dragboardFiles);
      if (block.isPresent()) {
        insert(block.get());
        success=true;
      }
 else {
        block=parserService.toIncludeBlock(dragboardFiles);
        if (block.isPresent()) {
          insert(block.get());
          success=true;
        }
      }
    }
    if (dragboard.hasHtml() && !success) {
      Optional<String> block=parserService.toWebImageBlock(dragboard.getHtml());
      if (block.isPresent()) {
        insert(block.get());
        success=true;
      }
    }
    if (dragboard.hasString() && !success) {
      insert(dragboard.getString());
      success=true;
    }
    event.setDropCompleted(success);
    event.consume();
  }
);
}","public void initializeEditorContextMenus(){
  webView.setContextMenuEnabled(false);
  this.contextMenu=new ContextMenu();
  this.contextMenu.setAutoFix(true);
  this.contextMenu.setAutoHide(true);
  MenuItem cut=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    controller.cutCopy(editorSelection());
    execCommand(""String_Node_Str"");
  }
);
  MenuItem copy=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    controller.cutCopy(editorSelection());
  }
);
  MenuItem paste=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    controller.paste();
  }
);
  MenuItem pasteRaw=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    controller.pasteRaw();
  }
);
  MenuItem indexSelection=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    shortcutProvider.getProvider().addIndexSelection();
  }
);
  MenuItem includeAsSubDocument=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    shortcutProvider.getProvider().includeAsSubdocument();
  }
);
  MenuItem replacements=MenuItemBuilt.item(""String_Node_Str"").click(this::replaceSubs);
  MenuItem markdownToAsciidoc=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    MarkdownService markdownService=applicationContext.getBean(MarkdownService.class);
    markdownService.convertToAsciidoc(getEditorValue(),content -> threadService.runActionLater(() -> {
      tabService.newDoc(content);
    }
));
  }
);
  final Menu editorLanguage=new Menu(""String_Node_Str"");
  final Menu defaultLanguage=new Menu(""String_Node_Str"");
  ToggleGroup editorLanguageGroup=new ToggleGroup();
  ToggleGroup defaultLanguageGroup=new ToggleGroup();
  final RadioMenuItem disableSpeller=CheckItemBuilt.check(""String_Node_Str"",false).bindBi(spellcheckConfigBean.disableSpellCheckProperty()).click(e -> {
    checkSpelling();
  }
).build();
  Menu languageMenu=new Menu(""String_Node_Str"");
  languageMenu.getItems().addAll(editorLanguage,defaultLanguage,disableSpeller);
  EventHandler<ContextMenuEvent> contextMenuRequested=event -> {
    final ObservableList<MenuItem> contextMenuItems=contextMenu.getItems();
    final List<MenuItem> menuItems=Arrays.asList(cut,copy,paste,pasteRaw,markdownToAsciidoc,replacements,indexSelection,includeAsSubDocument,languageMenu);
    for (    MenuItem menuItem : menuItems) {
      if (!contextMenuItems.contains(menuItem)) {
        contextMenuItems.add(menuItem);
      }
    }
    if (editorLanguage.getItems().isEmpty()) {
      editorLanguage.getItems().add(CheckItemBuilt.check(""String_Node_Str"",true).click(e -> {
        setSpellLanguage(null);
        checkSpelling();
      }
).group(editorLanguageGroup).build());
      final ObservableList<Path> languages=spellcheckConfigBean.getLanguages();
      for (      Path language : languages) {
        final String pathCleanName=IOHelper.getPathCleanName(language);
        editorLanguage.getItems().add(CheckItemBuilt.check(pathCleanName,false).click(e -> {
          setSpellLanguage(language);
          checkSpelling();
        }
).group(editorLanguageGroup).build());
        defaultLanguage.getItems().add(CheckItemBuilt.check(pathCleanName,spellcheckConfigBean.defaultLanguageProperty().isEqualTo(language).get()).click(e -> {
          spellcheckConfigBean.setDefaultLanguage(language);
          checkSpelling();
        }
).group(defaultLanguageGroup).build());
      }
    }
    if (contextMenu.isShowing()) {
      contextMenu.hide();
    }
    markdownToAsciidoc.setVisible(isMarkdown());
    indexSelection.setVisible(isAsciidoc());
    contextMenu.show(getWebView(),event.getSceneX(),event.getSceneY());
    checkWordSuggestions();
  }
;
  getWebView().setOnContextMenuRequested(contextMenuRequested);
  getWebView().setOnMouseClicked(event -> {
    if (contextMenu.isShowing()) {
      contextMenu.hide();
    }
  }
);
  getWebView().setOnDragDropped(event -> {
    Dragboard dragboard=event.getDragboard();
    boolean success=false;
    if (dragboard.hasFiles() && !dragboard.hasString()) {
      List<File> dragboardFiles=dragboard.getFiles();
      if (dragboardFiles.size() == 1) {
        Path path=dragboardFiles.get(0).toPath();
        if (Files.isDirectory(path)) {
          threadService.runTaskLater(() -> {
            StringBuffer buffer=new StringBuffer();
            buffer.append(""String_Node_Str"");
            buffer.append(""String_Node_Str"");
            buffer.append(asciiTreeGenerator.generate(path));
            buffer.append(""String_Node_Str"");
            threadService.runActionLater(() -> {
              insert(buffer.toString());
            }
);
          }
);
          success=true;
        }
      }
      Optional<String> block=parserService.toImageBlock(dragboardFiles);
      if (block.isPresent()) {
        insert(block.get());
        success=true;
      }
 else {
        block=parserService.toIncludeBlock(dragboardFiles);
        if (block.isPresent()) {
          insert(block.get());
          success=true;
        }
      }
    }
    if (dragboard.hasHtml() && !success) {
      Optional<String> block=parserService.toWebImageBlock(dragboard.getHtml());
      if (block.isPresent()) {
        insert(block.get());
        success=true;
      }
    }
    if (dragboard.hasString() && !success) {
      insert(dragboard.getString());
      success=true;
    }
    event.setDropCompleted(success);
    event.consume();
  }
);
}",0.6813523608849728
62337,"public void initializeEditorContextMenus(){
  webView.setContextMenuEnabled(false);
  this.contextMenu=new ContextMenu();
  this.contextMenu.setAutoFix(true);
  this.contextMenu.setAutoHide(true);
  MenuItem cut=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    controller.cutCopy(editorSelection());
    execCommand(""String_Node_Str"");
  }
);
  MenuItem copy=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    controller.cutCopy(editorSelection());
  }
);
  MenuItem paste=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    controller.paste();
  }
);
  MenuItem pasteRaw=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    controller.pasteRaw();
  }
);
  MenuItem indexSelection=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    shortcutProvider.getProvider().addIndexSelection();
  }
);
  MenuItem includeAsSubDocument=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    shortcutProvider.getProvider().includeAsSubdocument();
  }
);
  MenuItem replacements=MenuItemBuilt.item(""String_Node_Str"").click(this::replaceSubs);
  MenuItem markdownToAsciidoc=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    MarkdownService markdownService=applicationContext.getBean(MarkdownService.class);
    markdownService.convertToAsciidoc(getEditorValue(),content -> threadService.runActionLater(() -> {
      tabService.newDoc(content);
    }
));
  }
);
  final Menu editorLanguage=new Menu(""String_Node_Str"");
  final Menu defaultLanguage=new Menu(""String_Node_Str"");
  ToggleGroup editorLanguageGroup=new ToggleGroup();
  ToggleGroup defaultLanguageGroup=new ToggleGroup();
  final RadioMenuItem disableSpeller=CheckItemBuilt.check(""String_Node_Str"",false).bindBi(spellcheckConfigBean.disableSpellCheckProperty()).click(e -> {
    checkSpelling();
  }
).build();
  Menu languageMenu=new Menu(""String_Node_Str"");
  languageMenu.getItems().addAll(editorLanguage,defaultLanguage,disableSpeller);
  EventHandler<ContextMenuEvent> contextMenuRequested=event -> {
    final ObservableList<MenuItem> contextMenuItems=contextMenu.getItems();
    final List<MenuItem> menuItems=Arrays.asList(cut,copy,paste,pasteRaw,markdownToAsciidoc,replacements,indexSelection,includeAsSubDocument,languageMenu);
    for (    MenuItem menuItem : menuItems) {
      if (!contextMenuItems.contains(menuItem)) {
        contextMenuItems.add(menuItem);
      }
    }
    if (editorLanguage.getItems().isEmpty()) {
      editorLanguage.getItems().add(CheckItemBuilt.check(""String_Node_Str"",true).click(e -> {
        setSpellLanguage(null);
        checkSpelling();
      }
).group(editorLanguageGroup).build());
      final ObservableList<Path> languages=spellcheckConfigBean.getLanguages();
      for (      Path language : languages) {
        final String pathCleanName=IOHelper.getPathCleanName(language);
        editorLanguage.getItems().add(CheckItemBuilt.check(pathCleanName,false).click(e -> {
          setSpellLanguage(language);
          checkSpelling();
        }
).group(editorLanguageGroup).build());
        defaultLanguage.getItems().add(CheckItemBuilt.check(pathCleanName,spellcheckConfigBean.defaultLanguageProperty().isEqualTo(language).get()).click(e -> {
          spellcheckConfigBean.setDefaultLanguage(language);
          checkSpelling();
        }
).group(defaultLanguageGroup).build());
      }
    }
    if (contextMenu.isShowing()) {
      contextMenu.hide();
    }
    markdownToAsciidoc.setVisible(isMarkdown());
    indexSelection.setVisible(isAsciidoc());
    contextMenu.show(getWebView(),event.getSceneX(),event.getSceneY());
    checkWordSuggestions();
  }
;
  getWebView().setOnContextMenuRequested(contextMenuRequested);
  getWebView().setOnMouseClicked(event -> {
    if (contextMenu.isShowing()) {
      contextMenu.hide();
    }
  }
);
  getWebView().setOnDragDropped(event -> {
    Dragboard dragboard=event.getDragboard();
    boolean success=false;
    if (dragboard.hasFiles() && !dragboard.hasString()) {
      List<File> dragboardFiles=dragboard.getFiles();
      if (dragboardFiles.size() == 1) {
        Path path=dragboardFiles.get(0).toPath();
        if (Files.isDirectory(path)) {
          threadService.runTaskLater(() -> {
            StringBuffer buffer=new StringBuffer();
            buffer.append(""String_Node_Str"");
            buffer.append(""String_Node_Str"");
            buffer.append(asciiTreeGenerator.generate(path));
            buffer.append(""String_Node_Str"");
            threadService.runActionLater(() -> {
              insert(buffer.toString());
            }
);
          }
);
          success=true;
        }
      }
      Optional<String> block=parserService.toImageBlock(dragboardFiles);
      if (block.isPresent()) {
        insert(block.get());
        success=true;
      }
 else {
        block=parserService.toIncludeBlock(dragboardFiles);
        if (block.isPresent()) {
          insert(block.get());
          success=true;
        }
      }
    }
    if (dragboard.hasHtml() && !success) {
      Optional<String> block=parserService.toWebImageBlock(dragboard.getHtml());
      if (block.isPresent()) {
        insert(block.get());
        success=true;
      }
    }
    if (dragboard.hasString() && !success) {
      insert(dragboard.getString());
      success=true;
    }
    event.setDropCompleted(success);
    event.consume();
  }
);
}","public void initializeEditorContextMenus(){
  webView.setContextMenuEnabled(false);
  contextMenu=new ContextMenu();
  MenuItem cut=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    controller.cutCopy(editorSelection());
    execCommand(""String_Node_Str"");
  }
);
  MenuItem copy=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    controller.cutCopy(editorSelection());
  }
);
  MenuItem paste=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    controller.paste();
  }
);
  MenuItem pasteRaw=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    controller.pasteRaw();
  }
);
  MenuItem indexSelection=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    shortcutProvider.getProvider().addIndexSelection();
  }
);
  MenuItem includeAsSubDocument=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    shortcutProvider.getProvider().includeAsSubdocument();
  }
);
  MenuItem replacements=MenuItemBuilt.item(""String_Node_Str"").click(this::replaceSubs);
  MenuItem markdownToAsciidoc=MenuItemBuilt.item(""String_Node_Str"").click(e -> {
    MarkdownService markdownService=applicationContext.getBean(MarkdownService.class);
    markdownService.convertToAsciidoc(getEditorValue(),content -> threadService.runActionLater(() -> {
      tabService.newDoc(content);
    }
));
  }
);
  final Menu editorLanguage=new Menu(""String_Node_Str"");
  final Menu defaultLanguage=new Menu(""String_Node_Str"");
  ToggleGroup editorLanguageGroup=new ToggleGroup();
  ToggleGroup defaultLanguageGroup=new ToggleGroup();
  final RadioMenuItem disableSpeller=CheckItemBuilt.check(""String_Node_Str"",false).bindBi(spellcheckConfigBean.disableSpellCheckProperty()).click(e -> {
    checkSpelling();
  }
).build();
  Menu languageMenu=new Menu(""String_Node_Str"");
  languageMenu.getItems().addAll(editorLanguage,defaultLanguage,disableSpeller);
  EventHandler<ContextMenuEvent> contextMenuRequested=event -> {
    final ObservableList<MenuItem> contextMenuItems=contextMenu.getItems();
    final List<MenuItem> menuItems=Arrays.asList(cut,copy,paste,pasteRaw,markdownToAsciidoc,replacements,indexSelection,includeAsSubDocument,languageMenu);
    for (    MenuItem menuItem : menuItems) {
      if (!contextMenuItems.contains(menuItem)) {
        contextMenuItems.add(menuItem);
      }
    }
    if (editorLanguage.getItems().isEmpty()) {
      editorLanguage.getItems().add(CheckItemBuilt.check(""String_Node_Str"",true).click(e -> {
        setSpellLanguage(null);
        checkSpelling();
      }
).group(editorLanguageGroup).build());
      final ObservableList<Path> languages=spellcheckConfigBean.getLanguages();
      for (      Path language : languages) {
        final String pathCleanName=IOHelper.getPathCleanName(language);
        editorLanguage.getItems().add(CheckItemBuilt.check(pathCleanName,false).click(e -> {
          setSpellLanguage(language);
          checkSpelling();
        }
).group(editorLanguageGroup).build());
        defaultLanguage.getItems().add(CheckItemBuilt.check(pathCleanName,spellcheckConfigBean.defaultLanguageProperty().isEqualTo(language).get()).click(e -> {
          spellcheckConfigBean.setDefaultLanguage(language);
          checkSpelling();
        }
).group(defaultLanguageGroup).build());
      }
    }
    if (contextMenu.isShowing()) {
      contextMenu.hide();
    }
    markdownToAsciidoc.setVisible(isMarkdown());
    indexSelection.setVisible(isAsciidoc());
    contextMenu.show(getWebView(),event.getSceneX(),event.getSceneY());
    contextOpen.set(true);
    checkWordSuggestions();
  }
;
  contextMenu.setOnHidden(event -> {
    threadService.runActionLater(() -> {
      contextOpen.set(false);
    }
,true);
  }
);
  getWebView().addEventFilter(KeyEvent.ANY,event -> {
    if (contextOpen.get()) {
      event.consume();
    }
  }
);
  getWebView().setOnContextMenuRequested(contextMenuRequested);
  getWebView().setOnMouseClicked(event -> {
    if (contextMenu.isShowing()) {
      contextMenu.hide();
    }
  }
);
  getWebView().setOnDragDropped(event -> {
    Dragboard dragboard=event.getDragboard();
    boolean success=false;
    if (dragboard.hasFiles() && !dragboard.hasString()) {
      List<File> dragboardFiles=dragboard.getFiles();
      if (dragboardFiles.size() == 1) {
        Path path=dragboardFiles.get(0).toPath();
        if (Files.isDirectory(path)) {
          threadService.runTaskLater(() -> {
            StringBuffer buffer=new StringBuffer();
            buffer.append(""String_Node_Str"");
            buffer.append(""String_Node_Str"");
            buffer.append(asciiTreeGenerator.generate(path));
            buffer.append(""String_Node_Str"");
            threadService.runActionLater(() -> {
              insert(buffer.toString());
            }
);
          }
);
          success=true;
        }
      }
      Optional<String> block=parserService.toImageBlock(dragboardFiles);
      if (block.isPresent()) {
        insert(block.get());
        success=true;
      }
 else {
        block=parserService.toIncludeBlock(dragboardFiles);
        if (block.isPresent()) {
          insert(block.get());
          success=true;
        }
      }
    }
    if (dragboard.hasHtml() && !success) {
      Optional<String> block=parserService.toWebImageBlock(dragboard.getHtml());
      if (block.isPresent()) {
        insert(block.get());
        success=true;
      }
    }
    if (dragboard.hasString() && !success) {
      insert(dragboard.getString());
      success=true;
    }
    event.setDropCompleted(success);
    event.consume();
  }
);
}",0.931660979433736
62338,"private void clearHistory(){
  textArea.clear();
}","private void clearHistory(){
  threadService.runActionLater(() -> {
    textArea.clear();
  }
);
}",0.6756756756756757
62339,"private void initializeProcess(Path terminalPath) throws Exception {
  String os=System.getProperty(""String_Node_Str"").toLowerCase();
  String[] commands;
  if (os.contains(""String_Node_Str"")) {
    commands=editorConfigBean.getTerminalWinCommand().split(""String_Node_Str"");
  }
 else {
    commands=editorConfigBean.getTerminalNixCommand().split(""String_Node_Str"");
  }
  ProcessBuilder processBuilder=new ProcessBuilder(commands);
  processBuilder.redirectError(ProcessBuilder.Redirect.PIPE);
  processBuilder.redirectInput(ProcessBuilder.Redirect.PIPE);
  processBuilder.redirectOutput(ProcessBuilder.Redirect.PIPE);
  processBuilder.directory(directoryService.workingDirectory().toFile());
  Optional.ofNullable(terminalPath).filter(Files::exists).map(Path::toFile).ifPresent(processBuilder::directory);
  this.process=processBuilder.start();
  Charset charset=Charset.forName(editorConfigBean.getTerminalCharset());
  this.inputStream=process.getInputStream();
  this.inputStreamReader=new InputStreamReader(inputStream,charset);
  this.inputReader=new BufferedReader(inputStreamReader);
  this.errorStream=process.getErrorStream();
  this.errorStreamReader=new InputStreamReader(errorStream,charset);
  this.errorReader=new BufferedReader(errorStreamReader);
  this.outputStream=process.getOutputStream();
  this.outputStreamWriter=new OutputStreamWriter(outputStream,charset);
  this.outputWriter=new BufferedWriter(outputStreamWriter);
  threadService.start(() -> {
    inputReader.lines().forEach(this::print);
  }
);
  threadService.start(() -> {
    errorReader.lines().forEach(this::print);
  }
);
  focusCommandInput();
  process.waitFor();
}","private void initializeProcess(Path terminalPath) throws Exception {
  String[] commands;
  if (OSHelper.isWindows()) {
    commands=editorConfigBean.getTerminalWinCommand().split(""String_Node_Str"");
  }
 else {
    commands=editorConfigBean.getTerminalNixCommand().split(""String_Node_Str"");
  }
  ProcessBuilder processBuilder=new ProcessBuilder(commands);
  processBuilder.redirectError(ProcessBuilder.Redirect.PIPE);
  processBuilder.redirectInput(ProcessBuilder.Redirect.PIPE);
  processBuilder.redirectOutput(ProcessBuilder.Redirect.PIPE);
  processBuilder.directory(directoryService.workingDirectory().toFile());
  Optional.ofNullable(terminalPath).filter(Files::exists).map(Path::toFile).ifPresent(processBuilder::directory);
  this.process=processBuilder.start();
  Charset charset=Charset.forName(editorConfigBean.getTerminalCharset());
  this.inputStream=process.getInputStream();
  this.inputStreamReader=new InputStreamReader(inputStream,charset);
  this.inputReader=new BufferedReader(inputStreamReader);
  this.errorStream=process.getErrorStream();
  this.errorStreamReader=new InputStreamReader(errorStream,charset);
  this.errorReader=new BufferedReader(errorStreamReader);
  this.outputStream=process.getOutputStream();
  this.outputStreamWriter=new OutputStreamWriter(outputStream,charset);
  this.outputWriter=new BufferedWriter(outputStreamWriter);
  threadService.start(() -> {
    inputReader.lines().forEach(this::print);
  }
);
  threadService.start(() -> {
    errorReader.lines().forEach(this::print);
  }
);
  focusCommandInput();
  process.waitFor();
}",0.8723338485316847
62340,"public void destroy(){
  ObservableList<Tab> tabs=this.getTabPane().getTabs();
  tabs.remove(this);
  Optional.ofNullable(process).ifPresent(Process::destroy);
  Arrays.asList(inputStream,inputStreamReader,inputReader,errorStream,errorStreamReader,errorReader,outputStream,outputStreamWriter,outputWriter).forEach((closeable) -> {
    try {
      closeable.close();
    }
 catch (    IOException e) {
    }
  }
);
}","public void destroy(){
  threadService.runActionLater(() -> {
    ObservableList<Tab> tabs=this.getTabPane().getTabs();
    tabs.remove(this);
    threadService.start(() -> {
      Optional.ofNullable(process).ifPresent(Process::destroy);
      process.exitValue();
    }
);
  }
);
}",0.5100286532951289
62341,"public CommandChecker checkCommand(String command,Runnable runnable){
  if (!matched && text.equalsIgnoreCase(command)) {
    threadService.runActionLater(runnable);
    matched=true;
  }
  return this;
}","public CommandChecker checkCommand(String command,Runnable runnable){
  if (!matched && text.equalsIgnoreCase(command)) {
    runnable.run();
    matched=true;
  }
  return this;
}",0.9114583333333334
62342,"@WebkitCall(from=""String_Node_Str"") public void finishOutline(){
  threadService.runActionLater(() -> {
    if (outlineTreeView.getRoot() == null) {
      TreeItem<Section> rootItem=new TreeItem<>();
      rootItem.setExpanded(true);
      Section rootSection=new Section();
      rootSection.setLevel(-1);
      String outlineTitle=""String_Node_Str"";
      rootSection.setTitle(outlineTitle);
      rootItem.setValue(rootSection);
      outlineTreeView.setRoot(rootItem);
      outlineTreeView.setOnMouseClicked(event -> {
        try {
          TreeItem<Section> item=outlineTreeView.getSelectionModel().getSelectedItem();
          EditorPane editorPane=current.currentEditor();
          editorPane.moveCursorTo(item.getValue().getLineno());
        }
 catch (        Exception e) {
          logger.error(""String_Node_Str"");
        }
      }
);
    }
    outlineTreeView.getRoot().getChildren().clear();
    for (    Section section : outlineList) {
      TreeItem<Section> sectionItem=new TreeItem<>(section);
      sectionItem.setExpanded(true);
      outlineTreeView.getRoot().getChildren().add(sectionItem);
      TreeSet<Section> subsections=section.getSubsections();
      for (      Section subsection : subsections) {
        TreeItem<Section> subItem=new TreeItem<>(subsection);
        subItem.setExpanded(true);
        sectionItem.getChildren().add(subItem);
        this.addSubSections(subItem,subsection.getSubsections());
      }
    }
  }
);
}","@WebkitCall(from=""String_Node_Str"") public void finishOutline(){
  threadService.runActionLater(() -> {
    if (outlineTreeView.getRoot() == null) {
      TreeItem<Section> rootItem=new TreeItem<>();
      rootItem.setExpanded(true);
      Section rootSection=new Section();
      rootSection.setLevel(-1);
      String outlineTitle=""String_Node_Str"";
      rootSection.setTitle(outlineTitle);
      rootItem.setValue(rootSection);
      outlineTreeView.setRoot(rootItem);
      outlineTreeView.setOnMouseClicked(event -> {
        try {
          TreeItem<Section> item=outlineTreeView.getSelectionModel().getSelectedItem();
          EditorPane editorPane=current.currentEditor();
          editorPane.moveCursorTo(item.getValue().getLineno());
        }
 catch (        Exception e) {
          logger.error(""String_Node_Str"");
        }
      }
);
    }
    if (outlineList.size() > 0)     outlineTreeView.getRoot().getChildren().clear();
    for (    Section section : outlineList) {
      TreeItem<Section> sectionItem=new TreeItem<>(section);
      sectionItem.setExpanded(true);
      outlineTreeView.getRoot().getChildren().add(sectionItem);
      TreeSet<Section> subsections=section.getSubsections();
      for (      Section subsection : subsections) {
        TreeItem<Section> subItem=new TreeItem<>(subsection);
        subItem.setExpanded(true);
        sectionItem.getChildren().add(subItem);
        this.addSubSections(subItem,subsection.getSubsections());
      }
    }
  }
);
}",0.9892037786774628
62343,"public void convert(String rendered,Consumer<String>... nextStep){
  threadService.runActionLater(() -> {
    this.rendered=rendered;
    String url=String.format(slideUrl,controller.getPort(),directoryService.interPath());
    if (slidePane.isVisible() || !url.equals(slidePane.getLocation())) {
      slidePane.load(url);
    }
 else {
      threadService.runActionLater(() -> {
        slidePane.replaceSlides(rendered);
      }
);
    }
    for (    Consumer<String> step : nextStep) {
      step.accept(rendered);
    }
  }
);
}","public void convert(String rendered,Consumer<String>... nextStep){
  threadService.runActionLater(() -> {
    this.rendered=rendered;
    String url=String.format(slideUrl,controller.getPort(),directoryService.interPath());
    if (controller.rightShowerHider.getShowing() != slidePane || !url.equals(slidePane.getLocation())) {
      slidePane.load(url);
    }
 else {
      threadService.runActionLater(() -> {
        slidePane.replaceSlides(rendered);
      }
);
    }
    for (    Consumer<String> step : nextStep) {
      step.accept(rendered);
    }
  }
);
}",0.9489981785063752
62344,"@Autowired public EditorPane(ApplicationController controller,ThreadService threadService,ShortcutProvider shortcutProvider,ApplicationContext applicationContext,TabService tabService,AsciiTreeGenerator asciiTreeGenerator,ParserService parserService,DirectoryService directoryService){
  this.controller=controller;
  this.threadService=threadService;
  this.shortcutProvider=shortcutProvider;
  this.applicationContext=applicationContext;
  this.tabService=tabService;
  this.asciiTreeGenerator=asciiTreeGenerator;
  this.directoryService=directoryService;
  this.handleReadyTasks=FXCollections.observableArrayList();
  this.parserService=parserService;
  this.webView=new WebView();
  webEngine().setConfirmHandler(this::handleConfirm);
  initializeMargins();
  initializeEditorContextMenus();
}","@Autowired public EditorPane(ApplicationController controller,ThreadService threadService,ShortcutProvider shortcutProvider,ApplicationContext applicationContext,TabService tabService,AsciiTreeGenerator asciiTreeGenerator,ParserService parserService,DirectoryService directoryService){
  this.controller=controller;
  this.threadService=threadService;
  this.shortcutProvider=shortcutProvider;
  this.applicationContext=applicationContext;
  this.tabService=tabService;
  this.asciiTreeGenerator=asciiTreeGenerator;
  this.directoryService=directoryService;
  this.handleReadyTasks=FXCollections.observableArrayList();
  this.parserService=parserService;
  this.webView=new WebView();
  this.ready.addListener(this::afterEditorReady);
  webEngine().setConfirmHandler(this::handleConfirm);
  initializeMargins();
  initializeEditorContextMenus();
}",0.9695863746958636
62345,"private Boolean handleConfirm(String param){
  if (""String_Node_Str"".equals(param)) {
    handleEditorReady();
    ObservableList<Runnable> runnables=FXCollections.observableArrayList(handleReadyTasks);
    handleReadyTasks.clear();
    for (    Runnable runnable : runnables) {
      runnable.run();
    }
    ready.setValue(true);
    updatePreviewUrl();
  }
  return false;
}","private Boolean handleConfirm(String param){
  if (""String_Node_Str"".equals(param)) {
    afterEditorLoaded();
  }
  return false;
}",0.4980392156862745
62346,"@Override public Source resolve(String href,String base) throws TransformerException {
  if (Objects.nonNull(href)) {
    try {
      if (href.charAt(0) == '/')       href=""String_Node_Str"" + href;
      Path path=Paths.get(URI.create(href));
      if (!Files.exists(path)) {
        Path tryThis=currentTabPathDir.resolve(path.subpath(0,path.getNameCount()));
        if (Files.exists(tryThis)) {
          return super.resolve(tryThis.toUri().toString(),base);
        }
        if (pathResolverService.isImage(path)) {
          Optional<Path> first=IOHelper.find(currentTabPathDir,Integer.MAX_VALUE,(p,attr) -> p.getFileName().equals(path.getFileName())).findFirst();
          if (first.isPresent())           return super.resolve(first.map(Path::toUri).map(URI::toString).get(),base);
        }
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
    }
  }
  return super.resolve(href,base);
}","@Override public Source resolve(String href,String base) throws TransformerException {
  if (Objects.nonNull(href)) {
    try {
      if (href.charAt(0) == '/')       href=""String_Node_Str"" + href;
      Path path=Paths.get(UriComponentsBuilder.fromUriString(href).build().toUri());
      if (!Files.exists(path)) {
        Path tryThis=currentTabPathDir.resolve(path.subpath(0,path.getNameCount()));
        if (Files.exists(tryThis)) {
          return super.resolve(tryThis.toUri().toString(),base);
        }
        if (pathResolverService.isImage(path)) {
          Optional<Path> first=IOHelper.find(currentTabPathDir,Integer.MAX_VALUE,(p,attr) -> p.getFileName().equals(path.getFileName())).findFirst();
          if (first.isPresent())           return super.resolve(first.map(Path::toUri).map(URI::toString).get(),base);
        }
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
    }
  }
  return super.resolve(href,base);
}",0.964172813487882
62347,"protected void produce(boolean askPath,InputHandler handler,FopFactory fopFactory,Path docbookTempfile,Path pdfPath){
  final Path currentTabPath=current.currentPath().get();
  final Path currentTabPathDir=currentTabPath.getParent();
  final String tabText=current.getCurrentTabText().replace(""String_Node_Str"",""String_Node_Str"").trim();
  try (FileOutputStream outputStream=new FileOutputStream(pdfPath.toFile())){
    FOUserAgent userAgent=new FOUserAgent(fopFactory);
    userAgent.setURIResolver(new FOURIResolver(true){
      @Override public Source resolve(      String href,      String base) throws TransformerException {
        if (Objects.nonNull(href)) {
          try {
            if (href.charAt(0) == '/')             href=""String_Node_Str"" + href;
            Path path=Paths.get(URI.create(href));
            if (!Files.exists(path)) {
              Path tryThis=currentTabPathDir.resolve(path.subpath(0,path.getNameCount()));
              if (Files.exists(tryThis)) {
                return super.resolve(tryThis.toUri().toString(),base);
              }
              if (pathResolverService.isImage(path)) {
                Optional<Path> first=IOHelper.find(currentTabPathDir,Integer.MAX_VALUE,(p,attr) -> p.getFileName().equals(path.getFileName())).findFirst();
                if (first.isPresent())                 return super.resolve(first.map(Path::toUri).map(URI::toString).get(),base);
              }
            }
          }
 catch (          Exception e) {
            logger.error(""String_Node_Str"",e);
          }
        }
        return super.resolve(href,base);
      }
    }
);
    handler.renderTo(userAgent,""String_Node_Str"",outputStream);
    Files.deleteIfExists(docbookTempfile);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
 finally {
    indikatorService.stopProgressBar();
    logger.debug(""String_Node_Str"");
    controller.addRemoveRecentList(pdfPath);
  }
}","protected void produce(boolean askPath,InputHandler handler,FopFactory fopFactory,Path docbookTempfile,Path pdfPath){
  final Path currentTabPath=current.currentPath().get();
  final Path currentTabPathDir=currentTabPath.getParent();
  final String tabText=current.getCurrentTabText().replace(""String_Node_Str"",""String_Node_Str"").trim();
  try (FileOutputStream outputStream=new FileOutputStream(pdfPath.toFile())){
    FOUserAgent userAgent=new FOUserAgent(fopFactory);
    userAgent.setURIResolver(new FOURIResolver(true){
      @Override public Source resolve(      String href,      String base) throws TransformerException {
        if (Objects.nonNull(href)) {
          try {
            if (href.charAt(0) == '/')             href=""String_Node_Str"" + href;
            Path path=Paths.get(UriComponentsBuilder.fromUriString(href).build().toUri());
            if (!Files.exists(path)) {
              Path tryThis=currentTabPathDir.resolve(path.subpath(0,path.getNameCount()));
              if (Files.exists(tryThis)) {
                return super.resolve(tryThis.toUri().toString(),base);
              }
              if (pathResolverService.isImage(path)) {
                Optional<Path> first=IOHelper.find(currentTabPathDir,Integer.MAX_VALUE,(p,attr) -> p.getFileName().equals(path.getFileName())).findFirst();
                if (first.isPresent())                 return super.resolve(first.map(Path::toUri).map(URI::toString).get(),base);
              }
            }
          }
 catch (          Exception e) {
            logger.error(""String_Node_Str"",e);
          }
        }
        return super.resolve(href,base);
      }
    }
);
    handler.renderTo(userAgent,""String_Node_Str"",outputStream);
    Files.deleteIfExists(docbookTempfile);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
 finally {
    indikatorService.stopProgressBar();
    logger.debug(""String_Node_Str"");
    controller.addRemoveRecentList(pdfPath);
  }
}",0.9826264690853348
62348,"private void startApp(final Stage stage,final CmdlineConfig config) throws Throwable {
  final FXMLLoader parentLoader=new FXMLLoader();
  final FXMLLoader asciidocTableLoader=new FXMLLoader();
  final FXMLLoader markdownTableLoader=new FXMLLoader();
  context=SpringApplication.run(SpringAppConfig.class);
  asciidocTableLoader.setControllerFactory(context::getBean);
  markdownTableLoader.setControllerFactory(context::getBean);
  parentLoader.setControllerFactory(context::getBean);
  InputStream asciidocTableStream=getClass().getResourceAsStream(""String_Node_Str"");
  AnchorPane asciidocTableAnchor=asciidocTableLoader.load(asciidocTableStream);
  InputStream markdownTableStream=getClass().getResourceAsStream(""String_Node_Str"");
  AnchorPane markdownTableAnchor=markdownTableLoader.load(markdownTableStream);
  InputStream sceneStream=getClass().getResourceAsStream(""String_Node_Str"");
  Parent root=parentLoader.load(sceneStream);
  controller=parentLoader.getController();
  Scene scene=new Scene(root);
  scene.getStylesheets().add(""String_Node_Str"");
  stage.setMaximized(true);
  stage.setTitle(""String_Node_Str"");
  InputStream logoStream=getClass().getResourceAsStream(""String_Node_Str"");
  stage.getIcons().add(new Image(logoStream));
  Stage asciidocTableStage=new Stage();
  asciidocTableStage.setScene(new Scene(asciidocTableAnchor));
  asciidocTableStage.setTitle(""String_Node_Str"");
  asciidocTableStage.initModality(Modality.WINDOW_MODAL);
  asciidocTableStage.initOwner(scene.getWindow());
  asciidocTableStage.getIcons().add(new Image(logoStream));
  Stage markdownTableStage=new Stage();
  markdownTableStage.setScene(new Scene(markdownTableAnchor));
  markdownTableStage.setTitle(""String_Node_Str"");
  markdownTableStage.initModality(Modality.WINDOW_MODAL);
  markdownTableStage.initOwner(scene.getWindow());
  markdownTableStage.getIcons().add(new Image(logoStream));
  IOUtils.closeQuietly(asciidocTableStream);
  IOUtils.closeQuietly(markdownTableStream);
  IOUtils.closeQuietly(sceneStream);
  IOUtils.closeQuietly(logoStream);
  controller.setStage(stage);
  controller.setScene(scene);
  controller.setAsciidocTableAnchor(asciidocTableAnchor);
  controller.setMarkdownTableAnchor(markdownTableAnchor);
  controller.setAsciidocTableStage(asciidocTableStage);
  controller.setMarkdownTableStage(markdownTableStage);
  controller.initializeSaveOnBlur();
  stage.setScene(scene);
  stage.show();
  scene.getAccelerators().put(new KeyCodeCombination(KeyCode.S,SHORTCUT_DOWN),controller::saveDoc);
  scene.getAccelerators().put(new KeyCodeCombination(KeyCode.M,SHORTCUT_DOWN),controller::adjustSplitPane);
  scene.getAccelerators().put(new KeyCodeCombination(KeyCode.N,SHORTCUT_DOWN),controller::newDoc);
  scene.getAccelerators().put(new KeyCodeCombination(KeyCode.O,SHORTCUT_DOWN),controller::openDoc);
  scene.getAccelerators().put(new KeyCodeCombination(KeyCode.W,SHORTCUT_DOWN),controller::saveAndCloseCurrentTab);
  final ThreadService threadService=context.getBean(ThreadService.class);
  threadService.start(() -> {
    try {
      registerStartupListener(config);
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
    }
  }
);
  scene.getWindow().setOnCloseRequest(controller::closeAllTabs);
  if (controller.getTabPane().getTabs().isEmpty())   controller.newDoc();
  controller.setHostServices(getHostServices());
}","private void startApp(final Stage stage,final CmdlineConfig config) throws Throwable {
  final FXMLLoader parentLoader=new FXMLLoader();
  final FXMLLoader asciidocTableLoader=new FXMLLoader();
  final FXMLLoader markdownTableLoader=new FXMLLoader();
  context=SpringApplication.run(SpringAppConfig.class);
  asciidocTableLoader.setControllerFactory(context::getBean);
  markdownTableLoader.setControllerFactory(context::getBean);
  parentLoader.setControllerFactory(context::getBean);
  InputStream asciidocTableStream=getClass().getResourceAsStream(""String_Node_Str"");
  AnchorPane asciidocTableAnchor=asciidocTableLoader.load(asciidocTableStream);
  InputStream markdownTableStream=getClass().getResourceAsStream(""String_Node_Str"");
  AnchorPane markdownTableAnchor=markdownTableLoader.load(markdownTableStream);
  InputStream sceneStream=getClass().getResourceAsStream(""String_Node_Str"");
  Parent root=parentLoader.load(sceneStream);
  controller=parentLoader.getController();
  Scene scene=new Scene(root);
  scene.getStylesheets().add(""String_Node_Str"");
  stage.setMaximized(true);
  stage.setTitle(""String_Node_Str"");
  InputStream logoStream=getClass().getResourceAsStream(""String_Node_Str"");
  stage.getIcons().add(new Image(logoStream));
  Stage asciidocTableStage=new Stage();
  asciidocTableStage.setScene(new Scene(asciidocTableAnchor));
  asciidocTableStage.setTitle(""String_Node_Str"");
  asciidocTableStage.initModality(Modality.WINDOW_MODAL);
  asciidocTableStage.initOwner(scene.getWindow());
  asciidocTableStage.getIcons().add(new Image(logoStream));
  Stage markdownTableStage=new Stage();
  markdownTableStage.setScene(new Scene(markdownTableAnchor));
  markdownTableStage.setTitle(""String_Node_Str"");
  markdownTableStage.initModality(Modality.WINDOW_MODAL);
  markdownTableStage.initOwner(scene.getWindow());
  markdownTableStage.getIcons().add(new Image(logoStream));
  IOUtils.closeQuietly(asciidocTableStream);
  IOUtils.closeQuietly(markdownTableStream);
  IOUtils.closeQuietly(sceneStream);
  IOUtils.closeQuietly(logoStream);
  controller.setStage(stage);
  controller.setScene(scene);
  controller.setAsciidocTableAnchor(asciidocTableAnchor);
  controller.setMarkdownTableAnchor(markdownTableAnchor);
  controller.setAsciidocTableStage(asciidocTableStage);
  controller.setMarkdownTableStage(markdownTableStage);
  controller.initializeSaveOnBlur();
  stage.setScene(scene);
  stage.show();
  scene.getAccelerators().put(new KeyCodeCombination(KeyCode.S,SHORTCUT_DOWN),controller::saveDoc);
  scene.getAccelerators().put(new KeyCodeCombination(KeyCode.M,SHORTCUT_DOWN),controller::adjustSplitPane);
  scene.getAccelerators().put(new KeyCodeCombination(KeyCode.N,SHORTCUT_DOWN),controller::newDoc);
  scene.getAccelerators().put(new KeyCodeCombination(KeyCode.O,SHORTCUT_DOWN),controller::openDoc);
  scene.getAccelerators().put(new KeyCodeCombination(KeyCode.W,SHORTCUT_DOWN),controller::saveAndCloseCurrentTab);
  final ThreadService threadService=context.getBean(ThreadService.class);
  threadService.start(() -> {
    try {
      registerStartupListener(config);
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
    }
  }
);
  scene.getWindow().setOnCloseRequest(controller::closeAllTabs);
  if (controller.getTabPane().getTabs().isEmpty())   controller.newDoc();
  controller.setHostServices(getHostServices());
  stage.widthProperty().addListener(controller::stageWidthChanged);
  stage.heightProperty().addListener(controller::stageWidthChanged);
}",0.9801016702977488
62349,"public void addPathToTree(Path path){
  try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(path)){
    List<TreeItem<Item>> subItemList=StreamSupport.stream(directoryStream.spliterator(),false).filter(p -> !pathResolver.isHidden(p)).filter(pathResolver::isViewable).map(p -> new TreeItem<>(new Item(p),awesomeService.getIcon(p))).collect(Collectors.toList());
    threadService.runActionLater(() -> {
      rootItem=new TreeItem<>(new Item(path,String.format(""String_Node_Str"",Optional.of(path).map(Path::getFileName).orElse(path))),awesomeService.getIcon(path));
      rootItem.setExpanded(true);
      rootItem.getChildren().addAll(subItemList);
      controller.getFileSystemView().setRoot(rootItem);
    }
,true);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}","public void addPathToTree(Path path){
  try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(path)){
    final List<Path> pathList=StreamSupport.stream(directoryStream.spliterator(),false).collect(Collectors.toList());
    List<TreeItem<Item>> subItemList=pathList.stream().filter(p -> !pathResolver.isHidden(p)).filter(pathResolver::isViewable).sorted(pathOrder::comparePaths).map(p -> new TreeItem<>(new Item(p),awesomeService.getIcon(p))).collect(Collectors.toList());
    threadService.runActionLater(() -> {
      rootItem=new TreeItem<>(new Item(path,String.format(""String_Node_Str"",Optional.of(path).map(Path::getFileName).orElse(path))),awesomeService.getIcon(path));
      rootItem.setExpanded(true);
      rootItem.getChildren().addAll(subItemList);
      controller.getFileSystemView().setRoot(rootItem);
    }
,true);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}",0.8713789107763615
62350,"public void browse(final Path path){
  threadService.runActionLater(() -> {
    controller.getWorkDirTabPane().getSelectionModel().selectFirst();
    TreeView<Item> treeView=controller.getFileSystemView();
    int selectedIndex=treeView.getSelectionModel().getSelectedIndex();
    if (selectedIndex != -1)     lastSelectedItem=selectedIndex;
    rootItem=new TreeItem<>(new Item(path,String.format(""String_Node_Str"",Optional.of(path).map(Path::getFileName).orElse(path))),awesomeService.getIcon(path));
    rootItem.setExpanded(true);
    treeView.setRoot(rootItem);
    threadService.runTaskLater(() -> {
      this.addPathToTree(path);
      if (Objects.nonNull(lastSelectedItem)) {
        threadService.runActionLater(() -> {
          treeView.getSelectionModel().select(lastSelectedItem);
        }
);
      }
      logger.debug(""String_Node_Str"",path);
    }
);
  }
,true);
}","public void browse(final Path path){
  threadService.runActionLater(() -> {
    controller.getWorkDirTabPane().getSelectionModel().selectFirst();
    this.treeView=controller.getFileSystemView();
    int selectedIndex=treeView.getSelectionModel().getSelectedIndex();
    if (selectedIndex != -1)     lastSelectedItem=selectedIndex;
    rootItem=new TreeItem<>(new Item(path,String.format(""String_Node_Str"",Optional.of(path).map(Path::getFileName).orElse(path))),awesomeService.getIcon(path));
    rootItem.setExpanded(true);
    treeView.setRoot(rootItem);
    threadService.runTaskLater(() -> {
      this.addPathToTree(path);
      if (Objects.nonNull(lastSelectedItem)) {
        threadService.runActionLater(() -> {
          treeView.getSelectionModel().select(lastSelectedItem);
        }
);
      }
      logger.debug(""String_Node_Str"",path);
    }
);
  }
,true);
}",0.9885974914481186
62351,"@FXML public void newSlide(ActionEvent actionEvent){
  DialogBuilder dialog=DialogBuilder.newFolderDialog();
  dialog.showAndWait().map(String::trim).ifPresent(folderName -> {
    if (dialog.isShowing())     dialog.hide();
    if (folderName.matches(DialogBuilder.FOLDER_NAME_REGEX)) {
      Path path=fileSystemView.getSelectionModel().getSelectedItem().getValue().getPath();
      Path folderPath=path.resolve(folderName);
      threadService.runTaskLater(() -> {
        IOHelper.createDirectories(folderPath);
        indikatorService.startProgressBar();
        IOHelper.copyDirectory(configPath.resolve(""String_Node_Str""),folderPath);
        indikatorService.stopProgressBar();
        directoryService.changeWorkigDir(folderPath);
        threadService.runActionLater(() -> {
          tabService.addTab(folderPath.resolve(""String_Node_Str""));
        }
);
      }
);
    }
  }
);
}","@FXML public void newSlide(ActionEvent actionEvent){
  DialogBuilder dialog=DialogBuilder.newFolderDialog();
  dialog.showAndWait().map(String::trim).ifPresent(folderName -> {
    if (dialog.isShowing())     dialog.hide();
    if (folderName.matches(DialogBuilder.FOLDER_NAME_REGEX)) {
      Path path=fileSystemView.getSelectionModel().getSelectedItem().getValue().getPath();
      Path folderPath=path.resolve(folderName);
      threadService.runTaskLater(() -> {
        IOHelper.createDirectories(folderPath);
        indikatorService.startProgressBar();
        IOHelper.copyDirectory(configPath.resolve(""String_Node_Str""),folderPath);
        indikatorService.stopProgressBar();
        threadService.runActionLater(() -> {
          tabService.addTab(folderPath.resolve(""String_Node_Str""));
        }
);
        directoryService.changeWorkigDir(folderPath);
      }
);
    }
  }
);
}",0.9393258426966292
62352,"public void gitbookToAsciibook(Path gitbookDir,Path asciibookDir){
  PathMatcher markdownMatcher=FileSystems.getDefault().getPathMatcher(""String_Node_Str"");
  IOHelper.copyDirectory(gitbookDir,asciibookDir);
  Stream<Path> gitStream=IOHelper.find(asciibookDir,Integer.MAX_VALUE,(path,attr) -> markdownMatcher.matches(path));
  List<Path> markdownFileList=gitStream.collect(Collectors.toList());
  List<String> markdownFileNameList=markdownFileList.stream().map(e -> e.getFileName().toString()).collect(Collectors.toList());
  for (  Path path : markdownFileList) {
    this.markdownToAsciidoc(IOHelper.readFile(path),result -> {
      String fileName=path.getFileName().toString();
      fileName=fileName.replaceAll(""String_Node_Str"",""String_Node_Str"");
      for (      String name : markdownFileNameList) {
        result=result.replace(name,name.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
      LinkedList<String> stringList=new LinkedList<String>(Arrays.asList(result.split(""String_Node_Str"")));
      LinkedList<String> stringLists=new LinkedList<String>(Arrays.asList(result.split(""String_Node_Str"")));
      for (int i=0; i < stringList.size(); i++) {
        String s=stringList.get(i);
        if (s.matches(""String_Node_Str"")) {
          stringLists.set(i,""String_Node_Str"" + s);
        }
      }
      if (""String_Node_Str"".equalsIgnoreCase(path.getFileName().toString())) {
        stringLists.addFirst(""String_Node_Str"");
        stringLists.addFirst(""String_Node_Str"");
        stringLists.addFirst(""String_Node_Str"");
        stringLists.addFirst(""String_Node_Str"");
        stringLists.addFirst(""String_Node_Str"");
        stringLists.addFirst(""String_Node_Str"");
        stringLists.addFirst(""String_Node_Str"");
        List<String> collect=stringLists.stream().filter(item -> !item.trim().matches(""String_Node_Str"")).collect(Collectors.toList());
        stringLists=new LinkedList<String>(collect);
      }
      result=String.join(""String_Node_Str"",stringLists);
      IOHelper.writeToFile(path.getParent().resolve(fileName),result,CREATE,TRUNCATE_EXISTING,WRITE);
    }
);
  }
  markdownFileList.forEach(IOHelper::deleteIfExists);
  directoryService.changeWorkigDir(asciibookDir);
  threadService.runActionLater(() -> {
    tabService.addTab(asciibookDir.resolve(""String_Node_Str""));
  }
);
}","public void gitbookToAsciibook(Path gitbookDir,Path asciibookDir){
  PathMatcher markdownMatcher=FileSystems.getDefault().getPathMatcher(""String_Node_Str"");
  IOHelper.copyDirectory(gitbookDir,asciibookDir);
  Stream<Path> gitStream=IOHelper.find(asciibookDir,Integer.MAX_VALUE,(path,attr) -> markdownMatcher.matches(path));
  List<Path> markdownFileList=gitStream.collect(Collectors.toList());
  List<String> markdownFileNameList=markdownFileList.stream().map(e -> e.getFileName().toString()).collect(Collectors.toList());
  for (  Path path : markdownFileList) {
    this.markdownToAsciidoc(IOHelper.readFile(path),result -> {
      String fileName=path.getFileName().toString();
      fileName=fileName.replaceAll(""String_Node_Str"",""String_Node_Str"");
      for (      String name : markdownFileNameList) {
        result=result.replace(name,name.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
      LinkedList<String> stringList=new LinkedList<String>(Arrays.asList(result.split(""String_Node_Str"")));
      LinkedList<String> stringLists=new LinkedList<String>(Arrays.asList(result.split(""String_Node_Str"")));
      for (int i=0; i < stringList.size(); i++) {
        String s=stringList.get(i);
        if (s.matches(""String_Node_Str"")) {
          stringLists.set(i,""String_Node_Str"" + s);
        }
      }
      if (""String_Node_Str"".equalsIgnoreCase(path.getFileName().toString())) {
        stringLists.addFirst(""String_Node_Str"");
        stringLists.addFirst(""String_Node_Str"");
        stringLists.addFirst(""String_Node_Str"");
        stringLists.addFirst(""String_Node_Str"");
        stringLists.addFirst(""String_Node_Str"");
        stringLists.addFirst(""String_Node_Str"");
        stringLists.addFirst(""String_Node_Str"");
        List<String> collect=stringLists.stream().filter(item -> !item.trim().matches(""String_Node_Str"")).collect(Collectors.toList());
        stringLists=new LinkedList<String>(collect);
      }
      result=String.join(""String_Node_Str"",stringLists);
      IOHelper.writeToFile(path.getParent().resolve(fileName),result,CREATE,TRUNCATE_EXISTING,WRITE);
    }
);
  }
  markdownFileList.forEach(IOHelper::deleteIfExists);
  threadService.runActionLater(() -> {
    tabService.addTab(asciibookDir.resolve(""String_Node_Str""));
  }
);
  directoryService.changeWorkigDir(asciibookDir);
}",0.9506649506649508
62353,"public void enableScrollingAndJumping(){
  stopScrolling.setValue(true);
  stopJumping.setValue(true);
}","public void enableScrollingAndJumping(){
  stopScrolling.setValue(false);
  stopJumping.setValue(false);
}",0.9333333333333332
62354,"public void disableScrollingAndJumping(){
  stopScrolling.setValue(false);
  stopJumping.setValue(false);
}","public void disableScrollingAndJumping(){
  stopScrolling.setValue(true);
  stopJumping.setValue(true);
}",0.9339622641509434
62355,"public synchronized void saveDoc(){
  if (!Platform.isFxApplicationThread()) {
    CompletableFuture completableFuture=new CompletableFuture();
    completableFuture.runAsync(() -> {
      Platform.runLater(() -> {
        try {
          saveDoc();
          completableFuture.complete(null);
        }
 catch (        Exception e) {
          completableFuture.completeExceptionally(e);
        }
      }
);
    }
,threadService.executor());
    completableFuture.join();
    return;
  }
  FileTime latestModifiedTime=IOHelper.getLastModifiedTime(getPath());
  if (Objects.nonNull(latestModifiedTime) && Objects.nonNull(getLastModifiedTime())) {
    if (latestModifiedTime.compareTo(getLastModifiedTime()) > 0) {
      this.select();
      ButtonType buttonType=AlertHelper.conflictAlert(getPath()).orElse(ButtonType.CANCEL);
      if (buttonType == ButtonType.CANCEL) {
        return;
      }
      if (buttonType == AlertHelper.LOAD_FILE_SYSTEM_CHANGES) {
        load();
      }
    }
 else {
      if (!isNew() && !isChanged()) {
        return;
      }
    }
  }
  if (Objects.isNull(getPath())) {
    final FileChooser fileChooser=directoryService.newFileChooser(String.format(""String_Node_Str""));
    fileChooser.getExtensionFilters().addAll(ExtensionFilters.ASCIIDOC);
    fileChooser.getExtensionFilters().addAll(ExtensionFilters.MARKDOWN);
    fileChooser.getExtensionFilters().addAll(ExtensionFilters.ALL);
    File file=fileChooser.showSaveDialog(null);
    setPath(file.toPath());
    setTabText(file.toPath().getFileName().toString());
  }
  String editorValue=editorPane.getEditorValue();
  IOHelper.createDirectories(getPath().getParent());
  Optional<Exception> exception=IOHelper.writeToFile(getPath(),editorValue,TRUNCATE_EXISTING,CREATE,SYNC);
  if (exception.isPresent()) {
    return;
  }
  setLastModifiedTime(IOHelper.getLastModifiedTime(getPath()));
  changedProperty.set(false);
  ObservableList<String> recentFiles=storedConfigBean.getRecentFiles();
  recentFiles.remove(getPath().toString());
  recentFiles.add(0,getPath().toString());
  directoryService.setInitialDirectory(Optional.ofNullable(getPath().toFile()));
}","public void saveDoc(){
  threadService.runActionLater(this::save);
}",0.054127198917456
62356,"private void saveAsSvg(String imagesDir,String imageTarget,String svg,String formula,float width,float height){
  try {
    if (!current.currentPath().isPresent())     controller.saveDoc();
    Path path=current.currentPath().get().getParent();
    Files.createDirectories(path.resolve(imagesDir));
    Files.write(path.resolve(imageTarget),svg.getBytes(Charset.forName(""String_Node_Str"")),CREATE,WRITE,TRUNCATE_EXISTING);
    logger.debug(""String_Node_Str"",imageTarget);
    threadService.runActionLater(() -> {
      controller.clearImageCache();
    }
);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
  }
}","private void saveAsSvg(String imagesDir,String imageTarget,String svg,String formula,float width,float height){
  try {
    Path path=current.currentTab().getParentOrWorkdir();
    Files.createDirectories(path.resolve(imagesDir));
    Files.write(path.resolve(imageTarget),svg.getBytes(Charset.forName(""String_Node_Str"")),CREATE,WRITE,TRUNCATE_EXISTING);
    logger.debug(""String_Node_Str"",imageTarget);
    threadService.runActionLater(() -> {
      controller.clearImageCache();
    }
);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
  }
}",0.8898163606010017
62357,"private void saveAsPng(String imagesDir,String imageTarget,String svg,String formula,float width,float height){
  try (StringReader reader=new StringReader(svg);ByteArrayOutputStream ostream=new ByteArrayOutputStream()){
    String uri=""String_Node_Str"";
    SAXSVGDocumentFactory f=new SAXSVGDocumentFactory(XMLResourceDescriptor.getXMLParserClassName());
    SVGDocument doc=f.createSVGDocument(uri,reader);
    TranscoderInput transcoderInput=new TranscoderInput(doc);
    TranscoderOutput transcoderOutput=new TranscoderOutput(ostream);
    PNGTranscoder transcoder=new PNGTranscoder();
    transcoder.addTranscodingHint(PNGTranscoder.KEY_WIDTH,width);
    transcoder.addTranscodingHint(PNGTranscoder.KEY_HEIGHT,height);
    transcoder.transcode(transcoderInput,transcoderOutput);
    if (!current.currentPath().isPresent())     controller.saveDoc();
    Path path=current.currentPath().get().getParent();
    Files.createDirectories(path.resolve(imagesDir));
    Files.write(path.resolve(imageTarget),ostream.toByteArray(),CREATE,WRITE,TRUNCATE_EXISTING);
    logger.debug(""String_Node_Str"",imageTarget);
    threadService.runActionLater(() -> {
      controller.clearImageCache();
    }
);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}","private void saveAsPng(String imagesDir,String imageTarget,String svg,String formula,float width,float height){
  try (StringReader reader=new StringReader(svg);ByteArrayOutputStream ostream=new ByteArrayOutputStream()){
    String uri=""String_Node_Str"";
    SAXSVGDocumentFactory f=new SAXSVGDocumentFactory(XMLResourceDescriptor.getXMLParserClassName());
    SVGDocument doc=f.createSVGDocument(uri,reader);
    TranscoderInput transcoderInput=new TranscoderInput(doc);
    TranscoderOutput transcoderOutput=new TranscoderOutput(ostream);
    PNGTranscoder transcoder=new PNGTranscoder();
    transcoder.addTranscodingHint(PNGTranscoder.KEY_WIDTH,width);
    transcoder.addTranscodingHint(PNGTranscoder.KEY_HEIGHT,height);
    transcoder.transcode(transcoderInput,transcoderOutput);
    Path path=current.currentTab().getParentOrWorkdir();
    Files.createDirectories(path.resolve(imagesDir));
    Files.write(path.resolve(imageTarget),ostream.toByteArray(),CREATE,WRITE,TRUNCATE_EXISTING);
    logger.debug(""String_Node_Str"",imageTarget);
    threadService.runActionLater(() -> {
      controller.clearImageCache();
    }
);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}",0.9546558704453442
62358,"public void plantUml(String uml,String type,String imagesDir,String imageTarget){
  Objects.requireNonNull(imageTarget);
  if (!imageTarget.endsWith(""String_Node_Str"") && !imageTarget.endsWith(""String_Node_Str""))   return;
  String defaultScale=""String_Node_Str"";
  if (!uml.contains(""String_Node_Str"") && !uml.contains(""String_Node_Str"")) {
    uml=defaultScale + uml;
    uml=""String_Node_Str"" + uml + ""String_Node_Str"";
  }
 else   if (uml.contains(""String_Node_Str"")) {
    uml=uml.replaceFirst(""String_Node_Str"",""String_Node_Str"" + defaultScale);
  }
  Integer cacheHit=current.getCache().get(imageTarget);
  int hashCode=(imageTarget + imagesDir + type+ uml).hashCode();
  if (Objects.nonNull(cacheHit))   if (hashCode == cacheHit)   return;
  logger.debug(""String_Node_Str"",imageTarget);
  SourceStringReader reader=new SourceStringReader(uml);
  try (ByteArrayOutputStream os=new ByteArrayOutputStream()){
    if (!current.currentPath().isPresent())     controller.saveDoc();
    Path path=current.currentPath().get().getParent();
    Path umlPath=path.resolve(imageTarget);
    FileFormat fileType=imageTarget.endsWith(""String_Node_Str"") ? FileFormat.SVG : FileFormat.PNG;
    threadService.runTaskLater(() -> {
      try {
        reader.generateImage(os,new FileFormatOption(fileType));
        Files.createDirectories(path.resolve(imagesDir));
        IOHelper.writeToFile(umlPath,os.toByteArray(),CREATE,WRITE,TRUNCATE_EXISTING);
        logger.debug(""String_Node_Str"",imageTarget);
        threadService.runActionLater(() -> {
          controller.clearImageCache();
        }
);
      }
 catch (      Exception e) {
        logger.error(""String_Node_Str"",e);
      }
    }
);
    current.getCache().put(imageTarget,hashCode);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
  }
}","public void plantUml(String uml,String type,String imagesDir,String imageTarget){
  Objects.requireNonNull(imageTarget);
  if (!imageTarget.endsWith(""String_Node_Str"") && !imageTarget.endsWith(""String_Node_Str""))   return;
  String defaultScale=""String_Node_Str"";
  if (!uml.contains(""String_Node_Str"") && !uml.contains(""String_Node_Str"")) {
    uml=defaultScale + uml;
    uml=""String_Node_Str"" + uml + ""String_Node_Str"";
  }
 else   if (uml.contains(""String_Node_Str"")) {
    uml=uml.replaceFirst(""String_Node_Str"",""String_Node_Str"" + defaultScale);
  }
  Integer cacheHit=current.getCache().get(imageTarget);
  int hashCode=(imageTarget + imagesDir + type+ uml).hashCode();
  if (Objects.nonNull(cacheHit))   if (hashCode == cacheHit)   return;
  logger.debug(""String_Node_Str"",imageTarget);
  SourceStringReader reader=new SourceStringReader(uml);
  try (ByteArrayOutputStream os=new ByteArrayOutputStream()){
    Path path=current.currentTab().getParentOrWorkdir();
    Path umlPath=path.resolve(imageTarget);
    FileFormat fileType=imageTarget.endsWith(""String_Node_Str"") ? FileFormat.SVG : FileFormat.PNG;
    threadService.runTaskLater(() -> {
      try {
        reader.generateImage(os,new FileFormatOption(fileType));
        Files.createDirectories(path.resolve(imagesDir));
        IOHelper.writeToFile(umlPath,os.toByteArray(),CREATE,WRITE,TRUNCATE_EXISTING);
        logger.debug(""String_Node_Str"",imageTarget);
        threadService.runActionLater(() -> {
          controller.clearImageCache();
        }
);
      }
 catch (      Exception e) {
        logger.error(""String_Node_Str"",e);
      }
    }
);
    current.getCache().put(imageTarget,hashCode);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
  }
}",0.9562289562289562
62359,"public void createFileTree(String tree,String type,String imagesDir,String imageTarget,String width,String height){
  Objects.requireNonNull(imageTarget);
  if (!imageTarget.endsWith(""String_Node_Str"") && !""String_Node_Str"".equalsIgnoreCase(type))   return;
  if (""String_Node_Str"".equalsIgnoreCase(type)) {
    return;
  }
 else {
    Path path=current.currentPath().get().getParent();
    Path treePath=path.resolve(imageTarget);
    if (!current.currentPath().isPresent())     controller.saveDoc();
    Integer cacheHit=current.getCache().get(imageTarget);
    int hashCode=(imageTarget + imagesDir + type+ tree+ width+ height).hashCode();
    if (Objects.isNull(cacheHit) || hashCode != cacheHit) {
      logger.debug(""String_Node_Str"",imageTarget);
      TreeView<Tuple<Integer,String>> fileView=new TreeView<>();
      fileView.getStyleClass().add(""String_Node_Str"");
      fileView.setLayoutX(-99999);
      fileView.setLayoutY(-99999);
      try {
        List<String> strings=Arrays.asList(tree.split(""String_Node_Str""));
        List<TreeItem<Tuple<Integer,String>>> treeItems=strings.stream().map(s -> {
          int level=StringUtils.countOccurrencesOf(s,""String_Node_Str"");
          String value=s.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
          return new Tuple<Integer,String>(level,value);
        }
).map(t -> {
          Node icon=awesomeService.getIcon(Paths.get(t.getValue()));
          TreeItem<Tuple<Integer,String>> treeItem=new TreeItem<>(t,icon);
          treeItem.setExpanded(true);
          return treeItem;
        }
).collect(Collectors.toList());
        for (int index=0; index < treeItems.size(); index++) {
          TreeItem<Tuple<Integer,String>> currentItem=treeItems.get(index);
          Tuple<Integer,String> currentItemValue=currentItem.getValue();
          if (Objects.isNull(fileView.getRoot())) {
            fileView.setRoot(currentItem);
            continue;
          }
          TreeItem<Tuple<Integer,String>> lastItem=treeItems.get(index - 1);
          int lastPos=lastItem.getValue().getKey();
          if (currentItemValue.getKey() > lastPos) {
            lastItem.getChildren().add(currentItem);
            continue;
          }
          if (currentItemValue.getKey() == lastPos) {
            TreeItem<Tuple<Integer,String>> parent=lastItem.getParent();
            if (Objects.isNull(parent))             parent=fileView.getRoot();
            parent.getChildren().add(currentItem);
            continue;
          }
          if (currentItemValue.getKey() < lastPos) {
            List<TreeItem<Tuple<Integer,String>>> collect=treeItems.stream().filter(t -> t.getValue().getKey() == currentItemValue.getKey()).collect(Collectors.toList());
            if (collect.size() > 0) {
              TreeItem<Tuple<Integer,String>> parent=fileView.getRoot();
              try {
                TreeItem<Tuple<Integer,String>> treeItem=collect.get(collect.indexOf(currentItem) - 1);
                parent=treeItem.getParent();
              }
 catch (              RuntimeException e) {
                logger.info(e.getMessage(),e);
              }
              parent.getChildren().add(currentItem);
            }
            continue;
          }
        }
        fileView.setMaxHeight(2500);
        fileView.setPrefWidth(250);
        fileView.setPrefHeight(treeItems.size() * 24);
        try {
          Double value=Double.valueOf(width);
          if (width.contains(""String_Node_Str"") || width.contains(""String_Node_Str""))           fileView.setPrefWidth(fileView.getPrefWidth() + value);
 else           fileView.setPrefWidth(value);
        }
 catch (        Exception e) {
        }
        try {
          Double value=Double.valueOf(height);
          if (height.contains(""String_Node_Str"") || height.contains(""String_Node_Str""))           fileView.setPrefHeight(fileView.getPrefHeight() + value);
 else           fileView.setPrefHeight(value);
        }
 catch (        Exception e) {
        }
        threadService.runActionLater(() -> {
          controller.getRootAnchor().getChildren().add(fileView);
          WritableImage writableImage=fileView.snapshot(new SnapshotParameters(),null);
          BufferedImage bufferedImage=SwingFXUtils.fromFXImage(writableImage,null);
          IOHelper.createDirectories(path.resolve(imagesDir));
          IOHelper.imageWrite(bufferedImage,""String_Node_Str"",treePath.toFile());
          logger.debug(""String_Node_Str"",imageTarget);
          controller.clearImageCache();
          controller.getRootAnchor().getChildren().remove(fileView);
        }
);
      }
 catch (      Exception e) {
        logger.error(""String_Node_Str"",e);
      }
    }
    current.getCache().put(imageTarget,hashCode);
  }
}","public void createFileTree(String tree,String type,String imagesDir,String imageTarget,String width,String height){
  Objects.requireNonNull(imageTarget);
  if (!imageTarget.endsWith(""String_Node_Str"") && !""String_Node_Str"".equalsIgnoreCase(type))   return;
  if (""String_Node_Str"".equalsIgnoreCase(type)) {
    return;
  }
 else {
    Path path=current.currentTab().getParentOrWorkdir();
    Path treePath=path.resolve(imageTarget);
    Integer cacheHit=current.getCache().get(imageTarget);
    int hashCode=(imageTarget + imagesDir + type+ tree+ width+ height).hashCode();
    if (Objects.isNull(cacheHit) || hashCode != cacheHit) {
      logger.debug(""String_Node_Str"",imageTarget);
      TreeView<Tuple<Integer,String>> fileView=new TreeView<>();
      fileView.getStyleClass().add(""String_Node_Str"");
      fileView.setLayoutX(-99999);
      fileView.setLayoutY(-99999);
      try {
        List<String> strings=Arrays.asList(tree.split(""String_Node_Str""));
        List<TreeItem<Tuple<Integer,String>>> treeItems=strings.stream().map(s -> {
          int level=StringUtils.countOccurrencesOf(s,""String_Node_Str"");
          String value=s.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
          return new Tuple<Integer,String>(level,value);
        }
).map(t -> {
          Node icon=awesomeService.getIcon(Paths.get(t.getValue()));
          TreeItem<Tuple<Integer,String>> treeItem=new TreeItem<>(t,icon);
          treeItem.setExpanded(true);
          return treeItem;
        }
).collect(Collectors.toList());
        for (int index=0; index < treeItems.size(); index++) {
          TreeItem<Tuple<Integer,String>> currentItem=treeItems.get(index);
          Tuple<Integer,String> currentItemValue=currentItem.getValue();
          if (Objects.isNull(fileView.getRoot())) {
            fileView.setRoot(currentItem);
            continue;
          }
          TreeItem<Tuple<Integer,String>> lastItem=treeItems.get(index - 1);
          int lastPos=lastItem.getValue().getKey();
          if (currentItemValue.getKey() > lastPos) {
            lastItem.getChildren().add(currentItem);
            continue;
          }
          if (currentItemValue.getKey() == lastPos) {
            TreeItem<Tuple<Integer,String>> parent=lastItem.getParent();
            if (Objects.isNull(parent))             parent=fileView.getRoot();
            parent.getChildren().add(currentItem);
            continue;
          }
          if (currentItemValue.getKey() < lastPos) {
            List<TreeItem<Tuple<Integer,String>>> collect=treeItems.stream().filter(t -> t.getValue().getKey() == currentItemValue.getKey()).collect(Collectors.toList());
            if (collect.size() > 0) {
              TreeItem<Tuple<Integer,String>> parent=fileView.getRoot();
              try {
                TreeItem<Tuple<Integer,String>> treeItem=collect.get(collect.indexOf(currentItem) - 1);
                parent=treeItem.getParent();
              }
 catch (              RuntimeException e) {
                logger.info(e.getMessage(),e);
              }
              parent.getChildren().add(currentItem);
            }
            continue;
          }
        }
        fileView.setMaxHeight(2500);
        fileView.setPrefWidth(250);
        fileView.setPrefHeight(treeItems.size() * 24);
        try {
          Double value=Double.valueOf(width);
          if (width.contains(""String_Node_Str"") || width.contains(""String_Node_Str""))           fileView.setPrefWidth(fileView.getPrefWidth() + value);
 else           fileView.setPrefWidth(value);
        }
 catch (        Exception e) {
        }
        try {
          Double value=Double.valueOf(height);
          if (height.contains(""String_Node_Str"") || height.contains(""String_Node_Str""))           fileView.setPrefHeight(fileView.getPrefHeight() + value);
 else           fileView.setPrefHeight(value);
        }
 catch (        Exception e) {
        }
        threadService.runActionLater(() -> {
          controller.getRootAnchor().getChildren().add(fileView);
          WritableImage writableImage=fileView.snapshot(new SnapshotParameters(),null);
          BufferedImage bufferedImage=SwingFXUtils.fromFXImage(writableImage,null);
          IOHelper.createDirectories(path.resolve(imagesDir));
          IOHelper.imageWrite(bufferedImage,""String_Node_Str"",treePath.toFile());
          logger.debug(""String_Node_Str"",imageTarget);
          controller.clearImageCache();
          controller.getRootAnchor().getChildren().remove(fileView);
        }
);
      }
 catch (      Exception e) {
        logger.error(""String_Node_Str"",e);
      }
    }
    current.getCache().put(imageTarget,hashCode);
  }
}",0.9882005899705014
62360,"public void createHighlightFileTree(String tree,String type,String imagesDir,String imageTarget,String width,String height){
  Objects.requireNonNull(imageTarget);
  if (!imageTarget.endsWith(""String_Node_Str""))   return;
  Path path=current.currentPath().get().getParent();
  Path treePath=path.resolve(imageTarget);
  if (!current.currentPath().isPresent())   controller.saveDoc();
  Integer cacheHit=current.getCache().get(imageTarget);
  int hashCode=(imageTarget + imagesDir + type+ tree+ width+ height).hashCode();
  if (Objects.isNull(cacheHit) || hashCode != cacheHit) {
    threadService.runActionLater(() -> {
      WebView treeview=new WebView();
      treeview.setMaxHeight(5000);
      treeview.setMaxWidth(5000);
      treeview.setPrefWidth(5000);
      treeview.setPrefHeight(5000);
      treeview.setLayoutX(-89999);
      treeview.setLayoutY(-89999);
      try {
        Double value=Double.valueOf(width);
        if (width.contains(""String_Node_Str"") || width.contains(""String_Node_Str""))         treeview.setPrefWidth(treeview.getPrefWidth() + value);
 else         treeview.setPrefWidth(value);
      }
 catch (      Exception e) {
      }
      try {
        Double value=Double.valueOf(height);
        if (height.contains(""String_Node_Str"") || height.contains(""String_Node_Str""))         treeview.setPrefHeight(treeview.getPrefHeight() + value);
 else         treeview.setPrefHeight(value);
      }
 catch (      Exception e) {
      }
      threadService.runActionLater(() -> {
        treeview.getEngine().load(String.format(treeviewUrl,controller.getPort()));
      }
);
      controller.getRootAnchor().getChildren().add(treeview);
      treeview.getEngine().setOnAlert(event -> {
        String data=event.getData();
        if (""String_Node_Str"".equals(data)) {
          ((JSObject)treeview.getEngine().executeScript(""String_Node_Str"")).call(""String_Node_Str"",tree);
        }
        if (""String_Node_Str"".equals(data)) {
          WritableImage writableImage=treeview.snapshot(new SnapshotParameters(),null);
          BufferedImage bufferedImage=SwingFXUtils.fromFXImage(writableImage,null);
          threadService.runTaskLater(() -> {
            TrimWhite trimWhite=new TrimWhite();
            BufferedImage trimmed=trimWhite.trim(bufferedImage);
            IOHelper.createDirectories(path.resolve(imagesDir));
            IOHelper.imageWrite(trimmed,""String_Node_Str"",treePath.toFile());
            threadService.runActionLater(() -> {
              controller.clearImageCache();
              controller.getRootAnchor().getChildren().remove(treeview);
            }
);
          }
);
        }
      }
);
    }
);
  }
  current.getCache().put(imageTarget,hashCode);
}","public void createHighlightFileTree(String tree,String type,String imagesDir,String imageTarget,String width,String height){
  Objects.requireNonNull(imageTarget);
  if (!imageTarget.endsWith(""String_Node_Str""))   return;
  Path path=current.currentTab().getParentOrWorkdir();
  Path treePath=path.resolve(imageTarget);
  Integer cacheHit=current.getCache().get(imageTarget);
  int hashCode=(imageTarget + imagesDir + type+ tree+ width+ height).hashCode();
  if (Objects.isNull(cacheHit) || hashCode != cacheHit) {
    threadService.runActionLater(() -> {
      WebView treeview=new WebView();
      treeview.setMaxHeight(5000);
      treeview.setMaxWidth(5000);
      treeview.setPrefWidth(5000);
      treeview.setPrefHeight(5000);
      treeview.setLayoutX(-89999);
      treeview.setLayoutY(-89999);
      try {
        Double value=Double.valueOf(width);
        if (width.contains(""String_Node_Str"") || width.contains(""String_Node_Str""))         treeview.setPrefWidth(treeview.getPrefWidth() + value);
 else         treeview.setPrefWidth(value);
      }
 catch (      Exception e) {
      }
      try {
        Double value=Double.valueOf(height);
        if (height.contains(""String_Node_Str"") || height.contains(""String_Node_Str""))         treeview.setPrefHeight(treeview.getPrefHeight() + value);
 else         treeview.setPrefHeight(value);
      }
 catch (      Exception e) {
      }
      threadService.runActionLater(() -> {
        treeview.getEngine().load(String.format(treeviewUrl,controller.getPort()));
      }
);
      controller.getRootAnchor().getChildren().add(treeview);
      treeview.getEngine().setOnAlert(event -> {
        String data=event.getData();
        if (""String_Node_Str"".equals(data)) {
          ((JSObject)treeview.getEngine().executeScript(""String_Node_Str"")).call(""String_Node_Str"",tree);
        }
        if (""String_Node_Str"".equals(data)) {
          WritableImage writableImage=treeview.snapshot(new SnapshotParameters(),null);
          BufferedImage bufferedImage=SwingFXUtils.fromFXImage(writableImage,null);
          threadService.runTaskLater(() -> {
            TrimWhite trimWhite=new TrimWhite();
            BufferedImage trimmed=trimWhite.trim(bufferedImage);
            IOHelper.createDirectories(path.resolve(imagesDir));
            IOHelper.imageWrite(trimmed,""String_Node_Str"",treePath.toFile());
            threadService.runActionLater(() -> {
              controller.clearImageCache();
              controller.getRootAnchor().getChildren().remove(treeview);
            }
);
          }
);
        }
      }
);
    }
);
  }
  current.getCache().put(imageTarget,hashCode);
}",0.9798281658573028
62361,"public void chartBuild(String chartContent,String imagesDir,String imageTarget,Map<String,String> optMap) throws Exception {
  if (!imageTarget.endsWith(""String_Node_Str""))   throw new InterruptedException();
  Integer cacheHit=current.getCache().get(imageTarget);
  int hashCode=(imageTarget + imagesDir + chartContent).hashCode() + optMap.hashCode();
  if (Objects.nonNull(cacheHit))   if (hashCode == cacheHit) {
    throw new InterruptedException();
  }
  current.getCache().put(imageTarget,hashCode);
  if (!current.currentPath().isPresent())   controller.saveDoc();
  currentRoot=current.currentPath().get().getParent();
  imagePath=currentRoot.resolve(imageTarget);
}","public void chartBuild(String chartContent,String imagesDir,String imageTarget,Map<String,String> optMap) throws Exception {
  if (!imageTarget.endsWith(""String_Node_Str""))   throw new InterruptedException();
  Integer cacheHit=current.getCache().get(imageTarget);
  int hashCode=(imageTarget + imagesDir + chartContent).hashCode() + optMap.hashCode();
  if (Objects.nonNull(cacheHit))   if (hashCode == cacheHit) {
    throw new InterruptedException();
  }
  current.getCache().put(imageTarget,hashCode);
  currentRoot=current.currentTab().getParentOrWorkdir();
  imagePath=currentRoot.resolve(imageTarget);
}",0.8753894080996885
62362,"private void startApp(final Stage stage,final CmdlineConfig config) throws Throwable {
  final FXMLLoader parentLoader=new FXMLLoader();
  final FXMLLoader asciidocTableLoader=new FXMLLoader();
  final FXMLLoader markdownTableLoader=new FXMLLoader();
  context=SpringApplication.run(SpringAppConfig.class);
  asciidocTableLoader.setControllerFactory(context::getBean);
  markdownTableLoader.setControllerFactory(context::getBean);
  parentLoader.setControllerFactory(context::getBean);
  InputStream asciidocTableStream=getClass().getResourceAsStream(""String_Node_Str"");
  AnchorPane asciidocTableAnchor=asciidocTableLoader.load(asciidocTableStream);
  InputStream markdownTableStream=getClass().getResourceAsStream(""String_Node_Str"");
  AnchorPane markdownTableAnchor=markdownTableLoader.load(markdownTableStream);
  InputStream sceneStream=getClass().getResourceAsStream(""String_Node_Str"");
  Parent root=parentLoader.load(sceneStream);
  controller=parentLoader.getController();
  HostServicesDelegate hostServices=HostServicesFactory.getInstance(this);
  controller.setHostServices(hostServices);
  Scene scene=new Scene(root);
  scene.getStylesheets().add(""String_Node_Str"");
  stage.setMaximized(true);
  stage.setTitle(""String_Node_Str"");
  InputStream logoStream=getClass().getResourceAsStream(""String_Node_Str"");
  stage.getIcons().add(new Image(logoStream));
  Stage asciidocTableStage=new Stage();
  asciidocTableStage.setScene(new Scene(asciidocTableAnchor));
  asciidocTableStage.setTitle(""String_Node_Str"");
  asciidocTableStage.initModality(Modality.WINDOW_MODAL);
  asciidocTableStage.initOwner(scene.getWindow());
  asciidocTableStage.getIcons().add(new Image(logoStream));
  Stage markdownTableStage=new Stage();
  markdownTableStage.setScene(new Scene(markdownTableAnchor));
  markdownTableStage.setTitle(""String_Node_Str"");
  markdownTableStage.initModality(Modality.WINDOW_MODAL);
  markdownTableStage.initOwner(scene.getWindow());
  markdownTableStage.getIcons().add(new Image(logoStream));
  IOUtils.closeQuietly(asciidocTableStream);
  IOUtils.closeQuietly(markdownTableStream);
  IOUtils.closeQuietly(sceneStream);
  IOUtils.closeQuietly(logoStream);
  controller.setStage(stage);
  controller.setScene(scene);
  controller.setAsciidocTableAnchor(asciidocTableAnchor);
  controller.setMarkdownTableAnchor(markdownTableAnchor);
  controller.setAsciidocTableStage(asciidocTableStage);
  controller.setMarkdownTableStage(markdownTableStage);
  controller.initializeSaveOnBlur();
  stage.setScene(scene);
  stage.show();
  scene.getAccelerators().put(new KeyCodeCombination(KeyCode.S,SHORTCUT_DOWN),controller::saveDoc);
  scene.getAccelerators().put(new KeyCodeCombination(KeyCode.M,SHORTCUT_DOWN),controller::adjustSplitPane);
  scene.getAccelerators().put(new KeyCodeCombination(KeyCode.N,SHORTCUT_DOWN),controller::newDoc);
  scene.getAccelerators().put(new KeyCodeCombination(KeyCode.F4,SHORTCUT_DOWN),controller::showSettings);
  final ThreadService threadService=context.getBean(ThreadService.class);
  final TabService tabService=context.getBean(TabService.class);
  StartupNotification.registerStartupListener(parameters -> {
    threadService.runActionLater(() -> {
      String[] files=parameters.split(""String_Node_Str"");
      for (      String file : files) {
        file=file.replace(""String_Node_Str"",""String_Node_Str"");
        tabService.addTab(Paths.get(file).toAbsolutePath());
      }
    }
);
  }
);
  if (!config.files.isEmpty()) {
    threadService.runActionLater(() -> {
      config.files.stream().forEach(f -> {
        File file=new File(f).getAbsoluteFile();
        if (file.exists()) {
          logger.info(""String_Node_Str"",file);
          tabService.addTab(file.toPath());
        }
 else {
          logger.error(""String_Node_Str"",file);
        }
      }
);
    }
);
  }
  scene.getWindow().setOnCloseRequest(controller::closeAllTabs);
}","private void startApp(final Stage stage,final CmdlineConfig config) throws Throwable {
  final FXMLLoader parentLoader=new FXMLLoader();
  final FXMLLoader asciidocTableLoader=new FXMLLoader();
  final FXMLLoader markdownTableLoader=new FXMLLoader();
  context=SpringApplication.run(SpringAppConfig.class);
  asciidocTableLoader.setControllerFactory(context::getBean);
  markdownTableLoader.setControllerFactory(context::getBean);
  parentLoader.setControllerFactory(context::getBean);
  InputStream asciidocTableStream=getClass().getResourceAsStream(""String_Node_Str"");
  AnchorPane asciidocTableAnchor=asciidocTableLoader.load(asciidocTableStream);
  InputStream markdownTableStream=getClass().getResourceAsStream(""String_Node_Str"");
  AnchorPane markdownTableAnchor=markdownTableLoader.load(markdownTableStream);
  InputStream sceneStream=getClass().getResourceAsStream(""String_Node_Str"");
  Parent root=parentLoader.load(sceneStream);
  controller=parentLoader.getController();
  HostServicesDelegate hostServices=HostServicesFactory.getInstance(this);
  controller.setHostServices(hostServices);
  Scene scene=new Scene(root);
  scene.getStylesheets().add(""String_Node_Str"");
  stage.setMaximized(true);
  stage.setTitle(""String_Node_Str"");
  InputStream logoStream=getClass().getResourceAsStream(""String_Node_Str"");
  stage.getIcons().add(new Image(logoStream));
  Stage asciidocTableStage=new Stage();
  asciidocTableStage.setScene(new Scene(asciidocTableAnchor));
  asciidocTableStage.setTitle(""String_Node_Str"");
  asciidocTableStage.initModality(Modality.WINDOW_MODAL);
  asciidocTableStage.initOwner(scene.getWindow());
  asciidocTableStage.getIcons().add(new Image(logoStream));
  Stage markdownTableStage=new Stage();
  markdownTableStage.setScene(new Scene(markdownTableAnchor));
  markdownTableStage.setTitle(""String_Node_Str"");
  markdownTableStage.initModality(Modality.WINDOW_MODAL);
  markdownTableStage.initOwner(scene.getWindow());
  markdownTableStage.getIcons().add(new Image(logoStream));
  IOUtils.closeQuietly(asciidocTableStream);
  IOUtils.closeQuietly(markdownTableStream);
  IOUtils.closeQuietly(sceneStream);
  IOUtils.closeQuietly(logoStream);
  controller.setStage(stage);
  controller.setScene(scene);
  controller.setAsciidocTableAnchor(asciidocTableAnchor);
  controller.setMarkdownTableAnchor(markdownTableAnchor);
  controller.setAsciidocTableStage(asciidocTableStage);
  controller.setMarkdownTableStage(markdownTableStage);
  controller.initializeSaveOnBlur();
  stage.setScene(scene);
  stage.show();
  scene.getAccelerators().put(new KeyCodeCombination(KeyCode.S,SHORTCUT_DOWN),controller::saveDoc);
  scene.getAccelerators().put(new KeyCodeCombination(KeyCode.M,SHORTCUT_DOWN),controller::adjustSplitPane);
  scene.getAccelerators().put(new KeyCodeCombination(KeyCode.N,SHORTCUT_DOWN),controller::newDoc);
  scene.getAccelerators().put(new KeyCodeCombination(KeyCode.F4,SHORTCUT_DOWN),controller::showSettings);
  final ThreadService threadService=context.getBean(ThreadService.class);
  final TabService tabService=context.getBean(TabService.class);
  StartupNotification.registerStartupListener(parameters -> {
    threadService.runActionLater(() -> {
      String[] files=parameters.split(""String_Node_Str"");
      for (      String file : files) {
        file=file.replace(""String_Node_Str"",""String_Node_Str"");
        tabService.addTab(Paths.get(file).toAbsolutePath());
      }
    }
);
  }
);
  if (!config.files.isEmpty()) {
    threadService.runActionLater(() -> {
      config.files.stream().forEach(f -> {
        File file=new File(f).getAbsoluteFile();
        if (file.exists()) {
          logger.info(""String_Node_Str"",file);
          tabService.addTab(file.toPath());
        }
 else {
          logger.error(""String_Node_Str"",file);
        }
      }
);
    }
);
  }
  scene.getWindow().setOnCloseRequest(controller::closeAllTabs);
  if (controller.getTabPane().getTabs().isEmpty())   controller.newDoc();
}",0.9905924230867024
62363,"@Override public void initialize(URL url,ResourceBundle rb){
  initializePaths();
  initializePosixPermissions();
  initializeNashornConverter();
  threadService.runTaskLater(() -> {
    while (true) {
      try {
        renderLoop();
        waiterLoop();
      }
 catch (      Exception e) {
        logger.error(e.getMessage(),e);
      }
    }
  }
);
  threadService.runTaskLater(() -> {
    bindConfigurations();
    configurationService.loadConfigurations(this::checkNewVersion);
  }
);
  port=server.getEmbeddedServletContainer().getPort();
  progressBar.prefWidthProperty().bind(previewTabPane.widthProperty());
  progressBarTimeline=new Timeline(new KeyFrame(Duration.ZERO,new KeyValue(progressBar.progressProperty(),0)),new KeyFrame(Duration.seconds(15),new KeyValue(progressBar.progressProperty(),1)));
  this.previewTab=new PreviewTab(""String_Node_Str"",htmlPane);
  this.previewTab.setClosable(false);
  threadService.runActionLater(() -> {
    previewTabPane.getTabs().add(previewTab);
  }
,true);
  previewTabPane.getTabs().addListener((ListChangeListener)change -> {
    final StackPane header=(StackPane)previewTabPane.lookup(""String_Node_Str"");
    if (header != null) {
      if (previewTabPane.getTabs().size() == 1)       header.setPrefHeight(0);
 else       header.setPrefHeight(-1);
    }
  }
);
  previewTabPane.setRotateGraphic(true);
  initializeLogViewer();
  initializeDoctypes();
  previewTabPane.setTabClosingPolicy(TabPane.TabClosingPolicy.ALL_TABS);
  previewTabPane.setSide(Side.RIGHT);
  tooltipTimeFixService.fix();
  AwesomeDude.setIcon(htmlPro,AwesomeIcon.HTML5);
  AwesomeDude.setIcon(pdfPro,AwesomeIcon.FILE_PDF_ALT);
  AwesomeDude.setIcon(ebookPro,AwesomeIcon.BOOK);
  AwesomeDude.setIcon(docbookPro,AwesomeIcon.CODE);
  AwesomeDude.setIcon(odfPro,AwesomeIcon.FILE_WORD_ALT);
  AwesomeDude.setIcon(browserPro,AwesomeIcon.FLASH);
  AwesomeDude.setIcon(workingDirButton,AwesomeIcon.FOLDER_ALT,""String_Node_Str"");
  AwesomeDude.setIcon(panelShowHideMenuButton,AwesomeIcon.COLUMNS,""String_Node_Str"");
  AwesomeDude.setIcon(refreshLabel,AwesomeIcon.REFRESH,""String_Node_Str"");
  AwesomeDude.setIcon(goUpLabel,AwesomeIcon.LEVEL_UP,""String_Node_Str"");
  leftButton.setGraphic(AwesomeDude.createIconLabel(AwesomeIcon.ELLIPSIS_H,""String_Node_Str""));
  afxVersionItem.setText(String.join(""String_Node_Str"",""String_Node_Str"",version));
  ContextMenu htmlProMenu=new ContextMenu();
  htmlProMenu.getStyleClass().add(""String_Node_Str"");
  htmlPro.setContextMenu(htmlProMenu);
  htmlPro.setOnMouseClicked(event -> {
    htmlProMenu.show(htmlPro,event.getScreenX(),50);
  }
);
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.generateHtml();
  }
));
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.generateHtml(true);
  }
));
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").tip(""String_Node_Str"").click(event -> {
    this.cutCopy(lastRendered.getValue());
  }
));
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").tip(""String_Node_Str"").click(event -> {
    htmlPane.call(""String_Node_Str"",new Object[]{});
  }
));
  ContextMenu pdfProMenu=new ContextMenu();
  pdfProMenu.getStyleClass().add(""String_Node_Str"");
  pdfProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.generatePdf();
  }
));
  pdfProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.generatePdf(true);
  }
));
  pdfPro.setContextMenu(pdfProMenu);
  pdfPro.setOnMouseClicked(event -> {
    pdfProMenu.show(pdfPro,event.getScreenX(),50);
  }
);
  ContextMenu docbookProMenu=new ContextMenu();
  docbookProMenu.getStyleClass().add(""String_Node_Str"");
  docbookProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.convertDocbook();
  }
));
  docbookProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.convertDocbook(true);
  }
));
  docbookPro.setContextMenu(docbookProMenu);
  docbookPro.setOnMouseClicked(event -> {
    docbookProMenu.show(docbookPro,event.getScreenX(),50);
  }
);
  ContextMenu ebookProMenu=new ContextMenu();
  ebookProMenu.getStyleClass().add(""String_Node_Str"");
  ebookProMenu.getItems().add(MenuBuilt.name(""String_Node_Str"").add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.convertMobi();
  }
)).add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.convertMobi(true);
  }
)).build());
  ebookProMenu.getItems().add(MenuBuilt.name(""String_Node_Str"").add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.convertEpub();
  }
)).add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.convertEpub(true);
  }
)).build());
  ebookPro.setOnMouseClicked(event -> {
    ebookProMenu.show(ebookPro,event.getScreenX(),50);
  }
);
  ebookPro.setContextMenu(ebookProMenu);
  ContextMenu odfProMenu=new ContextMenu();
  odfProMenu.getStyleClass().add(""String_Node_Str"");
  odfProMenu.setAutoHide(true);
  odfProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    odfProMenu.hide();
    this.generateODFDocument();
  }
));
  odfProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    odfProMenu.hide();
    this.generateODFDocument(true);
  }
));
  odfPro.setContextMenu(odfProMenu);
  odfPro.setOnMouseClicked(event -> {
    odfProMenu.show(odfPro,event.getScreenX(),50);
  }
);
  browserPro.setOnMouseClicked(event -> {
    if (event.getButton() == MouseButton.PRIMARY)     this.externalBrowse();
  }
);
  fileSystemView.setCellFactory(param -> {
    TreeCell<Item> cell=new TextFieldTreeCell<Item>();
    cell.setOnDragDetected(event -> {
      Dragboard db=cell.startDragAndDrop(TransferMode.ANY);
      ClipboardContent content=new ClipboardContent();
      content.putFiles(Arrays.asList(cell.getTreeItem().getValue().getPath().toFile()));
      db.setContent(content);
    }
);
    return cell;
  }
);
  lastRendered.addListener(lastRenderedChangeListener);
  htmlPane.webEngine().setOnAlert(event -> {
    if (""String_Node_Str"".equals(event.getData())) {
      if (htmlPane.getMember(""String_Node_Str"").equals(""String_Node_Str"")) {
        htmlPane.setMember(""String_Node_Str"",this);
      }
      if (Objects.nonNull(lastRendered.getValue()))       lastRenderedChangeListener.changed(null,null,lastRendered.getValue());
    }
  }
);
  asciidocWebkitConverter.webEngine().setOnAlert(event -> {
    if (""String_Node_Str"".equals(event.getData())) {
      if (asciidocWebkitConverter.getMember(""String_Node_Str"").equals(""String_Node_Str"")) {
        asciidocWebkitConverter.setMember(""String_Node_Str"",this);
      }
      htmlPane.load(String.format(previewUrl,port));
    }
  }
);
  asciidocWebkitConverter.load(String.format(workerUrl,port));
  openFileTreeItem.setOnAction(event -> {
    ObservableList<TreeItem<Item>> selectedItems=fileSystemView.getSelectionModel().getSelectedItems();
    selectedItems.stream().map(e -> e.getValue()).map(e -> e.getPath()).filter(path -> {
      if (selectedItems.size() == 1)       return true;
      return !Files.isDirectory(path);
    }
).forEach(tabService::previewDocument);
  }
);
  deletePathItem.setOnAction(event -> {
    ObservableList<TreeItem<Item>> selectedItems=fileSystemView.getSelectionModel().getSelectedItems();
    AlertHelper.deleteAlert().ifPresent(btn -> {
      if (btn == ButtonType.YES)       selectedItems.stream().map(e -> e.getValue()).map(e -> e.getPath()).forEach(path -> threadService.runTaskLater(() -> {
        if (Files.isDirectory(path)) {
          IOHelper.deleteDirectory(path);
        }
 else {
          IOHelper.deleteIfExists(path);
        }
      }
));
    }
);
  }
);
  openFolderTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    path=Files.isDirectory(path) ? path : path.getParent();
    if (Objects.nonNull(path))     getHostServices().showDocument(path.toString());
  }
);
  openFolderListItem.setOnAction(event -> {
    Path path=Paths.get(recentListView.getSelectionModel().getSelectedItem());
    path=Files.isDirectory(path) ? path : path.getParent();
    if (Objects.nonNull(path))     getHostServices().showDocument(path.toString());
  }
);
  openFileListItem.setOnAction(this::openRecentListFile);
  copyPathListItem.setOnAction(event -> {
    this.cutCopy(recentListView.getSelectionModel().getSelectedItem());
  }
);
  copyTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    this.copyFile(path);
  }
);
  copyListItem.setOnAction(event -> {
    Path path=Paths.get(recentListView.getSelectionModel().getSelectedItem());
    this.copyFile(path);
  }
);
  fileSystemView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
  fileSystemView.setOnMouseClicked(event -> {
    TreeItem<Item> selectedItem=fileSystemView.getSelectionModel().getSelectedItem();
    if (Objects.isNull(selectedItem))     return;
    event.consume();
    Path selectedPath=selectedItem.getValue().getPath();
    if (event.getButton() == MouseButton.PRIMARY)     if (event.getClickCount() == 2)     tabService.previewDocument(selectedPath);
  }
);
  fileSystemView.getSelectionModel().getSelectedIndices().addListener((ListChangeListener<? super Integer>)p -> {
    ObservableList<TreeItem<Item>> selectedItems=fileSystemView.getSelectionModel().getSelectedItems();
    if (Objects.isNull(selectedItems))     return;
    if (selectedItems.size() > 1) {
      renameFile.setVisible(false);
      newMenu.setVisible(false);
      addToFavoriteDir.setVisible(false);
      renameSeparator.setVisible(false);
      if (favoriteDirMenu.getItems().size() > 0) {
        addToFavSeparator.setVisible(true);
      }
 else {
        addToFavSeparator.setVisible(false);
      }
    }
 else     if (selectedItems.size() == 1) {
      Path path=selectedItems.get(0).getValue().getPath();
      boolean isDirectory=Files.isDirectory(path);
      newMenu.setVisible(isDirectory);
      renameFile.setVisible(!isDirectory);
      renameSeparator.setVisible(true);
      addToFavoriteDir.setVisible(isDirectory);
      if (favoriteDirMenu.getItems().size() == 0 && !isDirectory) {
        addToFavSeparator.setVisible(false);
      }
 else {
        addToFavSeparator.setVisible(true);
      }
      ObservableList<String> favoriteDirectories=storedConfigBean.getFavoriteDirectories();
      if (favoriteDirectories.size() > 0) {
        boolean has=favoriteDirectories.contains(path.toString());
        if (has)         addToFavoriteDir.setDisable(true);
 else         addToFavoriteDir.setDisable(false);
      }
    }
  }
);
  tabService.initializeTabChangeListener(tabPane);
  newDoc(null);
}","@Override public void initialize(URL url,ResourceBundle rb){
  initializePaths();
  initializePosixPermissions();
  initializeNashornConverter();
  threadService.runTaskLater(() -> {
    while (true) {
      try {
        renderLoop();
        waiterLoop();
      }
 catch (      Exception e) {
        logger.error(e.getMessage(),e);
      }
    }
  }
);
  threadService.runTaskLater(() -> {
    bindConfigurations();
    configurationService.loadConfigurations(this::checkNewVersion);
  }
);
  port=server.getEmbeddedServletContainer().getPort();
  progressBar.prefWidthProperty().bind(previewTabPane.widthProperty());
  progressBarTimeline=new Timeline(new KeyFrame(Duration.ZERO,new KeyValue(progressBar.progressProperty(),0)),new KeyFrame(Duration.seconds(15),new KeyValue(progressBar.progressProperty(),1)));
  this.previewTab=new PreviewTab(""String_Node_Str"",htmlPane);
  this.previewTab.setClosable(false);
  threadService.runActionLater(() -> {
    previewTabPane.getTabs().add(previewTab);
  }
,true);
  previewTabPane.getTabs().addListener((ListChangeListener)change -> {
    final StackPane header=(StackPane)previewTabPane.lookup(""String_Node_Str"");
    if (header != null) {
      if (previewTabPane.getTabs().size() == 1)       header.setPrefHeight(0);
 else       header.setPrefHeight(-1);
    }
  }
);
  previewTabPane.setRotateGraphic(true);
  initializeLogViewer();
  initializeDoctypes();
  previewTabPane.setTabClosingPolicy(TabPane.TabClosingPolicy.ALL_TABS);
  previewTabPane.setSide(Side.RIGHT);
  tooltipTimeFixService.fix();
  AwesomeDude.setIcon(htmlPro,AwesomeIcon.HTML5);
  AwesomeDude.setIcon(pdfPro,AwesomeIcon.FILE_PDF_ALT);
  AwesomeDude.setIcon(ebookPro,AwesomeIcon.BOOK);
  AwesomeDude.setIcon(docbookPro,AwesomeIcon.CODE);
  AwesomeDude.setIcon(odfPro,AwesomeIcon.FILE_WORD_ALT);
  AwesomeDude.setIcon(browserPro,AwesomeIcon.FLASH);
  AwesomeDude.setIcon(workingDirButton,AwesomeIcon.FOLDER_ALT,""String_Node_Str"");
  AwesomeDude.setIcon(panelShowHideMenuButton,AwesomeIcon.COLUMNS,""String_Node_Str"");
  AwesomeDude.setIcon(refreshLabel,AwesomeIcon.REFRESH,""String_Node_Str"");
  AwesomeDude.setIcon(goUpLabel,AwesomeIcon.LEVEL_UP,""String_Node_Str"");
  leftButton.setGraphic(AwesomeDude.createIconLabel(AwesomeIcon.ELLIPSIS_H,""String_Node_Str""));
  afxVersionItem.setText(String.join(""String_Node_Str"",""String_Node_Str"",version));
  ContextMenu htmlProMenu=new ContextMenu();
  htmlProMenu.getStyleClass().add(""String_Node_Str"");
  htmlPro.setContextMenu(htmlProMenu);
  htmlPro.setOnMouseClicked(event -> {
    htmlProMenu.show(htmlPro,event.getScreenX(),50);
  }
);
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.generateHtml();
  }
));
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.generateHtml(true);
  }
));
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").tip(""String_Node_Str"").click(event -> {
    this.cutCopy(lastRendered.getValue());
  }
));
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").tip(""String_Node_Str"").click(event -> {
    htmlPane.call(""String_Node_Str"",new Object[]{});
  }
));
  ContextMenu pdfProMenu=new ContextMenu();
  pdfProMenu.getStyleClass().add(""String_Node_Str"");
  pdfProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.generatePdf();
  }
));
  pdfProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.generatePdf(true);
  }
));
  pdfPro.setContextMenu(pdfProMenu);
  pdfPro.setOnMouseClicked(event -> {
    pdfProMenu.show(pdfPro,event.getScreenX(),50);
  }
);
  ContextMenu docbookProMenu=new ContextMenu();
  docbookProMenu.getStyleClass().add(""String_Node_Str"");
  docbookProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.convertDocbook();
  }
));
  docbookProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.convertDocbook(true);
  }
));
  docbookPro.setContextMenu(docbookProMenu);
  docbookPro.setOnMouseClicked(event -> {
    docbookProMenu.show(docbookPro,event.getScreenX(),50);
  }
);
  ContextMenu ebookProMenu=new ContextMenu();
  ebookProMenu.getStyleClass().add(""String_Node_Str"");
  ebookProMenu.getItems().add(MenuBuilt.name(""String_Node_Str"").add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.convertMobi();
  }
)).add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.convertMobi(true);
  }
)).build());
  ebookProMenu.getItems().add(MenuBuilt.name(""String_Node_Str"").add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.convertEpub();
  }
)).add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.convertEpub(true);
  }
)).build());
  ebookPro.setOnMouseClicked(event -> {
    ebookProMenu.show(ebookPro,event.getScreenX(),50);
  }
);
  ebookPro.setContextMenu(ebookProMenu);
  ContextMenu odfProMenu=new ContextMenu();
  odfProMenu.getStyleClass().add(""String_Node_Str"");
  odfProMenu.setAutoHide(true);
  odfProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    odfProMenu.hide();
    this.generateODFDocument();
  }
));
  odfProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    odfProMenu.hide();
    this.generateODFDocument(true);
  }
));
  odfPro.setContextMenu(odfProMenu);
  odfPro.setOnMouseClicked(event -> {
    odfProMenu.show(odfPro,event.getScreenX(),50);
  }
);
  browserPro.setOnMouseClicked(event -> {
    if (event.getButton() == MouseButton.PRIMARY)     this.externalBrowse();
  }
);
  fileSystemView.setCellFactory(param -> {
    TreeCell<Item> cell=new TextFieldTreeCell<Item>();
    cell.setOnDragDetected(event -> {
      Dragboard db=cell.startDragAndDrop(TransferMode.ANY);
      ClipboardContent content=new ClipboardContent();
      content.putFiles(Arrays.asList(cell.getTreeItem().getValue().getPath().toFile()));
      db.setContent(content);
    }
);
    return cell;
  }
);
  lastRendered.addListener(lastRenderedChangeListener);
  htmlPane.webEngine().setOnAlert(event -> {
    if (""String_Node_Str"".equals(event.getData())) {
      if (htmlPane.getMember(""String_Node_Str"").equals(""String_Node_Str"")) {
        htmlPane.setMember(""String_Node_Str"",this);
      }
      if (Objects.nonNull(lastRendered.getValue()))       lastRenderedChangeListener.changed(null,null,lastRendered.getValue());
    }
  }
);
  asciidocWebkitConverter.webEngine().setOnAlert(event -> {
    if (""String_Node_Str"".equals(event.getData())) {
      if (asciidocWebkitConverter.getMember(""String_Node_Str"").equals(""String_Node_Str"")) {
        asciidocWebkitConverter.setMember(""String_Node_Str"",this);
      }
      htmlPane.load(String.format(previewUrl,port));
    }
  }
);
  asciidocWebkitConverter.load(String.format(workerUrl,port));
  openFileTreeItem.setOnAction(event -> {
    ObservableList<TreeItem<Item>> selectedItems=fileSystemView.getSelectionModel().getSelectedItems();
    selectedItems.stream().map(e -> e.getValue()).map(e -> e.getPath()).filter(path -> {
      if (selectedItems.size() == 1)       return true;
      return !Files.isDirectory(path);
    }
).forEach(tabService::previewDocument);
  }
);
  deletePathItem.setOnAction(event -> {
    ObservableList<TreeItem<Item>> selectedItems=fileSystemView.getSelectionModel().getSelectedItems();
    AlertHelper.deleteAlert().ifPresent(btn -> {
      if (btn == ButtonType.YES)       selectedItems.stream().map(e -> e.getValue()).map(e -> e.getPath()).forEach(path -> threadService.runTaskLater(() -> {
        if (Files.isDirectory(path)) {
          IOHelper.deleteDirectory(path);
        }
 else {
          IOHelper.deleteIfExists(path);
        }
      }
));
    }
);
  }
);
  openFolderTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    path=Files.isDirectory(path) ? path : path.getParent();
    if (Objects.nonNull(path))     getHostServices().showDocument(path.toString());
  }
);
  openFolderListItem.setOnAction(event -> {
    Path path=Paths.get(recentListView.getSelectionModel().getSelectedItem());
    path=Files.isDirectory(path) ? path : path.getParent();
    if (Objects.nonNull(path))     getHostServices().showDocument(path.toString());
  }
);
  openFileListItem.setOnAction(this::openRecentListFile);
  copyPathListItem.setOnAction(event -> {
    this.cutCopy(recentListView.getSelectionModel().getSelectedItem());
  }
);
  copyTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    this.copyFile(path);
  }
);
  copyListItem.setOnAction(event -> {
    Path path=Paths.get(recentListView.getSelectionModel().getSelectedItem());
    this.copyFile(path);
  }
);
  fileSystemView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
  fileSystemView.setOnMouseClicked(event -> {
    TreeItem<Item> selectedItem=fileSystemView.getSelectionModel().getSelectedItem();
    if (Objects.isNull(selectedItem))     return;
    event.consume();
    Path selectedPath=selectedItem.getValue().getPath();
    if (event.getButton() == MouseButton.PRIMARY)     if (event.getClickCount() == 2)     tabService.previewDocument(selectedPath);
  }
);
  fileSystemView.getSelectionModel().getSelectedIndices().addListener((ListChangeListener<? super Integer>)p -> {
    ObservableList<TreeItem<Item>> selectedItems=fileSystemView.getSelectionModel().getSelectedItems();
    if (Objects.isNull(selectedItems))     return;
    if (selectedItems.size() > 1) {
      renameFile.setVisible(false);
      newMenu.setVisible(false);
      addToFavoriteDir.setVisible(false);
      renameSeparator.setVisible(false);
      if (favoriteDirMenu.getItems().size() > 0) {
        addToFavSeparator.setVisible(true);
      }
 else {
        addToFavSeparator.setVisible(false);
      }
    }
 else     if (selectedItems.size() == 1) {
      Path path=selectedItems.get(0).getValue().getPath();
      boolean isDirectory=Files.isDirectory(path);
      newMenu.setVisible(isDirectory);
      renameFile.setVisible(!isDirectory);
      renameSeparator.setVisible(true);
      addToFavoriteDir.setVisible(isDirectory);
      if (favoriteDirMenu.getItems().size() == 0 && !isDirectory) {
        addToFavSeparator.setVisible(false);
      }
 else {
        addToFavSeparator.setVisible(true);
      }
      ObservableList<String> favoriteDirectories=storedConfigBean.getFavoriteDirectories();
      if (favoriteDirectories.size() > 0) {
        boolean has=favoriteDirectories.contains(path.toString());
        if (has)         addToFavoriteDir.setDisable(true);
 else         addToFavoriteDir.setDisable(false);
      }
    }
  }
);
  tabService.initializeTabChangeListener(tabPane);
}",0.9992524063171666
62364,"public void saveDoc(){
  if (Objects.isNull(getPath()))   return;
  if (!isChanged())   return;
  Optional<IOException> exception=IOHelper.writeToFile(getPath(),editorPane.getEditorValue(),TRUNCATE_EXISTING,CREATE);
  if (exception.isPresent())   return;
  setTabText(getPath().getFileName().toString());
  ObservableList<String> recentFiles=storedConfigBean.getRecentFiles();
  recentFiles.remove(getPath().toString());
  recentFiles.add(0,getPath().toString());
  directoryService.setInitialDirectory(Optional.ofNullable(getPath().toFile()));
}","public void saveDoc(){
  if (!isChanged())   return;
  if (Objects.isNull(getPath())) {
    final FileChooser fileChooser=directoryService.newFileChooser(String.format(""String_Node_Str""));
    fileChooser.getExtensionFilters().addAll(ExtensionFilters.ASCIIDOC);
    fileChooser.getExtensionFilters().addAll(ExtensionFilters.MARKDOWN);
    fileChooser.getExtensionFilters().addAll(ExtensionFilters.ALL);
    File file=fileChooser.showSaveDialog(null);
    setPath(file.toPath());
    setTabText(file.toPath().getFileName().toString());
  }
  Optional<IOException> exception=IOHelper.writeToFile(getPath(),editorPane.getEditorValue(),TRUNCATE_EXISTING,CREATE);
  if (exception.isPresent())   return;
  setTabText(getPath().getFileName().toString());
  ObservableList<String> recentFiles=storedConfigBean.getRecentFiles();
  recentFiles.remove(getPath().toString());
  recentFiles.add(0,getPath().toString());
  directoryService.setInitialDirectory(Optional.ofNullable(getPath().toFile()));
}",0.6618892508143323
62365,"public Path getSaveOutputPath(FileChooser.ExtensionFilter extensionFilter,boolean askPath){
  if (!Platform.isFxApplicationThread()) {
    final CompletableFuture<Path> completableFuture=new CompletableFuture<>();
    completableFuture.runAsync(() -> {
      threadService.runActionLater(() -> {
        try {
          Path outputPath=getSaveOutputPath(extensionFilter,askPath);
          completableFuture.complete(outputPath);
        }
 catch (        Exception e) {
          completableFuture.completeExceptionally(e);
        }
      }
);
    }
,threadService.executor());
    return completableFuture.join();
  }
  final Path currentTabPath=current.currentPath().get();
  final Path currentTabPathDir=currentTabPath.getParent();
  String tabText=current.getCurrentTabText().replace(""String_Node_Str"",""String_Node_Str"").trim();
  tabText=tabText.contains(""String_Node_Str"") ? tabText.split(""String_Node_Str"")[0] : tabText;
  if (!askPath) {
    return currentTabPathDir.resolve(extensionFilter.getExtensions().get(0).replace(""String_Node_Str"",tabText));
  }
  final FileChooser fileChooser=this.newFileChooser(String.format(""String_Node_Str"",extensionFilter.getDescription()));
  fileChooser.getExtensionFilters().addAll(extensionFilter);
  File file=fileChooser.showSaveDialog(null);
  if (Objects.isNull(file)) {
    return currentTabPathDir.resolve(extensionFilter.getExtensions().get(0).replace(""String_Node_Str"",tabText));
  }
  return file.toPath();
}","public Path getSaveOutputPath(FileChooser.ExtensionFilter extensionFilter,boolean askPath){
  if (!Platform.isFxApplicationThread()) {
    final CompletableFuture<Path> completableFuture=new CompletableFuture<>();
    completableFuture.runAsync(() -> {
      threadService.runActionLater(() -> {
        try {
          Path outputPath=getSaveOutputPath(extensionFilter,askPath);
          completableFuture.complete(outputPath);
        }
 catch (        Exception e) {
          completableFuture.completeExceptionally(e);
        }
      }
);
    }
,threadService.executor());
    return completableFuture.join();
  }
  boolean isNew=current.currentTab().isNew();
  if (isNew) {
    controller.saveDoc();
  }
  final Path currentTabPath=current.currentPath().get();
  final Path currentTabPathDir=currentTabPath.getParent();
  String tabText=current.getCurrentTabText().replace(""String_Node_Str"",""String_Node_Str"").trim();
  tabText=tabText.contains(""String_Node_Str"") ? tabText.split(""String_Node_Str"")[0] : tabText;
  if (!askPath) {
    return currentTabPathDir.resolve(extensionFilter.getExtensions().get(0).replace(""String_Node_Str"",tabText));
  }
  final FileChooser fileChooser=this.newFileChooser(String.format(""String_Node_Str"",extensionFilter.getDescription()));
  fileChooser.getExtensionFilters().addAll(extensionFilter);
  File file=fileChooser.showSaveDialog(null);
  if (Objects.isNull(file)) {
    return currentTabPathDir.resolve(extensionFilter.getExtensions().get(0).replace(""String_Node_Str"",tabText));
  }
  return file.toPath();
}",0.969857568731368
62366,"@WebkitCall(from=""String_Node_Str"") public void appendFormula(String formula,String imagesDir,String imageTarget){
  mathJaxService.appendFormula(formula,imagesDir,imageTarget);
}","@WebkitCall(from=""String_Node_Str"") public void appendFormula(String formula,String imagesDir,String imageTarget){
  threadService.runActionLater(() -> {
    mathJaxService.appendFormula(formula,imagesDir,imageTarget);
  }
);
}",0.8817733990147784
62367,"@WebkitCall(from=""String_Node_Str"") public JSObject getImageInfo(String path,JSObject info){
  if (path.startsWith(""String_Node_Str""))   path=path.substring(1);
  Path parent=null;
  try {
    if (current.currentPath().isPresent()) {
      parent=current.currentPath().get().getParent();
    }
 else {
      parent=directoryService.workingDirectory();
    }
  }
 catch (  Exception e) {
    logger.debug(""String_Node_Str"",e);
  }
  if (Objects.isNull(parent))   return info;
  Path imagePath=parent.resolve(path);
  if (Files.notExists(imagePath))   return info;
  try (ImageInputStream in=ImageIO.createImageInputStream(imagePath.toFile())){
    final Iterator<ImageReader> readers=ImageIO.getImageReaders(in);
    if (readers.hasNext()) {
      ImageReader reader=readers.next();
      try {
        reader.setInput(in);
        int width=reader.getWidth(0);
        int height=reader.getHeight(0);
        info.setMember(""String_Node_Str"",width);
        info.setMember(""String_Node_Str"",height);
        reader.dispose();
        return info;
      }
  finally {
        reader.dispose();
      }
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
  return info;
}","@WebkitCall(from=""String_Node_Str"") public void getImageInfo(final String path,Object info){
  if ((info instanceof JSObject)) {
    threadService.runActionLater(() -> {
      getImageSizeInfo(path,info);
    }
);
  }
 else   if (info instanceof jdk.nashorn.api.scripting.JSObject) {
    getImageSizeInfo(path,info);
  }
}",0.1120632827949901
62368,"@WebkitCall(from=""String_Node_Str"") public void chartBuildFromCsv(String csvFile,String imagesDir,String imageTarget,String chartType,String options){
  if (Objects.isNull(imageTarget) || Objects.isNull(chartType))   return;
  getCurrent().currentPath().map(Path::getParent).ifPresent(root -> {
    threadService.runTaskLater(() -> {
      String csvContent=IOHelper.readFile(root.resolve(csvFile));
      threadService.runActionLater(() -> {
        try {
          Map<String,String> optMap=parseChartOptions(options);
          optMap.put(""String_Node_Str"",csvFile);
          chartProvider.getProvider(chartType).chartBuild(csvContent,imagesDir,imageTarget,optMap);
        }
 catch (        Exception e) {
          logger.info(e.getMessage(),e);
        }
      }
);
    }
);
  }
);
}","@WebkitCall(from=""String_Node_Str"") public void chartBuildFromCsv(String csvFile,String imagesDir,String imageTarget,String chartType,String options){
  threadService.runActionLater(() -> {
    if (Objects.isNull(imageTarget) || Objects.isNull(chartType))     return;
    current.currentPath().map(Path::getParent).ifPresent(root -> {
      threadService.runTaskLater(() -> {
        String csvContent=IOHelper.readFile(root.resolve(csvFile));
        threadService.runActionLater(() -> {
          try {
            Map<String,String> optMap=parseChartOptions(options);
            optMap.put(""String_Node_Str"",csvFile);
            chartProvider.getProvider(chartType).chartBuild(csvContent,imagesDir,imageTarget,optMap);
          }
 catch (          Exception e) {
            logger.info(e.getMessage(),e);
          }
        }
);
      }
);
    }
);
  }
);
}",0.92809667673716
62369,"public Path workingDirectory(){
  return workingDirectory.orElseGet(workingDirectorySupplier);
}","public Path workingDirectory(){
  return workingDirectory.orElseGet(this::workingDirectorySupplier);
}",0.9696969696969696
62370,"@Autowired public DirectoryService(final ApplicationController controller,final FileBrowseService fileBrowser,final Current current,PathResolverService pathResolver,StoredConfigBean storedConfigBean,FileWatchService fileWatchService,ThreadService threadService){
  this.controller=controller;
  this.fileBrowser=fileBrowser;
  this.current=current;
  this.pathResolver=pathResolver;
  this.storedConfigBean=storedConfigBean;
  this.fileWatchService=fileWatchService;
  this.threadService=threadService;
  workingDirectorySupplier=() -> {
    final DirectoryChooser directoryChooser=newDirectoryChooser(""String_Node_Str"");
    final File file=directoryChooser.showDialog(null);
    workingDirectory=Optional.ofNullable(file.toPath());
    workingDirectory.ifPresent(fileBrowser::browse);
    return Objects.nonNull(file) ? file.toPath() : null;
  }
;
  pathSaveSupplier=() -> {
    final FileChooser chooser=newFileChooser(""String_Node_Str"");
    chooser.getExtensionFilters().add(new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    chooser.getExtensionFilters().add(new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    File file=chooser.showSaveDialog(null);
    return Objects.nonNull(file) ? file.toPath() : null;
  }
;
}","@Autowired public DirectoryService(final ApplicationController controller,final FileBrowseService fileBrowser,final Current current,PathResolverService pathResolver,StoredConfigBean storedConfigBean,FileWatchService fileWatchService,ThreadService threadService){
  this.controller=controller;
  this.fileBrowser=fileBrowser;
  this.current=current;
  this.pathResolver=pathResolver;
  this.storedConfigBean=storedConfigBean;
  this.fileWatchService=fileWatchService;
  this.threadService=threadService;
  pathSaveSupplier=() -> {
    final FileChooser chooser=newFileChooser(""String_Node_Str"");
    chooser.getExtensionFilters().add(new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    chooser.getExtensionFilters().add(new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    File file=chooser.showSaveDialog(null);
    return Objects.nonNull(file) ? file.toPath() : null;
  }
;
}",0.4925312878482035
62371,"public FXFormNode call(Void aVoid){
  choiceBox.getSelectionModel().selectedItemProperty().addListener((observable,oldValue,newValue) -> {
    if (Objects.nonNull(newValue)) {
      if (!newValue.equals(choiceBox.getItems().get(0)))       choiceBox.getItems().set(0,newValue);
    }
  }
);
  FXFormNodeWrapper fxFormNodeWrapper=new FXFormNodeWrapper(choiceBox,choiceBox.itemsProperty());
  choiceBox.itemsProperty().addListener(new ChangeListener(){
    @Override public void changed(    ObservableValue observable,    Object oldValue,    Object newValue){
      if (Objects.nonNull(oldValue)) {
        ObservableList observableList=(ObservableList)oldValue;
        observableList.removeListener(this::addListener);
      }
      if (Objects.nonNull(newValue)) {
        ObservableList observableList=(ObservableList)newValue;
        observableList.addListener(this::addListener);
      }
    }
    private void addListener(    ListChangeListener.Change change){
      change.next();
      if (change.wasReplaced()) {
        choiceBox.getSelectionModel().selectFirst();
      }
    }
  }
);
  return fxFormNodeWrapper;
}","public FXFormNode call(Void aVoid){
  choiceBox.getSelectionModel().selectedItemProperty().addListener((observable,oldValue,newValue) -> {
    if (Objects.nonNull(newValue)) {
      if (!newValue.equals(choiceBox.getItems().get(0))) {
        choiceBox.getItems().removeAll(newValue);
        choiceBox.getItems().add(0,newValue);
      }
    }
  }
);
  FXFormNodeWrapper fxFormNodeWrapper=new FXFormNodeWrapper(choiceBox,choiceBox.itemsProperty());
  choiceBox.itemsProperty().addListener(new ChangeListener(){
    @Override public void changed(    ObservableValue observable,    Object oldValue,    Object newValue){
      if (Objects.nonNull(oldValue)) {
        ObservableList observableList=(ObservableList)oldValue;
        observableList.removeListener(this::addListener);
      }
      if (Objects.nonNull(newValue)) {
        ObservableList observableList=(ObservableList)newValue;
        observableList.addListener(this::addListener);
      }
    }
    private void addListener(    ListChangeListener.Change change){
      change.next();
      if (change.wasReplaced()) {
        choiceBox.getSelectionModel().selectFirst();
      }
    }
  }
);
  return fxFormNodeWrapper;
}",0.9705627705627704
62372,"private void bindConfigurations(){
  editorConfigBean.showGutterProperty().addListener((observable,oldValue,newValue) -> {
    if (Objects.nonNull(newValue)) {
      current.currentEditor().setShowGutter(newValue);
    }
  }
);
  editorConfigBean.useWrapModeProperty().addListener((observable,oldValue,newValue) -> {
    if (Objects.nonNull(newValue)) {
      current.currentEditor().setUseWrapMode(newValue);
    }
  }
);
  editorConfigBean.wrapLimitProperty().addListener((observable,oldValue,newValue) -> {
    if (Objects.nonNull(newValue)) {
      current.currentEditor().setWrapLimitRange(newValue);
    }
  }
);
  editorConfigBean.directoryPanelProperty().addListener((observable,oldValue,newValue) -> {
    if (newValue) {
      showFileBrowser();
    }
 else {
      hideFileBrowser(null);
    }
  }
);
  ListChangeListener<String> themeChangeListener=c -> {
    c.next();
    if (c.wasReplaced()) {
      String theme=c.getList().get(0);
      current.currentEditor().setTheme(theme);
    }
  }
;
  editorConfigBean.editorThemeProperty().addListener((observable,oldValue,newValue) -> {
    if (Objects.nonNull(newValue)) {
      newValue.addListener(themeChangeListener);
    }
    if (Objects.nonNull(oldValue)) {
      oldValue.removeListener(themeChangeListener);
    }
  }
);
  editorConfigBean.fontSizeProperty().addListener((observable,oldValue,newValue) -> {
    current.currentEditor().setFontSize(newValue.intValue());
  }
);
}","private void bindConfigurations(){
  editorConfigBean.showGutterProperty().addListener((observable,oldValue,newValue) -> {
    if (Objects.nonNull(newValue)) {
      current.currentEditor().setShowGutter(newValue);
    }
  }
);
  editorConfigBean.useWrapModeProperty().addListener((observable,oldValue,newValue) -> {
    if (Objects.nonNull(newValue)) {
      current.currentEditor().setUseWrapMode(newValue);
    }
  }
);
  editorConfigBean.wrapLimitProperty().addListener((observable,oldValue,newValue) -> {
    if (Objects.nonNull(newValue)) {
      current.currentEditor().setWrapLimitRange(newValue);
    }
  }
);
  editorConfigBean.directoryPanelProperty().addListener((observable,oldValue,newValue) -> {
    if (newValue) {
      showFileBrowser();
    }
 else {
      hideFileBrowser(null);
    }
  }
);
  ListChangeListener<String> themeChangeListener=c -> {
    c.next();
    if (c.wasAdded()) {
      String theme=c.getList().get(0);
      current.currentEditor().setTheme(theme);
    }
  }
;
  editorConfigBean.editorThemeProperty().addListener((observable,oldValue,newValue) -> {
    if (Objects.nonNull(newValue)) {
      newValue.addListener(themeChangeListener);
    }
    if (Objects.nonNull(oldValue)) {
      oldValue.removeListener(themeChangeListener);
    }
  }
);
  editorConfigBean.fontSizeProperty().addListener((observable,oldValue,newValue) -> {
    current.currentEditor().setFontSize(newValue.intValue());
  }
);
}",0.9968847352024922
62373,"@WebkitCall(from=""String_Node_Str"") public JSObject getImageInfo(String path,JSObject info){
  Path parent=null;
  try {
    if (current.currentPath().isPresent()) {
      parent=current.currentPath().get().getParent();
    }
 else {
      parent=directoryService.workingDirectory();
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
  Path imagePath=parent.resolve(path);
  if (Files.notExists(imagePath))   return info;
  try (ImageInputStream in=ImageIO.createImageInputStream(imagePath.toFile())){
    final Iterator<ImageReader> readers=ImageIO.getImageReaders(in);
    if (readers.hasNext()) {
      ImageReader reader=readers.next();
      try {
        reader.setInput(in);
        int width=reader.getWidth(0);
        int height=reader.getHeight(0);
        info.setMember(""String_Node_Str"",width);
        info.setMember(""String_Node_Str"",height);
        reader.dispose();
        return info;
      }
  finally {
        reader.dispose();
      }
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
  return info;
}","@WebkitCall(from=""String_Node_Str"") public JSObject getImageInfo(String path,JSObject info){
  Path parent=null;
  try {
    if (current.currentPath().isPresent()) {
      parent=current.currentPath().get().getParent();
    }
 else {
      parent=directoryService.workingDirectory();
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
  if (Objects.isNull(parent))   return info;
  Path imagePath=parent.resolve(path);
  if (Files.notExists(imagePath))   return info;
  try (ImageInputStream in=ImageIO.createImageInputStream(imagePath.toFile())){
    final Iterator<ImageReader> readers=ImageIO.getImageReaders(in);
    if (readers.hasNext()) {
      ImageReader reader=readers.next();
      try {
        reader.setInput(in);
        int width=reader.getWidth(0);
        int height=reader.getHeight(0);
        info.setMember(""String_Node_Str"",width);
        info.setMember(""String_Node_Str"",height);
        reader.dispose();
        return info;
      }
  finally {
        reader.dispose();
      }
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
  return info;
}",0.9796287913082844
62374,"@WebkitCall(from=""String_Node_Str"") public String readAsciidoctorResource(String uri,Integer parent){
  if (uri.matches(""String_Node_Str"") && getIncludeAsciidocResource())   return String.format(""String_Node_Str"",uri);
  final CompletableFuture<String> completableFuture=new CompletableFuture();
  completableFuture.runAsync(() -> {
    threadService.runTaskLater(() -> {
      PathFinderService fileReader=applicationContext.getBean(""String_Node_Str"",PathFinderService.class);
      Path path=fileReader.findPath(uri,parent);
      if (!Files.exists(path))       completableFuture.complete(""String_Node_Str"");
      completableFuture.complete(IOHelper.readFile(path));
    }
);
  }
);
  return completableFuture.join();
}","@WebkitCall(from=""String_Node_Str"") public String readAsciidoctorResource(String uri,Integer parent){
  if (uri.matches(""String_Node_Str"") && getIncludeAsciidocResource())   return String.format(""String_Node_Str"",uri);
  final CompletableFuture<String> completableFuture=new CompletableFuture();
  completableFuture.runAsync(() -> {
    threadService.runTaskLater(() -> {
      PathFinderService fileReader=applicationContext.getBean(""String_Node_Str"",PathFinderService.class);
      Path path=fileReader.findPath(uri,parent);
      if (!Files.exists(path)) {
        completableFuture.complete(""String_Node_Str"");
      }
 else {
        completableFuture.complete(IOHelper.readFile(path));
      }
    }
);
  }
);
  return completableFuture.join();
}",0.9755766621438264
62375,"public void registerWatcher(Path path){
  threadService.runTaskLater(() -> {
    try {
      if (Objects.isNull(watcher)) {
        watcher=FileSystems.getDefault().newWatchService();
      }
      if (!path.equals(lastWatchedPath)) {
        if (Objects.nonNull(lastWatchKey)) {
          lastWatchKey.cancel();
        }
        lastWatchedPath=path;
        this.lastWatchKey=path.register(watcher,ENTRY_CREATE,ENTRY_DELETE,ENTRY_MODIFY);
      }
      logger.debug(""String_Node_Str"",path);
      while (true) {
        if (!lastWatchKey.isValid())         break;
        this.watckKey=watcher.take();
        List<WatchEvent<?>> watchEvents=watckKey.pollEvents();
        boolean updateFsView=false;
        for (        WatchEvent<?> event : watchEvents) {
          WatchEvent.Kind<?> kind=event.kind();
          if (kind == ENTRY_MODIFY && event.count() == 1) {
            WatchEvent<Path> ev=(WatchEvent<Path>)event;
            Path modifiedPath=path.resolve(ev.context());
            threadService.runActionLater(() -> {
              ObservableList<Tab> tabs=controller.getTabPane().getTabs();
              for (              Tab tab : tabs) {
                MyTab myTab=(MyTab)tab;
                if (modifiedPath.equals(myTab.getPath())) {
                  myTab.askReloadDocument(""String_Node_Str"");
                  break;
                }
              }
              watckKey.reset();
            }
);
          }
 else           if (kind == ENTRY_MODIFY && event.count() > 1) {
            watckKey.reset();
          }
 else {
            updateFsView=true;
            watckKey.reset();
          }
        }
        if (updateFsView) {
          fileBrowseService.browse(lastWatchedPath);
        }
      }
    }
 catch (    ClosedWatchServiceException e) {
      logger.debug(""String_Node_Str"",path,e);
    }
catch (    Exception e) {
      logger.debug(""String_Node_Str"",path,e);
    }
  }
);
}","public void registerWatcher(Path path){
  threadService.runTaskLater(() -> {
    try {
      if (Objects.isNull(watcher)) {
        watcher=FileSystems.getDefault().newWatchService();
      }
      if (!path.equals(lastWatchedPath)) {
        if (Objects.nonNull(lastWatchKey)) {
          lastWatchKey.cancel();
          watcher.close();
          watcher=FileSystems.getDefault().newWatchService();
        }
        lastWatchedPath=path;
        this.lastWatchKey=path.register(watcher,ENTRY_CREATE,ENTRY_DELETE,ENTRY_MODIFY);
      }
      logger.debug(""String_Node_Str"",path);
      while (true) {
        if (!lastWatchKey.isValid())         break;
        this.watckKey=watcher.take();
        List<WatchEvent<?>> watchEvents=watckKey.pollEvents();
        boolean updateFsView=false;
        for (        WatchEvent<?> event : watchEvents) {
          WatchEvent.Kind<?> kind=event.kind();
          if (kind == ENTRY_MODIFY && event.count() == 1) {
            WatchEvent<Path> ev=(WatchEvent<Path>)event;
            Path modifiedPath=path.resolve(ev.context());
            threadService.runActionLater(() -> {
              ObservableList<Tab> tabs=controller.getTabPane().getTabs();
              for (              Tab tab : tabs) {
                MyTab myTab=(MyTab)tab;
                if (modifiedPath.equals(myTab.getPath())) {
                  myTab.askReloadDocument(""String_Node_Str"");
                  break;
                }
              }
              watckKey.reset();
            }
);
          }
 else           if (kind == ENTRY_MODIFY && event.count() > 1) {
            watckKey.reset();
          }
 else {
            updateFsView=true;
            watckKey.reset();
          }
        }
        if (updateFsView) {
          fileBrowseService.browse(lastWatchedPath);
        }
      }
    }
 catch (    ClosedWatchServiceException e) {
      logger.debug(""String_Node_Str"",path,e);
    }
catch (    Exception e) {
      logger.debug(""String_Node_Str"",path,e);
    }
  }
);
}",0.9774283540451432
62376,"public void browse(final Path browserPath){
  TreeView<Item> treeView=controller.getTreeView();
  int selectedIndex=treeView.getSelectionModel().getSelectedIndex();
  if (selectedIndex != -1)   lastSelectedItem=selectedIndex;
  threadService.runActionLater(() -> {
    rootItem=new TreeItem<>(new Item(browserPath,String.format(""String_Node_Str"",browserPath)),awesomeService.getIcon(browserPath));
    rootItem.setExpanded(true);
    treeView.setRoot(rootItem);
    threadService.runTaskLater(() -> {
      this.addPathToTree(browserPath,path -> {
        threadService.runActionLater(r -> addToTreeView(path,rootItem));
      }
);
      threadService.runActionLater(r -> {
        if (Objects.nonNull(lastSelectedItem))         treeView.getSelectionModel().select(lastSelectedItem);
      }
);
    }
);
  }
);
  logger.debug(""String_Node_Str"",browserPath);
}","public void browse(final Path browserPath){
  TreeView<Item> treeView=controller.getTreeView();
  int selectedIndex=treeView.getSelectionModel().getSelectedIndex();
  if (selectedIndex != -1)   lastSelectedItem=selectedIndex;
  threadService.runActionLater(() -> {
    rootItem=new TreeItem<>(new Item(browserPath,String.format(""String_Node_Str"",browserPath)),awesomeService.getIcon(browserPath));
    rootItem.setExpanded(true);
    treeView.setRoot(rootItem);
    this.addPathToTree(browserPath,path -> {
      this.addToTreeView(path,rootItem);
    }
);
    if (Objects.nonNull(lastSelectedItem))     treeView.getSelectionModel().select(lastSelectedItem);
  }
);
  logger.debug(""String_Node_Str"",browserPath);
}",0.845518118245391
62377,"@WebkitCall public void pasteRaw(){
  JSObject editor=(JSObject)current.currentEngine().executeScript(""String_Node_Str"");
  if (clipboard.hasFiles()) {
    Optional<String> block=parserService.toImageBlock(clipboard.getFiles());
    if (block.isPresent()) {
      editor.call(""String_Node_Str"",block.get());
      return;
    }
  }
  editor.call(""String_Node_Str"",clipboard.getString());
}","@WebkitCall public void pasteRaw(){
  JSObject editor=(JSObject)current.currentEngine().executeScript(""String_Node_Str"");
  if (clipboard.hasFiles()) {
    Optional<String> block=parserService.toImageBlock(clipboard.getFiles());
    if (block.isPresent()) {
      editor.call(""String_Node_Str"",block.get());
      return;
    }
  }
  editor.call(""String_Node_Str"",""String_Node_Str"");
}",0.9509043927648578
62378,"@WebkitCall public void paste(){
  JSObject window=(JSObject)htmlPane.webEngine().executeScript(""String_Node_Str"");
  JSObject editor=(JSObject)current.currentEngine().executeScript(""String_Node_Str"");
  if (clipboard.hasFiles()) {
    Optional<String> block=parserService.toImageBlock(clipboard.getFiles());
    if (block.isPresent()) {
      editor.call(""String_Node_Str"",block.get());
      return;
    }
  }
  try {
    if (clipboard.hasHtml() || (Boolean)window.call(""String_Node_Str"",clipboard.getString())) {
      String content=Optional.ofNullable(clipboard.getHtml()).orElse(clipboard.getString());
      if (current.currentTab().isAsciidoc() || current.currentTab().isMarkdown())       content=(String)window.call(current.currentTab().htmlToMarkupFunction(),content);
      editor.call(""String_Node_Str"",content);
      return;
    }
  }
 catch (  Exception e) {
    logger.error(e.getMessage(),e);
  }
  editor.call(""String_Node_Str"",clipboard.getString());
}","@WebkitCall public void paste(){
  JSObject window=(JSObject)htmlPane.webEngine().executeScript(""String_Node_Str"");
  JSObject editor=(JSObject)current.currentEngine().executeScript(""String_Node_Str"");
  if (clipboard.hasFiles()) {
    Optional<String> block=parserService.toImageBlock(clipboard.getFiles());
    if (block.isPresent()) {
      editor.call(""String_Node_Str"",block.get());
      return;
    }
  }
  try {
    if (clipboard.hasHtml() || (Boolean)window.call(""String_Node_Str"",clipboard.getString())) {
      String content=Optional.ofNullable(clipboard.getHtml()).orElse(clipboard.getString());
      if (current.currentTab().isAsciidoc() || current.currentTab().isMarkdown())       content=(String)window.call(current.currentTab().htmlToMarkupFunction(),content);
      editor.call(""String_Node_Str"",content);
      return;
    }
  }
 catch (  Exception e) {
    logger.error(e.getMessage(),e);
  }
  editor.call(""String_Node_Str"",""String_Node_Str"");
}",0.9803921568627452
62379,"public void newDoc(String content){
  EditorPane editorPane=webviewService.createWebView();
  editorPane.confirmHandler(param -> {
    if (""String_Node_Str"".equals(param)) {
      JSObject window=editorPane.getWindow();
      window.setMember(""String_Node_Str"",controller);
      window.call(""String_Node_Str"",new Object[]{});
      Map<String,String> shortCuts=controller.getShortCuts();
      Set<String> keySet=shortCuts.keySet();
      for (      String key : keySet) {
        window.call(""String_Node_Str"",new Object[]{key,shortCuts.get(key)});
      }
      window.call(""String_Node_Str"");
      if (Objects.nonNull(content)) {
        window.call(""String_Node_Str"",new Object[]{content});
      }
    }
    return false;
  }
);
  AnchorPane anchorPane=new AnchorPane();
  MyTab tab=tabService.createTab();
  Node editorVBox=editorService.createEditorVBox(editorPane,tab);
  controller.fitToParent(editorVBox);
  anchorPane.getChildren().add(editorVBox);
  tab.setEditorPane(editorPane);
  tab.setContent(anchorPane);
  tab.setTabText(""String_Node_Str"");
  TabPane tabPane=controller.getTabPane();
  tabPane.getTabs().add(tab);
  tab.select();
  editorPane.focus();
}","public void newDoc(final String content){
  EditorPane editorPane=webviewService.createWebView();
  editorPane.confirmHandler(param -> {
    if (""String_Node_Str"".equals(param)) {
      JSObject window=editorPane.getWindow();
      window.setMember(""String_Node_Str"",controller);
      window.call(""String_Node_Str"",new Object[]{});
      Map<String,String> shortCuts=controller.getShortCuts();
      Set<String> keySet=shortCuts.keySet();
      for (      String key : keySet) {
        window.call(""String_Node_Str"",new Object[]{key,shortCuts.get(key)});
      }
      window.call(""String_Node_Str"");
      String finalContent=content;
      if (Objects.isNull(finalContent))       finalContent=""String_Node_Str"";
      window.call(""String_Node_Str"",new Object[]{finalContent});
    }
    return false;
  }
);
  AnchorPane anchorPane=new AnchorPane();
  MyTab tab=tabService.createTab();
  Node editorVBox=editorService.createEditorVBox(editorPane,tab);
  controller.fitToParent(editorVBox);
  anchorPane.getChildren().add(editorVBox);
  tab.setEditorPane(editorPane);
  tab.setContent(anchorPane);
  tab.setTabText(""String_Node_Str"");
  TabPane tabPane=controller.getTabPane();
  tabPane.getTabs().add(tab);
  tab.select();
  editorPane.focus();
}",0.9463696369636964
62380,"public void addImageTab(Path imagePath){
  Tab tab=new PreviewTab();
  tab.setText(imagePath.getFileName().toString());
  Image image=new Image(IOHelper.pathToUrl(imagePath));
  ImageView imageView=new ImageView(image);
  imageView.setPreserveRatio(true);
  TabPane previewTabPane=controller.getPreviewTabPane();
  imageView.setFitWidth(previewTabPane.getWidth());
  previewTabPane.widthProperty().addListener((observable,oldValue,newValue) -> {
    imageView.setFitWidth(previewTabPane.getWidth());
  }
);
  Tooltip tip=new Tooltip(imagePath.toString());
  Tooltip.install(tab.getGraphic(),tip);
  ScrollPane scrollPane=new ScrollPane();
  scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);
  scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);
  scrollPane.setContent(imageView);
  scrollPane.addEventFilter(ScrollEvent.SCROLL,e -> {
    if (e.isControlDown() && e.getDeltaY() > 0) {
      imageView.setFitWidth(imageView.getFitWidth() + 16.0);
    }
 else     if (e.isControlDown() && e.getDeltaY() < 0) {
      imageView.setFitWidth(imageView.getFitWidth() - 16.0);
    }
  }
);
  tab.setContent(scrollPane);
  TabPane tabPane=previewTabPane;
  tabPane.getTabs().add(tab);
  tabPane.getSelectionModel().select(tab);
}","public void addImageTab(Path imagePath){
  TabPane previewTabPane=controller.getPreviewTabPane();
  ImageTab tab=new ImageTab();
  tab.setPath(imagePath);
  tab.setText(imagePath.getFileName().toString());
  if (previewTabPane.getTabs().contains(tab)) {
    previewTabPane.getSelectionModel().select(tab);
    return;
  }
  Image image=new Image(IOHelper.pathToUrl(imagePath));
  ImageView imageView=new ImageView(image);
  imageView.setPreserveRatio(true);
  imageView.setFitWidth(previewTabPane.getWidth());
  previewTabPane.widthProperty().addListener((observable,oldValue,newValue) -> {
    imageView.setFitWidth(previewTabPane.getWidth());
  }
);
  Tooltip tip=new Tooltip(imagePath.toString());
  Tooltip.install(tab.getGraphic(),tip);
  ScrollPane scrollPane=new ScrollPane();
  scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);
  scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);
  scrollPane.setContent(imageView);
  scrollPane.addEventFilter(ScrollEvent.SCROLL,e -> {
    if (e.isControlDown() && e.getDeltaY() > 0) {
      imageView.setFitWidth(imageView.getFitWidth() + 16.0);
    }
 else     if (e.isControlDown() && e.getDeltaY() < 0) {
      imageView.setFitWidth(imageView.getFitWidth() - 16.0);
    }
  }
);
  tab.setContent(scrollPane);
  TabPane tabPane=previewTabPane;
  tabPane.getTabs().add(tab);
  tabPane.getSelectionModel().select(tab);
}",0.8949563898369359
62381,"public void newDoc(String content){
  EditorPane editorPane=webviewService.createWebView();
  editorPane.confirmHandler(param -> {
    if (""String_Node_Str"".equals(param)) {
      JSObject window=editorPane.getWindow();
      window.setMember(""String_Node_Str"",controller);
      window.call(""String_Node_Str"",new Object[]{});
      Map<String,String> shortCuts=controller.getShortCuts();
      Set<String> keySet=shortCuts.keySet();
      for (      String key : keySet) {
        window.call(""String_Node_Str"",new Object[]{key,shortCuts.get(key)});
      }
      if (Objects.nonNull(content)) {
        window.call(""String_Node_Str"",new Object[]{content});
      }
      window.call(""String_Node_Str"");
    }
    return false;
  }
);
  AnchorPane anchorPane=new AnchorPane();
  MyTab tab=tabService.createTab();
  Node editorVBox=editorService.createEditorVBox(editorPane,tab);
  controller.fitToParent(editorVBox);
  anchorPane.getChildren().add(editorVBox);
  tab.setEditorPane(editorPane);
  tab.setContent(anchorPane);
  tab.setTabText(""String_Node_Str"");
  TabPane tabPane=controller.getTabPane();
  tabPane.getTabs().add(tab);
  tab.select();
  editorPane.focus();
}","public void newDoc(String content){
  EditorPane editorPane=webviewService.createWebView();
  editorPane.confirmHandler(param -> {
    if (""String_Node_Str"".equals(param)) {
      JSObject window=editorPane.getWindow();
      window.setMember(""String_Node_Str"",controller);
      window.call(""String_Node_Str"",new Object[]{});
      Map<String,String> shortCuts=controller.getShortCuts();
      Set<String> keySet=shortCuts.keySet();
      for (      String key : keySet) {
        window.call(""String_Node_Str"",new Object[]{key,shortCuts.get(key)});
      }
      window.call(""String_Node_Str"");
      if (Objects.nonNull(content)) {
        window.call(""String_Node_Str"",new Object[]{content});
      }
    }
    return false;
  }
);
  AnchorPane anchorPane=new AnchorPane();
  MyTab tab=tabService.createTab();
  Node editorVBox=editorService.createEditorVBox(editorPane,tab);
  controller.fitToParent(editorVBox);
  anchorPane.getChildren().add(editorVBox);
  tab.setEditorPane(editorPane);
  tab.setContent(anchorPane);
  tab.setTabText(""String_Node_Str"");
  TabPane tabPane=controller.getTabPane();
  tabPane.getTabs().add(tab);
  tab.select();
  editorPane.focus();
}",0.9676320272572402
62382,"public void replaceSlides(String rendered){
  ((JSObject)getWindow().eval(current.currentSlideType() + ""String_Node_Str"")).call(""String_Node_Str"",rendered);
}","public void replaceSlides(String rendered){
  ((JSObject)getWindow().eval(docType + ""String_Node_Str"")).call(""String_Node_Str"",rendered);
}",0.9225589225589226
62383,"public void flipThePage(String rendered){
  try {
    ((JSObject)getWindow().eval(current.currentSlideType() + ""String_Node_Str"")).call(""String_Node_Str"",rendered);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}","public void flipThePage(String rendered){
  try {
    ((JSObject)getWindow().eval(docType + ""String_Node_Str"")).call(""String_Node_Str"",rendered);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}",0.9422632794457276
62384,"public void injectExtensions(){
  this.setOnSuccess(() -> {
    String slideType=current.currentSlideType();
    if (""String_Node_Str"".equals(slideType))     this.loadJs(""String_Node_Str"",""String_Node_Str"");
    if (""String_Node_Str"".equals(slideType))     this.loadJs(""String_Node_Str"");
  }
);
}","public void injectExtensions(){
  this.setOnSuccess(() -> {
    if (""String_Node_Str"".equals(docType))     this.loadJs(""String_Node_Str"",""String_Node_Str"");
    if (""String_Node_Str"".equals(docType))     this.loadJs(""String_Node_Str"");
  }
);
}",0.299445471349353
62385,"@WebkitCall(from=""String_Node_Str"") public void textListener(String text,String mode){
  threadService.runTaskLater(() -> {
    threadService.runActionLater(() -> {
      if (""String_Node_Str"".equalsIgnoreCase(mode)) {
        ConverterResult result=htmlPane.convertAsciidoc(text);
        result.isBackend(""String_Node_Str"",lastRendered::setValue,() -> {
          previewTab.setContent(htmlPane);
        }
);
        result.isBackend(""String_Node_Str"",slideConverter::convert,() -> {
          previewTab.setContent(slidePane);
        }
);
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(mode)) {
        if (Objects.isNull(liveReloadPane.getLocation())) {
          liveReloadPane.setOnSuccess(() -> {
            liveReloadPane.setMember(""String_Node_Str"",this);
            liveReloadPane.initializeDiffReplacer();
          }
);
          liveReloadPane.load(String.format(""String_Node_Str"",port));
        }
 else {
          liveReloadPane.updateDomdom();
        }
        previewTab.setContent(liveReloadPane);
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(mode)) {
        markdownService.convertToAsciidoc(text,asciidoc -> {
          threadService.runActionLater(() -> {
            ConverterResult result=htmlPane.convertAsciidoc(asciidoc);
            result.afterRender(lastRendered::setValue);
          }
);
        }
);
        previewTab.setContent(htmlPane);
      }
    }
);
  }
);
}","@WebkitCall(from=""String_Node_Str"") public void textListener(String text,String mode){
  threadService.runTaskLater(() -> {
    threadService.runActionLater(() -> {
      if (""String_Node_Str"".equalsIgnoreCase(mode)) {
        ConverterResult result=htmlPane.convertAsciidoc(text);
        result.isBackend(""String_Node_Str"",lastRendered::setValue,() -> {
          previewTab.setContent(htmlPane);
        }
);
        result.isBackend(""String_Node_Str"",slideConverter::convert,() -> {
          slidePane.setDocType(result.getDoctype());
          previewTab.setContent(slidePane);
        }
);
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(mode)) {
        if (Objects.isNull(liveReloadPane.getLocation())) {
          liveReloadPane.setOnSuccess(() -> {
            liveReloadPane.setMember(""String_Node_Str"",this);
            liveReloadPane.initializeDiffReplacer();
          }
);
          liveReloadPane.load(String.format(""String_Node_Str"",port));
        }
 else {
          liveReloadPane.updateDomdom();
        }
        previewTab.setContent(liveReloadPane);
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(mode)) {
        markdownService.convertToAsciidoc(text,asciidoc -> {
          threadService.runActionLater(() -> {
            ConverterResult result=htmlPane.convertAsciidoc(asciidoc);
            result.afterRender(lastRendered::setValue);
          }
);
        }
);
        previewTab.setContent(htmlPane);
      }
    }
);
  }
);
}",0.9818181818181818
62386,"@WebkitCall public void scrollToCurrentLine(String text){
  if (current.currentIsSlide())   slidePane.flipThePage(htmlPane.findRenderedSelection(text));
  try {
    htmlPane.call(""String_Node_Str"",text);
  }
 catch (  Exception e) {
    logger.debug(e.getMessage(),e);
  }
}","@WebkitCall public void scrollToCurrentLine(String text){
  if (previewTab.getContent() == slidePane) {
    slidePane.flipThePage(htmlPane.findRenderedSelection(text));
  }
  if (previewTab.getContent() == htmlPane) {
    try {
      htmlPane.call(""String_Node_Str"",text);
    }
 catch (    Exception e) {
      logger.debug(e.getMessage(),e);
    }
  }
}",0.5818759936406995
62387,"@Override public void initialize(URL url,ResourceBundle rb){
  tooltipTimeFixService.fix();
  AwesomeDude.setIcon(htmlPro,AwesomeIcon.HTML5);
  AwesomeDude.setIcon(pdfPro,AwesomeIcon.FILE_PDF_ALT);
  AwesomeDude.setIcon(ebookPro,AwesomeIcon.BOOK);
  AwesomeDude.setIcon(docbookPro,AwesomeIcon.CODE);
  AwesomeDude.setIcon(browserPro,AwesomeIcon.FLASH);
  AwesomeDude.setIcon(workingDirButton,AwesomeIcon.FOLDER_ALT,""String_Node_Str"");
  AwesomeDude.setIcon(panelShowHideMenuButton,AwesomeIcon.COLUMNS,""String_Node_Str"");
  AwesomeDude.setIcon(refreshLabel,AwesomeIcon.REFRESH,""String_Node_Str"");
  AwesomeDude.setIcon(goUpLabel,AwesomeIcon.LEVEL_UP,""String_Node_Str"");
  AwesomeDude.setIcon(goHomeLabel,AwesomeIcon.HOME,""String_Node_Str"");
  leftButton.setGraphic(AwesomeDude.createIconLabel(AwesomeIcon.ELLIPSIS_H,""String_Node_Str""));
  ContextMenu htmlProMenu=new ContextMenu();
  htmlProMenu.getStyleClass().add(""String_Node_Str"");
  htmlPro.setContextMenu(htmlProMenu);
  htmlPro.setOnMouseClicked(event -> {
    htmlProMenu.show(htmlPro,event.getScreenX(),50);
  }
);
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.generateHtml();
  }
));
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.generateHtml(true);
  }
));
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").tip(""String_Node_Str"").click(event -> {
    this.cutCopy(lastRendered.getValue());
  }
));
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").tip(""String_Node_Str"").click(event -> {
    previewEngine.executeScript(""String_Node_Str"");
  }
));
  ContextMenu pdfProMenu=new ContextMenu();
  pdfProMenu.getStyleClass().add(""String_Node_Str"");
  pdfProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.generatePdf();
  }
));
  pdfProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.generatePdf(true);
  }
));
  pdfPro.setContextMenu(pdfProMenu);
  pdfPro.setOnMouseClicked(event -> {
    pdfProMenu.show(pdfPro,event.getScreenX(),50);
  }
);
  ContextMenu docbookProMenu=new ContextMenu();
  docbookProMenu.getStyleClass().add(""String_Node_Str"");
  docbookProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.convertDocbook();
  }
));
  docbookProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.convertDocbook(true);
  }
));
  docbookPro.setContextMenu(docbookProMenu);
  docbookPro.setOnMouseClicked(event -> {
    docbookProMenu.show(docbookPro,event.getScreenX(),50);
  }
);
  ContextMenu ebookProMenu=new ContextMenu();
  ebookProMenu.getStyleClass().add(""String_Node_Str"");
  ebookProMenu.getItems().add(MenuBuilt.name(""String_Node_Str"").add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.convertMobi();
  }
)).add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.convertMobi(true);
  }
)).build());
  ebookProMenu.getItems().add(MenuBuilt.name(""String_Node_Str"").add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.convertEpub();
  }
)).add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.convertEpub(true);
  }
)).build());
  ebookPro.setOnMouseClicked(event -> {
    ebookProMenu.show(ebookPro,event.getScreenX(),50);
  }
);
  ebookPro.setContextMenu(ebookProMenu);
  browserPro.setOnMouseClicked(event -> {
    if (event.getButton() == MouseButton.PRIMARY)     this.externalBrowse();
  }
);
  port=server.getEmbeddedServletContainer().getPort();
  loadConfigurations();
  loadRecentFileList();
  loadShortCuts();
  recentListView.setItems(recentFiles);
  recentFiles.addListener((ListChangeListener<String>)c -> {
    recentListView.visibleProperty().setValue(c.getList().size() > 0);
    recentListView.getSelectionModel().selectFirst();
  }
);
  recentListView.setOnMouseClicked(event -> {
    if (event.getClickCount() > 1) {
      openRecentListFile(event);
    }
  }
);
  treeView.setCellFactory(param -> {
    TreeCell<Item> cell=new TextFieldTreeCell<Item>();
    cell.setOnDragDetected(event -> {
      Dragboard db=cell.startDragAndDrop(TransferMode.ANY);
      ClipboardContent content=new ClipboardContent();
      content.putFiles(Arrays.asList(cell.getTreeItem().getValue().getPath().toFile()));
      db.setContent(content);
    }
);
    return cell;
  }
);
  lastRendered.addListener(lastRenderedChangeListener);
  mathjaxView=new WebView();
  mathjaxView.setVisible(false);
  rootAnchor.getChildren().add(mathjaxView);
  WebEngine mathjaxEngine=mathjaxView.getEngine();
  mathjaxEngine.getLoadWorker().stateProperty().addListener((observableValue1,state,state2) -> {
    JSObject window=(JSObject)mathjaxEngine.executeScript(""String_Node_Str"");
    if (window.getMember(""String_Node_Str"").equals(""String_Node_Str""))     window.setMember(""String_Node_Str"",this);
  }
);
  mathjaxEngine.load(String.format(""String_Node_Str"",port));
  previewEngine=previewView.getEngine();
  previewEngine.load(String.format(""String_Node_Str"",port));
  previewEngine.getLoadWorker().stateProperty().addListener((observableValue1,state,state2) -> {
    if (state2 == Worker.State.SUCCEEDED) {
      JSObject window=(JSObject)previewEngine.executeScript(""String_Node_Str"");
      if (window.getMember(""String_Node_Str"").equals(""String_Node_Str"")) {
        window.setMember(""String_Node_Str"",this);
      }
    }
  }
);
  previewEngine.getLoadWorker().exceptionProperty().addListener((ov,t,t1) -> {
    logger.info(t1.getMessage(),t1);
  }
);
  if (Objects.nonNull(config.getWorkingDirectory())) {
    Path path=Paths.get(config.getWorkingDirectory());
    Optional<Path> optional=Files.notExists(path) ? Optional.empty() : Optional.of(path);
    directoryService.setWorkingDirectory(optional);
  }
  Path workDir=directoryService.getWorkingDirectory().orElse(userHome);
  fileBrowser.browse(treeView,workDir);
  openFileTreeItem.setOnAction(event -> {
    ObservableList<TreeItem<Item>> selectedItems=treeView.getSelectionModel().getSelectedItems();
    selectedItems.stream().map(e -> e.getValue()).map(e -> e.getPath()).filter(path -> {
      if (selectedItems.size() == 1)       return true;
      return !Files.isDirectory(path);
    }
).forEach(directoryService.getOpenFileConsumer()::accept);
  }
);
  removePathItem.setOnAction(event -> {
    ObservableList<TreeItem<Item>> selectedItems=treeView.getSelectionModel().getSelectedItems();
    AlertHelper.deleteAlert().ifPresent(button -> {
      if (button == ButtonType.YES)       selectedItems.stream().map(e -> e.getValue()).map(e -> e.getPath()).forEach(IOHelper::deleteIfExists);
    }
);
  }
);
  openFolderTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    path=Files.isDirectory(path) ? path : path.getParent();
    if (Objects.nonNull(path))     getHostServices().showDocument(path.toString());
  }
);
  openFolderListItem.setOnAction(event -> {
    Path path=Paths.get(recentListView.getSelectionModel().getSelectedItem());
    path=Files.isDirectory(path) ? path : path.getParent();
    if (Objects.nonNull(path))     getHostServices().showDocument(path.toString());
  }
);
  openFileListItem.setOnAction(this::openRecentListFile);
  copyPathTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    this.cutCopy(path.toString());
  }
);
  copyPathListItem.setOnAction(event -> {
    this.cutCopy(recentListView.getSelectionModel().getSelectedItem());
  }
);
  copyTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    this.copyFile(path);
  }
);
  copyListItem.setOnAction(event -> {
    Path path=Paths.get(recentListView.getSelectionModel().getSelectedItem());
    this.copyFile(path);
  }
);
  treeView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
  treeView.setOnMouseClicked(event -> {
    TreeItem<Item> selectedItem=treeView.getSelectionModel().getSelectedItem();
    if (Objects.isNull(selectedItem))     return;
    Path selectedPath=selectedItem.getValue().getPath();
    if (event.getButton() == MouseButton.PRIMARY)     if (event.getClickCount() == 2)     directoryService.getOpenFileConsumer().accept(selectedPath);
  }
);
  treeView.getSelectionModel().getSelectedIndices().addListener((ListChangeListener<? super Integer>)p -> {
    boolean selectedAnyFolder=((ObservableList<Integer>)p.getList()).stream().anyMatch(index -> {
      TreeItem<Item> item=treeView.getTreeItem(index);
      Path itemPath=item.getValue().getPath();
      boolean isFile=itemPath.toFile().isFile();
      return !isFile;
    }
);
    if (selectedAnyFolder) {
      removePathItem.setDisable(true);
      renameFile.setDisable(true);
      createFile.setDisable(false);
    }
 else {
      removePathItem.setDisable(false);
      renameFile.setDisable(false);
      createFile.setDisable(true);
    }
  }
);
  previewView.setContextMenuEnabled(false);
  previewEngine.setOnAlert(event -> {
    if (""String_Node_Str"".equals(event.getData())) {
      if (Objects.nonNull(lastRendered.getValue()))       lastRenderedChangeListener.changed(null,null,lastRendered.getValue());
    }
  }
);
  ContextMenu previewContextMenu=new ContextMenu(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    WebHistory history=previewEngine.getHistory();
    if (history.getCurrentIndex() != 0)     history.go(-1);
  }
),MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    WebHistory history=previewEngine.getHistory();
    if (history.getCurrentIndex() + 1 != history.getEntries().size())     history.go(+1);
  }
),new SeparatorMenuItem(),MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    DocumentFragmentImpl selectionDom=(DocumentFragmentImpl)previewEngine.executeScript(""String_Node_Str"");
    ClipboardContent content=new ClipboardContent();
    content.putHtml(XMLHelper.nodeToString(selectionDom,true));
    clipboard.setContent(content);
  }
),MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    String selection=(String)previewEngine.executeScript(""String_Node_Str"");
    ClipboardContent content=new ClipboardContent();
    content.putString(selection);
    clipboard.setContent(content);
  }
),MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    DocumentFragmentImpl selectionDom=(DocumentFragmentImpl)previewEngine.executeScript(""String_Node_Str"");
    ClipboardContent content=new ClipboardContent();
    content.putString(XMLHelper.nodeToString(selectionDom,true));
    clipboard.setContent(content);
  }
),new SeparatorMenuItem(),MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    previewEngine.executeScript(""String_Node_Str"");
  }
));
  previewContextMenu.setAutoHide(true);
  previewView.setOnMouseClicked(event -> {
    if (event.getButton() == MouseButton.SECONDARY) {
      previewContextMenu.show(previewView,event.getScreenX(),event.getScreenY());
    }
 else {
      previewContextMenu.hide();
    }
  }
);
  newDoc(null);
}","@Override public void initialize(URL url,ResourceBundle rb){
  tooltipTimeFixService.fix();
  AwesomeDude.setIcon(htmlPro,AwesomeIcon.HTML5);
  AwesomeDude.setIcon(pdfPro,AwesomeIcon.FILE_PDF_ALT);
  AwesomeDude.setIcon(ebookPro,AwesomeIcon.BOOK);
  AwesomeDude.setIcon(docbookPro,AwesomeIcon.CODE);
  AwesomeDude.setIcon(browserPro,AwesomeIcon.FLASH);
  AwesomeDude.setIcon(workingDirButton,AwesomeIcon.FOLDER_ALT,""String_Node_Str"");
  AwesomeDude.setIcon(panelShowHideMenuButton,AwesomeIcon.COLUMNS,""String_Node_Str"");
  AwesomeDude.setIcon(refreshLabel,AwesomeIcon.REFRESH,""String_Node_Str"");
  AwesomeDude.setIcon(goUpLabel,AwesomeIcon.LEVEL_UP,""String_Node_Str"");
  AwesomeDude.setIcon(goHomeLabel,AwesomeIcon.HOME,""String_Node_Str"");
  leftButton.setGraphic(AwesomeDude.createIconLabel(AwesomeIcon.ELLIPSIS_H,""String_Node_Str""));
  ContextMenu htmlProMenu=new ContextMenu();
  htmlProMenu.getStyleClass().add(""String_Node_Str"");
  htmlPro.setContextMenu(htmlProMenu);
  htmlPro.setOnMouseClicked(event -> {
    htmlProMenu.show(htmlPro,event.getScreenX(),50);
  }
);
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.generateHtml();
  }
));
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.generateHtml(true);
  }
));
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").tip(""String_Node_Str"").click(event -> {
    this.cutCopy(lastRendered.getValue());
  }
));
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").tip(""String_Node_Str"").click(event -> {
    previewEngine.executeScript(""String_Node_Str"");
  }
));
  ContextMenu pdfProMenu=new ContextMenu();
  pdfProMenu.getStyleClass().add(""String_Node_Str"");
  pdfProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.generatePdf();
  }
));
  pdfProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.generatePdf(true);
  }
));
  pdfPro.setContextMenu(pdfProMenu);
  pdfPro.setOnMouseClicked(event -> {
    pdfProMenu.show(pdfPro,event.getScreenX(),50);
  }
);
  ContextMenu docbookProMenu=new ContextMenu();
  docbookProMenu.getStyleClass().add(""String_Node_Str"");
  docbookProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.convertDocbook();
  }
));
  docbookProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.convertDocbook(true);
  }
));
  docbookPro.setContextMenu(docbookProMenu);
  docbookPro.setOnMouseClicked(event -> {
    docbookProMenu.show(docbookPro,event.getScreenX(),50);
  }
);
  ContextMenu ebookProMenu=new ContextMenu();
  ebookProMenu.getStyleClass().add(""String_Node_Str"");
  ebookProMenu.getItems().add(MenuBuilt.name(""String_Node_Str"").add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.convertMobi();
  }
)).add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.convertMobi(true);
  }
)).build());
  ebookProMenu.getItems().add(MenuBuilt.name(""String_Node_Str"").add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.convertEpub();
  }
)).add(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    this.convertEpub(true);
  }
)).build());
  ebookPro.setOnMouseClicked(event -> {
    ebookProMenu.show(ebookPro,event.getScreenX(),50);
  }
);
  ebookPro.setContextMenu(ebookProMenu);
  browserPro.setOnMouseClicked(event -> {
    if (event.getButton() == MouseButton.PRIMARY)     this.externalBrowse();
  }
);
  port=server.getEmbeddedServletContainer().getPort();
  loadConfigurations();
  loadRecentFileList();
  loadShortCuts();
  recentListView.setItems(recentFiles);
  recentFiles.addListener((ListChangeListener<String>)c -> {
    recentListView.visibleProperty().setValue(c.getList().size() > 0);
    recentListView.getSelectionModel().selectFirst();
  }
);
  recentListView.setOnMouseClicked(event -> {
    if (event.getClickCount() > 1) {
      openRecentListFile(event);
    }
  }
);
  treeView.setCellFactory(param -> {
    TreeCell<Item> cell=new TextFieldTreeCell<Item>();
    cell.setOnDragDetected(event -> {
      Dragboard db=cell.startDragAndDrop(TransferMode.ANY);
      ClipboardContent content=new ClipboardContent();
      content.putFiles(Arrays.asList(cell.getTreeItem().getValue().getPath().toFile()));
      db.setContent(content);
    }
);
    return cell;
  }
);
  lastRendered.addListener(lastRenderedChangeListener);
  mathjaxView=new WebView();
  mathjaxView.setVisible(false);
  rootAnchor.getChildren().add(mathjaxView);
  WebEngine mathjaxEngine=mathjaxView.getEngine();
  mathjaxEngine.getLoadWorker().stateProperty().addListener((observableValue1,state,state2) -> {
    JSObject window=(JSObject)mathjaxEngine.executeScript(""String_Node_Str"");
    if (window.getMember(""String_Node_Str"").equals(""String_Node_Str""))     window.setMember(""String_Node_Str"",this);
  }
);
  mathjaxEngine.load(String.format(""String_Node_Str"",port));
  previewEngine=previewView.getEngine();
  previewEngine.load(String.format(""String_Node_Str"",port));
  previewEngine.getLoadWorker().stateProperty().addListener((observableValue1,state,state2) -> {
    if (state2 == Worker.State.SUCCEEDED) {
      JSObject window=(JSObject)previewEngine.executeScript(""String_Node_Str"");
      if (window.getMember(""String_Node_Str"").equals(""String_Node_Str"")) {
        window.setMember(""String_Node_Str"",this);
      }
    }
  }
);
  previewEngine.getLoadWorker().exceptionProperty().addListener((ov,t,t1) -> {
    logger.info(t1.getMessage(),t1);
  }
);
  if (Objects.nonNull(config.getWorkingDirectory())) {
    Path path=Paths.get(config.getWorkingDirectory());
    Optional<Path> optional=Files.notExists(path) ? Optional.empty() : Optional.of(path);
    directoryService.setWorkingDirectory(optional);
  }
  Path workDir=directoryService.getWorkingDirectory().orElse(userHome);
  fileBrowser.browse(treeView,workDir);
  openFileTreeItem.setOnAction(event -> {
    ObservableList<TreeItem<Item>> selectedItems=treeView.getSelectionModel().getSelectedItems();
    selectedItems.stream().map(e -> e.getValue()).map(e -> e.getPath()).filter(path -> {
      if (selectedItems.size() == 1)       return true;
      return !Files.isDirectory(path);
    }
).forEach(directoryService.getOpenFileConsumer()::accept);
  }
);
  removePathItem.setOnAction(event -> {
    ObservableList<TreeItem<Item>> selectedItems=treeView.getSelectionModel().getSelectedItems();
    AlertHelper.deleteAlert().ifPresent(button -> {
      if (button == ButtonType.YES)       selectedItems.stream().map(e -> e.getValue()).map(e -> e.getPath()).forEach(IOHelper::deleteIfExists);
    }
);
  }
);
  openFolderTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    path=Files.isDirectory(path) ? path : path.getParent();
    if (Objects.nonNull(path))     getHostServices().showDocument(path.toString());
  }
);
  openFolderListItem.setOnAction(event -> {
    Path path=Paths.get(recentListView.getSelectionModel().getSelectedItem());
    path=Files.isDirectory(path) ? path : path.getParent();
    if (Objects.nonNull(path))     getHostServices().showDocument(path.toString());
  }
);
  openFileListItem.setOnAction(this::openRecentListFile);
  copyPathTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    this.cutCopy(path.toString());
  }
);
  copyPathListItem.setOnAction(event -> {
    this.cutCopy(recentListView.getSelectionModel().getSelectedItem());
  }
);
  copyTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    this.copyFile(path);
  }
);
  copyListItem.setOnAction(event -> {
    Path path=Paths.get(recentListView.getSelectionModel().getSelectedItem());
    this.copyFile(path);
  }
);
  treeView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
  treeView.setOnMouseClicked(event -> {
    TreeItem<Item> selectedItem=treeView.getSelectionModel().getSelectedItem();
    if (Objects.isNull(selectedItem))     return;
    Path selectedPath=selectedItem.getValue().getPath();
    if (event.getButton() == MouseButton.PRIMARY)     if (event.getClickCount() == 2)     directoryService.getOpenFileConsumer().accept(selectedPath);
  }
);
  treeView.getSelectionModel().getSelectedIndices().addListener((ListChangeListener<? super Integer>)p -> {
    boolean selectedAnyFolder=((ObservableList<Integer>)p.getList()).stream().anyMatch(index -> {
      TreeItem<Item> item=treeView.getTreeItem(index);
      Path itemPath=item.getValue().getPath();
      boolean isFile=itemPath.toFile().isFile();
      return !isFile;
    }
);
    if (selectedAnyFolder) {
      removePathItem.setDisable(true);
      renameFile.setDisable(true);
      createFile.setDisable(false);
    }
 else {
      removePathItem.setDisable(false);
      renameFile.setDisable(false);
      createFile.setDisable(true);
    }
  }
);
  previewView.setContextMenuEnabled(false);
  previewEngine.setOnAlert(event -> {
    if (""String_Node_Str"".equals(event.getData())) {
      if (Objects.nonNull(lastRendered.getValue()))       lastRenderedChangeListener.changed(null,null,lastRendered.getValue());
    }
  }
);
  ContextMenu previewContextMenu=new ContextMenu(MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    WebHistory history=previewEngine.getHistory();
    if (history.getCurrentIndex() != 0)     history.go(-1);
  }
),MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    WebHistory history=previewEngine.getHistory();
    if (history.getCurrentIndex() + 1 != history.getEntries().size())     history.go(+1);
  }
),new SeparatorMenuItem(),MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    DocumentFragmentImpl selectionDom=(DocumentFragmentImpl)previewEngine.executeScript(""String_Node_Str"");
    ClipboardContent content=new ClipboardContent();
    content.putHtml(XMLHelper.nodeToString(selectionDom,true));
    clipboard.setContent(content);
  }
),MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    String selection=(String)previewEngine.executeScript(""String_Node_Str"");
    ClipboardContent content=new ClipboardContent();
    content.putString(selection);
    clipboard.setContent(content);
  }
),MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    DocumentFragmentImpl selectionDom=(DocumentFragmentImpl)previewEngine.executeScript(""String_Node_Str"");
    ClipboardContent content=new ClipboardContent();
    content.putString(XMLHelper.nodeToString(selectionDom,true));
    clipboard.setContent(content);
  }
),new SeparatorMenuItem(),MenuItemBuilt.item(""String_Node_Str"").click(event -> {
    previewEngine.executeScript(""String_Node_Str"");
  }
));
  previewContextMenu.setAutoHide(true);
  previewView.setOnMouseClicked(event -> {
    if (event.getButton() == MouseButton.SECONDARY) {
      previewContextMenu.show(previewView,event.getScreenX(),event.getScreenY());
    }
 else {
      previewContextMenu.hide();
    }
  }
);
  tabService.initializeTabChangeListener(tabPane);
  newDoc(null);
}",0.9976728268309376
62388,"public void addTab(Path path){
  ObservableList<String> recentFiles=controller.getRecentFiles();
  if (Files.notExists(path)) {
    recentFiles.remove(path.toString());
    return;
  }
  ObservableList<Tab> tabs=controller.getTabPane().getTabs();
  for (  Tab tab : tabs) {
    MyTab myTab=(MyTab)tab;
    Path currentPath=myTab.getPath();
    if (Objects.nonNull(currentPath))     if (currentPath.equals(path)) {
      myTab.select();
      return;
    }
  }
  AnchorPane anchorPane=new AnchorPane();
  WebView webView=webviewService.createWebView();
  WebEngine webEngine=webView.getEngine();
  MyTab tab=createTab();
  tab.setWebView(webView);
  webEngine.setConfirmHandler(param -> {
    if (""String_Node_Str"".equals(param)) {
      JSObject window=(JSObject)webEngine.executeScript(""String_Node_Str"");
      window.setMember(""String_Node_Str"",controller);
      window.call(""String_Node_Str"",new Object[]{});
      Map<String,String> shortCuts=controller.getShortCuts();
      Set<String> keySet=shortCuts.keySet();
      for (      String key : keySet) {
        window.call(""String_Node_Str"",new Object[]{key,shortCuts.get(key)});
      }
      if (Objects.isNull(path))       return true;
      threadService.runTaskLater(() -> {
        String content=IOHelper.readFile(path);
        threadService.runActionLater(() -> {
          tab.setTabText(path.getFileName().toString());
          window.call(""String_Node_Str"",new Object[]{content});
          window.call(""String_Node_Str"");
          TabPane tabPane=controller.getTabPane();
          tabPane.getTabs().add(tab);
          tab.select();
        }
);
      }
);
    }
    return false;
  }
);
  Node editorVBox=editorService.createEditorVBox(webView,tab);
  controller.fitToParent(editorVBox);
  anchorPane.getChildren().add(editorVBox);
  tab.setContent(anchorPane);
  tab.setPath(path);
  Tooltip tip=new Tooltip(path.toString());
  Tooltip.install(tab.getGraphic(),tip);
  recentFiles.remove(path.toString());
  recentFiles.add(0,path.toString());
  webView.requestFocus();
}","public void addTab(Path path){
  ObservableList<String> recentFiles=controller.getRecentFiles();
  if (Files.notExists(path)) {
    recentFiles.remove(path.toString());
    return;
  }
  ObservableList<Tab> tabs=controller.getTabPane().getTabs();
  for (  Tab tab : tabs) {
    MyTab myTab=(MyTab)tab;
    Path currentPath=myTab.getPath();
    if (Objects.nonNull(currentPath))     if (currentPath.equals(path)) {
      myTab.select();
      return;
    }
  }
  AnchorPane anchorPane=new AnchorPane();
  WebView webView=webviewService.createWebView();
  WebEngine webEngine=webView.getEngine();
  MyTab tab=createTab();
  tab.setWebView(webView);
  tab.setTabText(path.getFileName().toString());
  webEngine.setConfirmHandler(param -> {
    if (""String_Node_Str"".equals(param)) {
      JSObject window=(JSObject)webEngine.executeScript(""String_Node_Str"");
      window.setMember(""String_Node_Str"",controller);
      window.call(""String_Node_Str"",new Object[]{});
      Map<String,String> shortCuts=controller.getShortCuts();
      Set<String> keySet=shortCuts.keySet();
      for (      String key : keySet) {
        window.call(""String_Node_Str"",new Object[]{key,shortCuts.get(key)});
      }
      if (Objects.isNull(path))       return true;
      threadService.runTaskLater(() -> {
        String content=IOHelper.readFile(path);
        threadService.runActionLater(() -> {
          window.call(""String_Node_Str"",new Object[]{content});
          window.call(""String_Node_Str"");
        }
);
      }
);
    }
    return false;
  }
);
  threadService.runActionLater(() -> {
    TabPane tabPane=controller.getTabPane();
    tabPane.getTabs().add(tab);
    tab.select();
  }
);
  Node editorVBox=editorService.createEditorVBox(webView,tab);
  controller.fitToParent(editorVBox);
  anchorPane.getChildren().add(editorVBox);
  tab.setContent(anchorPane);
  tab.setPath(path);
  Tooltip tip=new Tooltip(path.toString());
  Tooltip.install(tab.getGraphic(),tip);
  recentFiles.remove(path.toString());
  recentFiles.add(0,path.toString());
  webView.requestFocus();
}",0.9324258629071464
62389,"public MyTab createTab(){
  MyTab tab=new MyTab(){
    @Override public ButtonType close(){
      if (Objects.nonNull(this.getPath()))       closedPaths.add(Optional.ofNullable(current.currentTab().getPath()));
      ButtonType closeType=super.close();
      Platform.runLater(() -> {
        ObservableList<Tab> tabs=controller.getTabPane().getTabs();
        if (tabs.isEmpty()) {
          controller.newDoc(null);
        }
      }
);
      return closeType;
    }
  }
;
  tab.setOnCloseRequest(event -> {
    event.consume();
    tab.close();
  }
);
  tab.selectedProperty().addListener((observableValue,before,after) -> {
    if (after) {
      threadService.runActionLater(() -> {
        if (Objects.nonNull(current.currentWebView())) {
          WebEngine webEngine=current.currentEngine();
          Worker.State state=webEngine.getLoadWorker().getState();
          if (state == Worker.State.SUCCEEDED) {
            controller.textListener(current.currentEditorValue());
          }
        }
        WebView webView=tab.getWebView();
        if (Objects.nonNull(webView))         webView.requestFocus();
      }
);
    }
  }
);
  MenuItem menuItem0=new MenuItem(""String_Node_Str"");
  menuItem0.setOnAction(actionEvent -> {
    tab.close();
  }
);
  MenuItem menuItem1=new MenuItem(""String_Node_Str"");
  menuItem1.setOnAction(actionEvent -> {
    ObservableList<Tab> tabs=controller.getTabPane().getTabs();
    ObservableList<Tab> clonedTabs=FXCollections.observableArrayList(tabs);
    if (clonedTabs.size() > 0) {
      clonedTabs.forEach((closedTab) -> {
        MyTab myTab=(MyTab)closedTab;
        myTab.close();
      }
);
    }
  }
);
  MenuItem menuItem2=new MenuItem(""String_Node_Str"");
  menuItem2.setOnAction(actionEvent -> {
    ObservableList<Tab> blackList=FXCollections.observableArrayList();
    blackList.addAll(controller.getTabPane().getTabs());
    blackList.remove(tab);
    blackList.forEach(t -> {
      MyTab closeTab=(MyTab)t;
      closeTab.close();
    }
);
  }
);
  MenuItem menuItem4=new MenuItem(""String_Node_Str"");
  menuItem4.setOnAction(actionEvent -> {
    TabPane tabPane=controller.getTabPane();
    if (tabPane.getSelectionModel().isSelected(tabPane.getTabs().size() - 1))     tabPane.getSelectionModel().selectFirst();
 else     tabPane.getSelectionModel().selectNext();
  }
);
  MenuItem menuItem5=new MenuItem(""String_Node_Str"");
  menuItem5.setOnAction(actionEvent -> {
    SingleSelectionModel<Tab> selectionModel=controller.getTabPane().getSelectionModel();
    if (selectionModel.isSelected(0))     selectionModel.selectLast();
 else     selectionModel.selectPrevious();
  }
);
  MenuItem menuItem6=new MenuItem(""String_Node_Str"");
  menuItem6.setOnAction(actionEvent -> {
    if (closedPaths.size() > 0) {
      int index=closedPaths.size() - 1;
      closedPaths.get(index).filter(pathResolver::isAsciidoc).ifPresent(this::addTab);
      closedPaths.get(index).filter(pathResolver::isMarkdown).ifPresent(this::addTab);
      closedPaths.get(index).filter(pathResolver::isImage).ifPresent(this::addImageTab);
      closedPaths.remove(index);
    }
  }
);
  MenuItem menuItem7=new MenuItem(""String_Node_Str"");
  menuItem7.setOnAction(event -> {
    current.currentPath().ifPresent(path -> {
      controller.getHostServices().showDocument(path.getParent().toUri().toASCIIString());
    }
);
  }
);
  MenuItem menuItem8=new MenuItem(""String_Node_Str"");
  menuItem8.setOnAction(controller::newDoc);
  MenuItem gotoWorkdir=new MenuItem(""String_Node_Str"");
  gotoWorkdir.setOnAction(event -> {
    current.currentPath().map(Path::getParent).ifPresent(directoryService::changeWorkigDir);
  }
);
  ContextMenu contextMenu=new ContextMenu();
  contextMenu.getItems().addAll(menuItem0,menuItem1,menuItem2,new SeparatorMenuItem(),menuItem4,menuItem5,menuItem6,new SeparatorMenuItem(),gotoWorkdir,new SeparatorMenuItem(),menuItem7,menuItem8);
  tab.contextMenuProperty().setValue(contextMenu);
  Label label=tab.getLabel();
  label.setOnMouseClicked(mouseEvent -> {
    if (mouseEvent.getButton().equals(MouseButton.SECONDARY)) {
      tab.select();
    }
 else     if (mouseEvent.getClickCount() > 1) {
      controller.adjustSplitPane();
    }
  }
);
  return tab;
}","public MyTab createTab(){
  MyTab tab=new MyTab(){
    @Override public ButtonType close(){
      if (Objects.nonNull(this.getPath()))       closedPaths.add(Optional.ofNullable(current.currentTab().getPath()));
      ButtonType closeType=super.close();
      Platform.runLater(() -> {
        ObservableList<Tab> tabs=controller.getTabPane().getTabs();
        if (tabs.isEmpty()) {
          controller.newDoc(null);
        }
      }
);
      return closeType;
    }
  }
;
  tab.setOnCloseRequest(event -> {
    event.consume();
    tab.close();
  }
);
  MenuItem menuItem0=new MenuItem(""String_Node_Str"");
  menuItem0.setOnAction(actionEvent -> {
    tab.close();
  }
);
  MenuItem menuItem1=new MenuItem(""String_Node_Str"");
  menuItem1.setOnAction(actionEvent -> {
    ObservableList<Tab> tabs=controller.getTabPane().getTabs();
    ObservableList<Tab> clonedTabs=FXCollections.observableArrayList(tabs);
    if (clonedTabs.size() > 0) {
      clonedTabs.forEach((closedTab) -> {
        MyTab myTab=(MyTab)closedTab;
        myTab.close();
      }
);
    }
  }
);
  MenuItem menuItem2=new MenuItem(""String_Node_Str"");
  menuItem2.setOnAction(actionEvent -> {
    ObservableList<Tab> blackList=FXCollections.observableArrayList();
    blackList.addAll(controller.getTabPane().getTabs());
    blackList.remove(tab);
    blackList.forEach(t -> {
      MyTab closeTab=(MyTab)t;
      closeTab.close();
    }
);
  }
);
  MenuItem menuItem4=new MenuItem(""String_Node_Str"");
  menuItem4.setOnAction(actionEvent -> {
    TabPane tabPane=controller.getTabPane();
    if (tabPane.getSelectionModel().isSelected(tabPane.getTabs().size() - 1))     tabPane.getSelectionModel().selectFirst();
 else     tabPane.getSelectionModel().selectNext();
  }
);
  MenuItem menuItem5=new MenuItem(""String_Node_Str"");
  menuItem5.setOnAction(actionEvent -> {
    SingleSelectionModel<Tab> selectionModel=controller.getTabPane().getSelectionModel();
    if (selectionModel.isSelected(0))     selectionModel.selectLast();
 else     selectionModel.selectPrevious();
  }
);
  MenuItem menuItem6=new MenuItem(""String_Node_Str"");
  menuItem6.setOnAction(actionEvent -> {
    if (closedPaths.size() > 0) {
      int index=closedPaths.size() - 1;
      closedPaths.get(index).filter(pathResolver::isAsciidoc).ifPresent(this::addTab);
      closedPaths.get(index).filter(pathResolver::isMarkdown).ifPresent(this::addTab);
      closedPaths.get(index).filter(pathResolver::isImage).ifPresent(this::addImageTab);
      closedPaths.remove(index);
    }
  }
);
  MenuItem menuItem7=new MenuItem(""String_Node_Str"");
  menuItem7.setOnAction(event -> {
    current.currentPath().ifPresent(path -> {
      controller.getHostServices().showDocument(path.getParent().toUri().toASCIIString());
    }
);
  }
);
  MenuItem menuItem8=new MenuItem(""String_Node_Str"");
  menuItem8.setOnAction(controller::newDoc);
  MenuItem gotoWorkdir=new MenuItem(""String_Node_Str"");
  gotoWorkdir.setOnAction(event -> {
    current.currentPath().map(Path::getParent).ifPresent(directoryService::changeWorkigDir);
  }
);
  ContextMenu contextMenu=new ContextMenu();
  contextMenu.getItems().addAll(menuItem0,menuItem1,menuItem2,new SeparatorMenuItem(),menuItem4,menuItem5,menuItem6,new SeparatorMenuItem(),gotoWorkdir,new SeparatorMenuItem(),menuItem7,menuItem8);
  tab.contextMenuProperty().setValue(contextMenu);
  Label label=tab.getLabel();
  label.setOnMouseClicked(mouseEvent -> {
    if (mouseEvent.getButton().equals(MouseButton.SECONDARY)) {
      tab.select();
    }
 else     if (mouseEvent.getClickCount() > 1) {
      controller.adjustSplitPane();
    }
  }
);
  return tab;
}",0.925293217746048
62390,"@Autowired public Epub3Service(final ApplicationController asciiDocController,final Current current,final ThreadService threadService,final DirectoryService directoryService,final IndikatorService indikatorService,final DocBookService docBookService){
  this.asciiDocController=asciiDocController;
  this.current=current;
  this.threadService=threadService;
  this.directoryService=directoryService;
  this.indikatorService=indikatorService;
  this.docBookService=docBookService;
}","@Autowired public Epub3Service(final ApplicationController asciiDocController,final Current current,final ThreadService threadService,final DirectoryService directoryService,final IndikatorService indikatorService,final DocBookService docBookService,PathResolverService pathResolverService){
  this.asciiDocController=asciiDocController;
  this.current=current;
  this.threadService=threadService;
  this.directoryService=directoryService;
  this.indikatorService=indikatorService;
  this.docBookService=docBookService;
  this.pathResolverService=pathResolverService;
}",0.9161904761904762
62391,"private CompletableFuture<Path> produceEpub3(boolean askPath,boolean isTemp){
  CompletableFuture<Path> completableFuture=new CompletableFuture<>();
  try {
    Path currentTabPath=current.currentPath().get();
    Path currentTabPathDir=currentTabPath.getParent();
    Path configPath=asciiDocController.getConfigPath();
    String tabText=current.getCurrentTabText().replace(""String_Node_Str"",""String_Node_Str"").trim();
    if (askPath) {
      FileChooser fileChooser=directoryService.newFileChooser(""String_Node_Str"");
      fileChooser.getExtensionFilters().addAll(new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str""));
      epubPath=fileChooser.showSaveDialog(null).toPath();
    }
 else     if (isTemp) {
      epubPath=IOHelper.createTempFile(""String_Node_Str"");
    }
 else     epubPath=currentTabPathDir.resolve(tabText + ""String_Node_Str"");
    threadService.runTaskLater(() -> {
      try {
        if (!isTemp)         indikatorService.startCycle();
        Path epubTemp=Files.createTempDirectory(""String_Node_Str"");
        TransformerFactory factory=new TransformerFactoryImpl();
        File xslFile=configPath.resolve(""String_Node_Str"").toFile();
        StreamSource xslSource=new StreamSource(xslFile);
        Transformer transformer=factory.newTransformer(xslSource);
        docBookService.generateDocbook(docbook -> {
          threadService.runTaskLater(() -> {
            transformer.setParameter(""String_Node_Str"",epubTemp.resolve(""String_Node_Str"").toString());
            try (StringReader reader=new StringReader(docbook)){
              StreamSource xmlSource=new StreamSource(reader);
              IOHelper.transform(transformer,xmlSource,new StreamResult());
            }
             Path containerXml=epubTemp.resolve(""String_Node_Str"");
            Match root=IOHelper.$(containerXml.toFile());
            root.find(""String_Node_Str"").attr(""String_Node_Str"",""String_Node_Str"");
            StringBuilder builder=new StringBuilder();
            builder.append(""String_Node_Str"");
            Match wrapper=$(""String_Node_Str"");
            wrapper.append(root);
            builder.append(wrapper.content());
            IOHelper.matchWrite(root,containerXml.toFile());
            IOHelper.writeToFile(containerXml,builder.toString(),TRUNCATE_EXISTING,WRITE);
            Path epubOut=epubTemp.resolve(""String_Node_Str"");
            IOHelper.copyDirectoryToDirectory(currentTabPathDir.resolve(""String_Node_Str"").toFile(),epubTemp.resolve(""String_Node_Str"").toFile());
            IOHelper.copyDirectoryToDirectory(configPath.resolve(""String_Node_Str"").toFile(),epubTemp.resolve(""String_Node_Str"").toFile());
            ZipUtil.pack(epubTemp.toFile(),epubOut.toFile());
            ZipUtil.removeEntry(epubOut.toFile(),""String_Node_Str"");
            IOHelper.move(epubOut,epubPath,StandardCopyOption.REPLACE_EXISTING);
            if (!isTemp) {
              indikatorService.completeCycle();
              threadService.runActionLater(() -> {
                asciiDocController.getRecentFiles().remove(epubPath.toString());
                asciiDocController.getRecentFiles().add(0,epubPath.toString());
              }
);
            }
          }
);
        }
);
      }
 catch (      Exception e) {
        logger.error(e.getMessage(),e);
      }
 finally {
        completableFuture.complete(epubPath);
      }
    }
);
  }
 catch (  Exception e) {
    logger.error(e.getMessage(),e);
    indikatorService.completeCycle();
  }
  return completableFuture;
}","private CompletableFuture<Path> produceEpub3(boolean askPath,boolean isTemp){
  CompletableFuture<Path> completableFuture=new CompletableFuture<>();
  try {
    Path currentTabPath=current.currentPath().get();
    Path currentTabPathDir=currentTabPath.getParent();
    Path configPath=asciiDocController.getConfigPath();
    String tabText=current.getCurrentTabText().replace(""String_Node_Str"",""String_Node_Str"").trim();
    if (askPath) {
      FileChooser fileChooser=directoryService.newFileChooser(""String_Node_Str"");
      fileChooser.getExtensionFilters().addAll(new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str""));
      epubPath=fileChooser.showSaveDialog(null).toPath();
    }
 else     if (isTemp) {
      epubPath=IOHelper.createTempFile(""String_Node_Str"");
    }
 else     epubPath=currentTabPathDir.resolve(tabText + ""String_Node_Str"");
    threadService.runTaskLater(() -> {
      try {
        if (!isTemp)         indikatorService.startCycle();
        Path epubTemp=Files.createTempDirectory(""String_Node_Str"");
        TransformerFactory factory=new TransformerFactoryImpl();
        File xslFile=configPath.resolve(""String_Node_Str"").toFile();
        StreamSource xslSource=new StreamSource(xslFile);
        Transformer transformer=factory.newTransformer(xslSource);
        docBookService.generateDocbook(docbook -> {
          threadService.runTaskLater(() -> {
            transformer.setParameter(""String_Node_Str"",epubTemp.resolve(""String_Node_Str"").toString());
            try (StringReader reader=new StringReader(docbook)){
              StreamSource xmlSource=new StreamSource(reader);
              IOHelper.transform(transformer,xmlSource,new StreamResult());
            }
             Path containerXml=epubTemp.resolve(""String_Node_Str"");
            Match root=IOHelper.$(containerXml.toFile());
            root.find(""String_Node_Str"").attr(""String_Node_Str"",""String_Node_Str"");
            StringBuilder builder=new StringBuilder();
            builder.append(""String_Node_Str"");
            Match wrapper=$(""String_Node_Str"");
            wrapper.append(root);
            builder.append(wrapper.content());
            IOHelper.matchWrite(root,containerXml.toFile());
            IOHelper.writeToFile(containerXml,builder.toString(),TRUNCATE_EXISTING,WRITE);
            Path epubOut=epubTemp.resolve(""String_Node_Str"");
            Stream<Path> imageStream=IOHelper.find(currentTabPathDir,Integer.MAX_VALUE,(p,attr) -> pathResolverService.isImage(p));
            imageStream.forEach(img -> {
              IOHelper.copyFile(img.toFile(),epubTemp.resolve(""String_Node_Str"").resolve(currentTabPathDir.relativize(img)).toFile());
            }
);
            IOHelper.copyDirectoryToDirectory(configPath.resolve(""String_Node_Str"").toFile(),epubTemp.resolve(""String_Node_Str"").toFile());
            ZipUtil.pack(epubTemp.toFile(),epubOut.toFile());
            ZipUtil.removeEntry(epubOut.toFile(),""String_Node_Str"");
            IOHelper.move(epubOut,epubPath,StandardCopyOption.REPLACE_EXISTING);
            if (!isTemp) {
              indikatorService.completeCycle();
              threadService.runActionLater(() -> {
                asciiDocController.getRecentFiles().remove(epubPath.toString());
                asciiDocController.getRecentFiles().add(0,epubPath.toString());
              }
);
            }
          }
);
        }
);
      }
 catch (      Exception e) {
        logger.error(e.getMessage(),e);
      }
 finally {
        completableFuture.complete(epubPath);
      }
    }
);
  }
 catch (  Exception e) {
    logger.error(e.getMessage(),e);
    indikatorService.completeCycle();
  }
  return completableFuture;
}",0.946275270008308
62392,"public void newDoc(String content){
  WebView webView=webviewService.createWebView();
  WebEngine webEngine=webView.getEngine();
  webEngine.setConfirmHandler(param -> {
    if (""String_Node_Str"".equals(param)) {
      JSObject window=(JSObject)webEngine.executeScript(""String_Node_Str"");
      window.setMember(""String_Node_Str"",controller);
      window.call(""String_Node_Str"",new Object[]{});
      Map<String,String> shortCuts=controller.getShortCuts();
      Set<String> keySet=shortCuts.keySet();
      for (      String key : keySet) {
        window.call(""String_Node_Str"",new Object[]{key,shortCuts.get(key)});
      }
      if (Objects.isNull(content))       return true;
      window.call(""String_Node_Str"",new Object[]{content});
      window.call(""String_Node_Str"");
    }
    return false;
  }
);
  AnchorPane anchorPane=new AnchorPane();
  MyTab tab=tabService.createTab();
  Node editorVBox=editorService.createEditorVBox(webView,tab);
  controller.fitToParent(editorVBox);
  anchorPane.getChildren().add(editorVBox);
  tab.setWebView(webView);
  tab.setContent(anchorPane);
  tab.setTabText(""String_Node_Str"");
  TabPane tabPane=controller.getTabPane();
  tabPane.getTabs().add(tab);
  tab.select();
  webView.requestFocus();
}","public void newDoc(String content){
  WebView webView=webviewService.createWebView();
  WebEngine webEngine=webView.getEngine();
  webEngine.setConfirmHandler(param -> {
    if (""String_Node_Str"".equals(param)) {
      JSObject window=(JSObject)webEngine.executeScript(""String_Node_Str"");
      window.setMember(""String_Node_Str"",controller);
      window.call(""String_Node_Str"",new Object[]{});
      Map<String,String> shortCuts=controller.getShortCuts();
      Set<String> keySet=shortCuts.keySet();
      for (      String key : keySet) {
        window.call(""String_Node_Str"",new Object[]{key,shortCuts.get(key)});
      }
      if (Objects.nonNull(content))       window.call(""String_Node_Str"",new Object[]{content});
      window.call(""String_Node_Str"");
    }
    return false;
  }
);
  AnchorPane anchorPane=new AnchorPane();
  MyTab tab=tabService.createTab();
  Node editorVBox=editorService.createEditorVBox(webView,tab);
  controller.fitToParent(editorVBox);
  anchorPane.getChildren().add(editorVBox);
  tab.setWebView(webView);
  tab.setContent(anchorPane);
  tab.setTabText(""String_Node_Str"");
  TabPane tabPane=controller.getTabPane();
  tabPane.getTabs().add(tab);
  tab.select();
  webView.requestFocus();
}",0.9902834008097166
62393,"private CompletableFuture<Path> produceEpub3(boolean askPath,boolean isTemp){
  CompletableFuture<Path> completableFuture=new CompletableFuture<>();
  try {
    Path currentTabPath=current.currentPath().get();
    Path currentTabPathDir=currentTabPath.getParent();
    Path configPath=asciiDocController.getConfigPath();
    String tabText=current.getCurrentTabText().replace(""String_Node_Str"",""String_Node_Str"").trim();
    if (askPath) {
      FileChooser fileChooser=directoryService.newFileChooser(""String_Node_Str"");
      fileChooser.getExtensionFilters().addAll(new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str""));
      epubPath=fileChooser.showSaveDialog(null).toPath();
    }
 else     if (isTemp) {
      epubPath=IOHelper.createTempFile(""String_Node_Str"");
    }
 else     epubPath=currentTabPathDir.resolve(tabText + ""String_Node_Str"");
    threadService.runTaskLater(() -> {
      try {
        if (!isTemp)         indikatorService.startCycle();
        Path epubTemp=Files.createTempDirectory(""String_Node_Str"");
        TransformerFactory factory=new TransformerFactoryImpl();
        File xslFile=configPath.resolve(""String_Node_Str"").toFile();
        StreamSource xslSource=new StreamSource(xslFile);
        Transformer transformer=factory.newTransformer(xslSource);
        docBookService.generateDocbook(docbook -> {
          transformer.setParameter(""String_Node_Str"",epubTemp.resolve(""String_Node_Str"").toString());
          try (StringReader reader=new StringReader(docbook)){
            StreamSource xmlSource=new StreamSource(reader);
            IOHelper.transform(transformer,xmlSource,new StreamResult());
          }
           Path containerXml=epubTemp.resolve(""String_Node_Str"");
          Match root=IOHelper.$(containerXml.toFile());
          root.find(""String_Node_Str"").attr(""String_Node_Str"",""String_Node_Str"");
          StringBuilder builder=new StringBuilder();
          builder.append(""String_Node_Str"");
          Match wrapper=$(""String_Node_Str"");
          wrapper.append(root);
          builder.append(wrapper.content());
          IOHelper.matchWrite(root,containerXml.toFile());
          IOHelper.writeToFile(containerXml,builder.toString(),TRUNCATE_EXISTING,WRITE);
          Path epubOut=epubTemp.resolve(""String_Node_Str"");
          IOHelper.copyDirectoryToDirectory(currentTabPathDir.resolve(""String_Node_Str"").toFile(),epubTemp.resolve(""String_Node_Str"").toFile());
          IOHelper.copyDirectoryToDirectory(configPath.resolve(""String_Node_Str"").toFile(),epubTemp.resolve(""String_Node_Str"").toFile());
          ZipUtil.pack(epubTemp.toFile(),epubOut.toFile());
          ZipUtil.removeEntry(epubOut.toFile(),""String_Node_Str"");
          IOHelper.move(epubOut,epubPath,StandardCopyOption.REPLACE_EXISTING);
          if (!isTemp) {
            indikatorService.completeCycle();
            threadService.runActionLater(() -> {
              asciiDocController.getRecentFiles().remove(epubPath.toString());
              asciiDocController.getRecentFiles().add(0,epubPath.toString());
            }
);
          }
        }
);
      }
 catch (      Exception e) {
        logger.error(e.getMessage(),e);
      }
 finally {
        completableFuture.complete(epubPath);
      }
    }
);
  }
 catch (  Exception e) {
    logger.error(e.getMessage(),e);
    indikatorService.completeCycle();
  }
  return completableFuture;
}","private CompletableFuture<Path> produceEpub3(boolean askPath,boolean isTemp){
  CompletableFuture<Path> completableFuture=new CompletableFuture<>();
  try {
    Path currentTabPath=current.currentPath().get();
    Path currentTabPathDir=currentTabPath.getParent();
    Path configPath=asciiDocController.getConfigPath();
    String tabText=current.getCurrentTabText().replace(""String_Node_Str"",""String_Node_Str"").trim();
    if (askPath) {
      FileChooser fileChooser=directoryService.newFileChooser(""String_Node_Str"");
      fileChooser.getExtensionFilters().addAll(new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str""));
      epubPath=fileChooser.showSaveDialog(null).toPath();
    }
 else     if (isTemp) {
      epubPath=IOHelper.createTempFile(""String_Node_Str"");
    }
 else     epubPath=currentTabPathDir.resolve(tabText + ""String_Node_Str"");
    threadService.runTaskLater(() -> {
      try {
        if (!isTemp)         indikatorService.startCycle();
        Path epubTemp=Files.createTempDirectory(""String_Node_Str"");
        TransformerFactory factory=new TransformerFactoryImpl();
        File xslFile=configPath.resolve(""String_Node_Str"").toFile();
        StreamSource xslSource=new StreamSource(xslFile);
        Transformer transformer=factory.newTransformer(xslSource);
        docBookService.generateDocbook(docbook -> {
          threadService.runTaskLater(() -> {
            transformer.setParameter(""String_Node_Str"",epubTemp.resolve(""String_Node_Str"").toString());
            try (StringReader reader=new StringReader(docbook)){
              StreamSource xmlSource=new StreamSource(reader);
              IOHelper.transform(transformer,xmlSource,new StreamResult());
            }
             Path containerXml=epubTemp.resolve(""String_Node_Str"");
            Match root=IOHelper.$(containerXml.toFile());
            root.find(""String_Node_Str"").attr(""String_Node_Str"",""String_Node_Str"");
            StringBuilder builder=new StringBuilder();
            builder.append(""String_Node_Str"");
            Match wrapper=$(""String_Node_Str"");
            wrapper.append(root);
            builder.append(wrapper.content());
            IOHelper.matchWrite(root,containerXml.toFile());
            IOHelper.writeToFile(containerXml,builder.toString(),TRUNCATE_EXISTING,WRITE);
            Path epubOut=epubTemp.resolve(""String_Node_Str"");
            IOHelper.copyDirectoryToDirectory(currentTabPathDir.resolve(""String_Node_Str"").toFile(),epubTemp.resolve(""String_Node_Str"").toFile());
            IOHelper.copyDirectoryToDirectory(configPath.resolve(""String_Node_Str"").toFile(),epubTemp.resolve(""String_Node_Str"").toFile());
            ZipUtil.pack(epubTemp.toFile(),epubOut.toFile());
            ZipUtil.removeEntry(epubOut.toFile(),""String_Node_Str"");
            IOHelper.move(epubOut,epubPath,StandardCopyOption.REPLACE_EXISTING);
            if (!isTemp) {
              indikatorService.completeCycle();
              threadService.runActionLater(() -> {
                asciiDocController.getRecentFiles().remove(epubPath.toString());
                asciiDocController.getRecentFiles().add(0,epubPath.toString());
              }
);
            }
          }
);
        }
);
      }
 catch (      Exception e) {
        logger.error(e.getMessage(),e);
      }
 finally {
        completableFuture.complete(epubPath);
      }
    }
);
  }
 catch (  Exception e) {
    logger.error(e.getMessage(),e);
    indikatorService.completeCycle();
  }
  return completableFuture;
}",0.983256351039261
62394,"public void newDoc(String content){
  WebView webView=webviewService.createWebView();
  WebEngine webEngine=webView.getEngine();
  webEngine.setConfirmHandler(param -> {
    if (""String_Node_Str"".equals(param)) {
      JSObject window=(JSObject)webEngine.executeScript(""String_Node_Str"");
      window.setMember(""String_Node_Str"",controller);
      window.call(""String_Node_Str"",new Object[]{});
      Map<String,String> shortCuts=controller.getShortCuts();
      Set<String> keySet=shortCuts.keySet();
      for (      String key : keySet) {
        window.call(""String_Node_Str"",new Object[]{key,shortCuts.get(key)});
      }
      if (Objects.isNull(content))       return true;
      window.call(""String_Node_Str"",new Object[]{content});
    }
    return false;
  }
);
  AnchorPane anchorPane=new AnchorPane();
  MyTab tab=tabService.createTab();
  Node editorVBox=editorService.createEditorVBox(webView,tab);
  controller.fitToParent(editorVBox);
  anchorPane.getChildren().add(editorVBox);
  tab.setWebView(webView);
  tab.setContent(anchorPane);
  tab.setTabText(""String_Node_Str"");
  TabPane tabPane=controller.getTabPane();
  tabPane.getTabs().add(tab);
  tab.select();
  webView.requestFocus();
}","public void newDoc(String content){
  WebView webView=webviewService.createWebView();
  WebEngine webEngine=webView.getEngine();
  webEngine.setConfirmHandler(param -> {
    if (""String_Node_Str"".equals(param)) {
      JSObject window=(JSObject)webEngine.executeScript(""String_Node_Str"");
      window.setMember(""String_Node_Str"",controller);
      window.call(""String_Node_Str"",new Object[]{});
      Map<String,String> shortCuts=controller.getShortCuts();
      Set<String> keySet=shortCuts.keySet();
      for (      String key : keySet) {
        window.call(""String_Node_Str"",new Object[]{key,shortCuts.get(key)});
      }
      if (Objects.isNull(content))       return true;
      window.call(""String_Node_Str"",new Object[]{content});
      window.call(""String_Node_Str"");
    }
    return false;
  }
);
  AnchorPane anchorPane=new AnchorPane();
  MyTab tab=tabService.createTab();
  Node editorVBox=editorService.createEditorVBox(webView,tab);
  controller.fitToParent(editorVBox);
  anchorPane.getChildren().add(editorVBox);
  tab.setWebView(webView);
  tab.setContent(anchorPane);
  tab.setTabText(""String_Node_Str"");
  TabPane tabPane=controller.getTabPane();
  tabPane.getTabs().add(tab);
  tab.select();
  webView.requestFocus();
}",0.9844897959183674
62395,"public void addTab(Path path){
  ObservableList<String> recentFiles=controller.getRecentFiles();
  if (Files.notExists(path)) {
    recentFiles.remove(path.toString());
    return;
  }
  ObservableList<Tab> tabs=controller.getTabPane().getTabs();
  for (  Tab tab : tabs) {
    MyTab myTab=(MyTab)tab;
    Path currentPath=myTab.getPath();
    if (Objects.nonNull(currentPath))     if (currentPath.equals(path)) {
      myTab.select();
      return;
    }
  }
  AnchorPane anchorPane=new AnchorPane();
  WebView webView=webviewService.createWebView();
  WebEngine webEngine=webView.getEngine();
  MyTab tab=createTab();
  tab.setWebView(webView);
  webEngine.setConfirmHandler(param -> {
    if (""String_Node_Str"".equals(param)) {
      JSObject window=(JSObject)webEngine.executeScript(""String_Node_Str"");
      window.setMember(""String_Node_Str"",controller);
      window.call(""String_Node_Str"",new Object[]{});
      Map<String,String> shortCuts=controller.getShortCuts();
      Set<String> keySet=shortCuts.keySet();
      for (      String key : keySet) {
        window.call(""String_Node_Str"",new Object[]{key,shortCuts.get(key)});
      }
      if (Objects.isNull(path))       return true;
      threadService.runTaskLater(() -> {
        String content=IOHelper.readFile(path);
        threadService.runActionLater(() -> {
          tab.setTabText(path.getFileName().toString());
          window.call(""String_Node_Str"",new Object[]{content});
        }
);
      }
);
    }
    return false;
  }
);
  Node editorVBox=editorService.createEditorVBox(webView,tab);
  controller.fitToParent(editorVBox);
  anchorPane.getChildren().add(editorVBox);
  tab.setContent(anchorPane);
  tab.setPath(path);
  TabPane tabPane=controller.getTabPane();
  tabPane.getTabs().add(tab);
  Tooltip tip=new Tooltip(path.toString());
  Tooltip.install(tab.getGraphic(),tip);
  Tab lastTab=tabPane.getTabs().get(tabPane.getTabs().size() - 1);
  tabPane.getSelectionModel().select(lastTab);
  recentFiles.remove(path.toString());
  recentFiles.add(0,path.toString());
  webView.requestFocus();
}","public void addTab(Path path){
  ObservableList<String> recentFiles=controller.getRecentFiles();
  if (Files.notExists(path)) {
    recentFiles.remove(path.toString());
    return;
  }
  ObservableList<Tab> tabs=controller.getTabPane().getTabs();
  for (  Tab tab : tabs) {
    MyTab myTab=(MyTab)tab;
    Path currentPath=myTab.getPath();
    if (Objects.nonNull(currentPath))     if (currentPath.equals(path)) {
      myTab.select();
      return;
    }
  }
  AnchorPane anchorPane=new AnchorPane();
  WebView webView=webviewService.createWebView();
  WebEngine webEngine=webView.getEngine();
  MyTab tab=createTab();
  tab.setWebView(webView);
  webEngine.setConfirmHandler(param -> {
    if (""String_Node_Str"".equals(param)) {
      JSObject window=(JSObject)webEngine.executeScript(""String_Node_Str"");
      window.setMember(""String_Node_Str"",controller);
      window.call(""String_Node_Str"",new Object[]{});
      Map<String,String> shortCuts=controller.getShortCuts();
      Set<String> keySet=shortCuts.keySet();
      for (      String key : keySet) {
        window.call(""String_Node_Str"",new Object[]{key,shortCuts.get(key)});
      }
      if (Objects.isNull(path))       return true;
      threadService.runTaskLater(() -> {
        String content=IOHelper.readFile(path);
        threadService.runActionLater(() -> {
          tab.setTabText(path.getFileName().toString());
          window.call(""String_Node_Str"",new Object[]{content});
          window.call(""String_Node_Str"");
        }
);
      }
);
    }
    return false;
  }
);
  Node editorVBox=editorService.createEditorVBox(webView,tab);
  controller.fitToParent(editorVBox);
  anchorPane.getChildren().add(editorVBox);
  tab.setContent(anchorPane);
  tab.setPath(path);
  TabPane tabPane=controller.getTabPane();
  tabPane.getTabs().add(tab);
  Tooltip tip=new Tooltip(path.toString());
  Tooltip.install(tab.getGraphic(),tip);
  Tab lastTab=tabPane.getTabs().get(tabPane.getTabs().size() - 1);
  tabPane.getSelectionModel().select(lastTab);
  recentFiles.remove(path.toString());
  recentFiles.add(0,path.toString());
  webView.requestFocus();
}",0.99
62396,"@Override public void start(final Stage stage){
  final CmdlineConfig config=new CmdlineConfig();
  final CmdlineParser cp=new CmdlineParser(config);
  try {
    cp.parse(getParameters().getRaw().toArray(new String[0]));
  }
 catch (  final CmdlineParserException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    System.exit(1);
  }
  if (config.help) {
    cp.usage();
    System.exit(0);
  }
  try {
    startApp(stage,config);
  }
 catch (  final Throwable e) {
    logger.error(e.getMessage(),e);
  }
}","@Override public void start(final Stage stage){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  final CmdlineConfig config=new CmdlineConfig();
  final CmdlineParser cp=new CmdlineParser(config);
  try {
    cp.parse(getParameters().getRaw().toArray(new String[0]));
  }
 catch (  final CmdlineParserException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    System.exit(1);
  }
  if (config.help) {
    cp.usage();
    System.exit(0);
  }
  try {
    startApp(stage,config);
  }
 catch (  final Throwable e) {
    logger.error(e.getMessage(),e);
  }
}",0.946894689468947
62397,"private void closeIt(){
  ThreadService.runTaskLater(() -> {
    ThreadService.runActionLater(() -> {
      if (!this.getTabText().equals(""String_Node_Str"")) {
        closedPaths.add(Optional.ofNullable(this.getPath()));
      }
      this.getTabPane().getTabs().remove(this);
      this.setPath(null);
      this.setOnClosed(null);
      this.setOnSelectionChanged(null);
      this.setUserData(null);
      this.getLabel().setOnMouseClicked(null);
      this.setOnCloseRequest(null);
      this.setWebView(null);
      this.setContent(null);
      this.setLabel(null);
      if (controller.getTabPane().getTabs().isEmpty()) {
        controller.newDoc(null);
      }
    }
);
  }
);
}","private void closeIt(){
  this.getTabPane().getTabs().remove(this);
  ThreadService.runTaskLater(() -> {
    ThreadService.runActionLater(() -> {
      if (!this.getTabText().equals(""String_Node_Str"")) {
        closedPaths.add(Optional.ofNullable(this.getPath()));
      }
      this.setPath(null);
      this.setOnClosed(null);
      this.setOnSelectionChanged(null);
      this.setUserData(null);
      this.getLabel().setOnMouseClicked(null);
      this.setOnCloseRequest(null);
      this.setWebView(null);
      this.setContent(null);
      this.setLabel(null);
    }
);
  }
);
}",0.8411949685534591
62398,"public void saveAndCloseCurrentTab(){
  this.saveDoc();
  tabPane.getTabs().remove(current.currentTab());
  if (this.getTabPane().getTabs().isEmpty()) {
    this.newDoc(null);
  }
}","public void saveAndCloseCurrentTab(){
  this.saveDoc();
  threadService.runActionLater(current.currentTab()::close);
}",0.5953177257525084
62399,"public MyTab createTab(){
  MyTab tab=new MyTab();
  tab.setController(controller);
  tab.setOnCloseRequest(event -> {
    event.consume();
    tab.close();
  }
);
  tab.selectedProperty().addListener((observableValue,before,after) -> {
    if (after) {
      if (Objects.nonNull(current.currentWebView())) {
        WebEngine webEngine=current.currentEngine();
        Worker.State state=webEngine.getLoadWorker().getState();
        if (state == Worker.State.SUCCEEDED) {
          controller.textListener(current.currentEditorValue());
        }
      }
      threadService.runActionLater(() -> {
        WebView webView=tab.getWebView();
        if (Objects.nonNull(webView))         webView.requestFocus();
      }
);
    }
  }
);
  MenuItem menuItem0=new MenuItem(""String_Node_Str"");
  menuItem0.setOnAction(actionEvent -> {
    tab.close();
  }
);
  MenuItem menuItem1=new MenuItem(""String_Node_Str"");
  menuItem1.setOnAction(actionEvent -> {
    ObservableList<Tab> tabs=controller.getTabPane().getTabs();
    ObservableList<Tab> clonedTabs=FXCollections.observableArrayList(tabs);
    if (clonedTabs.size() > 0) {
      clonedTabs.forEach((closedTab) -> {
        MyTab myTab=(MyTab)closedTab;
        myTab.close();
      }
);
    }
  }
);
  MenuItem menuItem2=new MenuItem(""String_Node_Str"");
  menuItem2.setOnAction(actionEvent -> {
    ObservableList<Tab> blackList=FXCollections.observableArrayList();
    blackList.addAll(controller.getTabPane().getTabs());
    blackList.remove(tab);
    blackList.forEach(t -> {
      MyTab closeTab=(MyTab)t;
      closeTab.close();
    }
);
  }
);
  MenuItem menuItem4=new MenuItem(""String_Node_Str"");
  menuItem4.setOnAction(actionEvent -> {
    TabPane tabPane=controller.getTabPane();
    if (tabPane.getSelectionModel().isSelected(tabPane.getTabs().size() - 1))     tabPane.getSelectionModel().selectFirst();
 else     tabPane.getSelectionModel().selectNext();
  }
);
  MenuItem menuItem5=new MenuItem(""String_Node_Str"");
  menuItem5.setOnAction(actionEvent -> {
    SingleSelectionModel<Tab> selectionModel=controller.getTabPane().getSelectionModel();
    if (selectionModel.isSelected(0))     selectionModel.selectLast();
 else     selectionModel.selectPrevious();
  }
);
  MenuItem menuItem6=new MenuItem(""String_Node_Str"");
  menuItem6.setOnAction(actionEvent -> {
    List<Optional<Path>> closedPaths=MyTab.getClosedPaths();
    if (closedPaths.size() > 0) {
      int index=closedPaths.size() - 1;
      closedPaths.get(index).filter(pathResolver::isAsciidoc).ifPresent(this::addTab);
      closedPaths.get(index).filter(pathResolver::isMarkdown).ifPresent(this::addTab);
      closedPaths.get(index).filter(pathResolver::isImage).ifPresent(this::addImageTab);
      closedPaths.remove(index);
    }
  }
);
  MenuItem menuItem7=new MenuItem(""String_Node_Str"");
  menuItem7.setOnAction(event -> {
    current.currentPath().ifPresent(path -> {
      controller.getHostServices().showDocument(path.getParent().toUri().toASCIIString());
    }
);
  }
);
  MenuItem menuItem8=new MenuItem(""String_Node_Str"");
  menuItem8.setOnAction(controller::newDoc);
  MenuItem gotoWorkdir=new MenuItem(""String_Node_Str"");
  gotoWorkdir.setOnAction(event -> {
    current.currentPath().map(Path::getParent).ifPresent(directoryService::changeWorkigDir);
  }
);
  ContextMenu contextMenu=new ContextMenu();
  contextMenu.getItems().addAll(menuItem0,menuItem1,menuItem2,new SeparatorMenuItem(),menuItem4,menuItem5,menuItem6,new SeparatorMenuItem(),gotoWorkdir,new SeparatorMenuItem(),menuItem7,menuItem8);
  tab.contextMenuProperty().setValue(contextMenu);
  Label label=new Label();
  tab.setLabel(label);
  label.setOnMouseClicked(mouseEvent -> {
    if (mouseEvent.getButton().equals(MouseButton.SECONDARY)) {
      controller.getTabPane().getSelectionModel().select(tab);
    }
 else     if (mouseEvent.getClickCount() > 1) {
      controller.adjustSplitPane();
    }
  }
);
  return tab;
}","public MyTab createTab(){
  MyTab tab=new MyTab(){
    @Override public void close(){
      super.close();
      if (controller.getTabPane().getTabs().isEmpty()) {
        controller.newDoc(null);
      }
    }
  }
;
  tab.setOnCloseRequest(event -> {
    event.consume();
    tab.close();
  }
);
  tab.selectedProperty().addListener((observableValue,before,after) -> {
    if (after) {
      if (Objects.nonNull(current.currentWebView())) {
        WebEngine webEngine=current.currentEngine();
        Worker.State state=webEngine.getLoadWorker().getState();
        if (state == Worker.State.SUCCEEDED) {
          controller.textListener(current.currentEditorValue());
        }
      }
      threadService.runActionLater(() -> {
        WebView webView=tab.getWebView();
        if (Objects.nonNull(webView))         webView.requestFocus();
      }
);
    }
  }
);
  MenuItem menuItem0=new MenuItem(""String_Node_Str"");
  menuItem0.setOnAction(actionEvent -> {
    tab.close();
  }
);
  MenuItem menuItem1=new MenuItem(""String_Node_Str"");
  menuItem1.setOnAction(actionEvent -> {
    ObservableList<Tab> tabs=controller.getTabPane().getTabs();
    ObservableList<Tab> clonedTabs=FXCollections.observableArrayList(tabs);
    if (clonedTabs.size() > 0) {
      clonedTabs.forEach((closedTab) -> {
        MyTab myTab=(MyTab)closedTab;
        myTab.close();
      }
);
    }
  }
);
  MenuItem menuItem2=new MenuItem(""String_Node_Str"");
  menuItem2.setOnAction(actionEvent -> {
    ObservableList<Tab> blackList=FXCollections.observableArrayList();
    blackList.addAll(controller.getTabPane().getTabs());
    blackList.remove(tab);
    blackList.forEach(t -> {
      MyTab closeTab=(MyTab)t;
      closeTab.close();
    }
);
  }
);
  MenuItem menuItem4=new MenuItem(""String_Node_Str"");
  menuItem4.setOnAction(actionEvent -> {
    TabPane tabPane=controller.getTabPane();
    if (tabPane.getSelectionModel().isSelected(tabPane.getTabs().size() - 1))     tabPane.getSelectionModel().selectFirst();
 else     tabPane.getSelectionModel().selectNext();
  }
);
  MenuItem menuItem5=new MenuItem(""String_Node_Str"");
  menuItem5.setOnAction(actionEvent -> {
    SingleSelectionModel<Tab> selectionModel=controller.getTabPane().getSelectionModel();
    if (selectionModel.isSelected(0))     selectionModel.selectLast();
 else     selectionModel.selectPrevious();
  }
);
  MenuItem menuItem6=new MenuItem(""String_Node_Str"");
  menuItem6.setOnAction(actionEvent -> {
    List<Optional<Path>> closedPaths=MyTab.getClosedPaths();
    if (closedPaths.size() > 0) {
      int index=closedPaths.size() - 1;
      closedPaths.get(index).filter(pathResolver::isAsciidoc).ifPresent(this::addTab);
      closedPaths.get(index).filter(pathResolver::isMarkdown).ifPresent(this::addTab);
      closedPaths.get(index).filter(pathResolver::isImage).ifPresent(this::addImageTab);
      closedPaths.remove(index);
    }
  }
);
  MenuItem menuItem7=new MenuItem(""String_Node_Str"");
  menuItem7.setOnAction(event -> {
    current.currentPath().ifPresent(path -> {
      controller.getHostServices().showDocument(path.getParent().toUri().toASCIIString());
    }
);
  }
);
  MenuItem menuItem8=new MenuItem(""String_Node_Str"");
  menuItem8.setOnAction(controller::newDoc);
  MenuItem gotoWorkdir=new MenuItem(""String_Node_Str"");
  gotoWorkdir.setOnAction(event -> {
    current.currentPath().map(Path::getParent).ifPresent(directoryService::changeWorkigDir);
  }
);
  ContextMenu contextMenu=new ContextMenu();
  contextMenu.getItems().addAll(menuItem0,menuItem1,menuItem2,new SeparatorMenuItem(),menuItem4,menuItem5,menuItem6,new SeparatorMenuItem(),gotoWorkdir,new SeparatorMenuItem(),menuItem7,menuItem8);
  tab.contextMenuProperty().setValue(contextMenu);
  Label label=new Label();
  tab.setLabel(label);
  label.setOnMouseClicked(mouseEvent -> {
    if (mouseEvent.getButton().equals(MouseButton.SECONDARY)) {
      controller.getTabPane().getSelectionModel().select(tab);
    }
 else     if (mouseEvent.getClickCount() > 1) {
      controller.adjustSplitPane();
    }
  }
);
  return tab;
}",0.9751281089863768
62400,"private Label getLabel(){
  return (Label)this.getGraphic();
}","public Label getLabel(){
  if (Objects.isNull(this.getGraphic()))   this.setGraphic(new Label());
  return (Label)this.getGraphic();
}",0.5816326530612245
62401,"private void closeIt(){
  this.getTabPane().getTabs().remove(this);
  ThreadService.runTaskLater(() -> {
    ThreadService.runActionLater(() -> {
      if (!this.getTabText().equals(""String_Node_Str"")) {
        closedPaths.add(Optional.ofNullable(this.getPath()));
      }
      this.setPath(null);
      this.setOnClosed(null);
      this.setOnSelectionChanged(null);
      this.setUserData(null);
      this.getLabel().setOnMouseClicked(null);
      this.setOnCloseRequest(null);
      this.setWebView(null);
      this.setContent(null);
      this.setLabel(null);
    }
);
  }
);
}","private void closeIt(){
  this.getTabPane().getTabs().remove(this);
  ThreadService.runTaskLater(() -> {
    ThreadService.runActionLater(() -> {
      if (!this.getTabText().equals(""String_Node_Str"")) {
        closedPaths.add(Optional.ofNullable(this.getPath()));
      }
      this.setPath(null);
      this.setOnClosed(null);
      this.setOnSelectionChanged(null);
      this.setUserData(null);
      this.getLabel().setOnMouseClicked(null);
      this.setOnCloseRequest(null);
      this.setWebView(null);
      this.setContent(null);
      this.setGraphic(null);
    }
);
  }
);
}",0.9897610921501706
62402,"public MyTab createTab(){
  MyTab tab=new MyTab(){
    @Override public void close(){
      super.close();
      if (controller.getTabPane().getTabs().isEmpty()) {
        controller.newDoc(null);
      }
    }
  }
;
  tab.setOnCloseRequest(event -> {
    event.consume();
    tab.close();
  }
);
  tab.selectedProperty().addListener((observableValue,before,after) -> {
    if (after) {
      if (Objects.nonNull(current.currentWebView())) {
        WebEngine webEngine=current.currentEngine();
        Worker.State state=webEngine.getLoadWorker().getState();
        if (state == Worker.State.SUCCEEDED) {
          controller.textListener(current.currentEditorValue());
        }
      }
      threadService.runActionLater(() -> {
        WebView webView=tab.getWebView();
        if (Objects.nonNull(webView))         webView.requestFocus();
      }
);
    }
  }
);
  MenuItem menuItem0=new MenuItem(""String_Node_Str"");
  menuItem0.setOnAction(actionEvent -> {
    tab.close();
  }
);
  MenuItem menuItem1=new MenuItem(""String_Node_Str"");
  menuItem1.setOnAction(actionEvent -> {
    ObservableList<Tab> tabs=controller.getTabPane().getTabs();
    ObservableList<Tab> clonedTabs=FXCollections.observableArrayList(tabs);
    if (clonedTabs.size() > 0) {
      clonedTabs.forEach((closedTab) -> {
        MyTab myTab=(MyTab)closedTab;
        myTab.close();
      }
);
    }
  }
);
  MenuItem menuItem2=new MenuItem(""String_Node_Str"");
  menuItem2.setOnAction(actionEvent -> {
    ObservableList<Tab> blackList=FXCollections.observableArrayList();
    blackList.addAll(controller.getTabPane().getTabs());
    blackList.remove(tab);
    blackList.forEach(t -> {
      MyTab closeTab=(MyTab)t;
      closeTab.close();
    }
);
  }
);
  MenuItem menuItem4=new MenuItem(""String_Node_Str"");
  menuItem4.setOnAction(actionEvent -> {
    TabPane tabPane=controller.getTabPane();
    if (tabPane.getSelectionModel().isSelected(tabPane.getTabs().size() - 1))     tabPane.getSelectionModel().selectFirst();
 else     tabPane.getSelectionModel().selectNext();
  }
);
  MenuItem menuItem5=new MenuItem(""String_Node_Str"");
  menuItem5.setOnAction(actionEvent -> {
    SingleSelectionModel<Tab> selectionModel=controller.getTabPane().getSelectionModel();
    if (selectionModel.isSelected(0))     selectionModel.selectLast();
 else     selectionModel.selectPrevious();
  }
);
  MenuItem menuItem6=new MenuItem(""String_Node_Str"");
  menuItem6.setOnAction(actionEvent -> {
    List<Optional<Path>> closedPaths=MyTab.getClosedPaths();
    if (closedPaths.size() > 0) {
      int index=closedPaths.size() - 1;
      closedPaths.get(index).filter(pathResolver::isAsciidoc).ifPresent(this::addTab);
      closedPaths.get(index).filter(pathResolver::isMarkdown).ifPresent(this::addTab);
      closedPaths.get(index).filter(pathResolver::isImage).ifPresent(this::addImageTab);
      closedPaths.remove(index);
    }
  }
);
  MenuItem menuItem7=new MenuItem(""String_Node_Str"");
  menuItem7.setOnAction(event -> {
    current.currentPath().ifPresent(path -> {
      controller.getHostServices().showDocument(path.getParent().toUri().toASCIIString());
    }
);
  }
);
  MenuItem menuItem8=new MenuItem(""String_Node_Str"");
  menuItem8.setOnAction(controller::newDoc);
  MenuItem gotoWorkdir=new MenuItem(""String_Node_Str"");
  gotoWorkdir.setOnAction(event -> {
    current.currentPath().map(Path::getParent).ifPresent(directoryService::changeWorkigDir);
  }
);
  ContextMenu contextMenu=new ContextMenu();
  contextMenu.getItems().addAll(menuItem0,menuItem1,menuItem2,new SeparatorMenuItem(),menuItem4,menuItem5,menuItem6,new SeparatorMenuItem(),gotoWorkdir,new SeparatorMenuItem(),menuItem7,menuItem8);
  tab.contextMenuProperty().setValue(contextMenu);
  Label label=new Label();
  tab.setLabel(label);
  label.setOnMouseClicked(mouseEvent -> {
    if (mouseEvent.getButton().equals(MouseButton.SECONDARY)) {
      controller.getTabPane().getSelectionModel().select(tab);
    }
 else     if (mouseEvent.getClickCount() > 1) {
      controller.adjustSplitPane();
    }
  }
);
  return tab;
}","public MyTab createTab(){
  MyTab tab=new MyTab(){
    @Override public void close(){
      super.close();
      if (controller.getTabPane().getTabs().isEmpty()) {
        controller.newDoc(null);
      }
    }
  }
;
  tab.setOnCloseRequest(event -> {
    event.consume();
    tab.close();
  }
);
  tab.selectedProperty().addListener((observableValue,before,after) -> {
    if (after) {
      if (Objects.nonNull(current.currentWebView())) {
        WebEngine webEngine=current.currentEngine();
        Worker.State state=webEngine.getLoadWorker().getState();
        if (state == Worker.State.SUCCEEDED) {
          controller.textListener(current.currentEditorValue());
        }
      }
      threadService.runActionLater(() -> {
        WebView webView=tab.getWebView();
        if (Objects.nonNull(webView))         webView.requestFocus();
      }
);
    }
  }
);
  MenuItem menuItem0=new MenuItem(""String_Node_Str"");
  menuItem0.setOnAction(actionEvent -> {
    tab.close();
  }
);
  MenuItem menuItem1=new MenuItem(""String_Node_Str"");
  menuItem1.setOnAction(actionEvent -> {
    ObservableList<Tab> tabs=controller.getTabPane().getTabs();
    ObservableList<Tab> clonedTabs=FXCollections.observableArrayList(tabs);
    if (clonedTabs.size() > 0) {
      clonedTabs.forEach((closedTab) -> {
        MyTab myTab=(MyTab)closedTab;
        myTab.close();
      }
);
    }
  }
);
  MenuItem menuItem2=new MenuItem(""String_Node_Str"");
  menuItem2.setOnAction(actionEvent -> {
    ObservableList<Tab> blackList=FXCollections.observableArrayList();
    blackList.addAll(controller.getTabPane().getTabs());
    blackList.remove(tab);
    blackList.forEach(t -> {
      MyTab closeTab=(MyTab)t;
      closeTab.close();
    }
);
  }
);
  MenuItem menuItem4=new MenuItem(""String_Node_Str"");
  menuItem4.setOnAction(actionEvent -> {
    TabPane tabPane=controller.getTabPane();
    if (tabPane.getSelectionModel().isSelected(tabPane.getTabs().size() - 1))     tabPane.getSelectionModel().selectFirst();
 else     tabPane.getSelectionModel().selectNext();
  }
);
  MenuItem menuItem5=new MenuItem(""String_Node_Str"");
  menuItem5.setOnAction(actionEvent -> {
    SingleSelectionModel<Tab> selectionModel=controller.getTabPane().getSelectionModel();
    if (selectionModel.isSelected(0))     selectionModel.selectLast();
 else     selectionModel.selectPrevious();
  }
);
  MenuItem menuItem6=new MenuItem(""String_Node_Str"");
  menuItem6.setOnAction(actionEvent -> {
    List<Optional<Path>> closedPaths=MyTab.getClosedPaths();
    if (closedPaths.size() > 0) {
      int index=closedPaths.size() - 1;
      closedPaths.get(index).filter(pathResolver::isAsciidoc).ifPresent(this::addTab);
      closedPaths.get(index).filter(pathResolver::isMarkdown).ifPresent(this::addTab);
      closedPaths.get(index).filter(pathResolver::isImage).ifPresent(this::addImageTab);
      closedPaths.remove(index);
    }
  }
);
  MenuItem menuItem7=new MenuItem(""String_Node_Str"");
  menuItem7.setOnAction(event -> {
    current.currentPath().ifPresent(path -> {
      controller.getHostServices().showDocument(path.getParent().toUri().toASCIIString());
    }
);
  }
);
  MenuItem menuItem8=new MenuItem(""String_Node_Str"");
  menuItem8.setOnAction(controller::newDoc);
  MenuItem gotoWorkdir=new MenuItem(""String_Node_Str"");
  gotoWorkdir.setOnAction(event -> {
    current.currentPath().map(Path::getParent).ifPresent(directoryService::changeWorkigDir);
  }
);
  ContextMenu contextMenu=new ContextMenu();
  contextMenu.getItems().addAll(menuItem0,menuItem1,menuItem2,new SeparatorMenuItem(),menuItem4,menuItem5,menuItem6,new SeparatorMenuItem(),gotoWorkdir,new SeparatorMenuItem(),menuItem7,menuItem8);
  tab.contextMenuProperty().setValue(contextMenu);
  Label label=tab.getLabel();
  label.setOnMouseClicked(mouseEvent -> {
    if (mouseEvent.getButton().equals(MouseButton.SECONDARY)) {
      controller.getTabPane().getSelectionModel().select(tab);
    }
 else     if (mouseEvent.getClickCount() > 1) {
      controller.adjustSplitPane();
    }
  }
);
  return tab;
}",0.9958097116095636
62403,"public String appendFormula(String fileName,String formula){
  if (fileName.endsWith(""String_Node_Str"") || fileName.endsWith(""String_Node_Str"")) {
    WebEngine engine=controller.getMathjaxView().getEngine();
    engine.executeScript(String.format(""String_Node_Str"",fileName,formula));
    return ""String_Node_Str"" + fileName;
  }
  return ""String_Node_Str"";
}","public String appendFormula(String fileName,String formula){
  if (fileName.endsWith(""String_Node_Str"") || fileName.endsWith(""String_Node_Str"")) {
    getWindow().call(""String_Node_Str"",new Object[]{fileName,formula});
    return ""String_Node_Str"" + fileName;
  }
  return ""String_Node_Str"";
}",0.5145482388973966
62404,"public void setTabText(String tabText){
  getLabel().setText(tabText);
  updateMarkup();
}","public void setTabText(String tabText){
  Label label=getLabel();
  label.setText(tabText);
  updateMarkup();
}",0.8955223880597015
62405,"private void closeIt(){
  this.getTabPane().getTabs().remove(this);
  ThreadService.runTaskLater(() -> {
    ThreadService.runActionLater(() -> {
      if (!this.getTabText().equals(""String_Node_Str"")) {
        closedPaths.add(Optional.ofNullable(this.getPath()));
      }
      this.setPath(null);
      this.setOnClosed(null);
      this.setOnSelectionChanged(null);
      this.setUserData(null);
      this.getLabel().setOnMouseClicked(null);
      this.setOnCloseRequest(null);
      this.setWebView(null);
      this.setContent(null);
      this.setGraphic(null);
    }
);
  }
);
}","private void closeIt(){
  ThreadService.runTaskLater(() -> {
    ThreadService.runActionLater(() -> {
      if (!this.getTabText().equals(""String_Node_Str"")) {
        closedPaths.add(Optional.ofNullable(this.getPath()));
      }
      this.getTabPane().getTabs().remove(this);
      this.setPath(null);
      this.setOnClosed(null);
      this.setOnSelectionChanged(null);
      this.setUserData(null);
      this.getLabel().setOnMouseClicked(null);
      this.setOnCloseRequest(null);
      this.setWebView(null);
      this.setContent(null);
    }
);
  }
);
}",0.6127067014795474
62406,"public String getTabText(){
  return getLabel().getText();
}","public String getTabText(){
  Label label=getLabel();
  return label.getText();
}",0.7801418439716312
62407,"private void closeIt(){
  this.getTabPane().getTabs().remove(this);
  ThreadService.runTaskLater(() -> {
    ThreadService.runActionLater(() -> {
      if (!this.getTabText().equals(""String_Node_Str"")) {
        closedPaths.add(Optional.ofNullable(this.getPath()));
      }
      this.setPath(null);
      this.setOnClosed(null);
      this.setOnSelectionChanged(null);
      this.setUserData(null);
      this.getLabel().setOnMouseClicked(null);
      this.setOnCloseRequest(null);
      this.setWebView(null);
      this.setContent(null);
    }
);
  }
);
}","private void closeIt(){
  Platform.runLater(() -> {
    this.getTabPane().getTabs().remove(this);
  }
);
}",0.2289156626506024
62408,"@Override public String toString(){
  return ""String_Node_Str"" + path;
}","@Override public String toString(){
  return getTabText();
}",0.7727272727272727
62409,"public MyTab createTab(){
  MyTab tab=new MyTab(){
    @Override public void close(){
      super.close();
      if (controller.getTabPane().getTabs().isEmpty()) {
        controller.newDoc(null);
      }
    }
  }
;
  tab.setOnCloseRequest(event -> {
    event.consume();
    tab.close();
  }
);
  tab.selectedProperty().addListener((observableValue,before,after) -> {
    if (after) {
      if (Objects.nonNull(current.currentWebView())) {
        WebEngine webEngine=current.currentEngine();
        Worker.State state=webEngine.getLoadWorker().getState();
        if (state == Worker.State.SUCCEEDED) {
          controller.textListener(current.currentEditorValue());
        }
      }
      threadService.runActionLater(() -> {
        WebView webView=tab.getWebView();
        if (Objects.nonNull(webView))         webView.requestFocus();
      }
);
    }
  }
);
  MenuItem menuItem0=new MenuItem(""String_Node_Str"");
  menuItem0.setOnAction(actionEvent -> {
    tab.close();
  }
);
  MenuItem menuItem1=new MenuItem(""String_Node_Str"");
  menuItem1.setOnAction(actionEvent -> {
    ObservableList<Tab> tabs=controller.getTabPane().getTabs();
    ObservableList<Tab> clonedTabs=FXCollections.observableArrayList(tabs);
    if (clonedTabs.size() > 0) {
      clonedTabs.forEach((closedTab) -> {
        MyTab myTab=(MyTab)closedTab;
        myTab.close();
      }
);
    }
  }
);
  MenuItem menuItem2=new MenuItem(""String_Node_Str"");
  menuItem2.setOnAction(actionEvent -> {
    ObservableList<Tab> blackList=FXCollections.observableArrayList();
    blackList.addAll(controller.getTabPane().getTabs());
    blackList.remove(tab);
    blackList.forEach(t -> {
      MyTab closeTab=(MyTab)t;
      closeTab.close();
    }
);
  }
);
  MenuItem menuItem4=new MenuItem(""String_Node_Str"");
  menuItem4.setOnAction(actionEvent -> {
    TabPane tabPane=controller.getTabPane();
    if (tabPane.getSelectionModel().isSelected(tabPane.getTabs().size() - 1))     tabPane.getSelectionModel().selectFirst();
 else     tabPane.getSelectionModel().selectNext();
  }
);
  MenuItem menuItem5=new MenuItem(""String_Node_Str"");
  menuItem5.setOnAction(actionEvent -> {
    SingleSelectionModel<Tab> selectionModel=controller.getTabPane().getSelectionModel();
    if (selectionModel.isSelected(0))     selectionModel.selectLast();
 else     selectionModel.selectPrevious();
  }
);
  MenuItem menuItem6=new MenuItem(""String_Node_Str"");
  menuItem6.setOnAction(actionEvent -> {
    List<Optional<Path>> closedPaths=MyTab.getClosedPaths();
    if (closedPaths.size() > 0) {
      int index=closedPaths.size() - 1;
      closedPaths.get(index).filter(pathResolver::isAsciidoc).ifPresent(this::addTab);
      closedPaths.get(index).filter(pathResolver::isMarkdown).ifPresent(this::addTab);
      closedPaths.get(index).filter(pathResolver::isImage).ifPresent(this::addImageTab);
      closedPaths.remove(index);
    }
  }
);
  MenuItem menuItem7=new MenuItem(""String_Node_Str"");
  menuItem7.setOnAction(event -> {
    current.currentPath().ifPresent(path -> {
      controller.getHostServices().showDocument(path.getParent().toUri().toASCIIString());
    }
);
  }
);
  MenuItem menuItem8=new MenuItem(""String_Node_Str"");
  menuItem8.setOnAction(controller::newDoc);
  MenuItem gotoWorkdir=new MenuItem(""String_Node_Str"");
  gotoWorkdir.setOnAction(event -> {
    current.currentPath().map(Path::getParent).ifPresent(directoryService::changeWorkigDir);
  }
);
  ContextMenu contextMenu=new ContextMenu();
  contextMenu.getItems().addAll(menuItem0,menuItem1,menuItem2,new SeparatorMenuItem(),menuItem4,menuItem5,menuItem6,new SeparatorMenuItem(),gotoWorkdir,new SeparatorMenuItem(),menuItem7,menuItem8);
  tab.contextMenuProperty().setValue(contextMenu);
  Label label=tab.getLabel();
  label.setOnMouseClicked(mouseEvent -> {
    if (mouseEvent.getButton().equals(MouseButton.SECONDARY)) {
      controller.getTabPane().getSelectionModel().select(tab);
    }
 else     if (mouseEvent.getClickCount() > 1) {
      controller.adjustSplitPane();
    }
  }
);
  return tab;
}","public MyTab createTab(){
  MyTab tab=new MyTab(){
    @Override public void close(){
      if (Objects.nonNull(this.getPath()))       closedPaths.add(Optional.ofNullable(current.currentTab().getPath()));
      super.close();
      cleanRemovedTabs(this);
      Platform.runLater(() -> {
        ObservableList<Tab> tabs=controller.getTabPane().getTabs();
        if (tabs.isEmpty()) {
          controller.newDoc(null);
        }
      }
);
    }
  }
;
  tab.setOnCloseRequest(event -> {
    event.consume();
    tab.close();
  }
);
  tab.selectedProperty().addListener((observableValue,before,after) -> {
    if (after) {
      threadService.runActionLater(() -> {
        if (Objects.nonNull(current.currentWebView())) {
          WebEngine webEngine=current.currentEngine();
          Worker.State state=webEngine.getLoadWorker().getState();
          if (state == Worker.State.SUCCEEDED) {
            controller.textListener(current.currentEditorValue());
          }
        }
        WebView webView=tab.getWebView();
        if (Objects.nonNull(webView))         webView.requestFocus();
      }
);
    }
  }
);
  MenuItem menuItem0=new MenuItem(""String_Node_Str"");
  menuItem0.setOnAction(actionEvent -> {
    tab.close();
  }
);
  MenuItem menuItem1=new MenuItem(""String_Node_Str"");
  menuItem1.setOnAction(actionEvent -> {
    ObservableList<Tab> tabs=controller.getTabPane().getTabs();
    ObservableList<Tab> clonedTabs=FXCollections.observableArrayList(tabs);
    if (clonedTabs.size() > 0) {
      clonedTabs.forEach((closedTab) -> {
        MyTab myTab=(MyTab)closedTab;
        myTab.close();
      }
);
    }
  }
);
  MenuItem menuItem2=new MenuItem(""String_Node_Str"");
  menuItem2.setOnAction(actionEvent -> {
    ObservableList<Tab> blackList=FXCollections.observableArrayList();
    blackList.addAll(controller.getTabPane().getTabs());
    blackList.remove(tab);
    blackList.forEach(t -> {
      MyTab closeTab=(MyTab)t;
      closeTab.close();
    }
);
  }
);
  MenuItem menuItem4=new MenuItem(""String_Node_Str"");
  menuItem4.setOnAction(actionEvent -> {
    TabPane tabPane=controller.getTabPane();
    if (tabPane.getSelectionModel().isSelected(tabPane.getTabs().size() - 1))     tabPane.getSelectionModel().selectFirst();
 else     tabPane.getSelectionModel().selectNext();
  }
);
  MenuItem menuItem5=new MenuItem(""String_Node_Str"");
  menuItem5.setOnAction(actionEvent -> {
    SingleSelectionModel<Tab> selectionModel=controller.getTabPane().getSelectionModel();
    if (selectionModel.isSelected(0))     selectionModel.selectLast();
 else     selectionModel.selectPrevious();
  }
);
  MenuItem menuItem6=new MenuItem(""String_Node_Str"");
  menuItem6.setOnAction(actionEvent -> {
    if (closedPaths.size() > 0) {
      int index=closedPaths.size() - 1;
      closedPaths.get(index).filter(pathResolver::isAsciidoc).ifPresent(this::addTab);
      closedPaths.get(index).filter(pathResolver::isMarkdown).ifPresent(this::addTab);
      closedPaths.get(index).filter(pathResolver::isImage).ifPresent(this::addImageTab);
      closedPaths.remove(index);
    }
  }
);
  MenuItem menuItem7=new MenuItem(""String_Node_Str"");
  menuItem7.setOnAction(event -> {
    current.currentPath().ifPresent(path -> {
      controller.getHostServices().showDocument(path.getParent().toUri().toASCIIString());
    }
);
  }
);
  MenuItem menuItem8=new MenuItem(""String_Node_Str"");
  menuItem8.setOnAction(controller::newDoc);
  MenuItem gotoWorkdir=new MenuItem(""String_Node_Str"");
  gotoWorkdir.setOnAction(event -> {
    current.currentPath().map(Path::getParent).ifPresent(directoryService::changeWorkigDir);
  }
);
  ContextMenu contextMenu=new ContextMenu();
  contextMenu.getItems().addAll(menuItem0,menuItem1,menuItem2,new SeparatorMenuItem(),menuItem4,menuItem5,menuItem6,new SeparatorMenuItem(),gotoWorkdir,new SeparatorMenuItem(),menuItem7,menuItem8);
  tab.contextMenuProperty().setValue(contextMenu);
  Label label=tab.getLabel();
  label.setOnMouseClicked(mouseEvent -> {
    if (mouseEvent.getButton().equals(MouseButton.SECONDARY)) {
      controller.getTabPane().getSelectionModel().select(tab);
    }
 else     if (mouseEvent.getClickCount() > 1) {
      controller.adjustSplitPane();
    }
  }
);
  return tab;
}",0.9410912602607436
62410,"@Override public void close(){
  super.close();
  if (controller.getTabPane().getTabs().isEmpty()) {
    controller.newDoc(null);
  }
}","@Override public void close(){
  if (Objects.nonNull(this.getPath()))   closedPaths.add(Optional.ofNullable(current.currentTab().getPath()));
  super.close();
  cleanRemovedTabs(this);
  Platform.runLater(() -> {
    ObservableList<Tab> tabs=controller.getTabPane().getTabs();
    if (tabs.isEmpty()) {
      controller.newDoc(null);
    }
  }
);
}",0.3892339544513457
62411,"@Override public void initialize(URL url,ResourceBundle rb){
  tooltipTimeFixService.fix();
  AwesomeDude.setIcon(htmlPro,AwesomeIcon.HTML5);
  AwesomeDude.setIcon(pdfPro,AwesomeIcon.FILE_PDF_ALT);
  AwesomeDude.setIcon(ebookPro,AwesomeIcon.BOOK);
  AwesomeDude.setIcon(docbookPro,AwesomeIcon.CODE);
  AwesomeDude.setIcon(browserPro,AwesomeIcon.FLASH);
  AwesomeDude.setIcon(workingDirButton,AwesomeIcon.FOLDER_ALT,""String_Node_Str"");
  AwesomeDude.setIcon(splitHideButton,AwesomeIcon.CHEVRON_LEFT,""String_Node_Str"");
  AwesomeDude.setIcon(refreshLabel,AwesomeIcon.REFRESH,""String_Node_Str"");
  AwesomeDude.setIcon(goUpLabel,AwesomeIcon.LEVEL_UP,""String_Node_Str"");
  AwesomeDude.setIcon(goHomeLabel,AwesomeIcon.HOME,""String_Node_Str"");
  leftButton.setGraphic(AwesomeDude.createIconLabel(AwesomeIcon.ELLIPSIS_H,""String_Node_Str""));
  ContextMenu htmlProMenu=new ContextMenu();
  htmlProMenu.getStyleClass().add(""String_Node_Str"");
  htmlPro.setContextMenu(htmlProMenu);
  htmlPro.setOnMouseClicked(event -> {
    htmlProMenu.show(htmlPro,event.getScreenX(),50);
  }
);
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.generateHtml();
  }
));
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.generateHtml(true);
  }
));
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").tip(""String_Node_Str"").onclick(event -> {
    this.cutCopy(lastRendered.getValue());
  }
));
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").tip(""String_Node_Str"").onclick(event -> {
    previewEngine.executeScript(""String_Node_Str"");
  }
));
  ContextMenu pdfProMenu=new ContextMenu();
  pdfProMenu.getStyleClass().add(""String_Node_Str"");
  pdfProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.generatePdf();
  }
));
  pdfProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.generatePdf(true);
  }
));
  pdfPro.setContextMenu(pdfProMenu);
  pdfPro.setOnMouseClicked(event -> {
    pdfProMenu.show(pdfPro,event.getScreenX(),50);
  }
);
  ContextMenu docbookProMenu=new ContextMenu();
  docbookProMenu.getStyleClass().add(""String_Node_Str"");
  docbookProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.convertDocbook();
  }
));
  docbookProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.convertDocbook(true);
  }
));
  docbookPro.setContextMenu(docbookProMenu);
  docbookPro.setOnMouseClicked(event -> {
    docbookProMenu.show(docbookPro,event.getScreenX(),50);
  }
);
  ContextMenu ebookProMenu=new ContextMenu();
  ebookProMenu.getStyleClass().add(""String_Node_Str"");
  ebookProMenu.getItems().add(MenuBuilt.name(""String_Node_Str"").add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.convertMobi();
  }
)).add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.convertMobi(true);
  }
)).build());
  ebookProMenu.getItems().add(MenuBuilt.name(""String_Node_Str"").add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.convertEpub();
  }
)).add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.convertEpub(true);
  }
)).build());
  ebookPro.setOnMouseClicked(event -> {
    ebookProMenu.show(ebookPro,event.getScreenX(),50);
  }
);
  ebookPro.setContextMenu(ebookProMenu);
  browserPro.setOnMouseClicked(event -> {
    if (event.getButton() == MouseButton.PRIMARY)     this.externalBrowse();
  }
);
  port=server.getEmbeddedServletContainer().getPort();
  loadConfigurations();
  loadRecentFileList();
  loadShortCuts();
  recentListView.setItems(recentFiles);
  recentFiles.addListener((ListChangeListener<String>)c -> {
    recentListView.visibleProperty().setValue(c.getList().size() > 0);
    recentListView.getSelectionModel().selectFirst();
  }
);
  recentListView.setOnMouseClicked(event -> {
    if (event.getClickCount() > 1) {
      openRecentListFile(event);
    }
  }
);
  treeView.setCellFactory(param -> {
    TreeCell<Item> cell=new TextFieldTreeCell<Item>();
    cell.setOnDragDetected(event -> {
      Dragboard db=cell.startDragAndDrop(TransferMode.ANY);
      ClipboardContent content=new ClipboardContent();
      content.putFiles(Arrays.asList(cell.getTreeItem().getValue().getPath().toFile()));
      db.setContent(content);
    }
);
    return cell;
  }
);
  lastRendered.addListener(lastRenderedChangeListener);
  mathjaxView=new WebView();
  mathjaxView.setVisible(false);
  rootAnchor.getChildren().add(mathjaxView);
  WebEngine mathjaxEngine=mathjaxView.getEngine();
  mathjaxEngine.getLoadWorker().stateProperty().addListener((observableValue1,state,state2) -> {
    JSObject window=(JSObject)mathjaxEngine.executeScript(""String_Node_Str"");
    if (window.getMember(""String_Node_Str"").equals(""String_Node_Str""))     window.setMember(""String_Node_Str"",this);
  }
);
  mathjaxEngine.load(String.format(""String_Node_Str"",port));
  previewEngine=previewView.getEngine();
  previewEngine.load(String.format(""String_Node_Str"",port));
  previewEngine.getLoadWorker().stateProperty().addListener((observableValue1,state,state2) -> {
    if (state2 == Worker.State.SUCCEEDED) {
      JSObject window=(JSObject)previewEngine.executeScript(""String_Node_Str"");
      if (window.getMember(""String_Node_Str"").equals(""String_Node_Str"")) {
        window.setMember(""String_Node_Str"",this);
      }
    }
  }
);
  previewEngine.getLoadWorker().exceptionProperty().addListener((ov,t,t1) -> {
    logger.info(t1.getMessage(),t1);
  }
);
  if (Objects.nonNull(config.getWorkingDirectory())) {
    Path path=Paths.get(config.getWorkingDirectory());
    Optional<Path> optional=Files.notExists(path) ? Optional.empty() : Optional.of(path);
    directoryService.setWorkingDirectory(optional);
  }
  Path workDir=directoryService.getWorkingDirectory().orElse(userHome);
  fileBrowser.browse(treeView,workDir);
  tabPane.getTabs().addListener((ListChangeListener<Tab>)c -> {
    if (tabPane.getTabs().isEmpty())     threadService.runActionLater(this::newDoc);
  }
);
  openFileTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    directoryService.getOpenFileConsumer().accept(path);
  }
);
  openFolderTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    path=Files.isDirectory(path) ? path : path.getParent();
    if (Objects.nonNull(path))     getHostServices().showDocument(path.toString());
  }
);
  openFolderListItem.setOnAction(event -> {
    Path path=Paths.get(recentListView.getSelectionModel().getSelectedItem());
    path=Files.isDirectory(path) ? path : path.getParent();
    if (Objects.nonNull(path))     getHostServices().showDocument(path.toString());
  }
);
  openFileListItem.setOnAction(this::openRecentListFile);
  copyPathTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    this.cutCopy(path.toString());
  }
);
  copyPathListItem.setOnAction(event -> {
    this.cutCopy(recentListView.getSelectionModel().getSelectedItem());
  }
);
  copyTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    this.copyFile(path);
  }
);
  copyListItem.setOnAction(event -> {
    Path path=Paths.get(recentListView.getSelectionModel().getSelectedItem());
    this.copyFile(path);
  }
);
  treeView.setOnMouseClicked(event -> {
    TreeItem<Item> selectedItem=treeView.getSelectionModel().getSelectedItem();
    if (Objects.isNull(selectedItem))     return;
    Path selectedPath=selectedItem.getValue().getPath();
    if (event.getButton() == MouseButton.PRIMARY)     if (event.getClickCount() == 2)     directoryService.getOpenFileConsumer().accept(selectedPath);
  }
);
  threadService.runActionLater(e -> {
    if (tabPane.getTabs().isEmpty()) {
      newDoc(e);
    }
  }
);
  previewView.setContextMenuEnabled(false);
  ContextMenu previewContextMenu=new ContextMenu(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    previewEngine.executeScript(""String_Node_Str"");
  }
));
  previewContextMenu.setAutoHide(true);
  previewView.setOnMouseClicked(mouse -> {
    if (mouse.getButton() == MouseButton.SECONDARY) {
      previewContextMenu.show(getRootAnchor(),mouse.getScreenX(),mouse.getScreenY());
    }
 else {
      previewContextMenu.hide();
    }
  }
);
}","@Override public void initialize(URL url,ResourceBundle rb){
  tooltipTimeFixService.fix();
  AwesomeDude.setIcon(htmlPro,AwesomeIcon.HTML5);
  AwesomeDude.setIcon(pdfPro,AwesomeIcon.FILE_PDF_ALT);
  AwesomeDude.setIcon(ebookPro,AwesomeIcon.BOOK);
  AwesomeDude.setIcon(docbookPro,AwesomeIcon.CODE);
  AwesomeDude.setIcon(browserPro,AwesomeIcon.FLASH);
  AwesomeDude.setIcon(workingDirButton,AwesomeIcon.FOLDER_ALT,""String_Node_Str"");
  AwesomeDude.setIcon(splitHideButton,AwesomeIcon.CHEVRON_LEFT,""String_Node_Str"");
  AwesomeDude.setIcon(refreshLabel,AwesomeIcon.REFRESH,""String_Node_Str"");
  AwesomeDude.setIcon(goUpLabel,AwesomeIcon.LEVEL_UP,""String_Node_Str"");
  AwesomeDude.setIcon(goHomeLabel,AwesomeIcon.HOME,""String_Node_Str"");
  leftButton.setGraphic(AwesomeDude.createIconLabel(AwesomeIcon.ELLIPSIS_H,""String_Node_Str""));
  ContextMenu htmlProMenu=new ContextMenu();
  htmlProMenu.getStyleClass().add(""String_Node_Str"");
  htmlPro.setContextMenu(htmlProMenu);
  htmlPro.setOnMouseClicked(event -> {
    htmlProMenu.show(htmlPro,event.getScreenX(),50);
  }
);
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.generateHtml();
  }
));
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.generateHtml(true);
  }
));
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").tip(""String_Node_Str"").onclick(event -> {
    this.cutCopy(lastRendered.getValue());
  }
));
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").tip(""String_Node_Str"").onclick(event -> {
    previewEngine.executeScript(""String_Node_Str"");
  }
));
  ContextMenu pdfProMenu=new ContextMenu();
  pdfProMenu.getStyleClass().add(""String_Node_Str"");
  pdfProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.generatePdf();
  }
));
  pdfProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.generatePdf(true);
  }
));
  pdfPro.setContextMenu(pdfProMenu);
  pdfPro.setOnMouseClicked(event -> {
    pdfProMenu.show(pdfPro,event.getScreenX(),50);
  }
);
  ContextMenu docbookProMenu=new ContextMenu();
  docbookProMenu.getStyleClass().add(""String_Node_Str"");
  docbookProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.convertDocbook();
  }
));
  docbookProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.convertDocbook(true);
  }
));
  docbookPro.setContextMenu(docbookProMenu);
  docbookPro.setOnMouseClicked(event -> {
    docbookProMenu.show(docbookPro,event.getScreenX(),50);
  }
);
  ContextMenu ebookProMenu=new ContextMenu();
  ebookProMenu.getStyleClass().add(""String_Node_Str"");
  ebookProMenu.getItems().add(MenuBuilt.name(""String_Node_Str"").add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.convertMobi();
  }
)).add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.convertMobi(true);
  }
)).build());
  ebookProMenu.getItems().add(MenuBuilt.name(""String_Node_Str"").add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.convertEpub();
  }
)).add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.convertEpub(true);
  }
)).build());
  ebookPro.setOnMouseClicked(event -> {
    ebookProMenu.show(ebookPro,event.getScreenX(),50);
  }
);
  ebookPro.setContextMenu(ebookProMenu);
  browserPro.setOnMouseClicked(event -> {
    if (event.getButton() == MouseButton.PRIMARY)     this.externalBrowse();
  }
);
  port=server.getEmbeddedServletContainer().getPort();
  loadConfigurations();
  loadRecentFileList();
  loadShortCuts();
  recentListView.setItems(recentFiles);
  recentFiles.addListener((ListChangeListener<String>)c -> {
    recentListView.visibleProperty().setValue(c.getList().size() > 0);
    recentListView.getSelectionModel().selectFirst();
  }
);
  recentListView.setOnMouseClicked(event -> {
    if (event.getClickCount() > 1) {
      openRecentListFile(event);
    }
  }
);
  treeView.setCellFactory(param -> {
    TreeCell<Item> cell=new TextFieldTreeCell<Item>();
    cell.setOnDragDetected(event -> {
      Dragboard db=cell.startDragAndDrop(TransferMode.ANY);
      ClipboardContent content=new ClipboardContent();
      content.putFiles(Arrays.asList(cell.getTreeItem().getValue().getPath().toFile()));
      db.setContent(content);
    }
);
    return cell;
  }
);
  lastRendered.addListener(lastRenderedChangeListener);
  mathjaxView=new WebView();
  mathjaxView.setVisible(false);
  rootAnchor.getChildren().add(mathjaxView);
  WebEngine mathjaxEngine=mathjaxView.getEngine();
  mathjaxEngine.getLoadWorker().stateProperty().addListener((observableValue1,state,state2) -> {
    JSObject window=(JSObject)mathjaxEngine.executeScript(""String_Node_Str"");
    if (window.getMember(""String_Node_Str"").equals(""String_Node_Str""))     window.setMember(""String_Node_Str"",this);
  }
);
  mathjaxEngine.load(String.format(""String_Node_Str"",port));
  previewEngine=previewView.getEngine();
  previewEngine.load(String.format(""String_Node_Str"",port));
  previewEngine.getLoadWorker().stateProperty().addListener((observableValue1,state,state2) -> {
    if (state2 == Worker.State.SUCCEEDED) {
      JSObject window=(JSObject)previewEngine.executeScript(""String_Node_Str"");
      if (window.getMember(""String_Node_Str"").equals(""String_Node_Str"")) {
        window.setMember(""String_Node_Str"",this);
      }
    }
  }
);
  previewEngine.getLoadWorker().exceptionProperty().addListener((ov,t,t1) -> {
    logger.info(t1.getMessage(),t1);
  }
);
  if (Objects.nonNull(config.getWorkingDirectory())) {
    Path path=Paths.get(config.getWorkingDirectory());
    Optional<Path> optional=Files.notExists(path) ? Optional.empty() : Optional.of(path);
    directoryService.setWorkingDirectory(optional);
  }
  Path workDir=directoryService.getWorkingDirectory().orElse(userHome);
  fileBrowser.browse(treeView,workDir);
  tabPane.getTabs().addListener((ListChangeListener<Tab>)c -> {
    if (tabPane.getTabs().isEmpty())     threadService.runActionLater(this::newDoc);
  }
);
  openFileTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    directoryService.getOpenFileConsumer().accept(path);
  }
);
  openFolderTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    path=Files.isDirectory(path) ? path : path.getParent();
    if (Objects.nonNull(path))     getHostServices().showDocument(path.toString());
  }
);
  openFolderListItem.setOnAction(event -> {
    Path path=Paths.get(recentListView.getSelectionModel().getSelectedItem());
    path=Files.isDirectory(path) ? path : path.getParent();
    if (Objects.nonNull(path))     getHostServices().showDocument(path.toString());
  }
);
  openFileListItem.setOnAction(this::openRecentListFile);
  copyPathTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    this.cutCopy(path.toString());
  }
);
  copyPathListItem.setOnAction(event -> {
    this.cutCopy(recentListView.getSelectionModel().getSelectedItem());
  }
);
  copyTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    this.copyFile(path);
  }
);
  copyListItem.setOnAction(event -> {
    Path path=Paths.get(recentListView.getSelectionModel().getSelectedItem());
    this.copyFile(path);
  }
);
  treeView.setOnMouseClicked(event -> {
    TreeItem<Item> selectedItem=treeView.getSelectionModel().getSelectedItem();
    if (Objects.isNull(selectedItem))     return;
    Path selectedPath=selectedItem.getValue().getPath();
    if (event.getButton() == MouseButton.PRIMARY)     if (event.getClickCount() == 2)     directoryService.getOpenFileConsumer().accept(selectedPath);
  }
);
  threadService.runActionLater(e -> {
    if (tabPane.getTabs().isEmpty()) {
      newDoc(e);
    }
  }
);
  previewView.setContextMenuEnabled(false);
  ContextMenu previewContextMenu=new ContextMenu(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    previewEngine.executeScript(""String_Node_Str"");
  }
));
  previewContextMenu.setAutoHide(true);
  previewView.setOnMouseClicked(event -> {
    if (event.getButton() == MouseButton.SECONDARY) {
      previewContextMenu.show(previewView,event.getScreenX(),event.getScreenY());
    }
 else {
      previewContextMenu.hide();
    }
  }
);
}",0.9960303139660772
62412,"public void completeCycle(){
  Platform.runLater(() -> {
    asciiDocController.getIndikator().setManaged(false);
  }
);
}","public void completeCycle(){
  Platform.runLater(() -> {
    asciiDocController.getIndikator().setManaged(false);
    asciiDocController.getIndikator().setVisible(false);
  }
);
}",0.8106312292358804
62413,"public void startCycle(){
  Platform.runLater(() -> {
    asciiDocController.getIndikator().setManaged(true);
  }
);
}","public void startCycle(){
  Platform.runLater(() -> {
    asciiDocController.getIndikator().setVisible(true);
    asciiDocController.getIndikator().setManaged(true);
  }
);
}",0.8082191780821918
62414,"public Optional<String> toImageBlock(List<File> dropFiles){
  if (!current.currentPath().isPresent())   asciiDocController.saveDoc();
  Path currentPath=current.currentPath().map(Path::getParent).get();
  IOHelper.createDirectories(currentPath.resolve(""String_Node_Str""));
  List<Path> paths=dropFiles.stream().map(File::toPath).filter(pathResolver::isImage).collect(Collectors.toList());
  List<String> buffer=new LinkedList<>();
  for (  Path path : paths) {
    Path targetImage=currentPath.resolve(""String_Node_Str"").resolve(path.getFileName());
    IOHelper.copy(path,targetImage);
    buffer.add(String.format(""String_Node_Str"",path.getFileName()));
  }
  if (buffer.size() > 0)   return Optional.of(String.join(""String_Node_Str"",buffer));
  return Optional.empty();
}","public Optional<String> toImageBlock(List<File> dropFiles){
  if (!current.currentPath().isPresent())   asciiDocController.saveDoc();
  Path currentPath=current.currentPath().map(Path::getParent).get();
  IOHelper.createDirectories(currentPath.resolve(""String_Node_Str""));
  List<Path> paths=dropFiles.stream().map(File::toPath).filter(pathResolver::isImage).collect(Collectors.toList());
  List<String> buffer=new LinkedList<>();
  for (  Path path : paths) {
    Path targetImage=currentPath.resolve(""String_Node_Str"").resolve(path.getFileName());
    if (!path.equals(targetImage))     IOHelper.copy(path,targetImage);
    buffer.add(String.format(""String_Node_Str"",path.getFileName()));
  }
  if (buffer.size() > 0)   return Optional.of(String.join(""String_Node_Str"",buffer));
  return Optional.empty();
}",0.977890082122552
62415,"public Optional<String> toIncludeBlock(List<File> dropFiles){
  if (!current.currentPath().isPresent())   asciiDocController.saveDoc();
  Path currentPath=current.currentPath().map(Path::getParent).get();
  List<Path> files=dropFiles.stream().map(File::toPath).filter(pathResolver::isAsciidoc).collect(Collectors.toList());
  List<String> buffer=new LinkedList<>();
  for (  Path path : files) {
    IOHelper.copy(path,currentPath.resolve(path.getFileName()));
    buffer.add(String.format(""String_Node_Str"",path.getFileName()));
  }
  if (buffer.size() > 0)   return Optional.of(String.join(""String_Node_Str"",buffer));
  return Optional.empty();
}","public Optional<String> toIncludeBlock(List<File> dropFiles){
  if (!current.currentPath().isPresent())   asciiDocController.saveDoc();
  Path currentPath=current.currentPath().map(Path::getParent).get();
  List<Path> files=dropFiles.stream().map(File::toPath).filter(pathResolver::isAsciidoc).collect(Collectors.toList());
  List<String> buffer=new LinkedList<>();
  for (  Path path : files) {
    Path targetPath=currentPath.resolve(path.getFileName());
    if (!path.equals(targetPath))     IOHelper.copy(path,targetPath);
    buffer.add(String.format(""String_Node_Str"",path.getFileName()));
  }
  if (buffer.size() > 0)   return Optional.of(String.join(""String_Node_Str"",buffer));
  return Optional.empty();
}",0.8942731277533039
62416,"public Node createEditorVBox(WebView webView){
  VBox vbox=new VBox();
  MenuBar menuBar=new MenuBar();
  menuBar.getStyleClass().add(""String_Node_Str"");
  String iconSize=""String_Node_Str"";
  double minSize=14.01;
  Label saveLabel=LabelBuilt.icon(AwesomeIcon.SAVE,iconSize,minSize).tip(""String_Node_Str"").click(controller::saveDoc).build();
  Label newLabel=LabelBuilt.icon(AwesomeIcon.FILE_TEXT_ALT,iconSize,minSize).tip(""String_Node_Str"").click(controller::newDoc).build();
  Label openLabel=LabelBuilt.icon(AwesomeIcon.FOLDER_ALTPEN_ALT,iconSize,minSize).tip(""String_Node_Str"").click(controller::openDoc).build();
  Label boldLabel=LabelBuilt.icon(AwesomeIcon.BOLD,iconSize,minSize).tip(""String_Node_Str"").click(event -> {
    current.currentEngine().executeScript(""String_Node_Str"");
  }
).build();
  Label italicLabel=LabelBuilt.icon(AwesomeIcon.ITALIC,iconSize,minSize).tip(""String_Node_Str"").click(event -> {
    current.currentEngine().executeScript(""String_Node_Str"");
  }
).build();
  Label headerLabel=LabelBuilt.icon(AwesomeIcon.ITALIC,iconSize,minSize).tip(""String_Node_Str"").click(event -> {
    current.currentEngine().executeScript(""String_Node_Str"");
  }
).build();
  Label codeLabel=LabelBuilt.icon(AwesomeIcon.CODE,iconSize,minSize).tip(""String_Node_Str"").click(event -> {
    current.currentEngine().executeScript(""String_Node_Str"");
  }
).build();
  Label ulListLabel=LabelBuilt.icon(AwesomeIcon.LIST_UL,iconSize,minSize).tip(""String_Node_Str"").click(event -> {
    current.currentEngine().executeScript(""String_Node_Str"");
  }
).build();
  Label olListLabel=LabelBuilt.icon(AwesomeIcon.LIST_ALTL,iconSize,minSize).tip(""String_Node_Str"").click(event -> {
    current.currentEngine().executeScript(""String_Node_Str"");
  }
).build();
  Label tableLabel=LabelBuilt.icon(AwesomeIcon.TABLE,iconSize,minSize).tip(""String_Node_Str"").click(controller::createTable).build();
  Label imageLabel=LabelBuilt.icon(AwesomeIcon.IMAGE,iconSize,minSize).tip(""String_Node_Str"").click(event -> {
    current.currentEngine().executeScript(""String_Node_Str"");
  }
).build();
  Label subscriptLabel=LabelBuilt.icon(AwesomeIcon.SUBSCRIPT,iconSize,minSize).tip(""String_Node_Str"").click(event -> {
    current.currentEngine().executeScript(""String_Node_Str"");
  }
).build();
  Label superScriptLabel=LabelBuilt.icon(AwesomeIcon.SUPERSCRIPT,iconSize,minSize).tip(""String_Node_Str"").click(event -> {
    current.currentEngine().executeScript(""String_Node_Str"");
  }
).build();
  Label underlineLabel=LabelBuilt.icon(AwesomeIcon.UNDERLINE,iconSize,minSize).tip(""String_Node_Str"").click(event -> {
    current.currentEngine().executeScript(""String_Node_Str"");
  }
).build();
  Label hyperlinkLabel=LabelBuilt.icon(AwesomeIcon.LINK,iconSize,minSize).tip(""String_Node_Str"").click(event -> {
    current.currentEngine().executeScript(""String_Node_Str"");
  }
).build();
  Label strikethroughLabel=LabelBuilt.icon(AwesomeIcon.STRIKETHROUGH,iconSize,minSize).tip(""String_Node_Str"").click(event -> {
    current.currentEngine().executeScript(""String_Node_Str"");
  }
).build();
  Label openMenuLabel=LabelBuilt.icon(AwesomeIcon.CHEVRON_CIRCLE_DOWN,iconSize,minSize).tip(""String_Node_Str"").build();
  openMenuLabel.setOnMouseClicked(event -> {
    int childSize=vbox.getChildren().size();
    if (childSize == 2) {
      openMenuLabel.setText(AwesomeIcon.CHEVRON_CIRCLE_DOWN.toString());
      Tooltip.install(openMenuLabel,new Tooltip(""String_Node_Str""));
      vbox.getChildren().remove(1);
    }
 else {
      openMenuLabel.setText(AwesomeIcon.CHEVRON_CIRCLE_UP.toString());
      openMenuLabel.getProperties().clear();
      vbox.getChildren().add(createSecondEditorVBox(iconSize));
    }
  }
);
  menuBar.getMenus().addAll(new Menu(""String_Node_Str"",newLabel),new Menu(""String_Node_Str"",openLabel),new Menu(""String_Node_Str"",saveLabel),new Menu(""String_Node_Str"",boldLabel),new Menu(""String_Node_Str"",italicLabel),new Menu(""String_Node_Str"",underlineLabel),new Menu(""String_Node_Str"",strikethroughLabel),new Menu(""String_Node_Str"",headerLabel),new Menu(""String_Node_Str"",hyperlinkLabel),new Menu(""String_Node_Str"",codeLabel),new Menu(""String_Node_Str"",ulListLabel),new Menu(""String_Node_Str"",olListLabel),new Menu(""String_Node_Str"",tableLabel),new Menu(""String_Node_Str"",imageLabel),new Menu(""String_Node_Str"",subscriptLabel),new Menu(""String_Node_Str"",superScriptLabel),new Menu(""String_Node_Str"",openMenuLabel));
  ScrollPane scrollPane=new ScrollPane();
  scrollPane.setContent(webView);
  scrollPane.setFitToHeight(true);
  scrollPane.setFitToWidth(true);
  VBox.setVgrow(scrollPane,Priority.ALWAYS);
  vbox.getChildren().add(menuBar);
  return new VBox(vbox,scrollPane);
}","public Node createEditorVBox(WebView webView){
  VBox vbox=new VBox();
  MenuBar menuBar=new MenuBar();
  menuBar.getStyleClass().add(""String_Node_Str"");
  String iconSize=""String_Node_Str"";
  double minSize=14.01;
  Label saveLabel=LabelBuilt.icon(AwesomeIcon.SAVE,iconSize,minSize).tip(""String_Node_Str"").click(controller::saveDoc).build();
  Label newLabel=LabelBuilt.icon(AwesomeIcon.FILE_TEXT_ALT,iconSize,minSize).tip(""String_Node_Str"").click(controller::newDoc).build();
  Label openLabel=LabelBuilt.icon(AwesomeIcon.FOLDER_ALTPEN_ALT,iconSize,minSize).tip(""String_Node_Str"").click(controller::openDoc).build();
  Label boldLabel=LabelBuilt.icon(AwesomeIcon.BOLD,iconSize,minSize).tip(""String_Node_Str"").click(event -> {
    current.currentEngine().executeScript(""String_Node_Str"");
  }
).build();
  Label italicLabel=LabelBuilt.icon(AwesomeIcon.ITALIC,iconSize,minSize).tip(""String_Node_Str"").click(event -> {
    current.currentEngine().executeScript(""String_Node_Str"");
  }
).build();
  Label headerLabel=LabelBuilt.icon(AwesomeIcon.HEADER,iconSize,minSize).tip(""String_Node_Str"").click(event -> {
    current.currentEngine().executeScript(""String_Node_Str"");
  }
).build();
  Label codeLabel=LabelBuilt.icon(AwesomeIcon.CODE,iconSize,minSize).tip(""String_Node_Str"").click(event -> {
    current.currentEngine().executeScript(""String_Node_Str"");
  }
).build();
  Label ulListLabel=LabelBuilt.icon(AwesomeIcon.LIST_UL,iconSize,minSize).tip(""String_Node_Str"").click(event -> {
    current.currentEngine().executeScript(""String_Node_Str"");
  }
).build();
  Label olListLabel=LabelBuilt.icon(AwesomeIcon.LIST_ALTL,iconSize,minSize).tip(""String_Node_Str"").click(event -> {
    current.currentEngine().executeScript(""String_Node_Str"");
  }
).build();
  Label tableLabel=LabelBuilt.icon(AwesomeIcon.TABLE,iconSize,minSize).tip(""String_Node_Str"").click(controller::createTable).build();
  Label imageLabel=LabelBuilt.icon(AwesomeIcon.IMAGE,iconSize,minSize).tip(""String_Node_Str"").click(event -> {
    current.currentEngine().executeScript(""String_Node_Str"");
  }
).build();
  Label subscriptLabel=LabelBuilt.icon(AwesomeIcon.SUBSCRIPT,iconSize,minSize).tip(""String_Node_Str"").click(event -> {
    current.currentEngine().executeScript(""String_Node_Str"");
  }
).build();
  Label superScriptLabel=LabelBuilt.icon(AwesomeIcon.SUPERSCRIPT,iconSize,minSize).tip(""String_Node_Str"").click(event -> {
    current.currentEngine().executeScript(""String_Node_Str"");
  }
).build();
  Label underlineLabel=LabelBuilt.icon(AwesomeIcon.UNDERLINE,iconSize,minSize).tip(""String_Node_Str"").click(event -> {
    current.currentEngine().executeScript(""String_Node_Str"");
  }
).build();
  Label hyperlinkLabel=LabelBuilt.icon(AwesomeIcon.LINK,iconSize,minSize).tip(""String_Node_Str"").click(event -> {
    current.currentEngine().executeScript(""String_Node_Str"");
  }
).build();
  Label strikethroughLabel=LabelBuilt.icon(AwesomeIcon.STRIKETHROUGH,iconSize,minSize).tip(""String_Node_Str"").click(event -> {
    current.currentEngine().executeScript(""String_Node_Str"");
  }
).build();
  Label openMenuLabel=LabelBuilt.icon(AwesomeIcon.CHEVRON_CIRCLE_DOWN,iconSize,minSize).tip(""String_Node_Str"").build();
  openMenuLabel.setOnMouseClicked(event -> {
    int childSize=vbox.getChildren().size();
    if (childSize == 2) {
      openMenuLabel.setText(AwesomeIcon.CHEVRON_CIRCLE_DOWN.toString());
      Tooltip.install(openMenuLabel,new Tooltip(""String_Node_Str""));
      vbox.getChildren().remove(1);
    }
 else {
      openMenuLabel.setText(AwesomeIcon.CHEVRON_CIRCLE_UP.toString());
      openMenuLabel.getProperties().clear();
      vbox.getChildren().add(createSecondEditorVBox(iconSize));
    }
  }
);
  menuBar.getMenus().addAll(new Menu(""String_Node_Str"",newLabel),new Menu(""String_Node_Str"",openLabel),new Menu(""String_Node_Str"",saveLabel),new Menu(""String_Node_Str"",boldLabel),new Menu(""String_Node_Str"",italicLabel),new Menu(""String_Node_Str"",underlineLabel),new Menu(""String_Node_Str"",strikethroughLabel),new Menu(""String_Node_Str"",headerLabel),new Menu(""String_Node_Str"",hyperlinkLabel),new Menu(""String_Node_Str"",codeLabel),new Menu(""String_Node_Str"",ulListLabel),new Menu(""String_Node_Str"",olListLabel),new Menu(""String_Node_Str"",tableLabel),new Menu(""String_Node_Str"",imageLabel),new Menu(""String_Node_Str"",subscriptLabel),new Menu(""String_Node_Str"",superScriptLabel),new Menu(""String_Node_Str"",openMenuLabel));
  ScrollPane scrollPane=new ScrollPane();
  scrollPane.setContent(webView);
  scrollPane.setFitToHeight(true);
  scrollPane.setFitToWidth(true);
  VBox.setVgrow(scrollPane,Priority.ALWAYS);
  vbox.getChildren().add(menuBar);
  return new VBox(vbox,scrollPane);
}",0.9989286479537176
62417,"@Override public void initialize(URL url,ResourceBundle rb){
  tooltipTimeFixService.fix();
  AwesomeDude.setIcon(htmlPro,AwesomeIcon.HTML5);
  AwesomeDude.setIcon(pdfPro,AwesomeIcon.FILE_PDF_ALT);
  AwesomeDude.setIcon(ebookPro,AwesomeIcon.BOOK);
  AwesomeDude.setIcon(docbookPro,AwesomeIcon.CODE);
  AwesomeDude.setIcon(browserPro,AwesomeIcon.FLASH);
  AwesomeDude.setIcon(workingDirButton,AwesomeIcon.FOLDER_ALT,""String_Node_Str"");
  AwesomeDude.setIcon(splitHideButton,AwesomeIcon.CHEVRON_LEFT,""String_Node_Str"");
  AwesomeDude.setIcon(refreshLabel,AwesomeIcon.REFRESH,""String_Node_Str"");
  AwesomeDude.setIcon(goUpLabel,AwesomeIcon.LEVEL_UP,""String_Node_Str"");
  AwesomeDude.setIcon(goHomeLabel,AwesomeIcon.HOME,""String_Node_Str"");
  leftButton.setGraphic(AwesomeDude.createIconLabel(AwesomeIcon.ELLIPSIS_H,""String_Node_Str""));
  ContextMenu htmlProMenu=new ContextMenu();
  htmlProMenu.getStyleClass().add(""String_Node_Str"");
  htmlPro.setContextMenu(htmlProMenu);
  htmlPro.setOnMouseClicked(event -> {
    htmlProMenu.show(htmlPro,event.getScreenX(),50);
  }
);
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.generateHtml();
  }
));
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.generateHtml(true);
  }
));
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").tip(""String_Node_Str"").onclick(event -> {
    this.cutCopy(lastRendered.getValue());
  }
));
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").tip(""String_Node_Str"").onclick(event -> {
    previewEngine.executeScript(""String_Node_Str"");
  }
));
  ContextMenu pdfProMenu=new ContextMenu();
  pdfProMenu.getStyleClass().add(""String_Node_Str"");
  pdfProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.generatePdf();
  }
));
  pdfProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.generatePdf(true);
  }
));
  pdfPro.setContextMenu(pdfProMenu);
  pdfPro.setOnMouseClicked(event -> {
    pdfProMenu.show(pdfPro,event.getScreenX(),50);
  }
);
  ContextMenu docbookProMenu=new ContextMenu();
  docbookProMenu.getStyleClass().add(""String_Node_Str"");
  docbookProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.convertDocbook();
  }
));
  docbookProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.convertDocbook(true);
  }
));
  docbookPro.setContextMenu(docbookProMenu);
  docbookPro.setOnMouseClicked(event -> {
    docbookProMenu.show(docbookPro,event.getScreenX(),50);
  }
);
  ContextMenu ebookProMenu=new ContextMenu();
  ebookProMenu.getStyleClass().add(""String_Node_Str"");
  ebookProMenu.getItems().add(MenuBuilt.name(""String_Node_Str"").add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.convertMobi();
  }
)).add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.convertMobi(true);
  }
)).build());
  ebookProMenu.getItems().add(MenuBuilt.name(""String_Node_Str"").add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.convertEpub();
  }
)).add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.convertEpub(true);
  }
)).build());
  ebookPro.setOnMouseClicked(event -> {
    ebookProMenu.show(ebookPro,event.getScreenX(),50);
  }
);
  ebookPro.setContextMenu(ebookProMenu);
  browserPro.setOnMouseClicked(event -> {
    if (event.getButton() == MouseButton.PRIMARY)     this.externalBrowse();
  }
);
  port=server.getEmbeddedServletContainer().getPort();
  loadConfigurations();
  loadRecentFileList();
  loadShortCuts();
  recentListView.setItems(recentFiles);
  recentFiles.addListener((ListChangeListener<String>)c -> {
    recentListView.visibleProperty().setValue(c.getList().size() > 0);
    recentListView.getSelectionModel().selectFirst();
  }
);
  recentListView.setOnMouseClicked(event -> {
    if (event.getClickCount() > 1) {
      openRecentListFile(event);
    }
  }
);
  treeView.setCellFactory(param -> {
    TreeCell<Item> cell=new TextFieldTreeCell<Item>();
    cell.setOnDragDetected(event -> {
      Dragboard db=cell.startDragAndDrop(TransferMode.ANY);
      ClipboardContent content=new ClipboardContent();
      content.putFiles(Arrays.asList(cell.getTreeItem().getValue().getPath().toFile()));
      db.setContent(content);
    }
);
    return cell;
  }
);
  lastRendered.addListener(lastRenderedChangeListener);
  mathjaxView=new WebView();
  mathjaxView.setVisible(false);
  rootAnchor.getChildren().add(mathjaxView);
  WebEngine mathjaxEngine=mathjaxView.getEngine();
  mathjaxEngine.getLoadWorker().stateProperty().addListener((observableValue1,state,state2) -> {
    JSObject window=(JSObject)mathjaxEngine.executeScript(""String_Node_Str"");
    if (window.getMember(""String_Node_Str"").equals(""String_Node_Str""))     window.setMember(""String_Node_Str"",this);
  }
);
  mathjaxEngine.load(String.format(""String_Node_Str"",port));
  previewEngine=previewView.getEngine();
  previewEngine.load(String.format(""String_Node_Str"",port));
  previewEngine.getLoadWorker().stateProperty().addListener((observableValue1,state,state2) -> {
    if (state2 == Worker.State.SUCCEEDED) {
      JSObject window=(JSObject)previewEngine.executeScript(""String_Node_Str"");
      if (window.getMember(""String_Node_Str"").equals(""String_Node_Str"")) {
        window.setMember(""String_Node_Str"",this);
      }
    }
  }
);
  previewEngine.getLoadWorker().exceptionProperty().addListener((ov,t,t1) -> {
    logger.info(t1.getMessage(),t1);
  }
);
  if (Objects.nonNull(config.getWorkingDirectory())) {
    Optional<Path> optional=Optional.ofNullable(Paths.get(config.getWorkingDirectory()));
    directoryService.setWorkingDirectory(optional);
  }
  Path workDir=directoryService.getWorkingDirectory().orElse(userHome);
  fileBrowser.browse(treeView,workDir);
  tabPane.getTabs().addListener((ListChangeListener<Tab>)c -> {
    if (tabPane.getTabs().isEmpty())     threadService.runActionLater(this::newDoc);
  }
);
  openFileTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    directoryService.getOpenFileConsumer().accept(path);
  }
);
  openFolderTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    path=Files.isDirectory(path) ? path : path.getParent();
    if (Objects.nonNull(path))     getHostServices().showDocument(path.toUri().toASCIIString());
  }
);
  openFolderListItem.setOnAction(event -> {
    Path path=Paths.get(recentListView.getSelectionModel().getSelectedItem());
    path=Files.isDirectory(path) ? path : path.getParent();
    if (Objects.nonNull(path))     getHostServices().showDocument(path.toUri().toASCIIString());
  }
);
  openFileListItem.setOnAction(this::openRecentListFile);
  copyPathTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    this.cutCopy(path.toString());
  }
);
  copyPathListItem.setOnAction(event -> {
    this.cutCopy(recentListView.getSelectionModel().getSelectedItem());
  }
);
  copyTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    this.copyFile(path);
  }
);
  copyListItem.setOnAction(event -> {
    Path path=Paths.get(recentListView.getSelectionModel().getSelectedItem());
    this.copyFile(path);
  }
);
  treeView.setOnMouseClicked(event -> {
    TreeItem<Item> selectedItem=treeView.getSelectionModel().getSelectedItem();
    if (Objects.isNull(selectedItem))     return;
    Path selectedPath=selectedItem.getValue().getPath();
    if (event.getButton() == MouseButton.PRIMARY)     if (event.getClickCount() == 2)     directoryService.getOpenFileConsumer().accept(selectedPath);
  }
);
  threadService.runActionLater(e -> {
    if (tabPane.getTabs().isEmpty()) {
      newDoc(e);
    }
  }
);
}","@Override public void initialize(URL url,ResourceBundle rb){
  tooltipTimeFixService.fix();
  AwesomeDude.setIcon(htmlPro,AwesomeIcon.HTML5);
  AwesomeDude.setIcon(pdfPro,AwesomeIcon.FILE_PDF_ALT);
  AwesomeDude.setIcon(ebookPro,AwesomeIcon.BOOK);
  AwesomeDude.setIcon(docbookPro,AwesomeIcon.CODE);
  AwesomeDude.setIcon(browserPro,AwesomeIcon.FLASH);
  AwesomeDude.setIcon(workingDirButton,AwesomeIcon.FOLDER_ALT,""String_Node_Str"");
  AwesomeDude.setIcon(splitHideButton,AwesomeIcon.CHEVRON_LEFT,""String_Node_Str"");
  AwesomeDude.setIcon(refreshLabel,AwesomeIcon.REFRESH,""String_Node_Str"");
  AwesomeDude.setIcon(goUpLabel,AwesomeIcon.LEVEL_UP,""String_Node_Str"");
  AwesomeDude.setIcon(goHomeLabel,AwesomeIcon.HOME,""String_Node_Str"");
  leftButton.setGraphic(AwesomeDude.createIconLabel(AwesomeIcon.ELLIPSIS_H,""String_Node_Str""));
  ContextMenu htmlProMenu=new ContextMenu();
  htmlProMenu.getStyleClass().add(""String_Node_Str"");
  htmlPro.setContextMenu(htmlProMenu);
  htmlPro.setOnMouseClicked(event -> {
    htmlProMenu.show(htmlPro,event.getScreenX(),50);
  }
);
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.generateHtml();
  }
));
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.generateHtml(true);
  }
));
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").tip(""String_Node_Str"").onclick(event -> {
    this.cutCopy(lastRendered.getValue());
  }
));
  htmlProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").tip(""String_Node_Str"").onclick(event -> {
    previewEngine.executeScript(""String_Node_Str"");
  }
));
  ContextMenu pdfProMenu=new ContextMenu();
  pdfProMenu.getStyleClass().add(""String_Node_Str"");
  pdfProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.generatePdf();
  }
));
  pdfProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.generatePdf(true);
  }
));
  pdfPro.setContextMenu(pdfProMenu);
  pdfPro.setOnMouseClicked(event -> {
    pdfProMenu.show(pdfPro,event.getScreenX(),50);
  }
);
  ContextMenu docbookProMenu=new ContextMenu();
  docbookProMenu.getStyleClass().add(""String_Node_Str"");
  docbookProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.convertDocbook();
  }
));
  docbookProMenu.getItems().add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.convertDocbook(true);
  }
));
  docbookPro.setContextMenu(docbookProMenu);
  docbookPro.setOnMouseClicked(event -> {
    docbookProMenu.show(docbookPro,event.getScreenX(),50);
  }
);
  ContextMenu ebookProMenu=new ContextMenu();
  ebookProMenu.getStyleClass().add(""String_Node_Str"");
  ebookProMenu.getItems().add(MenuBuilt.name(""String_Node_Str"").add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.convertMobi();
  }
)).add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.convertMobi(true);
  }
)).build());
  ebookProMenu.getItems().add(MenuBuilt.name(""String_Node_Str"").add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.convertEpub();
  }
)).add(MenuItemBuilt.item(""String_Node_Str"").onclick(event -> {
    this.convertEpub(true);
  }
)).build());
  ebookPro.setOnMouseClicked(event -> {
    ebookProMenu.show(ebookPro,event.getScreenX(),50);
  }
);
  ebookPro.setContextMenu(ebookProMenu);
  browserPro.setOnMouseClicked(event -> {
    if (event.getButton() == MouseButton.PRIMARY)     this.externalBrowse();
  }
);
  port=server.getEmbeddedServletContainer().getPort();
  loadConfigurations();
  loadRecentFileList();
  loadShortCuts();
  recentListView.setItems(recentFiles);
  recentFiles.addListener((ListChangeListener<String>)c -> {
    recentListView.visibleProperty().setValue(c.getList().size() > 0);
    recentListView.getSelectionModel().selectFirst();
  }
);
  recentListView.setOnMouseClicked(event -> {
    if (event.getClickCount() > 1) {
      openRecentListFile(event);
    }
  }
);
  treeView.setCellFactory(param -> {
    TreeCell<Item> cell=new TextFieldTreeCell<Item>();
    cell.setOnDragDetected(event -> {
      Dragboard db=cell.startDragAndDrop(TransferMode.ANY);
      ClipboardContent content=new ClipboardContent();
      content.putFiles(Arrays.asList(cell.getTreeItem().getValue().getPath().toFile()));
      db.setContent(content);
    }
);
    return cell;
  }
);
  lastRendered.addListener(lastRenderedChangeListener);
  mathjaxView=new WebView();
  mathjaxView.setVisible(false);
  rootAnchor.getChildren().add(mathjaxView);
  WebEngine mathjaxEngine=mathjaxView.getEngine();
  mathjaxEngine.getLoadWorker().stateProperty().addListener((observableValue1,state,state2) -> {
    JSObject window=(JSObject)mathjaxEngine.executeScript(""String_Node_Str"");
    if (window.getMember(""String_Node_Str"").equals(""String_Node_Str""))     window.setMember(""String_Node_Str"",this);
  }
);
  mathjaxEngine.load(String.format(""String_Node_Str"",port));
  previewEngine=previewView.getEngine();
  previewEngine.load(String.format(""String_Node_Str"",port));
  previewEngine.getLoadWorker().stateProperty().addListener((observableValue1,state,state2) -> {
    if (state2 == Worker.State.SUCCEEDED) {
      JSObject window=(JSObject)previewEngine.executeScript(""String_Node_Str"");
      if (window.getMember(""String_Node_Str"").equals(""String_Node_Str"")) {
        window.setMember(""String_Node_Str"",this);
      }
    }
  }
);
  previewEngine.getLoadWorker().exceptionProperty().addListener((ov,t,t1) -> {
    logger.info(t1.getMessage(),t1);
  }
);
  if (Objects.nonNull(config.getWorkingDirectory())) {
    Path path=Paths.get(config.getWorkingDirectory());
    Optional<Path> optional=Files.notExists(path) ? Optional.empty() : Optional.of(path);
    directoryService.setWorkingDirectory(optional);
  }
  Path workDir=directoryService.getWorkingDirectory().orElse(userHome);
  fileBrowser.browse(treeView,workDir);
  tabPane.getTabs().addListener((ListChangeListener<Tab>)c -> {
    if (tabPane.getTabs().isEmpty())     threadService.runActionLater(this::newDoc);
  }
);
  openFileTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    directoryService.getOpenFileConsumer().accept(path);
  }
);
  openFolderTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    path=Files.isDirectory(path) ? path : path.getParent();
    if (Objects.nonNull(path))     getHostServices().showDocument(path.toUri().toASCIIString());
  }
);
  openFolderListItem.setOnAction(event -> {
    Path path=Paths.get(recentListView.getSelectionModel().getSelectedItem());
    path=Files.isDirectory(path) ? path : path.getParent();
    if (Objects.nonNull(path))     getHostServices().showDocument(path.toUri().toASCIIString());
  }
);
  openFileListItem.setOnAction(this::openRecentListFile);
  copyPathTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    this.cutCopy(path.toString());
  }
);
  copyPathListItem.setOnAction(event -> {
    this.cutCopy(recentListView.getSelectionModel().getSelectedItem());
  }
);
  copyTreeItem.setOnAction(event -> {
    Path path=tabService.getSelectedTabPath();
    this.copyFile(path);
  }
);
  copyListItem.setOnAction(event -> {
    Path path=Paths.get(recentListView.getSelectionModel().getSelectedItem());
    this.copyFile(path);
  }
);
  treeView.setOnMouseClicked(event -> {
    TreeItem<Item> selectedItem=treeView.getSelectionModel().getSelectedItem();
    if (Objects.isNull(selectedItem))     return;
    Path selectedPath=selectedItem.getValue().getPath();
    if (event.getButton() == MouseButton.PRIMARY)     if (event.getClickCount() == 2)     directoryService.getOpenFileConsumer().accept(selectedPath);
  }
);
  threadService.runActionLater(e -> {
    if (tabPane.getTabs().isEmpty()) {
      newDoc(e);
    }
  }
);
}",0.9903458858129276
62418,"public void addTab(Path path){
  ObservableList<String> recentFiles=controller.getRecentFiles();
  if (Files.notExists(path)) {
    recentFiles.remove(path.toString());
    return;
  }
  AnchorPane anchorPane=new AnchorPane();
  WebView webView=webviewService.createWebView();
  WebEngine webEngine=webView.getEngine();
  webEngine.getLoadWorker().stateProperty().addListener((observableValue1,state,state2) -> {
    if (state2 == Worker.State.SUCCEEDED) {
      threadService.runTaskLater(() -> {
        String normalize=IOHelper.normalize(IOHelper.readFile(path));
        threadService.runActionLater(() -> {
          webEngine.executeScript(String.format(""String_Node_Str"",normalize));
        }
);
      }
);
    }
  }
);
  Node editorVBox=editorService.createEditorVBox(webView);
  controller.fitToParent(editorVBox);
  anchorPane.getChildren().add(editorVBox);
  MyTab tab=createTab();
  ((Label)tab.getGraphic()).setText(path.getFileName().toString());
  tab.setContent(anchorPane);
  tab.setPath(path);
  tab.setWebView(webView);
  TabPane tabPane=controller.getTabPane();
  tabPane.getTabs().add(tab);
  Tooltip tip=new Tooltip(path.toString());
  Tooltip.install(tab.getGraphic(),tip);
  Tab lastTab=tabPane.getTabs().get(tabPane.getTabs().size() - 1);
  tabPane.getSelectionModel().select(lastTab);
  recentFiles.remove(path.toString());
  recentFiles.add(0,path.toString());
  webView.requestFocus();
}","public void addTab(Path path){
  ObservableList<String> recentFiles=controller.getRecentFiles();
  if (Files.notExists(path)) {
    recentFiles.remove(path.toString());
    return;
  }
  AnchorPane anchorPane=new AnchorPane();
  WebView webView=webviewService.createWebView();
  WebEngine webEngine=webView.getEngine();
  webEngine.getLoadWorker().stateProperty().addListener((observableValue1,state,state2) -> {
    if (state2 == Worker.State.SUCCEEDED) {
      threadService.runTaskLater(() -> {
        String normalize=IOHelper.normalize(IOHelper.readFile(path));
        threadService.runActionLater(new Runnable(){
          @Override public void run(){
            try {
              webEngine.executeScript(String.format(""String_Node_Str"",normalize));
            }
 catch (            Exception e) {
              threadService.runActionLater(this);
            }
          }
        }
);
      }
);
    }
  }
);
  Node editorVBox=editorService.createEditorVBox(webView);
  controller.fitToParent(editorVBox);
  anchorPane.getChildren().add(editorVBox);
  MyTab tab=createTab();
  ((Label)tab.getGraphic()).setText(path.getFileName().toString());
  tab.setContent(anchorPane);
  tab.setPath(path);
  tab.setWebView(webView);
  TabPane tabPane=controller.getTabPane();
  tabPane.getTabs().add(tab);
  Tooltip tip=new Tooltip(path.toString());
  Tooltip.install(tab.getGraphic(),tip);
  Tab lastTab=tabPane.getTabs().get(tabPane.getTabs().size() - 1);
  tabPane.getSelectionModel().select(lastTab);
  recentFiles.remove(path.toString());
  recentFiles.add(0,path.toString());
  webView.requestFocus();
}",0.9319682959048876
62419,"public WebView createWebView(){
  WebView webView=new WebView();
  webView.setContextMenuEnabled(false);
  ContextMenu menu=new ContextMenu();
  webView.setOnMouseClicked(event -> {
    if (menu.getItems().size() == 0) {
      MenuItem copy=new MenuItem(""String_Node_Str"");
      copy.setOnAction(event1 -> {
        controller.cutCopy(current.currentEditorSelection());
      }
);
      MenuItem paste=new MenuItem(""String_Node_Str"");
      paste.setOnAction(event1 -> {
        current.insertEditorValue(controller.paste());
      }
);
      menu.getItems().addAll(copy,paste);
    }
    if (menu.isShowing()) {
      menu.hide();
    }
    if (event.getButton() == MouseButton.SECONDARY) {
      menu.show(webView,event.getScreenX(),event.getScreenY());
    }
  }
);
  WebEngine webEngine=webView.getEngine();
  webView.setOnDragDropped(event -> {
    Dragboard dragboard=event.getDragboard();
    boolean success=false;
    if (dragboard.hasFiles()) {
      List<File> dragboardFiles=dragboard.getFiles();
      if (dragboardFiles.size() == 1) {
        Path path=dragboardFiles.get(0).toPath();
        if (Files.isDirectory(path)) {
          Iterator<File> files=FileUtils.iterateFilesAndDirs(path.toFile(),TrueFileFilter.INSTANCE,TrueFileFilter.INSTANCE);
          StringBuffer buffer=new StringBuffer();
          buffer.append(""String_Node_Str"");
          buffer.append(""String_Node_Str"");
          buffer.append(""String_Node_Str"" + path.getFileName().toString());
          while (files.hasNext()) {
            File next=files.next();
            Path relativize=path.relativize(next.toPath());
            Path path1=relativize.getName(0);
            if (""String_Node_Str"".equals(path1.toString()) || pathResolver.isHidden(path1))             continue;
            String hash=String.join(""String_Node_Str"",Collections.nCopies(relativize.getNameCount() + 1,""String_Node_Str""));
            buffer.append(""String_Node_Str"");
            buffer.append(hash);
            buffer.append(relativize.getFileName().toString());
          }
          buffer.append(""String_Node_Str"");
          current.insertEditorValue(buffer.toString());
          success=true;
        }
      }
      Optional<String> block=parserService.toImageBlock(dragboardFiles);
      if (block.isPresent()) {
        current.insertEditorValue(block.get());
        success=true;
      }
 else {
        block=parserService.toIncludeBlock(dragboardFiles);
        if (block.isPresent()) {
          current.insertEditorValue(block.get());
          success=true;
        }
      }
    }
    if (dragboard.hasHtml() && !success) {
      Optional<String> block=parserService.toWebImageBlock(dragboard.getHtml());
      if (block.isPresent()) {
        current.insertEditorValue(block.get());
        success=true;
      }
    }
    if (dragboard.hasString() && !success) {
      current.insertEditorValue(dragboard.getString());
      success=true;
    }
    event.setDropCompleted(success);
    event.consume();
  }
);
  webEngine.getLoadWorker().stateProperty().addListener((observable,oldValue,newValue) -> {
    if (newValue == Worker.State.SUCCEEDED) {
      JSObject window=(JSObject)webEngine.executeScript(""String_Node_Str"");
      if (window.getMember(""String_Node_Str"").equals(""String_Node_Str"")) {
        window.setMember(""String_Node_Str"",controller);
        current.currentEngine().executeScript(""String_Node_Str"");
        controller.applySohrtCuts();
      }
    }
  }
);
  webEngine.load(String.format(""String_Node_Str"",controller.getPort()));
  return webView;
}","public WebView createWebView(){
  WebView webView=new WebView();
  webView.setContextMenuEnabled(false);
  ContextMenu menu=new ContextMenu();
  webView.setOnMouseClicked(event -> {
    if (menu.getItems().size() == 0) {
      MenuItem copy=new MenuItem(""String_Node_Str"");
      copy.setOnAction(event1 -> {
        controller.cutCopy(current.currentEditorSelection());
      }
);
      MenuItem paste=new MenuItem(""String_Node_Str"");
      paste.setOnAction(event1 -> {
        current.insertEditorValue(controller.paste());
      }
);
      menu.getItems().addAll(copy,paste);
    }
    if (menu.isShowing()) {
      menu.hide();
    }
    if (event.getButton() == MouseButton.SECONDARY) {
      menu.show(webView,event.getScreenX(),event.getScreenY());
    }
  }
);
  WebEngine webEngine=webView.getEngine();
  webView.setOnDragDropped(event -> {
    Dragboard dragboard=event.getDragboard();
    boolean success=false;
    if (dragboard.hasFiles()) {
      List<File> dragboardFiles=dragboard.getFiles();
      if (dragboardFiles.size() == 1) {
        Path path=dragboardFiles.get(0).toPath();
        if (Files.isDirectory(path)) {
          Iterator<File> files=FileUtils.iterateFilesAndDirs(path.toFile(),TrueFileFilter.INSTANCE,TrueFileFilter.INSTANCE);
          StringBuffer buffer=new StringBuffer();
          buffer.append(""String_Node_Str"");
          buffer.append(""String_Node_Str"");
          buffer.append(""String_Node_Str"" + path.getFileName().toString());
          while (files.hasNext()) {
            File next=files.next();
            Path relativize=path.relativize(next.toPath());
            Path path1=relativize.getName(0);
            if (""String_Node_Str"".equals(path1.toString()) || pathResolver.isHidden(path1))             continue;
            String hash=String.join(""String_Node_Str"",Collections.nCopies(relativize.getNameCount() + 1,""String_Node_Str""));
            buffer.append(""String_Node_Str"");
            buffer.append(hash);
            buffer.append(relativize.getFileName().toString());
          }
          buffer.append(""String_Node_Str"");
          current.insertEditorValue(buffer.toString());
          success=true;
        }
      }
      Optional<String> block=parserService.toImageBlock(dragboardFiles);
      if (block.isPresent()) {
        current.insertEditorValue(block.get());
        success=true;
      }
 else {
        block=parserService.toIncludeBlock(dragboardFiles);
        if (block.isPresent()) {
          current.insertEditorValue(block.get());
          success=true;
        }
      }
    }
    if (dragboard.hasHtml() && !success) {
      Optional<String> block=parserService.toWebImageBlock(dragboard.getHtml());
      if (block.isPresent()) {
        current.insertEditorValue(block.get());
        success=true;
      }
    }
    if (dragboard.hasString() && !success) {
      current.insertEditorValue(dragboard.getString());
      success=true;
    }
    event.setDropCompleted(success);
    event.consume();
  }
);
  webEngine.getLoadWorker().stateProperty().addListener((observable,oldValue,newValue) -> {
    if (newValue == Worker.State.SUCCEEDED) {
      JSObject window=(JSObject)webEngine.executeScript(""String_Node_Str"");
      if (window.getMember(""String_Node_Str"").equals(""String_Node_Str"")) {
        threadService.runActionLater(new Runnable(){
          @Override public void run(){
            window.setMember(""String_Node_Str"",controller);
            try {
              current.currentEngine().executeScript(""String_Node_Str"");
              controller.applySohrtCuts();
            }
 catch (            Exception e) {
              threadService.runActionLater(this);
            }
          }
        }
);
      }
    }
  }
);
  webEngine.load(String.format(""String_Node_Str"",controller.getPort()));
  return webView;
}",0.9642953746280768
62420,"public MyTab createTab(){
  MyTab tab=new MyTab();
  tab.setOnClosed(event -> {
    this.keepClosedTab(tab);
  }
);
  tab.selectedProperty().addListener((observableValue,before,after) -> {
    if (after) {
      if (Objects.nonNull(current.currentWebView())) {
        WebEngine webEngine=current.currentEngine();
        Worker.State state=webEngine.getLoadWorker().getState();
        if (state == Worker.State.SUCCEEDED)         controller.textListener(current.currentEditorSelection());
      }
    }
  }
);
  MenuItem menuItem0=new MenuItem(""String_Node_Str"");
  menuItem0.setOnAction(actionEvent -> {
    this.keepClosedTab(tab);
    controller.getTabPane().getTabs().remove(tab);
  }
);
  MenuItem menuItem1=new MenuItem(""String_Node_Str"");
  menuItem1.setOnAction(actionEvent -> {
    ObservableList<Tab> tabs=controller.getTabPane().getTabs();
    if (tabs.size() > 0)     tabs.forEach(this::keepClosedTab);
    tabs.clear();
  }
);
  MenuItem menuItem2=new MenuItem(""String_Node_Str"");
  menuItem2.setOnAction(actionEvent -> {
    List<Tab> blackList=new ArrayList<>();
    blackList.addAll(controller.getTabPane().getTabs());
    blackList.remove(tab);
    controller.getTabPane().getTabs().removeAll(blackList);
    if (blackList.size() > 0)     blackList.forEach(this::keepClosedTab);
  }
);
  MenuItem menuItem3=new MenuItem(""String_Node_Str"");
  menuItem3.setOnAction(actionEvent -> {
    ObservableList<Tab> tabs=controller.getTabPane().getTabs();
    Predicate<Tab> filter=pTab -> !((Label)pTab.getGraphic()).getText().contains(""String_Node_Str"");
    List<Tab> collect=tabs.stream().filter(filter).collect(Collectors.toList());
    if (collect.size() > 0)     collect.forEach(this::keepClosedTab);
    tabs.removeAll(collect);
  }
);
  MenuItem menuItem4=new MenuItem(""String_Node_Str"");
  menuItem4.setOnAction(actionEvent -> {
    TabPane tabPane=controller.getTabPane();
    if (tabPane.getSelectionModel().isSelected(tabPane.getTabs().size() - 1))     tabPane.getSelectionModel().selectFirst();
 else     tabPane.getSelectionModel().selectNext();
  }
);
  MenuItem menuItem5=new MenuItem(""String_Node_Str"");
  menuItem5.setOnAction(actionEvent -> {
    SingleSelectionModel<Tab> selectionModel=controller.getTabPane().getSelectionModel();
    if (selectionModel.isSelected(0))     selectionModel.selectLast();
 else     selectionModel.selectPrevious();
  }
);
  MenuItem menuItem6=new MenuItem(""String_Node_Str"");
  menuItem6.setOnAction(actionEvent -> {
    if (closedPaths.size() > 0) {
      int index=closedPaths.size() - 1;
      closedPaths.get(index).filter(pathResolver::isAsciidoc).ifPresent(this::addTab);
      closedPaths.get(index).filter(pathResolver::isImage).ifPresent(this::addImageTab);
      closedPaths.remove(index);
    }
  }
);
  MenuItem menuItem7=new MenuItem(""String_Node_Str"");
  menuItem7.setOnAction(event -> {
    current.currentPath().ifPresent(path -> {
      controller.getHostServices().showDocument(path.getParent().toUri().toString());
    }
);
  }
);
  MenuItem menuItem8=new MenuItem(""String_Node_Str"");
  menuItem8.setOnAction(controller::newDoc);
  ContextMenu contextMenu=new ContextMenu();
  contextMenu.getItems().addAll(menuItem0,menuItem1,menuItem2,menuItem3,new SeparatorMenuItem(),menuItem4,menuItem5,menuItem6,new SeparatorMenuItem(),menuItem7,menuItem8);
  tab.contextMenuProperty().setValue(contextMenu);
  Label label=new Label();
  tab.setGraphic(label);
  label.setOnMouseClicked(mouseEvent -> {
    if (mouseEvent.getButton().equals(MouseButton.SECONDARY)) {
      controller.getTabPane().getSelectionModel().select(tab);
    }
 else     if (mouseEvent.getClickCount() > 1) {
      SplitPane splitPane=controller.getSplitPane();
      if (splitPane.getDividerPositions()[0] > 0.1)       splitPane.setDividerPositions(0,1);
 else       splitPane.setDividerPositions(0.18,0.60);
    }
  }
);
  return tab;
}","public MyTab createTab(){
  MyTab tab=new MyTab();
  tab.setOnClosed(event -> {
    this.keepClosedTab(tab);
  }
);
  tab.selectedProperty().addListener((observableValue,before,after) -> {
    if (after) {
      if (Objects.nonNull(current.currentWebView())) {
        WebEngine webEngine=current.currentEngine();
        Worker.State state=webEngine.getLoadWorker().getState();
        if (state == Worker.State.SUCCEEDED)         controller.textListener(current.currentEditorValue());
      }
    }
  }
);
  MenuItem menuItem0=new MenuItem(""String_Node_Str"");
  menuItem0.setOnAction(actionEvent -> {
    this.keepClosedTab(tab);
    controller.getTabPane().getTabs().remove(tab);
  }
);
  MenuItem menuItem1=new MenuItem(""String_Node_Str"");
  menuItem1.setOnAction(actionEvent -> {
    ObservableList<Tab> tabs=controller.getTabPane().getTabs();
    if (tabs.size() > 0)     tabs.forEach(this::keepClosedTab);
    tabs.clear();
  }
);
  MenuItem menuItem2=new MenuItem(""String_Node_Str"");
  menuItem2.setOnAction(actionEvent -> {
    List<Tab> blackList=new ArrayList<>();
    blackList.addAll(controller.getTabPane().getTabs());
    blackList.remove(tab);
    controller.getTabPane().getTabs().removeAll(blackList);
    if (blackList.size() > 0)     blackList.forEach(this::keepClosedTab);
  }
);
  MenuItem menuItem3=new MenuItem(""String_Node_Str"");
  menuItem3.setOnAction(actionEvent -> {
    ObservableList<Tab> tabs=controller.getTabPane().getTabs();
    Predicate<Tab> filter=pTab -> !((Label)pTab.getGraphic()).getText().contains(""String_Node_Str"");
    List<Tab> collect=tabs.stream().filter(filter).collect(Collectors.toList());
    if (collect.size() > 0)     collect.forEach(this::keepClosedTab);
    tabs.removeAll(collect);
  }
);
  MenuItem menuItem4=new MenuItem(""String_Node_Str"");
  menuItem4.setOnAction(actionEvent -> {
    TabPane tabPane=controller.getTabPane();
    if (tabPane.getSelectionModel().isSelected(tabPane.getTabs().size() - 1))     tabPane.getSelectionModel().selectFirst();
 else     tabPane.getSelectionModel().selectNext();
  }
);
  MenuItem menuItem5=new MenuItem(""String_Node_Str"");
  menuItem5.setOnAction(actionEvent -> {
    SingleSelectionModel<Tab> selectionModel=controller.getTabPane().getSelectionModel();
    if (selectionModel.isSelected(0))     selectionModel.selectLast();
 else     selectionModel.selectPrevious();
  }
);
  MenuItem menuItem6=new MenuItem(""String_Node_Str"");
  menuItem6.setOnAction(actionEvent -> {
    if (closedPaths.size() > 0) {
      int index=closedPaths.size() - 1;
      closedPaths.get(index).filter(pathResolver::isAsciidoc).ifPresent(this::addTab);
      closedPaths.get(index).filter(pathResolver::isImage).ifPresent(this::addImageTab);
      closedPaths.remove(index);
    }
  }
);
  MenuItem menuItem7=new MenuItem(""String_Node_Str"");
  menuItem7.setOnAction(event -> {
    current.currentPath().ifPresent(path -> {
      controller.getHostServices().showDocument(path.getParent().toUri().toString());
    }
);
  }
);
  MenuItem menuItem8=new MenuItem(""String_Node_Str"");
  menuItem8.setOnAction(controller::newDoc);
  ContextMenu contextMenu=new ContextMenu();
  contextMenu.getItems().addAll(menuItem0,menuItem1,menuItem2,menuItem3,new SeparatorMenuItem(),menuItem4,menuItem5,menuItem6,new SeparatorMenuItem(),menuItem7,menuItem8);
  tab.contextMenuProperty().setValue(contextMenu);
  Label label=new Label();
  tab.setGraphic(label);
  label.setOnMouseClicked(mouseEvent -> {
    if (mouseEvent.getButton().equals(MouseButton.SECONDARY)) {
      controller.getTabPane().getSelectionModel().select(tab);
    }
 else     if (mouseEvent.getClickCount() > 1) {
      SplitPane splitPane=controller.getSplitPane();
      if (splitPane.getDividerPositions()[0] > 0.1)       splitPane.setDividerPositions(0,1);
 else       splitPane.setDividerPositions(0.18,0.60);
    }
  }
);
  return tab;
}",0.9981954111884508
62421,"public void keepClosedTab(Tab closedTab){
  MyTab tab=(MyTab)closedTab;
  Label closedTabLabel=(Label)closedTab.getGraphic();
  if (!closedTabLabel.getText().equals(""String_Node_Str"")) {
    closedPaths.add(Optional.ofNullable(tab.getPath()));
  }
  threadService.runTaskLater(task -> {
    threadService.runActionLater(run -> {
      tab.setOnClosed(null);
      tab.setOnSelectionChanged(null);
      tab.setPath(null);
      tab.setWebView(null);
      tab.setContent(null);
      tab.setUserData(null);
      tab.setOnCloseRequest(null);
    }
);
  }
);
}","public void keepClosedTab(Tab closedTab){
  MyTab tab=(MyTab)closedTab;
  Label closedTabLabel=(Label)closedTab.getGraphic();
  if (!closedTabLabel.getText().equals(""String_Node_Str"")) {
    closedPaths.add(Optional.ofNullable(tab.getPath()));
  }
  threadService.runTaskLater(task -> {
    threadService.runActionLater(run -> {
      tab.setOnClosed(null);
      tab.setOnSelectionChanged(null);
      tab.setPath(null);
      tab.setWebView(null);
      tab.setContent(null);
      tab.setUserData(null);
      tab.setOnCloseRequest(null);
      Label label=(Label)tab.getGraphic();
      label.setOnMouseClicked(null);
    }
);
  }
);
}",0.9332220367278798
62422,"public String plantUml(String uml,String type,String fileName) throws IOException {
  return plantUmlService.plantUml(uml,type,fileName);
}","public void plantUml(String uml,String type,String fileName) throws IOException {
  threadService.runTaskLater(task -> {
    plantUmlService.plantUml(uml,type,fileName);
  }
);
}",0.832807570977918
62423,"public String createFileTree(String tree,String type,String fileName,String width,String height){
  return treeService.createFileTree(tree,type,fileName,width,height);
}","public void createFileTree(String tree,String type,String fileName,String width,String height){
  threadService.runTaskLater(task -> {
    treeService.createFileTree(tree,type,fileName,width,height);
  }
);
}",0.8381962864721485
62424,"public void svgToPng(String fileName,String svg,String formula,float width,float height){
  mathJaxService.svgToPng(fileName,svg,formula,width,height);
}","public void svgToPng(String fileName,String svg,String formula,float width,float height){
  threadService.runTaskLater(task -> {
    mathJaxService.svgToPng(fileName,svg,formula,width,height);
  }
);
}",0.864406779661017
62425,"public static void writeToFile(Path path,byte[] content,StandardOpenOption... openOption){
  try {
    Files.write(path,content,openOption);
  }
 catch (  IOException e) {
    logger.info(e.toString());
  }
}","public static void writeToFile(Path path,byte[] content,StandardOpenOption... openOption){
  try {
    Files.write(path,content,openOption);
  }
 catch (  IOException e) {
    logger.info(e.getMessage(),e);
  }
}",0.9428571428571428
62426,"public static String readFile(Path path){
  String content=""String_Node_Str"";
  try (InputStream is=Files.newInputStream(path,StandardOpenOption.READ)){
    content=IOUtils.toString(is,""String_Node_Str"");
  }
 catch (  IOException e) {
    logger.info(e.toString());
  }
  return content;
}","public static String readFile(Path path){
  String content=""String_Node_Str"";
  try (InputStream is=Files.newInputStream(path,StandardOpenOption.READ)){
    content=IOUtils.toString(is,""String_Node_Str"");
  }
 catch (  IOException e) {
    logger.info(e.getMessage(),e);
  }
  return content;
}",0.958904109589041
62427,"public static Path createTempFile(Path path,String prefix,String suffix){
  try {
    return Files.createTempFile(path,prefix,suffix);
  }
 catch (  IOException e) {
    logger.info(e.toString());
  }
  return null;
}","public static Path createTempFile(Path path,String prefix,String suffix){
  try {
    return Files.createTempFile(path,prefix,suffix);
  }
 catch (  IOException e) {
    logger.info(e.getMessage(),e);
  }
  return null;
}",0.9452054794520548
62428,"public static void createDirectories(Path path){
  try {
    Files.createDirectories(path);
  }
 catch (  IOException e) {
    logger.info(e.toString());
  }
}","public static void createDirectories(Path path){
  try {
    Files.createDirectories(path);
  }
 catch (  IOException e) {
    logger.info(e.getMessage(),e);
  }
}",0.9503105590062112
62429,"public String plantUml(String uml,String type,String fileName) throws IOException {
  Objects.requireNonNull(fileName);
  if (!fileName.endsWith(""String_Node_Str"") && !""String_Node_Str"".equalsIgnoreCase(type))   return ""String_Node_Str"";
  String defaultScale=""String_Node_Str"";
  if (!uml.contains(""String_Node_Str"") && !uml.contains(""String_Node_Str"")) {
    uml=defaultScale + uml;
    uml=""String_Node_Str"" + uml + ""String_Node_Str"";
  }
 else {
    uml=uml.replaceFirst(""String_Node_Str"",""String_Node_Str"" + defaultScale);
  }
  SourceStringReader reader=new SourceStringReader(uml);
  try (ByteArrayOutputStream os=new ByteArrayOutputStream()){
    if (""String_Node_Str"".equalsIgnoreCase(type)) {
      String desc=reader.generateImage(os,new FileFormatOption(FileFormat.ATXT));
      return os.toString(""String_Node_Str"");
    }
 else {
      if (!current.currentPath().isPresent())       controller.saveDoc();
      Path path=current.currentPath().get().getParent();
      Path umlPath=path.resolve(""String_Node_Str"").resolve(fileName);
      Integer cacheHit=current.getCache().get(fileName);
      int hashCode=(fileName + type + uml).hashCode();
      if (Objects.isNull(cacheHit) || hashCode != cacheHit) {
        threadService.runTaskLater(task -> {
          try {
            String desc=reader.generateImage(os,new FileFormatOption(FileFormat.PNG));
            Files.createDirectories(path.resolve(""String_Node_Str""));
            IOHelper.writeToFile(umlPath,os.toByteArray(),CREATE,WRITE,TRUNCATE_EXISTING);
            controller.getLastRenderedChangeListener().changed(null,controller.getLastRendered().getValue(),controller.getLastRendered().getValue());
          }
 catch (          Exception e) {
            logger.error(e.getMessage(),e);
          }
        }
);
      }
      current.getCache().put(fileName,hashCode);
      String umlRelativePath=Paths.get(""String_Node_Str"") + ""String_Node_Str"" + umlPath.getFileName();
      return umlRelativePath;
    }
  }
 }","public void plantUml(String uml,String type,String fileName){
  Objects.requireNonNull(fileName);
  if (!fileName.endsWith(""String_Node_Str"") && !""String_Node_Str"".equalsIgnoreCase(type))   return;
  String defaultScale=""String_Node_Str"";
  if (!uml.contains(""String_Node_Str"") && !uml.contains(""String_Node_Str"")) {
    uml=defaultScale + uml;
    uml=""String_Node_Str"" + uml + ""String_Node_Str"";
  }
 else {
    uml=uml.replaceFirst(""String_Node_Str"",""String_Node_Str"" + defaultScale);
  }
  SourceStringReader reader=new SourceStringReader(uml);
  try (ByteArrayOutputStream os=new ByteArrayOutputStream()){
    if (""String_Node_Str"".equalsIgnoreCase(type)) {
      String desc=reader.generateImage(os,new FileFormatOption(FileFormat.ATXT));
      return;
    }
 else {
      if (!current.currentPath().isPresent())       controller.saveDoc();
      Path path=current.currentPath().get().getParent();
      Path umlPath=path.resolve(""String_Node_Str"").resolve(fileName);
      Integer cacheHit=current.getCache().get(fileName);
      int hashCode=(fileName + type + uml).hashCode();
      if (Objects.isNull(cacheHit) || hashCode != cacheHit) {
        threadService.runTaskLater(task -> {
          try {
            String desc=reader.generateImage(os,new FileFormatOption(FileFormat.PNG));
            Files.createDirectories(path.resolve(""String_Node_Str""));
            IOHelper.writeToFile(umlPath,os.toByteArray(),CREATE,WRITE,TRUNCATE_EXISTING);
            controller.getLastRenderedChangeListener().changed(null,controller.getLastRendered().getValue(),controller.getLastRendered().getValue());
          }
 catch (          Exception e) {
            logger.error(e.getMessage(),e);
          }
        }
);
      }
      current.getCache().put(fileName,hashCode);
    }
  }
 catch (  IOException e) {
    logger.info(e.getMessage(),e);
  }
}",0.9280332553910108
62430,"public String createFileTree(String tree,String type,String fileName,String width,String height){
  Objects.requireNonNull(fileName);
  if (!fileName.endsWith(""String_Node_Str"") && !""String_Node_Str"".equalsIgnoreCase(type))   return ""String_Node_Str"";
  if (""String_Node_Str"".equalsIgnoreCase(type)) {
    return tree;
  }
 else {
    if (!current.currentPath().isPresent())     controller.saveDoc();
    Path path=current.currentPath().get().getParent();
    Path treePath=path.resolve(""String_Node_Str"").resolve(fileName);
    Integer cacheHit=current.getCache().get(fileName);
    int hashCode=(fileName + type + tree+ width+ height).hashCode();
    if (Objects.isNull(cacheHit) || hashCode != cacheHit) {
      TreeView<Tuple<Integer,String>> fileView=new TreeView<>();
      fileView.getStyleClass().add(""String_Node_Str"");
      fileView.setLayoutX(-99999);
      fileView.setLayoutY(-99999);
      controller.getRootAnchor().getChildren().add(fileView);
      try {
        List<String> strings=Arrays.asList(tree.split(""String_Node_Str""));
        List<TreeItem<Tuple<Integer,String>>> treeItems=strings.stream().map(s -> {
          int level=StringUtils.countOccurrencesOf(s,""String_Node_Str"");
          String value=s.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
          return new Tuple<Integer,String>(level,value);
        }
).map(t -> {
          Node icon=awesomeService.getIcon(Paths.get(t.getValue()));
          TreeItem<Tuple<Integer,String>> treeItem=new TreeItem<>(t,icon);
          treeItem.setExpanded(true);
          return treeItem;
        }
).collect(Collectors.toList());
        for (int index=0; index < treeItems.size(); index++) {
          TreeItem<Tuple<Integer,String>> currentItem=treeItems.get(index);
          Tuple<Integer,String> currentItemValue=currentItem.getValue();
          if (Objects.isNull(fileView.getRoot())) {
            fileView.setRoot(currentItem);
            continue;
          }
          TreeItem<Tuple<Integer,String>> lastItem=treeItems.get(index - 1);
          int lastPos=lastItem.getValue().getKey();
          if (currentItemValue.getKey() > lastPos) {
            lastItem.getChildren().add(currentItem);
            continue;
          }
          if (currentItemValue.getKey() == lastPos) {
            TreeItem<Tuple<Integer,String>> parent=lastItem.getParent();
            if (Objects.isNull(parent))             parent=fileView.getRoot();
            parent.getChildren().add(currentItem);
            continue;
          }
          if (currentItemValue.getKey() < lastPos) {
            List<TreeItem<Tuple<Integer,String>>> collect=treeItems.stream().filter(t -> t.getValue().getKey() == currentItemValue.getKey()).collect(Collectors.toList());
            if (collect.size() > 0) {
              TreeItem<Tuple<Integer,String>> parent=fileView.getRoot();
              try {
                TreeItem<Tuple<Integer,String>> treeItem=collect.get(collect.indexOf(currentItem) - 1);
                parent=treeItem.getParent();
              }
 catch (              RuntimeException e) {
                logger.info(e.getMessage(),e);
              }
              parent.getChildren().add(currentItem);
            }
            continue;
          }
        }
        fileView.setMaxHeight(2500);
        fileView.setPrefWidth(250);
        fileView.setPrefHeight(treeItems.size() * 24);
        try {
          Double value=Double.valueOf(width);
          if (width.contains(""String_Node_Str"") || width.contains(""String_Node_Str""))           fileView.setPrefWidth(fileView.getPrefWidth() + value);
 else           fileView.setPrefWidth(value);
        }
 catch (        Exception e) {
          logger.debug(e.getMessage(),e);
        }
        try {
          Double value=Double.valueOf(height);
          if (height.contains(""String_Node_Str"") || height.contains(""String_Node_Str""))           fileView.setPrefHeight(fileView.getPrefHeight() + value);
 else           fileView.setPrefHeight(value);
        }
 catch (        Exception e) {
          logger.debug(e.getMessage(),e);
        }
        WritableImage writableImage=fileView.snapshot(new SnapshotParameters(),null);
        BufferedImage bufferedImage=SwingFXUtils.fromFXImage(writableImage,null);
        IOHelper.createDirectories(path.resolve(""String_Node_Str""));
        IOHelper.imageWrite(bufferedImage,""String_Node_Str"",treePath.toFile());
        controller.getLastRenderedChangeListener().changed(null,controller.getLastRendered().getValue(),controller.getLastRendered().getValue());
      }
 catch (      Exception e) {
        logger.error(e.getMessage(),e);
      }
    }
    current.getCache().put(fileName,hashCode);
    String treeRelativePath=Paths.get(""String_Node_Str"") + ""String_Node_Str"" + treePath.getFileName();
    return treeRelativePath;
  }
}","public void createFileTree(String tree,String type,String fileName,String width,String height){
  Objects.requireNonNull(fileName);
  if (!fileName.endsWith(""String_Node_Str"") && !""String_Node_Str"".equalsIgnoreCase(type))   return;
  if (""String_Node_Str"".equalsIgnoreCase(type)) {
    return;
  }
 else {
    Path path=current.currentPath().get().getParent();
    Path treePath=path.resolve(""String_Node_Str"").resolve(fileName);
    if (!current.currentPath().isPresent())     controller.saveDoc();
    Integer cacheHit=current.getCache().get(fileName);
    int hashCode=(fileName + type + tree+ width+ height).hashCode();
    if (Objects.isNull(cacheHit) || hashCode != cacheHit) {
      TreeView<Tuple<Integer,String>> fileView=new TreeView<>();
      fileView.getStyleClass().add(""String_Node_Str"");
      fileView.setLayoutX(-99999);
      fileView.setLayoutY(-99999);
      try {
        List<String> strings=Arrays.asList(tree.split(""String_Node_Str""));
        List<TreeItem<Tuple<Integer,String>>> treeItems=strings.stream().map(s -> {
          int level=StringUtils.countOccurrencesOf(s,""String_Node_Str"");
          String value=s.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
          return new Tuple<Integer,String>(level,value);
        }
).map(t -> {
          Node icon=awesomeService.getIcon(Paths.get(t.getValue()));
          TreeItem<Tuple<Integer,String>> treeItem=new TreeItem<>(t,icon);
          treeItem.setExpanded(true);
          return treeItem;
        }
).collect(Collectors.toList());
        for (int index=0; index < treeItems.size(); index++) {
          TreeItem<Tuple<Integer,String>> currentItem=treeItems.get(index);
          Tuple<Integer,String> currentItemValue=currentItem.getValue();
          if (Objects.isNull(fileView.getRoot())) {
            fileView.setRoot(currentItem);
            continue;
          }
          TreeItem<Tuple<Integer,String>> lastItem=treeItems.get(index - 1);
          int lastPos=lastItem.getValue().getKey();
          if (currentItemValue.getKey() > lastPos) {
            lastItem.getChildren().add(currentItem);
            continue;
          }
          if (currentItemValue.getKey() == lastPos) {
            TreeItem<Tuple<Integer,String>> parent=lastItem.getParent();
            if (Objects.isNull(parent))             parent=fileView.getRoot();
            parent.getChildren().add(currentItem);
            continue;
          }
          if (currentItemValue.getKey() < lastPos) {
            List<TreeItem<Tuple<Integer,String>>> collect=treeItems.stream().filter(t -> t.getValue().getKey() == currentItemValue.getKey()).collect(Collectors.toList());
            if (collect.size() > 0) {
              TreeItem<Tuple<Integer,String>> parent=fileView.getRoot();
              try {
                TreeItem<Tuple<Integer,String>> treeItem=collect.get(collect.indexOf(currentItem) - 1);
                parent=treeItem.getParent();
              }
 catch (              RuntimeException e) {
                logger.info(e.getMessage(),e);
              }
              parent.getChildren().add(currentItem);
            }
            continue;
          }
        }
        fileView.setMaxHeight(2500);
        fileView.setPrefWidth(250);
        fileView.setPrefHeight(treeItems.size() * 24);
        try {
          Double value=Double.valueOf(width);
          if (width.contains(""String_Node_Str"") || width.contains(""String_Node_Str""))           fileView.setPrefWidth(fileView.getPrefWidth() + value);
 else           fileView.setPrefWidth(value);
        }
 catch (        Exception e) {
          logger.debug(e.getMessage(),e);
        }
        try {
          Double value=Double.valueOf(height);
          if (height.contains(""String_Node_Str"") || height.contains(""String_Node_Str""))           fileView.setPrefHeight(fileView.getPrefHeight() + value);
 else           fileView.setPrefHeight(value);
        }
 catch (        Exception e) {
          logger.debug(e.getMessage(),e);
        }
        threadService.runActionLater(run -> {
          controller.getRootAnchor().getChildren().add(fileView);
          WritableImage writableImage=fileView.snapshot(new SnapshotParameters(),null);
          BufferedImage bufferedImage=SwingFXUtils.fromFXImage(writableImage,null);
          IOHelper.createDirectories(path.resolve(""String_Node_Str""));
          IOHelper.imageWrite(bufferedImage,""String_Node_Str"",treePath.toFile());
          controller.getLastRenderedChangeListener().changed(null,controller.getLastRendered().getValue(),controller.getLastRendered().getValue());
          controller.getRootAnchor().getChildren().remove(fileView);
        }
);
      }
 catch (      Exception e) {
        logger.error(e.getMessage(),e);
      }
    }
    current.getCache().put(fileName,hashCode);
  }
}",0.9218733916623778
62431,"public MyTab createTab(){
  MyTab tab=new MyTab();
  tab.setOnClosed(event -> {
    this.keepClosedTab(tab);
  }
);
  tab.selectedProperty().addListener((observableValue,before,after) -> {
    if (after) {
      if (Objects.nonNull(current.currentWebView())) {
        WebEngine webEngine=current.currentEngine();
        Worker.State state=webEngine.getLoadWorker().getState();
        if (state == Worker.State.SUCCEEDED)         webEngine.executeScript(""String_Node_Str"");
      }
    }
  }
);
  MenuItem menuItem0=new MenuItem(""String_Node_Str"");
  menuItem0.setOnAction(actionEvent -> {
    this.keepClosedTab(tab);
    controller.getTabPane().getTabs().remove(tab);
  }
);
  MenuItem menuItem1=new MenuItem(""String_Node_Str"");
  menuItem1.setOnAction(actionEvent -> {
    ObservableList<Tab> tabs=controller.getTabPane().getTabs();
    if (tabs.size() > 0)     tabs.forEach(this::keepClosedTab);
    tabs.clear();
  }
);
  MenuItem menuItem2=new MenuItem(""String_Node_Str"");
  menuItem2.setOnAction(actionEvent -> {
    List<Tab> blackList=new ArrayList<>();
    blackList.addAll(controller.getTabPane().getTabs());
    blackList.remove(tab);
    controller.getTabPane().getTabs().removeAll(blackList);
    if (blackList.size() > 0)     blackList.forEach(this::keepClosedTab);
  }
);
  MenuItem menuItem3=new MenuItem(""String_Node_Str"");
  menuItem3.setOnAction(actionEvent -> {
    ObservableList<Tab> tabs=controller.getTabPane().getTabs();
    Predicate<Tab> filter=pTab -> !((Label)pTab.getGraphic()).getText().contains(""String_Node_Str"");
    List<Tab> collect=tabs.stream().filter(filter).collect(Collectors.toList());
    if (collect.size() > 0)     collect.forEach(this::keepClosedTab);
    tabs.removeAll(collect);
  }
);
  MenuItem menuItem4=new MenuItem(""String_Node_Str"");
  menuItem4.setOnAction(actionEvent -> {
    TabPane tabPane=controller.getTabPane();
    if (tabPane.getSelectionModel().isSelected(tabPane.getTabs().size() - 1))     tabPane.getSelectionModel().selectFirst();
 else     tabPane.getSelectionModel().selectNext();
  }
);
  MenuItem menuItem5=new MenuItem(""String_Node_Str"");
  menuItem5.setOnAction(actionEvent -> {
    SingleSelectionModel<Tab> selectionModel=controller.getTabPane().getSelectionModel();
    if (selectionModel.isSelected(0))     selectionModel.selectLast();
 else     selectionModel.selectPrevious();
  }
);
  MenuItem menuItem6=new MenuItem(""String_Node_Str"");
  menuItem6.setOnAction(actionEvent -> {
    if (closedPaths.size() > 0) {
      int index=closedPaths.size() - 1;
      closedPaths.get(index).filter(pathResolver::isAsciidoc).ifPresent(this::addTab);
      closedPaths.get(index).filter(pathResolver::isImage).ifPresent(this::addImageTab);
      closedPaths.remove(index);
    }
  }
);
  MenuItem menuItem7=new MenuItem(""String_Node_Str"");
  menuItem7.setOnAction(event -> {
    current.currentPath().ifPresent(path -> {
      controller.getHostServices().showDocument(path.getParent().toUri().toString());
    }
);
  }
);
  MenuItem menuItem8=new MenuItem(""String_Node_Str"");
  menuItem8.setOnAction(controller::newDoc);
  ContextMenu contextMenu=new ContextMenu();
  contextMenu.getItems().addAll(menuItem0,menuItem1,menuItem2,menuItem3,new SeparatorMenuItem(),menuItem4,menuItem5,menuItem6,new SeparatorMenuItem(),menuItem7,menuItem8);
  tab.contextMenuProperty().setValue(contextMenu);
  Label label=new Label();
  tab.setGraphic(label);
  label.setOnMouseClicked(mouseEvent -> {
    if (mouseEvent.getButton().equals(MouseButton.SECONDARY)) {
      controller.getTabPane().getSelectionModel().select(tab);
    }
 else     if (mouseEvent.getClickCount() > 1) {
      SplitPane splitPane=controller.getSplitPane();
      if (splitPane.getDividerPositions()[0] > 0.1)       splitPane.setDividerPositions(0,1);
 else       splitPane.setDividerPositions(0.18,0.60);
    }
  }
);
  return tab;
}","public MyTab createTab(){
  MyTab tab=new MyTab();
  tab.setOnClosed(event -> {
    this.keepClosedTab(tab);
  }
);
  tab.selectedProperty().addListener((observableValue,before,after) -> {
    if (after) {
      if (Objects.nonNull(current.currentWebView())) {
        WebEngine webEngine=current.currentEngine();
        Worker.State state=webEngine.getLoadWorker().getState();
        if (state == Worker.State.SUCCEEDED)         controller.textListener(current.currentEditorSelection());
      }
    }
  }
);
  MenuItem menuItem0=new MenuItem(""String_Node_Str"");
  menuItem0.setOnAction(actionEvent -> {
    this.keepClosedTab(tab);
    controller.getTabPane().getTabs().remove(tab);
  }
);
  MenuItem menuItem1=new MenuItem(""String_Node_Str"");
  menuItem1.setOnAction(actionEvent -> {
    ObservableList<Tab> tabs=controller.getTabPane().getTabs();
    if (tabs.size() > 0)     tabs.forEach(this::keepClosedTab);
    tabs.clear();
  }
);
  MenuItem menuItem2=new MenuItem(""String_Node_Str"");
  menuItem2.setOnAction(actionEvent -> {
    List<Tab> blackList=new ArrayList<>();
    blackList.addAll(controller.getTabPane().getTabs());
    blackList.remove(tab);
    controller.getTabPane().getTabs().removeAll(blackList);
    if (blackList.size() > 0)     blackList.forEach(this::keepClosedTab);
  }
);
  MenuItem menuItem3=new MenuItem(""String_Node_Str"");
  menuItem3.setOnAction(actionEvent -> {
    ObservableList<Tab> tabs=controller.getTabPane().getTabs();
    Predicate<Tab> filter=pTab -> !((Label)pTab.getGraphic()).getText().contains(""String_Node_Str"");
    List<Tab> collect=tabs.stream().filter(filter).collect(Collectors.toList());
    if (collect.size() > 0)     collect.forEach(this::keepClosedTab);
    tabs.removeAll(collect);
  }
);
  MenuItem menuItem4=new MenuItem(""String_Node_Str"");
  menuItem4.setOnAction(actionEvent -> {
    TabPane tabPane=controller.getTabPane();
    if (tabPane.getSelectionModel().isSelected(tabPane.getTabs().size() - 1))     tabPane.getSelectionModel().selectFirst();
 else     tabPane.getSelectionModel().selectNext();
  }
);
  MenuItem menuItem5=new MenuItem(""String_Node_Str"");
  menuItem5.setOnAction(actionEvent -> {
    SingleSelectionModel<Tab> selectionModel=controller.getTabPane().getSelectionModel();
    if (selectionModel.isSelected(0))     selectionModel.selectLast();
 else     selectionModel.selectPrevious();
  }
);
  MenuItem menuItem6=new MenuItem(""String_Node_Str"");
  menuItem6.setOnAction(actionEvent -> {
    if (closedPaths.size() > 0) {
      int index=closedPaths.size() - 1;
      closedPaths.get(index).filter(pathResolver::isAsciidoc).ifPresent(this::addTab);
      closedPaths.get(index).filter(pathResolver::isImage).ifPresent(this::addImageTab);
      closedPaths.remove(index);
    }
  }
);
  MenuItem menuItem7=new MenuItem(""String_Node_Str"");
  menuItem7.setOnAction(event -> {
    current.currentPath().ifPresent(path -> {
      controller.getHostServices().showDocument(path.getParent().toUri().toString());
    }
);
  }
);
  MenuItem menuItem8=new MenuItem(""String_Node_Str"");
  menuItem8.setOnAction(controller::newDoc);
  ContextMenu contextMenu=new ContextMenu();
  contextMenu.getItems().addAll(menuItem0,menuItem1,menuItem2,menuItem3,new SeparatorMenuItem(),menuItem4,menuItem5,menuItem6,new SeparatorMenuItem(),menuItem7,menuItem8);
  tab.contextMenuProperty().setValue(contextMenu);
  Label label=new Label();
  tab.setGraphic(label);
  label.setOnMouseClicked(mouseEvent -> {
    if (mouseEvent.getButton().equals(MouseButton.SECONDARY)) {
      controller.getTabPane().getSelectionModel().select(tab);
    }
 else     if (mouseEvent.getClickCount() > 1) {
      SplitPane splitPane=controller.getSplitPane();
      if (splitPane.getDividerPositions()[0] > 0.1)       splitPane.setDividerPositions(0,1);
 else       splitPane.setDividerPositions(0.18,0.60);
    }
  }
);
  return tab;
}",0.9877371885891312
62432,"public WebView createWebView(){
  WebView webView=new WebView();
  webView.setContextMenuEnabled(false);
  ContextMenu menu=new ContextMenu();
  webView.setOnMouseClicked(event -> {
    if (menu.getItems().size() == 0) {
      MenuItem copy=new MenuItem(""String_Node_Str"");
      copy.setOnAction(event1 -> {
        controller.cutCopy(current.currentEditorSelection());
      }
);
      MenuItem paste=new MenuItem(""String_Node_Str"");
      paste.setOnAction(event1 -> {
        current.insertEditorValue(controller.paste());
      }
);
      menu.getItems().addAll(copy,paste);
    }
    if (menu.isShowing()) {
      menu.hide();
    }
    if (event.getButton() == MouseButton.SECONDARY) {
      menu.show(webView,event.getScreenX(),event.getScreenY());
    }
  }
);
  WebEngine webEngine=webView.getEngine();
  webView.setOnDragDropped(event -> {
    Dragboard dragboard=event.getDragboard();
    boolean success=false;
    if (dragboard.hasFiles()) {
      List<File> dragboardFiles=dragboard.getFiles();
      if (dragboardFiles.size() == 1) {
        Path path=dragboardFiles.get(0).toPath();
        if (Files.isDirectory(path)) {
          Iterator<File> files=FileUtils.iterateFilesAndDirs(path.toFile(),TrueFileFilter.INSTANCE,TrueFileFilter.INSTANCE);
          StringBuffer buffer=new StringBuffer();
          buffer.append(""String_Node_Str"");
          buffer.append(""String_Node_Str"");
          buffer.append(""String_Node_Str"" + path.getFileName().toString());
          while (files.hasNext()) {
            File next=files.next();
            Path relativize=path.relativize(next.toPath());
            Path path1=relativize.getName(0);
            if (""String_Node_Str"".equals(path1.toString()) || pathResolver.isHidden(path1))             continue;
            String hash=String.join(""String_Node_Str"",Collections.nCopies(relativize.getNameCount() + 1,""String_Node_Str""));
            buffer.append(""String_Node_Str"");
            buffer.append(hash);
            buffer.append(relativize.getFileName().toString());
          }
          buffer.append(""String_Node_Str"");
          current.insertEditorValue(buffer.toString());
          success=true;
        }
      }
      Optional<String> block=parserService.toImageBlock(dragboardFiles);
      if (block.isPresent()) {
        current.insertEditorValue(block.get());
        success=true;
      }
 else {
        block=parserService.toIncludeBlock(dragboardFiles);
        if (block.isPresent()) {
          current.insertEditorValue(block.get());
          success=true;
        }
      }
    }
    if (dragboard.hasHtml() && !success) {
      Optional<String> block=parserService.toWebImageBlock(dragboard.getHtml());
      if (block.isPresent()) {
        current.insertEditorValue(block.get());
        success=true;
      }
    }
    if (dragboard.hasString() && !success) {
      current.insertEditorValue(dragboard.getString());
      success=true;
    }
    event.setDropCompleted(success);
    event.consume();
  }
);
  webEngine.getLoadWorker().stateProperty().addListener((observable,oldValue,newValue) -> {
    if (newValue == Worker.State.SUCCEEDED) {
      JSObject window=(JSObject)webEngine.executeScript(""String_Node_Str"");
      if (window.getMember(""String_Node_Str"").equals(""String_Node_Str"")) {
        window.setMember(""String_Node_Str"",controller);
      }
      controller.applySohrtCuts();
    }
  }
);
  webEngine.load(String.format(""String_Node_Str"",controller.getPort()));
  return webView;
}","public WebView createWebView(){
  WebView webView=new WebView();
  webView.setContextMenuEnabled(false);
  ContextMenu menu=new ContextMenu();
  webView.setOnMouseClicked(event -> {
    if (menu.getItems().size() == 0) {
      MenuItem copy=new MenuItem(""String_Node_Str"");
      copy.setOnAction(event1 -> {
        controller.cutCopy(current.currentEditorSelection());
      }
);
      MenuItem paste=new MenuItem(""String_Node_Str"");
      paste.setOnAction(event1 -> {
        current.insertEditorValue(controller.paste());
      }
);
      menu.getItems().addAll(copy,paste);
    }
    if (menu.isShowing()) {
      menu.hide();
    }
    if (event.getButton() == MouseButton.SECONDARY) {
      menu.show(webView,event.getScreenX(),event.getScreenY());
    }
  }
);
  WebEngine webEngine=webView.getEngine();
  webView.setOnDragDropped(event -> {
    Dragboard dragboard=event.getDragboard();
    boolean success=false;
    if (dragboard.hasFiles()) {
      List<File> dragboardFiles=dragboard.getFiles();
      if (dragboardFiles.size() == 1) {
        Path path=dragboardFiles.get(0).toPath();
        if (Files.isDirectory(path)) {
          Iterator<File> files=FileUtils.iterateFilesAndDirs(path.toFile(),TrueFileFilter.INSTANCE,TrueFileFilter.INSTANCE);
          StringBuffer buffer=new StringBuffer();
          buffer.append(""String_Node_Str"");
          buffer.append(""String_Node_Str"");
          buffer.append(""String_Node_Str"" + path.getFileName().toString());
          while (files.hasNext()) {
            File next=files.next();
            Path relativize=path.relativize(next.toPath());
            Path path1=relativize.getName(0);
            if (""String_Node_Str"".equals(path1.toString()) || pathResolver.isHidden(path1))             continue;
            String hash=String.join(""String_Node_Str"",Collections.nCopies(relativize.getNameCount() + 1,""String_Node_Str""));
            buffer.append(""String_Node_Str"");
            buffer.append(hash);
            buffer.append(relativize.getFileName().toString());
          }
          buffer.append(""String_Node_Str"");
          current.insertEditorValue(buffer.toString());
          success=true;
        }
      }
      Optional<String> block=parserService.toImageBlock(dragboardFiles);
      if (block.isPresent()) {
        current.insertEditorValue(block.get());
        success=true;
      }
 else {
        block=parserService.toIncludeBlock(dragboardFiles);
        if (block.isPresent()) {
          current.insertEditorValue(block.get());
          success=true;
        }
      }
    }
    if (dragboard.hasHtml() && !success) {
      Optional<String> block=parserService.toWebImageBlock(dragboard.getHtml());
      if (block.isPresent()) {
        current.insertEditorValue(block.get());
        success=true;
      }
    }
    if (dragboard.hasString() && !success) {
      current.insertEditorValue(dragboard.getString());
      success=true;
    }
    event.setDropCompleted(success);
    event.consume();
  }
);
  webEngine.getLoadWorker().stateProperty().addListener((observable,oldValue,newValue) -> {
    if (newValue == Worker.State.SUCCEEDED) {
      JSObject window=(JSObject)webEngine.executeScript(""String_Node_Str"");
      if (window.getMember(""String_Node_Str"").equals(""String_Node_Str"")) {
        window.setMember(""String_Node_Str"",controller);
        current.currentEngine().executeScript(""String_Node_Str"");
        controller.applySohrtCuts();
      }
    }
  }
);
  webEngine.load(String.format(""String_Node_Str"",controller.getPort()));
  return webView;
}",0.9696969696969696
62433,"public void produceMobi(Path currentPath,String kindlegenDir){
  try {
    indikatorService.startCycle();
    ProcessExecutor processExecutor=new ProcessExecutor();
    processExecutor.readOutput(true);
    processExecutor.directory(new File(kindlegenDir));
    String message=processExecutor.command(""String_Node_Str"",currentPath.resolve(""String_Node_Str"").toString()).execute().outputUTF8();
    logger.info(message);
    indikatorService.completeCycle();
    Platform.runLater(() -> {
      asciiDocController.getRecentFiles().remove(currentPath.resolve(""String_Node_Str"").toString());
      asciiDocController.getRecentFiles().add(0,currentPath.resolve(""String_Node_Str"").toString());
    }
);
  }
 catch (  Exception e) {
    logger.error(e.getMessage(),e);
  }
 finally {
    indikatorService.hideIndikator();
  }
}","public void produceMobi(Path currentPath,String kindlegenDir){
  try {
    indikatorService.startCycle();
    ProcessExecutor processExecutor=new ProcessExecutor();
    processExecutor.readOutput(true);
    Path kindleGenPath=Paths.get(kindlegenDir);
    String message=processExecutor.command(kindleGenPath.resolve(""String_Node_Str"").toString(),currentPath.resolve(""String_Node_Str"").toString()).execute().outputUTF8();
    logger.info(message);
    indikatorService.completeCycle();
    Platform.runLater(() -> {
      asciiDocController.getRecentFiles().remove(currentPath.resolve(""String_Node_Str"").toString());
      asciiDocController.getRecentFiles().add(0,currentPath.resolve(""String_Node_Str"").toString());
    }
);
  }
 catch (  Exception e) {
    logger.error(e.getMessage(),e);
  }
 finally {
    indikatorService.hideIndikator();
  }
}",0.8999400838825644
62434,"private void startApp(Stage stage) throws Throwable {
  FXMLLoader parentLoader=new FXMLLoader();
  FXMLLoader tablePopupLoader=new FXMLLoader();
  context=SpringApplication.run(SpringAppConfig.class);
  tablePopupLoader.setControllerFactory(context::getBean);
  parentLoader.setControllerFactory(context::getBean);
  AnchorPane tableAnchor=tablePopupLoader.load(getClass().getResourceAsStream(""String_Node_Str""));
  Parent root=parentLoader.load(getClass().getResourceAsStream(""String_Node_Str""));
  controller=parentLoader.getController();
  HostServicesDelegate hostServices=HostServicesFactory.getInstance(this);
  controller.setHostServices(hostServices);
  Scene scene=new Scene(root);
  scene.getStylesheets().add(""String_Node_Str"");
  Rectangle2D bounds=Screen.getPrimary().getVisualBounds();
  stage.setWidth(bounds.getWidth());
  stage.setHeight(bounds.getHeight());
  stage.setX(0);
  stage.setY(0);
  stage.setTitle(""String_Node_Str"");
  stage.getIcons().add(new Image(getClass().getResourceAsStream(""String_Node_Str"")));
  Stage tableStage=new Stage();
  tableStage.setScene(new Scene(tableAnchor));
  tableStage.setTitle(""String_Node_Str"");
  tableStage.initModality(Modality.WINDOW_MODAL);
  tableStage.initOwner(scene.getWindow());
  tableStage.getIcons().add(new Image(getClass().getResourceAsStream(""String_Node_Str"")));
  controller.setStage(stage);
  controller.setScene(scene);
  controller.setTableAnchor(tableAnchor);
  controller.setTableStage(tableStage);
  stage.setScene(scene);
  stage.show();
  scene.getAccelerators().put(new KeyCodeCombination(KeyCode.S,CONTROL_DOWN),controller::saveDoc);
  scene.getAccelerators().put(new KeyCodeCombination(KeyCode.N,CONTROL_DOWN),() -> {
    controller.newDoc(null);
  }
);
}","private void startApp(Stage stage) throws Throwable {
  FXMLLoader parentLoader=new FXMLLoader();
  FXMLLoader tablePopupLoader=new FXMLLoader();
  context=SpringApplication.run(SpringAppConfig.class);
  tablePopupLoader.setControllerFactory(context::getBean);
  parentLoader.setControllerFactory(context::getBean);
  AnchorPane tableAnchor=tablePopupLoader.load(getClass().getResourceAsStream(""String_Node_Str""));
  Parent root=parentLoader.load(getClass().getResourceAsStream(""String_Node_Str""));
  controller=parentLoader.getController();
  HostServicesDelegate hostServices=HostServicesFactory.getInstance(this);
  controller.setHostServices(hostServices);
  Scene scene=new Scene(root);
  scene.getStylesheets().add(""String_Node_Str"");
  Rectangle2D bounds=Screen.getPrimary().getVisualBounds();
  stage.setWidth(bounds.getWidth());
  stage.setHeight(bounds.getHeight());
  stage.setX(0);
  stage.setY(0);
  stage.setTitle(""String_Node_Str"");
  stage.getIcons().add(new Image(getClass().getResourceAsStream(""String_Node_Str"")));
  Stage tableStage=new Stage();
  tableStage.setScene(new Scene(tableAnchor));
  tableStage.setTitle(""String_Node_Str"");
  tableStage.initModality(Modality.WINDOW_MODAL);
  tableStage.initOwner(scene.getWindow());
  tableStage.getIcons().add(new Image(getClass().getResourceAsStream(""String_Node_Str"")));
  controller.setStage(stage);
  controller.setScene(scene);
  controller.setTableAnchor(tableAnchor);
  controller.setTableStage(tableStage);
  stage.setScene(scene);
  stage.show();
  scene.getAccelerators().put(new KeyCodeCombination(KeyCode.S,SHORTCUT_DOWN),controller::saveDoc);
  scene.getAccelerators().put(new KeyCodeCombination(KeyCode.N,SHORTCUT_DOWN),() -> {
    controller.newDoc(null);
  }
);
}",0.9936926605504588
62435,"private Tab createTab(){
  Tab tab=new Tab();
  tab.setOnClosed(event -> {
    this.keepClosedPath(tab);
  }
);
  MenuItem menuItem0=new MenuItem(""String_Node_Str"");
  menuItem0.setOnAction(actionEvent -> {
    this.keepClosedPath(tab);
    tabPane.getTabs().remove(tab);
  }
);
  MenuItem menuItem1=new MenuItem(""String_Node_Str"");
  menuItem1.setOnAction(actionEvent -> {
    ObservableList<Tab> tabs=tabPane.getTabs();
    if (tabs.size() > 0)     tabs.forEach(this::keepClosedPath);
    tabs.clear();
  }
);
  MenuItem menuItem2=new MenuItem(""String_Node_Str"");
  menuItem2.setOnAction(actionEvent -> {
    List<Tab> blackList=new ArrayList<>();
    blackList.addAll(tabPane.getTabs());
    blackList.remove(tab);
    tabPane.getTabs().removeAll(blackList);
    if (blackList.size() > 0)     blackList.forEach(this::keepClosedPath);
  }
);
  MenuItem menuItem3=new MenuItem(""String_Node_Str"");
  menuItem3.setOnAction(actionEvent -> {
    ObservableList<Tab> tabs=tabPane.getTabs();
    Predicate<Tab> filter=pTab -> !((Label)pTab.getGraphic()).getText().contains(""String_Node_Str"");
    List<Tab> collect=tabs.stream().filter(filter).collect(Collectors.toList());
    if (collect.size() > 0)     collect.forEach(this::keepClosedPath);
    tabs.removeAll(collect);
  }
);
  MenuItem menuItem4=new MenuItem(""String_Node_Str"");
  menuItem4.setOnAction(actionEvent -> {
    if (tabPane.getSelectionModel().isSelected(tabPane.getTabs().size() - 1))     tabPane.getSelectionModel().selectFirst();
 else     tabPane.getSelectionModel().selectNext();
  }
);
  MenuItem menuItem5=new MenuItem(""String_Node_Str"");
  menuItem5.setOnAction(actionEvent -> {
    if (tabPane.getSelectionModel().isSelected(0))     tabPane.getSelectionModel().selectLast();
 else     tabPane.getSelectionModel().selectPrevious();
  }
);
  MenuItem menuItem6=new MenuItem(""String_Node_Str"");
  menuItem6.setOnAction(actionEvent -> {
    if (closedPaths.size() > 0) {
      int index=closedPaths.size() - 1;
      closedPaths.get(index).ifPresent(this::addTab);
      closedPaths.remove(index);
    }
  }
);
  MenuItem menuItem7=new MenuItem(""String_Node_Str"");
  menuItem7.setOnAction(event -> {
    current.currentPathParent().ifPresent(path -> {
      getHostServices().showDocument(path.toUri().toString());
    }
);
  }
);
  MenuItem menuItem8=new MenuItem(""String_Node_Str"");
  menuItem8.setOnAction(this::newDoc);
  ContextMenu contextMenu=new ContextMenu();
  contextMenu.getItems().addAll(menuItem0,menuItem1,menuItem2,menuItem3,new SeparatorMenuItem(),menuItem4,menuItem5,menuItem6,new SeparatorMenuItem(),menuItem7,menuItem8);
  tab.contextMenuProperty().setValue(contextMenu);
  Label label=new Label();
  tab.setGraphic(label);
  label.setOnMouseClicked(mouseEvent -> {
    if (mouseEvent.getButton().equals(MouseButton.SECONDARY)) {
      tabPane.getSelectionModel().select(tab);
    }
 else     if (mouseEvent.getClickCount() > 1) {
      if (splitPane.getDividerPositions()[0] > 0.1)       splitPane.setDividerPositions(0,1);
 else       splitPane.setDividerPositions(0.18,0.60);
    }
  }
);
  return tab;
}","private Tab createTab(){
  Tab tab=new Tab();
  tab.setOnClosed(event -> {
    this.keepClosedPath(tab);
  }
);
  MenuItem menuItem0=new MenuItem(""String_Node_Str"");
  menuItem0.setOnAction(actionEvent -> {
    this.keepClosedPath(tab);
    tabPane.getTabs().remove(tab);
  }
);
  MenuItem menuItem1=new MenuItem(""String_Node_Str"");
  menuItem1.setOnAction(actionEvent -> {
    ObservableList<Tab> tabs=tabPane.getTabs();
    if (tabs.size() > 0)     tabs.forEach(this::keepClosedPath);
    tabs.clear();
  }
);
  MenuItem menuItem2=new MenuItem(""String_Node_Str"");
  menuItem2.setOnAction(actionEvent -> {
    List<Tab> blackList=new ArrayList<>();
    blackList.addAll(tabPane.getTabs());
    blackList.remove(tab);
    tabPane.getTabs().removeAll(blackList);
    if (blackList.size() > 0)     blackList.forEach(this::keepClosedPath);
  }
);
  MenuItem menuItem3=new MenuItem(""String_Node_Str"");
  menuItem3.setOnAction(actionEvent -> {
    ObservableList<Tab> tabs=tabPane.getTabs();
    Predicate<Tab> filter=pTab -> !((Label)pTab.getGraphic()).getText().contains(""String_Node_Str"");
    List<Tab> collect=tabs.stream().filter(filter).collect(Collectors.toList());
    if (collect.size() > 0)     collect.forEach(this::keepClosedPath);
    tabs.removeAll(collect);
  }
);
  MenuItem menuItem4=new MenuItem(""String_Node_Str"");
  menuItem4.setOnAction(actionEvent -> {
    if (tabPane.getSelectionModel().isSelected(tabPane.getTabs().size() - 1))     tabPane.getSelectionModel().selectFirst();
 else     tabPane.getSelectionModel().selectNext();
  }
);
  MenuItem menuItem5=new MenuItem(""String_Node_Str"");
  menuItem5.setOnAction(actionEvent -> {
    if (tabPane.getSelectionModel().isSelected(0))     tabPane.getSelectionModel().selectLast();
 else     tabPane.getSelectionModel().selectPrevious();
  }
);
  MenuItem menuItem6=new MenuItem(""String_Node_Str"");
  menuItem6.setOnAction(actionEvent -> {
    if (closedPaths.size() > 0) {
      int index=closedPaths.size() - 1;
      closedPaths.get(index).filter(pathResolver::isAsciidoc).ifPresent(this::addTab);
      closedPaths.get(index).filter(pathResolver::isImage).ifPresent(this::addImageTab);
      closedPaths.remove(index);
    }
  }
);
  MenuItem menuItem7=new MenuItem(""String_Node_Str"");
  menuItem7.setOnAction(event -> {
    current.currentPathParent().ifPresent(path -> {
      getHostServices().showDocument(path.toUri().toString());
    }
);
  }
);
  MenuItem menuItem8=new MenuItem(""String_Node_Str"");
  menuItem8.setOnAction(this::newDoc);
  ContextMenu contextMenu=new ContextMenu();
  contextMenu.getItems().addAll(menuItem0,menuItem1,menuItem2,menuItem3,new SeparatorMenuItem(),menuItem4,menuItem5,menuItem6,new SeparatorMenuItem(),menuItem7,menuItem8);
  tab.contextMenuProperty().setValue(contextMenu);
  Label label=new Label();
  tab.setGraphic(label);
  label.setOnMouseClicked(mouseEvent -> {
    if (mouseEvent.getButton().equals(MouseButton.SECONDARY)) {
      tabPane.getSelectionModel().select(tab);
    }
 else     if (mouseEvent.getClickCount() > 1) {
      if (splitPane.getDividerPositions()[0] > 0.1)       splitPane.setDividerPositions(0,1);
 else       splitPane.setDividerPositions(0.18,0.60);
    }
  }
);
  return tab;
}",0.9762357414448668
62436,"public void onscroll(Object pos,Object max){
  if (Objects.isNull(pos) || Objects.isNull(max))   return;
  Number position=(Number)pos;
  Number maximum=(Number)max;
  double ratio=(position.doubleValue() * 100) / maximum.doubleValue();
  Integer browserMaxScroll=(Integer)previewEngine.executeScript(""String_Node_Str"");
  double browserScrollOffset=(Double.valueOf(browserMaxScroll) * ratio) / 100.0;
  previewEngine.executeScript(String.format(""String_Node_Str"",browserScrollOffset));
}","public void onscroll(Object pos,Object max){
  if (Objects.isNull(pos) || Objects.isNull(max))   return;
  Number position=(Number)pos;
  Number maximum=(Number)max;
  double currentY=(position.doubleValue() < 0) ? 0 : position.doubleValue();
  double ratio=(currentY * 100) / maximum.doubleValue();
  Integer browserMaxScroll=(Integer)previewEngine.executeScript(""String_Node_Str"");
  double browserScrollOffset=(Double.valueOf(browserMaxScroll) * ratio) / 100.0;
  previewEngine.executeScript(String.format(""String_Node_Str"",browserScrollOffset));
}",0.9297401347449472
62437,"public void htmlOnePage(){
  if (bookNames.contains(current.getCurrentTabText())) {
    generateHtml(null);
    return;
  }
  if (!current.currentPath().isPresent())   saveDoc();
  Path currentPath=current.currentPath().orElseGet(pathSaveSupplier);
  String asciidoc=current.currentEditorValue();
  String html=renderService.convertHtmlArticle(previewEngine,IOHelper.normalize(asciidoc));
  indikatorService.startCycle();
  runTaskLater(task -> {
    String tabText=current.getCurrentTabText().replace(""String_Node_Str"",""String_Node_Str"").trim();
    Path path=currentPath.getParent().resolve(tabText.concat(""String_Node_Str""));
    IOHelper.writeToFile(path,html,CREATE,TRUNCATE_EXISTING,WRITE);
    runActionLater(run -> {
      indikatorService.hideIndikator();
      recentFiles.remove(path.toString());
      recentFiles.add(0,path.toString());
    }
);
  }
);
}","public void htmlOnePage(){
  if (bookNames.contains(current.getCurrentTabText())) {
    generateHtml(null);
    return;
  }
  if (!current.currentPath().isPresent())   saveDoc();
  Path currentPath=current.currentPath().orElseGet(pathSaveSupplier);
  String asciidoc=current.currentEditorValue();
  String html=renderService.convertHtmlArticle(previewEngine,asciidoc);
  indikatorService.startCycle();
  runTaskLater(task -> {
    String tabText=current.getCurrentTabText().replace(""String_Node_Str"",""String_Node_Str"").trim();
    Path path=currentPath.getParent().resolve(tabText.concat(""String_Node_Str""));
    IOHelper.writeToFile(path,html,CREATE,TRUNCATE_EXISTING,WRITE);
    runActionLater(run -> {
      indikatorService.hideIndikator();
      recentFiles.remove(path.toString());
      recentFiles.add(0,path.toString());
    }
);
  }
);
}",0.9789964994165694
62438,"public synchronized String appendFormula(String fileName,String formula){
  if (fileName.endsWith(""String_Node_Str"")) {
    WebEngine engine=mathjaxView.getEngine();
    engine.executeScript(String.format(""String_Node_Str"",fileName,IOHelper.normalize(formula)));
    return ""String_Node_Str"" + fileName;
  }
  return ""String_Node_Str"";
}","public String appendFormula(String fileName,String formula){
  if (fileName.endsWith(""String_Node_Str"")) {
    WebEngine engine=mathjaxView.getEngine();
    engine.executeScript(String.format(""String_Node_Str"",fileName,IOHelper.normalize(formula)));
    return ""String_Node_Str"" + fileName;
  }
  return ""String_Node_Str"";
}",0.9803328290468988
62439,"public synchronized void svgToPng(String fileName,String svg,String formula){
  if (!fileName.endsWith(""String_Node_Str"") || !svg.startsWith(""String_Node_Str""))   return;
  Integer cacheHit=current.getCache().get(fileName);
  int hashCode=fileName.concat(formula).hashCode();
  if (Objects.nonNull(cacheHit))   if (hashCode == cacheHit)   return;
  current.getCache().put(fileName,hashCode);
  runSingleTaskLater(task -> {
    try {
      StringReader reader=new StringReader(svg);
      String uri=""String_Node_Str"";
      String parser=XMLResourceDescriptor.getXMLParserClassName();
      SAXSVGDocumentFactory f=new SAXSVGDocumentFactory(parser);
      SVGDocument doc=f.createSVGDocument(uri,reader);
      TranscoderInput transcoderInput=new TranscoderInput(doc);
      ByteArrayOutputStream ostream=new ByteArrayOutputStream();
      TranscoderOutput transcoderOutput=new TranscoderOutput(ostream);
      PNGTranscoder transcoder=new PNGTranscoder();
      transcoder.transcode(transcoderInput,transcoderOutput);
      ostream.flush();
      ostream.close();
      if (!current.currentPath().isPresent())       saveDoc();
      Path path=current.currentPathParent().get();
      Files.createDirectories(path.resolve(""String_Node_Str""));
      Files.write(path.resolve(""String_Node_Str"").resolve(fileName),ostream.toByteArray(),CREATE,WRITE,TRUNCATE_EXISTING);
      lastRenderedChangeListener.changed(null,lastRendered.getValue(),lastRendered.getValue());
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
);
}","public void svgToPng(String fileName,String svg,String formula) throws IOException, TranscoderException {
  if (!fileName.endsWith(""String_Node_Str"") || !svg.startsWith(""String_Node_Str""))   return;
  Integer cacheHit=current.getCache().get(fileName);
  int hashCode=fileName.concat(formula).hashCode();
  if (Objects.nonNull(cacheHit))   if (hashCode == cacheHit)   return;
  current.getCache().put(fileName,hashCode);
  StringReader reader=new StringReader(svg);
  String uri=""String_Node_Str"";
  String parser=XMLResourceDescriptor.getXMLParserClassName();
  SAXSVGDocumentFactory f=new SAXSVGDocumentFactory(parser);
  SVGDocument doc=f.createSVGDocument(uri,reader);
  try (ByteArrayOutputStream ostream=new ByteArrayOutputStream()){
    TranscoderInput transcoderInput=new TranscoderInput(doc);
    TranscoderOutput transcoderOutput=new TranscoderOutput(ostream);
    PNGTranscoder transcoder=new PNGTranscoder();
    transcoder.transcode(transcoderInput,transcoderOutput);
    if (!current.currentPath().isPresent())     saveDoc();
    Path path=current.currentPathParent().get();
    Files.createDirectories(path.resolve(""String_Node_Str""));
    Files.write(path.resolve(""String_Node_Str"").resolve(fileName),ostream.toByteArray(),CREATE,WRITE,TRUNCATE_EXISTING);
    lastRenderedChangeListener.changed(null,lastRendered.getValue(),lastRendered.getValue());
  }
 }",0.8661850705194358
62440,"private WebView createWebView(){
  WebView webView=new WebView();
  WebEngine webEngine=webView.getEngine();
  webEngine.getLoadWorker().stateProperty().addListener((observable,oldValue,newValue) -> {
    if (newValue == Worker.State.SUCCEEDED) {
      JSObject window=(JSObject)webEngine.executeScript(""String_Node_Str"");
      if (Objects.isNull(window.getMember(""String_Node_Str"")))       ;
      window.setMember(""String_Node_Str"",this);
    }
  }
);
  webEngine.load(String.format(""String_Node_Str"",tomcatPort));
  return webView;
}","private WebView createWebView(){
  WebView webView=new WebView();
  WebEngine webEngine=webView.getEngine();
  webEngine.getLoadWorker().stateProperty().addListener((observable,oldValue,newValue) -> {
    JSObject window=(JSObject)webEngine.executeScript(""String_Node_Str"");
    if (Objects.isNull(window.getMember(""String_Node_Str"")))     ;
    window.setMember(""String_Node_Str"",this);
  }
);
  webEngine.load(String.format(""String_Node_Str"",tomcatPort));
  return webView;
}",0.6923076923076923
62441,"@Override public void initialize(URL url,ResourceBundle rb){
  try {
    CodeSource codeSource=AsciiDocController.class.getProtectionDomain().getCodeSource();
    File jarFile=new File(codeSource.getLocation().toURI().getPath());
    configPath=jarFile.toPath().getParent().getParent().resolve(""String_Node_Str"");
  }
 catch (  URISyntaxException e) {
    e.printStackTrace();
  }
  loadConfigurations();
  loadRecentFileList();
  recentListView.setItems(recentFiles);
  recentFiles.addListener((ListChangeListener<String>)c -> {
    recentListView.visibleProperty().setValue(c.getList().size() > 0);
    recentListView.getSelectionModel().selectFirst();
  }
);
  recentListView.setOnMouseClicked(event -> {
    if (event.getClickCount() > 1) {
      openRecentListFile(event);
    }
  }
);
  tomcatPort=server.getEmbeddedServletContainer().getPort();
  lastRendered.addListener(lastRenderedChangeListener);
  mathjaxView=new WebView();
  mathjaxView.setVisible(false);
  rootAnchor.getChildren().add(mathjaxView);
  WebEngine mathjaxEngine=mathjaxView.getEngine();
  mathjaxEngine.getLoadWorker().stateProperty().addListener((observableValue1,state,state2) -> {
    if (state2 == Worker.State.SUCCEEDED) {
      JSObject window=(JSObject)mathjaxEngine.executeScript(""String_Node_Str"");
      if (Objects.isNull(window.getMember(""String_Node_Str"")))       ;
      window.setMember(""String_Node_Str"",this);
    }
  }
);
  mathjaxView.getEngine().load(String.format(""String_Node_Str"",tomcatPort));
  previewEngine=previewView.getEngine();
  previewEngine.load(String.format(""String_Node_Str"",tomcatPort));
  previewEngine.getLoadWorker().stateProperty().addListener((observableValue1,state,state2) -> {
    if (state2 == Worker.State.SUCCEEDED) {
      JSObject window=(JSObject)previewEngine.executeScript(""String_Node_Str"");
      if (Objects.isNull(window.getMember(""String_Node_Str"")))       ;
      window.setMember(""String_Node_Str"",this);
    }
  }
);
  previewEngine.getLoadWorker().exceptionProperty().addListener((ov,t,t1) -> {
    t1.printStackTrace();
  }
);
  workingDirectory=Optional.ofNullable(config.getWorkingDirectory());
  String workDir=workingDirectory.orElse(System.getProperty(""String_Node_Str""));
  fileBrowser.browse(treeView,this,workDir);
  AwesomeDude.setIcon(WorkingDirButton,AwesomeIcon.FOLDER_ALT,""String_Node_Str"");
  AwesomeDude.setIcon(splitHideButton,AwesomeIcon.CHEVRON_LEFT,""String_Node_Str"");
  tabPane.getTabs().addListener((ListChangeListener<Tab>)c -> {
    if (tabPane.getTabs().isEmpty())     runActionLater(this::newDoc);
  }
);
  openFileTreeItem.setOnAction(event -> {
    Path path=getSelectedTabPath();
    if (!Files.isDirectory(path))     this.addTab(path);
  }
);
  openFileListItem.setOnAction(this::openRecentListFile);
  copyPathTreeItem.setOnAction(event -> {
    Path path=getSelectedTabPath();
    this.cutCopy(path.toString());
  }
);
  copyPathListItem.setOnAction(event -> {
    this.cutCopy(recentListView.getSelectionModel().getSelectedItem());
  }
);
  copyTreeItem.setOnAction(event -> {
    Path path=getSelectedTabPath();
    this.copyFile(path);
  }
);
  copyListItem.setOnAction(event -> {
    Path path=Paths.get(recentListView.getSelectionModel().getSelectedItem());
    this.copyFile(path);
  }
);
  treeView.setOnMouseClicked(event -> {
    TreeItem<Item> selectedItem=treeView.getSelectionModel().getSelectedItem();
    if (Objects.isNull(selectedItem))     return;
    Path selectedPath=selectedItem.getValue().getPath();
    if (event.getButton() == MouseButton.PRIMARY)     if (Files.isDirectory(selectedPath)) {
      try {
        if (selectedItem.getChildren().size() == 0)         Files.newDirectoryStream(selectedPath).forEach(path -> {
          if (pathResolver.isHidden(path))           return;
          if (Files.isDirectory(path) || pathResolver.isAsciidoc(path))           selectedItem.getChildren().add(new TreeItem<>(new Item(path)));
        }
);
        selectedItem.setExpanded(!selectedItem.isExpanded());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
 else     if (event.getClickCount() > 1) {
      this.addTab(selectedPath);
    }
  }
);
  runActionLater(this::newDoc);
}","@Override public void initialize(URL url,ResourceBundle rb){
  try {
    CodeSource codeSource=AsciiDocController.class.getProtectionDomain().getCodeSource();
    File jarFile=new File(codeSource.getLocation().toURI().getPath());
    configPath=jarFile.toPath().getParent().getParent().resolve(""String_Node_Str"");
  }
 catch (  URISyntaxException e) {
    e.printStackTrace();
  }
  loadConfigurations();
  loadRecentFileList();
  recentListView.setItems(recentFiles);
  recentFiles.addListener((ListChangeListener<String>)c -> {
    recentListView.visibleProperty().setValue(c.getList().size() > 0);
    recentListView.getSelectionModel().selectFirst();
  }
);
  recentListView.setOnMouseClicked(event -> {
    if (event.getClickCount() > 1) {
      openRecentListFile(event);
    }
  }
);
  tomcatPort=server.getEmbeddedServletContainer().getPort();
  lastRendered.addListener(lastRenderedChangeListener);
  mathjaxView=new WebView();
  mathjaxView.setVisible(false);
  rootAnchor.getChildren().add(mathjaxView);
  WebEngine mathjaxEngine=mathjaxView.getEngine();
  mathjaxEngine.getLoadWorker().stateProperty().addListener((observableValue1,state,state2) -> {
    JSObject window=(JSObject)mathjaxEngine.executeScript(""String_Node_Str"");
    if (Objects.isNull(window.getMember(""String_Node_Str"")))     ;
    window.setMember(""String_Node_Str"",this);
  }
);
  mathjaxView.getEngine().load(String.format(""String_Node_Str"",tomcatPort));
  previewEngine=previewView.getEngine();
  previewEngine.load(String.format(""String_Node_Str"",tomcatPort));
  previewEngine.getLoadWorker().stateProperty().addListener((observableValue1,state,state2) -> {
    JSObject window=(JSObject)previewEngine.executeScript(""String_Node_Str"");
    if (Objects.isNull(window.getMember(""String_Node_Str"")))     ;
    window.setMember(""String_Node_Str"",this);
  }
);
  previewEngine.getLoadWorker().exceptionProperty().addListener((ov,t,t1) -> {
    t1.printStackTrace();
  }
);
  workingDirectory=Optional.ofNullable(config.getWorkingDirectory());
  String workDir=workingDirectory.orElse(System.getProperty(""String_Node_Str""));
  fileBrowser.browse(treeView,this,workDir);
  AwesomeDude.setIcon(WorkingDirButton,AwesomeIcon.FOLDER_ALT,""String_Node_Str"");
  AwesomeDude.setIcon(splitHideButton,AwesomeIcon.CHEVRON_LEFT,""String_Node_Str"");
  tabPane.getTabs().addListener((ListChangeListener<Tab>)c -> {
    if (tabPane.getTabs().isEmpty())     runActionLater(this::newDoc);
  }
);
  openFileTreeItem.setOnAction(event -> {
    Path path=getSelectedTabPath();
    if (!Files.isDirectory(path))     this.addTab(path);
  }
);
  openFileListItem.setOnAction(this::openRecentListFile);
  copyPathTreeItem.setOnAction(event -> {
    Path path=getSelectedTabPath();
    this.cutCopy(path.toString());
  }
);
  copyPathListItem.setOnAction(event -> {
    this.cutCopy(recentListView.getSelectionModel().getSelectedItem());
  }
);
  copyTreeItem.setOnAction(event -> {
    Path path=getSelectedTabPath();
    this.copyFile(path);
  }
);
  copyListItem.setOnAction(event -> {
    Path path=Paths.get(recentListView.getSelectionModel().getSelectedItem());
    this.copyFile(path);
  }
);
  treeView.setOnMouseClicked(event -> {
    TreeItem<Item> selectedItem=treeView.getSelectionModel().getSelectedItem();
    if (Objects.isNull(selectedItem))     return;
    Path selectedPath=selectedItem.getValue().getPath();
    if (event.getButton() == MouseButton.PRIMARY)     if (Files.isDirectory(selectedPath)) {
      try {
        if (selectedItem.getChildren().size() == 0)         Files.newDirectoryStream(selectedPath).forEach(path -> {
          if (pathResolver.isHidden(path))           return;
          if (Files.isDirectory(path) || pathResolver.isAsciidoc(path))           selectedItem.getChildren().add(new TreeItem<>(new Item(path)));
        }
);
        selectedItem.setExpanded(!selectedItem.isExpanded());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
 else     if (event.getClickCount() > 1) {
      this.addTab(selectedPath);
    }
  }
);
  runActionLater(this::newDoc);
}",0.9850422195416164
62442,"public void generateDocbook(WebEngine webEngine,Path currentPath,boolean showIndicator){
  try {
    Path bookAsc=bookPathResolver.resolve(currentPath);
    if (Objects.isNull(bookAsc)) {
      IOHelper.writeToFile(currentPath.resolve(""String_Node_Str""),""String_Node_Str"",CREATE,TRUNCATE_EXISTING);
      return;
    }
    if (showIndicator)     indikatorService.startCycle();
    List<String> bookAscLines=Files.readAllLines(bookAsc);
    StringBuffer allAscChapters=new StringBuffer();
    for (int i=0; i < bookAscLines.size(); i++) {
      String bookAscLine=bookAscLines.get(i);
      Matcher matcher=compiledRegex.matcher(bookAscLine);
      if (matcher.find()) {
        String chapterPath=matcher.group();
        String chapterContent=IOHelper.readFile(currentPath.resolve(chapterPath));
        allAscChapters.append(chapterContent);
        allAscChapters.append(""String_Node_Str"");
        bookAscLines.remove(i);
      }
    }
    StringBuffer allAscContent=new StringBuffer();
    bookAscLines.forEach(content -> {
      allAscContent.append(content);
      allAscContent.append(""String_Node_Str"");
    }
);
    String docBookHeaderContent=docConverter.asciidocToDocbook(webEngine,allAscContent.toString(),true);
    String docBookChapterContent=docConverter.asciidocToDocbook(webEngine,allAscChapters.toString(),true);
    StringReader bookReader=new StringReader(docBookHeaderContent);
    Match rootDocument=$(new InputSource(bookReader));
    bookReader.close();
    bookReader=new StringReader(docBookChapterContent);
    Match chapterDocument=$(new InputSource(bookReader));
    bookReader.close();
    rootDocument.append(chapterDocument.find(""String_Node_Str""));
    rootDocument.find(""String_Node_Str"").parents(""String_Node_Str"").each((context) -> {
      $(context).rename(""String_Node_Str"");
    }
);
    rootDocument.find(""String_Node_Str"").find(""String_Node_Str"").attr(""String_Node_Str"",""String_Node_Str"");
    StringBuilder builder=new StringBuilder();
    builder.append(""String_Node_Str"");
    builder.append(""String_Node_Str"");
    builder.append(""String_Node_Str"");
    builder.append(""String_Node_Str"");
    builder.append(""String_Node_Str"");
    builder.append(""String_Node_Str"");
    builder.append(rootDocument.content());
    IOHelper.writeToFile(currentPath.resolve(""String_Node_Str""),builder.toString(),CREATE,TRUNCATE_EXISTING);
    if (showIndicator) {
      indikatorService.completeCycle();
      asciiDocController.setLastConvertedFile(Optional.of(currentPath.resolve(""String_Node_Str"")));
    }
  }
 catch (  Exception ex) {
    logger.error(ex.getMessage(),ex);
  }
 finally {
    indikatorService.hideIndikator();
  }
}","public void generateDocbook(WebEngine webEngine,Path currentPath,boolean showIndicator){
  try {
    Path bookAsc=bookPathResolver.resolve(currentPath);
    if (Objects.isNull(bookAsc)) {
      IOHelper.writeToFile(currentPath.resolve(""String_Node_Str""),""String_Node_Str"",CREATE,TRUNCATE_EXISTING);
      return;
    }
    if (showIndicator)     indikatorService.startCycle();
    List<String> bookAscLines=Files.readAllLines(bookAsc);
    StringBuffer allAscChapters=new StringBuffer();
    for (int i=0; i < bookAscLines.size(); i++) {
      String bookAscLine=bookAscLines.get(i);
      Matcher matcher=compiledRegex.matcher(bookAscLine);
      if (matcher.find()) {
        String chapterPath=matcher.group();
        String chapterContent=IOHelper.readFile(currentPath.resolve(chapterPath));
        allAscChapters.append(chapterContent);
        allAscChapters.append(""String_Node_Str"");
        bookAscLines.remove(i);
      }
    }
    StringBuffer allAscContent=new StringBuffer();
    bookAscLines.forEach(content -> {
      allAscContent.append(content);
      allAscContent.append(""String_Node_Str"");
    }
);
    String docBookHeaderContent=docConverter.asciidocToDocbook(webEngine,allAscContent.toString(),true);
    String docBookChapterContent=docConverter.asciidocToDocbook(webEngine,allAscChapters.toString(),true);
    StringReader bookReader=new StringReader(docBookHeaderContent);
    Match rootDocument=$(new InputSource(bookReader));
    bookReader.close();
    bookReader=new StringReader(docBookChapterContent);
    Match chapterDocument=$(new InputSource(bookReader));
    bookReader.close();
    rootDocument.append(chapterDocument.find(""String_Node_Str""));
    rootDocument.find(""String_Node_Str"").parents(""String_Node_Str"").each((context) -> {
      $(context).rename(""String_Node_Str"");
    }
);
    rootDocument.find(""String_Node_Str"").find(""String_Node_Str"").attr(""String_Node_Str"",""String_Node_Str"");
    rootDocument.find(""String_Node_Str"").forEach(elem -> {
      String arearefs=$(elem).attr(""String_Node_Str"");
      String[] cos=arearefs.split(""String_Node_Str"");
      if (cos.length > 1)       $(elem).attr(""String_Node_Str"",cos[cos.length - 1]);
    }
);
    StringBuilder builder=new StringBuilder();
    builder.append(""String_Node_Str"");
    builder.append(""String_Node_Str"");
    builder.append(""String_Node_Str"");
    builder.append(""String_Node_Str"");
    builder.append(""String_Node_Str"");
    builder.append(""String_Node_Str"");
    builder.append(rootDocument.content());
    IOHelper.writeToFile(currentPath.resolve(""String_Node_Str""),builder.toString(),CREATE,TRUNCATE_EXISTING);
    if (showIndicator) {
      indikatorService.completeCycle();
      asciiDocController.setLastConvertedFile(Optional.of(currentPath.resolve(""String_Node_Str"")));
    }
  }
 catch (  Exception ex) {
    logger.error(ex.getMessage(),ex);
  }
 finally {
    indikatorService.hideIndikator();
  }
}",0.9531641043975688
62443,"@FXML private void generatePdf(ActionEvent event) throws IOException, SAXException {
  Path currentPath=initialDirectory.map(path -> Files.isDirectory(path) ? path : path.getParent()).get();
  docBookController.generateDocbook(previewEngine,currentPath,false);
  Task<Boolean> task=new Task<Boolean>(){
    @Override protected Boolean call() throws Exception {
      fopServiceRunner.generate(currentPath,userHome);
      return null;
    }
  }
;
  new Thread(task).start();
}","@FXML private void generatePdf(ActionEvent event) throws IOException, SAXException {
  Path currentPath=initialDirectory.map(path -> Files.isDirectory(path) ? path : path.getParent()).get();
  docBookController.generateDocbook(previewEngine,currentPath,false);
  Task<Void> task=new Task<Void>(){
    @Override protected Void call() throws Exception {
      fopServiceRunner.generate(currentPath,userHome);
      return null;
    }
  }
;
  new Thread(task).start();
}",0.9650053022269351
62444,"@Override protected Boolean call() throws Exception {
  fopServiceRunner.generate(currentPath,userHome);
  return null;
}","@Override protected Void call() throws Exception {
  fopServiceRunner.generate(currentPath,userHome);
  return null;
}",0.9623430962343096
62445,"public static String normalize(String content){
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  return content;
}","public static String normalize(String content){
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  return content;
}",0.9236276849642004
62446,"public String asciidocToDocbook(WebEngine webEngine,String text,boolean includeHeader){
  if (includeHeader)   webEngine.executeScript(""String_Node_Str"");
 else   webEngine.executeScript(""String_Node_Str"");
  webEngine.executeScript(""String_Node_Str"");
  String rendered=(String)webEngine.executeScript(""String_Node_Str"" + IOHelper.normalize(text) + ""String_Node_Str"");
  return rendered;
}","public String asciidocToDocbook(WebEngine webEngine,String text,boolean includeHeader){
  if (includeHeader)   webEngine.executeScript(""String_Node_Str"");
 else   webEngine.executeScript(""String_Node_Str"");
  webEngine.executeScript(""String_Node_Str"");
  String rendered=(String)webEngine.executeScript(String.format(""String_Node_Str"",IOHelper.normalize(text)));
  return rendered;
}",0.9495472186287192
62447,"@Override public void run(){
  if (result.isError()) {
    Log.e(TAG,""String_Node_Str"",result.getThrowable());
    if (data.errorResId == Dali.NO_RESID) {
      imageView.setImageResource(data.errorResId);
    }
  }
 else {
    if (data.alphaFadeIn) {
      Drawable placeholder;
      if (imageView.getDrawable() != null) {
        placeholder=imageView.getDrawable();
      }
 else {
        placeholder=new ColorDrawable(Color.parseColor(""String_Node_Str""));
      }
      final TransitionDrawable transition=new TransitionDrawable(new Drawable[]{placeholder,new BitmapDrawable(data.contextWrapper.getResources(),result.getBitmap())});
      imageView.setImageDrawable(transition);
      transition.startTransition(FADE_IN_MS);
    }
 else {
      imageView.setImageDrawable(new BitmapDrawable(data.contextWrapper.getResources(),result.getBitmap()));
    }
  }
}","@Override public void run(){
  if (result.isError()) {
    Log.e(TAG,""String_Node_Str"",result.getThrowable());
    if (data.errorResId == Dali.NO_RESID) {
      imageView.setImageResource(data.errorResId);
    }
  }
 else {
    if (data.alphaFadeIn) {
      Drawable placeholder;
      Drawable oldDrawable=imageView.getDrawable();
      if (oldDrawable != null) {
        if (oldDrawable instanceof LayerDrawable) {
          LayerDrawable oldLayerDrawable=(LayerDrawable)oldDrawable;
          placeholder=oldLayerDrawable.getDrawable(0);
        }
 else {
          placeholder=imageView.getDrawable();
        }
      }
 else {
        placeholder=new ColorDrawable(Color.parseColor(""String_Node_Str""));
      }
      final TransitionDrawable transition=new TransitionDrawable(new Drawable[]{placeholder,new BitmapDrawable(data.contextWrapper.getResources(),result.getBitmap())});
      imageView.setImageDrawable(transition);
      transition.startTransition(FADE_IN_MS);
    }
 else {
      imageView.setImageDrawable(new BitmapDrawable(data.contextWrapper.getResources(),result.getBitmap()));
    }
  }
}",0.8491902834008097
62448,"public JobDescription into(final ImageView imageView){
  if (data.placeholder != Dali.NO_RESID) {
    imageView.setImageResource(data.placeholder);
  }
  return start(new BlurWorker.BlurWorkerListener(){
    @Override public void onResult(    final BlurWorker.Result result){
      uiThreadHandler.post(new Runnable(){
        @Override public void run(){
          if (result.isError()) {
            Log.e(TAG,""String_Node_Str"",result.getThrowable());
            if (data.errorResId == Dali.NO_RESID) {
              imageView.setImageResource(data.errorResId);
            }
          }
 else {
            if (data.alphaFadeIn) {
              Drawable placeholder;
              if (imageView.getDrawable() != null) {
                placeholder=imageView.getDrawable();
              }
 else {
                placeholder=new ColorDrawable(Color.parseColor(""String_Node_Str""));
              }
              final TransitionDrawable transition=new TransitionDrawable(new Drawable[]{placeholder,new BitmapDrawable(data.contextWrapper.getResources(),result.getBitmap())});
              imageView.setImageDrawable(transition);
              transition.startTransition(FADE_IN_MS);
            }
 else {
              imageView.setImageDrawable(new BitmapDrawable(data.contextWrapper.getResources(),result.getBitmap()));
            }
          }
        }
      }
);
    }
  }
);
}","public JobDescription into(final ImageView imageView){
  if (data.placeholder != Dali.NO_RESID) {
    imageView.setImageResource(data.placeholder);
  }
  return start(new BlurWorker.BlurWorkerListener(){
    @Override public void onResult(    final BlurWorker.Result result){
      uiThreadHandler.post(new Runnable(){
        @Override public void run(){
          if (result.isError()) {
            Log.e(TAG,""String_Node_Str"",result.getThrowable());
            if (data.errorResId == Dali.NO_RESID) {
              imageView.setImageResource(data.errorResId);
            }
          }
 else {
            if (data.alphaFadeIn) {
              Drawable placeholder;
              Drawable oldDrawable=imageView.getDrawable();
              if (oldDrawable != null) {
                if (oldDrawable instanceof LayerDrawable) {
                  LayerDrawable oldLayerDrawable=(LayerDrawable)oldDrawable;
                  placeholder=oldLayerDrawable.getDrawable(0);
                }
 else {
                  placeholder=imageView.getDrawable();
                }
              }
 else {
                placeholder=new ColorDrawable(Color.parseColor(""String_Node_Str""));
              }
              final TransitionDrawable transition=new TransitionDrawable(new Drawable[]{placeholder,new BitmapDrawable(data.contextWrapper.getResources(),result.getBitmap())});
              imageView.setImageDrawable(transition);
              transition.startTransition(FADE_IN_MS);
            }
 else {
              imageView.setImageDrawable(new BitmapDrawable(data.contextWrapper.getResources(),result.getBitmap()));
            }
          }
        }
      }
);
    }
  }
);
}",0.8891063274624919
62449,"@Override public void onResult(final BlurWorker.Result result){
  uiThreadHandler.post(new Runnable(){
    @Override public void run(){
      if (result.isError()) {
        Log.e(TAG,""String_Node_Str"",result.getThrowable());
        if (data.errorResId == Dali.NO_RESID) {
          imageView.setImageResource(data.errorResId);
        }
      }
 else {
        if (data.alphaFadeIn) {
          Drawable placeholder;
          if (imageView.getDrawable() != null) {
            placeholder=imageView.getDrawable();
          }
 else {
            placeholder=new ColorDrawable(Color.parseColor(""String_Node_Str""));
          }
          final TransitionDrawable transition=new TransitionDrawable(new Drawable[]{placeholder,new BitmapDrawable(data.contextWrapper.getResources(),result.getBitmap())});
          imageView.setImageDrawable(transition);
          transition.startTransition(FADE_IN_MS);
        }
 else {
          imageView.setImageDrawable(new BitmapDrawable(data.contextWrapper.getResources(),result.getBitmap()));
        }
      }
    }
  }
);
}","@Override public void onResult(final BlurWorker.Result result){
  uiThreadHandler.post(new Runnable(){
    @Override public void run(){
      if (result.isError()) {
        Log.e(TAG,""String_Node_Str"",result.getThrowable());
        if (data.errorResId == Dali.NO_RESID) {
          imageView.setImageResource(data.errorResId);
        }
      }
 else {
        if (data.alphaFadeIn) {
          Drawable placeholder;
          Drawable oldDrawable=imageView.getDrawable();
          if (oldDrawable != null) {
            if (oldDrawable instanceof LayerDrawable) {
              LayerDrawable oldLayerDrawable=(LayerDrawable)oldDrawable;
              placeholder=oldLayerDrawable.getDrawable(0);
            }
 else {
              placeholder=imageView.getDrawable();
            }
          }
 else {
            placeholder=new ColorDrawable(Color.parseColor(""String_Node_Str""));
          }
          final TransitionDrawable transition=new TransitionDrawable(new Drawable[]{placeholder,new BitmapDrawable(data.contextWrapper.getResources(),result.getBitmap())});
          imageView.setImageDrawable(transition);
          transition.startTransition(FADE_IN_MS);
        }
 else {
          imageView.setImageDrawable(new BitmapDrawable(data.contextWrapper.getResources(),result.getBitmap()));
        }
      }
    }
  }
);
}",0.8658333333333333
62450,"/** 
 * Constructor.
 * @param thing           the thing the coordinator should be created for
 * @param audioHTTPServer server for hosting audio streams
 * @param callbackUrl     url to be used to tell the Chromecast which host to call for audio urls
 */
public ChromecastHandler(final Thing thing,AudioHTTPServer audioHTTPServer,String callbackUrl){
  super(thing);
  this.audioHTTPServer=audioHTTPServer;
  this.callbackUrl=callbackUrl;
}","/** 
 * Constructor.
 * @param thing the thing the coordinator should be created for
 * @param audioHTTPServer server for hosting audio streams
 * @param callbackUrl url to be used to tell the Chromecast which host to call for audio urls
 */
public ChromecastHandler(final Thing thing,AudioHTTPServer audioHTTPServer,String callbackUrl){
  super(thing);
  this.audioHTTPServer=audioHTTPServer;
  this.callbackUrl=callbackUrl;
}",0.9838709677419356
62451,"public void handleCommand(final ChannelUID channelUID,final Command command){
  if (chromeCast == null) {
    return;
  }
  if (command instanceof RefreshType) {
    handleRefresh();
    return;
  }
switch (channelUID.getId()) {
case CHANNEL_CONTROL:
    handleControl(command);
  break;
case CHANNEL_VOLUME:
handleVolume(command);
break;
case CHANNEL_MUTE:
handleMute(command);
break;
case CHANNEL_PLAY_URI:
handlePlayUri(command);
break;
default :
logger.debug(""String_Node_Str"",command,channelUID);
break;
}
}","public void handleCommand(final ChannelUID channelUID,final Command command){
  if (chromeCast == null) {
    return;
  }
  if (command instanceof RefreshType) {
    scheduler.scheduleRefresh();
    return;
  }
switch (channelUID.getId()) {
case CHANNEL_CONTROL:
    handleControl(command);
  break;
case CHANNEL_VOLUME:
handleVolume(command);
break;
case CHANNEL_MUTE:
handleMute(command);
break;
case CHANNEL_PLAY_URI:
handlePlayUri(command);
break;
default :
logger.debug(""String_Node_Str"",command,channelUID);
break;
}
}",0.9806949806949808
62452,"public void cancelRefresh(){
  logger.debug(""String_Node_Str"");
  if (refreshFuture != null) {
    refreshFuture.cancel(true);
  }
}","public synchronized void cancelRefresh(){
  logger.debug(""String_Node_Str"");
  if (refreshFuture != null) {
    refreshFuture.cancel(true);
  }
}",0.9530685920577616
62453,"private void cancelConnect(){
  logger.debug(""String_Node_Str"");
  if (connectFuture != null) {
    connectFuture.cancel(true);
    connectFuture=null;
  }
}","private synchronized void cancelConnect(){
  logger.debug(""String_Node_Str"");
  if (connectFuture != null) {
    connectFuture.cancel(true);
    connectFuture=null;
  }
}",0.9602446483180428
62454,"public void destroy(){
  cancelConnect();
  cancelRefresh();
}","public synchronized void destroy(){
  cancelConnect();
  cancelRefresh();
}",0.9051094890510948
62455,"public void scheduleRefresh(){
  cancelRefresh();
  logger.debug(""String_Node_Str"",refreshRate);
  refreshFuture=scheduler.scheduleAtFixedRate(refreshRunnable,0,refreshRate,SECONDS);
}","public synchronized void scheduleRefresh(){
  cancelRefresh();
  logger.debug(""String_Node_Str"",refreshRate);
  refreshFuture=scheduler.scheduleWithFixedDelay(refreshRunnable,1,refreshRate,SECONDS);
}",0.921875
62456,"public void scheduleConnect(){
  logger.debug(""String_Node_Str"");
  cancelConnect();
  connectFuture=scheduler.schedule(connectRunnable,connectDelay,SECONDS);
}","public synchronized void scheduleConnect(){
  logger.debug(""String_Node_Str"");
  cancelConnect();
  connectFuture=scheduler.schedule(connectRunnable,connectDelay,SECONDS);
}",0.960960960960961
62457,"@Before public void Before(){
  cubeCommand=new S_ConfigCommand(rfTestAddress,testRoom,ConfigCommandType.SetRoom);
}","@Before public void Before(){
  cubeCommand=new S_ConfigCommand(RF_TEST_ADDRESS,TEST_ROOM,ConfigCommandType.SetRoom);
}",0.8340425531914893
62458,"@Test public void removeRoomTest(){
  cubeCommand=new S_ConfigCommand(rfTestAddress,1,ConfigCommandType.RemoveRoom);
  String commandString=cubeCommand.getCommandString();
  assertEquals(""String_Node_Str"",commandString);
}","@Test public void removeRoomTest(){
  cubeCommand=new S_ConfigCommand(RF_TEST_ADDRESS,1,ConfigCommandType.RemoveRoom);
  String commandString=cubeCommand.getCommandString();
  assertEquals(""String_Node_Str"",commandString);
}",0.9417040358744396
62459,"@Test public void setRoomTest(){
  cubeCommand=new S_ConfigCommand(rfTestAddress,testRoom,ConfigCommandType.SetRoom);
  String commandString=cubeCommand.getCommandString();
  assertEquals(""String_Node_Str"",commandString);
}","@Test public void setRoomTest(){
  cubeCommand=new S_ConfigCommand(RF_TEST_ADDRESS,TEST_ROOM,ConfigCommandType.SetRoom);
  String commandString=cubeCommand.getCommandString();
  assertEquals(""String_Node_Str"",commandString);
}",0.9042316258351892
62460,"@Before public void Before(){
  message=new C_Message(rawData);
}","@Before public void Before(){
  message=new C_Message(RAW_DATA);
}",0.900763358778626
62461,"@Before public void Before(){
  c_message=new C_Message(rawData);
  configuration=DeviceConfiguration.create(c_message);
}","@Before public void Before(){
  c_message=new C_Message(RAW_DATA);
  configuration=DeviceConfiguration.create(c_message);
}",0.946938775510204
62462,"@Before public void Before(){
  message=new F_Message(rawData);
}","@Before public void Before(){
  message=new F_Message(RAW_DATA);
}",0.900763358778626
62463,"@Before public void Before(){
  message=new H_Message(rawData);
}","@Before public void Before(){
  message=new H_Message(RAW_DATA);
}",0.900763358778626
62464,"@Before public void Before(){
  message=new M_Message(rawData);
}","@Before public void Before(){
  message=new M_Message(RAW_DATA);
}",0.900763358778626
62465,"@Test public void deviceInformationTypeTest1(){
  ArrayList<DeviceInformation> allDevicesInformation=message.devices;
  DeviceInformation deviceInformation=allDevicesInformation.get(1);
  assertEquals(DeviceType.HeatingThermostat,deviceInformation.getDeviceType());
}","@Test public void deviceInformationTypeTest1(){
  List<DeviceInformation> allDevicesInformation=message.devices;
  DeviceInformation deviceInformation=allDevicesInformation.get(1);
  assertEquals(DeviceType.HeatingThermostat,deviceInformation.getDeviceType());
}",0.9905482041587902
62466,"@Test public void deviceInformationTest(){
  ArrayList<DeviceInformation> allDevicesInformation=message.devices;
  assertEquals(8,allDevicesInformation.size());
  DeviceInformation deviceInformation=allDevicesInformation.get(0);
  assertEquals(""String_Node_Str"",deviceInformation.getName());
  assertEquals(""String_Node_Str"",deviceInformation.getRFAddress());
  assertEquals(1,deviceInformation.getRoomId());
  assertEquals(""String_Node_Str"",deviceInformation.getSerialNumber());
  assertEquals(DeviceType.HeatingThermostatPlus,deviceInformation.getDeviceType());
}","@Test public void deviceInformationTest(){
  List<DeviceInformation> allDevicesInformation=message.devices;
  assertEquals(8,allDevicesInformation.size());
  DeviceInformation deviceInformation=allDevicesInformation.get(0);
  assertEquals(""String_Node_Str"",deviceInformation.getName());
  assertEquals(""String_Node_Str"",deviceInformation.getRFAddress());
  assertEquals(1,deviceInformation.getRoomId());
  assertEquals(""String_Node_Str"",deviceInformation.getSerialNumber());
  assertEquals(DeviceType.HeatingThermostatPlus,deviceInformation.getDeviceType());
}",0.9955555555555556
62467,"@Test public void deviceInformationTypeTest3(){
  ArrayList<DeviceInformation> allDevicesInformation=message.devices;
  DeviceInformation deviceInformation=allDevicesInformation.get(4);
  assertEquals(DeviceType.EcoSwitch,deviceInformation.getDeviceType());
}","@Test public void deviceInformationTypeTest3(){
  List<DeviceInformation> allDevicesInformation=message.devices;
  DeviceInformation deviceInformation=allDevicesInformation.get(4);
  assertEquals(DeviceType.EcoSwitch,deviceInformation.getDeviceType());
}",0.9902534113060428
62468,"@Test public void deviceInformationTypeTest2(){
  ArrayList<DeviceInformation> allDevicesInformation=message.devices;
  DeviceInformation deviceInformation=allDevicesInformation.get(2);
  assertEquals(DeviceType.WallMountedThermostat,deviceInformation.getDeviceType());
}","@Test public void deviceInformationTypeTest2(){
  List<DeviceInformation> allDevicesInformation=message.devices;
  DeviceInformation deviceInformation=allDevicesInformation.get(2);
  assertEquals(DeviceType.WallMountedThermostat,deviceInformation.getDeviceType());
}",0.9906890130353816
62469,"@Test public void deviceInformationTypeTest4(){
  ArrayList<DeviceInformation> allDevicesInformation=message.devices;
  DeviceInformation deviceInformation=allDevicesInformation.get(5);
  assertEquals(DeviceType.ShutterContact,deviceInformation.getDeviceType());
}","@Test public void deviceInformationTypeTest4(){
  List<DeviceInformation> allDevicesInformation=message.devices;
  DeviceInformation deviceInformation=allDevicesInformation.get(5);
  assertEquals(DeviceType.ShutterContact,deviceInformation.getDeviceType());
}",0.9904397705544932
62470,"@Test public void roomInformationTest(){
  ArrayList<RoomInformation> roomInformation=message.rooms;
  assertEquals(5,roomInformation.size());
  assertEquals(""String_Node_Str"",roomInformation.get(0).getName());
}","@Test public void roomInformationTest(){
  List<RoomInformation> roomInformation=message.rooms;
  assertEquals(5,roomInformation.size());
  assertEquals(""String_Node_Str"",roomInformation.get(0).getName());
}",0.9880668257756564
62471,"@Before public void Before(){
  message=new N_Message(rawData);
}","@Before public void Before(){
  message=new N_Message(RAW_DATA);
}",0.900763358778626
62472,"@Before public void Before(){
  message1=new S_Message(rawData1);
  message2=new S_Message(rawData2);
}","@Before public void Before(){
  message1=new S_Message(RAW_DATA_1);
  message2=new S_Message(RAW_DATA_2);
}",0.8666666666666667
62473,"@Test public void fromHexTest(){
  int ar0=Utils.fromHex(""String_Node_Str"");
  int ar1=Utils.fromHex(""String_Node_Str"");
  int ar31=Utils.fromHex(""String_Node_Str"");
  int ar255=Utils.fromHex(""String_Node_Str"");
  assertEquals(0,ar0);
  assertEquals(1,ar1);
  assertEquals(31,ar31);
  assertEquals(255,ar255);
}","@Test public void fromHexTest(){
  assertEquals(0x00,Utils.fromHex(""String_Node_Str""));
  assertEquals(0x01,Utils.fromHex(""String_Node_Str""));
  assertEquals(0x1F,Utils.fromHex(""String_Node_Str""));
  assertEquals(0xFF,Utils.fromHex(""String_Node_Str""));
}",0.1451327433628318
62474,"/** 
 * Updates the Cube the NTP info
 * @param ntpServer1
 * @param ntpServer2
 */
public F_Command(String ntpServer1,String ntpServer2){
  this.ntpServer1=ntpServer1 != null ? ntpServer1 : ""String_Node_Str"";
  this.ntpServer2=ntpServer2 != null ? ntpServer2 : ""String_Node_Str"";
}","/** 
 * Updates the Cube the NTP info
 */
public F_Command(String ntpServer1,String ntpServer2){
  this.ntpServer1=ntpServer1 != null ? ntpServer1 : ""String_Node_Str"";
  this.ntpServer2=ntpServer2 != null ? ntpServer2 : ""String_Node_Str"";
}",0.9195402298850576
62475,"@Override public String getCommandString(){
  String servers;
  if (ntpServer1.length() > 0 && ntpServer2.length() > 0) {
    servers=ntpServer1 + ""String_Node_Str"" + ntpServer2;
  }
 else {
    servers=ntpServer1 + ntpServer2;
  }
  String cmd=""String_Node_Str"" + servers + '\r'+ '\n';
  return cmd;
}","@Override public String getCommandString(){
  final String servers;
  if (ntpServer1.length() > 0 && ntpServer2.length() > 0) {
    servers=ntpServer1 + ""String_Node_Str"" + ntpServer2;
  }
 else {
    servers=ntpServer1 + ntpServer2;
  }
  return ""String_Node_Str"" + servers + '\r'+ '\n';
}",0.9358108108108107
62476,"/** 
 * Handle setting the color. The Feican bulb has a separate command for the brightness. This brightness value is applied to any color value send. Because in the color command the brightness is also calculated this would mean the brightness will be applied twice; first when getting the RGB values and second in the bulb itself when passing a color value a earlier set brightness value is applied. To work around this, the brightness value is first send to the bulb and the color is send with a 100% brightness. So the brightness is controlled by the bulb. This is also needed for 2 reasons. First color temperature also works with brightness and thus to set it with color temperature the brightness must be set on the bulb. Secondly when setting brightness in the color widget only the brightness value is passed and no color value is available, therefore this binding then sets the brightness on the bulb.
 * @param channelUID Channel the command is for
 * @param command color to set
 * @throws IOException Connection to the bulb failed
 */
private void handleColor(ChannelUID channelUID,HSBType command) throws IOException {
  if (CHANNEL_COLOR.equals(channelUID.getId())) {
    handleBrightness(command.getBrightness());
    connection.sendCommand(commands.color(new HSBType(command.getHue(),command.getSaturation(),PercentType.HUNDRED)));
    handleOnOff((OnOffType)command.as(OnOffType.class));
  }
}","/** 
 * Handle setting the color. The Feican bulb has a separate command for the brightness. This brightness value is applied to any color value send. Because in the color command the brightness is also calculated this would mean the brightness will be applied twice; first when getting the RGB values and second in the bulb itself when passing a color value a earlier set brightness value is applied. To work around this, the brightness value is first send to the bulb and the color is send with a 100% brightness. So the brightness is controlled by the bulb. This is also needed for 2 reasons. First color temperature also works with brightness and thus to set it with color temperature the brightness must be set on the bulb. Secondly when setting brightness in the color widget only the brightness value is passed and no color value is available, therefore this binding then sets the brightness on the bulb.
 * @param channelUID Channel the command is for
 * @param command color to set
 * @throws IOException Connection to the bulb failed
 */
private void handleColor(ChannelUID channelUID,HSBType command) throws IOException {
  if (CHANNEL_COLOR.equals(channelUID.getId())) {
    handleBrightness(command.getBrightness());
    connection.sendCommand(commands.color(new HSBType(command.getHue(),command.getSaturation(),PercentType.HUNDRED)));
    handleOnOff(command);
  }
}",0.9838767466857756
62477,"/** 
 * Handle for   {@link OnOffType} commands.
 * @param channelUID
 * @param onOff value to set: on or off
 * @throws IOException Connection to the bulb failed
 */
private void handleOnOff(OnOffType onOff) throws IOException {
  connection.sendCommand(commands.switchOnOff(onOff));
}","/** 
 * Handle for   {@link DecimalType} as an {@link OnOffType} command.
 * @param value value to derive on or off state from
 * @throws IOException Connection to the bulb failed
 */
private void handleOnOff(DecimalType value) throws IOException {
  handleOnOff(DecimalType.ZERO.equals(value) ? OnOffType.OFF : OnOffType.ON);
}",0.5244299674267101
62478,"/** 
 * Handle percentType commands. Action depends on what channel send the command. For brightness related channels after the brightness command an extra onOff command is send to update the onOff state conform the brightness state.
 * @param channelUID Channel the command is for
 * @param command The percentType command
 * @throws IOException Connection to the bulb failed
 */
private void handlePercentage(ChannelUID channelUID,PercentType command) throws IOException {
  String id=channelUID.getId();
switch (id) {
case CHANNEL_COLOR:
    handleBrightness(command);
  handleOnOff((OnOffType)command.as(OnOffType.class));
break;
case CHANNEL_COLOR_TEMPERATURE:
handleColorTemperature(command);
handleOnOff(OnOffType.ON);
break;
case CHANNEL_PROGRAM_SPEED:
handleProgramSpeed(command);
handleOnOff(OnOffType.ON);
break;
}
}","/** 
 * Handle percentType commands. Action depends on what channel send the command. For brightness related channels after the brightness command an extra onOff command is send to update the onOff state conform the brightness state.
 * @param channelUID Channel the command is for
 * @param command The percentType command
 * @throws IOException Connection to the bulb failed
 */
private void handlePercentage(ChannelUID channelUID,PercentType command) throws IOException {
  String id=channelUID.getId();
switch (id) {
case CHANNEL_COLOR:
    handleBrightness(command);
  handleOnOff(command);
break;
case CHANNEL_COLOR_TEMPERATURE:
handleColorTemperature(command);
handleOnOff(OnOffType.ON);
break;
case CHANNEL_PROGRAM_SPEED:
handleProgramSpeed(command);
handleOnOff(OnOffType.ON);
break;
}
}",0.9722735674676524
62479,"private boolean handleBrightness(String channelId,Connection connection,Command command,TPLinkSmartHomeConfiguration configuration) throws IOException {
  HasErrorResponse response=null;
  if (command instanceof OnOffType) {
    response=setOnOffState(connection,(OnOffType)command);
  }
 else   if (command instanceof DecimalType) {
    DecimalType decimalCommand=(DecimalType)command;
    response=commands.setDimmerBrightnessResponse(connection.sendCommand(commands.setDimmerBrightness((decimalCommand).intValue())));
    checkErrors(response);
    response=setOnOffState(connection,(OnOffType)decimalCommand.as(OnOffType.class));
  }
  checkErrors(response);
  return response != null;
}","private boolean handleBrightness(String channelId,Connection connection,Command command,TPLinkSmartHomeConfiguration configuration) throws IOException {
  HasErrorResponse response=null;
  if (command instanceof OnOffType) {
    response=setOnOffState(connection,(OnOffType)command);
  }
 else   if (command instanceof DecimalType) {
    DecimalType decimalCommand=(DecimalType)command;
    response=commands.setDimmerBrightnessResponse(connection.sendCommand(commands.setDimmerBrightness((decimalCommand).intValue())));
    checkErrors(response);
    response=setOnOffState(connection,DecimalType.ZERO.equals(decimalCommand) ? OnOffType.OFF : OnOffType.ON);
  }
  checkErrors(response);
  return response != null;
}",0.9594882729211088
62480,"protected void createAndLinkItems(){
  thing.getChannels().forEach(c -> {
    String itemName=getItemName(c.getUID().getId());
    GenericItem item=itemFactory.createItem(c.getAcceptedItemType(),itemName);
    if (item != null) {
      itemRegistry.add(item);
    }
    managedItemChannelLinkProvider.add(new ItemChannelLink(itemName,c.getUID()));
  }
);
}","protected void createAndLinkItems(){
  thing.getChannels().forEach(c -> {
    String itemName=getItemName(c.getUID().getId());
    Item item=itemFactory.createItem(c.getAcceptedItemType(),itemName);
    if (item != null) {
      itemRegistry.add(item);
    }
    managedItemChannelLinkProvider.add(new ItemChannelLink(itemName,c.getUID()));
  }
);
}",0.9900709219858156
62481,"@Override public void dscAlarmEventReceived(EventObject event,Thing thing){
  if (thing != null) {
    if (getThing() == thing) {
      DSCAlarmEvent dscAlarmEvent=(DSCAlarmEvent)event;
      DSCAlarmMessage dscAlarmMessage=dscAlarmEvent.getDSCAlarmMessage();
      ChannelUID channelUID=null;
      DSCAlarmCode dscAlarmCode=DSCAlarmCode.getDSCAlarmCodeValue(dscAlarmMessage.getMessageInfo(DSCAlarmMessageInfoType.CODE));
      String dscAlarmMessageData=dscAlarmMessage.getMessageInfo(DSCAlarmMessageInfoType.DATA);
      logger.debug(""String_Node_Str"",thing.getUID(),dscAlarmCode);
switch (dscAlarmCode) {
case KeypadLEDState:
case KeypadLEDFlashState:
        keypadLEDStateEventHandler(event);
      break;
case LCDUpdate:
case LCDCursor:
    updateChannel(channelUID,0,dscAlarmMessageData);
  break;
case LEDStatus:
int data=Integer.parseInt(dscAlarmMessageData.substring(0,1));
int state=Integer.parseInt(dscAlarmMessage.getMessageInfo(DSCAlarmMessageInfoType.DATA).substring(1));
switch (data) {
case 1:
channelUID=new ChannelUID(getThing().getUID(),KEYPAD_READY_LED);
updateChannel(channelUID,state,""String_Node_Str"");
break;
case 2:
channelUID=new ChannelUID(getThing().getUID(),KEYPAD_ARMED_LED);
updateChannel(channelUID,state,""String_Node_Str"");
break;
case 3:
channelUID=new ChannelUID(getThing().getUID(),KEYPAD_MEMORY_LED);
updateChannel(channelUID,state,""String_Node_Str"");
break;
case 4:
channelUID=new ChannelUID(getThing().getUID(),KEYPAD_BYPASS_LED);
updateChannel(channelUID,state,""String_Node_Str"");
break;
case 5:
channelUID=new ChannelUID(getThing().getUID(),KEYPAD_TROUBLE_LED);
updateChannel(channelUID,state,""String_Node_Str"");
break;
case 6:
channelUID=new ChannelUID(getThing().getUID(),KEYPAD_PROGRAM_LED);
updateChannel(channelUID,state,""String_Node_Str"");
break;
case 7:
channelUID=new ChannelUID(getThing().getUID(),KEYPAD_FIRE_LED);
updateChannel(channelUID,state,""String_Node_Str"");
break;
case 8:
channelUID=new ChannelUID(getThing().getUID(),KEYPAD_BACKLIGHT_LED);
updateChannel(channelUID,state,""String_Node_Str"");
break;
case 9:
channelUID=new ChannelUID(getThing().getUID(),KEYPAD_AC_LED);
updateChannel(channelUID,state,""String_Node_Str"");
break;
default :
break;
}
default :
break;
}
}
}
}","@Override public void dscAlarmEventReceived(EventObject event,Thing thing){
  if (thing != null) {
    if (getThing() == thing) {
      DSCAlarmEvent dscAlarmEvent=(DSCAlarmEvent)event;
      DSCAlarmMessage dscAlarmMessage=dscAlarmEvent.getDSCAlarmMessage();
      ChannelUID channelUID=null;
      DSCAlarmCode dscAlarmCode=DSCAlarmCode.getDSCAlarmCodeValue(dscAlarmMessage.getMessageInfo(DSCAlarmMessageInfoType.CODE));
      String dscAlarmMessageData=dscAlarmMessage.getMessageInfo(DSCAlarmMessageInfoType.DATA);
      logger.debug(""String_Node_Str"",thing.getUID(),dscAlarmCode);
switch (dscAlarmCode) {
case KeypadLEDState:
case KeypadLEDFlashState:
        keypadLEDStateEventHandler(event);
      break;
case LCDUpdate:
    channelUID=new ChannelUID(getThing().getUID(),KEYPAD_LCD_UPDATE);
  updateChannel(channelUID,0,dscAlarmMessageData);
break;
case LCDCursor:
channelUID=new ChannelUID(getThing().getUID(),KEYPAD_LCD_CURSOR);
updateChannel(channelUID,0,dscAlarmMessageData);
break;
case LEDStatus:
int data=Integer.parseInt(dscAlarmMessageData.substring(0,1));
int state=Integer.parseInt(dscAlarmMessage.getMessageInfo(DSCAlarmMessageInfoType.DATA).substring(1));
switch (data) {
case 1:
channelUID=new ChannelUID(getThing().getUID(),KEYPAD_READY_LED);
updateChannel(channelUID,state,""String_Node_Str"");
break;
case 2:
channelUID=new ChannelUID(getThing().getUID(),KEYPAD_ARMED_LED);
updateChannel(channelUID,state,""String_Node_Str"");
break;
case 3:
channelUID=new ChannelUID(getThing().getUID(),KEYPAD_MEMORY_LED);
updateChannel(channelUID,state,""String_Node_Str"");
break;
case 4:
channelUID=new ChannelUID(getThing().getUID(),KEYPAD_BYPASS_LED);
updateChannel(channelUID,state,""String_Node_Str"");
break;
case 5:
channelUID=new ChannelUID(getThing().getUID(),KEYPAD_TROUBLE_LED);
updateChannel(channelUID,state,""String_Node_Str"");
break;
case 6:
channelUID=new ChannelUID(getThing().getUID(),KEYPAD_PROGRAM_LED);
updateChannel(channelUID,state,""String_Node_Str"");
break;
case 7:
channelUID=new ChannelUID(getThing().getUID(),KEYPAD_FIRE_LED);
updateChannel(channelUID,state,""String_Node_Str"");
break;
case 8:
channelUID=new ChannelUID(getThing().getUID(),KEYPAD_BACKLIGHT_LED);
updateChannel(channelUID,state,""String_Node_Str"");
break;
case 9:
channelUID=new ChannelUID(getThing().getUID(),KEYPAD_AC_LED);
updateChannel(channelUID,state,""String_Node_Str"");
break;
default :
break;
}
default :
break;
}
}
}
}",0.9522785898538264
62482,"@Override public void dscAlarmEventReceived(EventObject event,Thing thing){
  if (thing != null) {
    DSCAlarmEvent dscAlarmEvent=(DSCAlarmEvent)event;
    DSCAlarmMessage dscAlarmMessage=dscAlarmEvent.getDSCAlarmMessage();
    String dscAlarmMessageData=dscAlarmMessage.getMessageInfo(DSCAlarmMessageInfoType.DATA);
    setTimeStampState(dscAlarmMessage.getMessageInfo(DSCAlarmMessageInfoType.TIME_STAMP));
    if (getThing() == thing) {
      ChannelUID channelUID=null;
      DSCAlarmCode dscAlarmCode=DSCAlarmCode.getDSCAlarmCodeValue(dscAlarmMessage.getMessageInfo(DSCAlarmMessageInfoType.CODE));
      logger.debug(""String_Node_Str"",thing.getUID(),dscAlarmCode);
      int state=0;
switch (dscAlarmCode) {
case CommandAcknowledge:
        break;
case SystemError:
      int errorCode=Integer.parseInt(dscAlarmMessageData);
    if (errorCode == 23 || errorCode == 24) {
      List<Thing> things=dscAlarmBridgeHandler.getThing().getThings();
      for (      Thing thg : things) {
        if (thg.getThingTypeUID().equals(PARTITION_THING_TYPE)) {
          DSCAlarmBaseThingHandler handler=(DSCAlarmBaseThingHandler)thg.getHandler();
          if (handler != null) {
            channelUID=new ChannelUID(thg.getUID(),PARTITION_ARM_MODE);
            handler.updateChannel(channelUID,0,""String_Node_Str"");
          }
        }
      }
    }
  panelSystemError(dscAlarmMessage);
break;
case TimeDateBroadcast:
channelUID=new ChannelUID(getThing().getUID(),PANEL_TIME);
String panelTime=dscAlarmMessage.getMessageInfo(DSCAlarmMessageInfoType.DATA);
updateChannel(channelUID,state,panelTime);
channelUID=new ChannelUID(getThing().getUID(),PANEL_TIME_BROADCAST);
updateChannel(channelUID,1,""String_Node_Str"");
break;
case FireKeyAlarm:
state=1;
case FireKeyRestored:
channelUID=new ChannelUID(getThing().getUID(),PANEL_FIRE_KEY_ALARM);
updateChannel(channelUID,state,""String_Node_Str"");
break;
case AuxiliaryKeyAlarm:
state=1;
case AuxiliaryKeyRestored:
channelUID=new ChannelUID(getThing().getUID(),PANEL_AUX_KEY_ALARM);
updateChannel(channelUID,state,""String_Node_Str"");
break;
case PanicKeyAlarm:
state=1;
case PanicKeyRestored:
channelUID=new ChannelUID(getThing().getUID(),PANEL_PANIC_KEY_ALARM);
updateChannel(channelUID,state,""String_Node_Str"");
break;
case AuxiliaryInputAlarm:
state=1;
case AuxiliaryInputAlarmRestored:
channelUID=new ChannelUID(getThing().getUID(),PANEL_AUX_INPUT_ALARM);
updateChannel(channelUID,state,""String_Node_Str"");
break;
case TroubleLEDOn:
channelUID=new ChannelUID(getThing().getUID(),PANEL_TROUBLE_LED);
updateChannel(channelUID,1,""String_Node_Str"");
break;
case TroubleLEDOff:
channelUID=new ChannelUID(getThing().getUID(),PANEL_SERVICE_REQUIRED);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PANEL_AC_TROUBLE);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PANEL_TELEPHONE_TROUBLE);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PANEL_FTC_TROUBLE);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PANEL_ZONE_FAULT);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PANEL_ZONE_TAMPER);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PANEL_ZONE_LOW_BATTERY);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PANEL_TIME_LOSS);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PANEL_TROUBLE_LED);
updateChannel(channelUID,0,""String_Node_Str"");
break;
case PanelBatteryTrouble:
case PanelACTrouble:
case SystemBellTrouble:
case TLMLine1Trouble:
case TLMLine2Trouble:
case FTCTrouble:
case GeneralDeviceLowBattery:
case WirelessKeyLowBatteryTrouble:
case HandheldKeypadLowBatteryTrouble:
case GeneralSystemTamper:
case HomeAutomationTrouble:
case KeybusFault:
channelUID=new ChannelUID(getThing().getUID(),PANEL_TROUBLE_MESSAGE);
updateChannel(channelUID,0,dscAlarmMessage.getMessageInfo(DSCAlarmMessageInfoType.DESCRIPTION));
break;
case PanelBatteryTroubleRestore:
case PanelACRestore:
case SystemBellTroubleRestore:
case TLMLine1TroubleRestore:
case TLMLine2TroubleRestore:
case GeneralDeviceLowBatteryRestore:
case WirelessKeyLowBatteryTroubleRestore:
case HandheldKeypadLowBatteryTroubleRestore:
case GeneralSystemTamperRestore:
case HomeAutomationTroubleRestore:
case KeybusFaultRestore:
channelUID=new ChannelUID(getThing().getUID(),PANEL_TROUBLE_MESSAGE);
updateChannel(channelUID,0,""String_Node_Str"");
break;
case VerboseTroubleStatus:
verboseTroubleStatusHandler(event);
break;
case CodeRequired:
dscAlarmBridgeHandler.sendCommand(DSCAlarmCode.CodeSend,getUserCode());
break;
default :
break;
}
}
}
}","@Override public void dscAlarmEventReceived(EventObject event,Thing thing){
  if (thing != null) {
    DSCAlarmEvent dscAlarmEvent=(DSCAlarmEvent)event;
    DSCAlarmMessage dscAlarmMessage=dscAlarmEvent.getDSCAlarmMessage();
    String dscAlarmMessageData=dscAlarmMessage.getMessageInfo(DSCAlarmMessageInfoType.DATA);
    setTimeStampState(dscAlarmMessage.getMessageInfo(DSCAlarmMessageInfoType.TIME_STAMP));
    if (getThing() == thing) {
      ChannelUID channelUID=null;
      DSCAlarmCode dscAlarmCode=DSCAlarmCode.getDSCAlarmCodeValue(dscAlarmMessage.getMessageInfo(DSCAlarmMessageInfoType.CODE));
      logger.debug(""String_Node_Str"",thing.getUID(),dscAlarmCode);
      int state=0;
switch (dscAlarmCode) {
case CommandAcknowledge:
        break;
case SystemError:
      int errorCode=Integer.parseInt(dscAlarmMessageData);
    if (errorCode == 23 || errorCode == 24) {
      List<Thing> things=dscAlarmBridgeHandler.getThing().getThings();
      for (      Thing thg : things) {
        if (thg.getThingTypeUID().equals(PARTITION_THING_TYPE)) {
          DSCAlarmBaseThingHandler handler=(DSCAlarmBaseThingHandler)thg.getHandler();
          if (handler != null) {
            channelUID=new ChannelUID(thg.getUID(),PARTITION_ARM_MODE);
            handler.updateChannel(channelUID,0,""String_Node_Str"");
          }
        }
      }
    }
  panelSystemError(dscAlarmMessage);
break;
case TimeDateBroadcast:
channelUID=new ChannelUID(getThing().getUID(),PANEL_TIME);
String panelTime=dscAlarmMessage.getMessageInfo(DSCAlarmMessageInfoType.DATA);
updateChannel(channelUID,state,panelTime);
channelUID=new ChannelUID(getThing().getUID(),PANEL_TIME_BROADCAST);
updateChannel(channelUID,1,""String_Node_Str"");
break;
case FireKeyAlarm:
state=1;
case FireKeyRestored:
channelUID=new ChannelUID(getThing().getUID(),PANEL_FIRE_KEY_ALARM);
updateChannel(channelUID,state,""String_Node_Str"");
restorePartitionsInAlarm(dscAlarmCode);
break;
case AuxiliaryKeyAlarm:
state=1;
case AuxiliaryKeyRestored:
channelUID=new ChannelUID(getThing().getUID(),PANEL_AUX_KEY_ALARM);
updateChannel(channelUID,state,""String_Node_Str"");
restorePartitionsInAlarm(dscAlarmCode);
break;
case PanicKeyAlarm:
state=1;
case PanicKeyRestored:
channelUID=new ChannelUID(getThing().getUID(),PANEL_PANIC_KEY_ALARM);
updateChannel(channelUID,state,""String_Node_Str"");
restorePartitionsInAlarm(dscAlarmCode);
break;
case AuxiliaryInputAlarm:
state=1;
case AuxiliaryInputAlarmRestored:
channelUID=new ChannelUID(getThing().getUID(),PANEL_AUX_INPUT_ALARM);
updateChannel(channelUID,state,""String_Node_Str"");
restorePartitionsInAlarm(dscAlarmCode);
break;
case TroubleLEDOn:
channelUID=new ChannelUID(getThing().getUID(),PANEL_TROUBLE_LED);
updateChannel(channelUID,1,""String_Node_Str"");
break;
case TroubleLEDOff:
channelUID=new ChannelUID(getThing().getUID(),PANEL_SERVICE_REQUIRED);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PANEL_AC_TROUBLE);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PANEL_TELEPHONE_TROUBLE);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PANEL_FTC_TROUBLE);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PANEL_ZONE_FAULT);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PANEL_ZONE_TAMPER);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PANEL_ZONE_LOW_BATTERY);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PANEL_TIME_LOSS);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PANEL_TROUBLE_LED);
updateChannel(channelUID,0,""String_Node_Str"");
break;
case PanelBatteryTrouble:
case PanelACTrouble:
case SystemBellTrouble:
case TLMLine1Trouble:
case TLMLine2Trouble:
case FTCTrouble:
case GeneralDeviceLowBattery:
case WirelessKeyLowBatteryTrouble:
case HandheldKeypadLowBatteryTrouble:
case GeneralSystemTamper:
case HomeAutomationTrouble:
case KeybusFault:
channelUID=new ChannelUID(getThing().getUID(),PANEL_TROUBLE_MESSAGE);
updateChannel(channelUID,0,dscAlarmMessage.getMessageInfo(DSCAlarmMessageInfoType.DESCRIPTION));
break;
case PanelBatteryTroubleRestore:
case PanelACRestore:
case SystemBellTroubleRestore:
case TLMLine1TroubleRestore:
case TLMLine2TroubleRestore:
case GeneralDeviceLowBatteryRestore:
case WirelessKeyLowBatteryTroubleRestore:
case HandheldKeypadLowBatteryTroubleRestore:
case GeneralSystemTamperRestore:
case HomeAutomationTroubleRestore:
case KeybusFaultRestore:
channelUID=new ChannelUID(getThing().getUID(),PANEL_TROUBLE_MESSAGE);
updateChannel(channelUID,0,""String_Node_Str"");
break;
case VerboseTroubleStatus:
verboseTroubleStatusHandler(event);
break;
case CodeRequired:
dscAlarmBridgeHandler.sendCommand(DSCAlarmCode.CodeSend,getUserCode());
break;
default :
break;
}
}
}
}",0.983643426702106
62483,"@Override public void handleCommand(ChannelUID channelUID,Command command){
  logger.debug(""String_Node_Str"",channelUID,command);
  if (command instanceof RefreshType) {
    return;
  }
  if (dscAlarmBridgeHandler != null && dscAlarmBridgeHandler.isConnected() && channelUID.getId() == ZONE_BYPASS_MODE) {
    if (command == OnOffType.OFF) {
      String data=String.valueOf(getPartitionNumber()) + ""String_Node_Str"" + String.format(""String_Node_Str"",getZoneNumber())+ ""String_Node_Str"";
      dscAlarmBridgeHandler.sendCommand(DSCAlarmCode.KeySequence,data);
    }
 else     if (command == OnOffType.ON) {
      String data=String.valueOf(getPartitionNumber()) + ""String_Node_Str"" + String.format(""String_Node_Str"",getZoneNumber())+ ""String_Node_Str"";
      dscAlarmBridgeHandler.sendCommand(DSCAlarmCode.KeySequence,data);
    }
  }
}","@Override public void handleCommand(ChannelUID channelUID,Command command){
  logger.debug(""String_Node_Str"",channelUID,command);
  if (command instanceof RefreshType) {
    return;
  }
  if (dscAlarmBridgeHandler != null && dscAlarmBridgeHandler.isConnected() && channelUID.getId().equals(ZONE_BYPASS_MODE)) {
    String data=String.valueOf(getPartitionNumber()) + ""String_Node_Str"" + String.format(""String_Node_Str"",getZoneNumber())+ ""String_Node_Str"";
    dscAlarmBridgeHandler.sendCommand(DSCAlarmCode.KeySequence,data);
  }
}",0.4670571010248902
62484,"private void setVolumeInternal(int volume){
  JsonObject params=new JsonObject();
  params.addProperty(""String_Node_Str"",this.volume);
  socket.callMethod(""String_Node_Str"",params);
}","private void setVolumeInternal(int volume){
  JsonObject params=new JsonObject();
  params.addProperty(""String_Node_Str"",volume);
  socket.callMethod(""String_Node_Str"",params);
}",0.9861495844875346
62485,"protected boolean establishEventStream(){
  try {
    if (!isEstablished) {
      eventBufferedReader=null;
      eventClient=ClientBuilder.newClient().property(ClientProperties.CONNECT_TIMEOUT,EVENT_STREAM_CONNECT_TIMEOUT).property(ClientProperties.READ_TIMEOUT,EVENT_STREAM_READ_TIMEOUT).register(new Authenticator((String)getConfig().get(USERNAME),vehicle.tokens[0]));
      eventTarget=eventClient.target(TESLA_EVENT_URI).path(vehicle.vehicle_id + ""String_Node_Str"").queryParam(""String_Node_Str"",StringUtils.join(EventKeys.values(),',',1,EventKeys.values().length));
      eventResponse=eventTarget.request(MediaType.TEXT_PLAIN_TYPE).get();
      logger.debug(""String_Node_Str"",eventResponse.getStatus(),eventResponse.getStatusInfo());
      if (eventResponse.getStatus() == 200) {
        InputStream dummy=(InputStream)eventResponse.getEntity();
        eventInputStreamReader=new InputStreamReader(dummy);
        eventBufferedReader=new BufferedReader(eventInputStreamReader);
        isEstablished=true;
      }
 else       if (eventResponse.getStatus() == 401) {
        isEstablished=false;
      }
 else {
        isEstablished=false;
      }
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e.getMessage());
    isEstablished=false;
  }
  return isEstablished;
}","protected boolean establishEventStream(){
  try {
    if (!isEstablished) {
      eventBufferedReader=null;
      eventClient=ClientBuilder.newClient().property(ClientProperties.CONNECT_TIMEOUT,EVENT_STREAM_CONNECT_TIMEOUT).property(ClientProperties.READ_TIMEOUT,EVENT_STREAM_READ_TIMEOUT).register(new Authenticator((String)getConfig().get(USERNAME),vehicle.tokens[0]));
      eventTarget=eventClient.target(TESLA_EVENT_URI).path(vehicle.vehicle_id + ""String_Node_Str"").queryParam(""String_Node_Str"",StringUtils.join(EventKeys.values(),',',1,EventKeys.values().length));
      eventResponse=eventTarget.request(MediaType.TEXT_PLAIN_TYPE).get();
      logger.debug(""String_Node_Str"",eventResponse.getStatus(),eventResponse.getStatusInfo());
      if (eventResponse.getStatus() == 200) {
        InputStream dummy=(InputStream)eventResponse.getEntity();
        eventInputStreamReader=new InputStreamReader(dummy);
        eventBufferedReader=new BufferedReader(eventInputStreamReader);
        isEstablished=true;
      }
 else       if (eventResponse.getStatus() == 401) {
        isEstablished=false;
      }
 else {
        isEstablished=false;
      }
      if (!isEstablished) {
        eventIntervalErrors++;
        if (eventIntervalErrors >= EVENT_MAXIMUM_ERRORS_IN_INTERVAL) {
          logger.warn(""String_Node_Str"",EVENT_MAXIMUM_ERRORS_IN_INTERVAL,EVENT_ERROR_INTERVAL_SECONDS);
          updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.COMMUNICATION_ERROR);
          eventClient.close();
        }
        if ((System.currentTimeMillis() - eventIntervalTimestamp) > 1000 * EVENT_ERROR_INTERVAL_SECONDS) {
          logger.trace(""String_Node_Str"",eventIntervalErrors);
          eventIntervalTimestamp=System.currentTimeMillis();
          eventIntervalErrors=0;
        }
      }
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e.getMessage());
    isEstablished=false;
  }
  return isEstablished;
}",0.801980198019802
62486,"protected String invokeAndParse(String command,String payLoad,WebTarget target){
  logger.debug(""String_Node_Str"",command);
  if (vehicle.id != null) {
    Response response;
    if (payLoad != null) {
      if (command != null) {
        response=target.resolveTemplate(""String_Node_Str"",command).resolveTemplate(""String_Node_Str"",vehicle.id).request().header(""String_Node_Str"",""String_Node_Str"" + logonToken.access_token).post(Entity.entity(payLoad,MediaType.APPLICATION_JSON_TYPE));
      }
 else {
        response=target.resolveTemplate(""String_Node_Str"",vehicle.id).request().header(""String_Node_Str"",""String_Node_Str"" + logonToken.access_token).post(Entity.entity(payLoad,MediaType.APPLICATION_JSON_TYPE));
      }
    }
 else {
      if (command != null) {
        response=target.resolveTemplate(""String_Node_Str"",command).resolveTemplate(""String_Node_Str"",vehicle.id).request(MediaType.APPLICATION_JSON_TYPE).header(""String_Node_Str"",""String_Node_Str"" + logonToken.access_token).get();
      }
 else {
        response=target.resolveTemplate(""String_Node_Str"",vehicle.id).request(MediaType.APPLICATION_JSON_TYPE).header(""String_Node_Str"",""String_Node_Str"" + logonToken.access_token).get();
      }
    }
    JsonParser parser=new JsonParser();
    if (response != null && response.getStatus() == 200) {
      try {
        JsonObject jsonObject=parser.parse(response.readEntity(String.class)).getAsJsonObject();
        logger.trace(""String_Node_Str"",new Object[]{command,payLoad,target.toString(),jsonObject.get(""String_Node_Str"").toString()});
        return jsonObject.get(""String_Node_Str"").toString();
      }
 catch (      Exception e) {
        logger.error(""String_Node_Str"",e.getMessage());
      }
    }
 else {
      logger.error(""String_Node_Str"",new Object[]{command,(response != null) ? response.getStatus() : ""String_Node_Str"",(response != null) ? response.getStatusInfo() : ""String_Node_Str""});
      if (intervalErrors == 0 && response != null && response.getStatus() == 401) {
        authenticate();
      }
      intervalErrors++;
      if (intervalErrors >= MAXIMUM_ERRORS_IN_INTERVAL) {
        logger.warn(""String_Node_Str"",MAXIMUM_ERRORS_IN_INTERVAL,ERROR_INTERVAL_SECONDS);
        updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.COMMUNICATION_ERROR);
        eventClient.close();
        return null;
      }
      if ((System.currentTimeMillis() - intervalTimestamp) > 1000 * ERROR_INTERVAL_SECONDS) {
        logger.trace(""String_Node_Str"",intervalErrors);
        intervalTimestamp=System.currentTimeMillis();
        intervalErrors=0;
      }
    }
  }
  return null;
}","protected String invokeAndParse(String command,String payLoad,WebTarget target){
  logger.debug(""String_Node_Str"",command);
  if (vehicle.id != null) {
    Response response;
    if (payLoad != null) {
      if (command != null) {
        response=target.resolveTemplate(""String_Node_Str"",command).resolveTemplate(""String_Node_Str"",vehicle.id).request().header(""String_Node_Str"",""String_Node_Str"" + logonToken.access_token).post(Entity.entity(payLoad,MediaType.APPLICATION_JSON_TYPE));
      }
 else {
        response=target.resolveTemplate(""String_Node_Str"",vehicle.id).request().header(""String_Node_Str"",""String_Node_Str"" + logonToken.access_token).post(Entity.entity(payLoad,MediaType.APPLICATION_JSON_TYPE));
      }
    }
 else {
      if (command != null) {
        response=target.resolveTemplate(""String_Node_Str"",command).resolveTemplate(""String_Node_Str"",vehicle.id).request(MediaType.APPLICATION_JSON_TYPE).header(""String_Node_Str"",""String_Node_Str"" + logonToken.access_token).get();
      }
 else {
        response=target.resolveTemplate(""String_Node_Str"",vehicle.id).request(MediaType.APPLICATION_JSON_TYPE).header(""String_Node_Str"",""String_Node_Str"" + logonToken.access_token).get();
      }
    }
    JsonParser parser=new JsonParser();
    if (response != null && response.getStatus() == 200) {
      try {
        JsonObject jsonObject=parser.parse(response.readEntity(String.class)).getAsJsonObject();
        logger.trace(""String_Node_Str"",new Object[]{command,payLoad,target.toString(),jsonObject.get(""String_Node_Str"").toString()});
        return jsonObject.get(""String_Node_Str"").toString();
      }
 catch (      Exception e) {
        logger.error(""String_Node_Str"",e.getMessage());
      }
    }
 else {
      logger.error(""String_Node_Str"",new Object[]{command,(response != null) ? response.getStatus() : ""String_Node_Str"",(response != null) ? response.getStatusInfo() : ""String_Node_Str""});
      if (apiIntervalErrors == 0 && response != null && response.getStatus() == 401) {
        authenticate();
      }
      apiIntervalErrors++;
      if (apiIntervalErrors >= API_MAXIMUM_ERRORS_IN_INTERVAL) {
        logger.warn(""String_Node_Str"",API_MAXIMUM_ERRORS_IN_INTERVAL,API_ERROR_INTERVAL_SECONDS);
        updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.COMMUNICATION_ERROR);
        eventClient.close();
        return null;
      }
      if ((System.currentTimeMillis() - apiIntervalTimestamp) > 1000 * API_ERROR_INTERVAL_SECONDS) {
        logger.trace(""String_Node_Str"",apiIntervalErrors);
        apiIntervalTimestamp=System.currentTimeMillis();
        apiIntervalErrors=0;
      }
    }
  }
  return null;
}",0.9903060254704428
62487,"@Override void execute(ChannelUID channelUID,Command command){
  if (CHANNEL_SWITCH_CH0.equals(channelUID.getId())) {
    String status=command.toString().toLowerCase();
    getXiaomiBridgeHandler().writeToDevice(getItemId(),new String[]{CHANNEL_0},new Object[]{status});
  }
  logger.error(""String_Node_Str"",command,channelUID);
}","@Override void execute(ChannelUID channelUID,Command command){
  if (CHANNEL_SWITCH_CH0.equals(channelUID.getId())) {
    String status=command.toString().toLowerCase();
    getXiaomiBridgeHandler().writeToDevice(getItemId(),new String[]{CHANNEL_0},new Object[]{status});
    return;
  }
  logger.error(""String_Node_Str"",command,channelUID);
}",0.9821958456973294
62488,"@Override public void onDataReceived(JsonObject message){
  logger.trace(""String_Node_Str"",message);
  String sid=message.has(""String_Node_Str"") ? message.get(""String_Node_Str"").getAsString() : null;
  String command=message.get(""String_Node_Str"").getAsString();
  updateDeviceStatus(sid);
  updateStatus(ThingStatus.ONLINE);
switch (command) {
case ""String_Node_Str"":
    return;
case ""String_Node_Str"":
  if (message.has(""String_Node_Str"")) {
    this.gatewayToken=message.get(""String_Node_Str"").getAsString();
  }
break;
case ""String_Node_Str"":
JsonArray devices=PARSER.parse(message.get(""String_Node_Str"").getAsString()).getAsJsonArray();
for (JsonElement deviceId : devices) {
String device=deviceId.getAsString();
sendCommandToBridge(""String_Node_Str"",device);
}
sendCommandToBridge(""String_Node_Str"",getGatewaySid());
return;
case ""String_Node_Str"":
logger.debug(""String_Node_Str"",sid);
retend(sid,message);
break;
case ""String_Node_Str"":
logger.debug(""String_Node_Str"",sid);
break;
}
notifyListeners(command,message);
}","@Override public void onDataReceived(JsonObject message){
  logger.trace(""String_Node_Str"",message);
  String sid=message.has(""String_Node_Str"") ? message.get(""String_Node_Str"").getAsString() : null;
  String command=message.get(""String_Node_Str"").getAsString();
  updateDeviceStatus(sid);
  updateStatus(ThingStatus.ONLINE);
switch (command) {
case ""String_Node_Str"":
    return;
case ""String_Node_Str"":
  if (message.has(""String_Node_Str"")) {
    this.gatewayToken=message.get(""String_Node_Str"").getAsString();
  }
break;
case ""String_Node_Str"":
JsonArray devices=PARSER.parse(message.get(""String_Node_Str"").getAsString()).getAsJsonArray();
for (JsonElement deviceId : devices) {
String device=deviceId.getAsString();
sendCommandToBridge(""String_Node_Str"",device);
}
sendCommandToBridge(""String_Node_Str"",getGatewaySid());
return;
case ""String_Node_Str"":
logger.debug(""String_Node_Str"",sid);
defer(sid,message);
break;
case ""String_Node_Str"":
logger.debug(""String_Node_Str"",sid);
break;
}
notifyListeners(command,message);
}",0.9946419873356064
62489,"@Override public synchronized void run(){
synchronized (retentionBox) {
    retentionBox.remove(sid);
  }
}","@Override public synchronized void run(){
synchronized (retentionInbox) {
    retentionInbox.remove(sid);
  }
}",0.963302752293578
62490,"@Override public void handleCommand(ChannelUID channelUID,Command command){
  logger.debug(""String_Node_Str"",getItemId(),channelUID,command);
  if (command instanceof RefreshType) {
    JsonObject message=getXiaomiBridgeHandler().getRetentedMessage(getItemId());
    if (message != null) {
      String cmd=message.get(""String_Node_Str"").getAsString();
      logger.debug(""String_Node_Str"",getItemId());
      onItemUpdate(getItemId(),cmd,message);
    }
    return;
  }
  execute(channelUID,command);
}","@Override public void handleCommand(ChannelUID channelUID,Command command){
  logger.debug(""String_Node_Str"",getItemId(),channelUID,command);
  if (command instanceof RefreshType) {
    JsonObject message=getXiaomiBridgeHandler().getDeferredMessage(getItemId());
    if (message != null) {
      String cmd=message.get(""String_Node_Str"").getAsString();
      logger.debug(""String_Node_Str"",getItemId());
      onItemUpdate(getItemId(),cmd,message);
    }
    return;
  }
  execute(channelUID,command);
}",0.9880715705765408
62491,"@Override public void initialize(){
  setItemId((String)getConfig().get(ITEM_ID));
  onlineCheckTask=scheduler.scheduleWithFixedDelay(new Runnable(){
    @Override public void run(){
      updateThingStatus();
    }
  }
,0,ONLINE_TIMEOUT_MILLIS / 2,TimeUnit.MILLISECONDS);
}","@Override public void initialize(){
  setItemId((String)getConfig().get(ITEM_ID));
  onlineCheckTask=scheduler.scheduleWithFixedDelay(this::updateThingStatus,0,ONLINE_TIMEOUT_MILLIS / 2,TimeUnit.MILLISECONDS);
}",0.7793814432989691
62492,"/** 
 * Use the native ping utility of the operating system to detect device presence.
 * @param hostname The DNS name, IPv4 or IPv6 address. Must not be null.
 * @param timeoutInMS Timeout in milliseconds. Be aware that DNS resolution is not part of this timeout.
 * @return Returns true if the device responded
 * @throws IOException The ping command could probably not be found
 */
public boolean nativePing(IpPingMethodEnum method,String hostname,int timeoutInMS) throws IOException, InterruptedException {
  Process proc;
switch (method) {
case IPUTILS_LINUX_PING:
    proc=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",String.valueOf(timeoutInMS / 1000),""String_Node_Str"",""String_Node_Str"",hostname).start();
  break;
case MAC_OS_PING:
proc=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",String.valueOf(timeoutInMS / 1000),""String_Node_Str"",""String_Node_Str"",hostname).start();
break;
case WINDOWS_PING:
proc=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",String.valueOf(timeoutInMS),""String_Node_Str"",""String_Node_Str"",hostname).start();
break;
case JAVA_PING:
default :
return false;
}
return proc.waitFor() == 0;
}","/** 
 * Use the native ping utility of the operating system to detect device presence.
 * @param hostname The DNS name, IPv4 or IPv6 address. Must not be null.
 * @param timeoutInMS Timeout in milliseconds. Be aware that DNS resolution is not part of this timeout.
 * @return Returns true if the device responded
 * @throws IOException The ping command could probably not be found
 */
public boolean nativePing(IpPingMethodEnum method,String hostname,int timeoutInMS) throws IOException, InterruptedException {
  Process proc;
switch (method) {
case IPUTILS_LINUX_PING:
    proc=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",String.valueOf(timeoutInMS / 1000),""String_Node_Str"",""String_Node_Str"",hostname).start();
  break;
case MAC_OS_PING:
proc=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",String.valueOf(timeoutInMS / 1000),""String_Node_Str"",""String_Node_Str"",hostname).start();
break;
case WINDOWS_PING:
proc=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",String.valueOf(timeoutInMS),""String_Node_Str"",""String_Node_Str"",hostname).start();
break;
case JAVA_PING:
default :
return false;
}
if (method != IpPingMethodEnum.WINDOWS_PING) {
return proc.waitFor() == 0;
}
int result=proc.waitFor();
if (result != 0) {
return false;
}
try (BufferedReader r=new BufferedReader(new InputStreamReader(proc.getInputStream()))){
String line=r.readLine();
if (line == null) {
throw new IOException(""String_Node_Str"");
}
do {
if (line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"")) {
return false;
}
line=r.readLine();
}
 while (line != null);
return true;
}
 }",0.8261964735516373
62493,"@Override public Void parse(TclScriptDataList resultList) throws IOException {
  if (resultList.getEntries() != null) {
    Map<String,HmDevice> devicesByAddress=new HashMap<String,HmDevice>();
    for (    HmDevice device : devices) {
      devicesByAddress.put(device.getAddress(),device);
    }
    for (    TclScriptDataEntry entry : resultList.getEntries()) {
      HmDevice device=devicesByAddress.get(getAddress(entry.name));
      if (device != null) {
        device.setName(entry.value);
      }
    }
  }
  return null;
}","@Override public Void parse(TclScriptDataList resultList) throws IOException {
  if (resultList.getEntries() != null) {
    Map<String,HmDevice> devicesByAddress=new HashMap<String,HmDevice>();
    for (    HmDevice device : devices) {
      devicesByAddress.put(device.getAddress(),device);
    }
    for (    TclScriptDataEntry entry : resultList.getEntries()) {
      HmDevice device=devicesByAddress.get(getSanitizedAddress(entry.name));
      if (device != null) {
        device.setName(entry.value);
      }
    }
  }
  return null;
}",0.9916123019571296
62494,"@Override public List<String> parse(Object[] message) throws IOException {
  List<String> adresses=new ArrayList<String>();
  if (message != null && message.length > 1) {
    Object[] data=(Object[])message[1];
    for (int i=0; i < message.length; i++) {
      String address=toString(data[i]);
      boolean isDevice=!StringUtils.contains(address,""String_Node_Str"") && !StringUtils.startsWithIgnoreCase(address,""String_Node_Str"");
      if (isDevice) {
        adresses.add(address);
      }
    }
  }
  return adresses;
}","@Override public List<String> parse(Object[] message) throws IOException {
  List<String> adresses=new ArrayList<String>();
  if (message != null && message.length > 1) {
    Object[] data=(Object[])message[1];
    for (int i=0; i < message.length; i++) {
      String address=getSanitizedAddress(data[i]);
      boolean isDevice=!StringUtils.contains(address,""String_Node_Str"") && !StringUtils.startsWithIgnoreCase(address,""String_Node_Str"");
      if (isDevice) {
        adresses.add(address);
      }
    }
  }
  return adresses;
}",0.9745042492917848
62495,"@Override public HmDatapointInfo parse(Object[] message) throws IOException {
  String address;
  Integer channel=0;
  String addressWithChannel=toString(message[1]);
  if (""String_Node_Str"".equals(addressWithChannel)) {
    address=HmDevice.ADDRESS_GATEWAY_EXTRAS;
    channel=HmChannel.CHANNEL_NUMBER_VARIABLE;
  }
 else {
    String[] configParts=StringUtils.trimToEmpty(addressWithChannel).split(""String_Node_Str"");
    address=getAddress(configParts[0]);
    if (configParts.length > 1) {
      channel=NumberUtils.createInteger(configParts[1]);
    }
  }
  String name=toString(message[2]);
  value=message[3];
  return new HmDatapointInfo(address,HmParamsetType.VALUES,channel,name);
}","@Override public HmDatapointInfo parse(Object[] message) throws IOException {
  String address;
  Integer channel=0;
  String addressWithChannel=toString(message[1]);
  if (""String_Node_Str"".equals(addressWithChannel)) {
    address=HmDevice.ADDRESS_GATEWAY_EXTRAS;
    channel=HmChannel.CHANNEL_NUMBER_VARIABLE;
  }
 else {
    String[] configParts=StringUtils.trimToEmpty(addressWithChannel).split(""String_Node_Str"");
    address=getSanitizedAddress(configParts[0]);
    if (configParts.length > 1) {
      channel=NumberUtils.createInteger(configParts[1]);
    }
  }
  String name=toString(message[2]);
  value=message[3];
  return new HmDatapointInfo(address,HmParamsetType.VALUES,channel,name);
}",0.9935391241923904
62496,"@Override @SuppressWarnings(""String_Node_Str"") public Void parse(Object[] message) throws IOException {
  Map<String,HmDevice> devicesById=new HashMap<String,HmDevice>();
  for (  HmDevice device : devices) {
    devicesById.put(device.getHomegearId(),device);
  }
  message=(Object[])message[0];
  for (int i=0; i < message.length; i++) {
    Map<String,?> data=(Map<String,?>)message[i];
    String id=toString(data.get(""String_Node_Str""));
    String name=toString(data.get(""String_Node_Str""));
    HmDevice device=devicesById.get(getAddress(id));
    if (device != null) {
      device.setName(name);
    }
  }
  return null;
}","@Override @SuppressWarnings(""String_Node_Str"") public Void parse(Object[] message) throws IOException {
  Map<String,HmDevice> devicesById=new HashMap<String,HmDevice>();
  for (  HmDevice device : devices) {
    devicesById.put(device.getHomegearId(),device);
  }
  message=(Object[])message[0];
  for (int i=0; i < message.length; i++) {
    Map<String,?> data=(Map<String,?>)message[i];
    String id=toString(data.get(""String_Node_Str""));
    String name=toString(data.get(""String_Node_Str""));
    HmDevice device=devicesById.get(getSanitizedAddress(id));
    if (device != null) {
      device.setName(name);
    }
  }
  return null;
}",0.992918961447679
62497,"@SuppressWarnings(""String_Node_Str"") @Override public ListBidcosInterfacesParser parse(Object[] message) throws IOException {
  if (message != null && message.length > 0) {
    message=(Object[])message[0];
    for (int i=0; i < message.length; i++) {
      Map<String,?> mapMessage=(Map<String,?>)message[i];
      boolean isDefault=toBoolean(mapMessage.get(""String_Node_Str""));
      if (isDefault) {
        type=toString(mapMessage.get(""String_Node_Str""));
        firmware=toString(mapMessage.get(""String_Node_Str""));
        gatewayAddress=toString(mapMessage.get(""String_Node_Str""));
      }
    }
  }
  return this;
}","@SuppressWarnings(""String_Node_Str"") @Override public ListBidcosInterfacesParser parse(Object[] message) throws IOException {
  if (message != null && message.length > 0) {
    message=(Object[])message[0];
    for (int i=0; i < message.length; i++) {
      Map<String,?> mapMessage=(Map<String,?>)message[i];
      boolean isDefault=toBoolean(mapMessage.get(""String_Node_Str""));
      if (isDefault) {
        type=toString(mapMessage.get(""String_Node_Str""));
        firmware=toString(mapMessage.get(""String_Node_Str""));
        gatewayAddress=getSanitizedAddress(mapMessage.get(""String_Node_Str""));
      }
    }
  }
  return this;
}",0.9785884218873908
62498,"@Override @SuppressWarnings(""String_Node_Str"") public Collection<HmDevice> parse(Object[] message) throws IOException {
  message=(Object[])message[0];
  Map<String,HmDevice> devices=new HashMap<String,HmDevice>();
  for (int i=0; i < message.length; i++) {
    Map<String,?> data=(Map<String,?>)message[i];
    boolean isDevice=!StringUtils.contains(toString(data.get(""String_Node_Str"")),""String_Node_Str"");
    if (isDevice) {
      String address=getAddress(data.get(""String_Node_Str""));
      String type=MiscUtils.validateCharacters(toString(data.get(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str"");
      String id=toString(data.get(""String_Node_Str""));
      String firmware=toString(data.get(""String_Node_Str""));
      devices.put(address,new HmDevice(address,hmInterface,type,config.getGatewayInfo().getId(),id,firmware));
    }
 else {
      String deviceAddress=getAddress(data.get(""String_Node_Str""));
      HmDevice device=devices.get(deviceAddress);
      String type=toString(data.get(""String_Node_Str""));
      Integer number=toInteger(data.get(""String_Node_Str""));
      device.addChannel(new HmChannel(type,number));
    }
  }
  return devices.values();
}","@Override @SuppressWarnings(""String_Node_Str"") public Collection<HmDevice> parse(Object[] message) throws IOException {
  message=(Object[])message[0];
  Map<String,HmDevice> devices=new HashMap<String,HmDevice>();
  for (int i=0; i < message.length; i++) {
    Map<String,?> data=(Map<String,?>)message[i];
    boolean isDevice=!StringUtils.contains(toString(data.get(""String_Node_Str"")),""String_Node_Str"");
    if (isDevice) {
      String address=getSanitizedAddress(data.get(""String_Node_Str""));
      String type=MiscUtils.validateCharacters(toString(data.get(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str"");
      String id=toString(data.get(""String_Node_Str""));
      String firmware=toString(data.get(""String_Node_Str""));
      devices.put(address,new HmDevice(address,hmInterface,type,config.getGatewayInfo().getId(),id,firmware));
    }
 else {
      String deviceAddress=getSanitizedAddress(data.get(""String_Node_Str""));
      HmDevice device=devices.get(deviceAddress);
      String type=toString(data.get(""String_Node_Str""));
      Integer number=toInteger(data.get(""String_Node_Str""));
      device.addChannel(new HmChannel(type,number));
    }
  }
  return devices.values();
}",0.9924433249370276
62499,"@Override @SuppressWarnings(""String_Node_Str"") public List<String> parse(Object[] message) throws IOException {
  List<String> adresses=new ArrayList<String>();
  if (message != null && message.length > 1) {
    message=(Object[])message[1];
    for (int i=0; i < message.length; i++) {
      Map<String,?> data=(Map<String,?>)message[i];
      String address=toString(data.get(""String_Node_Str""));
      boolean isDevice=!StringUtils.contains(address,""String_Node_Str"") && !StringUtils.startsWithIgnoreCase(address,""String_Node_Str"");
      if (isDevice) {
        adresses.add(address);
      }
    }
  }
  return adresses;
}","@Override @SuppressWarnings(""String_Node_Str"") public List<String> parse(Object[] message) throws IOException {
  List<String> adresses=new ArrayList<String>();
  if (message != null && message.length > 1) {
    message=(Object[])message[1];
    for (int i=0; i < message.length; i++) {
      Map<String,?> data=(Map<String,?>)message[i];
      String address=toString(data.get(""String_Node_Str""));
      boolean isDevice=!StringUtils.contains(address,""String_Node_Str"") && !StringUtils.startsWithIgnoreCase(address,""String_Node_Str"");
      if (isDevice) {
        adresses.add(getSanitizedAddress(address));
      }
    }
  }
  return adresses;
}",0.9725490196078432
62500,"@Test public void validateTemperatureConversion(){
  assertEquals(BigDecimal.ZERO,HeatingModel.fromCelsius(null));
  assertEquals(HeatingModel.TEMP_FRITZ_MIN,HeatingModel.fromCelsius(BigDecimal.ONE));
  assertEquals(HeatingModel.TEMP_FRITZ_MIN,HeatingModel.fromCelsius(new BigDecimal(7.5)));
  assertEquals(new BigDecimal(16),HeatingModel.fromCelsius(new BigDecimal(8)));
  assertEquals(new BigDecimal(28),HeatingModel.fromCelsius(new BigDecimal(14)));
  assertEquals(new BigDecimal(29),HeatingModel.fromCelsius(new BigDecimal(14.5)));
  assertEquals(new BigDecimal(56),HeatingModel.fromCelsius(new BigDecimal(28)));
  assertEquals(HeatingModel.TEMP_FRITZ_MAX,HeatingModel.fromCelsius(new BigDecimal(28.5)));
  assertEquals(HeatingModel.TEMP_FRITZ_MAX,HeatingModel.fromCelsius(new BigDecimal(30)));
  assertEquals(BigDecimal.ZERO,HeatingModel.toCelsius(null));
  assertEquals(new BigDecimal(""String_Node_Str""),HeatingModel.toCelsius(new BigDecimal(28)));
  assertEquals(new BigDecimal(""String_Node_Str""),HeatingModel.toCelsius(new BigDecimal(29)));
  assertEquals(new BigDecimal(""String_Node_Str""),HeatingModel.toCelsius(new BigDecimal(253)));
  assertEquals(new BigDecimal(""String_Node_Str""),HeatingModel.toCelsius(new BigDecimal(254)));
}","@Test public void validateTemperatureConversion(){
  assertEquals(BigDecimal.ZERO,HeatingModel.fromCelsius(null));
  assertEquals(HeatingModel.TEMP_FRITZ_MIN,HeatingModel.fromCelsius(BigDecimal.ONE));
  assertEquals(HeatingModel.TEMP_FRITZ_MIN,HeatingModel.fromCelsius(new BigDecimal(""String_Node_Str"")));
  assertEquals(new BigDecimal(""String_Node_Str""),HeatingModel.fromCelsius(new BigDecimal(""String_Node_Str"")));
  assertEquals(new BigDecimal(""String_Node_Str""),HeatingModel.fromCelsius(new BigDecimal(""String_Node_Str"")));
  assertEquals(new BigDecimal(""String_Node_Str""),HeatingModel.fromCelsius(new BigDecimal(""String_Node_Str"")));
  assertEquals(new BigDecimal(""String_Node_Str""),HeatingModel.fromCelsius(new BigDecimal(""String_Node_Str"")));
  assertEquals(HeatingModel.TEMP_FRITZ_MAX,HeatingModel.fromCelsius(new BigDecimal(""String_Node_Str"")));
  assertEquals(HeatingModel.TEMP_FRITZ_MAX,HeatingModel.fromCelsius(new BigDecimal(""String_Node_Str"")));
  assertEquals(BigDecimal.ZERO,HeatingModel.toCelsius(null));
  assertEquals(new BigDecimal(""String_Node_Str""),HeatingModel.toCelsius(new BigDecimal(""String_Node_Str"")));
  assertEquals(new BigDecimal(""String_Node_Str""),HeatingModel.toCelsius(new BigDecimal(""String_Node_Str"")));
  assertEquals(new BigDecimal(""String_Node_Str""),HeatingModel.toCelsius(new BigDecimal(""String_Node_Str"")));
  assertEquals(new BigDecimal(""String_Node_Str""),HeatingModel.toCelsius(new BigDecimal(""String_Node_Str"")));
}",0.8921822897369396
62501,"/** 
 * Handle the commands for switchable outlets or heating thermostats. TODO: test switch behaviour on PL546E stand-alone
 */
@Override public void handleCommand(ChannelUID channelUID,Command command){
  String channelId=channelUID.getIdWithoutGroup();
  logger.debug(""String_Node_Str"",command,channelId);
  FritzahaWebInterface fritzBox=getWebInterface();
  if (fritzBox == null) {
    return;
  }
  String ain=getThing().getConfiguration().get(THING_AIN).toString();
switch (channelId) {
case CHANNEL_MODE:
case CHANNEL_LOCKED:
case CHANNEL_DEVICE_LOCKED:
case CHANNEL_TEMP:
case CHANNEL_ENERGY:
case CHANNEL_POWER:
case CHANNEL_ACTUALTEMP:
case CHANNEL_ECOTEMP:
case CHANNEL_COMFORTTEMP:
case CHANNEL_NEXTCHANGE:
case CHANNEL_NEXTTEMP:
case CHANNEL_BATTERY:
    logger.debug(""String_Node_Str"",channelId,command);
  break;
case CHANNEL_SWITCH:
if (command instanceof OnOffType) {
  state.getSwitch().setState(OnOffType.ON.equals(command) ? SwitchModel.ON : SwitchModel.OFF);
  fritzBox.setSwitch(ain,OnOffType.ON.equals(command));
}
 else {
  logger.warn(""String_Node_Str"",command,CHANNEL_SWITCH);
}
break;
case CHANNEL_SETTEMP:
if (command instanceof DecimalType) {
BigDecimal temperature=new BigDecimal(command.toString());
state.getHkr().setTsoll(temperature);
fritzBox.setSetTemp(ain,HeatingModel.fromCelsius(temperature));
updateState(CHANNEL_RADIATOR_MODE,new StringType(state.getHkr().getRadiatorMode()));
}
 else if (command instanceof IncreaseDecreaseType) {
BigDecimal temperature=state.getHkr().getTsoll();
if (IncreaseDecreaseType.INCREASE.equals(command)) {
temperature.add(BigDecimal.ONE);
}
 else {
temperature.subtract(BigDecimal.ONE);
}
state.getHkr().setTsoll(temperature);
fritzBox.setSetTemp(ain,temperature);
updateState(CHANNEL_RADIATOR_MODE,new StringType(state.getHkr().getRadiatorMode()));
}
 else if (command instanceof OnOffType) {
BigDecimal temperature=OnOffType.ON.equals(command) ? HeatingModel.TEMP_FRITZ_ON : HeatingModel.TEMP_FRITZ_OFF;
state.getHkr().setTsoll(temperature);
fritzBox.setSetTemp(ain,temperature);
updateState(CHANNEL_RADIATOR_MODE,new StringType(state.getHkr().getRadiatorMode()));
}
 else {
logger.warn(""String_Node_Str"",command,CHANNEL_SETTEMP);
}
break;
case CHANNEL_RADIATOR_MODE:
if (command instanceof StringType) {
String commandString=command.toString();
if (MODE_ON.equals(commandString)) {
state.getHkr().setTsoll(HeatingModel.TEMP_FRITZ_ON);
fritzBox.setSetTemp(ain,HeatingModel.TEMP_FRITZ_ON);
updateState(CHANNEL_SETTEMP,new DecimalType(HeatingModel.toCelsius(HeatingModel.TEMP_FRITZ_ON)));
}
 else if (MODE_OFF.equals(commandString)) {
state.getHkr().setTsoll(HeatingModel.TEMP_FRITZ_OFF);
fritzBox.setSetTemp(ain,HeatingModel.TEMP_FRITZ_OFF);
updateState(CHANNEL_SETTEMP,new DecimalType(HeatingModel.toCelsius(HeatingModel.TEMP_FRITZ_OFF)));
}
 else if (MODE_COMFORT.equals(commandString)) {
BigDecimal comfort_temp=state.getHkr().getKomfort();
state.getHkr().setTsoll(comfort_temp);
fritzBox.setSetTemp(ain,comfort_temp);
updateState(CHANNEL_SETTEMP,new DecimalType(HeatingModel.toCelsius(comfort_temp)));
}
 else if (MODE_ECO.equals(commandString)) {
BigDecimal eco_temp=state.getHkr().getAbsenk();
state.getHkr().setTsoll(eco_temp);
fritzBox.setSetTemp(ain,eco_temp);
updateState(CHANNEL_SETTEMP,new DecimalType(HeatingModel.toCelsius(eco_temp)));
}
 else if (MODE_BOOST.equals(commandString)) {
state.getHkr().setTsoll(HeatingModel.TEMP_FRITZ_MAX);
fritzBox.setSetTemp(ain,HeatingModel.TEMP_FRITZ_MAX);
updateState(CHANNEL_SETTEMP,new DecimalType(HeatingModel.toCelsius(HeatingModel.TEMP_FRITZ_MAX)));
}
 else {
logger.warn(""String_Node_Str"",command,CHANNEL_RADIATOR_MODE);
}
}
break;
default :
logger.debug(""String_Node_Str"",channelId);
break;
}
}","/** 
 * Handle the commands for switchable outlets or heating thermostats. TODO: test switch behaviour on PL546E stand-alone
 */
@Override public void handleCommand(ChannelUID channelUID,Command command){
  String channelId=channelUID.getIdWithoutGroup();
  logger.debug(""String_Node_Str"",command,channelId);
  FritzahaWebInterface fritzBox=getWebInterface();
  if (fritzBox == null) {
    return;
  }
  String ain=getThing().getConfiguration().get(THING_AIN).toString();
switch (channelId) {
case CHANNEL_MODE:
case CHANNEL_LOCKED:
case CHANNEL_DEVICE_LOCKED:
case CHANNEL_TEMP:
case CHANNEL_ENERGY:
case CHANNEL_POWER:
case CHANNEL_ACTUALTEMP:
case CHANNEL_ECOTEMP:
case CHANNEL_COMFORTTEMP:
case CHANNEL_NEXTCHANGE:
case CHANNEL_NEXTTEMP:
case CHANNEL_BATTERY:
    logger.debug(""String_Node_Str"",channelId,command);
  break;
case CHANNEL_SWITCH:
if (command instanceof OnOffType) {
  state.getSwitch().setState(OnOffType.ON.equals(command) ? SwitchModel.ON : SwitchModel.OFF);
  fritzBox.setSwitch(ain,OnOffType.ON.equals(command));
}
 else {
  logger.warn(""String_Node_Str"",command,CHANNEL_SWITCH);
}
break;
case CHANNEL_SETTEMP:
if (command instanceof DecimalType) {
BigDecimal temperature=((DecimalType)command).toBigDecimal();
state.getHkr().setTsoll(temperature);
fritzBox.setSetTemp(ain,HeatingModel.fromCelsius(temperature));
updateState(CHANNEL_RADIATOR_MODE,new StringType(state.getHkr().getRadiatorMode()));
}
 else if (command instanceof IncreaseDecreaseType) {
BigDecimal temperature=state.getHkr().getTsoll();
if (IncreaseDecreaseType.INCREASE.equals(command)) {
temperature.add(BigDecimal.ONE);
}
 else {
temperature.subtract(BigDecimal.ONE);
}
state.getHkr().setTsoll(temperature);
fritzBox.setSetTemp(ain,temperature);
updateState(CHANNEL_RADIATOR_MODE,new StringType(state.getHkr().getRadiatorMode()));
}
 else if (command instanceof OnOffType) {
BigDecimal temperature=OnOffType.ON.equals(command) ? HeatingModel.TEMP_FRITZ_ON : HeatingModel.TEMP_FRITZ_OFF;
state.getHkr().setTsoll(temperature);
fritzBox.setSetTemp(ain,temperature);
updateState(CHANNEL_RADIATOR_MODE,new StringType(state.getHkr().getRadiatorMode()));
}
 else {
logger.warn(""String_Node_Str"",command,CHANNEL_SETTEMP);
}
break;
case CHANNEL_RADIATOR_MODE:
if (command instanceof StringType) {
String commandString=command.toString();
if (MODE_ON.equals(commandString)) {
state.getHkr().setTsoll(HeatingModel.TEMP_FRITZ_ON);
fritzBox.setSetTemp(ain,HeatingModel.TEMP_FRITZ_ON);
updateState(CHANNEL_SETTEMP,new DecimalType(HeatingModel.toCelsius(HeatingModel.TEMP_FRITZ_ON)));
}
 else if (MODE_OFF.equals(commandString)) {
state.getHkr().setTsoll(HeatingModel.TEMP_FRITZ_OFF);
fritzBox.setSetTemp(ain,HeatingModel.TEMP_FRITZ_OFF);
updateState(CHANNEL_SETTEMP,new DecimalType(HeatingModel.toCelsius(HeatingModel.TEMP_FRITZ_OFF)));
}
 else if (MODE_COMFORT.equals(commandString)) {
BigDecimal comfort_temp=state.getHkr().getKomfort();
state.getHkr().setTsoll(comfort_temp);
fritzBox.setSetTemp(ain,comfort_temp);
updateState(CHANNEL_SETTEMP,new DecimalType(HeatingModel.toCelsius(comfort_temp)));
}
 else if (MODE_ECO.equals(commandString)) {
BigDecimal eco_temp=state.getHkr().getAbsenk();
state.getHkr().setTsoll(eco_temp);
fritzBox.setSetTemp(ain,eco_temp);
updateState(CHANNEL_SETTEMP,new DecimalType(HeatingModel.toCelsius(eco_temp)));
}
 else if (MODE_BOOST.equals(commandString)) {
state.getHkr().setTsoll(HeatingModel.TEMP_FRITZ_MAX);
fritzBox.setSetTemp(ain,HeatingModel.TEMP_FRITZ_MAX);
updateState(CHANNEL_SETTEMP,new DecimalType(HeatingModel.toCelsius(HeatingModel.TEMP_FRITZ_MAX)));
}
 else {
logger.warn(""String_Node_Str"",command,CHANNEL_RADIATOR_MODE);
}
}
break;
default :
logger.debug(""String_Node_Str"",channelId);
break;
}
}",0.9936887337182758
62502,"public static BigDecimal fromCelsius(BigDecimal celsiusValue){
  if (celsiusValue == null) {
    return BigDecimal.ZERO;
  }
 else   if (TEMP_CELSIUS_MIN.compareTo(celsiusValue) == 1) {
    return TEMP_FRITZ_MIN;
  }
 else   if (TEMP_CELSIUS_MAX.compareTo(celsiusValue) == -1) {
    return TEMP_FRITZ_MAX;
  }
  return celsiusValue.divide(TEMP_FACTOR);
}","public static BigDecimal fromCelsius(BigDecimal celsiusValue){
  if (celsiusValue == null) {
    return BigDecimal.ZERO;
  }
 else   if (TEMP_CELSIUS_MIN.compareTo(celsiusValue) == 1) {
    return TEMP_FRITZ_MIN;
  }
 else   if (TEMP_CELSIUS_MAX.compareTo(celsiusValue) == -1) {
    return TEMP_FRITZ_MAX;
  }
  return BIG_DECIMAL_TWO.multiply(celsiusValue);
}",0.907563025210084
62503,"public static BigDecimal toCelsius(BigDecimal fritzValue){
  if (fritzValue == null) {
    return BigDecimal.ZERO;
  }
 else   if (TEMP_FRITZ_ON.compareTo(fritzValue) == 0) {
    return TEMP_CELSIUS_MAX.add(new BigDecimal(""String_Node_Str""));
  }
 else   if (TEMP_FRITZ_OFF.compareTo(fritzValue) == 0) {
    return TEMP_CELSIUS_MIN.subtract(new BigDecimal(""String_Node_Str""));
  }
  return TEMP_FACTOR.multiply(fritzValue);
}","public static BigDecimal toCelsius(BigDecimal fritzValue){
  if (fritzValue == null) {
    return BigDecimal.ZERO;
  }
 else   if (TEMP_FRITZ_ON.compareTo(fritzValue) == 0) {
    return TEMP_CELSIUS_MAX.add(BIG_DECIMAL_TWO);
  }
 else   if (TEMP_FRITZ_OFF.compareTo(fritzValue) == 0) {
    return TEMP_CELSIUS_MIN.subtract(BIG_DECIMAL_TWO);
  }
  return TEMP_FACTOR.multiply(fritzValue);
}",0.8820638820638821
62504,"@GET @Produces({MediaType.TEXT_PLAIN}) public Response getValue(@PathParam(""String_Node_Str"") String actionName){
  if (""String_Node_Str"".equalsIgnoreCase(actionName)) {
    logger.debug(""String_Node_Str"");
    ClientInstaller.getInstance().check(true);
  }
 else {
    logger.error(""String_Node_Str"",actionName);
    return Response.status(404).build();
  }
  return Response.ok().build();
}","@GET @Path(""String_Node_Str"") @Produces({MediaType.TEXT_PLAIN}) public Response getValue(@PathParam(""String_Node_Str"") String actionName){
  if (""String_Node_Str"".equalsIgnoreCase(actionName)) {
    logger.debug(""String_Node_Str"");
    ClientInstaller.getInstance().check(true);
  }
 else {
    logger.error(""String_Node_Str"",actionName);
    return Response.status(404).build();
  }
  return Response.ok().build();
}",0.969097651421508
62505,"private void readConfiguration(final Map<String,Object> properties){
  if (properties != null) {
    setProperties(properties);
    if (properties.get(Config.COMETVISU_WEBFOLDER_PROPERTY) != null) {
      Config.COMETVISU_WEBFOLDER=(String)properties.get(Config.COMETVISU_WEBFOLDER_PROPERTY);
    }
    if (properties.get(Config.COMETVISU_WEBAPP_ALIAS_PROPERTY) != null) {
      Config.COMETVISU_WEBAPP_ALIAS=(String)properties.get(Config.COMETVISU_WEBAPP_ALIAS_PROPERTY);
    }
    if (properties.get(Config.COMETVISU_AUTODOWNLOAD_PROPERTY) != null) {
      Boolean newValue=(Boolean)properties.get(Config.COMETVISU_AUTODOWNLOAD_PROPERTY);
      boolean changed=Config.COMETVISU_AUTO_DOWNLOAD != newValue;
      Config.COMETVISU_AUTO_DOWNLOAD=newValue;
      if (Config.COMETVISU_AUTO_DOWNLOAD && changed) {
        installer.check();
      }
      Config.COMETVISU_AUTO_DOWNLOAD=newValue;
    }
    for (    String key : properties.keySet()) {
      String[] parts=key.split(""String_Node_Str"");
      String propKey=parts.length > 1 ? parts[1] : parts[0];
      String propPid=parts.length > 1 ? parts[0] : ""String_Node_Str"";
      logger.debug(""String_Node_Str"",propPid,propKey,properties.get(key),parts.length);
      if (!propPid.isEmpty()) {
        if (Config.configMappings.containsKey(propPid)) {
          Config.configMappings.get(propPid).put(propKey,properties.get(key));
        }
      }
    }
  }
}","private void readConfiguration(final Map<String,Object> properties){
  if (properties != null) {
    setProperties(properties);
    if (properties.get(Config.COMETVISU_WEBFOLDER_PROPERTY) != null) {
      Config.COMETVISU_WEBFOLDER=(String)properties.get(Config.COMETVISU_WEBFOLDER_PROPERTY);
    }
    if (properties.get(Config.COMETVISU_WEBAPP_ALIAS_PROPERTY) != null) {
      Config.COMETVISU_WEBAPP_ALIAS=(String)properties.get(Config.COMETVISU_WEBAPP_ALIAS_PROPERTY);
    }
    if (properties.get(Config.COMETVISU_AUTODOWNLOAD_PROPERTY) != null) {
      Boolean newValue=Boolean.valueOf((String)properties.get(Config.COMETVISU_AUTODOWNLOAD_PROPERTY));
      boolean changed=Config.COMETVISU_AUTO_DOWNLOAD != newValue;
      Config.COMETVISU_AUTO_DOWNLOAD=newValue;
      if (Config.COMETVISU_AUTO_DOWNLOAD && changed) {
        installer.check();
      }
      Config.COMETVISU_AUTO_DOWNLOAD=newValue;
    }
    for (    String key : properties.keySet()) {
      String[] parts=key.split(""String_Node_Str"");
      String propKey=parts.length > 1 ? parts[1] : parts[0];
      String propPid=parts.length > 1 ? parts[0] : ""String_Node_Str"";
      logger.debug(""String_Node_Str"",propPid,propKey,properties.get(key),parts.length);
      if (!propPid.isEmpty()) {
        if (Config.configMappings.containsKey(propPid)) {
          Config.configMappings.get(propPid).put(propKey,properties.get(key));
        }
      }
    }
  }
}",0.9936708860759492
62506,"private void restorePlayerState(){
  logger.debug(""String_Node_Str"");
  if (!playerState.isStopped()) {
    logger.debug(""String_Node_Str"");
    squeezeBoxServerHandler.playPlaylistItem(mac,playerState.getPlaylistIndex());
    squeezeBoxServerHandler.setPlayingTime(mac,playerState.getPlayingTime());
  }
 else   if (!playerState.isPlaying()) {
    logger.debug(""String_Node_Str"");
    squeezeBoxServerHandler.pause(mac);
  }
 else {
    logger.debug(""String_Node_Str"");
    squeezeBoxServerHandler.stop(mac);
  }
  squeezeBoxServerHandler.setVolume(mac,playerState.getVolume());
  if (playerState.isShuffling()) {
    logger.debug(""String_Node_Str"");
    squeezeBoxServerHandler.setShuffleMode(mac,playerState.getShuffle());
  }
  if (playerState.isRepeating()) {
    logger.debug(""String_Node_Str"");
    squeezeBoxServerHandler.setRepeatMode(mac,playerState.getRepeat());
  }
  if (playerState.isMuted()) {
    logger.debug(""String_Node_Str"");
    squeezeBoxServerHandler.mute(mac);
  }
  if (!playerState.isPoweredOn()) {
    logger.debug(""String_Node_Str"");
    squeezeBoxServerHandler.powerOff(mac);
  }
}","private void restorePlayerState(){
  logger.debug(""String_Node_Str"");
  squeezeBoxServerHandler.playPlaylistItem(mac,playerState.getPlaylistIndex());
  squeezeBoxServerHandler.setPlayingTime(mac,playerState.getPlayingTime());
switch (playerState.getPlayState()) {
case PLAY:
    logger.debug(""String_Node_Str"");
  break;
case PAUSE:
logger.debug(""String_Node_Str"");
squeezeBoxServerHandler.pause(mac);
break;
case STOP:
logger.debug(""String_Node_Str"");
squeezeBoxServerHandler.stop(mac);
break;
}
squeezeBoxServerHandler.setVolume(mac,playerState.getVolume());
if (playerState.isShuffling()) {
logger.debug(""String_Node_Str"");
squeezeBoxServerHandler.setShuffleMode(mac,playerState.getShuffle());
}
if (playerState.isRepeating()) {
logger.debug(""String_Node_Str"");
squeezeBoxServerHandler.setRepeatMode(mac,playerState.getRepeat());
}
if (playerState.isMuted()) {
logger.debug(""String_Node_Str"");
squeezeBoxServerHandler.mute(mac);
}
if (!playerState.isPoweredOn()) {
logger.debug(""String_Node_Str"");
squeezeBoxServerHandler.powerOff(mac);
}
}",0.1467719461216906
62507,"/** 
 * Download and cache the image data from an URL.
 * @param url The URL of the image to be downloaded.
 * @return A RawType object containing the image, null if the content type could not be found or the content type isnot an image.
 */
private RawType downloadImage(String url){
  if (StringUtils.isNotEmpty(url)) {
    if (!IMAGE_CACHE.containsKey(url)) {
      IMAGE_CACHE.put(url,() -> {
        logger.debug(""String_Node_Str"",url);
        return HttpUtil.downloadImage(url);
      }
);
    }
    RawType image=IMAGE_CACHE.get(url);
    if (image == null) {
      logger.debug(""String_Node_Str"",url);
      return null;
    }
 else {
      return image;
    }
  }
  return null;
}","/** 
 * Download and cache the image data from an URL.
 * @param url The URL of the image to be downloaded.
 * @return A RawType object containing the image, null if the content type could not be found or the content type isnot an image.
 */
private RawType downloadImage(String mac,String url){
  if (isMe(mac)) {
    if (StringUtils.isNotEmpty(url)) {
      RawType image=IMAGE_CACHE.putIfAbsentAndGet(url,() -> {
        logger.debug(""String_Node_Str"",url);
        try {
          return HttpUtil.downloadImage(url);
        }
 catch (        IllegalArgumentException e) {
          logger.debug(""String_Node_Str"",url,e);
          return null;
        }
      }
);
      if (image == null) {
        logger.debug(""String_Node_Str"",url);
        return null;
      }
 else {
        return image;
      }
    }
  }
  return null;
}",0.6649180327868852
62508,"@Override public void coverArtChangeEvent(String mac,String coverArtUrl){
  updateChannel(mac,CHANNEL_COVERART_DATA,createImage(downloadImage(coverArtUrl)));
}","@Override public void coverArtChangeEvent(String mac,String coverArtUrl){
  updateChannel(mac,CHANNEL_COVERART_DATA,createImage(downloadImage(mac,coverArtUrl)));
}",0.9875776397515528
62509,"private void handleStatusMessage(final String mac,String[] messageParts){
  String remoteTitle=""String_Node_Str"", artist=""String_Node_Str"", album=""String_Node_Str"", genre=""String_Node_Str"", year=""String_Node_Str"";
  String url=fetchUrl(mac);
  for (  String messagePart : messageParts) {
    if (messagePart.startsWith(""String_Node_Str"")) {
      String value=messagePart.substring(""String_Node_Str"".length());
      final boolean power=value.matches(""String_Node_Str"");
      updatePlayer(new PlayerUpdateEvent(){
        @Override public void updateListener(        SqueezeBoxPlayerEventListener listener){
          listener.powerChangeEvent(mac,power);
        }
      }
);
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      String value=messagePart.substring(""String_Node_Str"".length());
      final int volume=(int)Double.parseDouble(value);
      updatePlayer(new PlayerUpdateEvent(){
        @Override public void updateListener(        SqueezeBoxPlayerEventListener listener){
          listener.absoluteVolumeChangeEvent(mac,volume);
        }
      }
);
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      final String mode=messagePart.substring(""String_Node_Str"".length());
      updatePlayer(new PlayerUpdateEvent(){
        @Override public void updateListener(        SqueezeBoxPlayerEventListener listener){
          listener.modeChangeEvent(mac,mode);
        }
      }
);
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      String value=messagePart.substring(""String_Node_Str"".length());
      final int time=(int)Double.parseDouble(value);
      updatePlayer(new PlayerUpdateEvent(){
        @Override public void updateListener(        SqueezeBoxPlayerEventListener listener){
          listener.currentPlayingTimeEvent(mac,time);
        }
      }
);
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      String value=messagePart.substring(""String_Node_Str"".length());
      final int duration=(int)Double.parseDouble(value);
      updatePlayer(new PlayerUpdateEvent(){
        @Override public void updateListener(        SqueezeBoxPlayerEventListener listener){
          listener.durationEvent(mac,duration);
        }
      }
);
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      String value=messagePart.substring(""String_Node_Str"".length());
      final int index=(int)Double.parseDouble(value);
      updatePlayer(new PlayerUpdateEvent(){
        @Override public void updateListener(        SqueezeBoxPlayerEventListener listener){
          listener.currentPlaylistIndexEvent(mac,index);
        }
      }
);
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      String value=messagePart.substring(""String_Node_Str"".length());
      final int track=(int)Double.parseDouble(value);
      updatePlayer(new PlayerUpdateEvent(){
        @Override public void updateListener(        SqueezeBoxPlayerEventListener listener){
          listener.numberPlaylistTracksEvent(mac,track);
        }
      }
);
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      String value=messagePart.substring(""String_Node_Str"".length());
      final int repeat=(int)Double.parseDouble(value);
      updatePlayer(new PlayerUpdateEvent(){
        @Override public void updateListener(        SqueezeBoxPlayerEventListener listener){
          listener.currentPlaylistRepeatEvent(mac,repeat);
        }
      }
);
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      String value=messagePart.substring(""String_Node_Str"".length());
      final int shuffle=(int)Double.parseDouble(value);
      updatePlayer(new PlayerUpdateEvent(){
        @Override public void updateListener(        SqueezeBoxPlayerEventListener listener){
          listener.currentPlaylistShuffleEvent(mac,shuffle);
        }
      }
);
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      final String value=messagePart.substring(""String_Node_Str"".length());
      updatePlayer(new PlayerUpdateEvent(){
        @Override public void updateListener(        SqueezeBoxPlayerEventListener listener){
          listener.titleChangeEvent(mac,decode(value));
        }
      }
);
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      remoteTitle=messagePart.substring(""String_Node_Str"".length());
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      artist=messagePart.substring(""String_Node_Str"".length());
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      album=messagePart.substring(""String_Node_Str"".length());
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      genre=messagePart.substring(""String_Node_Str"".length());
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      year=messagePart.substring(""String_Node_Str"".length());
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      url=fetchUrl(messagePart,mac);
    }
 else {
      logger.trace(""String_Node_Str"",messagePart);
    }
  }
  final String finalUrl=url;
  final String finalRemoteTitle=remoteTitle;
  final String finalArtist=artist;
  final String finalAlbum=album;
  final String finalGenre=genre;
  final String finalYear=year;
  updatePlayer(new PlayerUpdateEvent(){
    @Override public void updateListener(    SqueezeBoxPlayerEventListener listener){
      listener.coverArtChangeEvent(mac,finalUrl);
      listener.remoteTitleChangeEvent(mac,decode(finalRemoteTitle));
      listener.artistChangeEvent(mac,decode(finalArtist));
      listener.albumChangeEvent(mac,decode(finalAlbum));
      listener.genreChangeEvent(mac,decode(finalGenre));
      listener.yearChangeEvent(mac,decode(finalYear));
    }
  }
);
}","private void handleStatusMessage(final String mac,String[] messageParts){
  String remoteTitle=""String_Node_Str"", artist=""String_Node_Str"", album=""String_Node_Str"", genre=""String_Node_Str"", year=""String_Node_Str"";
  boolean coverart=false;
  String coverid=null;
  String artworkUrl=null;
  for (  String messagePart : messageParts) {
    if (messagePart.startsWith(""String_Node_Str"")) {
      final boolean power=""String_Node_Str"".matches(messagePart.substring(""String_Node_Str"".length()));
      updatePlayer(new PlayerUpdateEvent(){
        @Override public void updateListener(        SqueezeBoxPlayerEventListener listener){
          listener.powerChangeEvent(mac,power);
        }
      }
);
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      String value=messagePart.substring(""String_Node_Str"".length());
      final int volume=(int)Double.parseDouble(value);
      updatePlayer(new PlayerUpdateEvent(){
        @Override public void updateListener(        SqueezeBoxPlayerEventListener listener){
          listener.absoluteVolumeChangeEvent(mac,volume);
        }
      }
);
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      final String mode=messagePart.substring(""String_Node_Str"".length());
      updatePlayer(new PlayerUpdateEvent(){
        @Override public void updateListener(        SqueezeBoxPlayerEventListener listener){
          listener.modeChangeEvent(mac,mode);
        }
      }
);
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      String value=messagePart.substring(""String_Node_Str"".length());
      final int time=(int)Double.parseDouble(value);
      updatePlayer(new PlayerUpdateEvent(){
        @Override public void updateListener(        SqueezeBoxPlayerEventListener listener){
          listener.currentPlayingTimeEvent(mac,time);
        }
      }
);
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      String value=messagePart.substring(""String_Node_Str"".length());
      final int duration=(int)Double.parseDouble(value);
      updatePlayer(new PlayerUpdateEvent(){
        @Override public void updateListener(        SqueezeBoxPlayerEventListener listener){
          listener.durationEvent(mac,duration);
        }
      }
);
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      String value=messagePart.substring(""String_Node_Str"".length());
      final int index=(int)Double.parseDouble(value);
      updatePlayer(new PlayerUpdateEvent(){
        @Override public void updateListener(        SqueezeBoxPlayerEventListener listener){
          listener.currentPlaylistIndexEvent(mac,index);
        }
      }
);
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      String value=messagePart.substring(""String_Node_Str"".length());
      final int track=(int)Double.parseDouble(value);
      updatePlayer(new PlayerUpdateEvent(){
        @Override public void updateListener(        SqueezeBoxPlayerEventListener listener){
          listener.numberPlaylistTracksEvent(mac,track);
        }
      }
);
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      String value=messagePart.substring(""String_Node_Str"".length());
      final int repeat=(int)Double.parseDouble(value);
      updatePlayer(new PlayerUpdateEvent(){
        @Override public void updateListener(        SqueezeBoxPlayerEventListener listener){
          listener.currentPlaylistRepeatEvent(mac,repeat);
        }
      }
);
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      String value=messagePart.substring(""String_Node_Str"".length());
      final int shuffle=(int)Double.parseDouble(value);
      updatePlayer(new PlayerUpdateEvent(){
        @Override public void updateListener(        SqueezeBoxPlayerEventListener listener){
          listener.currentPlaylistShuffleEvent(mac,shuffle);
        }
      }
);
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      final String value=messagePart.substring(""String_Node_Str"".length());
      updatePlayer(new PlayerUpdateEvent(){
        @Override public void updateListener(        SqueezeBoxPlayerEventListener listener){
          listener.titleChangeEvent(mac,decode(value));
        }
      }
);
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      remoteTitle=messagePart.substring(""String_Node_Str"".length());
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      artist=messagePart.substring(""String_Node_Str"".length());
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      album=messagePart.substring(""String_Node_Str"".length());
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      genre=messagePart.substring(""String_Node_Str"".length());
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      year=messagePart.substring(""String_Node_Str"".length());
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      artworkUrl=messagePart.substring(""String_Node_Str"".length());
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      coverart=""String_Node_Str"".matches(messagePart.substring(""String_Node_Str"".length()));
    }
 else     if (messagePart.startsWith(""String_Node_Str"")) {
      coverid=messagePart.substring(""String_Node_Str"".length());
    }
 else {
      logger.trace(""String_Node_Str"",messagePart);
    }
  }
  final String finalUrl=constructCoverArtUrl(mac,coverart,coverid,artworkUrl);
  final String finalRemoteTitle=remoteTitle;
  final String finalArtist=artist;
  final String finalAlbum=album;
  final String finalGenre=genre;
  final String finalYear=year;
  updatePlayer(new PlayerUpdateEvent(){
    @Override public void updateListener(    SqueezeBoxPlayerEventListener listener){
      listener.coverArtChangeEvent(mac,finalUrl);
      listener.remoteTitleChangeEvent(mac,decode(finalRemoteTitle));
      listener.artistChangeEvent(mac,decode(finalArtist));
      listener.albumChangeEvent(mac,decode(finalAlbum));
      listener.genreChangeEvent(mac,decode(finalGenre));
      listener.yearChangeEvent(mac,decode(finalYear));
    }
  }
);
}",0.9063449206884914
62510,"public boolean matchesId(String searchedId){
  return searchedId != null ? searchedId.equalsIgnoreCase(getId()) : false;
}","public boolean matchesId(String searchedId){
  return searchedId != null && searchedId.equalsIgnoreCase(getId());
}",0.9535864978902954
62511,"private String getApiScope(){
  List<String> scopes=new ArrayList<>();
  if (configuration.readStation) {
    scopes.add(""String_Node_Str"");
  }
  if (configuration.readThermostat) {
    scopes.add(""String_Node_Str"");
    scopes.add(""String_Node_Str"");
  }
  if (configuration.readHealthyHomeCoach) {
    scopes.add(""String_Node_Str"");
  }
  if (configuration.readWelcome) {
    scopes.add(""String_Node_Str"");
    scopes.add(""String_Node_Str"");
    scopes.add(""String_Node_Str"");
  }
  String result=String.join(""String_Node_Str"",scopes);
  return result;
}","private String getApiScope(){
  List<String> scopes=new ArrayList<>();
  if (configuration.readStation) {
    scopes.add(""String_Node_Str"");
  }
  if (configuration.readThermostat) {
    scopes.add(""String_Node_Str"");
    scopes.add(""String_Node_Str"");
  }
  if (configuration.readHealthyHomeCoach) {
    scopes.add(""String_Node_Str"");
  }
  if (configuration.readWelcome) {
    scopes.add(""String_Node_Str"");
    scopes.add(""String_Node_Str"");
    scopes.add(""String_Node_Str"");
  }
  return String.join(""String_Node_Str"",scopes);
}",0.9669724770642202
62512,"/** 
 * Returns the Url of the picture
 * @return Url of the picture or UnDefType.UNDEF
 */
public String getPictureUrl(String id,String key){
  StringBuffer ret=new StringBuffer();
  if (id != null && key != null) {
    ret.append(WELCOME_PICTURE_URL).append(""String_Node_Str"").append(WELCOME_PICTURE_IMAGEID).append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(WELCOME_PICTURE_KEY).append(""String_Node_Str"").append(key);
  }
  return ret.toString();
}","/** 
 * Returns the Url of the picture
 * @return Url of the picture or UnDefType.UNDEF
 */
public String getPictureUrl(String id,String key){
  StringBuilder ret=new StringBuilder();
  if (id != null && key != null) {
    ret.append(WELCOME_PICTURE_URL).append(""String_Node_Str"").append(WELCOME_PICTURE_IMAGEID).append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(WELCOME_PICTURE_KEY).append(""String_Node_Str"").append(key);
  }
  return ret.toString();
}",0.989406779661017
62513,"public void webHookEvent(NAWebhookCameraEvent event){
  if (event.getAppType() == NAWebhookCameraEvent.AppTypeEnum.CAMERA) {
    Set<AbstractNetatmoThingHandler> modules=new HashSet<>();
    if (WELCOME_EVENTS.contains(event.getEventType()) || PRESENCE_EVENTS.contains(event.getEventType())) {
      String cameraId=event.getCameraId();
      if (cameraId != null) {
        Optional<AbstractNetatmoThingHandler> camera=findNAThing(cameraId);
        camera.ifPresent(aCamera -> modules.add(aCamera));
      }
    }
    if (HOME_EVENTS.contains(event.getEventType())) {
      String homeId=event.getHomeId();
      if (homeId != null) {
        Optional<AbstractNetatmoThingHandler> home=findNAThing(homeId);
        home.ifPresent(aHome -> modules.add(aHome));
      }
    }
    if (PERSON_EVENTS.contains(event.getEventType())) {
      List<NAWebhookCameraEventPerson> persons=event.getPersons();
      persons.forEach(person -> {
        String personId=person.getId();
        if (personId != null) {
          Optional<AbstractNetatmoThingHandler> personHandler=findNAThing(personId);
          personHandler.ifPresent(aPerson -> modules.add(aPerson));
        }
      }
);
    }
    modules.forEach(module -> {
      Channel channel=module.getThing().getChannel(CHANNEL_WELCOME_HOME_EVENT);
      if (channel != null) {
        triggerChannel(channel.getUID(),event.getEventType().toString());
      }
    }
);
  }
}","public void webHookEvent(NAWebhookCameraEvent event){
  if (event.getAppType() == NAWebhookCameraEvent.AppTypeEnum.CAMERA) {
    Set<AbstractNetatmoThingHandler> modules=new HashSet<>();
    if (WELCOME_EVENTS.contains(event.getEventType()) || PRESENCE_EVENTS.contains(event.getEventType())) {
      String cameraId=event.getCameraId();
      if (cameraId != null) {
        Optional<AbstractNetatmoThingHandler> camera=findNAThing(cameraId);
        camera.ifPresent(modules::add);
      }
    }
    if (HOME_EVENTS.contains(event.getEventType())) {
      String homeId=event.getHomeId();
      if (homeId != null) {
        Optional<AbstractNetatmoThingHandler> home=findNAThing(homeId);
        home.ifPresent(modules::add);
      }
    }
    if (PERSON_EVENTS.contains(event.getEventType())) {
      List<NAWebhookCameraEventPerson> persons=event.getPersons();
      persons.forEach(person -> {
        String personId=person.getId();
        if (personId != null) {
          Optional<AbstractNetatmoThingHandler> personHandler=findNAThing(personId);
          personHandler.ifPresent(modules::add);
        }
      }
);
    }
    modules.forEach(module -> {
      Channel channel=module.getThing().getChannel(CHANNEL_WELCOME_HOME_EVENT);
      if (channel != null) {
        triggerChannel(channel.getUID(),event.getEventType().toString());
      }
    }
);
  }
}",0.9702615549982084
62514,"@Override protected State getNAThingProperty(String channelId){
  try {
switch (channelId) {
case CHANNEL_LAST_STATUS_STORE:
      if (device != null) {
        Method getLastStatusStore=device.getClass().getMethod(""String_Node_Str"");
        Integer lastStatusStore=(Integer)getLastStatusStore.invoke(device);
        return ChannelTypeUtils.toDateTimeType(lastStatusStore);
      }
 else {
        return UnDefType.UNDEF;
      }
case CHANNEL_LOCATION:
    if (device != null) {
      Method getPlace=device.getClass().getMethod(""String_Node_Str"");
      NAPlace place=(NAPlace)getPlace.invoke(device);
      PointType point=new PointType(new DecimalType(place.getLocation().get(1)),new DecimalType(place.getLocation().get(0)));
      if (place.getAltitude() != null) {
        point.setAltitude(new DecimalType(place.getAltitude()));
      }
      return point;
    }
 else {
      return UnDefType.UNDEF;
    }
case CHANNEL_UNIT:
  return new DecimalType(userAdministrative.getUnit());
}
}
 catch (NoSuchMethodException|IllegalAccessException|InvocationTargetException e) {
logger.error(""String_Node_Str"",channelId.toString());
return UnDefType.NULL;
}
return super.getNAThingProperty(channelId);
}","@Override protected State getNAThingProperty(String channelId){
  try {
switch (channelId) {
case CHANNEL_LAST_STATUS_STORE:
      if (device != null) {
        Method getLastStatusStore=device.getClass().getMethod(""String_Node_Str"");
        Integer lastStatusStore=(Integer)getLastStatusStore.invoke(device);
        return ChannelTypeUtils.toDateTimeType(lastStatusStore);
      }
 else {
        return UnDefType.UNDEF;
      }
case CHANNEL_LOCATION:
    if (device != null) {
      Method getPlace=device.getClass().getMethod(""String_Node_Str"");
      NAPlace place=(NAPlace)getPlace.invoke(device);
      PointType point=new PointType(new DecimalType(place.getLocation().get(1)),new DecimalType(place.getLocation().get(0)));
      if (place.getAltitude() != null) {
        point.setAltitude(new DecimalType(place.getAltitude()));
      }
      return point;
    }
 else {
      return UnDefType.UNDEF;
    }
case CHANNEL_UNIT:
  return new DecimalType(userAdministrative.getUnit());
}
}
 catch (NoSuchMethodException|IllegalAccessException|InvocationTargetException e) {
logger.error(""String_Node_Str"",channelId);
return UnDefType.NULL;
}
return super.getNAThingProperty(channelId);
}",0.9954032595068952
62515,"@Override protected State getNAThingProperty(String channelId){
  try {
    if (channelId.equalsIgnoreCase(CHANNEL_LAST_MESSAGE) && module != null) {
      Method getLastMessage=module.getClass().getMethod(""String_Node_Str"");
      Integer lastMessage=(Integer)getLastMessage.invoke(module);
      return ChannelTypeUtils.toDateTimeType(lastMessage);
    }
  }
 catch (  NoSuchMethodException|SecurityException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {
    logger.error(""String_Node_Str"",channelId.toString());
    return UnDefType.NULL;
  }
  return super.getNAThingProperty(channelId);
}","@Override protected State getNAThingProperty(String channelId){
  try {
    if (channelId.equalsIgnoreCase(CHANNEL_LAST_MESSAGE) && module != null) {
      Method getLastMessage=module.getClass().getMethod(""String_Node_Str"");
      Integer lastMessage=(Integer)getLastMessage.invoke(module);
      return ChannelTypeUtils.toDateTimeType(lastMessage);
    }
  }
 catch (  NoSuchMethodException|SecurityException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {
    logger.error(""String_Node_Str"",channelId);
    return UnDefType.NULL;
  }
  return super.getNAThingProperty(channelId);
}",0.9911361804995972
62516,"protected void requestParentRefresh(){
  Optional<AbstractNetatmoThingHandler> parent=getBridgeHandler().findNAThing(getParentId());
  parent.ifPresent(p -> p.updateChannels());
}","protected void requestParentRefresh(){
  Optional<AbstractNetatmoThingHandler> parent=getBridgeHandler().findNAThing(getParentId());
  parent.ifPresent(AbstractNetatmoThingHandler::updateChannels);
}",0.8994708994708994
62517,"@Override public void checkClientTrusted(final X509Certificate[] chain,final String authType) throws CertificateException {
}","@Override public void checkClientTrusted(final X509Certificate[] chain,final String authType){
}",0.8687782805429864
62518,"public TrustingOkHttpClient(){
  SSLContext ctx=null;
  try {
    ctx=SSLContext.getInstance(""String_Node_Str"");
    ctx.init(null,certs,new SecureRandom());
    final HostnameVerifier hostnameVerifier=new HostnameVerifier(){
      @Override public boolean verify(      final String hostname,      final SSLSession session){
        return true;
      }
    }
;
    this.setHostnameVerifier(hostnameVerifier);
    this.setSslSocketFactory(ctx.getSocketFactory());
  }
 catch (  final java.security.GeneralSecurityException ex) {
  }
}","public TrustingOkHttpClient(){
  try {
    SSLContext ctx=SSLContext.getInstance(""String_Node_Str"");
    ctx.init(null,certs,new SecureRandom());
    this.setHostnameVerifier((hostname,session) -> true);
    this.setSslSocketFactory(ctx.getSocketFactory());
  }
 catch (  GeneralSecurityException ex) {
    logger.trace(""String_Node_Str"",ex);
  }
}",0.4285714285714285
62519,"@Override public void checkServerTrusted(final X509Certificate[] chain,final String authType) throws CertificateException {
}","@Override public void checkServerTrusted(final X509Certificate[] chain,final String authType){
}",0.8687782805429864
62520,"private void registerDeviceDiscoveryService(@NonNull NetatmoBridgeHandler netatmoBridgeHandler){
  NetatmoModuleDiscoveryService discoveryService=new NetatmoModuleDiscoveryService(netatmoBridgeHandler);
  if (bundleContext != null) {
    discoveryServiceReg=bundleContext.registerService(DiscoveryService.class.getName(),discoveryService,new Hashtable<String,Object>());
  }
}","private void registerDeviceDiscoveryService(@NonNull NetatmoBridgeHandler netatmoBridgeHandler){
  NetatmoModuleDiscoveryService discoveryService=new NetatmoModuleDiscoveryService(netatmoBridgeHandler);
  if (bundleContext != null) {
    discoveryServiceReg=bundleContext.registerService(DiscoveryService.class.getName(),discoveryService,new Hashtable<>());
  }
}",0.9824086603518268
62521,"/** 
 * Compute the Dewpoint temperature given temperature and hygrometry valid up to 60 degrees, from http://en.wikipedia.org/wiki/Dew_point#Calculating_the_dew_point
 * @param temperature in (°C)
 * @param hygro relative level (%)
 * @return dewpoint temperature
 */
public static double getDewPoint(double temperature,double humidity){
  double a=17.271, b=237.2;
  double gamma=((a * temperature) / (b + temperature)) + Math.log(humidity / 100.0);
  return b * gamma / (a - gamma);
}","/** 
 * Compute the Dewpoint temperature given temperature and hygrometry valid up to 60 degrees, from http://en.wikipedia.org/wiki/Dew_point#Calculating_the_dew_point
 * @param temperature in (°C)
 * @param humidity relative level (%)
 * @return dewpoint temperature
 */
public static double getDewPoint(double temperature,double humidity){
  double a=17.271, b=237.2;
  double gamma=((a * temperature) / (b + temperature)) + Math.log(humidity / 100.0);
  return b * gamma / (a - gamma);
}",0.9907881269191402
62522,"private String inputStreamToString(HttpServletRequest req) throws IOException {
  Scanner scanner=new Scanner(req.getInputStream()).useDelimiter(""String_Node_Str"");
  String result=scanner.hasNext() ? scanner.next() : ""String_Node_Str"";
  return result;
}","private String inputStreamToString(HttpServletRequest req) throws IOException {
  Scanner scanner=new Scanner(req.getInputStream()).useDelimiter(""String_Node_Str"");
  return scanner.hasNext() ? scanner.next() : ""String_Node_Str"";
}",0.9218106995884774
62523,"public Optional<State> getNAThingProperty(String channelId){
  if (module != null) {
    try {
      if (CHANNEL_BATTERY_LEVEL.equalsIgnoreCase(channelId) || CHANNEL_LOW_BATTERY.equalsIgnoreCase(channelId)) {
        Method getBatteryVp=module.getClass().getMethod(""String_Node_Str"");
        Integer value=(Integer)getBatteryVp.invoke(module);
switch (channelId) {
case CHANNEL_BATTERY_LEVEL:
          int correctedVp=Math.min(value.intValue(),batteryMax);
        int batteryPercent=(100 * (correctedVp - batteryMin) / (batteryMax - batteryMin));
      return Optional.of(ChannelTypeUtils.toDecimalType(batteryPercent));
case CHANNEL_LOW_BATTERY:
    return Optional.of(value.intValue() < batteryLow ? OnOffType.ON : OnOffType.OFF);
}
}
}
 catch (NoSuchMethodException|SecurityException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {
logger.warn(""String_Node_Str"",channelId,e.getMessage());
return Optional.of(UnDefType.NULL);
}
}
return Optional.empty();
}","public Optional<State> getNAThingProperty(String channelId){
  if (module != null) {
    try {
      if (CHANNEL_BATTERY_LEVEL.equalsIgnoreCase(channelId) || CHANNEL_LOW_BATTERY.equalsIgnoreCase(channelId)) {
        Method getBatteryVp=module.getClass().getMethod(""String_Node_Str"");
        Integer value=(Integer)getBatteryVp.invoke(module);
switch (channelId) {
case CHANNEL_BATTERY_LEVEL:
          int correctedVp=Math.min(value,batteryMax);
        int batteryPercent=(100 * (correctedVp - batteryMin) / (batteryMax - batteryMin));
      return Optional.of(ChannelTypeUtils.toDecimalType(batteryPercent));
case CHANNEL_LOW_BATTERY:
    return Optional.of(value < batteryLow ? OnOffType.ON : OnOffType.OFF);
}
}
}
 catch (NoSuchMethodException|SecurityException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {
logger.warn(""String_Node_Str"",channelId,e.getMessage());
return Optional.of(UnDefType.NULL);
}
}
return Optional.empty();
}",0.9887869520897044
62524,"@Override protected NAMain updateReadings(){
  NAMain result=null;
  NAStationDataBody stationDataBody=getBridgeHandler().getStationsDataBody(getId());
  if (stationDataBody != null) {
    userAdministrative=stationDataBody.getUser().getAdministrative();
    result=stationDataBody.getDevices().stream().filter(device -> device.getId().equalsIgnoreCase(getId())).findFirst().get();
    if (result != null) {
      result.getModules().forEach(child -> childs.put(child.getId(),child));
    }
  }
  return result;
}","@Override protected NAMain updateReadings(){
  NAMain result=null;
  NAStationDataBody stationDataBody=getBridgeHandler().getStationsDataBody(getId());
  if (stationDataBody != null) {
    userAdministrative=stationDataBody.getUser().getAdministrative();
    result=stationDataBody.getDevices().stream().filter(device -> device.getId().equalsIgnoreCase(getId())).findFirst().orElse(null);
    if (result != null) {
      result.getModules().forEach(child -> childs.put(child.getId(),child));
    }
  }
  return result;
}",0.9854791868344628
62525,"@Override protected State getNAThingProperty(String channelId){
  if (device != null) {
    NADashboardData dashboardData=device.getDashboardData();
switch (channelId) {
case CHANNEL_CO2:
      return toDecimalType(dashboardData.getCO2());
case CHANNEL_TEMPERATURE:
    return toDecimalType(dashboardData.getTemperature());
case CHANNEL_MIN_TEMP:
  return toDecimalType(dashboardData.getMinTemp());
case CHANNEL_MAX_TEMP:
return toDecimalType(dashboardData.getMaxTemp());
case CHANNEL_TEMP_TREND:
return toStringType(dashboardData.getTempTrend());
case CHANNEL_NOISE:
return toDecimalType(dashboardData.getNoise());
case CHANNEL_PRESSURE:
return toDecimalType(dashboardData.getPressure());
case CHANNEL_PRESS_TREND:
return toStringType(dashboardData.getPressureTrend());
case CHANNEL_ABSOLUTE_PRESSURE:
return toDecimalType(dashboardData.getAbsolutePressure());
case CHANNEL_TIMEUTC:
return toDateTimeType(dashboardData.getTimeUtc());
case CHANNEL_DATE_MIN_TEMP:
return toDateTimeType(dashboardData.getDateMinTemp());
case CHANNEL_DATE_MAX_TEMP:
return toDateTimeType(dashboardData.getDateMaxTemp());
case CHANNEL_HUMIDITY:
return toDecimalType(dashboardData.getHumidity());
case CHANNEL_HUMIDEX:
return toDecimalType(WeatherUtils.getHumidex(dashboardData.getTemperature(),dashboardData.getHumidity()));
case CHANNEL_HEATINDEX:
return toDecimalType(WeatherUtils.getHeatIndex(dashboardData.getTemperature(),dashboardData.getHumidity()));
case CHANNEL_DEWPOINT:
return toDecimalType(WeatherUtils.getDewPoint(dashboardData.getTemperature(),dashboardData.getHumidity()));
case CHANNEL_DEWPOINTDEP:
Double dewpoint=WeatherUtils.getDewPoint(dashboardData.getTemperature(),dashboardData.getHumidity());
return toDecimalType(WeatherUtils.getDewPointDep(dashboardData.getTemperature(),dewpoint));
case CHANNEL_WIND_UNIT:
return userAdministrative != null ? new DecimalType(userAdministrative.getWindunit()) : UnDefType.UNDEF;
case CHANNEL_PRESSURE_UNIT:
return userAdministrative != null ? new DecimalType(userAdministrative.getPressureunit()) : UnDefType.UNDEF;
}
}
return super.getNAThingProperty(channelId);
}","@Override protected State getNAThingProperty(String channelId){
  if (device != null) {
    NADashboardData dashboardData=device.getDashboardData();
switch (channelId) {
case CHANNEL_CO2:
      return toDecimalType(dashboardData.getCO2());
case CHANNEL_TEMPERATURE:
    return toDecimalType(dashboardData.getTemperature());
case CHANNEL_MIN_TEMP:
  return toDecimalType(dashboardData.getMinTemp());
case CHANNEL_MAX_TEMP:
return toDecimalType(dashboardData.getMaxTemp());
case CHANNEL_TEMP_TREND:
return toStringType(dashboardData.getTempTrend());
case CHANNEL_NOISE:
return toDecimalType(dashboardData.getNoise());
case CHANNEL_PRESSURE:
return toDecimalType(dashboardData.getPressure());
case CHANNEL_PRESS_TREND:
return toStringType(dashboardData.getPressureTrend());
case CHANNEL_ABSOLUTE_PRESSURE:
return toDecimalType(dashboardData.getAbsolutePressure());
case CHANNEL_TIMEUTC:
return toDateTimeType(dashboardData.getTimeUtc());
case CHANNEL_DATE_MIN_TEMP:
return toDateTimeType(dashboardData.getDateMinTemp());
case CHANNEL_DATE_MAX_TEMP:
return toDateTimeType(dashboardData.getDateMaxTemp());
case CHANNEL_HUMIDITY:
return toDecimalType(dashboardData.getHumidity());
case CHANNEL_HUMIDEX:
return toDecimalType(WeatherUtils.getHumidex(dashboardData.getTemperature(),dashboardData.getHumidity()));
case CHANNEL_HEATINDEX:
return toDecimalType(WeatherUtils.getHeatIndex(dashboardData.getTemperature(),dashboardData.getHumidity()));
case CHANNEL_DEWPOINT:
return toDecimalType(WeatherUtils.getDewPoint(dashboardData.getTemperature(),dashboardData.getHumidity()));
case CHANNEL_DEWPOINTDEP:
Double dewPoint=WeatherUtils.getDewPoint(dashboardData.getTemperature(),dashboardData.getHumidity());
return toDecimalType(WeatherUtils.getDewPointDep(dashboardData.getTemperature(),dewPoint));
case CHANNEL_WIND_UNIT:
return userAdministrative != null ? new DecimalType(userAdministrative.getWindunit()) : UnDefType.UNDEF;
case CHANNEL_PRESSURE_UNIT:
return userAdministrative != null ? new DecimalType(userAdministrative.getPressureunit()) : UnDefType.UNDEF;
}
}
return super.getNAThingProperty(channelId);
}",0.9990489776509748
62526,"@Override protected NAPlug updateReadings(){
  NAPlug result=null;
  NAThermostatDataBody thermostatDataBody=getBridgeHandler().getThermostatsDataBody(getId());
  if (thermostatDataBody != null) {
    userAdministrative=thermostatDataBody.getUser().getAdministrative();
    result=thermostatDataBody.getDevices().stream().filter(device -> device.getId().equalsIgnoreCase(getId())).findFirst().get();
    if (result != null) {
      result.getModules().forEach(child -> childs.put(child.getId(),child));
    }
  }
  return result;
}","@Override protected NAPlug updateReadings(){
  NAPlug result=null;
  NAThermostatDataBody thermostatDataBody=getBridgeHandler().getThermostatsDataBody(getId());
  if (thermostatDataBody != null) {
    userAdministrative=thermostatDataBody.getUser().getAdministrative();
    result=thermostatDataBody.getDevices().stream().filter(device -> device.getId().equalsIgnoreCase(getId())).findFirst().orElse(null);
    if (result != null) {
      result.getModules().forEach(child -> childs.put(child.getId(),child));
    }
  }
  return result;
}",0.9859681945743686
62527,"@Override public void handleCommand(ChannelUID channelUID,Command command){
  super.handleCommand(channelUID,command);
  if (!(command instanceof RefreshType)) {
    try {
switch (channelUID.getId()) {
case CHANNEL_SETPOINT_MODE:
{
          getBridgeHandler().getThermostatApi().setthermpoint(getParentId(),getId(),command.toString(),null,null);
          updateState(channelUID,new StringType(command.toString()));
          requestParentRefresh();
          break;
        }
case CHANNEL_SETPOINT_TEMP:
{
        Calendar cal=Calendar.getInstance();
        cal.add(Calendar.MINUTE,getSetpointDefaultDuration());
        getBridgeHandler().getThermostatApi().setthermpoint(getParentId(),getId(),""String_Node_Str"",(int)(cal.getTimeInMillis() / 1000),Float.parseFloat(command.toString()));
        updateState(channelUID,new DecimalType(command.toString()));
        requestParentRefresh();
        break;
      }
  }
}
 catch (Exception e) {
  updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,e.getMessage());
}
}
}","@Override public void handleCommand(ChannelUID channelUID,Command command){
  super.handleCommand(channelUID,command);
  if (!(command instanceof RefreshType)) {
    try {
switch (channelUID.getId()) {
case CHANNEL_SETPOINT_MODE:
{
          getBridgeHandler().getThermostatApi().setthermpoint(getParentId(),getId(),command.toString(),null,null);
          updateState(channelUID,new StringType(command.toString()));
          requestParentRefresh();
          break;
        }
case CHANNEL_SETPOINT_TEMP:
{
        Calendar cal=Calendar.getInstance();
        cal.add(Calendar.MINUTE,getSetPointDefaultDuration());
        getBridgeHandler().getThermostatApi().setthermpoint(getParentId(),getId(),""String_Node_Str"",(int)(cal.getTimeInMillis() / 1000),Float.parseFloat(command.toString()));
        updateState(channelUID,new DecimalType(command.toString()));
        requestParentRefresh();
        break;
      }
  }
}
 catch (Exception e) {
  updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,e.getMessage());
}
}
}",0.9990234375
62528,"private int getNextSchedule(List<NAThermProgram> thermProgramList){
  Calendar mondayZero=Calendar.getInstance();
  mondayZero.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);
  mondayZero.set(Calendar.HOUR_OF_DAY,0);
  mondayZero.set(Calendar.MINUTE,0);
  mondayZero.set(Calendar.SECOND,0);
  Calendar now=Calendar.getInstance();
  long diff=(now.getTimeInMillis() - mondayZero.getTimeInMillis()) / 1000 / 60;
  int result=-1;
  for (  NAThermProgram thermProgram : thermProgramList) {
    if (thermProgram.getSelected() != null && thermProgram.getSelected().booleanValue()) {
      int next=thermProgram.getTimetable().get(0).getMOffset() + (7 * 24 * 60);
      for (      NATimeTableItem timeTable : thermProgram.getTimetable()) {
        if (timeTable.getMOffset() > diff) {
          next=timeTable.getMOffset();
          break;
        }
      }
      result=(int)(next * 60 + (mondayZero.getTimeInMillis() / 1000));
    }
  }
  return result;
}","private int getNextSchedule(List<NAThermProgram> thermProgramList){
  Calendar mondayZero=Calendar.getInstance();
  mondayZero.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);
  mondayZero.set(Calendar.HOUR_OF_DAY,0);
  mondayZero.set(Calendar.MINUTE,0);
  mondayZero.set(Calendar.SECOND,0);
  Calendar now=Calendar.getInstance();
  long diff=(now.getTimeInMillis() - mondayZero.getTimeInMillis()) / 1000 / 60;
  int result=-1;
  for (  NAThermProgram thermProgram : thermProgramList) {
    if (thermProgram.getSelected() != null && thermProgram.getSelected()) {
      int next=thermProgram.getTimetable().get(0).getMOffset() + (7 * 24 * 60);
      for (      NATimeTableItem timeTable : thermProgram.getTimetable()) {
        if (timeTable.getMOffset() > diff) {
          next=timeTable.getMOffset();
          break;
        }
      }
      result=(int)(next * 60 + (mondayZero.getTimeInMillis() / 1000));
    }
  }
  return result;
}",0.9920085242408098
62529,"@Override protected NAWelcomeHome updateReadings(){
  NAWelcomeHome result=null;
  NAWelcomeHomeData homeDataBody=getBridgeHandler().getWelcomeDataBody(getId());
  if (homeDataBody != null) {
    dataTimeStamp=(int)Calendar.getInstance().getTimeInMillis() / 1000;
    result=homeDataBody.getHomes().stream().filter(device -> device.getId().equalsIgnoreCase(getId())).findFirst().get();
    if (result != null) {
      result.getCameras().forEach(camera -> childs.put(camera.getId(),camera));
      iPersons=0;
      iUnknowns=0;
      logger.debug(""String_Node_Str"",getId());
      result.getPersons().forEach(person -> {
        iPersons+=person.getOutOfSight() ? 0 : 1;
        if (person.getPseudo() != null) {
          childs.put(person.getId(),person);
        }
 else {
          iUnknowns+=person.getOutOfSight() ? 0 : 1;
        }
      }
);
      result.getEvents().forEach(event -> {
        if (lastEvent == null || lastEvent.getTime() < event.getTime()) {
          lastEvent=event;
        }
      }
);
    }
  }
  return result;
}","@Override protected NAWelcomeHome updateReadings(){
  NAWelcomeHome result=null;
  NAWelcomeHomeData homeDataBody=getBridgeHandler().getWelcomeDataBody(getId());
  if (homeDataBody != null) {
    dataTimeStamp=(int)Calendar.getInstance().getTimeInMillis() / 1000;
    result=homeDataBody.getHomes().stream().filter(device -> device.getId().equalsIgnoreCase(getId())).findFirst().orElse(null);
    if (result != null) {
      result.getCameras().forEach(camera -> childs.put(camera.getId(),camera));
      iPersons=0;
      iUnknowns=0;
      logger.debug(""String_Node_Str"",getId());
      result.getPersons().forEach(person -> {
        iPersons+=person.getOutOfSight() ? 0 : 1;
        if (person.getPseudo() != null) {
          childs.put(person.getId(),person);
        }
 else {
          iUnknowns+=person.getOutOfSight() ? 0 : 1;
        }
      }
);
      result.getEvents().forEach(event -> {
        if (lastEvent == null || lastEvent.getTime() < event.getTime()) {
          lastEvent=event;
        }
      }
);
    }
  }
  return result;
}",0.9928469241773964
62530,"/** 
 * Converts the value of the datapoint to a State, updates the channel and also sets the thing status if necessary.
 */
private void updateChannelState(final HmDatapoint dp,Channel channel) throws IOException, BridgeHandlerNotAvailableException, ConverterException {
  if (dp.isTrigger()) {
    triggerChannel(channel.getUID(),ObjectUtils.toString(dp.getValue()));
  }
 else   if (isLinked(channel)) {
    loadHomematicChannelValues(dp.getChannel());
    TypeConverter<?> converter=ConverterFactory.createConverter(channel.getAcceptedItemType());
    State state=converter.convertFromBinding(dp);
    updateState(channel.getUID(),state);
  }
}","/** 
 * Converts the value of the datapoint to a State, updates the channel and also sets the thing status if necessary.
 */
private void updateChannelState(final HmDatapoint dp,Channel channel) throws IOException, BridgeHandlerNotAvailableException, ConverterException {
  if (dp.isTrigger()) {
    triggerChannel(channel.getUID(),ObjectUtils.toString(dp.getValue()));
  }
 else   if (isLinked(channel)) {
    loadHomematicChannelValues(dp.getChannel());
    TypeConverter<?> converter=ConverterFactory.createConverter(channel.getAcceptedItemType());
    State state=converter.convertFromBinding(dp);
    if (state != null) {
      updateState(channel.getUID(),state);
    }
 else {
      logger.debug(""String_Node_Str"",dp.getName());
    }
  }
}",0.9290322580645162
62531,"@Override public Collection<ThingUID> removeOlderResults(DiscoveryService source,long timestamp,Collection<ThingTypeUID> thingTypeUIDs){
  return null;
}","@Override public Collection<ThingUID> removeOlderResults(DiscoveryService source,long timestamp,Collection<ThingTypeUID> thingTypeUIDs){
  return Collections.emptyList();
}",0.9292307692307692
62532,"@Override public void onDataReceived(String line){
  line=StringUtils.chomp(line);
  line=line.replace(""String_Node_Str"",""String_Node_Str"");
  line=line.trim();
  Pattern RESPONSE_PATTERN=Pattern.compile(""String_Node_Str"");
  try {
    logger.trace(""String_Node_Str"",line);
    Matcher matcher=RESPONSE_PATTERN.matcher(line);
    if (matcher.matches()) {
      for (int i=1; i <= matcher.groupCount(); i++) {
switch (DataField.get(i)) {
case LEVEL:
{
            DecimalType decimalType=new DecimalType(matcher.group(i));
            updateState(new ChannelUID(getThing().getUID(),DataField.get(i).channelID()),decimalType);
            break;
          }
case MODE:
{
          StringType stringType=null;
          if (matcher.group(i).equals(""String_Node_Str"")) {
            stringType=MANUAL;
          }
 else           if (matcher.group(i).equals(""String_Node_Str"")) {
            stringType=AUTOMATIC;
          }
          updateState(new ChannelUID(getThing().getUID(),DataField.get(i).channelID()),stringType);
          break;
        }
case SOURCE:
{
        StringType stringType=null;
        if (matcher.group(i).equals(""String_Node_Str"")) {
          stringType=RAIN;
        }
 else         if (matcher.group(i).equals(""String_Node_Str"")) {
          stringType=CITY;
        }
        updateState(new ChannelUID(getThing().getUID(),DataField.get(i).channelID()),stringType);
        break;
      }
default :
    if (matcher.group(i).equals(""String_Node_Str"")) {
      updateState(new ChannelUID(getThing().getUID(),DataField.get(i).channelID()),OnOffType.OFF);
    }
 else     if (matcher.group(i).equals(""String_Node_Str"")) {
      updateState(new ChannelUID(getThing().getUID(),DataField.get(i).channelID()),OnOffType.ON);
    }
  break;
}
}
}
}
 catch (Exception e) {
logger.error(""String_Node_Str"",e.getMessage(),e);
}
}","@Override public void onDataReceived(String line){
  line=StringUtils.chomp(line);
  line=line.replace(""String_Node_Str"",""String_Node_Str"");
  line=line.trim();
  Pattern RESPONSE_PATTERN=Pattern.compile(""String_Node_Str"");
  try {
    logger.trace(""String_Node_Str"",line);
    Matcher matcher=RESPONSE_PATTERN.matcher(line);
    if (matcher.matches()) {
      for (int i=1; i <= matcher.groupCount(); i++) {
switch (DataField.get(i)) {
case LEVEL:
{
            DecimalType decimalType=new DecimalType(matcher.group(i));
            updateState(new ChannelUID(getThing().getUID(),DataField.get(i).channelID()),decimalType);
            break;
          }
case MODE:
{
          StringType stringType=null;
          if (matcher.group(i).equals(""String_Node_Str"")) {
            stringType=MANUAL;
          }
 else           if (matcher.group(i).equals(""String_Node_Str"")) {
            stringType=AUTOMATIC;
          }
          if (stringType != null) {
            updateState(new ChannelUID(getThing().getUID(),DataField.get(i).channelID()),stringType);
          }
          break;
        }
case SOURCE:
{
        StringType stringType=null;
        if (matcher.group(i).equals(""String_Node_Str"")) {
          stringType=RAIN;
        }
 else         if (matcher.group(i).equals(""String_Node_Str"")) {
          stringType=CITY;
        }
        if (stringType != null) {
          updateState(new ChannelUID(getThing().getUID(),DataField.get(i).channelID()),stringType);
        }
        break;
      }
default :
    if (matcher.group(i).equals(""String_Node_Str"")) {
      updateState(new ChannelUID(getThing().getUID(),DataField.get(i).channelID()),OnOffType.OFF);
    }
 else     if (matcher.group(i).equals(""String_Node_Str"")) {
      updateState(new ChannelUID(getThing().getUID(),DataField.get(i).channelID()),OnOffType.ON);
    }
  break;
}
}
}
}
 catch (Exception e) {
logger.error(""String_Node_Str"",e.getMessage(),e);
}
}",0.9746166049709148
62533,"/** 
 * We use the   {@see MilightV6SessionManager} to establish a full session to the bridge. If we reachthe SESSION_VALID state within 1.3s, we can safely assume it is a V6 Milight bridge.
 * @param addressOfBridge IP Address of the bridge
 * @return
 * @throws InterruptedException If waiting for the session is interrupted we throw this exception
 */
private boolean checkForV6Bridge(InetAddress addressOfBridge,String bridgeID) throws InterruptedException {
  QueuedSend queuedSend;
  try {
    queuedSend=new QueuedSend();
    Semaphore s=new Semaphore(0);
    MilightV6SessionManager session=new MilightV6SessionManager(queuedSend,bridgeID,scheduler,(    SessionState state) -> {
      if (state == SessionState.SESSION_VALID) {
        s.release();
      }
    }
);
    boolean success=s.tryAcquire(1,1300,TimeUnit.MILLISECONDS);
    session.dispose();
    queuedSend.dispose();
    return success;
  }
 catch (  SocketException e) {
    logger.debug(""String_Node_Str"",e);
  }
  return false;
}","/** 
 * We use the   {@see MilightV6SessionManager} to establish a full session to the bridge. If we reachthe SESSION_VALID state within 1.3s, we can safely assume it is a V6 Milight bridge.
 * @param addressOfBridge IP Address of the bridge
 * @return
 * @throws InterruptedException If waiting for the session is interrupted we throw this exception
 */
private boolean checkForV6Bridge(InetAddress addressOfBridge,String bridgeID) throws InterruptedException {
  QueuedSend queuedSend;
  try {
    queuedSend=new QueuedSend();
    Semaphore s=new Semaphore(0);
    MilightV6SessionManager session=new MilightV6SessionManager(queuedSend,bridgeID,scheduler,(    SessionState state) -> {
      if (state == SessionState.SESSION_VALID) {
        s.release();
      }
    }
,null);
    boolean success=s.tryAcquire(1,1300,TimeUnit.MILLISECONDS);
    session.dispose();
    queuedSend.dispose();
    return success;
  }
 catch (  SocketException e) {
    logger.debug(""String_Node_Str"",e);
  }
  return false;
}",0.997511199601792
62534,"/** 
 * converts the volume value given by the pulseaudio server to a percentage value. The pulseaudio server sends 2 values for left and right channel volume e.g. 0: 80% 1: 80% which would be converted to 80
 * @param vol
 * @return
 */
private static int parseVolume(String vol){
  Matcher matcher=volumePattern.matcher(vol);
  if (matcher.find()) {
    return Math.round((Integer.valueOf(matcher.group(3)) + Integer.valueOf(matcher.group(7))) / 2);
  }
  return 0;
}","/** 
 * converts the volume value given by the pulseaudio server to a percentage value. The pulseaudio server sends 2 values for left and right channel volume e.g. 0: 80% 1: 80% which would be converted to 80
 * @param vol
 * @return
 */
private static int parseVolume(String vol){
  int volumeTotal=0;
  int nChannels=0;
  for (  String channel : vol.split(""String_Node_Str"")) {
    Matcher matcher=volumePattern.matcher(channel.trim());
    if (matcher.find()) {
      volumeTotal+=Integer.valueOf(matcher.group(3));
      nChannels++;
    }
 else {
      logger.debug(""String_Node_Str"",channel);
    }
  }
  if (nChannels > 0) {
    return Math.round(volumeTotal / nChannels);
  }
  return 0;
}",0.6998284734133791
62535,"/** 
 * parses the pulseaudio servers answer to the list-sources command and returns a list of  {@link Source} objects
 * @param raw the given string from the pulseaudio server
 * @return list of sources
 */
public static List<Source> parseSources(String raw,PulseaudioClient client){
  List<Source> sources=new ArrayList<Source>();
  String[] parts=raw.split(""String_Node_Str"");
  if (parts.length <= 1) {
    return sources;
  }
  for (int i=1; i < parts.length; i++) {
    String[] lines=parts[i].split(""String_Node_Str"");
    Hashtable<String,String> properties=new Hashtable<String,String>();
    int id=0;
    try {
      id=Integer.valueOf(lines[0].trim());
    }
 catch (    NumberFormatException e) {
      Matcher matcher=fallBackPattern.matcher(lines[0].trim());
      if (matcher.find()) {
        id=Integer.valueOf(matcher.group(1));
        properties.put(matcher.group(2).trim(),matcher.group(3).trim());
      }
    }
    for (int j=1; j < lines.length; j++) {
      Matcher matcher=pattern.matcher(lines[j]);
      if (matcher.find()) {
        properties.put(matcher.group(1).trim(),matcher.group(2).trim());
      }
    }
    if (properties.containsKey(""String_Node_Str"")) {
      Source source=new Source(id,properties.get(""String_Node_Str""),client.getModule(getNumberValue(properties.get(""String_Node_Str""))));
      if (properties.containsKey(""String_Node_Str"")) {
        try {
          source.setState(AbstractAudioDeviceConfig.State.valueOf(properties.get(""String_Node_Str"")));
        }
 catch (        IllegalArgumentException e) {
          logger.error(""String_Node_Str"",properties.get(""String_Node_Str""),id);
        }
      }
      if (properties.containsKey(""String_Node_Str"")) {
        source.setMuted(properties.get(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""));
      }
      if (properties.containsKey(""String_Node_Str"")) {
        source.setVolume(Integer.valueOf(parseVolume(properties.get(""String_Node_Str""))));
      }
      if (properties.containsKey(""String_Node_Str"")) {
        source.setMonitorOf(client.getSink(Integer.valueOf(parseVolume(properties.get(""String_Node_Str"")))));
      }
      sources.add(source);
    }
  }
  return sources;
}","/** 
 * parses the pulseaudio servers answer to the list-sources command and returns a list of  {@link Source} objects
 * @param raw the given string from the pulseaudio server
 * @return list of sources
 */
public static List<Source> parseSources(String raw,PulseaudioClient client){
  List<Source> sources=new ArrayList<Source>();
  String[] parts=raw.split(""String_Node_Str"");
  if (parts.length <= 1) {
    return sources;
  }
  for (int i=1; i < parts.length; i++) {
    String[] lines=parts[i].split(""String_Node_Str"");
    Hashtable<String,String> properties=new Hashtable<String,String>();
    int id=0;
    try {
      id=Integer.valueOf(lines[0].trim());
    }
 catch (    NumberFormatException e) {
      Matcher matcher=fallBackPattern.matcher(lines[0].trim());
      if (matcher.find()) {
        id=Integer.valueOf(matcher.group(1));
        properties.put(matcher.group(2).trim(),matcher.group(3).trim());
      }
    }
    for (int j=1; j < lines.length; j++) {
      Matcher matcher=pattern.matcher(lines[j]);
      if (matcher.find()) {
        properties.put(matcher.group(1).trim(),matcher.group(2).trim());
      }
    }
    if (properties.containsKey(""String_Node_Str"")) {
      Source source=new Source(id,properties.get(""String_Node_Str""),client.getModule(getNumberValue(properties.get(""String_Node_Str""))));
      if (properties.containsKey(""String_Node_Str"")) {
        try {
          source.setState(AbstractAudioDeviceConfig.State.valueOf(properties.get(""String_Node_Str"")));
        }
 catch (        IllegalArgumentException e) {
          logger.error(""String_Node_Str"",properties.get(""String_Node_Str""),id);
        }
      }
      if (properties.containsKey(""String_Node_Str"")) {
        source.setMuted(properties.get(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""));
      }
      if (properties.containsKey(""String_Node_Str"")) {
        source.setVolume(Integer.valueOf(parseVolume(properties.get(""String_Node_Str""))));
      }
      if (properties.containsKey(""String_Node_Str"")) {
        source.setMonitorOf(client.getSink(Integer.valueOf(properties.get(""String_Node_Str""))));
      }
      sources.add(source);
    }
  }
  return sources;
}",0.9970380496696286
62536,"@Override public void dispose(){
  listeners.clear();
  buttonExecutor.shutdownNow();
  disconnectFromHub();
  factory.removeChannelTypesForThing(getThing().getUID());
}","@Override public void dispose(){
  listeners.clear();
  buttonExecutor.shutdownNow();
  cancelRetry();
  disconnectFromHub();
  factory.removeChannelTypesForThing(getThing().getUID());
}",0.952112676056338
62537,"@Override public void initialize(){
  connect();
}","@Override public void initialize(){
  cancelRetry();
  connect();
}",0.8547008547008547
62538,"private void disconnectFromHub(){
  if (retryJob != null && !retryJob.isDone()) {
    retryJob.cancel(true);
  }
  if (heartBeatJob != null && !heartBeatJob.isDone()) {
    heartBeatJob.cancel(true);
  }
  if (client != null) {
    client.removeListener(this);
    client.disconnect();
    client=null;
  }
}","private void disconnectFromHub(){
  if (heartBeatJob != null && !heartBeatJob.isDone()) {
    heartBeatJob.cancel(false);
  }
  if (client != null) {
    client.removeListener(this);
    client.disconnect();
  }
}",0.4798464491362764
62539,"private PcapNetworkInterfaceWrapper(PcapNetworkInterface pcapNetworkInterface){
  if (pcapNetworkInterface == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  this.pcapNetworkInterface=pcapNetworkInterface;
}","private PcapNetworkInterfaceWrapper(PcapNetworkInterface pcapNetworkInterface){
  if (pcapNetworkInterface == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.pcapNetworkInterface=pcapNetworkInterface;
}",0.9478260869565216
62540,"/** 
 * Create the callback from the other   {@link AtlonaHandlerCallback}
 * @param wrappedCallback a non-null {@link AtlonaHandlerCallback}
 * @throws NullPointerException if wrappedCallback is null
 */
public StatefulHandlerCallback(AtlonaHandlerCallback wrappedCallback){
  if (wrappedCallback == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  _wrappedCallback=wrappedCallback;
}","/** 
 * Create the callback from the other   {@link AtlonaHandlerCallback}
 * @param wrappedCallback a non-null {@link AtlonaHandlerCallback}
 * @throws IllegalArgumentException if wrappedCallback is null
 */
public StatefulHandlerCallback(AtlonaHandlerCallback wrappedCallback){
  if (wrappedCallback == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  _wrappedCallback=wrappedCallback;
}",0.9364303178484108
62541,"public boolean unregisterDeviceStatusListener(DeviceStatusListener deviceStatusListener){
  if (deviceStatusListener == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  boolean result=deviceStatusListeners.remove(deviceStatusListener);
  if (result) {
    clearDeviceList();
  }
  return result;
}","public boolean unregisterDeviceStatusListener(DeviceStatusListener deviceStatusListener){
  if (deviceStatusListener == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  boolean result=deviceStatusListeners.remove(deviceStatusListener);
  if (result) {
    clearDeviceList();
  }
  return result;
}",0.9592476489028212
62542,"public boolean registerDeviceStatusListener(DeviceStatusListener deviceStatusListener){
  if (deviceStatusListener == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  boolean result=deviceStatusListeners.add(deviceStatusListener);
  if (result) {
  }
  return result;
}","public boolean registerDeviceStatusListener(DeviceStatusListener deviceStatusListener){
  if (deviceStatusListener == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  boolean result=deviceStatusListeners.add(deviceStatusListener);
  if (result) {
  }
  return result;
}",0.9553264604810996
62543,"public boolean registerApplianceStatusListener(ApplianceStatusListener applianceStatusListener){
  if (applianceStatusListener == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  boolean result=applianceStatusListeners.add(applianceStatusListener);
  if (result && isInitialized()) {
    onUpdate();
    for (    HomeDevice hd : getHomeDevices()) {
      applianceStatusListener.onApplianceAdded(hd);
    }
  }
  return result;
}","public boolean registerApplianceStatusListener(ApplianceStatusListener applianceStatusListener){
  if (applianceStatusListener == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  boolean result=applianceStatusListeners.add(applianceStatusListener);
  if (result && isInitialized()) {
    onUpdate();
    for (    HomeDevice hd : getHomeDevices()) {
      applianceStatusListener.onApplianceAdded(hd);
    }
  }
  return result;
}",0.9711751662971176
62544,"/** 
 * Create the callback from the other   {@link RioHandlerCallback}
 * @param wrappedCallback a non-null {@link RioHandlerCallback}
 * @throws NullPointerException if wrappedCallback is null
 */
public StatefulHandlerCallback(RioHandlerCallback wrappedCallback){
  if (wrappedCallback == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  _wrappedCallback=wrappedCallback;
}","/** 
 * Create the callback from the other   {@link RioHandlerCallback}
 * @param wrappedCallback a non-null {@link RioHandlerCallback}
 * @throws IllegalArgumentException if wrappedCallback is null
 */
public StatefulHandlerCallback(RioHandlerCallback wrappedCallback){
  if (wrappedCallback == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  _wrappedCallback=wrappedCallback;
}",0.935
62545,"public void setUserName(String userName){
  this.user=user;
}","public void setUserName(String userName){
  this.user=userName;
}",0.9682539682539684
62546,"@Override public void run(){
  if (connected) {
    logger.debug(""String_Node_Str"",ip,port);
    sendCommand(new EiscpMessage.MessageBuilder().command(EiscpCommand.POWER_QUERY.getCommand()).value(EiscpCommand.POWER_QUERY.getValue()).build());
  }
}","@Override public void run(){
  logger.debug(""String_Node_Str"",ip,port);
  sendCommand(new EiscpMessage.MessageBuilder().command(EiscpCommand.POWER_QUERY.getCommand()).value(EiscpCommand.POWER_QUERY.getValue()).build());
}",0.9424307036247336
62547,"private void refreshChannel(Channel channel){
  ZWayBridgeHandler zwayBridgeHandler=getZWayBridgeHandler();
  if (zwayBridgeHandler == null || !zwayBridgeHandler.getThing().getStatus().equals(ThingStatus.ONLINE)) {
    logger.debug(""String_Node_Str"");
    return;
  }
  String deviceId=channel.getProperties().get(""String_Node_Str"");
  if (deviceId != null) {
    DeviceList deviceList=zwayBridgeHandler.getZWayApi().getDevices();
    if (deviceList != null) {
      Device device=deviceList.getDeviceById(deviceId);
      if (device == null) {
        logger.debug(""String_Node_Str"");
        return;
      }
      updateState(channel.getUID(),ZWayDeviceStateConverter.toState(device,channel));
      try {
        device.update();
      }
 catch (      Exception e) {
        logger.debug(device.getMetrics().getTitle() + ""String_Node_Str"");
      }
    }
 else {
      logger.warn(""String_Node_Str"");
    }
  }
 else {
    if (channel.getUID().equals(new ChannelUID(getThing().getUID(),THERMOSTAT_MODE_CC_CHANNEL))) {
      Integer nodeId=Integer.parseInt(channel.getProperties().get(""String_Node_Str""));
      ZWaveDevice physicalDevice=zwayBridgeHandler.getZWayApi().getZWaveDevice(nodeId);
      if (physicalDevice != null) {
        updateState(channel.getUID(),new DecimalType(physicalDevice.getInstances().get0().getCommandClasses().get64().getData().getMode().getValue()));
      }
    }
  }
}","private void refreshChannel(Channel channel){
  ZWayBridgeHandler zwayBridgeHandler=getZWayBridgeHandler();
  if (zwayBridgeHandler == null || !zwayBridgeHandler.getThing().getStatus().equals(ThingStatus.ONLINE)) {
    logger.debug(""String_Node_Str"");
    return;
  }
  String deviceId=channel.getProperties().get(""String_Node_Str"");
  if (deviceId != null) {
    DeviceList deviceList=zwayBridgeHandler.getZWayApi().getDevices();
    if (deviceList != null) {
      Device device=deviceList.getDeviceById(deviceId);
      if (device == null) {
        logger.debug(""String_Node_Str"");
        return;
      }
      try {
        updateState(channel.getUID(),ZWayDeviceStateConverter.toState(device,channel));
      }
 catch (      IllegalArgumentException iae) {
        logger.debug(""String_Node_Str"",iae.getMessage(),device.getMetrics().getTitle(),device.getMetrics().getLevel(),channel.getChannelTypeUID());
        updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""String_Node_Str"" + device.getMetrics().getTitle() + ""String_Node_Str""+ device.getMetrics().getLevel()+ ""String_Node_Str""+ channel.getChannelTypeUID()+ ""String_Node_Str"");
      }
      try {
        device.update();
      }
 catch (      Exception e) {
        logger.debug(device.getMetrics().getTitle() + ""String_Node_Str"");
      }
    }
 else {
      logger.warn(""String_Node_Str"");
    }
  }
 else {
    if (channel.getUID().equals(new ChannelUID(getThing().getUID(),THERMOSTAT_MODE_CC_CHANNEL))) {
      Integer nodeId=Integer.parseInt(channel.getProperties().get(""String_Node_Str""));
      ZWaveDevice physicalDevice=zwayBridgeHandler.getZWayApi().getZWaveDevice(nodeId);
      if (physicalDevice != null) {
        updateState(channel.getUID(),new DecimalType(physicalDevice.getInstances().get0().getCommandClasses().get64().getData().getMode().getValue()));
      }
    }
  }
}",0.8591549295774648
62548,"public static State toState(Device device,Channel channel){
  String level=device.getMetrics().getLevel();
  if (device instanceof Battery) {
    return getMultilevelState(level);
  }
 else   if (device instanceof Doorlock) {
    return getBinaryState(level.toLowerCase());
  }
 else   if (device instanceof SensorBinary) {
    if (channel.getAcceptedItemType().equals(""String_Node_Str"")) {
      return getDoorlockState(level.toLowerCase());
    }
 else {
      return getBinaryState(level.toLowerCase());
    }
  }
 else   if (device instanceof SensorMultilevel) {
    return getMultilevelState(level);
  }
 else   if (device instanceof SwitchBinary) {
    return getBinaryState(level.toLowerCase());
  }
 else   if (device instanceof SwitchMultilevel) {
    return getMultilevelState(level);
  }
 else   if (device instanceof SwitchRGBW) {
    return getColorState(device.getMetrics().getColor());
  }
 else   if (device instanceof SwitchToggle) {
  }
 else   if (device instanceof Thermostat) {
    return getMultilevelState(level);
  }
 else   if (device instanceof SwitchControl) {
    return getBinaryState(level.toLowerCase());
  }
 else   if (device instanceof ToggleButton) {
  }
  return UnDefType.UNDEF;
}","public static State toState(Device device,Channel channel){
  String level=device.getMetrics().getLevel();
  if (device instanceof Battery) {
    return getMultilevelState(level);
  }
 else   if (device instanceof Doorlock) {
    return getBinaryState(level.toLowerCase());
  }
 else   if (device instanceof SensorBinary) {
    if (channel.getAcceptedItemType().equals(""String_Node_Str"")) {
      return getDoorlockState(level.toLowerCase());
    }
 else {
      return getBinaryState(level.toLowerCase());
    }
  }
 else   if (device instanceof SensorMultilevel) {
    return getMultilevelState(level);
  }
 else   if (device instanceof SwitchBinary) {
    return getBinaryState(level.toLowerCase());
  }
 else   if (device instanceof SwitchMultilevel) {
    if (channel.getAcceptedItemType().equals(""String_Node_Str"")) {
      return getPercentState(level);
    }
 else {
      return getMultilevelState(level);
    }
  }
 else   if (device instanceof SwitchRGBW) {
    return getColorState(device.getMetrics().getColor());
  }
 else   if (device instanceof SwitchToggle) {
  }
 else   if (device instanceof Thermostat) {
    return getMultilevelState(level);
  }
 else   if (device instanceof SwitchControl) {
    return getBinaryState(level.toLowerCase());
  }
 else   if (device instanceof ToggleButton) {
  }
  return UnDefType.UNDEF;
}",0.95078125
62549,"/** 
 * Transforms an value in an openHAB type.
 * @param multilevel sensor value
 * @return transformed openHAB state
 */
private static State getMultilevelState(String multilevelSensorValue){
  if (multilevelSensorValue != null) {
    return new DecimalType(multilevelSensorValue);
  }
  return UnDefType.UNDEF;
}","/** 
 * Transforms an value in an openHAB type.
 * @param multilevel sensor value
 * @return transformed openHAB state
 */
private static State getMultilevelState(String multilevelValue){
  if (multilevelValue != null) {
    return new DecimalType(multilevelValue);
  }
  return UnDefType.UNDEF;
}",0.9705882352941176
62550,"private void scan(){
  logger.debug(""String_Node_Str"",mBridgeHandler.getThing().getUID());
  if (mBridgeHandler == null || !mBridgeHandler.getThing().getStatus().equals(ThingStatus.ONLINE)) {
    logger.debug(""String_Node_Str"");
    return;
  }
  LocationList locationList=mBridgeHandler.getZWayApi().getLocations();
  DeviceList deviceList=mBridgeHandler.getZWayApi().getDevices();
  if (deviceList != null) {
    Map<Integer,List<Device>> physicalDevices=deviceList.getDevicesGroupByNodeId();
    for (    Map.Entry<Integer,List<Device>> entry : physicalDevices.entrySet()) {
      final Integer nodeId=entry.getKey();
      List<Device> devices=entry.getValue();
      final ThingUID bridgeUID=mBridgeHandler.getThing().getUID();
      String location=""String_Node_Str"";
      String deviceTypes=""String_Node_Str"";
      Integer index=0;
      for (      Device device : devices) {
        if (index != 0 && index != devices.size()) {
          deviceTypes+=""String_Node_Str"";
        }
        deviceTypes+=device.getDeviceType();
        index++;
        if (locationList != null) {
          if (device.getLocation() != -1 && device.getLocation() != 0) {
            location=locationList.getLocationById(device.getLocation()).getTitle();
          }
        }
      }
      logger.debug(""String_Node_Str"",devices.size(),deviceTypes);
      ZWaveDevice zwaveDevice=mBridgeHandler.getZWayApi().getZWaveDevice(nodeId);
      if (zwaveDevice != null) {
        String givenName=""String_Node_Str"" + nodeId;
        if (!zwaveDevice.getData().getGivenName().getValue().equals(""String_Node_Str"")) {
          givenName=zwaveDevice.getData().getGivenName().getValue();
        }
 else         if (!zwaveDevice.getData().getDeviceTypeString().getValue().equals(""String_Node_Str"")) {
          givenName+=""String_Node_Str"" + zwaveDevice.getData().getDeviceTypeString().getValue();
        }
        String vendorString=zwaveDevice.getData().getVendorString().getValue();
        if (!zwaveDevice.getData().getVendorString().getValue().equals(""String_Node_Str"")) {
          givenName+=""String_Node_Str"" + vendorString + ""String_Node_Str"";
        }
        String manufacturerId=zwaveDevice.getData().getManufacturerId().getValue();
        String deviceType=zwaveDevice.getData().getDeviceTypeString().getValue();
        String zddxmlfile=zwaveDevice.getData().getZDDXMLFile().getValue();
        String sdk=zwaveDevice.getData().getSDK().getValue();
        ThingUID thingUID=new ThingUID(ZWayBindingConstants.THING_TYPE_DEVICE,mBridgeHandler.getThing().getUID(),nodeId.toString());
        DiscoveryResult discoveryResult=DiscoveryResultBuilder.create(thingUID).withLabel(givenName).withBridge(bridgeUID).withProperty(ZWayBindingConstants.DEVICE_CONFIG_NODE_ID,nodeId).withProperty(Thing.PROPERTY_VENDOR,vendorString).withProperty(ZWayBindingConstants.DEVICE_PROP_LOCATION,location).withProperty(ZWayBindingConstants.DEVICE_PROP_MANUFACTURER_ID,manufacturerId).withProperty(ZWayBindingConstants.DEVICE_PROP_DEVICE_TYPE,deviceType).withProperty(ZWayBindingConstants.DEVICE_PROP_ZDDXMLFILE,zddxmlfile).withProperty(ZWayBindingConstants.DEVICE_PROP_SDK,sdk).build();
        thingDiscovered(discoveryResult);
      }
 else {
        logger.warn(""String_Node_Str"");
      }
    }
    for (    Device device : deviceList.getDevices()) {
      if (device.getVisibility() && !device.getPermanentlyHidden()) {
        if (ZWayBindingConstants.DISCOVERY_IGNORED_DEVICES.contains(device.getDeviceId().split(""String_Node_Str"")[0])) {
          logger.debug(""String_Node_Str"",device.getMetrics().getTitle());
          continue;
        }
        ThingUID bridgeUID=mBridgeHandler.getThing().getUID();
        String location=""String_Node_Str"";
        if (locationList != null) {
          if (device.getLocation() != -1 && device.getLocation() != 0) {
            location=locationList.getLocationById(device.getLocation()).getTitle();
          }
        }
        logger.debug(""String_Node_Str"",device.getDeviceType(),device.getMetrics().getProbeTitle(),device.getNodeId());
        ThingUID thingUID=new ThingUID(ZWayBindingConstants.THING_TYPE_VIRTUAL_DEVICE,mBridgeHandler.getThing().getUID(),device.getDeviceId());
        DiscoveryResult discoveryResult=DiscoveryResultBuilder.create(thingUID).withLabel(device.getMetrics().getTitle()).withBridge(bridgeUID).withProperty(ZWayBindingConstants.DEVICE_CONFIG_VIRTUAL_DEVICE_ID,device.getDeviceId()).withProperty(ZWayBindingConstants.DEVICE_PROP_LOCATION,location).build();
        thingDiscovered(discoveryResult);
      }
    }
  }
 else {
    logger.warn(""String_Node_Str"");
  }
}","private void scan(){
  logger.debug(""String_Node_Str"",mBridgeHandler.getThing().getUID());
  if (mBridgeHandler == null || !mBridgeHandler.getThing().getStatus().equals(ThingStatus.ONLINE)) {
    logger.debug(""String_Node_Str"");
    return;
  }
  LocationList locationList=mBridgeHandler.getZWayApi().getLocations();
  DeviceList deviceList=mBridgeHandler.getZWayApi().getDevices();
  if (deviceList != null) {
    Map<Integer,List<Device>> physicalDevices=deviceList.getDevicesGroupByNodeId();
    for (    Map.Entry<Integer,List<Device>> entry : physicalDevices.entrySet()) {
      final Integer nodeId=entry.getKey();
      List<Device> devices=entry.getValue();
      final ThingUID bridgeUID=mBridgeHandler.getThing().getUID();
      String location=""String_Node_Str"";
      String deviceTypes=""String_Node_Str"";
      Integer index=0;
      for (      Device device : devices) {
        if (index != 0 && index != devices.size()) {
          deviceTypes+=""String_Node_Str"";
        }
        deviceTypes+=device.getDeviceType();
        index++;
        if (locationList != null) {
          if (device.getLocation() != -1 && device.getLocation() != 0) {
            try {
              location=locationList.getLocationById(device.getLocation()).getTitle();
            }
 catch (            NullPointerException npe) {
              location=""String_Node_Str"";
            }
          }
        }
      }
      logger.debug(""String_Node_Str"",devices.size(),deviceTypes);
      ZWaveDevice zwaveDevice=mBridgeHandler.getZWayApi().getZWaveDevice(nodeId);
      if (zwaveDevice != null) {
        String givenName=""String_Node_Str"" + nodeId;
        if (!zwaveDevice.getData().getGivenName().getValue().equals(""String_Node_Str"")) {
          givenName=zwaveDevice.getData().getGivenName().getValue();
        }
 else         if (!zwaveDevice.getData().getDeviceTypeString().getValue().equals(""String_Node_Str"")) {
          givenName+=""String_Node_Str"" + zwaveDevice.getData().getDeviceTypeString().getValue();
        }
        String vendorString=zwaveDevice.getData().getVendorString().getValue();
        if (!zwaveDevice.getData().getVendorString().getValue().equals(""String_Node_Str"")) {
          givenName+=""String_Node_Str"" + vendorString + ""String_Node_Str"";
        }
        String manufacturerId=zwaveDevice.getData().getManufacturerId().getValue();
        String deviceType=zwaveDevice.getData().getDeviceTypeString().getValue();
        String zddxmlfile=zwaveDevice.getData().getZDDXMLFile().getValue();
        String sdk=zwaveDevice.getData().getSDK().getValue();
        ThingUID thingUID=new ThingUID(ZWayBindingConstants.THING_TYPE_DEVICE,mBridgeHandler.getThing().getUID(),nodeId.toString());
        DiscoveryResult discoveryResult=DiscoveryResultBuilder.create(thingUID).withLabel(givenName).withBridge(bridgeUID).withProperty(ZWayBindingConstants.DEVICE_CONFIG_NODE_ID,nodeId).withProperty(Thing.PROPERTY_VENDOR,vendorString).withProperty(ZWayBindingConstants.DEVICE_PROP_LOCATION,location).withProperty(ZWayBindingConstants.DEVICE_PROP_MANUFACTURER_ID,manufacturerId).withProperty(ZWayBindingConstants.DEVICE_PROP_DEVICE_TYPE,deviceType).withProperty(ZWayBindingConstants.DEVICE_PROP_ZDDXMLFILE,zddxmlfile).withProperty(ZWayBindingConstants.DEVICE_PROP_SDK,sdk).build();
        thingDiscovered(discoveryResult);
      }
 else {
        logger.warn(""String_Node_Str"");
      }
    }
    for (    Device device : deviceList.getDevices()) {
      if (device.getVisibility() && !device.getPermanentlyHidden()) {
        if (ZWayBindingConstants.DISCOVERY_IGNORED_DEVICES.contains(device.getDeviceId().split(""String_Node_Str"")[0])) {
          logger.debug(""String_Node_Str"",device.getMetrics().getTitle());
          continue;
        }
        ThingUID bridgeUID=mBridgeHandler.getThing().getUID();
        String location=""String_Node_Str"";
        if (locationList != null) {
          if (device.getLocation() != -1 && device.getLocation() != 0) {
            try {
              location=locationList.getLocationById(device.getLocation()).getTitle();
            }
 catch (            NullPointerException npe) {
              location=""String_Node_Str"";
            }
          }
        }
        logger.debug(""String_Node_Str"",device.getDeviceType(),device.getMetrics().getProbeTitle(),device.getNodeId());
        ThingUID thingUID=new ThingUID(ZWayBindingConstants.THING_TYPE_VIRTUAL_DEVICE,mBridgeHandler.getThing().getUID(),device.getDeviceId());
        DiscoveryResult discoveryResult=DiscoveryResultBuilder.create(thingUID).withLabel(device.getMetrics().getTitle()).withBridge(bridgeUID).withProperty(ZWayBindingConstants.DEVICE_CONFIG_VIRTUAL_DEVICE_ID,device.getDeviceId()).withProperty(ZWayBindingConstants.DEVICE_PROP_LOCATION,location).build();
        thingDiscovered(discoveryResult);
      }
    }
  }
 else {
    logger.warn(""String_Node_Str"");
  }
}",0.9710388247639036
62551,"/** 
 * Sends the message, retries if there was an error.
 */
private Object[] sendMessage(int port,BinRpcMessage request,int socketRetryCounter) throws IOException {
  BinRpcMessage resp=null;
  try {
    Socket socket=socketHandler.getSocket(port);
    socket.getOutputStream().write(request.createMessage());
    resp=new BinRpcMessage(socket.getInputStream(),false,config.getEncoding());
    return new RpcResponseParser(request).parse(resp.getResponseData());
  }
 catch (  UnknownRpcFailureException rpcEx) {
    throw rpcEx;
  }
catch (  IOException ioEx) {
    if (""String_Node_Str"".equals(request.getMethodName()) || socketRetryCounter >= MAX_SOCKET_RETRY) {
      throw ioEx;
    }
 else {
      socketRetryCounter++;
      logger.debug(""String_Node_Str"",socketRetryCounter,MAX_SOCKET_RETRY);
      socketHandler.removeSocket(port);
      return sendMessage(port,request,socketRetryCounter);
    }
  }
 finally {
    if (TRACE_ENABLED) {
      logger.trace(""String_Node_Str"",resp == null ? ""String_Node_Str"" : resp.toString());
    }
  }
}","/** 
 * Sends the message, retries if there was an error.
 */
private Object[] sendMessage(int port,BinRpcMessage request,int socketRetryCounter) throws IOException {
  BinRpcMessage resp=null;
  try {
    Socket socket=socketHandler.getSocket(port);
    socket.getOutputStream().write(request.createMessage());
    resp=new BinRpcMessage(socket.getInputStream(),false,config.getEncoding());
    return new RpcResponseParser(request).parse(resp.getResponseData());
  }
 catch (  UnknownRpcFailureException|UnknownParameterSetException rpcEx) {
    throw rpcEx;
  }
catch (  IOException ioEx) {
    if (""String_Node_Str"".equals(request.getMethodName()) || socketRetryCounter >= MAX_SOCKET_RETRY) {
      throw ioEx;
    }
 else {
      socketRetryCounter++;
      logger.debug(""String_Node_Str"",socketRetryCounter,MAX_SOCKET_RETRY);
      socketHandler.removeSocket(port);
      return sendMessage(port,request,socketRetryCounter);
    }
  }
 finally {
    if (TRACE_ENABLED) {
      logger.trace(""String_Node_Str"",resp == null ? ""String_Node_Str"" : resp.toString());
    }
  }
}",0.9863657733897508
62552,"/** 
 * Loads all datapoint metadata into the given channel.
 */
public void addChannelDatapoints(HmChannel channel,HmParamsetType paramsetType) throws IOException {
  RpcRequest request=createRpcRequest(""String_Node_Str"");
  request.addArg(getRpcAddress(channel.getDevice().getAddress()) + ""String_Node_Str"" + channel.getNumber());
  request.addArg(paramsetType.toString());
  new GetParamsetDescriptionParser(channel,paramsetType).parse(sendMessage(config.getRpcPort(channel),request));
}","/** 
 * Loads all datapoint metadata into the given channel.
 */
public void addChannelDatapoints(HmChannel channel,HmParamsetType paramsetType) throws IOException {
  RpcRequest request=createRpcRequest(""String_Node_Str"");
  request.addArg(getRpcAddress(channel.getDevice().getAddress()) + ""String_Node_Str"" + channel.getNumber());
  request.addArg(paramsetType.toString());
  try {
    new GetParamsetDescriptionParser(channel,paramsetType).parse(sendMessage(config.getRpcPort(channel),request));
  }
 catch (  UnknownParameterSetException ex) {
    if (paramsetType == HmParamsetType.VALUES) {
      throw ex;
    }
  }
}",0.8797127468581688
62553,"/** 
 * {@inheritDoc}
 */
@Override protected synchronized Object[] sendMessage(int port,RpcRequest request) throws IOException {
  try {
    if (TRACE_ENABLED) {
      logger.trace(""String_Node_Str"",port,request);
    }
    BytesContentProvider content=new BytesContentProvider(request.createMessage());
    String url=String.format(""String_Node_Str"",config.getGatewayAddress(),port);
    ContentResponse response=httpClient.POST(url).content(content).timeout(config.getTimeout(),TimeUnit.SECONDS).header(HttpHeader.CONTENT_TYPE,""String_Node_Str"" + config.getEncoding()).send();
    String result=new String(response.getContent(),config.getEncoding());
    if (TRACE_ENABLED) {
      logger.trace(""String_Node_Str"",port,result);
    }
    Object[] data=new XmlRpcResponse(new ByteArrayInputStream(result.getBytes(config.getEncoding())),config.getEncoding()).getResponseData();
    return new RpcResponseParser(request).parse(data);
  }
 catch (  UnknownRpcFailureException ex) {
    throw ex;
  }
catch (  Exception ex) {
    throw new IOException(ex.getMessage(),ex);
  }
}","/** 
 * {@inheritDoc}
 */
@Override protected synchronized Object[] sendMessage(int port,RpcRequest request) throws IOException {
  try {
    if (TRACE_ENABLED) {
      logger.trace(""String_Node_Str"",port,request);
    }
    BytesContentProvider content=new BytesContentProvider(request.createMessage());
    String url=String.format(""String_Node_Str"",config.getGatewayAddress(),port);
    ContentResponse response=httpClient.POST(url).content(content).timeout(config.getTimeout(),TimeUnit.SECONDS).header(HttpHeader.CONTENT_TYPE,""String_Node_Str"" + config.getEncoding()).send();
    String result=new String(response.getContent(),config.getEncoding());
    if (TRACE_ENABLED) {
      logger.trace(""String_Node_Str"",port,result);
    }
    Object[] data=new XmlRpcResponse(new ByteArrayInputStream(result.getBytes(config.getEncoding())),config.getEncoding()).getResponseData();
    return new RpcResponseParser(request).parse(data);
  }
 catch (  UnknownRpcFailureException|UnknownParameterSetException ex) {
    throw ex;
  }
catch (  Exception ex) {
    throw new IOException(ex.getMessage(),ex);
  }
}",0.9866911427260212
62554,"/** 
 * {@inheritDoc}
 */
@Override @SuppressWarnings(""String_Node_Str"") public Object[] parse(Object[] message) throws IOException {
  if (message != null && message.length > 0) {
    Object responseData=message[0];
    if (responseData instanceof Map) {
      Map<String,Object> map=(Map<String,Object>)responseData;
      if (map.containsKey(""String_Node_Str"")) {
        Number faultCode=toNumber(map.get(""String_Node_Str""));
        String faultString=toString(map.get(""String_Node_Str""));
        String faultMessage=String.format(""String_Node_Str"",faultCode,faultString,response);
        if (faultCode.intValue() == -1 && StringUtils.equals(""String_Node_Str"",faultString)) {
          throw new UnknownRpcFailureException(faultMessage);
        }
        throw new IOException(faultMessage);
      }
    }
    return message;
  }
  throw new IOException(""String_Node_Str"" + message);
}","/** 
 * {@inheritDoc}
 */
@Override @SuppressWarnings(""String_Node_Str"") public Object[] parse(Object[] message) throws IOException {
  if (message != null && message.length > 0) {
    Object responseData=message[0];
    if (responseData instanceof Map) {
      Map<String,Object> map=(Map<String,Object>)responseData;
      if (map.containsKey(""String_Node_Str"")) {
        Number faultCode=toNumber(map.get(""String_Node_Str""));
        String faultString=toString(map.get(""String_Node_Str""));
        String faultMessage=String.format(""String_Node_Str"",faultCode,faultString,response);
        if (faultCode.intValue() == -1 && StringUtils.equals(""String_Node_Str"",faultString)) {
          throw new UnknownRpcFailureException(faultMessage);
        }
 else         if (faultCode.intValue() == -3 && StringUtils.equals(""String_Node_Str"",faultString)) {
          throw new UnknownParameterSetException(faultMessage);
        }
        throw new IOException(faultMessage);
      }
    }
    return message;
  }
  throw new IOException(""String_Node_Str"" + message);
}",0.9107598164201938
62555,"@Override public void handleCommand(ChannelUID channelUID,Command command){
  if (state == null) {
    logger.debug(""String_Node_Str"");
    return;
  }
switch (channelUID.getId()) {
case MilightBindingConstants.CHANNEL_COLOR:
{
      if (command instanceof HSBType) {
        HSBType hsb=(HSBType)command;
        if (hsb.getSaturation().intValue() < 50) {
          state.setWhiteMode();
        }
 else {
          state.setColor(hsb.getHue().intValue());
        }
        state.setBrightness(hsb.getBrightness().intValue());
      }
 else       if (command instanceof OnOffType) {
        OnOffType hsb=(OnOffType)command;
        if (hsb == OnOffType.OFF) {
          state.setOff();
        }
 else {
          state.setOn();
        }
      }
 else       if (command instanceof PercentType) {
        PercentType p=(PercentType)command;
        state.setBrightness(p.intValue());
      }
      break;
    }
case MilightBindingConstants.CHANNEL_NIGHTMODE:
{
    state.setNightMode();
    break;
  }
case MilightBindingConstants.CHANNEL_BRIGHTNESS:
{
  if (command instanceof OnOffType) {
    OnOffType s=(OnOffType)command;
    if (s == OnOffType.OFF) {
      state.setOff();
    }
 else {
      state.setOn();
    }
  }
 else   if (command instanceof PercentType) {
    PercentType p=(PercentType)command;
    state.setBrightness(p.intValue());
  }
  break;
}
case MilightBindingConstants.CHANNEL_TEMP:
{
DecimalType d=(DecimalType)command;
state.setColorTemperature(d.intValue());
break;
}
case MilightBindingConstants.CHANNEL_SPEED:
{
DecimalType d=(DecimalType)command;
state.setDiscoSpeed(d.intValue());
break;
}
case MilightBindingConstants.CHANNEL_MODE:
{
StringType d=(StringType)command;
state.setDiscoMode(Integer.valueOf(d.toString()));
break;
}
default :
logger.error(""String_Node_Str"" + channelUID.getId());
}
}","@Override public void handleCommand(ChannelUID channelUID,Command command){
  if (state == null) {
    logger.debug(""String_Node_Str"");
    return;
  }
switch (channelUID.getId()) {
case MilightBindingConstants.CHANNEL_COLOR:
{
      if (command instanceof HSBType) {
        HSBType hsb=(HSBType)command;
        if (hsb.getSaturation().intValue() < 50) {
          state.setWhiteMode();
        }
 else {
          state.setColor(hsb.getHue().intValue());
        }
        state.setBrightness(hsb.getBrightness().intValue());
      }
 else       if (command instanceof OnOffType) {
        OnOffType hsb=(OnOffType)command;
        if (hsb == OnOffType.OFF) {
          state.setOff();
        }
 else {
          state.setOn();
        }
      }
 else       if (command instanceof PercentType) {
        PercentType p=(PercentType)command;
        state.setBrightness(p.intValue());
      }
      break;
    }
case MilightBindingConstants.CHANNEL_NIGHTMODE:
{
    state.setNightMode();
    break;
  }
case MilightBindingConstants.CHANNEL_BRIGHTNESS:
{
  if (command instanceof OnOffType) {
    OnOffType s=(OnOffType)command;
    if (s == OnOffType.OFF) {
      state.setOff();
    }
 else {
      state.setOn();
    }
  }
 else   if (command instanceof PercentType) {
    PercentType p=(PercentType)command;
    state.setBrightness(p.intValue());
  }
  break;
}
case MilightBindingConstants.CHANNEL_TEMP:
{
if (command instanceof IncreaseDecreaseType) {
  IncreaseDecreaseType id=(IncreaseDecreaseType)command;
  if (id == IncreaseDecreaseType.INCREASE) {
    state.warmer();
  }
 else   if (id == IncreaseDecreaseType.DECREASE) {
    state.cooler();
  }
}
 else if (command instanceof DecimalType) {
  DecimalType d=(DecimalType)command;
  state.setColorTemperature(d.intValue());
}
break;
}
case MilightBindingConstants.CHANNEL_SPEED:
{
if (command instanceof IncreaseDecreaseType) {
IncreaseDecreaseType id=(IncreaseDecreaseType)command;
if (id == IncreaseDecreaseType.INCREASE) {
  state.increaseSpeed();
}
 else if (id == IncreaseDecreaseType.DECREASE) {
  state.decreaseSpeed();
}
}
 else if (command instanceof DecimalType) {
DecimalType d=(DecimalType)command;
state.setDiscoSpeed(d.intValue());
}
break;
}
case MilightBindingConstants.CHANNEL_MODE:
{
if (command instanceof IncreaseDecreaseType) {
IncreaseDecreaseType id=(IncreaseDecreaseType)command;
if (id == IncreaseDecreaseType.INCREASE) {
state.nextDiscoMode();
}
 else if (id == IncreaseDecreaseType.DECREASE) {
state.previousDiscoMode();
}
}
 else if (command instanceof DecimalType) {
DecimalType d=(DecimalType)command;
state.setDiscoMode(d.intValue());
}
 else if (command instanceof StringType) {
StringType d=(StringType)command;
state.setDiscoMode(Integer.valueOf(d.toString()));
}
break;
}
default :
logger.error(""String_Node_Str"" + channelUID.getId());
}
}",0.72594814656096
62556,"public void warmer(){
  brightness=com.warmer(bulb,brightness);
}","public void warmer(){
  colorTemperature=com.warmer(bulb,colorTemperature);
}",0.7183098591549296
62557,"public void cooler(){
  brightness=com.cooler(bulb,brightness);
}","public void cooler(){
  colorTemperature=com.cooler(bulb,colorTemperature);
}",0.7183098591549296
62558,"/** 
 * {@inheritDoc}
 */
@Override public void dscAlarmEventReceived(EventObject event,Thing thing){
  if (thing != null) {
    if (getThing() == thing) {
      DSCAlarmEvent dscAlarmEvent=(DSCAlarmEvent)event;
      DSCAlarmMessage dscAlarmMessage=dscAlarmEvent.getDSCAlarmMessage();
      ChannelUID channelUID=null;
      DSCAlarmCode dscAlarmCode=DSCAlarmCode.getDSCAlarmCodeValue(dscAlarmMessage.getMessageInfo(DSCAlarmMessageInfoType.CODE));
      String dscAlarmMessageName=dscAlarmMessage.getMessageInfo(DSCAlarmMessageInfoType.NAME);
      String dscAlarmMessageMode=dscAlarmMessage.getMessageInfo(DSCAlarmMessageInfoType.MODE);
      logger.debug(""String_Node_Str"",thing.getUID(),dscAlarmCode);
switch (dscAlarmCode) {
case PartitionReady:
case PartitionNotReady:
case PartitionReadyForceArming:
case SystemArmingInProgress:
        partitionStatus(dscAlarmMessageName);
      break;
case PartitionArmed:
    channelUID=new ChannelUID(getThing().getUID(),PARTITION_ARMED);
  updateChannel(channelUID,1,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PARTITION_ENTRY_DELAY);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PARTITION_EXIT_DELAY);
updateChannel(channelUID,0,""String_Node_Str"");
int armMode=Integer.parseInt(dscAlarmMessageMode) + 1;
channelUID=new ChannelUID(getThing().getUID(),PARTITION_ARM_MODE);
updateChannel(channelUID,armMode,""String_Node_Str"");
partitionStatus(dscAlarmMessageName);
break;
case PartitionDisarmed:
channelUID=new ChannelUID(getThing().getUID(),PARTITION_ARMED);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PARTITION_ENTRY_DELAY);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PARTITION_EXIT_DELAY);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PARTITION_IN_ALARM);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PARTITION_ARM_MODE);
updateChannel(channelUID,0,""String_Node_Str"");
partitionStatus(dscAlarmMessageName);
break;
case PartitionInAlarm:
channelUID=new ChannelUID(getThing().getUID(),PARTITION_IN_ALARM);
updateChannel(channelUID,1,""String_Node_Str"");
partitionStatus(dscAlarmMessageName);
break;
case FailureToArm:
channelUID=new ChannelUID(getThing().getUID(),PARTITION_ARM_MODE);
updateChannel(channelUID,0,""String_Node_Str"");
partitionStatus(dscAlarmMessageName);
break;
case UserClosing:
case SpecialClosing:
case PartialClosing:
case UserOpening:
case SpecialOpening:
partitionOpenCloseModeEventHandler(event);
default :
break;
}
}
}
}","/** 
 * {@inheritDoc}
 */
@Override public void dscAlarmEventReceived(EventObject event,Thing thing){
  if (thing != null) {
    if (getThing() == thing) {
      DSCAlarmEvent dscAlarmEvent=(DSCAlarmEvent)event;
      DSCAlarmMessage dscAlarmMessage=dscAlarmEvent.getDSCAlarmMessage();
      ChannelUID channelUID=null;
      DSCAlarmCode dscAlarmCode=DSCAlarmCode.getDSCAlarmCodeValue(dscAlarmMessage.getMessageInfo(DSCAlarmMessageInfoType.CODE));
      String dscAlarmMessageName=dscAlarmMessage.getMessageInfo(DSCAlarmMessageInfoType.NAME);
      String dscAlarmMessageMode=dscAlarmMessage.getMessageInfo(DSCAlarmMessageInfoType.MODE);
      logger.debug(""String_Node_Str"",thing.getUID(),dscAlarmCode);
switch (dscAlarmCode) {
case PartitionReady:
case PartitionNotReady:
case PartitionReadyForceArming:
case SystemArmingInProgress:
        partitionStatus(dscAlarmMessageName);
      break;
case PartitionArmed:
    channelUID=new ChannelUID(getThing().getUID(),PARTITION_ARMED);
  updateChannel(channelUID,1,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PARTITION_ENTRY_DELAY);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PARTITION_EXIT_DELAY);
updateChannel(channelUID,0,""String_Node_Str"");
int armMode=Integer.parseInt(dscAlarmMessageMode) + 1;
channelUID=new ChannelUID(getThing().getUID(),PARTITION_ARM_MODE);
updateChannel(channelUID,armMode,""String_Node_Str"");
partitionStatus(dscAlarmMessageName);
break;
case PartitionDisarmed:
channelUID=new ChannelUID(getThing().getUID(),PARTITION_ARMED);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PARTITION_ENTRY_DELAY);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PARTITION_EXIT_DELAY);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PARTITION_IN_ALARM);
updateChannel(channelUID,0,""String_Node_Str"");
channelUID=new ChannelUID(getThing().getUID(),PARTITION_ARM_MODE);
updateChannel(channelUID,0,""String_Node_Str"");
partitionStatus(dscAlarmMessageName);
break;
case PartitionInAlarm:
channelUID=new ChannelUID(getThing().getUID(),PARTITION_IN_ALARM);
updateChannel(channelUID,1,""String_Node_Str"");
partitionStatus(dscAlarmMessageName);
break;
case ExitDelayInProgress:
channelUID=new ChannelUID(getThing().getUID(),PARTITION_EXIT_DELAY);
updateChannel(channelUID,1,""String_Node_Str"");
break;
case EntryDelayInProgress:
channelUID=new ChannelUID(getThing().getUID(),PARTITION_ENTRY_DELAY);
updateChannel(channelUID,1,""String_Node_Str"");
break;
case FailureToArm:
channelUID=new ChannelUID(getThing().getUID(),PARTITION_ARM_MODE);
updateChannel(channelUID,0,""String_Node_Str"");
partitionStatus(dscAlarmMessageName);
break;
case UserClosing:
case SpecialClosing:
case PartialClosing:
case UserOpening:
case SpecialOpening:
partitionOpenCloseModeEventHandler(event);
default :
break;
}
}
}
}",0.9397074562968248
62559,"@Override protected State getNAThingProperty(String channelId){
switch (channelId) {
case CHANNEL_BATTERY_LEVEL:
    return ChannelTypeUtils.toDecimalType(getBatteryPercent());
case CHANNEL_LOW_BATTERY:
  return module.getBatteryVp() < batteryLow ? OnOffType.ON : OnOffType.OFF;
case CHANNEL_LAST_MESSAGE:
return ChannelTypeUtils.toDateTimeType(module.getLastMessage());
case CHANNEL_RF_STATUS:
Integer rfStatus=module.getRfStatus();
return ChannelTypeUtils.toDecimalType(getSignalStrength(rfStatus));
default :
return super.getNAThingProperty(channelId);
}
}","@Override protected State getNAThingProperty(String channelId){
  if (module != null) {
switch (channelId) {
case CHANNEL_BATTERY_LEVEL:
      return ChannelTypeUtils.toDecimalType(getBatteryPercent());
case CHANNEL_LOW_BATTERY:
    return module.getBatteryVp() < batteryLow ? OnOffType.ON : OnOffType.OFF;
case CHANNEL_LAST_MESSAGE:
  return ChannelTypeUtils.toDateTimeType(module.getLastMessage());
case CHANNEL_RF_STATUS:
Integer rfStatus=module.getRfStatus();
return ChannelTypeUtils.toDecimalType(getSignalStrength(rfStatus));
}
}
return super.getNAThingProperty(channelId);
}",0.9614035087719298
62560,"@Override protected State getNAThingProperty(String channelId){
  NADashboardData dashboardData=module.getDashboardData();
switch (channelId) {
case CHANNEL_TEMPERATURE:
    return ChannelTypeUtils.toDecimalType(dashboardData.getTemperature());
case CHANNEL_HUMIDITY:
  return ChannelTypeUtils.toDecimalType(dashboardData.getHumidity());
case CHANNEL_TIMEUTC:
return ChannelTypeUtils.toDateTimeType(dashboardData.getTimeUtc());
case CHANNEL_HUMIDEX:
return ChannelTypeUtils.toDecimalType(WeatherUtils.getHumidex(dashboardData.getTemperature(),dashboardData.getHumidity()));
case CHANNEL_HEATINDEX:
return ChannelTypeUtils.toDecimalType(WeatherUtils.getHeatIndex(dashboardData.getTemperature(),dashboardData.getHumidity()));
case CHANNEL_DEWPOINT:
return ChannelTypeUtils.toDecimalType(WeatherUtils.getDewPoint(dashboardData.getTemperature(),dashboardData.getHumidity()));
case CHANNEL_DEWPOINTDEP:
Double dewpoint=WeatherUtils.getDewPoint(dashboardData.getTemperature(),dashboardData.getHumidity());
return ChannelTypeUtils.toDecimalType(WeatherUtils.getDewPointDep(dashboardData.getTemperature(),dewpoint));
default :
return super.getNAThingProperty(channelId);
}
}","@Override protected State getNAThingProperty(String channelId){
  if (module != null) {
    NADashboardData dashboardData=module.getDashboardData();
switch (channelId) {
case CHANNEL_TEMPERATURE:
      return ChannelTypeUtils.toDecimalType(dashboardData.getTemperature());
case CHANNEL_HUMIDITY:
    return ChannelTypeUtils.toDecimalType(dashboardData.getHumidity());
case CHANNEL_TIMEUTC:
  return ChannelTypeUtils.toDateTimeType(dashboardData.getTimeUtc());
case CHANNEL_HUMIDEX:
return ChannelTypeUtils.toDecimalType(WeatherUtils.getHumidex(dashboardData.getTemperature(),dashboardData.getHumidity()));
case CHANNEL_HEATINDEX:
return ChannelTypeUtils.toDecimalType(WeatherUtils.getHeatIndex(dashboardData.getTemperature(),dashboardData.getHumidity()));
case CHANNEL_DEWPOINT:
return ChannelTypeUtils.toDecimalType(WeatherUtils.getDewPoint(dashboardData.getTemperature(),dashboardData.getHumidity()));
case CHANNEL_DEWPOINTDEP:
Double dewpoint=WeatherUtils.getDewPoint(dashboardData.getTemperature(),dashboardData.getHumidity());
return ChannelTypeUtils.toDecimalType(WeatherUtils.getDewPointDep(dashboardData.getTemperature(),dewpoint));
}
}
return super.getNAThingProperty(channelId);
}",0.9804753820033956
62561,"@Override protected State getNAThingProperty(String channelId){
  NADashboardData dashboardData=module.getDashboardData();
switch (channelId) {
case CHANNEL_WIND_ANGLE:
    return ChannelTypeUtils.toDecimalType(dashboardData.getWindAngle());
case CHANNEL_WIND_STRENGTH:
  return ChannelTypeUtils.toDecimalType(dashboardData.getWindStrength());
case CHANNEL_GUST_ANGLE:
return ChannelTypeUtils.toDecimalType(dashboardData.getGustAngle());
case CHANNEL_GUST_STRENGTH:
return ChannelTypeUtils.toDecimalType(dashboardData.getGustStrength());
default :
return super.getNAThingProperty(channelId);
}
}","@Override protected State getNAThingProperty(String channelId){
  if (module != null) {
    NADashboardData dashboardData=module.getDashboardData();
switch (channelId) {
case CHANNEL_WIND_ANGLE:
      return ChannelTypeUtils.toDecimalType(dashboardData.getWindAngle());
case CHANNEL_WIND_STRENGTH:
    return ChannelTypeUtils.toDecimalType(dashboardData.getWindStrength());
case CHANNEL_GUST_ANGLE:
  return ChannelTypeUtils.toDecimalType(dashboardData.getGustAngle());
case CHANNEL_GUST_STRENGTH:
return ChannelTypeUtils.toDecimalType(dashboardData.getGustStrength());
}
}
return super.getNAThingProperty(channelId);
}",0.9621087314662272
62562,"@Override protected State getNAThingProperty(String channelId){
switch (channelId) {
case CHANNEL_RAIN:
    return ChannelTypeUtils.toDecimalType(module.getDashboardData().getRain());
default :
  return super.getNAThingProperty(channelId);
}
}","@Override protected State getNAThingProperty(String channelId){
  if (module != null) {
    NADashboardData dashboardData=module.getDashboardData();
switch (channelId) {
case CHANNEL_RAIN:
      return ChannelTypeUtils.toDecimalType(dashboardData.getRain());
  }
}
return super.getNAThingProperty(channelId);
}",0.5714285714285714
62563,"@Override protected State getNAThingProperty(String channelId){
  NADashboardData dashboardData=module.getDashboardData();
switch (channelId) {
case CHANNEL_CO2:
    return ChannelTypeUtils.toDecimalType(dashboardData.getCO2());
case CHANNEL_TEMPERATURE:
  return ChannelTypeUtils.toDecimalType(dashboardData.getTemperature());
case CHANNEL_TIMEUTC:
return ChannelTypeUtils.toDateTimeType(dashboardData.getTimeUtc());
case CHANNEL_HUMIDITY:
return ChannelTypeUtils.toDecimalType(dashboardData.getHumidity());
case CHANNEL_HUMIDEX:
return ChannelTypeUtils.toDecimalType(WeatherUtils.getHumidex(dashboardData.getTemperature(),dashboardData.getHumidity()));
case CHANNEL_HEATINDEX:
return ChannelTypeUtils.toDecimalType(WeatherUtils.getHeatIndex(dashboardData.getTemperature(),dashboardData.getHumidity()));
case CHANNEL_DEWPOINT:
return ChannelTypeUtils.toDecimalType(WeatherUtils.getDewPoint(dashboardData.getTemperature(),dashboardData.getHumidity()));
case CHANNEL_DEWPOINTDEP:
Double dewpoint=WeatherUtils.getDewPoint(dashboardData.getTemperature(),dashboardData.getHumidity());
return ChannelTypeUtils.toDecimalType(WeatherUtils.getDewPointDep(dashboardData.getTemperature(),dewpoint));
default :
return super.getNAThingProperty(channelId);
}
}","@Override protected State getNAThingProperty(String channelId){
  if (module != null) {
    NADashboardData dashboardData=module.getDashboardData();
switch (channelId) {
case CHANNEL_CO2:
      return ChannelTypeUtils.toDecimalType(dashboardData.getCO2());
case CHANNEL_TEMPERATURE:
    return ChannelTypeUtils.toDecimalType(dashboardData.getTemperature());
case CHANNEL_TIMEUTC:
  return ChannelTypeUtils.toDateTimeType(dashboardData.getTimeUtc());
case CHANNEL_HUMIDITY:
return ChannelTypeUtils.toDecimalType(dashboardData.getHumidity());
case CHANNEL_HUMIDEX:
return ChannelTypeUtils.toDecimalType(WeatherUtils.getHumidex(dashboardData.getTemperature(),dashboardData.getHumidity()));
case CHANNEL_HEATINDEX:
return ChannelTypeUtils.toDecimalType(WeatherUtils.getHeatIndex(dashboardData.getTemperature(),dashboardData.getHumidity()));
case CHANNEL_DEWPOINT:
return ChannelTypeUtils.toDecimalType(WeatherUtils.getDewPoint(dashboardData.getTemperature(),dashboardData.getHumidity()));
case CHANNEL_DEWPOINTDEP:
Double dewpoint=WeatherUtils.getDewPoint(dashboardData.getTemperature(),dashboardData.getHumidity());
return ChannelTypeUtils.toDecimalType(WeatherUtils.getDewPointDep(dashboardData.getTemperature(),dewpoint));
}
}
return super.getNAThingProperty(channelId);
}",0.9817315329626688
62564,"@Override public void initialize(){
  logger.debug(""String_Node_Str"");
  MaxCubeBridgeConfiguration configuration=getConfigAs(MaxCubeBridgeConfiguration.class);
  port=configuration.port;
  ipAddress=configuration.ipAddress;
  refreshInterval=configuration.refreshInterval;
  exclusive=configuration.exclusive;
  maxRequestsPerConnection=configuration.maxRequestsPerConnection;
  ntpServer1=configuration.ntpServer1;
  ntpServer2=configuration.ntpServer2;
  logger.debug(""String_Node_Str"",ipAddress);
  logger.debug(""String_Node_Str"",port);
  logger.debug(""String_Node_Str"",refreshInterval);
  logger.debug(""String_Node_Str"",exclusive);
  logger.debug(""String_Node_Str"",maxRequestsPerConnection);
  startAutomaticRefresh();
}","@Override public void initialize(){
  logger.debug(""String_Node_Str"");
  MaxCubeBridgeConfiguration configuration=getConfigAs(MaxCubeBridgeConfiguration.class);
  port=configuration.port;
  ipAddress=configuration.ipAddress;
  refreshInterval=configuration.refreshInterval;
  exclusive=configuration.exclusive;
  maxRequestsPerConnection=configuration.maxRequestsPerConnection;
  ntpServer1=configuration.ntpServer1;
  ntpServer2=configuration.ntpServer2;
  logger.debug(""String_Node_Str"",ipAddress);
  logger.debug(""String_Node_Str"",port);
  logger.debug(""String_Node_Str"",refreshInterval);
  logger.debug(""String_Node_Str"",exclusive);
  logger.debug(""String_Node_Str"",maxRequestsPerConnection);
  previousOnline=true;
  startAutomaticRefresh();
}",0.9843856076035302
62565,"/** 
 * Registers the DeviceDiscoveryService.
 */
private void registerDeviceDiscoveryService(){
  logger.trace(""String_Node_Str"",getThing().getUID().getId());
  discoveryService=new HomematicDeviceDiscoveryService(this);
  discoveryServiceRegistration=bundleContext.registerService(DiscoveryService.class.getName(),discoveryService,new Hashtable<String,Object>());
  discoveryService.activate();
}","/** 
 * Registers the DeviceDiscoveryService.
 */
private void registerDeviceDiscoveryService(){
  if (bundleContext != null) {
    logger.trace(""String_Node_Str"",getThing().getUID().getId());
    discoveryService=new HomematicDeviceDiscoveryService(this);
    discoveryServiceRegistration=bundleContext.registerService(DiscoveryService.class.getName(),discoveryService,new Hashtable<String,Object>());
    discoveryService.activate();
  }
}",0.9487485101311084
62566,"/** 
 * Unregisters the DeviceDisoveryService.
 */
private void unregisterDeviceDiscoveryService(){
  if (discoveryServiceRegistration != null) {
    HomematicDeviceDiscoveryService service=(HomematicDeviceDiscoveryService)bundleContext.getService(discoveryServiceRegistration.getReference());
    service.deactivate();
    discoveryServiceRegistration.unregister();
    discoveryServiceRegistration=null;
    discoveryService=null;
  }
}","/** 
 * Unregisters the DeviceDisoveryService.
 */
private void unregisterDeviceDiscoveryService(){
  if (discoveryServiceRegistration != null && bundleContext != null) {
    HomematicDeviceDiscoveryService service=(HomematicDeviceDiscoveryService)bundleContext.getService(discoveryServiceRegistration.getReference());
    service.deactivate();
    discoveryServiceRegistration.unregister();
    discoveryServiceRegistration=null;
    discoveryService=null;
  }
}",0.972253052164262
62567,"/** 
 * {@inheritDoc}
 */
@Override public void generate(HmDevice device){
  ThingTypeUID thingTypeUID=UidUtils.generateThingTypeUID(device);
  ThingType tt=thingTypeProvider.getThingType(thingTypeUID,Locale.getDefault());
  if (tt == null || device.isGatewayExtras()) {
    logger.debug(""String_Node_Str"",device.getType(),device.getDatapointCount());
    List<ChannelGroupType> groupTypes=new ArrayList<ChannelGroupType>();
    for (    HmChannel channel : device.getChannels()) {
      List<ChannelDefinition> channelDefinitions=new ArrayList<ChannelDefinition>();
      for (      HmDatapoint dp : channel.getDatapoints().values()) {
        if (!isStatusDatapoint(dp) && !isIgnoredDatapoint(dp)) {
          if (dp.getParamsetType() == HmParamsetType.VALUES) {
            ChannelTypeUID channelTypeUID=UidUtils.generateChannelTypeUID(dp);
            ChannelType channelType=channelTypeProvider.getChannelType(channelTypeUID,Locale.getDefault());
            if (channelType == null) {
              channelType=createChannelType(dp,channelTypeUID);
              channelTypeProvider.addChannelType(channelType);
            }
            ChannelDefinition channelDef=new ChannelDefinition(dp.getName(),channelType.getUID());
            channelDefinitions.add(channelDef);
          }
        }
      }
      ChannelGroupTypeUID groupTypeUID=UidUtils.generateChannelGroupTypeUID(channel);
      ChannelGroupType groupType=channelTypeProvider.getChannelGroupType(groupTypeUID,Locale.getDefault());
      if (groupType == null || device.isGatewayExtras()) {
        String groupLabel=String.format(""String_Node_Str"",WordUtils.capitalizeFully(StringUtils.replace(channel.getType(),""String_Node_Str"",""String_Node_Str"")));
        groupType=new ChannelGroupType(groupTypeUID,false,groupLabel,null,channelDefinitions);
        channelTypeProvider.addChannelGroupType(groupType);
        groupTypes.add(groupType);
      }
    }
    tt=createThingType(device,groupTypes);
    thingTypeProvider.addThingType(tt);
  }
  addFirmware(device);
}","/** 
 * {@inheritDoc}
 */
@Override public void generate(HmDevice device){
  if (thingTypeProvider != null) {
    ThingTypeUID thingTypeUID=UidUtils.generateThingTypeUID(device);
    ThingType tt=thingTypeProvider.getThingType(thingTypeUID,Locale.getDefault());
    if (tt == null || device.isGatewayExtras()) {
      logger.debug(""String_Node_Str"",device.getType(),device.getDatapointCount());
      List<ChannelGroupType> groupTypes=new ArrayList<ChannelGroupType>();
      for (      HmChannel channel : device.getChannels()) {
        List<ChannelDefinition> channelDefinitions=new ArrayList<ChannelDefinition>();
        for (        HmDatapoint dp : channel.getDatapoints().values()) {
          if (!isStatusDatapoint(dp) && !isIgnoredDatapoint(dp)) {
            if (dp.getParamsetType() == HmParamsetType.VALUES) {
              ChannelTypeUID channelTypeUID=UidUtils.generateChannelTypeUID(dp);
              ChannelType channelType=channelTypeProvider.getChannelType(channelTypeUID,Locale.getDefault());
              if (channelType == null) {
                channelType=createChannelType(dp,channelTypeUID);
                channelTypeProvider.addChannelType(channelType);
              }
              ChannelDefinition channelDef=new ChannelDefinition(dp.getName(),channelType.getUID());
              channelDefinitions.add(channelDef);
            }
          }
        }
        ChannelGroupTypeUID groupTypeUID=UidUtils.generateChannelGroupTypeUID(channel);
        ChannelGroupType groupType=channelTypeProvider.getChannelGroupType(groupTypeUID,Locale.getDefault());
        if (groupType == null || device.isGatewayExtras()) {
          String groupLabel=String.format(""String_Node_Str"",WordUtils.capitalizeFully(StringUtils.replace(channel.getType(),""String_Node_Str"",""String_Node_Str"")));
          groupType=new ChannelGroupType(groupTypeUID,false,groupLabel,null,channelDefinitions);
          channelTypeProvider.addChannelGroupType(groupType);
          groupTypes.add(groupType);
        }
      }
      tt=createThingType(device,groupTypes);
      thingTypeProvider.addThingType(tt);
    }
    addFirmware(device);
  }
}",0.973502029123896
62568,"@Override public void perform(AbstractDevice device,Item item,String value){
  if (value == null || value.length() != 8) {
    logger.error(""String_Node_Str"",value);
    return;
  }
  int r=Integer.parseInt(value.substring(2,4),16);
  int g=Integer.parseInt(value.substring(4,6),16);
  int b=Integer.parseInt(value.substring(6,8),16);
  HSBType hsbValue=HSBType.fromRGB(r,g,b);
  ItemCommandEvent event=ItemEventFactory.createCommandEvent(item.getName(),hsbValue,COMMAND_SOURCE);
  eventPublisher.post(event);
}","@Override public void perform(AbstractDevice device,Item item,String value){
  if (value == null || value.length() != 8) {
    logger.error(""String_Node_Str"",value);
    return;
  }
  int r=Integer.parseInt(value.substring(2,4),16);
  int g=Integer.parseInt(value.substring(4,6),16);
  int b=Integer.parseInt(value.substring(6,8),16);
  ItemCommandEvent event;
  if (r == 0 && g == 0 && b == 0) {
    event=ItemEventFactory.createCommandEvent(item.getName(),OnOffType.OFF,COMMAND_SOURCE);
  }
 else {
    HSBType hsbValue=HSBType.fromRGB(r,g,b);
    event=ItemEventFactory.createCommandEvent(item.getName(),hsbValue,COMMAND_SOURCE);
  }
  eventPublisher.post(event);
}",0.6632739609838847
62569,"@Override public StringType getProcessName(int pid) throws DeviceNotFoundException {
  OSProcess process=operatingSystem.getProcess(pid);
  String name=process.getName();
  return new StringType(name);
}","@Override public StringType getProcessName(int pid) throws DeviceNotFoundException {
  OSProcess process=getProcess(pid);
  String name=process.getName();
  return new StringType(name);
}",0.958974358974359
62570,"@Override public StringType getProcessPath(int pid) throws DeviceNotFoundException {
  OSProcess process=operatingSystem.getProcess(pid);
  String path=process.getPath();
  return new StringType(path);
}","@Override public StringType getProcessPath(int pid) throws DeviceNotFoundException {
  OSProcess process=getProcess(pid);
  String path=process.getPath();
  return new StringType(path);
}",0.958974358974359
62571,"@Override public DecimalType getProcessMemoryUsage(int pid) throws DeviceNotFoundException {
  OSProcess process=operatingSystem.getProcess(pid);
  long memortInBytes=process.getResidentSetSize();
  long memoryInMB=getSizeInMB(memortInBytes);
  return new DecimalType(memoryInMB);
}","@Override public DecimalType getProcessMemoryUsage(int pid) throws DeviceNotFoundException {
  OSProcess process=getProcess(pid);
  long memortInBytes=process.getResidentSetSize();
  long memoryInMB=getSizeInMB(memortInBytes);
  return new DecimalType(memoryInMB);
}",0.4890510948905109
62572,"@Override public DecimalType getProcessCpuUsage(int pid) throws DeviceNotFoundException {
  OSProcess process=operatingSystem.getProcess(pid);
  double cpuUsageRaw=(process.getKernelTime() + process.getUserTime()) / process.getUpTime();
  BigDecimal cpuUsage=getPercentsValue(cpuUsageRaw);
  return new DecimalType(cpuUsage);
}","@Override public DecimalType getProcessCpuUsage(int pid) throws DeviceNotFoundException {
  OSProcess process=getProcess(pid);
  double cpuUsageRaw=(process.getKernelTime() + process.getUserTime()) / process.getUpTime();
  BigDecimal cpuUsage=getPercentsValue(cpuUsageRaw);
  return new DecimalType(cpuUsage);
}",0.974921630094044
62573,"@Override public DecimalType getProcessThreads(int pid) throws DeviceNotFoundException {
  OSProcess process=operatingSystem.getProcess(pid);
  int threadCount=process.getThreadCount();
  return new DecimalType(threadCount);
}","@Override public DecimalType getProcessThreads(int pid) throws DeviceNotFoundException {
  OSProcess process=getProcess(pid);
  int threadCount=process.getThreadCount();
  return new DecimalType(threadCount);
}",0.6146788990825688
62574,"@Override public void handleCommand(ChannelUID channelUID,Command command){
  logger.trace(""String_Node_Str"",command,channelUID);
  Channel channel=getThing().getChannel(channelUID.getId());
  if (channel == null) {
    logger.warn(""String_Node_Str"",channelUID,getThing());
    return;
  }
  if (!(command instanceof StringType)) {
    logger.warn(""String_Node_Str"",command,channelUID,getThing());
    return;
  }
  logger.debug(""String_Node_Str"",command,id > 0 ? 0 : name);
  if (id > 0) {
    bridge.getClient().pressButton(id,command.toString());
  }
 else {
    bridge.getClient().pressButton(name,command.toString());
  }
  updateState(channelUID,UnDefType.UNDEF);
}","@Override public void handleCommand(ChannelUID channelUID,Command command){
  logger.trace(""String_Node_Str"",command,channelUID);
  Channel channel=getThing().getChannel(channelUID.getId());
  if (channel == null) {
    logger.warn(""String_Node_Str"",channelUID,getThing());
    return;
  }
  if (command instanceof RefreshType) {
    return;
  }
  if (!(command instanceof StringType)) {
    logger.warn(""String_Node_Str"",command,channelUID,getThing());
    return;
  }
  logger.debug(""String_Node_Str"",command,id > 0 ? 0 : name);
  if (id > 0) {
    bridge.getClient().pressButton(id,command.toString());
  }
 else {
    bridge.getClient().pressButton(name,command.toString());
  }
  updateState(channelUID,UnDefType.UNDEF);
}",0.9599427753934192
62575,"@Override public void initialize(){
  id=getConfig().as(HarmonyDeviceConfig.class).id;
  name=getConfig().as(HarmonyDeviceConfig.class).name;
  if (!checkConfig()) {
    updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.CONFIGURATION_ERROR,""String_Node_Str"");
  }
 else {
    logName=id > 0 ? String.valueOf(id) : name;
    logger.debug(""String_Node_Str"",logName);
    updateDeviceStatus(getBridge().getStatus());
  }
}","@Override public void initialize(){
  id=getConfig().as(HarmonyDeviceConfig.class).id;
  name=getConfig().as(HarmonyDeviceConfig.class).name;
  if (!checkConfig()) {
    updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.CONFIGURATION_ERROR,""String_Node_Str"");
  }
 else {
    logName=id > 0 ? String.valueOf(id) : name;
    logger.debug(""String_Node_Str"",logName);
    if (getBridge() != null) {
      updateDeviceStatus(getBridge().getStatus());
    }
  }
}",0.955631399317406
62576,"@Override public void hubDiscoveryFinished(){
  updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.CONFIGURATION_ERROR,""String_Node_Str"" + config.name);
  retryJob=scheduler.schedule(new Runnable(){
    @Override public void run(){
      initialize();
    }
  }
,RETRY_TIME,TimeUnit.SECONDS);
}","@Override public void hubDiscoveryFinished(){
  setOfflineAndReconnect(""String_Node_Str"");
}",0.3782383419689119
62577,"/** 
 * Connects to a Harmony Hub using credentials obtained through network discovery x
 */
private synchronized void connectToHub(){
  disconnectFromHub();
  final String host=getThing().getProperties().get(HarmonyHubBindingConstants.HUB_PROPERTY_HOST);
  final String accountId=getThing().getProperties().get(HarmonyHubBindingConstants.HUB_PROPERTY_ACCOUNTID);
  final String sessionId=getThing().getProperties().get(HarmonyHubBindingConstants.HUB_PROPERTY_SESSIONID);
  if (host == null || accountId == null || sessionId == null) {
    logger.error(""String_Node_Str"",host,accountId,sessionId);
    return;
  }
  client=HarmonyClient.getInstance();
  client.addListener(new HarmonyHubListener(){
    @Override public void removeFrom(    HarmonyClient hc){
    }
    @Override public void addTo(    HarmonyClient hc){
      hc.addListener(new ActivityChangeListener(){
        @Override public void activityStarted(        Activity activity){
          updateState(activity);
        }
      }
);
    }
  }
);
  try {
    logger.debug(""String_Node_Str"",host,sessionId,accountId);
    client.connect(host,new LoginToken(accountId,sessionId));
    heartBeatJob=scheduler.scheduleAtFixedRate(new Runnable(){
      @Override public void run(){
        try {
          client.sendPing();
        }
 catch (        Exception e) {
          logger.error(""String_Node_Str"" + host,e);
          setOfflineAndReconnect();
        }
      }
    }
,heartBeatInterval,heartBeatInterval,TimeUnit.SECONDS);
    updateStatus(ThingStatus.ONLINE);
    buildChannel();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"" + host,e);
    setOfflineAndReconnect();
  }
}","/** 
 * Connects to a Harmony Hub using credentials obtained through network discovery
 */
private synchronized void connectToHub(){
  disconnectFromHub();
  final String host=getThing().getProperties().get(HarmonyHubBindingConstants.HUB_PROPERTY_HOST);
  final String accountId=getThing().getProperties().get(HarmonyHubBindingConstants.HUB_PROPERTY_ACCOUNTID);
  final String sessionId=getThing().getProperties().get(HarmonyHubBindingConstants.HUB_PROPERTY_SESSIONID);
  if (host == null || accountId == null || sessionId == null) {
    logger.error(""String_Node_Str"",host,accountId,sessionId);
    setOfflineAndReconnect(""String_Node_Str"");
    return;
  }
  client=HarmonyClient.getInstance();
  client.addListener(this);
  try {
    logger.debug(""String_Node_Str"",host,sessionId,accountId);
    client.connect(host,new LoginToken(accountId,sessionId));
    heartBeatJob=scheduler.scheduleAtFixedRate(new Runnable(){
      @Override public void run(){
        try {
          client.sendPing();
        }
 catch (        Exception e) {
          logger.error(""String_Node_Str"" + host,e);
          setOfflineAndReconnect(""String_Node_Str"");
        }
      }
    }
,heartBeatInterval,heartBeatInterval,TimeUnit.SECONDS);
    updateStatus(ThingStatus.ONLINE);
    buildChannel();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"" + host,e);
    setOfflineAndReconnect(""String_Node_Str"" + e.getMessage());
  }
}",0.7338082901554405
62578,"@Override public void run(){
  initialize();
}","@Override public void run(){
  connect();
}",0.8539325842696629
62579,"@Override public void hubDiscovered(HarmonyHubDiscoveryResult result){
  logger.debug(""String_Node_Str"",result.getFriendlyName());
  if (result.getFriendlyName().equalsIgnoreCase(config.name)) {
    disco.removeListener(this);
    disco.stopDiscovery();
    getThing().setProperty(HarmonyHubBindingConstants.HUB_PROPERTY_ACCOUNTID,result.getAccountId());
    getThing().setProperty(HarmonyHubBindingConstants.HUB_PROPERTY_SESSIONID,result.getSessionID());
    getThing().setProperty(HarmonyHubBindingConstants.HUB_PROPERTY_HOST,result.getHost());
    getThing().setProperty(HarmonyHubBindingConstants.HUB_PROPERTY_ID,result.getId());
    connectToHub();
  }
}","@Override public void hubDiscovered(HarmonyHubDiscoveryResult result){
  logger.debug(""String_Node_Str"",result.getFriendlyName());
  HarmonyHubConfig config=getConfig().as(HarmonyHubConfig.class);
  if (result.getFriendlyName().equalsIgnoreCase(config.name)) {
    discovery.removeListener(this);
    discovery.stopDiscovery();
    getThing().setProperty(HarmonyHubBindingConstants.HUB_PROPERTY_ACCOUNTID,result.getAccountId());
    getThing().setProperty(HarmonyHubBindingConstants.HUB_PROPERTY_SESSIONID,result.getSessionID());
    getThing().setProperty(HarmonyHubBindingConstants.HUB_PROPERTY_HOST,result.getHost());
    getThing().setProperty(HarmonyHubBindingConstants.HUB_PROPERTY_ID,result.getId());
    connectToHub();
  }
}",0.9382183908045976
62580,"@Override public void handleCommand(ChannelUID channelUID,Command command){
  if (command instanceof StringType) {
    try {
      try {
        int actId=Integer.parseInt(command.toString());
        client.startActivity(actId);
      }
 catch (      NumberFormatException ignored) {
        client.startActivityByName(command.toString());
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
    }
  }
 else   if (command instanceof DecimalType) {
    try {
      client.startActivity(((DecimalType)command).intValue());
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
    }
  }
 else {
    logger.warn(""String_Node_Str"",command);
  }
}","@Override public void handleCommand(ChannelUID channelUID,Command command){
  if (command instanceof RefreshType) {
    updateState(client.getCurrentActivity());
  }
 else   if (command instanceof StringType) {
    try {
      try {
        int actId=Integer.parseInt(command.toString());
        client.startActivity(actId);
      }
 catch (      NumberFormatException ignored) {
        client.startActivityByName(command.toString());
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
    }
  }
 else   if (command instanceof DecimalType) {
    try {
      client.startActivity(((DecimalType)command).intValue());
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
    }
  }
 else {
    logger.warn(""String_Node_Str"",command);
  }
}",0.9352226720647774
62581,"private void setOfflineAndReconnect(){
  disconnectFromHub();
  retryJob=scheduler.schedule(new Runnable(){
    @Override public void run(){
      initialize();
    }
  }
,RETRY_TIME,TimeUnit.SECONDS);
  updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.COMMUNICATION_ERROR);
}","private void setOfflineAndReconnect(String error){
  disconnectFromHub();
  retryJob=scheduler.schedule(new Runnable(){
    @Override public void run(){
      connect();
    }
  }
,RETRY_TIME,TimeUnit.SECONDS);
  updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.COMMUNICATION_ERROR,error);
}",0.9387040280210156
62582,"@Override public void addTo(HarmonyClient hc){
  hc.addListener(new ActivityChangeListener(){
    @Override public void activityStarted(    Activity activity){
      updateState(activity);
    }
  }
);
}","/** 
 * HarmonyHubListener interface
 */
@Override public void addTo(HarmonyClient hc){
  hc.addListener(new ActivityChangeListener(){
    @Override public void activityStarted(    Activity activity){
      updateState(activity);
    }
  }
);
}",0.9082774049217002
62583,"@Override public void removeFrom(HarmonyClient hc){
}","/** 
 * HarmonyHubListener interface
 */
@Override public void removeFrom(HarmonyClient hc){
}",0.7210884353741497
62584,"@Override public void initialize(){
  updateStatus(ThingStatus.INITIALIZING);
  disconnectFromHub();
  final HarmonyHubConfig config=getConfig().as(HarmonyHubConfig.class);
  int discoTime=config.discoveryTimeout > 0 ? config.discoveryTimeout : DISCO_TIME;
  heartBeatInterval=config.heartBeatInterval > 0 ? config.heartBeatInterval : HEARTBEAT_INTERVAL;
  final HarmonyHubDiscovery disco=new HarmonyHubDiscovery(discoTime);
  disco.addListener(new HarmonyHubDiscoveryListener(){
    @Override public void hubDiscoveryFinished(){
      updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.CONFIGURATION_ERROR,""String_Node_Str"" + config.name);
      retryJob=scheduler.schedule(new Runnable(){
        @Override public void run(){
          initialize();
        }
      }
,RETRY_TIME,TimeUnit.SECONDS);
    }
    @Override public void hubDiscovered(    HarmonyHubDiscoveryResult result){
      logger.debug(""String_Node_Str"",result.getFriendlyName());
      if (result.getFriendlyName().equalsIgnoreCase(config.name)) {
        disco.removeListener(this);
        disco.stopDiscovery();
        getThing().setProperty(HarmonyHubBindingConstants.HUB_PROPERTY_ACCOUNTID,result.getAccountId());
        getThing().setProperty(HarmonyHubBindingConstants.HUB_PROPERTY_SESSIONID,result.getSessionID());
        getThing().setProperty(HarmonyHubBindingConstants.HUB_PROPERTY_HOST,result.getHost());
        getThing().setProperty(HarmonyHubBindingConstants.HUB_PROPERTY_ID,result.getId());
        connectToHub();
      }
    }
  }
);
  disco.startDiscovery();
}","@Override public void initialize(){
  connect();
}",0.0623830318153462
62585,"private void disconnectFromHub(){
  if (retryJob != null && !retryJob.isDone()) {
    retryJob.cancel(true);
  }
  if (heartBeatJob != null && !heartBeatJob.isDone()) {
    heartBeatJob.cancel(true);
  }
  if (getClient() != null) {
    getClient().disconnect();
  }
}","private void disconnectFromHub(){
  if (discovery != null) {
    discovery.removeListener(this);
    discovery.stopDiscovery();
    discovery=null;
  }
  if (retryJob != null && !retryJob.isDone()) {
    retryJob.cancel(true);
  }
  if (heartBeatJob != null && !heartBeatJob.isDone()) {
    heartBeatJob.cancel(true);
  }
  if (client != null) {
    client.removeListener(this);
    client.disconnect();
    client=null;
  }
}",0.6714697406340058
62586,"@Override public void handleCommand(ChannelUID channelUID,Command command){
  logger.debug(""String_Node_Str"",channelUID,command);
  if (bridgeHandler != null) {
    try {
      PacketType packetType=RFXComMessageFactory.convertPacketType(channelUID.getThingUID().getThingTypeId().toUpperCase());
      RFXComMessage msg=RFXComMessageFactory.createMessage(packetType);
      List<RFXComValueSelector> supportedValueSelectors=msg.getSupportedOutputValueSelectors();
      RFXComValueSelector valSelector=RFXComValueSelector.getValueSelector(channelUID.getId());
      if (supportedValueSelectors.contains(valSelector)) {
        msg.setSubType(msg.convertSubType(config.subType));
        msg.setDeviceId(config.deviceId);
        msg.convertFromState(valSelector,command);
        bridgeHandler.sendMessage(msg);
      }
 else {
        logger.warn(""String_Node_Str"",channelUID.getId());
      }
    }
 catch (    RFXComNotImpException e) {
      logger.error(""String_Node_Str"",e.getMessage());
    }
catch (    RFXComException e) {
      logger.error(""String_Node_Str"",e.getMessage());
    }
  }
}","@Override public void handleCommand(ChannelUID channelUID,Command command){
  logger.debug(""String_Node_Str"",channelUID,command);
  if (bridgeHandler != null) {
    if (command instanceof RefreshType) {
    }
 else {
      try {
        PacketType packetType=RFXComMessageFactory.convertPacketType(channelUID.getThingUID().getThingTypeId().toUpperCase());
        RFXComMessage msg=RFXComMessageFactory.createMessage(packetType);
        List<RFXComValueSelector> supportedValueSelectors=msg.getSupportedOutputValueSelectors();
        RFXComValueSelector valSelector=RFXComValueSelector.getValueSelector(channelUID.getId());
        if (supportedValueSelectors.contains(valSelector)) {
          msg.setSubType(msg.convertSubType(config.subType));
          msg.setDeviceId(config.deviceId);
          msg.convertFromState(valSelector,command);
          bridgeHandler.sendMessage(msg);
        }
 else {
          logger.warn(""String_Node_Str"",channelUID.getId());
        }
      }
 catch (      RFXComNotImpException e) {
        logger.error(""String_Node_Str"",e.getMessage());
      }
catch (      RFXComException e) {
        logger.error(""String_Node_Str"",e.getMessage());
      }
    }
  }
}",0.9538327526132404
62587,"public static PacketType convertPacketType(String packetType) throws IllegalArgumentException {
  for (  PacketType p : PacketType.values()) {
    if (p.toString().equals(packetType)) {
      return p;
    }
  }
  throw new IllegalArgumentException(""String_Node_Str"" + packetType);
}","public static PacketType convertPacketType(String packetType) throws IllegalArgumentException {
  for (  PacketType p : PacketType.values()) {
    if (p.toString().replace(""String_Node_Str"",""String_Node_Str"").equals(packetType.replace(""String_Node_Str"",""String_Node_Str""))) {
      return p;
    }
  }
  throw new IllegalArgumentException(""String_Node_Str"" + packetType);
}",0.8628048780487805
62588,"@Override public void channelLinked(ChannelUID channelUID){
  linkedChannelChange(channelUID,1);
}","@Override public void channelLinked(ChannelUID channelUID){
  linkedChannelChange(channelUID,1);
  publishChannelIfLinked(channelUID);
}",0.8376068376068376
62589,"/** 
 * Iterates all channels of the thing and updates their states.
 */
protected void publishPlanet(){
  logger.debug(""String_Node_Str"",getPlanet().getClass().getSimpleName(),getThing().getUID());
  for (  Channel channel : getThing().getChannels()) {
    publishChannelIfLinked(channel);
  }
}","/** 
 * Iterates all channels of the thing and updates their states.
 */
protected void publishPlanet(){
  logger.debug(""String_Node_Str"",getPlanet().getClass().getSimpleName(),getThing().getUID());
  for (  Channel channel : getThing().getChannels()) {
    publishChannelIfLinked(channel.getUID());
  }
}",0.9850249584026622
62590,"/** 
 * Publishes the channel with data if it's linked.
 */
private void publishChannelIfLinked(Channel channel){
  if (isLinked(channel.getUID().getId()) && getPlanet() != null) {
    try {
      updateState(channel.getUID(),PropertyUtils.getState(channel.getUID(),getPlanet()));
    }
 catch (    Exception ex) {
      logger.error(""String_Node_Str"" + channel.getUID() + ""String_Node_Str""+ ex.getMessage(),ex);
    }
  }
}","/** 
 * Publishes the channel with data if it's linked.
 */
private void publishChannelIfLinked(ChannelUID channelUID){
  if (isLinked(channelUID.getId()) && getPlanet() != null) {
    try {
      updateState(channelUID,PropertyUtils.getState(channelUID,getPlanet()));
    }
 catch (    Exception ex) {
      logger.error(""String_Node_Str"" + channelUID + ""String_Node_Str""+ ex.getMessage(),ex);
    }
  }
}",0.9156626506024096
62591,"/** 
 * {@inheritDoc}
 */
@Override public void handleCommand(ChannelUID channelUID,Command command){
  if (RefreshType.REFRESH == command) {
    logger.debug(""String_Node_Str"",channelUID);
    publishChannelIfLinked(getThing().getChannel(channelUID.getId()));
  }
 else {
    logger.warn(""String_Node_Str"");
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void handleCommand(ChannelUID channelUID,Command command){
  if (RefreshType.REFRESH == command) {
    logger.debug(""String_Node_Str"",channelUID);
    publishChannelIfLinked(channelUID);
  }
 else {
    logger.warn(""String_Node_Str"");
  }
}",0.914572864321608
62592,"public HomekitTaggedItem(Item item,ItemRegistry itemRegistry){
  this.item=item;
  for (  String tag : item.getTags()) {
    if (item instanceof DimmerItem) {
      tag=""String_Node_Str"" + tag;
    }
    if (!isMemberOfRootGroup(item,itemRegistry)) {
      homekitDeviceType=HomekitDeviceType.valueOfTag(tag);
    }
    if (homekitDeviceType == null) {
      homekitCharacteristicType=HomekitCharacteristicType.valueOfTag(tag);
    }
    if (homekitDeviceType != null || homekitCharacteristicType != null) {
      break;
    }
  }
  if (homekitDeviceType != null) {
    this.id=calculateId(item);
  }
 else {
    this.id=0;
  }
}","public HomekitTaggedItem(Item item,ItemRegistry itemRegistry){
  this.item=item;
  for (  String tag : item.getTags()) {
    if (item instanceof DimmerItem) {
      tag=""String_Node_Str"" + tag;
    }
    if (isMemberOfRootGroup(item,itemRegistry)) {
      homekitCharacteristicType=HomekitCharacteristicType.valueOfTag(tag);
    }
    if (homekitCharacteristicType == null) {
      homekitDeviceType=HomekitDeviceType.valueOfTag(tag);
    }
    if (homekitDeviceType != null || homekitCharacteristicType != null) {
      break;
    }
  }
  if (homekitDeviceType != null) {
    this.id=calculateId(item);
  }
 else {
    this.id=0;
  }
}",0.8837944664031621
62593,"/** 
 * Updates our channel with the available buttons as option states
 */
private void updateChannel(){
  try {
    logger.debug(""String_Node_Str"",logName);
    if (bridge == null) {
      logger.debug(""String_Node_Str"",logName);
      return;
    }
    HarmonyConfig config=bridge.getCachedConfig();
    if (config == null) {
      logger.debug(""String_Node_Str"",logName);
      return;
    }
    List<StateOption> states=new LinkedList<StateOption>();
    List<Device> devices=config.getDevices();
    for (    Device device : devices) {
      if (device.getId() != id) {
        continue;
      }
      List<ControlGroup> controlGroups=device.getControlGroup();
      for (      ControlGroup controlGroup : controlGroups) {
        List<Function> functions=controlGroup.getFunction();
        for (        Function function : functions) {
          states.add(new StateOption(String.valueOf(function.getLabel()),function.getLabel()));
        }
      }
      break;
    }
    ThingBuilder thingBuilder=editThing();
    ChannelTypeUID channelTypeUID=new ChannelTypeUID(HarmonyHubBindingConstants.BINDING_ID + ""String_Node_Str"" + HarmonyHubBindingConstants.CHANNEL_BUTTON_PRESS);
    ChannelType channelType=new ChannelType(channelTypeUID,false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,new StateDescription(null,null,null,null,false,states),new URI(HarmonyHubBindingConstants.BINDING_ID,HarmonyHubBindingConstants.CHANNEL_BUTTON_PRESS,null));
    factory.addChannelType(channelType);
    Channel channel=ChannelBuilder.create(new ChannelUID(getThing().getUID(),HarmonyHubBindingConstants.CHANNEL_BUTTON_PRESS),""String_Node_Str"").withType(channelTypeUID).build();
    thingBuilder.withChannels(channel);
    updateThing(thingBuilder.build());
  }
 catch (  Exception e) {
    logger.debug(""String_Node_Str"" + logName,e);
  }
}","/** 
 * Updates our channel with the available buttons as option states
 */
private void updateChannel(){
  try {
    logger.debug(""String_Node_Str"",logName);
    if (bridge == null) {
      logger.debug(""String_Node_Str"",logName);
      return;
    }
    HarmonyConfig config=bridge.getCachedConfig();
    if (config == null) {
      logger.debug(""String_Node_Str"",logName);
      return;
    }
    List<StateOption> states=new LinkedList<StateOption>();
    List<Device> devices=config.getDevices();
    for (    Device device : devices) {
      if (device.getId() != id) {
        continue;
      }
      List<ControlGroup> controlGroups=device.getControlGroup();
      for (      ControlGroup controlGroup : controlGroups) {
        List<Function> functions=controlGroup.getFunction();
        for (        Function function : functions) {
          states.add(new StateOption(String.valueOf(function.getLabel()),function.getLabel()));
        }
      }
      break;
    }
    ThingBuilder thingBuilder=editThing();
    ChannelTypeUID channelTypeUID=new ChannelTypeUID(getThing().getUID().getAsString() + ""String_Node_Str"" + HarmonyHubBindingConstants.CHANNEL_BUTTON_PRESS);
    ChannelType channelType=new ChannelType(channelTypeUID,false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + getThing().getLabel(),null,null,new StateDescription(null,null,null,null,false,states),null);
    factory.addChannelType(channelType);
    Channel channel=ChannelBuilder.create(new ChannelUID(getThing().getUID(),HarmonyHubBindingConstants.CHANNEL_BUTTON_PRESS),""String_Node_Str"").withType(channelTypeUID).build();
    List<Channel> currentChannels=getThing().getChannels();
    List<Channel> newChannels=new ArrayList<Channel>();
    for (    Channel c : currentChannels) {
      if (!c.getUID().equals(channel.getUID())) {
        newChannels.add(c);
      }
    }
    newChannels.add(channel);
    thingBuilder.withChannels(newChannels);
    updateThing(thingBuilder.build());
  }
 catch (  Exception e) {
    logger.debug(""String_Node_Str"" + logName,e);
  }
}",0.8034755941732686
62594,"/** 
 * Connects to a Harmony Hub using credentials obtained through network discovery x
 */
private void connectToHub(){
  final String host=getThing().getProperties().get(HarmonyHubBindingConstants.HUB_PROPERTY_HOST);
  final String accountId=getThing().getProperties().get(HarmonyHubBindingConstants.HUB_PROPERTY_ACCOUNTID);
  final String sessionId=getThing().getProperties().get(HarmonyHubBindingConstants.HUB_PROPERTY_SESSIONID);
  if (host == null || accountId == null || sessionId == null) {
    logger.error(""String_Node_Str"",host,accountId,sessionId);
    return;
  }
  client=HarmonyClient.getInstance();
  client.addListener(new HarmonyHubListener(){
    @Override public void removeFrom(    HarmonyClient hc){
    }
    @Override public void addTo(    HarmonyClient hc){
      hc.addListener(new ActivityChangeListener(){
        @Override public void activityStarted(        Activity activity){
          updateState(activity);
        }
      }
);
    }
  }
);
  try {
    logger.debug(""String_Node_Str"",host,sessionId,accountId);
    client.connect(host,new LoginToken(accountId,sessionId));
    heartBeatJob=scheduler.scheduleAtFixedRate(new Runnable(){
      @Override public void run(){
        try {
          client.sendPing();
        }
 catch (        Exception e) {
          logger.error(""String_Node_Str"" + host,e);
          setOfflineAndReconnect();
        }
      }
    }
,heartBeatInterval,heartBeatInterval,TimeUnit.SECONDS);
    updateStatus(ThingStatus.ONLINE);
    buildChannel();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"" + host,e);
    setOfflineAndReconnect();
  }
}","/** 
 * Connects to a Harmony Hub using credentials obtained through network discovery x
 */
private synchronized void connectToHub(){
  disconnectFromHub();
  final String host=getThing().getProperties().get(HarmonyHubBindingConstants.HUB_PROPERTY_HOST);
  final String accountId=getThing().getProperties().get(HarmonyHubBindingConstants.HUB_PROPERTY_ACCOUNTID);
  final String sessionId=getThing().getProperties().get(HarmonyHubBindingConstants.HUB_PROPERTY_SESSIONID);
  if (host == null || accountId == null || sessionId == null) {
    logger.error(""String_Node_Str"",host,accountId,sessionId);
    return;
  }
  client=HarmonyClient.getInstance();
  client.addListener(new HarmonyHubListener(){
    @Override public void removeFrom(    HarmonyClient hc){
    }
    @Override public void addTo(    HarmonyClient hc){
      hc.addListener(new ActivityChangeListener(){
        @Override public void activityStarted(        Activity activity){
          updateState(activity);
        }
      }
);
    }
  }
);
  try {
    logger.debug(""String_Node_Str"",host,sessionId,accountId);
    client.connect(host,new LoginToken(accountId,sessionId));
    heartBeatJob=scheduler.scheduleAtFixedRate(new Runnable(){
      @Override public void run(){
        try {
          client.sendPing();
        }
 catch (        Exception e) {
          logger.error(""String_Node_Str"" + host,e);
          setOfflineAndReconnect();
        }
      }
    }
,heartBeatInterval,heartBeatInterval,TimeUnit.SECONDS);
    updateStatus(ThingStatus.ONLINE);
    buildChannel();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"" + host,e);
    setOfflineAndReconnect();
  }
}",0.9890510948905108
62595,"private void buildChannel(){
  try {
    HarmonyConfig config=getCachedConfig();
    List<Activity> activities=config.getActivities();
    Collections.sort(activities,new Comparator<Activity>(){
      @Override public int compare(      Activity a1,      Activity a2){
        int o1=a1.getActivityOrder() == null ? -1 : a1.getActivityOrder().intValue();
        int o2=a2.getActivityOrder() == null ? -1 : a2.getActivityOrder().intValue();
        return (o1 < o2) ? -1 : (o1 == o2) ? 0 : 1;
      }
    }
);
    List<StateOption> states=new LinkedList<StateOption>();
    for (    Activity activity : activities) {
      states.add(new StateOption(String.valueOf(activity.getLabel()),activity.getLabel()));
    }
    ChannelTypeUID channelTypeUID=new ChannelTypeUID(HarmonyHubBindingConstants.BINDING_ID + ""String_Node_Str"" + HarmonyHubBindingConstants.CHANNEL_CURRENT_ACTIVITY);
    ChannelType channelType=new ChannelType(channelTypeUID,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,new StateDescription(null,null,null,""String_Node_Str"",false,states),new URI(HarmonyHubBindingConstants.BINDING_ID,HarmonyHubBindingConstants.CHANNEL_CURRENT_ACTIVITY,null));
    factory.addChannelType(channelType);
    BridgeBuilder thingBuilder=editThing();
    Channel channel=ChannelBuilder.create(new ChannelUID(getThing().getUID(),HarmonyHubBindingConstants.CHANNEL_CURRENT_ACTIVITY),""String_Node_Str"").withType(channelTypeUID).build();
    thingBuilder.withChannel(channel);
    updateThing(thingBuilder.build());
  }
 catch (  Exception e) {
    logger.debug(""String_Node_Str"",e);
  }
}","private void buildChannel(){
  try {
    HarmonyConfig config=getCachedConfig();
    List<Activity> activities=config.getActivities();
    Collections.sort(activities,new Comparator<Activity>(){
      @Override public int compare(      Activity a1,      Activity a2){
        int o1=a1.getActivityOrder() == null ? -1 : a1.getActivityOrder().intValue();
        int o2=a2.getActivityOrder() == null ? -1 : a2.getActivityOrder().intValue();
        return (o1 < o2) ? -1 : (o1 == o2) ? 0 : 1;
      }
    }
);
    List<StateOption> states=new LinkedList<StateOption>();
    for (    Activity activity : activities) {
      states.add(new StateOption(String.valueOf(activity.getLabel()),activity.getLabel()));
    }
    ChannelTypeUID channelTypeUID=new ChannelTypeUID(getThing().getUID() + ""String_Node_Str"" + HarmonyHubBindingConstants.CHANNEL_CURRENT_ACTIVITY);
    ChannelType channelType=new ChannelType(channelTypeUID,false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + getThing().getLabel(),null,null,new StateDescription(null,null,null,""String_Node_Str"",false,states),null);
    factory.addChannelType(channelType);
    BridgeBuilder thingBuilder=editThing();
    Channel channel=ChannelBuilder.create(new ChannelUID(getThing().getUID(),HarmonyHubBindingConstants.CHANNEL_CURRENT_ACTIVITY),""String_Node_Str"").withType(channelTypeUID).build();
    List<Channel> currentChannels=getThing().getChannels();
    List<Channel> newChannels=new ArrayList<Channel>();
    for (    Channel c : currentChannels) {
      if (!c.getUID().equals(channel.getUID())) {
        newChannels.add(c);
      }
    }
    newChannels.add(channel);
    thingBuilder.withChannels(newChannels);
    updateThing(thingBuilder.build());
  }
 catch (  Exception e) {
    logger.debug(""String_Node_Str"",e);
  }
}",0.7413945278022948
62596,"@Override public void handleCommand(ChannelUID channelUID,Command command){
  if (command instanceof StringType) {
    try {
      client.startActivityByName(command.toString());
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
    }
  }
 else   if (command instanceof DecimalType) {
    try {
      client.startActivity(((DecimalType)command).intValue());
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
    }
  }
 else {
    logger.warn(""String_Node_Str"",command);
  }
}","@Override public void handleCommand(ChannelUID channelUID,Command command){
  if (command instanceof StringType) {
    try {
      try {
        int actId=Integer.parseInt(command.toString());
        client.startActivity(actId);
      }
 catch (      NumberFormatException ignored) {
        client.startActivityByName(command.toString());
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
    }
  }
 else   if (command instanceof DecimalType) {
    try {
      client.startActivity(((DecimalType)command).intValue());
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
    }
  }
 else {
    logger.warn(""String_Node_Str"",command);
  }
}",0.7861842105263158
62597,"@Override public void dispose(){
  listeners.clear();
  disconnectFromHub();
}","@Override public void dispose(){
  listeners.clear();
  disconnectFromHub();
  factory.removeChannelTypesForThing(getThing().getUID());
}",0.7255813953488373
62598,"/** 
 * Converts an Item to a HueDevice
 * @param item
 * @return HueDevice
 */
private HueDevice itemToDevice(Item item){
  State itemState=item.getState();
  HueState hueState;
  if (itemState instanceof HSBType) {
    HSBType color=(HSBType)itemState;
    hueState=new HueState(color.getHue().intValue(),color.getSaturation().shortValue(),color.getBrightness().shortValue());
  }
 else   if (itemState instanceof DecimalType) {
    short bri=(short)((((DecimalType)itemState).intValue() * 255) / 100);
    hueState=new HueState(bri > 0,bri);
  }
 else   if (itemState instanceof OnOffType) {
    short bri=(short)(((OnOffType)itemState) == OnOffType.ON ? 255 : 0);
    hueState=new HueState(bri > 0,bri);
  }
 else {
    hueState=new HueState(false,(short)0);
  }
  HueDevice d=new HueDevice(hueState,item.getLabel(),item.getName());
  return d;
}","/** 
 * Converts an Item to a HueDevice
 * @param item
 * @return HueDevice
 */
private HueDevice itemToDevice(Item item){
  State itemState=item.getState();
  HueState hueState;
  if (itemState instanceof HSBType) {
    HSBType color=(HSBType)itemState;
    hueState=new HueState(color);
  }
 else   if (itemState instanceof DecimalType) {
    short bri=(short)((((DecimalType)itemState).intValue() * 255) / 100);
    hueState=new HueState(bri);
  }
 else   if (itemState instanceof OnOffType) {
    short bri=(short)(((OnOffType)itemState) == OnOffType.ON ? 255 : 0);
    hueState=new HueState(bri);
  }
 else {
    hueState=new HueState((short)0);
  }
  HueDevice d=new HueDevice(hueState,item.getLabel(),item.getName());
  return d;
}",0.929471032745592
62599,"/** 
 * Hue API call to set the state of a light
 * @param id
 * @param req
 * @param resp
 * @throws IOException
 */
private void apiState(String id,HttpServletRequest req,HttpServletResponse resp) throws IOException {
  if (!req.getMethod().equals(METHOD_PUT)) {
    apiServerError(req,resp,HueErrorResponse.METHOD_NOT_AVAILABLE,""String_Node_Str"");
    return;
  }
  try {
    Item item=itemRegistry.getItem(id);
    HueState state=gson.fromJson(req.getReader(),HueState.class);
    logger.debug(""String_Node_Str"" + state);
    String value;
    if (item.getAcceptedCommandTypes().contains(HSBType.class)) {
      value=String.format(""String_Node_Str"",state.hue,state.sat,state.bri);
    }
 else     if (state.bri > -1 && (item.getAcceptedCommandTypes().contains(DecimalType.class) || item.getAcceptedCommandTypes().contains(PercentType.class))) {
      value=String.valueOf(Math.round(state.bri / 255.0 * 100));
    }
 else {
      value=state.on ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    Command command=TypeParser.parseCommand(item.getAcceptedCommandTypes(),value);
    eventPublisher.post(ItemEventFactory.createCommandEvent(id,command));
    PrintWriter out=resp.getWriter();
    out.write(String.format(STATE_RESP,id,String.valueOf(state.on)));
    out.close();
  }
 catch (  ItemNotFoundException e) {
    logger.debug(""String_Node_Str"" + id);
    apiServerError(req,resp,HueErrorResponse.NOT_AVAILABLE,""String_Node_Str"");
  }
}","/** 
 * Hue API call to set the state of a light
 * @param id
 * @param req
 * @param resp
 * @throws IOException
 */
private void apiState(String id,HttpServletRequest req,HttpServletResponse resp) throws IOException {
  if (!req.getMethod().equals(METHOD_PUT)) {
    apiServerError(req,resp,HueErrorResponse.METHOD_NOT_AVAILABLE,""String_Node_Str"");
    return;
  }
  try {
    Item item=itemRegistry.getItem(id);
    HueState state=gson.fromJson(req.getReader(),HueState.class);
    HSBType hsb=state.toHSBType();
    logger.debug(""String_Node_Str"" + state);
    logger.debug(""String_Node_Str"" + hsb);
    Command command=null;
    if (hsb.getBrightness().intValue() > 0) {
      if (item.getAcceptedCommandTypes().contains(HSBType.class)) {
        command=hsb;
      }
 else {
        command=TypeParser.parseCommand(item.getAcceptedCommandTypes(),hsb.getBrightness().toString());
        if (command == null) {
          command=TypeParser.parseCommand(item.getAcceptedCommandTypes(),""String_Node_Str"");
        }
      }
    }
 else {
      command=TypeParser.parseCommand(item.getAcceptedCommandTypes(),""String_Node_Str"");
      if (command == null) {
        command=TypeParser.parseCommand(item.getAcceptedCommandTypes(),""String_Node_Str"");
      }
    }
    if (command != null) {
      logger.debug(""String_Node_Str"",command,id);
      eventPublisher.post(ItemEventFactory.createCommandEvent(id,command));
      PrintWriter out=resp.getWriter();
      out.write(String.format(STATE_RESP,id,String.valueOf(state.on)));
      out.close();
    }
 else {
      logger.error(""String_Node_Str"",id);
      apiServerError(req,resp,HueErrorResponse.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  ItemNotFoundException e) {
    logger.debug(""String_Node_Str"",id);
    apiServerError(req,resp,HueErrorResponse.NOT_AVAILABLE,""String_Node_Str"");
  }
}",0.4468664850136239
62600,"public HueState(int h,short s,short b){
  super();
  this.on=b > 0;
  this.hue=h;
  this.sat=s;
  this.bri=b;
}","public HueState(HSBType hsb){
  this.on=hsb.getBrightness().intValue() > 0;
  this.hue=hsb.getHue().intValue();
  this.sat=hsb.getSaturation().shortValue();
  this.bri=hsb.intValue() > 0 ? (short)((hsb.intValue() * 255) / 100) : -1;
}",0.2492753623188406
62601,"/** 
 * {@inheritDoc}
 */
@Override public void start() throws IOException {
  logger.debug(""String_Node_Str"",config.getCallbackPort());
  xmlRpcHTTPD=new XmlRpcHTTPD(config.getCallbackPort());
  xmlRpcHTTPD.start(config.getTimeout() * 1000,true);
}","/** 
 * {@inheritDoc}
 */
@Override public void start() throws IOException {
  logger.debug(""String_Node_Str"",config.getCallbackPort());
  xmlRpcHTTPD=new XmlRpcHTTPD(config.getCallbackPort());
  xmlRpcHTTPD.start(0,true);
}",0.9471458773784356
62602,"@Override public void initialize(){
  logger.debug(""String_Node_Str"");
  String apiBaseUrl=null;
  String apiVersion=null;
  String hardwareVersion=null;
  FreeboxServerConfiguration configuration=getConfigAs(FreeboxServerConfiguration.class);
  String result=HttpUtil.executeUrl(""String_Node_Str"",""String_Node_Str"" + configuration.fqdn + ""String_Node_Str"",5000);
  if (result != null) {
    apiBaseUrl=StringUtils.trim(StringUtils.replace(StringUtils.substringBetween(result,""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
    apiVersion=StringUtils.trim(StringUtils.substringBetween(result,""String_Node_Str"",""String_Node_Str""));
    hardwareVersion=StringUtils.trim(StringUtils.substringBetween(result,""String_Node_Str"",""String_Node_Str""));
  }
  if ((apiBaseUrl != null) && (apiVersion != null) && (hardwareVersion != null)) {
    updateStatus(ThingStatus.OFFLINE);
    logger.debug(""String_Node_Str"");
    if (authorizeJob == null || authorizeJob.isCancelled()) {
      authorizeJob=scheduler.schedule(authorizeRunnable,1,TimeUnit.SECONDS);
    }
  }
 else {
    updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.CONFIGURATION_ERROR);
  }
  Map<String,String> properties=editProperties();
  boolean update=false;
  if ((apiBaseUrl != null) && !apiBaseUrl.isEmpty() && ((properties.get(FreeboxBindingConstants.API_BASE_URL) == null) || !properties.get(FreeboxBindingConstants.API_BASE_URL).equals(apiBaseUrl))) {
    update=true;
    properties.put(FreeboxBindingConstants.API_BASE_URL,apiBaseUrl);
  }
  if ((apiVersion != null) && !apiVersion.isEmpty() && ((properties.get(FreeboxBindingConstants.API_VERSION) == null) || !properties.get(FreeboxBindingConstants.API_VERSION).equals(apiVersion))) {
    update=true;
    properties.put(FreeboxBindingConstants.API_VERSION,apiVersion);
  }
  if ((hardwareVersion != null) && !hardwareVersion.isEmpty() && ((properties.get(Thing.PROPERTY_HARDWARE_VERSION) == null) || !properties.get(Thing.PROPERTY_HARDWARE_VERSION).equals(hardwareVersion))) {
    update=true;
    properties.put(Thing.PROPERTY_HARDWARE_VERSION,hardwareVersion);
  }
  if (update) {
    updateProperties(properties);
  }
}","@Override public void initialize(){
  logger.debug(""String_Node_Str"");
  FreeboxServerConfiguration configuration=getConfigAs(FreeboxServerConfiguration.class);
  if ((configuration != null) && (configuration.fqdn != null) && !configuration.fqdn.isEmpty()) {
    updateStatus(ThingStatus.OFFLINE);
    logger.debug(""String_Node_Str"");
    if (authorizeJob == null || authorizeJob.isCancelled()) {
      authorizeJob=scheduler.schedule(authorizeRunnable,1,TimeUnit.SECONDS);
    }
  }
 else {
    updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.CONFIGURATION_ERROR);
  }
}",0.3075801749271137
62603,"private void buildChannel(){
  try {
    HarmonyConfig config=getCachedConfig();
    List<Activity> activities=config.getActivities();
    Collections.sort(activities,new Comparator<Activity>(){
      @Override public int compare(      Activity a1,      Activity a2){
        int o1=a1.getActivityOrder() == null ? -1 : a1.getActivityOrder().intValue();
        int o2=a2.getActivityOrder() == null ? -1 : a2.getActivityOrder().intValue();
        return (o1 < o2) ? -1 : (o1 == o2) ? 0 : 1;
      }
    }
);
    List<StateOption> states=new LinkedList<StateOption>();
    for (    Activity activity : activities) {
      states.add(new StateOption(String.valueOf(activity.getLabel()),activity.getLabel()));
    }
    ChannelTypeUID channelTypeUID=new ChannelTypeUID(HarmonyHubBindingConstants.BINDING_ID + ""String_Node_Str"" + HarmonyHubBindingConstants.CHANNEL_CURRENT_ACTIVITY);
    ChannelType channelType=new ChannelType(channelTypeUID,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,new StateDescription(null,null,null,""String_Node_Str"",false,states),new URI(HarmonyHubBindingConstants.BINDING_ID,HarmonyHubBindingConstants.CHANNEL_CURRENT_ACTIVITY,null));
    factory.addChannelType(channelType);
    BridgeBuilder thingBuilder=BridgeBuilder.create(getThing().getUID()).withConfiguration(getThing().getConfiguration()).withProperties(getThing().getProperties());
    Channel channel=ChannelBuilder.create(new ChannelUID(getThing().getUID(),HarmonyHubBindingConstants.CHANNEL_CURRENT_ACTIVITY),""String_Node_Str"").withType(channelTypeUID).build();
    thingBuilder.withChannel(channel);
    updateThing(thingBuilder.build());
  }
 catch (  Exception e) {
    logger.debug(""String_Node_Str"",e);
  }
}","private void buildChannel(){
  try {
    HarmonyConfig config=getCachedConfig();
    List<Activity> activities=config.getActivities();
    Collections.sort(activities,new Comparator<Activity>(){
      @Override public int compare(      Activity a1,      Activity a2){
        int o1=a1.getActivityOrder() == null ? -1 : a1.getActivityOrder().intValue();
        int o2=a2.getActivityOrder() == null ? -1 : a2.getActivityOrder().intValue();
        return (o1 < o2) ? -1 : (o1 == o2) ? 0 : 1;
      }
    }
);
    List<StateOption> states=new LinkedList<StateOption>();
    for (    Activity activity : activities) {
      states.add(new StateOption(String.valueOf(activity.getLabel()),activity.getLabel()));
    }
    ChannelTypeUID channelTypeUID=new ChannelTypeUID(HarmonyHubBindingConstants.BINDING_ID + ""String_Node_Str"" + HarmonyHubBindingConstants.CHANNEL_CURRENT_ACTIVITY);
    ChannelType channelType=new ChannelType(channelTypeUID,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,new StateDescription(null,null,null,""String_Node_Str"",false,states),new URI(HarmonyHubBindingConstants.BINDING_ID,HarmonyHubBindingConstants.CHANNEL_CURRENT_ACTIVITY,null));
    factory.addChannelType(channelType);
    BridgeBuilder thingBuilder=(BridgeBuilder)BridgeBuilder.create(getThing().getThingTypeUID(),getThing().getUID()).withConfiguration(getThing().getConfiguration()).withProperties(getThing().getProperties());
    Channel channel=ChannelBuilder.create(new ChannelUID(getThing().getUID(),HarmonyHubBindingConstants.CHANNEL_CURRENT_ACTIVITY),""String_Node_Str"").withType(channelTypeUID).build();
    thingBuilder.withChannel(channel);
    updateThing(thingBuilder.build());
  }
 catch (  Exception e) {
    logger.debug(""String_Node_Str"",e);
  }
}",0.9828178694158076
62604,"public void deviceAdded(ZWaveNode node){
  if (controllerHandler.getOwnNodeId() == node.getNodeId() || node.getNodeId() == 0 || node.getNodeId() > 232) {
    return;
  }
  logger.debug(""String_Node_Str"",node.getNodeId());
  ThingUID bridgeUID=controllerHandler.getThing().getUID();
  ZWaveProduct foundProduct=null;
  for (  ZWaveProduct product : ZWaveConfigProvider.getProductIndex()) {
    if (product == null) {
      continue;
    }
    logger.debug(""String_Node_Str"",node.getNodeId(),product.getThingTypeUID());
    if (product.match(node) == true) {
      foundProduct=product;
      break;
    }
  }
  String label=String.format(""String_Node_Str"",node.getNodeId());
  if (foundProduct == null) {
    logger.warn(""String_Node_Str"",node.getNodeId(),String.format(""String_Node_Str"",node.getManufacturer()),String.format(""String_Node_Str"",node.getDeviceType()),String.format(""String_Node_Str"",node.getDeviceId()),node.getApplicationVersion());
    if (node.getManufacturer() != Integer.MAX_VALUE) {
      label+=String.format(""String_Node_Str"",node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion());
    }
  }
 else {
    logger.debug(""String_Node_Str"",foundProduct.getThingTypeUID());
    ThingType thingType=ZWaveConfigProvider.getThingType(foundProduct.getThingTypeUID());
    label+=String.format(""String_Node_Str"",thingType.getLabel());
  }
  Map<String,Object> properties=new HashMap<>(11);
  properties.put(ZWaveBindingConstants.PROPERTY_NODEID,Integer.toString(node.getNodeId()));
  properties.put(ZWaveBindingConstants.PROPERTY_MANUFACTURER,Integer.toString(node.getManufacturer()));
  properties.put(ZWaveBindingConstants.PROPERTY_DEVICETYPE,Integer.toString(node.getDeviceType()));
  properties.put(ZWaveBindingConstants.PROPERTY_DEVICEID,Integer.toString(node.getDeviceId()));
  properties.put(ZWaveBindingConstants.PROPERTY_VERSION,node.getApplicationVersion());
  properties.put(ZWaveBindingConstants.PROPERTY_CLASS_BASIC,node.getDeviceClass().getBasicDeviceClass().toString());
  properties.put(ZWaveBindingConstants.PROPERTY_CLASS_GENERIC,node.getDeviceClass().getGenericDeviceClass().toString());
  properties.put(ZWaveBindingConstants.PROPERTY_CLASS_SPECIFIC,node.getDeviceClass().getSpecificDeviceClass().toString());
  properties.put(ZWaveBindingConstants.PROPERTY_LISTENING,Boolean.toString(node.isListening()));
  properties.put(ZWaveBindingConstants.PROPERTY_FREQUENT,Boolean.toString(node.isFrequentlyListening()));
  properties.put(ZWaveBindingConstants.PROPERTY_BEAMING,Boolean.toString(node.isBeaming()));
  properties.put(ZWaveBindingConstants.PROPERTY_ROUTING,Boolean.toString(node.isRouting()));
  ThingUID thingUID=new ThingUID(new ThingTypeUID(ZWaveBindingConstants.ZWAVE_THING),bridgeUID,String.format(""String_Node_Str"",node.getNodeId()));
  DiscoveryResult discoveryResult=DiscoveryResultBuilder.create(thingUID).withProperties(properties).withBridge(bridgeUID).withLabel(label).build();
  thingDiscovered(discoveryResult);
  return;
}","public void deviceAdded(ZWaveNode node){
  if (controllerHandler.getOwnNodeId() == node.getNodeId() || node.getNodeId() == 0 || node.getNodeId() > 232) {
    return;
  }
  logger.debug(""String_Node_Str"",node.getNodeId());
  ThingUID bridgeUID=controllerHandler.getThing().getUID();
  ZWaveProduct foundProduct=null;
  for (  ZWaveProduct product : ZWaveConfigProvider.getProductIndex()) {
    if (product == null) {
      continue;
    }
    logger.debug(""String_Node_Str"",node.getNodeId(),product.getThingTypeUID());
    if (product.match(node) == true) {
      foundProduct=product;
      break;
    }
  }
  String label=String.format(""String_Node_Str"",node.getNodeId());
  if (foundProduct == null) {
    logger.warn(""String_Node_Str"",node.getNodeId(),String.format(""String_Node_Str"",node.getManufacturer()),String.format(""String_Node_Str"",node.getDeviceType()),String.format(""String_Node_Str"",node.getDeviceId()),node.getApplicationVersion());
    if (node.getManufacturer() != Integer.MAX_VALUE) {
      label+=String.format(""String_Node_Str"",node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion());
    }
  }
 else {
    logger.debug(""String_Node_Str"",node.getNodeId(),foundProduct.getThingTypeUID());
    ThingType thingType=ZWaveConfigProvider.getThingType(foundProduct.getThingTypeUID());
    label+=String.format(""String_Node_Str"",thingType.getLabel());
  }
  Map<String,Object> properties=new HashMap<>(11);
  properties.put(ZWaveBindingConstants.PROPERTY_NODEID,Integer.toString(node.getNodeId()));
  properties.put(ZWaveBindingConstants.PROPERTY_MANUFACTURER,Integer.toString(node.getManufacturer()));
  properties.put(ZWaveBindingConstants.PROPERTY_DEVICETYPE,Integer.toString(node.getDeviceType()));
  properties.put(ZWaveBindingConstants.PROPERTY_DEVICEID,Integer.toString(node.getDeviceId()));
  properties.put(ZWaveBindingConstants.PROPERTY_VERSION,node.getApplicationVersion());
  properties.put(ZWaveBindingConstants.PROPERTY_CLASS_BASIC,node.getDeviceClass().getBasicDeviceClass().toString());
  properties.put(ZWaveBindingConstants.PROPERTY_CLASS_GENERIC,node.getDeviceClass().getGenericDeviceClass().toString());
  properties.put(ZWaveBindingConstants.PROPERTY_CLASS_SPECIFIC,node.getDeviceClass().getSpecificDeviceClass().toString());
  properties.put(ZWaveBindingConstants.PROPERTY_LISTENING,Boolean.toString(node.isListening()));
  properties.put(ZWaveBindingConstants.PROPERTY_FREQUENT,Boolean.toString(node.isFrequentlyListening()));
  properties.put(ZWaveBindingConstants.PROPERTY_BEAMING,Boolean.toString(node.isBeaming()));
  properties.put(ZWaveBindingConstants.PROPERTY_ROUTING,Boolean.toString(node.isRouting()));
  ThingUID thingUID=new ThingUID(new ThingTypeUID(ZWaveBindingConstants.ZWAVE_THING),bridgeUID,String.format(""String_Node_Str"",node.getNodeId()));
  DiscoveryResult discoveryResult=DiscoveryResultBuilder.create(thingUID).withProperties(properties).withBridge(bridgeUID).withLabel(label).build();
  thingDiscovered(discoveryResult);
  return;
}",0.9971849643980792
62605,"@Override public boolean handleRequest(ZWaveController zController,SerialMessage lastSentMessage,SerialMessage incomingMessage) throws ZWaveSerialMessageException {
  int nodeId;
  boolean result=true;
  UpdateState updateState=UpdateState.getUpdateState(incomingMessage.getMessagePayloadByte(0));
switch (updateState) {
case NODE_INFO_RECEIVED:
    nodeId=incomingMessage.getMessagePayloadByte(1);
  logger.debug(""String_Node_Str"",nodeId);
int length=incomingMessage.getMessagePayloadByte(2);
ZWaveNode node=zController.getNode(nodeId);
if (node == null) {
logger.debug(""String_Node_Str"",nodeId);
if (nodeId > 0 && nodeId <= 232) {
zController.notifyEventListeners(new ZWaveInclusionEvent(ZWaveInclusionEvent.Type.IncludeDone,incomingMessage.getMessagePayloadByte(2)));
}
break;
}
node.setNodeState(ZWaveNodeState.ALIVE);
node.resetResendCount();
node.setApplicationUpdateReceived(true);
if (node.getNodeInitStage() == ZWaveNodeInitStage.DONE) {
if (node.getCommandClass(CommandClass.ASSOCIATION) == null) {
logger.debug(""String_Node_Str"",nodeId);
zController.notifyEventListeners(new ZWaveDelayedPollEvent(nodeId,0,75,TimeUnit.MILLISECONDS));
}
}
 else {
List<CommandClass> nifClasses=new ArrayList<CommandClass>();
for (int i=6; i < length + 3; i++) {
int data=incomingMessage.getMessagePayloadByte(i);
CommandClass commandClass=CommandClass.getCommandClass(data);
if (commandClass == null) {
logger.trace(String.format(""String_Node_Str"",nodeId,data));
continue;
}
if (commandClass == CommandClass.MARK) {
break;
}
if (node.getCommandClass(commandClass) == null) {
ZWaveCommandClass zwaveCommandClass=ZWaveCommandClass.getInstance(data,node,zController);
if (zwaveCommandClass != null) {
logger.debug(""String_Node_Str"",nodeId,commandClass);
node.addCommandClass(zwaveCommandClass);
}
}
nifClasses.add(commandClass);
}
node.updateNifClasses(nifClasses);
}
ZWaveWakeUpCommandClass wakeUp=(ZWaveWakeUpCommandClass)node.getCommandClass(ZWaveCommandClass.CommandClass.WAKE_UP);
if (wakeUp != null) {
wakeUp.setAwake(true);
}
break;
case NODE_INFO_REQ_FAILED:
if (lastSentMessage.getMessageClass() != SerialMessageClass.RequestNodeInfo) {
logger.warn(""String_Node_Str"",lastSentMessage.getMessageClass());
return false;
}
nodeId=lastSentMessage.getMessageNode();
logger.debug(""String_Node_Str"",nodeId);
if (--lastSentMessage.attempts >= 0) {
logger.error(""String_Node_Str"",nodeId);
zController.enqueue(lastSentMessage);
}
 else {
logger.warn(""String_Node_Str"",nodeId,lastSentMessage.toString());
}
incomingMessage.setTransactionCanceled();
result=false;
break;
default :
logger.warn(""String_Node_Str"",updateState.getLabel(),updateState.getKey());
}
checkTransactionComplete(lastSentMessage,incomingMessage);
return result;
}","@Override public boolean handleRequest(ZWaveController zController,SerialMessage lastSentMessage,SerialMessage incomingMessage) throws ZWaveSerialMessageException {
  int nodeId;
  boolean result=true;
  UpdateState updateState=UpdateState.getUpdateState(incomingMessage.getMessagePayloadByte(0));
switch (updateState) {
case NODE_INFO_RECEIVED:
    nodeId=incomingMessage.getMessagePayloadByte(1);
  logger.debug(""String_Node_Str"",nodeId);
int length=incomingMessage.getMessagePayloadByte(2);
ZWaveNode node=zController.getNode(nodeId);
if (node == null) {
logger.debug(""String_Node_Str"",nodeId);
if (nodeId > 0 && nodeId <= 232) {
zController.notifyEventListeners(new ZWaveInclusionEvent(ZWaveInclusionEvent.Type.IncludeDone,nodeId));
}
break;
}
node.setNodeState(ZWaveNodeState.ALIVE);
node.resetResendCount();
node.setApplicationUpdateReceived(true);
if (node.getNodeInitStage() == ZWaveNodeInitStage.DONE) {
if (node.getCommandClass(CommandClass.ASSOCIATION) == null) {
logger.debug(""String_Node_Str"",nodeId);
zController.notifyEventListeners(new ZWaveDelayedPollEvent(nodeId,0,75,TimeUnit.MILLISECONDS));
}
}
 else {
List<CommandClass> nifClasses=new ArrayList<CommandClass>();
for (int i=6; i < length + 3; i++) {
int data=incomingMessage.getMessagePayloadByte(i);
CommandClass commandClass=CommandClass.getCommandClass(data);
if (commandClass == null) {
logger.trace(String.format(""String_Node_Str"",nodeId,data));
continue;
}
if (commandClass == CommandClass.MARK) {
break;
}
if (node.getCommandClass(commandClass) == null) {
ZWaveCommandClass zwaveCommandClass=ZWaveCommandClass.getInstance(data,node,zController);
if (zwaveCommandClass != null) {
logger.debug(""String_Node_Str"",nodeId,commandClass);
node.addCommandClass(zwaveCommandClass);
}
}
nifClasses.add(commandClass);
}
node.updateNifClasses(nifClasses);
}
ZWaveWakeUpCommandClass wakeUp=(ZWaveWakeUpCommandClass)node.getCommandClass(ZWaveCommandClass.CommandClass.WAKE_UP);
if (wakeUp != null) {
wakeUp.setAwake(true);
}
break;
case NODE_INFO_REQ_FAILED:
if (lastSentMessage.getMessageClass() != SerialMessageClass.RequestNodeInfo) {
logger.warn(""String_Node_Str"",lastSentMessage.getMessageClass());
return false;
}
nodeId=lastSentMessage.getMessageNode();
logger.debug(""String_Node_Str"",nodeId);
if (--lastSentMessage.attempts >= 0) {
logger.error(""String_Node_Str"",nodeId);
zController.enqueue(lastSentMessage);
}
 else {
logger.warn(""String_Node_Str"",nodeId,lastSentMessage.toString());
}
incomingMessage.setTransactionCanceled();
result=false;
break;
default :
logger.warn(""String_Node_Str"",updateState.getLabel(),updateState.getKey());
}
checkTransactionComplete(lastSentMessage,incomingMessage);
return result;
}",0.9914909359970404
62606,"/** 
 * Gets a SerialMessage with the NAME GET command
 * @return the serial message
 */
public SerialMessage getNameMessage(){
  logger.debug(""String_Node_Str"",this.getNode().getNodeId());
  SerialMessage result=new SerialMessage(this.getNode().getNodeId(),SerialMessageClass.SendData,SerialMessageType.Request,SerialMessageClass.ApplicationCommandHandler,SerialMessagePriority.Get);
  byte[] newPayload={(byte)getNode().getNodeId(),2,(byte)getCommandClass().getKey(),(byte)NAME_GET};
  result.setMessagePayload(newPayload);
  return result;
}","/** 
 * Gets a SerialMessage with the NAME GET command
 * @return the serial message
 */
public SerialMessage getNameMessage(){
  logger.debug(""String_Node_Str"",getNode().getNodeId());
  SerialMessage result=new SerialMessage(getNode().getNodeId(),SerialMessageClass.SendData,SerialMessageType.Request,SerialMessageClass.ApplicationCommandHandler,SerialMessagePriority.Get);
  byte[] newPayload={(byte)getNode().getNodeId(),2,(byte)getCommandClass().getKey(),(byte)NAME_GET};
  result.setMessagePayload(newPayload);
  return result;
}",0.9907235621521336
62607,"/** 
 * Get a string from the serial message
 * @param serialMessage
 * @param offset
 * @return String
 * @throws ZWaveSerialMessageException
 */
protected String getString(SerialMessage serialMessage,int offset) throws ZWaveSerialMessageException {
  int charPresentation=serialMessage.getMessagePayloadByte(offset + 1);
  charPresentation=0x07 & charPresentation;
switch (charPresentation) {
case ENCODING_ASCII:
    logger.debug(""String_Node_Str"",this.getNode().getNodeId());
  break;
case ENCODING_EXTENDED_ASCII:
logger.debug(""String_Node_Str"",this.getNode().getNodeId());
break;
case ENCODING_UTF16:
logger.debug(""String_Node_Str"",this.getNode().getNodeId());
break;
default :
logger.error(""String_Node_Str"",this.getNode().getNodeId(),charPresentation);
return null;
}
int numBytes=serialMessage.getMessagePayload().length - (offset + 2);
if (numBytes < 0) {
logger.error(""String_Node_Str"",this.getNode().getNodeId(),serialMessage.getMessagePayload().length);
return null;
}
if (numBytes == 0) {
return new String();
}
if (numBytes > MAX_STRING_LENGTH) {
logger.warn(""String_Node_Str"",this.getNode().getNodeId(),MAX_STRING_LENGTH,numBytes);
numBytes=MAX_STRING_LENGTH;
}
if (charPresentation != ENCODING_ASCII) {
logger.debug(""String_Node_Str"",getNode().getNodeId());
charPresentation=ENCODING_ASCII;
}
ByteArrayOutputStream baos=new ByteArrayOutputStream();
for (int c=0; c < numBytes; c++) {
if (serialMessage.getMessagePayloadByte(c + offset + 2) > 32 && serialMessage.getMessagePayloadByte(c + offset + 2) < 127) {
baos.write((byte)(serialMessage.getMessagePayloadByte(c + offset + 2)));
}
}
try {
return new String(baos.toByteArray(),""String_Node_Str"");
}
 catch (UnsupportedEncodingException e) {
return null;
}
}","/** 
 * Get a string from the serial message
 * @param serialMessage
 * @param offset
 * @return String
 * @throws ZWaveSerialMessageException
 */
protected String getString(SerialMessage serialMessage,int offset) throws ZWaveSerialMessageException {
  if (serialMessage.getMessagePayload().length <= offset + 1) {
    return new String();
  }
  int charPresentation=serialMessage.getMessagePayloadByte(offset + 1);
  charPresentation=0x07 & charPresentation;
switch (charPresentation) {
case ENCODING_ASCII:
    logger.debug(""String_Node_Str"",getNode().getNodeId());
  break;
case ENCODING_EXTENDED_ASCII:
logger.debug(""String_Node_Str"",getNode().getNodeId());
break;
case ENCODING_UTF16:
logger.debug(""String_Node_Str"",getNode().getNodeId());
break;
default :
logger.error(""String_Node_Str"",getNode().getNodeId(),charPresentation);
return null;
}
int numBytes=serialMessage.getMessagePayload().length - (offset + 2);
if (numBytes < 0) {
logger.error(""String_Node_Str"",getNode().getNodeId(),serialMessage.getMessagePayload().length);
return null;
}
if (numBytes == 0) {
return new String();
}
if (numBytes > MAX_STRING_LENGTH) {
logger.warn(""String_Node_Str"",getNode().getNodeId(),MAX_STRING_LENGTH,numBytes);
numBytes=MAX_STRING_LENGTH;
}
if (charPresentation != ENCODING_ASCII) {
logger.debug(""String_Node_Str"",getNode().getNodeId());
charPresentation=ENCODING_ASCII;
}
ByteArrayOutputStream baos=new ByteArrayOutputStream();
for (int c=0; c < numBytes; c++) {
if (serialMessage.getMessagePayloadByte(c + offset + 2) > 32 && serialMessage.getMessagePayloadByte(c + offset + 2) < 127) {
baos.write((byte)(serialMessage.getMessagePayloadByte(c + offset + 2)));
}
}
try {
return new String(baos.toByteArray(),""String_Node_Str"");
}
 catch (UnsupportedEncodingException e) {
return null;
}
}",0.9650071123755334
62608,"/** 
 * {@inheritDoc}
 * @throws ZWaveSerialMessageException
 */
@Override public void handleApplicationCommandRequest(SerialMessage serialMessage,int offset,int endpoint) throws ZWaveSerialMessageException {
  logger.debug(""String_Node_Str"",this.getNode().getNodeId());
  int command=serialMessage.getMessagePayloadByte(offset);
switch (command) {
case NAME_REPORT:
    logger.trace(""String_Node_Str"",this.getNode().getNodeId());
  processNameReport(serialMessage,offset,endpoint);
initialiseName=true;
break;
case LOCATION_REPORT:
logger.trace(""String_Node_Str"",this.getNode().getNodeId());
processLocationReport(serialMessage,offset,endpoint);
initialiseLocation=true;
break;
default :
logger.warn(String.format(""String_Node_Str"",command,this.getCommandClass().getLabel(),this.getCommandClass().getKey()));
}
}","/** 
 * {@inheritDoc}
 * @throws ZWaveSerialMessageException
 */
@Override public void handleApplicationCommandRequest(SerialMessage serialMessage,int offset,int endpoint) throws ZWaveSerialMessageException {
  logger.debug(""String_Node_Str"",getNode().getNodeId(),getVersion());
  int command=serialMessage.getMessagePayloadByte(offset);
switch (command) {
case NAME_REPORT:
    logger.trace(""String_Node_Str"",getNode().getNodeId());
  processNameReport(serialMessage,offset,endpoint);
initialiseName=true;
break;
case LOCATION_REPORT:
logger.trace(""String_Node_Str"",getNode().getNodeId());
processLocationReport(serialMessage,offset,endpoint);
initialiseLocation=true;
break;
default :
logger.warn(String.format(""String_Node_Str"",command,getCommandClass().getLabel(),getCommandClass().getKey()));
}
}",0.976456009913259
62609,"/** 
 * Gets a SerialMessage with the NAME GET command
 * @return the serial message
 */
public SerialMessage getLocationMessage(){
  logger.debug(""String_Node_Str"",this.getNode().getNodeId());
  SerialMessage result=new SerialMessage(this.getNode().getNodeId(),SerialMessageClass.SendData,SerialMessageType.Request,SerialMessageClass.ApplicationCommandHandler,SerialMessagePriority.Get);
  byte[] newPayload={(byte)getNode().getNodeId(),2,(byte)getCommandClass().getKey(),(byte)LOCATION_GET};
  result.setMessagePayload(newPayload);
  return result;
}","/** 
 * Gets a SerialMessage with the NAME GET command
 * @return the serial message
 */
public SerialMessage getLocationMessage(){
  logger.debug(""String_Node_Str"",getNode().getNodeId());
  SerialMessage result=new SerialMessage(getNode().getNodeId(),SerialMessageClass.SendData,SerialMessageType.Request,SerialMessageClass.ApplicationCommandHandler,SerialMessagePriority.Get);
  byte[] newPayload={(byte)getNode().getNodeId(),2,(byte)getCommandClass().getKey(),(byte)LOCATION_GET};
  result.setMessagePayload(newPayload);
  return result;
}",0.9908592321755028
62610,"/** 
 * Gets a SerialMessage with the Name or Location SET command
 * @param the level to set.
 * @return the serial message
 */
private SerialMessage setValueMessage(String str,int command){
  logger.debug(""String_Node_Str"",this.getNode().getNodeId(),str);
  byte[] nameBuffer=null;
  byte encoding=ENCODING_ASCII;
  CharsetEncoder asciiEncoder=StandardCharsets.US_ASCII.newEncoder();
  if (asciiEncoder.canEncode(str) == true) {
    nameBuffer=str.getBytes(StandardCharsets.US_ASCII);
  }
 else {
    nameBuffer=str.getBytes(StandardCharsets.UTF_16);
    encoding=ENCODING_UTF16;
  }
  int len=nameBuffer.length;
  if (len > 16) {
    len=16;
  }
  SerialMessage result=new SerialMessage(this.getNode().getNodeId(),SerialMessageClass.SendData,SerialMessageType.Request,SerialMessageClass.SendData,SerialMessagePriority.Set);
  byte[] newPayload={(byte)this.getNode().getNodeId(),(byte)((byte)len + 3),(byte)getCommandClass().getKey(),(byte)command,encoding};
  byte[] msg=new byte[newPayload.length + len];
  System.arraycopy(newPayload,0,msg,0,newPayload.length);
  System.arraycopy(nameBuffer,0,msg,newPayload.length,len);
  result.setMessagePayload(msg);
  return result;
}","/** 
 * Gets a SerialMessage with the Name or Location SET command
 * @param the level to set.
 * @return the serial message
 */
private SerialMessage setValueMessage(String str,int command){
  logger.debug(""String_Node_Str"",getNode().getNodeId(),str);
  byte[] nameBuffer=null;
  byte encoding=ENCODING_ASCII;
  CharsetEncoder asciiEncoder=StandardCharsets.US_ASCII.newEncoder();
  if (asciiEncoder.canEncode(str) == true) {
    nameBuffer=str.getBytes(StandardCharsets.US_ASCII);
  }
 else {
    nameBuffer=str.getBytes(StandardCharsets.UTF_16);
    encoding=ENCODING_UTF16;
  }
  int len=nameBuffer.length;
  if (len > 16) {
    len=16;
  }
  SerialMessage result=new SerialMessage(getNode().getNodeId(),SerialMessageClass.SendData,SerialMessageType.Request,SerialMessageClass.SendData,SerialMessagePriority.Set);
  byte[] newPayload={(byte)getNode().getNodeId(),(byte)((byte)len + 3),(byte)getCommandClass().getKey(),(byte)command,encoding};
  byte[] msg=new byte[newPayload.length + len];
  System.arraycopy(newPayload,0,msg,0,newPayload.length);
  System.arraycopy(nameBuffer,0,msg,newPayload.length,len);
  result.setMessagePayload(msg);
  return result;
}",0.9935924818453652
62611,"@Override public Collection<SerialMessage> getDynamicValues(boolean refresh){
  ArrayList<SerialMessage> result=new ArrayList<SerialMessage>();
  if (refresh == true) {
    initialiseName=false;
    initialiseLocation=false;
  }
  if (initialiseName == false) {
    result.add(this.getNameMessage());
  }
  if (initialiseLocation == false) {
    result.add(this.getLocationMessage());
  }
  return result;
}","@Override public Collection<SerialMessage> getDynamicValues(boolean refresh){
  ArrayList<SerialMessage> result=new ArrayList<SerialMessage>();
  if (refresh == true) {
    initialiseName=false;
    initialiseLocation=false;
  }
  if (initialiseName == false) {
    result.add(getNameMessage());
  }
  if (initialiseLocation == false) {
    result.add(getLocationMessage());
  }
  return result;
}",0.7388059701492538
62612,"/** 
 * {@inheritDoc}
 * @see javax.servlet.http.HttpServlet#doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
 */
@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  File requestedFile=getRequestedFile(req);
  String path=req.getPathInfo() != null ? req.getPathInfo() : ""String_Node_Str"";
  Matcher matcher=sitemapPattern.matcher(path);
  if (matcher.find()) {
    resp.setHeader(""String_Node_Str"",""String_Node_Str"" + Config.COMETVISU_BACKEND_ALIAS + ""String_Node_Str""+ Config.COMETVISU_BACKEND_LOGIN_ALIAS);
    resp.setHeader(""String_Node_Str"",""String_Node_Str"");
    if (!requestedFile.exists()) {
      Sitemap sitemap=getSitemap(matcher.group(2));
      if (sitemap != null) {
        logger.debug(""String_Node_Str"",sitemap);
        VisuConfig config=new VisuConfig(sitemap,cometVisuApp,rootFolder);
        resp.setContentType(MediaType.APPLICATION_XML);
        resp.getWriter().write(config.getConfigXml(req));
        resp.flushBuffer();
        return;
      }
 else {
        throw new ServletException(""String_Node_Str"" + matcher.group(1) + ""String_Node_Str"");
      }
    }
  }
  if (path.matches(""String_Node_Str"") || path.matches(""String_Node_Str"")) {
    dataProviderService(requestedFile,req,resp);
  }
 else   if (path.equalsIgnoreCase(rrsLogPath)) {
    processRssLogRequest(requestedFile,req,resp);
  }
 else   if (requestedFile.getName().endsWith(""String_Node_Str"")) {
    processPhpRequest(requestedFile,req,resp);
  }
 else {
    processStaticRequest(requestedFile,req,resp,true);
  }
}","/** 
 * {@inheritDoc}
 * @see javax.servlet.http.HttpServlet#doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
 */
@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  File requestedFile=getRequestedFile(req);
  String path=req.getPathInfo() != null ? req.getPathInfo() : ""String_Node_Str"";
  Matcher matcher=sitemapPattern.matcher(path);
  if (matcher.find()) {
    resp.setHeader(""String_Node_Str"",""String_Node_Str"" + Config.COMETVISU_BACKEND_ALIAS + ""String_Node_Str""+ Config.COMETVISU_BACKEND_LOGIN_ALIAS);
    resp.setHeader(""String_Node_Str"",""String_Node_Str"");
    if (!requestedFile.exists()) {
      Sitemap sitemap=getSitemap(matcher.group(2));
      if (sitemap != null) {
        logger.debug(""String_Node_Str"",sitemap);
        VisuConfig config=new VisuConfig(sitemap,cometVisuApp,rootFolder);
        resp.setContentType(MediaType.APPLICATION_XML);
        resp.getWriter().write(config.getConfigXml(req));
        resp.flushBuffer();
        return;
      }
 else {
        logger.debug(""String_Node_Str"",requestedFile,matcher.group(2));
        resp.sendError(HttpServletResponse.SC_NOT_FOUND);
        return;
      }
    }
  }
  if (path.matches(""String_Node_Str"") || path.matches(""String_Node_Str"")) {
    dataProviderService(requestedFile,req,resp);
  }
 else   if (path.equalsIgnoreCase(rrsLogPath)) {
    processRssLogRequest(requestedFile,req,resp);
  }
 else   if (requestedFile.getName().endsWith(""String_Node_Str"")) {
    processPhpRequest(requestedFile,req,resp);
  }
 else {
    processStaticRequest(requestedFile,req,resp,true);
  }
}",0.9371951219512196
62613,"public String getActiveChannelListAsString(){
  String channelList=""String_Node_Str"";
  for (  Channel channel : getThing().getChannels()) {
    if (channel.isLinked()) {
      if (channelList.length() > 0)       channelList=channelList + ""String_Node_Str"" + channel.getUID().getId();
 else       channelList=channel.getUID().getId();
    }
  }
  return channelList;
}","public String getActiveChannelListAsString(){
  String channelList=""String_Node_Str"";
  for (  Channel channel : getThing().getChannels()) {
    if (isLinked(channel.getUID().getId())) {
      if (channelList.length() > 0) {
        channelList=channelList + ""String_Node_Str"" + channel.getUID().getId();
      }
 else {
        channelList=channel.getUID().getId();
      }
    }
  }
  return channelList;
}",0.9175257731958762
62614,"public void updateStatus(ThingStatus status){
  super.updateStatus(status);
}","@Override public void updateStatus(ThingStatus status){
  super.updateStatus(status);
}",0.9390243902439024
62615,"public void bridgeHandlerInitialized(ThingHandler thingHandler,Bridge bridge){
  logger.debug(""String_Node_Str"",getThing().getUID().getId());
  if (thingHandler instanceof VitotronicBridgeHandler) {
    this.bridgeHandler=(VitotronicBridgeHandler)thingHandler;
  }
 else {
    logger.debug(""String_Node_Str"",thingHandler.toString());
    this.bridgeHandler=null;
  }
  registerVitotronicThingListener(this.bridgeHandler);
}","@Override public void bridgeHandlerInitialized(ThingHandler thingHandler,Bridge bridge){
  logger.debug(""String_Node_Str"",getThing().getUID().getId());
  if (thingHandler instanceof VitotronicBridgeHandler) {
    this.bridgeHandler=(VitotronicBridgeHandler)thingHandler;
  }
 else {
    logger.debug(""String_Node_Str"",thingHandler.toString());
    this.bridgeHandler=null;
  }
  registerVitotronicThingListener(this.bridgeHandler);
}",0.9883177570093458
62616,"private void unregisterVitotronicThingListener(VitotronicBridgeHandler bridgeHandler){
  if (bridgeHandler != null)   bridgeHandler.unregisterThingListener(this);
 else   logger.debug(""String_Node_Str"",this.getThing().getUID());
}","private void unregisterVitotronicThingListener(VitotronicBridgeHandler bridgeHandler){
  if (bridgeHandler != null) {
    bridgeHandler.unregisterThingListener(this);
  }
 else {
    logger.debug(""String_Node_Str"",this.getThing().getUID());
  }
}",0.9495798319327732
62617,"private void registerVitotronicThingListener(VitotronicBridgeHandler bridgeHandler){
  if (bridgeHandler != null)   bridgeHandler.registerVitotronicThingListener(this);
 else   logger.debug(""String_Node_Str"",this.getThing().getUID());
}","private void registerVitotronicThingListener(VitotronicBridgeHandler bridgeHandler){
  if (bridgeHandler != null) {
    bridgeHandler.registerVitotronicThingListener(this);
  }
 else {
    logger.debug(""String_Node_Str"",this.getThing().getUID());
  }
}",0.9508196721311476
62618,"private static void initialiseZWaveThings(){
  if (thingTypeRegistry == null) {
    return;
  }
synchronized (productIndex) {
    zwaveThingTypeUIDList=new HashSet<ThingTypeUID>();
    productIndex=new ArrayList<ZWaveProduct>();
    Collection<ThingType> thingTypes=thingTypeRegistry.getThingTypes();
    for (    ThingType thingType : thingTypes) {
      if (ZWaveBindingConstants.BINDING_ID.equals(thingType.getBindingId()) == false) {
        continue;
      }
      zwaveThingTypeUIDList.add(thingType.getUID());
      Map<String,String> thingProperties=thingType.getProperties();
      if (thingProperties.get(ZWaveBindingConstants.PROPERTY_XML_REFERENCES) == null) {
        continue;
      }
      String[] references=thingProperties.get(ZWaveBindingConstants.PROPERTY_XML_REFERENCES).split(""String_Node_Str"");
      for (      String ref : references) {
        String[] values=ref.split(""String_Node_Str"");
        Integer type;
        Integer id=null;
        if (values.length != 2) {
          continue;
        }
        type=Integer.parseInt(values[0],16);
        if (!values[1].trim().equals(""String_Node_Str"")) {
          id=Integer.parseInt(values[1],16);
        }
        String versionMin=thingProperties.get(ZWaveBindingConstants.PROPERTY_XML_VERSIONMIN);
        String versionMax=thingProperties.get(ZWaveBindingConstants.PROPERTY_XML_VERSIONMAX);
        productIndex.add(new ZWaveProduct(thingType.getUID(),Integer.parseInt(thingProperties.get(ZWaveBindingConstants.PROPERTY_XML_MANUFACTURER),16),type,id,versionMin,versionMax));
      }
    }
  }
}","private static void initialiseZWaveThings(){
  if (thingTypeRegistry == null) {
    return;
  }
synchronized (productIndexLock) {
    zwaveThingTypeUIDList=new HashSet<ThingTypeUID>();
    productIndex=new ArrayList<ZWaveProduct>();
    Collection<ThingType> thingTypes=thingTypeRegistry.getThingTypes();
    for (    ThingType thingType : thingTypes) {
      if (ZWaveBindingConstants.BINDING_ID.equals(thingType.getBindingId()) == false) {
        continue;
      }
      zwaveThingTypeUIDList.add(thingType.getUID());
      Map<String,String> thingProperties=thingType.getProperties();
      if (thingProperties.get(ZWaveBindingConstants.PROPERTY_XML_REFERENCES) == null) {
        continue;
      }
      String[] references=thingProperties.get(ZWaveBindingConstants.PROPERTY_XML_REFERENCES).split(""String_Node_Str"");
      for (      String ref : references) {
        String[] values=ref.split(""String_Node_Str"");
        Integer type;
        Integer id=null;
        if (values.length != 2) {
          continue;
        }
        type=Integer.parseInt(values[0],16);
        if (!values[1].trim().equals(""String_Node_Str"")) {
          id=Integer.parseInt(values[1],16);
        }
        String versionMin=thingProperties.get(ZWaveBindingConstants.PROPERTY_XML_VERSIONMIN);
        String versionMax=thingProperties.get(ZWaveBindingConstants.PROPERTY_XML_VERSIONMAX);
        productIndex.add(new ZWaveProduct(thingType.getUID(),Integer.parseInt(thingProperties.get(ZWaveBindingConstants.PROPERTY_XML_MANUFACTURER),16),type,id,versionMin,versionMax));
      }
    }
  }
}",0.9987333755541482
62619,"/** 
 * {@inheritDoc}
 */
@Override public List<SerialMessage> executeRefresh(ZWaveThingChannel channel,ZWaveNode node){
  ZWaveThermostatFanStateCommandClass commandClass=(ZWaveThermostatFanStateCommandClass)node.resolveCommandClass(ZWaveCommandClass.CommandClass.THERMOSTAT_FAN_MODE,channel.getEndpoint());
  if (commandClass == null) {
    return null;
  }
  logger.debug(""String_Node_Str"",node.getNodeId(),commandClass.getCommandClass().getLabel(),channel.getEndpoint());
  SerialMessage serialMessage=node.encapsulate(commandClass.getValueMessage(),commandClass,channel.getEndpoint());
  List<SerialMessage> response=new ArrayList<SerialMessage>(1);
  response.add(serialMessage);
  return response;
}","/** 
 * {@inheritDoc}
 */
@Override public List<SerialMessage> executeRefresh(ZWaveThingChannel channel,ZWaveNode node){
  ZWaveThermostatFanStateCommandClass commandClass=(ZWaveThermostatFanStateCommandClass)node.resolveCommandClass(ZWaveCommandClass.CommandClass.THERMOSTAT_FAN_STATE,channel.getEndpoint());
  if (commandClass == null) {
    return null;
  }
  logger.debug(""String_Node_Str"",node.getNodeId(),commandClass.getCommandClass().getLabel(),channel.getEndpoint());
  SerialMessage serialMessage=node.encapsulate(commandClass.getValueMessage(),commandClass,channel.getEndpoint());
  List<SerialMessage> response=new ArrayList<SerialMessage>(1);
  response.add(serialMessage);
  return response;
}",0.9950460014154282
62620,"/** 
 * {@inheritDoc}
 */
@Override public List<SerialMessage> executeRefresh(ZWaveThingChannel channel,ZWaveNode node){
  ZWaveThermostatSetpointCommandClass commandClass=(ZWaveThermostatSetpointCommandClass)node.resolveCommandClass(ZWaveCommandClass.CommandClass.THERMOSTAT_SETPOINT,channel.getEndpoint());
  if (commandClass == null) {
    return null;
  }
  logger.debug(""String_Node_Str"",node.getNodeId(),commandClass.getCommandClass().getLabel(),channel.getEndpoint());
  String setpointType=channel.getArguments().get(""String_Node_Str"");
  SerialMessage serialMessage;
  if (setpointType != null) {
    serialMessage=node.encapsulate(commandClass.getMessage(SetpointType.getSetpointType(Integer.parseInt(setpointType))),commandClass,channel.getEndpoint());
  }
 else {
    serialMessage=node.encapsulate(commandClass.getValueMessage(),commandClass,channel.getEndpoint());
  }
  List<SerialMessage> response=new ArrayList<SerialMessage>(1);
  response.add(serialMessage);
  return response;
}","/** 
 * {@inheritDoc}
 */
@Override public List<SerialMessage> executeRefresh(ZWaveThingChannel channel,ZWaveNode node){
  ZWaveThermostatSetpointCommandClass commandClass=(ZWaveThermostatSetpointCommandClass)node.resolveCommandClass(ZWaveCommandClass.CommandClass.THERMOSTAT_SETPOINT,channel.getEndpoint());
  if (commandClass == null) {
    return null;
  }
  logger.debug(""String_Node_Str"",node.getNodeId(),commandClass.getCommandClass().getLabel(),channel.getEndpoint());
  String setpointType=channel.getArguments().get(""String_Node_Str"");
  SerialMessage serialMessage;
  if (setpointType != null) {
    serialMessage=node.encapsulate(commandClass.getMessage(SetpointType.getSetpointType(setpointType)),commandClass,channel.getEndpoint());
  }
 else {
    serialMessage=node.encapsulate(commandClass.getValueMessage(),commandClass,channel.getEndpoint());
  }
  List<SerialMessage> response=new ArrayList<SerialMessage>(1);
  response.add(serialMessage);
  return response;
}",0.9908998988877654
62621,"private static void initMapping(){
  codeToSetpointTypeMapping=new HashMap<Integer,SetpointType>();
  for (  SetpointType s : values()) {
    codeToSetpointTypeMapping.put(s.key,s);
  }
}","private static void initMapping(){
  codeToSetpointTypeMapping=new HashMap<Integer,SetpointType>();
  nameToSetpointTypeMapping=new HashMap<>();
  for (  SetpointType s : values()) {
    codeToSetpointTypeMapping.put(s.key,s);
    nameToSetpointTypeMapping.put(s.name().toLowerCase(),s);
  }
}",0.7791666666666667
62622,"protected String invokeAndParse(String command,String payLoad,WebTarget target){
  if (vehicle.id != null) {
    Response response;
    if (payLoad != null) {
      if (command != null) {
        response=target.resolveTemplate(""String_Node_Str"",command).resolveTemplate(""String_Node_Str"",vehicle.id).request().header(""String_Node_Str"",""String_Node_Str"" + accessToken).post(Entity.entity(payLoad,MediaType.APPLICATION_JSON_TYPE));
      }
 else {
        response=target.resolveTemplate(""String_Node_Str"",vehicle.id).request().header(""String_Node_Str"",""String_Node_Str"" + accessToken).post(Entity.entity(payLoad,MediaType.APPLICATION_JSON_TYPE));
      }
    }
 else {
      if (command != null) {
        response=target.resolveTemplate(""String_Node_Str"",command).resolveTemplate(""String_Node_Str"",vehicle.id).request(MediaType.APPLICATION_JSON_TYPE).header(""String_Node_Str"",""String_Node_Str"" + accessToken).get();
      }
 else {
        response=target.resolveTemplate(""String_Node_Str"",vehicle.id).request(MediaType.APPLICATION_JSON_TYPE).header(""String_Node_Str"",""String_Node_Str"" + accessToken).get();
      }
    }
    JsonParser parser=new JsonParser();
    if (response != null && response.getStatus() == 200) {
      try {
        JsonObject jsonObject=parser.parse(response.readEntity(String.class)).getAsJsonObject();
        logger.trace(""String_Node_Str"",new Object[]{command,payLoad,target.getUri(),jsonObject.get(""String_Node_Str"").toString()});
        return jsonObject.get(""String_Node_Str"").toString();
      }
 catch (      Exception e) {
        logger.error(""String_Node_Str"",e.getMessage());
      }
    }
 else {
      logger.error(""String_Node_Str"",(response != null) ? response.getStatus() : ""String_Node_Str"",(response != null) ? response.getStatusInfo() : ""String_Node_Str"");
    }
  }
  return null;
}","protected String invokeAndParse(String command,String payLoad,WebTarget target){
  if (vehicle.id != null) {
    Response response;
    if (payLoad != null) {
      if (command != null) {
        response=target.resolveTemplate(""String_Node_Str"",command).resolveTemplate(""String_Node_Str"",vehicle.id).request().header(""String_Node_Str"",""String_Node_Str"" + accessToken).post(Entity.entity(payLoad,MediaType.APPLICATION_JSON_TYPE));
      }
 else {
        response=target.resolveTemplate(""String_Node_Str"",vehicle.id).request().header(""String_Node_Str"",""String_Node_Str"" + accessToken).post(Entity.entity(payLoad,MediaType.APPLICATION_JSON_TYPE));
      }
    }
 else {
      if (command != null) {
        response=target.resolveTemplate(""String_Node_Str"",command).resolveTemplate(""String_Node_Str"",vehicle.id).request(MediaType.APPLICATION_JSON_TYPE).header(""String_Node_Str"",""String_Node_Str"" + accessToken).get();
      }
 else {
        response=target.resolveTemplate(""String_Node_Str"",vehicle.id).request(MediaType.APPLICATION_JSON_TYPE).header(""String_Node_Str"",""String_Node_Str"" + accessToken).get();
      }
    }
    JsonParser parser=new JsonParser();
    if (response != null && response.getStatus() == 200) {
      try {
        JsonObject jsonObject=parser.parse(response.readEntity(String.class)).getAsJsonObject();
        logger.trace(""String_Node_Str"",new Object[]{command,payLoad,target.toString(),jsonObject.get(""String_Node_Str"").toString()});
        return jsonObject.get(""String_Node_Str"").toString();
      }
 catch (      Exception e) {
        logger.error(""String_Node_Str"",e.getMessage());
      }
    }
 else {
      logger.error(""String_Node_Str"",(response != null) ? response.getStatus() : ""String_Node_Str"",(response != null) ? response.getStatusInfo() : ""String_Node_Str"");
    }
  }
  return null;
}",0.9961811238406983
62623,"/** 
 * Returns the Base64 encoded command string to be sent via the MAX! protocol.
 * @return the string representing the command
 */
@Override public String getCommandString(){
  String commandString=baseString + rfAddress + Utils.toHex(roomId)+ Utils.toHex(bits);
  String encodedString=Base64.encodeBase64String(Utils.hexStringToByteArray(commandString));
  return ""String_Node_Str"" + encodedString;
}","/** 
 * Returns the Base64 encoded command string to be sent via the MAX! protocol.
 * @return the string representing the command
 */
@Override public String getCommandString(){
  String baseString=""String_Node_Str"";
  if (roomId == 0) {
    baseString=baseStringS;
  }
 else {
    baseString=baseStringG;
  }
  String commandString=baseString + rfAddress + Utils.toHex(roomId)+ Utils.toHex(bits);
  String encodedString=Base64.encodeBase64String(Utils.hexStringToByteArray(commandString));
  return ""String_Node_Str"" + encodedString;
}",0.8598726114649682
62624,"public static Device update(byte[] raw,List<DeviceConfiguration> configurations,Device device){
  String rfAddress=device.getRFAddress();
  boolean[] bits1=Utils.getBits(Utils.fromByte(raw[4]));
  boolean[] bits2=Utils.getBits(Utils.fromByte(raw[5]));
  device.setInitialized(bits1[1]);
  device.setAnswer(bits1[2]);
  device.setError(bits1[3]);
  device.setValid(bits1[4]);
  device.setDstSettingActive(bits2[3]);
  device.setGatewayKnown(bits2[4]);
  device.setPanelLocked(bits2[5]);
  device.setLinkStatusError(bits2[6]);
  device.setBatteryLow(bits2[7]);
  logger.trace(""String_Node_Str"",rfAddress,device.getType().toString(),raw.length,Utils.getHex(raw));
switch (device.getType()) {
case WallMountedThermostat:
case HeatingThermostat:
case HeatingThermostatPlus:
    HeatingThermostat heatingThermostat=(HeatingThermostat)device;
  if (bits2[1] == false && bits2[0] == false) {
    heatingThermostat.setMode(ThermostatModeType.AUTOMATIC);
  }
 else   if (bits2[1] == false && bits2[0] == true) {
    heatingThermostat.setMode(ThermostatModeType.MANUAL);
  }
 else   if (bits2[1] == true && bits2[0] == false) {
    heatingThermostat.setMode(ThermostatModeType.VACATION);
  }
 else   if (bits2[1] == true && bits2[0] == true) {
    heatingThermostat.setMode(ThermostatModeType.BOOST);
  }
 else {
    logger.debug(""String_Node_Str"",rfAddress);
  }
heatingThermostat.setValvePosition(raw[6] & 0xFF);
heatingThermostat.setTemperatureSetpoint(raw[7] & 0x7F);
String hexDate=Utils.toHex(raw[8] & 0xFF,raw[9] & 0xFF);
int dateValue=Utils.fromHex(hexDate);
int timeValue=raw[10] & 0xFF;
Date date=Utils.resolveDateTime(dateValue,timeValue);
heatingThermostat.setDateSetpoint(date);
int actualTemp=0;
if (device.getType() == DeviceType.WallMountedThermostat) {
actualTemp=(raw[11] & 0xFF) + (raw[7] & 0x80) * 2;
}
 else {
if (heatingThermostat.getMode() != ThermostatModeType.VACATION && heatingThermostat.getMode() != ThermostatModeType.BOOST) {
actualTemp=(raw[8] & 0xFF) * 256 + (raw[9] & 0xFF);
}
 else {
logger.debug(""String_Node_Str"",rfAddress,heatingThermostat.getMode());
}
}
logger.trace(""String_Node_Str"",rfAddress,(double)actualTemp / 10);
heatingThermostat.setTemperatureActual((double)actualTemp / 10);
break;
case EcoSwitch:
String eCoSwitchData=Utils.toHex(raw[3] & 0xFF,raw[4] & 0xFF,raw[5] & 0xFF);
logger.trace(""String_Node_Str"",rfAddress,eCoSwitchData);
EcoSwitch ecoswitch=(EcoSwitch)device;
if (bits2[1] == true && bits2[0] == false) {
ecoswitch.setEcoMode(OnOffType.ON);
logger.trace(""String_Node_Str"",rfAddress);
}
 else if (bits2[1] == false && bits2[0] == false) {
ecoswitch.setEcoMode(OnOffType.OFF);
logger.trace(""String_Node_Str"",rfAddress);
}
 else {
logger.trace(""String_Node_Str"",rfAddress);
}
break;
case ShutterContact:
ShutterContact shutterContact=(ShutterContact)device;
if (bits2[1] == true && bits2[0] == false) {
shutterContact.setShutterState(OpenClosedType.OPEN);
logger.trace(""String_Node_Str"",rfAddress);
}
 else if (bits2[1] == false && bits2[0] == false) {
shutterContact.setShutterState(OpenClosedType.CLOSED);
logger.trace(""String_Node_Str"",rfAddress);
}
 else {
logger.trace(""String_Node_Str"",rfAddress);
}
break;
default :
logger.debug(""String_Node_Str"" + Utils.getHex(raw));
break;
}
return device;
}","public static Device update(byte[] raw,List<DeviceConfiguration> configurations,Device device){
  String rfAddress=device.getRFAddress();
  boolean[] bits1=Utils.getBits(Utils.fromByte(raw[4]));
  boolean[] bits2=Utils.getBits(Utils.fromByte(raw[5]));
  device.setInitialized(bits1[1]);
  device.setAnswer(bits1[2]);
  device.setError(bits1[3]);
  device.setValid(bits1[4]);
  device.setDstSettingActive(bits2[3]);
  device.setGatewayKnown(bits2[4]);
  device.setPanelLocked(bits2[5]);
  device.setLinkStatusError(bits2[6]);
  device.setBatteryLow(bits2[7]);
  logger.trace(""String_Node_Str"",rfAddress,device.getType().toString(),raw.length,Utils.getHex(raw));
switch (device.getType()) {
case WallMountedThermostat:
case HeatingThermostat:
case HeatingThermostatPlus:
    HeatingThermostat heatingThermostat=(HeatingThermostat)device;
  if (bits2[1] == false && bits2[0] == false) {
    heatingThermostat.setMode(ThermostatModeType.AUTOMATIC);
  }
 else   if (bits2[1] == false && bits2[0] == true) {
    heatingThermostat.setMode(ThermostatModeType.MANUAL);
  }
 else   if (bits2[1] == true && bits2[0] == false) {
    heatingThermostat.setMode(ThermostatModeType.VACATION);
  }
 else   if (bits2[1] == true && bits2[0] == true) {
    heatingThermostat.setMode(ThermostatModeType.BOOST);
  }
 else {
    logger.debug(""String_Node_Str"",rfAddress,device.getType().toString());
  }
heatingThermostat.setValvePosition(raw[6] & 0xFF);
heatingThermostat.setTemperatureSetpoint(raw[7] & 0x7F);
String hexDate=Utils.toHex(raw[8] & 0xFF,raw[9] & 0xFF);
int dateValue=Utils.fromHex(hexDate);
int timeValue=raw[10] & 0xFF;
Date date=Utils.resolveDateTime(dateValue,timeValue);
heatingThermostat.setDateSetpoint(date);
int actualTemp=0;
if (device.getType() == DeviceType.WallMountedThermostat) {
actualTemp=(raw[11] & 0xFF) + (raw[7] & 0x80) * 2;
}
 else {
if (heatingThermostat.getMode() != ThermostatModeType.VACATION && heatingThermostat.getMode() != ThermostatModeType.BOOST) {
actualTemp=(raw[8] & 0xFF) * 256 + (raw[9] & 0xFF);
}
 else {
logger.debug(""String_Node_Str"",rfAddress,device.getType().toString(),heatingThermostat.getMode());
}
}
logger.debug(""String_Node_Str"",rfAddress,device.getType().toString(),(double)actualTemp / 10);
heatingThermostat.setTemperatureActual((double)actualTemp / 10);
break;
case EcoSwitch:
String eCoSwitchData=Utils.toHex(raw[3] & 0xFF,raw[4] & 0xFF,raw[5] & 0xFF);
logger.trace(""String_Node_Str"",rfAddress,device.getType().toString(),eCoSwitchData);
EcoSwitch ecoswitch=(EcoSwitch)device;
if (bits2[1] == true && bits2[0] == false) {
ecoswitch.setEcoMode(OnOffType.ON);
logger.trace(""String_Node_Str"",rfAddress,device.getType().toString());
}
 else if (bits2[1] == false && bits2[0] == false) {
ecoswitch.setEcoMode(OnOffType.OFF);
logger.trace(""String_Node_Str"",rfAddress,device.getType().toString());
}
 else {
logger.trace(""String_Node_Str"",rfAddress,device.getType().toString());
}
break;
case ShutterContact:
ShutterContact shutterContact=(ShutterContact)device;
if (bits2[1] == true && bits2[0] == false) {
shutterContact.setShutterState(OpenClosedType.OPEN);
logger.debug(""String_Node_Str"",rfAddress,device.getType().toString());
}
 else if (bits2[1] == false && bits2[0] == false) {
shutterContact.setShutterState(OpenClosedType.CLOSED);
logger.debug(""String_Node_Str"",rfAddress,device.getType().toString());
}
 else {
logger.trace(""String_Node_Str"",rfAddress,device.getType().toString());
}
break;
default :
logger.debug(""String_Node_Str"" + Utils.getHex(raw));
break;
}
return device;
}",0.954250295159386
62625,"private void setValues(String rfAddress,DeviceType deviceType,String serialNumber){
  this.rfAddress=rfAddress;
  this.deviceType=deviceType;
  this.serialNumber=serialNumber;
}","private void setValues(String rfAddress,DeviceType deviceType,String serialNumber,int roomId){
  this.rfAddress=rfAddress;
  this.deviceType=deviceType;
  this.serialNumber=serialNumber;
  this.roomId=roomId;
}",0.9147286821705426
62626,"public static DeviceConfiguration create(DeviceInformation di){
  DeviceConfiguration configuration=new DeviceConfiguration();
  configuration.setValues(di.getRFAddress(),di.getDeviceType(),di.getSerialNumber(),di.getName());
  return configuration;
}","public static DeviceConfiguration create(DeviceInformation di){
  DeviceConfiguration configuration=new DeviceConfiguration();
  configuration.setValues(di.getRFAddress(),di.getDeviceType(),di.getSerialNumber(),di.getRoomId(),di.getName());
  return configuration;
}",0.9709864603481624
62627,"private void receiveDiscoveryMessage(){
  DatagramSocket bcReceipt=null;
  try {
    discoveryRunning=true;
    bcReceipt=new DatagramSocket(23272);
    bcReceipt.setReuseAddress(true);
    bcReceipt.setSoTimeout(5000);
    while (discoveryRunning) {
      byte[] recvBuf=new byte[1500];
      DatagramPacket receivePacket=new DatagramPacket(recvBuf,recvBuf.length);
      bcReceipt.receive(receivePacket);
      String message=new String(receivePacket.getData(),receivePacket.getOffset(),receivePacket.getLength());
      logger.trace(""String_Node_Str"",receivePacket.getAddress(),message.length(),message);
      if (message.startsWith(""String_Node_Str"") && !message.equals(MAXCUBE_DISCOVER_STRING)) {
        String maxCubeIP=receivePacket.getAddress().getHostAddress();
        String maxCubeState=message.substring(0,8);
        String serialNumber=message.substring(8,18);
        String msgValidid=message.substring(18,19);
        String requestType=message.substring(19,20);
        String rfAddress=""String_Node_Str"";
        logger.debug(""String_Node_Str"");
        logger.debug(""String_Node_Str"",maxCubeIP);
        logger.debug(""String_Node_Str"",maxCubeState);
        logger.debug(""String_Node_Str"",serialNumber);
        logger.trace(""String_Node_Str"",msgValidid);
        logger.trace(""String_Node_Str"",requestType);
        if (requestType.equals(""String_Node_Str"")) {
          rfAddress=Utils.getHex(message.substring(21,24).getBytes()).replace(""String_Node_Str"",""String_Node_Str"").toLowerCase();
          String firmwareVersion=Utils.getHex(message.substring(24,26).getBytes()).replace(""String_Node_Str"",""String_Node_Str"");
          logger.debug(""String_Node_Str"",rfAddress);
          logger.debug(""String_Node_Str"",firmwareVersion);
        }
        discoveryResultSubmission(maxCubeIP,serialNumber,rfAddress);
      }
    }
  }
 catch (  SocketTimeoutException e) {
    logger.trace(""String_Node_Str"");
    discoveryRunning=false;
  }
catch (  IOException e) {
    logger.debug(""String_Node_Str"",e.getMessage());
    discoveryRunning=false;
  }
 finally {
    try {
      if (bcReceipt != null)       bcReceipt.close();
    }
 catch (    Exception e) {
      logger.debug(e.toString());
    }
  }
}","private void receiveDiscoveryMessage(){
  DatagramSocket bcReceipt=null;
  try {
    discoveryRunning=true;
    bcReceipt=new DatagramSocket(23272);
    bcReceipt.setReuseAddress(true);
    bcReceipt.setSoTimeout(5000);
    while (discoveryRunning) {
      byte[] recvBuf=new byte[1500];
      DatagramPacket receivePacket=new DatagramPacket(recvBuf,recvBuf.length);
      bcReceipt.receive(receivePacket);
      byte[] messageBuf=Arrays.copyOfRange(receivePacket.getData(),receivePacket.getOffset(),receivePacket.getOffset() + receivePacket.getLength());
      String message=new String(messageBuf);
      logger.trace(""String_Node_Str"",receivePacket.getAddress(),message.length(),message);
      if (message.startsWith(""String_Node_Str"") && !message.equals(MAXCUBE_DISCOVER_STRING)) {
        String maxCubeIP=receivePacket.getAddress().getHostAddress();
        String maxCubeState=message.substring(0,8);
        String serialNumber=message.substring(8,18);
        String msgValidid=message.substring(18,19);
        String requestType=message.substring(19,20);
        String rfAddress=""String_Node_Str"";
        logger.debug(""String_Node_Str"");
        logger.debug(""String_Node_Str"",maxCubeIP);
        logger.trace(""String_Node_Str"",maxCubeState);
        logger.debug(""String_Node_Str"",serialNumber);
        logger.trace(""String_Node_Str"",msgValidid);
        logger.trace(""String_Node_Str"",requestType);
        if (requestType.equals(""String_Node_Str"")) {
          rfAddress=Utils.getHex(Arrays.copyOfRange(messageBuf,21,24)).replace(""String_Node_Str"",""String_Node_Str"").toLowerCase();
          String firmwareVersion=Utils.getHex(Arrays.copyOfRange(messageBuf,24,26)).replace(""String_Node_Str"",""String_Node_Str"");
          logger.debug(""String_Node_Str"",rfAddress);
          logger.debug(""String_Node_Str"",firmwareVersion);
        }
        discoveryResultSubmission(maxCubeIP,serialNumber,rfAddress);
      }
    }
  }
 catch (  SocketTimeoutException e) {
    logger.trace(""String_Node_Str"");
    discoveryRunning=false;
  }
catch (  IOException e) {
    logger.debug(""String_Node_Str"",e.getMessage());
    discoveryRunning=false;
  }
 finally {
    try {
      if (bcReceipt != null) {
        bcReceipt.close();
      }
    }
 catch (    Exception e) {
      logger.debug(e.toString());
    }
  }
}",0.9115316901408452
62628,"/** 
 * Send broadcast message over all active interfaces
 * @param discoverString String to be used for the discovery
 */
private void sendDiscoveryMessage(String discoverString){
  DatagramSocket bcSend=null;
  try {
    bcSend=new DatagramSocket();
    bcSend.setBroadcast(true);
    byte[] sendData=discoverString.getBytes();
    Enumeration<NetworkInterface> interfaces=NetworkInterface.getNetworkInterfaces();
    while (interfaces.hasMoreElements()) {
      NetworkInterface networkInterface=interfaces.nextElement();
      if (networkInterface.isLoopback() || !networkInterface.isUp()) {
        continue;
      }
      for (      InterfaceAddress interfaceAddress : networkInterface.getInterfaceAddresses()) {
        InetAddress[] broadcast=new InetAddress[3];
        broadcast[0]=InetAddress.getByName(""String_Node_Str"");
        broadcast[1]=InetAddress.getByName(""String_Node_Str"");
        broadcast[2]=interfaceAddress.getBroadcast();
        for (        InetAddress bc : broadcast) {
          if (bc != null) {
            try {
              DatagramPacket sendPacket=new DatagramPacket(sendData,sendData.length,bc,23272);
              bcSend.send(sendPacket);
            }
 catch (            IOException e) {
              logger.debug(""String_Node_Str"",e.getMessage());
            }
catch (            Exception e) {
              logger.info(e.getMessage(),e);
            }
            logger.trace(""String_Node_Str"",bc.getHostAddress(),networkInterface.getDisplayName());
          }
        }
      }
    }
    logger.trace(""String_Node_Str"");
  }
 catch (  IOException e) {
    logger.debug(""String_Node_Str"",e.getMessage());
  }
 finally {
    try {
      if (bcSend != null)       bcSend.close();
    }
 catch (    Exception e) {
    }
  }
}","/** 
 * Send broadcast message over all active interfaces
 * @param discoverString String to be used for the discovery
 */
private void sendDiscoveryMessage(String discoverString){
  DatagramSocket bcSend=null;
  try {
    bcSend=new DatagramSocket();
    bcSend.setBroadcast(true);
    byte[] sendData=discoverString.getBytes();
    Enumeration<NetworkInterface> interfaces=NetworkInterface.getNetworkInterfaces();
    while (interfaces.hasMoreElements()) {
      NetworkInterface networkInterface=interfaces.nextElement();
      if (networkInterface.isLoopback() || !networkInterface.isUp()) {
        continue;
      }
      for (      InterfaceAddress interfaceAddress : networkInterface.getInterfaceAddresses()) {
        InetAddress[] broadcast=new InetAddress[3];
        broadcast[0]=InetAddress.getByName(""String_Node_Str"");
        broadcast[1]=InetAddress.getByName(""String_Node_Str"");
        broadcast[2]=interfaceAddress.getBroadcast();
        for (        InetAddress bc : broadcast) {
          if (bc != null) {
            try {
              DatagramPacket sendPacket=new DatagramPacket(sendData,sendData.length,bc,23272);
              bcSend.send(sendPacket);
            }
 catch (            IOException e) {
              logger.debug(""String_Node_Str"",e.getMessage());
            }
catch (            Exception e) {
              logger.info(e.getMessage(),e);
            }
            logger.trace(""String_Node_Str"",bc.getHostAddress(),networkInterface.getDisplayName());
          }
        }
      }
    }
    logger.trace(""String_Node_Str"");
  }
 catch (  IOException e) {
    logger.debug(""String_Node_Str"",e.getMessage());
  }
 finally {
    try {
      if (bcSend != null) {
        bcSend.close();
      }
    }
 catch (    Exception e) {
    }
  }
}",0.9848314606741572
62629,"/** 
 * Read line from the Cube and process the message.
 * @param terminator String with ending messagetype e.g. L:
 * @throws IOException
 */
private void readliness(String terminator) throws IOException {
  boolean cont=true;
  while (cont) {
    String raw=reader.readLine();
    if (raw != null) {
      logger.trace(""String_Node_Str"",raw);
      try {
        this.messageProcessor.addReceivedLine(raw);
        if (this.messageProcessor.isMessageAvailable()) {
          Message message=this.messageProcessor.pull();
          message.debug(logger);
          processMessage(message);
        }
      }
 catch (      Exception e) {
        logger.info(""String_Node_Str"",e.getMessage(),e);
        this.messageProcessor.reset();
      }
      if (terminator == null || raw.startsWith(terminator)) {
        cont=false;
      }
    }
 else {
      cont=false;
    }
  }
}","/** 
 * Read line from the Cube and process the message.
 * @param terminator String with ending messagetype e.g. L:
 * @throws IOException
 */
private void readliness(String terminator) throws IOException {
  boolean cont=true;
  while (cont) {
    String raw=reader.readLine();
    if (raw != null) {
      logger.trace(""String_Node_Str"",raw);
      try {
        this.messageProcessor.addReceivedLine(raw);
        if (this.messageProcessor.isMessageAvailable()) {
          Message message=this.messageProcessor.pull();
          processMessage(message);
        }
      }
 catch (      UnprocessableMessageException e) {
        if (raw.contentEquals(""String_Node_Str"")) {
          logger.info(""String_Node_Str"",ipAddress);
          this.messageProcessor.reset();
        }
 else {
          logger.info(""String_Node_Str"",raw,ipAddress);
          this.messageProcessor.reset();
        }
      }
catch (      Exception e) {
        logger.info(""String_Node_Str"",raw,ipAddress,e.getMessage(),e);
        this.messageProcessor.reset();
      }
      if (terminator == null || raw.startsWith(terminator)) {
        cont=false;
      }
    }
 else {
      cont=false;
    }
  }
}",0.7615347255949491
62630,"/** 
 * Takes a command from the command queue and send it to  {@link executeCommand} for execution.
 */
private synchronized void sendCommands(){
  SendCommand sendCommand=commandQueue.poll();
  if (sendCommand != null) {
    CubeCommand cmd=getCommand(sendCommand);
    if (sendCubeCommand(cmd)) {
      logger.debug(""String_Node_Str"",sendCommand.getId(),sendCommand.getKey(),sendCommand.getCommand().toString(),ipAddress);
    }
 else {
      logger.warn(""String_Node_Str"",sendCommand.getId(),sendCommand.getKey(),sendCommand.getCommand().toString(),ipAddress);
    }
  }
}","/** 
 * Takes a command from the command queue and send it to  {@link executeCommand} for execution.
 */
private synchronized void sendCommands(){
  SendCommand sendCommand=commandQueue.poll();
  if (sendCommand != null) {
    CubeCommand cmd=getCommand(sendCommand);
    if (cmd != null) {
      if (sendCubeCommand(cmd)) {
        logger.debug(""String_Node_Str"",sendCommand.getId(),sendCommand.getKey(),sendCommand.getCommand().toString(),ipAddress);
      }
 else {
        logger.warn(""String_Node_Str"",sendCommand.getId(),sendCommand.getKey(),sendCommand.getCommand().toString(),ipAddress);
      }
    }
  }
}",0.9672544080604534
62631,"@Override public void initialize(){
  logger.debug(""String_Node_Str"");
  MaxCubeBridgeConfiguration configuration=getConfigAs(MaxCubeBridgeConfiguration.class);
  port=configuration.port;
  ipAddress=configuration.ipAddress;
  refreshInterval=configuration.refreshInterval;
  exclusive=configuration.exclusive;
  maxRequestsPerConnection=configuration.maxRequestsPerConnection;
  logger.debug(""String_Node_Str"",ipAddress);
  logger.debug(""String_Node_Str"",port);
  logger.debug(""String_Node_Str"",refreshInterval);
  logger.debug(""String_Node_Str"",exclusive);
  logger.debug(""String_Node_Str"",maxRequestsPerConnection);
  initializeMaxDevices();
  startAutomaticRefresh();
}","@Override public void initialize(){
  logger.debug(""String_Node_Str"");
  MaxCubeBridgeConfiguration configuration=getConfigAs(MaxCubeBridgeConfiguration.class);
  port=configuration.port;
  ipAddress=configuration.ipAddress;
  refreshInterval=configuration.refreshInterval;
  exclusive=configuration.exclusive;
  maxRequestsPerConnection=configuration.maxRequestsPerConnection;
  logger.debug(""String_Node_Str"",ipAddress);
  logger.debug(""String_Node_Str"",port);
  logger.debug(""String_Node_Str"",refreshInterval);
  logger.debug(""String_Node_Str"",exclusive);
  logger.debug(""String_Node_Str"",maxRequestsPerConnection);
  updateStatus(ThingStatus.OFFLINE);
  initializeMaxDevices();
  startAutomaticRefresh();
}",0.9732465654374548
62632,"/** 
 * Connects to the Max! Cube Lan gateway and send a command to Cube and process the message
 * @param {@link CubeCommand}
 * @return boolean success
 */
private boolean sendCubeCommand(CubeCommand command){
synchronized (MaxCubeBridgeHandler.class) {
    boolean sendSuccess=false;
    try {
      if (socket == null) {
        this.socketConnect();
      }
 else {
        if (maxRequestsPerConnection > 0 && requestCount >= maxRequestsPerConnection) {
          logger.debug(""String_Node_Str"");
          socket.close();
          this.socketConnect();
        }
 else {
          if (requestCount == 0) {
            logger.debug(""String_Node_Str"");
            readliness(""String_Node_Str"");
          }
          if (!(requestCount == 0 && command instanceof L_Command)) {
            logger.debug(""String_Node_Str"",this.requestCount);
            if (writer == null) {
              logger.warn(""String_Node_Str"");
              this.socketConnect();
            }
            writer.write(command.getCommandString());
            writer.flush();
            readliness(command.getReturnStrings());
          }
        }
      }
      requestCount++;
      sendSuccess=true;
      if (!exclusive) {
        socketClose();
      }
    }
 catch (    ConnectException e) {
      logger.debug(""String_Node_Str"",ipAddress,port);
      sendSuccess=false;
      socketClose();
    }
catch (    UnknownHostException e) {
      logger.debug(""String_Node_Str"",e.getMessage());
      sendSuccess=false;
      socketClose();
    }
catch (    IOException e) {
      logger.debug(""String_Node_Str"",e.getMessage());
      sendSuccess=false;
      socketClose();
    }
catch (    Exception e) {
      logger.debug(""String_Node_Str"",e.getMessage(),e);
      sendSuccess=false;
      socketClose();
    }
    return sendSuccess;
  }
}","/** 
 * Connects to the Max! Cube Lan gateway and send a command to Cube and process the message
 * @param {@link CubeCommand}
 * @return boolean success
 */
private boolean sendCubeCommand(CubeCommand command){
synchronized (MaxCubeBridgeHandler.class) {
    boolean sendSuccess=false;
    try {
      if (socket == null) {
        this.socketConnect();
      }
 else {
        if (maxRequestsPerConnection > 0 && requestCount >= maxRequestsPerConnection) {
          logger.debug(""String_Node_Str"");
          socket.close();
          this.socketConnect();
        }
 else {
          if (requestCount == 0) {
            logger.debug(""String_Node_Str"");
            readliness(""String_Node_Str"");
          }
          if (!(requestCount == 0 && command instanceof L_Command)) {
            logger.debug(""String_Node_Str"",this.requestCount);
            if (writer == null) {
              logger.warn(""String_Node_Str"");
              this.socketConnect();
            }
            writer.write(command.getCommandString());
            logger.trace(""String_Node_Str"",ipAddress,command.getCommandString());
            writer.flush();
            readliness(command.getReturnStrings());
          }
        }
      }
      requestCount++;
      sendSuccess=true;
      if (!exclusive) {
        socketClose();
      }
    }
 catch (    ConnectException e) {
      logger.debug(""String_Node_Str"",ipAddress,port);
      sendSuccess=false;
      socketClose();
    }
catch (    UnknownHostException e) {
      logger.debug(""String_Node_Str"",e.getMessage());
      sendSuccess=false;
      socketClose();
    }
catch (    IOException e) {
      logger.debug(""String_Node_Str"",e.getMessage());
      sendSuccess=false;
      socketClose();
    }
catch (    Exception e) {
      logger.debug(""String_Node_Str"",e.getMessage(),e);
      sendSuccess=false;
      socketClose();
    }
    return sendSuccess;
  }
}",0.978051391862955
62633,"@Override public void debug(Logger logger){
  logger.trace(""String_Node_Str"");
  logger.trace(""String_Node_Str"",this.getPayload());
  logger.trace(""String_Node_Str"",cal.getTime());
  for (  String key : properties.keySet()) {
    logger.trace(""String_Node_Str"",key,Strings.repeat(""String_Node_Str"",25 - key.length()),properties.get(key));
  }
}","@Override public void debug(Logger logger){
  logger.debug(""String_Node_Str"");
  logger.trace(""String_Node_Str"",this.getPayload());
  logger.trace(""String_Node_Str"",cal.getTime());
  for (  String key : properties.keySet()) {
    logger.debug(""String_Node_Str"",key,Strings.repeat(""String_Node_Str"",25 - key.length()),properties.get(key));
  }
}",0.6947674418604651
62634,"private void startPolling(){
  startPolling(pollingPeriod);
}","private void startPolling(){
  startPolling(pollingPeriod * 1000);
}",0.9457364341085271
62635,"@Override public void run(){
  pollNode();
}","@Override public void run(){
  logger.debug(""String_Node_Str"",nodeId);
  ZWaveNode node=controllerHandler.getNode(nodeId);
  if (node == null || node.isInitializationComplete() == false) {
    logger.debug(""String_Node_Str"",nodeId);
    return;
  }
  List<SerialMessage> messages=new ArrayList<SerialMessage>();
  for (  ZWaveThingChannel channel : thingChannelsPoll) {
    logger.debug(""String_Node_Str"",nodeId,channel.getUID());
    if (channel.converter == null) {
      logger.debug(""String_Node_Str"",nodeId,channel.getUID());
    }
 else {
      messages.addAll(channel.converter.executeRefresh(channel,node));
    }
  }
  for (  SerialMessage message : messages) {
    controllerHandler.sendData(message);
  }
}",0.0972404730617608
62636,"@Override public void initialize(){
  logger.debug(""String_Node_Str"");
  String nodeParm=this.getThing().getProperties().get(ZWaveBindingConstants.PROPERTY_NODEID);
  if (nodeParm == null) {
    nodeParm=this.getThing().getProperties().get(""String_Node_Str"");
    this.getThing().setProperty(ZWaveBindingConstants.PROPERTY_NODEID,nodeParm);
  }
  if (nodeParm == null) {
    logger.error(""String_Node_Str"",this.getThing().getUID());
    return;
  }
  try {
    nodeId=Integer.parseInt(nodeParm);
  }
 catch (  final NumberFormatException ex) {
    logger.error(""String_Node_Str"",nodeParm,this.getThing().getUID());
    return;
  }
  pollingPeriod=POLLING_PERIOD_DEFAULT;
  final Object pollParm=getConfig().get(ZWaveBindingConstants.CONFIGURATION_POLLPERIOD);
  if (pollParm instanceof BigDecimal) {
    try {
      pollingPeriod=((BigDecimal)pollParm).intValue();
    }
 catch (    final NumberFormatException ex) {
      logger.warn(""String_Node_Str"",nodeId,pollParm);
    }
  }
  thingChannelsCmd=new ArrayList<ZWaveThingChannel>();
  thingChannelsPoll=new ArrayList<ZWaveThingChannel>();
  thingChannelsState=new ArrayList<ZWaveThingChannel>();
  for (  Channel channel : getThing().getChannels()) {
    Map<String,String> properties=channel.getProperties();
    Configuration configuration=channel.getConfiguration();
    logger.debug(""String_Node_Str"",nodeId,channel.getUID());
    for (    String key : properties.keySet()) {
      String[] bindingType=key.split(""String_Node_Str"");
      if (bindingType.length != 3) {
        continue;
      }
      if (!ZWaveBindingConstants.CHANNEL_CFG_BINDING.equals(bindingType[0])) {
        continue;
      }
      String[] bindingProperties=properties.get(key).split(""String_Node_Str"");
      String[] cmdClasses=bindingProperties[0].split(""String_Node_Str"");
      Map<String,String> argumentMap=new HashMap<String,String>();
      if (bindingProperties.length == 2) {
        String[] arguments=bindingProperties[1].split(""String_Node_Str"");
        for (        String arg : arguments) {
          String[] prop=arg.split(""String_Node_Str"");
          argumentMap.put(prop[0],prop[1]);
        }
      }
      for (      String configName : configuration.getProperties().keySet()) {
        argumentMap.put(configName,configuration.get(configName).toString());
      }
      boolean first=true;
      for (      String cc : cmdClasses) {
        String[] ccSplit=cc.split(""String_Node_Str"");
        int endpoint=0;
        if (ccSplit.length == 2) {
          endpoint=Integer.parseInt(ccSplit[1]);
        }
        DataType dataType=DataType.DecimalType;
        try {
          dataType=DataType.valueOf(bindingType[2]);
        }
 catch (        IllegalArgumentException e) {
          logger.warn(""String_Node_Str"",nodeId,dataType);
        }
        ZWaveThingChannel chan=new ZWaveThingChannel(channel.getUID(),dataType,ccSplit[0],endpoint,argumentMap);
        if (first && (""String_Node_Str"".equals(bindingType[1]) || ""String_Node_Str"".equals(bindingType[1]))) {
          thingChannelsCmd.add(chan);
        }
        if (""String_Node_Str"".equals(bindingType[1]) || ""String_Node_Str"".equals(bindingType[1])) {
          thingChannelsState.add(chan);
          if (first == true) {
            thingChannelsState.add(chan);
          }
        }
        first=false;
      }
    }
  }
  Bridge bridge=getBridge();
  if (bridge != null) {
    ThingHandler handler=bridge.getHandler();
    if (handler instanceof ZWaveControllerHandler) {
      bridgeHandlerInitialized(handler,bridge);
    }
  }
  startPolling();
}","@Override public void initialize(){
  logger.debug(""String_Node_Str"");
  String nodeParm=this.getThing().getProperties().get(ZWaveBindingConstants.PROPERTY_NODEID);
  if (nodeParm == null) {
    nodeParm=this.getThing().getProperties().get(""String_Node_Str"");
    this.getThing().setProperty(ZWaveBindingConstants.PROPERTY_NODEID,nodeParm);
  }
  if (nodeParm == null) {
    logger.error(""String_Node_Str"",this.getThing().getUID());
    return;
  }
  try {
    nodeId=Integer.parseInt(nodeParm);
  }
 catch (  final NumberFormatException ex) {
    logger.error(""String_Node_Str"",nodeParm,this.getThing().getUID());
    return;
  }
  pollingPeriod=POLLING_PERIOD_DEFAULT;
  final Object pollParm=getConfig().get(ZWaveBindingConstants.CONFIGURATION_POLLPERIOD);
  if (pollParm instanceof BigDecimal) {
    try {
      pollingPeriod=((BigDecimal)pollParm).intValue();
    }
 catch (    final NumberFormatException ex) {
      logger.warn(""String_Node_Str"",nodeId,pollParm);
    }
  }
  thingChannelsCmd=new ArrayList<ZWaveThingChannel>();
  thingChannelsPoll=new ArrayList<ZWaveThingChannel>();
  thingChannelsState=new ArrayList<ZWaveThingChannel>();
  for (  Channel channel : getThing().getChannels()) {
    Map<String,String> properties=channel.getProperties();
    Configuration configuration=channel.getConfiguration();
    logger.debug(""String_Node_Str"",nodeId,channel.getUID());
    for (    String key : properties.keySet()) {
      String[] bindingType=key.split(""String_Node_Str"");
      if (bindingType.length != 3) {
        continue;
      }
      if (!ZWaveBindingConstants.CHANNEL_CFG_BINDING.equals(bindingType[0])) {
        continue;
      }
      String[] bindingProperties=properties.get(key).split(""String_Node_Str"");
      String[] cmdClasses=bindingProperties[0].split(""String_Node_Str"");
      Map<String,String> argumentMap=new HashMap<String,String>();
      if (bindingProperties.length == 2) {
        String[] arguments=bindingProperties[1].split(""String_Node_Str"");
        for (        String arg : arguments) {
          String[] prop=arg.split(""String_Node_Str"");
          argumentMap.put(prop[0],prop[1]);
        }
      }
      for (      String configName : configuration.getProperties().keySet()) {
        argumentMap.put(configName,configuration.get(configName).toString());
      }
      boolean first=true;
      for (      String cc : cmdClasses) {
        String[] ccSplit=cc.split(""String_Node_Str"");
        int endpoint=0;
        if (ccSplit.length == 2) {
          endpoint=Integer.parseInt(ccSplit[1]);
        }
        DataType dataType=DataType.DecimalType;
        try {
          dataType=DataType.valueOf(bindingType[2]);
        }
 catch (        IllegalArgumentException e) {
          logger.warn(""String_Node_Str"",nodeId,dataType);
        }
        ZWaveThingChannel chan=new ZWaveThingChannel(channel.getUID(),dataType,ccSplit[0],endpoint,argumentMap);
        if (first && (""String_Node_Str"".equals(bindingType[1]) || ""String_Node_Str"".equals(bindingType[1]))) {
          thingChannelsCmd.add(chan);
        }
        if (first) {
          thingChannelsPoll.add(chan);
        }
        if (""String_Node_Str"".equals(bindingType[1]) || ""String_Node_Str"".equals(bindingType[1])) {
          thingChannelsState.add(chan);
          if (first == true) {
            thingChannelsState.add(chan);
          }
        }
        first=false;
      }
    }
  }
  Bridge bridge=getBridge();
  if (bridge != null) {
    ThingHandler handler=bridge.getHandler();
    if (handler instanceof ZWaveControllerHandler) {
      bridgeHandlerInitialized(handler,bridge);
    }
  }
  startPolling();
}",0.9903100775193798
62637,"/** 
 * The polling future executes this every iteration
 */
protected void execute(){
  logger.trace(""String_Node_Str"",baseURL);
  clearState();
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  String[] statuses={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String status : statuses) {
    String response=getUrl(baseURL + ""String_Node_Str"" + status+ ""String_Node_Str"",TIMEOUT);
    logger.trace(baseURL + ""String_Node_Str"" + status+ ""String_Node_Str"",response);
    if (response == null) {
      updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR);
      return;
    }
    Matcher m=responsePattern.matcher(response);
    if (m.find()) {
      sb.append(m.group(1));
    }
  }
  sb.append(""String_Node_Str"");
  if (!getThing().getStatus().equals(ThingStatus.ONLINE)) {
    updateStatus(ThingStatus.ONLINE);
  }
  String xmlDoc=sb.toString();
  for (  Channel channel : getThing().getChannels()) {
    String key=channel.getUID().getId().replace('-','/');
    XPathFactory xpathFactory=XPathFactory.newInstance();
    XPath xpath=xpathFactory.newXPath();
    try {
      InputSource is=new InputSource(new StringReader(xmlDoc));
      String value=xpath.evaluate(""String_Node_Str"" + key,is);
      if (StringUtils.isEmpty((value))) {
        continue;
      }
      State state=toState(channel.getAcceptedItemType(),value);
      State oldState=stateMap.put(channel.getUID().getAsString(),state);
      if (!state.equals(oldState)) {
        logger.trace(""String_Node_Str"",channel,state);
        updateState(channel.getUID(),state);
      }
    }
 catch (    XPathExpressionException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
}","/** 
 * The polling future executes this every iteration
 */
protected void execute(){
  logger.trace(""String_Node_Str"",baseURL);
  clearState(false);
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  String[] statuses={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String status : statuses) {
    String response=getUrl(baseURL + ""String_Node_Str"" + status+ ""String_Node_Str"",TIMEOUT);
    logger.trace(baseURL + ""String_Node_Str"" + status+ ""String_Node_Str"",response);
    if (response == null) {
      updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR);
      return;
    }
    Matcher m=responsePattern.matcher(response);
    if (m.find()) {
      sb.append(m.group(1));
    }
  }
  sb.append(""String_Node_Str"");
  if (!getThing().getStatus().equals(ThingStatus.ONLINE)) {
    updateStatus(ThingStatus.ONLINE);
  }
  String xmlDoc=sb.toString();
  for (  Channel channel : getThing().getChannels()) {
    String key=channel.getUID().getId().replace('-','/');
    XPathFactory xpathFactory=XPathFactory.newInstance();
    XPath xpath=xpathFactory.newXPath();
    try {
      InputSource is=new InputSource(new StringReader(xmlDoc));
      String value=xpath.evaluate(""String_Node_Str"" + key,is);
      if (StringUtils.isEmpty((value))) {
        continue;
      }
      State state=toState(channel.getAcceptedItemType(),value);
      State oldState=stateMap.put(channel.getUID().getAsString(),state);
      if (!state.equals(oldState)) {
        logger.trace(""String_Node_Str"",channel,state);
        updateState(channel.getUID(),state);
      }
    }
 catch (    XPathExpressionException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
}",0.9985324332257116
62638,"/** 
 * Clears our state if it is time
 */
private void clearState(){
  if (System.currentTimeMillis() >= clearTime) {
    stateMap.clear();
    scheduleClearTime(NORMAL_CLEARTIME);
  }
}","/** 
 * Clears our state if it is time
 */
private void clearState(boolean force){
  if (force || System.currentTimeMillis() >= clearTime) {
    stateMap.clear();
    scheduleClearTime(NORMAL_CLEARTIME);
  }
}",0.9444444444444444
62639,"@Override public void dispose(){
  logger.debug(""String_Node_Str"");
  if (pollingJob != null && !pollingJob.isCancelled()) {
    pollingJob.cancel(true);
    pollingJob=null;
  }
}","@Override public void dispose(){
  logger.debug(""String_Node_Str"");
  if (pollingJob != null && !pollingJob.isCancelled()) {
    pollingJob.cancel(true);
    pollingJob=null;
  }
  this.discoveryServiceRegistry.removeDiscoveryListener(this);
  removeSubscription();
}",0.8053691275167785
62640,"protected SwaggerResources createResourceListingFor(String baseURL,String rootPath,Object[] instances){
  List<SwaggerResource> rs=new ArrayList<SwaggerResource>();
  for (  Object instance : instances) {
    Class<?> clazz=instance.getClass();
    String path=getPath(clazz.getAnnotation(Path.class));
    String doc=getDescription(clazz.getAnnotation(Description.class));
    rs.add(new SwaggerResource(rootPath.concat(path),doc));
  }
  return new SwaggerResources(baseURL,rs);
}","protected SwaggerResources createResourceListingFor(String baseURL,String rootPath,Map<String,Class<?>> services){
  List<SwaggerResource> rs=new ArrayList<SwaggerResource>();
  for (  Entry<String,Class<?>> entry : services.entrySet()) {
    Class<?> serviceType=entry.getValue();
    String path=getPath(entry.getKey());
    String doc=getDescription(serviceType.getAnnotation(Description.class));
    rs.add(new SwaggerResource(rootPath.concat(path),doc));
  }
  return new SwaggerResources(baseURL,rs);
}",0.6121212121212121
62641,"protected SwaggerAPI createDocumentationFor(String baseURL,Object instance){
  Class<?> clazz=instance.getClass();
  String rootPath=getPath(clazz.getAnnotation(Path.class));
  Method[] methods=clazz.getMethods();
  Arrays.sort(methods,COMPARATOR);
  SwaggerModel models=new SwaggerModel();
  List<SwaggerAPIPath> apis=new ArrayList<SwaggerAPIPath>();
  for (  Method method : methods) {
    if (method.isAnnotationPresent(NoDocumentation.class)) {
      continue;
    }
    List<SwaggerOperation> ops=documentOperations(models,method);
    if (ops.isEmpty()) {
      continue;
    }
    String path=getPath(method.getAnnotation(Path.class));
    String doc=getDescription(method.getAnnotation(Description.class));
    apis.add(new SwaggerAPIPath(rootPath.concat(path),doc,ops));
  }
  return new SwaggerAPI(baseURL.concat(m_restEndpoint),rootPath,apis,models);
}","protected SwaggerAPI createDocumentationFor(String baseURL,Class<?> clazz){
  String rootPath=getPath(clazz.getAnnotation(Path.class));
  Method[] methods=clazz.getMethods();
  Arrays.sort(methods,COMPARATOR);
  SwaggerModel models=new SwaggerModel();
  List<SwaggerAPIPath> apis=new ArrayList<SwaggerAPIPath>();
  for (  Method method : methods) {
    if (method.isAnnotationPresent(NoDocumentation.class)) {
      continue;
    }
    List<SwaggerOperation> ops=documentOperations(models,method);
    if (ops.isEmpty()) {
      continue;
    }
    String path=getPath(method.getAnnotation(Path.class));
    String doc=getDescription(method.getAnnotation(Description.class));
    apis.add(new SwaggerAPIPath(rootPath.concat(path),doc,ops));
  }
  return new SwaggerAPI(baseURL.concat(m_restEndpoint),rootPath,apis,models);
}",0.974510966212211
62642,"@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  String baseURL=getBaseURL(req);
  String requestPath=req.getPathInfo();
  Object[] services=m_restServices.toArray();
  if (requestPath == null || ""String_Node_Str"".equals(requestPath) || ""String_Node_Str"".equals(requestPath)) {
    SwaggerResources resources=createResourceListingFor(baseURL,req.getServletPath(),services);
    writeAsJSON(resp,resources);
  }
 else {
    boolean responseWritten=false;
    for (    Object s : services) {
      Class<?> clazz=s.getClass();
      String rootPathValue=getPath(clazz.getAnnotation(Path.class));
      if (requestPath.startsWith(rootPathValue)) {
        SwaggerAPI apiDocs=createDocumentationFor(baseURL,s);
        writeAsJSON(resp,apiDocs);
        responseWritten=true;
      }
    }
    if (!responseWritten) {
      writeAsJSON(resp,""String_Node_Str"");
    }
  }
}","@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  String baseURL=getBaseURL(req);
  String requestPath=getPath(req.getPathInfo());
  SortedMap<String,Class<?>> services=getServices();
  if (""String_Node_Str"".equals(requestPath) || ""String_Node_Str"".equals(requestPath)) {
    SwaggerResources resources=createResourceListingFor(baseURL,req.getServletPath(),services);
    writeAsJSON(resp,resources);
  }
 else {
    Class<?> serviceType=services.get(requestPath);
    if (serviceType != null) {
      SwaggerAPI apiDocs=createDocumentationFor(baseURL,serviceType);
      writeAsJSON(resp,apiDocs);
    }
 else {
      writeAsJSON(resp,""String_Node_Str"");
    }
  }
}",0.735399284862932
62643,"public static String getPath(Path ann){
  if (ann == null) {
    return ""String_Node_Str"";
  }
  String value=ann.value();
  if (!value.startsWith(""String_Node_Str"") && value.length() > 1) {
    return ""String_Node_Str"".concat(value);
  }
  return value;
}","public static String getPath(String path){
  if (path == null) {
    return ""String_Node_Str"";
  }
  String value=path.trim();
  if (!value.startsWith(""String_Node_Str"") && value.length() > 1) {
    return ""String_Node_Str"".concat(value);
  }
  return value;
}",0.9147286821705426
62644,"public M_Message(String raw){
  super(raw);
  hasConfiguration=false;
  String[] tokens=this.getPayload().split(Message.DELIMETER);
  if (tokens.length > 1)   try {
    byte[] bytes=Base64.decodeBase64(tokens[2].getBytes());
    hasConfiguration=true;
    logger.trace(""String_Node_Str"");
    logger.trace(""String_Node_Str"",(int)bytes[0]);
    logger.trace(""String_Node_Str"",(int)bytes[1]);
    logger.trace(""String_Node_Str"",(int)bytes[2]);
    rooms=new ArrayList<RoomInformation>();
    devices=new ArrayList<DeviceInformation>();
    int roomCount=bytes[2];
    int byteOffset=3;
    for (int i=0; i < roomCount; i++) {
      int position=bytes[byteOffset++];
      String name=""String_Node_Str"";
      int nameLength=(int)bytes[byteOffset++] & 0xff;
      for (int char_idx=0; char_idx < nameLength; char_idx++) {
        name+=(char)bytes[byteOffset++];
      }
      String rfAddress=Utils.toHex(((int)bytes[byteOffset] & 0xff),((int)bytes[byteOffset + 1] & 0xff),((int)bytes[byteOffset + 2] & 0xff));
      byteOffset+=3;
      rooms.add(new RoomInformation(position,name,rfAddress));
    }
    int deviceCount=bytes[byteOffset++];
    for (int deviceId=0; deviceId < deviceCount; deviceId++) {
      DeviceType deviceType=DeviceType.create(bytes[byteOffset++]);
      String rfAddress=Utils.toHex(((int)bytes[byteOffset] & 0xff),((int)bytes[byteOffset + 1] & 0xff),((int)bytes[byteOffset + 2] & 0xff));
      byteOffset+=3;
      String serialNumber=""String_Node_Str"";
      for (int i=0; i < 10; i++) {
        serialNumber+=(char)bytes[byteOffset++];
      }
      int nameLength=(int)bytes[byteOffset++] & 0xff;
      String deviceName=""String_Node_Str"";
      for (int char_idx=0; char_idx < nameLength; char_idx++) {
        deviceName+=(char)bytes[byteOffset++];
      }
      int roomId=(int)bytes[byteOffset++] & 0xff;
      devices.add(new DeviceInformation(deviceType,serialNumber,rfAddress,deviceName,roomId));
    }
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"");
    logger.info(e.getMessage());
    logger.debug(Utils.getStackTrace(e));
    logger.debug(""String_Node_Str"",this.getPayload());
  }
 else {
    logger.info(""String_Node_Str"");
    hasConfiguration=false;
  }
}","public M_Message(String raw){
  super(raw);
  hasConfiguration=false;
  String[] tokens=this.getPayload().split(Message.DELIMETER);
  if (tokens.length > 1)   try {
    byte[] bytes=Base64.decodeBase64(tokens[2].getBytes());
    hasConfiguration=true;
    logger.trace(""String_Node_Str"");
    logger.trace(""String_Node_Str"",(int)bytes[0]);
    logger.trace(""String_Node_Str"",(int)bytes[1]);
    logger.trace(""String_Node_Str"",(int)bytes[2]);
    rooms=new ArrayList<RoomInformation>();
    devices=new ArrayList<DeviceInformation>();
    int roomCount=bytes[2];
    int byteOffset=3;
    for (int i=0; i < roomCount; i++) {
      int position=bytes[byteOffset++];
      int nameLength=(int)bytes[byteOffset++] & 0xff;
      byte[] data=new byte[nameLength];
      System.arraycopy(bytes,byteOffset,data,0,nameLength);
      byteOffset+=nameLength;
      String name=new String(data,""String_Node_Str"");
      String rfAddress=Utils.toHex(((int)bytes[byteOffset] & 0xff),((int)bytes[byteOffset + 1] & 0xff),((int)bytes[byteOffset + 2] & 0xff));
      byteOffset+=3;
      rooms.add(new RoomInformation(position,name,rfAddress));
    }
    int deviceCount=bytes[byteOffset++];
    for (int deviceId=0; deviceId < deviceCount; deviceId++) {
      DeviceType deviceType=DeviceType.create(bytes[byteOffset++]);
      String rfAddress=Utils.toHex(((int)bytes[byteOffset] & 0xff),((int)bytes[byteOffset + 1] & 0xff),((int)bytes[byteOffset + 2] & 0xff));
      byteOffset+=3;
      String serialNumber=""String_Node_Str"";
      for (int i=0; i < 10; i++) {
        serialNumber+=(char)bytes[byteOffset++];
      }
      int nameLength=(int)bytes[byteOffset++] & 0xff;
      byte[] data=new byte[nameLength];
      System.arraycopy(bytes,byteOffset,data,0,nameLength);
      byteOffset+=nameLength;
      String deviceName=new String(data,""String_Node_Str"");
      int roomId=(int)bytes[byteOffset++] & 0xff;
      devices.add(new DeviceInformation(deviceType,serialNumber,rfAddress,deviceName,roomId));
    }
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"");
    logger.info(e.getMessage());
    logger.debug(Utils.getStackTrace(e));
    logger.debug(""String_Node_Str"",this.getPayload());
  }
 else {
    logger.info(""String_Node_Str"");
    hasConfiguration=false;
  }
}",0.8524955436720143
62645,"/** 
 * Send a command string to Cube
 * @param commandString
 */
private boolean sendCubeCommand(String commandString){
  boolean sendSuccess=false;
synchronized (MaxCubeBridgeHandler.class) {
    if (commandString != null) {
      try {
        if (socket == null) {
          this.socketConnect();
        }
        writer.write(commandString);
        writer.flush();
        String raw=reader.readLine();
        if (raw != null) {
          Message message=processRawMessage(raw);
          if (message != null)           processMessage(message);
        }
        try {
          this.messageProcessor.addReceivedLine(raw);
          while (!this.messageProcessor.isMessageAvailable()) {
            raw=reader.readLine();
            this.messageProcessor.addReceivedLine(raw);
          }
          Message message=this.messageProcessor.pull();
          message.debug(logger);
          processMessage(message);
        }
 catch (        Exception e) {
          logger.info(""String_Node_Str"");
          logger.debug(Utils.getStackTrace(e));
          this.messageProcessor.reset();
        }
        if (!exclusive) {
          socketClose();
        }
        sendSuccess=true;
      }
 catch (      UnknownHostException e) {
        logger.warn(""String_Node_Str"",ipAddress);
        logger.debug(Utils.getStackTrace(e));
        socketClose();
      }
catch (      IOException e) {
        logger.warn(""String_Node_Str"",ipAddress);
        logger.debug(Utils.getStackTrace(e));
        socketClose();
      }
      logger.trace(""String_Node_Str"",commandString);
    }
 else {
      logger.debug(""String_Node_Str"",ipAddress);
    }
  }
  return sendSuccess;
}","/** 
 * Send a command string to Cube
 * @param commandString
 */
private boolean sendCubeCommand(String commandString){
  boolean sendSuccess=false;
synchronized (MaxCubeBridgeHandler.class) {
    if (commandString != null) {
      try {
        if (socket == null) {
          this.socketConnect();
        }
        writer.write(commandString);
        writer.flush();
        String raw=reader.readLine();
        if (raw != null) {
          try {
            this.messageProcessor.addReceivedLine(raw);
            while (!this.messageProcessor.isMessageAvailable()) {
              raw=reader.readLine();
              this.messageProcessor.addReceivedLine(raw);
            }
            Message message=this.messageProcessor.pull();
            message.debug(logger);
            processMessage(message);
          }
 catch (          Exception e) {
            logger.info(""String_Node_Str"");
            logger.debug(Utils.getStackTrace(e));
            this.messageProcessor.reset();
          }
        }
        if (!exclusive) {
          socketClose();
        }
        sendSuccess=true;
      }
 catch (      UnknownHostException e) {
        logger.warn(""String_Node_Str"",ipAddress);
        logger.debug(Utils.getStackTrace(e));
        socketClose();
      }
catch (      IOException e) {
        logger.warn(""String_Node_Str"",ipAddress);
        logger.debug(Utils.getStackTrace(e));
        socketClose();
      }
      logger.trace(""String_Node_Str"",commandString);
    }
 else {
      logger.debug(""String_Node_Str"",ipAddress);
    }
  }
  return sendSuccess;
}",0.9152854511970534
62646,"@Override public void thingDiscovered(DiscoveryService source,DiscoveryResult result){
  if (getThing().getConfiguration().get(UDN).equals(result.getProperties().get(UDN))) {
    logger.debug(""String_Node_Str"",result.getProperties().get(UDN),getThing().getUID());
    getThing().setStatus(ThingStatus.ONLINE);
    onSubscription();
    onUpdate();
  }
}","@Override public void thingDiscovered(DiscoveryService source,DiscoveryResult result){
  if (result.getThingUID().equals(this.getThing().getUID())) {
    if (getThing().getConfiguration().get(UDN).equals(result.getProperties().get(UDN))) {
      logger.debug(""String_Node_Str"",result.getProperties().get(UDN),getThing().getUID());
      getThing().setStatus(ThingStatus.ONLINE);
      onSubscription();
      onUpdate();
    }
  }
}",0.8993630573248408
62647,"@Override public void thingRemoved(DiscoveryService source,ThingUID thingUID){
  logger.debug(""String_Node_Str"",getThing().getUID());
  getThing().setStatus(ThingStatus.OFFLINE);
}","@Override public void thingRemoved(DiscoveryService source,ThingUID thingUID){
  if (thingUID.equals(this.getThing().getUID())) {
    logger.debug(""String_Node_Str"",getThing().getUID());
    getThing().setStatus(ThingStatus.OFFLINE);
  }
}",0.8591885441527446
62648,"protected void updateCurrentURIFormatted(){
  String currentURI=null;
  SonosMetaData currentTrack=null;
  String coordinator=getCoordinator();
  ZonePlayerHandler coordinatorHandler=getHandlerByName(coordinator);
  if (!isGroupCoordinator() && coordinatorHandler != null) {
    currentURI=coordinatorHandler.getCurrentURI();
    currentTrack=coordinatorHandler.getTrackMetadata();
  }
 else {
    currentURI=getCurrentURI();
    currentTrack=getTrackMetadata();
  }
  if (currentURI != null) {
    String resultString=null;
    String artist=null;
    String album=null;
    String title=null;
    if (opmlPartnerID != null && currentURI.contains(""String_Node_Str"")) {
      String stationID=StringUtils.substringBetween(currentURI,""String_Node_Str"",""String_Node_Str"");
      String previousStationID=stateMap.get(""String_Node_Str"");
      Calendar now=Calendar.getInstance();
      now.setTime(new Date());
      now.add(Calendar.MINUTE,-1);
      if (previousStationID == null || !previousStationID.equals(stationID) || lastOPMLQuery == null || lastOPMLQuery.before(now)) {
        this.onValueReceived(""String_Node_Str"",stationID,""String_Node_Str"");
        String url=""String_Node_Str"" + ""String_Node_Str"" + stationID + ""String_Node_Str""+ opmlPartnerID+ ""String_Node_Str""+ getMACAddress();
        String response=HttpUtil.executeUrl(""String_Node_Str"",url,SOCKET_TIMEOUT);
        if (lastOPMLQuery == null) {
          lastOPMLQuery=Calendar.getInstance();
        }
        lastOPMLQuery.setTime(new Date());
        if (response != null) {
          List<String> fields=SonosXMLParser.getRadioTimeFromXML(response);
          if (fields != null) {
            resultString=new String();
            title=fields.get(0);
            Iterator<String> listIterator=fields.listIterator();
            while (listIterator.hasNext()) {
              String field=listIterator.next();
              resultString=resultString + field;
              if (listIterator.hasNext()) {
                resultString=resultString + ""String_Node_Str"";
              }
            }
          }
        }
      }
 else {
        resultString=stateMap.get(""String_Node_Str"");
        title=stateMap.get(""String_Node_Str"");
      }
    }
 else {
      if (currentTrack != null) {
        if (!currentTrack.getTitle().contains(""String_Node_Str"")) {
          if (currentTrack.getAlbumArtist().equals(""String_Node_Str"")) {
            resultString=currentTrack.getCreator() + ""String_Node_Str"" + currentTrack.getAlbum()+ ""String_Node_Str""+ currentTrack.getTitle();
            artist=currentTrack.getCreator();
          }
 else {
            resultString=currentTrack.getAlbumArtist() + ""String_Node_Str"" + currentTrack.getAlbum()+ ""String_Node_Str""+ currentTrack.getTitle();
            artist=currentTrack.getAlbumArtist();
          }
          album=currentTrack.getAlbum();
          title=currentTrack.getTitle();
        }
      }
 else {
        resultString=""String_Node_Str"";
      }
    }
    this.onValueReceived(""String_Node_Str"",resultString,""String_Node_Str"");
    this.onValueReceived(""String_Node_Str"",(artist != null) ? artist : ""String_Node_Str"",""String_Node_Str"");
    this.onValueReceived(""String_Node_Str"",(title != null) ? title : ""String_Node_Str"",""String_Node_Str"");
    this.onValueReceived(""String_Node_Str"",(album != null) ? album : ""String_Node_Str"",""String_Node_Str"");
  }
}","protected void updateCurrentURIFormatted(){
  String currentURI=null;
  SonosMetaData currentTrack=null;
  String coordinator=getCoordinator();
  ZonePlayerHandler coordinatorHandler=getHandlerByName(coordinator);
  if (!isGroupCoordinator() && coordinatorHandler != null) {
    currentURI=coordinatorHandler.getCurrentURI();
    currentTrack=coordinatorHandler.getTrackMetadata();
  }
 else {
    currentURI=getCurrentURI();
    currentTrack=getTrackMetadata();
  }
  if (currentURI != null) {
    String resultString=null;
    String artist=null;
    String album=null;
    String title=null;
    if (opmlPartnerID != null && currentURI.contains(""String_Node_Str"")) {
      String stationID=StringUtils.substringBetween(currentURI,""String_Node_Str"",""String_Node_Str"");
      String previousStationID=stateMap.get(""String_Node_Str"");
      Calendar now=Calendar.getInstance();
      now.setTime(new Date());
      now.add(Calendar.MINUTE,-1);
      if (previousStationID == null || !previousStationID.equals(stationID) || lastOPMLQuery == null || lastOPMLQuery.before(now)) {
        this.onValueReceived(""String_Node_Str"",stationID,""String_Node_Str"");
        String url=""String_Node_Str"" + ""String_Node_Str"" + stationID + ""String_Node_Str""+ opmlPartnerID+ ""String_Node_Str""+ getMACAddress();
        String response=HttpUtil.executeUrl(""String_Node_Str"",url,SOCKET_TIMEOUT);
        if (lastOPMLQuery == null) {
          lastOPMLQuery=Calendar.getInstance();
        }
        lastOPMLQuery.setTime(new Date());
        if (response != null) {
          List<String> fields=SonosXMLParser.getRadioTimeFromXML(response);
          if (fields != null && fields.size() > 0) {
            resultString=new String();
            title=fields.get(0);
            Iterator<String> listIterator=fields.listIterator();
            while (listIterator.hasNext()) {
              String field=listIterator.next();
              resultString=resultString + field;
              if (listIterator.hasNext()) {
                resultString=resultString + ""String_Node_Str"";
              }
            }
          }
        }
      }
 else {
        resultString=stateMap.get(""String_Node_Str"");
        title=stateMap.get(""String_Node_Str"");
      }
    }
 else {
      if (currentTrack != null) {
        if (!currentTrack.getTitle().contains(""String_Node_Str"")) {
          if (currentTrack.getAlbumArtist().equals(""String_Node_Str"")) {
            resultString=currentTrack.getCreator() + ""String_Node_Str"" + currentTrack.getAlbum()+ ""String_Node_Str""+ currentTrack.getTitle();
            artist=currentTrack.getCreator();
          }
 else {
            resultString=currentTrack.getAlbumArtist() + ""String_Node_Str"" + currentTrack.getAlbum()+ ""String_Node_Str""+ currentTrack.getTitle();
            artist=currentTrack.getAlbumArtist();
          }
          album=currentTrack.getAlbum();
          title=currentTrack.getTitle();
        }
      }
 else {
        resultString=""String_Node_Str"";
      }
    }
    this.onValueReceived(""String_Node_Str"",resultString,""String_Node_Str"");
    this.onValueReceived(""String_Node_Str"",(artist != null) ? artist : ""String_Node_Str"",""String_Node_Str"");
    this.onValueReceived(""String_Node_Str"",(title != null) ? title : ""String_Node_Str"",""String_Node_Str"");
    this.onValueReceived(""String_Node_Str"",(album != null) ? album : ""String_Node_Str"",""String_Node_Str"");
  }
}",0.9969122187913542
62649,"protected void updateTrackMetaData(){
  SonosMetaData currentTrack=getTrackMetadata();
  if (currentTrack != null) {
    String artist=""String_Node_Str"";
    if (currentTrack.getAlbumArtist().equals(""String_Node_Str"")) {
      artist=currentTrack.getCreator();
    }
 else {
      artist=currentTrack.getAlbumArtist();
    }
    String album=currentTrack.getAlbum();
    String title=""String_Node_Str"";
    if (!currentTrack.getTitle().contains(""String_Node_Str"")) {
      title=currentTrack.getTitle();
    }
    this.onValueReceived(""String_Node_Str"",(artist != null) ? artist : ""String_Node_Str"",""String_Node_Str"");
    this.onValueReceived(""String_Node_Str"",(title != null) ? title : ""String_Node_Str"",""String_Node_Str"");
    this.onValueReceived(""String_Node_Str"",(album != null) ? album : ""String_Node_Str"",""String_Node_Str"");
    if (currentTrack.getTitle().contains(""String_Node_Str"")) {
      updateMediaInfo();
    }
  }
}","protected void updateTrackMetaData(){
  SonosMetaData currentTrack=getTrackMetadata();
  if (currentTrack != null) {
    String artist=null;
    if (currentTrack.getAlbumArtist().equals(""String_Node_Str"")) {
      artist=currentTrack.getCreator();
    }
 else {
      artist=currentTrack.getAlbumArtist();
    }
    String album=currentTrack.getAlbum();
    String title=null;
    if (!currentTrack.getTitle().contains(""String_Node_Str"")) {
      title=currentTrack.getTitle();
    }
    this.onValueReceived(""String_Node_Str"",(artist != null) ? artist : ""String_Node_Str"",""String_Node_Str"");
    if (title != null) {
      this.onValueReceived(""String_Node_Str"",(title != null) ? title : ""String_Node_Str"",""String_Node_Str"");
    }
    this.onValueReceived(""String_Node_Str"",(album != null) ? album : ""String_Node_Str"",""String_Node_Str"");
    if (currentTrack.getTitle().contains(""String_Node_Str"")) {
      updateMediaInfo();
    }
  }
}",0.9599144842330304
62650,"protected void updateCurrentURIFormatted(){
  String currentURI=null;
  SonosMetaData currentTrack=null;
  String coordinator=getCoordinator();
  ZonePlayerHandler coordinatorHandler=getHandlerByName(coordinator);
  if (coordinatorHandler != null) {
    if (getCurrentURI().contains(""String_Node_Str"")) {
      coordinatorHandler.updateMediaInfo();
    }
    currentURI=coordinatorHandler.getCurrentURI();
    currentTrack=coordinatorHandler.getTrackMetadata();
  }
 else {
    currentURI=getCurrentURI();
    currentTrack=getTrackMetadata();
  }
  if (currentURI != null) {
    String title=stateMap.get(""String_Node_Str"");
    String resultString=stateMap.get(""String_Node_Str"");
    boolean needsUpdating=false;
    if (opmlPartnerID != null && currentURI.contains(""String_Node_Str"")) {
      String stationID=StringUtils.substringBetween(currentURI,""String_Node_Str"",""String_Node_Str"");
      String previousStationID=stateMap.get(""String_Node_Str"");
      Calendar now=Calendar.getInstance();
      now.setTime(new Date());
      now.add(Calendar.MINUTE,-1);
      if (previousStationID == null || !previousStationID.equals(stationID) || lastOPMLQuery == null || lastOPMLQuery.before(now)) {
        this.onValueReceived(""String_Node_Str"",stationID,""String_Node_Str"");
        String url=""String_Node_Str"" + ""String_Node_Str"" + stationID + ""String_Node_Str""+ opmlPartnerID+ ""String_Node_Str""+ getMACAddress();
        String response=HttpUtil.executeUrl(""String_Node_Str"",url,SOCKET_TIMEOUT);
        if (lastOPMLQuery == null) {
          lastOPMLQuery=Calendar.getInstance();
        }
        lastOPMLQuery.setTime(new Date());
        if (response != null) {
          List<String> fields=SonosXMLParser.getRadioTimeFromXML(response);
          if (fields != null && fields.size() > 0) {
            resultString=new String();
            title=fields.get(0);
            Iterator<String> listIterator=fields.listIterator();
            while (listIterator.hasNext()) {
              String field=listIterator.next();
              resultString=resultString + field;
              if (listIterator.hasNext()) {
                resultString=resultString + ""String_Node_Str"";
              }
            }
            needsUpdating=true;
          }
        }
      }
    }
 else {
      if (currentTrack != null && !currentTrack.getTitle().contains(""String_Node_Str"")) {
        if (currentTrack.getAlbumArtist().equals(""String_Node_Str"")) {
          resultString=currentTrack.getCreator() + ""String_Node_Str"" + currentTrack.getAlbum()+ ""String_Node_Str""+ currentTrack.getTitle();
        }
 else {
          resultString=currentTrack.getAlbumArtist() + ""String_Node_Str"" + currentTrack.getAlbum()+ ""String_Node_Str""+ currentTrack.getTitle();
        }
        needsUpdating=true;
      }
    }
    if (needsUpdating) {
      this.onValueReceived(""String_Node_Str"",(resultString != null) ? resultString : ""String_Node_Str"",""String_Node_Str"");
      this.onValueReceived(""String_Node_Str"",(title != null) ? title : ""String_Node_Str"",""String_Node_Str"");
    }
  }
}","protected void updateCurrentURIFormatted(){
  String currentURI=null;
  SonosMetaData currentTrack=null;
  String coordinator=getCoordinator();
  ZonePlayerHandler coordinatorHandler=getHandlerByName(coordinator);
  if (coordinatorHandler != null && coordinatorHandler != this) {
    if (getCurrentURI().contains(""String_Node_Str"")) {
      coordinatorHandler.updateMediaInfo();
    }
    currentURI=coordinatorHandler.getCurrentURI();
    currentTrack=coordinatorHandler.getTrackMetadata();
  }
 else {
    currentURI=getCurrentURI();
    currentTrack=getTrackMetadata();
  }
  if (currentURI != null) {
    String title=stateMap.get(""String_Node_Str"");
    String resultString=stateMap.get(""String_Node_Str"");
    boolean needsUpdating=false;
    if (opmlPartnerID != null && currentURI.contains(""String_Node_Str"")) {
      String stationID=StringUtils.substringBetween(currentURI,""String_Node_Str"",""String_Node_Str"");
      String previousStationID=stateMap.get(""String_Node_Str"");
      Calendar now=Calendar.getInstance();
      now.setTime(new Date());
      now.add(Calendar.MINUTE,-1);
      if (previousStationID == null || !previousStationID.equals(stationID) || lastOPMLQuery == null || lastOPMLQuery.before(now)) {
        this.onValueReceived(""String_Node_Str"",stationID,""String_Node_Str"");
        String url=""String_Node_Str"" + ""String_Node_Str"" + stationID + ""String_Node_Str""+ opmlPartnerID+ ""String_Node_Str""+ getMACAddress();
        String response=HttpUtil.executeUrl(""String_Node_Str"",url,SOCKET_TIMEOUT);
        if (lastOPMLQuery == null) {
          lastOPMLQuery=Calendar.getInstance();
        }
        lastOPMLQuery.setTime(new Date());
        if (response != null) {
          List<String> fields=SonosXMLParser.getRadioTimeFromXML(response);
          if (fields != null && fields.size() > 0) {
            resultString=new String();
            title=fields.get(0);
            Iterator<String> listIterator=fields.listIterator();
            while (listIterator.hasNext()) {
              String field=listIterator.next();
              resultString=resultString + field;
              if (listIterator.hasNext()) {
                resultString=resultString + ""String_Node_Str"";
              }
            }
            needsUpdating=true;
          }
        }
      }
    }
 else {
      if (currentTrack != null && !currentTrack.getTitle().contains(""String_Node_Str"")) {
        if (currentTrack.getAlbumArtist().equals(""String_Node_Str"")) {
          resultString=currentTrack.getCreator() + ""String_Node_Str"" + currentTrack.getAlbum()+ ""String_Node_Str""+ currentTrack.getTitle();
        }
 else {
          resultString=currentTrack.getAlbumArtist() + ""String_Node_Str"" + currentTrack.getAlbum()+ ""String_Node_Str""+ currentTrack.getTitle();
        }
        needsUpdating=true;
      }
    }
    if (needsUpdating) {
      this.onValueReceived(""String_Node_Str"",(resultString != null) ? resultString : ""String_Node_Str"",""String_Node_Str"");
      this.onValueReceived(""String_Node_Str"",(title != null) ? title : ""String_Node_Str"",""String_Node_Str"");
    }
  }
}",0.9951409135082604
62651,"/** 
 * Play music from the line-in of the given Player referenced by the given UDN or name
 * @param udn or name
 */
public void playLineIn(Command command){
  if (command != null && command instanceof StringType) {
    String remotePlayerName=command.toString();
    Thing coordinatorThing=thingRegistry.get(new ThingUID(ZONEPLAYER_THING_TYPE_UID,getCoordinator()));
    ZonePlayerHandler coordinatorHandler=(ZonePlayerHandler)coordinatorThing.getHandler();
    ZonePlayerHandler remoteHandler=getHandlerByName(remotePlayerName);
    coordinatorHandler.stop();
    coordinatorHandler.setCurrentURI(""String_Node_Str"" + remoteHandler.getConfig().get(UDN),""String_Node_Str"");
    coordinatorHandler.setMute(OnOffType.OFF);
    coordinatorHandler.play();
  }
}","/** 
 * Play music from the line-in of the given Player referenced by the given UDN or name
 * @param udn or name
 */
public void playLineIn(Command command){
  if (command != null && command instanceof StringType) {
    String remotePlayerName=command.toString();
    String coordinatorUDN=getCoordinator();
    ZonePlayerHandler coordinatorHandler=getHandlerByName(coordinatorUDN);
    ZonePlayerHandler remoteHandler=getHandlerByName(remotePlayerName);
    coordinatorHandler.stop();
    coordinatorHandler.setCurrentURI(""String_Node_Str"" + remoteHandler.getConfig().get(UDN),""String_Node_Str"");
    coordinatorHandler.setMute(OnOffType.OFF);
    coordinatorHandler.play();
  }
}",0.7958333333333333
62652,"/** 
 * Restore the state (track, position etc) of the Sonos Zone player.
 * @return true if no error occurred.
 */
protected void restoreState(){
synchronized (this) {
    if (savedState != null) {
      setVolume(DecimalType.valueOf(savedState.volume));
      if (isCoordinator()) {
        if (savedState.entry != null) {
          if (savedState.entry.getUpnpClass().contains(""String_Node_Str"")) {
            addURIToQueue(savedState.entry.getRes(),SonosXMLParser.compileMetadataString(savedState.entry),0,true);
            SonosEntry entry=new SonosEntry(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + getUDN() + ""String_Node_Str"");
            setCurrentURI(entry);
            setPositionTrack(savedState.track);
          }
 else {
            setCurrentURI(savedState.entry);
            setPosition(savedState.relTime);
          }
          if (savedState.transportState.equals(""String_Node_Str"")) {
            play();
          }
 else           if (savedState.transportState.equals(""String_Node_Str"")) {
            stop();
          }
 else           if (savedState.transportState.equals(""String_Node_Str"")) {
            pause();
          }
        }
      }
    }
  }
}","/** 
 * Restore the state (track, position etc) of the Sonos Zone player.
 * @return true if no error occurred.
 */
protected void restoreState(){
synchronized (this) {
    if (savedState != null) {
      if (savedState.volume != null) {
        setVolume(DecimalType.valueOf(savedState.volume));
      }
      if (isCoordinator()) {
        if (savedState.entry != null) {
          if (savedState.entry.getUpnpClass().contains(""String_Node_Str"")) {
            addURIToQueue(savedState.entry.getRes(),SonosXMLParser.compileMetadataString(savedState.entry),0,true);
            SonosEntry entry=new SonosEntry(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + getUDN() + ""String_Node_Str"");
            setCurrentURI(entry);
            setPositionTrack(savedState.track);
          }
 else {
            setCurrentURI(savedState.entry);
            setPosition(savedState.relTime);
          }
        }
        if (savedState.transportState != null) {
          if (savedState.transportState.equals(""String_Node_Str"")) {
            play();
          }
 else           if (savedState.transportState.equals(""String_Node_Str"")) {
            stop();
          }
 else           if (savedState.transportState.equals(""String_Node_Str"")) {
            pause();
          }
        }
      }
    }
  }
}",0.9597615499254843
62653,"/** 
 * Save the state (track, position etc) of the Sonos Zone player.
 * @return true if no error occurred.
 */
protected void saveState(){
synchronized (this) {
    savedState=new SonosZonePlayerState();
    String currentURI=getCurrentURI();
    if (currentURI != null) {
      if (currentURI.contains(""String_Node_Str"")) {
        SonosMetaData track=getTrackMetadata();
        SonosMetaData current=getCurrentURIMetadata();
        if (track != null) {
          savedState.entry=new SonosEntry(""String_Node_Str"",current.getTitle(),""String_Node_Str"",""String_Node_Str"",track.getAlbumArtUri(),""String_Node_Str"",current.getUpnpClass(),currentURI);
        }
      }
 else       if (currentURI.contains(""String_Node_Str"")) {
        savedState.entry=new SonosEntry(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",currentURI);
      }
 else       if (currentURI.contains(""String_Node_Str"")) {
        savedState.entry=new SonosEntry(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",currentURI);
      }
 else       if (currentURI.contains(""String_Node_Str"")) {
        SonosMetaData queued=getEnqueuedTransportURIMetaData();
        if (queued != null) {
          savedState.track=getCurrenTrackNr();
          if (queued.getUpnpClass().contains(""String_Node_Str"")) {
            List<SonosEntry> playLists=getPlayLists();
            for (            SonosEntry someList : playLists) {
              if (someList.getTitle().equals(queued.getTitle())) {
                savedState.entry=new SonosEntry(someList.getId(),someList.getTitle(),someList.getParentId(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",someList.getUpnpClass(),someList.getRes());
                break;
              }
            }
          }
 else           if (queued.getUpnpClass().contains(""String_Node_Str"")) {
            logger.debug(""String_Node_Str"",queued.getUpnpClass());
            String existingList=""String_Node_Str"";
            List<SonosEntry> playLists=getPlayLists();
            for (            SonosEntry someList : playLists) {
              if (someList.getTitle().equals(""String_Node_Str"" + getUDN())) {
                existingList=someList.getId();
                break;
              }
            }
            saveQueue(""String_Node_Str"" + getUDN(),existingList);
            playLists=getPlayLists();
            for (            SonosEntry someList : playLists) {
              if (someList.getTitle().equals(""String_Node_Str"" + getUDN())) {
                savedState.entry=new SonosEntry(someList.getId(),someList.getTitle(),someList.getParentId(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",someList.getUpnpClass(),someList.getRes());
                break;
              }
            }
          }
        }
 else {
          savedState.entry=new SonosEntry(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + getUDN() + ""String_Node_Str"");
        }
      }
      savedState.transportState=getTransportState();
      savedState.volume=getVolume();
      savedState.relTime=getPosition();
    }
 else {
      savedState.entry=null;
    }
  }
}","/** 
 * Save the state (track, position etc) of the Sonos Zone player.
 * @return true if no error occurred.
 */
protected void saveState(){
synchronized (this) {
    savedState=new SonosZonePlayerState();
    String currentURI=getCurrentURI();
    savedState.transportState=getTransportState();
    savedState.volume=getVolume();
    if (currentURI != null) {
      if (currentURI.contains(""String_Node_Str"")) {
        SonosMetaData track=getTrackMetadata();
        SonosMetaData current=getCurrentURIMetadata();
        if (track != null) {
          savedState.entry=new SonosEntry(""String_Node_Str"",current.getTitle(),""String_Node_Str"",""String_Node_Str"",track.getAlbumArtUri(),""String_Node_Str"",current.getUpnpClass(),currentURI);
        }
      }
 else       if (currentURI.contains(""String_Node_Str"")) {
        savedState.entry=new SonosEntry(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",currentURI);
      }
 else       if (currentURI.contains(""String_Node_Str"")) {
        savedState.entry=new SonosEntry(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",currentURI);
      }
 else       if (currentURI.contains(""String_Node_Str"")) {
        SonosMetaData queued=getEnqueuedTransportURIMetaData();
        if (queued != null) {
          savedState.track=getCurrenTrackNr();
          if (queued.getUpnpClass().contains(""String_Node_Str"")) {
            List<SonosEntry> playLists=getPlayLists();
            for (            SonosEntry someList : playLists) {
              if (someList.getTitle().equals(queued.getTitle())) {
                savedState.entry=new SonosEntry(someList.getId(),someList.getTitle(),someList.getParentId(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",someList.getUpnpClass(),someList.getRes());
                break;
              }
            }
          }
 else           if (queued.getUpnpClass().contains(""String_Node_Str"")) {
            logger.debug(""String_Node_Str"",queued.getUpnpClass());
            String existingList=""String_Node_Str"";
            List<SonosEntry> playLists=getPlayLists();
            for (            SonosEntry someList : playLists) {
              if (someList.getTitle().equals(""String_Node_Str"" + getUDN())) {
                existingList=someList.getId();
                break;
              }
            }
            saveQueue(""String_Node_Str"" + getUDN(),existingList);
            playLists=getPlayLists();
            for (            SonosEntry someList : playLists) {
              if (someList.getTitle().equals(""String_Node_Str"" + getUDN())) {
                savedState.entry=new SonosEntry(someList.getId(),someList.getTitle(),someList.getParentId(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",someList.getUpnpClass(),someList.getRes());
                break;
              }
            }
          }
        }
 else {
          savedState.entry=new SonosEntry(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + getUDN() + ""String_Node_Str"");
        }
      }
      savedState.relTime=getPosition();
    }
 else {
      savedState.entry=null;
    }
  }
}",0.97352587244284
62654,"protected ZonePlayerHandler getHandlerByName(String remotePlayerName){
  Thing thing=thingRegistry.getByUID(new ThingUID(ZONEPLAYER_THING_TYPE_UID,remotePlayerName));
  if (thing == null) {
    Collection<Thing> allThings=thingRegistry.getAll();
    for (    Thing aThing : allThings) {
      if (aThing.getThingTypeUID().equals(this.getThing().getThingTypeUID())) {
        if (aThing.getConfiguration().get(UDN).equals(remotePlayerName)) {
          thing=aThing;
          break;
        }
      }
    }
  }
  return (ZonePlayerHandler)thing.getHandler();
}","protected ZonePlayerHandler getHandlerByName(String remotePlayerName){
  Thing thing=thingRegistry.getByUID(new ThingUID(ZONEPLAYER_THING_TYPE_UID,remotePlayerName));
  if (thing == null) {
    Collection<Thing> allThings=thingRegistry.getAll();
    for (    Thing aThing : allThings) {
      if (aThing.getThingTypeUID().equals(this.getThing().getThingTypeUID())) {
        if (aThing.getConfiguration().get(UDN).equals(remotePlayerName)) {
          thing=aThing;
          break;
        }
      }
    }
  }
  if (thing != null) {
    return (ZonePlayerHandler)thing.getHandler();
  }
 else {
    return null;
  }
}",0.9507640067911716
62655,"protected void updateCurrentURIFormatted(){
  String currentURI=null;
  SonosMetaData currentURIMetaData=null;
  SonosMetaData currentTrack=null;
  String coordinator=getCoordinator();
  ZonePlayerHandler coordinatorHandler=getHandlerByName(coordinator);
  if (!isGroupCoordinator() && coordinatorHandler != null) {
    currentURI=coordinatorHandler.getCurrentURI();
    currentURIMetaData=coordinatorHandler.getCurrentURIMetadata();
    currentTrack=coordinatorHandler.getTrackMetadata();
  }
 else {
    currentURI=getCurrentURI();
    currentURIMetaData=getCurrentURIMetadata();
    currentTrack=getTrackMetadata();
  }
  if (currentURI != null) {
    String resultString=null;
    String artist=null;
    String album=null;
    String title=null;
    if (opmlPartnerID != null && currentURI.contains(""String_Node_Str"")) {
      String stationID=StringUtils.substringBetween(currentURI,""String_Node_Str"",""String_Node_Str"");
      String previousStationID=stateMap.get(""String_Node_Str"");
      Calendar now=Calendar.getInstance();
      now.setTime(new Date());
      now.add(Calendar.MINUTE,-1);
      if (previousStationID == null || !previousStationID.equals(stationID) || lastOPMLQuery == null || lastOPMLQuery.before(now)) {
        this.onValueReceived(""String_Node_Str"",stationID,""String_Node_Str"");
        String url=""String_Node_Str"" + ""String_Node_Str"" + stationID + ""String_Node_Str""+ opmlPartnerID+ ""String_Node_Str""+ getMACAddress();
        String response=HttpUtil.executeUrl(""String_Node_Str"",url,SOCKET_TIMEOUT);
        if (lastOPMLQuery == null) {
          lastOPMLQuery=Calendar.getInstance();
        }
        lastOPMLQuery.setTime(new Date());
        if (response != null) {
          List<String> fields=SonosXMLParser.getRadioTimeFromXML(response);
          if (fields != null) {
            resultString=new String();
            title=fields.get(0);
            Iterator<String> listIterator=fields.listIterator();
            while (listIterator.hasNext()) {
              String field=listIterator.next();
              resultString=resultString + field;
              if (listIterator.hasNext()) {
                resultString=resultString + ""String_Node_Str"";
              }
            }
          }
        }
      }
 else {
        resultString=stateMap.get(""String_Node_Str"");
        title=stateMap.get(""String_Node_Str"");
      }
    }
 else {
      if (currentTrack != null) {
        if (!currentTrack.getTitle().contains(""String_Node_Str"")) {
          if (currentTrack.getAlbumArtist().equals(""String_Node_Str"")) {
            resultString=currentTrack.getCreator() + ""String_Node_Str"" + currentTrack.getAlbum()+ ""String_Node_Str""+ currentTrack.getTitle();
            artist=currentTrack.getCreator();
          }
 else {
            resultString=currentTrack.getAlbumArtist() + ""String_Node_Str"" + currentTrack.getAlbum()+ ""String_Node_Str""+ currentTrack.getTitle();
            artist=currentTrack.getAlbumArtist();
          }
          album=currentTrack.getAlbum();
          title=currentTrack.getTitle();
        }
      }
 else {
        resultString=""String_Node_Str"";
      }
    }
    this.onValueReceived(""String_Node_Str"",resultString,""String_Node_Str"");
    this.onValueReceived(""String_Node_Str"",(artist != null) ? artist : ""String_Node_Str"",""String_Node_Str"");
    this.onValueReceived(""String_Node_Str"",(title != null) ? title : ""String_Node_Str"",""String_Node_Str"");
    this.onValueReceived(""String_Node_Str"",(album != null) ? album : ""String_Node_Str"",""String_Node_Str"");
  }
}","protected void updateCurrentURIFormatted(){
  String currentURI=null;
  SonosMetaData currentTrack=null;
  String coordinator=getCoordinator();
  ZonePlayerHandler coordinatorHandler=getHandlerByName(coordinator);
  if (!isGroupCoordinator() && coordinatorHandler != null) {
    currentURI=coordinatorHandler.getCurrentURI();
    currentTrack=coordinatorHandler.getTrackMetadata();
  }
 else {
    currentURI=getCurrentURI();
    currentTrack=getTrackMetadata();
  }
  if (currentURI != null) {
    String resultString=null;
    String artist=null;
    String album=null;
    String title=null;
    if (opmlPartnerID != null && currentURI.contains(""String_Node_Str"")) {
      String stationID=StringUtils.substringBetween(currentURI,""String_Node_Str"",""String_Node_Str"");
      String previousStationID=stateMap.get(""String_Node_Str"");
      Calendar now=Calendar.getInstance();
      now.setTime(new Date());
      now.add(Calendar.MINUTE,-1);
      if (previousStationID == null || !previousStationID.equals(stationID) || lastOPMLQuery == null || lastOPMLQuery.before(now)) {
        this.onValueReceived(""String_Node_Str"",stationID,""String_Node_Str"");
        String url=""String_Node_Str"" + ""String_Node_Str"" + stationID + ""String_Node_Str""+ opmlPartnerID+ ""String_Node_Str""+ getMACAddress();
        String response=HttpUtil.executeUrl(""String_Node_Str"",url,SOCKET_TIMEOUT);
        if (lastOPMLQuery == null) {
          lastOPMLQuery=Calendar.getInstance();
        }
        lastOPMLQuery.setTime(new Date());
        if (response != null) {
          List<String> fields=SonosXMLParser.getRadioTimeFromXML(response);
          if (fields != null) {
            resultString=new String();
            title=fields.get(0);
            Iterator<String> listIterator=fields.listIterator();
            while (listIterator.hasNext()) {
              String field=listIterator.next();
              resultString=resultString + field;
              if (listIterator.hasNext()) {
                resultString=resultString + ""String_Node_Str"";
              }
            }
          }
        }
      }
 else {
        resultString=stateMap.get(""String_Node_Str"");
        title=stateMap.get(""String_Node_Str"");
      }
    }
 else {
      if (currentTrack != null) {
        if (!currentTrack.getTitle().contains(""String_Node_Str"")) {
          if (currentTrack.getAlbumArtist().equals(""String_Node_Str"")) {
            resultString=currentTrack.getCreator() + ""String_Node_Str"" + currentTrack.getAlbum()+ ""String_Node_Str""+ currentTrack.getTitle();
            artist=currentTrack.getCreator();
          }
 else {
            resultString=currentTrack.getAlbumArtist() + ""String_Node_Str"" + currentTrack.getAlbum()+ ""String_Node_Str""+ currentTrack.getTitle();
            artist=currentTrack.getAlbumArtist();
          }
          album=currentTrack.getAlbum();
          title=currentTrack.getTitle();
        }
      }
 else {
        resultString=""String_Node_Str"";
      }
    }
    this.onValueReceived(""String_Node_Str"",resultString,""String_Node_Str"");
    this.onValueReceived(""String_Node_Str"",(artist != null) ? artist : ""String_Node_Str"",""String_Node_Str"");
    this.onValueReceived(""String_Node_Str"",(title != null) ? title : ""String_Node_Str"",""String_Node_Str"");
    this.onValueReceived(""String_Node_Str"",(album != null) ? album : ""String_Node_Str"",""String_Node_Str"");
  }
}",0.8990772779700116
62656,"@Override public void dispose(){
  logger.debug(""String_Node_Str"");
  if (pollingJob != null && !pollingJob.isCancelled()) {
    pollingJob.cancel(true);
    pollingJob=null;
  }
}","@Override public void dispose(){
  logger.debug(""String_Node_Str"");
  if (pollingJob != null && !pollingJob.isCancelled()) {
    pollingJob.cancel(true);
    pollingJob=null;
  }
  if (getThing().getStatus() == ThingStatus.ONLINE) {
    logger.debug(""String_Node_Str"",getThing().getUID());
    getThing().setStatus(ThingStatus.OFFLINE);
  }
}",0.6896551724137931
62657,"public ZonePlayerHandler(Thing thing,UpnpIOService upnpIOService,DiscoveryServiceRegistry discoveryServiceRegistry,String opmlPartnerID){
  super(thing);
  this.opmlPartnerID=opmlPartnerID;
  logger.debug(""String_Node_Str"",getThing().getUID());
  if (upnpIOService != null) {
    this.service=upnpIOService;
  }
  if (discoveryServiceRegistry != null) {
    this.discoveryServiceRegistry=discoveryServiceRegistry;
    this.discoveryServiceRegistry.addDiscoveryListener(this);
  }
  if (!service.isRegistered(this)) {
    logger.debug(""String_Node_Str"",getThing().getUID());
    getThing().setStatus(ThingStatus.OFFLINE);
  }
}","public ZonePlayerHandler(Thing thing,UpnpIOService upnpIOService,DiscoveryServiceRegistry discoveryServiceRegistry,String opmlPartnerID){
  super(thing);
  this.opmlPartnerID=opmlPartnerID;
  logger.debug(""String_Node_Str"",getThing().getUID());
  if (upnpIOService != null) {
    this.service=upnpIOService;
  }
  if (discoveryServiceRegistry != null) {
    this.discoveryServiceRegistry=discoveryServiceRegistry;
    this.discoveryServiceRegistry.addDiscoveryListener(this);
  }
}",0.8690153568202349
62658,"@Override public void initialize(){
  ZonePlayerConfiguration configuration=getConfigAs(ZonePlayerConfiguration.class);
  if (configuration.udn != null) {
    onSubscription();
    onUpdate();
  }
 else {
    logger.warn(""String_Node_Str"");
  }
}","@Override public void initialize(){
  ZonePlayerConfiguration configuration=getConfigAs(ZonePlayerConfiguration.class);
  if (configuration.udn != null) {
    onSubscription();
    onUpdate();
  }
 else {
    logger.warn(""String_Node_Str"");
  }
  if (getThing().getStatus() == ThingStatus.OFFLINE) {
    logger.debug(""String_Node_Str"",getThing().getUID());
    getThing().setStatus(ThingStatus.ONLINE);
  }
}",0.7522935779816514
62659,"public void onPost(final PipelineHook hook){
  if (pipelineTriggerHandler == null) {
    initializeTriggerHandler();
  }
  pipelineTriggerHandler.handle(job,hook,ciSkip,branchFilter,mergeRequestLabelFilter);
}","public void onPost(final PipelineHook hook){
  if (branchFilter == null) {
    initializeBranchFilter();
  }
  if (pipelineTriggerHandler == null) {
    initializeTriggerHandler();
  }
  pipelineTriggerHandler.handle(job,hook,ciSkip,branchFilter,mergeRequestLabelFilter);
}",0.8672199170124482
62660,"@DataBoundConstructor public GitLabCommitStatusStep(String name){
  this.name=StringUtils.isEmpty(name) ? null : name;
}","@DataBoundConstructor public GitLabCommitStatusStep(){
}",0.6363636363636364
62661,"public static BranchFilter newBranchFilter(BranchFilterConfig config){
switch (config.getType()) {
case NameBasedFilter:
    return new NameBasedFilter(config.getIncludeBranchesSpec(),config.getExcludeBranchesSpec());
case RegexBasedFilter:
  return new RegexBasedFilter(config.getTargetBranchRegex());
default :
return new AllBranchesFilter();
}
}","public static BranchFilter newBranchFilter(BranchFilterConfig config){
  if (config == null)   return new AllBranchesFilter();
switch (config.getType()) {
case NameBasedFilter:
    return new NameBasedFilter(config.getIncludeBranchesSpec(),config.getExcludeBranchesSpec());
case RegexBasedFilter:
  return new RegexBasedFilter(config.getTargetBranchRegex());
default :
return new AllBranchesFilter();
}
}",0.925531914893617
62662,"@Test public void test(){
  CommitStatusUpdater.updateCommitStatus(build,taskListener,BuildState.success,STAGE);
  verify(client).changeBuildStatus(Integer.toString(PROJECT_ID),REVISION,BuildState.success,null,STAGE,Jenkins.getInstance().getRootUrl() + BUILD_URL + BUILD_URL_REDIRECT,null);
}","@Test public void test(){
  CommitStatusUpdater.updateCommitStatus(build,taskListener,BuildState.success,STAGE);
  verify(client).changeBuildStatus(Integer.toString(PROJECT_ID),REVISION,BuildState.success,null,STAGE,DisplayURLProvider.get().getRunURL(build),null);
}",0.8172043010752689
62663,"void setUseAuthenticatedEndpoint(Boolean useAuthenticatedEndpoint){
  this.useAuthenticatedEndpoint=useAuthenticatedEndpoint;
}","void setUseAuthenticatedEndpoint(boolean useAuthenticatedEndpoint){
  this.useAuthenticatedEndpoint=useAuthenticatedEndpoint;
}",0.9921259842519684
62664,"private void checkPermission(Permission permission){
  if (((GitLabConnectionConfig)Jenkins.getInstance().getDescriptor(GitLabConnectionConfig.class)).getUseAuthenticatedEndpoint()) {
    if (!Jenkins.getActiveInstance().getACL().hasPermission(authentication,permission)) {
      String message=Messages.AccessDeniedException2_MissingPermission(authentication.getName(),permission.group.title + ""String_Node_Str"" + permission.name);
      LOGGER.finest(""String_Node_Str"");
      throw HttpResponses.errorWithoutStack(403,message);
    }
  }
}","private void checkPermission(Permission permission){
  if (((GitLabConnectionConfig)Jenkins.getInstance().getDescriptor(GitLabConnectionConfig.class)).isUseAuthenticatedEndpoint()) {
    if (!Jenkins.getActiveInstance().getACL().hasPermission(authentication,permission)) {
      String message=Messages.AccessDeniedException2_MissingPermission(authentication.getName(),permission.group.title + ""String_Node_Str"" + permission.name);
      LOGGER.finest(""String_Node_Str"");
      throw HttpResponses.errorWithoutStack(403,message);
    }
  }
}",0.9953831948291784
62665,"@Test public void buildClientWithProxy() throws Exception {
  jenkins.getInstance().proxy=new ProxyConfiguration(""String_Node_Str"",8080,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  GitLabClientBuilder clientBuilder=new ResteasyGitLabClientBuilder(""String_Node_Str"",V3GitLabApiProxy.class);
  assertNotNull(buildClientWithDefaults(clientBuilder,""String_Node_Str""));
}","@Test public void buildClientWithProxy() throws Exception {
  jenkins.getInstance().proxy=new ProxyConfiguration(""String_Node_Str"",8080,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  GitLabClientBuilder clientBuilder=new ResteasyGitLabClientBuilder(""String_Node_Str"",0,V3GitLabApiProxy.class);
  assertNotNull(buildClientWithDefaults(clientBuilder,""String_Node_Str""));
}",0.9973684210526316
62666,"private GitLabClient buildClient(String url,String apiToken,Class<? extends GitLabApi> proxyClass,ProxyConfiguration httpProxyConfig,boolean ignoreCertificateErrors,int connectionTimeout,int readTimeout){
  ResteasyClientBuilder builder=new ResteasyClientBuilder();
  if (ignoreCertificateErrors) {
    builder.hostnameVerification(ResteasyClientBuilder.HostnameVerificationPolicy.ANY);
    builder.disableTrustManager();
  }
  if (httpProxyConfig != null) {
    InetSocketAddress address=(InetSocketAddress)httpProxyConfig.createProxy(getHost(url)).address();
    builder.defaultProxy(address.getHostName().replaceFirst(""String_Node_Str"",""String_Node_Str""),address.getPort(),address.getHostName().startsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"",httpProxyConfig.getUserName(),httpProxyConfig.getPassword());
  }
  GitLabApi apiProxy=builder.connectionPoolSize(60).maxPooledPerRoute(30).establishConnectionTimeout(connectionTimeout,TimeUnit.SECONDS).socketTimeout(readTimeout,TimeUnit.SECONDS).register(new JacksonJsonProvider()).register(new JacksonConfig()).register(new ApiHeaderTokenFilter(apiToken)).register(new LoggingFilter()).register(new RemoveAcceptEncodingFilter()).register(new JaxrsFormProvider()).build().target(url).proxyBuilder(proxyClass).classloader(proxyClass.getClassLoader()).build();
  return new GitLabClient(url,apiProxy);
}","private GitLabClient buildClient(String url,String apiToken,Class<? extends GitLabApi> proxyClass,ProxyConfiguration httpProxyConfig,boolean ignoreCertificateErrors,int connectionTimeout,int readTimeout){
  ResteasyClientBuilder builder=new ResteasyClientBuilder();
  if (ignoreCertificateErrors) {
    builder.hostnameVerification(ResteasyClientBuilder.HostnameVerificationPolicy.ANY);
    builder.disableTrustManager();
  }
  Proxy proxy=httpProxyConfig != null ? httpProxyConfig.createProxy(getHost(url)) : NO_PROXY;
  if (proxy != NO_PROXY) {
    InetSocketAddress address=(InetSocketAddress)proxy.address();
    builder.defaultProxy(address.getHostName().replaceFirst(""String_Node_Str"",""String_Node_Str""),address.getPort(),address.getHostName().startsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"",httpProxyConfig.getUserName(),httpProxyConfig.getPassword());
  }
  GitLabApi apiProxy=builder.connectionPoolSize(60).maxPooledPerRoute(30).establishConnectionTimeout(connectionTimeout,TimeUnit.SECONDS).socketTimeout(readTimeout,TimeUnit.SECONDS).register(new JacksonJsonProvider()).register(new JacksonConfig()).register(new ApiHeaderTokenFilter(apiToken)).register(new LoggingFilter()).register(new RemoveAcceptEncodingFilter()).register(new JaxrsFormProvider()).build().target(url).proxyBuilder(proxyClass).classloader(proxyClass.getClassLoader()).build();
  return new GitLabClient(url,apiProxy);
}",0.949140401146132
62667,"private static List<String> retrieveGitlabProjectIds(Run<?,?> build,EnvVars environment){
  LOGGER.log(Level.INFO,""String_Node_Str"");
  GitLabWebHookCause cause=build.getCause(GitLabWebHookCause.class);
  if (cause != null) {
    return Collections.singletonList(cause.getData().getSourceProjectId().toString());
  }
  List<String> result=new ArrayList<>();
  GitLabApi gitLabClient=getClient(build);
  if (gitLabClient == null) {
    LOGGER.log(Level.WARNING,""String_Node_Str"");
    return result;
  }
  final BuildData buildData=build.getAction(BuildData.class);
  if (buildData == null) {
    LOGGER.log(Level.INFO,""String_Node_Str"");
    return result;
  }
  final Set<String> remoteUrls=buildData.getRemoteUrls();
  for (  String remoteUrl : remoteUrls) {
    try {
      LOGGER.log(Level.INFO,""String_Node_Str"",remoteUrl);
      final String projectNameWithNameSpace=ProjectIdUtil.retrieveProjectId(environment.expand(remoteUrl));
      if (StringUtils.isNotBlank(projectNameWithNameSpace)) {
        String projectId=projectNameWithNameSpace;
        if (projectNameWithNameSpace.contains(""String_Node_Str"")) {
          try {
            projectId=gitLabClient.getProject(projectNameWithNameSpace).getId().toString();
          }
 catch (          WebApplicationException|ProcessingException e) {
            LOGGER.log(Level.SEVERE,String.format(""String_Node_Str"",projectNameWithNameSpace),e);
          }
        }
        result.add(projectId);
      }
    }
 catch (    ProjectIdUtil.ProjectIdResolutionException e) {
    }
  }
  return result;
}","private static List<GitLabBranchBuild> retrieveGitlabProjectIds(Run<?,?> build,EnvVars environment){
  LOGGER.log(Level.INFO,""String_Node_Str"");
  final List<GitLabBranchBuild> result=new ArrayList<>();
  GitLabWebHookCause cause=build.getCause(GitLabWebHookCause.class);
  if (cause != null) {
    return Collections.singletonList(new GitLabBranchBuild(cause.getData().getSourceProjectId().toString(),cause.getData().getLastCommit()));
  }
  final GitLabApi gitLabClient=getClient(build);
  if (gitLabClient == null) {
    LOGGER.log(Level.WARNING,""String_Node_Str"");
    return result;
  }
  final SCMRevisionAction scmRevisionAction=build.getAction(SCMRevisionAction.class);
  final SCMRevision scmRevision=scmRevisionAction.getRevision();
  String scmRevisionHash=null;
  if (scmRevision instanceof AbstractGitSCMSource.SCMRevisionImpl) {
    scmRevisionHash=((AbstractGitSCMSource.SCMRevisionImpl)scmRevision).getHash();
  }
  final List<BuildData> buildDatas=build.getActions(BuildData.class);
  if (CollectionUtils.isEmpty(buildDatas)) {
    LOGGER.log(Level.INFO,""String_Node_Str"");
    return result;
  }
  for (  final BuildData buildData : buildDatas) {
    for (    final Entry<String,Build> buildByBranchName : buildData.getBuildsByBranchName().entrySet()) {
      if (buildByBranchName.getValue().getSHA1().equals(ObjectId.fromString(scmRevisionHash))) {
        final Set<String> remoteUrls=buildData.getRemoteUrls();
        for (        String remoteUrl : remoteUrls) {
          try {
            LOGGER.log(Level.INFO,""String_Node_Str"",remoteUrl);
            final String projectNameWithNameSpace=ProjectIdUtil.retrieveProjectId(environment.expand(remoteUrl));
            if (StringUtils.isNotBlank(projectNameWithNameSpace)) {
              String projectId=projectNameWithNameSpace;
              if (projectNameWithNameSpace.contains(""String_Node_Str"")) {
                try {
                  projectId=gitLabClient.getProject(projectNameWithNameSpace).getId().toString();
                }
 catch (                WebApplicationException|ProcessingException e) {
                  LOGGER.log(Level.SEVERE,String.format(""String_Node_Str"",projectNameWithNameSpace),e);
                }
              }
              result.add(new GitLabBranchBuild(projectId,scmRevisionHash));
            }
          }
 catch (          ProjectIdUtil.ProjectIdResolutionException e) {
          }
        }
      }
    }
  }
  return result;
}",0.74109145277847
62668,"public static void updateCommitStatus(Run<?,?> build,TaskListener listener,BuildState state,String name){
  GitLabApi client=getClient(build);
  if (client == null) {
    println(listener,""String_Node_Str"");
    return;
  }
  try {
    String commitHash=getBuildRevision(build);
    String buildUrl=getBuildUrl(build);
    for (    String gitlabProjectId : retrieveGitlabProjectIds(build,build.getEnvironment(listener))) {
      try {
        if (existsCommit(client,gitlabProjectId,commitHash)) {
          client.changeBuildStatus(gitlabProjectId,commitHash,state,getBuildBranch(build),name,buildUrl,null);
        }
      }
 catch (      WebApplicationException|ProcessingException e) {
        printf(listener,""String_Node_Str"",gitlabProjectId,e.getMessage());
        LOGGER.log(Level.SEVERE,String.format(""String_Node_Str"",gitlabProjectId),e);
      }
    }
  }
 catch (  IOException|InterruptedException|IllegalStateException e) {
    printf(listener,""String_Node_Str"",e.getMessage());
  }
}","public static void updateCommitStatus(Run<?,?> build,TaskListener listener,BuildState state,String name){
  GitLabApi client=getClient(build);
  if (client == null) {
    println(listener,""String_Node_Str"");
    return;
  }
  try {
    final String buildUrl=getBuildUrl(build);
    for (    final GitLabBranchBuild gitLabBranchBuild : retrieveGitlabProjectIds(build,build.getEnvironment(listener))) {
      try {
        if (existsCommit(client,gitLabBranchBuild.getProjectId(),gitLabBranchBuild.getRevisionHash())) {
          client.changeBuildStatus(gitLabBranchBuild.getProjectId(),gitLabBranchBuild.getRevisionHash(),state,getBuildBranch(build),name,buildUrl,null);
        }
      }
 catch (      WebApplicationException|ProcessingException e) {
        printf(listener,""String_Node_Str"",gitLabBranchBuild.getProjectId(),e.getMessage());
        LOGGER.log(Level.SEVERE,String.format(""String_Node_Str"",gitLabBranchBuild.getProjectId()),e);
      }
    }
  }
 catch (  IOException|InterruptedException|IllegalStateException e) {
    printf(listener,""String_Node_Str"",e.getMessage());
  }
}",0.6596558317399618
62669,"void setUseAuthenticatedEndpoint(boolean useAuthenticatedEndpoint){
  this.useAuthenticatedEndpoint=useAuthenticatedEndpoint;
}","void setUseAuthenticatedEndpoint(Boolean useAuthenticatedEndpoint){
  this.useAuthenticatedEndpoint=useAuthenticatedEndpoint;
}",0.9921259842519684
62670,"private void checkPermission(Permission permission){
  if (((GitLabConnectionConfig)Jenkins.getInstance().getDescriptor(GitLabConnectionConfig.class)).isUseAuthenticatedEndpoint()) {
    if (!Jenkins.getActiveInstance().getACL().hasPermission(authentication,permission)) {
      String message=Messages.AccessDeniedException2_MissingPermission(authentication.getName(),permission.group.title + ""String_Node_Str"" + permission.name);
      LOGGER.finest(""String_Node_Str"");
      throw HttpResponses.errorWithoutStack(403,message);
    }
  }
}","private void checkPermission(Permission permission){
  if (((GitLabConnectionConfig)Jenkins.getInstance().getDescriptor(GitLabConnectionConfig.class)).getUseAuthenticatedEndpoint()) {
    if (!Jenkins.getActiveInstance().getACL().hasPermission(authentication,permission)) {
      String message=Messages.AccessDeniedException2_MissingPermission(authentication.getName(),permission.group.title + ""String_Node_Str"" + permission.name);
      LOGGER.finest(""String_Node_Str"");
      throw HttpResponses.errorWithoutStack(403,message);
    }
  }
}",0.9953831948291784
62671,"@Test public void authenticationEnabled_anonymous_forbidden() throws IOException, URISyntaxException {
  jenkins.get(GitLabConnectionConfig.class).setUseAuthenticatedEndpoint(true);
  jenkins.getInstance().setAuthorizationStrategy(new GlobalMatrixAuthorizationStrategy());
  URL jenkinsURL=jenkins.getURL();
  FreeStyleProject project=jenkins.createFreeStyleProject(""String_Node_Str"");
  GitLabPushTrigger trigger=mock(GitLabPushTrigger.class);
  project.addTrigger(trigger);
  CloseableHttpClient client=HttpClientBuilder.create().build();
  HttpPost request=new HttpPost(jenkinsURL.toExternalForm() + ""String_Node_Str"");
  request.addHeader(""String_Node_Str"",""String_Node_Str"");
  request.setEntity(new StringEntity(""String_Node_Str""));
  CloseableHttpResponse response=client.execute(request);
  assertThat(response.getStatusLine().getStatusCode(),is(403));
}","@Test public void authenticationEnabled_anonymous_forbidden() throws IOException, URISyntaxException {
  Boolean defaultValue=jenkins.get(GitLabConnectionConfig.class).getUseAuthenticatedEndpoint();
  assertTrue(defaultValue);
  jenkins.getInstance().setAuthorizationStrategy(new GlobalMatrixAuthorizationStrategy());
  URL jenkinsURL=jenkins.getURL();
  FreeStyleProject project=jenkins.createFreeStyleProject(""String_Node_Str"");
  GitLabPushTrigger trigger=mock(GitLabPushTrigger.class);
  project.addTrigger(trigger);
  CloseableHttpClient client=HttpClientBuilder.create().build();
  HttpPost request=new HttpPost(jenkinsURL.toExternalForm() + ""String_Node_Str"");
  request.addHeader(""String_Node_Str"",""String_Node_Str"");
  request.setEntity(new StringEntity(""String_Node_Str""));
  CloseableHttpResponse response=client.execute(request);
  assertThat(response.getStatusLine().getStatusCode(),is(403));
}",0.9711701526286036
62672,"@Test public void authenticationEnabled_registered_success() throws Exception {
  String username=""String_Node_Str"";
  jenkins.get(GitLabConnectionConfig.class).setUseAuthenticatedEndpoint(true);
  jenkins.getInstance().setSecurityRealm(jenkins.createDummySecurityRealm());
  GlobalMatrixAuthorizationStrategy authorizationStrategy=new GlobalMatrixAuthorizationStrategy();
  authorizationStrategy.add(Item.BUILD,username);
  jenkins.getInstance().setAuthorizationStrategy(authorizationStrategy);
  URL jenkinsURL=jenkins.getURL();
  jenkins.createFreeStyleProject(""String_Node_Str"");
  CloseableHttpClient client=HttpClientBuilder.create().build();
  HttpPost request=new HttpPost(jenkinsURL.toExternalForm() + ""String_Node_Str"");
  request.addHeader(""String_Node_Str"",""String_Node_Str"");
  String auth=username + ""String_Node_Str"" + username;
  request.addHeader(HttpHeaders.AUTHORIZATION,""String_Node_Str"" + new String(Base64.encodeBase64(auth.getBytes(Charset.forName(""String_Node_Str"")))));
  request.setEntity(new StringEntity(""String_Node_Str""));
  CloseableHttpResponse response=client.execute(request);
  assertThat(response.getStatusLine().getStatusCode(),is(200));
}","@Test public void authenticationEnabled_registered_success() throws Exception {
  String username=""String_Node_Str"";
  jenkins.getInstance().setSecurityRealm(jenkins.createDummySecurityRealm());
  GlobalMatrixAuthorizationStrategy authorizationStrategy=new GlobalMatrixAuthorizationStrategy();
  authorizationStrategy.add(Item.BUILD,username);
  jenkins.getInstance().setAuthorizationStrategy(authorizationStrategy);
  URL jenkinsURL=jenkins.getURL();
  jenkins.createFreeStyleProject(""String_Node_Str"");
  CloseableHttpClient client=HttpClientBuilder.create().build();
  HttpPost request=new HttpPost(jenkinsURL.toExternalForm() + ""String_Node_Str"");
  request.addHeader(""String_Node_Str"",""String_Node_Str"");
  String auth=username + ""String_Node_Str"" + username;
  request.addHeader(HttpHeaders.AUTHORIZATION,""String_Node_Str"" + new String(Base64.encodeBase64(auth.getBytes(Charset.forName(""String_Node_Str"")))));
  request.setEntity(new StringEntity(""String_Node_Str""));
  CloseableHttpResponse response=client.execute(request);
  assertThat(response.getStatusLine().getStatusCode(),is(200));
}",0.965244170699516
62673,"@Override protected CauseData retrieveCauseData(MergeRequestHook hook){
  return causeData().withActionType(CauseData.ActionType.MERGE).withSourceProjectId(hook.getObjectAttributes().getSourceProjectId()).withTargetProjectId(hook.getObjectAttributes().getTargetProjectId()).withBranch(hook.getObjectAttributes().getSourceBranch()).withSourceBranch(hook.getObjectAttributes().getSourceBranch()).withUserName(hook.getObjectAttributes().getLastCommit().getAuthor().getName()).withUserEmail(hook.getObjectAttributes().getLastCommit().getAuthor().getEmail()).withSourceRepoHomepage(hook.getObjectAttributes().getSource().getHomepage()).withSourceRepoName(hook.getObjectAttributes().getSource().getName()).withSourceNamespace(hook.getObjectAttributes().getSource().getNamespace()).withSourceRepoUrl(hook.getObjectAttributes().getSource().getUrl()).withSourceRepoSshUrl(hook.getObjectAttributes().getSource().getSshUrl()).withSourceRepoHttpUrl(hook.getObjectAttributes().getSource().getHttpUrl()).withMergeRequestTitle(hook.getObjectAttributes().getTitle()).withMergeRequestDescription(hook.getObjectAttributes().getDescription()).withMergeRequestId(hook.getObjectAttributes().getId()).withMergeRequestIid(hook.getObjectAttributes().getIid()).withTargetBranch(hook.getObjectAttributes().getTargetBranch()).withTargetRepoName(hook.getObjectAttributes().getTarget().getName()).withTargetNamespace(hook.getObjectAttributes().getTarget().getNamespace()).withTargetRepoSshUrl(hook.getObjectAttributes().getTarget().getSshUrl()).withTargetRepoHttpUrl(hook.getObjectAttributes().getTarget().getHttpUrl()).withTriggeredByUser(hook.getObjectAttributes().getLastCommit().getAuthor().getName()).withLastCommit(hook.getObjectAttributes().getLastCommit().getId()).withTargetProjectUrl(hook.getProject().getWebUrl()).build();
}","@Override protected CauseData retrieveCauseData(MergeRequestHook hook){
  return causeData().withActionType(CauseData.ActionType.MERGE).withSourceProjectId(hook.getObjectAttributes().getSourceProjectId()).withTargetProjectId(hook.getObjectAttributes().getTargetProjectId()).withBranch(hook.getObjectAttributes().getSourceBranch()).withSourceBranch(hook.getObjectAttributes().getSourceBranch()).withUserName(hook.getObjectAttributes().getLastCommit().getAuthor().getName()).withUserEmail(hook.getObjectAttributes().getLastCommit().getAuthor().getEmail()).withSourceRepoHomepage(hook.getObjectAttributes().getSource().getHomepage()).withSourceRepoName(hook.getObjectAttributes().getSource().getName()).withSourceNamespace(hook.getObjectAttributes().getSource().getNamespace()).withSourceRepoUrl(hook.getObjectAttributes().getSource().getUrl()).withSourceRepoSshUrl(hook.getObjectAttributes().getSource().getSshUrl()).withSourceRepoHttpUrl(hook.getObjectAttributes().getSource().getHttpUrl()).withMergeRequestTitle(hook.getObjectAttributes().getTitle()).withMergeRequestDescription(hook.getObjectAttributes().getDescription()).withMergeRequestId(hook.getObjectAttributes().getId()).withMergeRequestIid(hook.getObjectAttributes().getIid()).withTargetBranch(hook.getObjectAttributes().getTargetBranch()).withTargetRepoName(hook.getObjectAttributes().getTarget().getName()).withTargetNamespace(hook.getObjectAttributes().getTarget().getNamespace()).withTargetRepoSshUrl(hook.getObjectAttributes().getTarget().getSshUrl()).withTargetRepoHttpUrl(hook.getObjectAttributes().getTarget().getHttpUrl()).withTriggeredByUser(hook.getObjectAttributes().getLastCommit().getAuthor().getName()).withLastCommit(hook.getObjectAttributes().getLastCommit().getId()).withTargetProjectUrl(hook.getObjectAttributes().getTarget().getWebUrl()).build();
}",0.990916597853014
62674,"void processForCompatibility(){
  final MergeRequestObjectAttributes attributes=this.mergeRequestHook.getObjectAttributes();
  if (attributes != null) {
    final Project source=attributes.getSource();
    if (source != null && source.getHttpUrl() != null) {
      if (source.getUrl() == null) {
        source.setUrl(source.getHttpUrl());
      }
      if (source.getHomepage() == null) {
        source.setHomepage(source.getHttpUrl().substring(0,source.getHttpUrl().lastIndexOf(""String_Node_Str"")));
      }
    }
  }
}","void processForCompatibility(){
  final MergeRequestObjectAttributes attributes=this.mergeRequestHook.getObjectAttributes();
  if (attributes != null) {
    final Project source=attributes.getSource();
    if (source != null && source.getHttpUrl() != null) {
      if (source.getUrl() == null) {
        source.setUrl(source.getHttpUrl());
      }
      if (source.getHomepage() == null) {
        source.setHomepage(source.getHttpUrl().substring(0,source.getHttpUrl().lastIndexOf(""String_Node_Str"")));
      }
    }
    if (mergeRequestHook.getProject() == null && attributes.getTarget() != null) {
      mergeRequestHook.setProject(attributes.getTarget());
    }
  }
}",0.8758389261744967
62675,"@Test public void build() throws IOException {
  FreeStyleProject testProject=jenkins.createFreeStyleProject();
  testProject.addTrigger(trigger);
  exception.expect(HttpResponses.HttpResponseException.class);
  new MergeRequestBuildAction(testProject,getJson(""String_Node_Str""),null).execute(response);
  verify(trigger).onPost(any(MergeRequestHook.class));
}","@Test public void build() throws IOException {
  try {
    FreeStyleProject testProject=jenkins.createFreeStyleProject();
    testProject.addTrigger(trigger);
    exception.expect(HttpResponses.HttpResponseException.class);
    new MergeRequestBuildAction(testProject,getJson(""String_Node_Str""),null).execute(response);
  }
  finally {
    ArgumentCaptor<MergeRequestHook> pushHookArgumentCaptor=ArgumentCaptor.forClass(MergeRequestHook.class);
    verify(trigger).onPost(pushHookArgumentCaptor.capture());
    assertThat(pushHookArgumentCaptor.getValue().getProject(),is(notNullValue()));
    assertThat(pushHookArgumentCaptor.getValue().getProject().getWebUrl(),is(notNullValue()));
  }
}",0.6361904761904762
62676,"@Test public void build() throws IOException {
  FreeStyleProject testProject=jenkins.createFreeStyleProject();
  when(trigger.getTriggerOpenMergeRequestOnPush()).thenReturn(TriggerOpenMergeRequest.never);
  testProject.addTrigger(trigger);
  exception.expect(HttpResponses.HttpResponseException.class);
  new PushBuildAction(testProject,getJson(""String_Node_Str""),null).execute(response);
  verify(trigger).onPost(any(PushHook.class));
}","@Test public void build() throws IOException {
  try {
    FreeStyleProject testProject=jenkins.createFreeStyleProject();
    when(trigger.getTriggerOpenMergeRequestOnPush()).thenReturn(TriggerOpenMergeRequest.never);
    testProject.addTrigger(trigger);
    exception.expect(HttpResponses.HttpResponseException.class);
    new PushBuildAction(testProject,getJson(""String_Node_Str""),null).execute(response);
  }
  finally {
    ArgumentCaptor<PushHook> pushHookArgumentCaptor=ArgumentCaptor.forClass(PushHook.class);
    verify(trigger).onPost(pushHookArgumentCaptor.capture());
    assertThat(pushHookArgumentCaptor.getValue().getProject(),is(notNullValue()));
    assertThat(pushHookArgumentCaptor.getValue().getProject().getWebUrl(),is(notNullValue()));
  }
}",0.705
62677,"@Initializer(after=InitMilestone.JOB_LOADED) public static void migrateJobs() throws IOException {
  GitLabPushTrigger.DescriptorImpl oldConfig=Trigger.all().get(GitLabPushTrigger.DescriptorImpl.class);
  if (!oldConfig.jobsMigrated) {
    GitLabConnectionConfig gitLabConfig=(GitLabConnectionConfig)Jenkins.getInstance().getDescriptor(GitLabConnectionConfig.class);
    gitLabConfig.getConnections().add(new GitLabConnection(oldConfig.gitlabHostUrl,oldConfig.gitlabHostUrl,oldConfig.gitlabApiToken,oldConfig.ignoreCertificateErrors,10,10));
    String defaultConnectionName=gitLabConfig.getConnections().get(0).getName();
    for (    AbstractProject<?,?> project : Jenkins.getInstance().getAllItems(AbstractProject.class)) {
      GitLabPushTrigger trigger=project.getTrigger(GitLabPushTrigger.class);
      if (trigger != null) {
        if (trigger.addCiMessage) {
          project.getPublishersList().add(new GitLabCommitStatusPublisher(""String_Node_Str""));
        }
        if (trigger.branchFilterType == null) {
          trigger.branchFilterType=trigger.branchFilterName;
        }
        project.addProperty(new GitLabConnectionProperty(defaultConnectionName));
        project.save();
      }
    }
    gitLabConfig.save();
    oldConfig.jobsMigrated=true;
    oldConfig.save();
  }
}","@Initializer(after=InitMilestone.JOB_LOADED) public static void migrateJobs() throws IOException {
  GitLabPushTrigger.DescriptorImpl oldConfig=Trigger.all().get(GitLabPushTrigger.DescriptorImpl.class);
  if (!oldConfig.jobsMigrated) {
    GitLabConnectionConfig gitLabConfig=(GitLabConnectionConfig)Jenkins.getInstance().getDescriptor(GitLabConnectionConfig.class);
    gitLabConfig.getConnections().add(new GitLabConnection(oldConfig.gitlabHostUrl,oldConfig.gitlabHostUrl,oldConfig.gitlabApiToken,oldConfig.ignoreCertificateErrors,10,10));
    String defaultConnectionName=gitLabConfig.getConnections().get(0).getName();
    for (    AbstractProject<?,?> project : Jenkins.getInstance().getAllItems(AbstractProject.class)) {
      GitLabPushTrigger trigger=project.getTrigger(GitLabPushTrigger.class);
      if (trigger != null) {
        if (trigger.addCiMessage) {
          project.getPublishersList().add(new GitLabCommitStatusPublisher(""String_Node_Str""));
        }
        project.addProperty(new GitLabConnectionProperty(defaultConnectionName));
        project.save();
      }
    }
    gitLabConfig.save();
    oldConfig.jobsMigrated=true;
    oldConfig.save();
  }
}",0.8050060557125555
62678,"@Override protected Object readResolve() throws ObjectStreamException {
  initializeTriggerHandler();
  initializeBranchFilter();
  return super.readResolve();
}","@Override protected Object readResolve() throws ObjectStreamException {
  if (branchFilterType == null) {
    branchFilterType=StringUtils.isNotBlank(branchFilterName) ? BranchFilterType.valueOf(branchFilterName) : BranchFilterType.All;
  }
  initializeTriggerHandler();
  initializeBranchFilter();
  return super.readResolve();
}",0.6558044806517311
62679,"@Test public void mergeRequest_build() throws IOException, InterruptedException, GitAPIException, ExecutionException {
  Git.init().setDirectory(tmp.getRoot()).call();
  tmp.newFile(""String_Node_Str"");
  Git git=Git.open(tmp.getRoot());
  git.add().addFilepattern(""String_Node_Str"");
  RevCommit commit=git.commit().setMessage(""String_Node_Str"").call();
  ObjectId head=git.getRepository().resolve(Constants.HEAD);
  String repositoryUrl=tmp.getRoot().toURI().toString();
  final OneShotEvent buildTriggered=new OneShotEvent();
  FreeStyleProject project=jenkins.createFreeStyleProject();
  project.setScm(new GitSCM(repositoryUrl));
  project.getBuildersList().add(new TestBuilder(){
    @Override public boolean perform(    AbstractBuild<?,?> build,    Launcher launcher,    BuildListener listener) throws InterruptedException, IOException {
      buildTriggered.signal();
      return true;
    }
  }
);
  project.setQuietPeriod(0);
  mergeRequestHookTriggerHandler.handle(project,mergeRequestHook().withObjectAttributes(mergeRequestObjectAttributes().withTargetBranch(""String_Node_Str"" + git.nameRev().add(head).call().get(head)).withState(State.opened).withIid(1).withTitle(""String_Node_Str"").withTargetProjectId(1).withSourceProjectId(1).withSourceBranch(""String_Node_Str"").withTargetBranch(""String_Node_Str"").withLastCommit(commit().withAuthor(user().withName(""String_Node_Str"").build()).withId(commit.getName()).build()).withSource(project().withName(""String_Node_Str"").withNamespace(""String_Node_Str"").withHomepage(""String_Node_Str"").withUrl(""String_Node_Str"").withSshUrl(""String_Node_Str"").withHttpUrl(""String_Node_Str"").build()).withTarget(project().withName(""String_Node_Str"").withNamespace(""String_Node_Str"").withHomepage(""String_Node_Str"").withUrl(""String_Node_Str"").withSshUrl(""String_Node_Str"").withHttpUrl(""String_Node_Str"").build()).build()).build(),true,BranchFilterFactory.newBranchFilter(branchFilterConfig().build(BranchFilterType.All)));
  buildTriggered.block(10000);
  assertThat(buildTriggered.isSignaled(),is(true));
}","@Test public void mergeRequest_build() throws IOException, InterruptedException, GitAPIException, ExecutionException {
  Git.init().setDirectory(tmp.getRoot()).call();
  tmp.newFile(""String_Node_Str"");
  Git git=Git.open(tmp.getRoot());
  git.add().addFilepattern(""String_Node_Str"");
  RevCommit commit=git.commit().setMessage(""String_Node_Str"").call();
  ObjectId head=git.getRepository().resolve(Constants.HEAD);
  String repositoryUrl=tmp.getRoot().toURI().toString();
  final OneShotEvent buildTriggered=new OneShotEvent();
  FreeStyleProject project=jenkins.createFreeStyleProject();
  project.setScm(new GitSCM(repositoryUrl));
  project.getBuildersList().add(new TestBuilder(){
    @Override public boolean perform(    AbstractBuild<?,?> build,    Launcher launcher,    BuildListener listener) throws InterruptedException, IOException {
      buildTriggered.signal();
      return true;
    }
  }
);
  project.setQuietPeriod(0);
  mergeRequestHookTriggerHandler.handle(project,mergeRequestHook().withObjectAttributes(mergeRequestObjectAttributes().withTargetBranch(""String_Node_Str"" + git.nameRev().add(head).call().get(head)).withState(State.opened).withIid(1).withTitle(""String_Node_Str"").withTargetProjectId(1).withSourceProjectId(1).withSourceBranch(""String_Node_Str"").withTargetBranch(""String_Node_Str"").withLastCommit(commit().withAuthor(user().withName(""String_Node_Str"").build()).withId(commit.getName()).build()).withSource(project().withName(""String_Node_Str"").withNamespace(""String_Node_Str"").withHomepage(""String_Node_Str"").withUrl(""String_Node_Str"").withSshUrl(""String_Node_Str"").withHttpUrl(""String_Node_Str"").build()).withTarget(project().withName(""String_Node_Str"").withNamespace(""String_Node_Str"").withHomepage(""String_Node_Str"").withUrl(""String_Node_Str"").withSshUrl(""String_Node_Str"").withHttpUrl(""String_Node_Str"").build()).build()).withProject(project().withWebUrl(""String_Node_Str"").build()).build(),true,BranchFilterFactory.newBranchFilter(branchFilterConfig().build(BranchFilterType.All)));
  buildTriggered.block(10000);
  assertThat(buildTriggered.isSignaled(),is(true));
}",0.9853047458443748
62680,"@Test public void note_build() throws IOException, InterruptedException, GitAPIException, ExecutionException {
  Git.init().setDirectory(tmp.getRoot()).call();
  tmp.newFile(""String_Node_Str"");
  Git git=Git.open(tmp.getRoot());
  git.add().addFilepattern(""String_Node_Str"");
  RevCommit commit=git.commit().setMessage(""String_Node_Str"").call();
  ObjectId head=git.getRepository().resolve(Constants.HEAD);
  String repositoryUrl=tmp.getRoot().toURI().toString();
  final OneShotEvent buildTriggered=new OneShotEvent();
  FreeStyleProject project=jenkins.createFreeStyleProject();
  project.setScm(new GitSCM(repositoryUrl));
  project.getBuildersList().add(new TestBuilder(){
    @Override public boolean perform(    AbstractBuild<?,?> build,    Launcher launcher,    BuildListener listener) throws InterruptedException, IOException {
      buildTriggered.signal();
      return true;
    }
  }
);
  Date currentDate=new Date();
  project.setQuietPeriod(0);
  noteHookTriggerHandler.handle(project,noteHook().withObjectAttributes(noteObjectAttributes().withId(1).withNote(""String_Node_Str"").withAuthorId(1).withProjectId(1).withCreatedAt(currentDate).withUpdatedAt(currentDate).withUrl(""String_Node_Str"").build()).withMergeRequest(mergeRequestObjectAttributes().withTargetBranch(""String_Node_Str"" + git.nameRev().add(head).call().get(head)).withState(State.opened).withIid(1).withTitle(""String_Node_Str"").withTargetProjectId(1).withSourceProjectId(1).withSourceBranch(""String_Node_Str"").withTargetBranch(""String_Node_Str"").withLastCommit(commit().withAuthor(user().withName(""String_Node_Str"").build()).withId(commit.getName()).build()).withSource(project().withName(""String_Node_Str"").withNamespace(""String_Node_Str"").withHomepage(""String_Node_Str"").withUrl(""String_Node_Str"").withSshUrl(""String_Node_Str"").withHttpUrl(""String_Node_Str"").build()).withTarget(project().withName(""String_Node_Str"").withNamespace(""String_Node_Str"").withHomepage(""String_Node_Str"").withUrl(""String_Node_Str"").withSshUrl(""String_Node_Str"").withHttpUrl(""String_Node_Str"").build()).build()).build(),true,BranchFilterFactory.newBranchFilter(branchFilterConfig().build(BranchFilterType.All)));
  buildTriggered.block(10000);
  assertThat(buildTriggered.isSignaled(),is(true));
}","@Test public void note_build() throws IOException, InterruptedException, GitAPIException, ExecutionException {
  Git.init().setDirectory(tmp.getRoot()).call();
  tmp.newFile(""String_Node_Str"");
  Git git=Git.open(tmp.getRoot());
  git.add().addFilepattern(""String_Node_Str"");
  RevCommit commit=git.commit().setMessage(""String_Node_Str"").call();
  ObjectId head=git.getRepository().resolve(Constants.HEAD);
  String repositoryUrl=tmp.getRoot().toURI().toString();
  final OneShotEvent buildTriggered=new OneShotEvent();
  FreeStyleProject project=jenkins.createFreeStyleProject();
  project.setScm(new GitSCM(repositoryUrl));
  project.getBuildersList().add(new TestBuilder(){
    @Override public boolean perform(    AbstractBuild<?,?> build,    Launcher launcher,    BuildListener listener) throws InterruptedException, IOException {
      buildTriggered.signal();
      return true;
    }
  }
);
  Date currentDate=new Date();
  project.setQuietPeriod(0);
  noteHookTriggerHandler.handle(project,noteHook().withObjectAttributes(noteObjectAttributes().withId(1).withNote(""String_Node_Str"").withAuthorId(1).withProjectId(1).withCreatedAt(currentDate).withUpdatedAt(currentDate).withUrl(""String_Node_Str"").build()).withMergeRequest(mergeRequestObjectAttributes().withTargetBranch(""String_Node_Str"" + git.nameRev().add(head).call().get(head)).withState(State.opened).withIid(1).withTitle(""String_Node_Str"").withTargetProjectId(1).withSourceProjectId(1).withSourceBranch(""String_Node_Str"").withTargetBranch(""String_Node_Str"").withLastCommit(commit().withAuthor(user().withName(""String_Node_Str"").build()).withId(commit.getName()).build()).withSource(project().withName(""String_Node_Str"").withNamespace(""String_Node_Str"").withHomepage(""String_Node_Str"").withUrl(""String_Node_Str"").withSshUrl(""String_Node_Str"").withHttpUrl(""String_Node_Str"").build()).withTarget(project().withName(""String_Node_Str"").withNamespace(""String_Node_Str"").withHomepage(""String_Node_Str"").withUrl(""String_Node_Str"").withSshUrl(""String_Node_Str"").withHttpUrl(""String_Node_Str"").withWebUrl(""String_Node_Str"").build()).build()).build(),true,BranchFilterFactory.newBranchFilter(branchFilterConfig().build(BranchFilterType.All)));
  buildTriggered.block(10000);
  assertThat(buildTriggered.isSignaled(),is(true));
}",0.9933862433862434
62681,"@Test public void push_build() throws IOException, InterruptedException, GitAPIException, ExecutionException {
  Git.init().setDirectory(tmp.getRoot()).call();
  tmp.newFile(""String_Node_Str"");
  Git git=Git.open(tmp.getRoot());
  git.add().addFilepattern(""String_Node_Str"");
  RevCommit commit=git.commit().setMessage(""String_Node_Str"").call();
  ObjectId head=git.getRepository().resolve(Constants.HEAD);
  String repositoryUrl=tmp.getRoot().toURI().toString();
  final OneShotEvent buildTriggered=new OneShotEvent();
  FreeStyleProject project=jenkins.createFreeStyleProject();
  project.setScm(new GitSCM(repositoryUrl));
  project.getBuildersList().add(new TestBuilder(){
    @Override public boolean perform(    AbstractBuild<?,?> build,    Launcher launcher,    BuildListener listener) throws InterruptedException, IOException {
      buildTriggered.signal();
      return true;
    }
  }
);
  project.setQuietPeriod(0);
  pushHookTriggerHandler.handle(project,pushHook().withBefore(""String_Node_Str"").withProjectId(1).withUserName(""String_Node_Str"").withRepository(repository().withName(""String_Node_Str"").withHomepage(""String_Node_Str"").withUrl(""String_Node_Str"").withGitSshUrl(""String_Node_Str"").withGitHttpUrl(""String_Node_Str"").build()).withProject(project().withNamespace(""String_Node_Str"").build()).withAfter(commit.name()).withRef(""String_Node_Str"" + git.nameRev().add(head).call().get(head)).build(),true,newBranchFilter(branchFilterConfig().build(BranchFilterType.All)));
  buildTriggered.block(10000);
  assertThat(buildTriggered.isSignaled(),is(true));
}","@Test public void push_build() throws IOException, InterruptedException, GitAPIException, ExecutionException {
  Git.init().setDirectory(tmp.getRoot()).call();
  tmp.newFile(""String_Node_Str"");
  Git git=Git.open(tmp.getRoot());
  git.add().addFilepattern(""String_Node_Str"");
  RevCommit commit=git.commit().setMessage(""String_Node_Str"").call();
  ObjectId head=git.getRepository().resolve(Constants.HEAD);
  String repositoryUrl=tmp.getRoot().toURI().toString();
  final OneShotEvent buildTriggered=new OneShotEvent();
  FreeStyleProject project=jenkins.createFreeStyleProject();
  project.setScm(new GitSCM(repositoryUrl));
  project.getBuildersList().add(new TestBuilder(){
    @Override public boolean perform(    AbstractBuild<?,?> build,    Launcher launcher,    BuildListener listener) throws InterruptedException, IOException {
      buildTriggered.signal();
      return true;
    }
  }
);
  project.setQuietPeriod(0);
  pushHookTriggerHandler.handle(project,pushHook().withBefore(""String_Node_Str"").withProjectId(1).withUserName(""String_Node_Str"").withRepository(repository().withName(""String_Node_Str"").withHomepage(""String_Node_Str"").withUrl(""String_Node_Str"").withGitSshUrl(""String_Node_Str"").withGitHttpUrl(""String_Node_Str"").build()).withProject(project().withNamespace(""String_Node_Str"").withWebUrl(""String_Node_Str"").build()).withAfter(commit.name()).withRef(""String_Node_Str"" + git.nameRev().add(head).call().get(head)).build(),true,newBranchFilter(branchFilterConfig().build(BranchFilterType.All)));
  buildTriggered.block(10000);
  assertThat(buildTriggered.isSignaled(),is(true));
}",0.9905541561712846
62682,"private static List<String> retrieveGitlabProjectIds(Run<?,?> build,EnvVars environment){
  List<String> result=new ArrayList<>();
  for (  String remoteUrl : build.getAction(BuildData.class).getRemoteUrls()) {
    try {
      result.add(ProjectIdUtil.retrieveProjectId(environment.expand(remoteUrl)));
    }
 catch (    ProjectIdUtil.ProjectIdResolutionException e) {
    }
  }
  return result;
}","private static List<String> retrieveGitlabProjectIds(Run<?,?> build,EnvVars environment){
  List<String> result=new ArrayList<>();
  GitLabApi gitLabClient=getClient(build);
  if (gitLabClient == null) {
    return result;
  }
  for (  String remoteUrl : build.getAction(BuildData.class).getRemoteUrls()) {
    try {
      String projectNameWithNameSpace=ProjectIdUtil.retrieveProjectId(environment.expand(remoteUrl));
      if (StringUtils.isNotBlank(projectNameWithNameSpace)) {
        String projectId=projectNameWithNameSpace;
        if (projectNameWithNameSpace.contains(""String_Node_Str"")) {
          projectId=gitLabClient.getProject(projectNameWithNameSpace).getId().toString();
        }
        result.add(projectId);
      }
    }
 catch (    ProjectIdUtil.ProjectIdResolutionException e) {
    }
  }
  return result;
}",0.6260162601626016
62683,"public static void updateCommitStatus(Run<?,?> build,TaskListener listener,BuildState state){
  String commitHash=getBuildRevision(build);
  String buildUrl=getBuildUrl(build);
  try {
    for (    String gitlabProjectId : retrieveGitlabProjectIds(build,build.getEnvironment(listener))) {
      try {
        GitLabApi client=getClient(build);
        if (client == null) {
          println(listener,""String_Node_Str"");
        }
 else         if (existsCommit(client,gitlabProjectId,commitHash)) {
          client.changeBuildStatus(gitlabProjectId,commitHash,state,getBuildBranch(build),""String_Node_Str"",buildUrl,null);
        }
      }
 catch (      WebApplicationException e) {
        printf(listener,""String_Node_Str"",gitlabProjectId,e.getMessage());
        LOGGER.log(Level.SEVERE,String.format(""String_Node_Str"",gitlabProjectId),e);
      }
    }
  }
 catch (  IOException|InterruptedException e) {
    printf(listener,""String_Node_Str"",e.getMessage());
  }
}","public static void updateCommitStatus(Run<?,?> build,TaskListener listener,BuildState state){
  GitLabApi client=getClient(build);
  if (client == null) {
    println(listener,""String_Node_Str"");
    return;
  }
  String commitHash=getBuildRevision(build);
  String buildUrl=getBuildUrl(build);
  try {
    for (    String gitlabProjectId : retrieveGitlabProjectIds(build,build.getEnvironment(listener))) {
      try {
        if (existsCommit(client,gitlabProjectId,commitHash)) {
          client.changeBuildStatus(gitlabProjectId,commitHash,state,getBuildBranch(build),""String_Node_Str"",buildUrl,null);
        }
      }
 catch (      WebApplicationException e) {
        printf(listener,""String_Node_Str"",gitlabProjectId,e.getMessage());
        LOGGER.log(Level.SEVERE,String.format(""String_Node_Str"",gitlabProjectId),e);
      }
    }
  }
 catch (  IOException|InterruptedException e) {
    printf(listener,""String_Node_Str"",e.getMessage());
  }
}",0.867983367983368
62684,"private WebHookAction onPost(Job<?,?> project,StaplerRequest request){
  String requestBody=getRequestBody(request);
  String eventHeader=request.getHeader(""String_Node_Str"");
  if (StringUtils.equals(eventHeader,""String_Node_Str"")) {
    return new MergeRequestBuildAction(project,requestBody);
  }
 else   if (StringUtils.equals(eventHeader,""String_Node_Str"")) {
    return new PushBuildAction(project,requestBody);
  }
  LOGGER.log(Level.FINE,""String_Node_Str"",eventHeader);
  return new NoopAction();
}","private WebHookAction onPost(Job<?,?> project,StaplerRequest request){
  String requestBody=getRequestBody(request);
  String eventHeader=request.getHeader(""String_Node_Str"");
  if (StringUtils.equals(eventHeader,""String_Node_Str"")) {
    return new MergeRequestBuildAction(project,requestBody);
  }
 else   if (StringUtils.equals(eventHeader,""String_Node_Str"") || StringUtils.equals(eventHeader,""String_Node_Str"")) {
    return new PushBuildAction(project,requestBody);
  }
  LOGGER.log(Level.FINE,""String_Node_Str"",eventHeader);
  return new NoopAction();
}",0.9502347417840376
62685,"private void handleMergeRequest(Job<?,?> job,PushHook hook,boolean ciSkip,BranchFilter branchFilter,GitLabApi client,Integer projectId,MergeRequest mergeRequest){
  if (ciSkip && mergeRequest.getDescription() != null && mergeRequest.getDescription().contains(""String_Node_Str"")) {
    LOGGER.log(Level.INFO,""String_Node_Str"" + mergeRequest.getTitle() + ""String_Node_Str"");
    return;
  }
  String targetBranch=mergeRequest.getTargetBranch();
  String sourceBranch=mergeRequest.getSourceBranch();
  if (targetBranch != null && branchFilter.isBranchAllowed(targetBranch) && hook.getRef().endsWith(targetBranch) && sourceBranch != null) {
    LOGGER.log(Level.INFO,""String_Node_Str"",LoggerUtil.toArray(job.getFullName(),mergeRequest.getId()));
    Branch branch=client.getBranch(projectId.toString(),sourceBranch);
    Project project=client.getProject(mergeRequest.getSourceProjectId().toString());
    scheduleBuild(job,new CauseAction(new GitLabWebHookCause(retrieveCauseData(hook,project,mergeRequest,branch))));
  }
}","private void handleMergeRequest(Job<?,?> job,PushHook hook,boolean ciSkip,BranchFilter branchFilter,GitLabApi client,Integer projectId,MergeRequest mergeRequest){
  if (ciSkip && mergeRequest.getDescription() != null && mergeRequest.getDescription().contains(""String_Node_Str"")) {
    LOGGER.log(Level.INFO,""String_Node_Str"" + mergeRequest.getTitle() + ""String_Node_Str"");
    return;
  }
  String targetBranch=mergeRequest.getTargetBranch();
  String sourceBranch=mergeRequest.getSourceBranch();
  if (targetBranch != null && branchFilter.isBranchAllowed(targetBranch) && hook.getRef().endsWith(targetBranch) && sourceBranch != null) {
    LOGGER.log(Level.INFO,""String_Node_Str"",LoggerUtil.toArray(job.getFullName(),mergeRequest.getId()));
    Branch branch=client.getBranch(mergeRequest.getSourceProjectId().toString(),sourceBranch);
    Project project=client.getProject(mergeRequest.getSourceProjectId().toString());
    scheduleBuild(job,new CauseAction(new GitLabWebHookCause(retrieveCauseData(hook,project,mergeRequest,branch))));
  }
}",0.9874031007751938
62686,"protected void buildOpenMergeRequests(GitLabPushTrigger trigger,Integer projectId,String projectRef){
  try {
    GitLab api=new GitLab();
    List<GitlabMergeRequest> mergeRequests=api.instance().getOpenMergeRequests(projectId);
    for (    org.gitlab.api.models.GitlabMergeRequest mr : mergeRequests) {
      if (projectRef.endsWith(mr.getSourceBranch()) || (trigger.getTriggerOpenMergeRequestOnPush().equals(""String_Node_Str"") && projectRef.endsWith(mr.getTargetBranch()))) {
        if (trigger.getCiSkip() && mr.getDescription().contains(""String_Node_Str"")) {
          LOGGER.log(Level.INFO,""String_Node_Str"" + mr.getTitle() + ""String_Node_Str"");
          continue;
        }
        GitlabBranch branch=api.instance().getBranch(api.instance().getProject(projectId),mr.getSourceBranch());
        LastCommit lastCommit=new LastCommit();
        lastCommit.setId(branch.getCommit().getId());
        lastCommit.setMessage(branch.getCommit().getMessage());
        lastCommit.setUrl(GitlabProject.URL + ""String_Node_Str"" + projectId+ ""String_Node_Str""+ GitlabCommit.URL+ ""String_Node_Str""+ branch.getCommit().getId());
        LOGGER.log(Level.FINE,""String_Node_Str"" + mr.toString() + ""String_Node_Str""+ mr.getSourceBranch()+ ""String_Node_Str""+ mr.getTargetBranch()+ ""String_Node_Str""+ mr.getState()+ ""String_Node_Str""+ (mr.getAssignee() != null ? mr.getAssignee().getName() : ""String_Node_Str"")+ ""String_Node_Str""+ (mr.getAuthor() != null ? mr.getAuthor().getName() : ""String_Node_Str"")+ ""String_Node_Str""+ mr.getId()+ ""String_Node_Str""+ mr.getIid()+ ""String_Node_Str""+ lastCommit.getId()+ ""String_Node_Str"");
        GitLabMergeRequest newReq=new GitLabMergeRequest();
        newReq.setObject_kind(""String_Node_Str"");
        newReq.setObjectAttribute(new ObjectAttributes());
        if (mr.getAssignee() != null)         newReq.getObjectAttribute().setAssignee(mr.getAssignee());
        if (mr.getAuthor() != null)         newReq.getObjectAttribute().setAuthor(mr.getAuthor());
        newReq.getObjectAttribute().setDescription(mr.getDescription());
        newReq.getObjectAttribute().setId(mr.getId());
        newReq.getObjectAttribute().setIid(mr.getIid());
        newReq.getObjectAttribute().setMergeStatus(mr.getState());
        newReq.getObjectAttribute().setSourceBranch(mr.getSourceBranch());
        newReq.getObjectAttribute().setSourceProjectId(mr.getSourceProjectId());
        newReq.getObjectAttribute().setTargetBranch(mr.getTargetBranch());
        newReq.getObjectAttribute().setTargetProjectId(projectId);
        newReq.getObjectAttribute().setTitle(mr.getTitle());
        newReq.getObjectAttribute().setLastCommit(lastCommit);
        Authentication old=SecurityContextHolder.getContext().getAuthentication();
        SecurityContextHolder.getContext().setAuthentication(ACL.SYSTEM);
        try {
          trigger.onPost(newReq);
        }
  finally {
          SecurityContextHolder.getContext().setAuthentication(old);
        }
      }
    }
  }
 catch (  Exception e) {
    LOGGER.warning(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
}","protected void buildOpenMergeRequests(GitLabPushTrigger trigger,Integer projectId,String projectRef){
  try {
    GitLab api=new GitLab();
    List<GitlabMergeRequest> mergeRequests=api.instance().getOpenMergeRequests(projectId);
    for (    org.gitlab.api.models.GitlabMergeRequest mr : mergeRequests) {
      if (projectRef.endsWith(mr.getSourceBranch()) || (trigger.getTriggerOpenMergeRequestOnPush().equals(""String_Node_Str"") && projectRef.endsWith(mr.getTargetBranch()))) {
        if (trigger.getCiSkip() && mr.getDescription().contains(""String_Node_Str"")) {
          LOGGER.log(Level.INFO,""String_Node_Str"" + mr.getTitle() + ""String_Node_Str"");
          continue;
        }
        Integer srcProjectId=projectId;
        if (!projectRef.endsWith(mr.getSourceBranch())) {
          srcProjectId=mr.getSourceProjectId();
        }
        GitlabBranch branch=api.instance().getBranch(api.instance().getProject(srcProjectId),mr.getSourceBranch());
        LastCommit lastCommit=new LastCommit();
        lastCommit.setId(branch.getCommit().getId());
        lastCommit.setMessage(branch.getCommit().getMessage());
        lastCommit.setUrl(GitlabProject.URL + ""String_Node_Str"" + srcProjectId+ ""String_Node_Str""+ GitlabCommit.URL+ ""String_Node_Str""+ branch.getCommit().getId());
        LOGGER.log(Level.FINE,""String_Node_Str"" + mr.toString() + ""String_Node_Str""+ mr.getSourceBranch()+ ""String_Node_Str""+ mr.getTargetBranch()+ ""String_Node_Str""+ mr.getState()+ ""String_Node_Str""+ (mr.getAssignee() != null ? mr.getAssignee().getName() : ""String_Node_Str"")+ ""String_Node_Str""+ (mr.getAuthor() != null ? mr.getAuthor().getName() : ""String_Node_Str"")+ ""String_Node_Str""+ mr.getId()+ ""String_Node_Str""+ mr.getIid()+ ""String_Node_Str""+ lastCommit.getId()+ ""String_Node_Str"");
        GitLabMergeRequest newReq=new GitLabMergeRequest();
        newReq.setObject_kind(""String_Node_Str"");
        newReq.setObjectAttribute(new ObjectAttributes());
        if (mr.getAssignee() != null)         newReq.getObjectAttribute().setAssignee(mr.getAssignee());
        if (mr.getAuthor() != null)         newReq.getObjectAttribute().setAuthor(mr.getAuthor());
        newReq.getObjectAttribute().setDescription(mr.getDescription());
        newReq.getObjectAttribute().setId(mr.getId());
        newReq.getObjectAttribute().setIid(mr.getIid());
        newReq.getObjectAttribute().setMergeStatus(mr.getState());
        newReq.getObjectAttribute().setSourceBranch(mr.getSourceBranch());
        newReq.getObjectAttribute().setSourceProjectId(mr.getSourceProjectId());
        newReq.getObjectAttribute().setTargetBranch(mr.getTargetBranch());
        newReq.getObjectAttribute().setTargetProjectId(projectId);
        newReq.getObjectAttribute().setTitle(mr.getTitle());
        newReq.getObjectAttribute().setLastCommit(lastCommit);
        Authentication old=SecurityContextHolder.getContext().getAuthentication();
        SecurityContextHolder.getContext().setAuthentication(ACL.SYSTEM);
        try {
          trigger.onPost(newReq);
        }
  finally {
          SecurityContextHolder.getContext().setAuthentication(old);
        }
      }
    }
  }
 catch (  Exception e) {
    LOGGER.warning(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
}",0.9738993710691825
62687,"public List<String> getProjectBranches(){
  projectBranches=new ArrayList<String>();
  try {
    URIish sourceRepository=getSourceRepoURLDefault();
    if (!gitlabHostUrl.isEmpty() && (null != sourceRepository)) {
      List<GitlabProject> projects=getGitlab().instance().getProjects();
      for (      GitlabProject project : projects) {
        if (project.getSshUrl().equalsIgnoreCase(sourceRepository.toString())) {
          List<GitlabBranch> branches=getGitlab().instance().getBranches(project);
          for (          GitlabBranch branch : branches) {
            projectBranches.add(branch.getName());
          }
          break;
        }
      }
    }
  }
 catch (  Exception ex) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",new String[]{ex.toString(),ex.getMessage()});
  }
  return projectBranches;
}","public List<String> getProjectBranches(){
  projectBranches=new ArrayList<String>();
  try {
    URIish sourceRepository=getSourceRepoURLDefault();
    if (!gitlabHostUrl.isEmpty() && (null != sourceRepository)) {
      List<GitlabProject> projects=getGitlab().instance().getProjects();
      for (      GitlabProject project : projects) {
        if (project.getSshUrl().equalsIgnoreCase(sourceRepository.toString()) || project.getHttpUrl().equalsIgnoreCase(sourceRepository.toString())) {
          List<GitlabBranch> branches=getGitlab().instance().getBranches(project);
          for (          GitlabBranch branch : branches) {
            projectBranches.add(branch.getName());
          }
          break;
        }
      }
    }
  }
 catch (  Exception ex) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",new String[]{ex.toString(),ex.getMessage()});
  }
  return projectBranches;
}",0.9591121495327104
62688,"public void onPost(final GitLabMergeRequest req){
  if (triggerOnMergeRequest) {
    getDescriptor().queue.execute(new Runnable(){
      public void run(){
        LOGGER.log(Level.INFO,""String_Node_Str"",job.getName());
        String name=""String_Node_Str"" + job.getNextBuildNumber();
        GitLabMergeCause cause=createGitLabMergeCause(req);
        Action[] actions=createActions(req);
        setBuildCauseInJob(req);
        if (job.scheduleBuild(job.getQuietPeriod(),cause,actions)) {
          LOGGER.log(Level.INFO,""String_Node_Str"",new String[]{job.getName(),name});
        }
 else {
          LOGGER.log(Level.INFO,""String_Node_Str"",job.getName());
        }
      }
      private GitLabMergeCause createGitLabMergeCause(      GitLabMergeRequest req){
        GitLabMergeCause cause;
        try {
          cause=new GitLabMergeCause(req,getLogFile());
        }
 catch (        IOException ex) {
          cause=new GitLabMergeCause(req);
        }
        return cause;
      }
      private Action[] createActions(      GitLabMergeRequest req){
        List<Action> actions=new ArrayList<Action>();
        Map<String,ParameterValue> values=new HashMap<String,ParameterValue>();
        values.put(""String_Node_Str"",new StringParameterValue(""String_Node_Str"",getSourceBranch(req)));
        values.put(""String_Node_Str"",new StringParameterValue(""String_Node_Str"",req.getObjectAttribute().getTargetBranch()));
        String sourceRepoName=getDesc().getSourceRepoNameDefault();
        String sourceRepoURL=getDesc().getSourceRepoURLDefault().toString();
        if (!getDescriptor().getGitlabHostUrl().isEmpty()) {
          try {
            sourceRepoName=req.getSourceProject(getDesc().getGitlab()).getPathWithNamespace();
            sourceRepoURL=req.getSourceProject(getDesc().getGitlab()).getSshUrl();
          }
 catch (          IOException ex) {
            LOGGER.log(Level.WARNING,""String_Node_Str"",new String[]{ex.toString(),ex.getMessage()});
          }
        }
        values.put(""String_Node_Str"",new StringParameterValue(""String_Node_Str"",sourceRepoName));
        values.put(""String_Node_Str"",new StringParameterValue(""String_Node_Str"",sourceRepoURL));
        List<ParameterValue> listValues=new ArrayList<ParameterValue>(values.values());
        ParametersAction parametersAction=new ParametersAction(listValues);
        actions.add(parametersAction);
        Action[] actionsArray=actions.toArray(new Action[0]);
        return actionsArray;
      }
    }
);
  }
}","public void onPost(final GitLabMergeRequest req){
  if (triggerOnMergeRequest) {
    getDescriptor().queue.execute(new Runnable(){
      public void run(){
        LOGGER.log(Level.INFO,""String_Node_Str"",job.getName());
        String name=""String_Node_Str"" + job.getNextBuildNumber();
        GitLabMergeCause cause=createGitLabMergeCause(req);
        Action[] actions=createActions(req);
        if (job.scheduleBuild(job.getQuietPeriod(),cause,actions)) {
          LOGGER.log(Level.INFO,""String_Node_Str"",new String[]{job.getName(),name});
        }
 else {
          LOGGER.log(Level.INFO,""String_Node_Str"",job.getName());
        }
      }
      private GitLabMergeCause createGitLabMergeCause(      GitLabMergeRequest req){
        GitLabMergeCause cause;
        try {
          cause=new GitLabMergeCause(req,getLogFile());
        }
 catch (        IOException ex) {
          cause=new GitLabMergeCause(req);
        }
        return cause;
      }
      private Action[] createActions(      GitLabMergeRequest req){
        List<Action> actions=new ArrayList<Action>();
        Map<String,ParameterValue> values=new HashMap<String,ParameterValue>();
        values.put(""String_Node_Str"",new StringParameterValue(""String_Node_Str"",getSourceBranch(req)));
        values.put(""String_Node_Str"",new StringParameterValue(""String_Node_Str"",req.getObjectAttribute().getTargetBranch()));
        String sourceRepoName=getDesc().getSourceRepoNameDefault();
        String sourceRepoURL=getDesc().getSourceRepoURLDefault().toString();
        if (!getDescriptor().getGitlabHostUrl().isEmpty()) {
          try {
            sourceRepoName=req.getSourceProject(getDesc().getGitlab()).getPathWithNamespace();
            sourceRepoURL=req.getSourceProject(getDesc().getGitlab()).getSshUrl();
          }
 catch (          IOException ex) {
            LOGGER.log(Level.WARNING,""String_Node_Str"",new String[]{ex.toString(),ex.getMessage()});
          }
        }
        values.put(""String_Node_Str"",new StringParameterValue(""String_Node_Str"",sourceRepoName));
        values.put(""String_Node_Str"",new StringParameterValue(""String_Node_Str"",sourceRepoURL));
        List<ParameterValue> listValues=new ArrayList<ParameterValue>(values.values());
        ParametersAction parametersAction=new ParametersAction(listValues);
        actions.add(parametersAction);
        Action[] actionsArray=actions.toArray(new Action[0]);
        return actionsArray;
      }
    }
);
  }
}",0.9933774834437086
62689,"public void run(){
  LOGGER.log(Level.INFO,""String_Node_Str"",job.getName());
  String name=""String_Node_Str"" + job.getNextBuildNumber();
  GitLabMergeCause cause=createGitLabMergeCause(req);
  Action[] actions=createActions(req);
  setBuildCauseInJob(req);
  if (job.scheduleBuild(job.getQuietPeriod(),cause,actions)) {
    LOGGER.log(Level.INFO,""String_Node_Str"",new String[]{job.getName(),name});
  }
 else {
    LOGGER.log(Level.INFO,""String_Node_Str"",job.getName());
  }
}","public void run(){
  LOGGER.log(Level.INFO,""String_Node_Str"",job.getName());
  String name=""String_Node_Str"" + job.getNextBuildNumber();
  GitLabMergeCause cause=createGitLabMergeCause(req);
  Action[] actions=createActions(req);
  if (job.scheduleBuild(job.getQuietPeriod(),cause,actions)) {
    LOGGER.log(Level.INFO,""String_Node_Str"",new String[]{job.getName(),name});
  }
 else {
    LOGGER.log(Level.INFO,""String_Node_Str"",job.getName());
  }
}",0.9708108108108108
62690,"private void setBuildCauseInJob(GitLabRequest req){
  if (setJobDescription) {
    String name=req.getJenkinsBuildViewName();
    if (name != null && name.length() > 0) {
      try {
        job.setDisplayName(name);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}","private void setBuildCauseInJob(AbstractBuild abstractBuild){
  if (setBuildDescription) {
    Cause pcause=abstractBuild.getCause(GitLabPushCause.class);
    Cause mcause=abstractBuild.getCause(GitLabMergeCause.class);
    String desc=null;
    if (pcause != null)     desc=pcause.getShortDescription();
    if (mcause != null)     desc=mcause.getShortDescription();
    if (desc != null && desc.length() > 0) {
      try {
        abstractBuild.setDescription(desc);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}",0.4930232558139535
62691,"@DataBoundConstructor public GitLabPushTrigger(boolean triggerOnPush,boolean triggerOnMergeRequest,boolean triggerOpenMergeRequestOnPush,boolean setJobDescription,List<String> allowedBranches){
  this.triggerOnPush=triggerOnPush;
  this.triggerOnMergeRequest=triggerOnMergeRequest;
  this.triggerOpenMergeRequestOnPush=triggerOpenMergeRequestOnPush;
  this.setJobDescription=setJobDescription;
  this.allowedBranches=allowedBranches;
}","@DataBoundConstructor public GitLabPushTrigger(boolean triggerOnPush,boolean triggerOnMergeRequest,boolean triggerOpenMergeRequestOnPush,boolean setBuildDescription,List<String> allowedBranches){
  this.triggerOnPush=triggerOnPush;
  this.triggerOnMergeRequest=triggerOnMergeRequest;
  this.triggerOpenMergeRequestOnPush=triggerOpenMergeRequestOnPush;
  this.setBuildDescription=setBuildDescription;
  this.allowedBranches=allowedBranches;
}",0.9726027397260274
62692,"public void onPost(final GitLabPushRequest req){
  getDescriptor().queue.execute(new Runnable(){
    private boolean polling(){
      try {
        StreamTaskListener listener=new StreamTaskListener(getLogFile());
        try {
          PrintStream logger=listener.getLogger();
          long start=System.currentTimeMillis();
          logger.println(""String_Node_Str"" + DateFormat.getDateTimeInstance().format(new Date()));
          boolean result=job.poll(listener).hasChanges();
          logger.println(""String_Node_Str"" + Util.getTimeSpanString(System.currentTimeMillis() - start));
          if (result) {
            logger.println(""String_Node_Str"");
          }
 else {
            logger.println(""String_Node_Str"");
          }
          return result;
        }
 catch (        Error e) {
          e.printStackTrace(listener.error(""String_Node_Str""));
          LOGGER.log(Level.SEVERE,""String_Node_Str"",e);
          throw e;
        }
catch (        RuntimeException e) {
          e.printStackTrace(listener.error(""String_Node_Str""));
          LOGGER.log(Level.SEVERE,""String_Node_Str"",e);
          throw e;
        }
 finally {
          listener.closeQuietly();
        }
      }
 catch (      IOException e) {
        LOGGER.log(Level.SEVERE,""String_Node_Str"",e);
      }
      return false;
    }
    public void run(){
      LOGGER.log(Level.INFO,""String_Node_Str"",job.getName());
      if (polling()) {
        String name=""String_Node_Str"" + job.getNextBuildNumber();
        GitLabPushCause cause=createGitLabPushCause(req);
        if (job.scheduleBuild(job.getQuietPeriod(),cause)) {
          LOGGER.log(Level.INFO,""String_Node_Str"",new String[]{job.getName(),name});
        }
 else {
          LOGGER.log(Level.INFO,""String_Node_Str"",job.getName());
        }
      }
    }
    private GitLabPushCause createGitLabPushCause(    GitLabPushRequest req){
      GitLabPushCause cause;
      String triggeredByUser=req.getPusher().getName();
      try {
        cause=new GitLabPushCause(triggeredByUser,getLogFile());
      }
 catch (      IOException ex) {
        cause=new GitLabPushCause(triggeredByUser);
      }
      return cause;
    }
  }
);
}","public void onPost(final GitLabPushRequest req){
  getDescriptor().queue.execute(new Runnable(){
    private boolean polling(){
      try {
        StreamTaskListener listener=new StreamTaskListener(getLogFile());
        try {
          PrintStream logger=listener.getLogger();
          long start=System.currentTimeMillis();
          logger.println(""String_Node_Str"" + DateFormat.getDateTimeInstance().format(new Date()));
          boolean result=job.poll(listener).hasChanges();
          logger.println(""String_Node_Str"" + Util.getTimeSpanString(System.currentTimeMillis() - start));
          if (result) {
            logger.println(""String_Node_Str"");
          }
 else {
            logger.println(""String_Node_Str"");
          }
          return result;
        }
 catch (        Error e) {
          e.printStackTrace(listener.error(""String_Node_Str""));
          LOGGER.log(Level.SEVERE,""String_Node_Str"",e);
          throw e;
        }
catch (        RuntimeException e) {
          e.printStackTrace(listener.error(""String_Node_Str""));
          LOGGER.log(Level.SEVERE,""String_Node_Str"",e);
          throw e;
        }
 finally {
          listener.closeQuietly();
        }
      }
 catch (      IOException e) {
        LOGGER.log(Level.SEVERE,""String_Node_Str"",e);
      }
      return false;
    }
    public void run(){
      LOGGER.log(Level.INFO,""String_Node_Str"",job.getName());
      if (polling()) {
        String name=""String_Node_Str"" + job.getNextBuildNumber();
        GitLabPushCause cause=createGitLabPushCause(req);
        if (job.scheduleBuild(job.getQuietPeriod(),cause)) {
          LOGGER.log(Level.INFO,""String_Node_Str"",new String[]{job.getName(),name});
        }
 else {
          LOGGER.log(Level.INFO,""String_Node_Str"",job.getName());
        }
      }
    }
    private GitLabPushCause createGitLabPushCause(    GitLabPushRequest req){
      GitLabPushCause cause;
      String triggeredByUser=req.getCommits().get(0).getAuthor().getName();
      try {
        cause=new GitLabPushCause(triggeredByUser,getLogFile());
      }
 catch (      IOException ex) {
        cause=new GitLabPushCause(triggeredByUser);
      }
      return cause;
    }
  }
);
}",0.9936102236421726
62693,"private GitLabPushCause createGitLabPushCause(GitLabPushRequest req){
  GitLabPushCause cause;
  String triggeredByUser=req.getPusher().getName();
  try {
    cause=new GitLabPushCause(triggeredByUser,getLogFile());
  }
 catch (  IOException ex) {
    cause=new GitLabPushCause(triggeredByUser);
  }
  return cause;
}","private GitLabPushCause createGitLabPushCause(GitLabPushRequest req){
  GitLabPushCause cause;
  String triggeredByUser=req.getCommits().get(0).getAuthor().getName();
  try {
    cause=new GitLabPushCause(triggeredByUser,getLogFile());
  }
 catch (  IOException ex) {
    cause=new GitLabPushCause(triggeredByUser);
  }
  return cause;
}",0.9541284403669724
62694,"/** 
 * Converts the query string into a QueryParameters object.
 */
private QueryParameters parseQuery(String query) throws ParseException, InvalidParametersException {
  QueryParameters q=new QueryParameters();
  versions=new ArrayList<>();
  if (query == null || query.isEmpty()) {
    return q;
  }
  String[] tokens=query.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"",-1);
  for (  String token : tokens) {
    String[] pair=token.split(""String_Node_Str"",-1);
    if (pair.length != 2) {
      throw new InvalidParametersException(""String_Node_Str"");
    }
    String[] values=pair[1].split(""String_Node_Str"",-1);
    values=StringHelper.trim(values);
    String label=pair[0].trim();
    if (""String_Node_Str"".equals(label)) {
      for (      String value : values) {
        versions.add(value.replace(""String_Node_Str"",""String_Node_Str""));
      }
    }
 else     if (""String_Node_Str"".equals(label)) {
      fromDateValue=LocalDate.parse(values[0],DateTimeFormatter.ofPattern(""String_Node_Str"")).atStartOfDay(Const.SystemParams.ADMIN_TIME_ZONE).toInstant().toEpochMilli();
      isFromDateSpecifiedInQuery=true;
    }
 else     if (""String_Node_Str"".equals(label)) {
      toDateValue=LocalDate.parse(values[0],DateTimeFormatter.ofPattern(""String_Node_Str"")).atTime(LocalTime.MAX).atZone(Const.SystemParams.ADMIN_TIME_ZONE).toInstant().toEpochMilli();
    }
 else {
      q.add(label,values);
    }
  }
  return q;
}","/** 
 * Converts the query string into a QueryParameters object.
 */
private QueryParameters parseQuery(String query) throws ParseException, InvalidParametersException {
  QueryParameters q=new QueryParameters();
  versions=new ArrayList<>();
  if (query == null || query.isEmpty()) {
    return q;
  }
  String[] tokens=query.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"",-1);
  for (  String token : tokens) {
    String[] pair=token.split(""String_Node_Str"",-1);
    if (pair.length != 2) {
      throw new InvalidParametersException(""String_Node_Str"");
    }
    String label=pair[0].trim().toLowerCase();
    String[] values=pair[1].split(""String_Node_Str"",-1);
    values=StringHelper.trim(values);
    if (!(""String_Node_Str"".equals(label))) {
      values=StringHelper.toLowerCase(values);
    }
    if (""String_Node_Str"".equals(label)) {
      for (      String value : values) {
        versions.add(value.replace(""String_Node_Str"",""String_Node_Str""));
      }
    }
 else     if (""String_Node_Str"".equals(label)) {
      fromDateValue=LocalDate.parse(values[0],DateTimeFormatter.ofPattern(""String_Node_Str"")).atStartOfDay(Const.SystemParams.ADMIN_TIME_ZONE).toInstant().toEpochMilli();
      isFromDateSpecifiedInQuery=true;
    }
 else     if (""String_Node_Str"".equals(label)) {
      toDateValue=LocalDate.parse(values[0],DateTimeFormatter.ofPattern(""String_Node_Str"")).atTime(LocalTime.MAX).atZone(Const.SystemParams.ADMIN_TIME_ZONE).toInstant().toEpochMilli();
    }
 else {
      q.add(label,values);
    }
  }
  return q;
}",0.9523215955126209
62695,"/** 
 * Creates a QueryParameters object used for filtering.
 */
public void generateQueryParameters(String query){
  filterQuery=query.trim();
  try {
    q=parseQuery(filterQuery.toLowerCase());
  }
 catch (  ParseException|InvalidParametersException e) {
    this.queryMessage=""String_Node_Str"" + e.getMessage();
  }
}","/** 
 * Creates a QueryParameters object used for filtering.
 */
public void generateQueryParameters(String query){
  filterQuery=query.trim();
  try {
    q=parseQuery(filterQuery);
  }
 catch (  ParseException|InvalidParametersException e) {
    this.queryMessage=""String_Node_Str"" + e.getMessage();
  }
}",0.9777070063694268
62696,"@Override public void execute(){
  String inviterId=getRequestParamValue(ParamsNames.INVITER_ID);
  Assumption.assertPostParamNotNull(ParamsNames.INVITER_ID,inviterId);
  String courseId=getRequestParamValue(ParamsNames.COURSE_ID);
  Assumption.assertPostParamNotNull(ParamsNames.COURSE_ID,courseId);
  String instructorEmail=getRequestParamValue(ParamsNames.INSTRUCTOR_EMAIL);
  Assumption.assertPostParamNotNull(ParamsNames.INSTRUCTOR_EMAIL,instructorEmail);
  AccountAttributes inviter=logic.getAccount(inviterId);
  Assumption.assertNotNull(inviter);
  CourseAttributes course=logic.getCourse(courseId);
  Assumption.assertNotNull(course);
  InstructorAttributes instructor=logic.getInstructorById(courseId,instructorEmail);
  Assumption.assertNotNull(instructor);
  EmailWrapper email=new EmailGenerator().generateInstructorCourseJoinEmail(inviter,instructor,course);
  try {
    emailSender.sendEmail(email);
  }
 catch (  Exception e) {
    Assumption.fail(""String_Node_Str"" + TeammatesException.toStringWithStackTrace(e));
  }
}","@Override public void execute(){
  String inviterId=getRequestParamValue(ParamsNames.INVITER_ID);
  Assumption.assertPostParamNotNull(ParamsNames.INVITER_ID,inviterId);
  String courseId=getRequestParamValue(ParamsNames.COURSE_ID);
  Assumption.assertPostParamNotNull(ParamsNames.COURSE_ID,courseId);
  String instructorEmail=getRequestParamValue(ParamsNames.INSTRUCTOR_EMAIL);
  Assumption.assertPostParamNotNull(ParamsNames.INSTRUCTOR_EMAIL,instructorEmail);
  AccountAttributes inviter=logic.getAccount(inviterId);
  Assumption.assertNotNull(inviter);
  CourseAttributes course=logic.getCourse(courseId);
  Assumption.assertNotNull(course);
  RetryManager rm=new RetryManager(4);
  InstructorAttributes instructor=null;
  try {
    instructor=rm.runUntilNotNull(new RetryableTaskReturns<InstructorAttributes>(""String_Node_Str""){
      @Override public InstructorAttributes run(){
        return logic.getInstructorById(courseId,instructorEmail);
      }
    }
);
  }
 catch (  MaximumRetriesExceededException e) {
    Assumption.fail(""String_Node_Str"" + TeammatesException.toStringWithStackTrace(e));
  }
  Assumption.assertNotNull(instructor);
  EmailWrapper email=new EmailGenerator().generateInstructorCourseJoinEmail(inviter,instructor,course);
  try {
    emailSender.sendEmail(email);
  }
 catch (  Exception e) {
    Assumption.fail(""String_Node_Str"" + TeammatesException.toStringWithStackTrace(e));
  }
}",0.6952264381884945
62697,"@Override public void execute(){
  String courseId=getRequestParamValue(ParamsNames.COURSE_ID);
  Assumption.assertPostParamNotNull(ParamsNames.COURSE_ID,courseId);
  String studentEmail=getRequestParamValue(ParamsNames.STUDENT_EMAIL);
  Assumption.assertPostParamNotNull(ParamsNames.STUDENT_EMAIL,studentEmail);
  String isRejoinString=getRequestParamValue(ParamsNames.IS_STUDENT_REJOINING);
  Assumption.assertPostParamNotNull(ParamsNames.IS_STUDENT_REJOINING,isRejoinString);
  boolean isRejoin=Boolean.parseBoolean(isRejoinString);
  CourseAttributes course=logic.getCourse(courseId);
  Assumption.assertNotNull(course);
  StudentAttributes student=logic.getStudentForEmail(courseId,studentEmail);
  Assumption.assertNotNull(student);
  EmailWrapper email=isRejoin ? new EmailGenerator().generateStudentCourseRejoinEmailAfterGoogleIdReset(course,student) : new EmailGenerator().generateStudentCourseJoinEmail(course,student);
  try {
    emailSender.sendEmail(email);
  }
 catch (  Exception e) {
    Assumption.fail(""String_Node_Str"" + TeammatesException.toStringWithStackTrace(e));
  }
}","@Override public void execute(){
  String courseId=getRequestParamValue(ParamsNames.COURSE_ID);
  Assumption.assertPostParamNotNull(ParamsNames.COURSE_ID,courseId);
  String studentEmail=getRequestParamValue(ParamsNames.STUDENT_EMAIL);
  Assumption.assertPostParamNotNull(ParamsNames.STUDENT_EMAIL,studentEmail);
  String isRejoinString=getRequestParamValue(ParamsNames.IS_STUDENT_REJOINING);
  Assumption.assertPostParamNotNull(ParamsNames.IS_STUDENT_REJOINING,isRejoinString);
  boolean isRejoin=Boolean.parseBoolean(isRejoinString);
  CourseAttributes course=logic.getCourse(courseId);
  Assumption.assertNotNull(course);
  RetryManager rm=new RetryManager(4);
  StudentAttributes student=null;
  try {
    student=rm.runUntilNotNull(new RetryableTaskReturns<StudentAttributes>(""String_Node_Str""){
      @Override public StudentAttributes run() throws RuntimeException {
        return logic.getStudentForEmail(courseId,studentEmail);
      }
    }
);
  }
 catch (  MaximumRetriesExceededException e) {
    Assumption.fail(""String_Node_Str"" + TeammatesException.toStringWithStackTrace(e));
  }
  Assumption.assertNotNull(student);
  EmailWrapper email=isRejoin ? new EmailGenerator().generateStudentCourseRejoinEmailAfterGoogleIdReset(course,student) : new EmailGenerator().generateStudentCourseJoinEmail(course,student);
  try {
    emailSender.sendEmail(email);
  }
 catch (  Exception e) {
    Assumption.fail(""String_Node_Str"" + TeammatesException.toStringWithStackTrace(e));
  }
}",0.8469585432003099
62698,"private void saveNewCommentsByFeedbackParticipant(List<FeedbackResponseCommentAttributes> commentsToSave) throws EntityDoesNotExistException {
  for (  FeedbackResponseCommentAttributes frc : commentsToSave) {
    try {
      logic.createFeedbackResponseComment(frc);
      logic.putDocument(frc);
      statusToAdmin+=this.getClass().getName() + ""String_Node_Str"" + ""String_Node_Str""+ frc.feedbackResponseId+ ""String_Node_Str""+ ""String_Node_Str""+ frc.courseId+ ""String_Node_Str""+ frc.feedbackSessionName+ ""String_Node_Str""+ ""String_Node_Str""+ frc.commentGiver+ ""String_Node_Str""+ frc.createdAt+ ""String_Node_Str""+ ""String_Node_Str""+ frc.commentText.getValue();
    }
 catch (    InvalidParametersException e) {
      setStatusForException(e);
    }
  }
}","private void saveNewCommentsByFeedbackParticipant(List<FeedbackResponseCommentAttributes> commentsToSave) throws EntityDoesNotExistException {
  for (  FeedbackResponseCommentAttributes frc : commentsToSave) {
    try {
      frc=logic.createFeedbackResponseComment(frc);
      logic.putDocument(frc);
      statusToAdmin+=this.getClass().getName() + ""String_Node_Str"" + ""String_Node_Str""+ frc.feedbackResponseId+ ""String_Node_Str""+ ""String_Node_Str""+ frc.courseId+ ""String_Node_Str""+ frc.feedbackSessionName+ ""String_Node_Str""+ ""String_Node_Str""+ frc.commentGiver+ ""String_Node_Str""+ frc.createdAt+ ""String_Node_Str""+ ""String_Node_Str""+ frc.commentText.getValue();
    }
 catch (    InvalidParametersException e) {
      setStatusForException(e);
    }
  }
}",0.9973579920739762
62699,"@Test public void testSaveAndUpdateFeedbackParticipantCommentsOnResponseInClosedSession(){
  FeedbackQuestionsDb fqDb=new FeedbackQuestionsDb();
  FeedbackResponsesDb frDb=new FeedbackResponsesDb();
  FeedbackQuestionAttributes fq=fqDb.getFeedbackQuestion(""String_Node_Str"",""String_Node_Str"",2);
  assertNotNull(""String_Node_Str"",fq);
  FeedbackResponseAttributes fr=dataBundle.feedbackResponses.get(""String_Node_Str"");
  fr=frDb.getFeedbackResponse(fq.getId(),fr.giver,fr.recipient);
  assertNotNull(""String_Node_Str"",fr);
  InstructorAttributes instructor1InCourse1=dataBundle.instructors.get(""String_Node_Str"");
  gaeSimulation.loginAsInstructor(instructor1InCourse1.googleId);
  String moderatedInstructorEmail=""String_Node_Str"";
  ______TS(""String_Node_Str"");
  String[] submissionParams=new String[]{Const.ParamsNames.FEEDBACK_QUESTION_RESPONSETOTAL + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_ID + ""String_Node_Str"",fr.getId(),Const.ParamsNames.FEEDBACK_SESSION_NAME,fr.feedbackSessionName,Const.ParamsNames.COURSE_ID,fr.courseId,Const.ParamsNames.FEEDBACK_QUESTION_ID + ""String_Node_Str"",fr.feedbackQuestionId,Const.ParamsNames.FEEDBACK_RESPONSE_RECIPIENT + ""String_Node_Str"",fr.recipient,Const.ParamsNames.FEEDBACK_QUESTION_TYPE + ""String_Node_Str"",fr.feedbackQuestionType.toString(),Const.ParamsNames.FEEDBACK_RESPONSE_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ADD_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON,moderatedInstructorEmail};
  RedirectResult result=getRedirectResult(getAction(submissionParams));
  assertFalse(result.isError);
  assertEquals(Const.StatusMessages.FEEDBACK_RESPONSES_SAVED,result.getStatusMessage());
  assertEquals(getPageResultDestination(Const.ActionURIs.INSTRUCTOR_EDIT_INSTRUCTOR_FEEDBACK_PAGE,false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),result.getDestinationWithParams());
  FeedbackResponseCommentAttributes frc=getFeedbackParticipantComment(fr.getId());
  assertEquals(""String_Node_Str"",frc.commentText.getValue());
  assertEquals(FeedbackParticipantType.INSTRUCTORS,frc.commentGiverType);
  assertEquals(""String_Node_Str"",frc.commentGiver);
  assertTrue(frc.isCommentFromFeedbackParticipant);
  assertTrue(frc.isVisibilityFollowingFeedbackQuestion);
  ______TS(""String_Node_Str"");
  submissionParams=new String[]{Const.ParamsNames.FEEDBACK_QUESTION_RESPONSETOTAL + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_ID + ""String_Node_Str"",fr.getId(),Const.ParamsNames.FEEDBACK_SESSION_NAME,fr.feedbackSessionName,Const.ParamsNames.COURSE_ID,fr.courseId,Const.ParamsNames.FEEDBACK_QUESTION_ID + ""String_Node_Str"",fr.feedbackQuestionId,Const.ParamsNames.FEEDBACK_RESPONSE_RECIPIENT + ""String_Node_Str"",fr.recipient,Const.ParamsNames.FEEDBACK_QUESTION_TYPE + ""String_Node_Str"",fr.feedbackQuestionType.toString(),Const.ParamsNames.FEEDBACK_RESPONSE_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ID + ""String_Node_Str"",frc.getId().toString(),Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON,moderatedInstructorEmail};
  result=getRedirectResult(getAction(submissionParams));
  assertFalse(result.isError);
  assertEquals(Const.StatusMessages.FEEDBACK_RESPONSES_SAVED,result.getStatusMessage());
  assertEquals(getPageResultDestination(Const.ActionURIs.INSTRUCTOR_EDIT_INSTRUCTOR_FEEDBACK_PAGE,false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),result.getDestinationWithParams());
  frc=getFeedbackParticipantComment(fr.getId());
  assertEquals(""String_Node_Str"",frc.commentText.getValue());
  assertEquals(FeedbackParticipantType.INSTRUCTORS,frc.commentGiverType);
  assertEquals(""String_Node_Str"",frc.commentGiver);
  assertTrue(frc.isCommentFromFeedbackParticipant);
  assertTrue(frc.isVisibilityFollowingFeedbackQuestion);
}","@Test public void testSaveAndUpdateFeedbackParticipantCommentsOnResponseInClosedSession(){
  FeedbackQuestionsDb fqDb=new FeedbackQuestionsDb();
  FeedbackResponsesDb frDb=new FeedbackResponsesDb();
  FeedbackResponseCommentsDb frcDb=new FeedbackResponseCommentsDb();
  FeedbackQuestionAttributes fq=fqDb.getFeedbackQuestion(""String_Node_Str"",""String_Node_Str"",2);
  assertNotNull(""String_Node_Str"",fq);
  FeedbackResponseAttributes fr=dataBundle.feedbackResponses.get(""String_Node_Str"");
  fr=frDb.getFeedbackResponse(fq.getId(),fr.giver,fr.recipient);
  assertNotNull(""String_Node_Str"",fr);
  InstructorAttributes instructor1InCourse1=dataBundle.instructors.get(""String_Node_Str"");
  gaeSimulation.loginAsInstructor(instructor1InCourse1.googleId);
  String moderatedInstructorEmail=""String_Node_Str"";
  ______TS(""String_Node_Str"");
  String[] submissionParams=new String[]{Const.ParamsNames.FEEDBACK_QUESTION_RESPONSETOTAL + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_ID + ""String_Node_Str"",fr.getId(),Const.ParamsNames.FEEDBACK_SESSION_NAME,fr.feedbackSessionName,Const.ParamsNames.COURSE_ID,fr.courseId,Const.ParamsNames.FEEDBACK_QUESTION_ID + ""String_Node_Str"",fr.feedbackQuestionId,Const.ParamsNames.FEEDBACK_RESPONSE_RECIPIENT + ""String_Node_Str"",fr.recipient,Const.ParamsNames.FEEDBACK_QUESTION_TYPE + ""String_Node_Str"",fr.feedbackQuestionType.toString(),Const.ParamsNames.FEEDBACK_RESPONSE_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ADD_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON,moderatedInstructorEmail};
  RedirectResult result=getRedirectResult(getAction(submissionParams));
  assertFalse(result.isError);
  assertEquals(Const.StatusMessages.FEEDBACK_RESPONSES_SAVED,result.getStatusMessage());
  assertEquals(getPageResultDestination(Const.ActionURIs.INSTRUCTOR_EDIT_INSTRUCTOR_FEEDBACK_PAGE,false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),result.getDestinationWithParams());
  FeedbackResponseCommentAttributes frc=getFeedbackParticipantComment(fr.getId());
  assertEquals(""String_Node_Str"",frc.commentText.getValue());
  assertEquals(FeedbackParticipantType.INSTRUCTORS,frc.commentGiverType);
  assertEquals(""String_Node_Str"",frc.commentGiver);
  assertTrue(frc.isCommentFromFeedbackParticipant);
  assertTrue(frc.isVisibilityFollowingFeedbackQuestion);
  ArrayList<InstructorAttributes> instructors=new ArrayList<>();
  instructors.add(instructor1InCourse1);
  FeedbackResponseCommentSearchResultBundle bundle=frcDb.search(""String_Node_Str"",instructors);
  assertEquals(1,bundle.numberOfResults);
  verifySearchResults(bundle,frc);
  ______TS(""String_Node_Str"");
  submissionParams=new String[]{Const.ParamsNames.FEEDBACK_QUESTION_RESPONSETOTAL + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_ID + ""String_Node_Str"",fr.getId(),Const.ParamsNames.FEEDBACK_SESSION_NAME,fr.feedbackSessionName,Const.ParamsNames.COURSE_ID,fr.courseId,Const.ParamsNames.FEEDBACK_QUESTION_ID + ""String_Node_Str"",fr.feedbackQuestionId,Const.ParamsNames.FEEDBACK_RESPONSE_RECIPIENT + ""String_Node_Str"",fr.recipient,Const.ParamsNames.FEEDBACK_QUESTION_TYPE + ""String_Node_Str"",fr.feedbackQuestionType.toString(),Const.ParamsNames.FEEDBACK_RESPONSE_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ID + ""String_Node_Str"",frc.getId().toString(),Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON,moderatedInstructorEmail};
  result=getRedirectResult(getAction(submissionParams));
  assertFalse(result.isError);
  assertEquals(Const.StatusMessages.FEEDBACK_RESPONSES_SAVED,result.getStatusMessage());
  assertEquals(getPageResultDestination(Const.ActionURIs.INSTRUCTOR_EDIT_INSTRUCTOR_FEEDBACK_PAGE,false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),result.getDestinationWithParams());
  frc=getFeedbackParticipantComment(fr.getId());
  assertEquals(""String_Node_Str"",frc.commentText.getValue());
  assertEquals(FeedbackParticipantType.INSTRUCTORS,frc.commentGiverType);
  assertEquals(""String_Node_Str"",frc.commentGiver);
  assertTrue(frc.isCommentFromFeedbackParticipant);
  assertTrue(frc.isVisibilityFollowingFeedbackQuestion);
  bundle=frcDb.search(""String_Node_Str"",instructors);
  assertEquals(1,bundle.numberOfResults);
  verifySearchResults(bundle,frc);
}",0.9436271625279512
62700,"@Test public void testSaveAndUpdateFeedbackParticipantCommentsOnResponseInClosedSession(){
  FeedbackQuestionsDb fqDb=new FeedbackQuestionsDb();
  FeedbackResponsesDb frDb=new FeedbackResponsesDb();
  FeedbackQuestionAttributes fq=fqDb.getFeedbackQuestion(""String_Node_Str"",""String_Node_Str"",2);
  assertNotNull(""String_Node_Str"",fq);
  FeedbackResponseAttributes fr=dataBundle.feedbackResponses.get(""String_Node_Str"");
  fr=frDb.getFeedbackResponse(fq.getId(),fr.giver,fr.recipient);
  assertNotNull(""String_Node_Str"",fr);
  InstructorAttributes instructor=dataBundle.instructors.get(""String_Node_Str"");
  gaeSimulation.loginAsInstructor(instructor.googleId);
  String moderatedStudentEmail=""String_Node_Str"";
  ______TS(""String_Node_Str"");
  String[] submissionParams=new String[]{Const.ParamsNames.FEEDBACK_QUESTION_RESPONSETOTAL + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_ID + ""String_Node_Str"",fr.getId(),Const.ParamsNames.FEEDBACK_SESSION_NAME,fr.feedbackSessionName,Const.ParamsNames.COURSE_ID,fr.courseId,Const.ParamsNames.FEEDBACK_QUESTION_ID + ""String_Node_Str"",fr.feedbackQuestionId,Const.ParamsNames.FEEDBACK_RESPONSE_RECIPIENT + ""String_Node_Str"",fr.recipient,Const.ParamsNames.FEEDBACK_QUESTION_TYPE + ""String_Node_Str"",fr.feedbackQuestionType.toString(),Const.ParamsNames.FEEDBACK_RESPONSE_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ADD_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON,moderatedStudentEmail};
  RedirectResult result=getRedirectResult(getAction(submissionParams));
  assertFalse(result.isError);
  assertEquals(Const.StatusMessages.FEEDBACK_RESPONSES_SAVED,result.getStatusMessage());
  assertEquals(getPageResultDestination(Const.ActionURIs.INSTRUCTOR_EDIT_STUDENT_FEEDBACK_PAGE,false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),result.getDestinationWithParams());
  FeedbackResponseCommentAttributes frc=getFeedbackParticipantComment(fr.getId());
  assertEquals(""String_Node_Str"",frc.commentText.getValue());
  assertEquals(FeedbackParticipantType.STUDENTS,frc.commentGiverType);
  assertEquals(""String_Node_Str"",frc.commentGiver);
  assertTrue(frc.isCommentFromFeedbackParticipant);
  assertTrue(frc.isVisibilityFollowingFeedbackQuestion);
  ______TS(""String_Node_Str"");
  submissionParams=new String[]{Const.ParamsNames.FEEDBACK_QUESTION_RESPONSETOTAL + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_ID + ""String_Node_Str"",fr.getId(),Const.ParamsNames.FEEDBACK_SESSION_NAME,fr.feedbackSessionName,Const.ParamsNames.COURSE_ID,fr.courseId,Const.ParamsNames.FEEDBACK_QUESTION_ID + ""String_Node_Str"",fr.feedbackQuestionId,Const.ParamsNames.FEEDBACK_RESPONSE_RECIPIENT + ""String_Node_Str"",fr.recipient,Const.ParamsNames.FEEDBACK_QUESTION_TYPE + ""String_Node_Str"",fr.feedbackQuestionType.toString(),Const.ParamsNames.FEEDBACK_RESPONSE_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ID + ""String_Node_Str"",frc.getId().toString(),Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON,moderatedStudentEmail};
  result=getRedirectResult(getAction(submissionParams));
  assertFalse(result.isError);
  assertEquals(Const.StatusMessages.FEEDBACK_RESPONSES_SAVED,result.getStatusMessage());
  assertEquals(getPageResultDestination(Const.ActionURIs.INSTRUCTOR_EDIT_STUDENT_FEEDBACK_PAGE,false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),result.getDestinationWithParams());
  frc=getFeedbackParticipantComment(fr.getId());
  assertEquals(""String_Node_Str"",frc.commentText.getValue());
  assertEquals(FeedbackParticipantType.STUDENTS,frc.commentGiverType);
  assertEquals(""String_Node_Str"",frc.commentGiver);
  assertTrue(frc.isCommentFromFeedbackParticipant);
  assertTrue(frc.isVisibilityFollowingFeedbackQuestion);
}","@Test public void testSaveAndUpdateFeedbackParticipantCommentsOnResponseInClosedSession(){
  FeedbackQuestionsDb fqDb=new FeedbackQuestionsDb();
  FeedbackResponsesDb frDb=new FeedbackResponsesDb();
  FeedbackResponseCommentsDb frcDb=new FeedbackResponseCommentsDb();
  FeedbackQuestionAttributes fq=fqDb.getFeedbackQuestion(""String_Node_Str"",""String_Node_Str"",2);
  assertNotNull(""String_Node_Str"",fq);
  FeedbackResponseAttributes fr=dataBundle.feedbackResponses.get(""String_Node_Str"");
  fr=frDb.getFeedbackResponse(fq.getId(),fr.giver,fr.recipient);
  assertNotNull(""String_Node_Str"",fr);
  InstructorAttributes instructor=dataBundle.instructors.get(""String_Node_Str"");
  gaeSimulation.loginAsInstructor(instructor.googleId);
  String moderatedStudentEmail=""String_Node_Str"";
  ______TS(""String_Node_Str"");
  String[] submissionParams=new String[]{Const.ParamsNames.FEEDBACK_QUESTION_RESPONSETOTAL + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_ID + ""String_Node_Str"",fr.getId(),Const.ParamsNames.FEEDBACK_SESSION_NAME,fr.feedbackSessionName,Const.ParamsNames.COURSE_ID,fr.courseId,Const.ParamsNames.FEEDBACK_QUESTION_ID + ""String_Node_Str"",fr.feedbackQuestionId,Const.ParamsNames.FEEDBACK_RESPONSE_RECIPIENT + ""String_Node_Str"",fr.recipient,Const.ParamsNames.FEEDBACK_QUESTION_TYPE + ""String_Node_Str"",fr.feedbackQuestionType.toString(),Const.ParamsNames.FEEDBACK_RESPONSE_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ADD_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON,moderatedStudentEmail};
  RedirectResult result=getRedirectResult(getAction(submissionParams));
  assertFalse(result.isError);
  assertEquals(Const.StatusMessages.FEEDBACK_RESPONSES_SAVED,result.getStatusMessage());
  assertEquals(getPageResultDestination(Const.ActionURIs.INSTRUCTOR_EDIT_STUDENT_FEEDBACK_PAGE,false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),result.getDestinationWithParams());
  FeedbackResponseCommentAttributes frc=getFeedbackParticipantComment(fr.getId());
  assertEquals(""String_Node_Str"",frc.commentText.getValue());
  assertEquals(FeedbackParticipantType.STUDENTS,frc.commentGiverType);
  assertEquals(""String_Node_Str"",frc.commentGiver);
  assertTrue(frc.isCommentFromFeedbackParticipant);
  assertTrue(frc.isVisibilityFollowingFeedbackQuestion);
  ArrayList<InstructorAttributes> instructors=new ArrayList<>();
  instructors.add(instructor);
  FeedbackResponseCommentSearchResultBundle bundle=frcDb.search(""String_Node_Str"",instructors);
  assertEquals(1,bundle.numberOfResults);
  verifySearchResults(bundle,frc);
  ______TS(""String_Node_Str"");
  submissionParams=new String[]{Const.ParamsNames.FEEDBACK_QUESTION_RESPONSETOTAL + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_ID + ""String_Node_Str"",fr.getId(),Const.ParamsNames.FEEDBACK_SESSION_NAME,fr.feedbackSessionName,Const.ParamsNames.COURSE_ID,fr.courseId,Const.ParamsNames.FEEDBACK_QUESTION_ID + ""String_Node_Str"",fr.feedbackQuestionId,Const.ParamsNames.FEEDBACK_RESPONSE_RECIPIENT + ""String_Node_Str"",fr.recipient,Const.ParamsNames.FEEDBACK_QUESTION_TYPE + ""String_Node_Str"",fr.feedbackQuestionType.toString(),Const.ParamsNames.FEEDBACK_RESPONSE_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ID + ""String_Node_Str"",frc.getId().toString(),Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON,moderatedStudentEmail};
  result=getRedirectResult(getAction(submissionParams));
  assertFalse(result.isError);
  assertEquals(Const.StatusMessages.FEEDBACK_RESPONSES_SAVED,result.getStatusMessage());
  assertEquals(getPageResultDestination(Const.ActionURIs.INSTRUCTOR_EDIT_STUDENT_FEEDBACK_PAGE,false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),result.getDestinationWithParams());
  frc=getFeedbackParticipantComment(fr.getId());
  assertEquals(""String_Node_Str"",frc.commentText.getValue());
  assertEquals(FeedbackParticipantType.STUDENTS,frc.commentGiverType);
  assertEquals(""String_Node_Str"",frc.commentGiver);
  assertTrue(frc.isCommentFromFeedbackParticipant);
  assertTrue(frc.isVisibilityFollowingFeedbackQuestion);
  bundle=frcDb.search(""String_Node_Str"",instructors);
  assertEquals(1,bundle.numberOfResults);
  verifySearchResults(bundle,frc);
}",0.9441998810232004
62701,"@Test public void testSaveAndUpdateFeedbackParticipantCommentsOnResponse(){
  FeedbackQuestionsDb fqDb=new FeedbackQuestionsDb();
  FeedbackResponsesDb frDb=new FeedbackResponsesDb();
  DataBundle dataBundle=loadDataBundle(""String_Node_Str"");
  removeAndRestoreDataBundle(dataBundle);
  FeedbackQuestionAttributes fq=fqDb.getFeedbackQuestion(""String_Node_Str"",""String_Node_Str"",2);
  assertNotNull(""String_Node_Str"",fq);
  FeedbackResponseAttributes fr=dataBundle.feedbackResponses.get(""String_Node_Str"");
  fr=frDb.getFeedbackResponse(fq.getId(),fr.giver,fr.recipient);
  assertNotNull(""String_Node_Str"",fr);
  InstructorAttributes instructor1InCourse1=dataBundle.instructors.get(""String_Node_Str"");
  gaeSimulation.loginAsInstructor(instructor1InCourse1.googleId);
  ______TS(""String_Node_Str"");
  String[] submissionParams=new String[]{Const.ParamsNames.FEEDBACK_QUESTION_RESPONSETOTAL + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_ID + ""String_Node_Str"",fr.getId(),Const.ParamsNames.FEEDBACK_SESSION_NAME,fr.feedbackSessionName,Const.ParamsNames.COURSE_ID,fr.courseId,Const.ParamsNames.FEEDBACK_QUESTION_ID + ""String_Node_Str"",fr.feedbackQuestionId,Const.ParamsNames.FEEDBACK_RESPONSE_RECIPIENT + ""String_Node_Str"",fr.recipient,Const.ParamsNames.FEEDBACK_QUESTION_TYPE + ""String_Node_Str"",fr.feedbackQuestionType.toString(),Const.ParamsNames.FEEDBACK_RESPONSE_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ADD_TEXT + ""String_Node_Str"",""String_Node_Str""};
  RedirectResult result=getRedirectResult(getAction(submissionParams));
  assertFalse(result.isError);
  assertEquals(Const.StatusMessages.FEEDBACK_RESPONSES_SAVED,result.getStatusMessage());
  assertEquals(getPageResultDestination(Const.ActionURIs.INSTRUCTOR_HOME_PAGE,result.isError,""String_Node_Str""),result.getDestinationWithParams());
  FeedbackResponseCommentAttributes frc=getFeedbackParticipantComment(fr.getId());
  assertEquals(""String_Node_Str"",frc.commentText.getValue());
  assertEquals(FeedbackParticipantType.INSTRUCTORS,frc.commentGiverType);
  assertEquals(""String_Node_Str"",frc.commentGiver);
  assertTrue(frc.isCommentFromFeedbackParticipant);
  assertTrue(frc.isVisibilityFollowingFeedbackQuestion);
  ______TS(""String_Node_Str"");
  submissionParams=new String[]{Const.ParamsNames.FEEDBACK_QUESTION_RESPONSETOTAL + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_ID + ""String_Node_Str"",fr.getId(),Const.ParamsNames.FEEDBACK_SESSION_NAME,fr.feedbackSessionName,Const.ParamsNames.COURSE_ID,fr.courseId,Const.ParamsNames.FEEDBACK_QUESTION_ID + ""String_Node_Str"",fr.feedbackQuestionId,Const.ParamsNames.FEEDBACK_RESPONSE_RECIPIENT + ""String_Node_Str"",fr.recipient,Const.ParamsNames.FEEDBACK_QUESTION_TYPE + ""String_Node_Str"",fr.feedbackQuestionType.toString(),Const.ParamsNames.FEEDBACK_RESPONSE_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ID + ""String_Node_Str"",frc.getId().toString()};
  result=getRedirectResult(getAction(submissionParams));
  assertFalse(result.isError);
  assertEquals(Const.StatusMessages.FEEDBACK_RESPONSES_SAVED,result.getStatusMessage());
  assertEquals(getPageResultDestination(Const.ActionURIs.INSTRUCTOR_HOME_PAGE,result.isError,""String_Node_Str""),result.getDestinationWithParams());
  frc=getFeedbackParticipantComment(fr.getId());
  assertEquals(""String_Node_Str"",frc.commentText.getValue());
  assertEquals(FeedbackParticipantType.INSTRUCTORS,frc.commentGiverType);
  assertEquals(""String_Node_Str"",frc.commentGiver);
  assertTrue(frc.isCommentFromFeedbackParticipant);
  assertTrue(frc.isVisibilityFollowingFeedbackQuestion);
}","@Test public void testSaveAndUpdateFeedbackParticipantCommentsOnResponse(){
  FeedbackQuestionsDb fqDb=new FeedbackQuestionsDb();
  FeedbackResponsesDb frDb=new FeedbackResponsesDb();
  FeedbackResponseCommentsDb frcDb=new FeedbackResponseCommentsDb();
  DataBundle dataBundle=loadDataBundle(""String_Node_Str"");
  removeAndRestoreDataBundle(dataBundle);
  FeedbackQuestionAttributes fq=fqDb.getFeedbackQuestion(""String_Node_Str"",""String_Node_Str"",2);
  assertNotNull(""String_Node_Str"",fq);
  FeedbackResponseAttributes fr=dataBundle.feedbackResponses.get(""String_Node_Str"");
  fr=frDb.getFeedbackResponse(fq.getId(),fr.giver,fr.recipient);
  assertNotNull(""String_Node_Str"",fr);
  InstructorAttributes instructor1InCourse1=dataBundle.instructors.get(""String_Node_Str"");
  gaeSimulation.loginAsInstructor(instructor1InCourse1.googleId);
  ______TS(""String_Node_Str"");
  String[] submissionParams=new String[]{Const.ParamsNames.FEEDBACK_QUESTION_RESPONSETOTAL + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_ID + ""String_Node_Str"",fr.getId(),Const.ParamsNames.FEEDBACK_SESSION_NAME,fr.feedbackSessionName,Const.ParamsNames.COURSE_ID,fr.courseId,Const.ParamsNames.FEEDBACK_QUESTION_ID + ""String_Node_Str"",fr.feedbackQuestionId,Const.ParamsNames.FEEDBACK_RESPONSE_RECIPIENT + ""String_Node_Str"",fr.recipient,Const.ParamsNames.FEEDBACK_QUESTION_TYPE + ""String_Node_Str"",fr.feedbackQuestionType.toString(),Const.ParamsNames.FEEDBACK_RESPONSE_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ADD_TEXT + ""String_Node_Str"",""String_Node_Str""};
  RedirectResult result=getRedirectResult(getAction(submissionParams));
  assertFalse(result.isError);
  assertEquals(Const.StatusMessages.FEEDBACK_RESPONSES_SAVED,result.getStatusMessage());
  assertEquals(getPageResultDestination(Const.ActionURIs.INSTRUCTOR_HOME_PAGE,result.isError,""String_Node_Str""),result.getDestinationWithParams());
  FeedbackResponseCommentAttributes frc=getFeedbackParticipantComment(fr.getId());
  assertEquals(""String_Node_Str"",frc.commentText.getValue());
  assertEquals(FeedbackParticipantType.INSTRUCTORS,frc.commentGiverType);
  assertEquals(""String_Node_Str"",frc.commentGiver);
  assertTrue(frc.isCommentFromFeedbackParticipant);
  assertTrue(frc.isVisibilityFollowingFeedbackQuestion);
  ArrayList<InstructorAttributes> instructors=new ArrayList<>();
  instructors.add(instructor1InCourse1);
  FeedbackResponseCommentSearchResultBundle bundle=frcDb.search(""String_Node_Str"",instructors);
  assertEquals(1,bundle.numberOfResults);
  verifySearchResults(bundle,frc);
  ______TS(""String_Node_Str"");
  submissionParams=new String[]{Const.ParamsNames.FEEDBACK_QUESTION_RESPONSETOTAL + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_ID + ""String_Node_Str"",fr.getId(),Const.ParamsNames.FEEDBACK_SESSION_NAME,fr.feedbackSessionName,Const.ParamsNames.COURSE_ID,fr.courseId,Const.ParamsNames.FEEDBACK_QUESTION_ID + ""String_Node_Str"",fr.feedbackQuestionId,Const.ParamsNames.FEEDBACK_RESPONSE_RECIPIENT + ""String_Node_Str"",fr.recipient,Const.ParamsNames.FEEDBACK_QUESTION_TYPE + ""String_Node_Str"",fr.feedbackQuestionType.toString(),Const.ParamsNames.FEEDBACK_RESPONSE_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ID + ""String_Node_Str"",frc.getId().toString()};
  result=getRedirectResult(getAction(submissionParams));
  assertFalse(result.isError);
  assertEquals(Const.StatusMessages.FEEDBACK_RESPONSES_SAVED,result.getStatusMessage());
  assertEquals(getPageResultDestination(Const.ActionURIs.INSTRUCTOR_HOME_PAGE,result.isError,""String_Node_Str""),result.getDestinationWithParams());
  frc=getFeedbackParticipantComment(fr.getId());
  assertEquals(""String_Node_Str"",frc.commentText.getValue());
  assertEquals(FeedbackParticipantType.INSTRUCTORS,frc.commentGiverType);
  assertEquals(""String_Node_Str"",frc.commentGiver);
  assertTrue(frc.isCommentFromFeedbackParticipant);
  assertTrue(frc.isVisibilityFollowingFeedbackQuestion);
  bundle=frcDb.search(""String_Node_Str"",instructors);
  assertEquals(1,bundle.numberOfResults);
  verifySearchResults(bundle,frc);
}",0.940087554721701
62702,"@Test public void testSaveAndUpdateFeedbackParticipantCommentsOnResponse(){
  FeedbackQuestionsDb fqDb=new FeedbackQuestionsDb();
  FeedbackResponsesDb frDb=new FeedbackResponsesDb();
  DataBundle dataBundle=loadDataBundle(""String_Node_Str"");
  removeAndRestoreDataBundle(dataBundle);
  FeedbackQuestionAttributes fq=fqDb.getFeedbackQuestion(""String_Node_Str"",""String_Node_Str"",1);
  assertNotNull(""String_Node_Str"",fq);
  FeedbackResponseAttributes fr=dataBundle.feedbackResponses.get(""String_Node_Str"");
  fr=frDb.getFeedbackResponse(fq.getId(),fr.giver,fr.recipient);
  assertNotNull(""String_Node_Str"",fr);
  StudentAttributes student1InCourse1=dataBundle.students.get(""String_Node_Str"");
  gaeSimulation.loginAsStudent(student1InCourse1.googleId);
  ______TS(""String_Node_Str"");
  String[] submissionParams=new String[]{Const.ParamsNames.FEEDBACK_QUESTION_RESPONSETOTAL + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_ID + ""String_Node_Str"",fr.getId(),Const.ParamsNames.FEEDBACK_SESSION_NAME,fr.feedbackSessionName,Const.ParamsNames.COURSE_ID,fr.courseId,Const.ParamsNames.FEEDBACK_QUESTION_ID + ""String_Node_Str"",fr.feedbackQuestionId,Const.ParamsNames.FEEDBACK_RESPONSE_RECIPIENT + ""String_Node_Str"",fr.recipient,Const.ParamsNames.FEEDBACK_QUESTION_TYPE + ""String_Node_Str"",fr.feedbackQuestionType.toString(),Const.ParamsNames.FEEDBACK_RESPONSE_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ADD_TEXT + ""String_Node_Str"",""String_Node_Str""};
  RedirectResult result=getRedirectResult(getAction(submissionParams));
  assertFalse(result.isError);
  assertEquals(Const.StatusMessages.FEEDBACK_RESPONSES_SAVED,result.getStatusMessage());
  assertEquals(getPageResultDestination(Const.ActionURIs.STUDENT_FEEDBACK_SUBMISSION_EDIT_PAGE,result.isError,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),result.getDestinationWithParams());
  FeedbackResponseCommentAttributes frc=getFeedbackParticipantComment(fr.getId());
  assertEquals(""String_Node_Str"",frc.commentText.getValue());
  assertEquals(FeedbackParticipantType.STUDENTS,frc.commentGiverType);
  assertEquals(""String_Node_Str"",frc.commentGiver);
  assertTrue(frc.isCommentFromFeedbackParticipant);
  assertTrue(frc.isVisibilityFollowingFeedbackQuestion);
  ______TS(""String_Node_Str"");
  submissionParams=new String[]{Const.ParamsNames.FEEDBACK_QUESTION_RESPONSETOTAL + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_ID + ""String_Node_Str"",fr.getId(),Const.ParamsNames.FEEDBACK_SESSION_NAME,fr.feedbackSessionName,Const.ParamsNames.COURSE_ID,fr.courseId,Const.ParamsNames.FEEDBACK_QUESTION_ID + ""String_Node_Str"",fr.feedbackQuestionId,Const.ParamsNames.FEEDBACK_RESPONSE_RECIPIENT + ""String_Node_Str"",fr.recipient,Const.ParamsNames.FEEDBACK_QUESTION_TYPE + ""String_Node_Str"",fr.feedbackQuestionType.toString(),Const.ParamsNames.FEEDBACK_RESPONSE_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ID + ""String_Node_Str"",frc.getId().toString()};
  result=getRedirectResult(getAction(submissionParams));
  assertFalse(result.isError);
  assertEquals(Const.StatusMessages.FEEDBACK_RESPONSES_SAVED,result.getStatusMessage());
  assertEquals(getPageResultDestination(Const.ActionURIs.STUDENT_FEEDBACK_SUBMISSION_EDIT_PAGE,result.isError,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),result.getDestinationWithParams());
  frc=getFeedbackParticipantComment(fr.getId());
  assertEquals(""String_Node_Str"",frc.commentText.getValue());
  assertEquals(FeedbackParticipantType.STUDENTS,frc.commentGiverType);
  assertEquals(""String_Node_Str"",frc.commentGiver);
  assertTrue(frc.isCommentFromFeedbackParticipant);
  assertTrue(frc.isVisibilityFollowingFeedbackQuestion);
  ______TS(""String_Node_Str"");
  dataBundle=getTypicalDataBundle();
  removeAndRestoreDataBundle(dataBundle);
  fq=fqDb.getFeedbackQuestion(""String_Node_Str"",""String_Node_Str"",1);
  assertNotNull(""String_Node_Str"",fq);
  fr=typicalBundle.feedbackResponses.get(""String_Node_Str"");
  fr=frDb.getFeedbackResponse(fq.getId(),fr.giver,fr.recipient);
  assertNotNull(""String_Node_Str"",fr);
  student1InCourse1=typicalBundle.students.get(""String_Node_Str"");
  gaeSimulation.loginAsStudent(student1InCourse1.googleId);
  submissionParams=new String[]{Const.ParamsNames.FEEDBACK_QUESTION_RESPONSETOTAL + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_ID + ""String_Node_Str"",fr.getId(),Const.ParamsNames.FEEDBACK_SESSION_NAME,fr.feedbackSessionName,Const.ParamsNames.COURSE_ID,fr.courseId,Const.ParamsNames.FEEDBACK_QUESTION_ID + ""String_Node_Str"",fr.feedbackQuestionId,Const.ParamsNames.FEEDBACK_RESPONSE_RECIPIENT + ""String_Node_Str"",fr.recipient,Const.ParamsNames.FEEDBACK_QUESTION_TYPE + ""String_Node_Str"",fr.feedbackQuestionType.toString(),Const.ParamsNames.FEEDBACK_RESPONSE_TEXT + ""String_Node_Str"",""String_Node_Str"" + fr.getResponseDetails().getAnswerString(),Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ADD_TEXT + ""String_Node_Str"",""String_Node_Str""};
  result=getRedirectResult(getAction(submissionParams));
  assertFalse(result.isError);
  assertNull(getFeedbackParticipantComment(fr.getId()));
}","@Test public void testSaveAndUpdateFeedbackParticipantCommentsOnResponse(){
  FeedbackQuestionsDb fqDb=new FeedbackQuestionsDb();
  FeedbackResponsesDb frDb=new FeedbackResponsesDb();
  FeedbackResponseCommentsDb frcDb=new FeedbackResponseCommentsDb();
  DataBundle dataBundle=loadDataBundle(""String_Node_Str"");
  removeAndRestoreDataBundle(dataBundle);
  FeedbackQuestionAttributes fq=fqDb.getFeedbackQuestion(""String_Node_Str"",""String_Node_Str"",1);
  assertNotNull(""String_Node_Str"",fq);
  FeedbackResponseAttributes fr=dataBundle.feedbackResponses.get(""String_Node_Str"");
  fr=frDb.getFeedbackResponse(fq.getId(),fr.giver,fr.recipient);
  assertNotNull(""String_Node_Str"",fr);
  StudentAttributes student1InCourse1=dataBundle.students.get(""String_Node_Str"");
  gaeSimulation.loginAsStudent(student1InCourse1.googleId);
  ______TS(""String_Node_Str"");
  String[] submissionParams=new String[]{Const.ParamsNames.FEEDBACK_QUESTION_RESPONSETOTAL + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_ID + ""String_Node_Str"",fr.getId(),Const.ParamsNames.FEEDBACK_SESSION_NAME,fr.feedbackSessionName,Const.ParamsNames.COURSE_ID,fr.courseId,Const.ParamsNames.FEEDBACK_QUESTION_ID + ""String_Node_Str"",fr.feedbackQuestionId,Const.ParamsNames.FEEDBACK_RESPONSE_RECIPIENT + ""String_Node_Str"",fr.recipient,Const.ParamsNames.FEEDBACK_QUESTION_TYPE + ""String_Node_Str"",fr.feedbackQuestionType.toString(),Const.ParamsNames.FEEDBACK_RESPONSE_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ADD_TEXT + ""String_Node_Str"",""String_Node_Str""};
  RedirectResult result=getRedirectResult(getAction(submissionParams));
  assertFalse(result.isError);
  assertEquals(Const.StatusMessages.FEEDBACK_RESPONSES_SAVED,result.getStatusMessage());
  assertEquals(getPageResultDestination(Const.ActionURIs.STUDENT_FEEDBACK_SUBMISSION_EDIT_PAGE,result.isError,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),result.getDestinationWithParams());
  FeedbackResponseCommentAttributes frc=getFeedbackParticipantComment(fr.getId());
  assertEquals(""String_Node_Str"",frc.commentText.getValue());
  assertEquals(FeedbackParticipantType.STUDENTS,frc.commentGiverType);
  assertEquals(""String_Node_Str"",frc.commentGiver);
  assertTrue(frc.isCommentFromFeedbackParticipant);
  assertTrue(frc.isVisibilityFollowingFeedbackQuestion);
  ArrayList<InstructorAttributes> instructors=new ArrayList<>();
  instructors.add(dataBundle.instructors.get(""String_Node_Str""));
  FeedbackResponseCommentSearchResultBundle bundle=frcDb.search(""String_Node_Str"",instructors);
  assertEquals(1,bundle.numberOfResults);
  verifySearchResults(bundle,frc);
  ______TS(""String_Node_Str"");
  submissionParams=new String[]{Const.ParamsNames.FEEDBACK_QUESTION_RESPONSETOTAL + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_ID + ""String_Node_Str"",fr.getId(),Const.ParamsNames.FEEDBACK_SESSION_NAME,fr.feedbackSessionName,Const.ParamsNames.COURSE_ID,fr.courseId,Const.ParamsNames.FEEDBACK_QUESTION_ID + ""String_Node_Str"",fr.feedbackQuestionId,Const.ParamsNames.FEEDBACK_RESPONSE_RECIPIENT + ""String_Node_Str"",fr.recipient,Const.ParamsNames.FEEDBACK_QUESTION_TYPE + ""String_Node_Str"",fr.feedbackQuestionType.toString(),Const.ParamsNames.FEEDBACK_RESPONSE_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_TEXT + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ID + ""String_Node_Str"",frc.getId().toString()};
  result=getRedirectResult(getAction(submissionParams));
  assertFalse(result.isError);
  assertEquals(Const.StatusMessages.FEEDBACK_RESPONSES_SAVED,result.getStatusMessage());
  assertEquals(getPageResultDestination(Const.ActionURIs.STUDENT_FEEDBACK_SUBMISSION_EDIT_PAGE,result.isError,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),result.getDestinationWithParams());
  frc=getFeedbackParticipantComment(fr.getId());
  assertEquals(""String_Node_Str"",frc.commentText.getValue());
  assertEquals(FeedbackParticipantType.STUDENTS,frc.commentGiverType);
  assertEquals(""String_Node_Str"",frc.commentGiver);
  assertTrue(frc.isCommentFromFeedbackParticipant);
  assertTrue(frc.isVisibilityFollowingFeedbackQuestion);
  bundle=frcDb.search(""String_Node_Str"",instructors);
  assertEquals(1,bundle.numberOfResults);
  verifySearchResults(bundle,frc);
  ______TS(""String_Node_Str"");
  dataBundle=getTypicalDataBundle();
  removeAndRestoreDataBundle(dataBundle);
  fq=fqDb.getFeedbackQuestion(""String_Node_Str"",""String_Node_Str"",1);
  assertNotNull(""String_Node_Str"",fq);
  fr=typicalBundle.feedbackResponses.get(""String_Node_Str"");
  fr=frDb.getFeedbackResponse(fq.getId(),fr.giver,fr.recipient);
  assertNotNull(""String_Node_Str"",fr);
  student1InCourse1=typicalBundle.students.get(""String_Node_Str"");
  gaeSimulation.loginAsStudent(student1InCourse1.googleId);
  submissionParams=new String[]{Const.ParamsNames.FEEDBACK_QUESTION_RESPONSETOTAL + ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_ID + ""String_Node_Str"",fr.getId(),Const.ParamsNames.FEEDBACK_SESSION_NAME,fr.feedbackSessionName,Const.ParamsNames.COURSE_ID,fr.courseId,Const.ParamsNames.FEEDBACK_QUESTION_ID + ""String_Node_Str"",fr.feedbackQuestionId,Const.ParamsNames.FEEDBACK_RESPONSE_RECIPIENT + ""String_Node_Str"",fr.recipient,Const.ParamsNames.FEEDBACK_QUESTION_TYPE + ""String_Node_Str"",fr.feedbackQuestionType.toString(),Const.ParamsNames.FEEDBACK_RESPONSE_TEXT + ""String_Node_Str"",""String_Node_Str"" + fr.getResponseDetails().getAnswerString(),Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_ADD_TEXT + ""String_Node_Str"",""String_Node_Str""};
  result=getRedirectResult(getAction(submissionParams));
  assertFalse(result.isError);
  assertNull(getFeedbackParticipantComment(fr.getId()));
}",0.9543147208121828
62703,"/** 
 * Sets the unique ID for the instructor entity.
 * @param uniqueId The unique ID of the entity (format: googleId%courseId).
 */
public void setUniqueId(String uniqueId){
  this.id=uniqueId;
}","/** 
 * Sets the unique ID for the instructor entity.
 * @param uniqueId The unique ID of the entity (format: email%courseId).
 */
public void setUniqueId(String uniqueId){
  this.id=uniqueId;
}",0.9718670076726342
62704,"/** 
 * Returns the unique ID of the entity (format: googleId%courseId).
 */
public String getUniqueId(){
  return id;
}","/** 
 * Returns the unique ID of the entity (format: email%courseId).
 */
public String getUniqueId(){
  return id;
}",0.9535864978902954
62705,"@Override public void execute(){
  String inviterId=getRequestParamValue(ParamsNames.INVITER_ID);
  Assumption.assertPostParamNotNull(ParamsNames.INVITER_ID,inviterId);
  String courseId=getRequestParamValue(ParamsNames.COURSE_ID);
  Assumption.assertPostParamNotNull(ParamsNames.COURSE_ID,courseId);
  String instructorEmail=getRequestParamValue(ParamsNames.INSTRUCTOR_EMAIL);
  Assumption.assertPostParamNotNull(ParamsNames.INSTRUCTOR_EMAIL,instructorEmail);
  AccountAttributes inviter=logic.getAccount(inviterId);
  Assumption.assertNotNull(inviter);
  CourseAttributes course=logic.getCourse(courseId);
  Assumption.assertNotNull(course);
  InstructorAttributes instructor=logic.getInstructorForEmail(courseId,instructorEmail);
  Assumption.assertNotNull(instructor);
  EmailWrapper email=new EmailGenerator().generateInstructorCourseJoinEmail(inviter,instructor,course);
  try {
    emailSender.sendEmail(email);
  }
 catch (  Exception e) {
    Assumption.fail(""String_Node_Str"" + TeammatesException.toStringWithStackTrace(e));
  }
}","@Override public void execute(){
  String inviterId=getRequestParamValue(ParamsNames.INVITER_ID);
  Assumption.assertPostParamNotNull(ParamsNames.INVITER_ID,inviterId);
  String courseId=getRequestParamValue(ParamsNames.COURSE_ID);
  Assumption.assertPostParamNotNull(ParamsNames.COURSE_ID,courseId);
  String instructorEmail=getRequestParamValue(ParamsNames.INSTRUCTOR_EMAIL);
  Assumption.assertPostParamNotNull(ParamsNames.INSTRUCTOR_EMAIL,instructorEmail);
  AccountAttributes inviter=logic.getAccount(inviterId);
  Assumption.assertNotNull(inviter);
  CourseAttributes course=logic.getCourse(courseId);
  Assumption.assertNotNull(course);
  InstructorAttributes instructor=logic.getInstructorById(courseId,instructorEmail);
  Assumption.assertNotNull(instructor);
  EmailWrapper email=new EmailGenerator().generateInstructorCourseJoinEmail(inviter,instructor,course);
  try {
    emailSender.sendEmail(email);
  }
 catch (  Exception e) {
    Assumption.fail(""String_Node_Str"" + TeammatesException.toStringWithStackTrace(e));
  }
}",0.9942196531791908
62706,"/** 
 * Generates the feedback session closed emails for the given   {@code session}.
 */
public List<EmailWrapper> generateFeedbackSessionClosedEmails(FeedbackSessionAttributes session){
  if (session.isPrivateSession()) {
    return new ArrayList<>();
  }
  CourseAttributes course=coursesLogic.getCourse(session.getCourseId());
  boolean isEmailNeededForStudents=false;
  try {
    isEmailNeededForStudents=fsLogic.isFeedbackSessionHasQuestionForStudents(session.getFeedbackSessionName(),session.getCourseId());
  }
 catch (  EntityDoesNotExistException e) {
    log.severe(""String_Node_Str"" + session.getCourseId() + ""String_Node_Str""+ ""String_Node_Str""+ session.getFeedbackSessionName()+ ""String_Node_Str"");
  }
  List<InstructorAttributes> instructors=instructorsLogic.getInstructorsForCourse(session.getCourseId());
  List<StudentAttributes> students=isEmailNeededForStudents ? studentsLogic.getStudentsForCourse(session.getCourseId()) : new ArrayList<StudentAttributes>();
  String template=EmailTemplates.USER_FEEDBACK_SESSION.replace(""String_Node_Str"",FEEDBACK_STATUS_SESSION_CLOSED);
  String additionalContactInformation=getAdditionalContactInformationFragment(course);
  return generateFeedbackSessionEmailBases(course,session,students,instructors,template,EmailType.FEEDBACK_CLOSED.getSubject(),FEEDBACK_ACTION_VIEW,additionalContactInformation);
}","/** 
 * Generates the feedback session closed emails for the given   {@code session}.
 */
public List<EmailWrapper> generateFeedbackSessionClosedEmails(FeedbackSessionAttributes session){
  if (session.isPrivateSession()) {
    return new ArrayList<>();
  }
  CourseAttributes course=coursesLogic.getCourse(session.getCourseId());
  boolean isEmailNeededForStudents=false;
  try {
    isEmailNeededForStudents=fsLogic.isFeedbackSessionHasQuestionForStudents(session.getFeedbackSessionName(),session.getCourseId());
  }
 catch (  EntityDoesNotExistException e) {
    log.severe(""String_Node_Str"" + session.getCourseId() + ""String_Node_Str""+ ""String_Node_Str""+ session.getFeedbackSessionName()+ ""String_Node_Str"");
  }
  List<InstructorAttributes> instructors=isEmailNeededForStudents ? instructorsLogic.getInstructorsForCourse(session.getCourseId()) : new ArrayList<>();
  List<StudentAttributes> students=isEmailNeededForStudents ? studentsLogic.getStudentsForCourse(session.getCourseId()) : new ArrayList<>();
  String template=EmailTemplates.USER_FEEDBACK_SESSION.replace(""String_Node_Str"",FEEDBACK_STATUS_SESSION_CLOSED);
  String additionalContactInformation=getAdditionalContactInformationFragment(course);
  return generateFeedbackSessionEmailBases(course,session,students,instructors,template,EmailType.FEEDBACK_CLOSED.getSubject(),FEEDBACK_ACTION_VIEW,additionalContactInformation);
}",0.9012345679012346
62707,"public String getDisplayedActionUrl(){
  return Url.addParamToUrl(activityLog.getActionUrl(),Const.ParamsNames.USER_ID,activityLog.getUserGoogleId());
}","public String getDisplayedActionUrl(){
  return SanitizationHelper.sanitizeForHtml(Url.addParamToUrl(activityLog.getActionUrl(),Const.ParamsNames.USER_ID,activityLog.getUserGoogleId()));
}",0.8941176470588236
62708,"public boolean getIsActionFailure(){
  return activityLog.getActionName().contains(Const.ACTION_RESULT_FAILURE);
}","public boolean getIsActionFailure(){
  return activityLog.getActionResponse().contains(Const.ACTION_RESULT_FAILURE);
}",0.956896551724138
62709,"@Test public void testAdminLogQuery(){
  ______TS(""String_Node_Str"");
  List<String> versionList=new ArrayList<>();
  versionList.add(""String_Node_Str"");
  Calendar cal=new GregorianCalendar();
  cal.set(1994,Calendar.MAY,7,15,30,12);
  long startTime=cal.getTimeInMillis();
  cal.add(Calendar.YEAR,22);
  long endTime=cal.getTimeInMillis();
  AdminLogQuery query=new AdminLogQuery(versionList,startTime,endTime);
  assertEquals(startTime,query.getStartTime());
  assertEquals(endTime,query.getEndTime());
  assertNotNull(query.getQuery());
  ______TS(""String_Node_Str"");
  query=new AdminLogQuery(versionList,null,null);
  assertEquals(0,query.getStartTime());
  assertTrue(endTime != query.getStartTime());
  query.setTimePeriod(startTime,endTime);
  assertEquals(startTime,query.getStartTime());
  assertEquals(endTime,query.getEndTime());
  assertNotNull(query.getQuery());
}","@Test public void testAdminLogQuery(){
  ______TS(""String_Node_Str"");
  List<String> versionList=new ArrayList<>();
  versionList.add(""String_Node_Str"");
  Calendar cal=new GregorianCalendar();
  cal.set(1994,Calendar.MAY,7,15,30,12);
  long startTime=cal.getTimeInMillis();
  cal.add(Calendar.YEAR,22);
  long endTime=cal.getTimeInMillis();
  AdminLogQuery query=new AdminLogQuery(versionList,startTime,endTime);
  assertEquals(startTime,query.getStartTime());
  assertEquals(endTime,query.getEndTime());
  assertNotNull(query.getQuery());
  ______TS(""String_Node_Str"");
  query=new AdminLogQuery(versionList,null,null);
  assertEquals(0,query.getStartTime());
  assertNotEquals(endTime,query.getStartTime());
  query.setTimePeriod(startTime,endTime);
  assertEquals(startTime,query.getStartTime());
  assertEquals(endTime,query.getEndTime());
  assertNotNull(query.getQuery());
}",0.9806818181818182
62710,"@Override public void testEditQuestionAction() throws Exception {
  ______TS(""String_Node_Str"");
  feedbackEditPage.clickEditQuestionButton(1);
  feedbackEditPage.verifyHtmlMainContent(""String_Node_Str"");
  feedbackEditPage.fillQuestionTextBox(""String_Node_Str"",1);
  feedbackEditPage.fillQuestionDescription(""String_Node_Str"",1);
  feedbackEditPage.clickSaveExistingQuestionButton(1);
  feedbackEditPage.verifyStatus(Const.StatusMessages.FEEDBACK_QUESTION_EDITED);
  feedbackEditPage.verifyHtmlMainContent(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  feedbackEditPage.clickEditQuestionButton(1);
  feedbackEditPage.fillRubricSubQuestionBox(""String_Node_Str"",1,0);
  feedbackEditPage.clickAddRubricRowLink(1);
  feedbackEditPage.fillRubricSubQuestionBox(""String_Node_Str"",1,2);
  feedbackEditPage.clickRemoveRubricRowLinkAndConfirm(1,0);
  feedbackEditPage.clickRemoveRubricRowLinkAndConfirm(1,1);
  feedbackEditPage.clickAddRubricRowLink(1);
  feedbackEditPage.fillRubricSubQuestionBox(""String_Node_Str"",1,3);
  feedbackEditPage.clickRemoveRubricRowLinkAndConfirm(1,2);
  feedbackEditPage.clickSaveExistingQuestionButton(1);
  feedbackEditPage.verifyHtmlMainContent(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  feedbackEditPage.clickEditQuestionButton(1);
  feedbackEditPage.fillRubricChoiceBox(""String_Node_Str"",1,0);
  feedbackEditPage.clickAddRubricColLink(1);
  feedbackEditPage.fillRubricChoiceBox(""String_Node_Str"",1,4);
  feedbackEditPage.clickRemoveRubricColLinkAndConfirm(1,0);
  feedbackEditPage.clickAddRubricColLink(1);
  feedbackEditPage.fillRubricChoiceBox(""String_Node_Str"",1,5);
  feedbackEditPage.clickRemoveRubricColLinkAndConfirm(1,4);
  feedbackEditPage.clickSaveExistingQuestionButton(1);
  feedbackEditPage.verifyHtmlMainContent(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  feedbackEditPage.clickEditQuestionButton(1);
  feedbackEditPage.clickAssignWeightsCheckbox(1);
  feedbackEditPage.fillRubricWeightBox(""String_Node_Str"",1,0);
  feedbackEditPage.clickSaveExistingQuestionButton(1);
  feedbackEditPage.verifyHtmlMainContent(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  feedbackEditPage.clickEditQuestionButton(1);
  feedbackEditPage.fillRubricDescriptionBox(""String_Node_Str"",1,0,0);
  feedbackEditPage.clickAddRubricRowLink(1);
  feedbackEditPage.fillRubricSubQuestionBox(""String_Node_Str"",1,1);
  feedbackEditPage.fillRubricDescriptionBox(""String_Node_Str"",1,1,0);
  feedbackEditPage.clickSaveExistingQuestionButton(1);
  feedbackEditPage.verifyHtmlMainContent(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  feedbackEditPage.clickEditQuestionButton(1);
  assertFalse(feedbackEditPage.isRubricColLeftMovable(1,0));
  assertTrue(feedbackEditPage.isRubricColRightMovable(1,0));
  assertTrue(feedbackEditPage.isRubricColLeftMovable(1,1));
  assertTrue(feedbackEditPage.isRubricColRightMovable(1,1));
  assertTrue(feedbackEditPage.isRubricColLeftMovable(1,2));
  assertTrue(feedbackEditPage.isRubricColRightMovable(1,2));
  assertTrue(feedbackEditPage.isRubricColLeftMovable(1,3));
  assertFalse(feedbackEditPage.isRubricColRightMovable(1,3));
  feedbackEditPage.clickAddRubricColLink(1);
  assertTrue(feedbackEditPage.isRubricColRightMovable(1,3));
  assertTrue(feedbackEditPage.isRubricColLeftMovable(1,4));
  assertFalse(feedbackEditPage.isRubricColRightMovable(1,4));
  feedbackEditPage.clickRemoveRubricColLinkAndConfirm(1,4);
  assertFalse(feedbackEditPage.isRubricColRightMovable(1,3));
  feedbackEditPage.clickAddRubricColLink(1);
  feedbackEditPage.clickAddRubricRowLink(1);
  feedbackEditPage.fillRubricSubQuestionBox(""String_Node_Str"",1,2);
  feedbackEditPage.fillRubricChoiceBox(""String_Node_Str"",1,5);
  feedbackEditPage.fillRubricWeightBox(""String_Node_Str"",1,5);
  feedbackEditPage.fillRubricDescriptionBox(""String_Node_Str"",1,0,5);
  feedbackEditPage.fillRubricDescriptionBox(""String_Node_Str"",1,1,5);
  feedbackEditPage.fillRubricDescriptionBox(""String_Node_Str"",1,2,5);
  feedbackEditPage.fillRubricDescriptionBox(""String_Node_Str"",1,2,3);
  feedbackEditPage.fillRubricDescriptionBox(""String_Node_Str"",1,2,2);
  feedbackEditPage.fillRubricDescriptionBox(""String_Node_Str"",1,2,1);
  feedbackEditPage.fillRubricDescriptionBox(""String_Node_Str"",1,2,0);
  browser.driver.findElement(By.id(Const.ParamsNames.FEEDBACK_QUESTION_RUBRIC_EDIT_TABLE + ""String_Node_Str"" + 1)).sendKeys(Keys.ARROW_DOWN);
  assertTrue(feedbackEditPage.moveRubricColLeft(1,5));
  assertTrue(feedbackEditPage.moveRubricColLeft(1,3));
  assertTrue(feedbackEditPage.moveRubricColLeft(1,2));
  assertTrue(feedbackEditPage.moveRubricColLeft(1,1));
  assertTrue(feedbackEditPage.moveRubricColRight(1,1));
  assertTrue(feedbackEditPage.moveRubricColRight(1,2));
  assertTrue(feedbackEditPage.moveRubricColRight(1,3));
  feedbackEditPage.clickSaveExistingQuestionButton(1);
  feedbackEditPage.verifyStatus(Const.StatusMessages.FEEDBACK_QUESTION_EDITED);
  feedbackEditPage.verifyHtmlMainContent(""String_Node_Str"");
  feedbackEditPage.clickNewQuestionButton();
  feedbackEditPage.selectNewQuestionType(""String_Node_Str"");
  feedbackEditPage.fillQuestionTextBoxForNewQuestion(""String_Node_Str"");
  feedbackEditPage.fillQuestionDescriptionForNewQuestion(""String_Node_Str"");
  assertFalse(feedbackEditPage.isRubricColLeftMovable(-1,0));
  assertTrue(feedbackEditPage.isRubricColRightMovable(-1,0));
  assertTrue(feedbackEditPage.isRubricColLeftMovable(-1,3));
  assertFalse(feedbackEditPage.isRubricColRightMovable(-1,3));
  assertTrue(feedbackEditPage.moveRubricColLeft(-1,3));
  assertTrue(feedbackEditPage.moveRubricColLeft(-1,2));
  assertTrue(feedbackEditPage.moveRubricColLeft(-1,1));
  assertTrue(feedbackEditPage.moveRubricColRight(-1,1));
  assertTrue(feedbackEditPage.moveRubricColRight(-1,2));
  feedbackEditPage.clickAddQuestionButton();
  feedbackEditPage.verifyStatus(Const.StatusMessages.FEEDBACK_QUESTION_ADDED);
  feedbackEditPage.verifyHtmlMainContent(""String_Node_Str"");
  feedbackEditPage.clickDeleteQuestionLink(2);
  feedbackEditPage.waitForConfirmationModalAndClickOk();
}","@Override public void testEditQuestionAction() throws Exception {
  ______TS(""String_Node_Str"");
  feedbackEditPage.clickEditQuestionButton(1);
  feedbackEditPage.verifyHtmlMainContent(""String_Node_Str"");
  feedbackEditPage.fillQuestionTextBox(""String_Node_Str"",1);
  feedbackEditPage.fillQuestionDescription(""String_Node_Str"",1);
  feedbackEditPage.clickSaveExistingQuestionButton(1);
  feedbackEditPage.verifyStatus(Const.StatusMessages.FEEDBACK_QUESTION_EDITED);
  feedbackEditPage.verifyHtmlMainContent(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  feedbackEditPage.clickEditQuestionButton(1);
  feedbackEditPage.fillRubricSubQuestionBox(""String_Node_Str"",1,0);
  feedbackEditPage.clickAddRubricRowLink(1);
  feedbackEditPage.fillRubricSubQuestionBox(""String_Node_Str"",1,2);
  feedbackEditPage.clickRemoveRubricRowLinkAndConfirm(1,0);
  feedbackEditPage.clickRemoveRubricRowLinkAndConfirm(1,1);
  feedbackEditPage.clickAddRubricRowLink(1);
  feedbackEditPage.fillRubricSubQuestionBox(""String_Node_Str"",1,3);
  feedbackEditPage.clickRemoveRubricRowLinkAndConfirm(1,2);
  feedbackEditPage.clickSaveExistingQuestionButton(1);
  feedbackEditPage.verifyHtmlMainContent(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  feedbackEditPage.clickEditQuestionButton(1);
  feedbackEditPage.fillRubricChoiceBox(""String_Node_Str"",1,0);
  feedbackEditPage.clickAddRubricColLink(1);
  feedbackEditPage.fillRubricChoiceBox(""String_Node_Str"",1,4);
  feedbackEditPage.clickRemoveRubricColLinkAndConfirm(1,0);
  feedbackEditPage.clickAddRubricColLink(1);
  feedbackEditPage.fillRubricChoiceBox(""String_Node_Str"",1,5);
  feedbackEditPage.clickRemoveRubricColLinkAndConfirm(1,4);
  feedbackEditPage.clickSaveExistingQuestionButton(1);
  feedbackEditPage.verifyHtmlMainContent(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  feedbackEditPage.clickEditQuestionButton(1);
  feedbackEditPage.clickAssignWeightsCheckbox(1);
  feedbackEditPage.fillRubricWeightBox(""String_Node_Str"",1,0);
  feedbackEditPage.clickSaveExistingQuestionButton(1);
  feedbackEditPage.verifyHtmlMainContent(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  feedbackEditPage.clickEditQuestionButton(1);
  feedbackEditPage.fillRubricDescriptionBox(""String_Node_Str"",1,0,0);
  feedbackEditPage.clickAddRubricRowLink(1);
  feedbackEditPage.fillRubricSubQuestionBox(""String_Node_Str"",1,1);
  feedbackEditPage.fillRubricDescriptionBox(""String_Node_Str"",1,1,0);
  feedbackEditPage.clickSaveExistingQuestionButton(1);
  feedbackEditPage.verifyHtmlMainContent(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  feedbackEditPage.clickEditQuestionButton(1);
  assertFalse(feedbackEditPage.isRubricColLeftMovable(1,0));
  assertTrue(feedbackEditPage.isRubricColRightMovable(1,0));
  assertTrue(feedbackEditPage.isRubricColLeftMovable(1,1));
  assertTrue(feedbackEditPage.isRubricColRightMovable(1,1));
  assertTrue(feedbackEditPage.isRubricColLeftMovable(1,2));
  assertTrue(feedbackEditPage.isRubricColRightMovable(1,2));
  assertTrue(feedbackEditPage.isRubricColLeftMovable(1,3));
  assertFalse(feedbackEditPage.isRubricColRightMovable(1,3));
  feedbackEditPage.clickAddRubricColLink(1);
  assertTrue(feedbackEditPage.isRubricColRightMovable(1,3));
  assertTrue(feedbackEditPage.isRubricColLeftMovable(1,4));
  assertFalse(feedbackEditPage.isRubricColRightMovable(1,4));
  feedbackEditPage.clickRemoveRubricColLinkAndConfirm(1,4);
  assertFalse(feedbackEditPage.isRubricColRightMovable(1,3));
  feedbackEditPage.clickAddRubricColLink(1);
  feedbackEditPage.clickAddRubricRowLink(1);
  feedbackEditPage.fillRubricSubQuestionBox(""String_Node_Str"",1,2);
  feedbackEditPage.fillRubricChoiceBox(""String_Node_Str"",1,5);
  feedbackEditPage.fillRubricWeightBox(""String_Node_Str"",1,5);
  feedbackEditPage.fillRubricDescriptionBox(""String_Node_Str"",1,0,5);
  feedbackEditPage.fillRubricDescriptionBox(""String_Node_Str"",1,1,5);
  feedbackEditPage.fillRubricDescriptionBox(""String_Node_Str"",1,2,5);
  feedbackEditPage.fillRubricDescriptionBox(""String_Node_Str"",1,2,3);
  feedbackEditPage.fillRubricDescriptionBox(""String_Node_Str"",1,2,2);
  feedbackEditPage.fillRubricDescriptionBox(""String_Node_Str"",1,2,1);
  feedbackEditPage.fillRubricDescriptionBox(""String_Node_Str"",1,2,0);
  assertTrue(feedbackEditPage.moveRubricColLeft(1,5));
  assertTrue(feedbackEditPage.moveRubricColLeft(1,3));
  assertTrue(feedbackEditPage.moveRubricColLeft(1,2));
  assertTrue(feedbackEditPage.moveRubricColLeft(1,1));
  assertTrue(feedbackEditPage.moveRubricColRight(1,1));
  assertTrue(feedbackEditPage.moveRubricColRight(1,2));
  assertTrue(feedbackEditPage.moveRubricColRight(1,3));
  feedbackEditPage.clickSaveExistingQuestionButton(1);
  feedbackEditPage.verifyStatus(Const.StatusMessages.FEEDBACK_QUESTION_EDITED);
  feedbackEditPage.verifyHtmlMainContent(""String_Node_Str"");
  feedbackEditPage.clickNewQuestionButton();
  feedbackEditPage.selectNewQuestionType(""String_Node_Str"");
  feedbackEditPage.fillQuestionTextBoxForNewQuestion(""String_Node_Str"");
  feedbackEditPage.fillQuestionDescriptionForNewQuestion(""String_Node_Str"");
  assertFalse(feedbackEditPage.isRubricColLeftMovable(-1,0));
  assertTrue(feedbackEditPage.isRubricColRightMovable(-1,0));
  assertTrue(feedbackEditPage.isRubricColLeftMovable(-1,3));
  assertFalse(feedbackEditPage.isRubricColRightMovable(-1,3));
  assertTrue(feedbackEditPage.moveRubricColLeft(-1,3));
  assertTrue(feedbackEditPage.moveRubricColLeft(-1,2));
  assertTrue(feedbackEditPage.moveRubricColLeft(-1,1));
  assertTrue(feedbackEditPage.moveRubricColRight(-1,1));
  assertTrue(feedbackEditPage.moveRubricColRight(-1,2));
  feedbackEditPage.clickAddQuestionButton();
  feedbackEditPage.verifyStatus(Const.StatusMessages.FEEDBACK_QUESTION_ADDED);
  feedbackEditPage.verifyHtmlMainContent(""String_Node_Str"");
  feedbackEditPage.clickDeleteQuestionLink(2);
  feedbackEditPage.waitForConfirmationModalAndClickOk();
}",0.7570877369568865
62711,"private boolean moveRubricCol(int qnNumber,int colNumber,boolean isMoveLeft){
  String elemId;
  if (isMoveLeft) {
    elemId=Const.ParamsNames.FEEDBACK_QUESTION_RUBRIC_MOVE_COL_LEFT + ""String_Node_Str"" + qnNumber+ ""String_Node_Str""+ colNumber;
  }
 else {
    elemId=Const.ParamsNames.FEEDBACK_QUESTION_RUBRIC_MOVE_COL_RIGHT + ""String_Node_Str"" + qnNumber+ ""String_Node_Str""+ colNumber;
  }
  WebElement moveColButton=browser.driver.findElement(By.id(elemId));
  if (moveColButton.getAttribute(""String_Node_Str"") == null) {
    moveColButton.click();
    return true;
  }
  return false;
}","private boolean moveRubricCol(int qnNumber,int colNumber,boolean isMoveLeft){
  String elemId;
  if (isMoveLeft) {
    elemId=Const.ParamsNames.FEEDBACK_QUESTION_RUBRIC_MOVE_COL_LEFT + ""String_Node_Str"" + qnNumber+ ""String_Node_Str""+ colNumber;
  }
 else {
    elemId=Const.ParamsNames.FEEDBACK_QUESTION_RUBRIC_MOVE_COL_RIGHT + ""String_Node_Str"" + qnNumber+ ""String_Node_Str""+ colNumber;
  }
  WebElement moveColButton=browser.driver.findElement(By.id(elemId));
  if (moveColButton.isEnabled()) {
    click(moveColButton);
    return true;
  }
  return false;
}",0.9331016507384884
62712,"@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  Assumption.assertPostParamNotNull(Const.ParamsNames.COURSE_ID,courseId);
  String feedbackSessionName=getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);
  Assumption.assertPostParamNotNull(Const.ParamsNames.FEEDBACK_SESSION_NAME,feedbackSessionName);
  String feedbackQuestionId=getRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_ID);
  Assumption.assertPostParamNotNull(Const.ParamsNames.FEEDBACK_QUESTION_ID,feedbackQuestionId);
  String feedbackResponseId=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESPONSE_ID);
  Assumption.assertPostParamNotNull(Const.ParamsNames.FEEDBACK_RESPONSE_ID,feedbackResponseId);
  String commentId=getRequestParamValue(Const.ParamsNames.COMMENT_ID);
  Assumption.assertPostParamNotNull(Const.ParamsNames.COMMENT_ID,commentId);
  InstructorAttributes instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  FeedbackSessionAttributes session=logic.getFeedbackSession(feedbackSessionName,courseId);
  FeedbackResponseAttributes response=logic.getFeedbackResponse(feedbackResponseId);
  Assumption.assertNotNull(response);
  boolean isCreatorOnly=true;
  gateKeeper.verifyAccessible(instructor,session,!isCreatorOnly,response.giverSection,Const.ParamsNames.INSTRUCTOR_PERMISSION_SUBMIT_SESSION_IN_SECTIONS);
  gateKeeper.verifyAccessible(instructor,session,!isCreatorOnly,response.recipientSection,Const.ParamsNames.INSTRUCTOR_PERMISSION_SUBMIT_SESSION_IN_SECTIONS);
  InstructorFeedbackResponseCommentAjaxPageData data=new InstructorFeedbackResponseCommentAjaxPageData(account,sessionToken);
  String giverEmail=response.giver;
  String recipientEmail=response.recipient;
  FeedbackSessionResultsBundle bundle=logic.getFeedbackSessionResultsForInstructor(feedbackSessionName,courseId,instructor.email);
  String giverName=bundle.getGiverNameForResponse(response);
  String giverTeamName=bundle.getTeamNameForEmail(giverEmail);
  data.giverName=bundle.appendTeamNameToName(giverName,giverTeamName);
  String recipientName=bundle.getRecipientNameForResponse(response);
  String recipientTeamName=bundle.getTeamNameForEmail(recipientEmail);
  data.recipientName=bundle.appendTeamNameToName(recipientName,recipientTeamName);
  String commentText=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_TEXT);
  Assumption.assertPostParamNotNull(Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_TEXT,commentText);
  if (commentText.trim().isEmpty()) {
    data.errorMessage=Const.StatusMessages.FEEDBACK_RESPONSE_COMMENT_EMPTY;
    data.isError=true;
    return createAjaxResult(data);
  }
  FeedbackResponseCommentAttributes feedbackResponseComment=new FeedbackResponseCommentAttributes(courseId,feedbackSessionName,feedbackQuestionId,instructor.email,feedbackResponseId,new Date(),new Text(commentText),response.giverSection,response.recipientSection);
  String showCommentTo=getRequestParamValue(Const.ParamsNames.RESPONSE_COMMENTS_SHOWCOMMENTSTO);
  String showGiverNameTo=getRequestParamValue(Const.ParamsNames.RESPONSE_COMMENTS_SHOWGIVERTO);
  feedbackResponseComment.showCommentTo=new ArrayList<FeedbackParticipantType>();
  if (showCommentTo != null && !showCommentTo.isEmpty()) {
    String[] showCommentToArray=showCommentTo.split(""String_Node_Str"");
    for (    String viewer : showCommentToArray) {
      feedbackResponseComment.showCommentTo.add(FeedbackParticipantType.valueOf(viewer.trim()));
    }
  }
  feedbackResponseComment.showGiverNameTo=new ArrayList<FeedbackParticipantType>();
  if (showGiverNameTo != null && !showGiverNameTo.isEmpty()) {
    String[] showGiverNameToArray=showGiverNameTo.split(""String_Node_Str"");
    for (    String viewer : showGiverNameToArray) {
      feedbackResponseComment.showGiverNameTo.add(FeedbackParticipantType.valueOf(viewer.trim()));
    }
  }
  FeedbackResponseCommentAttributes createdComment=new FeedbackResponseCommentAttributes();
  try {
    createdComment=logic.createFeedbackResponseComment(feedbackResponseComment);
    logic.putDocument(createdComment);
  }
 catch (  InvalidParametersException e) {
    setStatusForException(e);
    data.errorMessage=e.getMessage();
    data.isError=true;
  }
  if (!data.isError) {
    statusToAdmin+=""String_Node_Str"" + ""String_Node_Str"" + feedbackResponseComment.feedbackResponseId + ""String_Node_Str""+ ""String_Node_Str""+ feedbackResponseComment.courseId+ ""String_Node_Str""+ feedbackResponseComment.feedbackSessionName+ ""String_Node_Str""+ ""String_Node_Str""+ feedbackResponseComment.giverEmail+ ""String_Node_Str""+ feedbackResponseComment.createdAt+ ""String_Node_Str""+ ""String_Node_Str""+ feedbackResponseComment.commentText.getValue();
  }
  data.comment=createdComment;
  data.commentId=commentId;
  data.showCommentToString=StringHelper.toString(createdComment.showCommentTo,""String_Node_Str"");
  data.showGiverNameToString=StringHelper.toString(createdComment.showGiverNameTo,""String_Node_Str"");
  return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESPONSE_COMMENTS_ADD,data);
}","@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  Assumption.assertPostParamNotNull(Const.ParamsNames.COURSE_ID,courseId);
  String feedbackSessionName=getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);
  Assumption.assertPostParamNotNull(Const.ParamsNames.FEEDBACK_SESSION_NAME,feedbackSessionName);
  String feedbackQuestionId=getRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_ID);
  Assumption.assertPostParamNotNull(Const.ParamsNames.FEEDBACK_QUESTION_ID,feedbackQuestionId);
  String feedbackResponseId=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESPONSE_ID);
  Assumption.assertPostParamNotNull(Const.ParamsNames.FEEDBACK_RESPONSE_ID,feedbackResponseId);
  String commentId=getRequestParamValue(Const.ParamsNames.COMMENT_ID);
  Assumption.assertPostParamNotNull(Const.ParamsNames.COMMENT_ID,commentId);
  InstructorAttributes instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  FeedbackSessionAttributes session=logic.getFeedbackSession(feedbackSessionName,courseId);
  FeedbackResponseAttributes response=logic.getFeedbackResponse(feedbackResponseId);
  Assumption.assertNotNull(response);
  boolean isCreatorOnly=true;
  gateKeeper.verifyAccessible(instructor,session,!isCreatorOnly,response.giverSection,Const.ParamsNames.INSTRUCTOR_PERMISSION_SUBMIT_SESSION_IN_SECTIONS);
  gateKeeper.verifyAccessible(instructor,session,!isCreatorOnly,response.recipientSection,Const.ParamsNames.INSTRUCTOR_PERMISSION_SUBMIT_SESSION_IN_SECTIONS);
  InstructorFeedbackResponseCommentAjaxPageData data=new InstructorFeedbackResponseCommentAjaxPageData(account,sessionToken);
  String giverEmail=response.giver;
  String recipientEmail=response.recipient;
  FeedbackSessionResultsBundle bundle=logic.getFeedbackSessionResultsForInstructor(feedbackSessionName,courseId,instructor.email);
  String giverName=bundle.getGiverNameForResponse(response);
  String giverTeamName=bundle.getTeamNameForEmail(giverEmail);
  data.giverName=bundle.appendTeamNameToName(giverName,giverTeamName);
  String recipientName=bundle.getRecipientNameForResponse(response);
  String recipientTeamName=bundle.getTeamNameForEmail(recipientEmail);
  data.recipientName=bundle.appendTeamNameToName(recipientName,recipientTeamName);
  String commentText=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_TEXT);
  Assumption.assertPostParamNotNull(Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_TEXT,commentText);
  if (commentText.trim().isEmpty()) {
    data.errorMessage=Const.StatusMessages.FEEDBACK_RESPONSE_COMMENT_EMPTY;
    data.isError=true;
    return createAjaxResult(data);
  }
  FeedbackResponseCommentAttributes feedbackResponseComment=new FeedbackResponseCommentAttributes(courseId,feedbackSessionName,feedbackQuestionId,instructor.email,feedbackResponseId,new Date(),new Text(commentText),response.giverSection,response.recipientSection);
  String showCommentTo=getRequestParamValue(Const.ParamsNames.RESPONSE_COMMENTS_SHOWCOMMENTSTO);
  String showGiverNameTo=getRequestParamValue(Const.ParamsNames.RESPONSE_COMMENTS_SHOWGIVERTO);
  feedbackResponseComment.showCommentTo=new ArrayList<FeedbackParticipantType>();
  if (showCommentTo != null && !showCommentTo.isEmpty()) {
    String[] showCommentToArray=showCommentTo.split(""String_Node_Str"");
    for (    String viewer : showCommentToArray) {
      feedbackResponseComment.showCommentTo.add(FeedbackParticipantType.valueOf(viewer.trim()));
    }
  }
  feedbackResponseComment.showGiverNameTo=new ArrayList<FeedbackParticipantType>();
  if (showGiverNameTo != null && !showGiverNameTo.isEmpty()) {
    String[] showGiverNameToArray=showGiverNameTo.split(""String_Node_Str"");
    for (    String viewer : showGiverNameToArray) {
      feedbackResponseComment.showGiverNameTo.add(FeedbackParticipantType.valueOf(viewer.trim()));
    }
  }
  FeedbackResponseCommentAttributes createdComment=new FeedbackResponseCommentAttributes();
  try {
    createdComment=logic.createFeedbackResponseComment(feedbackResponseComment);
    logic.putDocument(createdComment);
  }
 catch (  InvalidParametersException e) {
    setStatusForException(e);
    data.errorMessage=e.getMessage();
    data.isError=true;
  }
  if (!data.isError) {
    statusToAdmin+=""String_Node_Str"" + ""String_Node_Str"" + feedbackResponseComment.feedbackResponseId + ""String_Node_Str""+ ""String_Node_Str""+ feedbackResponseComment.courseId+ ""String_Node_Str""+ feedbackResponseComment.feedbackSessionName+ ""String_Node_Str""+ ""String_Node_Str""+ feedbackResponseComment.giverEmail+ ""String_Node_Str""+ feedbackResponseComment.createdAt+ ""String_Node_Str""+ ""String_Node_Str""+ feedbackResponseComment.commentText.getValue();
  }
  data.comment=createdComment;
  data.commentId=commentId;
  data.showCommentToString=StringHelper.toString(createdComment.showCommentTo,""String_Node_Str"");
  data.showGiverNameToString=StringHelper.toString(createdComment.showGiverNameTo,""String_Node_Str"");
  data.question=logic.getFeedbackQuestion(feedbackQuestionId);
  return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESPONSE_COMMENTS_ADD,data);
}",0.9938840889234056
62713,"private Map<FeedbackParticipantType,Boolean> getResponseVisibilities(){
  FeedbackParticipantType[] relevantTypes={FeedbackParticipantType.RECEIVER,FeedbackParticipantType.OWN_TEAM_MEMBERS,FeedbackParticipantType.RECEIVER_TEAM_MEMBERS,FeedbackParticipantType.STUDENTS,FeedbackParticipantType.INSTRUCTORS};
  Map<FeedbackParticipantType,Boolean> responseVisibilities=new HashMap<>();
  for (  FeedbackParticipantType type : relevantTypes) {
    responseVisibilities.put(type,true);
  }
  return responseVisibilities;
}","private Map<FeedbackParticipantType,Boolean> getResponseVisibilities(){
  FeedbackParticipantType[] relevantTypes={FeedbackParticipantType.RECEIVER,FeedbackParticipantType.OWN_TEAM_MEMBERS,FeedbackParticipantType.RECEIVER_TEAM_MEMBERS,FeedbackParticipantType.STUDENTS,FeedbackParticipantType.INSTRUCTORS};
  Map<FeedbackParticipantType,Boolean> responseVisibilities=new HashMap<>();
  for (  FeedbackParticipantType type : relevantTypes) {
    responseVisibilities.put(type,isResponseVisibleTo(type,question));
  }
  return responseVisibilities;
}",0.9680451127819548
62714,"@Override protected void doOperation(){
  try {
    getInstructorEmailConfiguration();
    getStudentEmailConfiguration();
    printToFile();
  }
 catch (  InvalidParametersException e) {
    System.out.print(e.getMessage() + ""String_Node_Str"");
  }
  System.out.print(""String_Node_Str"" + emailListConfig.student + ""String_Node_Str"");
  if (emailListConfig.student) {
    System.out.print(""String_Node_Str"");
switch (emailListConfig.studentStatus) {
case REG:
      System.out.print(""String_Node_Str"");
    break;
case UNREG:
  System.out.print(""String_Node_Str"");
break;
case ALL:
System.out.print(""String_Node_Str"");
break;
default :
System.out.print(""String_Node_Str"");
break;
}
}
if (emailListConfig.studentCreatedDateRangeStart != null) {
System.out.print(""String_Node_Str"" + emailListConfig.studentCreatedDateRangeStart + ""String_Node_Str"");
}
if (emailListConfig.studentCreatedDateRangeEnd != null) {
System.out.print(""String_Node_Str"" + emailListConfig.studentCreatedDateRangeEnd + ""String_Node_Str"");
}
System.out.print(""String_Node_Str"" + emailListConfig.instructor + ""String_Node_Str"");
if (emailListConfig.instructor) {
System.out.print(""String_Node_Str"");
switch (emailListConfig.studentStatus) {
case REG:
System.out.print(""String_Node_Str"");
break;
case UNREG:
System.out.print(""String_Node_Str"");
break;
case ALL:
System.out.print(""String_Node_Str"");
break;
default :
System.out.print(""String_Node_Str"");
break;
}
}
if (emailListConfig.instructorCreatedDateRangeStart != null) {
System.out.print(""String_Node_Str"" + emailListConfig.instructorCreatedDateRangeStart + ""String_Node_Str"");
}
if (emailListConfig.instructorCreatedDateRangeEnd != null) {
System.out.print(""String_Node_Str"" + emailListConfig.instructorCreatedDateRangeEnd + ""String_Node_Str"");
}
}","@Override protected void doOperation(){
  try {
    getInstructorEmailConfiguration();
    getStudentEmailConfiguration();
    printToFile();
  }
 catch (  InvalidParametersException e) {
    System.out.print(e.getMessage() + ""String_Node_Str"");
  }
  System.out.print(""String_Node_Str"" + emailListConfig.student + ""String_Node_Str"");
  if (emailListConfig.student) {
    System.out.print(""String_Node_Str"");
switch (emailListConfig.studentStatus) {
case REG:
      System.out.print(""String_Node_Str"");
    break;
case UNREG:
  System.out.print(""String_Node_Str"");
break;
case ALL:
default :
System.out.print(""String_Node_Str"");
break;
}
}
if (emailListConfig.studentCreatedDateRangeStart != null) {
System.out.print(""String_Node_Str"" + emailListConfig.studentCreatedDateRangeStart + ""String_Node_Str"");
}
if (emailListConfig.studentCreatedDateRangeEnd != null) {
System.out.print(""String_Node_Str"" + emailListConfig.studentCreatedDateRangeEnd + ""String_Node_Str"");
}
System.out.print(""String_Node_Str"" + emailListConfig.instructor + ""String_Node_Str"");
if (emailListConfig.instructor) {
System.out.print(""String_Node_Str"");
switch (emailListConfig.studentStatus) {
case REG:
System.out.print(""String_Node_Str"");
break;
case UNREG:
System.out.print(""String_Node_Str"");
break;
case ALL:
default :
System.out.print(""String_Node_Str"");
break;
}
}
if (emailListConfig.instructorCreatedDateRangeStart != null) {
System.out.print(""String_Node_Str"" + emailListConfig.instructorCreatedDateRangeStart + ""String_Node_Str"");
}
if (emailListConfig.instructorCreatedDateRangeEnd != null) {
System.out.print(""String_Node_Str"" + emailListConfig.instructorCreatedDateRangeEnd + ""String_Node_Str"");
}
}",0.9745517640254482
62715,"private static void regenerateDataBundleJson(File folder) throws IOException {
  File[] listOfFiles=folder.listFiles();
  for (  File file : listOfFiles) {
    if (!file.getName().endsWith(""String_Node_Str"") || NON_DATA_BUNDLE_JSON.contains(file.getName())) {
      continue;
    }
    String jsonString=FileHelper.readFile(file.getCanonicalPath());
    DataBundle db=JsonUtils.fromJson(jsonString,DataBundle.class);
    for (    Map.Entry<String,FeedbackResponseAttributes> responseMap : db.feedbackResponses.entrySet()) {
      fixResponse(responseMap.getValue());
    }
    for (    Map.Entry<String,FeedbackQuestionAttributes> questionMap : db.feedbackQuestions.entrySet()) {
      fixQuestion(questionMap.getValue());
    }
    String regeneratedJsonString=JsonUtils.toJson(db).replace(""String_Node_Str"",""String_Node_Str"");
    saveFile(file.getCanonicalPath(),regeneratedJsonString);
  }
}","private static void regenerateDataBundleJson(File folder) throws IOException {
  File[] listOfFiles=folder.listFiles();
  if (listOfFiles == null) {
    return;
  }
  for (  File file : listOfFiles) {
    if (!file.getName().endsWith(""String_Node_Str"") || NON_DATA_BUNDLE_JSON.contains(file.getName())) {
      continue;
    }
    String jsonString=FileHelper.readFile(file.getCanonicalPath());
    DataBundle db=JsonUtils.fromJson(jsonString,DataBundle.class);
    for (    Map.Entry<String,FeedbackResponseAttributes> responseMap : db.feedbackResponses.entrySet()) {
      fixResponse(responseMap.getValue());
    }
    for (    Map.Entry<String,FeedbackQuestionAttributes> questionMap : db.feedbackQuestions.entrySet()) {
      fixQuestion(questionMap.getValue());
    }
    String regeneratedJsonString=JsonUtils.toJson(db).replace(""String_Node_Str"",""String_Node_Str"");
    saveFile(file.getCanonicalPath(),regeneratedJsonString);
  }
}",0.9754768392370572
62716,"/** 
 * Randomly create students for a particular course
 * @param courseName
 */
public static void generateStudentsDataForCourse(String courseName){
  long numOfStudent=getDeviatedNumberOfStudentInCourse();
  Set<Integer> studentIndexs=new HashSet<Integer>();
  while (studentIndexs.size() < numOfStudent) {
    studentIndexs.add(random.nextInt(NUM_OF_STUDENTS));
  }
  ArrayList<String> studentEmailInCourse=new ArrayList<String>();
  for (  Integer integer : studentIndexs) {
    studentEmailInCourse.add(studentEmails.get(integer));
  }
  int teamCount=1;
  while (!studentEmailInCourse.isEmpty()) {
    long teamSize=Math.round(random.nextInt(MAX_TEAM_SIZE - MIN_TEAM_SIZE + 1) + MIN_TEAM_SIZE);
    ArrayList<String> team=new ArrayList<String>();
    for (int k=0; !studentEmailInCourse.isEmpty() && k < teamSize; k++) {
      String email=studentEmailInCourse.remove(0);
      String studentIndex=email.split(""String_Node_Str"")[0].split(""String_Node_Str"")[1];
      String studentId=PREFIX + ""String_Node_Str"" + studentIndex+ ""String_Node_Str""+ teamCount+ ""String_Node_Str""+ courseName;
      students.add(studentId);
      team.add(studentId);
    }
    teamCount++;
    teams.add(team);
  }
}","/** 
 * Randomly create students for a particular course
 * @param courseName
 */
public static void generateStudentsDataForCourse(String courseName){
  long numOfStudent=getDeviatedNumberOfStudentInCourse();
  Set<Integer> studentIndexs=new HashSet<Integer>();
  while (studentIndexs.size() < numOfStudent) {
    studentIndexs.add(random.nextInt(NUM_OF_STUDENTS));
  }
  ArrayList<String> studentEmailInCourse=new ArrayList<String>();
  for (  Integer integer : studentIndexs) {
    studentEmailInCourse.add(studentEmails.get(integer));
  }
  int teamCount=1;
  while (!studentEmailInCourse.isEmpty()) {
    long teamSize=random.nextInt(MAX_TEAM_SIZE - MIN_TEAM_SIZE + 1) + MIN_TEAM_SIZE;
    ArrayList<String> team=new ArrayList<String>();
    for (int k=0; !studentEmailInCourse.isEmpty() && k < teamSize; k++) {
      String email=studentEmailInCourse.remove(0);
      String studentIndex=email.split(""String_Node_Str"")[0].split(""String_Node_Str"")[1];
      String studentId=PREFIX + ""String_Node_Str"" + studentIndex+ ""String_Node_Str""+ teamCount+ ""String_Node_Str""+ courseName;
      students.add(studentId);
      team.add(studentId);
    }
    teamCount++;
    teams.add(team);
  }
}",0.9949832775919732
62717,"/** 
 * @return Json string presentation for all instructors
 */
public static String allInstructors(){
  StringBuilder outputBuilder=new StringBuilder(100);
  outputBuilder.append(""String_Node_Str"");
  for (  String instructor : instructors.keySet()) {
    String course=PREFIX + instructors.get(instructor);
    String instructorWithPrefix=PREFIX + instructor;
    outputBuilder.append('\t').append(instructor(instructorWithPrefix,""String_Node_Str"" + instructorWithPrefix,""String_Node_Str"" + course,""String_Node_Str"" + instructorWithPrefix,""String_Node_Str"" + instructorWithPrefix + ""String_Node_Str"")).append(""String_Node_Str"");
  }
  String output=outputBuilder.substring(0,outputBuilder.length() - 2);
  return output + ""String_Node_Str"";
}","/** 
 * @return Json string presentation for all instructors
 */
public static String allInstructors(){
  StringBuilder outputBuilder=new StringBuilder(100);
  outputBuilder.append(""String_Node_Str"");
  for (  Map.Entry<String,String> entry : instructors.entrySet()) {
    String course=PREFIX + instructors.get(entry.getValue());
    String instructorWithPrefix=PREFIX + entry.getKey();
    outputBuilder.append('\t').append(instructor(instructorWithPrefix,""String_Node_Str"" + instructorWithPrefix,""String_Node_Str"" + course,""String_Node_Str"" + instructorWithPrefix,""String_Node_Str"" + instructorWithPrefix + ""String_Node_Str"")).append(""String_Node_Str"");
  }
  String output=outputBuilder.substring(0,outputBuilder.length() - 2);
  return output + ""String_Node_Str"";
}",0.932013201320132
62718,"/** 
 * Randomly create courses, students and evaluations for a particular instructor
 * @param instructorName
 */
public static void generateDataForCourse(String courseName){
  long numOfInstr=Math.round(random.nextInt(MAX_NUM_OF_INSTRUCTOR_PER_COURSES - MIN_NUM_OF_INSTRUCTOR_PER_COURSES + 1) + MIN_NUM_OF_INSTRUCTOR_PER_COURSES);
  for (int j=0; j < numOfInstr; j++) {
    String instrName=""String_Node_Str"" + j + ""String_Node_Str""+ courseName;
    instructors.put(instrName,courseName);
  }
  generateStudentsDataForCourse(courseName);
}","/** 
 * Randomly create courses, students and evaluations for a particular instructor
 * @param instructorName
 */
public static void generateDataForCourse(String courseName){
  long numOfInstr=random.nextInt(MAX_NUM_OF_INSTRUCTOR_PER_COURSES - MIN_NUM_OF_INSTRUCTOR_PER_COURSES + 1) + MIN_NUM_OF_INSTRUCTOR_PER_COURSES;
  for (int j=0; j < numOfInstr; j++) {
    String instrName=""String_Node_Str"" + j + ""String_Node_Str""+ courseName;
    instructors.put(instrName,courseName);
  }
  generateStudentsDataForCourse(courseName);
}",0.988785046728972
62719,"/** 
 * This method will persist a number of entity and remove them from the source, return the status of the operation.
 * @param map - HashMap which has data to persist
 * @return status of the Backdoor operation
 */
private static String persist(Map<String,?> map){
  DataBundle bundle=new DataBundle();
  int count=0;
  Set<String> set=map.keySet();
  Iterator<String> itr=set.iterator();
  String type=""String_Node_Str"";
  while (itr.hasNext()) {
    String key=itr.next();
    Object obj=map.get(key);
    if (obj instanceof AccountAttributes) {
      type=""String_Node_Str"";
      AccountAttributes accountData=(AccountAttributes)obj;
      bundle.accounts.put(key,accountData);
    }
 else     if (obj instanceof InstructorAttributes) {
      type=""String_Node_Str"";
      InstructorAttributes instructorData=(InstructorAttributes)obj;
      bundle.instructors.put(key,instructorData);
    }
 else     if (obj instanceof CourseAttributes) {
      type=""String_Node_Str"";
      CourseAttributes courseData=(CourseAttributes)obj;
      bundle.courses.put(key,courseData);
    }
 else     if (obj instanceof StudentAttributes) {
      type=""String_Node_Str"";
      StudentAttributes studentData=(StudentAttributes)obj;
      bundle.students.put(key,studentData);
    }
    count++;
    itr.remove();
    System.out.print(key + ""String_Node_Str"");
    if (""String_Node_Str"".equals(type) && count >= MAX_NUMBER_OF_EVALUATION_PER_REQUEST || count >= MAX_NUMBER_OF_ENTITY_PER_REQUEST) {
      break;
    }
  }
  System.out.print(count + ""String_Node_Str"" + type+ ""String_Node_Str""+ map.size()+ ""String_Node_Str"");
  String status=BackDoor.restoreDataBundle(bundle);
  try {
    Thread.sleep(WAIT_TIME_BETWEEN_REQUEST);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return status;
}","/** 
 * This method will persist a number of entity and remove them from the source, return the status of the operation.
 * @param map - HashMap which has data to persist
 * @return status of the Backdoor operation
 */
private static String persist(Map<String,?> map){
  DataBundle bundle=new DataBundle();
  int count=0;
  String type=""String_Node_Str"";
  for (  Map.Entry<String,?> entry : map.entrySet()) {
    String key=entry.getKey();
    Object obj=entry.getValue();
    if (obj instanceof AccountAttributes) {
      type=""String_Node_Str"";
      AccountAttributes accountData=(AccountAttributes)obj;
      bundle.accounts.put(key,accountData);
    }
 else     if (obj instanceof InstructorAttributes) {
      type=""String_Node_Str"";
      InstructorAttributes instructorData=(InstructorAttributes)obj;
      bundle.instructors.put(key,instructorData);
    }
 else     if (obj instanceof CourseAttributes) {
      type=""String_Node_Str"";
      CourseAttributes courseData=(CourseAttributes)obj;
      bundle.courses.put(key,courseData);
    }
 else     if (obj instanceof StudentAttributes) {
      type=""String_Node_Str"";
      StudentAttributes studentData=(StudentAttributes)obj;
      bundle.students.put(key,studentData);
    }
    count++;
    System.out.print(key + ""String_Node_Str"");
    if (""String_Node_Str"".equals(type) && count >= MAX_NUMBER_OF_EVALUATION_PER_REQUEST || count >= MAX_NUMBER_OF_ENTITY_PER_REQUEST) {
      break;
    }
  }
  System.out.print(count + ""String_Node_Str"" + type+ ""String_Node_Str""+ map.size()+ ""String_Node_Str"");
  String status=BackDoor.restoreDataBundle(bundle);
  try {
    Thread.sleep(WAIT_TIME_BETWEEN_REQUEST);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return status;
}",0.922515440763616
62720,"@Override public int compare(InstituteStats inst1,InstituteStats inst2){
  return Integer.valueOf(inst2.studentTotal).compareTo(Integer.valueOf(inst1.studentTotal));
}","@Override public int compare(InstituteStats inst1,InstituteStats inst2){
  return Integer.compare(inst2.studentTotal,inst1.studentTotal);
}",0.869281045751634
62721,"private List<InstituteStats> convertToList(HashMap<String,HashMap<Integer,HashSet<String>>> institutes){
  List<InstituteStats> list=new ArrayList<InstituteStats>();
  for (  String insName : institutes.keySet()) {
    InstituteStats insStat=new InstituteStats();
    insStat.name=insName;
    insStat.studentTotal=institutes.get(insName).get(STUDENT_INDEX).size();
    insStat.instructorTotal=institutes.get(insName).get(INSTRUCTOR_INDEX).size();
    list.add(insStat);
  }
  return list;
}","private List<InstituteStats> convertToList(HashMap<String,HashMap<Integer,HashSet<String>>> institutes){
  List<InstituteStats> list=new ArrayList<InstituteStats>();
  for (  Map.Entry<String,HashMap<Integer,HashSet<String>>> entry : institutes.entrySet()) {
    InstituteStats insStat=new InstituteStats();
    insStat.name=entry.getKey();
    insStat.studentTotal=entry.getValue().get(STUDENT_INDEX).size();
    insStat.instructorTotal=entry.getValue().get(INSTRUCTOR_INDEX).size();
    list.add(insStat);
  }
  return list;
}",0.6123650637880275
62722,"private void sortByTotalStudentsDescending(List<InstituteStats> list){
  Collections.sort(list,new Comparator<InstituteStats>(){
    @Override public int compare(    InstituteStats inst1,    InstituteStats inst2){
      return Integer.valueOf(inst2.studentTotal).compareTo(Integer.valueOf(inst1.studentTotal));
    }
  }
);
}","private void sortByTotalStudentsDescending(List<InstituteStats> list){
  Collections.sort(list,new Comparator<InstituteStats>(){
    @Override public int compare(    InstituteStats inst1,    InstituteStats inst2){
      return Integer.compare(inst2.studentTotal,inst1.studentTotal);
    }
  }
);
}",0.8778135048231511
62723,"private static FeedbackResponseCommentAttributes adjustFeedbackResponseCommentId(FeedbackResponseCommentAttributes response){
  FeedbackQuestionAttributes question=feedbackQuestionsPersisted.get(response.feedbackQuestionId);
  if (feedbackQuestionIds.containsKey(question.getId())) {
    response.feedbackQuestionId=feedbackQuestionIds.get(question.getId());
  }
 else {
    String newId=feedbackQuestionsLogic.getFeedbackQuestion(response.feedbackSessionName,response.courseId,question.questionNumber).getId();
    response.feedbackQuestionId=newId;
    feedbackQuestionIds.put(question.getId(),newId);
  }
  return response;
}","private static void adjustFeedbackResponseCommentId(FeedbackResponseCommentAttributes response){
  FeedbackQuestionAttributes question=feedbackQuestionsPersisted.get(response.feedbackQuestionId);
  if (feedbackQuestionIds.containsKey(question.getId())) {
    response.feedbackQuestionId=feedbackQuestionIds.get(question.getId());
  }
 else {
    String newId=feedbackQuestionsLogic.getFeedbackQuestion(response.feedbackSessionName,response.courseId,question.questionNumber).getId();
    response.feedbackQuestionId=newId;
    feedbackQuestionIds.put(question.getId(),newId);
  }
}",0.9370860927152318
62724,"private static FeedbackResponseAttributes adjustFeedbackResponseId(FeedbackResponseAttributes response){
  FeedbackQuestionAttributes question=feedbackQuestionsPersisted.get(response.feedbackQuestionId);
  if (feedbackQuestionIds.containsKey(question.getId())) {
    response.feedbackQuestionId=feedbackQuestionIds.get(question.getId());
  }
 else {
    String newId=feedbackQuestionsLogic.getFeedbackQuestion(response.feedbackSessionName,response.courseId,question.questionNumber).getId();
    response.feedbackQuestionId=newId;
    feedbackQuestionIds.put(question.getId(),newId);
  }
  return response;
}","private static void adjustFeedbackResponseId(FeedbackResponseAttributes response){
  FeedbackQuestionAttributes question=feedbackQuestionsPersisted.get(response.feedbackQuestionId);
  if (feedbackQuestionIds.containsKey(question.getId())) {
    response.feedbackQuestionId=feedbackQuestionIds.get(question.getId());
  }
 else {
    String newId=feedbackQuestionsLogic.getFeedbackQuestion(response.feedbackSessionName,response.courseId,question.questionNumber).getId();
    response.feedbackQuestionId=newId;
    feedbackQuestionIds.put(question.getId(),newId);
  }
}",0.9582267689684568
62725,"private static void persistFeedbackResponses(Map<String,FeedbackResponseAttributes> map){
  Map<String,FeedbackResponseAttributes> responses=map;
  try {
    for (    FeedbackResponseAttributes response : responses.values()) {
      response=adjustFeedbackResponseId(response);
    }
    frDb.createFeedbackResponses(responses.values());
  }
 catch (  InvalidParametersException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
  }
}","private static void persistFeedbackResponses(Map<String,FeedbackResponseAttributes> map){
  Map<String,FeedbackResponseAttributes> responses=map;
  try {
    for (    FeedbackResponseAttributes response : responses.values()) {
      adjustFeedbackResponseId(response);
    }
    frDb.createFeedbackResponses(responses.values());
  }
 catch (  InvalidParametersException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
  }
}",0.9898762654668166
62726,"private static void persistFeedbackResponseComments(Map<String,FeedbackResponseCommentAttributes> map){
  Map<String,FeedbackResponseCommentAttributes> responseComments=map;
  try {
    for (    FeedbackResponseCommentAttributes responseComment : responseComments.values()) {
      responseComment=adjustFeedbackResponseCommentId(responseComment);
    }
    fcDb.createFeedbackResponseComments(responseComments.values());
  }
 catch (  InvalidParametersException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
  }
}","private static void persistFeedbackResponseComments(Map<String,FeedbackResponseCommentAttributes> map){
  Map<String,FeedbackResponseCommentAttributes> responseComments=map;
  try {
    for (    FeedbackResponseCommentAttributes responseComment : responseComments.values()) {
      adjustFeedbackResponseCommentId(responseComment);
    }
    fcDb.createFeedbackResponseComments(responseComments.values());
  }
 catch (  InvalidParametersException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
  }
}",0.9847619047619048
62727,"private static String[] getFolders(){
  File backupFolder=new File(BACKUP_FOLDER);
  String[] folders=backupFolder.list();
  List<String> listOfFolders=Arrays.asList(folders);
  Collections.sort(listOfFolders,new Comparator<String>(){
    @Override public int compare(    String o1,    String o2){
      DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
      try {
        Date firstDate=dateFormat.parse(o1);
        Date secondDate=dateFormat.parse(o2);
        return secondDate.compareTo(firstDate);
      }
 catch (      ParseException e) {
        return 0;
      }
    }
  }
);
  listOfFolders.toArray(folders);
  return folders;
}","private static String[] getFolders(){
  File backupFolder=new File(BACKUP_FOLDER);
  String[] folders=backupFolder.list();
  if (folders == null) {
    return new String[]{};
  }
  List<String> listOfFolders=Arrays.asList(folders);
  Collections.sort(listOfFolders,new Comparator<String>(){
    @Override public int compare(    String o1,    String o2){
      DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
      try {
        Date firstDate=dateFormat.parse(o1);
        Date secondDate=dateFormat.parse(o2);
        return secondDate.compareTo(firstDate);
      }
 catch (      ParseException e) {
        return 0;
      }
    }
  }
);
  listOfFolders.toArray(folders);
  return folders;
}",0.9588235294117649
62728,"public FeedbackSessionResponseStatus(){
  hasResponse=new ArrayList<String>();
  noResponse=new ArrayList<String>();
  emailNameTable=new HashMap<String,String>();
  emailSectionTable=new HashMap<String,String>();
  emailTeamNameTable=new HashMap<String,String>();
}","public FeedbackSessionResponseStatus(){
  noResponse=new ArrayList<String>();
  emailNameTable=new HashMap<String,String>();
  emailSectionTable=new HashMap<String,String>();
  emailTeamNameTable=new HashMap<String,String>();
}",0.9127789046653144
62729,"private void setDefaultPrivileges(Map<String,Boolean> defaultPrivileges){
  for (  String privilege : defaultPrivileges.keySet()) {
    courseLevel.put(privilege,defaultPrivileges.get(privilege));
  }
}","private void setDefaultPrivileges(Map<String,Boolean> defaultPrivileges){
  for (  Map.Entry<String,Boolean> entry : defaultPrivileges.entrySet()) {
    courseLevel.put(entry.getKey(),entry.getValue());
  }
}",0.7317073170731707
62730,"private boolean hasSamePrivileges(Map<String,Boolean> defaultPrivileges){
  for (  String privilege : defaultPrivileges.keySet()) {
    if (isAllowedForPrivilege(privilege) != defaultPrivileges.get(privilege)) {
      return false;
    }
  }
  return true;
}","private boolean hasSamePrivileges(Map<String,Boolean> defaultPrivileges){
  for (  Map.Entry<String,Boolean> entry : defaultPrivileges.entrySet()) {
    if (isAllowedForPrivilege(entry.getKey()) != entry.getValue()) {
      return false;
    }
  }
  return true;
}",0.7701149425287356
62731,"public void removeIrrelevantVisibilityOptions(){
  List<FeedbackParticipantType> optionsToRemove=new ArrayList<FeedbackParticipantType>();
switch (recipientType) {
case NONE:
    optionsToRemove.add(FeedbackParticipantType.RECEIVER);
  optionsToRemove.add(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS);
break;
case TEAMS:
optionsToRemove.add(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS);
break;
case INSTRUCTORS:
optionsToRemove.add(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS);
break;
case OWN_TEAM:
optionsToRemove.add(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS);
break;
case OWN_TEAM_MEMBERS:
optionsToRemove.add(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS);
break;
default :
break;
}
switch (giverType) {
case TEAMS:
optionsToRemove.add(FeedbackParticipantType.OWN_TEAM_MEMBERS);
break;
case INSTRUCTORS:
optionsToRemove.add(FeedbackParticipantType.OWN_TEAM_MEMBERS);
break;
default :
break;
}
removeVisibilities(optionsToRemove);
}","public void removeIrrelevantVisibilityOptions(){
  List<FeedbackParticipantType> optionsToRemove=new ArrayList<FeedbackParticipantType>();
switch (recipientType) {
case NONE:
    optionsToRemove.add(FeedbackParticipantType.RECEIVER);
  optionsToRemove.add(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS);
break;
case TEAMS:
case INSTRUCTORS:
case OWN_TEAM:
case OWN_TEAM_MEMBERS:
optionsToRemove.add(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS);
break;
default :
break;
}
switch (giverType) {
case TEAMS:
case INSTRUCTORS:
optionsToRemove.add(FeedbackParticipantType.OWN_TEAM_MEMBERS);
break;
default :
break;
}
removeVisibilities(optionsToRemove);
}",0.7927363807138385
62732,"/** 
 * Checks whether the edit form of student has changed the team value.
 * @param originalStudentAttribute
 * @return true if team has changed from its original value.
 */
public boolean isTeamChanged(StudentAttributes originalStudentAttribute){
  return ((this.team != null) && !(this.team.equals(originalStudentAttribute.team)));
}","/** 
 * Checks whether the edit form of student has changed the team value.
 * @param originalStudentAttribute
 * @return true if team value has changed from its original value.
 */
public boolean isTeamChanged(StudentAttributes originalStudentAttribute){
  return ((this.team != null) && !(this.team.equals(originalStudentAttribute.team)));
}",0.9911764705882352
62733,"/** 
 * Checks whether the edit form of student has changed the section value.
 * @param originalStudentAttribute
 * @return true if section has changed from its original value.
 */
public boolean isSectionChanged(StudentAttributes originalStudentAttribute){
  return ((this.section != null) && !(this.section.equals(originalStudentAttribute.section)));
}","/** 
 * Checks whether the edit form of student has changed the section value.
 * @param originalStudentAttribute
 * @return true if section value has changed from its original value.
 */
public boolean isSectionChanged(StudentAttributes originalStudentAttribute){
  return ((this.section != null) && !(this.section.equals(originalStudentAttribute.section)));
}",0.9916201117318436
62734,"/** 
 * Validates teams for any limit violations
 * @param studentList
 * @param courseId
 * @throws EntityDoesNotExistException
 * @throws EnrollException
 */
public void validateTeams(List<StudentAttributes> studentList,String courseId) throws EntityDoesNotExistException, EnrollException {
  List<StudentAttributes> mergedList=getMergedList(studentList,courseId);
  if (mergedList.size() < 2) {
    return;
  }
  String errorMessage=""String_Node_Str"";
  errorMessage+=getTeamInvalidityInfo(mergedList);
  if (!errorMessage.isEmpty()) {
    throw new EnrollException(errorMessage);
  }
}","/** 
 * Validates teams for any team name violations
 * @param studentList
 * @param courseId
 * @throws EntityDoesNotExistException
 * @throws EnrollException
 */
public void validateTeams(List<StudentAttributes> studentList,String courseId) throws EntityDoesNotExistException, EnrollException {
  List<StudentAttributes> mergedList=getMergedList(studentList,courseId);
  if (mergedList.size() < 2) {
    return;
  }
  String errorMessage=""String_Node_Str"";
  errorMessage+=getTeamInvalidityInfo(mergedList);
  if (!errorMessage.isEmpty()) {
    throw new EnrollException(errorMessage);
  }
}",0.988155668358714
62735,"/** 
 * Validates both sections and teams for any limit violations
 * @param studentList
 * @param courseId
 * @throws EntityDoesNotExistException
 * @throws EnrollException
 */
public void validateSectionsAndTeams(List<StudentAttributes> studentList,String courseId) throws EntityDoesNotExistException, EnrollException {
  List<StudentAttributes> mergedList=getMergedList(studentList,courseId);
  if (mergedList.size() < 2) {
    return;
  }
  String errorMessage=""String_Node_Str"";
  errorMessage+=getSectionInvalidityInfo(mergedList);
  errorMessage+=getTeamInvalidityInfo(mergedList);
  if (!errorMessage.isEmpty()) {
    throw new EnrollException(errorMessage);
  }
}","/** 
 * Validates sections for any limit violations and teams for any team name violations.
 * @param studentList
 * @param courseId
 * @throws EntityDoesNotExistException
 * @throws EnrollException
 */
public void validateSectionsAndTeams(List<StudentAttributes> studentList,String courseId) throws EntityDoesNotExistException, EnrollException {
  List<StudentAttributes> mergedList=getMergedList(studentList,courseId);
  if (mergedList.size() < 2) {
    return;
  }
  String errorMessage=""String_Node_Str"";
  errorMessage+=getSectionInvalidityInfo(mergedList);
  errorMessage+=getTeamInvalidityInfo(mergedList);
  if (!errorMessage.isEmpty()) {
    throw new EnrollException(errorMessage);
  }
}",0.9495982468955442
62736,"@Override public ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  Assumption.assertPostParamNotNull(Const.ParamsNames.COURSE_ID,courseId);
  String studentEmail=getRequestParamValue(Const.ParamsNames.STUDENT_EMAIL);
  Assumption.assertPostParamNotNull(Const.ParamsNames.STUDENT_EMAIL,studentEmail);
  InstructorAttributes instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  new GateKeeper().verifyAccessible(instructor,logic.getCourse(courseId),Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_STUDENT);
  boolean hasSection=logic.hasIndicatedSections(courseId);
  StudentAttributes student=logic.getStudentForEmail(courseId,studentEmail);
  if (student == null) {
    return redirectWithError(Const.StatusMessages.STUDENT_NOT_FOUND_FOR_EDIT,""String_Node_Str"" + studentEmail + ""String_Node_Str""+ ""String_Node_Str""+ courseId+ ""String_Node_Str"",courseId);
  }
  student.name=getRequestParamValue(Const.ParamsNames.STUDENT_NAME);
  student.email=getRequestParamValue(Const.ParamsNames.NEW_STUDENT_EMAIL);
  student.team=getRequestParamValue(Const.ParamsNames.TEAM_NAME);
  student.section=getRequestParamValue(Const.ParamsNames.SECTION_NAME);
  student.comments=getRequestParamValue(Const.ParamsNames.COMMENTS);
  student.name=Sanitizer.sanitizeName(student.name);
  student.email=Sanitizer.sanitizeEmail(student.email);
  student.team=Sanitizer.sanitizeName(student.team);
  student.section=Sanitizer.sanitizeName(student.section);
  student.comments=Sanitizer.sanitizeTextField(student.comments);
  try {
    StudentAttributes originalStudentAttribute=logic.getStudentForEmail(courseId,studentEmail);
    student.updateWithExistingRecord(originalStudentAttribute);
    boolean hasSectionChanged=student.hasSectionChanged(originalStudentAttribute);
    boolean hasTeamChanged=student.hasSectionChanged(originalStudentAttribute);
    if (hasSectionChanged) {
      logic.validateSectionsAndTeams(Arrays.asList(student),courseId);
    }
 else     if (hasTeamChanged) {
      logic.validateTeams(Arrays.asList(student),courseId);
    }
    logic.updateStudent(studentEmail,student);
    statusToUser.add(new StatusMessage(Const.StatusMessages.STUDENT_EDITED,StatusMessageColor.SUCCESS));
    statusToAdmin=""String_Node_Str"" + studentEmail + ""String_Node_Str""+ ""String_Node_Str""+ courseId+ ""String_Node_Str""+ ""String_Node_Str""+ student.email+ ""String_Node_Str""+ student.team+ ""String_Node_Str""+ ""String_Node_Str""+ student.comments;
    RedirectResult result=createRedirectResult(Const.ActionURIs.INSTRUCTOR_COURSE_DETAILS_PAGE);
    result.addResponseParam(Const.ParamsNames.COURSE_ID,courseId);
    return result;
  }
 catch (  InvalidParametersException|EnrollException e) {
    setStatusForException(e);
    String newEmail=student.email;
    student.email=studentEmail;
    InstructorCourseStudentDetailsEditPageData data=new InstructorCourseStudentDetailsEditPageData(account,student,newEmail,hasSection);
    return createShowPageResult(Const.ViewURIs.INSTRUCTOR_COURSE_STUDENT_EDIT,data);
  }
}","@Override public ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  Assumption.assertPostParamNotNull(Const.ParamsNames.COURSE_ID,courseId);
  String studentEmail=getRequestParamValue(Const.ParamsNames.STUDENT_EMAIL);
  Assumption.assertPostParamNotNull(Const.ParamsNames.STUDENT_EMAIL,studentEmail);
  InstructorAttributes instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  new GateKeeper().verifyAccessible(instructor,logic.getCourse(courseId),Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_STUDENT);
  boolean hasSection=logic.hasIndicatedSections(courseId);
  StudentAttributes student=logic.getStudentForEmail(courseId,studentEmail);
  if (student == null) {
    return redirectWithError(Const.StatusMessages.STUDENT_NOT_FOUND_FOR_EDIT,""String_Node_Str"" + studentEmail + ""String_Node_Str""+ ""String_Node_Str""+ courseId+ ""String_Node_Str"",courseId);
  }
  student.name=getRequestParamValue(Const.ParamsNames.STUDENT_NAME);
  student.email=getRequestParamValue(Const.ParamsNames.NEW_STUDENT_EMAIL);
  student.team=getRequestParamValue(Const.ParamsNames.TEAM_NAME);
  student.section=getRequestParamValue(Const.ParamsNames.SECTION_NAME);
  student.comments=getRequestParamValue(Const.ParamsNames.COMMENTS);
  student.name=Sanitizer.sanitizeName(student.name);
  student.email=Sanitizer.sanitizeEmail(student.email);
  student.team=Sanitizer.sanitizeName(student.team);
  student.section=Sanitizer.sanitizeName(student.section);
  student.comments=Sanitizer.sanitizeTextField(student.comments);
  try {
    StudentAttributes originalStudentAttribute=logic.getStudentForEmail(courseId,studentEmail);
    student.updateWithExistingRecord(originalStudentAttribute);
    boolean isSectionChanged=student.isSectionChanged(originalStudentAttribute);
    boolean isTeamChanged=student.isTeamChanged(originalStudentAttribute);
    if (isSectionChanged) {
      logic.validateSectionsAndTeams(Arrays.asList(student),courseId);
    }
 else     if (isTeamChanged) {
      logic.validateTeams(Arrays.asList(student),courseId);
    }
    logic.updateStudent(studentEmail,student);
    statusToUser.add(new StatusMessage(Const.StatusMessages.STUDENT_EDITED,StatusMessageColor.SUCCESS));
    statusToAdmin=""String_Node_Str"" + studentEmail + ""String_Node_Str""+ ""String_Node_Str""+ courseId+ ""String_Node_Str""+ ""String_Node_Str""+ student.email+ ""String_Node_Str""+ student.team+ ""String_Node_Str""+ ""String_Node_Str""+ student.comments;
    RedirectResult result=createRedirectResult(Const.ActionURIs.INSTRUCTOR_COURSE_DETAILS_PAGE);
    result.addResponseParam(Const.ParamsNames.COURSE_ID,courseId);
    return result;
  }
 catch (  InvalidParametersException|EnrollException e) {
    setStatusForException(e);
    String newEmail=student.email;
    student.email=studentEmail;
    InstructorCourseStudentDetailsEditPageData data=new InstructorCourseStudentDetailsEditPageData(account,student,newEmail,hasSection);
    return createShowPageResult(Const.ViewURIs.INSTRUCTOR_COURSE_STUDENT_EDIT,data);
  }
}",0.9302701828183142
62737,"/** 
 * Converts to String in format XX-XX-XXXX
 */
public String toStringForQuery(){
  return originalRepresentation;
}","/** 
 * Converts to String in format XX-XX-XXXX
 */
public String toStringForQuery(){
  return originalRepresentation.replaceAll(""String_Node_Str"",""String_Node_Str"");
}",0.8333333333333334
62738,"@Test public void allTests() throws Exception {
  feedbackEditPage=getFeedbackEditPage();
  ______TS(""String_Node_Str"");
  feedbackEditPage.clickFsCopyButton();
  feedbackEditPage.fsCopyToModal.waitForModalToLoad();
  feedbackEditPage.verifyHtmlMainContent(""String_Node_Str"");
  feedbackEditPage.fsCopyToModal.clickSubmitButton();
  feedbackEditPage.fsCopyToModal.waitForFormSubmissionStatusMessageVisibility();
  feedbackEditPage.fsCopyToModal.verifyStatusContainsErrorHtmlClasses();
  feedbackEditPage.fsCopyToModal.verifyStatusMessage(Const.StatusMessages.FEEDBACK_SESSION_COPY_NONESELECTED);
  ______TS(""String_Node_Str"");
  feedbackEditPage.clickFsCopyButton();
  feedbackEditPage.fsCopyToModal.waitForModalToLoad();
  feedbackEditPage.fsCopyToModal.fillFormWithAllCoursesSelected(feedbackSessionName);
  feedbackEditPage.fsCopyToModal.clickSubmitButton();
  feedbackEditPage.fsCopyToModal.waitForFormSubmissionStatusMessageVisibility();
  assertTrue(feedbackEditPage.fsCopyToModal.isFormSubmissionStatusMessageVisible());
  feedbackEditPage.fsCopyToModal.verifyStatusContainsErrorHtmlClasses();
  feedbackEditPage.fsCopyToModal.verifyStatusMessage(""String_Node_Str"" + feedbackSessionName + ""String_Node_Str""+ ""String_Node_Str"");
  feedbackEditPage.verifyHtmlMainContent(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  feedbackEditPage.clickFsCopyButton();
  feedbackEditPage.fsCopyToModal.waitForModalToLoad();
  feedbackEditPage.fsCopyToModal.fillFormWithAllCoursesSelected(""String_Node_Str"");
  feedbackEditPage.fsCopyToModal.clickSubmitButton();
  feedbackEditPage.fsCopyToModal.waitForFormSubmissionStatusMessageVisibility();
  assertTrue(feedbackEditPage.fsCopyToModal.isFormSubmissionStatusMessageVisible());
  feedbackEditPage.fsCopyToModal.verifyStatusContainsErrorHtmlClasses();
  feedbackEditPage.fsCopyToModal.verifyStatusMessage(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  ______TS(""String_Node_Str"");
  feedbackEditPage.clickFsCopyButton();
  feedbackEditPage.fsCopyToModal.waitForModalToLoad();
  feedbackEditPage.fsCopyToModal.fillFormWithAllCoursesSelected(""String_Node_Str"");
  feedbackEditPage.fsCopyToModal.clickSubmitButton();
  feedbackEditPage.waitForPageToLoad();
  feedbackEditPage.verifyStatus(Const.StatusMessages.FEEDBACK_SESSION_COPIED);
  feedbackEditPage.waitForElementPresence(By.id(""String_Node_Str""));
  feedbackEditPage.verifyHtmlMainContent(""String_Node_Str"");
}","@Test public void allTests() throws Exception {
  feedbackEditPage=getFeedbackEditPage();
  ______TS(""String_Node_Str"");
  feedbackEditPage.clickFsCopyButton();
  feedbackEditPage.fsCopyToModal.waitForModalToLoad();
  feedbackEditPage.verifyHtmlMainContent(""String_Node_Str"");
  feedbackEditPage.fsCopyToModal.clickSubmitButton();
  feedbackEditPage.fsCopyToModal.waitForFormSubmissionErrorMessagePresence();
  assertTrue(feedbackEditPage.fsCopyToModal.isFormSubmissionStatusMessageVisible());
  feedbackEditPage.fsCopyToModal.verifyStatusMessage(Const.StatusMessages.FEEDBACK_SESSION_COPY_NONESELECTED);
  feedbackEditPage.fsCopyToModal.clickCloseButton();
  ______TS(""String_Node_Str"");
  feedbackEditPage.clickFsCopyButton();
  feedbackEditPage.fsCopyToModal.waitForModalToLoad();
  feedbackEditPage.fsCopyToModal.fillFormWithAllCoursesSelected(feedbackSessionName);
  feedbackEditPage.fsCopyToModal.clickSubmitButton();
  feedbackEditPage.fsCopyToModal.waitForFormSubmissionErrorMessagePresence();
  assertTrue(feedbackEditPage.fsCopyToModal.isFormSubmissionStatusMessageVisible());
  feedbackEditPage.fsCopyToModal.verifyStatusMessage(String.format(Const.StatusMessages.FEEDBACK_SESSION_COPY_ALREADYEXISTS,feedbackSessionName,testData.courses.get(""String_Node_Str"").id));
  feedbackEditPage.verifyHtmlMainContent(""String_Node_Str"");
  feedbackEditPage.fsCopyToModal.clickCloseButton();
  ______TS(""String_Node_Str"");
  feedbackEditPage.clickFsCopyButton();
  feedbackEditPage.fsCopyToModal.waitForModalToLoad();
  feedbackEditPage.fsCopyToModal.fillFormWithAllCoursesSelected(""String_Node_Str"");
  feedbackEditPage.fsCopyToModal.clickSubmitButton();
  feedbackEditPage.fsCopyToModal.waitForFormSubmissionErrorMessagePresence();
  assertTrue(feedbackEditPage.fsCopyToModal.isFormSubmissionStatusMessageVisible());
  feedbackEditPage.fsCopyToModal.verifyStatusMessage(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  feedbackEditPage.fsCopyToModal.clickCloseButton();
  ______TS(""String_Node_Str"");
  feedbackEditPage.clickFsCopyButton();
  feedbackEditPage.fsCopyToModal.waitForModalToLoad();
  feedbackEditPage.fsCopyToModal.fillFormWithAllCoursesSelected(""String_Node_Str"");
  feedbackEditPage.fsCopyToModal.clickSubmitButton();
  feedbackEditPage.waitForPageToLoad();
  feedbackEditPage.verifyStatus(Const.StatusMessages.FEEDBACK_SESSION_COPIED);
  feedbackEditPage.waitForElementPresence(By.id(""String_Node_Str""));
  feedbackEditPage.verifyHtmlMainContent(""String_Node_Str"");
}",0.4010479645304313
62739,"public void testCopyToAction() throws Exception {
  String feedbackSessionName=""String_Node_Str"";
  String courseId=newSession.courseId;
  ______TS(""String_Node_Str"");
  feedbackPage.fsCopyToModal.clickCopyButtonOnTable(courseId,feedbackSessionName);
  feedbackPage.fsCopyToModal.waitForModalToLoad();
  feedbackPage.fsCopyToModal.clickSubmitButton();
  feedbackPage.fsCopyToModal.waitForFormSubmissionStatusMessageVisibility();
  assertTrue(feedbackPage.fsCopyToModal.isFormSubmissionStatusMessageVisible());
  feedbackPage.fsCopyToModal.verifyStatusMessage(Const.StatusMessages.FEEDBACK_SESSION_COPY_NONESELECTED);
  feedbackPage.goToPreviousPage(InstructorFeedbacksPage.class);
  ______TS(""String_Node_Str"");
  feedbackPage.fsCopyToModal.clickCopyButtonOnTable(courseId,feedbackSessionName);
  feedbackPage.fsCopyToModal.waitForModalToLoad();
  feedbackPage.fsCopyToModal.fillFormWithAllCoursesSelected(feedbackSessionName);
  feedbackPage.fsCopyToModal.clickSubmitButton();
  String error=String.format(Const.StatusMessages.FEEDBACK_SESSION_COPY_ALREADYEXISTS,feedbackSessionName,courseId);
  feedbackPage.fsCopyToModal.waitForFormSubmissionStatusMessageVisibility();
  assertTrue(feedbackPage.fsCopyToModal.isFormSubmissionStatusMessageVisible());
  feedbackPage.fsCopyToModal.verifyStatusMessage(error);
  feedbackPage.goToPreviousPage(InstructorFeedbacksPage.class);
  ______TS(""String_Node_Str"");
  feedbackPage.fsCopyToModal.clickCopyButtonOnTable(courseId,feedbackSessionName);
  feedbackPage.fsCopyToModal.waitForModalToLoad();
  feedbackPage.fsCopyToModal.fillFormWithAllCoursesSelected(""String_Node_Str"");
  feedbackPage.fsCopyToModal.clickSubmitButton();
  feedbackPage.fsCopyToModal.waitForFormSubmissionStatusMessageVisibility();
  assertTrue(feedbackPage.fsCopyToModal.isFormSubmissionStatusMessageVisible());
  feedbackPage.fsCopyToModal.verifyStatusMessage(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  feedbackPage.goToPreviousPage(InstructorFeedbacksPage.class);
  ______TS(""String_Node_Str"");
  feedbackPage.fsCopyToModal.clickCopyButtonOnTable(courseId,feedbackSessionName);
  feedbackPage.fsCopyToModal.waitForModalToLoad();
  feedbackPage.fsCopyToModal.fillFormWithAllCoursesSelected(""String_Node_Str"");
  feedbackPage.fsCopyToModal.clickSubmitButton();
  feedbackPage.waitForPageToLoad();
  feedbackPage.verifyStatus(Const.StatusMessages.FEEDBACK_SESSION_COPIED);
  feedbackPage.goToPreviousPage(InstructorFeedbacksPage.class);
}","public void testCopyToAction() throws Exception {
  String feedbackSessionName=""String_Node_Str"";
  String courseId=newSession.courseId;
  ______TS(""String_Node_Str"");
  feedbackPage.fsCopyToModal.clickCopyButtonOnTable(courseId,feedbackSessionName);
  feedbackPage.fsCopyToModal.waitForModalToLoad();
  feedbackPage.fsCopyToModal.clickSubmitButton();
  feedbackPage.fsCopyToModal.waitForFormSubmissionErrorMessagePresence();
  assertTrue(feedbackPage.fsCopyToModal.isFormSubmissionStatusMessageVisible());
  feedbackPage.fsCopyToModal.verifyStatusMessage(Const.StatusMessages.FEEDBACK_SESSION_COPY_NONESELECTED);
  feedbackPage.goToPreviousPage(InstructorFeedbacksPage.class);
  ______TS(""String_Node_Str"");
  feedbackPage.fsCopyToModal.clickCopyButtonOnTable(courseId,feedbackSessionName);
  feedbackPage.fsCopyToModal.waitForModalToLoad();
  feedbackPage.fsCopyToModal.fillFormWithAllCoursesSelected(feedbackSessionName);
  feedbackPage.fsCopyToModal.clickSubmitButton();
  String error=String.format(Const.StatusMessages.FEEDBACK_SESSION_COPY_ALREADYEXISTS,feedbackSessionName,courseId);
  feedbackPage.fsCopyToModal.waitForFormSubmissionErrorMessagePresence();
  assertTrue(feedbackPage.fsCopyToModal.isFormSubmissionStatusMessageVisible());
  feedbackPage.fsCopyToModal.verifyStatusMessage(error);
  feedbackPage.fsCopyToModal.clickCloseButton();
  ______TS(""String_Node_Str"");
  feedbackPage.fsCopyToModal.clickCopyButtonOnTable(courseId,feedbackSessionName);
  feedbackPage.fsCopyToModal.waitForModalToLoad();
  feedbackPage.fsCopyToModal.fillFormWithAllCoursesSelected(""String_Node_Str"");
  feedbackPage.fsCopyToModal.clickSubmitButton();
  feedbackPage.fsCopyToModal.waitForFormSubmissionErrorMessagePresence();
  assertTrue(feedbackPage.fsCopyToModal.isFormSubmissionStatusMessageVisible());
  feedbackPage.fsCopyToModal.verifyStatusMessage(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  feedbackPage.fsCopyToModal.clickCloseButton();
  ______TS(""String_Node_Str"");
  feedbackPage.fsCopyToModal.clickCopyButtonOnTable(courseId,feedbackSessionName);
  feedbackPage.fsCopyToModal.waitForModalToLoad();
  feedbackPage.fsCopyToModal.fillFormWithAllCoursesSelected(""String_Node_Str"");
  feedbackPage.fsCopyToModal.clickSubmitButton();
  feedbackPage.waitForPageToLoad();
  feedbackPage.verifyStatus(Const.StatusMessages.FEEDBACK_SESSION_COPIED);
  feedbackPage.goToPreviousPage(InstructorFeedbacksPage.class);
}",0.9184375632463064
62740,"public void testCopyToFsAction() throws Exception {
  String feedbackSessionName=""String_Node_Str"";
  String courseId=testData.courses.get(""String_Node_Str"").id;
  ______TS(""String_Node_Str"");
  homePage.fsCopyModal.clickCopyButtonOnTable(courseId,feedbackSessionName);
  homePage.fsCopyModal.waitForModalToLoad();
  homePage.fsCopyModal.clickSubmitButton();
  homePage.fsCopyModal.waitForFormSubmissionStatusMessageVisibility();
  assertTrue(homePage.fsCopyModal.isFormSubmissionStatusMessageVisible());
  homePage.fsCopyModal.verifyStatusMessage(Const.StatusMessages.FEEDBACK_SESSION_COPY_NONESELECTED);
  ______TS(""String_Node_Str"");
  homePage.fsCopyModal.clickCopyButtonOnTable(courseId,feedbackSessionName);
  homePage.fsCopyModal.waitForModalToLoad();
  homePage.fsCopyModal.fillFormWithAllCoursesSelected(feedbackSessionName);
  homePage.fsCopyModal.clickSubmitButton();
  String error=String.format(Const.StatusMessages.FEEDBACK_SESSION_COPY_ALREADYEXISTS,feedbackSessionName,courseId);
  homePage.fsCopyModal.waitForFormSubmissionStatusMessageVisibility();
  assertTrue(homePage.fsCopyModal.isFormSubmissionStatusMessageVisible());
  homePage.fsCopyModal.verifyStatusMessage(error);
  ______TS(""String_Node_Str"");
  homePage.fsCopyModal.clickCopyButtonOnTable(courseId,feedbackSessionName);
  homePage.fsCopyModal.waitForModalToLoad();
  homePage.fsCopyModal.fillFormWithAllCoursesSelected(""String_Node_Str"");
  homePage.fsCopyModal.clickSubmitButton();
  homePage.fsCopyModal.waitForFormSubmissionStatusMessageVisibility();
  homePage.fsCopyModal.verifyStatusMessage(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  ______TS(""String_Node_Str"");
  homePage.fsCopyModal.clickCopyButtonOnTable(courseId,feedbackSessionName);
  homePage.fsCopyModal.waitForModalToLoad();
  homePage.fsCopyModal.fillFormWithAllCoursesSelected(""String_Node_Str"");
  homePage.fsCopyModal.clickSubmitButton();
  homePage.waitForPageToLoad();
  homePage.verifyStatus(Const.StatusMessages.FEEDBACK_SESSION_COPIED);
  homePage.goToPreviousPage(InstructorHomePage.class);
  ______TS(""String_Node_Str"");
  homePage.changeFsCopyButtonActionLink(courseId,feedbackSessionName,""String_Node_Str"");
  homePage.fsCopyModal.clickCopyButtonOnTable(courseId,feedbackSessionName);
  homePage.fsCopyModal.waitForModalLoadingError();
}","public void testCopyToFsAction() throws Exception {
  String feedbackSessionName=""String_Node_Str"";
  String courseId=testData.courses.get(""String_Node_Str"").id;
  ______TS(""String_Node_Str"");
  homePage.fsCopyModal.clickCopyButtonOnTable(courseId,feedbackSessionName);
  homePage.fsCopyModal.waitForModalToLoad();
  homePage.fsCopyModal.clickSubmitButton();
  homePage.fsCopyModal.waitForFormSubmissionErrorMessagePresence();
  assertTrue(homePage.fsCopyModal.isFormSubmissionStatusMessageVisible());
  homePage.fsCopyModal.verifyStatusMessage(Const.StatusMessages.FEEDBACK_SESSION_COPY_NONESELECTED);
  homePage.fsCopyModal.clickCloseButton();
  ______TS(""String_Node_Str"");
  homePage.fsCopyModal.clickCopyButtonOnTable(courseId,feedbackSessionName);
  homePage.fsCopyModal.waitForModalToLoad();
  homePage.fsCopyModal.fillFormWithAllCoursesSelected(feedbackSessionName);
  homePage.fsCopyModal.clickSubmitButton();
  String error=String.format(Const.StatusMessages.FEEDBACK_SESSION_COPY_ALREADYEXISTS,feedbackSessionName,courseId);
  homePage.fsCopyModal.waitForFormSubmissionErrorMessagePresence();
  assertTrue(homePage.fsCopyModal.isFormSubmissionStatusMessageVisible());
  homePage.fsCopyModal.verifyStatusMessage(error);
  homePage.fsCopyModal.clickCloseButton();
  ______TS(""String_Node_Str"");
  homePage.fsCopyModal.clickCopyButtonOnTable(courseId,feedbackSessionName);
  homePage.fsCopyModal.waitForModalToLoad();
  homePage.fsCopyModal.fillFormWithAllCoursesSelected(""String_Node_Str"");
  homePage.fsCopyModal.clickSubmitButton();
  homePage.fsCopyModal.waitForFormSubmissionErrorMessagePresence();
  assertTrue(homePage.fsCopyModal.isFormSubmissionStatusMessageVisible());
  homePage.fsCopyModal.verifyStatusMessage(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  homePage.fsCopyModal.clickCloseButton();
  ______TS(""String_Node_Str"");
  homePage.fsCopyModal.clickCopyButtonOnTable(courseId,feedbackSessionName);
  homePage.fsCopyModal.waitForModalToLoad();
  homePage.fsCopyModal.fillFormWithAllCoursesSelected(""String_Node_Str"");
  homePage.fsCopyModal.clickSubmitButton();
  homePage.waitForPageToLoad();
  homePage.verifyStatus(Const.StatusMessages.FEEDBACK_SESSION_COPIED);
  homePage.goToPreviousPage(InstructorHomePage.class);
  ______TS(""String_Node_Str"");
  homePage.changeFsCopyButtonActionLink(courseId,feedbackSessionName,""String_Node_Str"");
  homePage.fsCopyModal.clickCopyButtonOnTable(courseId,feedbackSessionName);
  homePage.fsCopyModal.waitForModalLoadingError();
}",0.7681789931634556
62741,"/** 
 * @return true if the status message modal is visible.
 */
public boolean isFormSubmissionStatusMessageVisible(){
  WebElement copyModalErrorMessage=browser.driver.findElement(By.id(""String_Node_Str""));
  return copyModalErrorMessage.isDisplayed();
}","/** 
 * @return true if the status message modal is visible.
 */
public boolean isFormSubmissionStatusMessageVisible(){
  return copyModalStatusMessage.isDisplayed();
}",0.7641509433962265
62742,"private String getFsCopyStatus(){
  WebElement copyModalStatusMessage=browser.driver.findElement(By.id(""String_Node_Str""));
  return copyModalStatusMessage.getText();
}","private String getFsCopyStatus(){
  return copyModalStatusMessage.getText();
}",0.6341463414634146
62743,"/** 
 * Verifies that the status message on the copy modal is the   {@code expectedStatusMessage}
 * @param expectedStatusMessage
 */
public void verifyStatusMessage(String expectedStatusMessage){
  assertEquals(expectedStatusMessage,getFsCopyStatus());
}","/** 
 * Verifies that the status message on the copy modal is the   {@code expectedStatusMessage}
 */
public void verifyStatusMessage(String expectedStatusMessage){
  assertEquals(expectedStatusMessage,getFsCopyStatus());
}",0.9330543933054394
62744,"public void waitForModalToLoad(){
  waitForElementPresence(By.id(Const.ParamsNames.COPIED_FEEDBACK_SESSION_NAME));
}","public void waitForModalToLoad(){
  By byCopiedFsNameField=By.id(Const.ParamsNames.COPIED_FEEDBACK_SESSION_NAME);
  waitForElementPresence(byCopiedFsNameField);
  waitForElementVisibility(browser.driver.findElement(byCopiedFsNameField));
  copyModalStatusMessage=browser.driver.findElement(By.id(FEEDBACK_COPY_MODAL_STATUS));
}",0.4153498871331828
62745,"@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  Assumption.assertNotNull(""String_Node_Str"",courseId);
  String courseIndexString=getRequestParamValue(Const.ParamsNames.COURSE_INDEX);
  Assumption.assertNotNull(""String_Node_Str"",courseIndexString);
  new GateKeeper().verifyInstructorPrivileges(account);
  InstructorAttributes instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  CourseAttributes course=logic.getCourse(courseId);
  new GateKeeper().verifyAccessible(instructor,course);
  List<SectionDetailsBundle> courseSectionDetails=logic.getSectionsForCourse(courseId);
  int courseIndex=Integer.parseInt(courseIndexString);
  boolean hasSection=logic.hasIndicatedSections(courseId);
  Map<String,String> emailPhotoUrlMapping=new HashMap<String,String>();
  Map<String,Map<String,Boolean>> sectionPrivileges=new HashMap<>();
  for (  SectionDetailsBundle sectionDetails : courseSectionDetails) {
    for (    TeamDetailsBundle teamDetails : sectionDetails.teams) {
      for (      StudentAttributes student : teamDetails.students) {
        studentPhotoUrl=student.getPublicProfilePictureUrl();
        studentPhotoUrl=Url.addParamToUrl(studentPhotoUrl,Const.ParamsNames.USER_ID,account.googleId);
        emailPhotoUrlMapping.put(student.email,studentPhotoUrl);
      }
    }
    Map<String,Boolean> sectionPrivilege=new HashMap<String,Boolean>();
    sectionPrivilege.put(Const.ParamsNames.INSTRUCTOR_PERMISSION_VIEW_STUDENT_IN_SECTIONS,instructor.isAllowedForPrivilege(sectionDetails.name,Const.ParamsNames.INSTRUCTOR_PERMISSION_VIEW_STUDENT_IN_SECTIONS));
    sectionPrivilege.put(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_STUDENT,instructor.isAllowedForPrivilege(sectionDetails.name,Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_STUDENT));
    sectionPrivilege.put(Const.ParamsNames.INSTRUCTOR_PERMISSION_GIVE_COMMENT_IN_SECTIONS,instructor.isAllowedForPrivilege(sectionDetails.name,Const.ParamsNames.INSTRUCTOR_PERMISSION_GIVE_COMMENT_IN_SECTIONS));
    sectionPrivileges.put(sectionDetails.name,sectionPrivilege);
  }
  InstructorStudentListAjaxPageData data=new InstructorStudentListAjaxPageData(account,courseId,courseIndex,hasSection,courseSectionDetails,sectionPrivileges,emailPhotoUrlMapping);
  return createShowPageResult(Const.ViewURIs.INSTRUCTOR_STUDENT_LIST_AJAX,data);
}","@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  Assumption.assertNotNull(""String_Node_Str"",courseId);
  String courseIndexString=getRequestParamValue(Const.ParamsNames.COURSE_INDEX);
  Assumption.assertNotNull(""String_Node_Str"",courseIndexString);
  new GateKeeper().verifyInstructorPrivileges(account);
  InstructorAttributes instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  CourseAttributes course=logic.getCourse(courseId);
  new GateKeeper().verifyAccessible(instructor,course);
  List<SectionDetailsBundle> courseSectionDetails=logic.getSectionsForCourse(courseId);
  int courseIndex=Integer.parseInt(courseIndexString);
  boolean hasSection=logic.hasIndicatedSections(courseId);
  Map<String,String> emailPhotoUrlMapping=new HashMap<String,String>();
  Map<String,Map<String,Boolean>> sectionPrivileges=new HashMap<>();
  String studentPhotoUrl=""String_Node_Str"";
  for (  SectionDetailsBundle sectionDetails : courseSectionDetails) {
    for (    TeamDetailsBundle teamDetails : sectionDetails.teams) {
      for (      StudentAttributes student : teamDetails.students) {
        studentPhotoUrl=student.getPublicProfilePictureUrl();
        studentPhotoUrl=Url.addParamToUrl(studentPhotoUrl,Const.ParamsNames.USER_ID,account.googleId);
        emailPhotoUrlMapping.put(student.email,studentPhotoUrl);
      }
    }
    Map<String,Boolean> sectionPrivilege=new HashMap<String,Boolean>();
    sectionPrivilege.put(Const.ParamsNames.INSTRUCTOR_PERMISSION_VIEW_STUDENT_IN_SECTIONS,instructor.isAllowedForPrivilege(sectionDetails.name,Const.ParamsNames.INSTRUCTOR_PERMISSION_VIEW_STUDENT_IN_SECTIONS));
    sectionPrivilege.put(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_STUDENT,instructor.isAllowedForPrivilege(sectionDetails.name,Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_STUDENT));
    sectionPrivilege.put(Const.ParamsNames.INSTRUCTOR_PERMISSION_GIVE_COMMENT_IN_SECTIONS,instructor.isAllowedForPrivilege(sectionDetails.name,Const.ParamsNames.INSTRUCTOR_PERMISSION_GIVE_COMMENT_IN_SECTIONS));
    sectionPrivileges.put(sectionDetails.name,sectionPrivilege);
  }
  InstructorStudentListAjaxPageData data=new InstructorStudentListAjaxPageData(account,courseId,courseIndex,hasSection,courseSectionDetails,sectionPrivileges,emailPhotoUrlMapping);
  return createShowPageResult(Const.ViewURIs.INSTRUCTOR_STUDENT_LIST_AJAX,data);
}",0.9909983633387888
62746,"public void testGetFeedbackSessionResultsSummaryAsCsv() throws Exception {
  ______TS(""String_Node_Str"");
  FeedbackSessionAttributes session=dataBundle.feedbackSessions.get(""String_Node_Str"");
  InstructorAttributes instructor=dataBundle.instructors.get(""String_Node_Str"");
  String export=fsLogic.getFeedbackSessionResultsSummaryAsCsv(session.feedbackSessionName,session.courseId,instructor.email);
  String[] expected={""String_Node_Str"" + session.courseId + ""String_Node_Str"",""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  assertEquals(StringUtils.join(expected,Const.EOL),export);
  ______TS(""String_Node_Str"");
  removeAndRestoreDatastoreFromJson(""String_Node_Str"");
  DataBundle newDataBundle=loadDataBundle(""String_Node_Str"");
  session=newDataBundle.feedbackSessions.get(""String_Node_Str"");
  instructor=newDataBundle.instructors.get(""String_Node_Str"");
  export=fsLogic.getFeedbackSessionResultsSummaryAsCsv(session.feedbackSessionName,session.courseId,instructor.email);
  System.out.println(export);
  expected=new String[]{""String_Node_Str"" + session.courseId + ""String_Node_Str"",""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  assertEquals(StringUtils.join(expected,Const.EOL),export);
  ______TS(""String_Node_Str"");
  session=newDataBundle.feedbackSessions.get(""String_Node_Str"");
  instructor=newDataBundle.instructors.get(""String_Node_Str"");
  export=fsLogic.getFeedbackSessionResultsSummaryAsCsv(session.feedbackSessionName,session.courseId,instructor.email);
  System.out.println(export);
  expected=new String[]{""String_Node_Str"" + session.courseId + ""String_Node_Str"",""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  assertEquals(StringUtils.join(expected,Const.EOL),export);
  ______TS(""String_Node_Str"");
  session=newDataBundle.feedbackSessions.get(""String_Node_Str"");
  instructor=newDataBundle.instructors.get(""String_Node_Str"");
  export=fsLogic.getFeedbackSessionResultsSummaryAsCsv(session.feedbackSessionName,session.courseId,instructor.email);
  System.out.println(export);
  expected=new String[]{""String_Node_Str"" + session.courseId + ""String_Node_Str"",""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  assertEquals(StringUtils.join(expected,Const.EOL),export);
  ______TS(""String_Node_Str"");
  session=newDataBundle.feedbackSessions.get(""String_Node_Str"");
  instructor=newDataBundle.instructors.get(""String_Node_Str"");
  export=fsLogic.getFeedbackSessionResultsSummaryAsCsv(session.feedbackSessionName,session.courseId,instructor.email);
  System.out.println(export);
  expected=new String[]{""String_Node_Str"" + session.courseId + ""String_Node_Str"",""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  assertEquals(StringUtils.join(expected,Const.EOL),export);
  ______TS(""String_Node_Str"");
  instructor=newDataBundle.instructors.get(""String_Node_Str"");
  export=fsLogic.getFeedbackSessionResultsSummaryAsCsv(session.feedbackSessionName,session.courseId,instructor.email);
  System.out.println(export);
  expected=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  assertEquals(StringUtils.join(expected,Const.EOL),export);
  ______TS(""String_Node_Str"");
  session=newDataBundle.feedbackSessions.get(""String_Node_Str"");
  instructor=newDataBundle.instructors.get(""String_Node_Str"");
  export=fsLogic.getFeedbackSessionResultsSummaryAsCsv(session.feedbackSessionName,session.courseId,instructor.email);
  System.out.println(export);
  expected=new String[]{""String_Node_Str"" + session.courseId + ""String_Node_Str"",""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  assertEquals(StringUtils.join(expected,Const.EOL),export);
  ______TS(""String_Node_Str"");
  session=newDataBundle.feedbackSessions.get(""String_Node_Str"");
  instructor=newDataBundle.instructors.get(""String_Node_Str"");
  export=fsLogic.getFeedbackSessionResultsSummaryAsCsv(session.feedbackSessionName,session.courseId,instructor.email);
  System.out.println(export);
  expected=new String[]{""String_Node_Str"" + session.courseId + ""String_Node_Str"",""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  assertEquals(StringUtils.join(expected,Const.EOL),export);
  session=newDataBundle.feedbackSessions.get(""String_Node_Str"");
  instructor=newDataBundle.instructors.get(""String_Node_Str"");
  export=fsLogic.getFeedbackSessionResultsSummaryAsCsv(session.feedbackSessionName,session.courseId,instructor.email);
  System.out.println(export);
  expected=new String[]{""String_Node_Str"" + session.courseId + ""String_Node_Str"",""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  assertEquals(StringUtils.join(expected,Const.EOL),export);
  ______TS(""String_Node_Str"");
  session=newDataBundle.feedbackSessions.get(""String_Node_Str"");
  instructor=newDataBundle.instructors.get(""String_Node_Str"");
  export=fsLogic.getFeedbackSessionResultsSummaryAsCsv(session.feedbackSessionName,session.courseId,instructor.email);
  System.out.println(export);
  expected=new String[]{""String_Node_Str"" + session.courseId + ""String_Node_Str"",""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  assertEquals(StringUtils.join(expected,Const.EOL),export);
  ______TS(""String_Node_Str"");
  session=newDataBundle.feedbackSessions.get(""String_Node_Str"");
  instructor=newDataBundle.instructors.get(""String_Node_Str"");
  export=fsLogic.getFeedbackSessionResultsSummaryAsCsv(session.feedbackSessionName,session.courseId,instructor.email);
  System.out.println(export);
  expected=new String[]{""String_Node_Str"" + session.courseId + ""String_Node_Str"",""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  assertEquals(StringUtils.join(expected,Const.EOL),export);
  ______TS(""String_Node_Str"");
  try {
    fsLogic.getFeedbackSessionResultsSummaryAsCsv(""String_Node_Str"",""String_Node_Str"",instructor.email);
    signalFailureToDetectException(""String_Node_Str"");
  }
 catch (  EntityDoesNotExistException e) {
    assertEquals(e.getMessage(),""String_Node_Str"");
  }
}","public void testGetFeedbackSessionResultsSummaryAsCsv() throws Exception {
  ______TS(""String_Node_Str"");
  FeedbackSessionAttributes session=dataBundle.feedbackSessions.get(""String_Node_Str"");
  InstructorAttributes instructor=dataBundle.instructors.get(""String_Node_Str"");
  String export=fsLogic.getFeedbackSessionResultsSummaryAsCsv(session.feedbackSessionName,session.courseId,instructor.email);
  String[] expected={""String_Node_Str"" + session.courseId + ""String_Node_Str"",""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"".replace(Const.EOL,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  assertEquals(StringUtils.join(expected,Const.EOL),export);
  ______TS(""String_Node_Str"");
  removeAndRestoreDatastoreFromJson(""String_Node_Str"");
  DataBundle newDataBundle=loadDataBundle(""String_Node_Str"");
  session=newDataBundle.feedbackSessions.get(""String_Node_Str"");
  instructor=newDataBundle.instructors.get(""String_Node_Str"");
  export=fsLogic.getFeedbackSessionResultsSummaryAsCsv(session.feedbackSessionName,session.courseId,instructor.email);
  System.out.println(export);
  expected=new String[]{""String_Node_Str"" + session.courseId + ""String_Node_Str"",""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  assertEquals(StringUtils.join(expected,Const.EOL),export);
  ______TS(""String_Node_Str"");
  session=newDataBundle.feedbackSessions.get(""String_Node_Str"");
  instructor=newDataBundle.instructors.get(""String_Node_Str"");
  export=fsLogic.getFeedbackSessionResultsSummaryAsCsv(session.feedbackSessionName,session.courseId,instructor.email);
  System.out.println(export);
  expected=new String[]{""String_Node_Str"" + session.courseId + ""String_Node_Str"",""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  assertEquals(StringUtils.join(expected,Const.EOL),export);
  ______TS(""String_Node_Str"");
  session=newDataBundle.feedbackSessions.get(""String_Node_Str"");
  instructor=newDataBundle.instructors.get(""String_Node_Str"");
  export=fsLogic.getFeedbackSessionResultsSummaryAsCsv(session.feedbackSessionName,session.courseId,instructor.email);
  System.out.println(export);
  expected=new String[]{""String_Node_Str"" + session.courseId + ""String_Node_Str"",""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  assertEquals(StringUtils.join(expected,Const.EOL),export);
  ______TS(""String_Node_Str"");
  session=newDataBundle.feedbackSessions.get(""String_Node_Str"");
  instructor=newDataBundle.instructors.get(""String_Node_Str"");
  export=fsLogic.getFeedbackSessionResultsSummaryAsCsv(session.feedbackSessionName,session.courseId,instructor.email);
  System.out.println(export);
  expected=new String[]{""String_Node_Str"" + session.courseId + ""String_Node_Str"",""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  assertEquals(StringUtils.join(expected,Const.EOL),export);
  ______TS(""String_Node_Str"");
  instructor=newDataBundle.instructors.get(""String_Node_Str"");
  export=fsLogic.getFeedbackSessionResultsSummaryAsCsv(session.feedbackSessionName,session.courseId,instructor.email);
  System.out.println(export);
  expected=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  assertEquals(StringUtils.join(expected,Const.EOL),export);
  ______TS(""String_Node_Str"");
  session=newDataBundle.feedbackSessions.get(""String_Node_Str"");
  instructor=newDataBundle.instructors.get(""String_Node_Str"");
  export=fsLogic.getFeedbackSessionResultsSummaryAsCsv(session.feedbackSessionName,session.courseId,instructor.email);
  System.out.println(export);
  expected=new String[]{""String_Node_Str"" + session.courseId + ""String_Node_Str"",""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  assertEquals(StringUtils.join(expected,Const.EOL),export);
  ______TS(""String_Node_Str"");
  session=newDataBundle.feedbackSessions.get(""String_Node_Str"");
  instructor=newDataBundle.instructors.get(""String_Node_Str"");
  export=fsLogic.getFeedbackSessionResultsSummaryAsCsv(session.feedbackSessionName,session.courseId,instructor.email);
  System.out.println(export);
  expected=new String[]{""String_Node_Str"" + session.courseId + ""String_Node_Str"",""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  assertEquals(StringUtils.join(expected,Const.EOL),export);
  session=newDataBundle.feedbackSessions.get(""String_Node_Str"");
  instructor=newDataBundle.instructors.get(""String_Node_Str"");
  export=fsLogic.getFeedbackSessionResultsSummaryAsCsv(session.feedbackSessionName,session.courseId,instructor.email);
  System.out.println(export);
  expected=new String[]{""String_Node_Str"" + session.courseId + ""String_Node_Str"",""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  assertEquals(StringUtils.join(expected,Const.EOL),export);
  ______TS(""String_Node_Str"");
  session=newDataBundle.feedbackSessions.get(""String_Node_Str"");
  instructor=newDataBundle.instructors.get(""String_Node_Str"");
  export=fsLogic.getFeedbackSessionResultsSummaryAsCsv(session.feedbackSessionName,session.courseId,instructor.email);
  System.out.println(export);
  expected=new String[]{""String_Node_Str"" + session.courseId + ""String_Node_Str"",""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  assertEquals(StringUtils.join(expected,Const.EOL),export);
  ______TS(""String_Node_Str"");
  session=newDataBundle.feedbackSessions.get(""String_Node_Str"");
  instructor=newDataBundle.instructors.get(""String_Node_Str"");
  export=fsLogic.getFeedbackSessionResultsSummaryAsCsv(session.feedbackSessionName,session.courseId,instructor.email);
  System.out.println(export);
  expected=new String[]{""String_Node_Str"" + session.courseId + ""String_Node_Str"",""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  assertEquals(StringUtils.join(expected,Const.EOL),export);
  ______TS(""String_Node_Str"");
  try {
    fsLogic.getFeedbackSessionResultsSummaryAsCsv(""String_Node_Str"",""String_Node_Str"",instructor.email);
    signalFailureToDetectException(""String_Node_Str"");
  }
 catch (  EntityDoesNotExistException e) {
    assertEquals(e.getMessage(),""String_Node_Str"");
  }
}",0.9986015043277772
62747,"private FeedbackQuestionSubmitPage loginToStudentFeedbackQuestionSubmitPage(String studentName,String fsName,String questionId){
  StudentAttributes s=testData.students.get(studentName);
  Url editUrl=createUrl(Const.ActionURIs.STUDENT_FEEDBACK_QUESTION_SUBMISSION_EDIT_PAGE).withUserId(s.googleId).withCourseId(testData.feedbackSessions.get(fsName).courseId).withSessionName(testData.feedbackSessions.get(fsName).feedbackSessionName).withParam(Const.ParamsNames.FEEDBACK_QUESTION_ID,questionId);
  return loginAdminToPage(browser,editUrl,FeedbackQuestionSubmitPage.class);
}","private FeedbackQuestionSubmitPage loginToStudentFeedbackQuestionSubmitPage(String studentName,String fsName,String questionId){
  StudentAttributes s=testData.students.get(studentName);
  Url submitPageUrl=new Url(Const.ActionURIs.STUDENT_FEEDBACK_QUESTION_SUBMISSION_EDIT_PAGE).withUserId(s.googleId).withCourseId(testData.feedbackSessions.get(fsName).courseId).withSessionName(testData.feedbackSessions.get(fsName).feedbackSessionName).withParam(Const.ParamsNames.FEEDBACK_QUESTION_ID,questionId);
  return loginAdminToPage(browser,submitPageUrl,FeedbackQuestionSubmitPage.class);
}",0.9672413793103448
62748,"private InstructorFeedbackEditPage getFeedbackEditPage(){
  Url feedbackPageLink=createUrl(Const.ActionURIs.INSTRUCTOR_FEEDBACK_EDIT_PAGE).withUserId(instructorId).withCourseId(instructorCourseId).withSessionName(instructorEditFSName);
  return loginAdminToPage(browser,feedbackPageLink,InstructorFeedbackEditPage.class);
}","private InstructorFeedbackEditPage getFeedbackEditPage(){
  Url feedbackPageLink=new Url(Const.ActionURIs.INSTRUCTOR_FEEDBACK_EDIT_PAGE).withUserId(instructorId).withCourseId(instructorCourseId).withSessionName(instructorEditFSName);
  return loginAdminToPage(browser,feedbackPageLink,InstructorFeedbackEditPage.class);
}",0.984472049689441
62749,"private FeedbackSubmitPage loginToInstructorFeedbackSubmitPage(String instructorName,String fsName){
  Url editUrl=createUrl(Const.ActionURIs.INSTRUCTOR_FEEDBACK_SUBMISSION_EDIT_PAGE).withUserId(testData.instructors.get(instructorName).googleId).withCourseId(testData.feedbackSessions.get(fsName).courseId).withSessionName(testData.feedbackSessions.get(fsName).feedbackSessionName);
  return loginAdminToPage(browser,editUrl,FeedbackSubmitPage.class);
}","private FeedbackSubmitPage loginToInstructorFeedbackSubmitPage(String instructorName,String fsName){
  Url submitPageUrl=new Url(Const.ActionURIs.INSTRUCTOR_FEEDBACK_SUBMISSION_EDIT_PAGE).withUserId(testData.instructors.get(instructorName).googleId).withCourseId(testData.feedbackSessions.get(fsName).courseId).withSessionName(testData.feedbackSessions.get(fsName).feedbackSessionName);
  return loginAdminToPage(browser,submitPageUrl,FeedbackSubmitPage.class);
}",0.9585152838427948
62750,"private InstructorFeedbackResultsPage loginToInstructorFeedbackResultsPageWithViewType(String instructorName,String fsName,boolean needAjax,String viewType){
  Url editUrl=createUrl(Const.ActionURIs.INSTRUCTOR_FEEDBACK_RESULTS_PAGE).withUserId(testData.instructors.get(instructorName).googleId).withCourseId(testData.feedbackSessions.get(fsName).courseId).withSessionName(testData.feedbackSessions.get(fsName).feedbackSessionName);
  if (needAjax) {
    editUrl=editUrl.withParam(Const.ParamsNames.FEEDBACK_RESULTS_NEED_AJAX,String.valueOf(needAjax));
  }
  if (viewType != null) {
    editUrl=editUrl.withParam(Const.ParamsNames.FEEDBACK_RESULTS_SORTTYPE,viewType);
  }
  return loginAdminToPage(browser,editUrl,InstructorFeedbackResultsPage.class);
}","private InstructorFeedbackResultsPage loginToInstructorFeedbackResultsPageWithViewType(String instructorName,String fsName,boolean needAjax,String viewType){
  Url resultsPageUrl=new Url(Const.ActionURIs.INSTRUCTOR_FEEDBACK_RESULTS_PAGE).withUserId(testData.instructors.get(instructorName).googleId).withCourseId(testData.feedbackSessions.get(fsName).courseId).withSessionName(testData.feedbackSessions.get(fsName).feedbackSessionName);
  if (needAjax) {
    resultsPageUrl=resultsPageUrl.withParam(Const.ParamsNames.FEEDBACK_RESULTS_NEED_AJAX,String.valueOf(needAjax));
  }
  if (viewType != null) {
    resultsPageUrl=resultsPageUrl.withParam(Const.ParamsNames.FEEDBACK_RESULTS_SORTTYPE,viewType);
  }
  return loginAdminToPage(browser,resultsPageUrl,InstructorFeedbackResultsPage.class);
}",0.9352331606217616
62751,"private StudentFeedbackResultsPage loginToStudentFeedbackResultsPage(String studentName,String fsName){
  Url editUrl=createUrl(Const.ActionURIs.STUDENT_FEEDBACK_RESULTS_PAGE).withUserId(testData.students.get(studentName).googleId).withCourseId(testData.feedbackSessions.get(fsName).courseId).withSessionName(testData.feedbackSessions.get(fsName).feedbackSessionName);
  return loginAdminToPage(browser,editUrl,StudentFeedbackResultsPage.class);
}","private StudentFeedbackResultsPage loginToStudentFeedbackResultsPage(String studentName,String fsName){
  Url resultsPageUrl=new Url(Const.ActionURIs.STUDENT_FEEDBACK_RESULTS_PAGE).withUserId(testData.students.get(studentName).googleId).withCourseId(testData.feedbackSessions.get(fsName).courseId).withSessionName(testData.feedbackSessions.get(fsName).feedbackSessionName);
  return loginAdminToPage(browser,resultsPageUrl,StudentFeedbackResultsPage.class);
}",0.955849889624724
62752,"private FeedbackSubmitPage loginToStudentFeedbackSubmitPage(String studentName,String fsName){
  Url editUrl=createUrl(Const.ActionURIs.STUDENT_FEEDBACK_SUBMISSION_EDIT_PAGE).withUserId(testData.students.get(studentName).googleId).withCourseId(testData.feedbackSessions.get(fsName).courseId).withSessionName(testData.feedbackSessions.get(fsName).feedbackSessionName);
  return loginAdminToPage(browser,editUrl,FeedbackSubmitPage.class);
}","private FeedbackSubmitPage loginToStudentFeedbackSubmitPage(String studentName,String fsName){
  Url submitPageUrl=new Url(Const.ActionURIs.STUDENT_FEEDBACK_SUBMISSION_EDIT_PAGE).withUserId(testData.students.get(studentName).googleId).withCourseId(testData.feedbackSessions.get(fsName).courseId).withSessionName(testData.feedbackSessions.get(fsName).feedbackSessionName);
  return loginAdminToPage(browser,submitPageUrl,FeedbackSubmitPage.class);
}",0.9571106094808126
62753,"private boolean testAndRunGodMode(String filePath,String content,boolean isPart){
  if (content != null && !content.isEmpty() && System.getProperty(""String_Node_Str"") != null && System.getProperty(""String_Node_Str"").equals(""String_Node_Str"")) {
    assert(TestProperties.inst().isDevServer());
    if (areTestAccountsDefaultValues()) {
      Assumption.fail(""String_Node_Str"" + ""String_Node_Str"");
    }
    try {
      String processedPageSource=processPageSourceForGodMode(content);
      processedPageSource=HtmlHelper.convertToStandardHtml(processedPageSource,isPart);
      saveCurrentPage(filePath,processedPageSource);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return true;
  }
 else {
    return false;
  }
}","private boolean testAndRunGodMode(String filePath,String content,boolean isPart){
  if (content != null && !content.isEmpty() && System.getProperty(""String_Node_Str"") != null && System.getProperty(""String_Node_Str"").equals(""String_Node_Str"")) {
    assert(TestProperties.inst().isDevServer());
    if (areTestAccountsDefaultValues()) {
      Assumption.fail(""String_Node_Str"" + ""String_Node_Str"");
    }
    try {
      String processedPageSource=HtmlHelper.convertToStandardHtml(content,isPart);
      processedPageSource=processPageSourceForGodMode(processedPageSource);
      saveCurrentPage(filePath,processedPageSource);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return true;
  }
 else {
    return false;
  }
}",0.8723118279569892
62754,"/** 
 * Get the possible recipients for a TEAM giver for the question specified
 * @param fqa
 * @param givingTeam
 * @return a list of possible recipients that can receive a response from giver specified bythe givingTeam
 */
private List<String> getPossibleRecipientsForTeam(FeedbackQuestionAttributes fqa,String givingTeam){
  FeedbackParticipantType recipientType=fqa.recipientType;
  List<String> possibleRecipients=new ArrayList<String>();
switch (recipientType) {
case TEAMS:
    possibleRecipients=getSortedListOfTeams();
  possibleRecipients.remove(givingTeam);
break;
case OWN_TEAM:
possibleRecipients.add(givingTeam);
break;
case INSTRUCTORS:
possibleRecipients=getSortedListOfInstructorEmails();
break;
case STUDENTS:
possibleRecipients=getSortedListOfStudentEmails();
break;
case SELF:
case OWN_TEAM_MEMBERS_INCLUDING_SELF:
if (rosterTeamNameMembersTable.containsKey(givingTeam)) {
Set<String> studentEmailsToNames=rosterTeamNameMembersTable.get(givingTeam);
possibleRecipients=new ArrayList<String>(studentEmailsToNames);
}
break;
case NONE:
possibleRecipients.add(Const.GENERAL_QUESTION);
break;
default :
log.severe(""String_Node_Str"");
break;
}
return possibleRecipients;
}","/** 
 * Get the possible recipients for a TEAM giver for the question specified
 * @param fqa
 * @param givingTeam
 * @return a list of possible recipients that can receive a response from giver specified bythe givingTeam
 */
private List<String> getPossibleRecipientsForTeam(FeedbackQuestionAttributes fqa,String givingTeam){
  FeedbackParticipantType recipientType=fqa.recipientType;
  List<String> possibleRecipients=new ArrayList<String>();
switch (recipientType) {
case TEAMS:
    possibleRecipients=getSortedListOfTeams();
  possibleRecipients.remove(givingTeam);
break;
case OWN_TEAM:
possibleRecipients.add(givingTeam);
break;
case INSTRUCTORS:
possibleRecipients=getSortedListOfInstructorEmails();
break;
case STUDENTS:
possibleRecipients=getSortedListOfStudentEmails();
break;
case SELF:
case OWN_TEAM_MEMBERS_INCLUDING_SELF:
if (rosterTeamNameMembersTable.containsKey(givingTeam)) {
Set<String> studentEmailsToNames=rosterTeamNameMembersTable.get(givingTeam);
possibleRecipients=new ArrayList<String>(studentEmailsToNames);
Collections.sort(possibleRecipients);
}
break;
case NONE:
possibleRecipients.add(Const.GENERAL_QUESTION);
break;
default :
log.severe(""String_Node_Str"");
break;
}
return possibleRecipients;
}",0.984258492129246
62755,"public CourseSummaryBundle getCourseSummaryWithFeedbackSessions(String courseId) throws EntityDoesNotExistException {
  Assumption.assertNotNull(courseId);
  return coursesLogic.getCourseSummaryWithFeedbackSessions(courseId);
}","public CourseSummaryBundle getCourseSummaryWithFeedbackSessions(InstructorAttributes instructor) throws EntityDoesNotExistException {
  Assumption.assertNotNull(instructor);
  return coursesLogic.getCourseSummaryWithFeedbackSessionsForInstructor(instructor);
}",0.8090349075975359
62756,"private ActionResult loadCourse(String courseToLoad) throws EntityDoesNotExistException {
  int index=Integer.parseInt(getRequestParamValue(""String_Node_Str""));
  CourseSummaryBundle course=logic.getCourseSummaryWithFeedbackSessions(courseToLoad);
  FeedbackSessionAttributes.sortFeedbackSessionsByCreationTimeDescending(course.feedbackSessions);
  InstructorAttributes instructor=logic.getInstructorForGoogleId(courseToLoad,account.googleId);
  int commentsForSendingStateCount=logic.getCommentsForSendingState(courseToLoad,CommentSendingState.PENDING).size();
  int feedbackResponseCommentsForSendingStateCount=logic.getFeedbackResponseCommentsForSendingState(courseToLoad,CommentSendingState.PENDING).size();
  int pendingCommentsCount=commentsForSendingStateCount + feedbackResponseCommentsForSendingStateCount;
  InstructorHomeCourseAjaxPageData data=new InstructorHomeCourseAjaxPageData(account);
  data.init(index,course,instructor,pendingCommentsCount);
  return createShowPageResult(Const.ViewURIs.INSTRUCTOR_HOME_AJAX_COURSE_TABLE,data);
}","private ActionResult loadCourse(String courseToLoad) throws EntityDoesNotExistException {
  int index=Integer.parseInt(getRequestParamValue(""String_Node_Str""));
  InstructorAttributes instructor=logic.getInstructorForGoogleId(courseToLoad,account.googleId);
  CourseSummaryBundle course=logic.getCourseSummaryWithFeedbackSessions(instructor);
  FeedbackSessionAttributes.sortFeedbackSessionsByCreationTimeDescending(course.feedbackSessions);
  int commentsForSendingStateCount=logic.getCommentsForSendingState(courseToLoad,CommentSendingState.PENDING).size();
  int feedbackResponseCommentsForSendingStateCount=logic.getFeedbackResponseCommentsForSendingState(courseToLoad,CommentSendingState.PENDING).size();
  int pendingCommentsCount=commentsForSendingStateCount + feedbackResponseCommentsForSendingStateCount;
  InstructorHomeCourseAjaxPageData data=new InstructorHomeCourseAjaxPageData(account);
  data.init(index,course,instructor,pendingCommentsCount);
  return createShowPageResult(Const.ViewURIs.INSTRUCTOR_HOME_AJAX_COURSE_TABLE,data);
}",0.8969465648854962
62757,"private FeedbackResponseComment buildFeedbackResponseCommentAddForm(FeedbackQuestionAttributes question,FeedbackResponseAttributes response,Map<FeedbackParticipantType,Boolean> responseVisibilityMap,String giverName,String recipientName){
  FeedbackParticipantType[] relevantTypes={FeedbackParticipantType.GIVER,FeedbackParticipantType.RECEIVER,FeedbackParticipantType.OWN_TEAM_MEMBERS,FeedbackParticipantType.RECEIVER_TEAM_MEMBERS,FeedbackParticipantType.STUDENTS,FeedbackParticipantType.INSTRUCTORS};
  List<FeedbackParticipantType> showCommentTo=new ArrayList<>();
  List<FeedbackParticipantType> showGiverNameTo=new ArrayList<>();
  for (  FeedbackParticipantType type : relevantTypes) {
    if (isResponseCommentVisibleTo(question,type)) {
      showCommentTo.add(type);
    }
    if (isResponseCommentGiverNameVisibleTo(question,type)) {
      showGiverNameTo.add(type);
    }
  }
  FeedbackResponseCommentAttributes frca=new FeedbackResponseCommentAttributes(question.courseId,question.feedbackSessionName,question.getFeedbackQuestionId(),response.getId());
  return new FeedbackResponseComment(frca,giverName,recipientName,getResponseCommentVisibilityString(question),getResponseCommentGiverNameVisibilityString(question),responseVisibilityMap.get(FeedbackParticipantType.RECEIVER),responseVisibilityMap.get(FeedbackParticipantType.OWN_TEAM_MEMBERS),responseVisibilityMap.get(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS),responseVisibilityMap.get(FeedbackParticipantType.STUDENTS),responseVisibilityMap.get(FeedbackParticipantType.INSTRUCTORS),showCommentTo,showGiverNameTo,true);
}","private FeedbackResponseComment buildFeedbackResponseCommentAddForm(FeedbackQuestionAttributes question,FeedbackResponseAttributes response,Map<FeedbackParticipantType,Boolean> responseVisibilityMap,String giverName,String recipientName){
  FeedbackResponseCommentAttributes frca=new FeedbackResponseCommentAttributes(question.courseId,question.feedbackSessionName,question.getFeedbackQuestionId(),response.getId());
  FeedbackParticipantType[] relevantTypes={FeedbackParticipantType.GIVER,FeedbackParticipantType.RECEIVER,FeedbackParticipantType.OWN_TEAM_MEMBERS,FeedbackParticipantType.RECEIVER_TEAM_MEMBERS,FeedbackParticipantType.STUDENTS,FeedbackParticipantType.INSTRUCTORS};
  frca.showCommentTo=new ArrayList<FeedbackParticipantType>();
  frca.showGiverNameTo=new ArrayList<FeedbackParticipantType>();
  for (  FeedbackParticipantType type : relevantTypes) {
    if (isResponseCommentVisibleTo(question,type)) {
      frca.showCommentTo.add(type);
    }
    if (isResponseCommentGiverNameVisibleTo(question,type)) {
      frca.showGiverNameTo.add(type);
    }
  }
  return new FeedbackResponseComment(frca,giverName,recipientName,getResponseCommentVisibilityString(question),getResponseCommentGiverNameVisibilityString(question),responseVisibilityMap);
}",0.5986680686996144
62758,"/** 
 * Builds response rows for a given question. This not only builds response rows for existing responses, but includes  the missing responses between pairs of givers and recipients.
 * @param question
 * @param responses  existing responses for the question
 * @see configureResponseRowForViewType
 */
private List<InstructorFeedbackResultsResponseRow> buildResponseRowsForQuestion(FeedbackQuestionAttributes question,List<FeedbackResponseAttributes> responses){
  List<InstructorFeedbackResultsResponseRow> responseRows=new ArrayList<InstructorFeedbackResultsResponseRow>();
  List<String> possibleGiversWithoutResponses=bundle.getPossibleGivers(question);
  List<String> possibleReceiversWithoutResponsesForGiver=new ArrayList<String>();
  String prevGiver=""String_Node_Str"";
  for (  FeedbackResponseAttributes response : responses) {
    if (!bundle.isGiverVisible(response) || !bundle.isRecipientVisible(response)) {
      possibleGiversWithoutResponses.clear();
      possibleReceiversWithoutResponsesForGiver.clear();
    }
    removeParticipantIdentifierFromList(question.giverType,possibleGiversWithoutResponses,response.giverEmail);
    boolean isNewGiver=!prevGiver.equals(response.giverEmail);
    if (isNewGiver) {
      responseRows.addAll(buildMissingResponseRowsBetweenGiverAndPossibleRecipients(question,possibleReceiversWithoutResponsesForGiver,prevGiver,bundle.getNameForEmail(prevGiver),bundle.getTeamNameForEmail(prevGiver)));
      String giverIdentifier=(question.giverType == FeedbackParticipantType.TEAMS) ? bundle.getFullNameFromRoster(response.giverEmail) : response.giverEmail;
      possibleReceiversWithoutResponsesForGiver=bundle.getPossibleRecipients(question,giverIdentifier);
    }
    removeParticipantIdentifierFromList(question.recipientType,possibleReceiversWithoutResponsesForGiver,response.recipientEmail);
    prevGiver=response.giverEmail;
    InstructorFeedbackResultsModerationButton moderationButton=bundle.isGiverVisible(response) ? buildModerationButtonForExistingResponse(question,response) : null;
    InstructorFeedbackResultsResponseRow responseRow=new InstructorFeedbackResultsResponseRow(bundle.getGiverNameForResponse(question,response),bundle.getTeamNameForEmail(response.giverEmail),bundle.getRecipientNameForResponse(question,response),bundle.getTeamNameForEmail(response.recipientEmail),bundle.getResponseAnswerHtml(response,question),moderationButton);
    configureResponseRow(question,prevGiver,response.recipientEmail,responseRow);
    responseRows.add(responseRow);
  }
  responseRows.addAll(getRemainingMissingResponseRows(question,possibleGiversWithoutResponses,possibleReceiversWithoutResponsesForGiver,prevGiver,viewType));
  return responseRows;
}","/** 
 * Builds response rows for a given question. This not only builds response rows for existing responses, but includes  the missing responses between pairs of givers and recipients.
 * @param question
 * @param responses  existing responses for the question
 * @see configureResponseRowForViewType
 */
private List<InstructorFeedbackResultsResponseRow> buildResponseRowsForQuestion(FeedbackQuestionAttributes question,List<FeedbackResponseAttributes> responses){
  List<InstructorFeedbackResultsResponseRow> responseRows=new ArrayList<InstructorFeedbackResultsResponseRow>();
  List<String> possibleGiversWithoutResponses=bundle.getPossibleGivers(question);
  List<String> possibleReceiversWithoutResponsesForGiver=new ArrayList<String>();
  String prevGiver=""String_Node_Str"";
  for (  FeedbackResponseAttributes response : responses) {
    if (!bundle.isGiverVisible(response) || !bundle.isRecipientVisible(response)) {
      possibleGiversWithoutResponses.clear();
      possibleReceiversWithoutResponsesForGiver.clear();
    }
    removeParticipantIdentifierFromList(question.giverType,possibleGiversWithoutResponses,response.giverEmail);
    boolean isNewGiver=!prevGiver.equals(response.giverEmail);
    if (isNewGiver) {
      responseRows.addAll(buildMissingResponseRowsBetweenGiverAndPossibleRecipients(question,possibleReceiversWithoutResponsesForGiver,prevGiver,bundle.getNameForEmail(prevGiver),bundle.getTeamNameForEmail(prevGiver)));
      String giverIdentifier=(question.giverType == FeedbackParticipantType.TEAMS) ? bundle.getFullNameFromRoster(response.giverEmail) : response.giverEmail;
      possibleReceiversWithoutResponsesForGiver=bundle.getPossibleRecipients(question,giverIdentifier);
    }
    removeParticipantIdentifierFromList(question.recipientType,possibleReceiversWithoutResponsesForGiver,response.recipientEmail);
    prevGiver=response.giverEmail;
    InstructorFeedbackResultsModerationButton moderationButton=bundle.isGiverVisible(response) ? buildModerationButtonForExistingResponse(question,response) : null;
    InstructorFeedbackResultsResponseRow responseRow=new InstructorFeedbackResultsResponseRow(bundle.getGiverNameForResponse(response),bundle.getTeamNameForEmail(response.giverEmail),bundle.getRecipientNameForResponse(response),bundle.getTeamNameForEmail(response.recipientEmail),bundle.getResponseAnswerHtml(response,question),moderationButton);
    configureResponseRow(question,prevGiver,response.recipientEmail,responseRow);
    responseRows.add(responseRow);
  }
  responseRows.addAll(getRemainingMissingResponseRows(question,possibleGiversWithoutResponses,possibleReceiversWithoutResponsesForGiver,prevGiver,viewType));
  return responseRows;
}",0.969741697416974
62759,"private FeedbackResponseComment buildResponseComment(String giverName,String recipientName,FeedbackQuestionAttributes question,FeedbackResponseAttributes response,FeedbackResponseCommentAttributes frcAttributes){
  boolean isInstructorGiver=instructor.email.equals(frcAttributes.giverEmail);
  boolean isInstructorWithPrivilegesToModify=instructor.isAllowedForPrivilege(response.giverSection,response.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION_COMMENT_IN_SECTIONS) && instructor.isAllowedForPrivilege(response.recipientSection,response.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION_COMMENT_IN_SECTIONS);
  boolean isInstructorAllowedToModify=isInstructorGiver || isInstructorWithPrivilegesToModify;
  Map<FeedbackParticipantType,Boolean> responseVisibilityMap=getResponseVisibilityMap(question);
  return new FeedbackResponseComment(frcAttributes,frcAttributes.giverEmail,giverName,recipientName,getResponseCommentVisibilityString(frcAttributes,question),getResponseCommentGiverNameVisibilityString(frcAttributes,question),responseVisibilityMap.get(FeedbackParticipantType.RECEIVER),responseVisibilityMap.get(FeedbackParticipantType.OWN_TEAM_MEMBERS),responseVisibilityMap.get(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS),responseVisibilityMap.get(FeedbackParticipantType.STUDENTS),responseVisibilityMap.get(FeedbackParticipantType.INSTRUCTORS),true,isInstructorAllowedToModify,isInstructorAllowedToModify);
}","private FeedbackResponseComment buildResponseComment(String giverName,String recipientName,FeedbackQuestionAttributes question,FeedbackResponseAttributes response,FeedbackResponseCommentAttributes frcAttributes){
  boolean isInstructorGiver=instructor.email.equals(frcAttributes.giverEmail);
  boolean isInstructorWithPrivilegesToModify=instructor.isAllowedForPrivilege(response.giverSection,response.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION_COMMENT_IN_SECTIONS) && instructor.isAllowedForPrivilege(response.recipientSection,response.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION_COMMENT_IN_SECTIONS);
  boolean isInstructorAllowedToEditAndDeleteComment=isInstructorGiver || isInstructorWithPrivilegesToModify;
  Map<FeedbackParticipantType,Boolean> responseVisibilityMap=getResponseVisibilityMap(question);
  String whoCanSeeComment=null;
  boolean isVisibilityIconShown=false;
  boolean isNotificationIconShown=false;
  if (bundle.feedbackSession.isPublished()) {
    boolean responseCommentPublicToRecipient=!frcAttributes.showCommentTo.isEmpty();
    isVisibilityIconShown=responseCommentPublicToRecipient;
    if (isVisibilityIconShown) {
      whoCanSeeComment=getTypeOfPeopleCanViewComment(frcAttributes,question);
    }
    isNotificationIconShown=frcAttributes.sendingState == CommentSendingState.PENDING;
  }
  FeedbackResponseComment frc=new FeedbackResponseComment(frcAttributes,frcAttributes.giverEmail,giverName,recipientName,getResponseCommentVisibilityString(frcAttributes,question),getResponseCommentGiverNameVisibilityString(frcAttributes,question),responseVisibilityMap);
  frc.setExtraClass(getExtraClass(frcAttributes.giverEmail,instructor.email,isVisibilityIconShown));
  if (isInstructorAllowedToEditAndDeleteComment) {
    frc.enableEdit();
    frc.enableDelete();
    frc.enableEditDeleteOnHover();
  }
  if (isVisibilityIconShown) {
    frc.enableVisibilityIcon(whoCanSeeComment);
  }
  if (isNotificationIconShown) {
    frc.enableNotificationIcon();
  }
  return frc;
}",0.6279728199320498
62760,"private List<InstructorFeedbackResultsResponseRow> buildResponseRowsForQuestionForSingleParticipant(FeedbackQuestionAttributes question,List<FeedbackResponseAttributes> responses,String participantIdentifier,boolean isFirstGroupedByGiver){
  List<InstructorFeedbackResultsResponseRow> responseRows=new ArrayList<InstructorFeedbackResultsResponseRow>();
  List<String> possibleParticipantsWithoutResponses=isFirstGroupedByGiver ? bundle.getPossibleRecipients(question,participantIdentifier) : bundle.getPossibleGivers(question,participantIdentifier);
  for (  FeedbackResponseAttributes response : responses) {
    if (!bundle.isGiverVisible(response) || !bundle.isRecipientVisible(response)) {
      possibleParticipantsWithoutResponses.clear();
    }
    String participantWithResponse=isFirstGroupedByGiver ? response.recipientEmail : response.giverEmail;
    FeedbackParticipantType participantType=isFirstGroupedByGiver ? question.recipientType : question.giverType;
    removeParticipantIdentifierFromList(participantType,possibleParticipantsWithoutResponses,participantWithResponse);
    InstructorFeedbackResultsModerationButton moderationButton=bundle.isGiverVisible(response) ? buildModerationButtonForExistingResponse(question,response) : null;
    InstructorFeedbackResultsResponseRow responseRow=new InstructorFeedbackResultsResponseRow(bundle.getGiverNameForResponse(question,response),bundle.getTeamNameForEmail(response.giverEmail),bundle.getRecipientNameForResponse(question,response),bundle.getTeamNameForEmail(response.recipientEmail),bundle.getResponseAnswerHtml(response,question),moderationButton);
    configureResponseRow(question,response.giverEmail,response.recipientEmail,responseRow);
    responseRows.add(responseRow);
  }
  if (isFirstGroupedByGiver) {
    responseRows.addAll(buildMissingResponseRowsBetweenGiverAndPossibleRecipients(question,possibleParticipantsWithoutResponses,participantIdentifier,bundle.getNameForEmail(participantIdentifier),bundle.getTeamNameForEmail(participantIdentifier)));
  }
 else {
    responseRows.addAll(buildMissingResponseRowsBetweenRecipientAndPossibleGivers(question,possibleParticipantsWithoutResponses,participantIdentifier,bundle.getNameForEmail(participantIdentifier),bundle.getTeamNameForEmail(participantIdentifier)));
  }
  return responseRows;
}","private List<InstructorFeedbackResultsResponseRow> buildResponseRowsForQuestionForSingleParticipant(FeedbackQuestionAttributes question,List<FeedbackResponseAttributes> responses,String participantIdentifier,boolean isFirstGroupedByGiver){
  List<InstructorFeedbackResultsResponseRow> responseRows=new ArrayList<InstructorFeedbackResultsResponseRow>();
  List<String> possibleParticipantsWithoutResponses=isFirstGroupedByGiver ? bundle.getPossibleRecipients(question,participantIdentifier) : bundle.getPossibleGivers(question,participantIdentifier);
  for (  FeedbackResponseAttributes response : responses) {
    if (!bundle.isGiverVisible(response) || !bundle.isRecipientVisible(response)) {
      possibleParticipantsWithoutResponses.clear();
    }
    String participantWithResponse=isFirstGroupedByGiver ? response.recipientEmail : response.giverEmail;
    FeedbackParticipantType participantType=isFirstGroupedByGiver ? question.recipientType : question.giverType;
    removeParticipantIdentifierFromList(participantType,possibleParticipantsWithoutResponses,participantWithResponse);
    InstructorFeedbackResultsModerationButton moderationButton=bundle.isGiverVisible(response) ? buildModerationButtonForExistingResponse(question,response) : null;
    InstructorFeedbackResultsResponseRow responseRow=new InstructorFeedbackResultsResponseRow(bundle.getGiverNameForResponse(response),bundle.getTeamNameForEmail(response.giverEmail),bundle.getRecipientNameForResponse(response),bundle.getTeamNameForEmail(response.recipientEmail),bundle.getResponseAnswerHtml(response,question),moderationButton);
    configureResponseRow(question,response.giverEmail,response.recipientEmail,responseRow);
    responseRows.add(responseRow);
  }
  if (isFirstGroupedByGiver) {
    responseRows.addAll(buildMissingResponseRowsBetweenGiverAndPossibleRecipients(question,possibleParticipantsWithoutResponses,participantIdentifier,bundle.getNameForEmail(participantIdentifier),bundle.getTeamNameForEmail(participantIdentifier)));
  }
 else {
    responseRows.addAll(buildMissingResponseRowsBetweenRecipientAndPossibleGivers(question,possibleParticipantsWithoutResponses,participantIdentifier,bundle.getNameForEmail(participantIdentifier),bundle.getTeamNameForEmail(participantIdentifier)));
  }
  return responseRows;
}",0.9961055819991346
62761,"private InstructorFeedbackResultsGroupByParticipantPanel buildGroupByParticipantPanel(String primaryParticipantIdentifier,String currentTeam,String additionalInfoId,int primaryParticipantIndex,Map.Entry<String,Map<String,List<FeedbackResponseAttributes>>> primaryToSecondaryToResponsesMap){
  Map<String,List<FeedbackResponseAttributes>> giverToResponsesMap=primaryToSecondaryToResponsesMap.getValue();
  List<InstructorFeedbackResultsSecondaryParticipantPanelBody> secondaryParticipantPanels=buildSecondaryParticipantPanels(additionalInfoId,primaryParticipantIndex,giverToResponsesMap);
  String primaryParticipantNameWithTeamNameAppended=bundle.appendTeamNameToName(bundle.getNameForEmail(primaryParticipantIdentifier),bundle.getTeamNameForEmail(primaryParticipantIdentifier));
  InstructorFeedbackResultsGroupByParticipantPanel recipientPanel=buildInstructorFeedbackResultsGroupBySecondaryParticipantPanel(primaryParticipantIdentifier,primaryParticipantNameWithTeamNameAppended,secondaryParticipantPanels,null);
  return recipientPanel;
}","private InstructorFeedbackResultsGroupByParticipantPanel buildGroupByParticipantPanel(String primaryParticipantIdentifier,String currentTeam,String additionalInfoId,int primaryParticipantIndex,Map.Entry<String,Map<String,List<FeedbackResponseAttributes>>> primaryToSecondaryToResponsesMap){
  Map<String,List<FeedbackResponseAttributes>> giverToResponsesMap=primaryToSecondaryToResponsesMap.getValue();
  List<InstructorFeedbackResultsSecondaryParticipantPanelBody> secondaryParticipantPanels=buildSecondaryParticipantPanels(additionalInfoId,primaryParticipantIndex,giverToResponsesMap);
  String primaryParticipantNameWithTeamNameAppended=bundle.appendTeamNameToName(bundle.getNameForEmail(primaryParticipantIdentifier),bundle.getTeamNameForEmail(primaryParticipantIdentifier));
  InstructorResultsModerationButton moderationButton=viewType.isPrimaryGrouperOfGiverType() ? buildModerationButtonForGiver(null,primaryParticipantIdentifier,""String_Node_Str"",""String_Node_Str"") : null;
  InstructorFeedbackResultsGroupByParticipantPanel recipientPanel=buildInstructorFeedbackResultsGroupBySecondaryParticipantPanel(primaryParticipantIdentifier,primaryParticipantNameWithTeamNameAppended,secondaryParticipantPanels,moderationButton);
  return recipientPanel;
}",0.9029168480626903
62762,"private InstructorFeedbackResultsGroupByParticipantPanel buildInstructorFeedbackResultsGroupBySecondaryParticipantPanel(String participantIdentifier,String participantName,List<InstructorFeedbackResultsSecondaryParticipantPanelBody> secondaryParticipantPanels,InstructorResultsModerationButton moderationButton){
  Url profilePictureLink=new Url(getProfilePictureLink(participantIdentifier));
  InstructorFeedbackResultsGroupByParticipantPanel bySecondaryParticipantPanel=new InstructorFeedbackResultsGroupByParticipantPanel(secondaryParticipantPanels);
  bySecondaryParticipantPanel.setParticipantIdentifier(participantIdentifier);
  bySecondaryParticipantPanel.setName(participantName);
  bySecondaryParticipantPanel.setGiver(viewType.isPrimaryGrouperOfGiverType());
  boolean isEmailValid=validator.getInvalidityInfo(FieldValidator.FieldType.EMAIL,participantIdentifier).isEmpty();
  bySecondaryParticipantPanel.setEmailValid(isEmailValid);
  bySecondaryParticipantPanel.setProfilePictureLink(profilePictureLink.toString());
  bySecondaryParticipantPanel.setModerationButton(viewType.isPrimaryGrouperOfGiverType() ? moderationButton : null);
  bySecondaryParticipantPanel.setHasResponses(true);
  return bySecondaryParticipantPanel;
}","private InstructorFeedbackResultsGroupByParticipantPanel buildInstructorFeedbackResultsGroupBySecondaryParticipantPanel(String participantIdentifier,String participantName,List<InstructorFeedbackResultsSecondaryParticipantPanelBody> secondaryParticipantPanels,InstructorResultsModerationButton moderationButton){
  Url profilePictureLink=new Url(getProfilePictureLink(participantIdentifier));
  InstructorFeedbackResultsGroupByParticipantPanel bySecondaryParticipantPanel=new InstructorFeedbackResultsGroupByParticipantPanel(secondaryParticipantPanels);
  bySecondaryParticipantPanel.setParticipantIdentifier(participantIdentifier);
  bySecondaryParticipantPanel.setName(participantName);
  bySecondaryParticipantPanel.setGiver(viewType.isPrimaryGrouperOfGiverType());
  boolean isEmailValid=validator.getInvalidityInfo(FieldValidator.FieldType.EMAIL,participantIdentifier).isEmpty();
  bySecondaryParticipantPanel.setEmailValid(isEmailValid);
  bySecondaryParticipantPanel.setProfilePictureLink(profilePictureLink.toString());
  bySecondaryParticipantPanel.setModerationButton(moderationButton);
  bySecondaryParticipantPanel.setHasResponses(true);
  return bySecondaryParticipantPanel;
}",0.9802143446001648
62763,"private List<InstructorFeedbackResultsSecondaryParticipantPanelBody> buildSecondaryParticipantPanels(String additionalInfoId,int primaryParticipantIndex,Map<String,List<FeedbackResponseAttributes>> secondaryParticipantToResponsesMap){
  List<InstructorFeedbackResultsSecondaryParticipantPanelBody> secondaryParticipantPanels=new ArrayList<InstructorFeedbackResultsSecondaryParticipantPanelBody>();
  int secondaryParticipantIndex=0;
  for (  Map.Entry<String,List<FeedbackResponseAttributes>> secondaryParticipantResponses : secondaryParticipantToResponsesMap.entrySet()) {
    secondaryParticipantIndex+=1;
    String secondaryParticipantIdentifier=secondaryParticipantResponses.getKey();
    String secondaryParticipantDisplayableName=bundle.getNameForEmail(secondaryParticipantIdentifier);
    boolean isEmail=validator.getInvalidityInfo(FieldValidator.FieldType.EMAIL,secondaryParticipantIdentifier).isEmpty();
    if (isEmail && !bundle.getTeamNameForEmail(secondaryParticipantIdentifier).isEmpty()) {
      secondaryParticipantDisplayableName+=""String_Node_Str"" + bundle.getTeamNameForEmail(secondaryParticipantIdentifier) + ""String_Node_Str"";
    }
    List<InstructorFeedbackResultsResponsePanel> responsePanels=buildResponsePanels(additionalInfoId,primaryParticipantIndex,secondaryParticipantIndex,secondaryParticipantResponses);
    InstructorFeedbackResultsSecondaryParticipantPanelBody secondaryParticipantPanel=new InstructorFeedbackResultsSecondaryParticipantPanelBody(secondaryParticipantIdentifier,secondaryParticipantDisplayableName,responsePanels,isEmail);
    secondaryParticipantPanel.setProfilePictureLink(getProfilePictureLink(secondaryParticipantIdentifier));
    secondaryParticipantPanel.setModerationButton(buildModerationButtonForGiver(null,secondaryParticipantIdentifier,""String_Node_Str"",""String_Node_Str""));
    boolean isVisibleTeam=bundle.rosterTeamNameMembersTable.containsKey(secondaryParticipantDisplayableName);
    secondaryParticipantPanel.setModerationButtonDisplayed(isEmail || isVisibleTeam);
    secondaryParticipantPanels.add(secondaryParticipantPanel);
  }
  return secondaryParticipantPanels;
}","private List<InstructorFeedbackResultsSecondaryParticipantPanelBody> buildSecondaryParticipantPanels(String additionalInfoId,int primaryParticipantIndex,Map<String,List<FeedbackResponseAttributes>> secondaryParticipantToResponsesMap){
  List<InstructorFeedbackResultsSecondaryParticipantPanelBody> secondaryParticipantPanels=new ArrayList<InstructorFeedbackResultsSecondaryParticipantPanelBody>();
  int secondaryParticipantIndex=0;
  for (  Map.Entry<String,List<FeedbackResponseAttributes>> secondaryParticipantResponses : secondaryParticipantToResponsesMap.entrySet()) {
    secondaryParticipantIndex+=1;
    String secondaryParticipantIdentifier=secondaryParticipantResponses.getKey();
    String secondaryParticipantDisplayableName=bundle.getNameForEmail(secondaryParticipantIdentifier);
    boolean isEmail=validator.getInvalidityInfo(FieldValidator.FieldType.EMAIL,secondaryParticipantIdentifier).isEmpty();
    if (isEmail && !bundle.getTeamNameForEmail(secondaryParticipantIdentifier).isEmpty()) {
      secondaryParticipantDisplayableName+=""String_Node_Str"" + bundle.getTeamNameForEmail(secondaryParticipantIdentifier) + ""String_Node_Str"";
    }
    List<InstructorFeedbackResultsResponsePanel> responsePanels=buildResponsePanels(additionalInfoId,primaryParticipantIndex,secondaryParticipantIndex,secondaryParticipantResponses);
    InstructorFeedbackResultsSecondaryParticipantPanelBody secondaryParticipantPanel=new InstructorFeedbackResultsSecondaryParticipantPanelBody(secondaryParticipantIdentifier,secondaryParticipantDisplayableName,responsePanels,isEmail);
    secondaryParticipantPanel.setProfilePictureLink(getProfilePictureLink(secondaryParticipantIdentifier));
    boolean isVisibleTeam=bundle.rosterTeamNameMembersTable.containsKey(secondaryParticipantDisplayableName);
    boolean isShowingModerationButton=viewType.isPrimaryGrouperOfGiverType() && (isEmail || isVisibleTeam);
    secondaryParticipantPanel.setModerationButton(isShowingModerationButton ? null : buildModerationButtonForGiver(null,secondaryParticipantIdentifier,""String_Node_Str"",""String_Node_Str""));
    secondaryParticipantPanels.add(secondaryParticipantPanel);
  }
  return secondaryParticipantPanels;
}",0.8678200692041522
62764,"private void finaliseBuildingSectionPanelWithoutStats(InstructorFeedbackResultsSectionPanel sectionPanel,String sectionWithoutResponses){
  LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> emptyResponseMap=new LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>>();
  Set<String> emptyTeamList=new LinkedHashSet<String>();
  finalizeBuildingSectionPanel(sectionPanel,sectionWithoutResponses,emptyResponseMap,emptyTeamList);
}","private void finaliseBuildingSectionPanelWithoutStats(InstructorFeedbackResultsSectionPanel sectionPanel,String sectionWithoutResponses){
  LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> emptyResponseMap=new LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>>();
  LinkedHashSet<String> emptyTeamList=new LinkedHashSet<String>();
  finalizeBuildingSectionPanel(sectionPanel,sectionWithoutResponses,emptyResponseMap,emptyTeamList);
}",0.9900398406374502
62765,"private InstructorFeedbackResultsGroupByParticipantPanel buildGroupByParticipantPanel(String primaryParticipantIdentifier,String currentTeam,String additionalInfoId,int primaryParticipantIndex,Map.Entry<String,Map<String,List<FeedbackResponseAttributes>>> primaryToSecondaryToResponsesMap){
  Map<String,List<FeedbackResponseAttributes>> giverToResponsesMap=primaryToSecondaryToResponsesMap.getValue();
  List<InstructorFeedbackResultsSecondaryParticipantPanelBody> secondaryParticipantPanels=buildSecondaryParticipantPanels(additionalInfoId,primaryParticipantIndex,giverToResponsesMap);
  String primaryParticipantNameWithTeamNameAppended=bundle.appendTeamNameToName(bundle.getNameForEmail(primaryParticipantIdentifier),bundle.getTeamNameForEmail(primaryParticipantIdentifier));
  InstructorFeedbackResultsGroupByParticipantPanel recipientPanel=buildInstructorFeedbackResultsGroupBySecondaryParticipantPanel(primaryParticipantIdentifier,primaryParticipantNameWithTeamNameAppended,secondaryParticipantPanels,null,false);
  return recipientPanel;
}","private InstructorFeedbackResultsGroupByParticipantPanel buildGroupByParticipantPanel(String primaryParticipantIdentifier,String currentTeam,String additionalInfoId,int primaryParticipantIndex,Map.Entry<String,Map<String,List<FeedbackResponseAttributes>>> primaryToSecondaryToResponsesMap){
  Map<String,List<FeedbackResponseAttributes>> giverToResponsesMap=primaryToSecondaryToResponsesMap.getValue();
  List<InstructorFeedbackResultsSecondaryParticipantPanelBody> secondaryParticipantPanels=buildSecondaryParticipantPanels(additionalInfoId,primaryParticipantIndex,giverToResponsesMap);
  String primaryParticipantNameWithTeamNameAppended=bundle.appendTeamNameToName(bundle.getNameForEmail(primaryParticipantIdentifier),bundle.getTeamNameForEmail(primaryParticipantIdentifier));
  InstructorFeedbackResultsGroupByParticipantPanel recipientPanel=buildInstructorFeedbackResultsGroupBySecondaryParticipantPanel(primaryParticipantIdentifier,primaryParticipantNameWithTeamNameAppended,secondaryParticipantPanels,null);
  return recipientPanel;
}",0.9971264367816092
62766,"public void initForViewByRecipientGiverQuestion(InstructorAttributes instructor,String selectedSection,String showStats,String groupByTeam){
  viewType=ViewType.RECIPIENT_GIVER_QUESTION;
  this.instructor=instructor;
  this.selectedSection=selectedSection;
  this.showStats=showStats;
  this.groupByTeam=groupByTeam;
  if (!bundle.isComplete) {
    buildSectionPanelsForForAjaxLoading(sections);
    return;
  }
  if (bundle.responses.isEmpty()) {
    return;
  }
  setShouldCollapsed(bundle.responses.size() > RESPONSE_LIMIT_FOR_COLLAPSING_PANEL);
  Map<String,Map<String,List<FeedbackResponseAttributes>>> sortedResponses=bundle.getResponsesSortedByRecipient(true);
  buildSectionPanelsForRecipientGiverQuestion(sortedResponses);
}","public void initForViewByRecipientGiverQuestion(InstructorAttributes instructor,String selectedSection,String showStats,String groupByTeam){
  viewType=ViewType.RECIPIENT_GIVER_QUESTION;
  this.instructor=instructor;
  this.selectedSection=selectedSection;
  this.showStats=showStats;
  this.groupByTeam=groupByTeam;
  if (!bundle.isComplete) {
    if (isAllSectionsSelected()) {
      buildSectionPanelsForForAjaxLoading(sections);
    }
 else {
      buildSectionPanelWithErrorMessage();
    }
    return;
  }
  if (bundle.responses.isEmpty()) {
    return;
  }
  setShouldCollapsed(bundle.responses.size() > RESPONSE_LIMIT_FOR_COLLAPSING_PANEL);
  Map<String,Map<String,List<FeedbackResponseAttributes>>> sortedResponses=bundle.getResponsesSortedByRecipient(true);
  buildSectionPanelsForRecipientGiverQuestion(sortedResponses);
}",0.9361430395913156
62767,"private void addMissingParticipantsForTeamToSectionPanelWithModerationButton(InstructorFeedbackResultsSectionPanel sectionPanel,String teamName,List<String> teamMembers){
  for (  String teamMember : teamMembers) {
    InstructorResultsModerationButton moderationButton=buildModerationButtonForGiver(null,teamMember,""String_Node_Str"",""String_Node_Str"");
    InstructorResultsParticipantPanel giverPanel;
    if (!viewType.isGroupedBySecondaryParticipant()) {
      giverPanel=InstructorFeedbackResultsGroupByQuestionPanel.buildInstructorFeedbackResultsGroupByQuestionPanelWithModerationButton(teamMember,bundle.getFullNameFromRoster(teamMember),new ArrayList<InstructorResultsQuestionTable>(),getProfilePictureLink(teamMember),viewType.isFirstGroupedByGiver(),moderationButton);
    }
 else {
      giverPanel=buildInstructorFeedbackResultsGroupBySecondaryParticipantPanel(teamMember,bundle.getFullNameFromRoster(teamMember) + ""String_Node_Str"" + bundle.getTeamNameForEmail(teamMember)+ ""String_Node_Str"",new ArrayList<InstructorFeedbackResultsSecondaryParticipantPanelBody>(),moderationButton,true);
    }
    giverPanel.setHasResponses(false);
    addParticipantPanelToSectionPanel(sectionPanel,teamName,giverPanel);
  }
}","private void addMissingParticipantsForTeamToSectionPanelWithModerationButton(InstructorFeedbackResultsSectionPanel sectionPanel,String teamName,List<String> teamMembers){
  for (  String teamMember : teamMembers) {
    InstructorResultsModerationButton moderationButton=buildModerationButtonForGiver(null,teamMember,""String_Node_Str"",""String_Node_Str"");
    InstructorResultsParticipantPanel giverPanel;
    if (!viewType.isGroupedBySecondaryParticipant()) {
      giverPanel=InstructorFeedbackResultsGroupByQuestionPanel.buildInstructorFeedbackResultsGroupByQuestionPanelWithModerationButton(teamMember,bundle.getFullNameFromRoster(teamMember),new ArrayList<InstructorResultsQuestionTable>(),getProfilePictureLink(teamMember),viewType.isFirstGroupedByGiver(),moderationButton);
    }
 else {
      giverPanel=buildInstructorFeedbackResultsGroupBySecondaryParticipantPanel(teamMember,bundle.getFullNameFromRoster(teamMember) + ""String_Node_Str"" + bundle.getTeamNameForEmail(teamMember)+ ""String_Node_Str"",new ArrayList<InstructorFeedbackResultsSecondaryParticipantPanelBody>(),moderationButton);
    }
    giverPanel.setHasResponses(false);
    addParticipantPanelToSectionPanel(sectionPanel,teamName,giverPanel);
  }
}",0.9979533360622186
62768,"private void addMissingParticipantsForTeamToSectionPanelWithoutModerationButton(InstructorFeedbackResultsSectionPanel sectionPanel,String teamName,List<String> teamMembers){
  for (  String teamMember : teamMembers) {
    InstructorResultsParticipantPanel giverPanel;
    if (!viewType.isGroupedBySecondaryParticipant()) {
      giverPanel=InstructorFeedbackResultsGroupByQuestionPanel.buildInstructorFeedbackResultsGroupByQuestionPanelWithoutModerationButton(new ArrayList<InstructorResultsQuestionTable>(),getProfilePictureLink(teamMember),viewType.isFirstGroupedByGiver(),teamMember,bundle.getFullNameFromRoster(teamMember));
    }
 else {
      giverPanel=buildInstructorFeedbackResultsGroupBySecondaryParticipantPanel(teamMember,bundle.getFullNameFromRoster(teamMember) + ""String_Node_Str"" + bundle.getTeamNameFromRoster(teamMember)+ ""String_Node_Str"",new ArrayList<InstructorFeedbackResultsSecondaryParticipantPanelBody>(),null,false);
    }
    giverPanel.setHasResponses(false);
    addParticipantPanelToSectionPanel(sectionPanel,teamName,giverPanel);
  }
}","private void addMissingParticipantsForTeamToSectionPanelWithoutModerationButton(InstructorFeedbackResultsSectionPanel sectionPanel,String teamName,List<String> teamMembers){
  for (  String teamMember : teamMembers) {
    InstructorResultsParticipantPanel giverPanel;
    if (!viewType.isGroupedBySecondaryParticipant()) {
      giverPanel=InstructorFeedbackResultsGroupByQuestionPanel.buildInstructorFeedbackResultsGroupByQuestionPanelWithoutModerationButton(new ArrayList<InstructorResultsQuestionTable>(),getProfilePictureLink(teamMember),viewType.isFirstGroupedByGiver(),teamMember,bundle.getFullNameFromRoster(teamMember));
    }
 else {
      giverPanel=buildInstructorFeedbackResultsGroupBySecondaryParticipantPanel(teamMember,bundle.getFullNameFromRoster(teamMember) + ""String_Node_Str"" + bundle.getTeamNameFromRoster(teamMember)+ ""String_Node_Str"",new ArrayList<InstructorFeedbackResultsSecondaryParticipantPanelBody>(),null);
    }
    giverPanel.setHasResponses(false);
    addParticipantPanelToSectionPanel(sectionPanel,teamName,giverPanel);
  }
}",0.8870056497175142
62769,"private InstructorFeedbackResultsGroupByParticipantPanel buildInstructorFeedbackResultsGroupBySecondaryParticipantPanel(String participantIdentifier,String participantName,List<InstructorFeedbackResultsSecondaryParticipantPanelBody> secondaryParticipantPanels,InstructorResultsModerationButton moderationButton,boolean isModerationButtonDisplayed){
  boolean isEmailValid=validator.getInvalidityInfo(FieldValidator.FieldType.EMAIL,participantIdentifier).isEmpty();
  Url profilePictureLink=new Url(getProfilePictureLink(participantIdentifier));
  InstructorFeedbackResultsGroupByParticipantPanel bySecondaryParticipantPanel=new InstructorFeedbackResultsGroupByParticipantPanel(secondaryParticipantPanels);
  bySecondaryParticipantPanel.setParticipantIdentifier(participantIdentifier);
  bySecondaryParticipantPanel.setName(participantName);
  bySecondaryParticipantPanel.setGiver(viewType.isFirstGroupedByGiver());
  bySecondaryParticipantPanel.setEmailValid(isEmailValid);
  bySecondaryParticipantPanel.setProfilePictureLink(profilePictureLink.toString());
  bySecondaryParticipantPanel.setModerationButton(moderationButton);
  bySecondaryParticipantPanel.setModerationButtonDisplayed(isModerationButtonDisplayed);
  bySecondaryParticipantPanel.setHasResponses(true);
  return bySecondaryParticipantPanel;
}","private InstructorFeedbackResultsGroupByParticipantPanel buildInstructorFeedbackResultsGroupBySecondaryParticipantPanel(String participantIdentifier,String participantName,List<InstructorFeedbackResultsSecondaryParticipantPanelBody> secondaryParticipantPanels,InstructorResultsModerationButton moderationButton){
  boolean isEmailValid=validator.getInvalidityInfo(FieldValidator.FieldType.EMAIL,participantIdentifier).isEmpty();
  Url profilePictureLink=new Url(getProfilePictureLink(participantIdentifier));
  InstructorFeedbackResultsGroupByParticipantPanel bySecondaryParticipantPanel=new InstructorFeedbackResultsGroupByParticipantPanel(secondaryParticipantPanels);
  bySecondaryParticipantPanel.setParticipantIdentifier(participantIdentifier);
  bySecondaryParticipantPanel.setName(participantName);
  bySecondaryParticipantPanel.setGiver(viewType.isFirstGroupedByGiver());
  bySecondaryParticipantPanel.setEmailValid(isEmailValid);
  bySecondaryParticipantPanel.setProfilePictureLink(profilePictureLink.toString());
  bySecondaryParticipantPanel.setModerationButton(moderationButton);
  bySecondaryParticipantPanel.setHasResponses(true);
  return bySecondaryParticipantPanel;
}",0.9498193496587716
62770,"private void buildSectionPanelsForRecipientGiverQuestion(Map<String,Map<String,List<FeedbackResponseAttributes>>> sortedResponses){
  final String additionalInfoId=""String_Node_Str"";
  sectionPanels=new LinkedHashMap<String,InstructorFeedbackResultsSectionPanel>();
  InstructorFeedbackResultsSectionPanel sectionPanel=new InstructorFeedbackResultsSectionPanel();
  String prevSection=Const.DEFAULT_SECTION;
  String prevTeam=""String_Node_Str"";
  Set<String> sectionsWithResponses=new HashSet<String>();
  Set<String> teamsWithResponses=new HashSet<String>();
  Set<String> teamMembersWithResponses=new HashSet<String>();
  int recipientIndex=this.startIndex;
  for (  Map.Entry<String,Map<String,List<FeedbackResponseAttributes>>> recipientToGiverToResponsesMap : sortedResponses.entrySet()) {
    recipientIndex+=1;
    String recipientIdentifier=recipientToGiverToResponsesMap.getKey();
    String currentTeam=getCurrentTeam(bundle,recipientIdentifier);
    String currentSection=getCurrentSection(recipientToGiverToResponsesMap);
    boolean isChangeOfTeam=!prevTeam.equals(currentTeam);
    boolean isChangeOfSection=!prevSection.equals(currentSection);
    if (isChangeOfTeam) {
      boolean isFirstTeam=prevTeam.isEmpty();
      if (!isFirstTeam) {
        buildMissingParticipantPanelsWithoutModerationButtonForTeam(sectionPanel,prevTeam,teamMembersWithResponses);
        teamMembersWithResponses.clear();
      }
      teamsWithResponses.add(currentTeam);
      if (!isChangeOfSection) {
        sectionPanel.getIsTeamWithResponses().put(currentTeam,true);
      }
    }
    if (isChangeOfSection) {
      boolean isFirstSection=sectionPanel.getParticipantPanels().isEmpty();
      if (!isFirstSection) {
        finaliseBuildingSectionPanelWithoutStats(sectionPanel,prevSection);
        buildMissingTeamAndParticipantPanelsWithoutModerationButtonForSection(sectionPanel,prevSection,teamsWithResponses);
        sectionPanels.put(prevSection,sectionPanel);
        sectionsWithResponses.add(prevSection);
        teamsWithResponses.clear();
        teamsWithResponses.add(currentTeam);
        sectionPanel=new InstructorFeedbackResultsSectionPanel();
      }
      sectionPanel.getIsTeamWithResponses().put(currentTeam,true);
    }
    InstructorFeedbackResultsGroupByParticipantPanel recipientPanel=buildGroupByParticipantPanel(recipientIdentifier,currentTeam,additionalInfoId,recipientIndex,recipientToGiverToResponsesMap);
    addParticipantPanelToSectionPanel(sectionPanel,currentTeam,recipientPanel);
    teamMembersWithResponses.add(recipientIdentifier);
    prevTeam=currentTeam;
    prevSection=currentSection;
  }
  buildMissingParticipantPanelsForTeam(sectionPanel,prevTeam,teamMembersWithResponses,viewType.isFirstGroupedByGiver());
  teamsWithResponses.add(prevTeam);
  buildMissingTeamAndParticipantPanelsForSection(sectionPanel,prevSection,teamsWithResponses,viewType.isFirstGroupedByGiver());
  finaliseBuildingSectionPanelWithoutStats(sectionPanel,prevSection);
  sectionPanels.put(prevSection,sectionPanel);
  if (selectedSection.equals(""String_Node_Str"")) {
    sectionsWithResponses.add(prevSection);
    buildSectionPanelsForMissingSections(sectionsWithResponses);
  }
}","private void buildSectionPanelsForRecipientGiverQuestion(Map<String,Map<String,List<FeedbackResponseAttributes>>> sortedResponses){
  final String additionalInfoId=""String_Node_Str"";
  sectionPanels=new LinkedHashMap<String,InstructorFeedbackResultsSectionPanel>();
  InstructorFeedbackResultsSectionPanel sectionPanel=new InstructorFeedbackResultsSectionPanel();
  String prevSection=Const.DEFAULT_SECTION;
  String prevTeam=""String_Node_Str"";
  Set<String> sectionsWithResponses=new HashSet<String>();
  Set<String> teamsWithResponses=new HashSet<String>();
  Set<String> teamMembersWithResponses=new HashSet<String>();
  int recipientIndex=this.startIndex;
  for (  Map.Entry<String,Map<String,List<FeedbackResponseAttributes>>> recipientToGiverToResponsesMap : sortedResponses.entrySet()) {
    recipientIndex+=1;
    String recipientIdentifier=recipientToGiverToResponsesMap.getKey();
    String currentTeam=getCurrentTeam(bundle,recipientIdentifier);
    String currentSection=getCurrentSection(recipientToGiverToResponsesMap);
    boolean isChangeOfTeam=!prevTeam.equals(currentTeam);
    boolean isChangeOfSection=!prevSection.equals(currentSection);
    if (isChangeOfTeam) {
      boolean isFirstTeam=prevTeam.isEmpty();
      if (!isFirstTeam) {
        buildMissingParticipantPanelsForTeam(sectionPanel,prevTeam,teamMembersWithResponses);
        teamMembersWithResponses.clear();
      }
      teamsWithResponses.add(currentTeam);
      if (!isChangeOfSection) {
        sectionPanel.getIsTeamWithResponses().put(currentTeam,true);
      }
    }
    if (isChangeOfSection) {
      boolean isFirstSection=sectionPanel.getParticipantPanels().isEmpty();
      if (!isFirstSection) {
        finaliseBuildingSectionPanelWithoutStats(sectionPanel,prevSection);
        buildMissingTeamAndParticipantPanelsForSection(sectionPanel,prevSection,teamsWithResponses);
        sectionPanels.put(prevSection,sectionPanel);
        sectionsWithResponses.add(prevSection);
        teamsWithResponses.clear();
        teamsWithResponses.add(currentTeam);
        sectionPanel=new InstructorFeedbackResultsSectionPanel();
      }
      sectionPanel.getIsTeamWithResponses().put(currentTeam,true);
    }
    InstructorFeedbackResultsGroupByParticipantPanel recipientPanel=buildGroupByParticipantPanel(recipientIdentifier,currentTeam,additionalInfoId,recipientIndex,recipientToGiverToResponsesMap);
    addParticipantPanelToSectionPanel(sectionPanel,currentTeam,recipientPanel);
    teamMembersWithResponses.add(recipientIdentifier);
    prevTeam=currentTeam;
    prevSection=currentSection;
  }
  buildMissingParticipantPanelsForTeam(sectionPanel,prevTeam,teamMembersWithResponses);
  teamsWithResponses.add(prevTeam);
  buildMissingTeamAndParticipantPanelsForSection(sectionPanel,prevSection,teamsWithResponses);
  finaliseBuildingSectionPanelWithoutStats(sectionPanel,prevSection);
  sectionPanels.put(prevSection,sectionPanel);
  if (isAllSectionsSelected()) {
    sectionsWithResponses.add(prevSection);
    buildSectionPanelsForMissingSections(sectionsWithResponses);
  }
}",0.8610579987253028
62771,"private List<AdminAccountDetailsStudentCourseListTableRow> createStudentCourseListTable(List<CourseAttributes> studentCourseList){
  List<AdminAccountDetailsStudentCourseListTableRow> courseListTable=new ArrayList<AdminAccountDetailsStudentCourseListTableRow>();
  for (  CourseAttributes courseDetails : studentCourseList) {
    AdminAccountDetailsStudentCourseListTableRow row=new AdminAccountDetailsStudentCourseListTableRow(accountInformation.googleId,courseDetails);
    courseListTable.add(row);
  }
  return courseListTable;
}","private List<AdminAccountDetailsStudentCourseListTableRow> createStudentCourseListTable(List<CourseAttributes> studentCourseList){
  List<AdminAccountDetailsStudentCourseListTableRow> courseListTable=new ArrayList<AdminAccountDetailsStudentCourseListTableRow>();
  if (studentCourseList != null) {
    for (    CourseAttributes courseDetails : studentCourseList) {
      AdminAccountDetailsStudentCourseListTableRow row=new AdminAccountDetailsStudentCourseListTableRow(accountInformation.googleId,courseDetails);
      courseListTable.add(row);
    }
  }
  return courseListTable;
}",0.9524663677130044
62772,"private List<AdminAccountDetailsInstructorCourseListTableRow> createInstructorCourseListTable(List<CourseDetailsBundle> instructorCourseList){
  List<AdminAccountDetailsInstructorCourseListTableRow> courseListTable=new ArrayList<AdminAccountDetailsInstructorCourseListTableRow>();
  for (  CourseDetailsBundle courseDetails : instructorCourseList) {
    AdminAccountDetailsInstructorCourseListTableRow row=new AdminAccountDetailsInstructorCourseListTableRow(accountInformation.googleId,courseDetails);
    courseListTable.add(row);
  }
  return courseListTable;
}","private List<AdminAccountDetailsInstructorCourseListTableRow> createInstructorCourseListTable(List<CourseDetailsBundle> instructorCourseList){
  List<AdminAccountDetailsInstructorCourseListTableRow> courseListTable=new ArrayList<AdminAccountDetailsInstructorCourseListTableRow>();
  if (instructorCourseList != null) {
    for (    CourseDetailsBundle courseDetails : instructorCourseList) {
      AdminAccountDetailsInstructorCourseListTableRow row=new AdminAccountDetailsInstructorCourseListTableRow(accountInformation.googleId,courseDetails);
      courseListTable.add(row);
    }
  }
  return courseListTable;
}",0.9524617996604414
62773,"public boolean isShowGiverNameToResponseGiver(){
  return showGiverNameTo.contains(FeedbackParticipantType.GIVER);
}","public boolean isShowGiverNameToResponseGiver(){
  if (showGiverNameTo == null) {
    showGiverNameTo=new ArrayList<FeedbackParticipantType>();
  }
  return showGiverNameTo.contains(FeedbackParticipantType.GIVER);
}",0.7009063444108762
62774,"public boolean isShowCommentToResponseGiver(){
  return showCommentTo.contains(FeedbackParticipantType.GIVER);
}","public boolean isShowCommentToResponseGiver(){
  if (showCommentTo == null) {
    showCommentTo=new ArrayList<FeedbackParticipantType>();
  }
  return showCommentTo.contains(FeedbackParticipantType.GIVER);
}",0.7021943573667712
62775,"private void initializeValues(){
  for (  String bundleKey : feedbackResultBundles.keySet()) {
    FeedbackSessionResultsBundle bundle=feedbackResultBundles.get(bundleKey);
    Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>> responseEntriesMap=bundle.getQuestionResponseMap();
    for (    FeedbackQuestionAttributes attributeKey : responseEntriesMap.keySet()) {
      List<FeedbackResponseAttributes> responseEntries=responseEntriesMap.get(attributeKey);
      FeedbackQuestionAttributes question=bundle.questions.get(attributeKey.getId());
      FeedbackQuestionDetails questionDetails=question.getQuestionDetails();
      for (      FeedbackResponseAttributes responseEntry : responseEntries) {
        String giverEmail=responseEntry.giverEmail;
        String giverName=bundle.emailNameTable.get(giverEmail);
        String giverTeamName=bundle.emailTeamNameTable.get(giverEmail);
        String recipientEmail=responseEntry.recipientEmail;
        String recipientName=bundle.emailNameTable.get(recipientEmail);
        String recipientTeamName=bundle.emailTeamNameTable.get(recipientEmail);
        String appendedGiverName=bundle.appendTeamNameToName(giverName,giverTeamName);
        String appendedRecipientName=bundle.appendTeamNameToName(recipientName,recipientTeamName);
        giverNames.put(giverEmail,appendedGiverName);
        recipientNames.put(recipientEmail,appendedRecipientName);
        String responseEntryAnswerHtml=responseEntry.getResponseDetails().getAnswerHtml(questionDetails);
        responseEntryAnswerHtmls.put(questionDetails,responseEntryAnswerHtml);
        if (currentInstructor == null || !currentInstructor.isAllowedForPrivilege(responseEntry.giverSection,responseEntry.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_SUBMIT_SESSION_IN_SECTIONS) || !currentInstructor.isAllowedForPrivilege(responseEntry.recipientSection,responseEntry.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_SUBMIT_SESSION_IN_SECTIONS)) {
          instructorAllowedToSubmit=false;
        }
 else {
          instructorAllowedToSubmit=true;
        }
        Map<String,List<FeedbackResponseCommentAttributes>> responseComments=bundle.getResponseComments();
        List<FeedbackResponseCommentAttributes> feedbackResponseCommentsList=responseComments.get(responseEntry.getId());
        List<FeedbackResponseComment> frcList=new ArrayList<FeedbackResponseComment>();
        for (        FeedbackResponseCommentAttributes frca : feedbackResponseCommentsList) {
          String whoCanSeeComment=ifrclpd.getTypeOfPeopleCanViewComment(frca,question);
          boolean allowedToEditAndDeleteComment=frca.giverEmail.equals(instructorEmail) || (currentInstructor != null && currentInstructor.isAllowedForPrivilege(responseEntry.giverSection,responseEntry.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION_COMMENT_IN_SECTIONS) && currentInstructor.isAllowedForPrivilege(responseEntry.recipientSection,responseEntry.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION_COMMENT_IN_SECTIONS));
          showCommentTo=frca.showCommentTo;
          showGiverNameTo=frca.showGiverNameTo;
          showCommentToString=joinParticipantTypes(showCommentTo,""String_Node_Str"");
          showGiverNameToString=joinParticipantTypes(showGiverNameTo,""String_Node_Str"");
          responseVisibleToRecipient=question.recipientType != FeedbackParticipantType.SELF && question.recipientType != FeedbackParticipantType.NONE && question.isResponseVisibleTo(FeedbackParticipantType.RECEIVER);
          responseVisibleToGiverTeam=question.giverType != FeedbackParticipantType.INSTRUCTORS && question.giverType != FeedbackParticipantType.SELF && question.isResponseVisibleTo(FeedbackParticipantType.OWN_TEAM_MEMBERS);
          responseVisibleToRecipientTeam=question.recipientType != FeedbackParticipantType.INSTRUCTORS && question.recipientType != FeedbackParticipantType.SELF && question.recipientType != FeedbackParticipantType.NONE && question.isResponseVisibleTo(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS);
          responseVisibleToStudents=question.isResponseVisibleTo(FeedbackParticipantType.STUDENTS);
          responseVisibleToInstructors=question.isResponseVisibleTo(FeedbackParticipantType.INSTRUCTORS);
          FeedbackResponseComment frc=new FeedbackResponseComment(frca,frca.giverEmail,instructorEmail,bundle.feedbackSession,question,whoCanSeeComment,showCommentToString,showGiverNameToString,allowedToEditAndDeleteComment,responseVisibleToRecipient,responseVisibleToGiverTeam,responseVisibleToRecipientTeam,responseVisibleToStudents,responseVisibleToInstructors);
          frcList.add(frc);
        }
        feedbackResponseCommentsLists.put(responseEntry.getId(),frcList);
      }
    }
  }
}","private void initializeValues(){
  for (  String bundleKey : feedbackResultBundles.keySet()) {
    FeedbackSessionResultsBundle bundle=feedbackResultBundles.get(bundleKey);
    Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>> responseEntriesMap=bundle.getQuestionResponseMap();
    for (    FeedbackQuestionAttributes attributeKey : responseEntriesMap.keySet()) {
      List<FeedbackResponseAttributes> responseEntries=responseEntriesMap.get(attributeKey);
      FeedbackQuestionAttributes question=bundle.questions.get(attributeKey.getId());
      FeedbackQuestionDetails questionDetails=question.getQuestionDetails();
      for (      FeedbackResponseAttributes responseEntry : responseEntries) {
        String giverEmail=responseEntry.giverEmail;
        String giverName=bundle.emailNameTable.get(giverEmail);
        String giverTeamName=bundle.emailTeamNameTable.get(giverEmail);
        String recipientEmail=responseEntry.recipientEmail;
        String recipientName=bundle.emailNameTable.get(recipientEmail);
        String recipientTeamName=bundle.emailTeamNameTable.get(recipientEmail);
        String appendedGiverName=bundle.appendTeamNameToName(giverName,giverTeamName);
        String appendedRecipientName=bundle.appendTeamNameToName(recipientName,recipientTeamName);
        giverNames.put(giverEmail,appendedGiverName);
        recipientNames.put(recipientEmail,appendedRecipientName);
        String responseEntryAnswerHtml=responseEntry.getResponseDetails().getAnswerHtml(questionDetails);
        responseEntryAnswerHtmls.put(questionDetails,responseEntryAnswerHtml);
        if (currentInstructor == null || !currentInstructor.isAllowedForPrivilege(responseEntry.giverSection,responseEntry.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_SUBMIT_SESSION_IN_SECTIONS) || !currentInstructor.isAllowedForPrivilege(responseEntry.recipientSection,responseEntry.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_SUBMIT_SESSION_IN_SECTIONS)) {
          instructorAllowedToSubmit=false;
        }
 else {
          instructorAllowedToSubmit=true;
        }
        Map<String,List<FeedbackResponseCommentAttributes>> responseComments=bundle.getResponseComments();
        List<FeedbackResponseCommentAttributes> feedbackResponseCommentsList=responseComments.get(responseEntry.getId());
        List<FeedbackResponseComment> frcList=new ArrayList<FeedbackResponseComment>();
        for (        FeedbackResponseCommentAttributes frca : feedbackResponseCommentsList) {
          String whoCanSeeComment=ifrclpd.getTypeOfPeopleCanViewComment(frca,question);
          boolean allowedToEditAndDeleteComment=frca.giverEmail.equals(instructorEmail) || (currentInstructor != null && currentInstructor.isAllowedForPrivilege(responseEntry.giverSection,responseEntry.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION_COMMENT_IN_SECTIONS) && currentInstructor.isAllowedForPrivilege(responseEntry.recipientSection,responseEntry.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION_COMMENT_IN_SECTIONS));
          showCommentTo=frca.showCommentTo;
          if (showCommentTo == null) {
            showCommentTo=new ArrayList<FeedbackParticipantType>();
          }
          showGiverNameTo=frca.showGiverNameTo;
          if (showGiverNameTo == null) {
            showGiverNameTo=new ArrayList<FeedbackParticipantType>();
          }
          showCommentToString=joinParticipantTypes(showCommentTo,""String_Node_Str"");
          showGiverNameToString=joinParticipantTypes(showGiverNameTo,""String_Node_Str"");
          responseVisibleToRecipient=question.recipientType != FeedbackParticipantType.SELF && question.recipientType != FeedbackParticipantType.NONE && question.isResponseVisibleTo(FeedbackParticipantType.RECEIVER);
          responseVisibleToGiverTeam=question.giverType != FeedbackParticipantType.INSTRUCTORS && question.giverType != FeedbackParticipantType.SELF && question.isResponseVisibleTo(FeedbackParticipantType.OWN_TEAM_MEMBERS);
          responseVisibleToRecipientTeam=question.recipientType != FeedbackParticipantType.INSTRUCTORS && question.recipientType != FeedbackParticipantType.SELF && question.recipientType != FeedbackParticipantType.NONE && question.isResponseVisibleTo(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS);
          responseVisibleToStudents=question.isResponseVisibleTo(FeedbackParticipantType.STUDENTS);
          responseVisibleToInstructors=question.isResponseVisibleTo(FeedbackParticipantType.INSTRUCTORS);
          FeedbackResponseComment frc=new FeedbackResponseComment(frca,frca.giverEmail,instructorEmail,bundle.feedbackSession,question,whoCanSeeComment,showCommentToString,showGiverNameToString,allowedToEditAndDeleteComment,responseVisibleToRecipient,responseVisibleToGiverTeam,responseVisibleToRecipientTeam,responseVisibleToStudents,responseVisibleToInstructors);
          frcList.add(frc);
        }
        feedbackResponseCommentsLists.put(responseEntry.getId(),frcList);
      }
    }
  }
}",0.9754214909607962
62776,"public Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>> getResponseComments(){
  return getQuestionResponseMap();
}","public Map<String,List<FeedbackResponseCommentAttributes>> getResponseComments(){
  return responseComments;
}",0.7551867219917012
62777,"private void initializeValues(){
  for (  String bundleKey : feedbackResultBundles.keySet()) {
    FeedbackSessionResultsBundle bundle=feedbackResultBundles.get(bundleKey);
    Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>> responseComments=bundle.getResponseComments();
    for (    FeedbackQuestionAttributes attributeKey : responseComments.keySet()) {
      List<FeedbackResponseAttributes> responseEntries=responseComments.get(attributeKey);
      FeedbackQuestionAttributes question=bundle.questions.get(attributeKey.getId());
      FeedbackQuestionDetails questionDetails=question.getQuestionDetails();
      for (      FeedbackResponseAttributes responseEntry : responseEntries) {
        String giverEmail=responseEntry.giverEmail;
        String giverName=bundle.emailNameTable.get(giverEmail);
        String giverTeamName=bundle.emailTeamNameTable.get(giverEmail);
        String recipientEmail=responseEntry.recipientEmail;
        String recipientName=bundle.emailNameTable.get(recipientEmail);
        String recipientTeamName=bundle.emailTeamNameTable.get(recipientEmail);
        String appendedGiverName=bundle.appendTeamNameToName(giverName,giverTeamName);
        String appendedRecipientName=bundle.appendTeamNameToName(recipientName,recipientTeamName);
        giverNames.put(giverEmail,appendedGiverName);
        recipientNames.put(recipientEmail,appendedRecipientName);
        String responseEntryAnswerHtml=responseEntry.getResponseDetails().getAnswerHtml(questionDetails);
        responseEntryAnswerHtmls.put(questionDetails,responseEntryAnswerHtml);
        if (currentInstructor == null || !currentInstructor.isAllowedForPrivilege(responseEntry.giverSection,responseEntry.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_SUBMIT_SESSION_IN_SECTIONS) || !currentInstructor.isAllowedForPrivilege(responseEntry.recipientSection,responseEntry.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_SUBMIT_SESSION_IN_SECTIONS)) {
          instructorAllowedToSubmit=false;
        }
 else {
          instructorAllowedToSubmit=true;
        }
      }
    }
  }
}","private void initializeValues(){
  for (  String bundleKey : feedbackResultBundles.keySet()) {
    FeedbackSessionResultsBundle bundle=feedbackResultBundles.get(bundleKey);
    Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>> responseEntriesMap=bundle.getQuestionResponseMap();
    for (    FeedbackQuestionAttributes attributeKey : responseEntriesMap.keySet()) {
      List<FeedbackResponseAttributes> responseEntries=responseEntriesMap.get(attributeKey);
      FeedbackQuestionAttributes question=bundle.questions.get(attributeKey.getId());
      FeedbackQuestionDetails questionDetails=question.getQuestionDetails();
      for (      FeedbackResponseAttributes responseEntry : responseEntries) {
        String giverEmail=responseEntry.giverEmail;
        String giverName=bundle.emailNameTable.get(giverEmail);
        String giverTeamName=bundle.emailTeamNameTable.get(giverEmail);
        String recipientEmail=responseEntry.recipientEmail;
        String recipientName=bundle.emailNameTable.get(recipientEmail);
        String recipientTeamName=bundle.emailTeamNameTable.get(recipientEmail);
        String appendedGiverName=bundle.appendTeamNameToName(giverName,giverTeamName);
        String appendedRecipientName=bundle.appendTeamNameToName(recipientName,recipientTeamName);
        giverNames.put(giverEmail,appendedGiverName);
        recipientNames.put(recipientEmail,appendedRecipientName);
        String responseEntryAnswerHtml=responseEntry.getResponseDetails().getAnswerHtml(questionDetails);
        responseEntryAnswerHtmls.put(questionDetails,responseEntryAnswerHtml);
        if (currentInstructor == null || !currentInstructor.isAllowedForPrivilege(responseEntry.giverSection,responseEntry.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_SUBMIT_SESSION_IN_SECTIONS) || !currentInstructor.isAllowedForPrivilege(responseEntry.recipientSection,responseEntry.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_SUBMIT_SESSION_IN_SECTIONS)) {
          instructorAllowedToSubmit=false;
        }
 else {
          instructorAllowedToSubmit=true;
        }
        Map<String,List<FeedbackResponseCommentAttributes>> responseComments=bundle.getResponseComments();
        List<FeedbackResponseCommentAttributes> feedbackResponseCommentsList=responseComments.get(responseEntry.getId());
        List<FeedbackResponseComment> frcList=new ArrayList<FeedbackResponseComment>();
        for (        FeedbackResponseCommentAttributes frca : feedbackResponseCommentsList) {
          FeedbackResponseComment frc=new FeedbackResponseComment(frca,frca.giverEmail);
          frcList.add(frc);
        }
        feedbackResponseCommentsLists.put(responseEntry.getId(),frcList);
      }
    }
  }
}",0.8590824933141329
62778,"public InstructorFeedbackResponseComment(Map<String,FeedbackSessionResultsBundle> feedbackResultBundles,InstructorAttributes currentInstructor){
  this.feedbackResultBundles=feedbackResultBundles;
  this.currentInstructor=currentInstructor;
  initializeValues();
}","public InstructorFeedbackResponseComment(Map<String,FeedbackSessionResultsBundle> feedbackResultBundles,InstructorAttributes currentInstructor){
  this.feedbackResultBundles=feedbackResultBundles;
  this.currentInstructor=currentInstructor;
  this.giverNames=new HashMap<String,String>();
  this.recipientNames=new HashMap<String,String>();
  this.feedbackResponseCommentsLists=new HashMap<String,List<FeedbackResponseComment>>();
  this.responseEntryAnswerHtmls=new HashMap<FeedbackQuestionDetails,String>();
  initializeValues();
}",0.6223337515683814
62779,"private List<CommentRow> createCommentRows(String courseId,String giverEmail,String giverName,Map<String,List<Boolean>> commentModifyPermissions,CourseRoster roster,Map<String,List<CommentAttributes>> comments,InstructorCommentsPageData data){
  List<CommentRow> rows=new ArrayList<CommentRow>();
  List<CommentAttributes> commentsForGiver=comments.get(giverEmail);
  for (int i=0; i < commentsForGiver.size(); i++) {
    String recipientDetails=getRecipientNames(data,courseId,commentsForGiver.get(i).recipients,roster);
    String creationTime=Const.SystemParams.COMMENTS_SIMPLE_DATE_FORMATTER.format(commentsForGiver.get(i).createdAt);
    Boolean isInstructorAllowedToModifyCommentInSection=commentModifyPermissions.get(giverEmail).get(i);
    String typeOfPeopleCanViewComment=data.getTypeOfPeopleCanViewComment(commentsForGiver.get(i));
    String editedAt=commentsForGiver.get(i).getEditedAtText(giverName.equals(""String_Node_Str""));
    String showCommentsTo=data.getShowCommentsToForComment(commentsForGiver.get(i));
    String showGiverNameTo=data.getShowGiverNameToForComment(commentsForGiver.get(i));
    String showRecipientNameTo=data.getShowRecipientNameToForComment(commentsForGiver.get(i));
    VisibilityCheckboxes visibilityCheckboxes=new VisibilityCheckboxes(commentsForGiver.get(i));
    rows.add(new InstructorCommentsCommentRow(giverEmail,commentsForGiver.get(i),recipientDetails,creationTime,isInstructorAllowedToModifyCommentInSection,typeOfPeopleCanViewComment,editedAt,visibilityCheckboxes,showCommentsTo,showGiverNameTo,showRecipientNameTo));
  }
  return rows;
}","private List<Comment> createCommentRows(String giverEmail,String giverName,Map<String,List<CommentAttributes>> comments,InstructorCommentsPageData data,Map<String,List<Boolean>> commentModifyPermissions,CourseRoster roster){
  List<Comment> rows=new ArrayList<Comment>();
  List<CommentAttributes> commentsForGiver=comments.get(giverEmail);
  for (int i=0; i < commentsForGiver.size(); i++) {
    CommentAttributes comment=commentsForGiver.get(i);
    String recipientDetails=getRecipientNames(data,comment.courseId,comment.recipients,roster);
    Boolean isInstructorAllowedToModifyCommentInSection=commentModifyPermissions.get(giverEmail).get(i);
    String typeOfPeopleCanViewComment=data.getTypeOfPeopleCanViewComment(comment);
    Comment commentDiv=new Comment(comment,giverName,recipientDetails);
    String extraClass;
    if (comment.showCommentTo.isEmpty()) {
      extraClass=""String_Node_Str"";
    }
 else {
      extraClass=""String_Node_Str"";
    }
    commentDiv.withExtraClass(extraClass);
    commentDiv.setVisibilityIcon(typeOfPeopleCanViewComment);
    commentDiv.setNotificationIcon(comment.isPendingNotification());
    if (isInstructorAllowedToModifyCommentInSection) {
      commentDiv.setEditDeleteEnabled(true);
      commentDiv.setFromCommentsPage();
      commentDiv.setPlaceholderNumComments();
    }
    rows.add(commentDiv);
  }
  return rows;
}",0.3237774030354131
62780,"private boolean isCommentsForStudentsTablesEqual(InstructorCommentsForStudentsTable expected,InstructorCommentsForStudentsTable actual){
  boolean result=expected.getGiverEmail().equals(actual.getGiverEmail());
  result=result && expected.getGiverName().equals(actual.getGiverName());
  List<CommentRow> expectedCommentRows=expected.getRows();
  List<CommentRow> actualCommentRows=actual.getRows();
  result=result && expectedCommentRows.size() == actualCommentRows.size();
  for (int i=0; i < expectedCommentRows.size() && result; i++) {
    InstructorCommentsCommentRow expectedInstructorCommentsCommentRow=(InstructorCommentsCommentRow)expectedCommentRows.get(i);
    InstructorCommentsCommentRow actualInstructorCommentsCommentRow=(InstructorCommentsCommentRow)actualCommentRows.get(i);
    result=result && isCommentRowsEqual(expectedInstructorCommentsCommentRow,actualInstructorCommentsCommentRow);
  }
  return result;
}","private boolean isCommentsForStudentsTablesEqual(CommentsForStudentsTable expected,CommentsForStudentsTable actual){
  boolean result=expected.getGiverDetails().equals(actual.getGiverDetails());
  result=result && expected.getExtraClass().equals(actual.getExtraClass());
  List<Comment> expectedCommentRows=expected.getRows();
  List<Comment> actualCommentRows=actual.getRows();
  result=result && (expectedCommentRows.size() == actualCommentRows.size());
  for (int i=0; i < expectedCommentRows.size() && result; i++) {
    Comment expectedInstructorCommentsCommentRow=(Comment)expectedCommentRows.get(i);
    Comment actualInstructorCommentsCommentRow=(Comment)actualCommentRows.get(i);
  }
  return result;
}",0.7191697191697192
62781,"private boolean isCommentRowsEqual(InstructorCommentsCommentRow expected,InstructorCommentsCommentRow actual){
  boolean result=expected.isInstructorAllowedToModifyCommentInSection() == actual.isInstructorAllowedToModifyCommentInSection();
  result=result && expected.getTypeOfPeopleCanViewComment().equals(actual.getTypeOfPeopleCanViewComment());
  result=result && expected.getEditedAt().equals(actual.getEditedAt());
  result=result && isVisibilityCheckboxesEqual(expected.getVisibilityCheckboxes(),actual.getVisibilityCheckboxes());
  result=result && expected.getShowCommentsTo().equals(actual.getShowCommentsTo());
  result=result && expected.getShowGiverNameTo().equals(actual.getShowGiverNameTo());
  result=result && expected.getShowRecipientNameTo().equals(actual.getShowRecipientNameTo());
  return result;
}","private boolean isCommentRowsEqual(Comment expected,Comment actual){
  return true;
}",0.1836283185840708
62782,"private List<InstructorCommentsForStudentsTable> getCommentsForStudentsTables(String courseId,Map<String,List<Boolean>> commentModifyPermissions,CourseRoster roster,Map<String,List<CommentAttributes>> comments,InstructorCommentsPageData data){
  Map<String,String> giverEmailToGiverNameMap=getGiverEmailToGiverNameMap(comments,roster);
  List<InstructorCommentsForStudentsTable> commentsForStudentsTables=new ArrayList<InstructorCommentsForStudentsTable>();
  for (  String giverEmail : comments.keySet()) {
    String giverName=giverEmailToGiverNameMap.get(giverEmail);
    commentsForStudentsTables.add(new InstructorCommentsForStudentsTable(giverEmail,giverName,createCommentRows(courseId,giverEmail,giverName,commentModifyPermissions,roster,comments,data)));
  }
  return commentsForStudentsTables;
}","private List<CommentsForStudentsTable> getCommentsForStudentsTables(Map<String,List<CommentAttributes>> comments,CourseRoster roster,InstructorCommentsPageData data,Map<String,List<Boolean>> commentModifyPermissions){
  Map<String,String> giverEmailToGiverNameMap=getGiverEmailToGiverNameMap(comments,roster);
  List<CommentsForStudentsTable> commentsForStudentsTables=new ArrayList<CommentsForStudentsTable>();
  for (  String giverEmail : comments.keySet()) {
    String giverName=giverEmailToGiverNameMap.get(giverEmail);
    CommentsForStudentsTable table=new CommentsForStudentsTable(giverName,createCommentRows(giverEmail,giverName,comments,data,commentModifyPermissions,roster));
    String extraClass;
    if (giverEmail.equals(COMMENT_GIVER_NAME_THAT_COMES_FIRST)) {
      extraClass=""String_Node_Str"";
    }
 else {
      extraClass=""String_Node_Str"";
    }
    table.withExtraClass(extraClass);
    commentsForStudentsTables.add(table);
  }
  return commentsForStudentsTables;
}",0.6257668711656442
62783,"private void setInstructorComments(String giverEmail,String currentInstructorEmail,String courseId,Map<String,List<CommentAttributes>> comments,Map<String,List<Boolean>> commentModifyPermissions){
  List<CommentAttributes> commentsForGiverList;
  List<Boolean> canModifyCommentList=new ArrayList<Boolean>();
  commentsForGiverList=getCommentsForGiverInCourse(giverEmail,courseId);
  for (int i=0; i < commentsForGiverList.size(); i++) {
    canModifyCommentList.add(true);
  }
  String key=giverEmail;
  if (giverEmail.equals(currentInstructorEmail)) {
    key=InstructorCommentsPageData.COMMENT_GIVER_NAME_THAT_COMES_FIRST;
  }
  commentModifyPermissions.put(key,canModifyCommentList);
  comments.put(key,commentsForGiverList);
}","private void setInstructorComments(String giverEmail,String currentInstructorEmail,String courseId,Map<String,List<CommentAttributes>> comments,Map<String,List<Boolean>> commentModifyPermissions){
  List<CommentAttributes> commentsForGiverList;
  List<Boolean> canModifyCommentList=new ArrayList<Boolean>();
  commentsForGiverList=getCommentsForGiverInCourse(giverEmail,courseId);
  for (int i=0; i < commentsForGiverList.size(); i++) {
    canModifyCommentList.add(true);
  }
  String key=giverEmail;
  if (giverEmail.equals(currentInstructorEmail)) {
    key=COMMENT_GIVER_NAME_THAT_COMES_FIRST;
  }
  commentModifyPermissions.put(key,canModifyCommentList);
  comments.put(key,commentsForGiverList);
}",0.98115840893231
62784,"@Test public void testAll(){
  ______TS(""String_Node_Str"");
  AccountAttributes account=dataBundle.accounts.get(""String_Node_Str"");
  InstructorCommentsPageData data=new InstructorCommentsPageData(account);
  boolean isViewingDraft=false;
  boolean isDisplayArchive=false;
  String courseId=course1.id;
  String courseName=course1.name;
  List<String> coursePaginationList=Arrays.asList(course1.id,course2.id);
  Map<String,List<CommentAttributes>> comments=new TreeMap<String,List<CommentAttributes>>();
  Map<String,List<Boolean>> commentModifyPermissions=new TreeMap<String,List<Boolean>>();
  CourseRoster roster=new CourseRoster(getStudentsInCourse(courseId),getInstructorsInCourse(courseId));
  List<FeedbackSessionAttributes> feedbackSessions=getFeedbackSessionsForCourse(courseId);
  int numberOfPendingComments=0;
  String giverEmail=instructor1.email;
  setInstructorComments(giverEmail,instructor1.email,courseId,comments,commentModifyPermissions);
  giverEmail=instructor2.email;
  setInstructorComments(giverEmail,instructor1.email,courseId,comments,commentModifyPermissions);
  data.init(isViewingDraft,isDisplayArchive,courseId,courseName,coursePaginationList,comments,commentModifyPermissions,roster,feedbackSessions,numberOfPendingComments);
  assertFalse(data.isDisplayArchive());
  assertFalse(data.isViewingDraft());
  assertEquals(courseId,data.getCourseId());
  assertEquals(courseName,data.getCourseName());
  assertTrue(coursePaginationList.equals(data.getCoursePaginationList()));
  Map<String,List<CommentAttributes>> actualComments=data.getComments();
  Map<String,List<CommentAttributes>> expectedComments=comments;
  List<String> actualGivers=new ArrayList<String>();
  actualGivers.addAll(actualComments.keySet());
  List<String> expectedGivers=new ArrayList<String>();
  expectedGivers.addAll(expectedComments.keySet());
  assertTrue(TestHelper.isSameContentIgnoreOrder(expectedGivers,actualGivers));
  for (  String email : expectedGivers) {
    assertEquals(expectedComments.get(email),actualComments.get(email));
  }
  assertEquals(feedbackSessions,data.getFeedbackSessions());
  String expectedNextPageLink=data.getInstructorCommentsLink() + ""String_Node_Str"" + course2.id;
  String expectedPreviousPageLink=""String_Node_Str"";
  assertEquals(expectedNextPageLink,data.getNextPageLink());
  assertEquals(expectedPreviousPageLink,data.getPreviousPageLink());
  assertEquals(numberOfPendingComments,data.getNumberOfPendingComments());
  List<InstructorCommentsForStudentsTable> expectedCommentsForStudentsTables=getCommentsForStudentsTables(courseId,commentModifyPermissions,roster,comments,data);
  List<InstructorCommentsForStudentsTable> actualCommentsForStudentsTables=data.getCommentsForStudentsTables();
  assertEquals(expectedCommentsForStudentsTables.size(),actualCommentsForStudentsTables.size());
  for (int i=0; i < expectedCommentsForStudentsTables.size(); i++) {
    assertTrue(isCommentsForStudentsTablesEqual(expectedCommentsForStudentsTables.get(i),actualCommentsForStudentsTables.get(i)));
  }
  ______TS(""String_Node_Str"");
  courseId=course2.id;
  courseName=course2.name;
  comments=new TreeMap<String,List<CommentAttributes>>();
  commentModifyPermissions=new TreeMap<String,List<Boolean>>();
  roster=new CourseRoster(getStudentsInCourse(courseId),getInstructorsInCourse(courseId));
  feedbackSessions=getFeedbackSessionsForCourse(courseId);
  giverEmail=instructor1.email;
  setInstructorComments(giverEmail,instructor1.email,courseId,comments,commentModifyPermissions);
  data.init(isViewingDraft,isDisplayArchive,courseId,courseName,coursePaginationList,comments,commentModifyPermissions,roster,feedbackSessions,numberOfPendingComments);
  assertFalse(data.isDisplayArchive());
  assertFalse(data.isViewingDraft());
  assertEquals(courseId,data.getCourseId());
  assertEquals(courseName,data.getCourseName());
  assertEquals(coursePaginationList,data.getCoursePaginationList());
  actualComments=data.getComments();
  expectedComments=comments;
  actualGivers=new ArrayList<String>();
  actualGivers.addAll(actualComments.keySet());
  expectedGivers=new ArrayList<String>();
  expectedGivers.addAll(expectedComments.keySet());
  assertTrue(TestHelper.isSameContentIgnoreOrder(expectedGivers,actualGivers));
  for (  String email : expectedGivers) {
    assertEquals(expectedComments.get(email),actualComments.get(email));
  }
  assertEquals(feedbackSessions,data.getFeedbackSessions());
  expectedNextPageLink=""String_Node_Str"";
  expectedPreviousPageLink=data.getInstructorCommentsLink() + ""String_Node_Str"" + course1.id;
  assertEquals(data.getNextPageLink(),expectedNextPageLink);
  assertEquals(data.getPreviousPageLink(),expectedPreviousPageLink);
  assertEquals(numberOfPendingComments,data.getNumberOfPendingComments());
  expectedCommentsForStudentsTables=getCommentsForStudentsTables(courseId,commentModifyPermissions,roster,comments,data);
  actualCommentsForStudentsTables=data.getCommentsForStudentsTables();
  assertEquals(expectedCommentsForStudentsTables.size(),actualCommentsForStudentsTables.size());
  for (int i=0; i < expectedCommentsForStudentsTables.size(); i++) {
    assertTrue(isCommentsForStudentsTablesEqual(expectedCommentsForStudentsTables.get(i),actualCommentsForStudentsTables.get(i)));
  }
}","@Test public void testAll(){
  ______TS(""String_Node_Str"");
  AccountAttributes account=dataBundle.accounts.get(""String_Node_Str"");
  InstructorCommentsPageData data=new InstructorCommentsPageData(account);
  boolean isViewingDraft=false;
  boolean isDisplayArchive=false;
  String courseId=course1.id;
  String courseName=course1.name;
  List<String> coursePaginationList=Arrays.asList(course1.id,course2.id);
  Map<String,List<CommentAttributes>> comments=new TreeMap<String,List<CommentAttributes>>();
  Map<String,List<Boolean>> commentModifyPermissions=new TreeMap<String,List<Boolean>>();
  CourseRoster roster=new CourseRoster(getStudentsInCourse(courseId),getInstructorsInCourse(courseId));
  List<FeedbackSessionAttributes> feedbackSessions=getFeedbackSessionsForCourse(courseId);
  int numberOfPendingComments=0;
  String giverEmail=instructor1.email;
  setInstructorComments(giverEmail,instructor1.email,courseId,comments,commentModifyPermissions);
  giverEmail=instructor2.email;
  setInstructorComments(giverEmail,instructor1.email,courseId,comments,commentModifyPermissions);
  data.init(isViewingDraft,isDisplayArchive,courseId,courseName,coursePaginationList,comments,commentModifyPermissions,roster,feedbackSessions,numberOfPendingComments);
  assertFalse(data.isDisplayArchive());
  assertFalse(data.isViewingDraft());
  assertEquals(courseId,data.getCourseId());
  assertEquals(courseName,data.getCourseName());
  assertTrue(coursePaginationList.equals(data.getCoursePaginationList()));
  Map<String,List<CommentAttributes>> actualComments=data.getComments();
  Map<String,List<CommentAttributes>> expectedComments=comments;
  List<String> actualGivers=new ArrayList<String>();
  actualGivers.addAll(actualComments.keySet());
  List<String> expectedGivers=new ArrayList<String>();
  expectedGivers.addAll(expectedComments.keySet());
  assertTrue(TestHelper.isSameContentIgnoreOrder(expectedGivers,actualGivers));
  for (  String email : expectedGivers) {
    assertEquals(expectedComments.get(email),actualComments.get(email));
  }
  assertEquals(feedbackSessions,data.getFeedbackSessions());
  String expectedNextPageLink=data.getInstructorCommentsLink() + ""String_Node_Str"" + course2.id;
  String expectedPreviousPageLink=""String_Node_Str"";
  assertEquals(expectedNextPageLink,data.getNextPageLink());
  assertEquals(expectedPreviousPageLink,data.getPreviousPageLink());
  assertEquals(numberOfPendingComments,data.getNumberOfPendingComments());
  List<CommentsForStudentsTable> expectedCommentsForStudentsTables=getCommentsForStudentsTables(comments,roster,data,commentModifyPermissions);
  List<CommentsForStudentsTable> actualCommentsForStudentsTables=data.getCommentsForStudentsTables();
  assertEquals(expectedCommentsForStudentsTables.size(),actualCommentsForStudentsTables.size());
  for (int i=0; i < expectedCommentsForStudentsTables.size(); i++) {
    assertTrue(isCommentsForStudentsTablesEqual(expectedCommentsForStudentsTables.get(i),actualCommentsForStudentsTables.get(i)));
  }
  ______TS(""String_Node_Str"");
  courseId=course2.id;
  courseName=course2.name;
  comments=new TreeMap<String,List<CommentAttributes>>();
  commentModifyPermissions=new TreeMap<String,List<Boolean>>();
  roster=new CourseRoster(getStudentsInCourse(courseId),getInstructorsInCourse(courseId));
  feedbackSessions=getFeedbackSessionsForCourse(courseId);
  giverEmail=instructor1.email;
  setInstructorComments(giverEmail,instructor1.email,courseId,comments,commentModifyPermissions);
  data.init(isViewingDraft,isDisplayArchive,courseId,courseName,coursePaginationList,comments,commentModifyPermissions,roster,feedbackSessions,numberOfPendingComments);
  assertFalse(data.isDisplayArchive());
  assertFalse(data.isViewingDraft());
  assertEquals(courseId,data.getCourseId());
  assertEquals(courseName,data.getCourseName());
  assertEquals(coursePaginationList,data.getCoursePaginationList());
  actualComments=data.getComments();
  expectedComments=comments;
  actualGivers=new ArrayList<String>();
  actualGivers.addAll(actualComments.keySet());
  expectedGivers=new ArrayList<String>();
  expectedGivers.addAll(expectedComments.keySet());
  assertTrue(TestHelper.isSameContentIgnoreOrder(expectedGivers,actualGivers));
  for (  String email : expectedGivers) {
    assertEquals(expectedComments.get(email),actualComments.get(email));
  }
  assertEquals(feedbackSessions,data.getFeedbackSessions());
  expectedNextPageLink=""String_Node_Str"";
  expectedPreviousPageLink=data.getInstructorCommentsLink() + ""String_Node_Str"" + course1.id;
  assertEquals(data.getNextPageLink(),expectedNextPageLink);
  assertEquals(data.getPreviousPageLink(),expectedPreviousPageLink);
  assertEquals(numberOfPendingComments,data.getNumberOfPendingComments());
  expectedCommentsForStudentsTables=getCommentsForStudentsTables(comments,roster,data,commentModifyPermissions);
  actualCommentsForStudentsTables=data.getCommentsForStudentsTables();
  assertEquals(expectedCommentsForStudentsTables.size(),actualCommentsForStudentsTables.size());
  for (int i=0; i < expectedCommentsForStudentsTables.size(); i++) {
    assertTrue(isCommentsForStudentsTablesEqual(expectedCommentsForStudentsTables.get(i),actualCommentsForStudentsTables.get(i)));
  }
}",0.9895457137426344
62785,"private LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> buildResponsesPanelsForRecipientQuestionGiver(Map<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> sortedResponses){
  ViewType viewType=ViewType.RECIPIENT_QUESTION_GIVER;
  FieldValidator validator=new FieldValidator();
  LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> responsesGroupedByTeam=bundle.getQuestionResponseMapByGiverTeam();
  Map<String,FeedbackQuestionAttributes> questions=bundle.questions;
  sectionPanels=new LinkedHashMap<String,InstructorFeedbackResultsSectionPanel>();
  InstructorFeedbackResultsSectionPanel sectionPanel=new InstructorFeedbackResultsSectionPanel();
  Set<String> sectionsInCourse=bundle.rosterSectionTeamNameTable.keySet();
  Set<String> sectionsWithResponses=new HashSet<String>();
  String prevSection=Const.DEFAULT_SECTION;
  Set<String> teamsInSection=new HashSet<String>();
  Set<String> teamsWithResponses=new HashSet<String>();
  String prevTeam=""String_Node_Str"";
  Set<String> teamMembersInTeam=new HashSet<String>();
  Set<String> teamMembersWithResponses=new HashSet<String>();
  int recipientIndex=this.startIndex;
  for (  Map.Entry<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> responsesToRecipient : sortedResponses.entrySet()) {
    recipientIndex+=1;
    String recipientIdentifier=responsesToRecipient.getKey();
    String currentTeam=getCurrentTeam(bundle,recipientIdentifier);
    String currentSection=getCurrentRecipientSection(responsesToRecipient);
    if (!prevTeam.equals(currentTeam)) {
      boolean isFirstTeam=prevTeam.equals(""String_Node_Str"");
      if (!isFirstTeam) {
        createMissingParticipantPanelsWithoutModerationButtonForPrevTeamAndResetVariables(validator,sectionPanel,prevTeam,teamsWithResponses,teamMembersWithResponses,teamMembersInTeam);
      }
      prevTeam=currentTeam;
      teamsWithResponses.add(currentTeam);
    }
    if (!prevSection.equals(currentSection)) {
      boolean isFirstSection=sectionPanel.getParticipantPanels().isEmpty();
      if (!isFirstSection) {
        buildTeamStatisticsTableForSectionPanel(sectionPanel,prevSection,viewType,questions,responsesGroupedByTeam,teamsWithResponses);
        createMissingTeamAndParticipantPanelsForPrevSectionAndResetVariables(validator,sectionPanel,prevSection,sectionsWithResponses,teamsWithResponses,teamsInSection,currentTeam,false);
        sectionPanel=new InstructorFeedbackResultsSectionPanel();
      }
      teamsInSection=bundle.getTeamsInSectionFromRoster(currentSection);
    }
    FeedbackQuestionAttributes questionForRecipient=null;
    List<InstructorResultsQuestionTable> questionTables=new ArrayList<InstructorResultsQuestionTable>();
    int questionIndex=0;
    for (    Map.Entry<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>> responsesToRecipientForQuestion : responsesToRecipient.getValue().entrySet()) {
      if (responsesToRecipientForQuestion.getValue().isEmpty()) {
        continue;
      }
      questionIndex+=1;
      FeedbackQuestionAttributes currentQuestion=responsesToRecipientForQuestion.getKey();
      List<FeedbackResponseAttributes> responsesForQuestion=responsesToRecipientForQuestion.getValue();
      sectionPanel.getIsTeamWithResponses().put(currentTeam,true);
      InstructorResultsQuestionTable questionTable=buildQuestionTable(currentQuestion,responsesForQuestion,viewType,""String_Node_Str"" + recipientIndex + ""String_Node_Str""+ questionIndex,false);
      questionTable.setBoldQuestionNumber(false);
      questionTables.add(questionTable);
      questionForRecipient=currentQuestion;
    }
    InstructorResultsModerationButton moderationButton=buildModerationButtonForGiver(null,recipientIdentifier,""String_Node_Str"",""String_Node_Str"");
    InstructorFeedbackResultsGroupByQuestionPanel recipientPanel=buildInstructorFeedbackResultsGroupByQuestionPanel(validator,recipientIdentifier,bundle.getNameForEmail(recipientIdentifier),questionForRecipient,questionTables,moderationButton,false,false);
    addParticipantPanelToSectionPanel(sectionPanel,currentTeam,recipientPanel);
    teamMembersWithResponses.add(recipientIdentifier);
    prevSection=currentSection;
  }
  buildTeamStatisticsTableForSectionPanel(sectionPanel,prevSection,viewType,questions,responsesGroupedByTeam,teamsWithResponses);
  createTeamAndParticipantPanelsForLastParticipantSection(bundle,validator,sectionPanel,prevSection,prevTeam,sectionsWithResponses,teamsWithResponses,teamsInSection,teamMembersWithResponses);
  createSectionPanelsForMissingSections(bundle,validator,sectionsInCourse,sectionsWithResponses);
  return responsesGroupedByTeam;
}","private LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> buildResponsesPanelsForRecipientQuestionGiver(Map<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> sortedResponses){
  ViewType viewType=ViewType.RECIPIENT_QUESTION_GIVER;
  FieldValidator validator=new FieldValidator();
  LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> responsesGroupedByTeam=bundle.getQuestionResponseMapByGiverTeam();
  Map<String,FeedbackQuestionAttributes> questions=bundle.questions;
  sectionPanels=new LinkedHashMap<String,InstructorFeedbackResultsSectionPanel>();
  InstructorFeedbackResultsSectionPanel sectionPanel=new InstructorFeedbackResultsSectionPanel();
  Set<String> sectionsInCourse=bundle.rosterSectionTeamNameTable.keySet();
  Set<String> sectionsWithResponses=new HashSet<String>();
  String prevSection=Const.DEFAULT_SECTION;
  Set<String> teamsInSection=new HashSet<String>();
  Set<String> teamsWithResponses=new HashSet<String>();
  String prevTeam=""String_Node_Str"";
  Set<String> teamMembersInTeam=new HashSet<String>();
  Set<String> teamMembersWithResponses=new HashSet<String>();
  int recipientIndex=this.startIndex;
  for (  Map.Entry<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> responsesToRecipient : sortedResponses.entrySet()) {
    recipientIndex+=1;
    String recipientIdentifier=responsesToRecipient.getKey();
    String currentTeam=getCurrentTeam(bundle,recipientIdentifier);
    String currentSection=getCurrentRecipientSection(responsesToRecipient);
    if (!prevTeam.equals(currentTeam)) {
      boolean isFirstTeam=prevTeam.equals(""String_Node_Str"");
      if (!isFirstTeam) {
        createMissingParticipantPanelsWithoutModerationButtonForPrevTeamAndResetVariables(validator,sectionPanel,prevTeam,teamsWithResponses,teamMembersWithResponses,teamMembersInTeam);
      }
      prevTeam=currentTeam;
      teamsWithResponses.add(currentTeam);
    }
    if (!prevSection.equals(currentSection)) {
      boolean isFirstSection=sectionPanel.getParticipantPanels().isEmpty();
      if (!isFirstSection) {
        buildTeamsStatisticsTableForSectionPanel(sectionPanel,prevSection,viewType,questions,responsesGroupedByTeam,teamsWithResponses);
        createMissingTeamAndParticipantPanelsForPrevSectionAndResetVariables(validator,sectionPanel,prevSection,sectionsWithResponses,teamsWithResponses,teamsInSection,currentTeam,false);
        sectionPanel=new InstructorFeedbackResultsSectionPanel();
      }
      teamsInSection=bundle.getTeamsInSectionFromRoster(currentSection);
    }
    FeedbackQuestionAttributes questionForRecipient=null;
    List<InstructorResultsQuestionTable> questionTables=new ArrayList<InstructorResultsQuestionTable>();
    int questionIndex=0;
    for (    Map.Entry<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>> responsesToRecipientForQuestion : responsesToRecipient.getValue().entrySet()) {
      if (responsesToRecipientForQuestion.getValue().isEmpty()) {
        continue;
      }
      questionIndex+=1;
      FeedbackQuestionAttributes currentQuestion=responsesToRecipientForQuestion.getKey();
      List<FeedbackResponseAttributes> responsesForQuestion=responsesToRecipientForQuestion.getValue();
      sectionPanel.getIsTeamWithResponses().put(currentTeam,true);
      InstructorResultsQuestionTable questionTable=buildQuestionTable(currentQuestion,responsesForQuestion,viewType,""String_Node_Str"" + recipientIndex + ""String_Node_Str""+ questionIndex,false);
      questionTable.setBoldQuestionNumber(false);
      questionTables.add(questionTable);
      questionForRecipient=currentQuestion;
    }
    InstructorResultsModerationButton moderationButton=buildModerationButtonForGiver(null,recipientIdentifier,""String_Node_Str"",""String_Node_Str"");
    InstructorFeedbackResultsGroupByQuestionPanel recipientPanel=buildInstructorFeedbackResultsGroupByQuestionPanel(validator,recipientIdentifier,bundle.getNameForEmail(recipientIdentifier),questionForRecipient,questionTables,moderationButton,false,false);
    addParticipantPanelToSectionPanel(sectionPanel,currentTeam,recipientPanel);
    teamMembersWithResponses.add(recipientIdentifier);
    prevSection=currentSection;
  }
  buildTeamsStatisticsTableForSectionPanel(sectionPanel,prevSection,viewType,questions,responsesGroupedByTeam,teamsWithResponses);
  createTeamAndParticipantPanelsForLastParticipantSection(validator,sectionPanel,prevSection,prevTeam,sectionsWithResponses,teamsWithResponses,teamsInSection,teamMembersWithResponses);
  createSectionPanelsForMissingSections(bundle,validator,sectionsInCourse,sectionsWithResponses);
  return responsesGroupedByTeam;
}",0.9990463070891172
62786,"private LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> buildResponsesPanelsForGiverQuestionRecipient(Map<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> sortedResponses){
  ViewType viewType=ViewType.GIVER_QUESTION_RECIPIENT;
  FieldValidator validator=new FieldValidator();
  LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> responsesGroupedByTeam=bundle.getQuestionResponseMapByGiverTeam();
  Map<String,FeedbackQuestionAttributes> questions=bundle.questions;
  sectionPanels=new LinkedHashMap<String,InstructorFeedbackResultsSectionPanel>();
  InstructorFeedbackResultsSectionPanel sectionPanel=new InstructorFeedbackResultsSectionPanel();
  Set<String> sectionsInCourse=bundle.rosterSectionTeamNameTable.keySet();
  Set<String> sectionsWithResponses=new HashSet<String>();
  String prevSection=Const.DEFAULT_SECTION;
  Set<String> teamsInSection=new HashSet<String>();
  Set<String> teamsWithResponses=new HashSet<String>();
  String prevTeam=""String_Node_Str"";
  Set<String> teamMembersInTeam=new HashSet<String>();
  Set<String> teamMembersWithResponses=new HashSet<String>();
  int giverIndex=this.startIndex;
  for (  Map.Entry<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> responsesFromGiver : sortedResponses.entrySet()) {
    giverIndex+=1;
    String giverIdentifier=responsesFromGiver.getKey();
    String currentTeam=getCurrentTeam(bundle,giverIdentifier);
    String currentSection=getCurrentGiverSection(responsesFromGiver);
    if (!prevTeam.equals(currentTeam)) {
      boolean isFirstTeam=prevTeam.equals(""String_Node_Str"");
      if (!isFirstTeam) {
        createMissingParticipantPanelsWithModerationButtonForPrevTeamAndResetVariables(validator,sectionPanel,prevTeam,teamsWithResponses,teamMembersWithResponses,teamMembersInTeam);
      }
      prevTeam=currentTeam;
      teamsWithResponses.add(currentTeam);
    }
    if (!prevSection.equals(currentSection)) {
      boolean isFirstSection=sectionPanel.getParticipantPanels().isEmpty();
      if (!isFirstSection) {
        buildTeamStatisticsTableForSectionPanel(sectionPanel,prevSection,viewType,questions,responsesGroupedByTeam,teamsWithResponses);
        createMissingTeamAndParticipantPanelsForPrevSectionAndResetVariables(validator,sectionPanel,prevSection,sectionsWithResponses,teamsWithResponses,teamsInSection,currentTeam,true);
        sectionPanel=new InstructorFeedbackResultsSectionPanel();
      }
      teamsInSection=bundle.getTeamsInSectionFromRoster(currentSection);
    }
    FeedbackQuestionAttributes questionForGiver=null;
    List<InstructorResultsQuestionTable> questionTables=new ArrayList<InstructorResultsQuestionTable>();
    int questionIndex=0;
    for (    Map.Entry<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>> responsesFromGiverForQuestion : responsesFromGiver.getValue().entrySet()) {
      if (responsesFromGiverForQuestion.getValue().isEmpty()) {
        continue;
      }
      questionIndex+=1;
      FeedbackQuestionAttributes currentQuestion=responsesFromGiverForQuestion.getKey();
      List<FeedbackResponseAttributes> responsesForQuestion=responsesFromGiverForQuestion.getValue();
      sectionPanel.getIsTeamWithResponses().put(currentTeam,true);
      InstructorResultsQuestionTable questionTable=buildQuestionTable(currentQuestion,responsesForQuestion,viewType,""String_Node_Str"" + giverIndex + ""String_Node_Str""+ questionIndex,false);
      questionTable.setBoldQuestionNumber(false);
      questionTables.add(questionTable);
      questionForGiver=currentQuestion;
    }
    InstructorResultsModerationButton moderationButton=buildModerationButtonForGiver(null,giverIdentifier,""String_Node_Str"",""String_Node_Str"");
    InstructorFeedbackResultsGroupByQuestionPanel giverPanel=buildInstructorFeedbackResultsGroupByQuestionPanel(validator,giverIdentifier,bundle.getNameForEmail(giverIdentifier),questionForGiver,questionTables,moderationButton,bundle.isParticipantIdentifierStudent(giverIdentifier),true);
    addParticipantPanelToSectionPanel(sectionPanel,currentTeam,giverPanel);
    teamMembersWithResponses.add(giverIdentifier);
    prevSection=currentSection;
  }
  buildTeamStatisticsTableForSectionPanel(sectionPanel,prevSection,viewType,questions,responsesGroupedByTeam,teamsWithResponses);
  createTeamAndParticipantPanelsForLastParticipantSection(bundle,validator,sectionPanel,prevSection,prevTeam,sectionsWithResponses,teamsWithResponses,teamsInSection,teamMembersWithResponses);
  createSectionPanelsForMissingSections(bundle,validator,sectionsInCourse,sectionsWithResponses);
  return responsesGroupedByTeam;
}","private LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> buildResponsesPanelsForGiverQuestionRecipient(Map<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> sortedResponses){
  ViewType viewType=ViewType.GIVER_QUESTION_RECIPIENT;
  FieldValidator validator=new FieldValidator();
  LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> responsesGroupedByTeam=bundle.getQuestionResponseMapByGiverTeam();
  Map<String,FeedbackQuestionAttributes> questions=bundle.questions;
  sectionPanels=new LinkedHashMap<String,InstructorFeedbackResultsSectionPanel>();
  InstructorFeedbackResultsSectionPanel sectionPanel=new InstructorFeedbackResultsSectionPanel();
  Set<String> sectionsInCourse=bundle.rosterSectionTeamNameTable.keySet();
  Set<String> sectionsWithResponses=new HashSet<String>();
  String prevSection=Const.DEFAULT_SECTION;
  Set<String> teamsInSection=new HashSet<String>();
  Set<String> teamsWithResponses=new HashSet<String>();
  String prevTeam=""String_Node_Str"";
  Set<String> teamMembersInTeam=new HashSet<String>();
  Set<String> teamMembersWithResponses=new HashSet<String>();
  int giverIndex=this.startIndex;
  for (  Map.Entry<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> responsesFromGiver : sortedResponses.entrySet()) {
    giverIndex+=1;
    String giverIdentifier=responsesFromGiver.getKey();
    String currentTeam=getCurrentTeam(bundle,giverIdentifier);
    String currentSection=getCurrentGiverSection(responsesFromGiver);
    if (!prevTeam.equals(currentTeam)) {
      boolean isFirstTeam=prevTeam.equals(""String_Node_Str"");
      if (!isFirstTeam) {
        createMissingParticipantPanelsWithModerationButtonForPrevTeamAndResetVariables(validator,sectionPanel,prevTeam,teamsWithResponses,teamMembersWithResponses,teamMembersInTeam);
      }
      prevTeam=currentTeam;
      teamsWithResponses.add(currentTeam);
    }
    if (!prevSection.equals(currentSection)) {
      boolean isFirstSection=sectionPanel.getParticipantPanels().isEmpty();
      if (!isFirstSection) {
        buildTeamsStatisticsTableForSectionPanel(sectionPanel,prevSection,viewType,questions,responsesGroupedByTeam,teamsWithResponses);
        createMissingTeamAndParticipantPanelsForPrevSectionAndResetVariables(validator,sectionPanel,prevSection,sectionsWithResponses,teamsWithResponses,teamsInSection,currentTeam,true);
        sectionPanel=new InstructorFeedbackResultsSectionPanel();
      }
      teamsInSection=bundle.getTeamsInSectionFromRoster(currentSection);
    }
    FeedbackQuestionAttributes questionForGiver=null;
    List<InstructorResultsQuestionTable> questionTables=new ArrayList<InstructorResultsQuestionTable>();
    int questionIndex=0;
    for (    Map.Entry<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>> responsesFromGiverForQuestion : responsesFromGiver.getValue().entrySet()) {
      if (responsesFromGiverForQuestion.getValue().isEmpty()) {
        continue;
      }
      questionIndex+=1;
      FeedbackQuestionAttributes currentQuestion=responsesFromGiverForQuestion.getKey();
      List<FeedbackResponseAttributes> responsesForQuestion=responsesFromGiverForQuestion.getValue();
      sectionPanel.getIsTeamWithResponses().put(currentTeam,true);
      InstructorResultsQuestionTable questionTable=buildQuestionTable(currentQuestion,responsesForQuestion,viewType,""String_Node_Str"" + giverIndex + ""String_Node_Str""+ questionIndex,false);
      questionTable.setBoldQuestionNumber(false);
      questionTables.add(questionTable);
      questionForGiver=currentQuestion;
    }
    InstructorResultsModerationButton moderationButton=buildModerationButtonForGiver(null,giverIdentifier,""String_Node_Str"",""String_Node_Str"");
    InstructorFeedbackResultsGroupByQuestionPanel giverPanel=buildInstructorFeedbackResultsGroupByQuestionPanel(validator,giverIdentifier,bundle.getNameForEmail(giverIdentifier),questionForGiver,questionTables,moderationButton,bundle.isParticipantIdentifierStudent(giverIdentifier),true);
    addParticipantPanelToSectionPanel(sectionPanel,currentTeam,giverPanel);
    teamMembersWithResponses.add(giverIdentifier);
    prevSection=currentSection;
  }
  buildTeamsStatisticsTableForSectionPanel(sectionPanel,prevSection,viewType,questions,responsesGroupedByTeam,teamsWithResponses);
  createTeamAndParticipantPanelsForLastParticipantSection(validator,sectionPanel,prevSection,prevTeam,sectionsWithResponses,teamsWithResponses,teamsInSection,teamMembersWithResponses);
  createSectionPanelsForMissingSections(bundle,validator,sectionsInCourse,sectionsWithResponses);
  return responsesGroupedByTeam;
}",0.9990397951563
62787,"private InstructorResultsQuestionTable buildQuestionTable(FeedbackQuestionAttributes question,List<FeedbackResponseAttributes> responses,ViewType statisticsViewType,String additionalInfoId,boolean isIncludeMissingResponses){
  FeedbackQuestionDetails questionDetails=question.getQuestionDetails();
  String statisticsTable=questionDetails.getQuestionResultStatisticsHtml(responses,question,this,bundle,statisticsViewType.name());
  List<InstructorResultsResponseRow> responseRows=isIncludeMissingResponses ? buildResponseRowsForQuestion(question,responses,statisticsViewType) : buildResponseRowsForQuestionWithoutMissingResponses(question,responses,statisticsViewType);
  boolean isCollapsible=true;
  List<ElementTag> columnTags=new ArrayList<ElementTag>();
  Map<String,Boolean> isSortable=new HashMap<String,Boolean>();
switch (statisticsViewType) {
case QUESTION:
    buildTableColumnHeaderForQuestionView(columnTags,isSortable);
  break;
case GIVER_QUESTION_RECIPIENT:
buildTableColumnHeaderForGiverQuestionRecipientView(columnTags,isSortable);
isCollapsible=false;
break;
case RECIPIENT_QUESTION_GIVER:
buildTableColumnHeaderForRecipientQuestionGiverView(columnTags,isSortable);
isCollapsible=false;
break;
default :
Assumption.fail(""String_Node_Str"");
}
InstructorResultsQuestionTable questionTable=new InstructorResultsQuestionTable(this,responses,statisticsTable,responseRows,question,additionalInfoId,columnTags,isSortable);
questionTable.setCollapsible(isCollapsible);
questionTable.setShowResponseRows(true);
questionTable.setColumns(columnTags);
return questionTable;
}","private InstructorResultsQuestionTable buildQuestionTable(FeedbackQuestionAttributes question,List<FeedbackResponseAttributes> responses,ViewType statisticsViewType,String additionalInfoId,boolean isIncludeMissingResponses){
  FeedbackQuestionDetails questionDetails=question.getQuestionDetails();
  String statisticsTable=questionDetails.getQuestionResultStatisticsHtml(responses,question,this,bundle,statisticsViewType.toString());
  List<InstructorResultsResponseRow> responseRows=isIncludeMissingResponses ? buildResponseRowsForQuestion(question,responses,statisticsViewType) : buildResponseRowsForQuestionWithoutMissingResponses(question,responses,statisticsViewType);
  boolean isCollapsible=true;
  List<ElementTag> columnTags=new ArrayList<ElementTag>();
  Map<String,Boolean> isSortable=new HashMap<String,Boolean>();
switch (statisticsViewType) {
case QUESTION:
    buildTableColumnHeaderForQuestionView(columnTags,isSortable);
  break;
case GIVER_QUESTION_RECIPIENT:
buildTableColumnHeaderForGiverQuestionRecipientView(columnTags,isSortable);
isCollapsible=false;
break;
case RECIPIENT_QUESTION_GIVER:
buildTableColumnHeaderForRecipientQuestionGiverView(columnTags,isSortable);
isCollapsible=false;
break;
default :
Assumption.fail(""String_Node_Str"");
}
InstructorResultsQuestionTable questionTable=new InstructorResultsQuestionTable(this,responses,statisticsTable,responseRows,question,additionalInfoId,columnTags,isSortable);
questionTable.setCollapsible(isCollapsible);
questionTable.setShowResponseRows(true);
questionTable.setColumns(columnTags);
return questionTable;
}",0.9962121212121212
62788,"private void createTeamAndParticipantPanelsForLastParticipantSection(FeedbackSessionResultsBundle bundle,FieldValidator validator,InstructorFeedbackResultsSectionPanel sectionPanel,String prevSection,String prevTeam,Set<String> receivingSections,Set<String> receivingTeams,Set<String> teamsInSection,Set<String> teamMembersWithResponses){
  receivingTeams.add(prevTeam);
  sectionPanel.setSectionName(prevSection.equals(Const.DEFAULT_SECTION) ? ""String_Node_Str"" : prevSection);
  sectionPanel.setDisplayingTeamStatistics(true);
  sectionPanels.put(prevSection,sectionPanel);
  receivingSections.add(prevSection);
  Set<String> teamMembersWithoutResponses=new HashSet<String>(bundle.getTeamMembersFromRoster(prevTeam));
  teamMembersWithoutResponses.removeAll(teamMembersWithResponses);
  List<String> sortedTeamMembersWithoutResponses=new ArrayList<String>(teamMembersWithoutResponses);
  Collections.sort(sortedTeamMembersWithoutResponses);
  addMissingParticipantsForTeamToSectionPanelWithModerationButton(validator,sectionPanel,prevTeam,sortedTeamMembersWithoutResponses);
  receivingTeams.add(prevTeam);
  Set<String> teamsWithoutResponses=new HashSet<String>(teamsInSection);
  teamsWithoutResponses.removeAll(receivingTeams);
  for (  String teamWithoutResponses : teamsWithoutResponses) {
    List<String> teamMembersOfTeam=new ArrayList<String>(bundle.getTeamMembersFromRoster(teamWithoutResponses));
    Collections.sort(teamMembersOfTeam);
    addMissingParticipantsForTeamToSectionPanelWithModerationButton(validator,sectionPanel,teamWithoutResponses,teamMembersOfTeam);
  }
}","private void createTeamAndParticipantPanelsForLastParticipantSection(FieldValidator validator,InstructorFeedbackResultsSectionPanel sectionPanel,String prevSection,String prevTeam,Set<String> receivingSections,Set<String> receivingTeams,Set<String> teamsInSection,Set<String> teamMembersWithResponses){
  receivingTeams.add(prevTeam);
  sectionPanel.setSectionName(prevSection.equals(Const.DEFAULT_SECTION) ? ""String_Node_Str"" : prevSection);
  sectionPanel.setDisplayingTeamStatistics(true);
  sectionPanels.put(prevSection,sectionPanel);
  receivingSections.add(prevSection);
  Set<String> teamMembersWithoutResponses=new HashSet<String>(bundle.getTeamMembersFromRoster(prevTeam));
  teamMembersWithoutResponses.removeAll(teamMembersWithResponses);
  List<String> sortedTeamMembersWithoutResponses=new ArrayList<String>(teamMembersWithoutResponses);
  Collections.sort(sortedTeamMembersWithoutResponses);
  addMissingParticipantsForTeamToSectionPanelWithModerationButton(validator,sectionPanel,prevTeam,sortedTeamMembersWithoutResponses);
  receivingTeams.add(prevTeam);
  Set<String> teamsWithoutResponses=new HashSet<String>(teamsInSection);
  teamsWithoutResponses.removeAll(receivingTeams);
  for (  String teamWithoutResponses : teamsWithoutResponses) {
    List<String> teamMembersOfTeam=new ArrayList<String>(bundle.getTeamMembersFromRoster(teamWithoutResponses));
    Collections.sort(teamMembersOfTeam);
    addMissingParticipantsForTeamToSectionPanelWithModerationButton(validator,sectionPanel,teamWithoutResponses,teamMembersOfTeam);
  }
}",0.9885350318471338
62789,"private void constructStatisticsTablesForTeams(ViewType viewType,Map<String,FeedbackQuestionAttributes> questions,LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> responsesGroupedByTeam,InstructorFeedbackResultsSectionPanel panel,Collection<String> teamsInSection){
  Map<String,List<InstructorResultsQuestionTable>> teamToStatisticsTables=new HashMap<String,List<InstructorResultsQuestionTable>>();
  for (  String team : teamsInSection) {
    if (!responsesGroupedByTeam.containsKey(team)) {
      continue;
    }
    List<InstructorResultsQuestionTable> statisticsTablesForTeam=new ArrayList<InstructorResultsQuestionTable>();
    for (    FeedbackQuestionAttributes question : questions.values()) {
      if (!responsesGroupedByTeam.get(team).containsKey(question)) {
        continue;
      }
      List<FeedbackResponseAttributes> responsesGivenTeamAndQuestion=responsesGroupedByTeam.get(team).get(question);
      InstructorResultsQuestionTable statsTable=buildQuestionTable(question,responsesGivenTeamAndQuestion,viewType,""String_Node_Str"",false);
      statsTable.setShowResponseRows(false);
      statsTable.setCollapsible(false);
      if (!statsTable.getQuestionStatisticsHtml().isEmpty()) {
        statisticsTablesForTeam.add(statsTable);
      }
    }
    InstructorResultsQuestionTable.sortByQuestionNumber(statisticsTablesForTeam);
    teamToStatisticsTables.put(team,statisticsTablesForTeam);
  }
  panel.setTeamStatisticsTable(teamToStatisticsTables);
}","private void constructStatisticsTablesForTeams(ViewType viewType,Map<String,FeedbackQuestionAttributes> questions,LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> responsesGroupedByTeam,InstructorFeedbackResultsSectionPanel panel,Collection<String> teamsInSection){
  Map<String,List<InstructorResultsQuestionTable>> teamToStatisticsTables=new HashMap<String,List<InstructorResultsQuestionTable>>();
  for (  String team : teamsInSection) {
    if (!responsesGroupedByTeam.containsKey(team)) {
      continue;
    }
    List<InstructorResultsQuestionTable> statisticsTablesForTeam=new ArrayList<InstructorResultsQuestionTable>();
    for (    FeedbackQuestionAttributes question : questions.values()) {
      if (!responsesGroupedByTeam.get(team).containsKey(question)) {
        continue;
      }
      List<FeedbackResponseAttributes> responsesGivenTeamAndQuestion=responsesGroupedByTeam.get(team).get(question);
      InstructorResultsQuestionTable statsTable=buildQuestionTable(question,responsesGivenTeamAndQuestion,viewType,""String_Node_Str"",false);
      statsTable.setShowResponseRows(false);
      statsTable.setCollapsible(false);
      if (!statsTable.getQuestionStatisticsTable().isEmpty()) {
        statisticsTablesForTeam.add(statsTable);
      }
    }
    InstructorResultsQuestionTable.sortByQuestionNumber(statisticsTablesForTeam);
    teamToStatisticsTables.put(team,statisticsTablesForTeam);
  }
  panel.setTeamStatisticsTable(teamToStatisticsTables);
}",0.997020854021847
62790,"private void configureResponseRowForViewType(FeedbackQuestionAttributes question,ViewType statisticsViewType,String giver,String recipient,InstructorResultsResponseRow responseRow){
switch (statisticsViewType) {
case QUESTION:
    responseRow.setGiverProfilePictureDisplayed(question.isGiverAStudent());
  responseRow.setGiverProfilePictureLink(new Url(getProfilePictureLink(giver)));
responseRow.setRecipientProfilePictureDisplayed(question.isRecipientAStudent());
responseRow.setRecipientProfilePictureLink(new Url(getProfilePictureLink(recipient)));
responseRow.setActionsDisplayed(true);
break;
case GIVER_QUESTION_RECIPIENT:
responseRow.setGiverDisplayed(false);
responseRow.setGiverProfilePictureDisplayed(false);
responseRow.setRecipientProfilePictureAColumn(true);
responseRow.setRecipientProfilePictureDisplayed(question.isRecipientAStudent());
responseRow.setRecipientProfilePictureLink(new Url(getProfilePictureLink(recipient)));
responseRow.setActionsDisplayed(false);
break;
case RECIPIENT_QUESTION_GIVER:
responseRow.setRecipientDisplayed(false);
responseRow.setRecipientProfilePictureDisplayed(false);
responseRow.setGiverProfilePictureAColumn(true);
responseRow.setGiverProfilePictureDisplayed(question.isGiverAStudent());
responseRow.setGiverProfilePictureLink(new Url(getProfilePictureLink(giver)));
responseRow.setActionsDisplayed(true);
break;
default :
Assumption.fail();
}
}","private void configureResponseRowForViewType(FeedbackQuestionAttributes question,ViewType statisticsViewType,String giver,String recipient,InstructorResultsResponseRow responseRow){
switch (statisticsViewType) {
case QUESTION:
    responseRow.setGiverProfilePictureDisplayed(question.isGiverAStudent() && validator.getInvalidityInfo(FieldValidator.FieldType.EMAIL,giver).isEmpty());
  responseRow.setGiverProfilePictureLink(new Url(getProfilePictureLink(giver)));
responseRow.setRecipientProfilePictureDisplayed(question.isRecipientAStudent() && validator.getInvalidityInfo(FieldValidator.FieldType.EMAIL,recipient).isEmpty());
responseRow.setRecipientProfilePictureLink(new Url(getProfilePictureLink(recipient)));
responseRow.setActionsDisplayed(true);
break;
case GIVER_QUESTION_RECIPIENT:
responseRow.setGiverDisplayed(false);
responseRow.setGiverProfilePictureDisplayed(false);
responseRow.setRecipientProfilePictureAColumn(true);
responseRow.setRecipientProfilePictureDisplayed(question.isRecipientAStudent() && validator.getInvalidityInfo(FieldValidator.FieldType.EMAIL,recipient).isEmpty());
responseRow.setRecipientProfilePictureLink(new Url(getProfilePictureLink(recipient)));
responseRow.setActionsDisplayed(false);
break;
case RECIPIENT_QUESTION_GIVER:
responseRow.setRecipientDisplayed(false);
responseRow.setRecipientProfilePictureDisplayed(false);
responseRow.setGiverProfilePictureAColumn(true);
responseRow.setGiverProfilePictureDisplayed(question.isGiverAStudent() && validator.getInvalidityInfo(FieldValidator.FieldType.EMAIL,giver).isEmpty());
responseRow.setGiverProfilePictureLink(new Url(getProfilePictureLink(giver)));
responseRow.setActionsDisplayed(true);
break;
default :
Assumption.fail();
}
}",0.8960205391527599
62791,"public InstructorResultsQuestionTable(InstructorFeedbackResultsPageData data,List<FeedbackResponseAttributes> responses,String questionStatisticsHtml,List<InstructorResultsResponseRow> responseRows,FeedbackQuestionAttributes question,String additionalInfoId,List<ElementTag> columns,Map<String,Boolean> isColumnSortable){
  this.courseId=question.courseId;
  this.feedbackSessionName=question.feedbackSessionName;
  this.questionStatisticsHtml=questionStatisticsHtml;
  this.responses=responseRows;
  this.isQuestionHasResponses=!responses.isEmpty();
  this.question=question;
  this.questionText=data.bundle.getQuestionText(question.getId());
  this.panelClass=responses.isEmpty() ? ""String_Node_Str"" : ""String_Node_Str"";
  this.responsesBodyClass=data.bundle.isComplete() && !data.isShouldCollapsed() ? ""String_Node_Str"" : ""String_Node_Str"";
  FeedbackQuestionDetails questionDetails=question.getQuestionDetails();
  this.additionalInfoText=questionDetails.getQuestionAdditionalInfoHtml(question.questionNumber,additionalInfoId);
  this.questionStatisticsTable=questionDetails.getQuestionResultStatisticsHtml(responses,question,data,data.bundle,""String_Node_Str"");
  this.columns=columns;
  this.isBoldQuestionNumber=true;
  this.isColumnSortable=isColumnSortable;
}","public InstructorResultsQuestionTable(InstructorFeedbackResultsPageData data,List<FeedbackResponseAttributes> responses,String questionStatisticsHtml,List<InstructorResultsResponseRow> responseRows,FeedbackQuestionAttributes question,String additionalInfoId,List<ElementTag> columns,Map<String,Boolean> isColumnSortable){
  this.courseId=question.courseId;
  this.feedbackSessionName=question.feedbackSessionName;
  this.questionStatisticsTable=questionStatisticsHtml;
  this.responses=responseRows;
  this.isQuestionHasResponses=!responses.isEmpty();
  this.question=question;
  this.questionText=data.bundle.getQuestionText(question.getId());
  this.panelClass=responses.isEmpty() ? ""String_Node_Str"" : ""String_Node_Str"";
  this.responsesBodyClass=data.bundle.isComplete() && !data.isShouldCollapsed() ? ""String_Node_Str"" : ""String_Node_Str"";
  FeedbackQuestionDetails questionDetails=question.getQuestionDetails();
  this.additionalInfoText=questionDetails.getQuestionAdditionalInfoHtml(question.questionNumber,additionalInfoId);
  this.columns=columns;
  this.isBoldQuestionNumber=true;
  this.isColumnSortable=isColumnSortable;
}",0.9150707743547044
62792,"private void addMissingParticipantsForTeamToSectionPanelWithModerationButton(FieldValidator validator,InstructorFeedbackResultsSectionPanel sectionPanel,String teamName,List<String> teamMembers){
  for (  String teamMember : teamMembers) {
    InstructorResultsModerationButton moderationButton=buildModerationButtonForGiver(null,teamMember,""String_Node_Str"",""String_Node_Str"");
    InstructorFeedbackResultsGroupByQuestionPanel giverPanel=buildInstructorFeedbackResultsGroupByQuestionPanel(validator,teamMember,bundle.getFullNameFromRoster(teamMember),null,new ArrayList<InstructorResultsQuestionTable>(),moderationButton,true,true);
    addParticipantPanelToSectionPanel(sectionPanel,teamName,giverPanel);
  }
}","private void addMissingParticipantsForTeamToSectionPanelWithModerationButton(FieldValidator validator,InstructorFeedbackResultsSectionPanel sectionPanel,String teamName,List<String> teamMembers){
  for (  String teamMember : teamMembers) {
    InstructorResultsModerationButton moderationButton=buildModerationButtonForGiver(null,teamMember,""String_Node_Str"",""String_Node_Str"");
    InstructorFeedbackResultsGroupByQuestionPanel giverPanel=buildInstructorFeedbackResultsGroupByQuestionPanel(validator,teamMember,bundle.getFullNameFromRoster(teamMember),null,new ArrayList<InstructorResultsQuestionTable>(),moderationButton,true,true);
    giverPanel.setHasResponses(false);
    addParticipantPanelToSectionPanel(sectionPanel,teamName,giverPanel);
  }
}",0.8860068259385665
62793,"private void addMissingParticipantsForTeamToSectionPanelWithoutModerationButton(FieldValidator validator,InstructorFeedbackResultsSectionPanel sectionPanel,String teamName,List<String> teamMembers){
  for (  String teamMember : teamMembers) {
    InstructorFeedbackResultsGroupByQuestionPanel giverPanel=buildInstructorFeedbackResultsGroupByQuestionPanel(validator,teamMember,bundle.getFullNameFromRoster(teamMember),null,new ArrayList<InstructorResultsQuestionTable>(),null,false,false);
    addParticipantPanelToSectionPanel(sectionPanel,teamName,giverPanel);
  }
}","private void addMissingParticipantsForTeamToSectionPanelWithoutModerationButton(FieldValidator validator,InstructorFeedbackResultsSectionPanel sectionPanel,String teamName,List<String> teamMembers){
  for (  String teamMember : teamMembers) {
    InstructorFeedbackResultsGroupByQuestionPanel giverPanel=buildInstructorFeedbackResultsGroupByQuestionPanel(validator,teamMember,bundle.getFullNameFromRoster(teamMember),null,new ArrayList<InstructorResultsQuestionTable>(),null,false,false);
    giverPanel.setHasResponses(false);
    addParticipantPanelToSectionPanel(sectionPanel,teamName,giverPanel);
  }
}",0.8576300085251491
62794,"private InstructorFeedbackResultsGroupByQuestionPanel buildInstructorFeedbackResultsGroupByQuestionPanel(FieldValidator validator,String participantIdentifier,String participantName,FeedbackQuestionAttributes question,List<InstructorResultsQuestionTable> questionTables,InstructorResultsModerationButton moderationButton,boolean isModerationButtonDisplayed,boolean isGiver){
  boolean isEmailValid=validator.getInvalidityInfo(FieldValidator.FieldType.EMAIL,participantIdentifier).isEmpty();
  Url profilePictureLink=new Url(getProfilePictureLink(participantIdentifier));
  String mailtoStyle=""String_Node_Str"";
  if (question != null) {
    mailtoStyle=(question.giverType == FeedbackParticipantType.NONE || question.giverType == FeedbackParticipantType.TEAMS || participantIdentifier.contains(""String_Node_Str"")) ? ""String_Node_Str"" : ""String_Node_Str"";
  }
  InstructorResultsQuestionTable.sortByQuestionNumber(questionTables);
  InstructorFeedbackResultsGroupByQuestionPanel giverPanel=InstructorFeedbackResultsGroupByQuestionPanel.buildInstructorFeedbackResultsGroupByQuestionPanel(questionTables,isEmailValid,profilePictureLink,mailtoStyle,isGiver,participantIdentifier,participantName,moderationButton,isModerationButtonDisplayed);
  return giverPanel;
}","private InstructorFeedbackResultsGroupByQuestionPanel buildInstructorFeedbackResultsGroupByQuestionPanel(FieldValidator validator,String participantIdentifier,String participantName,FeedbackQuestionAttributes question,List<InstructorResultsQuestionTable> questionTables,InstructorResultsModerationButton moderationButton,boolean isModerationButtonDisplayed,boolean isGiver){
  boolean isEmailValid=validator.getInvalidityInfo(FieldValidator.FieldType.EMAIL,participantIdentifier).isEmpty();
  Url profilePictureLink=new Url(getProfilePictureLink(participantIdentifier));
  String mailtoStyle=""String_Node_Str"";
  if (question != null) {
    mailtoStyle=(question.giverType == FeedbackParticipantType.NONE || question.giverType == FeedbackParticipantType.TEAMS || participantIdentifier.contains(""String_Node_Str"")) ? ""String_Node_Str"" : ""String_Node_Str"";
  }
  InstructorResultsQuestionTable.sortByQuestionNumber(questionTables);
  InstructorFeedbackResultsGroupByQuestionPanel giverPanel=InstructorFeedbackResultsGroupByQuestionPanel.buildInstructorFeedbackResultsGroupByQuestionPanel(questionTables,isEmailValid,profilePictureLink,mailtoStyle,isGiver,participantIdentifier,participantName,moderationButton,isModerationButtonDisplayed);
  giverPanel.setHasResponses(true);
  return giverPanel;
}",0.9859154929577464
62795,"/** 
 * Creates   {@code InstructorFeedbackResultsSectionPanel}s for sectionPanels. Iterates through the responses and creates panels and questions for them. Keeps track  of missing sections, teams and participants who do not have responses  and create panels for these missing sections, teams and participants. TODO: simplify the logic in this method
 */
public void initForViewByGiverQuestionRecipient(){
  ViewType viewType=ViewType.GIVER_QUESTION_RECIPIENT;
  FieldValidator validator=new FieldValidator();
  if (!bundle.isComplete) {
    buildSectionPanelsForGiverQuestionRecipientForAjaxLoading(sections);
    return;
  }
  if (bundle.responses.size() == 0) {
    return;
  }
  setShouldCollapsed(bundle.responses.size() > 500);
  Map<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> sortedResponses=bundle.getResponsesSortedByGiverQuestionRecipient(groupByTeam == null || groupByTeam.equals(""String_Node_Str""));
  Map<String,FeedbackQuestionAttributes> questions=bundle.questions;
  LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> responsesGroupedByTeam=buildResponsesPanelsForGiverQuestionRecipient(bundle,viewType,validator,sortedResponses);
  buildTeamStatisticsTables(bundle,sections,viewType,questions,responsesGroupedByTeam);
}","/** 
 * Creates   {@code InstructorFeedbackResultsSectionPanel}s for sectionPanels. Iterates through the responses and creates panels and questions for them. Keeps track  of missing sections, teams and participants who do not have responses  and create panels for these missing sections, teams and participants. TODO: simplify the logic in this method
 */
public void initForViewByGiverQuestionRecipient(){
  ViewType viewType=ViewType.GIVER_QUESTION_RECIPIENT;
  if (!bundle.isComplete) {
    buildSectionPanelsForGiverQuestionRecipientForAjaxLoading(sections);
    return;
  }
  if (bundle.responses.size() == 0) {
    return;
  }
  setShouldCollapsed(bundle.responses.size() > 500);
  Map<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> sortedResponses=bundle.getResponsesSortedByGiverQuestionRecipient(groupByTeam == null || groupByTeam.equals(""String_Node_Str""));
  buildResponsesPanelsForGiverQuestionRecipient(bundle,viewType,sortedResponses);
}",0.8570175438596491
62796,"/** 
 * Creates   {@code InstructorFeedbackResultsSectionPanel}s for sectionPanels. Iterates through the responses and creates panels and questions for them. Keeps track  of missing sections, teams and participants who do not have responses  and create panels for these missing sections, teams and participants. TODO: simplify the logic in this method
 */
public void initForViewByRecipientQuestionGiver(){
  ViewType viewType=ViewType.RECIPIENT_QUESTION_GIVER;
  FieldValidator validator=new FieldValidator();
  if (!bundle.isComplete) {
    buildSectionPanelsForGiverQuestionRecipientForAjaxLoading(sections);
    return;
  }
  if (bundle.responses.size() == 0) {
    return;
  }
  setShouldCollapsed(bundle.responses.size() > 500);
  Map<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> sortedResponses=bundle.getResponsesSortedByRecipientQuestionGiver(groupByTeam == null || groupByTeam.equals(""String_Node_Str""));
  Map<String,FeedbackQuestionAttributes> questions=bundle.questions;
  LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> responsesGroupedByTeam=buildResponsesPanelsForRecipientQuestionGiver(bundle,viewType,validator,sortedResponses);
  buildTeamStatisticsTables(bundle,sections,viewType,questions,responsesGroupedByTeam);
}","/** 
 * Creates   {@code InstructorFeedbackResultsSectionPanel}s for sectionPanels. Iterates through the responses and creates panels and questions for them. Keeps track  of missing sections, teams and participants who do not have responses  and create panels for these missing sections, teams and participants. TODO: simplify the logic in this method
 */
public void initForViewByRecipientQuestionGiver(){
  ViewType viewType=ViewType.RECIPIENT_QUESTION_GIVER;
  if (!bundle.isComplete) {
    buildSectionPanelsForGiverQuestionRecipientForAjaxLoading(sections);
    return;
  }
  if (bundle.responses.size() == 0) {
    return;
  }
  setShouldCollapsed(bundle.responses.size() > 500);
  Map<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> sortedResponses=bundle.getResponsesSortedByRecipientQuestionGiver(groupByTeam == null || groupByTeam.equals(""String_Node_Str""));
  buildResponsesPanelsForRecipientQuestionGiver(bundle,viewType,sortedResponses);
}",0.8570175438596491
62797,"private LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> buildResponsesPanelsForRecipientQuestionGiver(FeedbackSessionResultsBundle bundle,ViewType viewType,FieldValidator validator,Map<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> sortedResponses){
  LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> responsesGroupedByTeam=bundle.getQuestionResponseMapByGiverTeam();
  sectionPanels=new LinkedHashMap<String,InstructorFeedbackResultsSectionPanel>();
  InstructorFeedbackResultsSectionPanel sectionPanel=new InstructorFeedbackResultsSectionPanel();
  Set<String> sectionsInCourse=bundle.rosterSectionTeamNameTable.keySet();
  Set<String> sectionsWithResponses=new HashSet<String>();
  String prevSection=Const.DEFAULT_SECTION;
  Set<String> teamsInSection=new HashSet<String>();
  Set<String> teamsWithResponses=new HashSet<String>();
  String prevTeam=""String_Node_Str"";
  Set<String> teamMembersInTeam=new HashSet<String>();
  Set<String> teamMembersWithResponses=new HashSet<String>();
  int recipientIndex=this.startIndex;
  for (  Map.Entry<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> responsesToRecipient : sortedResponses.entrySet()) {
    recipientIndex+=1;
    String recipientIdentifier=responsesToRecipient.getKey();
    String currentTeam=getCurrentTeam(bundle,recipientIdentifier);
    String currentSection=getCurrentSection(responsesToRecipient);
    if (!prevTeam.equals(currentTeam)) {
      boolean isFirstTeam=prevTeam.equals(""String_Node_Str"");
      if (!isFirstTeam) {
        createMissingParticipantPanelsForPrevTeamAndResetVariables(bundle,validator,sectionPanel,prevTeam,teamsWithResponses,teamMembersWithResponses,teamMembersInTeam,currentTeam);
        teamsWithResponses.add(currentTeam);
      }
      prevTeam=currentTeam;
    }
    if (!prevSection.equals(currentSection)) {
      boolean isFirstSection=sectionPanel.getParticipantPanels().isEmpty();
      if (!isFirstSection) {
        createTeamAndParticipantPanelsForPrevSectionAndResetVariables(bundle,validator,sectionPanel,prevSection,sectionsWithResponses,teamsWithResponses,teamsInSection,currentTeam);
        sectionPanel=new InstructorFeedbackResultsSectionPanel();
      }
      teamsInSection=bundle.getTeamsInSectionFromRoster(currentSection);
    }
    FeedbackQuestionAttributes questionForRecipient=null;
    List<InstructorResultsQuestionTable> questionTables=new ArrayList<InstructorResultsQuestionTable>();
    int questionIndex=0;
    for (    Map.Entry<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>> responsesToRecipientForQuestion : responsesToRecipient.getValue().entrySet()) {
      if (responsesToRecipientForQuestion.getValue().isEmpty()) {
        continue;
      }
      questionIndex+=1;
      FeedbackQuestionAttributes currentQuestion=responsesToRecipientForQuestion.getKey();
      List<FeedbackResponseAttributes> responsesForQuestion=responsesToRecipientForQuestion.getValue();
      sectionPanel.getIsTeamWithResponses().put(currentTeam,true);
      InstructorResultsQuestionTable questionTable=buildQuestionTable(currentQuestion,responsesForQuestion,viewType,""String_Node_Str"" + recipientIndex + ""String_Node_Str""+ questionIndex,false);
      questionTable.setBoldQuestionNumber(false);
      questionTables.add(questionTable);
      questionForRecipient=currentQuestion;
    }
    InstructorResultsModerationButton moderationButton=buildModerationButtonForGiver(null,recipientIdentifier,""String_Node_Str"",""String_Node_Str"");
    InstructorFeedbackResultsGroupByQuestionPanel recipientPanel=buildInstructorFeedbackResultsGroupByQuestionPanel(validator,recipientIdentifier,bundle.getNameForEmail(recipientIdentifier),questionForRecipient,questionTables,moderationButton,bundle.isParticipantIdentifierStudent(recipientIdentifier),false);
    recipientPanel.setModerationButtonDisplayed(bundle.isParticipantIdentifierStudent(recipientIdentifier));
    addParticipantPanelToSectionPanel(sectionPanel,currentTeam,recipientPanel);
    teamMembersWithResponses.add(recipientIdentifier);
    prevSection=currentSection;
  }
  createTeamAndParticipantPanelsForLastParticipantSection(bundle,validator,sectionPanel,prevSection,prevTeam,sectionsWithResponses,teamsWithResponses,teamsInSection,teamMembersWithResponses);
  createSectionPanelsForMissingSections(bundle,validator,sectionsInCourse,sectionsWithResponses);
  return responsesGroupedByTeam;
}","private LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> buildResponsesPanelsForRecipientQuestionGiver(FeedbackSessionResultsBundle bundle,ViewType viewType,Map<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> sortedResponses){
  FieldValidator validator=new FieldValidator();
  LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> responsesGroupedByTeam=bundle.getQuestionResponseMapByGiverTeam();
  Map<String,FeedbackQuestionAttributes> questions=bundle.questions;
  sectionPanels=new LinkedHashMap<String,InstructorFeedbackResultsSectionPanel>();
  InstructorFeedbackResultsSectionPanel sectionPanel=new InstructorFeedbackResultsSectionPanel();
  Set<String> sectionsInCourse=bundle.rosterSectionTeamNameTable.keySet();
  Set<String> sectionsWithResponses=new HashSet<String>();
  String prevSection=Const.DEFAULT_SECTION;
  Set<String> teamsInSection=new HashSet<String>();
  Set<String> teamsWithResponses=new HashSet<String>();
  String prevTeam=""String_Node_Str"";
  Set<String> teamMembersInTeam=new HashSet<String>();
  Set<String> teamMembersWithResponses=new HashSet<String>();
  int recipientIndex=this.startIndex;
  for (  Map.Entry<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> responsesToRecipient : sortedResponses.entrySet()) {
    recipientIndex+=1;
    String recipientIdentifier=responsesToRecipient.getKey();
    String currentTeam=getCurrentTeam(bundle,recipientIdentifier);
    String currentSection=getCurrentSection(responsesToRecipient);
    if (!prevTeam.equals(currentTeam)) {
      boolean isFirstTeam=prevTeam.equals(""String_Node_Str"");
      if (!isFirstTeam) {
        createMissingParticipantPanelsForPrevTeamAndResetVariables(bundle,validator,sectionPanel,prevTeam,teamsWithResponses,teamMembersWithResponses,teamMembersInTeam,currentTeam);
      }
      prevTeam=currentTeam;
      teamsWithResponses.add(currentTeam);
    }
    if (!prevSection.equals(currentSection)) {
      boolean isFirstSection=sectionPanel.getParticipantPanels().isEmpty();
      if (!isFirstSection) {
        buildTeamStatisticsTableForSectionPanel(sectionPanel,prevSection,viewType,questions,responsesGroupedByTeam,teamsWithResponses);
        createMissingTeamAndParticipantPanelsForPrevSectionAndResetVariables(bundle,validator,sectionPanel,prevSection,sectionsWithResponses,teamsWithResponses,teamsInSection,currentTeam);
        sectionPanel=new InstructorFeedbackResultsSectionPanel();
      }
      teamsInSection=bundle.getTeamsInSectionFromRoster(currentSection);
    }
    FeedbackQuestionAttributes questionForRecipient=null;
    List<InstructorResultsQuestionTable> questionTables=new ArrayList<InstructorResultsQuestionTable>();
    int questionIndex=0;
    for (    Map.Entry<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>> responsesToRecipientForQuestion : responsesToRecipient.getValue().entrySet()) {
      if (responsesToRecipientForQuestion.getValue().isEmpty()) {
        continue;
      }
      questionIndex+=1;
      FeedbackQuestionAttributes currentQuestion=responsesToRecipientForQuestion.getKey();
      List<FeedbackResponseAttributes> responsesForQuestion=responsesToRecipientForQuestion.getValue();
      sectionPanel.getIsTeamWithResponses().put(currentTeam,true);
      InstructorResultsQuestionTable questionTable=buildQuestionTable(currentQuestion,responsesForQuestion,viewType,""String_Node_Str"" + recipientIndex + ""String_Node_Str""+ questionIndex,false);
      questionTable.setBoldQuestionNumber(false);
      questionTables.add(questionTable);
      questionForRecipient=currentQuestion;
    }
    InstructorResultsModerationButton moderationButton=buildModerationButtonForGiver(null,recipientIdentifier,""String_Node_Str"",""String_Node_Str"");
    InstructorFeedbackResultsGroupByQuestionPanel recipientPanel=buildInstructorFeedbackResultsGroupByQuestionPanel(validator,recipientIdentifier,bundle.getNameForEmail(recipientIdentifier),questionForRecipient,questionTables,moderationButton,bundle.isParticipantIdentifierStudent(recipientIdentifier),false);
    recipientPanel.setModerationButtonDisplayed(bundle.isParticipantIdentifierStudent(recipientIdentifier));
    addParticipantPanelToSectionPanel(sectionPanel,currentTeam,recipientPanel);
    teamMembersWithResponses.add(recipientIdentifier);
    prevSection=currentSection;
  }
  buildTeamStatisticsTableForSectionPanel(sectionPanel,prevSection,viewType,questions,responsesGroupedByTeam,teamsWithResponses);
  createTeamAndParticipantPanelsForLastParticipantSection(bundle,validator,sectionPanel,prevSection,prevTeam,sectionsWithResponses,teamsWithResponses,teamsInSection,teamMembersWithResponses);
  createSectionPanelsForMissingSections(bundle,validator,sectionsInCourse,sectionsWithResponses);
  return responsesGroupedByTeam;
}",0.8854522184300341
62798,"private LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> buildResponsesPanelsForGiverQuestionRecipient(FeedbackSessionResultsBundle bundle,ViewType viewType,FieldValidator validator,Map<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> sortedResponses){
  LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> responsesGroupedByTeam=bundle.getQuestionResponseMapByGiverTeam();
  sectionPanels=new LinkedHashMap<String,InstructorFeedbackResultsSectionPanel>();
  InstructorFeedbackResultsSectionPanel sectionPanel=new InstructorFeedbackResultsSectionPanel();
  Set<String> sectionsInCourse=bundle.rosterSectionTeamNameTable.keySet();
  Set<String> sectionsWithResponses=new HashSet<String>();
  String prevSection=Const.DEFAULT_SECTION;
  Set<String> teamsInSection=new HashSet<String>();
  Set<String> teamsWithResponses=new HashSet<String>();
  String prevTeam=""String_Node_Str"";
  Set<String> teamMembersInTeam=new HashSet<String>();
  Set<String> teamMembersWithResponses=new HashSet<String>();
  int giverIndex=this.startIndex;
  for (  Map.Entry<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> responsesFromGiver : sortedResponses.entrySet()) {
    giverIndex+=1;
    String giverIdentifier=responsesFromGiver.getKey();
    String currentTeam=getCurrentTeam(bundle,giverIdentifier);
    String currentSection=getCurrentSection(responsesFromGiver);
    if (!prevTeam.equals(currentTeam)) {
      boolean isFirstTeam=prevTeam.equals(""String_Node_Str"");
      if (!isFirstTeam) {
        createMissingParticipantPanelsForPrevTeamAndResetVariables(bundle,validator,sectionPanel,prevTeam,teamsWithResponses,teamMembersWithResponses,teamMembersInTeam,currentTeam);
        teamsWithResponses.add(currentTeam);
      }
      prevTeam=currentTeam;
    }
    if (!prevSection.equals(currentSection)) {
      boolean isFirstSection=sectionPanel.getParticipantPanels().isEmpty();
      if (!isFirstSection) {
        createTeamAndParticipantPanelsForPrevSectionAndResetVariables(bundle,validator,sectionPanel,prevSection,sectionsWithResponses,teamsWithResponses,teamsInSection,currentTeam);
        sectionPanel=new InstructorFeedbackResultsSectionPanel();
      }
      teamsInSection=bundle.getTeamsInSectionFromRoster(currentSection);
    }
    FeedbackQuestionAttributes questionForGiver=null;
    List<InstructorResultsQuestionTable> questionTables=new ArrayList<InstructorResultsQuestionTable>();
    int questionIndex=0;
    for (    Map.Entry<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>> responsesFromGiverForQuestion : responsesFromGiver.getValue().entrySet()) {
      if (responsesFromGiverForQuestion.getValue().isEmpty()) {
        continue;
      }
      questionIndex+=1;
      FeedbackQuestionAttributes currentQuestion=responsesFromGiverForQuestion.getKey();
      List<FeedbackResponseAttributes> responsesForQuestion=responsesFromGiverForQuestion.getValue();
      sectionPanel.getIsTeamWithResponses().put(currentTeam,true);
      InstructorResultsQuestionTable questionTable=buildQuestionTable(currentQuestion,responsesForQuestion,viewType,""String_Node_Str"" + giverIndex + ""String_Node_Str""+ questionIndex,false);
      questionTable.setBoldQuestionNumber(false);
      questionTables.add(questionTable);
      questionForGiver=currentQuestion;
    }
    InstructorResultsModerationButton moderationButton=buildModerationButtonForGiver(null,giverIdentifier,""String_Node_Str"",""String_Node_Str"");
    InstructorFeedbackResultsGroupByQuestionPanel giverPanel=buildInstructorFeedbackResultsGroupByQuestionPanel(validator,giverIdentifier,bundle.getNameForEmail(giverIdentifier),questionForGiver,questionTables,moderationButton,bundle.isParticipantIdentifierStudent(giverIdentifier),true);
    giverPanel.setModerationButtonDisplayed(bundle.isParticipantIdentifierStudent(giverIdentifier));
    addParticipantPanelToSectionPanel(sectionPanel,currentTeam,giverPanel);
    teamMembersWithResponses.add(giverIdentifier);
    prevSection=currentSection;
  }
  createTeamAndParticipantPanelsForLastParticipantSection(bundle,validator,sectionPanel,prevSection,prevTeam,sectionsWithResponses,teamsWithResponses,teamsInSection,teamMembersWithResponses);
  createSectionPanelsForMissingSections(bundle,validator,sectionsInCourse,sectionsWithResponses);
  return responsesGroupedByTeam;
}","private LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> buildResponsesPanelsForGiverQuestionRecipient(FeedbackSessionResultsBundle bundle,ViewType viewType,Map<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> sortedResponses){
  FieldValidator validator=new FieldValidator();
  LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> responsesGroupedByTeam=bundle.getQuestionResponseMapByGiverTeam();
  Map<String,FeedbackQuestionAttributes> questions=bundle.questions;
  sectionPanels=new LinkedHashMap<String,InstructorFeedbackResultsSectionPanel>();
  InstructorFeedbackResultsSectionPanel sectionPanel=new InstructorFeedbackResultsSectionPanel();
  Set<String> sectionsInCourse=bundle.rosterSectionTeamNameTable.keySet();
  Set<String> sectionsWithResponses=new HashSet<String>();
  String prevSection=Const.DEFAULT_SECTION;
  Set<String> teamsInSection=new HashSet<String>();
  Set<String> teamsWithResponses=new HashSet<String>();
  String prevTeam=""String_Node_Str"";
  Set<String> teamMembersInTeam=new HashSet<String>();
  Set<String> teamMembersWithResponses=new HashSet<String>();
  int giverIndex=this.startIndex;
  for (  Map.Entry<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> responsesFromGiver : sortedResponses.entrySet()) {
    giverIndex+=1;
    String giverIdentifier=responsesFromGiver.getKey();
    String currentTeam=getCurrentTeam(bundle,giverIdentifier);
    String currentSection=getCurrentSection(responsesFromGiver);
    if (!prevTeam.equals(currentTeam)) {
      boolean isFirstTeam=prevTeam.equals(""String_Node_Str"");
      if (!isFirstTeam) {
        createMissingParticipantPanelsForPrevTeamAndResetVariables(bundle,validator,sectionPanel,prevTeam,teamsWithResponses,teamMembersWithResponses,teamMembersInTeam,currentTeam);
      }
      prevTeam=currentTeam;
      teamsWithResponses.add(currentTeam);
    }
    if (!prevSection.equals(currentSection)) {
      boolean isFirstSection=sectionPanel.getParticipantPanels().isEmpty();
      if (!isFirstSection) {
        buildTeamStatisticsTableForSectionPanel(sectionPanel,prevSection,viewType,questions,responsesGroupedByTeam,teamsWithResponses);
        createMissingTeamAndParticipantPanelsForPrevSectionAndResetVariables(bundle,validator,sectionPanel,prevSection,sectionsWithResponses,teamsWithResponses,teamsInSection,currentTeam);
        sectionPanel=new InstructorFeedbackResultsSectionPanel();
      }
      teamsInSection=bundle.getTeamsInSectionFromRoster(currentSection);
    }
    FeedbackQuestionAttributes questionForGiver=null;
    List<InstructorResultsQuestionTable> questionTables=new ArrayList<InstructorResultsQuestionTable>();
    int questionIndex=0;
    for (    Map.Entry<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>> responsesFromGiverForQuestion : responsesFromGiver.getValue().entrySet()) {
      if (responsesFromGiverForQuestion.getValue().isEmpty()) {
        continue;
      }
      questionIndex+=1;
      FeedbackQuestionAttributes currentQuestion=responsesFromGiverForQuestion.getKey();
      List<FeedbackResponseAttributes> responsesForQuestion=responsesFromGiverForQuestion.getValue();
      sectionPanel.getIsTeamWithResponses().put(currentTeam,true);
      InstructorResultsQuestionTable questionTable=buildQuestionTable(currentQuestion,responsesForQuestion,viewType,""String_Node_Str"" + giverIndex + ""String_Node_Str""+ questionIndex,false);
      questionTable.setBoldQuestionNumber(false);
      questionTables.add(questionTable);
      questionForGiver=currentQuestion;
    }
    InstructorResultsModerationButton moderationButton=buildModerationButtonForGiver(null,giverIdentifier,""String_Node_Str"",""String_Node_Str"");
    InstructorFeedbackResultsGroupByQuestionPanel giverPanel=buildInstructorFeedbackResultsGroupByQuestionPanel(validator,giverIdentifier,bundle.getNameForEmail(giverIdentifier),questionForGiver,questionTables,moderationButton,bundle.isParticipantIdentifierStudent(giverIdentifier),true);
    giverPanel.setModerationButtonDisplayed(bundle.isParticipantIdentifierStudent(giverIdentifier));
    addParticipantPanelToSectionPanel(sectionPanel,currentTeam,giverPanel);
    teamMembersWithResponses.add(giverIdentifier);
    prevSection=currentSection;
  }
  buildTeamStatisticsTableForSectionPanel(sectionPanel,prevSection,viewType,questions,responsesGroupedByTeam,teamsWithResponses);
  createTeamAndParticipantPanelsForLastParticipantSection(bundle,validator,sectionPanel,prevSection,prevTeam,sectionsWithResponses,teamsWithResponses,teamsInSection,teamMembersWithResponses);
  createSectionPanelsForMissingSections(bundle,validator,sectionsInCourse,sectionsWithResponses);
  return responsesGroupedByTeam;
}",0.8679122311535955
62799,"private void buildTeamStatisticsTableForSectionPanel(InstructorFeedbackResultsSectionPanel sectionPanel,String section,ViewType viewType,Map<String,FeedbackQuestionAttributes> questions,LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> responsesGroupedByTeam,Collection<String> teamsInSection){
  InstructorFeedbackResultsSectionPanel panel=sectionPanels.get(section);
  panel.setArrowClass(""String_Node_Str"");
  panel.setPanelClass(""String_Node_Str"");
switch (viewType) {
case GIVER_QUESTION_RECIPIENT:
    panel.setStatisticsHeaderText(""String_Node_Str"");
  panel.setDetailedResponsesHeaderText(""String_Node_Str"");
break;
case RECIPIENT_QUESTION_GIVER:
panel.setStatisticsHeaderText(""String_Node_Str"");
panel.setDetailedResponsesHeaderText(""String_Node_Str"");
break;
default :
Assumption.fail(""String_Node_Str"");
}
constructStatisticsTablesForTeams(viewType,questions,responsesGroupedByTeam,panel,teamsInSection);
}","private void buildTeamStatisticsTableForSectionPanel(InstructorFeedbackResultsSectionPanel sectionPanel,String section,ViewType viewType,Map<String,FeedbackQuestionAttributes> questions,LinkedHashMap<String,Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>>> responsesGroupedByTeam,Collection<String> teamsInSection){
  System.out.println(teamsInSection);
  sectionPanel.setArrowClass(""String_Node_Str"");
  sectionPanel.setPanelClass(""String_Node_Str"");
switch (viewType) {
case GIVER_QUESTION_RECIPIENT:
    sectionPanel.setStatisticsHeaderText(""String_Node_Str"");
  sectionPanel.setDetailedResponsesHeaderText(""String_Node_Str"");
break;
case RECIPIENT_QUESTION_GIVER:
sectionPanel.setStatisticsHeaderText(""String_Node_Str"");
sectionPanel.setDetailedResponsesHeaderText(""String_Node_Str"");
break;
default :
Assumption.fail(""String_Node_Str"");
}
constructStatisticsTablesForTeams(viewType,questions,responsesGroupedByTeam,sectionPanel,teamsInSection);
}",0.9099427381572098
62800,"@Override public ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  boolean isHtmlTableNeeded=getRequestParamAsBoolean(Const.ParamsNames.CSV_TO_HTML_TABLE_NEEDED);
  Assumption.assertNotNull(courseId);
  InstructorAttributes instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  new GateKeeper().verifyAccessible(instructor,logic.getCourse(courseId));
  InstructorCourseDetailsPageData data=new InstructorCourseDetailsPageData(account);
  if (isHtmlTableNeeded) {
    String courseStudentListAsCsv=logic.getCourseStudentListAsCsv(courseId,account.googleId);
    data.setStudentListHtmlTableAsString(StringHelper.csvToHtmlTable(courseStudentListAsCsv));
    statusToAdmin=""String_Node_Str"" + ""String_Node_Str"" + courseId + ""String_Node_Str"";
    return createAjaxResult(data);
  }
  CourseDetailsBundle courseDetails=logic.getCourseDetails(courseId);
  List<InstructorAttributes> instructors=logic.getInstructorsForCourse(courseId);
  List<StudentAttributes> students=logic.getStudentsForCourse(courseId);
  StudentAttributes.sortByNameAndThenByEmail(students);
  data.init(instructor,courseDetails,instructors,students);
  if (students.size() == 0) {
    statusToUser.add(Const.StatusMessages.INSTRUCTOR_COURSE_EMPTY);
  }
  statusToAdmin=""String_Node_Str"" + ""String_Node_Str"" + courseId + ""String_Node_Str"";
  ShowPageResult response=createShowPageResult(Const.ViewURIs.INSTRUCTOR_COURSE_DETAILS,data);
  return response;
}","@Override public ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  boolean isHtmlTableNeeded=getRequestParamAsBoolean(Const.ParamsNames.CSV_TO_HTML_TABLE_NEEDED);
  Assumption.assertNotNull(courseId);
  InstructorAttributes instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  new GateKeeper().verifyAccessible(instructor,logic.getCourse(courseId));
  InstructorCourseDetailsPageData data=new InstructorCourseDetailsPageData(account);
  if (isHtmlTableNeeded) {
    String courseStudentListAsCsv=logic.getCourseStudentListAsCsv(courseId,account.googleId);
    data.setStudentListHtmlTableAsString(StringHelper.csvToHtmlTable(courseStudentListAsCsv));
    statusToAdmin=""String_Node_Str"" + ""String_Node_Str"" + courseId + ""String_Node_Str"";
    return createAjaxResult(data);
  }
  CourseDetailsBundle courseDetails=logic.getCourseDetails(courseId);
  List<InstructorAttributes> instructors=logic.getInstructorsForCourse(courseId);
  List<StudentAttributes> students=logic.getStudentsForCourse(courseId);
  StudentAttributes.sortByNameAndThenByEmail(students);
  data.init(instructor,courseDetails,instructors,students);
  if (students.isEmpty()) {
    statusToUser.add(Const.StatusMessages.INSTRUCTOR_COURSE_EMPTY);
  }
  statusToAdmin=""String_Node_Str"" + ""String_Node_Str"" + courseId + ""String_Node_Str"";
  ShowPageResult response=createShowPageResult(Const.ViewURIs.INSTRUCTOR_COURSE_DETAILS,data);
  return response;
}",0.9934253780407628
62801,"private List<CommentRow> createCommentRows(String giverEmail,String giverName){
  List<CommentRow> rows=new ArrayList<CommentRow>();
  List<CommentAttributes> commentsForGiver=comments.get(giverEmail);
  for (int i=0; i < commentsForGiver.size(); i++) {
    String recipientDetails=getRecipientNames(commentsForGiver.get(i).recipients);
    String creationTime=TimeHelper.formatTime(commentsForGiver.get(i).createdAt);
    Boolean isInstructorAllowedToModifyCommentInSection=commentModifyPermissions.get(giverEmail).get(i);
    String typeOfPeopleCanViewComment=getTypeOfPeopleCanViewComment(commentsForGiver.get(i));
    String editedAt=commentsForGiver.get(i).getEditedAtText(giverName.equals(""String_Node_Str""));
    String showCommentsTo=getShowCommentsToForComment(commentsForGiver.get(i));
    String showGiverNameTo=getShowGiverNameToForComment(commentsForGiver.get(i));
    String showRecipientNameTo=getShowRecipientNameToForComment(commentsForGiver.get(i));
    VisibilityCheckboxes visibilityCheckboxes=createVisibilityCheckboxes(commentsForGiver.get(i));
    rows.add(new InstructorCommentsCommentRow(giverEmail,commentsForGiver.get(i),recipientDetails,creationTime,isInstructorAllowedToModifyCommentInSection,typeOfPeopleCanViewComment,editedAt,visibilityCheckboxes,showCommentsTo,showGiverNameTo,showRecipientNameTo));
  }
  return rows;
}","private List<CommentRow> createCommentRows(String giverEmail,String giverName){
  List<CommentRow> rows=new ArrayList<CommentRow>();
  List<CommentAttributes> commentsForGiver=comments.get(giverEmail);
  for (int i=0; i < commentsForGiver.size(); i++) {
    String recipientDetails=getRecipientNames(commentsForGiver.get(i).recipients);
    String creationTime=Const.SystemParams.COMMENTS_SIMPLE_DATE_FORMATTER.format(commentsForGiver.get(i).createdAt);
    Boolean isInstructorAllowedToModifyCommentInSection=commentModifyPermissions.get(giverEmail).get(i);
    String typeOfPeopleCanViewComment=getTypeOfPeopleCanViewComment(commentsForGiver.get(i));
    String editedAt=commentsForGiver.get(i).getEditedAtText(giverName.equals(""String_Node_Str""));
    String showCommentsTo=getShowCommentsToForComment(commentsForGiver.get(i));
    String showGiverNameTo=getShowGiverNameToForComment(commentsForGiver.get(i));
    String showRecipientNameTo=getShowRecipientNameToForComment(commentsForGiver.get(i));
    VisibilityCheckboxes visibilityCheckboxes=createVisibilityCheckboxes(commentsForGiver.get(i));
    rows.add(new InstructorCommentsCommentRow(giverEmail,commentsForGiver.get(i),recipientDetails,creationTime,isInstructorAllowedToModifyCommentInSection,typeOfPeopleCanViewComment,editedAt,visibilityCheckboxes,showCommentsTo,showGiverNameTo,showRecipientNameTo));
  }
  return rows;
}",0.9770156877052172
62802,"private List<CommentRow> createCommentRows(String giverEmailPlusCourseId,CommentSearchResultBundle commentSearchResultBundle){
  List<CommentRow> rows=new ArrayList<CommentRow>();
  String giverDetails=commentSearchResultBundle.giverTable.get(giverEmailPlusCourseId);
  String instructorCommentsLink=getInstructorCommentsLink();
  for (  CommentAttributes comment : commentSearchResultBundle.giverCommentTable.get(giverEmailPlusCourseId)) {
    String recipientDetails=commentSearchResultBundle.recipientTable.get(comment.getCommentId().toString());
    String creationTime=TimeHelper.formatTime(comment.createdAt);
    String link=instructorCommentsLink + ""String_Node_Str"" + Const.ParamsNames.COURSE_ID+ ""String_Node_Str""+ comment.courseId+ ""String_Node_Str""+ comment.getCommentId();
    ElementTag editButton=createEditButton(link,Const.Tooltips.COMMENT_EDIT_IN_COMMENTS_PAGE);
    rows.add(new CommentRow(giverDetails,comment,recipientDetails,creationTime,editButton));
  }
  return rows;
}","private List<CommentRow> createCommentRows(String giverEmailPlusCourseId,CommentSearchResultBundle commentSearchResultBundle){
  List<CommentRow> rows=new ArrayList<CommentRow>();
  String giverDetails=commentSearchResultBundle.giverTable.get(giverEmailPlusCourseId);
  String instructorCommentsLink=getInstructorCommentsLink();
  for (  CommentAttributes comment : commentSearchResultBundle.giverCommentTable.get(giverEmailPlusCourseId)) {
    String recipientDetails=commentSearchResultBundle.recipientTable.get(comment.getCommentId().toString());
    String creationTime=Const.SystemParams.COMMENTS_SIMPLE_DATE_FORMATTER.format(comment.createdAt);
    String editedAt=comment.getEditedAtText(giverDetails.equals(""String_Node_Str"" + comment.courseId + ""String_Node_Str""));
    String link=instructorCommentsLink + ""String_Node_Str"" + Const.ParamsNames.COURSE_ID+ ""String_Node_Str""+ comment.courseId+ ""String_Node_Str""+ comment.getCommentId();
    ElementTag editButton=createEditButton(link,Const.Tooltips.COMMENT_EDIT_IN_COMMENTS_PAGE);
    rows.add(new CommentRow(giverDetails,comment,recipientDetails,creationTime,editedAt,editButton));
  }
  return rows;
}",0.9090909090909092
62803,"private void setCommentRows(String studentEmail,CourseRoster roster,List<CommentAttributes> comments){
  commentRows=new ArrayList<CommentRow>();
  for (  CommentAttributes comment : comments) {
    String recipientDetails=getRecipientNames(comment.recipients,studentEmail,roster);
    InstructorAttributes instructor=roster.getInstructorForEmail(comment.giverEmail);
    String giverDetails=comment.giverEmail;
    if (instructor != null) {
      giverDetails=instructor.displayedName + ""String_Node_Str"" + instructor.name;
    }
    String creationTime=TimeHelper.formatDate(comment.createdAt);
    String editedAt=comment.getEditedAtText(giverDetails.equals(""String_Node_Str""));
    CommentRow commentRow=new StudentCommentsCommentRow(giverDetails,comment,recipientDetails,creationTime,editedAt);
    commentRows.add(commentRow);
  }
}","private void setCommentRows(String studentEmail,CourseRoster roster,List<CommentAttributes> comments){
  commentRows=new ArrayList<CommentRow>();
  for (  CommentAttributes comment : comments) {
    String recipientDetails=getRecipientNames(comment.recipients,studentEmail,roster);
    InstructorAttributes instructor=roster.getInstructorForEmail(comment.giverEmail);
    String giverDetails=comment.giverEmail;
    if (instructor != null) {
      giverDetails=instructor.displayedName + ""String_Node_Str"" + instructor.name;
    }
    String creationTime=Const.SystemParams.COMMENTS_SIMPLE_DATE_FORMATTER.format(comment.createdAt);
    String editedAt=comment.getEditedAtText(giverDetails.equals(""String_Node_Str""));
    CommentRow commentRow=new StudentCommentsCommentRow(giverDetails,comment,recipientDetails,creationTime,editedAt);
    commentRows.add(commentRow);
  }
}",0.9643483343074224
62804,"public CommentRow(String giverDetails,CommentAttributes comment,String recipientDetails,String creationTime,ElementTag editButton){
  this.giverDetails=giverDetails;
  this.comment=comment;
  this.recipientDetails=recipientDetails;
  this.creationTime=creationTime;
  this.editButton=editButton;
}","public CommentRow(String giverDetails,CommentAttributes comment,String recipientDetails,String creationTime,String editedAt,ElementTag editButton){
  this.giverDetails=giverDetails;
  this.comment=comment;
  this.recipientDetails=recipientDetails;
  this.creationTime=creationTime;
  this.editedAt=editedAt;
  this.editButton=editButton;
}",0.9339622641509434
62805,"private void buildExistingQuestionForm(String feedbackSessionName,int questionsSize,Map<String,Boolean> questionHasResponses,String courseId,FeedbackQuestionAttributes question){
  FeedbackQuestionEditForm qnForm=new FeedbackQuestionEditForm();
  qnForm.setAction(Const.ActionURIs.INSTRUCTOR_FEEDBACK_QUESTION_EDIT);
  qnForm.setCourseId(courseId);
  qnForm.setFeedbackSessionName(feedbackSessionName);
  qnForm.setQuestion(question);
  qnForm.setQuestionNumberSuffix(""String_Node_Str"" + question.questionNumber);
  qnForm.setQuestionNumberOptions(getQuestionNumberOptions(questionsSize));
  FeedbackQuestionFeedbackPathSettings feedbackPathSettings=new FeedbackQuestionFeedbackPathSettings();
  feedbackPathSettings.setGiverParticipantOptions(getParticipantOptions(question,true));
  feedbackPathSettings.setRecipientParticipantOptions(getParticipantOptions(question,false));
  qnForm.setFeedbackPathSettings(feedbackPathSettings);
  Map<String,Boolean> isGiverNameVisibleFor=new HashMap<String,Boolean>();
  for (  FeedbackParticipantType giverType : question.showGiverNameTo) {
    isGiverNameVisibleFor.put(giverType.name(),true);
  }
  Map<String,Boolean> isRecipientNameVisibleFor=new HashMap<String,Boolean>();
  for (  FeedbackParticipantType recipientType : question.showRecipientNameTo) {
    isRecipientNameVisibleFor.put(recipientType.name(),true);
  }
  Map<String,Boolean> isResponsesVisibleFor=new HashMap<String,Boolean>();
  for (  FeedbackParticipantType participantType : question.showResponsesTo) {
    isResponsesVisibleFor.put(participantType.name(),true);
  }
  FeedbackQuestionVisibilitySettings visibilitySettings=new FeedbackQuestionVisibilitySettings(question.getVisibilityMessage(),isResponsesVisibleFor,isGiverNameVisibleFor,isRecipientNameVisibleFor);
  qnForm.setVisibilitySettings(visibilitySettings);
  boolean isNumberOfEntitiesToGiveFeedbackToChecked=question.numberOfEntitiesToGiveFeedbackTo == Const.MAX_POSSIBLE_RECIPIENTS;
  feedbackPathSettings.setNumberOfEntitiesToGiveFeedbackToChecked(isNumberOfEntitiesToGiveFeedbackToChecked);
  feedbackPathSettings.setNumOfEntitiesToGiveFeedbackToValue(isNumberOfEntitiesToGiveFeedbackToChecked ? 1 : question.numberOfEntitiesToGiveFeedbackTo);
  qnForm.setQuestionHasResponses(questionHasResponses.get(question.getId()));
  qnForm.setQuestionSpecificEditFormHtml(question.getQuestionDetails().getQuestionSpecificEditFormHtml(question.questionNumber));
  qnForm.setEditable(false);
  qnForms.add(qnForm);
}","private void buildExistingQuestionForm(String feedbackSessionName,int questionsSize,Map<String,Boolean> questionHasResponses,String courseId,FeedbackQuestionAttributes question){
  FeedbackQuestionEditForm qnForm=new FeedbackQuestionEditForm();
  qnForm.setAction(Const.ActionURIs.INSTRUCTOR_FEEDBACK_QUESTION_EDIT);
  qnForm.setCourseId(courseId);
  qnForm.setFeedbackSessionName(feedbackSessionName);
  qnForm.setQuestion(question);
  qnForm.setQuestionNumberSuffix(""String_Node_Str"" + question.questionNumber);
  qnForm.setQuestionNumberOptions(getQuestionNumberOptions(questionsSize));
  FeedbackQuestionFeedbackPathSettings feedbackPathSettings=new FeedbackQuestionFeedbackPathSettings();
  feedbackPathSettings.setGiverParticipantOptions(getParticipantOptions(question,true));
  feedbackPathSettings.setRecipientParticipantOptions(getParticipantOptions(question,false));
  boolean isNumberOfEntitiesToGiveFeedbackToChecked=question.numberOfEntitiesToGiveFeedbackTo != Const.MAX_POSSIBLE_RECIPIENTS;
  feedbackPathSettings.setNumberOfEntitiesToGiveFeedbackToChecked(isNumberOfEntitiesToGiveFeedbackToChecked);
  feedbackPathSettings.setNumOfEntitiesToGiveFeedbackToValue(isNumberOfEntitiesToGiveFeedbackToChecked ? question.numberOfEntitiesToGiveFeedbackTo : 1);
  qnForm.setFeedbackPathSettings(feedbackPathSettings);
  Map<String,Boolean> isGiverNameVisibleFor=new HashMap<String,Boolean>();
  for (  FeedbackParticipantType giverType : question.showGiverNameTo) {
    isGiverNameVisibleFor.put(giverType.name(),true);
  }
  Map<String,Boolean> isRecipientNameVisibleFor=new HashMap<String,Boolean>();
  for (  FeedbackParticipantType recipientType : question.showRecipientNameTo) {
    isRecipientNameVisibleFor.put(recipientType.name(),true);
  }
  Map<String,Boolean> isResponsesVisibleFor=new HashMap<String,Boolean>();
  for (  FeedbackParticipantType participantType : question.showResponsesTo) {
    isResponsesVisibleFor.put(participantType.name(),true);
  }
  FeedbackQuestionVisibilitySettings visibilitySettings=new FeedbackQuestionVisibilitySettings(question.getVisibilityMessage(),isResponsesVisibleFor,isGiverNameVisibleFor,isRecipientNameVisibleFor);
  qnForm.setVisibilitySettings(visibilitySettings);
  qnForm.setQuestionHasResponses(questionHasResponses.get(question.getId()));
  qnForm.setQuestionSpecificEditFormHtml(question.getQuestionDetails().getQuestionSpecificEditFormHtml(question.questionNumber));
  qnForm.setEditable(false);
  qnForms.add(qnForm);
}",0.6069991954947708
62806,"private List<FeedbackResponseCommentRow> createFeedbackResponseCommentRows(FeedbackSessionResultsBundle feedbackResultBundle,FeedbackResponseAttributes responseEntry,CourseRoster roster){
  List<FeedbackResponseCommentRow> feedbackResponseCommentRows=new ArrayList<FeedbackResponseCommentRow>();
  List<FeedbackResponseCommentAttributes> frcList=feedbackResultBundle.responseComments.get(responseEntry.getId());
  for (  FeedbackResponseCommentAttributes frc : frcList) {
    String frCommentGiver=frc.giverEmail;
    InstructorAttributes instructor=roster.getInstructorForEmail(frc.giverEmail);
    if (instructor != null) {
      frCommentGiver=instructor.displayedName + ""String_Node_Str"" + instructor.name;
    }
    String lastEditorDisplay=null;
    if (frc.lastEditorEmail != null) {
      InstructorAttributes lastEditor=roster.getInstructorForEmail(frc.lastEditorEmail);
      lastEditorDisplay=lastEditor.displayedName + ""String_Node_Str"" + lastEditor.name;
    }
    String creationTime=TimeHelper.formatDate(frc.createdAt);
    String editedAt=frc.getEditedAtTextForStudent(frCommentGiver.equals(""String_Node_Str""),lastEditorDisplay);
    String comment=frc.commentText.getValue();
    StudentCommentsFeedbackResponseCommentRow feedbackResponseCommentRow=new StudentCommentsFeedbackResponseCommentRow(frCommentGiver,comment,creationTime,editedAt);
    feedbackResponseCommentRows.add(feedbackResponseCommentRow);
  }
  return feedbackResponseCommentRows;
}","private List<FeedbackResponseComment> createFeedbackResponseCommentRows(FeedbackSessionResultsBundle feedbackResultBundle,FeedbackResponseAttributes responseEntry,CourseRoster roster){
  List<FeedbackResponseComment> feedbackResponseCommentRows=new ArrayList<FeedbackResponseComment>();
  List<FeedbackResponseCommentAttributes> frcList=feedbackResultBundle.responseComments.get(responseEntry.getId());
  for (  FeedbackResponseCommentAttributes frc : frcList) {
    String frCommentGiver=frc.giverEmail;
    InstructorAttributes instructor=roster.getInstructorForEmail(frc.giverEmail);
    if (instructor != null) {
      frCommentGiver=instructor.displayedName + ""String_Node_Str"" + instructor.name;
    }
    FeedbackResponseComment feedbackResponseCommentRow=new FeedbackResponseComment(frc,frCommentGiver);
    feedbackResponseCommentRows.add(feedbackResponseCommentRow);
  }
  return feedbackResponseCommentRows;
}",0.7286432160804021
62807,"private CourseEditInstructorPanel createInstructorPanel(int instructorIndex,InstructorAttributes instructor,List<String> sectionNames,List<String> feedbackNames){
  CourseEditInstructorPanel instructorPanel=new CourseEditInstructorPanel(instructorToShowIndex,instructorIndex,currentInstructor,sectionNames,feedbackNames);
  if (instructor != null) {
    String buttonContent=""String_Node_Str"";
    boolean isDisabled=!currentInstructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_INSTRUCTOR);
    String href;
    String onClick;
    if (instructor.googleId == null) {
      href=getInstructorCourseInstructorRemindLink(instructor.courseId,instructor.email);
      onClick=""String_Node_Str"" + instructor.courseId + ""String_Node_Str""+ instructor.email+ ""String_Node_Str"";
      instructorPanel.setResendInviteButton(createButton(buttonContent,""String_Node_Str"",""String_Node_Str"" + instructorPanel.getIndex(),href,Const.Tooltips.COURSE_INSTRUCTOR_REMIND,onClick,isDisabled));
    }
    buttonContent=""String_Node_Str"";
    instructorPanel.setEditButton(createButton(buttonContent,""String_Node_Str"",""String_Node_Str"" + instructorPanel.getIndex(),""String_Node_Str"",Const.Tooltips.COURSE_INSTRUCTOR_EDIT,null,isDisabled));
    buttonContent=""String_Node_Str"";
    href=getInstructorCourseInstructorDeleteLink(instructor.courseId,instructor.email);
    onClick=""String_Node_Str"" + instructor.courseId + ""String_Node_Str""+ instructor.email+ ""String_Node_Str""+ instructor.email.equals(this.account.email)+ ""String_Node_Str"";
    instructorPanel.setDeleteButton(createButton(buttonContent,""String_Node_Str"",""String_Node_Str"" + instructorPanel.getIndex(),href,Const.Tooltips.COURSE_INSTRUCTOR_DELETE,onClick,isDisabled));
  }
  return instructorPanel;
}","private CourseEditInstructorPanel createInstructorPanel(int instructorIndex,InstructorAttributes instructor,List<String> sectionNames,List<String> feedbackNames){
  CourseEditInstructorPanel instructorPanel=new CourseEditInstructorPanel(instructorToShowIndex,instructorIndex,instructor,sectionNames,feedbackNames);
  if (instructor != null) {
    String buttonContent=""String_Node_Str"";
    boolean isDisabled=!currentInstructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_INSTRUCTOR);
    String href;
    String onClick;
    if (instructor.googleId == null) {
      href=getInstructorCourseInstructorRemindLink(instructor.courseId,instructor.email);
      onClick=""String_Node_Str"" + instructor.courseId + ""String_Node_Str""+ instructor.email+ ""String_Node_Str"";
      instructorPanel.setResendInviteButton(createButton(buttonContent,""String_Node_Str"",""String_Node_Str"" + instructorPanel.getIndex(),href,Const.Tooltips.COURSE_INSTRUCTOR_REMIND,onClick,isDisabled));
    }
    buttonContent=""String_Node_Str"";
    instructorPanel.setEditButton(createButton(buttonContent,""String_Node_Str"",""String_Node_Str"" + instructorPanel.getIndex(),""String_Node_Str"",Const.Tooltips.COURSE_INSTRUCTOR_EDIT,null,isDisabled));
    buttonContent=""String_Node_Str"";
    href=getInstructorCourseInstructorDeleteLink(instructor.courseId,instructor.email);
    onClick=""String_Node_Str"" + instructor.courseId + ""String_Node_Str""+ instructor.email+ ""String_Node_Str""+ instructor.email.equals(this.account.email)+ ""String_Node_Str"";
    instructorPanel.setDeleteButton(createButton(buttonContent,""String_Node_Str"",""String_Node_Str"" + instructorPanel.getIndex(),href,Const.Tooltips.COURSE_INSTRUCTOR_DELETE,onClick,isDisabled));
  }
  return instructorPanel;
}",0.9974497024652876
62808,"@Override public ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  Assumption.assertNotNull(courseId);
  String studentEmail=getRequestParamValue(Const.ParamsNames.STUDENT_EMAIL);
  Assumption.assertNotNull(studentEmail);
  InstructorAttributes instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  new GateKeeper().verifyAccessible(instructor,logic.getCourse(courseId),Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_STUDENT);
  InstructorCourseStudentDetailsEditPageData data=new InstructorCourseStudentDetailsEditPageData(account);
  data.student=logic.getStudentForEmail(courseId,studentEmail);
  data.regKey=logic.getEncryptedKeyForStudent(courseId,studentEmail);
  data.hasSection=logic.hasIndicatedSections(courseId);
  data.newEmail=data.student.email;
  statusToAdmin=""String_Node_Str"" + ""String_Node_Str"" + studentEmail + ""String_Node_Str""+ ""String_Node_Str""+ courseId+ ""String_Node_Str"";
  return createShowPageResult(Const.ViewURIs.INSTRUCTOR_COURSE_STUDENT_EDIT,data);
}","@Override public ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  Assumption.assertNotNull(courseId);
  String studentEmail=getRequestParamValue(Const.ParamsNames.STUDENT_EMAIL);
  Assumption.assertNotNull(studentEmail);
  InstructorAttributes instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  new GateKeeper().verifyAccessible(instructor,logic.getCourse(courseId),Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_STUDENT);
  StudentAttributes student=logic.getStudentForEmail(courseId,studentEmail);
  boolean hasSection=logic.hasIndicatedSections(courseId);
  InstructorCourseStudentDetailsEditPageData data=new InstructorCourseStudentDetailsEditPageData(account);
  data.init(student,student.email,hasSection);
  statusToAdmin=""String_Node_Str"" + ""String_Node_Str"" + studentEmail + ""String_Node_Str""+ ""String_Node_Str""+ courseId+ ""String_Node_Str"";
  return createShowPageResult(Const.ViewURIs.INSTRUCTOR_COURSE_STUDENT_EDIT,data);
}",0.8334119867862199
62809,"@Override public ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  Assumption.assertPostParamNotNull(Const.ParamsNames.COURSE_ID,courseId);
  String studentEmail=getRequestParamValue(Const.ParamsNames.STUDENT_EMAIL);
  Assumption.assertPostParamNotNull(Const.ParamsNames.STUDENT_EMAIL,studentEmail);
  InstructorAttributes instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  new GateKeeper().verifyAccessible(instructor,logic.getCourse(courseId),Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_STUDENT);
  InstructorCourseStudentDetailsEditPageData data=new InstructorCourseStudentDetailsEditPageData(account);
  data.student=logic.getStudentForEmail(courseId,studentEmail);
  data.regKey=logic.getEncryptedKeyForStudent(courseId,studentEmail);
  data.hasSection=logic.hasIndicatedSections(courseId);
  data.student.name=getRequestParamValue(Const.ParamsNames.STUDENT_NAME);
  data.student.email=getRequestParamValue(Const.ParamsNames.NEW_STUDENT_EMAIL);
  data.student.team=getRequestParamValue(Const.ParamsNames.TEAM_NAME);
  data.student.section=getRequestParamValue(Const.ParamsNames.SECTION_NAME);
  data.student.comments=getRequestParamValue(Const.ParamsNames.COMMENTS);
  data.student.name=Sanitizer.sanitizeName(data.student.name);
  data.student.email=Sanitizer.sanitizeEmail(data.student.email);
  data.student.team=Sanitizer.sanitizeName(data.student.team);
  data.student.section=Sanitizer.sanitizeName(data.student.section);
  data.student.comments=Sanitizer.sanitizeTextField(data.student.comments);
  try {
    data.student.updateWithExistingRecord(logic.getStudentForEmail(courseId,studentEmail));
    logic.validateSections(Arrays.asList(data.student),courseId);
    logic.updateStudent(studentEmail,data.student);
    statusToUser.add(Const.StatusMessages.STUDENT_EDITED);
    statusToAdmin=""String_Node_Str"" + studentEmail + ""String_Node_Str""+ courseId+ ""String_Node_Str""+ ""String_Node_Str""+ data.student.email+ ""String_Node_Str""+ data.student.team+ ""String_Node_Str""+ data.student.comments;
    RedirectResult result=createRedirectResult(Const.ActionURIs.INSTRUCTOR_COURSE_DETAILS_PAGE);
    result.addResponseParam(Const.ParamsNames.COURSE_ID,courseId);
    return result;
  }
 catch (  InvalidParametersException|EnrollException e) {
    setStatusForException(e);
    data.newEmail=data.student.email;
    data.student.email=studentEmail;
    return createShowPageResult(Const.ViewURIs.INSTRUCTOR_COURSE_STUDENT_EDIT,data);
  }
}","@Override public ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  Assumption.assertPostParamNotNull(Const.ParamsNames.COURSE_ID,courseId);
  String studentEmail=getRequestParamValue(Const.ParamsNames.STUDENT_EMAIL);
  Assumption.assertPostParamNotNull(Const.ParamsNames.STUDENT_EMAIL,studentEmail);
  InstructorAttributes instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  new GateKeeper().verifyAccessible(instructor,logic.getCourse(courseId),Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_STUDENT);
  InstructorCourseStudentDetailsEditPageData data=new InstructorCourseStudentDetailsEditPageData(account);
  StudentAttributes student=logic.getStudentForEmail(courseId,studentEmail);
  data.hasSection=logic.hasIndicatedSections(courseId);
  student.name=getRequestParamValue(Const.ParamsNames.STUDENT_NAME);
  student.email=getRequestParamValue(Const.ParamsNames.NEW_STUDENT_EMAIL);
  student.team=getRequestParamValue(Const.ParamsNames.TEAM_NAME);
  student.section=getRequestParamValue(Const.ParamsNames.SECTION_NAME);
  student.comments=getRequestParamValue(Const.ParamsNames.COMMENTS);
  student.name=Sanitizer.sanitizeName(student.name);
  student.email=Sanitizer.sanitizeEmail(student.email);
  student.team=Sanitizer.sanitizeName(student.team);
  student.section=Sanitizer.sanitizeName(student.section);
  student.comments=Sanitizer.sanitizeTextField(student.comments);
  try {
    student.updateWithExistingRecord(logic.getStudentForEmail(courseId,studentEmail));
    logic.validateSections(Arrays.asList(student),courseId);
    logic.updateStudent(studentEmail,student);
    statusToUser.add(Const.StatusMessages.STUDENT_EDITED);
    statusToAdmin=""String_Node_Str"" + studentEmail + ""String_Node_Str""+ courseId+ ""String_Node_Str""+ ""String_Node_Str""+ student.email+ ""String_Node_Str""+ student.team+ ""String_Node_Str""+ student.comments;
    RedirectResult result=createRedirectResult(Const.ActionURIs.INSTRUCTOR_COURSE_DETAILS_PAGE);
    result.addResponseParam(Const.ParamsNames.COURSE_ID,courseId);
    return result;
  }
 catch (  InvalidParametersException|EnrollException e) {
    setStatusForException(e);
    data.newEmail=student.email;
    student.email=studentEmail;
    data.init(student,data.newEmail,data.hasSection);
    return createShowPageResult(Const.ViewURIs.INSTRUCTOR_COURSE_STUDENT_EDIT,data);
  }
}",0.89446227929374
62810,"private List<Map<String,String>> createSessionRows(List<FeedbackSessionDetailsBundle> feedbackSessions,String courseId,Map<String,Boolean> sessionSubmissionStatusMap){
  List<Map<String,String>> rows=new ArrayList<Map<String,String>>();
  int sessionIndex=0;
  for (  FeedbackSessionDetailsBundle session : feedbackSessions) {
    FeedbackSessionAttributes feedbackSession=session.feedbackSession;
    String sessionName=feedbackSession.feedbackSessionName;
    boolean hasSubmitted=sessionSubmissionStatusMap.get(courseId + ""String_Node_Str"" + sessionName);
    Map<String,String> columns=new HashMap<String,String>();
    columns.put(""String_Node_Str"",PageData.sanitizeForHtml(sessionName));
    columns.put(""String_Node_Str"",TimeHelper.formatTime(feedbackSession.endTime));
    columns.put(""String_Node_Str"",getStudentHoverMessageForSession(feedbackSession,hasSubmitted));
    columns.put(""String_Node_Str"",getStudentStatusForSession(feedbackSession,hasSubmitted));
    columns.put(""String_Node_Str"",getStudentFeedbackSessionActions(feedbackSession,sessionIndex,hasSubmitted));
    rows.add(columns);
  }
  return rows;
}","private List<Map<String,String>> createSessionRows(List<FeedbackSessionDetailsBundle> feedbackSessions,String courseId,Map<String,Boolean> sessionSubmissionStatusMap,int sessionIdx){
  List<Map<String,String>> rows=new ArrayList<Map<String,String>>();
  for (  FeedbackSessionDetailsBundle session : feedbackSessions) {
    FeedbackSessionAttributes feedbackSession=session.feedbackSession;
    String sessionName=feedbackSession.feedbackSessionName;
    boolean hasSubmitted=sessionSubmissionStatusMap.get(courseId + ""String_Node_Str"" + sessionName);
    Map<String,String> columns=new HashMap<String,String>();
    columns.put(""String_Node_Str"",PageData.sanitizeForHtml(sessionName));
    columns.put(""String_Node_Str"",TimeHelper.formatTime(feedbackSession.endTime));
    columns.put(""String_Node_Str"",getStudentHoverMessageForSession(feedbackSession,hasSubmitted));
    columns.put(""String_Node_Str"",getStudentStatusForSession(feedbackSession,hasSubmitted));
    columns.put(""String_Node_Str"",getStudentFeedbackSessionActions(feedbackSession,sessionIdx,hasSubmitted));
    columns.put(""String_Node_Str"",Integer.toString(sessionIdx));
    rows.add(columns);
    ++sessionIdx;
  }
  return rows;
}",0.9465977605512488
62811,"private void setCourseTables(List<CourseDetailsBundle> courses,Map<String,Boolean> sessionSubmissionStatusMap){
  courseTables=new ArrayList<CourseTable>();
  for (  CourseDetailsBundle courseDetails : courses) {
    CourseTable courseTable=new CourseTable(courseDetails.course,createCourseTableLinks(courseDetails.course.id),createSessionRows(courseDetails.feedbackSessions,courseDetails.course.id,sessionSubmissionStatusMap));
    courseTables.add(courseTable);
  }
}","private void setCourseTables(List<CourseDetailsBundle> courses,Map<String,Boolean> sessionSubmissionStatusMap){
  courseTables=new ArrayList<CourseTable>();
  int startingSessionIdx=0;
  for (  CourseDetailsBundle courseDetails : courses) {
    CourseTable courseTable=new CourseTable(courseDetails.course,createCourseTableLinks(courseDetails.course.id),createSessionRows(courseDetails.feedbackSessions,courseDetails.course.id,sessionSubmissionStatusMap,startingSessionIdx));
    startingSessionIdx+=courseDetails.feedbackSessions.size();
    courseTables.add(courseTable);
  }
}",0.8416030534351145
62812,"@Override public String getQuestionResultStatisticsHtml(List<FeedbackResponseAttributes> responses,FeedbackQuestionAttributes question,PageData pageData,FeedbackSessionResultsBundle bundle,String view){
  @SuppressWarnings(""String_Node_Str"") String html=""String_Node_Str"";
  int averageLength=0;
  int minLength=Integer.MAX_VALUE;
  int maxLength=Integer.MIN_VALUE;
  int numResponses=0;
  int totalLength=0;
  for (  FeedbackResponseAttributes response : responses) {
    numResponses++;
    String answerString=response.getResponseDetails().getAnswerString();
    minLength=(StringHelper.countWords(answerString) < minLength) ? StringHelper.countWords(answerString) : minLength;
    maxLength=(StringHelper.countWords(answerString) > maxLength) ? StringHelper.countWords(answerString) : maxLength;
    totalLength+=StringHelper.countWords(answerString);
  }
  averageLength=totalLength / numResponses;
  html=FeedbackQuestionFormTemplates.populateTemplate(FeedbackQuestionFormTemplates.TEXT_RESULT_STATS,""String_Node_Str"",Integer.toString(averageLength),""String_Node_Str"",(minLength == Integer.MAX_VALUE) ? ""String_Node_Str"" : Integer.toString(minLength),""String_Node_Str"",(maxLength == Integer.MIN_VALUE) ? ""String_Node_Str"" : Integer.toString(maxLength));
  return ""String_Node_Str"";
}","@Override public String getQuestionResultStatisticsHtml(List<FeedbackResponseAttributes> responses,FeedbackQuestionAttributes question,PageData pageData,FeedbackSessionResultsBundle bundle,String view){
  if (responses.isEmpty()) {
    return ""String_Node_Str"";
  }
  @SuppressWarnings(""String_Node_Str"") String html=""String_Node_Str"";
  int averageLength=0;
  int minLength=Integer.MAX_VALUE;
  int maxLength=Integer.MIN_VALUE;
  int numResponses=0;
  int totalLength=0;
  for (  FeedbackResponseAttributes response : responses) {
    numResponses++;
    String answerString=response.getResponseDetails().getAnswerString();
    minLength=(StringHelper.countWords(answerString) < minLength) ? StringHelper.countWords(answerString) : minLength;
    maxLength=(StringHelper.countWords(answerString) > maxLength) ? StringHelper.countWords(answerString) : maxLength;
    totalLength+=StringHelper.countWords(answerString);
  }
  averageLength=totalLength / numResponses;
  html=FeedbackQuestionFormTemplates.populateTemplate(FeedbackQuestionFormTemplates.TEXT_RESULT_STATS,""String_Node_Str"",Integer.toString(averageLength),""String_Node_Str"",(minLength == Integer.MAX_VALUE) ? ""String_Node_Str"" : Integer.toString(minLength),""String_Node_Str"",(maxLength == Integer.MIN_VALUE) ? ""String_Node_Str"" : Integer.toString(maxLength));
  return ""String_Node_Str"";
}",0.9761453994698978
62813,"@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String needAjax=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_NEED_AJAX);
  boolean isHtmlTableNeeded=getRequestParamAsBoolean(Const.ParamsNames.CSV_TO_HTML_TABLE_NEEDED);
  int queryRange;
  if (needAjax != null) {
    queryRange=QUERY_RANGE_FOR_AJAX_TESTING;
  }
 else {
    queryRange=DEFAULT_QUERY_RANGE;
  }
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  String feedbackSessionName=getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);
  Assumption.assertNotNull(courseId);
  Assumption.assertNotNull(feedbackSessionName);
  statusToAdmin=""String_Node_Str"" + ""String_Node_Str"" + feedbackSessionName + ""String_Node_Str""+ ""String_Node_Str""+ courseId;
  InstructorAttributes instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  FeedbackSessionAttributes session=logic.getFeedbackSession(feedbackSessionName,courseId);
  boolean isCreatorOnly=true;
  new GateKeeper().verifyAccessible(instructor,session,!isCreatorOnly);
  InstructorFeedbackResultsPageData data=new InstructorFeedbackResultsPageData(account);
  data.selectedSection=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_GROUPBYSECTION);
  data.instructor=instructor;
  data.showStats=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_SHOWSTATS);
  data.groupByTeam=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_GROUPBYTEAM);
  data.sortType=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_SORTTYPE);
  data.courseId=courseId;
  data.feedbackSessionName=feedbackSessionName;
  if (data.selectedSection == null) {
    data.selectedSection=ALL_SECTION_OPTION;
  }
  if (isHtmlTableNeeded) {
    try {
      if (!data.selectedSection.contentEquals(ALL_SECTION_OPTION)) {
        data.sessionResultsHtmlTableAsString=StringHelper.csvToHtmlTable(logic.getFeedbackSessionResultSummaryInSectionAsCsv(courseId,feedbackSessionName,instructor.email,data.selectedSection));
      }
 else {
        data.sessionResultsHtmlTableAsString=StringHelper.csvToHtmlTable(logic.getFeedbackSessionResultSummaryAsCsv(courseId,feedbackSessionName,instructor.email));
      }
    }
 catch (    ExceedingRangeException e) {
      data.sessionResultsHtmlTableAsString=""String_Node_Str"";
      data.ajaxStatus=""String_Node_Str"";
    }
    return createAjaxResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_TOP,data);
  }
 else {
    data.sessionResultsHtmlTableAsString=""String_Node_Str"";
    data.ajaxStatus=""String_Node_Str"";
  }
  String startIndex=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_MAIN_INDEX);
  if (startIndex != null) {
    data.startIndex=Integer.parseInt(startIndex);
  }
  if (data.sortType == null) {
    data.showStats=new String(""String_Node_Str"");
    data.groupByTeam=new String(""String_Node_Str"");
    data.sortType=new String(""String_Node_Str"");
  }
  data.sections=logic.getSectionNamesForCourse(courseId);
  String questionNumStr=getRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_NUMBER);
  if (data.selectedSection.equals(ALL_SECTION_OPTION) && questionNumStr == null) {
    data.bundle=logic.getFeedbackSessionResultsForInstructorWithinRangeFromView(feedbackSessionName,courseId,data.instructor.email,queryRange,data.sortType);
  }
 else   if (data.sortType.equals(""String_Node_Str"")) {
    if (questionNumStr == null) {
      data.bundle=logic.getFeedbackSessionResultsForInstructorInSection(feedbackSessionName,courseId,data.instructor.email,data.selectedSection);
    }
 else {
      int questionNum=Integer.parseInt(questionNumStr);
      data.bundle=logic.getFeedbackSessionResultsForInstructorFromQuestion(feedbackSessionName,courseId,data.instructor.email,questionNum);
    }
  }
 else   if (data.sortType.equals(""String_Node_Str"") || data.sortType.equals(""String_Node_Str"")) {
    data.bundle=logic.getFeedbackSessionResultsForInstructorFromSectionWithinRange(feedbackSessionName,courseId,data.instructor.email,data.selectedSection,DEFAULT_SECTION_QUERY_RANGE);
  }
 else   if (data.sortType.equals(""String_Node_Str"") || data.sortType.equals(""String_Node_Str"")) {
    data.bundle=logic.getFeedbackSessionResultsForInstructorToSectionWithinRange(feedbackSessionName,courseId,data.instructor.email,data.selectedSection,DEFAULT_SECTION_QUERY_RANGE);
  }
  if (data.bundle == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + feedbackSessionName + ""String_Node_Str""+ courseId+ ""String_Node_Str"");
  }
  data.setShouldCollapsed(data.bundle.responses.size() > 500);
  if (data.selectedSection.equals(ALL_SECTION_OPTION) && data.bundle.isComplete == false) {
    statusToUser.add(Const.StatusMessages.FEEDBACK_RESULTS_SECTIONVIEWWARNING);
    isError=true;
  }
switch (data.sortType) {
case ""String_Node_Str"":
    return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_QUESTION,data);
case ""String_Node_Str"":
  return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_RECIPIENT_GIVER_QUESTION,data);
case ""String_Node_Str"":
return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_GIVER_RECIPIENT_QUESTION,data);
case ""String_Node_Str"":
return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_RECIPIENT_QUESTION_GIVER,data);
case ""String_Node_Str"":
return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_GIVER_QUESTION_RECIPIENT,data);
default :
data.sortType=""String_Node_Str"";
return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_RECIPIENT_GIVER_QUESTION,data);
}
}","@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String needAjax=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_NEED_AJAX);
  boolean isHtmlTableNeeded=getRequestParamAsBoolean(Const.ParamsNames.CSV_TO_HTML_TABLE_NEEDED);
  int queryRange;
  if (needAjax != null) {
    queryRange=QUERY_RANGE_FOR_AJAX_TESTING;
  }
 else {
    queryRange=DEFAULT_QUERY_RANGE;
  }
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  String feedbackSessionName=getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);
  Assumption.assertNotNull(courseId);
  Assumption.assertNotNull(feedbackSessionName);
  statusToAdmin=""String_Node_Str"" + ""String_Node_Str"" + feedbackSessionName + ""String_Node_Str""+ ""String_Node_Str""+ courseId;
  InstructorAttributes instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  FeedbackSessionAttributes session=logic.getFeedbackSession(feedbackSessionName,courseId);
  boolean isCreatorOnly=true;
  new GateKeeper().verifyAccessible(instructor,session,!isCreatorOnly);
  InstructorFeedbackResultsPageData data=new InstructorFeedbackResultsPageData(account);
  data.selectedSection=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_GROUPBYSECTION);
  data.instructor=instructor;
  data.showStats=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_SHOWSTATS);
  data.groupByTeam=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_GROUPBYTEAM);
  data.sortType=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_SORTTYPE);
  data.courseId=courseId;
  data.feedbackSessionName=feedbackSessionName;
  if (data.selectedSection == null) {
    data.selectedSection=ALL_SECTION_OPTION;
  }
  if (isHtmlTableNeeded) {
    try {
      if (!data.selectedSection.contentEquals(ALL_SECTION_OPTION)) {
        data.sessionResultsHtmlTableAsString=StringHelper.csvToHtmlTable(logic.getFeedbackSessionResultSummaryInSectionAsCsv(courseId,feedbackSessionName,instructor.email,data.selectedSection));
      }
 else {
        data.sessionResultsHtmlTableAsString=StringHelper.csvToHtmlTable(logic.getFeedbackSessionResultSummaryAsCsv(courseId,feedbackSessionName,instructor.email));
      }
    }
 catch (    ExceedingRangeException e) {
      data.sessionResultsHtmlTableAsString=""String_Node_Str"";
      data.ajaxStatus=""String_Node_Str"";
    }
    return createAjaxResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_TOP,data);
  }
 else {
    data.sessionResultsHtmlTableAsString=""String_Node_Str"";
    data.ajaxStatus=""String_Node_Str"";
  }
  String startIndex=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_MAIN_INDEX);
  if (startIndex != null) {
    data.startIndex=Integer.parseInt(startIndex);
  }
  if (data.sortType == null) {
    data.showStats=new String(""String_Node_Str"");
    data.groupByTeam=new String(""String_Node_Str"");
    data.sortType=new String(""String_Node_Str"");
  }
  data.sections=logic.getSectionNamesForCourse(courseId);
  String questionNumStr=getRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_NUMBER);
  if (data.selectedSection.equals(ALL_SECTION_OPTION) && questionNumStr == null) {
    data.bundle=logic.getFeedbackSessionResultsForInstructorWithinRangeFromView(feedbackSessionName,courseId,data.instructor.email,queryRange,data.sortType);
  }
 else   if (data.sortType.equals(""String_Node_Str"")) {
    if (questionNumStr == null) {
      data.bundle=logic.getFeedbackSessionResultsForInstructorInSection(feedbackSessionName,courseId,data.instructor.email,data.selectedSection);
    }
 else {
      int questionNum=Integer.parseInt(questionNumStr);
      data.bundle=logic.getFeedbackSessionResultsForInstructorFromQuestion(feedbackSessionName,courseId,data.instructor.email,questionNum);
    }
  }
 else   if (data.sortType.equals(""String_Node_Str"") || data.sortType.equals(""String_Node_Str"")) {
    data.bundle=logic.getFeedbackSessionResultsForInstructorFromSectionWithinRange(feedbackSessionName,courseId,data.instructor.email,data.selectedSection,DEFAULT_SECTION_QUERY_RANGE);
  }
 else   if (data.sortType.equals(""String_Node_Str"") || data.sortType.equals(""String_Node_Str"")) {
    data.bundle=logic.getFeedbackSessionResultsForInstructorToSectionWithinRange(feedbackSessionName,courseId,data.instructor.email,data.selectedSection,DEFAULT_SECTION_QUERY_RANGE);
  }
  if (data.bundle == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + feedbackSessionName + ""String_Node_Str""+ courseId+ ""String_Node_Str"");
  }
  data.setShouldCollapsed(data.bundle.responses.size() > 500);
  if (data.selectedSection.equals(ALL_SECTION_OPTION) && data.bundle.isComplete == false) {
    statusToUser.add(Const.StatusMessages.FEEDBACK_RESULTS_SECTIONVIEWWARNING);
    isError=true;
  }
switch (data.sortType) {
case ""String_Node_Str"":
    data.init(data.bundle);
  return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_QUESTION,data);
case ""String_Node_Str"":
return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_RECIPIENT_GIVER_QUESTION,data);
case ""String_Node_Str"":
return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_GIVER_RECIPIENT_QUESTION,data);
case ""String_Node_Str"":
return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_RECIPIENT_QUESTION_GIVER,data);
case ""String_Node_Str"":
return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_GIVER_QUESTION_RECIPIENT,data);
default :
data.sortType=""String_Node_Str"";
return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_RECIPIENT_GIVER_QUESTION,data);
}
}",0.997486986178424
62814,"public void init(){
}","public void init(FeedbackSessionResultsBundle bundle){
  this.bundle=bundle;
  Map<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>> questionToResponseMap=bundle.getQuestionResponseMap();
  questionPanels=new ArrayList<InstructorResultsQuestionTable>();
  for (  Map.Entry<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>> entry : questionToResponseMap.entrySet()) {
    FeedbackQuestionAttributes question=entry.getKey();
    List<FeedbackResponseAttributes> responses=entry.getValue();
    questionPanels.add(buildQuestionTable(question,responses));
  }
}",0.07
62815,"public InstructorResultsQuestionTable(FeedbackSessionResultsBundle bundle,String questionStatisticsHtml,List<InstructorResultsResponseRow> responses,FeedbackQuestionAttributes question){
  this.questionStatisticsHtml=questionStatisticsHtml;
  this.responses=responses;
  this.question=question;
  this.questionText=bundle.getQuestionText(question.getId());
  FeedbackQuestionDetails questionDetails=question.getQuestionDetails();
  this.additionalInfoText=questionDetails.getQuestionAdditionalInfoHtml(question.questionNumber,""String_Node_Str"");
}","public InstructorResultsQuestionTable(InstructorFeedbackResultsPageData data,List<FeedbackResponseAttributes> responses,String questionStatisticsHtml,List<InstructorResultsResponseRow> responseRows,FeedbackQuestionAttributes question){
  this.courseId=question.courseId;
  this.feedbackSessionName=question.feedbackSessionName;
  this.questionStatisticsHtml=questionStatisticsHtml;
  this.responses=responseRows;
  this.isQuestionHasResponses=!responses.isEmpty();
  this.question=question;
  this.questionText=data.bundle.getQuestionText(question.getId());
  this.panelClass=responses.isEmpty() ? ""String_Node_Str"" : ""String_Node_Str"";
  FeedbackQuestionDetails questionDetails=question.getQuestionDetails();
  this.additionalInfoText=questionDetails.getQuestionAdditionalInfoHtml(question.questionNumber,""String_Node_Str"");
  this.questionStatisticsTable=questionDetails.getQuestionResultStatisticsHtml(responses,question,data,data.bundle,""String_Node_Str"");
}",0.6361829025844931
62816,"public ModerationsButton getModerationButton(){
  return moderationButton;
}","public ModerationButton getModerationButton(){
  return moderationButton;
}",0.9933774834437086
62817,"public InstructorResultsResponseRow(String giverDisplayableIdentifier,String giverTeam,String recipientDisplayableIdentifier,String recipientTeam,String displayableResponse,boolean isModerationsButtonShown,ModerationsButton moderationButton){
  this.giverDisplayableIdentifier=giverDisplayableIdentifier;
  this.giverTeam=giverTeam;
  this.recipientDisplayableIdentifier=recipientDisplayableIdentifier;
  this.recipientTeam=recipientTeam;
  this.displayableResponse=displayableResponse;
  this.isModerationsButtonShown=isModerationsButtonShown;
  this.moderationButton=moderationButton;
}","public InstructorResultsResponseRow(String giverDisplayableIdentifier,String giverTeam,String recipientDisplayableIdentifier,String recipientTeam,String displayableResponse,boolean isModerationsButtonShown,ModerationButton moderationButton){
  this.giverDisplayableIdentifier=giverDisplayableIdentifier;
  this.giverTeam=giverTeam;
  this.recipientDisplayableIdentifier=recipientDisplayableIdentifier;
  this.recipientTeam=recipientTeam;
  this.displayableResponse=displayableResponse;
  this.isModerationsButtonDisplayed=isModerationsButtonShown;
  this.moderationButton=moderationButton;
}",0.9533502968617472
62818,"public ModerationButton(boolean isAllowedToModerate,boolean isDisabled,int questionNumber,String giverIdentifier,String courseId,String feedbackSessionName,FeedbackQuestionAttributes question){
  this.isAllowedToModerate=isAllowedToModerate;
  this.isDisabled=isDisabled;
  this.questionNumber=questionNumber;
  this.giverIdentifier=question.giverType.isTeam() ? giverIdentifier.replace(Const.TEAM_OF_EMAIL_OWNER,""String_Node_Str"") : giverIdentifier;
  this.courseId=courseId;
  this.feedbackSessionName=feedbackSessionName;
}","public ModerationButton(boolean isAllowedToModerate,boolean isDisabled,int questionNumber,String giverIdentifier,String courseId,String feedbackSessionName,FeedbackQuestionAttributes question){
  this.isAllowedToModerate=isAllowedToModerate;
  this.isDisabled=isDisabled;
  this.questionNumber=questionNumber;
  this.giverIdentifier=giverIdentifier;
  this.courseId=courseId;
  this.feedbackSessionName=feedbackSessionName;
}",0.8937960042060988
62819,"/** 
 * Builds response rows for a given question. This not only builds response rows for existing responses, but includes  the missing responses between pairs of givers and recipients.
 * @param question
 * @param responses  existing responses for the question
 */
private List<InstructorResultsResponseRow> buildResponseRowsForQuestion(FeedbackQuestionAttributes question,List<FeedbackResponseAttributes> responses){
  List<InstructorResultsResponseRow> responseRows=new ArrayList<InstructorResultsResponseRow>();
  List<String> possibleGiversWithoutResponses=bundle.getPossibleGivers(question);
  List<String> possibleReceiversForGiver=new ArrayList<String>();
  String prevGiver=""String_Node_Str"";
  for (  FeedbackResponseAttributes response : responses) {
    if (!bundle.isGiverVisible(response) || !bundle.isRecipientVisible(response)) {
      possibleGiversWithoutResponses.clear();
      possibleReceiversForGiver.clear();
    }
    removeParticipantIdentifierFromList(question.giverType,possibleGiversWithoutResponses,response.giverEmail);
    boolean isNewGiver=!prevGiver.equals(response.giverEmail);
    if (isNewGiver) {
      responseRows.addAll(getResponseRowsBetweenGiverAndPossibleRecipients(question,question.getQuestionDetails(),possibleReceiversForGiver,prevGiver));
      String giverIdentifier=(question.giverType == FeedbackParticipantType.TEAMS) ? bundle.getFullNameFromRoster(response.giverEmail) : response.giverEmail;
      possibleReceiversForGiver=bundle.getPossibleRecipients(question,giverIdentifier);
    }
    removeParticipantIdentifierFromList(question.recipientType,possibleReceiversForGiver,response.recipientEmail);
    prevGiver=response.giverEmail;
    ModerationButton moderationButton=buildModerationButtonForExistingResponse(question,response);
    InstructorResultsResponseRow responseRow=new InstructorResultsResponseRow(bundle.getGiverNameForResponse(question,response),bundle.getTeamNameForEmail(response.giverEmail),bundle.getRecipientNameForResponse(question,response),bundle.getTeamNameForEmail(response.recipientEmail),bundle.getResponseAnswerHtml(response,question),true,moderationButton);
    responseRows.add(responseRow);
  }
  getRemainingRowsInCsvFormat(question,question.getQuestionDetails(),possibleGiversWithoutResponses,possibleReceiversForGiver,prevGiver);
  return responseRows;
}","/** 
 * Builds response rows for a given question. This not only builds response rows for existing responses, but includes  the missing responses between pairs of givers and recipients.
 * @param question
 * @param responses  existing responses for the question
 */
private List<InstructorResultsResponseRow> buildResponseRowsForQuestion(FeedbackQuestionAttributes question,List<FeedbackResponseAttributes> responses){
  List<InstructorResultsResponseRow> responseRows=new ArrayList<InstructorResultsResponseRow>();
  List<String> possibleGiversWithoutResponses=bundle.getPossibleGivers(question);
  List<String> possibleReceiversWithoutResponsesForGiver=new ArrayList<String>();
  String prevGiver=""String_Node_Str"";
  for (  FeedbackResponseAttributes response : responses) {
    if (!bundle.isGiverVisible(response) || !bundle.isRecipientVisible(response)) {
      possibleGiversWithoutResponses.clear();
      possibleReceiversWithoutResponsesForGiver.clear();
    }
    removeParticipantIdentifierFromList(question.giverType,possibleGiversWithoutResponses,response.giverEmail);
    boolean isNewGiver=!prevGiver.equals(response.giverEmail);
    if (isNewGiver) {
      responseRows.addAll(buildResponseRowsBetweenGiverAndPossibleRecipients(question,possibleReceiversWithoutResponsesForGiver,prevGiver,bundle.getNameForEmail(prevGiver),bundle.getTeamNameForEmail(prevGiver)));
      String giverIdentifier=(question.giverType == FeedbackParticipantType.TEAMS) ? bundle.getFullNameFromRoster(response.giverEmail) : response.giverEmail;
      possibleReceiversWithoutResponsesForGiver=bundle.getPossibleRecipients(question,giverIdentifier);
    }
    removeParticipantIdentifierFromList(question.recipientType,possibleReceiversWithoutResponsesForGiver,response.recipientEmail);
    prevGiver=response.giverEmail;
    ModerationButton moderationButton=buildModerationButtonForExistingResponse(question,response);
    InstructorResultsResponseRow responseRow=new InstructorResultsResponseRow(bundle.getGiverNameForResponse(question,response),bundle.getTeamNameForEmail(response.giverEmail),bundle.getRecipientNameForResponse(question,response),bundle.getTeamNameForEmail(response.recipientEmail),bundle.getResponseAnswerHtml(response,question),true,moderationButton);
    responseRows.add(responseRow);
  }
  responseRows.addAll(getRemainingResponseRows(question,possibleGiversWithoutResponses,possibleReceiversWithoutResponsesForGiver,prevGiver));
  return responseRows;
}",0.9036944790369448
62820,"private AdditionalSettingsFormSegment buildFormAdditionalSettings(FeedbackSessionAttributes newFeedbackSession){
  Date date;
  AdditionalSettingsFormSegment additionalSettings=new AdditionalSettingsFormSegment();
  boolean hasSessionVisibleDate=newFeedbackSession != null && !TimeHelper.isSpecialTime(newFeedbackSession.sessionVisibleFromTime);
  additionalSettings.setSessionVisibleDateButtonChecked(hasSessionVisibleDate);
  additionalSettings.setSessionVisibleDateValue(hasSessionVisibleDate ? TimeHelper.formatDate(newFeedbackSession.sessionVisibleFromTime) : ""String_Node_Str"");
  additionalSettings.setSessionVisibleDateDisabled(!hasSessionVisibleDate);
  date=hasSessionVisibleDate ? newFeedbackSession.sessionVisibleFromTime : null;
  additionalSettings.setSessionVisibleTimeOptions(getTimeOptionsAsElementTags(date));
  additionalSettings.setSessionVisibleAtOpenChecked(newFeedbackSession == null || Const.TIME_REPRESENTS_FOLLOW_OPENING.equals(newFeedbackSession.sessionVisibleFromTime));
  additionalSettings.setSessionVisiblePrivateChecked(newFeedbackSession != null && Const.TIME_REPRESENTS_NEVER.equals(newFeedbackSession.sessionVisibleFromTime));
  boolean hasResultVisibleDate=newFeedbackSession != null && !TimeHelper.isSpecialTime(newFeedbackSession.resultsVisibleFromTime);
  additionalSettings.setResponseVisibleDateChecked(hasResultVisibleDate);
  additionalSettings.setResponseVisibleDateValue(hasResultVisibleDate ? TimeHelper.formatDate(newFeedbackSession.resultsVisibleFromTime) : ""String_Node_Str"");
  additionalSettings.setResponseVisibleDateDisabled(!hasResultVisibleDate);
  date=hasResultVisibleDate ? newFeedbackSession.resultsVisibleFromTime : null;
  additionalSettings.setResponseVisibleTimeOptions(getTimeOptionsAsElementTags(date));
  additionalSettings.setResponseVisibleImmediatelyChecked((newFeedbackSession != null && Const.TIME_REPRESENTS_FOLLOW_VISIBLE.equals(newFeedbackSession.resultsVisibleFromTime)));
  additionalSettings.setResponseVisiblePublishManuallyChecked((newFeedbackSession == null || Const.TIME_REPRESENTS_LATER.equals(newFeedbackSession.resultsVisibleFromTime) || Const.TIME_REPRESENTS_NOW.equals(newFeedbackSession.resultsVisibleFromTime)));
  additionalSettings.setResponseVisibleNeverChecked((newFeedbackSession != null && Const.TIME_REPRESENTS_NEVER.equals(newFeedbackSession.resultsVisibleFromTime)));
  return additionalSettings;
}","private AdditionalSettingsFormSegment buildFormAdditionalSettings(FeedbackSessionAttributes newFeedbackSession){
  Date date;
  AdditionalSettingsFormSegment additionalSettings=new AdditionalSettingsFormSegment();
  boolean hasSessionVisibleDate=newFeedbackSession != null && !TimeHelper.isSpecialTime(newFeedbackSession.sessionVisibleFromTime);
  additionalSettings.setSessionVisibleDateButtonChecked(hasSessionVisibleDate);
  additionalSettings.setSessionVisibleDateValue(hasSessionVisibleDate ? TimeHelper.formatDate(newFeedbackSession.sessionVisibleFromTime) : ""String_Node_Str"");
  additionalSettings.setSessionVisibleDateDisabled(!hasSessionVisibleDate);
  date=hasSessionVisibleDate ? newFeedbackSession.sessionVisibleFromTime : null;
  additionalSettings.setSessionVisibleTimeOptions(getTimeOptionsAsElementTags(date));
  additionalSettings.setSessionVisibleAtOpenChecked(newFeedbackSession == null || Const.TIME_REPRESENTS_FOLLOW_OPENING.equals(newFeedbackSession.sessionVisibleFromTime));
  additionalSettings.setSessionVisiblePrivateChecked(newFeedbackSession != null && Const.TIME_REPRESENTS_NEVER.equals(newFeedbackSession.sessionVisibleFromTime));
  boolean hasResultVisibleDate=newFeedbackSession != null && !TimeHelper.isSpecialTime(newFeedbackSession.resultsVisibleFromTime);
  additionalSettings.setResponseVisibleDateChecked(hasResultVisibleDate);
  additionalSettings.setResponseVisibleDateValue(hasResultVisibleDate ? TimeHelper.formatDate(newFeedbackSession.resultsVisibleFromTime) : ""String_Node_Str"");
  additionalSettings.setResponseVisibleDateDisabled(!hasResultVisibleDate);
  date=hasResultVisibleDate ? newFeedbackSession.resultsVisibleFromTime : null;
  additionalSettings.setResponseVisibleTimeOptions(getTimeOptionsAsElementTags(date));
  additionalSettings.setResponseVisibleImmediatelyChecked((newFeedbackSession != null && Const.TIME_REPRESENTS_FOLLOW_VISIBLE.equals(newFeedbackSession.resultsVisibleFromTime)));
  additionalSettings.setResponseVisiblePublishManuallyChecked((newFeedbackSession == null || Const.TIME_REPRESENTS_LATER.equals(newFeedbackSession.resultsVisibleFromTime) || Const.TIME_REPRESENTS_NOW.equals(newFeedbackSession.resultsVisibleFromTime)));
  additionalSettings.setResponseVisibleNeverChecked((newFeedbackSession != null && Const.TIME_REPRESENTS_NEVER.equals(newFeedbackSession.resultsVisibleFromTime)));
  additionalSettings.setSendClosingEmailChecked(newFeedbackSession != null && newFeedbackSession.isClosingEmailEnabled);
  additionalSettings.setSendOpeningEmailChecked(newFeedbackSession != null && newFeedbackSession.isOpeningEmailEnabled);
  additionalSettings.setSendPublishedEmailChecked(newFeedbackSession != null && newFeedbackSession.isPublishedEmailEnabled);
  return additionalSettings;
}",0.9288345937560596
62821,"private void buildNewForm(List<CourseAttributes> courses,String courseIdForNewSession,HashMap<String,InstructorAttributes> instructors,FeedbackSessionAttributes newFeedbackSession,String feedbackSessionType,String feedbackSessionNameForSessionList){
  newForm=new FeedbackSessionsNewForm();
  List<String> courseIds=new ArrayList<String>();
  for (  CourseAttributes course : courses) {
    courseIds.add(course.id);
  }
  newForm.setCourseIdForNewSession(courseIdForNewSession);
  newForm.setFsName(newFeedbackSession == null ? ""String_Node_Str"" : newFeedbackSession.feedbackSessionName);
  newForm.setCourses(courseIds);
  newForm.setCourseOptionsEmpty(courses.isEmpty());
  newForm.setFeedbackSessionTypeOptions(getFeedbackSessionTypeOptions(feedbackSessionType));
  newForm.setCoursesSelectField(getCourseIdOptions(courses,courseIdForNewSession,instructors,newFeedbackSession));
  newForm.setTimezoneSelectField(getTimeZoneOptionsAsHtml(newFeedbackSession));
  newForm.setInstructions(newFeedbackSession == null ? ""String_Node_Str"" : InstructorFeedbacksPageData.sanitizeForHtml(newFeedbackSession.instructions.getValue()));
  newForm.setFsStartDate(newFeedbackSession == null ? TimeHelper.formatDate(TimeHelper.getNextHour()) : TimeHelper.formatDate(newFeedbackSession.startTime));
  Date date;
  date=newFeedbackSession == null ? null : newFeedbackSession.startTime;
  newForm.setFsStartTimeOptions(getTimeOptionsAsElementTags(date));
  newForm.setFsEndDate(newFeedbackSession == null ? ""String_Node_Str"" : TimeHelper.formatDate(newFeedbackSession.endTime));
  date=newFeedbackSession == null ? null : newFeedbackSession.endTime;
  newForm.setFsEndTimeOptions(getTimeOptionsAsElementTags(date));
  newForm.setGracePeriodOptions(getGracePeriodOptionsAsElementTags(newFeedbackSession));
  boolean hasSessionVisibleDate=newFeedbackSession != null && !TimeHelper.isSpecialTime(newFeedbackSession.sessionVisibleFromTime);
  newForm.setSessionVisibleDateButtonChecked(hasSessionVisibleDate);
  newForm.setSessionVisibleDateValue(hasSessionVisibleDate ? TimeHelper.formatDate(newFeedbackSession.sessionVisibleFromTime) : ""String_Node_Str"");
  newForm.setSessionVisibleDateDisabled(!hasSessionVisibleDate);
  date=hasSessionVisibleDate ? newFeedbackSession.sessionVisibleFromTime : null;
  newForm.setSessionVisibleTimeOptions(getTimeOptionsAsElementTags(date));
  newForm.setSessionVisibleAtOpenChecked(newFeedbackSession == null || Const.TIME_REPRESENTS_FOLLOW_OPENING.equals(newFeedbackSession.sessionVisibleFromTime));
  newForm.setSessionVisiblePrivateChecked(newFeedbackSession != null && Const.TIME_REPRESENTS_NEVER.equals(newFeedbackSession.sessionVisibleFromTime));
  boolean hasResultVisibleDate=newFeedbackSession != null && !TimeHelper.isSpecialTime(newFeedbackSession.resultsVisibleFromTime);
  newForm.setResponseVisibleDateChecked(hasResultVisibleDate);
  newForm.setResponseVisibleDateValue(hasResultVisibleDate ? TimeHelper.formatDate(newFeedbackSession.resultsVisibleFromTime) : ""String_Node_Str"");
  newForm.setResponseVisibleDisabled(!hasResultVisibleDate);
  date=hasResultVisibleDate ? newFeedbackSession.resultsVisibleFromTime : null;
  newForm.setResponseVisibleTimeOptions(getTimeOptionsAsElementTags(date));
  newForm.setResponseVisibleImmediatelyChecked((newFeedbackSession != null && Const.TIME_REPRESENTS_FOLLOW_VISIBLE.equals(newFeedbackSession.resultsVisibleFromTime)));
  newForm.setResponseVisiblePublishManuallyChecked((newFeedbackSession == null || Const.TIME_REPRESENTS_LATER.equals(newFeedbackSession.resultsVisibleFromTime) || Const.TIME_REPRESENTS_NOW.equals(newFeedbackSession.resultsVisibleFromTime)));
  newForm.setResponseVisibleNeverChecked((newFeedbackSession != null && Const.TIME_REPRESENTS_NEVER.equals(newFeedbackSession.resultsVisibleFromTime)));
  newForm.setSubmitButtonDisabled(courses.isEmpty());
}","private void buildNewForm(List<CourseAttributes> courses,String courseIdForNewSession,HashMap<String,InstructorAttributes> instructors,FeedbackSessionAttributes newFeedbackSession,String feedbackSessionType,String feedbackSessionNameForSessionList){
  newForm=new FeedbackSessionsNewForm();
  List<String> courseIds=new ArrayList<String>();
  for (  CourseAttributes course : courses) {
    courseIds.add(course.id);
  }
  newForm.setCourseIdForNewSession(courseIdForNewSession);
  newForm.setFsName(newFeedbackSession == null ? ""String_Node_Str"" : newFeedbackSession.feedbackSessionName);
  newForm.setCourses(courseIds);
  newForm.setCourseOptionsEmpty(courses.isEmpty());
  newForm.setFeedbackSessionTypeOptions(getFeedbackSessionTypeOptions(feedbackSessionType));
  newForm.setFeedbackSessionNameForSessionList(feedbackSessionNameForSessionList);
  newForm.setCoursesSelectField(getCourseIdOptions(courses,courseIdForNewSession,instructors,newFeedbackSession));
  newForm.setTimezoneSelectField(getTimeZoneOptionsAsHtml(newFeedbackSession));
  newForm.setInstructions(newFeedbackSession == null ? ""String_Node_Str"" : InstructorFeedbacksPageData.sanitizeForHtml(newFeedbackSession.instructions.getValue()));
  newForm.setFsStartDate(newFeedbackSession == null ? TimeHelper.formatDate(TimeHelper.getNextHour()) : TimeHelper.formatDate(newFeedbackSession.startTime));
  Date date;
  date=newFeedbackSession == null ? null : newFeedbackSession.startTime;
  newForm.setFsStartTimeOptions(getTimeOptionsAsElementTags(date));
  newForm.setFsEndDate(newFeedbackSession == null ? ""String_Node_Str"" : TimeHelper.formatDate(newFeedbackSession.endTime));
  date=newFeedbackSession == null ? null : newFeedbackSession.endTime;
  newForm.setFsEndTimeOptions(getTimeOptionsAsElementTags(date));
  newForm.setGracePeriodOptions(getGracePeriodOptionsAsElementTags(newFeedbackSession));
  boolean hasSessionVisibleDate=newFeedbackSession != null && !TimeHelper.isSpecialTime(newFeedbackSession.sessionVisibleFromTime);
  newForm.setSessionVisibleDateButtonChecked(hasSessionVisibleDate);
  newForm.setSessionVisibleDateValue(hasSessionVisibleDate ? TimeHelper.formatDate(newFeedbackSession.sessionVisibleFromTime) : ""String_Node_Str"");
  newForm.setSessionVisibleDateDisabled(!hasSessionVisibleDate);
  date=hasSessionVisibleDate ? newFeedbackSession.sessionVisibleFromTime : null;
  newForm.setSessionVisibleTimeOptions(getTimeOptionsAsElementTags(date));
  newForm.setSessionVisibleAtOpenChecked(newFeedbackSession == null || Const.TIME_REPRESENTS_FOLLOW_OPENING.equals(newFeedbackSession.sessionVisibleFromTime));
  newForm.setSessionVisiblePrivateChecked(newFeedbackSession != null && Const.TIME_REPRESENTS_NEVER.equals(newFeedbackSession.sessionVisibleFromTime));
  boolean hasResultVisibleDate=newFeedbackSession != null && !TimeHelper.isSpecialTime(newFeedbackSession.resultsVisibleFromTime);
  newForm.setResponseVisibleDateChecked(hasResultVisibleDate);
  newForm.setResponseVisibleDateValue(hasResultVisibleDate ? TimeHelper.formatDate(newFeedbackSession.resultsVisibleFromTime) : ""String_Node_Str"");
  newForm.setResponseVisibleDisabled(!hasResultVisibleDate);
  date=hasResultVisibleDate ? newFeedbackSession.resultsVisibleFromTime : null;
  newForm.setResponseVisibleTimeOptions(getTimeOptionsAsElementTags(date));
  newForm.setResponseVisibleImmediatelyChecked((newFeedbackSession != null && Const.TIME_REPRESENTS_FOLLOW_VISIBLE.equals(newFeedbackSession.resultsVisibleFromTime)));
  newForm.setResponseVisiblePublishManuallyChecked((newFeedbackSession == null || Const.TIME_REPRESENTS_LATER.equals(newFeedbackSession.resultsVisibleFromTime) || Const.TIME_REPRESENTS_NOW.equals(newFeedbackSession.resultsVisibleFromTime)));
  newForm.setResponseVisibleNeverChecked((newFeedbackSession != null && Const.TIME_REPRESENTS_NEVER.equals(newFeedbackSession.resultsVisibleFromTime)));
  newForm.setSubmitButtonDisabled(courses.isEmpty());
}",0.9893329906181724
62822,"public void init(ArrayList<CourseDetailsBundle> allCourses,String courseIdToShowParam,String courseNameToShowParam){
  archivedCourses=extractArchivedCourses(allCourses);
  activeCourses=extractActiveCourses(allCourses);
  courseIdToShow=courseIdToShowParam;
  courseNameToShow=courseNameToShowParam;
}","public void init(ArrayList<CourseDetailsBundle> allCourses,String courseIdToShowParam,String courseNameToShowParam){
  activeCourses=extractActiveCourses(allCourses);
  archivedCourses=extractArchivedCourses(allCourses);
  courseIdToShow=courseIdToShowParam;
  courseNameToShow=courseNameToShowParam;
}",0.9205298013245032
62823,"public void testSortAction(){
  ______TS(""String_Node_Str"");
  resultsPage=loginToInstructorFeedbackResultsPage(""String_Node_Str"",""String_Node_Str"");
  resultsPage.displayByGiverRecipientQuestion();
  assertEquals(""String_Node_Str"",resultsPage.getQuestionAdditionalInfoButtonText(8,""String_Node_Str""));
  assertEquals(true,resultsPage.clickQuestionAdditionalInfoButton(8,""String_Node_Str""));
  assertEquals(""String_Node_Str"",resultsPage.getQuestionAdditionalInfoButtonText(8,""String_Node_Str""));
  assertEquals(false,resultsPage.clickQuestionAdditionalInfoButton(8,""String_Node_Str""));
  assertEquals(""String_Node_Str"",resultsPage.getQuestionAdditionalInfoButtonText(8,""String_Node_Str""));
  assertEquals(true,resultsPage.clickQuestionAdditionalInfoButton(10,""String_Node_Str""));
  assertEquals(false,resultsPage.clickQuestionAdditionalInfoButton(10,""String_Node_Str""));
  assertEquals(true,resultsPage.clickQuestionAdditionalInfoButton(7,""String_Node_Str""));
  assertEquals(false,resultsPage.clickQuestionAdditionalInfoButton(7,""String_Node_Str""));
  resultsPage.verifyHtmlMainContent(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  resultsPage.displayByRecipientGiverQuestion();
  resultsPage.verifyHtmlMainContent(""String_Node_Str"");
  assertEquals(""String_Node_Str"",resultsPage.getQuestionAdditionalInfoButtonText(8,""String_Node_Str""));
  assertEquals(true,resultsPage.clickQuestionAdditionalInfoButton(8,""String_Node_Str""));
  assertEquals(""String_Node_Str"",resultsPage.getQuestionAdditionalInfoButtonText(8,""String_Node_Str""));
  assertEquals(false,resultsPage.clickQuestionAdditionalInfoButton(8,""String_Node_Str""));
  assertEquals(""String_Node_Str"",resultsPage.getQuestionAdditionalInfoButtonText(8,""String_Node_Str""));
  assertEquals(true,resultsPage.clickQuestionAdditionalInfoButton(10,""String_Node_Str""));
  assertEquals(false,resultsPage.clickQuestionAdditionalInfoButton(10,""String_Node_Str""));
  ______TS(""String_Node_Str"");
  resultsPage.displayByGiverQuestionRecipient();
  resultsPage.verifyHtmlMainContent(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  resultsPage.displayByRecipientQuestionGiver();
  resultsPage.verifyHtmlMainContent(""String_Node_Str"");
  resultsPage.clickGroupByTeam();
  ______TS(""String_Node_Str"");
  resultsPage.displayByGiverRecipientQuestion();
  resultsPage.verifyHtmlMainContent(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  resultsPage.displayByRecipientGiverQuestion();
  resultsPage.verifyHtmlMainContent(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  resultsPage.displayByGiverQuestionRecipient();
  resultsPage.verifyHtmlMainContent(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  resultsPage.displayByRecipientQuestionGiver();
  resultsPage.verifyHtmlMainContent(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  resultsPage.displayByQuestion();
  resultsPage.verifyHtmlMainContent(""String_Node_Str"");
  assertEquals(""String_Node_Str"",resultsPage.getQuestionAdditionalInfoButtonText(7,""String_Node_Str""));
  assertEquals(true,resultsPage.clickQuestionAdditionalInfoButton(7,""String_Node_Str""));
  assertEquals(""String_Node_Str"",resultsPage.getQuestionAdditionalInfoButtonText(7,""String_Node_Str""));
  assertEquals(false,resultsPage.clickQuestionAdditionalInfoButton(7,""String_Node_Str""));
  assertEquals(""String_Node_Str"",resultsPage.getQuestionAdditionalInfoButtonText(7,""String_Node_Str""));
  assertEquals(true,resultsPage.clickQuestionAdditionalInfoButton(9,""String_Node_Str""));
  assertEquals(false,resultsPage.clickQuestionAdditionalInfoButton(9,""String_Node_Str""));
  assertEquals(true,resultsPage.clickQuestionAdditionalInfoButton(10,""String_Node_Str""));
  assertEquals(false,resultsPage.clickQuestionAdditionalInfoButton(10,""String_Node_Str""));
  ______TS(""String_Node_Str"");
  verifySortingOrder(By.id(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  verifySortingOrder(By.id(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  verifySortingOrder(By.id(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  verifySortingOrder(By.id(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","public void testSortAction(){
  ______TS(""String_Node_Str"");
  resultsPage=loginToInstructorFeedbackResultsPage(""String_Node_Str"",""String_Node_Str"");
  resultsPage.displayByGiverRecipientQuestion();
  assertEquals(""String_Node_Str"",resultsPage.getQuestionAdditionalInfoButtonText(8,""String_Node_Str""));
  assertEquals(true,resultsPage.clickQuestionAdditionalInfoButton(8,""String_Node_Str""));
  assertEquals(""String_Node_Str"",resultsPage.getQuestionAdditionalInfoButtonText(8,""String_Node_Str""));
  assertEquals(false,resultsPage.clickQuestionAdditionalInfoButton(8,""String_Node_Str""));
  assertEquals(""String_Node_Str"",resultsPage.getQuestionAdditionalInfoButtonText(8,""String_Node_Str""));
  resultsPage.verifyHtmlMainContent(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  resultsPage.displayByRecipientGiverQuestion();
  resultsPage.verifyHtmlMainContent(""String_Node_Str"");
  assertEquals(""String_Node_Str"",resultsPage.getQuestionAdditionalInfoButtonText(8,""String_Node_Str""));
  assertEquals(true,resultsPage.clickQuestionAdditionalInfoButton(8,""String_Node_Str""));
  assertEquals(""String_Node_Str"",resultsPage.getQuestionAdditionalInfoButtonText(8,""String_Node_Str""));
  assertEquals(false,resultsPage.clickQuestionAdditionalInfoButton(8,""String_Node_Str""));
  assertEquals(""String_Node_Str"",resultsPage.getQuestionAdditionalInfoButtonText(8,""String_Node_Str""));
  ______TS(""String_Node_Str"");
  resultsPage.displayByGiverQuestionRecipient();
  resultsPage.verifyHtmlMainContent(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  resultsPage.displayByRecipientQuestionGiver();
  resultsPage.verifyHtmlMainContent(""String_Node_Str"");
  resultsPage.clickGroupByTeam();
  ______TS(""String_Node_Str"");
  resultsPage.displayByGiverRecipientQuestion();
  resultsPage.verifyHtmlMainContent(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  resultsPage.displayByRecipientGiverQuestion();
  resultsPage.verifyHtmlMainContent(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  resultsPage.displayByGiverQuestionRecipient();
  resultsPage.verifyHtmlMainContent(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  resultsPage.displayByRecipientQuestionGiver();
  resultsPage.verifyHtmlMainContent(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  resultsPage.displayByQuestion();
  resultsPage.verifyHtmlMainContent(""String_Node_Str"");
  assertEquals(""String_Node_Str"",resultsPage.getQuestionAdditionalInfoButtonText(7,""String_Node_Str""));
  assertEquals(true,resultsPage.clickQuestionAdditionalInfoButton(7,""String_Node_Str""));
  assertEquals(""String_Node_Str"",resultsPage.getQuestionAdditionalInfoButtonText(7,""String_Node_Str""));
  assertEquals(false,resultsPage.clickQuestionAdditionalInfoButton(7,""String_Node_Str""));
  assertEquals(""String_Node_Str"",resultsPage.getQuestionAdditionalInfoButtonText(7,""String_Node_Str""));
  ______TS(""String_Node_Str"");
  verifySortingOrder(By.id(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  verifySortingOrder(By.id(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  verifySortingOrder(By.id(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  verifySortingOrder(By.id(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.3246018165065157
62824,"public boolean isNameVisibleTo(FeedbackQuestionAttributes question,FeedbackResponseAttributes response,String userEmail,UserType.Role role,boolean isGiverName,CourseRoster roster){
  if (question == null) {
    return false;
  }
  List<FeedbackParticipantType> showNameTo=isGiverName ? question.showGiverNameTo : question.showRecipientNameTo;
  if (response.giverEmail.equals(userEmail)) {
    return true;
  }
  for (  FeedbackParticipantType type : showNameTo) {
switch (type) {
case INSTRUCTORS:
      if (roster.getInstructorForEmail(userEmail) != null && role == UserType.Role.INSTRUCTOR) {
        return true;
      }
 else {
        break;
      }
case OWN_TEAM_MEMBERS:
case OWN_TEAM_MEMBERS_INCLUDING_SELF:
    if (roster.isStudentsInSameTeam(response.giverEmail,userEmail)) {
      return true;
    }
 else {
      break;
    }
case RECEIVER:
  if (question.recipientType.isTeam()) {
    if (roster.isStudentInTeam(userEmail,response.recipientEmail)) {
      return true;
    }
    break;
  }
 else   if (response.recipientEmail.equals(userEmail)) {
    return true;
  }
 else {
    break;
  }
case RECEIVER_TEAM_MEMBERS:
if (question.recipientType.isTeam()) {
  if (roster.isStudentInTeam(userEmail,response.recipientEmail)) {
    return true;
  }
  break;
}
 else if (roster.isStudentsInSameTeam(response.recipientEmail,userEmail)) {
  return true;
}
 else {
  break;
}
case STUDENTS:
if (roster.isStudentInCourse(userEmail)) {
return true;
}
 else {
break;
}
default :
Assumption.fail(""String_Node_Str"" + ""String_Node_Str"");
break;
}
}
return false;
}","public boolean isNameVisibleTo(FeedbackQuestionAttributes question,FeedbackResponseAttributes response,String userEmail,UserType.Role role,boolean isGiverName,CourseRoster roster){
  if (question == null) {
    return false;
  }
  List<FeedbackParticipantType> showNameTo=isGiverName ? question.showGiverNameTo : question.showRecipientNameTo;
  if (question.giverType != FeedbackParticipantType.TEAMS) {
    if (response.giverEmail.equals(userEmail)) {
      return true;
    }
  }
 else {
    if (roster.isStudentsInSameTeam(response.giverEmail,userEmail)) {
      return true;
    }
  }
  for (  FeedbackParticipantType type : showNameTo) {
switch (type) {
case INSTRUCTORS:
      if (roster.getInstructorForEmail(userEmail) != null && role == UserType.Role.INSTRUCTOR) {
        return true;
      }
 else {
        break;
      }
case OWN_TEAM_MEMBERS:
case OWN_TEAM_MEMBERS_INCLUDING_SELF:
    if (roster.isStudentsInSameTeam(response.giverEmail,userEmail)) {
      return true;
    }
 else {
      break;
    }
case RECEIVER:
  if (question.recipientType.isTeam()) {
    if (roster.isStudentInTeam(userEmail,response.recipientEmail)) {
      return true;
    }
    break;
  }
 else   if (response.recipientEmail.equals(userEmail)) {
    return true;
  }
 else {
    break;
  }
case RECEIVER_TEAM_MEMBERS:
if (question.recipientType.isTeam()) {
  if (roster.isStudentInTeam(userEmail,response.recipientEmail)) {
    return true;
  }
  break;
}
 else if (roster.isStudentsInSameTeam(response.recipientEmail,userEmail)) {
  return true;
}
 else {
  break;
}
case STUDENTS:
if (roster.isStudentInCourse(userEmail)) {
return true;
}
 else {
break;
}
default :
Assumption.fail(""String_Node_Str"" + ""String_Node_Str"");
break;
}
}
return false;
}",0.93409915356711
62825,"public void testViewActionsLink(){
  ______TS(""String_Node_Str"");
  try {
    String expectedPersonInfo=logPage.getPersonInfoOfFirstEntry();
    logPage.clickViewActionsButtonOfFirstEntry();
    String actualPersonInfo=logPage.getFilterBoxString();
    assertEqualsIfQueryStringNotEmpty(expectedPersonInfo,actualPersonInfo);
  }
 catch (  NoSuchElementException emptylogs) {
  }
catch (  IndexOutOfBoundsException e) {
  }
}","public void testViewActionsLink(){
  ______TS(""String_Node_Str"");
  try {
    String expectedPersonInfo=logPage.getPersonInfoOfFirstEntry();
    logPage.clickViewActionsButtonOfFirstEntry();
    String actualPersonInfo=logPage.getFilterBoxString();
    assertEqualsIfQueryStringNotEmpty(expectedPersonInfo,actualPersonInfo);
  }
 catch (  NoSuchElementException emptylogs) {
  }
catch (  IndexOutOfBoundsException invisibletmtlogs) {
  }
}",0.9803012746234068
62826,"private void updateStudentSection(String currentSection,StudentAttributes student){
  try {
    if (isPreview) {
      System.out.println(""String_Node_Str"" + student.email + ""String_Node_Str""+ currentSection);
      return;
    }
    PersistenceManager pm=Datastore.getPersistenceManager();
    Student studentEntity=getStudent(student.email,student.course,pm);
    updateStudentToBeInSection(studentEntity,currentSection);
    List<FeedbackResponse> responsesForStudent=getResponsesForStudent(student.email,pm);
    updateFeedbackResponsesToBeInSection(responsesForStudent,student,currentSection);
    pm.close();
  }
 catch (  InvalidParametersException|EntityDoesNotExistException e) {
    System.out.println(""String_Node_Str"" + student.email);
    e.printStackTrace();
    confirmToContinue();
  }
}","private void updateStudentSection(String currentSection,StudentAttributes student){
  try {
    if (isPreview) {
      System.out.println(""String_Node_Str"" + student.email + ""String_Node_Str""+ currentSection);
      return;
    }
    PersistenceManager pm=Datastore.getPersistenceManager();
    Student studentEntity=getStudent(student.email,student.course,pm);
    updateStudentToBeInSection(studentEntity,currentSection);
    List<FeedbackResponse> responsesForStudent=getResponsesForStudent(student,pm);
    updateFeedbackResponsesToBeInSection(responsesForStudent,student,currentSection);
    pm.close();
  }
 catch (  InvalidParametersException|EntityDoesNotExistException e) {
    System.out.println(""String_Node_Str"" + student.email);
    e.printStackTrace();
    confirmToContinue();
  }
}",0.99625
62827,"private List<FeedbackResponse> getResponsesForStudent(String studentEmail,PersistenceManager pm){
  String q=""String_Node_Str"" + FeedbackResponse.class.getName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  @SuppressWarnings(""String_Node_Str"") List<FeedbackResponse> responsesAsGiver=(List<FeedbackResponse>)pm.newQuery(q).execute(studentEmail);
  q=""String_Node_Str"" + FeedbackResponse.class.getName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  @SuppressWarnings(""String_Node_Str"") List<FeedbackResponse> responsesAsReceiver=(List<FeedbackResponse>)Datastore.getPersistenceManager().newQuery(q).execute(studentEmail);
  List<FeedbackResponse> responses=new ArrayList<FeedbackResponse>();
  responses.addAll(responsesAsGiver);
  responses.addAll(responsesAsReceiver);
  return responses;
}","private List<FeedbackResponse> getResponsesForStudent(StudentAttributes student,PersistenceManager pm){
  String studentEmail=student.email;
  String studentTeam=student.team;
  String course=student.course;
  String q=""String_Node_Str"" + FeedbackResponse.class.getName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  @SuppressWarnings(""String_Node_Str"") List<FeedbackResponse> responsesAsGiver=(List<FeedbackResponse>)pm.newQuery(q).execute(studentEmail,course);
  q=""String_Node_Str"" + FeedbackResponse.class.getName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  @SuppressWarnings(""String_Node_Str"") List<FeedbackResponse> responsesAsReceiver=(List<FeedbackResponse>)Datastore.getPersistenceManager().newQuery(q).execute(studentEmail,studentTeam,course);
  List<FeedbackResponse> responses=new ArrayList<FeedbackResponse>();
  responses.addAll(responsesAsGiver);
  responses.addAll(responsesAsReceiver);
  return responses;
}",0.8498985801217038
62828,"public void addSectionsToCourse(String courseId){
  System.out.println(""String_Node_Str"" + courseId + ""String_Node_Str"");
  List<TeamDetailsBundle> teams;
  try {
    teams=logic.getTeamsForCourse(courseId);
  }
 catch (  EntityDoesNotExistException e1) {
    System.out.println(""String_Node_Str"" + courseId);
    e1.printStackTrace();
    return;
  }
  int numSections=1;
  String sectionPrefix=""String_Node_Str"";
  String currentSection=sectionPrefix + numSections;
  int currentSectionSize=0;
  for (  TeamDetailsBundle team : teams) {
    String teamName=team.name;
    List<StudentAttributes> students=logic.getStudentsForTeam(teamName,courseId);
    for (    StudentAttributes student : students) {
      updateStudentSection(currentSection,student);
      currentSectionSize=currentSectionSize + 1;
    }
    if (currentSectionSize >= numOfStudentsInSection) {
      numSections++;
      currentSection=sectionPrefix + numSections;
    }
  }
  System.out.println();
}","public void addSectionsToCourse(String courseId){
  System.out.println(""String_Node_Str"" + courseId + ""String_Node_Str"");
  List<TeamDetailsBundle> teams;
  try {
    teams=logic.getTeamsForCourse(courseId);
  }
 catch (  EntityDoesNotExistException e1) {
    System.out.println(""String_Node_Str"" + courseId);
    e1.printStackTrace();
    return;
  }
  int numSections=1;
  String sectionPrefix=""String_Node_Str"";
  String currentSection=sectionPrefix + numSections;
  int currentSectionSize=0;
  for (  TeamDetailsBundle team : teams) {
    String teamName=team.name;
    List<StudentAttributes> students=logic.getStudentsForTeam(teamName,courseId);
    for (    StudentAttributes student : students) {
      updateStudentSection(currentSection,student);
      currentSectionSize=currentSectionSize + 1;
    }
    if (currentSectionSize >= numOfStudentsInSection) {
      numSections++;
      currentSection=sectionPrefix + numSections;
      currentSectionSize=0;
    }
  }
  System.out.println();
}",0.98582995951417
62829,"protected void convertOneEvaluationToFeedbackSession(EvaluationAttributes eval,String newFeedbackSessionName) throws Exception {
  if (newFeedbackSessionName == null || newFeedbackSessionName.isEmpty()) {
    newFeedbackSessionName=""String_Node_Str"" + eval.name;
  }
  int num=0;
  String feedbackSessionName=newFeedbackSessionName + (num == 0 ? ""String_Node_Str"" : (""String_Node_Str"" + num + ""String_Node_Str""));
  String courseId=eval.courseId;
  List<InstructorAttributes> instructorsForCourse=logic.getInstructorsForCourse(courseId);
  if (instructorsForCourse.size() == 0) {
    printErrorMessage(""String_Node_Str"" + courseId);
    return;
  }
  String instEmail=instructorsForCourse.get(0).email;
  System.out.print(""String_Node_Str"" + eval.courseId + ""String_Node_Str""+ eval.name+ ""String_Node_Str"");
  String creatorEmail=instEmail;
  Text instructions=eval.instructions;
  Date createdTime=(new Date()).compareTo(eval.startTime) > 0 ? new Date() : eval.startTime;
  Date startTime=eval.startTime;
  Date endTime=eval.endTime;
  Date sessionVisibleFromTime=eval.startTime;
  Date resultsVisibleFromTime=eval.endTime;
  double timeZone=eval.timeZone;
  int gracePeriod=eval.gracePeriod;
  FeedbackSessionType feedbackSessionType=FeedbackSessionType.STANDARD;
  boolean sentOpenEmail=(new Date()).compareTo(eval.startTime) > 0;
  boolean sentPublishedEmail=eval.published;
  boolean isOpeningEmailEnabled=true;
  boolean isClosingEmailEnabled=true;
  boolean isPublishedEmailEnabled=true;
  while (true) {
    feedbackSessionName=newFeedbackSessionName + (num == 0 ? ""String_Node_Str"" : (""String_Node_Str"" + num + ""String_Node_Str""));
    if (logic.getFeedbackSession(feedbackSessionName,courseId) != null) {
      printErrorMessage(String.format(""String_Node_Str"",feedbackSessionName));
    }
    if (isPreview) {
      return;
    }
    FeedbackSessionAttributes fsa=new FeedbackSessionAttributes(feedbackSessionName,courseId,creatorEmail,instructions,createdTime,startTime,endTime,sessionVisibleFromTime,resultsVisibleFromTime,timeZone,gracePeriod,feedbackSessionType,sentOpenEmail,sentPublishedEmail,isOpeningEmailEnabled,isClosingEmailEnabled,isPublishedEmailEnabled);
    try {
      fsDb.createEntity(fsa);
      break;
    }
 catch (    EntityAlreadyExistsException e) {
      printErrorMessage(String.format(""String_Node_Str"",feedbackSessionName));
      e.printStackTrace();
    }
    num++;
  }
  boolean peerFeedback=eval.p2pEnabled;
  List<String> fqIds=createFeedbackQuestions(eval,feedbackSessionName,courseId,creatorEmail,peerFeedback);
  List<SubmissionAttributes> allSubmissions=subDb.getSubmissionsForEvaluation(courseId,eval.name);
  for (  SubmissionAttributes sub : allSubmissions) {
    createFeedbackResponsesFromSubmission(feedbackSessionName,courseId,peerFeedback,fqIds,sub);
  }
}","protected void convertOneEvaluationToFeedbackSession(EvaluationAttributes eval,String newFeedbackSessionName) throws Exception {
  if (newFeedbackSessionName == null || newFeedbackSessionName.isEmpty()) {
    newFeedbackSessionName=""String_Node_Str"" + eval.name;
  }
  int num=0;
  String feedbackSessionName=newFeedbackSessionName + (num == 0 ? ""String_Node_Str"" : (""String_Node_Str"" + num + ""String_Node_Str""));
  String courseId=eval.courseId;
  List<InstructorAttributes> instructorsForCourse=logic.getInstructorsForCourse(courseId);
  if (instructorsForCourse.size() == 0) {
    printErrorMessage(""String_Node_Str"" + courseId);
    return;
  }
  String instEmail=instructorsForCourse.get(0).email;
  System.out.print(""String_Node_Str"" + eval.courseId + ""String_Node_Str""+ eval.name+ ""String_Node_Str"");
  String creatorEmail=instEmail;
  Text instructions=eval.instructions;
  Date createdTime=(new Date()).compareTo(eval.startTime) > 0 ? new Date() : eval.startTime;
  Date startTime=eval.startTime;
  Date endTime=eval.endTime;
  Date sessionVisibleFromTime=eval.startTime;
  Date resultsVisibleFromTime=eval.published ? eval.endTime : Const.TIME_REPRESENTS_LATER;
  double timeZone=eval.timeZone;
  int gracePeriod=eval.gracePeriod;
  FeedbackSessionType feedbackSessionType=FeedbackSessionType.STANDARD;
  boolean sentOpenEmail=(new Date()).compareTo(eval.startTime) > 0;
  boolean sentPublishedEmail=eval.published;
  boolean isOpeningEmailEnabled=true;
  boolean isClosingEmailEnabled=true;
  boolean isPublishedEmailEnabled=true;
  while (true) {
    feedbackSessionName=newFeedbackSessionName + (num == 0 ? ""String_Node_Str"" : (""String_Node_Str"" + num + ""String_Node_Str""));
    if (logic.getFeedbackSession(feedbackSessionName,courseId) != null) {
      printErrorMessage(String.format(""String_Node_Str"",feedbackSessionName));
    }
    if (isPreview) {
      return;
    }
    FeedbackSessionAttributes fsa=new FeedbackSessionAttributes(feedbackSessionName,courseId,creatorEmail,instructions,createdTime,startTime,endTime,sessionVisibleFromTime,resultsVisibleFromTime,timeZone,gracePeriod,feedbackSessionType,sentOpenEmail,sentPublishedEmail,isOpeningEmailEnabled,isClosingEmailEnabled,isPublishedEmailEnabled);
    try {
      fsDb.createEntity(fsa);
      break;
    }
 catch (    EntityAlreadyExistsException e) {
      printErrorMessage(String.format(""String_Node_Str"",feedbackSessionName));
      e.printStackTrace();
    }
    num++;
  }
  boolean peerFeedback=eval.p2pEnabled;
  List<String> fqIds=createFeedbackQuestions(eval,feedbackSessionName,courseId,creatorEmail,peerFeedback);
  List<SubmissionAttributes> allSubmissions=subDb.getSubmissionsForEvaluation(courseId,eval.name);
  for (  SubmissionAttributes sub : allSubmissions) {
    createFeedbackResponsesFromSubmission(feedbackSessionName,courseId,peerFeedback,fqIds,sub);
  }
}",0.989247311827957
62830,"/** 
 * Returns the link of publish and unpublish action for the session feedback
 * @param session The session details
 * @param isHome Flag whether the link is to be put at homepage (to determine the redirect link in delete / publish)
 * @param instructor The instructor attributes of the session feedback
 * @return
 */
public String getInstructorFeedbackSessionPublishAndUnpublishAction(FeedbackSessionAttributes session,boolean isHome,InstructorAttributes instructor){
  boolean hasPublish=!session.isWaitingToOpen() && !session.isPublished();
  boolean hasUnpublish=!session.isWaitingToOpen() && session.isPublished();
  String disabledStr=""String_Node_Str"";
  String disableUnpublishSessionStr=instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION) ? ""String_Node_Str"" : disabledStr;
  String disablePublishSessionStr=instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION) ? ""String_Node_Str"" : disabledStr;
  String result=""String_Node_Str"";
  if (hasUnpublish) {
    result=""String_Node_Str"" + ""String_Node_Str"" + getInstructorFeedbackSessionUnpublishLink(session.courseId,session.feedbackSessionName,isHome) + ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.FEEDBACK_SESSION_UNPUBLISH+ ""String_Node_Str""+ ""String_Node_Str""+ session.feedbackSessionName+ ""String_Node_Str""+ disableUnpublishSessionStr+ ""String_Node_Str"";
  }
 else {
    result=""String_Node_Str"" + (hasPublish ? ""String_Node_Str"" : DISABLED) + ""String_Node_Str""+ getInstructorFeedbackSessionPublishLink(session.courseId,session.feedbackSessionName,isHome)+ ""String_Node_Str""+ ""String_Node_Str""+ (hasPublish ? Const.Tooltips.FEEDBACK_SESSION_PUBLISH : Const.Tooltips.FEEDBACK_SESSION_AWAITING)+ ""String_Node_Str""+ ""String_Node_Str""+ (hasPublish ? ""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str""+ session.isPublishedEmailEnabled+ ""String_Node_Str"" : ""String_Node_Str"")+ disablePublishSessionStr+ ""String_Node_Str"";
  }
  return result;
}","/** 
 * Returns the link of publish and unpublish action for the session feedback
 * @param session The session details
 * @param isHome Flag whether the link is to be put at homepage (to determine the redirect link in delete / publish)
 * @param instructor The instructor attributes of the session feedback
 * @return
 */
public String getInstructorFeedbackSessionPublishAndUnpublishAction(FeedbackSessionAttributes session,boolean isHome,InstructorAttributes instructor){
  boolean hasPublish=!session.isWaitingToOpen() && !session.isPublished();
  boolean hasUnpublish=!session.isWaitingToOpen() && session.isPublished();
  String disabledStr=""String_Node_Str"";
  String disableUnpublishSessionStr=instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION) ? ""String_Node_Str"" : disabledStr;
  String disablePublishSessionStr=instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION) ? ""String_Node_Str"" : disabledStr;
  String result=""String_Node_Str"";
  if (hasUnpublish) {
    result=""String_Node_Str"" + ""String_Node_Str"" + getInstructorFeedbackSessionUnpublishLink(session.courseId,session.feedbackSessionName,isHome) + ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.FEEDBACK_SESSION_UNPUBLISH+ ""String_Node_Str""+ ""String_Node_Str""+ session.feedbackSessionName+ ""String_Node_Str""+ disableUnpublishSessionStr+ ""String_Node_Str"";
  }
 else {
    result=""String_Node_Str"" + (hasPublish ? ""String_Node_Str"" : DISABLED) + ""String_Node_Str""+ getInstructorFeedbackSessionPublishLink(session.courseId,session.feedbackSessionName,isHome)+ ""String_Node_Str""+ ""String_Node_Str""+ (hasPublish ? Const.Tooltips.FEEDBACK_SESSION_PUBLISH : Const.Tooltips.FEEDBACK_SESSION_AWAITING)+ ""String_Node_Str""+ ""String_Node_Str""+ (hasPublish ? ""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str""+ ""String_Node_Str""+ session.isPublishedEmailEnabled+ ""String_Node_Str"" : ""String_Node_Str"")+ disablePublishSessionStr+ ""String_Node_Str"";
  }
  return result;
}",0.995277156350982
62831,"@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  Assumption.assertNotNull(courseId);
  String fsname=getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);
  Assumption.assertNotNull(fsname);
  instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  new GateKeeper().verifyAccessible(instructor,logic.getCourse(courseId));
  CourseRoster roster=new CourseRoster(logic.getStudentsForCourse(courseId),logic.getInstructorsForCourse(courseId));
  data=new InstructorFeedbackResponseCommentsLoadPageData(account);
  data.feedbackResultBundles=getFeedbackResultBundles(courseId,fsname,roster);
  data.instructorEmail=instructor.email;
  data.currentInstructor=instructor;
  data.roster=roster;
  data.numberOfPendingComments=logic.getCommentsForSendingState(courseId,CommentSendingState.PENDING).size() + logic.getFeedbackResponseCommentsForSendingState(courseId,CommentSendingState.PENDING).size();
  return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESPONSE_COMMENTS_LOAD,data);
}","@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  Assumption.assertNotNull(courseId);
  String fsname=getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);
  int fsindex=Integer.parseInt(getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_INDEX));
  Assumption.assertNotNull(fsname);
  instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  new GateKeeper().verifyAccessible(instructor,logic.getCourse(courseId));
  CourseRoster roster=new CourseRoster(logic.getStudentsForCourse(courseId),logic.getInstructorsForCourse(courseId));
  data=new InstructorFeedbackResponseCommentsLoadPageData(account);
  data.feedbackResultBundles=getFeedbackResultBundles(courseId,fsname,roster);
  data.instructorEmail=instructor.email;
  data.currentInstructor=instructor;
  data.roster=roster;
  data.feedbackSessionIndex=fsindex;
  data.numberOfPendingComments=logic.getCommentsForSendingState(courseId,CommentSendingState.PENDING).size() + logic.getFeedbackResponseCommentsForSendingState(courseId,CommentSendingState.PENDING).size();
  return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESPONSE_COMMENTS_LOAD,data);
}",0.9437632135306554
62832,"public boolean isNameVisibleTo(FeedbackQuestionAttributes question,FeedbackResponseAttributes response,String userEmail,UserType.Role role,boolean isGiverName,CourseRoster roster){
  if (question == null) {
    return false;
  }
  List<FeedbackParticipantType> showNameTo=isGiverName ? question.showGiverNameTo : question.showRecipientNameTo;
  if (response.giverEmail.equals(userEmail)) {
    return true;
  }
  for (  FeedbackParticipantType type : showNameTo) {
switch (type) {
case INSTRUCTORS:
      if (roster.getInstructorForEmail(userEmail) != null && role == UserType.Role.INSTRUCTOR) {
        return true;
      }
 else {
        break;
      }
case OWN_TEAM_MEMBERS:
case OWN_TEAM_MEMBERS_INCLUDING_SELF:
    if (roster.isStudentsInSameTeam(response.giverEmail,userEmail)) {
      return true;
    }
 else {
      break;
    }
case RECEIVER:
  if (question.recipientType == FeedbackParticipantType.TEAMS) {
    if (roster.isStudentInTeam(userEmail,response.recipientEmail)) {
      return true;
    }
  }
 else   if (response.recipientEmail.equals(userEmail)) {
    return true;
  }
 else {
    break;
  }
case RECEIVER_TEAM_MEMBERS:
if (question.recipientType == FeedbackParticipantType.TEAMS) {
  if (roster.isStudentInTeam(userEmail,response.recipientEmail)) {
    return true;
  }
}
 else if (roster.isStudentsInSameTeam(response.recipientEmail,userEmail)) {
  return true;
}
 else {
  break;
}
case STUDENTS:
if (roster.isStudentInCourse(userEmail)) {
return true;
}
 else {
break;
}
default :
Assumption.fail(""String_Node_Str"" + ""String_Node_Str"");
break;
}
}
return false;
}","public boolean isNameVisibleTo(FeedbackQuestionAttributes question,FeedbackResponseAttributes response,String userEmail,UserType.Role role,boolean isGiverName,CourseRoster roster){
  if (question == null) {
    return false;
  }
  List<FeedbackParticipantType> showNameTo=isGiverName ? question.showGiverNameTo : question.showRecipientNameTo;
  if (response.giverEmail.equals(userEmail)) {
    return true;
  }
  for (  FeedbackParticipantType type : showNameTo) {
switch (type) {
case INSTRUCTORS:
      if (roster.getInstructorForEmail(userEmail) != null && role == UserType.Role.INSTRUCTOR) {
        return true;
      }
 else {
        break;
      }
case OWN_TEAM_MEMBERS:
case OWN_TEAM_MEMBERS_INCLUDING_SELF:
    if (roster.isStudentsInSameTeam(response.giverEmail,userEmail)) {
      return true;
    }
 else {
      break;
    }
case RECEIVER:
  if (question.recipientType.isTeam()) {
    if (roster.isStudentInTeam(userEmail,response.recipientEmail)) {
      return true;
    }
  }
 else   if (response.recipientEmail.equals(userEmail)) {
    return true;
  }
 else {
    break;
  }
case RECEIVER_TEAM_MEMBERS:
if (question.recipientType.isTeam()) {
  if (roster.isStudentInTeam(userEmail,response.recipientEmail)) {
    return true;
  }
}
 else if (roster.isStudentsInSameTeam(response.recipientEmail,userEmail)) {
  return true;
}
 else {
  break;
}
case STUDENTS:
if (roster.isStudentInCourse(userEmail)) {
return true;
}
 else {
break;
}
default :
Assumption.fail(""String_Node_Str"" + ""String_Node_Str"");
break;
}
}
return false;
}",0.9732313575525812
62833,"@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  Assumption.assertPostParamNotNull(Const.ParamsNames.COURSE_ID,courseId);
  String studentEmail=getRequestParamValue(Const.ParamsNames.STUDENT_EMAIL);
  Assumption.assertPostParamNotNull(Const.ParamsNames.STUDENT_EMAIL,studentEmail);
  boolean isFromCommentsPage=getRequestParamAsBoolean(Const.ParamsNames.FROM_COMMENTS_PAGE);
  boolean isFromStudentDetailsPage=getRequestParamAsBoolean(Const.ParamsNames.FROM_STUDENT_DETAILS_PAGE);
  boolean isFromCourseDetailsPage=getRequestParamAsBoolean(Const.ParamsNames.FROM_COURSE_DETAILS_PAGE);
  String commentText=getRequestParamValue(Const.ParamsNames.COMMENT_TEXT);
  Assumption.assertPostParamNotNull(Const.ParamsNames.COMMENT_TEXT,commentText);
  Assumption.assertNotEmpty(commentText);
  verifyAccessibleByInstructor(courseId);
  CommentAttributes comment=extractCommentData();
  try {
    CommentAttributes createdComment=logic.createComment(comment);
    logic.putDocument(createdComment);
    statusToUser.add(Const.StatusMessages.COMMENT_ADDED);
    statusToAdmin=""String_Node_Str"" + comment.recipients + ""String_Node_Str""+ comment.courseId+ ""String_Node_Str""+ ""String_Node_Str""+ comment.commentText;
  }
 catch (  EntityAlreadyExistsException e) {
    Assumption.fail(""String_Node_Str"");
  }
catch (  InvalidParametersException e) {
    statusToUser.add(e.getMessage());
    statusToAdmin=e.getMessage();
    isError=true;
  }
  if (isFromCommentsPage) {
    return createRedirectResult((new PageData(account).getInstructorCommentsLink()) + ""String_Node_Str"" + Const.ParamsNames.COURSE_ID+ ""String_Node_Str""+ courseId);
  }
 else   if (isFromStudentDetailsPage) {
    return createRedirectResult(getCourseStudentDetailsLink(courseId,studentEmail));
  }
 else   if (isFromCourseDetailsPage) {
    return createRedirectResult(new PageData(account).getInstructorCourseDetailsLink(courseId));
  }
 else {
    return createRedirectResult(new PageData(account).getInstructorStudentRecordsLink(courseId,studentEmail));
  }
}","@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  Assumption.assertPostParamNotNull(Const.ParamsNames.COURSE_ID,courseId);
  String studentEmail=getRequestParamValue(Const.ParamsNames.STUDENT_EMAIL);
  boolean isFromCommentsPage=getRequestParamAsBoolean(Const.ParamsNames.FROM_COMMENTS_PAGE);
  boolean isFromStudentDetailsPage=getRequestParamAsBoolean(Const.ParamsNames.FROM_STUDENT_DETAILS_PAGE);
  boolean isFromCourseDetailsPage=getRequestParamAsBoolean(Const.ParamsNames.FROM_COURSE_DETAILS_PAGE);
  boolean isFromStudentRecordsPage=!isFromCommentsPage && !isFromStudentDetailsPage && !isFromCourseDetailsPage;
  if (isFromStudentDetailsPage || isFromStudentRecordsPage) {
    Assumption.assertPostParamNotNull(Const.ParamsNames.STUDENT_EMAIL,studentEmail);
  }
  String commentText=getRequestParamValue(Const.ParamsNames.COMMENT_TEXT);
  Assumption.assertPostParamNotNull(Const.ParamsNames.COMMENT_TEXT,commentText);
  Assumption.assertNotEmpty(commentText);
  verifyAccessibleByInstructor(courseId);
  CommentAttributes comment=extractCommentData();
  try {
    CommentAttributes createdComment=logic.createComment(comment);
    logic.putDocument(createdComment);
    statusToUser.add(Const.StatusMessages.COMMENT_ADDED);
    statusToAdmin=""String_Node_Str"" + comment.recipients + ""String_Node_Str""+ comment.courseId+ ""String_Node_Str""+ ""String_Node_Str""+ comment.commentText;
  }
 catch (  EntityAlreadyExistsException e) {
    Assumption.fail(""String_Node_Str"");
  }
catch (  InvalidParametersException e) {
    statusToUser.add(e.getMessage());
    statusToAdmin=e.getMessage();
    isError=true;
  }
  if (isFromCommentsPage) {
    return createRedirectResult((new PageData(account).getInstructorCommentsLink()) + ""String_Node_Str"" + Const.ParamsNames.COURSE_ID+ ""String_Node_Str""+ courseId);
  }
 else   if (isFromStudentDetailsPage) {
    return createRedirectResult(getCourseStudentDetailsLink(courseId,studentEmail));
  }
 else   if (isFromCourseDetailsPage) {
    return createRedirectResult(new PageData(account).getInstructorCourseDetailsLink(courseId));
  }
 else {
    return createRedirectResult(new PageData(account).getInstructorStudentRecordsLink(courseId,studentEmail));
  }
}",0.2477956138367623
62834,protected abstract RedirectResult createSpecificRedirectResult();,protected abstract RedirectResult createSpecificRedirectResult() throws EntityDoesNotExistException ;,0.7831325301204819
62835,"@Override protected RedirectResult createSpecificRedirectResult(){
  if (regkey == null) {
    return createRedirectResult(Const.ActionURIs.STUDENT_HOME_PAGE);
  }
 else {
    return createRedirectResult(Const.ActionURIs.STUDENT_FEEDBACK_SUBMISSION_EDIT_PAGE);
  }
}","@Override protected RedirectResult createSpecificRedirectResult() throws EntityDoesNotExistException {
  if (regkey == null) {
    return createRedirectResult(Const.ActionURIs.STUDENT_HOME_PAGE);
  }
 else {
    throw new EntityDoesNotExistException(""String_Node_Str"");
  }
}",0.6839186691312384
62836,"/** 
 * Returns the links of actions available for a specific evaluation
 * @param session The Evaluation details
 * @param position The position of the evaluation in the table (to be used for rowID)
 * @param isHome Flag whether the link is to be put at homepage (to determine the redirect link in delete / publish)
 * @return
 * @throws EntityDoesNotExistException 
 */
public String getInstructorFeedbackSessionActions(FeedbackSessionAttributes session,boolean isHome,InstructorAttributes instructor,List<String> sectionsInCourse) throws EntityDoesNotExistException {
  StringBuilder result=new StringBuilder();
  boolean hasSubmit=session.isVisible() || session.isPrivateSession();
  boolean hasPublish=!session.isWaitingToOpen() && !session.isPublished();
  boolean hasUnpublish=!session.isWaitingToOpen() && session.isPublished();
  boolean hasRemind=session.isOpened();
  String disabledStr=""String_Node_Str"";
  String disableEditSessionStr=instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION) ? ""String_Node_Str"" : disabledStr;
  String disableDeleteSessionStr=instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION) ? ""String_Node_Str"" : disabledStr;
  String disableUnpublishSessionStr=instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION) ? ""String_Node_Str"" : disabledStr;
  String disablePublishSessionStr=instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION) ? ""String_Node_Str"" : disabledStr;
  String disableRemindSessionStr=instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION) ? ""String_Node_Str"" : disabledStr;
  boolean shouldEnableSubmitLink=instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_SUBMIT_SESSION_IN_SECTIONS);
  for (  String section : sectionsInCourse) {
    if (instructor.isAllowedForPrivilege(section,session.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_SUBMIT_SESSION_IN_SECTIONS)) {
      shouldEnableSubmitLink=true;
      break;
    }
  }
  String disableSubmitSessionStr=shouldEnableSubmitLink ? ""String_Node_Str"" : disabledStr;
  result.append(""String_Node_Str"" + ""String_Node_Str"" + getInstructorFeedbackSessionResultsLink(session.courseId,session.feedbackSessionName) + ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.FEEDBACK_SESSION_RESULTS+ ""String_Node_Str""+ ""String_Node_Str"");
  result.append(""String_Node_Str"" + ""String_Node_Str"" + getInstructorFeedbackSessionEditLink(session.courseId,session.feedbackSessionName) + ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.FEEDBACK_SESSION_EDIT+ ""String_Node_Str""+ disableEditSessionStr+ ""String_Node_Str"");
  result.append(""String_Node_Str"" + ""String_Node_Str"" + getInstructorFeedbackSessionDeleteLink(session.courseId,session.feedbackSessionName,(isHome ? Const.ActionURIs.INSTRUCTOR_HOME_PAGE : Const.ActionURIs.INSTRUCTOR_FEEDBACKS_PAGE)) + ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.FEEDBACK_SESSION_DELETE+ ""String_Node_Str""+ ""String_Node_Str""+ session.courseId+ ""String_Node_Str""+ session.feedbackSessionName+ ""String_Node_Str""+ disableDeleteSessionStr+ ""String_Node_Str"");
  result.append(""String_Node_Str"" + (hasSubmit ? ""String_Node_Str"" : DISABLED) + ""String_Node_Str""+ getInstructorFeedbackSessionSubmitLink(session.courseId,session.feedbackSessionName)+ ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.FEEDBACK_SESSION_SUBMIT+ ""String_Node_Str""+ disableSubmitSessionStr+ ""String_Node_Str"");
  if (session.isPrivateSession()) {
    return result.toString();
  }
  result.append(""String_Node_Str"" + (hasRemind ? ""String_Node_Str"" : DISABLED) + ""String_Node_Str""+ getInstructorFeedbackSessionRemindLink(session.courseId,session.feedbackSessionName)+ ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.FEEDBACK_SESSION_REMIND+ ""String_Node_Str""+ (hasRemind ? ""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"" : ""String_Node_Str"")+ disableRemindSessionStr+ ""String_Node_Str""+ ""String_Node_Str""+ disableRemindSessionStr+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ getInstructorFeedbackSessionRemindLink(session.courseId,session.feedbackSessionName)+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.FEEDBACK_SESSION_REMIND+ ""String_Node_Str""+ (hasRemind ? ""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"" : ""String_Node_Str"")+ disableRemindSessionStr+ ""String_Node_Str""+ ""String_Node_Str""+ getInstructorFeedbackSessionRemindParticularStudentsPageLink(session.courseId,session.feedbackSessionName)+ ""String_Node_Str""+ ""String_Node_Str""+ disableRemindSessionStr+ ""String_Node_Str""+ session.courseId+ ""String_Node_Str""+ session.feedbackSessionName+ ""String_Node_Str""+ ""String_Node_Str"");
  if (hasUnpublish) {
    result.append(""String_Node_Str"" + ""String_Node_Str"" + getInstructorFeedbackSessionUnpublishLink(session.courseId,session.feedbackSessionName,isHome) + ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.FEEDBACK_SESSION_UNPUBLISH+ ""String_Node_Str""+ ""String_Node_Str""+ session.feedbackSessionName+ ""String_Node_Str""+ disableUnpublishSessionStr+ ""String_Node_Str"");
  }
 else {
    result.append(""String_Node_Str"" + (hasPublish ? ""String_Node_Str"" : DISABLED) + ""String_Node_Str""+ getInstructorFeedbackSessionPublishLink(session.courseId,session.feedbackSessionName,isHome)+ ""String_Node_Str""+ ""String_Node_Str""+ (hasPublish ? Const.Tooltips.FEEDBACK_SESSION_PUBLISH : Const.Tooltips.FEEDBACK_SESSION_AWAITING)+ ""String_Node_Str""+ ""String_Node_Str""+ (hasPublish ? ""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"" : ""String_Node_Str"")+ disablePublishSessionStr+ ""String_Node_Str"");
  }
  return result.toString();
}","/** 
 * Returns the links of actions available for a specific evaluation
 * @param session The Evaluation details
 * @param position The position of the evaluation in the table (to be used for rowID)
 * @param isHome Flag whether the link is to be put at homepage (to determine the redirect link in delete / publish)
 * @return
 * @throws EntityDoesNotExistException 
 */
public String getInstructorFeedbackSessionActions(FeedbackSessionAttributes session,boolean isHome,InstructorAttributes instructor,List<String> sectionsInCourse) throws EntityDoesNotExistException {
  StringBuilder result=new StringBuilder();
  boolean hasSubmit=session.isVisible() || session.isPrivateSession();
  boolean hasPublish=!session.isWaitingToOpen() && !session.isPublished();
  boolean hasUnpublish=!session.isWaitingToOpen() && session.isPublished();
  boolean hasRemind=session.isOpened();
  String disabledStr=""String_Node_Str"";
  String disableEditSessionStr=instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION) ? ""String_Node_Str"" : disabledStr;
  String disableDeleteSessionStr=instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION) ? ""String_Node_Str"" : disabledStr;
  String disableUnpublishSessionStr=instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION) ? ""String_Node_Str"" : disabledStr;
  String disablePublishSessionStr=instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION) ? ""String_Node_Str"" : disabledStr;
  String disableRemindSessionStr=(instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION) && hasRemind) ? ""String_Node_Str"" : disabledStr;
  boolean shouldEnableSubmitLink=instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_SUBMIT_SESSION_IN_SECTIONS);
  for (  String section : sectionsInCourse) {
    if (instructor.isAllowedForPrivilege(section,session.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_SUBMIT_SESSION_IN_SECTIONS)) {
      shouldEnableSubmitLink=true;
      break;
    }
  }
  String disableSubmitSessionStr=shouldEnableSubmitLink ? ""String_Node_Str"" : disabledStr;
  result.append(""String_Node_Str"" + ""String_Node_Str"" + getInstructorFeedbackSessionResultsLink(session.courseId,session.feedbackSessionName) + ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.FEEDBACK_SESSION_RESULTS+ ""String_Node_Str""+ ""String_Node_Str"");
  result.append(""String_Node_Str"" + ""String_Node_Str"" + getInstructorFeedbackSessionEditLink(session.courseId,session.feedbackSessionName) + ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.FEEDBACK_SESSION_EDIT+ ""String_Node_Str""+ disableEditSessionStr+ ""String_Node_Str"");
  result.append(""String_Node_Str"" + ""String_Node_Str"" + getInstructorFeedbackSessionDeleteLink(session.courseId,session.feedbackSessionName,(isHome ? Const.ActionURIs.INSTRUCTOR_HOME_PAGE : Const.ActionURIs.INSTRUCTOR_FEEDBACKS_PAGE)) + ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.FEEDBACK_SESSION_DELETE+ ""String_Node_Str""+ ""String_Node_Str""+ session.courseId+ ""String_Node_Str""+ session.feedbackSessionName+ ""String_Node_Str""+ disableDeleteSessionStr+ ""String_Node_Str"");
  result.append(""String_Node_Str"" + (hasSubmit ? ""String_Node_Str"" : DISABLED) + ""String_Node_Str""+ getInstructorFeedbackSessionSubmitLink(session.courseId,session.feedbackSessionName)+ ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.FEEDBACK_SESSION_SUBMIT+ ""String_Node_Str""+ disableSubmitSessionStr+ ""String_Node_Str"");
  if (session.isPrivateSession()) {
    return result.toString();
  }
  result.append(""String_Node_Str"" + ((instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION) && hasRemind) ? ""String_Node_Str"" : DISABLED) + ""String_Node_Str""+ getInstructorFeedbackSessionRemindLink(session.courseId,session.feedbackSessionName)+ ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.FEEDBACK_SESSION_REMIND+ ""String_Node_Str""+ ((instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION) && hasRemind) ? ""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"" : ""String_Node_Str"")+ disableRemindSessionStr+ ""String_Node_Str""+ ""String_Node_Str""+ disableRemindSessionStr+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ getInstructorFeedbackSessionRemindLink(session.courseId,session.feedbackSessionName)+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.FEEDBACK_SESSION_REMIND+ ""String_Node_Str""+ (hasRemind ? ""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"" : ""String_Node_Str"")+ disableRemindSessionStr+ ""String_Node_Str""+ ""String_Node_Str""+ getInstructorFeedbackSessionRemindParticularStudentsPageLink(session.courseId,session.feedbackSessionName)+ ""String_Node_Str""+ ""String_Node_Str""+ disableRemindSessionStr+ ""String_Node_Str""+ session.courseId+ ""String_Node_Str""+ session.feedbackSessionName+ ""String_Node_Str""+ ""String_Node_Str"");
  if (hasUnpublish) {
    result.append(""String_Node_Str"" + ""String_Node_Str"" + getInstructorFeedbackSessionUnpublishLink(session.courseId,session.feedbackSessionName,isHome) + ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.FEEDBACK_SESSION_UNPUBLISH+ ""String_Node_Str""+ ""String_Node_Str""+ session.feedbackSessionName+ ""String_Node_Str""+ disableUnpublishSessionStr+ ""String_Node_Str"");
  }
 else {
    result.append(""String_Node_Str"" + (hasPublish ? ""String_Node_Str"" : DISABLED) + ""String_Node_Str""+ getInstructorFeedbackSessionPublishLink(session.courseId,session.feedbackSessionName,isHome)+ ""String_Node_Str""+ ""String_Node_Str""+ (hasPublish ? Const.Tooltips.FEEDBACK_SESSION_PUBLISH : Const.Tooltips.FEEDBACK_SESSION_AWAITING)+ ""String_Node_Str""+ ""String_Node_Str""+ (hasPublish ? ""String_Node_Str"" + session.feedbackSessionName + ""String_Node_Str"" : ""String_Node_Str"")+ disablePublishSessionStr+ ""String_Node_Str"");
  }
  return result.toString();
}",0.9826747460954168
62837,"/** 
 * Returns the links of actions available for a specific evaluation
 * @param eval The Evaluation details
 * @param position The position of the evaluation in the table (to be used for rowID)
 * @param isHome Flag whether the link is to be put at homepage (to determine the redirect link in delete / publish)
 * @return
 */
public String getInstructorEvaluationActions(EvaluationAttributes eval,boolean isHome,InstructorAttributes instructor){
  StringBuilder result=new StringBuilder();
  boolean hasView=false;
  boolean hasEdit=false;
  boolean hasRemind=false;
  boolean hasPublish=false;
  boolean hasUnpublish=false;
switch (eval.getStatus()) {
case AWAITING:
    hasView=true;
  hasEdit=true;
break;
case OPEN:
hasView=true;
hasEdit=true;
hasRemind=true;
break;
case CLOSED:
hasView=true;
hasEdit=true;
hasPublish=true;
break;
case PUBLISHED:
hasUnpublish=true;
hasView=true;
break;
default :
Assumption.fail(""String_Node_Str"" + eval.getStatus());
break;
}
String disabledStr=""String_Node_Str"";
String disableEditSessionStr=instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION) ? ""String_Node_Str"" : disabledStr;
String disableDeleteSessionStr=instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION) ? ""String_Node_Str"" : disabledStr;
String disableUnpublishSessionStr=instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION) ? ""String_Node_Str"" : disabledStr;
String disablePublishSessionStr=instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION) ? ""String_Node_Str"" : disabledStr;
result.append(""String_Node_Str"" + (hasView ? ""String_Node_Str"" : DISABLED) + ""String_Node_Str""+ getInstructorEvaluationResultsLink(eval.courseId,eval.name)+ ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.EVALUATION_RESULTS+ ""String_Node_Str""+ ""String_Node_Str"");
result.append(""String_Node_Str"" + (hasEdit ? ""String_Node_Str"" : DISABLED) + ""String_Node_Str""+ getInstructorEvaluationEditLink(eval.courseId,eval.name)+ ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.EVALUATION_EDIT+ ""String_Node_Str""+ disableEditSessionStr+ ""String_Node_Str"");
result.append(""String_Node_Str"" + ""String_Node_Str"" + getInstructorEvaluationPreviewLink(eval.courseId,eval.name) + ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.EVALUATION_PREVIEW+ ""String_Node_Str""+ ""String_Node_Str"");
result.append(""String_Node_Str"" + ""String_Node_Str"" + getInstructorEvaluationDeleteLink(eval.courseId,eval.name,(isHome ? Const.ActionURIs.INSTRUCTOR_HOME_PAGE : Const.ActionURIs.INSTRUCTOR_FEEDBACKS_PAGE)) + ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.EVALUATION_DELETE+ ""String_Node_Str""+ ""String_Node_Str""+ eval.courseId+ ""String_Node_Str""+ eval.name+ ""String_Node_Str""+ disableDeleteSessionStr+ ""String_Node_Str"");
result.append(""String_Node_Str"" + (hasRemind ? ""String_Node_Str"" : DISABLED) + ""String_Node_Str""+ getInstructorEvaluationRemindLink(eval.courseId,eval.name)+ ""String_Node_Str""+ (hasRemind ? ""String_Node_Str"" + eval.name + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ Const.Tooltips.EVALUATION_REMIND+ ""String_Node_Str"");
if (hasUnpublish) {
result.append(""String_Node_Str"" + ""String_Node_Str"" + getInstructorEvaluationUnpublishLink(eval.courseId,eval.name,isHome) + ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.EVALUATION_UNPUBLISH+ ""String_Node_Str""+ ""String_Node_Str""+ eval.name+ ""String_Node_Str""+ disableUnpublishSessionStr+ ""String_Node_Str"");
}
 else {
result.append(""String_Node_Str"" + (hasPublish ? ""String_Node_Str"" : DISABLED) + ""String_Node_Str""+ getInstructorEvaluationPublishLink(eval.courseId,eval.name,isHome)+ ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.EVALUATION_PUBLISH+ ""String_Node_Str""+ (hasPublish ? ""String_Node_Str"" + eval.name + ""String_Node_Str"" : ""String_Node_Str"")+ disablePublishSessionStr+ ""String_Node_Str"");
}
return result.toString();
}","/** 
 * Returns the links of actions available for a specific evaluation
 * @param eval The Evaluation details
 * @param position The position of the evaluation in the table (to be used for rowID)
 * @param isHome Flag whether the link is to be put at homepage (to determine the redirect link in delete / publish)
 * @return
 */
public String getInstructorEvaluationActions(EvaluationAttributes eval,boolean isHome,InstructorAttributes instructor){
  StringBuilder result=new StringBuilder();
  boolean hasView=false;
  boolean hasEdit=false;
  boolean hasRemind=false;
  boolean hasPublish=false;
  boolean hasUnpublish=false;
switch (eval.getStatus()) {
case AWAITING:
    hasView=true;
  hasEdit=true;
break;
case OPEN:
hasView=true;
hasEdit=true;
hasRemind=true;
break;
case CLOSED:
hasView=true;
hasEdit=true;
hasPublish=true;
break;
case PUBLISHED:
hasUnpublish=true;
hasView=true;
break;
default :
Assumption.fail(""String_Node_Str"" + eval.getStatus());
break;
}
String disabledStr=""String_Node_Str"";
String disableEditSessionStr=instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION) ? ""String_Node_Str"" : disabledStr;
String disableDeleteSessionStr=instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION) ? ""String_Node_Str"" : disabledStr;
String disableRemindSessionStr=(instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION) && hasRemind) ? ""String_Node_Str"" : disabledStr;
String disableUnpublishSessionStr=instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION) ? ""String_Node_Str"" : disabledStr;
String disablePublishSessionStr=instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION) ? ""String_Node_Str"" : disabledStr;
result.append(""String_Node_Str"" + (hasView ? ""String_Node_Str"" : DISABLED) + ""String_Node_Str""+ getInstructorEvaluationResultsLink(eval.courseId,eval.name)+ ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.EVALUATION_RESULTS+ ""String_Node_Str""+ ""String_Node_Str"");
result.append(""String_Node_Str"" + (hasEdit ? ""String_Node_Str"" : DISABLED) + ""String_Node_Str""+ getInstructorEvaluationEditLink(eval.courseId,eval.name)+ ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.EVALUATION_EDIT+ ""String_Node_Str""+ disableEditSessionStr+ ""String_Node_Str"");
result.append(""String_Node_Str"" + ""String_Node_Str"" + getInstructorEvaluationPreviewLink(eval.courseId,eval.name) + ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.EVALUATION_PREVIEW+ ""String_Node_Str""+ ""String_Node_Str"");
result.append(""String_Node_Str"" + ""String_Node_Str"" + getInstructorEvaluationDeleteLink(eval.courseId,eval.name,(isHome ? Const.ActionURIs.INSTRUCTOR_HOME_PAGE : Const.ActionURIs.INSTRUCTOR_FEEDBACKS_PAGE)) + ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.EVALUATION_DELETE+ ""String_Node_Str""+ ""String_Node_Str""+ eval.courseId+ ""String_Node_Str""+ eval.name+ ""String_Node_Str""+ disableDeleteSessionStr+ ""String_Node_Str"");
result.append(""String_Node_Str"" + (hasRemind ? ""String_Node_Str"" : DISABLED) + ""String_Node_Str""+ getInstructorEvaluationRemindLink(eval.courseId,eval.name)+ ""String_Node_Str""+ (hasRemind ? ""String_Node_Str"" + eval.name + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ Const.Tooltips.EVALUATION_REMIND+ ""String_Node_Str""+ disableRemindSessionStr+ ""String_Node_Str"");
if (hasUnpublish) {
result.append(""String_Node_Str"" + ""String_Node_Str"" + getInstructorEvaluationUnpublishLink(eval.courseId,eval.name,isHome) + ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.EVALUATION_UNPUBLISH+ ""String_Node_Str""+ ""String_Node_Str""+ eval.name+ ""String_Node_Str""+ disableUnpublishSessionStr+ ""String_Node_Str"");
}
 else {
result.append(""String_Node_Str"" + (hasPublish ? ""String_Node_Str"" : DISABLED) + ""String_Node_Str""+ getInstructorEvaluationPublishLink(eval.courseId,eval.name,isHome)+ ""String_Node_Str""+ ""String_Node_Str""+ Const.Tooltips.EVALUATION_PUBLISH+ ""String_Node_Str""+ (hasPublish ? ""String_Node_Str"" + eval.name + ""String_Node_Str"" : ""String_Node_Str"")+ disablePublishSessionStr+ ""String_Node_Str"");
}
return result.toString();
}",0.7428359683794467
62838,"@Override public boolean extractQuestionDetails(Map<String,String[]> requestParameters,FeedbackQuestionType questionType){
  String numOfRubricChoicesString=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_RUBRIC_NUM_COLS);
  String numOfRubricSubQuestionsString=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_RUBRIC_NUM_ROWS);
  if (numOfRubricChoicesString == null || numOfRubricSubQuestionsString == null) {
    return false;
  }
  int numOfRubricChoices=Integer.parseInt(numOfRubricChoicesString);
  int numOfRubricSubQuestions=Integer.parseInt(numOfRubricSubQuestionsString);
  List<String> rubricChoices=new ArrayList<String>();
  List<String> rubricSubQuestions=new ArrayList<String>();
  List<List<String>> rubricDescriptions=new ArrayList<List<String>>();
  int numActualChoices=0;
  int numActualSubQuestions=0;
  for (int i=0; i < numOfRubricChoices; i++) {
    String choice=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_RUBRIC_CHOICE + ""String_Node_Str"" + i);
    if (choice != null) {
      rubricChoices.add(choice);
      numActualChoices++;
    }
  }
  for (int i=0; i < numOfRubricSubQuestions; i++) {
    String subQuestion=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_RUBRIC_SUBQUESTION + ""String_Node_Str"" + i);
    if (subQuestion != null) {
      rubricSubQuestions.add(subQuestion);
      numActualSubQuestions++;
    }
  }
  int descRows=-1;
  for (int i=0; i < numOfRubricSubQuestions; i++) {
    for (int j=0; j < numOfRubricChoices; j++) {
      String description=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_RUBRIC_DESCRIPTION + ""String_Node_Str"" + i+ ""String_Node_Str""+ j);
      if (description != null) {
        if (j == 0) {
          descRows++;
          rubricDescriptions.add(new ArrayList<String>());
        }
        rubricDescriptions.get(descRows).add(description);
      }
    }
  }
  setRubricQuestionDetails(numActualChoices,rubricChoices,numActualSubQuestions,rubricSubQuestions,rubricDescriptions);
  if (!this.isValidDescriptionSize()) {
    this.initializeRubricDescriptions();
  }
  return true;
}","@Override public boolean extractQuestionDetails(Map<String,String[]> requestParameters,FeedbackQuestionType questionType){
  String numOfRubricChoicesString=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_RUBRIC_NUM_COLS);
  String numOfRubricSubQuestionsString=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_RUBRIC_NUM_ROWS);
  if (numOfRubricChoicesString == null || numOfRubricSubQuestionsString == null) {
    return false;
  }
  int numOfRubricChoices=Integer.parseInt(numOfRubricChoicesString);
  int numOfRubricSubQuestions=Integer.parseInt(numOfRubricSubQuestionsString);
  List<String> rubricChoices=new ArrayList<String>();
  List<String> rubricSubQuestions=new ArrayList<String>();
  List<List<String>> rubricDescriptions=new ArrayList<List<String>>();
  int numActualChoices=0;
  int numActualSubQuestions=0;
  for (int i=0; i < numOfRubricChoices; i++) {
    String choice=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_RUBRIC_CHOICE + ""String_Node_Str"" + i);
    if (choice != null) {
      rubricChoices.add(choice);
      numActualChoices++;
    }
  }
  for (int i=0; i < numOfRubricSubQuestions; i++) {
    String subQuestion=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_RUBRIC_SUBQUESTION + ""String_Node_Str"" + i);
    if (subQuestion != null) {
      rubricSubQuestions.add(subQuestion);
      numActualSubQuestions++;
    }
  }
  int descRows=-1;
  for (int i=0; i < numOfRubricSubQuestions; i++) {
    boolean rowAdded=false;
    for (int j=0; j < numOfRubricChoices; j++) {
      String description=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_RUBRIC_DESCRIPTION + ""String_Node_Str"" + i+ ""String_Node_Str""+ j);
      if (description != null) {
        if (rowAdded == false) {
          descRows++;
          rubricDescriptions.add(new ArrayList<String>());
          rowAdded=true;
        }
        rubricDescriptions.get(descRows).add(description);
      }
    }
  }
  setRubricQuestionDetails(numActualChoices,rubricChoices,numActualSubQuestions,rubricSubQuestions,rubricDescriptions);
  if (!this.isValidDescriptionSize()) {
    this.initializeRubricDescriptions();
  }
  return true;
}",0.9835782195332756
62839,"@Override public String getQuestionWithoutExistingResponseSubmissionFormHtml(boolean sessionIsOpen,int qnIdx,int responseIdx,String courseId){
  String questionNumberString=Integer.toString(qnIdx);
  String responseNumberString=Integer.toString(responseIdx);
  StringBuilder tableHeaderFragmentHtml=new StringBuilder();
  String tableHeaderFragmentTemplate=FeedbackQuestionFormTemplates.RUBRIC_SUBMISSION_FORM_HEADER_FRAGMENT;
  for (int i=0; i < numOfRubricChoices; i++) {
    String optionFragment=FeedbackQuestionFormTemplates.populateTemplate(tableHeaderFragmentTemplate,""String_Node_Str"",questionNumberString,""String_Node_Str"",responseNumberString,""String_Node_Str"",Integer.toString(i),""String_Node_Str"",rubricChoices.get(i));
    tableHeaderFragmentHtml.append(optionFragment + Const.EOL);
  }
  StringBuilder tableBodyHtml=new StringBuilder();
  String tableBodyFragmentTemplate=FeedbackQuestionFormTemplates.RUBRIC_SUBMISSION_FORM_BODY_FRAGMENT;
  String tableBodyTemplate=FeedbackQuestionFormTemplates.RUBRIC_SUBMISSION_FORM_BODY;
  for (int j=0; j < numOfRubricSubQuestions; j++) {
    StringBuilder tableBodyFragmentHtml=new StringBuilder();
    for (int i=0; i < numOfRubricChoices; i++) {
      String optionFragment=FeedbackQuestionFormTemplates.populateTemplate(tableBodyFragmentTemplate,""String_Node_Str"",questionNumberString,""String_Node_Str"",responseNumberString,""String_Node_Str"",Integer.toString(i),""String_Node_Str"",Integer.toString(j),""String_Node_Str"",this.getDescription(j,i),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_QUESTION_RUBRICCHOICE);
      tableBodyFragmentHtml.append(optionFragment + Const.EOL);
    }
    String optionFragment2=FeedbackQuestionFormTemplates.populateTemplate(tableBodyTemplate,""String_Node_Str"",questionNumberString,""String_Node_Str"",responseNumberString,""String_Node_Str"",Integer.toString(j),""String_Node_Str"",rubricSubQuestions.get(j),""String_Node_Str"",tableBodyFragmentHtml.toString());
    tableBodyHtml.append(optionFragment2 + Const.EOL);
  }
  String html=FeedbackQuestionFormTemplates.populateTemplate(FeedbackQuestionFormTemplates.RUBRIC_SUBMISSION_FORM,""String_Node_Str"",questionNumberString,""String_Node_Str"",responseNumberString,""String_Node_Str"",Integer.toString(this.numOfRubricSubQuestions),""String_Node_Str"",Integer.toString(this.numOfRubricChoices),""String_Node_Str"",tableHeaderFragmentHtml.toString(),""String_Node_Str"",tableBodyHtml.toString(),""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_TEXT);
  return html;
}","@Override public String getQuestionWithoutExistingResponseSubmissionFormHtml(boolean sessionIsOpen,int qnIdx,int responseIdx,String courseId){
  String questionNumberString=Integer.toString(qnIdx);
  String responseNumberString=Integer.toString(responseIdx);
  StringBuilder tableHeaderFragmentHtml=new StringBuilder();
  String tableHeaderFragmentTemplate=FeedbackQuestionFormTemplates.RUBRIC_SUBMISSION_FORM_HEADER_FRAGMENT;
  for (int i=0; i < numOfRubricChoices; i++) {
    String optionFragment=FeedbackQuestionFormTemplates.populateTemplate(tableHeaderFragmentTemplate,""String_Node_Str"",questionNumberString,""String_Node_Str"",responseNumberString,""String_Node_Str"",Integer.toString(i),""String_Node_Str"",rubricChoices.get(i));
    tableHeaderFragmentHtml.append(optionFragment + Const.EOL);
  }
  StringBuilder tableBodyHtml=new StringBuilder();
  String tableBodyFragmentTemplate=FeedbackQuestionFormTemplates.RUBRIC_SUBMISSION_FORM_BODY_FRAGMENT;
  String tableBodyTemplate=FeedbackQuestionFormTemplates.RUBRIC_SUBMISSION_FORM_BODY;
  for (int j=0; j < numOfRubricSubQuestions; j++) {
    StringBuilder tableBodyFragmentHtml=new StringBuilder();
    for (int i=0; i < numOfRubricChoices; i++) {
      String optionFragment=FeedbackQuestionFormTemplates.populateTemplate(tableBodyFragmentTemplate,""String_Node_Str"",questionNumberString,""String_Node_Str"",responseNumberString,""String_Node_Str"",Integer.toString(i),""String_Node_Str"",Integer.toString(j),""String_Node_Str"",this.getDescription(j,i),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_QUESTION_RUBRICCHOICE);
      tableBodyFragmentHtml.append(optionFragment + Const.EOL);
    }
    String optionFragment2=FeedbackQuestionFormTemplates.populateTemplate(tableBodyTemplate,""String_Node_Str"",questionNumberString,""String_Node_Str"",responseNumberString,""String_Node_Str"",Integer.toString(j),""String_Node_Str"",StringHelper.integerToBase26String(j + 1) + ""String_Node_Str"" + rubricSubQuestions.get(j),""String_Node_Str"",tableBodyFragmentHtml.toString());
    tableBodyHtml.append(optionFragment2 + Const.EOL);
  }
  String html=FeedbackQuestionFormTemplates.populateTemplate(FeedbackQuestionFormTemplates.RUBRIC_SUBMISSION_FORM,""String_Node_Str"",questionNumberString,""String_Node_Str"",responseNumberString,""String_Node_Str"",Integer.toString(this.numOfRubricSubQuestions),""String_Node_Str"",Integer.toString(this.numOfRubricChoices),""String_Node_Str"",tableHeaderFragmentHtml.toString(),""String_Node_Str"",tableBodyHtml.toString(),""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_TEXT);
  return html;
}",0.9875048809058962
62840,"@Override public String getQuestionWithExistingResponseSubmissionFormHtml(boolean sessionIsOpen,int qnIdx,int responseIdx,String courseId,FeedbackResponseDetails existingResponseDetails){
  FeedbackRubricResponseDetails frd=(FeedbackRubricResponseDetails)existingResponseDetails;
  System.out.println(frd.getAnswerString());
  String questionNumberString=Integer.toString(qnIdx);
  String responseNumberString=Integer.toString(responseIdx);
  StringBuilder tableHeaderFragmentHtml=new StringBuilder();
  String tableHeaderFragmentTemplate=FeedbackQuestionFormTemplates.RUBRIC_SUBMISSION_FORM_HEADER_FRAGMENT;
  for (int i=0; i < numOfRubricChoices; i++) {
    String optionFragment=FeedbackQuestionFormTemplates.populateTemplate(tableHeaderFragmentTemplate,""String_Node_Str"",questionNumberString,""String_Node_Str"",responseNumberString,""String_Node_Str"",Integer.toString(i),""String_Node_Str"",rubricChoices.get(i));
    tableHeaderFragmentHtml.append(optionFragment + Const.EOL);
  }
  StringBuilder tableBodyHtml=new StringBuilder();
  String tableBodyFragmentTemplate=FeedbackQuestionFormTemplates.RUBRIC_SUBMISSION_FORM_BODY_FRAGMENT;
  String tableBodyTemplate=FeedbackQuestionFormTemplates.RUBRIC_SUBMISSION_FORM_BODY;
  for (int j=0; j < numOfRubricSubQuestions; j++) {
    StringBuilder tableBodyFragmentHtml=new StringBuilder();
    for (int i=0; i < numOfRubricChoices; i++) {
      String optionFragment=FeedbackQuestionFormTemplates.populateTemplate(tableBodyFragmentTemplate,""String_Node_Str"",questionNumberString,""String_Node_Str"",responseNumberString,""String_Node_Str"",Integer.toString(i),""String_Node_Str"",Integer.toString(j),""String_Node_Str"",this.getDescription(j,i),""String_Node_Str"",(frd.getAnswer(j) == i) ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_QUESTION_RUBRICCHOICE);
      tableBodyFragmentHtml.append(optionFragment + Const.EOL);
    }
    String optionFragment2=FeedbackQuestionFormTemplates.populateTemplate(tableBodyTemplate,""String_Node_Str"",questionNumberString,""String_Node_Str"",responseNumberString,""String_Node_Str"",Integer.toString(j),""String_Node_Str"",rubricSubQuestions.get(j),""String_Node_Str"",tableBodyFragmentHtml.toString());
    tableBodyHtml.append(optionFragment2 + Const.EOL);
  }
  String html=FeedbackQuestionFormTemplates.populateTemplate(FeedbackQuestionFormTemplates.RUBRIC_SUBMISSION_FORM,""String_Node_Str"",questionNumberString,""String_Node_Str"",responseNumberString,""String_Node_Str"",Integer.toString(this.numOfRubricSubQuestions),""String_Node_Str"",Integer.toString(this.numOfRubricChoices),""String_Node_Str"",tableHeaderFragmentHtml.toString(),""String_Node_Str"",tableBodyHtml.toString(),""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_TEXT);
  return html;
}","@Override public String getQuestionWithExistingResponseSubmissionFormHtml(boolean sessionIsOpen,int qnIdx,int responseIdx,String courseId,FeedbackResponseDetails existingResponseDetails){
  FeedbackRubricResponseDetails frd=(FeedbackRubricResponseDetails)existingResponseDetails;
  String questionNumberString=Integer.toString(qnIdx);
  String responseNumberString=Integer.toString(responseIdx);
  StringBuilder tableHeaderFragmentHtml=new StringBuilder();
  String tableHeaderFragmentTemplate=FeedbackQuestionFormTemplates.RUBRIC_SUBMISSION_FORM_HEADER_FRAGMENT;
  for (int i=0; i < numOfRubricChoices; i++) {
    String optionFragment=FeedbackQuestionFormTemplates.populateTemplate(tableHeaderFragmentTemplate,""String_Node_Str"",questionNumberString,""String_Node_Str"",responseNumberString,""String_Node_Str"",Integer.toString(i),""String_Node_Str"",rubricChoices.get(i));
    tableHeaderFragmentHtml.append(optionFragment + Const.EOL);
  }
  StringBuilder tableBodyHtml=new StringBuilder();
  String tableBodyFragmentTemplate=FeedbackQuestionFormTemplates.RUBRIC_SUBMISSION_FORM_BODY_FRAGMENT;
  String tableBodyTemplate=FeedbackQuestionFormTemplates.RUBRIC_SUBMISSION_FORM_BODY;
  for (int j=0; j < numOfRubricSubQuestions; j++) {
    StringBuilder tableBodyFragmentHtml=new StringBuilder();
    for (int i=0; i < numOfRubricChoices; i++) {
      String optionFragment=FeedbackQuestionFormTemplates.populateTemplate(tableBodyFragmentTemplate,""String_Node_Str"",questionNumberString,""String_Node_Str"",responseNumberString,""String_Node_Str"",Integer.toString(i),""String_Node_Str"",Integer.toString(j),""String_Node_Str"",this.getDescription(j,i),""String_Node_Str"",(frd.getAnswer(j) == i) ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_QUESTION_RUBRICCHOICE);
      tableBodyFragmentHtml.append(optionFragment + Const.EOL);
    }
    String optionFragment2=FeedbackQuestionFormTemplates.populateTemplate(tableBodyTemplate,""String_Node_Str"",questionNumberString,""String_Node_Str"",responseNumberString,""String_Node_Str"",Integer.toString(j),""String_Node_Str"",StringHelper.integerToBase26String(j + 1) + ""String_Node_Str"" + rubricSubQuestions.get(j),""String_Node_Str"",tableBodyFragmentHtml.toString());
    tableBodyHtml.append(optionFragment2 + Const.EOL);
  }
  String html=FeedbackQuestionFormTemplates.populateTemplate(FeedbackQuestionFormTemplates.RUBRIC_SUBMISSION_FORM,""String_Node_Str"",questionNumberString,""String_Node_Str"",responseNumberString,""String_Node_Str"",Integer.toString(this.numOfRubricSubQuestions),""String_Node_Str"",Integer.toString(this.numOfRubricChoices),""String_Node_Str"",tableHeaderFragmentHtml.toString(),""String_Node_Str"",tableBodyHtml.toString(),""String_Node_Str"",Const.ParamsNames.FEEDBACK_RESPONSE_TEXT);
  return html;
}",0.980300018073378
62841,"@Override public boolean isChangesRequiresResponseDeletion(FeedbackQuestionDetails newDetails){
  FeedbackRubricQuestionDetails newRubricDetails=(FeedbackRubricQuestionDetails)newDetails;
  if (this.numOfRubricChoices != newRubricDetails.numOfRubricChoices || this.rubricChoices.containsAll(newRubricDetails.rubricChoices) == false || newRubricDetails.rubricChoices.containsAll(this.rubricChoices) == false) {
    return true;
  }
  if (this.numOfRubricSubQuestions != newRubricDetails.numOfRubricSubQuestions || this.rubricSubQuestions.containsAll(newRubricDetails.rubricChoices) == false || newRubricDetails.rubricSubQuestions.containsAll(this.rubricSubQuestions) == false) {
    return true;
  }
  return false;
}","@Override public boolean isChangesRequiresResponseDeletion(FeedbackQuestionDetails newDetails){
  FeedbackRubricQuestionDetails newRubricDetails=(FeedbackRubricQuestionDetails)newDetails;
  if (this.numOfRubricChoices != newRubricDetails.numOfRubricChoices || this.rubricChoices.containsAll(newRubricDetails.rubricChoices) == false || newRubricDetails.rubricChoices.containsAll(this.rubricChoices) == false) {
    return true;
  }
  if (this.numOfRubricSubQuestions != newRubricDetails.numOfRubricSubQuestions || this.rubricSubQuestions.containsAll(newRubricDetails.rubricSubQuestions) == false || newRubricDetails.rubricSubQuestions.containsAll(this.rubricSubQuestions) == false) {
    return true;
  }
  return false;
}",0.988169798190675
62842,"/** 
 * For rubric questions, 1) Description size should be valid 2) At least 2 choices 3) At least 1 sub-question 4) Choices and sub-questions should not be empty
 */
@Override public List<String> validateQuestionDetails(){
  List<String> errors=new ArrayList<String>();
  if (!isValidDescriptionSize()) {
    errors.add(ERROR_RUBRIC_DESC_INVALID_SIZE);
  }
  if (this.numOfRubricChoices < MIN_NUM_OF_RUBRIC_CHOICES) {
    errors.add(ERROR_NOT_ENOUGH_RUBRIC_CHOICES + MIN_NUM_OF_RUBRIC_CHOICES);
  }
  if (this.numOfRubricChoices < MIN_NUM_OF_RUBRIC_SUB_QUESTIONS) {
    errors.add(ERROR_NOT_ENOUGH_RUBRIC_SUB_QUESTIONS + MIN_NUM_OF_RUBRIC_SUB_QUESTIONS);
  }
  for (  String choice : this.rubricChoices) {
    if (choice.trim().isEmpty()) {
      errors.add(ERROR_RUBRIC_EMPTY_CHOICE);
      break;
    }
  }
  for (  String subQn : this.rubricSubQuestions) {
    if (subQn.trim().isEmpty()) {
      errors.add(ERROR_RUBRIC_EMPTY_SUB_QUESTION);
      break;
    }
  }
  return errors;
}","/** 
 * For rubric questions, 1) Description size should be valid 2) At least 2 choices 3) At least 1 sub-question 4) Choices and sub-questions should not be empty
 */
@Override public List<String> validateQuestionDetails(){
  List<String> errors=new ArrayList<String>();
  if (!isValidDescriptionSize()) {
    errors.add(ERROR_RUBRIC_DESC_INVALID_SIZE);
  }
  if (this.numOfRubricChoices < MIN_NUM_OF_RUBRIC_CHOICES) {
    errors.add(ERROR_NOT_ENOUGH_RUBRIC_CHOICES + MIN_NUM_OF_RUBRIC_CHOICES);
  }
  if (this.numOfRubricSubQuestions < MIN_NUM_OF_RUBRIC_SUB_QUESTIONS) {
    errors.add(ERROR_NOT_ENOUGH_RUBRIC_SUB_QUESTIONS + MIN_NUM_OF_RUBRIC_SUB_QUESTIONS);
  }
  for (  String choice : this.rubricChoices) {
    if (choice.trim().isEmpty()) {
      errors.add(ERROR_RUBRIC_EMPTY_CHOICE);
      break;
    }
  }
  for (  String subQn : this.rubricSubQuestions) {
    if (subQn.trim().isEmpty()) {
      errors.add(ERROR_RUBRIC_EMPTY_SUB_QUESTION);
      break;
    }
  }
  return errors;
}",0.9914184755174156
62843,"@Override public boolean extractQuestionDetails(Map<String,String[]> requestParameters,FeedbackQuestionType questionType){
  String numOfRubricChoicesString=HttpRequestHelper.getValueFromParamMap(requestParameters,""String_Node_Str"");
  String numOfRubricSubQuestionsString=HttpRequestHelper.getValueFromParamMap(requestParameters,""String_Node_Str"");
  int numOfRubricChoices=Integer.parseInt(numOfRubricChoicesString);
  int numOfRubricSubQuestions=Integer.parseInt(numOfRubricSubQuestionsString);
  List<String> rubricChoices=new ArrayList<String>();
  List<String> rubricSubQuestions=new ArrayList<String>();
  List<List<String>> rubricDescriptions=new ArrayList<List<String>>();
  int numActualChoices=0;
  int numActualSubQuestions=0;
  for (int i=0; i < numOfRubricChoices; i++) {
    String choice=HttpRequestHelper.getValueFromParamMap(requestParameters,""String_Node_Str"" + ""String_Node_Str"" + i);
    if (choice != null) {
      rubricChoices.add(choice);
      numActualChoices++;
    }
  }
  for (int i=0; i < numOfRubricSubQuestions; i++) {
    String subQuestion=HttpRequestHelper.getValueFromParamMap(requestParameters,""String_Node_Str"" + ""String_Node_Str"" + i);
    if (subQuestion != null) {
      rubricSubQuestions.add(subQuestion);
      numActualSubQuestions++;
    }
  }
  for (int i=0; i < numOfRubricSubQuestions; i++) {
    rubricDescriptions.add(new ArrayList<String>());
    for (int j=0; j < numOfRubricChoices; j++) {
      String description=HttpRequestHelper.getValueFromParamMap(requestParameters,""String_Node_Str"" + ""String_Node_Str"" + i + ""String_Node_Str""+ j);
      if (description != null) {
        rubricDescriptions.get(i).add(description);
      }
    }
  }
  setRubricQuestionDetails(numActualChoices,rubricChoices,numActualSubQuestions,rubricSubQuestions,rubricDescriptions);
  return true;
}","@Override public boolean extractQuestionDetails(Map<String,String[]> requestParameters,FeedbackQuestionType questionType){
  String numOfRubricChoicesString=HttpRequestHelper.getValueFromParamMap(requestParameters,""String_Node_Str"");
  String numOfRubricSubQuestionsString=HttpRequestHelper.getValueFromParamMap(requestParameters,""String_Node_Str"");
  int numOfRubricChoices=Integer.parseInt(numOfRubricChoicesString);
  int numOfRubricSubQuestions=Integer.parseInt(numOfRubricSubQuestionsString);
  List<String> rubricChoices=new ArrayList<String>();
  List<String> rubricSubQuestions=new ArrayList<String>();
  List<List<String>> rubricDescriptions=new ArrayList<List<String>>();
  int numActualChoices=0;
  int numActualSubQuestions=0;
  for (int i=0; i < numOfRubricChoices; i++) {
    String choice=HttpRequestHelper.getValueFromParamMap(requestParameters,""String_Node_Str"" + ""String_Node_Str"" + i);
    if (choice != null) {
      rubricChoices.add(choice);
      numActualChoices++;
    }
  }
  for (int i=0; i < numOfRubricSubQuestions; i++) {
    String subQuestion=HttpRequestHelper.getValueFromParamMap(requestParameters,""String_Node_Str"" + ""String_Node_Str"" + i);
    if (subQuestion != null) {
      rubricSubQuestions.add(subQuestion);
      numActualSubQuestions++;
    }
  }
  int descRows=-1;
  for (int i=0; i < numOfRubricSubQuestions; i++) {
    for (int j=0; j < numOfRubricChoices; j++) {
      String description=HttpRequestHelper.getValueFromParamMap(requestParameters,""String_Node_Str"" + ""String_Node_Str"" + i + ""String_Node_Str""+ j);
      if (description != null) {
        if (j == 0) {
          descRows++;
          rubricDescriptions.add(new ArrayList<String>());
        }
        rubricDescriptions.get(descRows).add(description);
      }
    }
  }
  setRubricQuestionDetails(numActualChoices,rubricChoices,numActualSubQuestions,rubricSubQuestions,rubricDescriptions);
  return true;
}",0.9461620469083156
62844,"public String getLastNameFromRoster(String email){
  StudentAttributes student=roster.getStudentForEmail(email);
  InstructorAttributes instructor=roster.getInstructorForEmail(email);
  if (student != null) {
    return student.lastName;
  }
 else   if (instructor != null) {
    return instructor.name;
  }
  return ""String_Node_Str"";
}","public String getLastNameFromRoster(String email){
  StudentAttributes student=roster.getStudentForEmail(email);
  InstructorAttributes instructor=roster.getInstructorForEmail(email);
  if (student != null) {
    return student.lastName;
  }
 else   if (instructor != null) {
    return instructor.name;
  }
  if (rosterTeamNameEmailTable.containsKey(email)) {
    return email;
  }
  if (email.contains(Const.TEAM_OF_EMAIL_OWNER)) {
    int index=email.indexOf(Const.TEAM_OF_EMAIL_OWNER);
    return getTeamNameFromRoster(email.substring(0,index));
  }
  return ""String_Node_Str"";
}",0.7326086956521739
62845,"public List<String> getPossibleRecipientsForTeam(FeedbackQuestionAttributes fqa,String team){
  FeedbackParticipantType recipienttype=fqa.recipientType;
  List<String> possibleRecipients=new ArrayList<String>();
switch (recipienttype) {
case TEAMS:
    possibleRecipients=getListOfTeams();
  break;
case OWN_TEAM:
possibleRecipients.add(team);
break;
case INSTRUCTORS:
possibleRecipients=getListOfInstructorEmails();
break;
case STUDENTS:
possibleRecipients=getListOfStudentEmailsSortedBySection();
break;
case SELF:
possibleRecipients.add(team);
break;
case OWN_TEAM_MEMBERS:
case OWN_TEAM_MEMBERS_INCLUDING_SELF:
if (rosterTeamNameEmailTable.containsKey(team)) {
Map<String,String> teamToEmails=rosterTeamNameEmailTable.get(team);
if (teamToEmails != null) {
possibleRecipients=new ArrayList<String>(teamToEmails.keySet());
}
}
case NONE:
default :
break;
}
return possibleRecipients;
}","public List<String> getPossibleRecipientsForTeam(FeedbackQuestionAttributes fqa,String team){
  FeedbackParticipantType recipienttype=fqa.recipientType;
  List<String> possibleRecipients=new ArrayList<String>();
switch (recipienttype) {
case TEAMS:
    possibleRecipients=getListOfTeams();
  possibleRecipients.remove(team);
possibleRecipients.remove(""String_Node_Str"");
break;
case OWN_TEAM:
possibleRecipients.add(team);
break;
case INSTRUCTORS:
possibleRecipients=getListOfInstructorEmails();
break;
case STUDENTS:
possibleRecipients=getListOfStudentEmailsSortedBySection();
break;
case SELF:
possibleRecipients.add(team);
break;
case OWN_TEAM_MEMBERS:
case OWN_TEAM_MEMBERS_INCLUDING_SELF:
if (rosterTeamNameEmailTable.containsKey(team)) {
Map<String,String> teamToEmails=rosterTeamNameEmailTable.get(team);
if (teamToEmails != null) {
possibleRecipients=new ArrayList<String>(teamToEmails.keySet());
}
}
case NONE:
default :
break;
}
return possibleRecipients;
}",0.9574123989218328
62846,"public String getNameFromRoster(String email){
  StudentAttributes student=roster.getStudentForEmail(email);
  InstructorAttributes instructor=roster.getInstructorForEmail(email);
  if (student != null) {
    return student.name;
  }
 else   if (instructor != null) {
    return instructor.name;
  }
  return ""String_Node_Str"";
}","public String getNameFromRoster(String email){
  StudentAttributes student=roster.getStudentForEmail(email);
  InstructorAttributes instructor=roster.getInstructorForEmail(email);
  if (student != null) {
    return student.name;
  }
 else   if (instructor != null) {
    return instructor.name;
  }
  if (rosterTeamNameEmailTable.containsKey(email)) {
    return email;
  }
  if (email.contains(Const.TEAM_OF_EMAIL_OWNER)) {
    int index=email.indexOf(Const.TEAM_OF_EMAIL_OWNER);
    return getTeamNameFromRoster(email.substring(0,index));
  }
  return ""String_Node_Str"";
}",0.7278761061946902
62847,"public String getFeedbackSessionResultsSummaryInSectionAsCsv(String feedbackSessionName,String courseId,String userEmail,String section) throws UnauthorizedAccessException, EntityDoesNotExistException, ExceedingRangeException {
  long indicatedRange=(section == null) ? 10000 : -1;
  FeedbackSessionResultsBundle results=getFeedbackSessionResultsForInstructorInSectionWithinRangeFromView(feedbackSessionName,courseId,userEmail,section,indicatedRange,""String_Node_Str"");
  if (!results.isComplete) {
    throw new ExceedingRangeException(""String_Node_Str"");
  }
  Collections.sort(results.responses,results.compareByGiverRecipientQuestion);
  StringBuilder exportBuilder=new StringBuilder();
  exportBuilder.append(""String_Node_Str"" + ""String_Node_Str"" + Sanitizer.sanitizeForCsv(results.feedbackSession.courseId) + Const.EOL+ ""String_Node_Str""+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(results.feedbackSession.feedbackSessionName)+ Const.EOL);
  if (section != null) {
    exportBuilder.append(""String_Node_Str"" + ""String_Node_Str"" + Sanitizer.sanitizeForCsv(section) + Const.EOL);
  }
  exportBuilder.append(Const.EOL + Const.EOL);
  for (  Map.Entry<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>> entry : results.getQuestionResponseMap().entrySet()) {
    FeedbackQuestionAttributes question=entry.getKey();
    FeedbackQuestionDetails questionDetails=question.getQuestionDetails();
    exportBuilder.append(""String_Node_Str"" + Integer.toString(entry.getKey().questionNumber) + ""String_Node_Str""+ Sanitizer.sanitizeForCsv(questionDetails.questionText)+ Const.EOL+ Const.EOL);
    String statistics=questionDetails.getQuestionResultStatisticsCsv(entry.getValue(),question,results);
    if (statistics != ""String_Node_Str"") {
      exportBuilder.append(""String_Node_Str"" + Const.EOL);
      exportBuilder.append(statistics + Const.EOL);
    }
    exportBuilder.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + questionDetails.getCsvHeader() + Const.EOL);
    List<String> allPossibleGivers=results.getPossibleGivers(entry.getKey());
    List<String> possibleRecipientsForGiver=null;
    String prevGiver=""String_Node_Str"";
    for (    FeedbackResponseAttributes response : entry.getValue()) {
      String giverLastName=results.getLastNameForEmail(response.giverEmail);
      String giverFullName=results.getNameForEmail(response.giverEmail);
      String recipientLastName=results.getLastNameForEmail(response.recipientEmail);
      String recipientFulltName=results.getNameForEmail(response.recipientEmail);
      allPossibleGivers.remove(response.giverEmail);
      if (!prevGiver.equals(response.giverEmail)) {
        if (possibleRecipientsForGiver != null) {
          for (          String possibleRecipient : possibleRecipientsForGiver) {
            String prevGiverLastName=results.roster.getStudentForEmail(prevGiver).lastName;
            String possibleRecipientLastName=results.roster.getStudentForEmail(possibleRecipient).lastName;
            exportBuilder.append(Sanitizer.sanitizeForCsv(results.getTeamNameFromRoster(prevGiver)) + ""String_Node_Str"" + Sanitizer.sanitizeForCsv(StringHelper.removeExtraSpace(results.getNameFromRoster(prevGiver)))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(StringHelper.removeExtraSpace(prevGiverLastName))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(results.getTeamNameFromRoster(possibleRecipient))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(StringHelper.removeExtraSpace(results.getNameFromRoster(possibleRecipient)))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(StringHelper.removeExtraSpace(possibleRecipientLastName))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(questionDetails.getNoResponseText(prevGiver,possibleRecipient,results,question))+ Const.EOL);
          }
        }
        possibleRecipientsForGiver=results.getPossibleRecipients(entry.getKey(),prevGiver);
      }
      exportBuilder.append(Sanitizer.sanitizeForCsv(results.getTeamNameForEmail(response.giverEmail)) + ""String_Node_Str"" + Sanitizer.sanitizeForCsv(StringHelper.removeExtraSpace(giverFullName))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(StringHelper.removeExtraSpace(giverLastName))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(results.getTeamNameForEmail(response.recipientEmail))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(StringHelper.removeExtraSpace(recipientFulltName))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(StringHelper.removeExtraSpace(recipientLastName))+ ""String_Node_Str""+ results.getResponseAnswerCsv(response,question)+ Const.EOL);
      prevGiver=response.giverEmail;
    }
    if (possibleRecipientsForGiver != null) {
      for (      String possibleRecipient : possibleRecipientsForGiver) {
        String prevGiverLastName=results.roster.getStudentForEmail(prevGiver).lastName;
        String possibleRecipientLastName=results.roster.getStudentForEmail(possibleRecipient).lastName;
        exportBuilder.append(Sanitizer.sanitizeForCsv(results.getTeamNameFromRoster(prevGiver)) + ""String_Node_Str"" + Sanitizer.sanitizeForCsv(StringHelper.removeExtraSpace(results.getNameFromRoster(prevGiver)))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(StringHelper.removeExtraSpace(prevGiverLastName))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(results.getTeamNameFromRoster(possibleRecipient))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(StringHelper.removeExtraSpace(results.getNameFromRoster(possibleRecipient)))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(StringHelper.removeExtraSpace(possibleRecipientLastName))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(questionDetails.getNoResponseText(prevGiver,possibleRecipient,results,question))+ Const.EOL);
      }
      allPossibleGivers.remove(prevGiver);
    }
    for (    String possibleGiver : allPossibleGivers) {
      possibleRecipientsForGiver=results.getPossibleRecipients(entry.getKey(),possibleGiver);
      for (      String possibleRecipient : possibleRecipientsForGiver) {
        String possibleGiverLastName=results.getLastNameFromRoster(possibleGiver);
        String possibleRecipientLastName=results.getLastNameFromRoster(possibleRecipient);
        exportBuilder.append(Sanitizer.sanitizeForCsv(results.getTeamNameFromRoster(possibleGiver)) + ""String_Node_Str"" + Sanitizer.sanitizeForCsv(StringHelper.removeExtraSpace(results.getNameFromRoster(possibleGiver)))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(StringHelper.removeExtraSpace(possibleGiverLastName))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(results.getTeamNameFromRoster(possibleRecipient))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(StringHelper.removeExtraSpace(results.getNameFromRoster(possibleRecipient)))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(StringHelper.removeExtraSpace(possibleRecipientLastName))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(questionDetails.getNoResponseText(possibleGiver,possibleRecipient,results,question))+ Const.EOL);
      }
    }
    exportBuilder.append(Const.EOL + Const.EOL);
  }
  return exportBuilder.toString();
}","public String getFeedbackSessionResultsSummaryInSectionAsCsv(String feedbackSessionName,String courseId,String userEmail,String section) throws UnauthorizedAccessException, EntityDoesNotExistException, ExceedingRangeException {
  long indicatedRange=(section == null) ? 10000 : -1;
  FeedbackSessionResultsBundle results=getFeedbackSessionResultsForInstructorInSectionWithinRangeFromView(feedbackSessionName,courseId,userEmail,section,indicatedRange,""String_Node_Str"");
  if (!results.isComplete) {
    throw new ExceedingRangeException(""String_Node_Str"");
  }
  Collections.sort(results.responses,results.compareByGiverRecipientQuestion);
  StringBuilder exportBuilder=new StringBuilder();
  exportBuilder.append(""String_Node_Str"" + ""String_Node_Str"" + Sanitizer.sanitizeForCsv(results.feedbackSession.courseId) + Const.EOL+ ""String_Node_Str""+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(results.feedbackSession.feedbackSessionName)+ Const.EOL);
  if (section != null) {
    exportBuilder.append(""String_Node_Str"" + ""String_Node_Str"" + Sanitizer.sanitizeForCsv(section) + Const.EOL);
  }
  exportBuilder.append(Const.EOL + Const.EOL);
  for (  Map.Entry<FeedbackQuestionAttributes,List<FeedbackResponseAttributes>> entry : results.getQuestionResponseMap().entrySet()) {
    FeedbackQuestionAttributes question=entry.getKey();
    FeedbackQuestionDetails questionDetails=question.getQuestionDetails();
    exportBuilder.append(""String_Node_Str"" + Integer.toString(entry.getKey().questionNumber) + ""String_Node_Str""+ Sanitizer.sanitizeForCsv(questionDetails.questionText)+ Const.EOL+ Const.EOL);
    String statistics=questionDetails.getQuestionResultStatisticsCsv(entry.getValue(),question,results);
    if (statistics != ""String_Node_Str"") {
      exportBuilder.append(""String_Node_Str"" + Const.EOL);
      exportBuilder.append(statistics + Const.EOL);
    }
    exportBuilder.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + questionDetails.getCsvHeader() + Const.EOL);
    List<String> allPossibleGivers=results.getPossibleGivers(entry.getKey());
    List<String> possibleRecipientsForGiver=null;
    String prevGiver=null;
    for (    FeedbackResponseAttributes response : entry.getValue()) {
      String giverLastName=results.getLastNameForEmail(response.giverEmail);
      String giverFullName=results.getNameForEmail(response.giverEmail);
      String recipientLastName=results.getLastNameForEmail(response.recipientEmail);
      String recipientFullName=results.getNameForEmail(response.recipientEmail);
      if (question.giverType == FeedbackParticipantType.TEAMS) {
        allPossibleGivers.remove(results.getNameFromRoster(response.giverEmail));
      }
 else {
        allPossibleGivers.remove(response.giverEmail);
      }
      boolean isNewGiver=(prevGiver == null) || !prevGiver.equals(response.giverEmail);
      if (isNewGiver) {
        if (possibleRecipientsForGiver != null) {
          exportBuilder.append(getRowsOfPossibleRecipientsInCsvFormat(results,question,questionDetails,possibleRecipientsForGiver,prevGiver));
        }
        String giverEmail=(question.giverType == FeedbackParticipantType.TEAMS) ? results.getNameFromRoster(response.giverEmail) : response.giverEmail;
        possibleRecipientsForGiver=results.getPossibleRecipients(entry.getKey(),giverEmail);
        exportBuilder.append(Const.EOL);
      }
      exportBuilder.append(Sanitizer.sanitizeForCsv(results.getTeamNameForEmail(response.giverEmail)) + ""String_Node_Str"" + Sanitizer.sanitizeForCsv(StringHelper.removeExtraSpace(giverFullName))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(StringHelper.removeExtraSpace(giverLastName))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(results.getTeamNameForEmail(response.recipientEmail))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(StringHelper.removeExtraSpace(recipientFullName))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(StringHelper.removeExtraSpace(recipientLastName))+ ""String_Node_Str""+ results.getResponseAnswerCsv(response,question)+ Const.EOL);
      if (question.recipientType == FeedbackParticipantType.TEAMS) {
        possibleRecipientsForGiver.remove(results.getNameFromRoster(response.recipientEmail));
      }
 else {
        possibleRecipientsForGiver.remove(response.recipientEmail);
      }
      prevGiver=response.giverEmail;
    }
    if (possibleRecipientsForGiver != null) {
      exportBuilder.append(getRowsOfPossibleRecipientsInCsvFormat(results,question,questionDetails,possibleRecipientsForGiver,prevGiver));
      allPossibleGivers.remove(prevGiver);
      if (question.giverType == FeedbackParticipantType.TEAMS) {
        allPossibleGivers.remove(results.getNameFromRoster(prevGiver));
      }
 else {
        allPossibleGivers.remove(prevGiver);
      }
    }
    for (    String possibleGiverWithNoResponses : allPossibleGivers) {
      possibleRecipientsForGiver=results.getPossibleRecipients(entry.getKey(),possibleGiverWithNoResponses);
      exportBuilder.append(getRowsOfPossibleRecipientsInCsvFormat(results,question,questionDetails,possibleRecipientsForGiver,possibleGiverWithNoResponses));
    }
    exportBuilder.append(Const.EOL + Const.EOL);
  }
  return exportBuilder.toString();
}",0.5368656240025534
62848,"@Override public String getQuestionSpecificEditFormHtml(int questionNumber){
  StringBuilder optionListHtml=new StringBuilder();
  String optionFragmentTemplate=FeedbackQuestionFormTemplates.CONSTSUM_EDIT_FORM_OPTIONFRAGMENT;
  for (int i=0; i < numOfConstSumOptions; i++) {
    String optionFragment=FeedbackQuestionFormTemplates.populateTemplate(optionFragmentTemplate,""String_Node_Str"",Integer.toString(i),""String_Node_Str"",constSumOptions.get(i),""String_Node_Str"",Const.ParamsNames.FEEDBACK_QUESTION_CONSTSUMOPTION);
    optionListHtml.append(optionFragment + Const.EOL);
  }
  String html=FeedbackQuestionFormTemplates.populateTemplate(FeedbackQuestionFormTemplates.CONSTSUM_EDIT_FORM,""String_Node_Str"",optionListHtml.toString(),""String_Node_Str"",Integer.toString(questionNumber),""String_Node_Str"",Const.ParamsNames.FEEDBACK_QUESTION_NUMBEROFCHOICECREATED,""String_Node_Str"",Integer.toString(numOfConstSumOptions),""String_Node_Str"",(distributeToRecipients == true) ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",(pointsPerOption == true) ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",(distributeToRecipients == true) ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",(points == 0) ? ""String_Node_Str"" : new Integer(points).toString(),""String_Node_Str"",(forceUnevenDistribution) ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_QUESTION_CONSTSUMTORECIPIENTS,""String_Node_Str"",Const.ParamsNames.FEEDBACK_QUESTION_CONSTSUMPOINTSPEROPTION,""String_Node_Str"",Const.ParamsNames.FEEDBACK_QUESTION_CONSTSUMPOINTS,""String_Node_Str"",Const.ParamsNames.FEEDBACK_QUESTION_CONSTSUMDISTRIBUTEUNEVENLY);
  return html;
}","@Override public String getQuestionSpecificEditFormHtml(int questionNumber){
  StringBuilder optionListHtml=new StringBuilder();
  String optionFragmentTemplate=FeedbackQuestionFormTemplates.CONSTSUM_EDIT_FORM_OPTIONFRAGMENT;
  for (int i=0; i < numOfConstSumOptions; i++) {
    String optionFragment=FeedbackQuestionFormTemplates.populateTemplate(optionFragmentTemplate,""String_Node_Str"",Integer.toString(i),""String_Node_Str"",constSumOptions.get(i),""String_Node_Str"",Const.ParamsNames.FEEDBACK_QUESTION_CONSTSUMOPTION);
    optionListHtml.append(optionFragment + Const.EOL);
  }
  String html=FeedbackQuestionFormTemplates.populateTemplate(FeedbackQuestionFormTemplates.CONSTSUM_EDIT_FORM,""String_Node_Str"",optionListHtml.toString(),""String_Node_Str"",Integer.toString(questionNumber),""String_Node_Str"",Const.ParamsNames.FEEDBACK_QUESTION_NUMBEROFCHOICECREATED,""String_Node_Str"",Integer.toString(numOfConstSumOptions),""String_Node_Str"",(distributeToRecipients == true) ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",(pointsPerOption == true) ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",(distributeToRecipients == true) ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",(points == 0) ? ""String_Node_Str"" : new Integer(points).toString(),""String_Node_Str"",(distributeToRecipients) ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",(forceUnevenDistribution) ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",Const.ParamsNames.FEEDBACK_QUESTION_CONSTSUMTORECIPIENTS,""String_Node_Str"",Const.ParamsNames.FEEDBACK_QUESTION_CONSTSUMPOINTSPEROPTION,""String_Node_Str"",Const.ParamsNames.FEEDBACK_QUESTION_CONSTSUMPOINTS,""String_Node_Str"",Const.ParamsNames.FEEDBACK_QUESTION_CONSTSUMDISTRIBUTEUNEVENLY);
  return html;
}",0.9758088020985136
62849,"public void deleteDocument(StudentAttributes studentToDelete){
  if (studentToDelete.key == null) {
    StudentAttributes student=getStudentForEmail(studentToDelete.course,studentToDelete.email);
    deleteDocument(Const.SearchIndex.STUDENT,student.key);
  }
 else {
    deleteDocument(Const.SearchIndex.STUDENT,studentToDelete.key);
  }
}","public void deleteDocument(StudentAttributes studentToDelete){
  if (studentToDelete.key == null) {
    StudentAttributes student=getStudentForEmail(studentToDelete.course,studentToDelete.email);
    if (student != null) {
      deleteDocument(Const.SearchIndex.STUDENT,student.key);
    }
  }
 else {
    deleteDocument(Const.SearchIndex.STUDENT,studentToDelete.key);
  }
}",0.9509116409537168
62850,"private int filterFeedbackResponseCommentResults(FeedbackResponseCommentSearchResultBundle frCommentSearchResults,List<InstructorAttributes> instructors,int totalResultsSize){
  Iterator<Entry<String,List<FeedbackResponseAttributes>>> iterFr=frCommentSearchResults.responses.entrySet().iterator();
  while (iterFr.hasNext()) {
    List<FeedbackResponseAttributes> frs=iterFr.next().getValue();
    Iterator<FeedbackResponseAttributes> fr=frs.iterator();
    while (fr.hasNext()) {
      FeedbackResponseAttributes response=fr.next();
      FeedbackQuestionAttributes relatedQuestion=getRelatedQuestionOfResponse(frCommentSearchResults,response);
      InstructorAttributes instructor=this.getInstructorForCourseId(response.courseId,instructors);
      boolean isVisibleResponse=true;
      boolean needCheckPrivilege=relatedQuestion == null || !(relatedQuestion.recipientType == FeedbackParticipantType.NONE || relatedQuestion.recipientType == FeedbackParticipantType.INSTRUCTORS || relatedQuestion.recipientType == FeedbackParticipantType.STUDENTS);
      boolean isNotAllowedForInstructor=instructor == null || !(instructor.isAllowedForPrivilege(response.giverSection,response.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_VIEW_SESSION_IN_SECTIONS)) || !(instructor.isAllowedForPrivilege(response.recipientSection,response.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_VIEW_SESSION_IN_SECTIONS));
      if (needCheckPrivilege && isNotAllowedForInstructor) {
        isVisibleResponse=false;
      }
      if (isVisibleResponse) {
        int sizeOfCommentList=frCommentSearchResults.comments.get(response.getId()).size();
        totalResultsSize-=sizeOfCommentList;
        frCommentSearchResults.comments.remove(response.getId());
        fr.remove();
      }
    }
  }
  return totalResultsSize;
}","private int filterFeedbackResponseCommentResults(FeedbackResponseCommentSearchResultBundle frCommentSearchResults,List<InstructorAttributes> instructors,int totalResultsSize){
  Iterator<Entry<String,List<FeedbackResponseAttributes>>> iterFr=frCommentSearchResults.responses.entrySet().iterator();
  while (iterFr.hasNext()) {
    List<FeedbackResponseAttributes> frs=iterFr.next().getValue();
    Iterator<FeedbackResponseAttributes> fr=frs.iterator();
    while (fr.hasNext()) {
      FeedbackResponseAttributes response=fr.next();
      FeedbackQuestionAttributes relatedQuestion=getRelatedQuestionOfResponse(frCommentSearchResults,response);
      InstructorAttributes instructor=this.getInstructorForCourseId(response.courseId,instructors);
      boolean isVisibleResponse=true;
      boolean needCheckPrivilege=relatedQuestion == null || !(relatedQuestion.recipientType == FeedbackParticipantType.NONE || relatedQuestion.recipientType == FeedbackParticipantType.INSTRUCTORS || relatedQuestion.recipientType == FeedbackParticipantType.STUDENTS);
      boolean isNotAllowedForInstructor=instructor == null || !(instructor.isAllowedForPrivilege(response.giverSection,response.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_VIEW_SESSION_IN_SECTIONS)) || !(instructor.isAllowedForPrivilege(response.recipientSection,response.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_VIEW_SESSION_IN_SECTIONS));
      if (needCheckPrivilege && isNotAllowedForInstructor) {
        isVisibleResponse=false;
      }
      if (!isVisibleResponse) {
        int sizeOfCommentList=frCommentSearchResults.comments.get(response.getId()).size();
        totalResultsSize-=sizeOfCommentList;
        frCommentSearchResults.comments.remove(response.getId());
        fr.remove();
      }
    }
  }
  return totalResultsSize;
}",0.9997268505872712
62851,"@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  String feedbackSessionName=getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);
  String previewInstructorEmail=getRequestParamValue(Const.ParamsNames.PREVIEWAS);
  Assumption.assertNotNull(String.format(Const.StatusMessages.NULL_POST_PARAMETER_MESSAGE,Const.ParamsNames.COURSE_ID),courseId);
  Assumption.assertNotNull(String.format(Const.StatusMessages.NULL_POST_PARAMETER_MESSAGE,Const.ParamsNames.FEEDBACK_SESSION_NAME),feedbackSessionName);
  Assumption.assertNotNull(String.format(Const.StatusMessages.NULL_POST_PARAMETER_MESSAGE,Const.ParamsNames.PREVIEWAS),previewInstructorEmail);
  new GateKeeper().verifyAccessible(logic.getInstructorForGoogleId(courseId,account.googleId),logic.getFeedbackSession(feedbackSessionName,courseId),true);
  InstructorAttributes previewInstructor=logic.getInstructorForEmail(courseId,previewInstructorEmail);
  if (previewInstructor == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + previewInstructorEmail + ""String_Node_Str""+ courseId+ ""String_Node_Str"");
  }
  FeedbackSubmissionEditPageData data=new FeedbackSubmissionEditPageData(account,student);
  data.bundle=logic.getFeedbackSessionQuestionsBundleForInstructor(feedbackSessionName,courseId,previewInstructor.email);
  if (data.bundle == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + feedbackSessionName + ""String_Node_Str""+ courseId+ ""String_Node_Str"");
  }
  data.isSessionOpenForSubmission=true;
  data.isPreview=true;
  data.previewInstructor=previewInstructor;
  data.bundle.resetAllResponses();
  statusToAdmin=""String_Node_Str"" + previewInstructor.email + ""String_Node_Str""+ ""String_Node_Str""+ feedbackSessionName+ ""String_Node_Str""+ ""String_Node_Str""+ courseId;
  return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_SUBMISSION_EDIT,data);
}","@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  String feedbackSessionName=getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);
  String previewInstructorEmail=getRequestParamValue(Const.ParamsNames.PREVIEWAS);
  Assumption.assertNotNull(String.format(Const.StatusMessages.NULL_POST_PARAMETER_MESSAGE,Const.ParamsNames.COURSE_ID),courseId);
  Assumption.assertNotNull(String.format(Const.StatusMessages.NULL_POST_PARAMETER_MESSAGE,Const.ParamsNames.FEEDBACK_SESSION_NAME),feedbackSessionName);
  Assumption.assertNotNull(String.format(Const.StatusMessages.NULL_POST_PARAMETER_MESSAGE,Const.ParamsNames.PREVIEWAS),previewInstructorEmail);
  new GateKeeper().verifyAccessible(logic.getInstructorForGoogleId(courseId,account.googleId),logic.getFeedbackSession(feedbackSessionName,courseId),false,Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION);
  InstructorAttributes previewInstructor=logic.getInstructorForEmail(courseId,previewInstructorEmail);
  if (previewInstructor == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + previewInstructorEmail + ""String_Node_Str""+ courseId+ ""String_Node_Str"");
  }
  FeedbackSubmissionEditPageData data=new FeedbackSubmissionEditPageData(account,student);
  data.bundle=logic.getFeedbackSessionQuestionsBundleForInstructor(feedbackSessionName,courseId,previewInstructor.email);
  if (data.bundle == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + feedbackSessionName + ""String_Node_Str""+ courseId+ ""String_Node_Str"");
  }
  data.isSessionOpenForSubmission=true;
  data.isPreview=true;
  data.previewInstructor=previewInstructor;
  data.bundle.resetAllResponses();
  statusToAdmin=""String_Node_Str"" + previewInstructor.email + ""String_Node_Str""+ ""String_Node_Str""+ feedbackSessionName+ ""String_Node_Str""+ ""String_Node_Str""+ courseId;
  return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_SUBMISSION_EDIT,data);
}",0.4784136546184739
62852,"@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  String feedbackSessionName=getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);
  String previewStudentEmail=getRequestParamValue(Const.ParamsNames.PREVIEWAS);
  Assumption.assertNotNull(String.format(Const.StatusMessages.NULL_POST_PARAMETER_MESSAGE,Const.ParamsNames.COURSE_ID),courseId);
  Assumption.assertNotNull(String.format(Const.StatusMessages.NULL_POST_PARAMETER_MESSAGE,Const.ParamsNames.FEEDBACK_SESSION_NAME),feedbackSessionName);
  Assumption.assertNotNull(String.format(Const.StatusMessages.NULL_POST_PARAMETER_MESSAGE,Const.ParamsNames.PREVIEWAS),previewStudentEmail);
  new GateKeeper().verifyAccessible(logic.getInstructorForGoogleId(courseId,account.googleId),logic.getFeedbackSession(feedbackSessionName,courseId),true);
  StudentAttributes previewStudent=logic.getStudentForEmail(courseId,previewStudentEmail);
  if (previewStudent == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + previewStudentEmail + ""String_Node_Str""+ courseId+ ""String_Node_Str"");
  }
  FeedbackSubmissionEditPageData data=new FeedbackSubmissionEditPageData(account,student);
  data.bundle=logic.getFeedbackSessionQuestionsBundleForStudent(feedbackSessionName,courseId,previewStudent.email);
  if (data.bundle == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + feedbackSessionName + ""String_Node_Str""+ courseId+ ""String_Node_Str"");
  }
  data.isSessionOpenForSubmission=true;
  data.isPreview=true;
  data.previewStudent=previewStudent;
  data.bundle.resetAllResponses();
  statusToAdmin=""String_Node_Str"" + previewStudent.email + ""String_Node_Str""+ ""String_Node_Str""+ feedbackSessionName+ ""String_Node_Str""+ ""String_Node_Str""+ courseId;
  return createShowPageResult(Const.ViewURIs.STUDENT_FEEDBACK_SUBMISSION_EDIT,data);
}","@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  String feedbackSessionName=getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);
  String previewStudentEmail=getRequestParamValue(Const.ParamsNames.PREVIEWAS);
  Assumption.assertNotNull(String.format(Const.StatusMessages.NULL_POST_PARAMETER_MESSAGE,Const.ParamsNames.COURSE_ID),courseId);
  Assumption.assertNotNull(String.format(Const.StatusMessages.NULL_POST_PARAMETER_MESSAGE,Const.ParamsNames.FEEDBACK_SESSION_NAME),feedbackSessionName);
  Assumption.assertNotNull(String.format(Const.StatusMessages.NULL_POST_PARAMETER_MESSAGE,Const.ParamsNames.PREVIEWAS),previewStudentEmail);
  new GateKeeper().verifyAccessible(logic.getInstructorForGoogleId(courseId,account.googleId),logic.getFeedbackSession(feedbackSessionName,courseId),false,Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION);
  StudentAttributes previewStudent=logic.getStudentForEmail(courseId,previewStudentEmail);
  if (previewStudent == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + previewStudentEmail + ""String_Node_Str""+ courseId+ ""String_Node_Str"");
  }
  FeedbackSubmissionEditPageData data=new FeedbackSubmissionEditPageData(account,student);
  data.bundle=logic.getFeedbackSessionQuestionsBundleForStudent(feedbackSessionName,courseId,previewStudent.email);
  if (data.bundle == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + feedbackSessionName + ""String_Node_Str""+ courseId+ ""String_Node_Str"");
  }
  data.isSessionOpenForSubmission=true;
  data.isPreview=true;
  data.previewStudent=previewStudent;
  data.bundle.resetAllResponses();
  statusToAdmin=""String_Node_Str"" + previewStudent.email + ""String_Node_Str""+ ""String_Node_Str""+ feedbackSessionName+ ""String_Node_Str""+ ""String_Node_Str""+ courseId;
  return createShowPageResult(Const.ViewURIs.STUDENT_FEEDBACK_SUBMISSION_EDIT,data);
}",0.9835897435897436
62853,"private static FeedbackQuestionAttributes extractFeedbackQuestionData(Map<String,String[]> requestParameters){
  FeedbackQuestionAttributes newQuestion=new FeedbackQuestionAttributes();
  newQuestion.setId(HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_ID));
  Assumption.assertNotNull(""String_Node_Str"",newQuestion.getId());
  newQuestion.courseId=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.COURSE_ID);
  Assumption.assertNotNull(""String_Node_Str"",newQuestion.courseId);
  newQuestion.feedbackSessionName=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_SESSION_NAME);
  Assumption.assertNotNull(""String_Node_Str"",newQuestion.feedbackSessionName);
  String giverType=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_GIVERTYPE);
  if (giverType != null) {
    newQuestion.giverType=FeedbackParticipantType.valueOf(giverType);
  }
  String recipientType=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_RECIPIENTTYPE);
  if (recipientType != null) {
    newQuestion.recipientType=FeedbackParticipantType.valueOf(recipientType);
  }
  String questionNumber=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_NUMBER);
  Assumption.assertNotNull(""String_Node_Str"",questionNumber);
  newQuestion.questionNumber=Integer.parseInt(questionNumber);
  Assumption.assertTrue(""String_Node_Str"",newQuestion.questionNumber >= 0);
  String nEntityTypes=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_NUMBEROFENTITIESTYPE);
  if (numberOfEntitiesIsUserDefined(newQuestion.recipientType,nEntityTypes)) {
    String nEntities;
    nEntities=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_NUMBEROFENTITIES);
    Assumption.assertNotNull(nEntities);
    newQuestion.numberOfEntitiesToGiveFeedbackTo=Integer.parseInt(nEntities);
  }
 else {
    newQuestion.numberOfEntitiesToGiveFeedbackTo=Const.MAX_POSSIBLE_RECIPIENTS;
  }
  newQuestion.showResponsesTo=getParticipantListFromParams(HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_SHOWRESPONSESTO));
  newQuestion.showGiverNameTo=getParticipantListFromParams(HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_SHOWGIVERTO));
  newQuestion.showRecipientNameTo=getParticipantListFromParams(HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_SHOWRECIPIENTTO));
  String questionType=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_TYPE);
  Assumption.assertNotNull(questionType);
  newQuestion.questionType=FeedbackQuestionType.valueOf(questionType);
  String questionText=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_TEXT);
  if (questionText != null) {
    FeedbackAbstractQuestionDetails questionDetails=FeedbackAbstractQuestionDetails.createQuestionDetails(requestParameters,newQuestion.questionType);
    newQuestion.setQuestionDetails(questionDetails);
  }
  return newQuestion;
}","private static FeedbackQuestionAttributes extractFeedbackQuestionData(Map<String,String[]> requestParameters){
  FeedbackQuestionAttributes newQuestion=new FeedbackQuestionAttributes();
  newQuestion.setId(HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_ID));
  Assumption.assertNotNull(""String_Node_Str"",newQuestion.getId());
  newQuestion.courseId=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.COURSE_ID);
  Assumption.assertNotNull(""String_Node_Str"",newQuestion.courseId);
  newQuestion.feedbackSessionName=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_SESSION_NAME);
  Assumption.assertNotNull(""String_Node_Str"",newQuestion.feedbackSessionName);
  String giverType=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_GIVERTYPE);
  if (giverType != null) {
    newQuestion.giverType=FeedbackParticipantType.valueOf(giverType);
  }
  String recipientType=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_RECIPIENTTYPE);
  if (recipientType != null) {
    newQuestion.recipientType=FeedbackParticipantType.valueOf(recipientType);
  }
  String questionNumber=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_NUMBER);
  Assumption.assertNotNull(""String_Node_Str"",questionNumber);
  newQuestion.questionNumber=Integer.parseInt(questionNumber);
  Assumption.assertTrue(""String_Node_Str"",newQuestion.questionNumber >= 0);
  String nEntityTypes=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_NUMBEROFENTITIESTYPE);
  if (numberOfEntitiesIsUserDefined(newQuestion.recipientType,nEntityTypes)) {
    String nEntities;
    nEntities=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_NUMBEROFENTITIES);
    Assumption.assertNotNull(nEntities);
    newQuestion.numberOfEntitiesToGiveFeedbackTo=Integer.parseInt(nEntities);
  }
 else {
    newQuestion.numberOfEntitiesToGiveFeedbackTo=Const.MAX_POSSIBLE_RECIPIENTS;
  }
  newQuestion.showResponsesTo=getParticipantListFromParams(HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_SHOWRESPONSESTO));
  newQuestion.showGiverNameTo=getParticipantListFromParams(HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_SHOWGIVERTO));
  newQuestion.showRecipientNameTo=getParticipantListFromParams(HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_SHOWRECIPIENTTO));
  String questionType=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_TYPE);
  Assumption.assertNotNull(questionType);
  newQuestion.questionType=FeedbackQuestionType.valueOf(questionType);
  String questionText=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_TEXT);
  if (questionText != null && !questionText.isEmpty()) {
    FeedbackAbstractQuestionDetails questionDetails=FeedbackAbstractQuestionDetails.createQuestionDetails(requestParameters,newQuestion.questionType);
    newQuestion.setQuestionDetails(questionDetails);
  }
  return newQuestion;
}",0.9958885335769758
62854,"/** 
 * This recovers a html-sanitized string to original encoding for appropriate display in files such as csv file <br> It restores encoding for < > \ / ' &  <br>
 * @param sanitized string 
 * @return recovered string  
 */
public static String recoverFromSanitizedText(String str){
  if (str == null) {
    return null;
  }
  return str.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
}","/** 
 * This recovers a set of html-sanitized string to original encoding for appropriate display in files such as csv file <br> It restores encoding for < > \ / ' &  <br>
 * @param sanitized string set
 * @return recovered string set
 */
public static Set<String> recoverFromSanitizedText(Set<String> textSet){
  Set<String> textSetTemp=new HashSet<String>();
  for (  String text : textSet) {
    textSetTemp.add(StringHelper.recoverFromSanitizedText(text));
  }
  return textSetTemp;
}",0.5036231884057971
62855,"public List<String> getRecipientOptionsForQuestion(String feedbackQuestionId,String currentlySelectedOption){
  ArrayList<String> result=new ArrayList<String>();
  if (this.bundle == null) {
    return null;
  }
  Map<String,String> emailNamePair=this.bundle.getSortedRecipientList(feedbackQuestionId);
  result.add(""String_Node_Str"" + (currentlySelectedOption == null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  for (  Map.Entry<String,String> pair : emailNamePair.entrySet()) {
    result.add(""String_Node_Str"" + pair.getKey() + ""String_Node_Str""+ (pair.getKey().equals(currentlySelectedOption) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ sanitizeForHtml(pair.getValue())+ ""String_Node_Str"");
  }
  return result;
}","public List<String> getRecipientOptionsForQuestion(String feedbackQuestionId,String currentlySelectedOption){
  ArrayList<String> result=new ArrayList<String>();
  if (this.bundle == null) {
    return null;
  }
  Map<String,String> emailNamePair=this.bundle.getSortedRecipientList(feedbackQuestionId);
  result.add(""String_Node_Str"" + (currentlySelectedOption == null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  for (  Map.Entry<String,String> pair : emailNamePair.entrySet()) {
    result.add(""String_Node_Str"" + pair.getKey() + ""String_Node_Str""+ (StringHelper.recoverFromSanitizedText(pair.getKey()).equals(currentlySelectedOption) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ sanitizeForHtml(pair.getValue())+ ""String_Node_Str"");
  }
  return result;
}",0.974822466107166
62856,"@Override protected ActionResult execute() throws EntityDoesNotExistException {
  courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  feedbackSessionName=getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);
  Assumption.assertPostParamNotNull(Const.ParamsNames.COURSE_ID,courseId);
  Assumption.assertPostParamNotNull(Const.ParamsNames.FEEDBACK_SESSION_NAME,feedbackSessionName);
  verifyAccesibleForSpecificUser();
  String userEmailForCourse=getUserEmailForCourse();
  String userSectionForCourse=getUserSectionForCourse();
  data=new FeedbackSubmissionEditPageData(account,student);
  data.bundle=getDataBundle(userEmailForCourse);
  Assumption.assertNotNull(""String_Node_Str"" + feedbackSessionName + ""String_Node_Str""+ courseId+ ""String_Node_Str"",data.bundle);
  setStatusToAdmin();
  if (!isSessionOpenForSpecificUser(data.bundle.feedbackSession)) {
    isError=true;
    statusToUser.add(Const.StatusMessages.FEEDBACK_SUBMISSIONS_NOT_OPEN);
    return createSpecificRedirectResult();
  }
  int numOfQuestionsToGet=data.bundle.questionResponseBundle.size();
  for (int questionIndx=1; questionIndx <= numOfQuestionsToGet; questionIndx++) {
    String totalResponsesForQuestion=getRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_RESPONSETOTAL + ""String_Node_Str"" + questionIndx);
    if (totalResponsesForQuestion == null) {
      continue;
    }
    List<FeedbackResponseAttributes> responsesForQuestion=new ArrayList<FeedbackResponseAttributes>();
    String questionId=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_ID + ""String_Node_Str"" + questionIndx);
    FeedbackQuestionAttributes questionAttributes=data.bundle.getQuestionAttributes(questionId);
    if (questionAttributes == null) {
      statusToUser.add(""String_Node_Str"");
      isError=true;
      log.warning(""String_Node_Str"" + questionId + ""String_Node_Str""+ questionIndx);
      continue;
    }
    FeedbackAbstractQuestionDetails questionDetails=questionAttributes.getQuestionDetails();
    int numOfResponsesToGet=Integer.parseInt(totalResponsesForQuestion);
    String qnId=""String_Node_Str"";
    Set<String> emailSet=data.bundle.getRecipientEmails(questionAttributes.getId());
    emailSet.add(""String_Node_Str"");
    ArrayList<String> responsesRecipients=new ArrayList<String>();
    for (int responseIndx=0; responseIndx < numOfResponsesToGet; responseIndx++) {
      FeedbackResponseAttributes response=extractFeedbackResponseData(requestParameters,questionIndx,responseIndx,questionDetails);
      responsesRecipients.add(response.recipientEmail);
      if (response.responseMetaData.getValue().isEmpty()) {
        saveResponse(response);
      }
 else {
        response.giverEmail=userEmailForCourse;
        response.giverSection=userSectionForCourse;
        responsesForQuestion.add(response);
      }
      qnId=response.feedbackQuestionId;
    }
    List<String> errors=questionDetails.validateResponseAttributes(responsesForQuestion,data.bundle.recipientList.get(qnId).size());
    if (!emailSet.containsAll(responsesRecipients)) {
      errors.add(String.format(Const.StatusMessages.FEEDBACK_RESPONSE_INVALID_RECIPIENT,questionIndx));
    }
    if (errors.isEmpty()) {
      for (      FeedbackResponseAttributes response : responsesForQuestion) {
        saveResponse(response);
      }
    }
 else {
      statusToUser.addAll(errors);
      isError=true;
    }
  }
  if (!isError) {
    statusToUser.add(Const.StatusMessages.FEEDBACK_RESPONSES_SAVED);
  }
  if (logic.hasGiverRespondedForSession(userEmailForCourse,feedbackSessionName,courseId)) {
    appendRespondant();
  }
 else {
    removeRespondant();
  }
  return createSpecificRedirectResult();
}","@Override protected ActionResult execute() throws EntityDoesNotExistException {
  courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  feedbackSessionName=getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);
  Assumption.assertPostParamNotNull(Const.ParamsNames.COURSE_ID,courseId);
  Assumption.assertPostParamNotNull(Const.ParamsNames.FEEDBACK_SESSION_NAME,feedbackSessionName);
  verifyAccesibleForSpecificUser();
  String userEmailForCourse=getUserEmailForCourse();
  String userSectionForCourse=getUserSectionForCourse();
  data=new FeedbackSubmissionEditPageData(account,student);
  data.bundle=getDataBundle(userEmailForCourse);
  Assumption.assertNotNull(""String_Node_Str"" + feedbackSessionName + ""String_Node_Str""+ courseId+ ""String_Node_Str"",data.bundle);
  setStatusToAdmin();
  if (!isSessionOpenForSpecificUser(data.bundle.feedbackSession)) {
    isError=true;
    statusToUser.add(Const.StatusMessages.FEEDBACK_SUBMISSIONS_NOT_OPEN);
    return createSpecificRedirectResult();
  }
  int numOfQuestionsToGet=data.bundle.questionResponseBundle.size();
  for (int questionIndx=1; questionIndx <= numOfQuestionsToGet; questionIndx++) {
    String totalResponsesForQuestion=getRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_RESPONSETOTAL + ""String_Node_Str"" + questionIndx);
    if (totalResponsesForQuestion == null) {
      continue;
    }
    List<FeedbackResponseAttributes> responsesForQuestion=new ArrayList<FeedbackResponseAttributes>();
    String questionId=HttpRequestHelper.getValueFromParamMap(requestParameters,Const.ParamsNames.FEEDBACK_QUESTION_ID + ""String_Node_Str"" + questionIndx);
    FeedbackQuestionAttributes questionAttributes=data.bundle.getQuestionAttributes(questionId);
    if (questionAttributes == null) {
      statusToUser.add(""String_Node_Str"");
      isError=true;
      log.warning(""String_Node_Str"" + questionId + ""String_Node_Str""+ questionIndx);
      continue;
    }
    FeedbackAbstractQuestionDetails questionDetails=questionAttributes.getQuestionDetails();
    int numOfResponsesToGet=Integer.parseInt(totalResponsesForQuestion);
    String qnId=""String_Node_Str"";
    Set<String> emailSet=data.bundle.getRecipientEmails(questionAttributes.getId());
    emailSet.add(""String_Node_Str"");
    emailSet=StringHelper.recoverFromSanitizedText(emailSet);
    ArrayList<String> responsesRecipients=new ArrayList<String>();
    for (int responseIndx=0; responseIndx < numOfResponsesToGet; responseIndx++) {
      FeedbackResponseAttributes response=extractFeedbackResponseData(requestParameters,questionIndx,responseIndx,questionDetails);
      responsesRecipients.add(response.recipientEmail);
      if (response.responseMetaData.getValue().isEmpty()) {
        saveResponse(response);
      }
 else {
        response.giverEmail=userEmailForCourse;
        response.giverSection=userSectionForCourse;
        responsesForQuestion.add(response);
      }
      qnId=response.feedbackQuestionId;
    }
    List<String> errors=questionDetails.validateResponseAttributes(responsesForQuestion,data.bundle.recipientList.get(qnId).size());
    if (!emailSet.containsAll(responsesRecipients)) {
      errors.add(String.format(Const.StatusMessages.FEEDBACK_RESPONSE_INVALID_RECIPIENT,questionIndx));
    }
    if (errors.isEmpty()) {
      for (      FeedbackResponseAttributes response : responsesForQuestion) {
        saveResponse(response);
      }
    }
 else {
      statusToUser.addAll(errors);
      isError=true;
    }
  }
  if (!isError) {
    statusToUser.add(Const.StatusMessages.FEEDBACK_RESPONSES_SAVED);
  }
  if (logic.hasGiverRespondedForSession(userEmailForCourse,feedbackSessionName,courseId)) {
    appendRespondant();
  }
 else {
    removeRespondant();
  }
  return createSpecificRedirectResult();
}",0.9917333333333334
62857,"private Map<String,TeamEvalResult> getContribQnTeamEvalResult(FeedbackQuestionAttributes question){
  Map<String,TeamEvalResult> contribQnStats=contributionQuestionTeamEvalResults.get(question.getId());
  if (contribQnStats == null) {
    FeedbackContributionQuestionDetails fqcd=(FeedbackContributionQuestionDetails)question.getQuestionDetails();
    contribQnStats=fqcd.getTeamEvalResults(this,question);
  }
  return contribQnStats;
}","private Map<String,TeamEvalResult> getContribQnTeamEvalResult(FeedbackQuestionAttributes question){
  Map<String,TeamEvalResult> contribQnStats=contributionQuestionTeamEvalResults.get(question.getId());
  if (contribQnStats == null) {
    FeedbackContributionQuestionDetails fqcd=(FeedbackContributionQuestionDetails)question.getQuestionDetails();
    contribQnStats=fqcd.getTeamEvalResults(this,question);
    contributionQuestionTeamEvalResults.put(question.getId(),contribQnStats);
  }
  return contribQnStats;
}",0.9180672268907564
62858,"/** 
 * Used for instructor feedback results views.
 */
@SuppressWarnings(""String_Node_Str"") public String getResponseAnswerHtml(FeedbackResponseAttributes response,FeedbackQuestionAttributes question){
  FeedbackAbstractQuestionDetails questionDetails=question.getQuestionDetails();
  if (question.questionType == FeedbackQuestionType.CONTRIB) {
    Map<String,TeamEvalResult> teamResults=getContribQnTeamEvalResult(question);
    Map<String,StudentResultSummary> stats=getContribQnStudentResultSummary(question);
    FeedbackResponseAttributes actualResponse=getActualResponse(response);
    String giverTeamName=emailTeamNameTable.get(actualResponse.giverEmail);
    TeamEvalResult teamResult=teamResults.get(giverTeamName);
    int giverIndex=teamResult.studentEmails.indexOf(actualResponse.giverEmail);
    int recipientIndex=teamResult.studentEmails.indexOf(actualResponse.recipientEmail);
    String responseAnswerHtml=FeedbackContributionQuestionDetails.convertToEqualShareFormatHtml(teamResult.normalizedPeerContributionRatio[giverIndex][recipientIndex]);
    if (response.giverEmail.equals(response.recipientEmail)) {
      responseAnswerHtml=response.getResponseDetails().getAnswerHtml(questionDetails);
      StudentResultSummary studentResult=stats.get(response.giverEmail);
      if (studentResult != null) {
        int pc=studentResult.perceivedToInstructor;
        String pcHtml=((FeedbackContributionQuestionDetails)questionDetails).convertToEqualShareFormatHtml(pc);
        responseAnswerHtml+=""String_Node_Str"" + ""String_Node_Str"" + pcHtml + ""String_Node_Str"";
      }
    }
    return responseAnswerHtml;
  }
 else {
    return response.getResponseDetails().getAnswerHtml(questionDetails);
  }
}","/** 
 * Used for instructor feedback results views.
 */
public String getResponseAnswerHtml(FeedbackResponseAttributes response,FeedbackQuestionAttributes question){
  FeedbackAbstractQuestionDetails questionDetails=question.getQuestionDetails();
  if (question.questionType == FeedbackQuestionType.CONTRIB) {
    return getContributionQuestionResponseAnswerHtml(response,question,questionDetails);
  }
 else {
    return response.getResponseDetails().getAnswerHtml(questionDetails);
  }
}",0.2936112369732668
62859,"public String getCourseStudentListAsCsv(String courseId,String googleId) throws EntityDoesNotExistException {
  HashMap<String,CourseDetailsBundle> courses=getCourseSummariesForInstructor(googleId);
  CourseDetailsBundle course=courses.get(courseId);
  boolean hasSection=hasIndicatedSections(courseId);
  String export=""String_Node_Str"";
  export+=""String_Node_Str"" + ""String_Node_Str"" + Sanitizer.sanitizeForCsv(courseId) + Const.EOL+ ""String_Node_Str""+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(course.course.name)+ Const.EOL+ Const.EOL+ Const.EOL;
  if (hasSection) {
    export+=""String_Node_Str"" + ""String_Node_Str"";
  }
  export+=""String_Node_Str"" + Const.EOL;
  for (  SectionDetailsBundle section : course.sections) {
    for (    TeamDetailsBundle team : section.teams) {
      for (      StudentAttributes student : team.students) {
        String studentStatus=null;
        if (student.googleId == null || student.googleId.equals(""String_Node_Str"")) {
          studentStatus=Const.STUDENT_COURSE_STATUS_YET_TO_JOIN;
        }
 else {
          studentStatus=Const.STUDENT_COURSE_STATUS_JOINED;
        }
        if (hasSection) {
          export+=Sanitizer.sanitizeForCsv(section.name) + ""String_Node_Str"";
        }
        export+=Sanitizer.sanitizeForCsv(StringHelper.recoverFromSanitizedText(team.name)) + ""String_Node_Str"" + Sanitizer.sanitizeForCsv(StringHelper.recoverFromSanitizedText(StringHelper.removeExtraSpace(student.name)))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(StringHelper.recoverFromSanitizedText(StringHelper.removeExtraSpace(student.lastName)))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(studentStatus)+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(student.email)+ Const.EOL;
      }
    }
  }
  return export;
}","public String getCourseStudentListAsCsv(String courseId,String googleId) throws EntityDoesNotExistException {
  HashMap<String,CourseDetailsBundle> courses=getCourseSummariesForInstructor(googleId);
  CourseDetailsBundle course=courses.get(courseId);
  boolean hasSection=hasIndicatedSections(courseId);
  String export=""String_Node_Str"";
  export+=""String_Node_Str"" + ""String_Node_Str"" + Sanitizer.sanitizeForCsv(courseId) + Const.EOL+ ""String_Node_Str""+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(course.course.name)+ Const.EOL;
  if (hasSection) {
    export+=""String_Node_Str"" + ""String_Node_Str"";
  }
  export+=""String_Node_Str"" + Const.EOL;
  for (  SectionDetailsBundle section : course.sections) {
    for (    TeamDetailsBundle team : section.teams) {
      for (      StudentAttributes student : team.students) {
        String studentStatus=null;
        if (student.googleId == null || student.googleId.equals(""String_Node_Str"")) {
          studentStatus=Const.STUDENT_COURSE_STATUS_YET_TO_JOIN;
        }
 else {
          studentStatus=Const.STUDENT_COURSE_STATUS_JOINED;
        }
        if (hasSection) {
          export+=Sanitizer.sanitizeForCsv(section.name) + ""String_Node_Str"";
        }
        export+=Sanitizer.sanitizeForCsv(StringHelper.recoverFromSanitizedText(team.name)) + ""String_Node_Str"" + Sanitizer.sanitizeForCsv(StringHelper.recoverFromSanitizedText(StringHelper.removeExtraSpace(student.name)))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(StringHelper.recoverFromSanitizedText(StringHelper.removeExtraSpace(student.lastName)))+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(studentStatus)+ ""String_Node_Str""+ Sanitizer.sanitizeForCsv(student.email)+ Const.EOL;
      }
    }
  }
  return export;
}",0.9936998854524628
62860,"@Override public void send(HttpServletRequest req,HttpServletResponse resp) throws IOException {
  resp.setContentType(""String_Node_Str"");
  resp.setHeader(""String_Node_Str"",""String_Node_Str"" + fileName + ""String_Node_Str"");
  PrintWriter writer=resp.getWriter();
  writer.append(fileContent);
}","@Override public void send(HttpServletRequest req,HttpServletResponse resp) throws IOException {
  resp.setContentType(""String_Node_Str"");
  resp.setHeader(""String_Node_Str"",""String_Node_Str"" + fileName + ""String_Node_Str"");
  PrintWriter writer=resp.getWriter();
  writer.write(""String_Node_Str"");
  writer.append(fileContent);
}",0.944
62861,"@Override public ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  Assumption.assertNotNull(courseId);
  InstructorAttributes instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  new GateKeeper().verifyAccessible(instructor,logic.getCourse(courseId));
  InstructorCourseDetailsPageData data=new InstructorCourseDetailsPageData(account);
  data.currentInstructor=instructor;
  data.courseDetails=logic.getCourseDetails(courseId);
  data.students=logic.getStudentsForCourse(courseId);
  data.instructors=logic.getInstructorsForCourse(courseId);
  StudentAttributes.sortByNameAndThenByEmail(data.students);
  statusToAdmin=""String_Node_Str"" + ""String_Node_Str"" + courseId + ""String_Node_Str"";
  ShowPageResult response=createShowPageResult(Const.ViewURIs.INSTRUCTOR_COURSE_DETAILS,data);
  return response;
}","@Override public ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  Assumption.assertNotNull(courseId);
  InstructorAttributes instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  new GateKeeper().verifyAccessible(instructor,logic.getCourse(courseId));
  InstructorCourseDetailsPageData data=new InstructorCourseDetailsPageData(account);
  data.currentInstructor=instructor;
  data.courseDetails=logic.getCourseDetails(courseId);
  data.students=logic.getStudentsForCourse(courseId);
  data.instructors=logic.getInstructorsForCourse(courseId);
  data.studentListHtmlTableAsString=logic.getCourseStudentListAsHtml(courseId,account.googleId);
  StudentAttributes.sortByNameAndThenByEmail(data.students);
  statusToAdmin=""String_Node_Str"" + ""String_Node_Str"" + courseId + ""String_Node_Str"";
  ShowPageResult response=createShowPageResult(Const.ViewURIs.INSTRUCTOR_COURSE_DETAILS,data);
  return response;
}",0.9491347666491872
62862,"@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  String fsname=getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);
  instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  new GateKeeper().verifyAccessible(instructor,logic.getCourse(courseId));
  CourseRoster roster=new CourseRoster(logic.getStudentsForCourse(courseId),logic.getInstructorsForCourse(courseId));
  data=new InstructorFeedbackResponseCommentsLoadPageData(account);
  data.feedbackResultBundles=getFeedbackResultBundles(courseId,fsname,roster);
  data.instructorEmail=instructor.email;
  data.currentInstructor=instructor;
  data.roster=roster;
  data.numberOfPendingComments=logic.getCommentsForSendingState(courseId,CommentSendingState.PENDING).size() + logic.getFeedbackResponseCommentsForSendingState(courseId,CommentSendingState.PENDING).size();
  return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESPONSE_COMMENTS_LOAD,data);
}","@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  Assumption.assertNotNull(courseId);
  String fsname=getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);
  Assumption.assertNotNull(fsname);
  instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  new GateKeeper().verifyAccessible(instructor,logic.getCourse(courseId));
  CourseRoster roster=new CourseRoster(logic.getStudentsForCourse(courseId),logic.getInstructorsForCourse(courseId));
  data=new InstructorFeedbackResponseCommentsLoadPageData(account);
  data.feedbackResultBundles=getFeedbackResultBundles(courseId,fsname,roster);
  data.instructorEmail=instructor.email;
  data.currentInstructor=instructor;
  data.roster=roster;
  data.numberOfPendingComments=logic.getCommentsForSendingState(courseId,CommentSendingState.PENDING).size() + logic.getFeedbackResponseCommentsForSendingState(courseId,CommentSendingState.PENDING).size();
  return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESPONSE_COMMENTS_LOAD,data);
}",0.9657089898053752
62863,"@Override public ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  Assumption.assertNotNull(courseId);
  String instructorId=getRequestParamValue(Const.ParamsNames.INSTRUCTOR_ID);
  InstructorAttributes instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  CourseAttributes courseToEdit=logic.getCourse(courseId);
  new GateKeeper().verifyAccessible(instructor,courseToEdit);
  InstructorCourseEditPageData data=new InstructorCourseEditPageData(account);
  data.course=courseToEdit;
  if (instructorId == null) {
    data.instructorList=logic.getInstructorsForCourse(courseId);
    data.isAccessControlDisplayed=false;
  }
 else {
    data.instructorList=new ArrayList<InstructorAttributes>();
    data.instructorList.add(logic.getInstructorForGoogleId(courseId,instructorId));
    data.isAccessControlDisplayed=true;
  }
  data.currentInstructor=instructor;
  data.sectionNames=logic.getSectionNamesForCourse(courseId);
  data.evalNames=new ArrayList<String>();
  data.feedbackNames=new ArrayList<String>();
  List<EvaluationAttributes> evaluations=logic.getEvaluationsForCourse(courseId);
  for (  EvaluationAttributes eval : evaluations) {
    data.evalNames.add(eval.name);
  }
  List<FeedbackSessionAttributes> feedbacks=logic.getFeedbackSessionsForCourse(courseId);
  for (  FeedbackSessionAttributes feedback : feedbacks) {
    data.feedbackNames.add(feedback.feedbackSessionName);
  }
  statusToAdmin=""String_Node_Str"" + ""String_Node_Str"" + courseId + ""String_Node_Str"";
  ShowPageResult response=createShowPageResult(Const.ViewURIs.INSTRUCTOR_COURSE_EDIT,data);
  return response;
}","@Override public ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  Assumption.assertNotNull(courseId);
  String instructorEmail=getRequestParamValue(Const.ParamsNames.INSTRUCTOR_EMAIL);
  String index=getRequestParamValue(Const.ParamsNames.COURSE_EDIT_MAIN_INDEX);
  InstructorAttributes instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  CourseAttributes courseToEdit=logic.getCourse(courseId);
  new GateKeeper().verifyAccessible(instructor,courseToEdit);
  InstructorCourseEditPageData data=new InstructorCourseEditPageData(account);
  data.course=courseToEdit;
  if (instructorEmail == null) {
    data.instructorList=logic.getInstructorsForCourse(courseId);
    data.isAccessControlDisplayed=false;
  }
 else {
    data.instructorList=new ArrayList<InstructorAttributes>();
    data.instructorList.add(logic.getInstructorForEmail(courseId,instructorEmail));
    data.index=Integer.parseInt(index);
    data.isAccessControlDisplayed=true;
  }
  data.currentInstructor=instructor;
  data.sectionNames=logic.getSectionNamesForCourse(courseId);
  data.evalNames=new ArrayList<String>();
  data.feedbackNames=new ArrayList<String>();
  List<EvaluationAttributes> evaluations=logic.getEvaluationsForCourse(courseId);
  for (  EvaluationAttributes eval : evaluations) {
    data.evalNames.add(eval.name);
  }
  List<FeedbackSessionAttributes> feedbacks=logic.getFeedbackSessionsForCourse(courseId);
  for (  FeedbackSessionAttributes feedback : feedbacks) {
    data.feedbackNames.add(feedback.feedbackSessionName);
  }
  statusToAdmin=""String_Node_Str"" + ""String_Node_Str"" + courseId + ""String_Node_Str"";
  ShowPageResult response=createShowPageResult(Const.ViewURIs.INSTRUCTOR_COURSE_EDIT,data);
  return response;
}",0.9543899657924744
62864,"public InstructorCourseEditPageData(AccountAttributes account){
  super(account);
}","public InstructorCourseEditPageData(AccountAttributes account){
  super(account);
  index=-1;
}",0.9325842696629212
62865,"private FeedbackSessionResultsBundle getFeedbackSessionResultsForUserWithParams(String feedbackSessionName,String courseId,String userEmail,UserType.Role role,CourseRoster roster,Map<String,String> params) throws EntityDoesNotExistException {
  boolean isIncludeResponseStatus=Boolean.parseBoolean(params.get(""String_Node_Str""));
  boolean isComplete=(params.get(""String_Node_Str"") != null) ? false : true;
  boolean isFromSection=Boolean.parseBoolean(params.get(""String_Node_Str""));
  boolean isToSection=Boolean.parseBoolean(params.get(""String_Node_Str""));
  boolean isInSection=Boolean.parseBoolean(params.get(""String_Node_Str""));
  String section=params.get(""String_Node_Str"");
  FeedbackSessionAttributes session=fsDb.getFeedbackSession(courseId,feedbackSessionName);
  if (session == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"");
  }
  List<FeedbackQuestionAttributes> allQuestions=fqLogic.getFeedbackQuestionsForSession(feedbackSessionName,courseId);
  List<FeedbackResponseAttributes> responses=new ArrayList<FeedbackResponseAttributes>();
  Map<String,FeedbackQuestionAttributes> relevantQuestions=new HashMap<String,FeedbackQuestionAttributes>();
  Map<String,String> emailNameTable=new HashMap<String,String>();
  Map<String,String> emailLastNameTable=new HashMap<String,String>();
  Map<String,String> emailTeamNameTable=new HashMap<String,String>();
  Map<String,boolean[]> visibilityTable=new HashMap<String,boolean[]>();
  Map<String,List<FeedbackResponseCommentAttributes>> responseComments=new HashMap<String,List<FeedbackResponseCommentAttributes>>();
  if (role == UserType.Role.INSTRUCTOR && !params.containsKey(""String_Node_Str"")) {
    for (    FeedbackQuestionAttributes question : allQuestions) {
      relevantQuestions.put(question.getId(),question);
    }
  }
  FeedbackSessionResponseStatus responseStatus=new FeedbackSessionResponseStatus();
  boolean isPrivateSessionNotCreatedByThisUser=session.isPrivateSession() && !session.isCreator(userEmail);
  if (isPrivateSessionNotCreatedByThisUser) {
    return new FeedbackSessionResultsBundle(session,responses,relevantQuestions,emailNameTable,emailLastNameTable,emailTeamNameTable,visibilityTable,responseStatus,responseComments);
  }
  if (params.get(""String_Node_Str"") != null) {
    int questionNumber=Integer.parseInt(params.get(""String_Node_Str""));
    FeedbackQuestionAttributes question=fqLogic.getFeedbackQuestion(feedbackSessionName,courseId,questionNumber);
    if (question != null) {
      List<FeedbackResponseAttributes> responsesForThisQn;
      boolean isPrivateSessionCreatedByThisUser=session.isCreator(userEmail) && session.isPrivateSession();
      if (isPrivateSessionCreatedByThisUser) {
        responsesForThisQn=frLogic.getFeedbackResponsesForQuestion(question.getId());
      }
 else {
        responsesForThisQn=frLogic.getViewableFeedbackResponsesForQuestionInSection(question,userEmail,Role.INSTRUCTOR,null);
      }
      boolean thisQuestionHasResponses=(!responsesForThisQn.isEmpty());
      if (thisQuestionHasResponses) {
        relevantQuestions.put(question.getId(),question);
        for (        FeedbackResponseAttributes response : responsesForThisQn) {
          boolean isVisibleResponse=false;
          if ((response.giverEmail.equals(userEmail)) || (response.recipientEmail.equals(userEmail) && question.isResponseVisibleTo(FeedbackParticipantType.RECEIVER)) || (role == Role.INSTRUCTOR && question.isResponseVisibleTo(FeedbackParticipantType.INSTRUCTORS))|| (role == Role.STUDENT && question.isResponseVisibleTo(FeedbackParticipantType.STUDENTS))) {
            isVisibleResponse=true;
          }
          if (isVisibleResponse) {
            responses.add(response);
            addEmailNamePairsToTable(emailNameTable,response,question,roster);
            addEmailLastNamePairsToTable(emailLastNameTable,response,question,roster);
            addEmailTeamNamePairsToTable(emailTeamNameTable,response,question,roster);
            addVisibilityToTable(visibilityTable,question,response,userEmail,role,roster);
          }
          isVisibleResponse=false;
        }
      }
    }
    FeedbackSessionResultsBundle results=new FeedbackSessionResultsBundle(session,responses,relevantQuestions,emailNameTable,emailLastNameTable,emailTeamNameTable,visibilityTable,responseStatus,responseComments,true);
    return results;
  }
  Map<String,FeedbackQuestionAttributes> allQuestionsMap=new HashMap<String,FeedbackQuestionAttributes>();
  for (  FeedbackQuestionAttributes qn : allQuestions) {
    allQuestionsMap.put(qn.getId(),qn);
  }
  List<FeedbackResponseAttributes> allResponses=new ArrayList<FeedbackResponseAttributes>();
  if (params.get(""String_Node_Str"") != null) {
    long range=Long.parseLong(params.get(""String_Node_Str""));
    if (isInSection) {
      allResponses=frLogic.getFeedbackResponsesForSessionInSectionWithinRange(feedbackSessionName,courseId,section,range);
    }
 else     if (isFromSection) {
      allResponses=frLogic.getFeedbackResponsesForSessionFromSectionWithinRange(feedbackSessionName,courseId,section,range);
    }
 else     if (isToSection) {
      allResponses=frLogic.getFeedbackResponsesForSessionToSectionWithinRange(feedbackSessionName,courseId,section,range);
    }
 else {
      Assumption.fail(""String_Node_Str"");
    }
    if (allResponses.size() <= range) {
      isComplete=true;
    }
 else {
      for (      FeedbackQuestionAttributes qn : allQuestions) {
        relevantQuestions.put(qn.getId(),qn);
      }
      FeedbackSessionResultsBundle results=new FeedbackSessionResultsBundle(session,responses,relevantQuestions,emailNameTable,emailLastNameTable,emailTeamNameTable,visibilityTable,responseStatus,responseComments,isComplete);
      return results;
    }
  }
 else {
    if (isInSection) {
      allResponses=frLogic.getFeedbackResponsesForSessionInSection(feedbackSessionName,courseId,section);
    }
 else     if (isFromSection) {
      allResponses=frLogic.getFeedbackResponsesForSessionFromSection(feedbackSessionName,courseId,section);
    }
 else     if (isToSection) {
      allResponses=frLogic.getFeedbackResponsesForSessionToSection(feedbackSessionName,courseId,section);
    }
 else {
      Assumption.fail(""String_Node_Str"");
    }
  }
  responseStatus=(section == null && isIncludeResponseStatus) ? getFeedbackSessionResponseStatus(session,roster,allQuestions,allResponses) : null;
  StudentAttributes student=null;
  Set<String> studentsEmailInTeam=new HashSet<String>();
  if (role == Role.STUDENT) {
    student=studentsLogic.getStudentForEmail(courseId,userEmail);
    List<StudentAttributes> studentsInTeam=studentsLogic.getStudentsForTeam(student.team,courseId);
    for (    StudentAttributes teammates : studentsInTeam) {
      studentsEmailInTeam.add(teammates.email);
    }
  }
  InstructorAttributes instructor=null;
  if (role == Role.INSTRUCTOR) {
    instructor=instructorsLogic.getInstructorForEmail(courseId,userEmail);
  }
  Map<String,FeedbackResponseAttributes> relevantResponse=new HashMap<String,FeedbackResponseAttributes>();
  for (  FeedbackResponseAttributes response : allResponses) {
    FeedbackQuestionAttributes relatedQuestion=allQuestionsMap.get(response.feedbackQuestionId);
    if (relatedQuestion != null) {
      boolean isVisibleResponse=isResponseVisibleForUser(userEmail,courseId,role,section,student,studentsEmailInTeam,response,relatedQuestion,instructor);
      if (isVisibleResponse) {
        responses.add(response);
        relevantResponse.put(response.getId(),response);
        relevantQuestions.put(relatedQuestion.getId(),relatedQuestion);
        addEmailNamePairsToTable(emailNameTable,response,relatedQuestion,roster);
        addEmailLastNamePairsToTable(emailLastNameTable,response,relatedQuestion,roster);
        addEmailTeamNamePairsToTable(emailTeamNameTable,response,relatedQuestion,roster);
        addVisibilityToTable(visibilityTable,relatedQuestion,response,userEmail,role,roster);
      }
      isVisibleResponse=false;
    }
  }
  if (params.get(""String_Node_Str"") == null || params.get(""String_Node_Str"").equals(""String_Node_Str"") || params.get(""String_Node_Str"").equals(""String_Node_Str"")) {
    List<FeedbackResponseCommentAttributes> allResponseComments=frcLogic.getFeedbackResponseCommentForSessionInSection(courseId,feedbackSessionName,section);
    for (    FeedbackResponseCommentAttributes frc : allResponseComments) {
      FeedbackResponseAttributes relatedResponse=relevantResponse.get(frc.feedbackResponseId);
      FeedbackQuestionAttributes relatedQuestion=relevantQuestions.get(frc.feedbackQuestionId);
      boolean isVisibleResponseComment=frcLogic.isResponseCommentVisibleForUser(userEmail,courseId,role,section,student,studentsEmailInTeam,relatedResponse,relatedQuestion,frc,instructor);
      if (isVisibleResponseComment) {
        if (!frcLogic.isNameVisibleTo(frc,relatedResponse,userEmail,roster)) {
          frc.giverEmail=""String_Node_Str"";
        }
        List<FeedbackResponseCommentAttributes> frcList=responseComments.get(frc.feedbackResponseId);
        if (frcList == null) {
          frcList=new ArrayList<FeedbackResponseCommentAttributes>();
          frcList.add(frc);
          responseComments.put(frc.feedbackResponseId,frcList);
        }
 else {
          frcList.add(frc);
        }
      }
    }
    for (    List<FeedbackResponseCommentAttributes> responseCommentList : responseComments.values()) {
      Collections.sort(responseCommentList,new ResponseCommentCreationDateComparator());
    }
  }
  FeedbackSessionResultsBundle results=new FeedbackSessionResultsBundle(session,responses,relevantQuestions,emailNameTable,emailLastNameTable,emailTeamNameTable,visibilityTable,responseStatus,responseComments,isComplete);
  return results;
}","private FeedbackSessionResultsBundle getFeedbackSessionResultsForUserWithParams(String feedbackSessionName,String courseId,String userEmail,UserType.Role role,CourseRoster roster,Map<String,String> params) throws EntityDoesNotExistException {
  boolean isIncludeResponseStatus=Boolean.parseBoolean(params.get(""String_Node_Str""));
  boolean isComplete=(params.get(""String_Node_Str"") != null) ? false : true;
  boolean isFromSection=Boolean.parseBoolean(params.get(""String_Node_Str""));
  boolean isToSection=Boolean.parseBoolean(params.get(""String_Node_Str""));
  boolean isInSection=Boolean.parseBoolean(params.get(""String_Node_Str""));
  String section=params.get(""String_Node_Str"");
  FeedbackSessionAttributes session=fsDb.getFeedbackSession(courseId,feedbackSessionName);
  if (session == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"");
  }
  List<FeedbackQuestionAttributes> allQuestions=fqLogic.getFeedbackQuestionsForSession(feedbackSessionName,courseId);
  List<FeedbackResponseAttributes> responses=new ArrayList<FeedbackResponseAttributes>();
  Map<String,FeedbackQuestionAttributes> relevantQuestions=new HashMap<String,FeedbackQuestionAttributes>();
  Map<String,String> emailNameTable=new HashMap<String,String>();
  Map<String,String> emailLastNameTable=new HashMap<String,String>();
  Map<String,String> emailTeamNameTable=new HashMap<String,String>();
  Map<String,boolean[]> visibilityTable=new HashMap<String,boolean[]>();
  Map<String,List<FeedbackResponseCommentAttributes>> responseComments=new HashMap<String,List<FeedbackResponseCommentAttributes>>();
  if (role == UserType.Role.INSTRUCTOR && !params.containsKey(""String_Node_Str"")) {
    for (    FeedbackQuestionAttributes question : allQuestions) {
      relevantQuestions.put(question.getId(),question);
    }
  }
  FeedbackSessionResponseStatus responseStatus=new FeedbackSessionResponseStatus();
  boolean isPrivateSessionNotCreatedByThisUser=session.isPrivateSession() && !session.isCreator(userEmail);
  if (isPrivateSessionNotCreatedByThisUser) {
    return new FeedbackSessionResultsBundle(session,responses,relevantQuestions,emailNameTable,emailLastNameTable,emailTeamNameTable,visibilityTable,responseStatus,responseComments);
  }
  if (params.get(""String_Node_Str"") != null) {
    int questionNumber=Integer.parseInt(params.get(""String_Node_Str""));
    FeedbackQuestionAttributes question=fqLogic.getFeedbackQuestion(feedbackSessionName,courseId,questionNumber);
    if (question != null) {
      List<FeedbackResponseAttributes> responsesForThisQn;
      boolean isPrivateSessionCreatedByThisUser=session.isCreator(userEmail) && session.isPrivateSession();
      if (isPrivateSessionCreatedByThisUser) {
        responsesForThisQn=frLogic.getFeedbackResponsesForQuestion(question.getId());
      }
 else {
        responsesForThisQn=frLogic.getViewableFeedbackResponsesForQuestionInSection(question,userEmail,Role.INSTRUCTOR,null);
      }
      boolean thisQuestionHasResponses=(!responsesForThisQn.isEmpty());
      if (thisQuestionHasResponses) {
        relevantQuestions.put(question.getId(),question);
        for (        FeedbackResponseAttributes response : responsesForThisQn) {
          boolean isVisibleResponse=false;
          if ((response.giverEmail.equals(userEmail)) || (response.recipientEmail.equals(userEmail) && question.isResponseVisibleTo(FeedbackParticipantType.RECEIVER)) || (role == Role.INSTRUCTOR && question.isResponseVisibleTo(FeedbackParticipantType.INSTRUCTORS))|| (role == Role.STUDENT && question.isResponseVisibleTo(FeedbackParticipantType.STUDENTS))) {
            isVisibleResponse=true;
          }
          InstructorAttributes instructor=null;
          if (role == Role.INSTRUCTOR) {
            instructor=instructorsLogic.getInstructorForEmail(courseId,userEmail);
          }
          if (isVisibleResponse && instructor != null) {
            if (!(instructor.isAllowedForPrivilege(response.giverSection,response.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_VIEW_SESSION_IN_SECTIONS)) || !(instructor.isAllowedForPrivilege(response.giverSection,response.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_VIEW_SESSION_IN_SECTIONS))) {
              isVisibleResponse=false;
            }
          }
          if (isVisibleResponse) {
            responses.add(response);
            addEmailNamePairsToTable(emailNameTable,response,question,roster);
            addEmailLastNamePairsToTable(emailLastNameTable,response,question,roster);
            addEmailTeamNamePairsToTable(emailTeamNameTable,response,question,roster);
            addVisibilityToTable(visibilityTable,question,response,userEmail,role,roster);
          }
          isVisibleResponse=false;
        }
      }
    }
    FeedbackSessionResultsBundle results=new FeedbackSessionResultsBundle(session,responses,relevantQuestions,emailNameTable,emailLastNameTable,emailTeamNameTable,visibilityTable,responseStatus,responseComments,true);
    return results;
  }
  Map<String,FeedbackQuestionAttributes> allQuestionsMap=new HashMap<String,FeedbackQuestionAttributes>();
  for (  FeedbackQuestionAttributes qn : allQuestions) {
    allQuestionsMap.put(qn.getId(),qn);
  }
  List<FeedbackResponseAttributes> allResponses=new ArrayList<FeedbackResponseAttributes>();
  if (params.get(""String_Node_Str"") != null) {
    long range=Long.parseLong(params.get(""String_Node_Str""));
    if (isInSection) {
      allResponses=frLogic.getFeedbackResponsesForSessionInSectionWithinRange(feedbackSessionName,courseId,section,range);
    }
 else     if (isFromSection) {
      allResponses=frLogic.getFeedbackResponsesForSessionFromSectionWithinRange(feedbackSessionName,courseId,section,range);
    }
 else     if (isToSection) {
      allResponses=frLogic.getFeedbackResponsesForSessionToSectionWithinRange(feedbackSessionName,courseId,section,range);
    }
 else {
      Assumption.fail(""String_Node_Str"");
    }
    if (allResponses.size() <= range) {
      isComplete=true;
    }
 else {
      for (      FeedbackQuestionAttributes qn : allQuestions) {
        relevantQuestions.put(qn.getId(),qn);
      }
      FeedbackSessionResultsBundle results=new FeedbackSessionResultsBundle(session,responses,relevantQuestions,emailNameTable,emailLastNameTable,emailTeamNameTable,visibilityTable,responseStatus,responseComments,isComplete);
      return results;
    }
  }
 else {
    if (isInSection) {
      allResponses=frLogic.getFeedbackResponsesForSessionInSection(feedbackSessionName,courseId,section);
    }
 else     if (isFromSection) {
      allResponses=frLogic.getFeedbackResponsesForSessionFromSection(feedbackSessionName,courseId,section);
    }
 else     if (isToSection) {
      allResponses=frLogic.getFeedbackResponsesForSessionToSection(feedbackSessionName,courseId,section);
    }
 else {
      Assumption.fail(""String_Node_Str"");
    }
  }
  responseStatus=(section == null && isIncludeResponseStatus) ? getFeedbackSessionResponseStatus(session,roster,allQuestions,allResponses) : null;
  StudentAttributes student=null;
  Set<String> studentsEmailInTeam=new HashSet<String>();
  if (role == Role.STUDENT) {
    student=studentsLogic.getStudentForEmail(courseId,userEmail);
    List<StudentAttributes> studentsInTeam=studentsLogic.getStudentsForTeam(student.team,courseId);
    for (    StudentAttributes teammates : studentsInTeam) {
      studentsEmailInTeam.add(teammates.email);
    }
  }
  InstructorAttributes instructor=null;
  if (role == Role.INSTRUCTOR) {
    instructor=instructorsLogic.getInstructorForEmail(courseId,userEmail);
  }
  Map<String,FeedbackResponseAttributes> relevantResponse=new HashMap<String,FeedbackResponseAttributes>();
  for (  FeedbackResponseAttributes response : allResponses) {
    FeedbackQuestionAttributes relatedQuestion=allQuestionsMap.get(response.feedbackQuestionId);
    if (relatedQuestion != null) {
      boolean isVisibleResponse=isResponseVisibleForUser(userEmail,courseId,role,section,student,studentsEmailInTeam,response,relatedQuestion,instructor);
      if (isVisibleResponse) {
        responses.add(response);
        relevantResponse.put(response.getId(),response);
        relevantQuestions.put(relatedQuestion.getId(),relatedQuestion);
        addEmailNamePairsToTable(emailNameTable,response,relatedQuestion,roster);
        addEmailLastNamePairsToTable(emailLastNameTable,response,relatedQuestion,roster);
        addEmailTeamNamePairsToTable(emailTeamNameTable,response,relatedQuestion,roster);
        addVisibilityToTable(visibilityTable,relatedQuestion,response,userEmail,role,roster);
      }
      isVisibleResponse=false;
    }
  }
  if (params.get(""String_Node_Str"") == null || params.get(""String_Node_Str"").equals(""String_Node_Str"") || params.get(""String_Node_Str"").equals(""String_Node_Str"")) {
    List<FeedbackResponseCommentAttributes> allResponseComments=frcLogic.getFeedbackResponseCommentForSessionInSection(courseId,feedbackSessionName,section);
    for (    FeedbackResponseCommentAttributes frc : allResponseComments) {
      FeedbackResponseAttributes relatedResponse=relevantResponse.get(frc.feedbackResponseId);
      FeedbackQuestionAttributes relatedQuestion=relevantQuestions.get(frc.feedbackQuestionId);
      boolean isVisibleResponseComment=frcLogic.isResponseCommentVisibleForUser(userEmail,courseId,role,section,student,studentsEmailInTeam,relatedResponse,relatedQuestion,frc,instructor);
      if (isVisibleResponseComment) {
        if (!frcLogic.isNameVisibleTo(frc,relatedResponse,userEmail,roster)) {
          frc.giverEmail=""String_Node_Str"";
        }
        List<FeedbackResponseCommentAttributes> frcList=responseComments.get(frc.feedbackResponseId);
        if (frcList == null) {
          frcList=new ArrayList<FeedbackResponseCommentAttributes>();
          frcList.add(frc);
          responseComments.put(frc.feedbackResponseId,frcList);
        }
 else {
          frcList.add(frc);
        }
      }
    }
    for (    List<FeedbackResponseCommentAttributes> responseCommentList : responseComments.values()) {
      Collections.sort(responseCommentList,new ResponseCommentCreationDateComparator());
    }
  }
  FeedbackSessionResultsBundle results=new FeedbackSessionResultsBundle(session,responses,relevantQuestions,emailNameTable,emailLastNameTable,emailTeamNameTable,visibilityTable,responseStatus,responseComments,isComplete);
  return results;
}",0.9685920935301694
62866,"public List<FeedbackResponseCommentAttributes> getFeedbackResponseCommentsForSendingState(String courseId,CommentSendingState state) throws EntityDoesNotExistException {
  verifyIsCoursePresent(courseId);
  List<FeedbackResponseCommentAttributes> frcList=new ArrayList<FeedbackResponseCommentAttributes>();
  List<FeedbackSessionAttributes> feedbackSessions=fsLogic.getFeedbackSessionsForCourse(courseId);
  for (  FeedbackSessionAttributes fs : feedbackSessions) {
    if (fs.isPublished()) {
      frcList=frcDb.getFeedbackResponseCommentsForSendingState(courseId,fs.feedbackSessionName,state);
    }
  }
  return frcList;
}","public List<FeedbackResponseCommentAttributes> getFeedbackResponseCommentsForSendingState(String courseId,CommentSendingState state) throws EntityDoesNotExistException {
  verifyIsCoursePresent(courseId);
  List<FeedbackResponseCommentAttributes> frcList=new ArrayList<FeedbackResponseCommentAttributes>();
  List<FeedbackSessionAttributes> feedbackSessions=fsLogic.getFeedbackSessionsForCourse(courseId);
  for (  FeedbackSessionAttributes fs : feedbackSessions) {
    if (fs.isPublished()) {
      frcList.addAll(frcDb.getFeedbackResponseCommentsForSendingState(courseId,fs.feedbackSessionName,state));
    }
  }
  return frcList;
}",0.992063492063492
62867,"@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  Assumption.assertNotNull(""String_Node_Str"",courseId);
  String feedbackSessionName=getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);
  Assumption.assertNotNull(""String_Node_Str"",feedbackSessionName);
  String feedbackQuestionId=getRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_ID);
  Assumption.assertNotNull(""String_Node_Str"",feedbackQuestionId);
  String feedbackResponseId=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESPONSE_ID);
  Assumption.assertNotNull(""String_Node_Str"",feedbackResponseId);
  InstructorAttributes instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  FeedbackSessionAttributes session=logic.getFeedbackSession(feedbackSessionName,courseId);
  FeedbackResponseAttributes response=logic.getFeedbackResponse(feedbackResponseId);
  Assumption.assertNotNull(response);
  boolean isCreatorOnly=true;
  new GateKeeper().verifyAccessible(instructor,session,!isCreatorOnly,response.giverSection,feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_SUBMIT_SESSION_IN_SECTIONS);
  new GateKeeper().verifyAccessible(instructor,session,!isCreatorOnly,response.recipientSection,feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_SUBMIT_SESSION_IN_SECTIONS);
  InstructorFeedbackResponseCommentAjaxPageData data=new InstructorFeedbackResponseCommentAjaxPageData(account);
  String commentText=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_TEXT);
  Assumption.assertNotNull(""String_Node_Str"",commentText);
  if (commentText.trim().isEmpty()) {
    data.errorMessage=Const.StatusMessages.FEEDBACK_RESPONSE_COMMENT_EMPTY;
    data.isError=true;
    return createAjaxResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_RECIPIENT_GIVER_QUESTION,data);
  }
  FeedbackResponseCommentAttributes feedbackResponseComment=new FeedbackResponseCommentAttributes(courseId,feedbackSessionName,feedbackQuestionId,instructor.email,feedbackResponseId,new Date(),new Text(commentText),response.giverSection,response.recipientSection);
  String showCommentTo=getRequestParamValue(Const.ParamsNames.RESPONSE_COMMENTS_SHOWCOMMENTSTO);
  String showGiverNameTo=getRequestParamValue(Const.ParamsNames.RESPONSE_COMMENTS_SHOWGIVERTO);
  feedbackResponseComment.showCommentTo=new ArrayList<FeedbackParticipantType>();
  if (showCommentTo != null && !showCommentTo.isEmpty()) {
    String[] showCommentToArray=showCommentTo.split(""String_Node_Str"");
    for (    String viewer : showCommentToArray) {
      feedbackResponseComment.showCommentTo.add(FeedbackParticipantType.valueOf(viewer.trim()));
    }
  }
  feedbackResponseComment.showGiverNameTo=new ArrayList<FeedbackParticipantType>();
  if (showGiverNameTo != null && !showGiverNameTo.isEmpty()) {
    String[] showGiverNameToArray=showGiverNameTo.split(""String_Node_Str"");
    for (    String viewer : showGiverNameToArray) {
      feedbackResponseComment.showGiverNameTo.add(FeedbackParticipantType.valueOf(viewer.trim()));
    }
  }
  if (isResponseCommentPublicToRecipient(feedbackResponseComment)) {
    feedbackResponseComment.sendingState=CommentSendingState.PENDING;
  }
  FeedbackResponseCommentAttributes createdComment=new FeedbackResponseCommentAttributes();
  try {
    createdComment=logic.createFeedbackResponseComment(feedbackResponseComment);
    logic.putDocument(createdComment);
  }
 catch (  InvalidParametersException e) {
    setStatusForException(e);
    data.errorMessage=e.getMessage();
    data.isError=true;
  }
  if (!data.isError) {
    statusToAdmin+=""String_Node_Str"" + ""String_Node_Str"" + feedbackResponseComment.feedbackResponseId + ""String_Node_Str""+ ""String_Node_Str""+ feedbackResponseComment.courseId+ ""String_Node_Str""+ feedbackResponseComment.feedbackSessionName+ ""String_Node_Str""+ ""String_Node_Str""+ feedbackResponseComment.giverEmail+ ""String_Node_Str""+ feedbackResponseComment.createdAt+ ""String_Node_Str""+ ""String_Node_Str""+ feedbackResponseComment.commentText.getValue();
  }
  data.comment=createdComment;
  return createAjaxResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_RECIPIENT_GIVER_QUESTION,data);
}","@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  Assumption.assertNotNull(""String_Node_Str"",courseId);
  String feedbackSessionName=getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);
  Assumption.assertNotNull(""String_Node_Str"",feedbackSessionName);
  String feedbackQuestionId=getRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_ID);
  Assumption.assertNotNull(""String_Node_Str"",feedbackQuestionId);
  String feedbackResponseId=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESPONSE_ID);
  Assumption.assertNotNull(""String_Node_Str"",feedbackResponseId);
  InstructorAttributes instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  FeedbackSessionAttributes session=logic.getFeedbackSession(feedbackSessionName,courseId);
  FeedbackResponseAttributes response=logic.getFeedbackResponse(feedbackResponseId);
  Assumption.assertNotNull(response);
  boolean isCreatorOnly=true;
  new GateKeeper().verifyAccessible(instructor,session,!isCreatorOnly,response.giverSection,feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_SUBMIT_SESSION_IN_SECTIONS);
  new GateKeeper().verifyAccessible(instructor,session,!isCreatorOnly,response.recipientSection,feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_SUBMIT_SESSION_IN_SECTIONS);
  InstructorFeedbackResponseCommentAjaxPageData data=new InstructorFeedbackResponseCommentAjaxPageData(account);
  String commentText=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESPONSE_COMMENT_TEXT);
  Assumption.assertNotNull(""String_Node_Str"",commentText);
  if (commentText.trim().isEmpty()) {
    data.errorMessage=Const.StatusMessages.FEEDBACK_RESPONSE_COMMENT_EMPTY;
    data.isError=true;
    return createAjaxResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_RECIPIENT_GIVER_QUESTION,data);
  }
  FeedbackResponseCommentAttributes feedbackResponseComment=new FeedbackResponseCommentAttributes(courseId,feedbackSessionName,feedbackQuestionId,instructor.email,feedbackResponseId,new Date(),new Text(commentText),response.giverSection,response.recipientSection);
  String showCommentTo=getRequestParamValue(Const.ParamsNames.RESPONSE_COMMENTS_SHOWCOMMENTSTO);
  String showGiverNameTo=getRequestParamValue(Const.ParamsNames.RESPONSE_COMMENTS_SHOWGIVERTO);
  feedbackResponseComment.showCommentTo=new ArrayList<FeedbackParticipantType>();
  if (showCommentTo != null && !showCommentTo.isEmpty()) {
    String[] showCommentToArray=showCommentTo.split(""String_Node_Str"");
    for (    String viewer : showCommentToArray) {
      feedbackResponseComment.showCommentTo.add(FeedbackParticipantType.valueOf(viewer.trim()));
    }
  }
  feedbackResponseComment.showGiverNameTo=new ArrayList<FeedbackParticipantType>();
  if (showGiverNameTo != null && !showGiverNameTo.isEmpty()) {
    String[] showGiverNameToArray=showGiverNameTo.split(""String_Node_Str"");
    for (    String viewer : showGiverNameToArray) {
      feedbackResponseComment.showGiverNameTo.add(FeedbackParticipantType.valueOf(viewer.trim()));
    }
  }
  if (isResponseCommentPublicToRecipient(feedbackResponseComment) && session.isPublished()) {
    feedbackResponseComment.sendingState=CommentSendingState.PENDING;
  }
  FeedbackResponseCommentAttributes createdComment=new FeedbackResponseCommentAttributes();
  try {
    createdComment=logic.createFeedbackResponseComment(feedbackResponseComment);
    logic.putDocument(createdComment);
  }
 catch (  InvalidParametersException e) {
    setStatusForException(e);
    data.errorMessage=e.getMessage();
    data.isError=true;
  }
  if (!data.isError) {
    statusToAdmin+=""String_Node_Str"" + ""String_Node_Str"" + feedbackResponseComment.feedbackResponseId + ""String_Node_Str""+ ""String_Node_Str""+ feedbackResponseComment.courseId+ ""String_Node_Str""+ feedbackResponseComment.feedbackSessionName+ ""String_Node_Str""+ ""String_Node_Str""+ feedbackResponseComment.giverEmail+ ""String_Node_Str""+ feedbackResponseComment.createdAt+ ""String_Node_Str""+ ""String_Node_Str""+ feedbackResponseComment.commentText.getValue();
  }
  data.comment=createdComment;
  return createAjaxResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_RECIPIENT_GIVER_QUESTION,data);
}",0.9970515390965916
62868,"public boolean isNameVisibleTo(FeedbackQuestionAttributes question,FeedbackResponseAttributes response,String userEmail,boolean isGiverName,CourseRoster roster){
  if (question == null) {
    return false;
  }
  List<FeedbackParticipantType> showNameTo=isGiverName ? question.showGiverNameTo : question.showRecipientNameTo;
  if (response.giverEmail.equals(userEmail)) {
    return true;
  }
  for (  FeedbackParticipantType type : showNameTo) {
switch (type) {
case INSTRUCTORS:
      if (roster.getInstructorForEmail(userEmail) != null) {
        return true;
      }
 else {
        break;
      }
case OWN_TEAM_MEMBERS:
case OWN_TEAM_MEMBERS_INCLUDING_SELF:
    if (roster.isStudentsInSameTeam(response.giverEmail,userEmail)) {
      return true;
    }
 else {
      break;
    }
case RECEIVER:
  if (question.recipientType == FeedbackParticipantType.TEAMS) {
    if (roster.isStudentInTeam(userEmail,response.recipientEmail)) {
      return true;
    }
  }
 else   if (response.recipientEmail.equals(userEmail)) {
    return true;
  }
 else {
    break;
  }
case RECEIVER_TEAM_MEMBERS:
if (question.recipientType == FeedbackParticipantType.TEAMS) {
  if (roster.isStudentInTeam(userEmail,response.recipientEmail)) {
    return true;
  }
}
 else if (roster.isStudentsInSameTeam(response.recipientEmail,userEmail)) {
  return true;
}
 else {
  break;
}
case STUDENTS:
if (roster.isStudentInCourse(userEmail)) {
return true;
}
 else {
break;
}
default :
Assumption.fail(""String_Node_Str"" + ""String_Node_Str"");
break;
}
}
return false;
}","public boolean isNameVisibleTo(FeedbackQuestionAttributes question,FeedbackResponseAttributes response,String userEmail,UserType.Role role,boolean isGiverName,CourseRoster roster){
  if (question == null) {
    return false;
  }
  List<FeedbackParticipantType> showNameTo=isGiverName ? question.showGiverNameTo : question.showRecipientNameTo;
  if (response.giverEmail.equals(userEmail)) {
    return true;
  }
  for (  FeedbackParticipantType type : showNameTo) {
switch (type) {
case INSTRUCTORS:
      if (roster.getInstructorForEmail(userEmail) != null && role == UserType.Role.INSTRUCTOR) {
        return true;
      }
 else {
        break;
      }
case OWN_TEAM_MEMBERS:
case OWN_TEAM_MEMBERS_INCLUDING_SELF:
    if (roster.isStudentsInSameTeam(response.giverEmail,userEmail)) {
      return true;
    }
 else {
      break;
    }
case RECEIVER:
  if (question.recipientType == FeedbackParticipantType.TEAMS) {
    if (roster.isStudentInTeam(userEmail,response.recipientEmail)) {
      return true;
    }
  }
 else   if (response.recipientEmail.equals(userEmail)) {
    return true;
  }
 else {
    break;
  }
case RECEIVER_TEAM_MEMBERS:
if (question.recipientType == FeedbackParticipantType.TEAMS) {
  if (roster.isStudentInTeam(userEmail,response.recipientEmail)) {
    return true;
  }
}
 else if (roster.isStudentsInSameTeam(response.recipientEmail,userEmail)) {
  return true;
}
 else {
  break;
}
case STUDENTS:
if (roster.isStudentInCourse(userEmail)) {
return true;
}
 else {
break;
}
default :
Assumption.fail(""String_Node_Str"" + ""String_Node_Str"");
break;
}
}
return false;
}",0.9824337272436922
62869,"/** 
 * Creates in the datastore a fresh copy of data in typicalDataBundle.json
 */
protected static void restoreTypicalDataInDatastore() throws Exception {
  BackDoorLogic backDoorLogic=new BackDoorLogic();
  DataBundle dataBundle=getTypicalDataBundle();
  backDoorLogic.persistDataBundle(dataBundle);
}","/** 
 * Creates in the datastore a fresh copy of data in typicalDataBundle.json
 */
protected static void restoreTypicalDataInDatastore() throws Exception {
  BackDoorLogic backDoorLogic=new BackDoorLogic();
  DataBundle dataBundle=getTypicalDataBundle();
  backDoorLogic.deleteExistingData(dataBundle);
  backDoorLogic.persistDataBundle(dataBundle);
}",0.875
62870,"@Override public void sanitizeForSaving(){
  this.courseId=this.courseId.trim();
  this.feedbackSessionName=this.feedbackSessionName.trim();
  this.commentText=Sanitizer.sanitizeTextField(this.commentText);
  this.courseId=Sanitizer.sanitizeForHtml(courseId);
  this.feedbackSessionName=Sanitizer.sanitizeForHtml(feedbackSessionName);
  this.feedbackQuestionId=Sanitizer.sanitizeForHtml(feedbackQuestionId);
  this.giverEmail=Sanitizer.sanitizeForHtml(giverEmail);
  this.feedbackResponseId=Sanitizer.sanitizeForHtml(feedbackResponseId);
  if (commentText != null) {
    this.commentText=new Text(Sanitizer.sanitizeForHtml(commentText.getValue()));
  }
}","@Override public void sanitizeForSaving(){
  this.courseId=this.courseId.trim();
  this.feedbackSessionName=this.feedbackSessionName.trim();
  this.commentText=Sanitizer.sanitizeTextField(this.commentText);
  this.courseId=Sanitizer.sanitizeForHtml(courseId);
  this.feedbackSessionName=Sanitizer.sanitizeForHtml(feedbackSessionName);
  this.feedbackQuestionId=Sanitizer.sanitizeForHtml(feedbackQuestionId);
  this.giverEmail=Sanitizer.sanitizeForHtml(giverEmail);
  this.feedbackResponseId=Sanitizer.sanitizeForHtml(feedbackResponseId);
  if (commentText != null) {
    String sanitizedText=Sanitizer.sanitizeForHtml(commentText.getValue()).replace(""String_Node_Str"",""String_Node_Str"");
    this.commentText=new Text(sanitizedText);
  }
}",0.8686288585786073
62871,"public boolean isNameVisibleTo(FeedbackResponseCommentAttributes comment,FeedbackResponseAttributes response,String userEmail,CourseRoster roster){
  List<FeedbackParticipantType> showNameTo=comment.showGiverNameTo;
  if (userEmail.equals(comment.giverEmail)) {
    return true;
  }
  String responseGiverTeam=""String_Node_Str"";
  if (roster.getStudentForEmail(response.giverEmail) != null) {
    responseGiverTeam=roster.getStudentForEmail(response.giverEmail).team;
  }
  String responseRecipientTeam=""String_Node_Str"";
  if (roster.getStudentForEmail(response.recipientEmail) != null) {
    responseRecipientTeam=roster.getStudentForEmail(response.recipientEmail).team;
  }
  String currentUserTeam=""String_Node_Str"";
  if (roster.getStudentForEmail(userEmail) != null) {
    currentUserTeam=roster.getStudentForEmail(userEmail).team;
  }
  for (  FeedbackParticipantType type : showNameTo) {
    if (type == FeedbackParticipantType.GIVER && userEmail.equals(response.giverEmail)) {
      return true;
    }
 else     if (type == FeedbackParticipantType.INSTRUCTORS && roster.getInstructorForEmail(userEmail) != null) {
      return true;
    }
 else     if (type == FeedbackParticipantType.RECEIVER && userEmail.equals(response.recipientEmail)) {
      return true;
    }
 else     if (type == FeedbackParticipantType.OWN_TEAM_MEMBERS && responseGiverTeam.equals(currentUserTeam)) {
      return true;
    }
 else     if (type == FeedbackParticipantType.RECEIVER_TEAM_MEMBERS && responseRecipientTeam.equals(currentUserTeam)) {
      return true;
    }
 else     if (type == FeedbackParticipantType.STUDENTS && roster.getStudentForEmail(userEmail) != null) {
      return true;
    }
  }
  return false;
}","public boolean isNameVisibleTo(FeedbackResponseCommentAttributes comment,FeedbackResponseAttributes response,String userEmail,CourseRoster roster){
  List<FeedbackParticipantType> showNameTo=comment.showGiverNameTo;
  if (showNameTo == null) {
    return true;
  }
  if (userEmail.equals(comment.giverEmail)) {
    return true;
  }
  String responseGiverTeam=""String_Node_Str"";
  if (roster.getStudentForEmail(response.giverEmail) != null) {
    responseGiverTeam=roster.getStudentForEmail(response.giverEmail).team;
  }
  String responseRecipientTeam=""String_Node_Str"";
  if (roster.getStudentForEmail(response.recipientEmail) != null) {
    responseRecipientTeam=roster.getStudentForEmail(response.recipientEmail).team;
  }
  String currentUserTeam=""String_Node_Str"";
  if (roster.getStudentForEmail(userEmail) != null) {
    currentUserTeam=roster.getStudentForEmail(userEmail).team;
  }
  for (  FeedbackParticipantType type : showNameTo) {
    if (type == FeedbackParticipantType.GIVER && userEmail.equals(response.giverEmail)) {
      return true;
    }
 else     if (type == FeedbackParticipantType.INSTRUCTORS && roster.getInstructorForEmail(userEmail) != null) {
      return true;
    }
 else     if (type == FeedbackParticipantType.RECEIVER && userEmail.equals(response.recipientEmail)) {
      return true;
    }
 else     if (type == FeedbackParticipantType.OWN_TEAM_MEMBERS && responseGiverTeam.equals(currentUserTeam)) {
      return true;
    }
 else     if (type == FeedbackParticipantType.RECEIVER_TEAM_MEMBERS && responseRecipientTeam.equals(currentUserTeam)) {
      return true;
    }
 else     if (type == FeedbackParticipantType.STUDENTS && roster.getStudentForEmail(userEmail) != null) {
      return true;
    }
  }
  return false;
}",0.9858667435823478
62872,"public String getColorCode(Long timeTaken){
  String colorCode=""String_Node_Str"";
  if (timeTaken >= 10000 && timeTaken <= 20000) {
    colorCode=""String_Node_Str"";
  }
 else   if (timeTaken > 20000 && timeTaken <= 60000) {
    colorCode=""String_Node_Str"";
  }
  return colorCode;
}","public String getColorCode(Long timeTaken){
  if (timeTaken == null) {
    return ""String_Node_Str"";
  }
  String colorCode=""String_Node_Str"";
  if (timeTaken >= 10000 && timeTaken <= 20000) {
    colorCode=""String_Node_Str"";
  }
 else   if (timeTaken > 20000 && timeTaken <= 60000) {
    colorCode=""String_Node_Str"";
  }
  return colorCode;
}",0.9024
62873,"private void createFeedbackResponsesFromSubmission(String feedbackSessionName,String courseId,boolean peerFeedback,List<String> fqIds,SubmissionAttributes sub){
  String giver=sub.reviewer;
  String recipient=sub.reviewee;
  String giverSection=""String_Node_Str"";
  String recipientSection=""String_Node_Str"";
  StudentAttributes studentGiver=logic.getStudentForEmail(courseId,giver);
  recipientSection=(studentGiver == null) ? Const.DEFAULT_SECTION : studentGiver.section;
  StudentAttributes studentRecipient=logic.getStudentForEmail(courseId,recipient);
  recipientSection=(studentRecipient == null) ? Const.DEFAULT_SECTION : studentRecipient.section;
  FeedbackResponseAttributes q1Response=null;
  FeedbackResponseAttributes q2Response=null;
  FeedbackResponseAttributes q3Response=null;
  FeedbackResponseAttributes q4Response=null;
  FeedbackResponseAttributes q5Response=null;
  if (sub.points != Const.POINTS_NOT_SUBMITTED) {
    q1Response=new FeedbackResponseAttributes();
    q1Response.setId(null);
    q1Response.feedbackSessionName=feedbackSessionName;
    q1Response.courseId=courseId;
    q1Response.giverEmail=giver;
    q1Response.giverSection=giverSection;
    q1Response.recipientEmail=recipient;
    q1Response.recipientSection=recipientSection;
    q1Response.feedbackQuestionType=FeedbackQuestionType.CONTRIB;
    q1Response.feedbackQuestionId=fqIds.get(0);
    FeedbackAbstractResponseDetails responseDetails1=new FeedbackContributionResponseDetails(sub.points);
    q1Response.setResponseDetails(responseDetails1);
  }
  if (giver.equals(recipient)) {
    q2Response=new FeedbackResponseAttributes();
    q2Response.setId(null);
    q2Response.feedbackSessionName=feedbackSessionName;
    q2Response.courseId=courseId;
    q2Response.giverEmail=giver;
    q2Response.giverSection=giverSection;
    q2Response.recipientEmail=recipient;
    q2Response.recipientSection=recipientSection;
    q2Response.feedbackQuestionType=FeedbackQuestionType.TEXT;
    q2Response.feedbackQuestionId=fqIds.get(1);
    FeedbackAbstractResponseDetails responseDetails2=new FeedbackTextResponseDetails(sub.justification.getValue());
    q2Response.setResponseDetails(responseDetails2);
  }
 else {
    q3Response=new FeedbackResponseAttributes();
    q3Response.setId(null);
    q3Response.feedbackSessionName=feedbackSessionName;
    q3Response.courseId=courseId;
    q3Response.giverEmail=giver;
    q3Response.giverSection=giverSection;
    q3Response.recipientEmail=recipient;
    q3Response.recipientSection=recipientSection;
    q3Response.feedbackQuestionType=FeedbackQuestionType.TEXT;
    q3Response.feedbackQuestionId=fqIds.get(2);
    FeedbackAbstractResponseDetails responseDetails3=new FeedbackTextResponseDetails(sub.justification.getValue());
    q3Response.setResponseDetails(responseDetails3);
  }
  if (peerFeedback) {
    if (giver.equals(recipient)) {
      q4Response=new FeedbackResponseAttributes();
      q4Response.setId(null);
      q4Response.feedbackSessionName=feedbackSessionName;
      q4Response.courseId=courseId;
      q4Response.giverEmail=giver;
      q4Response.giverSection=giverSection;
      q4Response.recipientEmail=recipient;
      q4Response.recipientSection=recipientSection;
      q4Response.feedbackQuestionType=FeedbackQuestionType.TEXT;
      q4Response.feedbackQuestionId=fqIds.get(3);
      FeedbackAbstractResponseDetails responseDetails4=new FeedbackTextResponseDetails(sub.p2pFeedback.getValue());
      q4Response.setResponseDetails(responseDetails4);
    }
 else {
      q5Response=new FeedbackResponseAttributes();
      q5Response.setId(null);
      q5Response.feedbackSessionName=feedbackSessionName;
      q5Response.courseId=courseId;
      q5Response.giverEmail=giver;
      q5Response.giverSection=giverSection;
      q5Response.recipientEmail=recipient;
      q5Response.recipientSection=recipientSection;
      q5Response.feedbackQuestionType=FeedbackQuestionType.TEXT;
      q5Response.feedbackQuestionId=fqIds.get(4);
      FeedbackAbstractResponseDetails responseDetails5=new FeedbackTextResponseDetails(sub.p2pFeedback.getValue());
      q5Response.setResponseDetails(responseDetails5);
    }
  }
  List<FeedbackResponseAttributes> allResponses=new ArrayList<FeedbackResponseAttributes>();
  allResponses.add(q1Response);
  allResponses.add(q2Response);
  allResponses.add(q3Response);
  allResponses.add(q4Response);
  allResponses.add(q5Response);
  for (  FeedbackResponseAttributes response : allResponses) {
    if (response != null) {
      if (!(response.responseMetaData.getValue().isEmpty() || response.recipientEmail.isEmpty())) {
        try {
          logic.createFeedbackResponse(response);
        }
 catch (        EntityAlreadyExistsException e) {
          System.out.println(""String_Node_Str"");
          e.printStackTrace();
        }
catch (        InvalidParametersException e) {
          System.out.println(""String_Node_Str"");
          e.printStackTrace();
        }
      }
    }
  }
}","private void createFeedbackResponsesFromSubmission(String feedbackSessionName,String courseId,boolean peerFeedback,List<String> fqIds,SubmissionAttributes sub){
  String giver=sub.reviewer;
  String recipient=sub.reviewee;
  String giverSection=""String_Node_Str"";
  String recipientSection=""String_Node_Str"";
  StudentAttributes studentGiver=logic.getStudentForEmail(courseId,giver);
  giverSection=(studentGiver == null) ? Const.DEFAULT_SECTION : studentGiver.section;
  StudentAttributes studentRecipient=logic.getStudentForEmail(courseId,recipient);
  recipientSection=(studentRecipient == null) ? Const.DEFAULT_SECTION : studentRecipient.section;
  FeedbackResponseAttributes q1Response=null;
  FeedbackResponseAttributes q2Response=null;
  FeedbackResponseAttributes q3Response=null;
  FeedbackResponseAttributes q4Response=null;
  FeedbackResponseAttributes q5Response=null;
  if (sub.points != Const.POINTS_NOT_SUBMITTED) {
    q1Response=new FeedbackResponseAttributes();
    q1Response.setId(null);
    q1Response.feedbackSessionName=feedbackSessionName;
    q1Response.courseId=courseId;
    q1Response.giverEmail=giver;
    q1Response.giverSection=giverSection;
    q1Response.recipientEmail=recipient;
    q1Response.recipientSection=recipientSection;
    q1Response.feedbackQuestionType=FeedbackQuestionType.CONTRIB;
    q1Response.feedbackQuestionId=fqIds.get(0);
    FeedbackAbstractResponseDetails responseDetails1=new FeedbackContributionResponseDetails(sub.points);
    q1Response.setResponseDetails(responseDetails1);
  }
  if (giver.equals(recipient)) {
    q2Response=new FeedbackResponseAttributes();
    q2Response.setId(null);
    q2Response.feedbackSessionName=feedbackSessionName;
    q2Response.courseId=courseId;
    q2Response.giverEmail=giver;
    q2Response.giverSection=giverSection;
    q2Response.recipientEmail=recipient;
    q2Response.recipientSection=recipientSection;
    q2Response.feedbackQuestionType=FeedbackQuestionType.TEXT;
    q2Response.feedbackQuestionId=fqIds.get(1);
    FeedbackAbstractResponseDetails responseDetails2=new FeedbackTextResponseDetails(sub.justification.getValue());
    q2Response.setResponseDetails(responseDetails2);
  }
 else {
    q3Response=new FeedbackResponseAttributes();
    q3Response.setId(null);
    q3Response.feedbackSessionName=feedbackSessionName;
    q3Response.courseId=courseId;
    q3Response.giverEmail=giver;
    q3Response.giverSection=giverSection;
    q3Response.recipientEmail=recipient;
    q3Response.recipientSection=recipientSection;
    q3Response.feedbackQuestionType=FeedbackQuestionType.TEXT;
    q3Response.feedbackQuestionId=fqIds.get(2);
    FeedbackAbstractResponseDetails responseDetails3=new FeedbackTextResponseDetails(sub.justification.getValue());
    q3Response.setResponseDetails(responseDetails3);
  }
  if (peerFeedback) {
    if (giver.equals(recipient)) {
      q4Response=new FeedbackResponseAttributes();
      q4Response.setId(null);
      q4Response.feedbackSessionName=feedbackSessionName;
      q4Response.courseId=courseId;
      q4Response.giverEmail=giver;
      q4Response.giverSection=giverSection;
      q4Response.recipientEmail=recipient;
      q4Response.recipientSection=recipientSection;
      q4Response.feedbackQuestionType=FeedbackQuestionType.TEXT;
      q4Response.feedbackQuestionId=fqIds.get(3);
      FeedbackAbstractResponseDetails responseDetails4=new FeedbackTextResponseDetails(sub.p2pFeedback.getValue());
      q4Response.setResponseDetails(responseDetails4);
    }
 else {
      q5Response=new FeedbackResponseAttributes();
      q5Response.setId(null);
      q5Response.feedbackSessionName=feedbackSessionName;
      q5Response.courseId=courseId;
      q5Response.giverEmail=giver;
      q5Response.giverSection=giverSection;
      q5Response.recipientEmail=recipient;
      q5Response.recipientSection=recipientSection;
      q5Response.feedbackQuestionType=FeedbackQuestionType.TEXT;
      q5Response.feedbackQuestionId=fqIds.get(4);
      FeedbackAbstractResponseDetails responseDetails5=new FeedbackTextResponseDetails(sub.p2pFeedback.getValue());
      q5Response.setResponseDetails(responseDetails5);
    }
  }
  List<FeedbackResponseAttributes> allResponses=new ArrayList<FeedbackResponseAttributes>();
  allResponses.add(q1Response);
  allResponses.add(q2Response);
  allResponses.add(q3Response);
  allResponses.add(q4Response);
  allResponses.add(q5Response);
  for (  FeedbackResponseAttributes response : allResponses) {
    if (response != null) {
      if (!(response.responseMetaData.getValue().isEmpty() || response.recipientEmail.isEmpty())) {
        try {
          logic.createFeedbackResponse(response);
        }
 catch (        EntityAlreadyExistsException e) {
          System.out.println(""String_Node_Str"");
          e.printStackTrace();
        }
catch (        InvalidParametersException e) {
          System.out.println(""String_Node_Str"");
          e.printStackTrace();
        }
      }
    }
  }
}",0.9985952237607868
62874,"protected List<CourseDetailsBundle> loadCoursesList(String userId,HashMap<String,InstructorAttributes> instructors) throws EntityDoesNotExistException {
  HashMap<String,CourseDetailsBundle> summary=logic.getCourseSummariesForInstructor(userId);
  List<CourseDetailsBundle> courses=new ArrayList<CourseDetailsBundle>(summary.values());
  List<CourseDetailsBundle> allowedCourses=new ArrayList<CourseDetailsBundle>();
  for (  CourseDetailsBundle courseDetails : courses) {
    InstructorAttributes instructor=logic.getInstructorForGoogleId(courseDetails.course.id,account.googleId);
    instructors.put(courseDetails.course.id,instructor);
    if (instructor.isAllowedForPrivilege(Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION)) {
      allowedCourses.add(courseDetails);
    }
  }
  CourseDetailsBundle.sortDetailedCoursesByCourseId(allowedCourses);
  return allowedCourses;
}","protected List<CourseDetailsBundle> loadCoursesList(String userId,HashMap<String,InstructorAttributes> instructors) throws EntityDoesNotExistException {
  HashMap<String,CourseDetailsBundle> summary=logic.getCourseSummariesForInstructor(userId);
  List<CourseDetailsBundle> courses=new ArrayList<CourseDetailsBundle>(summary.values());
  for (  CourseDetailsBundle courseDetails : courses) {
    InstructorAttributes instructor=logic.getInstructorForGoogleId(courseDetails.course.id,account.googleId);
    instructors.put(courseDetails.course.id,instructor);
  }
  CourseDetailsBundle.sortDetailedCoursesByCourseId(courses);
  return courses;
}",0.6196078431372549
62875,"@Override public ActionResult execute() throws EntityDoesNotExistException {
  new GateKeeper().verifyInstructorPrivileges(account);
  String searchKey=getRequestParamValue(Const.ParamsNames.SEARCH_KEY);
  Boolean displayArchive=getRequestParamAsBoolean(Const.ParamsNames.DISPLAY_ARCHIVE);
  data=new InstructorStudentListPageData(account);
  data.instructors=new HashMap<String,InstructorAttributes>();
  HashMap<String,CourseDetailsBundle> courses=logic.getCourseDetailsListForInstructor(account.googleId);
  for (  CourseDetailsBundle courseDetails : courses.values()) {
    InstructorAttributes instructor=logic.getInstructorForGoogleId(courseDetails.course.id,account.googleId);
    data.instructors.put(courseDetails.course.id,instructor);
  }
  data.courses=new ArrayList<CourseDetailsBundle>(courses.values());
  CourseDetailsBundle.sortDetailedCoursesByCreationDate(data.courses);
  data.searchKey=searchKey;
  data.displayArchive=displayArchive;
  if (data.courses.size() == 0) {
    statusToUser.add(Const.StatusMessages.INSTRUCTOR_NO_COURSE_AND_STUDENTS);
  }
  statusToAdmin=""String_Node_Str"" + ""String_Node_Str"" + data.courses.size();
  ShowPageResult response=createShowPageResult(Const.ViewURIs.INSTRUCTOR_STUDENT_LIST,data);
  return response;
}","@Override public ActionResult execute() throws EntityDoesNotExistException {
  new GateKeeper().verifyInstructorPrivileges(account);
  String searchKey=getRequestParamValue(Const.ParamsNames.SEARCH_KEY);
  Boolean displayArchive=getRequestParamAsBoolean(Const.ParamsNames.DISPLAY_ARCHIVE);
  data=new InstructorStudentListPageData(account);
  data.instructors=new HashMap<String,InstructorAttributes>();
  HashMap<String,CourseDetailsBundle> courses=logic.getCourseSummariesForInstructor(account.googleId);
  for (  CourseDetailsBundle courseDetails : courses.values()) {
    InstructorAttributes instructor=logic.getInstructorForGoogleId(courseDetails.course.id,account.googleId);
    data.instructors.put(courseDetails.course.id,instructor);
  }
  data.courses=new ArrayList<CourseDetailsBundle>(courses.values());
  CourseDetailsBundle.sortDetailedCoursesByCreationDate(data.courses);
  data.searchKey=searchKey;
  data.displayArchive=displayArchive;
  if (data.courses.size() == 0) {
    statusToUser.add(Const.StatusMessages.INSTRUCTOR_NO_COURSE_AND_STUDENTS);
  }
  statusToAdmin=""String_Node_Str"" + ""String_Node_Str"" + data.courses.size();
  ShowPageResult response=createShowPageResult(Const.ViewURIs.INSTRUCTOR_STUDENT_LIST,data);
  return response;
}",0.9920697858842188
62876,"private FeedbackSessionResultsBundle getFeedbackSessionResultsForUserWithParams(String feedbackSessionName,String courseId,String userEmail,UserType.Role role,CourseRoster roster,Map<String,String> params) throws EntityDoesNotExistException {
  boolean isIncludeResponseStatus=Boolean.parseBoolean(params.get(""String_Node_Str""));
  boolean isComplete=(params.get(""String_Node_Str"") != null) ? false : true;
  boolean isFromSection=Boolean.parseBoolean(params.get(""String_Node_Str""));
  boolean isToSection=Boolean.parseBoolean(params.get(""String_Node_Str""));
  boolean isInSection=Boolean.parseBoolean(params.get(""String_Node_Str""));
  String section=params.get(""String_Node_Str"");
  FeedbackSessionAttributes session=fsDb.getFeedbackSession(courseId,feedbackSessionName);
  if (session == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"");
  }
  List<FeedbackQuestionAttributes> allQuestions=fqLogic.getFeedbackQuestionsForSession(feedbackSessionName,courseId);
  List<FeedbackResponseAttributes> responses=new ArrayList<FeedbackResponseAttributes>();
  Map<String,FeedbackQuestionAttributes> relevantQuestions=new HashMap<String,FeedbackQuestionAttributes>();
  Map<String,String> emailNameTable=new HashMap<String,String>();
  Map<String,String> emailTeamNameTable=new HashMap<String,String>();
  Map<String,boolean[]> visibilityTable=new HashMap<String,boolean[]>();
  Map<String,List<FeedbackResponseCommentAttributes>> responseComments=new HashMap<String,List<FeedbackResponseCommentAttributes>>();
  FeedbackSessionResponseStatus responseStatus=new FeedbackSessionResponseStatus();
  boolean isPrivateSessionNotCreatedByThisUser=session.isPrivateSession() && !session.isCreator(userEmail);
  if (isPrivateSessionNotCreatedByThisUser) {
    return new FeedbackSessionResultsBundle(session,responses,relevantQuestions,emailNameTable,emailTeamNameTable,visibilityTable,responseStatus,responseComments);
  }
  if (params.get(""String_Node_Str"") != null) {
    int questionNumber=Integer.parseInt(params.get(""String_Node_Str""));
    FeedbackQuestionAttributes question=fqLogic.getFeedbackQuestion(feedbackSessionName,courseId,questionNumber);
    if (question != null) {
      List<FeedbackResponseAttributes> responsesForThisQn;
      boolean isPrivateSessionCreatedByThisUser=session.isCreator(userEmail) && session.isPrivateSession();
      if (isPrivateSessionCreatedByThisUser) {
        responsesForThisQn=frLogic.getFeedbackResponsesForQuestion(question.getId());
      }
 else {
        responsesForThisQn=frLogic.getViewableFeedbackResponsesForQuestionInSection(question,userEmail,Role.INSTRUCTOR,null);
      }
      boolean thisQuestionHasResponses=(!responsesForThisQn.isEmpty());
      if (thisQuestionHasResponses) {
        relevantQuestions.put(question.getId(),question);
        responses.addAll(responsesForThisQn);
        for (        FeedbackResponseAttributes response : responsesForThisQn) {
          addEmailNamePairsToTable(emailNameTable,response,question,roster);
          addEmailTeamNamePairsToTable(emailTeamNameTable,response,question,roster);
          addVisibilityToTable(visibilityTable,question,response,userEmail,roster);
        }
      }
    }
    FeedbackSessionResultsBundle results=new FeedbackSessionResultsBundle(session,responses,relevantQuestions,emailNameTable,emailTeamNameTable,visibilityTable,responseStatus,responseComments);
    return results;
  }
  Map<String,FeedbackQuestionAttributes> allQuestionsMap=new HashMap<String,FeedbackQuestionAttributes>();
  for (  FeedbackQuestionAttributes qn : allQuestions) {
    allQuestionsMap.put(qn.getId(),qn);
  }
  List<FeedbackResponseAttributes> allResponses=new ArrayList<FeedbackResponseAttributes>();
  if (params.get(""String_Node_Str"") != null) {
    long range=Long.parseLong(params.get(""String_Node_Str""));
    if (isInSection) {
      allResponses=frLogic.getFeedbackResponsesForSessionInSectionWithinRange(feedbackSessionName,courseId,section,range);
    }
 else     if (isFromSection) {
      allResponses=frLogic.getFeedbackResponsesForSessionFromSectionWithinRange(feedbackSessionName,courseId,section,range);
    }
 else     if (isToSection) {
      allResponses=frLogic.getFeedbackResponsesForSessionToSectionWithinRange(feedbackSessionName,courseId,section,range);
    }
 else {
      Assumption.fail(""String_Node_Str"");
    }
    if (allResponses.size() <= range) {
      isComplete=true;
    }
 else {
      for (      FeedbackQuestionAttributes qn : allQuestions) {
        relevantQuestions.put(qn.getId(),qn);
      }
      FeedbackSessionResultsBundle results=new FeedbackSessionResultsBundle(session,responses,allQuestionsMap,emailNameTable,emailTeamNameTable,visibilityTable,responseStatus,responseComments,isComplete);
      return results;
    }
  }
 else {
    if (isInSection) {
      allResponses=frLogic.getFeedbackResponsesForSessionInSection(feedbackSessionName,courseId,section);
    }
 else     if (isFromSection) {
      allResponses=frLogic.getFeedbackResponsesForSessionFromSection(feedbackSessionName,courseId,section);
    }
 else     if (isToSection) {
      allResponses=frLogic.getFeedbackResponsesForSessionToSection(feedbackSessionName,courseId,section);
    }
 else {
      Assumption.fail(""String_Node_Str"");
    }
  }
  responseStatus=(section == null && isIncludeResponseStatus) ? getFeedbackSessionResponseStatus(session,roster,allQuestions,allResponses) : null;
  StudentAttributes student=null;
  Set<String> studentsEmailInTeam=new HashSet<String>();
  if (role == Role.STUDENT) {
    student=studentsLogic.getStudentForEmail(courseId,userEmail);
    List<StudentAttributes> studentsInTeam=studentsLogic.getStudentsForTeam(student.team,courseId);
    for (    StudentAttributes teammates : studentsInTeam) {
      studentsEmailInTeam.add(teammates.email);
    }
  }
  for (  FeedbackResponseAttributes response : allResponses) {
    FeedbackQuestionAttributes relatedQuestion=allQuestionsMap.get(response.feedbackQuestionId);
    if (relatedQuestion != null) {
      Boolean isVisibleResponse=false;
      if ((response.giverEmail.equals(userEmail) && (section == null || response.recipientSection.equals(section))) || (response.recipientEmail.equals(userEmail) && relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.RECEIVER) && (section == null || response.giverSection.equals(section))) || (role == Role.INSTRUCTOR && relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.INSTRUCTORS) && (section == null || (response.giverSection.equals(section) && response.recipientSection.equals(section))))|| (role == Role.STUDENT && relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.STUDENTS))) {
        isVisibleResponse=true;
      }
 else       if (role == Role.STUDENT && ((relatedQuestion.recipientType == FeedbackParticipantType.TEAMS && relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.RECEIVER) && response.recipientEmail.equals(student.team)) || ((relatedQuestion.giverType == FeedbackParticipantType.TEAMS || relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.OWN_TEAM_MEMBERS)) && studentsEmailInTeam.contains(response.giverEmail)) || (relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS) && studentsEmailInTeam.contains(response.recipientEmail)))) {
        isVisibleResponse=true;
      }
      if (isVisibleResponse) {
        responses.add(response);
        relevantQuestions.put(relatedQuestion.getId(),relatedQuestion);
        addEmailNamePairsToTable(emailNameTable,response,relatedQuestion,roster);
        addEmailTeamNamePairsToTable(emailTeamNameTable,response,relatedQuestion,roster);
        addVisibilityToTable(visibilityTable,relatedQuestion,response,userEmail,roster);
      }
      isVisibleResponse=false;
    }
  }
  List<FeedbackResponseCommentAttributes> allResponseComments=frcLogic.getFeedbackResponseCommentForSession(courseId,feedbackSessionName);
  for (  FeedbackResponseCommentAttributes frc : allResponseComments) {
    List<FeedbackResponseCommentAttributes> frcList=responseComments.get(frc.feedbackResponseId);
    if (frcList == null) {
      frcList=new ArrayList<FeedbackResponseCommentAttributes>();
      frcList.add(frc);
      responseComments.put(frc.feedbackResponseId,frcList);
    }
 else {
      frcList.add(frc);
    }
  }
  for (  List<FeedbackResponseCommentAttributes> responseCommentList : responseComments.values()) {
    Collections.sort(responseCommentList,new ResponseCommentCreationDateComparator());
  }
  FeedbackSessionResultsBundle results=new FeedbackSessionResultsBundle(session,responses,relevantQuestions,emailNameTable,emailTeamNameTable,visibilityTable,responseStatus,responseComments,isComplete);
  return results;
}","private FeedbackSessionResultsBundle getFeedbackSessionResultsForUserWithParams(String feedbackSessionName,String courseId,String userEmail,UserType.Role role,CourseRoster roster,Map<String,String> params) throws EntityDoesNotExistException {
  boolean isIncludeResponseStatus=Boolean.parseBoolean(params.get(""String_Node_Str""));
  boolean isComplete=(params.get(""String_Node_Str"") != null) ? false : true;
  boolean isFromSection=Boolean.parseBoolean(params.get(""String_Node_Str""));
  boolean isToSection=Boolean.parseBoolean(params.get(""String_Node_Str""));
  boolean isInSection=Boolean.parseBoolean(params.get(""String_Node_Str""));
  String section=params.get(""String_Node_Str"");
  FeedbackSessionAttributes session=fsDb.getFeedbackSession(courseId,feedbackSessionName);
  if (session == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"");
  }
  List<FeedbackQuestionAttributes> allQuestions=fqLogic.getFeedbackQuestionsForSession(feedbackSessionName,courseId);
  List<FeedbackResponseAttributes> responses=new ArrayList<FeedbackResponseAttributes>();
  Map<String,FeedbackQuestionAttributes> relevantQuestions=new HashMap<String,FeedbackQuestionAttributes>();
  Map<String,String> emailNameTable=new HashMap<String,String>();
  Map<String,String> emailTeamNameTable=new HashMap<String,String>();
  Map<String,boolean[]> visibilityTable=new HashMap<String,boolean[]>();
  Map<String,List<FeedbackResponseCommentAttributes>> responseComments=new HashMap<String,List<FeedbackResponseCommentAttributes>>();
  FeedbackSessionResponseStatus responseStatus=new FeedbackSessionResponseStatus();
  boolean isPrivateSessionNotCreatedByThisUser=session.isPrivateSession() && !session.isCreator(userEmail);
  if (isPrivateSessionNotCreatedByThisUser) {
    return new FeedbackSessionResultsBundle(session,responses,relevantQuestions,emailNameTable,emailTeamNameTable,visibilityTable,responseStatus,responseComments);
  }
  if (params.get(""String_Node_Str"") != null) {
    int questionNumber=Integer.parseInt(params.get(""String_Node_Str""));
    FeedbackQuestionAttributes question=fqLogic.getFeedbackQuestion(feedbackSessionName,courseId,questionNumber);
    if (question != null) {
      List<FeedbackResponseAttributes> responsesForThisQn;
      boolean isPrivateSessionCreatedByThisUser=session.isCreator(userEmail) && session.isPrivateSession();
      if (isPrivateSessionCreatedByThisUser) {
        responsesForThisQn=frLogic.getFeedbackResponsesForQuestion(question.getId());
      }
 else {
        responsesForThisQn=frLogic.getViewableFeedbackResponsesForQuestionInSection(question,userEmail,Role.INSTRUCTOR,null);
      }
      boolean thisQuestionHasResponses=(!responsesForThisQn.isEmpty());
      if (thisQuestionHasResponses) {
        relevantQuestions.put(question.getId(),question);
        responses.addAll(responsesForThisQn);
        for (        FeedbackResponseAttributes response : responsesForThisQn) {
          addEmailNamePairsToTable(emailNameTable,response,question,roster);
          addEmailTeamNamePairsToTable(emailTeamNameTable,response,question,roster);
          addVisibilityToTable(visibilityTable,question,response,userEmail,roster);
        }
      }
    }
    FeedbackSessionResultsBundle results=new FeedbackSessionResultsBundle(session,responses,relevantQuestions,emailNameTable,emailTeamNameTable,visibilityTable,responseStatus,responseComments);
    return results;
  }
  Map<String,FeedbackQuestionAttributes> allQuestionsMap=new HashMap<String,FeedbackQuestionAttributes>();
  for (  FeedbackQuestionAttributes qn : allQuestions) {
    allQuestionsMap.put(qn.getId(),qn);
  }
  List<FeedbackResponseAttributes> allResponses=new ArrayList<FeedbackResponseAttributes>();
  if (params.get(""String_Node_Str"") != null) {
    long range=Long.parseLong(params.get(""String_Node_Str""));
    if (isInSection) {
      allResponses=frLogic.getFeedbackResponsesForSessionInSectionWithinRange(feedbackSessionName,courseId,section,range);
    }
 else     if (isFromSection) {
      allResponses=frLogic.getFeedbackResponsesForSessionFromSectionWithinRange(feedbackSessionName,courseId,section,range);
    }
 else     if (isToSection) {
      allResponses=frLogic.getFeedbackResponsesForSessionToSectionWithinRange(feedbackSessionName,courseId,section,range);
    }
 else {
      Assumption.fail(""String_Node_Str"");
    }
    if (allResponses.size() <= range) {
      isComplete=true;
    }
 else {
      for (      FeedbackQuestionAttributes qn : allQuestions) {
        if (qn.isResponseVisibleTo(FeedbackParticipantType.INSTRUCTORS)) {
          relevantQuestions.put(qn.getId(),qn);
        }
      }
      FeedbackSessionResultsBundle results=new FeedbackSessionResultsBundle(session,responses,relevantQuestions,emailNameTable,emailTeamNameTable,visibilityTable,responseStatus,responseComments,isComplete);
      return results;
    }
  }
 else {
    if (isInSection) {
      allResponses=frLogic.getFeedbackResponsesForSessionInSection(feedbackSessionName,courseId,section);
    }
 else     if (isFromSection) {
      allResponses=frLogic.getFeedbackResponsesForSessionFromSection(feedbackSessionName,courseId,section);
    }
 else     if (isToSection) {
      allResponses=frLogic.getFeedbackResponsesForSessionToSection(feedbackSessionName,courseId,section);
    }
 else {
      Assumption.fail(""String_Node_Str"");
    }
  }
  responseStatus=(section == null && isIncludeResponseStatus) ? getFeedbackSessionResponseStatus(session,roster,allQuestions,allResponses) : null;
  StudentAttributes student=null;
  Set<String> studentsEmailInTeam=new HashSet<String>();
  if (role == Role.STUDENT) {
    student=studentsLogic.getStudentForEmail(courseId,userEmail);
    List<StudentAttributes> studentsInTeam=studentsLogic.getStudentsForTeam(student.team,courseId);
    for (    StudentAttributes teammates : studentsInTeam) {
      studentsEmailInTeam.add(teammates.email);
    }
  }
  for (  FeedbackResponseAttributes response : allResponses) {
    FeedbackQuestionAttributes relatedQuestion=allQuestionsMap.get(response.feedbackQuestionId);
    if (relatedQuestion != null) {
      Boolean isVisibleResponse=false;
      if ((response.giverEmail.equals(userEmail)) || (response.recipientEmail.equals(userEmail) && relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.RECEIVER)) || (role == Role.INSTRUCTOR && relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.INSTRUCTORS))|| (role == Role.STUDENT && relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.STUDENTS))) {
        isVisibleResponse=true;
      }
 else       if (role == Role.STUDENT && ((relatedQuestion.recipientType == FeedbackParticipantType.TEAMS && relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.RECEIVER) && response.recipientEmail.equals(student.team)) || ((relatedQuestion.giverType == FeedbackParticipantType.TEAMS || relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.OWN_TEAM_MEMBERS)) && studentsEmailInTeam.contains(response.giverEmail)) || (relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS) && studentsEmailInTeam.contains(response.recipientEmail)))) {
        isVisibleResponse=true;
      }
      if (isVisibleResponse) {
        responses.add(response);
        relevantQuestions.put(relatedQuestion.getId(),relatedQuestion);
        addEmailNamePairsToTable(emailNameTable,response,relatedQuestion,roster);
        addEmailTeamNamePairsToTable(emailTeamNameTable,response,relatedQuestion,roster);
        addVisibilityToTable(visibilityTable,relatedQuestion,response,userEmail,roster);
      }
      isVisibleResponse=false;
    }
  }
  List<FeedbackResponseCommentAttributes> allResponseComments=frcLogic.getFeedbackResponseCommentForSession(courseId,feedbackSessionName);
  for (  FeedbackResponseCommentAttributes frc : allResponseComments) {
    List<FeedbackResponseCommentAttributes> frcList=responseComments.get(frc.feedbackResponseId);
    if (frcList == null) {
      frcList=new ArrayList<FeedbackResponseCommentAttributes>();
      frcList.add(frc);
      responseComments.put(frc.feedbackResponseId,frcList);
    }
 else {
      frcList.add(frc);
    }
  }
  for (  List<FeedbackResponseCommentAttributes> responseCommentList : responseComments.values()) {
    Collections.sort(responseCommentList,new ResponseCommentCreationDateComparator());
  }
  FeedbackSessionResultsBundle results=new FeedbackSessionResultsBundle(session,responses,relevantQuestions,emailNameTable,emailTeamNameTable,visibilityTable,responseStatus,responseComments,isComplete);
  return results;
}",0.9703198983716363
62877,"@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  String feedbackSessionName=getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);
  Assumption.assertNotNull(courseId);
  Assumption.assertNotNull(feedbackSessionName);
  statusToAdmin=""String_Node_Str"" + ""String_Node_Str"" + feedbackSessionName + ""String_Node_Str""+ ""String_Node_Str""+ courseId;
  InstructorAttributes instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  FeedbackSessionAttributes session=logic.getFeedbackSession(feedbackSessionName,courseId);
  boolean isCreatorOnly=true;
  new GateKeeper().verifyAccessible(instructor,session,!isCreatorOnly);
  InstructorFeedbackResultsPageData data=new InstructorFeedbackResultsPageData(account);
  data.selectedSection=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_GROUPBYSECTION);
  if (data.selectedSection == null) {
    data.selectedSection=ALL_SECTION_OPTION;
  }
  data.instructor=instructor;
  data.showStats=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_SHOWSTATS);
  data.groupByTeam=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_GROUPBYTEAM);
  data.sortType=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_SORTTYPE);
  if (data.sortType == null) {
    data.showStats=new String(""String_Node_Str"");
    data.sortType=new String(""String_Node_Str"");
  }
  data.sections=logic.getSectionNamesForCourse(courseId);
  if (data.selectedSection.equals(ALL_SECTION_OPTION)) {
    data.bundle=logic.getFeedbackSessionResultsForInstructorWithinRange(feedbackSessionName,courseId,data.instructor.email,500);
  }
 else   if (data.sortType.equals(""String_Node_Str"")) {
    data.bundle=logic.getFeedbackSessionResultsForInstructorInSection(feedbackSessionName,courseId,data.instructor.email,data.selectedSection);
  }
 else   if (data.sortType.equals(""String_Node_Str"") || data.sortType.equals(""String_Node_Str"")) {
    data.bundle=logic.getFeedbackSessionResultsForInstructorFromSection(feedbackSessionName,courseId,data.instructor.email,data.selectedSection);
  }
 else   if (data.sortType.equals(""String_Node_Str"") || data.sortType.equals(""String_Node_Str"")) {
    data.bundle=logic.getFeedbackSessionResultsForInstructorToSection(feedbackSessionName,courseId,data.instructor.email,data.selectedSection);
  }
  if (data.bundle == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + feedbackSessionName + ""String_Node_Str""+ courseId+ ""String_Node_Str"");
  }
  Iterator<FeedbackResponseAttributes> iterResponse=data.bundle.responses.iterator();
  while (iterResponse.hasNext()) {
    FeedbackResponseAttributes response=iterResponse.next();
    if ((!data.instructor.isAllowedForPrivilege(response.giverSection,response.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_VIEW_SESSION_IN_SECTIONS)) || !(data.instructor.isAllowedForPrivilege(response.recipientSection,response.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_VIEW_SESSION_IN_SECTIONS))) {
      data.bundle.responseComments.remove(response.getId());
      iterResponse.remove();
    }
  }
switch (data.sortType) {
case ""String_Node_Str"":
    return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_QUESTION,data);
case ""String_Node_Str"":
  return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_RECIPIENT_GIVER_QUESTION,data);
case ""String_Node_Str"":
return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_GIVER_RECIPIENT_QUESTION,data);
case ""String_Node_Str"":
return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_RECIPIENT_QUESTION_GIVER,data);
case ""String_Node_Str"":
return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_GIVER_QUESTION_RECIPIENT,data);
default :
data.sortType=""String_Node_Str"";
return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_RECIPIENT_GIVER_QUESTION,data);
}
}","@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  String feedbackSessionName=getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);
  Assumption.assertNotNull(courseId);
  Assumption.assertNotNull(feedbackSessionName);
  statusToAdmin=""String_Node_Str"" + ""String_Node_Str"" + feedbackSessionName + ""String_Node_Str""+ ""String_Node_Str""+ courseId;
  InstructorAttributes instructor=logic.getInstructorForGoogleId(courseId,account.googleId);
  FeedbackSessionAttributes session=logic.getFeedbackSession(feedbackSessionName,courseId);
  boolean isCreatorOnly=true;
  new GateKeeper().verifyAccessible(instructor,session,!isCreatorOnly);
  InstructorFeedbackResultsPageData data=new InstructorFeedbackResultsPageData(account);
  data.selectedSection=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_GROUPBYSECTION);
  if (data.selectedSection == null) {
    data.selectedSection=ALL_SECTION_OPTION;
  }
  data.instructor=instructor;
  data.showStats=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_SHOWSTATS);
  data.groupByTeam=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_GROUPBYTEAM);
  data.sortType=getRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_SORTTYPE);
  if (data.sortType == null) {
    data.showStats=new String(""String_Node_Str"");
    data.sortType=new String(""String_Node_Str"");
  }
  data.sections=logic.getSectionNamesForCourse(courseId);
  if (data.selectedSection.equals(ALL_SECTION_OPTION)) {
    data.bundle=logic.getFeedbackSessionResultsForInstructorWithinRange(feedbackSessionName,courseId,data.instructor.email,5);
  }
 else   if (data.sortType.equals(""String_Node_Str"")) {
    data.bundle=logic.getFeedbackSessionResultsForInstructorInSection(feedbackSessionName,courseId,data.instructor.email,data.selectedSection);
  }
 else   if (data.sortType.equals(""String_Node_Str"") || data.sortType.equals(""String_Node_Str"")) {
    data.bundle=logic.getFeedbackSessionResultsForInstructorFromSection(feedbackSessionName,courseId,data.instructor.email,data.selectedSection);
  }
 else   if (data.sortType.equals(""String_Node_Str"") || data.sortType.equals(""String_Node_Str"")) {
    data.bundle=logic.getFeedbackSessionResultsForInstructorToSection(feedbackSessionName,courseId,data.instructor.email,data.selectedSection);
  }
  if (data.bundle == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + feedbackSessionName + ""String_Node_Str""+ courseId+ ""String_Node_Str"");
  }
  Iterator<FeedbackResponseAttributes> iterResponse=data.bundle.responses.iterator();
  while (iterResponse.hasNext()) {
    FeedbackResponseAttributes response=iterResponse.next();
    if ((!data.instructor.isAllowedForPrivilege(response.giverSection,response.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_VIEW_SESSION_IN_SECTIONS)) || !(data.instructor.isAllowedForPrivilege(response.recipientSection,response.feedbackSessionName,Const.ParamsNames.INSTRUCTOR_PERMISSION_VIEW_SESSION_IN_SECTIONS))) {
      data.bundle.responseComments.remove(response.getId());
      iterResponse.remove();
    }
  }
switch (data.sortType) {
case ""String_Node_Str"":
    return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_QUESTION,data);
case ""String_Node_Str"":
  return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_RECIPIENT_GIVER_QUESTION,data);
case ""String_Node_Str"":
return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_GIVER_RECIPIENT_QUESTION,data);
case ""String_Node_Str"":
return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_RECIPIENT_QUESTION_GIVER,data);
case ""String_Node_Str"":
return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_GIVER_QUESTION_RECIPIENT,data);
default :
data.sortType=""String_Node_Str"";
return createShowPageResult(Const.ViewURIs.INSTRUCTOR_FEEDBACK_RESULTS_BY_RECIPIENT_GIVER_QUESTION,data);
}
}",0.9997485541865728
62878,"@Override public String getQuestionResultStatisticsHtml(List<FeedbackResponseAttributes> responses,FeedbackSessionResultsBundle bundle){
  if (responses.size() == 0) {
    return ""String_Node_Str"";
  }
  String html=""String_Node_Str"";
  String fragments=""String_Node_Str"";
  List<String> options;
  List<Integer> optionPoints=new ArrayList<Integer>();
  Map<String,Integer[]> optionTotalCount=new LinkedHashMap<String,Integer[]>();
  if (distributeToRecipients) {
    for (    FeedbackResponseAttributes response : responses) {
      FeedbackConstantSumResponseDetails frd=(FeedbackConstantSumResponseDetails)response.getResponseDetails();
      String recipientEmail=response.recipientEmail;
      String recipientName=bundle.getNameForEmail(recipientEmail);
      Integer[] pointCount=optionTotalCount.get(recipientName);
      if (pointCount == null) {
        pointCount=new Integer[]{0,0};
      }
      pointCount[0]+=frd.getAnswerList().get(0);
      pointCount[1]+=1;
      optionTotalCount.put(recipientName,pointCount);
    }
  }
 else {
    options=constSumOptions;
    for (int i=0; i < options.size(); i++) {
      optionPoints.add(0);
    }
    for (    FeedbackResponseAttributes response : responses) {
      FeedbackConstantSumResponseDetails frd=(FeedbackConstantSumResponseDetails)response.getResponseDetails();
      for (int i=0; i < frd.getAnswerList().size(); i++) {
        optionPoints.set(i,optionPoints.get(i) + frd.getAnswerList().get(i));
      }
    }
    for (int i=0; i < options.size(); i++) {
      optionTotalCount.put(options.get(i),new Integer[]{optionPoints.get(i),responses.size()});
    }
  }
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  for (  Entry<String,Integer[]> entry : optionTotalCount.entrySet()) {
    double average=entry.getValue()[0] / entry.getValue()[1];
    fragments+=FeedbackQuestionFormTemplates.populateTemplate(FeedbackQuestionFormTemplates.CONSTSUM_RESULT_STATS_OPTIONFRAGMENT,""String_Node_Str"",entry.getKey(),""String_Node_Str"",df.format(average));
  }
  html=FeedbackQuestionFormTemplates.populateTemplate(FeedbackQuestionFormTemplates.CONSTSUM_RESULT_STATS,""String_Node_Str"",distributeToRecipients ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",fragments);
  return html;
}","@Override public String getQuestionResultStatisticsHtml(List<FeedbackResponseAttributes> responses,FeedbackQuestionAttributes question,FeedbackSessionResultsBundle bundle){
  if (responses.size() == 0) {
    return ""String_Node_Str"";
  }
  String html=""String_Node_Str"";
  String fragments=""String_Node_Str"";
  List<String> options;
  List<Integer> optionPoints=new ArrayList<Integer>();
  Map<String,Integer[]> optionTotalCount=new LinkedHashMap<String,Integer[]>();
  if (distributeToRecipients) {
    for (    FeedbackResponseAttributes response : responses) {
      FeedbackConstantSumResponseDetails frd=(FeedbackConstantSumResponseDetails)response.getResponseDetails();
      String recipientEmail=response.recipientEmail;
      String recipientName=bundle.getNameForEmail(recipientEmail);
      Integer[] pointCount=optionTotalCount.get(recipientName);
      if (pointCount == null) {
        pointCount=new Integer[]{0,0};
      }
      pointCount[0]+=frd.getAnswerList().get(0);
      pointCount[1]+=1;
      optionTotalCount.put(recipientName,pointCount);
    }
  }
 else {
    options=constSumOptions;
    for (int i=0; i < options.size(); i++) {
      optionPoints.add(0);
    }
    for (    FeedbackResponseAttributes response : responses) {
      FeedbackConstantSumResponseDetails frd=(FeedbackConstantSumResponseDetails)response.getResponseDetails();
      for (int i=0; i < frd.getAnswerList().size(); i++) {
        optionPoints.set(i,optionPoints.get(i) + frd.getAnswerList().get(i));
      }
    }
    for (int i=0; i < options.size(); i++) {
      optionTotalCount.put(options.get(i),new Integer[]{optionPoints.get(i),responses.size()});
    }
  }
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  for (  Entry<String,Integer[]> entry : optionTotalCount.entrySet()) {
    double average=entry.getValue()[0] / entry.getValue()[1];
    fragments+=FeedbackQuestionFormTemplates.populateTemplate(FeedbackQuestionFormTemplates.CONSTSUM_RESULT_STATS_OPTIONFRAGMENT,""String_Node_Str"",entry.getKey(),""String_Node_Str"",df.format(average));
  }
  html=FeedbackQuestionFormTemplates.populateTemplate(FeedbackQuestionFormTemplates.CONSTSUM_RESULT_STATS,""String_Node_Str"",distributeToRecipients ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",fragments);
  return html;
}",0.9921052631578948
62879,"@Override public String getQuestionResultStatisticsHtml(List<FeedbackResponseAttributes> responses,FeedbackSessionResultsBundle bundle){
  if (responses.size() == 0) {
    return ""String_Node_Str"";
  }
  String html=""String_Node_Str"";
  String fragments=""String_Node_Str"";
  Map<String,Integer> answerFrequency=new LinkedHashMap<String,Integer>();
  for (  String option : msqChoices) {
    answerFrequency.put(option,0);
  }
  int numChoicesSelected=0;
  for (  FeedbackResponseAttributes response : responses) {
    List<String> answerStrings=((FeedbackMsqResponseDetails)response.getResponseDetails()).getAnswerStrings();
    for (    String answerString : answerStrings) {
      numChoicesSelected++;
      if (!answerFrequency.containsKey(answerString)) {
        answerFrequency.put(answerString,1);
      }
 else {
        answerFrequency.put(answerString,answerFrequency.get(answerString) + 1);
      }
    }
  }
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  for (  Entry<String,Integer> entry : answerFrequency.entrySet()) {
    fragments+=FeedbackQuestionFormTemplates.populateTemplate(FeedbackQuestionFormTemplates.MCQ_RESULT_STATS_OPTIONFRAGMENT,""String_Node_Str"",entry.getKey(),""String_Node_Str"",entry.getValue().toString(),""String_Node_Str"",df.format(100 * (double)entry.getValue() / numChoicesSelected));
  }
  html=FeedbackQuestionFormTemplates.populateTemplate(FeedbackQuestionFormTemplates.MCQ_RESULT_STATS,""String_Node_Str"",fragments);
  return html;
}","@Override public String getQuestionResultStatisticsHtml(List<FeedbackResponseAttributes> responses,FeedbackQuestionAttributes question,FeedbackSessionResultsBundle bundle){
  if (responses.size() == 0) {
    return ""String_Node_Str"";
  }
  String html=""String_Node_Str"";
  String fragments=""String_Node_Str"";
  Map<String,Integer> answerFrequency=new LinkedHashMap<String,Integer>();
  for (  String option : msqChoices) {
    answerFrequency.put(option,0);
  }
  int numChoicesSelected=0;
  for (  FeedbackResponseAttributes response : responses) {
    List<String> answerStrings=((FeedbackMsqResponseDetails)response.getResponseDetails()).getAnswerStrings();
    for (    String answerString : answerStrings) {
      numChoicesSelected++;
      if (!answerFrequency.containsKey(answerString)) {
        answerFrequency.put(answerString,1);
      }
 else {
        answerFrequency.put(answerString,answerFrequency.get(answerString) + 1);
      }
    }
  }
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  for (  Entry<String,Integer> entry : answerFrequency.entrySet()) {
    fragments+=FeedbackQuestionFormTemplates.populateTemplate(FeedbackQuestionFormTemplates.MCQ_RESULT_STATS_OPTIONFRAGMENT,""String_Node_Str"",entry.getKey(),""String_Node_Str"",entry.getValue().toString(),""String_Node_Str"",df.format(100 * (double)entry.getValue() / numChoicesSelected));
  }
  html=FeedbackQuestionFormTemplates.populateTemplate(FeedbackQuestionFormTemplates.MCQ_RESULT_STATS,""String_Node_Str"",fragments);
  return html;
}",0.9880159786950732
62880,"@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  String feedbackSessionName=getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);
  InstructorAttributes instructorDetailForCourse=logic.getInstructorForGoogleId(courseId,account.googleId);
  new GateKeeper().verifyAccessible(instructorDetailForCourse,logic.getFeedbackSession(feedbackSessionName,courseId),true);
  FeedbackQuestionAttributes feedbackQuestion=extractFeedbackQuestionData(requestParameters,instructorDetailForCourse.email);
  List<String> questionDetailsErrors=feedbackQuestion.getQuestionDetails().validateQuestionDetails();
  if (!questionDetailsErrors.isEmpty()) {
    statusToUser.addAll(questionDetailsErrors);
    isError=true;
  }
 else {
    try {
      logic.createFeedbackQuestion(feedbackQuestion);
      statusToUser.add(Const.StatusMessages.FEEDBACK_QUESTION_ADDED);
      statusToAdmin=""String_Node_Str"" + feedbackQuestion.feedbackSessionName + ""String_Node_Str""+ feedbackQuestion.courseId+ ""String_Node_Str""+ ""String_Node_Str""+ feedbackQuestion.getQuestionDetails().getQuestionTypeDisplayName()+ ""String_Node_Str""+ feedbackQuestion.getQuestionDetails().questionText;
    }
 catch (    InvalidParametersException e) {
      statusToUser.add(e.getMessage());
      statusToAdmin=e.getMessage();
      isError=true;
    }
  }
  return createRedirectResult(new PageData(account).getInstructorFeedbackSessionEditLink(courseId,feedbackSessionName));
}","@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  String feedbackSessionName=getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);
  InstructorAttributes instructorDetailForCourse=logic.getInstructorForGoogleId(courseId,account.googleId);
  new GateKeeper().verifyAccessible(instructorDetailForCourse,logic.getFeedbackSession(feedbackSessionName,courseId),false,Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION);
  FeedbackQuestionAttributes feedbackQuestion=extractFeedbackQuestionData(requestParameters,instructorDetailForCourse.email);
  List<String> questionDetailsErrors=feedbackQuestion.getQuestionDetails().validateQuestionDetails();
  if (!questionDetailsErrors.isEmpty()) {
    statusToUser.addAll(questionDetailsErrors);
    isError=true;
  }
 else {
    try {
      logic.createFeedbackQuestion(feedbackQuestion);
      statusToUser.add(Const.StatusMessages.FEEDBACK_QUESTION_ADDED);
      statusToAdmin=""String_Node_Str"" + feedbackQuestion.feedbackSessionName + ""String_Node_Str""+ feedbackQuestion.courseId+ ""String_Node_Str""+ ""String_Node_Str""+ feedbackQuestion.getQuestionDetails().getQuestionTypeDisplayName()+ ""String_Node_Str""+ feedbackQuestion.getQuestionDetails().questionText;
    }
 catch (    InvalidParametersException e) {
      statusToUser.add(e.getMessage());
      statusToAdmin=e.getMessage();
      isError=true;
    }
  }
  return createRedirectResult(new PageData(account).getInstructorFeedbackSessionEditLink(courseId,feedbackSessionName));
}",0.9795265515035187
62881,"@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  String feedbackSessionName=getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);
  Assumption.assertNotNull(courseId);
  Assumption.assertNotNull(feedbackSessionName);
  new GateKeeper().verifyAccessible(logic.getInstructorForGoogleId(courseId,account.googleId),logic.getFeedbackSession(feedbackSessionName,courseId),true);
  String editType=getRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_EDITTYPE);
  Assumption.assertNotNull(""String_Node_Str"",editType);
  FeedbackQuestionAttributes updatedQuestion=extractFeedbackQuestionData(requestParameters);
  try {
    if (editType.equals(""String_Node_Str"")) {
      editQuestion(updatedQuestion);
    }
 else     if (editType.equals(""String_Node_Str"")) {
      deleteQuestion(updatedQuestion);
    }
 else {
      Assumption.fail(""String_Node_Str"");
    }
  }
 catch (  InvalidParametersException e) {
    setStatusForException(e);
  }
  return createRedirectResult(new PageData(account).getInstructorFeedbackSessionEditLink(courseId,feedbackSessionName));
}","@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  String feedbackSessionName=getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);
  Assumption.assertNotNull(courseId);
  Assumption.assertNotNull(feedbackSessionName);
  new GateKeeper().verifyAccessible(logic.getInstructorForGoogleId(courseId,account.googleId),logic.getFeedbackSession(feedbackSessionName,courseId),false,Const.ParamsNames.INSTRUCTOR_PERMISSION_MODIFY_SESSION);
  String editType=getRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_EDITTYPE);
  Assumption.assertNotNull(""String_Node_Str"",editType);
  FeedbackQuestionAttributes updatedQuestion=extractFeedbackQuestionData(requestParameters);
  try {
    if (editType.equals(""String_Node_Str"")) {
      editQuestion(updatedQuestion);
    }
 else     if (editType.equals(""String_Node_Str"")) {
      deleteQuestion(updatedQuestion);
    }
 else {
      Assumption.fail(""String_Node_Str"");
    }
  }
 catch (  InvalidParametersException e) {
    setStatusForException(e);
  }
  return createRedirectResult(new PageData(account).getInstructorFeedbackSessionEditLink(courseId,feedbackSessionName));
}",0.9733110925771477
62882,"@Test public void testAccessControl() throws Exception {
  FeedbackSessionAttributes fs=dataBundle.feedbackSessions.get(""String_Node_Str"");
  String[] submissionParams=createParamsForTypicalFeedbackQuestion(fs.courseId,fs.feedbackSessionName);
  verifyOnlyInstructorsOfTheSameCourseCanAccess(submissionParams);
}","@Test public void testAccessControl() throws Exception {
  FeedbackSessionAttributes fs=dataBundle.feedbackSessions.get(""String_Node_Str"");
  String[] submissionParams=createParamsForTypicalFeedbackQuestion(fs.courseId,fs.feedbackSessionName);
  verifyUnaccessibleWithoutModifySessionPrivilege(submissionParams);
  verifyOnlyInstructorsOfTheSameCourseCanAccess(submissionParams);
}",0.9004329004329005
62883,"private EntityAttributes retrieveEntity(String type,String[] id) throws ParseException {
  System.out.println(type);
  Logic logic=new Logic();
switch (type) {
case ""String_Node_Str"":
    AccountAttributes account=logic.getAccount(id[0].trim());
  return account;
case ""String_Node_Str"":
CommentsDb commentDb=new CommentsDb();
CommentAttributes comment=commentDb.getComment(id[0].trim(),id[1].trim(),id[2].trim(),new Text(id[3].trim()),new SimpleDateFormat(""String_Node_Str"").parse(id[4].trim()));
return comment;
case ""String_Node_Str"":
CourseAttributes course=logic.getCourse(id[0].trim());
return course;
case ""String_Node_Str"":
EvaluationAttributes evaluation=logic.getEvaluation(id[0].trim(),id[1].trim());
return evaluation;
case ""String_Node_Str"":
FeedbackQuestionsDb feedbackQuestionDb=new FeedbackQuestionsDb();
FeedbackQuestionAttributes feedbackQuestion=feedbackQuestionDb.getFeedbackQuestion(id[0].trim(),id[1].trim(),Integer.parseInt(id[2].trim()));
return feedbackQuestion;
case ""String_Node_Str"":
FeedbackResponsesDb feedbackResponsesDb=new FeedbackResponsesDb();
FeedbackResponseAttributes feedbackResponse=feedbackResponsesDb.getFeedbackResponse(id[0].trim(),id[1].split(""String_Node_Str"")[0],id[1].split(""String_Node_Str"")[1]);
return feedbackResponse;
case ""String_Node_Str"":
System.out.println(""String_Node_Str"");
FeedbackResponseCommentsDb feedbackResponseCommentsDb=new FeedbackResponseCommentsDb();
FeedbackResponseCommentAttributes feedbackResponseComment=feedbackResponseCommentsDb.getFeedbackResponseComment(id[0].trim(),id[1].trim(),new SimpleDateFormat(""String_Node_Str"").parse(id[2].trim()));
return feedbackResponseComment;
case ""String_Node_Str"":
FeedbackSessionAttributes feedbackSession=logic.getFeedbackSession(id[0].trim(),id[1].trim());
return feedbackSession;
case ""String_Node_Str"":
InstructorAttributes instructor=logic.getInstructorForEmail(id[1].trim(),id[0].trim());
return instructor;
case ""String_Node_Str"":
StudentAttributes student=logic.getStudentForEmail(id[0].trim(),id[1].trim());
return student;
case ""String_Node_Str"":
SubmissionsDb submissionsDb=new SubmissionsDb();
SubmissionAttributes submission=submissionsDb.getSubmission(id[0].trim(),id[1].trim(),id[2].split(""String_Node_Str"")[1].trim(),id[3].split(""String_Node_Str"")[1].trim());
return submission;
}
return null;
}","private EntityAttributes retrieveEntity(String type,String[] id) throws ParseException {
  System.out.println(type);
  Logic logic=new Logic();
switch (type) {
case ""String_Node_Str"":
    AccountAttributes account=logic.getAccount(id[0].trim());
  return account;
case ""String_Node_Str"":
CommentsDb commentDb=new CommentsDb();
CommentAttributes comment=commentDb.getComment(id[0].trim(),id[1].trim(),id[2].trim(),new Text(id[3].trim()),new SimpleDateFormat(""String_Node_Str"").parse(id[4].trim()));
return comment;
case ""String_Node_Str"":
CourseAttributes course=logic.getCourse(id[0].trim());
return course;
case ""String_Node_Str"":
EvaluationAttributes evaluation=logic.getEvaluation(id[0].trim(),id[1].trim());
return evaluation;
case ""String_Node_Str"":
FeedbackQuestionsDb feedbackQuestionDb=new FeedbackQuestionsDb();
FeedbackQuestionAttributes feedbackQuestion=feedbackQuestionDb.getFeedbackQuestion(id[0].trim(),id[1].trim(),Integer.parseInt(id[2].trim()));
return feedbackQuestion;
case ""String_Node_Str"":
FeedbackResponsesDb feedbackResponsesDb=new FeedbackResponsesDb();
FeedbackResponseAttributes feedbackResponse=feedbackResponsesDb.getFeedbackResponse(id[0].trim(),id[1].split(""String_Node_Str"")[0],id[1].split(""String_Node_Str"")[1]);
return feedbackResponse;
case ""String_Node_Str"":
FeedbackResponseCommentsDb feedbackResponseCommentsDb=new FeedbackResponseCommentsDb();
FeedbackResponseCommentAttributes feedbackResponseComment=feedbackResponseCommentsDb.getFeedbackResponseComment(id[0].trim(),id[1].trim(),new SimpleDateFormat(""String_Node_Str"").parse(id[2].trim()));
return feedbackResponseComment;
case ""String_Node_Str"":
FeedbackSessionAttributes feedbackSession=logic.getFeedbackSession(id[0].trim(),id[1].trim());
return feedbackSession;
case ""String_Node_Str"":
InstructorAttributes instructor=logic.getInstructorForEmail(id[1].trim(),id[0].trim());
return instructor;
case ""String_Node_Str"":
StudentAttributes student=logic.getStudentForEmail(id[0].trim(),id[1].trim());
return student;
case ""String_Node_Str"":
SubmissionsDb submissionsDb=new SubmissionsDb();
SubmissionAttributes submission=submissionsDb.getSubmission(id[0].trim(),id[1].trim(),id[2].split(""String_Node_Str"")[1].trim(),id[3].split(""String_Node_Str"")[1].trim());
return submission;
}
return null;
}",0.9915419648666232
62884,"@Override public ActionResult execute(){
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  Assumption.assertNotNull(courseId);
  new GateKeeper().verifyAccessible(logic.getInstructorForGoogleId(courseId,account.googleId),logic.getCourse(courseId));
  InstructorCourseEnrollPageData pageData=new InstructorCourseEnrollPageData(account);
  pageData.courseId=courseId;
  statusToAdmin=""String_Node_Str"" + ""String_Node_Str"" + courseId + ""String_Node_Str"";
  ShowPageResult response=createShowPageResult(Const.ViewURIs.INSTRUCTOR_COURSE_ENROLL,pageData);
  return response;
}","@Override public ActionResult execute(){
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  String studentsInfo=getRequestParamValue(Const.ParamsNames.STUDENTS_ENROLLMENT_INFO);
  Assumption.assertNotNull(courseId);
  new GateKeeper().verifyAccessible(logic.getInstructorForGoogleId(courseId,account.googleId),logic.getCourse(courseId));
  InstructorCourseEnrollPageData pageData=new InstructorCourseEnrollPageData(account);
  pageData.courseId=courseId;
  pageData.enrollStudents=studentsInfo;
  statusToAdmin=""String_Node_Str"" + ""String_Node_Str"" + courseId + ""String_Node_Str"";
  ShowPageResult response=createShowPageResult(Const.ViewURIs.INSTRUCTOR_COURSE_ENROLL,pageData);
  return response;
}",0.902290076335878
62885,"@Override public ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  Assumption.assertNotNull(courseId);
  String studentsInfo=getRequestParamValue(Const.ParamsNames.STUDENTS_ENROLLMENT_INFO);
  Assumption.assertPostParamNotNull(Const.ParamsNames.STUDENTS_ENROLLMENT_INFO,studentsInfo);
  new GateKeeper().verifyAccessible(logic.getInstructorForGoogleId(courseId,account.googleId),logic.getCourse(courseId));
  try {
    InstructorCourseEnrollResultPageData pageData=new InstructorCourseEnrollResultPageData(account);
    pageData.courseId=courseId;
    pageData.students=enrollAndProcessResultForDisplay(studentsInfo,courseId);
    pageData.hasSection=hasSections(pageData.students);
    statusToAdmin=""String_Node_Str"" + courseId + ""String_Node_Str""+ (studentsInfo).replace(""String_Node_Str"",""String_Node_Str"");
    return createShowPageResult(Const.ViewURIs.INSTRUCTOR_COURSE_ENROLL_RESULT,pageData);
  }
 catch (  EnrollException|InvalidParametersException e) {
    setStatusForException(e);
    statusToAdmin+=""String_Node_Str"" + (studentsInfo).replace(""String_Node_Str"",""String_Node_Str"");
    InstructorCourseEnrollPageData pageData=new InstructorCourseEnrollPageData(account);
    pageData.courseId=courseId;
    pageData.enrollStudents=studentsInfo;
    return createShowPageResult(Const.ViewURIs.INSTRUCTOR_COURSE_ENROLL,pageData);
  }
}","@Override public ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  Assumption.assertNotNull(courseId);
  String studentsInfo=getRequestParamValue(Const.ParamsNames.STUDENTS_ENROLLMENT_INFO);
  Assumption.assertPostParamNotNull(Const.ParamsNames.STUDENTS_ENROLLMENT_INFO,studentsInfo);
  new GateKeeper().verifyAccessible(logic.getInstructorForGoogleId(courseId,account.googleId),logic.getCourse(courseId));
  try {
    InstructorCourseEnrollResultPageData pageData=new InstructorCourseEnrollResultPageData(account);
    pageData.courseId=courseId;
    pageData.students=enrollAndProcessResultForDisplay(studentsInfo,courseId);
    pageData.hasSection=hasSections(pageData.students);
    pageData.enrollStudents=studentsInfo;
    statusToAdmin=""String_Node_Str"" + courseId + ""String_Node_Str""+ (studentsInfo).replace(""String_Node_Str"",""String_Node_Str"");
    return createShowPageResult(Const.ViewURIs.INSTRUCTOR_COURSE_ENROLL_RESULT,pageData);
  }
 catch (  EnrollException|InvalidParametersException e) {
    setStatusForException(e);
    statusToAdmin+=""String_Node_Str"" + (studentsInfo).replace(""String_Node_Str"",""String_Node_Str"");
    InstructorCourseEnrollPageData pageData=new InstructorCourseEnrollPageData(account);
    pageData.courseId=courseId;
    pageData.enrollStudents=studentsInfo;
    return createShowPageResult(Const.ViewURIs.INSTRUCTOR_COURSE_ENROLL,pageData);
  }
}",0.985487214927436
62886,"private boolean hasSections(List<StudentAttributes>[] students){
  for (  List<StudentAttributes> studentList : students) {
    for (    StudentAttributes student : studentList) {
      if (!student.section.equals(""String_Node_Str"")) {
        return true;
      }
    }
  }
  return false;
}","private boolean hasSections(List<StudentAttributes>[] students){
  for (  List<StudentAttributes> studentList : students) {
    for (    StudentAttributes student : studentList) {
      if (!student.section.equals(Const.DEFAULT_SECTION)) {
        return true;
      }
    }
  }
  return false;
}",0.9421768707482994
62887,"@Override public void sanitizeForSaving(){
  this.googleId=Sanitizer.sanitizeGoogleId(this.googleId);
  this.email=Sanitizer.sanitizeEmail(this.email);
  this.course=Sanitizer.sanitizeTitle(this.course);
  this.name=Sanitizer.sanitizeName(this.name);
  this.team=Sanitizer.sanitizeTitle(this.team);
  this.comments=Sanitizer.sanitizeTextField(this.comments);
  this.googleId=Sanitizer.sanitizeForHtml(this.googleId);
  this.email=Sanitizer.sanitizeForHtml(this.email);
  this.course=Sanitizer.sanitizeForHtml(this.course);
  this.name=Sanitizer.sanitizeForHtml(this.name);
  this.team=Sanitizer.sanitizeForHtml(this.team);
  this.comments=Sanitizer.sanitizeForHtml(this.comments);
}","@Override public void sanitizeForSaving(){
  this.googleId=Sanitizer.sanitizeGoogleId(this.googleId);
  this.email=Sanitizer.sanitizeEmail(this.email);
  this.course=Sanitizer.sanitizeTitle(this.course);
  this.name=Sanitizer.sanitizeName(this.name);
  this.team=Sanitizer.sanitizeTitle(this.team);
  this.section=Sanitizer.sanitizeTitle(this.section);
  this.comments=Sanitizer.sanitizeTextField(this.comments);
  this.googleId=Sanitizer.sanitizeForHtml(this.googleId);
  this.email=Sanitizer.sanitizeForHtml(this.email);
  this.course=Sanitizer.sanitizeForHtml(this.course);
  this.name=Sanitizer.sanitizeForHtml(this.name);
  this.team=Sanitizer.sanitizeForHtml(this.team);
  this.section=Sanitizer.sanitizeForHtml(this.section);
  this.comments=Sanitizer.sanitizeForHtml(this.comments);
}",0.914518317503392
62888,"public boolean isEnrollInfoSameAs(StudentAttributes otherStudent){
  return (otherStudent != null) && otherStudent.email.equals(this.email) && otherStudent.course.equals(this.course)&& otherStudent.name.equals(this.name)&& otherStudent.comments.equals(this.comments)&& otherStudent.team.equals(this.team);
}","public boolean isEnrollInfoSameAs(StudentAttributes otherStudent){
  return (otherStudent != null) && otherStudent.email.equals(this.email) && otherStudent.course.equals(this.course)&& otherStudent.name.equals(this.name)&& otherStudent.comments.equals(this.comments)&& otherStudent.team.equals(this.team)&& otherStudent.section.equals(this.section);
}",0.933130699088146
62889,"private static boolean isToolTip(Node currentNode){
  if (!currentNode.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
  NamedNodeMap attributes=currentNode.getAttributes();
  if (attributes == null) {
    return false;
  }
  for (int i=0; i < attributes.getLength(); i++) {
    Node attribute=attributes.item(i);
    if (attribute.getNodeName().equalsIgnoreCase(""String_Node_Str"") && attribute.getNodeValue().equalsIgnoreCase(""String_Node_Str"")) {
      return true;
    }
  }
  return false;
}","private static boolean isToolTip(Node currentNode){
  if (!currentNode.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
  NamedNodeMap attributes=currentNode.getAttributes();
  if (attributes == null) {
    return false;
  }
  for (int i=0; i < attributes.getLength(); i++) {
    Node attribute=attributes.item(i);
    if (attribute.getNodeName().equalsIgnoreCase(""String_Node_Str"") && attribute.getNodeValue().contains(""String_Node_Str"")) {
      return true;
    }
  }
  return false;
}",0.9768339768339768
62890,"private static boolean isToolTip(Node currentNode){
  if (!currentNode.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
  NamedNodeMap attributes=currentNode.getAttributes();
  if (attributes == null) {
    return false;
  }
  for (int i=0; i < attributes.getLength(); i++) {
    Node attribute=attributes.item(i);
    if (attribute.getNodeName().equalsIgnoreCase(""String_Node_Str"") && attribute.getNodeValue().equalsIgnoreCase(""String_Node_Str"")) {
      return true;
    }
  }
  return false;
}","private static boolean isToolTip(Node currentNode){
  if (!currentNode.getNodeName().equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
  NamedNodeMap attributes=currentNode.getAttributes();
  if (attributes == null) {
    return false;
  }
  for (int i=0; i < attributes.getLength(); i++) {
    Node attribute=attributes.item(i);
    if (attribute.getNodeName().equalsIgnoreCase(""String_Node_Str"") && attribute.getNodeValue().contains(""String_Node_Str"")) {
      return true;
    }
  }
  return false;
}",0.9768339768339768
62891,"private List<String> getInvalidityInfoInEnrollLines(String lines,String courseId) throws EnrollException {
  List<String> invalidityInfo=new ArrayList<String>();
  String[] linesArray=lines.split(Const.EOL);
  ArrayList<String> studentEmailList=new ArrayList<String>();
  StudentAttributesFactory saf=new StudentAttributesFactory(linesArray[0]);
  int startLine;
  if (saf.hasHeader()) {
    startLine=1;
    studentEmailList.add(new String());
  }
 else {
    startLine=0;
  }
  for (int i=startLine; i < linesArray.length; i++) {
    String line=linesArray[i];
    try {
      if (StringHelper.isWhiteSpace(line)) {
        continue;
      }
      StudentAttributes student=saf.makeStudent(line,courseId);
      if (!student.isValid()) {
        String info=StringHelper.toString(student.getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
        invalidityInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,line,info));
      }
      if (isStudentEmailDuplicated(student.email,studentEmailList)) {
        String info=StringHelper.toString(getInvalidityInfoInDuplicatedEmail(student.email,studentEmailList,linesArray),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
        invalidityInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,line,info));
      }
    }
 catch (    EnrollException e) {
      String info=String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,line,e.getMessage());
      invalidityInfo.add(info);
    }
  }
  return invalidityInfo;
}","private List<String> getInvalidityInfoInEnrollLines(String lines,String courseId) throws EnrollException {
  List<String> invalidityInfo=new ArrayList<String>();
  String[] linesArray=lines.split(Const.EOL);
  ArrayList<String> studentEmailList=new ArrayList<String>();
  StudentAttributesFactory saf=new StudentAttributesFactory(linesArray[0]);
  int startLine;
  if (saf.hasHeader()) {
    startLine=1;
    studentEmailList.add(new String());
  }
 else {
    startLine=0;
  }
  for (int i=startLine; i < linesArray.length; i++) {
    String line=linesArray[i];
    try {
      if (StringHelper.isWhiteSpace(line)) {
        continue;
      }
      StudentAttributes student=saf.makeStudent(line,courseId);
      if (!student.isValid()) {
        String info=StringHelper.toString(student.getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
        invalidityInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,line,info));
      }
      if (isStudentEmailDuplicated(student.email,studentEmailList)) {
        String info=StringHelper.toString(getInvalidityInfoInDuplicatedEmail(student.email,studentEmailList,linesArray),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
        invalidityInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,line,info));
      }
      studentEmailList.add(student.email);
    }
 catch (    EnrollException e) {
      String info=String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,line,e.getMessage());
      invalidityInfo.add(info);
    }
  }
  return invalidityInfo;
}",0.986797666564323
62892,"@Test public void testEnrollLinesChecking() throws Exception {
  String info;
  String enrollLines;
  String courseId=""String_Node_Str"";
  coursesLogic.createCourse(courseId,""String_Node_Str"");
  List<String> invalidInfo;
  List<String> expectedInvalidInfo=new ArrayList<String>();
  ______TS(""String_Node_Str"");
  String invalidTeamName=StringHelper.generateStringOfLength(FieldValidator.TEAM_NAME_MAX_LENGTH + 1);
  String invalidStudentName=StringHelper.generateStringOfLength(FieldValidator.PERSON_NAME_MAX_LENGTH + 1);
  String lineWithInvalidTeamName=invalidTeamName + ""String_Node_Str"";
  String lineWithInvalidStudentName=""String_Node_Str"" + invalidStudentName + ""String_Node_Str"";
  String lineWithInvalidEmail=""String_Node_Str"" + ""String_Node_Str"";
  String lineWithInvalidStudentNameAndEmail=""String_Node_Str"" + invalidStudentName + ""String_Node_Str""+ ""String_Node_Str"";
  String lineWithInvalidTeamNameAndEmail=invalidTeamName + ""String_Node_Str"" + ""String_Node_Str"";
  String lineWithInvalidTeamNameAndStudentNameAndEmail=invalidTeamName + ""String_Node_Str"" + invalidStudentName+ ""String_Node_Str""+ ""String_Node_Str"";
  enrollLines=lineWithInvalidTeamName + Const.EOL + lineWithInvalidStudentName+ Const.EOL+ lineWithInvalidEmail+ Const.EOL+ lineWithInvalidStudentNameAndEmail+ Const.EOL+ lineWithInvalidTeamNameAndEmail+ Const.EOL+ lineWithInvalidTeamNameAndStudentNameAndEmail;
  invalidInfo=invokeGetInvalidityInfoInEnrollLines(enrollLines,courseId);
  StudentAttributesFactory saf=new StudentAttributesFactory();
  expectedInvalidInfo.clear();
  info=StringHelper.toString(saf.makeStudent(lineWithInvalidTeamName,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithInvalidTeamName,info));
  info=StringHelper.toString(saf.makeStudent(lineWithInvalidStudentName,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithInvalidStudentName,info));
  info=StringHelper.toString(saf.makeStudent(lineWithInvalidEmail,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithInvalidEmail,info));
  info=StringHelper.toString(saf.makeStudent(lineWithInvalidStudentNameAndEmail,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithInvalidStudentNameAndEmail,info));
  info=StringHelper.toString(saf.makeStudent(lineWithInvalidTeamNameAndEmail,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithInvalidTeamNameAndEmail,info));
  info=StringHelper.toString(saf.makeStudent(lineWithInvalidTeamNameAndStudentNameAndEmail,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithInvalidTeamNameAndStudentNameAndEmail,info));
  for (int i=0; i < invalidInfo.size(); i++) {
    assertEquals(expectedInvalidInfo.get(i),invalidInfo.get(i));
  }
  ______TS(""String_Node_Str"");
  String lineWithNoEmailInput=""String_Node_Str"";
  String lineWithExtraParameters=""String_Node_Str"" + ""String_Node_Str"";
  enrollLines=lineWithNoEmailInput + Const.EOL + lineWithExtraParameters;
  invalidInfo=invokeGetInvalidityInfoInEnrollLines(enrollLines,courseId);
  expectedInvalidInfo.clear();
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithNoEmailInput,StudentAttributesFactory.ERROR_ENROLL_LINE_TOOFEWPARTS));
  for (int i=0; i < invalidInfo.size(); i++) {
    assertEquals(expectedInvalidInfo.get(i),invalidInfo.get(i));
  }
  ______TS(""String_Node_Str"");
  String lineWithTeamNameEmpty=""String_Node_Str"";
  String lineWithStudentNameEmpty=""String_Node_Str"";
  String lineWithEmailEmpty=""String_Node_Str"";
  enrollLines=lineWithTeamNameEmpty + Const.EOL + lineWithStudentNameEmpty+ Const.EOL+ lineWithEmailEmpty;
  invalidInfo=invokeGetInvalidityInfoInEnrollLines(enrollLines,courseId);
  expectedInvalidInfo.clear();
  info=StringHelper.toString(saf.makeStudent(lineWithTeamNameEmpty,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithTeamNameEmpty,info));
  info=StringHelper.toString(saf.makeStudent(lineWithStudentNameEmpty,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithStudentNameEmpty,info));
  info=StringHelper.toString(saf.makeStudent(lineWithEmailEmpty,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithEmailEmpty,info));
  for (int i=0; i < invalidInfo.size(); i++) {
    assertEquals(expectedInvalidInfo.get(i),invalidInfo.get(i));
  }
  ______TS(""String_Node_Str"");
  String lineWithCorrectInput=""String_Node_Str"";
  String lineWithCorrectInputWithComment=""String_Node_Str"";
  enrollLines=lineWithCorrectInput + Const.EOL + lineWithCorrectInputWithComment;
  invalidInfo=invokeGetInvalidityInfoInEnrollLines(enrollLines,courseId);
  assertEquals(0,invalidInfo.size());
  ______TS(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  enrollLines=lineWithInvalidTeamName + Const.EOL + lineWithInvalidTeamNameAndStudentNameAndEmail+ Const.EOL+ lineWithExtraParameters+ Const.EOL+ lineWithTeamNameEmpty+ Const.EOL+ lineWithCorrectInput+ Const.EOL+ ""String_Node_Str"";
  invalidInfo=invokeGetInvalidityInfoInEnrollLines(enrollLines,courseId);
  expectedInvalidInfo.clear();
  info=StringHelper.toString(saf.makeStudent(lineWithInvalidTeamName,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithInvalidTeamName,info));
  info=StringHelper.toString(saf.makeStudent(lineWithInvalidTeamNameAndStudentNameAndEmail,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithInvalidTeamNameAndStudentNameAndEmail,info));
  info=StringHelper.toString(saf.makeStudent(lineWithTeamNameEmpty,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithTeamNameEmpty,info));
  info=StringHelper.toString(saf.makeStudent(lineWithCorrectInput,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithCorrectInput,info));
  for (int i=0; i < invalidInfo.size(); i++) {
    assertEquals(expectedInvalidInfo.get(i),invalidInfo.get(i));
  }
}","@Test public void testEnrollLinesChecking() throws Exception {
  String info;
  String enrollLines;
  String courseId=""String_Node_Str"";
  coursesLogic.createCourse(courseId,""String_Node_Str"");
  List<String> invalidInfo;
  List<String> expectedInvalidInfo=new ArrayList<String>();
  ______TS(""String_Node_Str"");
  String invalidTeamName=StringHelper.generateStringOfLength(FieldValidator.TEAM_NAME_MAX_LENGTH + 1);
  String invalidStudentName=StringHelper.generateStringOfLength(FieldValidator.PERSON_NAME_MAX_LENGTH + 1);
  String lineWithInvalidTeamName=invalidTeamName + ""String_Node_Str"";
  String lineWithInvalidStudentName=""String_Node_Str"" + invalidStudentName + ""String_Node_Str"";
  String lineWithInvalidEmail=""String_Node_Str"" + ""String_Node_Str"";
  String lineWithInvalidStudentNameAndEmail=""String_Node_Str"" + invalidStudentName + ""String_Node_Str""+ ""String_Node_Str"";
  String lineWithInvalidTeamNameAndEmail=invalidTeamName + ""String_Node_Str"" + ""String_Node_Str"";
  String lineWithInvalidTeamNameAndStudentNameAndEmail=invalidTeamName + ""String_Node_Str"" + invalidStudentName+ ""String_Node_Str""+ ""String_Node_Str"";
  enrollLines=lineWithInvalidTeamName + Const.EOL + lineWithInvalidStudentName+ Const.EOL+ lineWithInvalidEmail+ Const.EOL+ lineWithInvalidStudentNameAndEmail+ Const.EOL+ lineWithInvalidTeamNameAndEmail+ Const.EOL+ lineWithInvalidTeamNameAndStudentNameAndEmail;
  invalidInfo=invokeGetInvalidityInfoInEnrollLines(enrollLines,courseId);
  StudentAttributesFactory saf=new StudentAttributesFactory();
  expectedInvalidInfo.clear();
  info=StringHelper.toString(saf.makeStudent(lineWithInvalidTeamName,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithInvalidTeamName,info));
  info=StringHelper.toString(saf.makeStudent(lineWithInvalidStudentName,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithInvalidStudentName,info));
  info=StringHelper.toString(saf.makeStudent(lineWithInvalidEmail,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithInvalidEmail,info));
  info=StringHelper.toString(saf.makeStudent(lineWithInvalidStudentNameAndEmail,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithInvalidStudentNameAndEmail,info));
  info=StringHelper.toString(saf.makeStudent(lineWithInvalidTeamNameAndEmail,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithInvalidTeamNameAndEmail,info));
  info=StringHelper.toString(saf.makeStudent(lineWithInvalidTeamNameAndStudentNameAndEmail,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithInvalidTeamNameAndStudentNameAndEmail,info));
  for (int i=0; i < invalidInfo.size(); i++) {
    assertEquals(expectedInvalidInfo.get(i),invalidInfo.get(i));
  }
  ______TS(""String_Node_Str"");
  String lineWithNoEmailInput=""String_Node_Str"";
  String lineWithExtraParameters=""String_Node_Str"" + ""String_Node_Str"";
  enrollLines=lineWithNoEmailInput + Const.EOL + lineWithExtraParameters;
  invalidInfo=invokeGetInvalidityInfoInEnrollLines(enrollLines,courseId);
  expectedInvalidInfo.clear();
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithNoEmailInput,StudentAttributesFactory.ERROR_ENROLL_LINE_TOOFEWPARTS));
  for (int i=0; i < invalidInfo.size(); i++) {
    assertEquals(expectedInvalidInfo.get(i),invalidInfo.get(i));
  }
  ______TS(""String_Node_Str"");
  String lineWithTeamNameEmpty=""String_Node_Str"";
  String lineWithStudentNameEmpty=""String_Node_Str"";
  String lineWithEmailEmpty=""String_Node_Str"";
  enrollLines=lineWithTeamNameEmpty + Const.EOL + lineWithStudentNameEmpty+ Const.EOL+ lineWithEmailEmpty;
  invalidInfo=invokeGetInvalidityInfoInEnrollLines(enrollLines,courseId);
  expectedInvalidInfo.clear();
  info=StringHelper.toString(saf.makeStudent(lineWithTeamNameEmpty,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithTeamNameEmpty,info));
  info=StringHelper.toString(saf.makeStudent(lineWithStudentNameEmpty,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithStudentNameEmpty,info));
  info=StringHelper.toString(saf.makeStudent(lineWithEmailEmpty,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithEmailEmpty,info));
  for (int i=0; i < invalidInfo.size(); i++) {
    assertEquals(expectedInvalidInfo.get(i),invalidInfo.get(i));
  }
  ______TS(""String_Node_Str"");
  String lineWithCorrectInput=""String_Node_Str"";
  String lineWithCorrectInputWithComment=""String_Node_Str"";
  enrollLines=lineWithCorrectInput + Const.EOL + lineWithCorrectInputWithComment;
  invalidInfo=invokeGetInvalidityInfoInEnrollLines(enrollLines,courseId);
  assertEquals(0,invalidInfo.size());
  ______TS(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  enrollLines=lineWithCorrectInput + Const.EOL + lineWithCorrectInput;
  invalidInfo=invokeGetInvalidityInfoInEnrollLines(enrollLines,courseId);
  assertEquals(1,invalidInfo.size());
  ______TS(""String_Node_Str"");
  enrollLines=lineWithInvalidTeamName + Const.EOL + lineWithInvalidTeamNameAndStudentNameAndEmail+ Const.EOL+ lineWithExtraParameters+ Const.EOL+ lineWithTeamNameEmpty+ Const.EOL+ lineWithCorrectInput+ Const.EOL+ ""String_Node_Str"";
  invalidInfo=invokeGetInvalidityInfoInEnrollLines(enrollLines,courseId);
  expectedInvalidInfo.clear();
  info=StringHelper.toString(saf.makeStudent(lineWithInvalidTeamName,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithInvalidTeamName,info));
  info=StringHelper.toString(saf.makeStudent(lineWithInvalidTeamNameAndStudentNameAndEmail,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithInvalidTeamNameAndStudentNameAndEmail,info));
  info=StringHelper.toString(saf.makeStudent(lineWithTeamNameEmpty,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithTeamNameEmpty,info));
  info=StringHelper.toString(saf.makeStudent(lineWithCorrectInput,courseId).getInvalidityInfo(),""String_Node_Str"" + Const.StatusMessages.ENROLL_LINES_PROBLEM_DETAIL_PREFIX + ""String_Node_Str"");
  expectedInvalidInfo.add(String.format(Const.StatusMessages.ENROLL_LINES_PROBLEM,lineWithCorrectInput,info));
  for (int i=0; i < invalidInfo.size(); i++) {
    assertEquals(expectedInvalidInfo.get(i),invalidInfo.get(i));
  }
}",0.986452266396556
62893,"@Test public void testEnrollStudents() throws Exception {
  String instructorId=""String_Node_Str"";
  String courseIdForEnrollTest=""String_Node_Str"";
  String instructorEmail=""String_Node_Str"";
  AccountAttributes accountToAdd=new AccountAttributes(instructorId,""String_Node_Str"",true,instructorEmail,""String_Node_Str"");
  accountsLogic.createAccount(accountToAdd);
  coursesLogic.createCourseAndInstructor(instructorId,courseIdForEnrollTest,""String_Node_Str"");
  FeedbackSessionsLogic fsLogic=FeedbackSessionsLogic.inst();
  FeedbackSessionAttributes fsAttr=new FeedbackSessionAttributes(""String_Node_Str"",courseIdForEnrollTest,instructorEmail,new Text(""String_Node_Str""),TimeHelper.getHoursOffsetToCurrentTime(0),TimeHelper.getHoursOffsetToCurrentTime(2),TimeHelper.getHoursOffsetToCurrentTime(5),TimeHelper.getHoursOffsetToCurrentTime(1),TimeHelper.getHoursOffsetToCurrentTime(6),8.0,0,FeedbackSessionType.PRIVATE,false,false,false,false,false);
  fsLogic.createFeedbackSession(fsAttr);
  String EOL=Const.EOL;
  String line0=""String_Node_Str"";
  String line1=""String_Node_Str"";
  String line2=""String_Node_Str"";
  String line3=""String_Node_Str"";
  String line4=""String_Node_Str"";
  String lines=line0 + EOL + line1+ EOL+ line2+ EOL+ ""String_Node_Str""+ EOL+ line3+ EOL+ EOL+ line4+ EOL+ ""String_Node_Str""+ EOL+ EOL;
  List<StudentAttributes> enrollResults=studentsLogic.enrollStudents(lines,courseIdForEnrollTest);
  StudentAttributesFactory saf=new StudentAttributesFactory();
  assertEquals(5,enrollResults.size());
  assertEquals(5,studentsLogic.getStudentsForCourse(courseIdForEnrollTest).size());
  TestHelper.verifyEnrollmentResultForStudent(saf.makeStudent(line0,courseIdForEnrollTest),enrollResults.get(0),StudentAttributes.UpdateStatus.NEW);
  TestHelper.verifyEnrollmentResultForStudent(saf.makeStudent(line1,courseIdForEnrollTest),enrollResults.get(1),StudentAttributes.UpdateStatus.NEW);
  TestHelper.verifyEnrollmentResultForStudent(saf.makeStudent(line4,courseIdForEnrollTest),enrollResults.get(4),StudentAttributes.UpdateStatus.NEW);
  CourseDetailsBundle cd=coursesLogic.getCourseDetails(courseIdForEnrollTest);
  assertEquals(5,cd.stats.unregisteredTotal);
  ______TS(""String_Node_Str"");
  String enrollLines=""String_Node_Str"";
  String invalidCourseId=""String_Node_Str"";
  try {
    studentsLogic.enrollStudents(enrollLines,invalidCourseId);
    signalFailureToDetectException();
  }
 catch (  EntityDoesNotExistException e) {
    ignoreExpectedException();
  }
  ______TS(""String_Node_Str"");
  try {
    studentsLogic.enrollStudents(enrollLines,courseIdForEnrollTest);
    signalFailureToDetectException();
  }
 catch (  EnrollException e) {
    ignoreExpectedException();
  }
  ______TS(""String_Node_Str"");
  enrollLines=""String_Node_Str"";
  try {
    studentsLogic.enrollStudents(enrollLines,courseIdForEnrollTest);
    signalFailureToDetectException();
  }
 catch (  EnrollException e) {
    ignoreExpectedException();
  }
  ______TS(""String_Node_Str"");
  String line0_1=""String_Node_Str"";
  String line5=""String_Node_Str"";
  lines=line0 + EOL + line0_1+ EOL+ line1+ EOL+ line5;
  enrollResults=studentsLogic.enrollStudents(lines,courseIdForEnrollTest);
  assertEquals(6,enrollResults.size());
  assertEquals(6,studentsLogic.getStudentsForCourse(courseIdForEnrollTest).size());
  TestHelper.verifyEnrollmentResultForStudent(saf.makeStudent(line0,courseIdForEnrollTest),enrollResults.get(0),StudentAttributes.UpdateStatus.UNMODIFIED);
  TestHelper.verifyEnrollmentResultForStudent(saf.makeStudent(line0_1,courseIdForEnrollTest),enrollResults.get(1),StudentAttributes.UpdateStatus.MODIFIED);
  TestHelper.verifyEnrollmentResultForStudent(saf.makeStudent(line1,courseIdForEnrollTest),enrollResults.get(2),StudentAttributes.UpdateStatus.UNMODIFIED);
  TestHelper.verifyEnrollmentResultForStudent(saf.makeStudent(line5,courseIdForEnrollTest),enrollResults.get(3),StudentAttributes.UpdateStatus.NEW);
  assertEquals(StudentAttributes.UpdateStatus.NOT_IN_ENROLL_LIST,enrollResults.get(4).updateStatus);
  assertEquals(StudentAttributes.UpdateStatus.NOT_IN_ENROLL_LIST,enrollResults.get(5).updateStatus);
  ______TS(""String_Node_Str"");
  String incorrectLine=""String_Node_Str"";
  lines=""String_Node_Str"" + EOL + incorrectLine+ EOL+ line2+ EOL+ line3;
  try {
    enrollResults=studentsLogic.enrollStudents(lines,courseIdForEnrollTest);
    signalFailureToDetectException(""String_Node_Str"");
  }
 catch (  EnrollException e) {
    assertTrue(e.getMessage().contains(incorrectLine));
  }
  assertEquals(6,studentsLogic.getStudentsForCourse(courseIdForEnrollTest).size());
  ______TS(""String_Node_Str"");
  try {
    studentsLogic.enrollStudents(""String_Node_Str"",null);
    signalFailureToDetectException();
  }
 catch (  AssertionError a) {
    assertEquals(Const.StatusCodes.DBLEVEL_NULL_INPUT,a.getMessage());
  }
  ______TS(""String_Node_Str"");
  accountToAdd=new AccountAttributes(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"");
  accountsLogic.createAccount(accountToAdd);
  coursesLogic.createCourseAndInstructor(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String line=""String_Node_Str"";
  enrollResults=studentsLogic.enrollStudents(line,""String_Node_Str"");
  assertEquals(1,enrollResults.size());
  assertEquals(StudentAttributes.UpdateStatus.NEW,enrollResults.get(0).updateStatus);
  line=""String_Node_Str"";
  enrollResults=studentsLogic.enrollStudents(line,""String_Node_Str"");
  assertEquals(1,enrollResults.size());
  assertEquals(StudentAttributes.UpdateStatus.MODIFIED,enrollResults.get(0).updateStatus);
  line=""String_Node_Str"";
  enrollResults=studentsLogic.enrollStudents(line,""String_Node_Str"");
  assertEquals(1,enrollResults.size());
  assertEquals(StudentAttributes.UpdateStatus.UNMODIFIED,enrollResults.get(0).updateStatus);
  ______TS(""String_Node_Str"");
  String line_t9=""String_Node_Str"";
  String line_t10=""String_Node_Str"";
  try {
    studentsLogic.enrollStudents(line_t9 + EOL + line_t10,""String_Node_Str"");
  }
 catch (  EnrollException e) {
    assertTrue(e.getMessage().contains(line_t10));
    assertTrue(e.getMessage().contains(""String_Node_Str"" + line_t9 + ""String_Node_Str""));
  }
}","@Test public void testEnrollStudents() throws Exception {
  String instructorId=""String_Node_Str"";
  String courseIdForEnrollTest=""String_Node_Str"";
  String instructorEmail=""String_Node_Str"";
  String EOL=Const.EOL;
  AccountAttributes accountToAdd=new AccountAttributes(instructorId,""String_Node_Str"",true,instructorEmail,""String_Node_Str"");
  accountsLogic.createAccount(accountToAdd);
  coursesLogic.createCourseAndInstructor(instructorId,courseIdForEnrollTest,""String_Node_Str"");
  FeedbackSessionsLogic fsLogic=FeedbackSessionsLogic.inst();
  FeedbackSessionAttributes fsAttr=new FeedbackSessionAttributes(""String_Node_Str"",courseIdForEnrollTest,instructorEmail,new Text(""String_Node_Str""),TimeHelper.getHoursOffsetToCurrentTime(0),TimeHelper.getHoursOffsetToCurrentTime(2),TimeHelper.getHoursOffsetToCurrentTime(5),TimeHelper.getHoursOffsetToCurrentTime(1),TimeHelper.getHoursOffsetToCurrentTime(6),8.0,0,FeedbackSessionType.PRIVATE,false,false,false,false,false);
  fsLogic.createFeedbackSession(fsAttr);
  ______TS(""String_Node_Str"");
  String line0=""String_Node_Str"";
  String line1=""String_Node_Str"";
  String line2=""String_Node_Str"";
  String line3=""String_Node_Str"";
  String line4=""String_Node_Str"";
  String lines=line0 + EOL + line1+ EOL+ line2+ EOL+ ""String_Node_Str""+ EOL+ line3+ EOL+ EOL+ line4+ EOL+ ""String_Node_Str""+ EOL+ EOL;
  List<StudentAttributes> enrollResults=studentsLogic.enrollStudents(lines,courseIdForEnrollTest);
  StudentAttributesFactory saf=new StudentAttributesFactory();
  assertEquals(5,enrollResults.size());
  assertEquals(5,studentsLogic.getStudentsForCourse(courseIdForEnrollTest).size());
  TestHelper.verifyEnrollmentResultForStudent(saf.makeStudent(line0,courseIdForEnrollTest),enrollResults.get(0),StudentAttributes.UpdateStatus.NEW);
  TestHelper.verifyEnrollmentResultForStudent(saf.makeStudent(line1,courseIdForEnrollTest),enrollResults.get(1),StudentAttributes.UpdateStatus.NEW);
  TestHelper.verifyEnrollmentResultForStudent(saf.makeStudent(line4,courseIdForEnrollTest),enrollResults.get(4),StudentAttributes.UpdateStatus.NEW);
  CourseDetailsBundle cd=coursesLogic.getCourseDetails(courseIdForEnrollTest);
  assertEquals(5,cd.stats.unregisteredTotal);
  ______TS(""String_Node_Str"");
  String line0_1=""String_Node_Str"";
  String line5=""String_Node_Str"";
  lines=line0 + EOL + line0_1+ EOL+ line1+ EOL+ line5;
  enrollResults=studentsLogic.enrollStudents(lines,courseIdForEnrollTest);
  assertEquals(6,enrollResults.size());
  assertEquals(6,studentsLogic.getStudentsForCourse(courseIdForEnrollTest).size());
  TestHelper.verifyEnrollmentResultForStudent(saf.makeStudent(line0,courseIdForEnrollTest),enrollResults.get(0),StudentAttributes.UpdateStatus.UNMODIFIED);
  TestHelper.verifyEnrollmentResultForStudent(saf.makeStudent(line0_1,courseIdForEnrollTest),enrollResults.get(1),StudentAttributes.UpdateStatus.MODIFIED);
  TestHelper.verifyEnrollmentResultForStudent(saf.makeStudent(line1,courseIdForEnrollTest),enrollResults.get(2),StudentAttributes.UpdateStatus.UNMODIFIED);
  TestHelper.verifyEnrollmentResultForStudent(saf.makeStudent(line5,courseIdForEnrollTest),enrollResults.get(3),StudentAttributes.UpdateStatus.NEW);
  assertEquals(StudentAttributes.UpdateStatus.NOT_IN_ENROLL_LIST,enrollResults.get(4).updateStatus);
  assertEquals(StudentAttributes.UpdateStatus.NOT_IN_ENROLL_LIST,enrollResults.get(5).updateStatus);
  ______TS(""String_Node_Str"");
  String incorrectLine=""String_Node_Str"";
  lines=""String_Node_Str"" + EOL + incorrectLine+ EOL+ line2+ EOL+ line3;
  try {
    enrollResults=studentsLogic.enrollStudents(lines,courseIdForEnrollTest);
    signalFailureToDetectException(""String_Node_Str"");
  }
 catch (  EnrollException e) {
    assertTrue(e.getMessage().contains(incorrectLine));
  }
  assertEquals(6,studentsLogic.getStudentsForCourse(courseIdForEnrollTest).size());
  ______TS(""String_Node_Str"");
  try {
    studentsLogic.enrollStudents(""String_Node_Str"",null);
    signalFailureToDetectException();
  }
 catch (  AssertionError a) {
    assertEquals(Const.StatusCodes.DBLEVEL_NULL_INPUT,a.getMessage());
  }
  ______TS(""String_Node_Str"");
  accountToAdd=new AccountAttributes(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"");
  accountsLogic.createAccount(accountToAdd);
  coursesLogic.createCourseAndInstructor(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String line=""String_Node_Str"";
  enrollResults=studentsLogic.enrollStudents(line,""String_Node_Str"");
  assertEquals(1,enrollResults.size());
  assertEquals(StudentAttributes.UpdateStatus.NEW,enrollResults.get(0).updateStatus);
  line=""String_Node_Str"";
  enrollResults=studentsLogic.enrollStudents(line,""String_Node_Str"");
  assertEquals(1,enrollResults.size());
  assertEquals(StudentAttributes.UpdateStatus.MODIFIED,enrollResults.get(0).updateStatus);
  line=""String_Node_Str"";
  enrollResults=studentsLogic.enrollStudents(line,""String_Node_Str"");
  assertEquals(1,enrollResults.size());
  assertEquals(StudentAttributes.UpdateStatus.UNMODIFIED,enrollResults.get(0).updateStatus);
  ______TS(""String_Node_Str"");
  String line_t9=""String_Node_Str"";
  String line_t10=""String_Node_Str"";
  try {
    studentsLogic.enrollStudents(line_t9 + EOL + line_t10,""String_Node_Str"");
  }
 catch (  EnrollException e) {
    assertTrue(e.getMessage().contains(line_t10));
    assertTrue(e.getMessage().contains(""String_Node_Str"" + line_t9 + ""String_Node_Str""));
  }
  ______TS(""String_Node_Str"");
  String enrollLines=""String_Node_Str"";
  String invalidCourseId=""String_Node_Str"";
  try {
    studentsLogic.enrollStudents(enrollLines,invalidCourseId);
    signalFailureToDetectException();
  }
 catch (  EntityDoesNotExistException e) {
    ignoreExpectedException();
  }
  ______TS(""String_Node_Str"");
  try {
    studentsLogic.enrollStudents(enrollLines,courseIdForEnrollTest);
    signalFailureToDetectException();
  }
 catch (  EnrollException e) {
    ignoreExpectedException();
  }
  ______TS(""String_Node_Str"");
  enrollLines=""String_Node_Str"";
  try {
    studentsLogic.enrollStudents(enrollLines,courseIdForEnrollTest);
    signalFailureToDetectException();
  }
 catch (  EnrollException e) {
    ignoreExpectedException();
  }
}",0.8697197318471852
62894,"@Test public void testAdjustFeedbackResponseForEnrollments() throws Exception {
  restoreTypicalDataInDatastore();
  ______TS(""String_Node_Str"");
  String course1Id=dataBundle.courses.get(""String_Node_Str"").id;
  StudentAttributes student1InCourse1=dataBundle.students.get(""String_Node_Str"");
  StudentAttributes student2InCourse1=dataBundle.students.get(""String_Node_Str"");
  ArrayList<StudentEnrollDetails> enrollmentList=new ArrayList<StudentEnrollDetails>();
  StudentEnrollDetails studentDetails1=new StudentEnrollDetails(StudentAttributes.UpdateStatus.MODIFIED,course1Id,student1InCourse1.email,student1InCourse1.team,student1InCourse1.team + ""String_Node_Str"");
  enrollmentList.add(studentDetails1);
  FeedbackResponseAttributes feedbackResponse1InBundle=dataBundle.feedbackResponses.get(""String_Node_Str"");
  FeedbackResponsesLogic frLogic=FeedbackResponsesLogic.inst();
  FeedbackQuestionsLogic fqLogic=FeedbackQuestionsLogic.inst();
  FeedbackQuestionAttributes feedbackQuestionInDb=fqLogic.getFeedbackQuestion(feedbackResponse1InBundle.feedbackSessionName,feedbackResponse1InBundle.courseId,Integer.parseInt(feedbackResponse1InBundle.feedbackQuestionId));
  FeedbackResponseAttributes responseBefore=frLogic.getFeedbackResponse(feedbackQuestionInDb.getId(),feedbackResponse1InBundle.giverEmail,feedbackResponse1InBundle.recipientEmail);
  studentsLogic.adjustFeedbackResponseForEnrollments(enrollmentList,responseBefore);
  FeedbackResponseAttributes responseAfter=frLogic.getFeedbackResponse(feedbackQuestionInDb.getId(),feedbackResponse1InBundle.giverEmail,feedbackResponse1InBundle.recipientEmail);
  assertEquals(responseBefore.getId(),responseAfter.getId());
  ______TS(""String_Node_Str"");
  studentDetails1=new StudentEnrollDetails(StudentAttributes.UpdateStatus.MODIFIED,course1Id,student2InCourse1.email,student1InCourse1.team,student1InCourse1.team + ""String_Node_Str"");
  enrollmentList=new ArrayList<StudentEnrollDetails>();
  enrollmentList.add(studentDetails1);
  feedbackQuestionInDb=fqLogic.getFeedbackQuestion(feedbackResponse1InBundle.feedbackSessionName,feedbackResponse1InBundle.courseId,Integer.parseInt(feedbackResponse1InBundle.feedbackQuestionId));
  responseBefore=frLogic.getFeedbackResponse(feedbackQuestionInDb.getId(),feedbackResponse1InBundle.giverEmail,feedbackResponse1InBundle.recipientEmail);
  studentsLogic.adjustFeedbackResponseForEnrollments(enrollmentList,responseBefore);
  responseAfter=frLogic.getFeedbackResponse(feedbackQuestionInDb.getId(),feedbackResponse1InBundle.giverEmail,feedbackResponse1InBundle.recipientEmail);
  assertEquals(null,responseAfter);
}","@Test public void testAdjustFeedbackResponseForEnrollments() throws Exception {
  restoreTypicalDataInDatastore();
  ______TS(""String_Node_Str"");
  String course1Id=dataBundle.courses.get(""String_Node_Str"").id;
  StudentAttributes student1InCourse1=dataBundle.students.get(""String_Node_Str"");
  StudentAttributes student2InCourse1=dataBundle.students.get(""String_Node_Str"");
  ArrayList<StudentEnrollDetails> enrollmentList=new ArrayList<StudentEnrollDetails>();
  StudentEnrollDetails studentDetails1=new StudentEnrollDetails(StudentAttributes.UpdateStatus.MODIFIED,course1Id,student1InCourse1.email,student1InCourse1.team,student1InCourse1.team + ""String_Node_Str"");
  enrollmentList.add(studentDetails1);
  FeedbackResponseAttributes feedbackResponse1InBundle=dataBundle.feedbackResponses.get(""String_Node_Str"");
  FeedbackResponsesLogic frLogic=FeedbackResponsesLogic.inst();
  FeedbackQuestionsLogic fqLogic=FeedbackQuestionsLogic.inst();
  FeedbackQuestionAttributes feedbackQuestionInDb=fqLogic.getFeedbackQuestion(feedbackResponse1InBundle.feedbackSessionName,feedbackResponse1InBundle.courseId,Integer.parseInt(feedbackResponse1InBundle.feedbackQuestionId));
  FeedbackResponseAttributes responseBefore=frLogic.getFeedbackResponse(feedbackQuestionInDb.getId(),feedbackResponse1InBundle.giverEmail,feedbackResponse1InBundle.recipientEmail);
  studentsLogic.adjustFeedbackResponseForEnrollments(enrollmentList,responseBefore);
  FeedbackResponseAttributes responseAfter=frLogic.getFeedbackResponse(feedbackQuestionInDb.getId(),feedbackResponse1InBundle.giverEmail,feedbackResponse1InBundle.recipientEmail);
  assertEquals(responseBefore.getId(),responseAfter.getId());
  ______TS(""String_Node_Str"");
  enrollmentList=new ArrayList<StudentEnrollDetails>();
  studentDetails1=new StudentEnrollDetails(StudentAttributes.UpdateStatus.UNMODIFIED,course1Id,student1InCourse1.email,student1InCourse1.team,student1InCourse1.team + ""String_Node_Str"");
  enrollmentList.add(studentDetails1);
  feedbackQuestionInDb=fqLogic.getFeedbackQuestion(feedbackResponse1InBundle.feedbackSessionName,feedbackResponse1InBundle.courseId,Integer.parseInt(feedbackResponse1InBundle.feedbackQuestionId));
  responseBefore=frLogic.getFeedbackResponse(feedbackQuestionInDb.getId(),feedbackResponse1InBundle.giverEmail,feedbackResponse1InBundle.recipientEmail);
  studentsLogic.adjustFeedbackResponseForEnrollments(enrollmentList,responseBefore);
  responseAfter=frLogic.getFeedbackResponse(feedbackQuestionInDb.getId(),feedbackResponse1InBundle.giverEmail,feedbackResponse1InBundle.recipientEmail);
  assertEquals(responseBefore.getId(),responseAfter.getId());
  ______TS(""String_Node_Str"");
  studentDetails1=new StudentEnrollDetails(StudentAttributes.UpdateStatus.MODIFIED,course1Id,student2InCourse1.email,student1InCourse1.team,student1InCourse1.team + ""String_Node_Str"");
  enrollmentList=new ArrayList<StudentEnrollDetails>();
  enrollmentList.add(studentDetails1);
  feedbackQuestionInDb=fqLogic.getFeedbackQuestion(feedbackResponse1InBundle.feedbackSessionName,feedbackResponse1InBundle.courseId,Integer.parseInt(feedbackResponse1InBundle.feedbackQuestionId));
  responseBefore=frLogic.getFeedbackResponse(feedbackQuestionInDb.getId(),feedbackResponse1InBundle.giverEmail,feedbackResponse1InBundle.recipientEmail);
  studentsLogic.adjustFeedbackResponseForEnrollments(enrollmentList,responseBefore);
  responseAfter=frLogic.getFeedbackResponse(feedbackQuestionInDb.getId(),feedbackResponse1InBundle.giverEmail,feedbackResponse1InBundle.recipientEmail);
  assertEquals(null,responseAfter);
}",0.8420032310177706
62895,"@Override public List<String> validateQuestionDetails(){
  List<String> errors=new ArrayList<String>();
  if (numOfMcqChoices <= MIN_NUM_OF_MCQ_CHOICES) {
    errors.add(ERROR_NOT_ENOUGH_MCQ_CHOICES + MIN_NUM_OF_MCQ_CHOICES + ""String_Node_Str"");
  }
  return errors;
}","@Override public List<String> validateQuestionDetails(){
  List<String> errors=new ArrayList<String>();
  if (generateOptionsFor == FeedbackParticipantType.NONE && numOfMcqChoices < MIN_NUM_OF_MCQ_CHOICES) {
    errors.add(ERROR_NOT_ENOUGH_MCQ_CHOICES + MIN_NUM_OF_MCQ_CHOICES + ""String_Node_Str"");
  }
  return errors;
}",0.9066213921901528
62896,"@Override public List<String> validateQuestionDetails(){
  List<String> errors=new ArrayList<String>();
  if (numOfMsqChoices <= MIN_NUM_OF_MSQ_CHOICES) {
    errors.add(ERROR_NOT_ENOUGH_MSQ_CHOICES + MIN_NUM_OF_MSQ_CHOICES + ""String_Node_Str"");
  }
  return errors;
}","@Override public List<String> validateQuestionDetails(){
  List<String> errors=new ArrayList<String>();
  if (generateOptionsFor == FeedbackParticipantType.NONE && numOfMsqChoices < MIN_NUM_OF_MSQ_CHOICES) {
    errors.add(ERROR_NOT_ENOUGH_MSQ_CHOICES + MIN_NUM_OF_MSQ_CHOICES + ""String_Node_Str"");
  }
  return errors;
}",0.9066213921901528
62897,"@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  String feedbackSessionName=getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);
  Assumption.assertNotNull(courseId);
  Assumption.assertNotNull(feedbackSessionName);
  new GateKeeper().verifyAccessible(logic.getInstructorForGoogleId(courseId,account.googleId),logic.getFeedbackSession(feedbackSessionName,courseId),true);
  String editType=getRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_EDITTYPE);
  Assumption.assertNotNull(""String_Node_Str"",editType);
  FeedbackQuestionAttributes updatedQuestion=extractFeedbackQuestionData(requestParameters);
  try {
    if (editType.equals(""String_Node_Str"")) {
      if (updatedQuestion.questionNumber != 0) {
        logic.updateFeedbackQuestionNumber(updatedQuestion);
        statusToUser.add(Const.StatusMessages.FEEDBACK_QUESTION_EDITED);
      }
 else {
        logic.updateFeedbackQuestion(updatedQuestion);
        statusToUser.add(Const.StatusMessages.FEEDBACK_QUESTION_EDITED);
        statusToAdmin=""String_Node_Str"" + updatedQuestion.questionNumber + ""String_Node_Str""+ updatedQuestion.feedbackSessionName+ ""String_Node_Str""+ updatedQuestion.courseId+ ""String_Node_Str""+ ""String_Node_Str""+ updatedQuestion.getQuestionDetails().getQuestionTypeDisplayName()+ ""String_Node_Str""+ updatedQuestion.getQuestionDetails().questionText;
      }
    }
 else     if (editType.equals(""String_Node_Str"")) {
      logic.deleteFeedbackQuestion(updatedQuestion.getId());
      statusToUser.add(Const.StatusMessages.FEEDBACK_QUESTION_DELETED);
      statusToAdmin=""String_Node_Str"" + updatedQuestion.questionNumber + ""String_Node_Str""+ updatedQuestion.feedbackSessionName+ ""String_Node_Str""+ updatedQuestion.courseId+ ""String_Node_Str"";
    }
 else {
      Assumption.fail(""String_Node_Str"");
    }
  }
 catch (  InvalidParametersException e) {
    setStatusForException(e);
  }
  return createRedirectResult(new PageData(account).getInstructorFeedbackSessionEditLink(courseId,feedbackSessionName));
}","@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String courseId=getRequestParamValue(Const.ParamsNames.COURSE_ID);
  String feedbackSessionName=getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);
  Assumption.assertNotNull(courseId);
  Assumption.assertNotNull(feedbackSessionName);
  new GateKeeper().verifyAccessible(logic.getInstructorForGoogleId(courseId,account.googleId),logic.getFeedbackSession(feedbackSessionName,courseId),true);
  String editType=getRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_EDITTYPE);
  Assumption.assertNotNull(""String_Node_Str"",editType);
  FeedbackQuestionAttributes updatedQuestion=extractFeedbackQuestionData(requestParameters);
  List<String> questionDetailsErrors=updatedQuestion.getQuestionDetails().validateQuestionDetails();
  if (questionDetailsErrors.size() > 0) {
    statusToUser.addAll(questionDetailsErrors);
  }
 else {
    try {
      if (editType.equals(""String_Node_Str"")) {
        if (updatedQuestion.questionNumber != 0) {
          logic.updateFeedbackQuestionNumber(updatedQuestion);
          statusToUser.add(Const.StatusMessages.FEEDBACK_QUESTION_EDITED);
        }
 else {
          logic.updateFeedbackQuestion(updatedQuestion);
          statusToUser.add(Const.StatusMessages.FEEDBACK_QUESTION_EDITED);
          statusToAdmin=""String_Node_Str"" + updatedQuestion.questionNumber + ""String_Node_Str""+ updatedQuestion.feedbackSessionName+ ""String_Node_Str""+ updatedQuestion.courseId+ ""String_Node_Str""+ ""String_Node_Str""+ updatedQuestion.getQuestionDetails().getQuestionTypeDisplayName()+ ""String_Node_Str""+ updatedQuestion.getQuestionDetails().questionText;
        }
      }
 else       if (editType.equals(""String_Node_Str"")) {
        logic.deleteFeedbackQuestion(updatedQuestion.getId());
        statusToUser.add(Const.StatusMessages.FEEDBACK_QUESTION_DELETED);
        statusToAdmin=""String_Node_Str"" + updatedQuestion.questionNumber + ""String_Node_Str""+ updatedQuestion.feedbackSessionName+ ""String_Node_Str""+ updatedQuestion.courseId+ ""String_Node_Str"";
      }
 else {
        Assumption.fail(""String_Node_Str"");
      }
    }
 catch (    InvalidParametersException e) {
      setStatusForException(e);
    }
  }
  return createRedirectResult(new PageData(account).getInstructorFeedbackSessionEditLink(courseId,feedbackSessionName));
}",0.9437849944008958
62898,"public void createStudentCascade(StudentAttributes studentData) throws InvalidParametersException, EntityAlreadyExistsException, EntityDoesNotExistException {
  if (!coursesLogic.isCoursePresent(studentData.course)) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + studentData.course + ""String_Node_Str"");
  }
  createStudentCascadeWithSubmissionAdjustmentScheduled(studentData);
  evaluationsLogic.adjustSubmissionsForNewStudent(studentData.course,studentData.email,studentData.team);
}","public void createStudentCascade(StudentAttributes studentData) throws InvalidParametersException, EntityAlreadyExistsException, EntityDoesNotExistException {
  createStudentCascadeWithSubmissionAdjustmentScheduled(studentData);
  if (!coursesLogic.isCoursePresent(studentData.course)) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + studentData.course + ""String_Node_Str"");
  }
  evaluationsLogic.adjustSubmissionsForNewStudent(studentData.course,studentData.email,studentData.team);
}",0.8605577689243028
62899,"@Test public void testGetStudentsForGoogleId() throws Exception {
  restoreTypicalDataInDatastore();
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  StudentAttributes studentInOneCourse=dataBundle.students.get(""String_Node_Str"");
  assertEquals(1,studentsLogic.getStudentsForGoogleId(studentInOneCourse.googleId).size());
  assertEquals(studentInOneCourse.email,studentsLogic.getStudentsForGoogleId(studentInOneCourse.googleId).get(0).email);
  assertEquals(studentInOneCourse.name,studentsLogic.getStudentsForGoogleId(studentInOneCourse.googleId).get(0).name);
  assertEquals(studentInOneCourse.course,studentsLogic.getStudentsForGoogleId(studentInOneCourse.googleId).get(0).course);
  ______TS(""String_Node_Str"");
  StudentAttributes studentInTwoCoursesInCourse1=dataBundle.students.get(""String_Node_Str"");
  List<StudentAttributes> listReceivedUsingStudentInCourse1=studentsLogic.getStudentsForGoogleId(studentInTwoCoursesInCourse1.googleId);
  assertEquals(2,listReceivedUsingStudentInCourse1.size());
  StudentAttributes studentInTwoCoursesInCourse2=dataBundle.students.get(""String_Node_Str"");
  List<StudentAttributes> listReceivedUsingStudentInCourse2=studentsLogic.getStudentsForGoogleId(studentInTwoCoursesInCourse2.googleId);
  assertEquals(2,listReceivedUsingStudentInCourse2.size());
  StudentAttributes firstStudentReceived=listReceivedUsingStudentInCourse1.get(0);
  assertEquals(studentInTwoCoursesInCourse2.email,firstStudentReceived.email);
  assertEquals(studentInTwoCoursesInCourse2.name,firstStudentReceived.name);
  assertEquals(studentInTwoCoursesInCourse2.course,firstStudentReceived.course);
  StudentAttributes secondStudentReceived=listReceivedUsingStudentInCourse1.get(1);
  assertEquals(studentInTwoCoursesInCourse1.email,secondStudentReceived.email);
  assertEquals(studentInTwoCoursesInCourse1.name,secondStudentReceived.name);
  assertEquals(studentInTwoCoursesInCourse1.course,secondStudentReceived.course);
  ______TS(""String_Node_Str"");
  assertEquals(0,studentsLogic.getStudentsForGoogleId(""String_Node_Str"").size());
  ______TS(""String_Node_Str"");
  try {
    studentsLogic.getStudentsForGoogleId(null);
    signalFailureToDetectException();
  }
 catch (  AssertionError a) {
    assertEquals(Const.StatusCodes.DBLEVEL_NULL_INPUT,a.getMessage());
  }
}","@Test public void testGetStudentsForGoogleId() throws Exception {
  restoreTypicalDataInDatastore();
  ______TS(""String_Node_Str"");
  StudentAttributes studentInCourse1=dataBundle.students.get(""String_Node_Str"");
  assertEquals(1,studentsLogic.getStudentsForGoogleId(studentInCourse1.googleId).size());
  assertEquals(studentInCourse1.email,studentsLogic.getStudentsForGoogleId(studentInCourse1.googleId).get(0).email);
  assertEquals(studentInCourse1.name,studentsLogic.getStudentsForGoogleId(studentInCourse1.googleId).get(0).name);
  assertEquals(studentInCourse1.course,studentsLogic.getStudentsForGoogleId(studentInCourse1.googleId).get(0).course);
  ______TS(""String_Node_Str"");
  StudentAttributes studentInTwoCoursesInCourse1=dataBundle.students.get(""String_Node_Str"");
  List<StudentAttributes> listReceivedUsingStudentInCourse1=studentsLogic.getStudentsForGoogleId(studentInTwoCoursesInCourse1.googleId);
  assertEquals(2,listReceivedUsingStudentInCourse1.size());
  StudentAttributes studentInTwoCoursesInCourse2=dataBundle.students.get(""String_Node_Str"");
  List<StudentAttributes> listReceivedUsingStudentInCourse2=studentsLogic.getStudentsForGoogleId(studentInTwoCoursesInCourse2.googleId);
  assertEquals(2,listReceivedUsingStudentInCourse2.size());
  StudentAttributes firstStudentReceived=listReceivedUsingStudentInCourse1.get(0);
  assertEquals(studentInTwoCoursesInCourse2.email,firstStudentReceived.email);
  assertEquals(studentInTwoCoursesInCourse2.name,firstStudentReceived.name);
  assertEquals(studentInTwoCoursesInCourse2.course,firstStudentReceived.course);
  StudentAttributes secondStudentReceived=listReceivedUsingStudentInCourse1.get(1);
  assertEquals(studentInTwoCoursesInCourse1.email,secondStudentReceived.email);
  assertEquals(studentInTwoCoursesInCourse1.name,secondStudentReceived.name);
  assertEquals(studentInTwoCoursesInCourse1.course,secondStudentReceived.course);
  ______TS(""String_Node_Str"");
  assertEquals(0,studentsLogic.getStudentsForGoogleId(""String_Node_Str"").size());
  ______TS(""String_Node_Str"");
  try {
    studentsLogic.getStudentsForGoogleId(null);
    signalFailureToDetectException();
  }
 catch (  AssertionError a) {
    assertEquals(Const.StatusCodes.DBLEVEL_NULL_INPUT,a.getMessage());
  }
}",0.9642935377875136
62900,"@Test public void testGetKeyForStudent() throws Exception {
  restoreTypicalDataInDatastore();
  ______TS(""String_Node_Str"");
  try {
    studentsLogic.getKeyForStudent(""String_Node_Str"",null);
    signalFailureToDetectException();
  }
 catch (  AssertionError a) {
    assertEquals(Const.StatusCodes.DBLEVEL_NULL_INPUT,a.getMessage());
  }
  ______TS(""String_Node_Str"");
  StudentAttributes student=dataBundle.students.get(""String_Node_Str"");
  assertEquals(null,studentsLogic.getKeyForStudent(student.course,""String_Node_Str""));
}","@Test public void testGetKeyForStudent() throws Exception {
  restoreTypicalDataInDatastore();
  ______TS(""String_Node_Str"");
  try {
    studentsLogic.getKeyForStudent(""String_Node_Str"",null);
    signalFailureToDetectException();
  }
 catch (  AssertionError a) {
    assertEquals(Const.StatusCodes.DBLEVEL_NULL_INPUT,a.getMessage());
  }
  ______TS(""String_Node_Str"");
  StudentAttributes student=dataBundle.students.get(""String_Node_Str"");
  String nonExistStudentEmail=""String_Node_Str"";
  try {
    studentsLogic.getKeyForStudent(student.course,nonExistStudentEmail);
    signalFailureToDetectException();
  }
 catch (  EntityDoesNotExistException e) {
    String expectedErrorMsg=""String_Node_Str"" + student.course + ""String_Node_Str""+ nonExistStudentEmail+ ""String_Node_Str"";
    assertEquals(expectedErrorMsg,e.getMessage());
  }
}",0.7186588921282799
62901,"@Test public void testSendRegistrationInviteForCourse() throws Exception {
  restoreTypicalDataInDatastore();
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  CourseAttributes course1=dataBundle.courses.get(""String_Node_Str"");
  List<MimeMessage> emailsSent=studentsLogic.sendRegistrationInviteForCourse(course1.id);
  assertEquals(0,emailsSent.size());
  ______TS(""String_Node_Str"");
  StudentAttributes student1InCourse1=dataBundle.students.get(""String_Node_Str"");
  student1InCourse1.googleId=""String_Node_Str"";
  studentsLogic.updateStudentCascade(student1InCourse1.email,student1InCourse1);
  StudentAttributes student2InCourse1=dataBundle.students.get(""String_Node_Str"");
  student2InCourse1.googleId=""String_Node_Str"";
  studentsLogic.updateStudentCascade(student2InCourse1.email,student2InCourse1);
  emailsSent=studentsLogic.sendRegistrationInviteForCourse(course1.id);
  assertEquals(2,emailsSent.size());
  TestHelper.verifyJoinInviteToStudent(student2InCourse1,emailsSent.get(0));
  TestHelper.verifyJoinInviteToStudent(student1InCourse1,emailsSent.get(1));
  ______TS(""String_Node_Str"");
  try {
    studentsLogic.sendRegistrationInviteForCourse(null);
    signalFailureToDetectException();
  }
 catch (  AssertionError a) {
    assertEquals(Const.StatusCodes.DBLEVEL_NULL_INPUT,a.getMessage());
  }
}","@Test public void testSendRegistrationInviteForCourse() throws Exception {
  restoreTypicalDataInDatastore();
  ______TS(""String_Node_Str"");
  CourseAttributes course1=dataBundle.courses.get(""String_Node_Str"");
  List<MimeMessage> emailsSent=studentsLogic.sendRegistrationInviteForCourse(course1.id);
  assertEquals(0,emailsSent.size());
  ______TS(""String_Node_Str"");
  StudentAttributes student1InCourse1=dataBundle.students.get(""String_Node_Str"");
  student1InCourse1.googleId=""String_Node_Str"";
  studentsLogic.updateStudentCascade(student1InCourse1.email,student1InCourse1);
  StudentAttributes student2InCourse1=dataBundle.students.get(""String_Node_Str"");
  student2InCourse1.googleId=""String_Node_Str"";
  studentsLogic.updateStudentCascade(student2InCourse1.email,student2InCourse1);
  emailsSent=studentsLogic.sendRegistrationInviteForCourse(course1.id);
  assertEquals(2,emailsSent.size());
  TestHelper.verifyJoinInviteToStudent(student2InCourse1,emailsSent.get(0));
  TestHelper.verifyJoinInviteToStudent(student1InCourse1,emailsSent.get(1));
  ______TS(""String_Node_Str"");
  try {
    studentsLogic.sendRegistrationInviteForCourse(null);
    signalFailureToDetectException();
  }
 catch (  AssertionError a) {
    assertEquals(Const.StatusCodes.DBLEVEL_NULL_INPUT,a.getMessage());
  }
}",0.9866970733561384
62902,"@Test public void testSendRegistrationInviteToStudent() throws Exception {
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  dataBundle=getTypicalDataBundle();
  StudentAttributes student1InCourse1=dataBundle.students.get(""String_Node_Str"");
  String studentEmail=student1InCourse1.email;
  String courseId=student1InCourse1.course;
  MimeMessage msgToStudent=studentsLogic.sendRegistrationInviteToStudent(courseId,studentEmail);
  Emails emailMgr=new Emails();
  @SuppressWarnings(""String_Node_Str"") String emailInfo=emailMgr.getEmailInfo(msgToStudent);
  String expectedEmailInfo=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  assertEquals(expectedEmailInfo,emailInfo);
  ______TS(""String_Node_Str"");
  String invalidCourseId=""String_Node_Str"";
  try {
    studentsLogic.sendRegistrationInviteToStudent(invalidCourseId,studentEmail);
    signalFailureToDetectException();
  }
 catch (  EntityDoesNotExistException e) {
  }
  ______TS(""String_Node_Str"");
  String invalidStudentEmail=""String_Node_Str"";
  try {
    studentsLogic.sendRegistrationInviteToStudent(courseId,invalidStudentEmail);
    signalFailureToDetectException();
  }
 catch (  EntityDoesNotExistException e) {
  }
}","@Test public void testSendRegistrationInviteToStudent() throws Exception {
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  StudentAttributes student1InCourse1=dataBundle.students.get(""String_Node_Str"");
  String studentEmail=student1InCourse1.email;
  String courseId=student1InCourse1.course;
  MimeMessage msgToStudent=studentsLogic.sendRegistrationInviteToStudent(courseId,studentEmail);
  Emails emailMgr=new Emails();
  @SuppressWarnings(""String_Node_Str"") String emailInfo=emailMgr.getEmailInfo(msgToStudent);
  String expectedEmailInfo=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  assertEquals(expectedEmailInfo,emailInfo);
  ______TS(""String_Node_Str"");
  String invalidCourseId=""String_Node_Str"";
  try {
    studentsLogic.sendRegistrationInviteToStudent(invalidCourseId,studentEmail);
    signalFailureToDetectException();
  }
 catch (  EntityDoesNotExistException e) {
  }
  ______TS(""String_Node_Str"");
  String invalidStudentEmail=""String_Node_Str"";
  try {
    studentsLogic.sendRegistrationInviteToStudent(courseId,invalidStudentEmail);
    signalFailureToDetectException();
  }
 catch (  EntityDoesNotExistException e) {
  }
}",0.9845382365231926
62903,"@Test public void testSendRegistrationInvliteForCourse() throws Exception {
  ______TS(""String_Node_Str"");
  dataBundle=getTypicalDataBundle();
  String courseId=dataBundle.courses.get(""String_Node_Str"").id;
  StudentAttributes newsStudent0Info=new StudentAttributes(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",courseId);
  StudentAttributes newsStudent1Info=new StudentAttributes(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",courseId);
  StudentAttributes newsStudent2Info=new StudentAttributes(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",courseId);
  invokeEnrollStudent(newsStudent0Info);
  invokeEnrollStudent(newsStudent1Info);
  invokeEnrollStudent(newsStudent2Info);
  List<MimeMessage> msgsForCourse=studentsLogic.sendRegistrationInviteForCourse(courseId);
  assertEquals(3,msgsForCourse.size());
  Emails emailMgr=new Emails();
  @SuppressWarnings(""String_Node_Str"") String emailInfo0=emailMgr.getEmailInfo(msgsForCourse.get(0));
  String expectedEmailInfoForEmail0=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  assertEquals(expectedEmailInfoForEmail0,emailInfo0);
  @SuppressWarnings(""String_Node_Str"") String emailInfo1=emailMgr.getEmailInfo(msgsForCourse.get(1));
  String expectedEmailInfoForEmail1=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  assertEquals(expectedEmailInfoForEmail1,emailInfo1);
  @SuppressWarnings(""String_Node_Str"") String emailInfo2=emailMgr.getEmailInfo(msgsForCourse.get(2));
  String expectedEmailInfoForEmail2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  assertEquals(expectedEmailInfoForEmail2,emailInfo2);
}","@Test public void testSendRegistrationInvliteForCourse() throws Exception {
  ______TS(""String_Node_Str"");
  String courseId=dataBundle.courses.get(""String_Node_Str"").id;
  StudentAttributes newsStudent0Info=new StudentAttributes(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",courseId);
  StudentAttributes newsStudent1Info=new StudentAttributes(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",courseId);
  StudentAttributes newsStudent2Info=new StudentAttributes(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",courseId);
  invokeEnrollStudent(newsStudent0Info);
  invokeEnrollStudent(newsStudent1Info);
  invokeEnrollStudent(newsStudent2Info);
  List<MimeMessage> msgsForCourse=studentsLogic.sendRegistrationInviteForCourse(courseId);
  assertEquals(3,msgsForCourse.size());
  Emails emailMgr=new Emails();
  @SuppressWarnings(""String_Node_Str"") String emailInfo0=emailMgr.getEmailInfo(msgsForCourse.get(0));
  String expectedEmailInfoForEmail0=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  assertEquals(expectedEmailInfoForEmail0,emailInfo0);
  @SuppressWarnings(""String_Node_Str"") String emailInfo1=emailMgr.getEmailInfo(msgsForCourse.get(1));
  String expectedEmailInfoForEmail1=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  assertEquals(expectedEmailInfoForEmail1,emailInfo1);
  @SuppressWarnings(""String_Node_Str"") String emailInfo2=emailMgr.getEmailInfo(msgsForCourse.get(2));
  String expectedEmailInfoForEmail2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  assertEquals(expectedEmailInfoForEmail2,emailInfo2);
}",0.9888453421766656
62904,"@Test public void testJoinConfirmation() throws Exception {
  ______TS(""String_Node_Str"");
  String joinActionUrl=TestProperties.inst().TEAMMATES_URL + Const.ActionURIs.INSTRUCTOR_COURSE_JOIN;
  String joinLink=Url.addParamToUrl(joinActionUrl,Const.ParamsNames.REGKEY,invalidEncryptedKey);
  browser.driver.get(joinLink);
  confirmationPage=createCorrectLoginPageType(browser.driver.getPageSource()).loginAsJoiningInstructor(TestProperties.inst().TEST_INSTRUCTOR_ACCOUNT,TestProperties.inst().TEST_INSTRUCTOR_PASSWORD);
  confirmationPage.clickCancelButton();
  ______TS(""String_Node_Str"");
  browser.driver.get(joinLink);
  confirmationPage=createCorrectLoginPageType(browser.driver.getPageSource()).loginAsJoiningInstructor(TestProperties.inst().TEST_INSTRUCTOR_ACCOUNT,TestProperties.inst().TEST_INSTRUCTOR_PASSWORD);
  InstructorHomePage instructorHome=confirmationPage.clickConfirmButton();
  instructorHome.verifyHtml(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  String courseId=testData.courses.get(""String_Node_Str"").id;
  String instructorEmail=testData.instructors.get(""String_Node_Str"").email;
  joinLink=Url.addParamToUrl(joinActionUrl,Const.ParamsNames.REGKEY,StringHelper.encrypt(BackDoor.getKeyForInstructor(courseId,instructorEmail)));
  browser.driver.get(joinLink);
  confirmationPage=createNewPage(browser,InstructorCourseJoinConfirmationPage.class);
  instructorHome=confirmationPage.clickConfirmButton();
  instructorHome.verifyHtml(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  browser.driver.get(joinLink);
  instructorHome=createNewPage(browser,InstructorHomePage.class);
  instructorHome.verifyHtml(""String_Node_Str"");
}","@Test public void testJoinConfirmation() throws Exception {
  ______TS(""String_Node_Str"");
  String joinActionUrl=TestProperties.inst().TEAMMATES_URL + Const.ActionURIs.INSTRUCTOR_COURSE_JOIN;
  String joinLink=Url.addParamToUrl(joinActionUrl,Const.ParamsNames.REGKEY,invalidEncryptedKey);
  browser.driver.get(joinLink);
  confirmationPage=createCorrectLoginPageType(browser.driver.getPageSource()).loginAsJoiningInstructor(TestProperties.inst().TEST_INSTRUCTOR_ACCOUNT,TestProperties.inst().TEST_INSTRUCTOR_PASSWORD);
  confirmationPage.clickCancelButton();
  ______TS(""String_Node_Str"");
  browser.driver.get(joinLink);
  confirmationPage=createCorrectLoginPageType(browser.driver.getPageSource()).loginAsJoiningInstructor(TestProperties.inst().TEST_INSTRUCTOR_ACCOUNT,TestProperties.inst().TEST_INSTRUCTOR_PASSWORD);
  InstructorHomePage instructorHome=confirmationPage.clickConfirmButton();
  instructorHome.verifyContains(""String_Node_Str"" + invalidEncryptedKey);
  ______TS(""String_Node_Str"");
  String courseId=testData.courses.get(""String_Node_Str"").id;
  String instructorEmail=testData.instructors.get(""String_Node_Str"").email;
  joinLink=Url.addParamToUrl(joinActionUrl,Const.ParamsNames.REGKEY,StringHelper.encrypt(BackDoor.getKeyForInstructor(courseId,instructorEmail)));
  browser.driver.get(joinLink);
  confirmationPage=createNewPage(browser,InstructorCourseJoinConfirmationPage.class);
  instructorHome=confirmationPage.clickConfirmButton();
  instructorHome.verifyHtml(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  browser.driver.get(joinLink);
  instructorHome=createNewPage(browser,InstructorHomePage.class);
  instructorHome.verifyHtml(""String_Node_Str"");
}",0.9790794979079498
62905,"@Test public void testJoinConfirmation() throws Exception {
  ______TS(""String_Node_Str"");
  String joinActionUrl=TestProperties.inst().TEAMMATES_URL + Const.ActionURIs.INSTRUCTOR_COURSE_JOIN;
  String joinLink=Url.addParamToUrl(joinActionUrl,Const.ParamsNames.REGKEY,invalidEncryptedKey);
  browser.driver.get(joinLink);
  confirmationPage=createCorrectLoginPageType(browser.driver.getPageSource()).loginAsJoiningInstructor(TestProperties.inst().TEST_INSTRUCTOR_ACCOUNT,TestProperties.inst().TEST_INSTRUCTOR_PASSWORD);
  confirmationPage.clickCancelButton();
  ______TS(""String_Node_Str"");
  browser.driver.get(joinLink);
  confirmationPage=createCorrectLoginPageType(browser.driver.getPageSource()).loginAsJoiningInstructor(TestProperties.inst().TEST_INSTRUCTOR_ACCOUNT,TestProperties.inst().TEST_INSTRUCTOR_PASSWORD);
  InstructorHomePage instructorHome=confirmationPage.clickConfirmButton();
  instructorHome.verifyHtml(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  String courseId=testData.courses.get(""String_Node_Str"").id;
  String instructorEmail=testData.instructors.get(""String_Node_Str"").email;
  joinLink=Url.addParamToUrl(joinActionUrl,Const.ParamsNames.REGKEY,StringHelper.encrypt(BackDoor.getKeyForInstructor(courseId,instructorEmail)));
  browser.driver.get(joinLink);
  confirmationPage=createNewPage(browser,InstructorCourseJoinConfirmationPage.class);
  instructorHome=confirmationPage.clickConfirmButton();
  instructorHome.verifyHtml(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  browser.driver.get(joinLink);
  instructorHome=createNewPage(browser,InstructorHomePage.class);
  instructorHome.verifyHtml(""String_Node_Str"");
}","@Test public void testJoinConfirmation() throws Exception {
  ______TS(""String_Node_Str"");
  String joinActionUrl=TestProperties.inst().TEAMMATES_URL + Const.ActionURIs.INSTRUCTOR_COURSE_JOIN;
  String joinLink=Url.addParamToUrl(joinActionUrl,Const.ParamsNames.REGKEY,invalidEncryptedKey);
  browser.driver.get(joinLink);
  confirmationPage=createCorrectLoginPageType(browser.driver.getPageSource()).loginAsJoiningInstructor(TestProperties.inst().TEST_INSTRUCTOR_ACCOUNT,TestProperties.inst().TEST_INSTRUCTOR_PASSWORD);
  confirmationPage.clickCancelButton();
  ______TS(""String_Node_Str"");
  browser.driver.get(joinLink);
  confirmationPage=createCorrectLoginPageType(browser.driver.getPageSource()).loginAsJoiningInstructor(TestProperties.inst().TEST_INSTRUCTOR_ACCOUNT,TestProperties.inst().TEST_INSTRUCTOR_PASSWORD);
  InstructorHomePage instructorHome=confirmationPage.clickConfirmButton();
  instructorHome.verifyContains(""String_Node_Str"" + invalidEncryptedKey);
  ______TS(""String_Node_Str"");
  String courseId=testData.courses.get(""String_Node_Str"").id;
  String instructorEmail=testData.instructors.get(""String_Node_Str"").email;
  joinLink=Url.addParamToUrl(joinActionUrl,Const.ParamsNames.REGKEY,StringHelper.encrypt(BackDoor.getKeyForInstructor(courseId,instructorEmail)));
  browser.driver.get(joinLink);
  confirmationPage=createNewPage(browser,InstructorCourseJoinConfirmationPage.class);
  instructorHome=confirmationPage.clickConfirmButton();
  instructorHome.verifyHtml(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  browser.driver.get(joinLink);
  instructorHome=createNewPage(browser,InstructorHomePage.class);
  instructorHome.verifyHtml(""String_Node_Str"");
}",0.9790794979079498
62906,"@Test public void testJoinConfirmation() throws Exception {
  ______TS(""String_Node_Str"");
  String joinActionUrl=TestProperties.inst().TEAMMATES_URL + Const.ActionURIs.INSTRUCTOR_COURSE_JOIN;
  String joinLink=Url.addParamToUrl(joinActionUrl,Const.ParamsNames.REGKEY,invalidEncryptedKey);
  browser.driver.get(joinLink);
  confirmationPage=createCorretLoginPageType(browser.driver.getPageSource()).loginAsJoiningInstructor(TestProperties.inst().TEST_INSTRUCTOR_ACCOUNT,TestProperties.inst().TEST_INSTRUCTOR_PASSWORD);
  confirmationPage.clickCancelButton();
  ______TS(""String_Node_Str"");
  browser.driver.get(joinLink);
  confirmationPage=createCorretLoginPageType(browser.driver.getPageSource()).loginAsJoiningInstructor(TestProperties.inst().TEST_INSTRUCTOR_ACCOUNT,TestProperties.inst().TEST_INSTRUCTOR_PASSWORD);
  InstructorHomePage instructorHome=confirmationPage.clickConfirmButton();
  instructorHome.verifyHtml(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  String courseId=testData.courses.get(""String_Node_Str"").id;
  String instructorEmail=testData.instructors.get(""String_Node_Str"").email;
  joinLink=Url.addParamToUrl(joinActionUrl,Const.ParamsNames.REGKEY,StringHelper.encrypt(BackDoor.getKeyForInstructor(courseId,instructorEmail)));
  browser.driver.get(joinLink);
  confirmationPage=createNewPage(browser,InstructorCourseJoinConfirmationPage.class);
  instructorHome=confirmationPage.clickConfirmButton();
  instructorHome.verifyHtml(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  browser.driver.get(joinLink);
  instructorHome=createNewPage(browser,InstructorHomePage.class);
  instructorHome.verifyHtml(""String_Node_Str"");
}","@Test public void testJoinConfirmation() throws Exception {
  ______TS(""String_Node_Str"");
  String joinActionUrl=TestProperties.inst().TEAMMATES_URL + Const.ActionURIs.INSTRUCTOR_COURSE_JOIN;
  String joinLink=Url.addParamToUrl(joinActionUrl,Const.ParamsNames.REGKEY,invalidEncryptedKey);
  browser.driver.get(joinLink);
  confirmationPage=createCorrectLoginPageType(browser.driver.getPageSource()).loginAsJoiningInstructor(TestProperties.inst().TEST_INSTRUCTOR_ACCOUNT,TestProperties.inst().TEST_INSTRUCTOR_PASSWORD);
  confirmationPage.clickCancelButton();
  ______TS(""String_Node_Str"");
  browser.driver.get(joinLink);
  confirmationPage=createCorrectLoginPageType(browser.driver.getPageSource()).loginAsJoiningInstructor(TestProperties.inst().TEST_INSTRUCTOR_ACCOUNT,TestProperties.inst().TEST_INSTRUCTOR_PASSWORD);
  InstructorHomePage instructorHome=confirmationPage.clickConfirmButton();
  instructorHome.verifyHtml(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  String courseId=testData.courses.get(""String_Node_Str"").id;
  String instructorEmail=testData.instructors.get(""String_Node_Str"").email;
  joinLink=Url.addParamToUrl(joinActionUrl,Const.ParamsNames.REGKEY,StringHelper.encrypt(BackDoor.getKeyForInstructor(courseId,instructorEmail)));
  browser.driver.get(joinLink);
  confirmationPage=createNewPage(browser,InstructorCourseJoinConfirmationPage.class);
  instructorHome=confirmationPage.clickConfirmButton();
  instructorHome.verifyHtml(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  browser.driver.get(joinLink);
  instructorHome=createNewPage(browser,InstructorHomePage.class);
  instructorHome.verifyHtml(""String_Node_Str"");
}",0.9993972272453284
62907,"@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String key=getRequestParamValue(Const.ParamsNames.REGKEY);
  Assumption.assertNotNull(key);
  new GateKeeper().verifyLoggedInUserPrivileges();
  try {
    logic.joinCourseForInstructor(key,account.googleId);
  }
 catch (  JoinCourseException e) {
    setStatusForException(e,e.getMessage());
    log.info(e.getMessage());
  }
  final String joinedCourseMsg=""String_Node_Str"" + ""String_Node_Str"" + account.googleId + ""String_Node_Str""+ StringHelper.decrypt(key);
  boolean hasPreviousAdminStatus=statusToAdmin != null && !statusToAdmin.trim().isEmpty();
  if (hasPreviousAdminStatus) {
    statusToAdmin+=""String_Node_Str"" + joinedCourseMsg;
  }
 else {
    statusToAdmin=joinedCourseMsg;
  }
  RedirectResult response=createRedirectResult(Const.ActionURIs.INSTRUCTOR_HOME_PAGE);
  InstructorAttributes instructor=logic.getInstructorForRegistrationKey(key);
  if (instructor != null) {
    response.addResponseParam(Const.ParamsNames.CHECK_PERSISTENCE_COURSE,instructor.courseId);
  }
  return response;
}","@Override protected ActionResult execute() throws EntityDoesNotExistException {
  String key=getRequestParamValue(Const.ParamsNames.REGKEY);
  Assumption.assertNotNull(key);
  new GateKeeper().verifyLoggedInUserPrivileges();
  try {
    logic.joinCourseForInstructor(key,account.googleId);
  }
 catch (  JoinCourseException e) {
    setStatusForException(e,e.getMessage());
    log.info(e.getMessage());
  }
  final String joinedCourseMsg=""String_Node_Str"" + ""String_Node_Str"" + account.googleId + ""String_Node_Str""+ StringHelper.decrypt(key);
  if (statusToAdmin != null) {
    statusToAdmin+=""String_Node_Str"" + joinedCourseMsg;
  }
 else {
    statusToAdmin=joinedCourseMsg;
  }
  RedirectResult response=createRedirectResult(Const.ActionURIs.INSTRUCTOR_HOME_PAGE);
  InstructorAttributes instructor=logic.getInstructorForRegistrationKey(key);
  if (instructor != null) {
    response.addResponseParam(Const.ParamsNames.CHECK_PERSISTENCE_COURSE,instructor.courseId);
  }
  return response;
}",0.9519230769230768
62908,"@Test public void testExecuteAndPostProcess() throws Exception {
  InstructorsDb instrDb=new InstructorsDb();
  InstructorAttributes instructor=dataBundle.instructors.get(""String_Node_Str"");
  instructor=instrDb.getInstructorForEmail(instructor.courseId,instructor.email);
  gaeSimulation.loginAsInstructor(instructor.googleId);
  ______TS(""String_Node_Str"");
  String[] submissionParams=new String[]{Const.ParamsNames.REGKEY,""String_Node_Str""};
  InstructorCourseJoinAuthenticatedAction a=getAction(submissionParams);
  RedirectResult r=(RedirectResult)a.executeAndPostProcess();
  assertEquals(Const.ActionURIs.INSTRUCTOR_HOME_PAGE + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ instructor.googleId,r.getDestinationWithParams());
  assertTrue(r.isError);
  ______TS(""String_Node_Str"");
  submissionParams=new String[]{Const.ParamsNames.REGKEY,StringHelper.encrypt(instructor.key)};
  a=getAction(submissionParams);
  r=(RedirectResult)a.executeAndPostProcess();
  assertEquals(Const.ActionURIs.INSTRUCTOR_HOME_PAGE + ""String_Node_Str"" + ""String_Node_Str""+ instructor.courseId+ ""String_Node_Str""+ instructor.googleId,r.getDestinationWithParams());
  assertTrue(r.isError);
  ______TS(""String_Node_Str"");
  InstructorAttributes instructor2=dataBundle.instructors.get(""String_Node_Str"");
  instructor2=instrDb.getInstructorForGoogleId(instructor2.courseId,instructor2.googleId);
  submissionParams=new String[]{Const.ParamsNames.REGKEY,StringHelper.encrypt(instructor2.key)};
  a=getAction(submissionParams);
  r=(RedirectResult)a.executeAndPostProcess();
  assertEquals(Const.ActionURIs.INSTRUCTOR_HOME_PAGE + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ instructor2.courseId+ ""String_Node_Str""+ instructor.googleId,r.getDestinationWithParams());
  assertTrue(r.isError);
  ______TS(""String_Node_Str"");
  instructor=new InstructorAttributes(""String_Node_Str"",instructor.courseId,""String_Node_Str"",""String_Node_Str"");
  InstructorsLogic.inst().addInstructor(instructor.courseId,instructor.name,instructor.email);
  AccountAttributes newInstructorAccount=new AccountAttributes(instructor.googleId,instructor.name,false,instructor.email,""String_Node_Str"");
  AccountsLogic.inst().createAccount(newInstructorAccount);
  InstructorAttributes newInstructor=instrDb.getInstructorForEmail(instructor.courseId,instructor.email);
  gaeSimulation.loginUser(instructor.googleId);
  submissionParams=new String[]{Const.ParamsNames.REGKEY,StringHelper.encrypt(newInstructor.key)};
  a=getAction(submissionParams);
  r=(RedirectResult)a.executeAndPostProcess();
  assertEquals(Const.ActionURIs.INSTRUCTOR_HOME_PAGE + ""String_Node_Str"" + ""String_Node_Str"",r.getDestinationWithParams());
  assertFalse(r.isError);
  InstructorAttributes retrievedInstructor=instrDb.getInstructorForEmail(instructor.courseId,instructor.email);
  assertEquals(instructor.googleId,retrievedInstructor.googleId);
}","@Test public void testExecuteAndPostProcess() throws Exception {
  InstructorAttributes instructor=dataBundle.instructors.get(""String_Node_Str"");
  InstructorsDb instrDb=new InstructorsDb();
  instructor=instrDb.getInstructorForEmail(instructor.courseId,instructor.email);
  gaeSimulation.loginAsInstructor(instructor.googleId);
  ______TS(""String_Node_Str"");
  String[] submissionParams=new String[]{Const.ParamsNames.REGKEY,invalidEncryptedKey};
  InstructorCourseJoinAuthenticatedAction joinAction=getAction(submissionParams);
  RedirectResult redirectResult=(RedirectResult)joinAction.executeAndPostProcess();
  assertEquals(Const.ActionURIs.INSTRUCTOR_HOME_PAGE + ""String_Node_Str"" + ""String_Node_Str""+ invalidEncryptedKey+ ""String_Node_Str""+ instructor.googleId,redirectResult.getDestinationWithParams());
  assertTrue(redirectResult.isError);
  assertEquals(""String_Node_Str"" + Const.ActionURIs.INSTRUCTOR_COURSE_JOIN + ""String_Node_Str""+ invalidEncryptedKey,redirectResult.getStatusMessage());
  String expectedLogSegment=""String_Node_Str"" + Const.ActionURIs.INSTRUCTOR_COURSE_JOIN + ""String_Node_Str""+ invalidEncryptedKey+ ""String_Node_Str""+ ""String_Node_Str"";
  AssertHelper.assertContains(expectedLogSegment,joinAction.getLogMessage());
  ______TS(""String_Node_Str"");
  submissionParams=new String[]{Const.ParamsNames.REGKEY,StringHelper.encrypt(instructor.key)};
  joinAction=getAction(submissionParams);
  redirectResult=(RedirectResult)joinAction.executeAndPostProcess();
  assertEquals(Const.ActionURIs.INSTRUCTOR_HOME_PAGE + ""String_Node_Str"" + ""String_Node_Str""+ instructor.courseId+ ""String_Node_Str""+ instructor.googleId,redirectResult.getDestinationWithParams());
  assertTrue(redirectResult.isError);
  assertEquals(instructor.googleId + ""String_Node_Str"",redirectResult.getStatusMessage());
  expectedLogSegment=""String_Node_Str"" + instructor.googleId + ""String_Node_Str""+ ""String_Node_Str""+ instructor.googleId+ ""String_Node_Str""+ instructor.key;
  AssertHelper.assertContains(expectedLogSegment,joinAction.getLogMessage());
  ______TS(""String_Node_Str"");
  InstructorAttributes instructor2=dataBundle.instructors.get(""String_Node_Str"");
  instructor2=instrDb.getInstructorForGoogleId(instructor2.courseId,instructor2.googleId);
  submissionParams=new String[]{Const.ParamsNames.REGKEY,StringHelper.encrypt(instructor2.key)};
  joinAction=getAction(submissionParams);
  redirectResult=(RedirectResult)joinAction.executeAndPostProcess();
  assertEquals(Const.ActionURIs.INSTRUCTOR_HOME_PAGE + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ instructor2.courseId+ ""String_Node_Str""+ instructor.googleId,redirectResult.getDestinationWithParams());
  assertTrue(redirectResult.isError);
  AssertHelper.assertContains(""String_Node_Str"",redirectResult.getStatusMessage());
  expectedLogSegment=""String_Node_Str"";
  AssertHelper.assertContains(expectedLogSegment,joinAction.getLogMessage());
  ______TS(""String_Node_Str"");
  instructor=new InstructorAttributes(""String_Node_Str"",instructor.courseId,""String_Node_Str"",""String_Node_Str"");
  InstructorsLogic.inst().addInstructor(instructor.courseId,instructor.name,instructor.email);
  AccountAttributes newInstructorAccount=new AccountAttributes(instructor.googleId,instructor.name,false,instructor.email,""String_Node_Str"");
  AccountsLogic.inst().createAccount(newInstructorAccount);
  InstructorAttributes newInstructor=instrDb.getInstructorForEmail(instructor.courseId,instructor.email);
  gaeSimulation.loginUser(instructor.googleId);
  submissionParams=new String[]{Const.ParamsNames.REGKEY,StringHelper.encrypt(newInstructor.key)};
  joinAction=getAction(submissionParams);
  redirectResult=(RedirectResult)joinAction.executeAndPostProcess();
  assertEquals(Const.ActionURIs.INSTRUCTOR_HOME_PAGE + ""String_Node_Str"" + ""String_Node_Str"",redirectResult.getDestinationWithParams());
  assertFalse(redirectResult.isError);
  assertEquals(""String_Node_Str"",redirectResult.getStatusMessage());
  InstructorAttributes retrievedInstructor=instrDb.getInstructorForEmail(instructor.courseId,instructor.email);
  assertEquals(instructor.googleId,retrievedInstructor.googleId);
  expectedLogSegment=""String_Node_Str"" + instructor.googleId + ""String_Node_Str""+ newInstructor.key;
  AssertHelper.assertContains(expectedLogSegment,joinAction.getLogMessage());
}",0.7770513675783856
62909,"@Test public void testAccessControl() throws Exception {
  String[] submissionParams=new String[]{Const.ParamsNames.REGKEY,""String_Node_Str""};
  verifyOnlyLoggedInUsersCanAccess(submissionParams);
}","@Test public void testAccessControl() throws Exception {
  String[] submissionParams=new String[]{Const.ParamsNames.REGKEY,invalidEncryptedKey};
  verifyOnlyLoggedInUsersCanAccess(submissionParams);
}",0.9095477386934674
62910,"public String getCourseInstitute(String courseId){
  CourseAttributes cd=new CoursesLogic().getCourse(courseId);
  List<InstructorAttributes> instructorList=InstructorsLogic.inst().getInstructorsForCourse(cd.id);
  Assumption.assertTrue(""String_Node_Str"" + cd.id,!instructorList.isEmpty());
  String institute=""String_Node_Str"";
  for (int i=0; i < instructorList.size(); i++) {
    AccountAttributes instructorAcc=accountsDb.getAccount(instructorList.get(i).googleId);
    if (instructorAcc != null) {
      institute=instructorAcc.institute;
      break;
    }
  }
  return institute;
}","public String getCourseInstitute(String courseId){
  CourseAttributes cd=new CoursesLogic().getCourse(courseId);
  List<InstructorAttributes> instructorList=InstructorsLogic.inst().getInstructorsForCourse(cd.id);
  Assumption.assertTrue(""String_Node_Str"" + cd.id,!instructorList.isEmpty());
  String institute=""String_Node_Str"";
  for (int i=0; i < instructorList.size(); i++) {
    String instructorGoogleId=instructorList.get(i).googleId;
    if (instructorGoogleId == null) {
      continue;
    }
    AccountAttributes instructorAcc=accountsDb.getAccount(instructorGoogleId);
    if (instructorAcc != null) {
      institute=instructorAcc.institute;
      break;
    }
  }
  Assumption.assertNotEmpty(""String_Node_Str"",institute);
  return institute;
}",0.8556547619047619
62911,"@Test public void testExecuteAndPostProcess() throws Exception {
  InstructorAttributes instructor1OfCourse1=dataBundle.instructors.get(""String_Node_Str"");
  StudentAttributes student1InCourse1=dataBundle.students.get(""String_Node_Str"");
  String instructorId=instructor1OfCourse1.googleId;
  String newStudentEmail=""String_Node_Str"";
  String newStudentTeam=""String_Node_Str"";
  String newStudentComments=""String_Node_Str"";
  String newStudentEmailToBeTrimmed=""String_Node_Str"";
  String newStudentTeamToBeTrimmed=""String_Node_Str"";
  String newStudentCommentsToBeTrimmed=""String_Node_Str"";
  gaeSimulation.loginAsInstructor(instructorId);
  ______TS(""String_Node_Str"");
  verifyAssumptionFailure();
  String[] invalidParams=new String[]{Const.ParamsNames.COURSE_ID,instructor1OfCourse1.courseId};
  verifyAssumptionFailure(invalidParams);
  invalidParams=new String[]{Const.ParamsNames.STUDENT_EMAIL,student1InCourse1.email};
  verifyAssumptionFailure(invalidParams);
  ______TS(""String_Node_Str"");
  String[] submissionParams=new String[]{Const.ParamsNames.COURSE_ID,instructor1OfCourse1.courseId,Const.ParamsNames.STUDENT_EMAIL,student1InCourse1.email,Const.ParamsNames.STUDENT_NAME,student1InCourse1.name,Const.ParamsNames.NEW_STUDENT_EMAIL,newStudentEmail,Const.ParamsNames.COMMENTS,newStudentComments,Const.ParamsNames.TEAM_NAME,newStudentTeam};
  InstructorCourseStudentDetailsEditSaveAction a=getAction(submissionParams);
  RedirectResult r=getRedirectResult(a);
  assertEquals(Const.ActionURIs.INSTRUCTOR_COURSE_DETAILS_PAGE + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",r.getDestinationWithParams());
  assertEquals(false,r.isError);
  assertEquals(Const.StatusMessages.STUDENT_EDITED,r.getStatusMessage());
  String expectedLogMessage=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + student1InCourse1.email + ""String_Node_Str""+ ""String_Node_Str""+ newStudentEmail+ ""String_Node_Str""+ newStudentTeam+ ""String_Node_Str""+ newStudentComments+ ""String_Node_Str"";
  assertEquals(expectedLogMessage,a.getLogMessage());
  ______TS(""String_Node_Str"");
  String invalidStudentEmail=""String_Node_Str"";
  submissionParams=new String[]{Const.ParamsNames.COURSE_ID,instructor1OfCourse1.courseId,Const.ParamsNames.STUDENT_EMAIL,newStudentEmail,Const.ParamsNames.STUDENT_NAME,student1InCourse1.name,Const.ParamsNames.NEW_STUDENT_EMAIL,invalidStudentEmail,Const.ParamsNames.COMMENTS,student1InCourse1.comments,Const.ParamsNames.TEAM_NAME,student1InCourse1.team};
  gaeSimulation.loginAsInstructor(instructorId);
  a=getAction(submissionParams);
  ShowPageResult result=getShowPageResult(a);
  assertEquals(Const.ViewURIs.INSTRUCTOR_COURSE_STUDENT_EDIT + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",result.getDestinationWithParams());
  assertEquals(true,result.isError);
  assertEquals(String.format(FieldValidator.EMAIL_ERROR_MESSAGE,invalidStudentEmail,FieldValidator.REASON_TOO_LONG),result.getStatusMessage());
  expectedLogMessage=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + String.format(FieldValidator.EMAIL_ERROR_MESSAGE,invalidStudentEmail,FieldValidator.REASON_TOO_LONG) + ""String_Node_Str"";
  assertEquals(expectedLogMessage,a.getLogMessage());
  ______TS(""String_Node_Str"");
  String takenStudentEmail=dataBundle.students.get(""String_Node_Str"").email;
  submissionParams=new String[]{Const.ParamsNames.COURSE_ID,instructor1OfCourse1.courseId,Const.ParamsNames.STUDENT_EMAIL,newStudentEmail,Const.ParamsNames.STUDENT_NAME,student1InCourse1.name,Const.ParamsNames.NEW_STUDENT_EMAIL,takenStudentEmail,Const.ParamsNames.COMMENTS,student1InCourse1.comments,Const.ParamsNames.TEAM_NAME,student1InCourse1.team};
  gaeSimulation.loginAsInstructor(instructorId);
  a=getAction(submissionParams);
  result=getShowPageResult(a);
  assertEquals(Const.ViewURIs.INSTRUCTOR_COURSE_STUDENT_EDIT + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",result.getDestinationWithParams());
  assertEquals(true,result.isError);
  assertEquals(String.format(FieldValidator.EMAIL_TAKEN_MESSAGE,dataBundle.students.get(""String_Node_Str"").name,takenStudentEmail),result.getStatusMessage());
  expectedLogMessage=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + String.format(FieldValidator.EMAIL_TAKEN_MESSAGE,dataBundle.students.get(""String_Node_Str"").name,takenStudentEmail) + ""String_Node_Str"";
  assertEquals(expectedLogMessage,a.getLogMessage());
}","@Test public void testExecuteAndPostProcess() throws Exception {
  InstructorAttributes instructor1OfCourse1=dataBundle.instructors.get(""String_Node_Str"");
  StudentAttributes student1InCourse1=dataBundle.students.get(""String_Node_Str"");
  String instructorId=instructor1OfCourse1.googleId;
  String newStudentEmail=""String_Node_Str"";
  String newStudentTeam=""String_Node_Str"";
  String newStudentComments=""String_Node_Str"";
  gaeSimulation.loginAsInstructor(instructorId);
  ______TS(""String_Node_Str"");
  verifyAssumptionFailure();
  String[] invalidParams=new String[]{Const.ParamsNames.COURSE_ID,instructor1OfCourse1.courseId};
  verifyAssumptionFailure(invalidParams);
  invalidParams=new String[]{Const.ParamsNames.STUDENT_EMAIL,student1InCourse1.email};
  verifyAssumptionFailure(invalidParams);
  ______TS(""String_Node_Str"");
  String[] submissionParams=new String[]{Const.ParamsNames.COURSE_ID,instructor1OfCourse1.courseId,Const.ParamsNames.STUDENT_EMAIL,student1InCourse1.email,Const.ParamsNames.STUDENT_NAME,student1InCourse1.name,Const.ParamsNames.NEW_STUDENT_EMAIL,newStudentEmail,Const.ParamsNames.COMMENTS,newStudentComments,Const.ParamsNames.TEAM_NAME,newStudentTeam};
  InstructorCourseStudentDetailsEditSaveAction a=getAction(submissionParams);
  RedirectResult r=getRedirectResult(a);
  assertEquals(Const.ActionURIs.INSTRUCTOR_COURSE_DETAILS_PAGE + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",r.getDestinationWithParams());
  assertEquals(false,r.isError);
  assertEquals(Const.StatusMessages.STUDENT_EDITED,r.getStatusMessage());
  String expectedLogMessage=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + student1InCourse1.email + ""String_Node_Str""+ ""String_Node_Str""+ newStudentEmail+ ""String_Node_Str""+ newStudentTeam+ ""String_Node_Str""+ newStudentComments+ ""String_Node_Str"";
  assertEquals(expectedLogMessage,a.getLogMessage());
  ______TS(""String_Node_Str"");
  String newStudentEmailToBeTrimmed=""String_Node_Str"";
  String newStudentTeamToBeTrimmed=""String_Node_Str"";
  String newStudentCommentsToBeTrimmed=""String_Node_Str"";
  String[] submissionParamsToBeTrimmed=new String[]{Const.ParamsNames.COURSE_ID,instructor1OfCourse1.courseId,Const.ParamsNames.STUDENT_EMAIL,newStudentEmail,Const.ParamsNames.STUDENT_NAME,student1InCourse1.name,Const.ParamsNames.NEW_STUDENT_EMAIL,newStudentEmailToBeTrimmed,Const.ParamsNames.COMMENTS,newStudentCommentsToBeTrimmed,Const.ParamsNames.TEAM_NAME,newStudentTeamToBeTrimmed};
  InstructorCourseStudentDetailsEditSaveAction aToBeTrimmed=getAction(submissionParamsToBeTrimmed);
  RedirectResult rToBeTrimmed=getRedirectResult(aToBeTrimmed);
  assertEquals(Const.ActionURIs.INSTRUCTOR_COURSE_DETAILS_PAGE + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",rToBeTrimmed.getDestinationWithParams());
  assertEquals(false,rToBeTrimmed.isError);
  assertEquals(Const.StatusMessages.STUDENT_EDITED,rToBeTrimmed.getStatusMessage());
  String expectedLogMessageToBeTrimmed=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + newStudentEmail + ""String_Node_Str""+ ""String_Node_Str""+ newStudentEmailToBeTrimmed.trim()+ ""String_Node_Str""+ newStudentTeamToBeTrimmed.trim()+ ""String_Node_Str""+ newStudentCommentsToBeTrimmed.trim()+ ""String_Node_Str"";
  assertEquals(expectedLogMessageToBeTrimmed,aToBeTrimmed.getLogMessage());
  ______TS(""String_Node_Str"");
  String invalidStudentEmail=""String_Node_Str"";
  submissionParams=new String[]{Const.ParamsNames.COURSE_ID,instructor1OfCourse1.courseId,Const.ParamsNames.STUDENT_EMAIL,newStudentEmail,Const.ParamsNames.STUDENT_NAME,student1InCourse1.name,Const.ParamsNames.NEW_STUDENT_EMAIL,invalidStudentEmail,Const.ParamsNames.COMMENTS,student1InCourse1.comments,Const.ParamsNames.TEAM_NAME,student1InCourse1.team};
  gaeSimulation.loginAsInstructor(instructorId);
  a=getAction(submissionParams);
  ShowPageResult result=getShowPageResult(a);
  assertEquals(Const.ViewURIs.INSTRUCTOR_COURSE_STUDENT_EDIT + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",result.getDestinationWithParams());
  assertEquals(true,result.isError);
  assertEquals(String.format(FieldValidator.EMAIL_ERROR_MESSAGE,invalidStudentEmail,FieldValidator.REASON_TOO_LONG),result.getStatusMessage());
  expectedLogMessage=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + String.format(FieldValidator.EMAIL_ERROR_MESSAGE,invalidStudentEmail,FieldValidator.REASON_TOO_LONG) + ""String_Node_Str"";
  assertEquals(expectedLogMessage,a.getLogMessage());
  ______TS(""String_Node_Str"");
  String takenStudentEmail=dataBundle.students.get(""String_Node_Str"").email;
  submissionParams=new String[]{Const.ParamsNames.COURSE_ID,instructor1OfCourse1.courseId,Const.ParamsNames.STUDENT_EMAIL,newStudentEmail,Const.ParamsNames.STUDENT_NAME,student1InCourse1.name,Const.ParamsNames.NEW_STUDENT_EMAIL,takenStudentEmail,Const.ParamsNames.COMMENTS,student1InCourse1.comments,Const.ParamsNames.TEAM_NAME,student1InCourse1.team};
  gaeSimulation.loginAsInstructor(instructorId);
  a=getAction(submissionParams);
  result=getShowPageResult(a);
  assertEquals(Const.ViewURIs.INSTRUCTOR_COURSE_STUDENT_EDIT + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",result.getDestinationWithParams());
  assertEquals(true,result.isError);
  assertEquals(String.format(FieldValidator.EMAIL_TAKEN_MESSAGE,dataBundle.students.get(""String_Node_Str"").name,takenStudentEmail),result.getStatusMessage());
  expectedLogMessage=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + String.format(FieldValidator.EMAIL_TAKEN_MESSAGE,dataBundle.students.get(""String_Node_Str"").name,takenStudentEmail) + ""String_Node_Str"";
  assertEquals(expectedLogMessage,a.getLogMessage());
}",0.8425741635863899
62912,"public void doGet(HttpServletRequest req,HttpServletResponse resp){
  Emails.EmailType typeOfMail=Emails.EmailType.valueOf(HttpRequestHelper.getValueFromRequestParameterMap(req,ParamsNames.EMAIL_TYPE));
  Assumption.assertNotNull(typeOfMail);
  EmailAction emailObj=null;
  int responseCode=Response.SC_OK;
switch (typeOfMail) {
case EVAL_CLOSING:
    emailObj=new EvaluationClosingMailAction(req);
  break;
case EVAL_OPENING:
emailObj=new EvaluationOpeningMailAction(req);
break;
case FEEDBACK_CLOSING:
emailObj=new FeedbackSessionClosingMailAction(req);
break;
case FEEDBACK_OPENING:
emailObj=new FeedbackSessionOpeningMailAction(req);
break;
case FEEDBACK_PUBLISHED:
emailObj=new FeedbackSessionPublishedMailAction(req);
break;
default :
log.severe(""String_Node_Str"");
responseCode=Response.SC_INTERNAL_SERVER_ERROR;
}
if (emailObj != null) {
emailObj.sendEmails();
}
resp.setStatus(responseCode);
}","public void doGet(HttpServletRequest req,HttpServletResponse resp){
  Emails.EmailType typeOfMail=Emails.EmailType.valueOf(HttpRequestHelper.getValueFromRequestParameterMap(req,ParamsNames.EMAIL_TYPE));
  Assumption.assertNotNull(typeOfMail);
  EmailAction emailObj=null;
  int responseCode=Response.SC_OK;
  log.info(""String_Node_Str"" + HttpRequestHelper.printRequestParameters(req));
switch (typeOfMail) {
case EVAL_CLOSING:
    emailObj=new EvaluationClosingMailAction(req);
  break;
case EVAL_OPENING:
emailObj=new EvaluationOpeningMailAction(req);
break;
case FEEDBACK_CLOSING:
emailObj=new FeedbackSessionClosingMailAction(req);
break;
case FEEDBACK_OPENING:
emailObj=new FeedbackSessionOpeningMailAction(req);
break;
case FEEDBACK_PUBLISHED:
emailObj=new FeedbackSessionPublishedMailAction(req);
break;
default :
log.severe(""String_Node_Str"");
responseCode=Response.SC_INTERNAL_SERVER_ERROR;
}
if (emailObj != null) {
emailObj.sendEmails();
}
resp.setStatus(responseCode);
}",0.9580456718003186
62913,"public String getDateInfo(){
  Calendar appCal=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  appCal.setTimeInMillis(time);
  return sdf.format(appCal.getTime());
}","public String getDateInfo(){
  Calendar appCal=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  sdf.setTimeZone(TimeZone.getTimeZone(Const.SystemParams.ADMIN_TIME_ZONE));
  appCal.setTimeInMillis(time);
  return sdf.format(appCal.getTime());
}",0.8084358523725835
62914,"@Test public void testExecuteAndPostProcess() throws Exception {
  InstructorAttributes instructor1ofCourse1=dataBundle.instructors.get(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  gaeSimulation.loginAsInstructor(instructor1ofCourse1.googleId);
  verifyAssumptionFailure();
  ______TS(""String_Node_Str"");
  String[] params=createParamsForTypicalFeedbackSession(instructor1ofCourse1.courseId,""String_Node_Str"");
  InstructorFeedbackAddAction a=getAction(params);
  RedirectResult rr=(RedirectResult)a.executeAndPostProcess();
  assertEquals(Const.ActionURIs.INSTRUCTOR_FEEDBACK_EDIT_PAGE + ""String_Node_Str"" + instructor1ofCourse1.courseId+ ""String_Node_Str""+ ""String_Node_Str""+ instructor1ofCourse1.googleId+ ""String_Node_Str""+ ""String_Node_Str"",rr.getDestinationWithParams());
  String expectedLogMessage=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  assertEquals(expectedLogMessage,a.getLogMessage());
  ______TS(""String_Node_Str"");
  a=getAction(params);
  ShowPageResult pr=(ShowPageResult)a.executeAndPostProcess();
  assertEquals(Const.ViewURIs.INSTRUCTOR_FEEDBACKS + ""String_Node_Str"",pr.getDestinationWithParams());
  assertEquals(true,pr.isError);
  assertEquals(Const.StatusMessages.FEEDBACK_SESSION_EXISTS,pr.getStatusMessage());
  ______TS(""String_Node_Str"");
  gaeSimulation.loginAsAdmin(""String_Node_Str"");
  params=createParamsForTypicalFeedbackSession(instructor1ofCourse1.courseId,""String_Node_Str"");
  params=addUserIdToParams(instructor1ofCourse1.googleId,params);
  a=getAction(params);
  rr=(RedirectResult)a.executeAndPostProcess();
  assertEquals(Const.ActionURIs.INSTRUCTOR_FEEDBACK_EDIT_PAGE + ""String_Node_Str"" + instructor1ofCourse1.courseId+ ""String_Node_Str""+ ""String_Node_Str""+ instructor1ofCourse1.googleId+ ""String_Node_Str""+ ""String_Node_Str"",rr.getDestinationWithParams());
  expectedLogMessage=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  assertEquals(expectedLogMessage,a.getLogMessage());
}","@Test public void testExecuteAndPostProcess() throws Exception {
  InstructorAttributes instructor1ofCourse1=dataBundle.instructors.get(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  gaeSimulation.loginAsInstructor(instructor1ofCourse1.googleId);
  verifyAssumptionFailure();
  ______TS(""String_Node_Str"");
  String[] params=createParamsForTypicalFeedbackSession(instructor1ofCourse1.courseId,""String_Node_Str"");
  InstructorFeedbackAddAction a=getAction(params);
  RedirectResult rr=(RedirectResult)a.executeAndPostProcess();
  assertEquals(Const.ActionURIs.INSTRUCTOR_FEEDBACK_EDIT_PAGE + ""String_Node_Str"" + instructor1ofCourse1.courseId+ ""String_Node_Str""+ ""String_Node_Str""+ instructor1ofCourse1.googleId+ ""String_Node_Str""+ ""String_Node_Str"",rr.getDestinationWithParams());
  String expectedLogMessage=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  assertEquals(expectedLogMessage,a.getLogMessage());
  ______TS(""String_Node_Str"");
  a=getAction(params);
  ShowPageResult pr=(ShowPageResult)a.executeAndPostProcess();
  assertEquals(Const.ViewURIs.INSTRUCTOR_FEEDBACKS + ""String_Node_Str"",pr.getDestinationWithParams());
  assertEquals(true,pr.isError);
  assertEquals(Const.StatusMessages.FEEDBACK_SESSION_EXISTS,pr.getStatusMessage());
  ______TS(""String_Node_Str"");
  params=createParamsForTypicalFeedbackSession(instructor1ofCourse1.courseId,""String_Node_Str"");
  a=getAction(params);
  rr=(RedirectResult)a.executeAndPostProcess();
  assertEquals(Const.ActionURIs.INSTRUCTOR_FEEDBACK_EDIT_PAGE + ""String_Node_Str"" + instructor1ofCourse1.courseId+ ""String_Node_Str""+ ""String_Node_Str""+ instructor1ofCourse1.googleId+ ""String_Node_Str""+ ""String_Node_Str"",rr.getDestinationWithParams());
  expectedLogMessage=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  assertEquals(expectedLogMessage,a.getLogMessage());
  ______TS(""String_Node_Str"");
  gaeSimulation.loginAsAdmin(""String_Node_Str"");
  params=createParamsForTypicalFeedbackSession(instructor1ofCourse1.courseId,""String_Node_Str"");
  params=addUserIdToParams(instructor1ofCourse1.googleId,params);
  a=getAction(params);
  rr=(RedirectResult)a.executeAndPostProcess();
  assertEquals(Const.ActionURIs.INSTRUCTOR_FEEDBACK_EDIT_PAGE + ""String_Node_Str"" + instructor1ofCourse1.courseId+ ""String_Node_Str""+ ""String_Node_Str""+ instructor1ofCourse1.googleId+ ""String_Node_Str""+ ""String_Node_Str"",rr.getDestinationWithParams());
  expectedLogMessage=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  assertEquals(expectedLogMessage,a.getLogMessage());
}",0.8172169811320755
62915,"@Test public void testAll(){
  testContent();
  testInputValidation();
  testCreateInstructorAction();
  testInputSanitization();
}","@Test public void testAll(){
  testContent();
  testInputValidation();
  testCreateInstructorAction();
}",0.8851063829787233
62916,"public static String printRequestParameters(HttpServletRequest request){
  String requestParameters=""String_Node_Str"";
  for (Enumeration<?> f=request.getParameterNames(); f.hasMoreElements(); ) {
    String paramet=new String(f.nextElement().toString());
    requestParameters+=paramet + ""String_Node_Str"";
    String[] parameterValues=request.getParameterValues(paramet);
    for (int j=0; j < parameterValues.length; j++) {
      requestParameters+=parameterValues[j] + ""String_Node_Str"";
    }
    requestParameters=requestParameters.substring(0,requestParameters.length() - 2) + ""String_Node_Str"";
  }
  if (requestParameters != ""String_Node_Str"") {
    requestParameters=requestParameters.substring(0,requestParameters.length() - 2);
  }
  requestParameters+=""String_Node_Str"";
  return requestParameters;
}","public static String printRequestParameters(HttpServletRequest request){
  String requestParameters=""String_Node_Str"";
  for (Enumeration<?> f=request.getParameterNames(); f.hasMoreElements(); ) {
    String paramet=new String(f.nextElement().toString());
    requestParameters+=paramet + ""String_Node_Str"";
    String[] parameterValues=request.getParameterValues(paramet);
    for (int j=0; j < parameterValues.length; j++) {
      requestParameters+=parameterValues[j] + ""String_Node_Str"";
    }
    requestParameters=requestParameters.substring(0,requestParameters.length() - 2) + ""String_Node_Str"";
  }
  if (!requestParameters.equals(""String_Node_Str"")) {
    requestParameters=requestParameters.substring(0,requestParameters.length() - 2);
  }
  requestParameters+=""String_Node_Str"";
  return requestParameters;
}",0.971813725490196
62917,"private void waitUntilDeletePersists(DataBundle dataBundle){
  for (  AccountAttributes a : dataBundle.accounts.values()) {
    Object retreived=null;
    int retryCount=0;
    while (retryCount < MAX_RETRY_COUNT_FOR_DELETE_CHECKING) {
      retreived=this.getAccount(a.googleId);
      if (retreived == null) {
        break;
      }
 else {
        retryCount++;
        ThreadHelper.waitFor(WAIT_DURATION_FOR_DELETE_CHECKING);
      }
    }
    if (retreived != null) {
      log.warning(""String_Node_Str"" + a.toString());
    }
  }
  for (  CourseAttributes c : dataBundle.courses.values()) {
    Object retreived=null;
    int retryCount=0;
    while (retryCount < MAX_RETRY_COUNT_FOR_DELETE_CHECKING) {
      retreived=this.getCourse(c.id);
      if (retreived == null) {
        break;
      }
 else {
        retryCount++;
        ThreadHelper.waitFor(WAIT_DURATION_FOR_DELETE_CHECKING);
      }
    }
    if (retreived != null) {
      log.warning(""String_Node_Str"" + c.toString());
    }
  }
  for (  EvaluationAttributes e : dataBundle.evaluations.values()) {
    Object retreived=null;
    int retryCount=0;
    while (retryCount < MAX_RETRY_COUNT_FOR_DELETE_CHECKING) {
      retreived=this.getEvaluation(e.courseId,e.name);
      if (retreived == null) {
        break;
      }
 else {
        retryCount++;
        if (retryCount % 10 == 0) {
          log.info(""String_Node_Str"");
        }
        ;
        ThreadHelper.waitFor(WAIT_DURATION_FOR_DELETE_CHECKING);
      }
    }
    if (retreived != null) {
      log.warning(""String_Node_Str"" + e.toString());
    }
  }
  for (  FeedbackSessionAttributes f : dataBundle.feedbackSessions.values()) {
    Object retreived=null;
    int retryCount=0;
    while (retryCount < MAX_RETRY_COUNT_FOR_DELETE_CHECKING) {
      retreived=this.getFeedbackSession(f.courseId,f.feedbackSessionName);
      if (retreived == null) {
        break;
      }
 else {
        retryCount++;
        if (retryCount % 10 == 0) {
          log.info(""String_Node_Str"");
        }
        ;
        ThreadHelper.waitFor(WAIT_DURATION_FOR_DELETE_CHECKING);
      }
    }
    if (retreived != null) {
      log.warning(""String_Node_Str"" + f.toString());
    }
  }
  for (  SubmissionAttributes s : dataBundle.submissions.values()) {
    Object retreived=null;
    int retryCount=0;
    while (retryCount < MAX_RETRY_COUNT_FOR_DELETE_CHECKING) {
      retreived=this.getSubmission(s.course,s.evaluation,s.reviewer,s.reviewee);
      if (retreived == null) {
        break;
      }
 else {
        retryCount++;
        ThreadHelper.waitFor(WAIT_DURATION_FOR_DELETE_CHECKING);
      }
    }
    if (retreived != null) {
      log.warning(""String_Node_Str"" + Utils.getTeammatesGson().toJson(s));
    }
  }
  for (  StudentAttributes s : dataBundle.students.values()) {
    Object retreived=null;
    int retryCount=0;
    while (retryCount < MAX_RETRY_COUNT_FOR_DELETE_CHECKING) {
      retreived=this.getStudentForEmail(s.course,s.email);
      if (retreived == null) {
        break;
      }
 else {
        retryCount++;
        ThreadHelper.waitFor(WAIT_DURATION_FOR_DELETE_CHECKING);
      }
    }
    if (retreived != null) {
      log.warning(""String_Node_Str"" + s.toString());
    }
  }
  for (  InstructorAttributes i : dataBundle.instructors.values()) {
    Object retreived=null;
    int retryCount=0;
    while (retryCount < MAX_RETRY_COUNT_FOR_DELETE_CHECKING) {
      retreived=this.getInstructorForGoogleId(i.courseId,i.googleId);
      if (retreived == null) {
        break;
      }
 else {
        retryCount++;
        ThreadHelper.waitFor(WAIT_DURATION_FOR_DELETE_CHECKING);
      }
    }
    if (retreived != null) {
      log.warning(""String_Node_Str"" + i.toString());
    }
  }
}","private void waitUntilDeletePersists(DataBundle dataBundle){
  for (  AccountAttributes a : dataBundle.accounts.values()) {
    Object retreived=null;
    int retryCount=0;
    while (retryCount < MAX_RETRY_COUNT_FOR_DELETE_CHECKING) {
      retreived=this.getAccount(a.googleId);
      if (retreived == null) {
        break;
      }
 else {
        retryCount++;
        ThreadHelper.waitFor(WAIT_DURATION_FOR_DELETE_CHECKING);
      }
    }
    if (retreived != null) {
      log.warning(""String_Node_Str"" + a.toString());
    }
  }
  for (  CourseAttributes c : dataBundle.courses.values()) {
    Object retreived=null;
    int retryCount=0;
    while (retryCount < MAX_RETRY_COUNT_FOR_DELETE_CHECKING) {
      retreived=this.getCourse(c.id);
      if (retreived == null) {
        break;
      }
 else {
        retryCount++;
        ThreadHelper.waitFor(WAIT_DURATION_FOR_DELETE_CHECKING);
      }
    }
    if (retreived != null) {
      log.warning(""String_Node_Str"" + c.toString());
    }
  }
  for (  EvaluationAttributes e : dataBundle.evaluations.values()) {
    Object retreived=null;
    int retryCount=0;
    while (retryCount < MAX_RETRY_COUNT_FOR_DELETE_CHECKING) {
      retreived=this.getEvaluation(e.courseId,e.name);
      if (retreived == null) {
        break;
      }
 else {
        retryCount++;
        if (retryCount % 10 == 0) {
          log.info(""String_Node_Str"");
        }
        ThreadHelper.waitFor(WAIT_DURATION_FOR_DELETE_CHECKING);
      }
    }
    if (retreived != null) {
      log.warning(""String_Node_Str"" + e.toString());
    }
  }
  for (  FeedbackSessionAttributes f : dataBundle.feedbackSessions.values()) {
    Object retreived=null;
    int retryCount=0;
    while (retryCount < MAX_RETRY_COUNT_FOR_DELETE_CHECKING) {
      retreived=this.getFeedbackSession(f.courseId,f.feedbackSessionName);
      if (retreived == null) {
        break;
      }
 else {
        retryCount++;
        if (retryCount % 10 == 0) {
          log.info(""String_Node_Str"");
        }
        ThreadHelper.waitFor(WAIT_DURATION_FOR_DELETE_CHECKING);
      }
    }
    if (retreived != null) {
      log.warning(""String_Node_Str"" + f.toString());
    }
  }
  for (  SubmissionAttributes s : dataBundle.submissions.values()) {
    Object retreived=null;
    int retryCount=0;
    while (retryCount < MAX_RETRY_COUNT_FOR_DELETE_CHECKING) {
      retreived=this.getSubmission(s.course,s.evaluation,s.reviewer,s.reviewee);
      if (retreived == null) {
        break;
      }
 else {
        retryCount++;
        ThreadHelper.waitFor(WAIT_DURATION_FOR_DELETE_CHECKING);
      }
    }
    if (retreived != null) {
      log.warning(""String_Node_Str"" + Utils.getTeammatesGson().toJson(s));
    }
  }
  for (  StudentAttributes s : dataBundle.students.values()) {
    Object retreived=null;
    int retryCount=0;
    while (retryCount < MAX_RETRY_COUNT_FOR_DELETE_CHECKING) {
      retreived=this.getStudentForEmail(s.course,s.email);
      if (retreived == null) {
        break;
      }
 else {
        retryCount++;
        ThreadHelper.waitFor(WAIT_DURATION_FOR_DELETE_CHECKING);
      }
    }
    if (retreived != null) {
      log.warning(""String_Node_Str"" + s.toString());
    }
  }
  for (  InstructorAttributes i : dataBundle.instructors.values()) {
    Object retreived=null;
    int retryCount=0;
    while (retryCount < MAX_RETRY_COUNT_FOR_DELETE_CHECKING) {
      retreived=this.getInstructorForGoogleId(i.courseId,i.googleId);
      if (retreived == null) {
        break;
      }
 else {
        retryCount++;
        ThreadHelper.waitFor(WAIT_DURATION_FOR_DELETE_CHECKING);
      }
    }
    if (retreived != null) {
      log.warning(""String_Node_Str"" + i.toString());
    }
  }
}",0.9973183159023868
62918,"private List<FeedbackQuestionAttributes> getUnstolenTeamQuestions(String feedbackSessionName,String courseId,String studentEmail) throws EntityDoesNotExistException {
  List<FeedbackQuestionAttributes> teamQuestions=fqDb.getFeedbackQuestionsForGiverType(feedbackSessionName,courseId,TEAMS);
  List<FeedbackQuestionAttributes> unstolenQuestions=new ArrayList<FeedbackQuestionAttributes>();
  StudentAttributes student=studentsLogic.getStudentForEmail(courseId,studentEmail);
  Assumption.assertNotNull(""String_Node_Str"",student);
  for (  FeedbackQuestionAttributes question : teamQuestions) {
    if (isQuestionAnsweredByTeam(question,student.team) == true) {
      if (frLogic.getFeedbackResponsesFromGiverForQuestion(question.getId(),studentEmail).isEmpty() == false) {
        unstolenQuestions.add(question);
      }
    }
 else {
      unstolenQuestions.add(question);
    }
  }
  return unstolenQuestions;
}","private List<FeedbackQuestionAttributes> getUnstolenTeamQuestions(String feedbackSessionName,String courseId,String studentEmail) throws EntityDoesNotExistException {
  List<FeedbackQuestionAttributes> teamQuestions=fqDb.getFeedbackQuestionsForGiverType(feedbackSessionName,courseId,TEAMS);
  List<FeedbackQuestionAttributes> unstolenQuestions=new ArrayList<FeedbackQuestionAttributes>();
  StudentAttributes student=studentsLogic.getStudentForEmail(courseId,studentEmail);
  Assumption.assertNotNull(""String_Node_Str"",student);
  for (  FeedbackQuestionAttributes question : teamQuestions) {
    if (isQuestionAnsweredByTeam(question,student.team)) {
      if (frLogic.getFeedbackResponsesFromGiverForQuestion(question.getId(),studentEmail).isEmpty() == false) {
        unstolenQuestions.add(question);
      }
    }
 else {
      unstolenQuestions.add(question);
    }
  }
  return unstolenQuestions;
}",0.7733773377337734
62919,"private boolean isFeedbackSessionViewableTo(FeedbackSessionAttributes session,String userEmail) throws EntityDoesNotExistException {
  if (fsDb.getFeedbackSession(session.feedbackSessionName,session.courseId) == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"");
  }
  if (session.feedbackSessionType == FeedbackSessionType.PRIVATE) {
    if (session.creatorEmail.equals(userEmail)) {
      return true;
    }
 else {
      return false;
    }
  }
  InstructorAttributes instructor=instructorsLogic.getInstructorForEmail(session.courseId,userEmail);
  if (instructor != null) {
    if (instructorsLogic.isInstructorOfCourse(instructor.googleId,session.courseId)) {
      return true;
    }
  }
  if (session.isPublished() == false) {
    List<FeedbackQuestionAttributes> questions=fqLogic.getFeedbackQuestionsForUser(session.feedbackSessionName,session.courseId,userEmail);
    if (questions.isEmpty() == false) {
      return true;
    }
  }
 else {
    try {
      getFeedbackSessionResultsForUser(session.feedbackSessionName,session.courseId,userEmail);
    }
 catch (    UnauthorizedAccessException e) {
      return false;
    }
    return true;
  }
  return false;
}","private boolean isFeedbackSessionViewableTo(FeedbackSessionAttributes session,String userEmail) throws EntityDoesNotExistException {
  if (fsDb.getFeedbackSession(session.feedbackSessionName,session.courseId) == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"");
  }
  if (session.feedbackSessionType == FeedbackSessionType.PRIVATE) {
    return session.creatorEmail.equals(userEmail);
  }
  InstructorAttributes instructor=instructorsLogic.getInstructorForEmail(session.courseId,userEmail);
  if (instructor != null) {
    return instructorsLogic.isInstructorOfCourse(instructor.googleId,session.courseId);
  }
  if (session.isPublished() == false) {
    List<FeedbackQuestionAttributes> questions=fqLogic.getFeedbackQuestionsForUser(session.feedbackSessionName,session.courseId,userEmail);
    if (questions.isEmpty() == false) {
      return true;
    }
  }
 else {
    try {
      getFeedbackSessionResultsForUser(session.feedbackSessionName,session.courseId,userEmail);
    }
 catch (    UnauthorizedAccessException e) {
      return false;
    }
    return true;
  }
  return false;
}",0.9521739130434784
62920,"public List<FeedbackSessionAttributes> getFeedbackSessionsForUserInCourse(String courseId,String userEmail) throws EntityDoesNotExistException {
  if (coursesLogic.isCoursePresent(courseId) == false) {
    throw new EntityDoesNotExistException(""String_Node_Str"");
  }
  List<FeedbackSessionAttributes> sessions=fsDb.getFeedbackSessionsForCourse(courseId);
  List<FeedbackSessionAttributes> viewableSessions=new ArrayList<FeedbackSessionAttributes>();
  for (  FeedbackSessionAttributes session : sessions) {
    if (isFeedbackSessionViewableTo(session,userEmail) == true) {
      viewableSessions.add(session);
      log.info(session.getIdentificationString() + ""String_Node_Str"");
    }
  }
  return viewableSessions;
}","public List<FeedbackSessionAttributes> getFeedbackSessionsForUserInCourse(String courseId,String userEmail) throws EntityDoesNotExistException {
  if (coursesLogic.isCoursePresent(courseId) == false) {
    throw new EntityDoesNotExistException(""String_Node_Str"");
  }
  List<FeedbackSessionAttributes> sessions=fsDb.getFeedbackSessionsForCourse(courseId);
  List<FeedbackSessionAttributes> viewableSessions=new ArrayList<FeedbackSessionAttributes>();
  for (  FeedbackSessionAttributes session : sessions) {
    if (isFeedbackSessionViewableTo(session,userEmail)) {
      viewableSessions.add(session);
      log.info(session.getIdentificationString() + ""String_Node_Str"");
    }
  }
  return viewableSessions;
}",0.994413407821229
62921,"private void makeEmailStateConsistent(FeedbackSessionAttributes oldSession,FeedbackSessionAttributes newSession){
  if (oldSession.sentOpenEmail == true && newSession.startTime.after(oldSession.startTime) && newSession.isOpened() == false) {
    newSession.sentOpenEmail=false;
  }
 else {
    newSession.sentOpenEmail=oldSession.sentOpenEmail;
  }
  if (oldSession.sentPublishedEmail == true && newSession.resultsVisibleFromTime.after(oldSession.resultsVisibleFromTime) && newSession.isPublished() == false) {
    newSession.sentPublishedEmail=false;
  }
 else {
    newSession.sentPublishedEmail=oldSession.sentPublishedEmail;
  }
}","private void makeEmailStateConsistent(FeedbackSessionAttributes oldSession,FeedbackSessionAttributes newSession){
  if (oldSession.sentOpenEmail && newSession.startTime.after(oldSession.startTime) && newSession.isOpened() == false) {
    newSession.sentOpenEmail=false;
  }
 else {
    newSession.sentOpenEmail=oldSession.sentOpenEmail;
  }
  if (oldSession.sentPublishedEmail && newSession.resultsVisibleFromTime.after(oldSession.resultsVisibleFromTime) && newSession.isPublished() == false) {
    newSession.sentPublishedEmail=false;
  }
 else {
    newSession.sentPublishedEmail=oldSession.sentPublishedEmail;
  }
}",0.987220447284345
62922,"/** 
 * Preconditions:  <br> *   {@code accountToAdd} is not null and has valid data.
 */
public void createAccount(AccountAttributes accountToAdd) throws InvalidParametersException {
  try {
    createEntity((EntityAttributes)accountToAdd);
  }
 catch (  EntityAlreadyExistsException e) {
    updateAccount(accountToAdd);
  }
}","/** 
 * Preconditions:  <br> *   {@code accountToAdd} is not null and has valid data.
 */
public void createAccount(AccountAttributes accountToAdd) throws InvalidParametersException {
  try {
    createEntity(accountToAdd);
  }
 catch (  EntityAlreadyExistsException e) {
    updateAccount(accountToAdd);
  }
}",0.9717868338557992
62923,"private static Action getAction(String uri){
  Class<? extends Action> controllerClass=actionMappings.get(uri);
  if (controllerClass == null) {
    return new NonExistentAction();
  }
  try {
    return (Action)controllerClass.newInstance();
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + uri);
  }
}","private static Action getAction(String uri){
  Class<? extends Action> controllerClass=actionMappings.get(uri);
  if (controllerClass == null) {
    return new NonExistentAction();
  }
  try {
    return controllerClass.newInstance();
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + uri);
  }
}",0.987878787878788
62924,"@SuppressWarnings(""String_Node_Str"") private List<StudentAttributes>[] separateStudents(List<StudentAttributes> students){
  if (students == null)   return (List<StudentAttributes>[])new List[6];
  List<StudentAttributes>[] lists=(List<StudentAttributes>[])new List[6];
  int prevIdx=0;
  int nextIdx=0;
  int id=0;
  for (  StudentAttributes student : students) {
    if (student.comments == null)     student.comments=""String_Node_Str"";
    if (student.team == null)     student.team=""String_Node_Str"";
    while (student.updateStatus.numericRepresentation > id) {
      lists[id]=students.subList(prevIdx,nextIdx);
      id++;
      prevIdx=nextIdx;
    }
    nextIdx++;
  }
  while (id < 6) {
    lists[id++]=students.subList(prevIdx,nextIdx);
    StudentAttributes.sortByNameAndThenByEmail(lists[id - 1]);
    prevIdx=nextIdx;
  }
  return lists;
}","@SuppressWarnings(""String_Node_Str"") private List<StudentAttributes>[] separateStudents(List<StudentAttributes> students){
  if (students == null)   return new List[6];
  List<StudentAttributes>[] lists=new List[6];
  int prevIdx=0;
  int nextIdx=0;
  int id=0;
  for (  StudentAttributes student : students) {
    if (student.comments == null)     student.comments=""String_Node_Str"";
    if (student.team == null)     student.team=""String_Node_Str"";
    while (student.updateStatus.numericRepresentation > id) {
      lists[id]=students.subList(prevIdx,nextIdx);
      id++;
      prevIdx=nextIdx;
    }
    nextIdx++;
  }
  while (id < 6) {
    lists[id++]=students.subList(prevIdx,nextIdx);
    StudentAttributes.sortByNameAndThenByEmail(lists[id - 1]);
    prevIdx=nextIdx;
  }
  return lists;
}",0.940677966101695
62925,"@Override protected ActionResult execute() throws EntityDoesNotExistException, InvalidParametersException {
  String courseId=getRequestParam(Const.ParamsNames.COURSE_ID);
  Assumption.assertNotNull(courseId);
  String evalName=getRequestParam(Const.ParamsNames.EVALUATION_NAME);
  Assumption.assertNotNull(evalName);
  new GateKeeper().verifyAccessible(logic.getInstructorForGoogleId(courseId,account.googleId),logic.getEvaluation(courseId,evalName));
  InstructorEvalEditPageData data=new InstructorEvalEditPageData(account);
  data.evaluation=logic.getEvaluation(courseId,evalName);
  if (data.evaluation == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + evalName + ""String_Node_Str""+ courseId+ ""String_Node_Str"");
  }
  statusToAdmin=""String_Node_Str"" + data.evaluation.name + ""String_Node_Str""+ data.evaluation.courseId+ ""String_Node_Str""+ ""String_Node_Str""+ data.evaluation.startTime+ ""String_Node_Str""+ data.evaluation.endTime+ ""String_Node_Str""+ ""String_Node_Str""+ (data.evaluation.p2pEnabled == true ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ data.evaluation.instructions;
  return createShowPageResult(Const.ViewURIs.INSTRUCTOR_EVAL_EDIT,data);
}","@Override protected ActionResult execute() throws EntityDoesNotExistException, InvalidParametersException {
  String courseId=getRequestParam(Const.ParamsNames.COURSE_ID);
  Assumption.assertNotNull(courseId);
  String evalName=getRequestParam(Const.ParamsNames.EVALUATION_NAME);
  Assumption.assertNotNull(evalName);
  new GateKeeper().verifyAccessible(logic.getInstructorForGoogleId(courseId,account.googleId),logic.getEvaluation(courseId,evalName));
  InstructorEvalEditPageData data=new InstructorEvalEditPageData(account);
  data.evaluation=logic.getEvaluation(courseId,evalName);
  if (data.evaluation == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + evalName + ""String_Node_Str""+ courseId+ ""String_Node_Str"");
  }
  statusToAdmin=""String_Node_Str"" + data.evaluation.name + ""String_Node_Str""+ data.evaluation.courseId+ ""String_Node_Str""+ ""String_Node_Str""+ data.evaluation.startTime+ ""String_Node_Str""+ data.evaluation.endTime+ ""String_Node_Str""+ ""String_Node_Str""+ (data.evaluation.p2pEnabled ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ data.evaluation.instructions;
  return createShowPageResult(Const.ViewURIs.INSTRUCTOR_EVAL_EDIT,data);
}",0.9966471081307628
62926,"/** 
 * Prints the list of normalized points from the given list of submission data. It will be colorized and printed descending.
 */
public static String getPointsList(List<SubmissionAttributes> subs,final boolean normalized){
  String result=""String_Node_Str"";
  Collections.sort(subs,new Comparator<SubmissionAttributes>(){
    @Override public int compare(    SubmissionAttributes s1,    SubmissionAttributes s2){
      if (normalized)       return Integer.valueOf(s2.details.normalizedToInstructor).compareTo(s1.details.normalizedToInstructor);
 else       return Integer.valueOf(s2.points).compareTo(s1.points);
    }
  }
);
  for (  SubmissionAttributes sub : subs) {
    if (sub.reviewee.equals(sub.reviewer))     continue;
    if (result != ""String_Node_Str"")     result+=""String_Node_Str"";
    if (normalized) {
      result+=getPointsAsColorizedHtml(sub.details.normalizedToInstructor);
    }
 else {
      result+=getPointsAsColorizedHtml(sub.points);
    }
  }
  return result;
}","/** 
 * Prints the list of normalized points from the given list of submission data. It will be colorized and printed descending.
 */
public static String getPointsList(List<SubmissionAttributes> subs,final boolean normalized){
  String result=""String_Node_Str"";
  Collections.sort(subs,new Comparator<SubmissionAttributes>(){
    @Override public int compare(    SubmissionAttributes s1,    SubmissionAttributes s2){
      if (normalized)       return Integer.valueOf(s2.details.normalizedToInstructor).compareTo(s1.details.normalizedToInstructor);
 else       return Integer.valueOf(s2.points).compareTo(s1.points);
    }
  }
);
  for (  SubmissionAttributes sub : subs) {
    if (sub.reviewee.equals(sub.reviewer))     continue;
    if (!result.isEmpty())     result+=""String_Node_Str"";
    if (normalized) {
      result+=getPointsAsColorizedHtml(sub.details.normalizedToInstructor);
    }
 else {
      result+=getPointsAsColorizedHtml(sub.points);
    }
  }
  return result;
}",0.9787234042553192
62927,"/** 
 * @return The ""normalized-for-student-view"" points of the given submission list, sorted in descending order, formatted as a comma  separated and colorized string. Excludes self-rating.
 */
public static String getNormalizedToStudentsPointsList(final List<SubmissionAttributes> subs){
  String result=""String_Node_Str"";
  List<SubmissionAttributes> tempSubs=new ArrayList<SubmissionAttributes>(subs);
  Collections.sort(tempSubs,new Comparator<SubmissionAttributes>(){
    @Override public int compare(    SubmissionAttributes s1,    SubmissionAttributes s2){
      return Integer.valueOf(s2.details.normalizedToStudent).compareTo(s1.details.normalizedToStudent);
    }
  }
);
  for (  SubmissionAttributes sub : tempSubs) {
    if (sub.reviewee.equals(sub.reviewer))     continue;
    if (result != ""String_Node_Str"")     result+=""String_Node_Str"";
    result+=InstructorEvalResultsPageData.getPointsAsColorizedHtml(sub.details.normalizedToStudent);
  }
  return result;
}","/** 
 * @return The ""normalized-for-student-view"" points of the given submission list, sorted in descending order, formatted as a comma  separated and colorized string. Excludes self-rating.
 */
public static String getNormalizedToStudentsPointsList(final List<SubmissionAttributes> subs){
  String result=""String_Node_Str"";
  List<SubmissionAttributes> tempSubs=new ArrayList<SubmissionAttributes>(subs);
  Collections.sort(tempSubs,new Comparator<SubmissionAttributes>(){
    @Override public int compare(    SubmissionAttributes s1,    SubmissionAttributes s2){
      return Integer.valueOf(s2.details.normalizedToStudent).compareTo(s1.details.normalizedToStudent);
    }
  }
);
  for (  SubmissionAttributes sub : tempSubs) {
    if (sub.reviewee.equals(sub.reviewer))     continue;
    if (!result.isEmpty())     result+=""String_Node_Str"";
    result+=InstructorEvalResultsPageData.getPointsAsColorizedHtml(sub.details.normalizedToStudent);
  }
  return result;
}",0.9784172661870504
62928,"private static void appendInstitutionForAccounts(){
  String query=""String_Node_Str"" + Account.class.getName() + ""String_Node_Str"";
  @SuppressWarnings(""String_Node_Str"") List<Account> instructorAccounts=(List<Account>)pm.newQuery(query).execute();
  HashMap<String,String> instructorInstitutions=new HashMap<String,String>();
  for (  Account a : instructorAccounts) {
    if (a.getInstitute() == null || a.getInstitute().isEmpty()) {
      a.setInstitute(""String_Node_Str"");
    }
    instructorInstitutions.put(a.getGoogleId(),a.getInstitute());
  }
  System.out.println(""String_Node_Str"" + instructorInstitutions.size());
  query=""String_Node_Str"" + Instructor.class.getName();
  @SuppressWarnings(""String_Node_Str"") List<Instructor> instructors=(List<Instructor>)pm.newQuery(query).execute();
  HashMap<String,String> courseInstitutions=new HashMap<String,String>();
  for (  Instructor i : instructors) {
    courseInstitutions.put(i.getCourseId(),instructorInstitutions.get(i.getGoogleId()));
  }
  System.out.println(""String_Node_Str"" + courseInstitutions.size());
  query=""String_Node_Str"" + Student.class.getName() + ""String_Node_Str"";
  @SuppressWarnings(""String_Node_Str"") List<Student> students=(List<Student>)pm.newQuery(query).execute();
  HashMap<String,String> studentInstitutions=new HashMap<String,String>();
  for (  Student s : students) {
    studentInstitutions.put(s.getID(),courseInstitutions.get(s.getCourseID()));
  }
  System.out.println(""String_Node_Str"" + studentInstitutions.size());
  int count=0;
  for (  String id : studentInstitutions.keySet()) {
    query=""String_Node_Str"" + Account.class.getName() + ""String_Node_Str""+ id+ ""String_Node_Str"";
    @SuppressWarnings(""String_Node_Str"") List<Account> studentAccounts=(List<Account>)pm.newQuery(query).execute();
    if (studentAccounts.size() > 0) {
      Account a=studentAccounts.get(0);
      if (a.getInstitute() == null || a.getInstitute().equals(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"" + studentInstitutions.get(a.getGoogleId()) + ""String_Node_Str""+ a.getGoogleId());
        if (!isTrial) {
          Account newA=new Account(a.getGoogleId(),a.getName(),false,a.getEmail(),studentInstitutions.get(a.getGoogleId()));
          pm.deletePersistent(a);
          pm.makePersistent(newA);
        }
        count++;
      }
    }
  }
  System.out.println(""String_Node_Str"" + count + ""String_Node_Str"");
}","private static void appendInstitutionForAccounts(){
  String query=""String_Node_Str"" + Account.class.getName() + ""String_Node_Str"";
  @SuppressWarnings(""String_Node_Str"") List<Account> instructorAccounts=(List<Account>)pm.newQuery(query).execute();
  HashMap<String,String> instructorInstitutions=new HashMap<String,String>();
  for (  Account a : instructorAccounts) {
    if (a.getInstitute() == null || a.getInstitute().isEmpty()) {
      a.setInstitute(""String_Node_Str"");
    }
    instructorInstitutions.put(a.getGoogleId(),a.getInstitute());
  }
  System.out.println(""String_Node_Str"" + instructorInstitutions.size());
  query=""String_Node_Str"" + Instructor.class.getName();
  @SuppressWarnings(""String_Node_Str"") List<Instructor> instructors=(List<Instructor>)pm.newQuery(query).execute();
  HashMap<String,String> courseInstitutions=new HashMap<String,String>();
  for (  Instructor i : instructors) {
    courseInstitutions.put(i.getCourseId(),instructorInstitutions.get(i.getGoogleId()));
  }
  System.out.println(""String_Node_Str"" + courseInstitutions.size());
  query=""String_Node_Str"" + Student.class.getName() + ""String_Node_Str"";
  @SuppressWarnings(""String_Node_Str"") List<Student> students=(List<Student>)pm.newQuery(query).execute();
  HashMap<String,String> studentInstitutions=new HashMap<String,String>();
  for (  Student s : students) {
    studentInstitutions.put(s.getID(),courseInstitutions.get(s.getCourseID()));
  }
  System.out.println(""String_Node_Str"" + studentInstitutions.size());
  int count=0;
  for (  String id : studentInstitutions.keySet()) {
    query=""String_Node_Str"" + Account.class.getName() + ""String_Node_Str""+ id+ ""String_Node_Str"";
    @SuppressWarnings(""String_Node_Str"") List<Account> studentAccounts=(List<Account>)pm.newQuery(query).execute();
    if (studentAccounts.size() > 0) {
      Account a=studentAccounts.get(0);
      if (a.getInstitute() == null || a.getInstitute().equals(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"" + studentInstitutions.get(a.getGoogleId()) + ""String_Node_Str""+ a.getGoogleId()+ ""String_Node_Str"");
        if (!isTrial) {
          a.setInstitute(studentInstitutions.get(a.getGoogleId()));
        }
        count++;
      }
    }
  }
  System.out.println(""String_Node_Str"" + count + ""String_Node_Str"");
  pm.flush();
  pm.close();
}",0.9476780836310148
62929,"protected void doOperation(){
  appendInstitutionForAccounts();
}","protected void doOperation(){
  setInstructorStatusForInstructorAccounts();
}",0.7746478873239436
62930,"private String fillUpJoinFragment(StudentData s,String emailBody){
  emailBody=emailBody.replace(""String_Node_Str"",Common.STUDENT_EMAIL_FRAGMENT_COURSE_JOIN);
  String key;
  key=Common.encrypt(s.key);
  emailBody=emailBody.replace(""String_Node_Str"",key);
  String joinUrl=Common.TEAMMATES_APP_URL + Common.PAGE_STUDENT_JOIN_COURSE;
  joinUrl=Common.addParamToUrl(joinUrl,Common.PARAM_REGKEY,s.key);
  emailBody=emailBody.replace(""String_Node_Str"",joinUrl);
  return emailBody;
}","private String fillUpJoinFragment(StudentData s,String emailBody){
  emailBody=emailBody.replace(""String_Node_Str"",Common.STUDENT_EMAIL_FRAGMENT_COURSE_JOIN);
  String key;
  key=Common.encrypt(s.key);
  emailBody=emailBody.replace(""String_Node_Str"",key);
  String joinUrl=Common.TEAMMATES_APP_URL + Common.PAGE_STUDENT_JOIN_COURSE;
  joinUrl=Common.addParamToUrl(joinUrl,Common.PARAM_REGKEY,key);
  emailBody=emailBody.replace(""String_Node_Str"",joinUrl);
  return emailBody;
}",0.997907949790795
62931,"@Test public void testGetKeyForStudent() throws InvalidParametersException {
  for (int i=0; i < 100; i++) {
    StudentData student=new StudentData(""String_Node_Str"" + Math.random() * 100 + ""String_Node_Str"",""String_Node_Str"");
    BackDoor.createStudent(student);
    String key=BackDoor.getKeyForStudent(student.course,student.email);
    System.out.println(""String_Node_Str"" + student.email + ""String_Node_Str""+ key);
    String pattern=""String_Node_Str"";
    String errorMessage=key + ""String_Node_Str"" + key.length()+ ""String_Node_Str""+ key.matches(pattern)+ ""String_Node_Str"";
    assertTrue(errorMessage,key.length() > 30 && key.matches(pattern));
    BackDoor.deleteStudent(student.course,student.email);
  }
}","@Test public void testGetKeyForStudent() throws InvalidParametersException {
  StudentData student=new StudentData(""String_Node_Str"",""String_Node_Str"");
  BackDoor.createStudent(student);
  String key=BackDoor.getKeyForStudent(student.course,student.email);
  System.out.println(""String_Node_Str"" + student.email + ""String_Node_Str""+ key);
  String pattern=""String_Node_Str"";
  String errorMessage=key + ""String_Node_Str"" + key.length()+ ""String_Node_Str""+ key.matches(pattern)+ ""String_Node_Str"";
  assertTrue(errorMessage,key.length() > 30 && key.matches(pattern));
  BackDoor.deleteStudent(student.course,student.email);
}",0.7886904761904762
62932,"@Test public void testGetKeyForStudent() throws InvalidParametersException {
  StudentData student=new StudentData(""String_Node_Str"",""String_Node_Str"");
  BackDoor.createStudent(student);
  String key=BackDoor.getKeyForStudent(student.course,student.email);
  System.out.println(""String_Node_Str"" + student.email + ""String_Node_Str""+ key);
  String pattern=""String_Node_Str"";
  String errorMessage=key + ""String_Node_Str"" + key.length()+ ""String_Node_Str""+ key.matches(pattern)+ ""String_Node_Str"";
  assertTrue(errorMessage,key.length() > 30 && key.matches(pattern));
  BackDoor.deleteStudent(student.course,student.email);
}","@Test public void testGetKeyForStudent() throws InvalidParametersException {
  StudentData student=new StudentData(""String_Node_Str"",""String_Node_Str"");
  BackDoor.createStudent(student);
  String key=BackDoor.getKeyForStudent(student.course,student.email);
  String pattern=""String_Node_Str"";
  String errorMessage=key + ""String_Node_Str"" + key.length()+ ""String_Node_Str""+ key.matches(pattern)+ ""String_Node_Str"";
  assertTrue(errorMessage,key.length() > 30 && key.matches(pattern));
  BackDoor.deleteStudent(student.course,student.email);
}",0.9297945205479452
62933,"/** 
 * Escape the string for inserting into HTML
 * @param str
 * @return
 */
public static String escapeForHTML(String str){
  return str.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Escape the string for inserting into HTML
 * @param str
 * @return
 */
public static String escapeForHTML(String str){
  if (str == null) {
    return ""String_Node_Str"";
  }
  return str.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
}",0.3026166097838453
62934,"@Test public void testComparison() throws SAXException, IOException, TransformerException {
  String expected=""String_Node_Str"";
  String actual=expected;
  HtmlHelper.assertSameHtml(expected,actual);
  actual=""String_Node_Str"";
  HtmlHelper.assertSameHtml(expected,actual);
  expected=""String_Node_Str"";
  actual=expected.replace(""String_Node_Str"",""String_Node_Str"" + EOL);
  HtmlHelper.assertSameHtml(expected,actual);
  actual=expected.replace(""String_Node_Str"",""String_Node_Str"");
  HtmlHelper.assertSameHtml(expected,actual);
  actual=expected.replace(""String_Node_Str"",""String_Node_Str"" + EOL + EOL);
  HtmlHelper.assertSameHtml(expected,actual);
  actual=expected.replace(""String_Node_Str"",EOL + EOL + ""String_Node_Str""+ EOL);
  HtmlHelper.assertSameHtml(expected,actual);
}","@Test public void testComparison() throws SAXException, IOException, TransformerException {
  String expected=""String_Node_Str"";
  String actual=expected;
  HtmlHelper.assertSameHtml(actual,expected);
  actual=""String_Node_Str"";
  HtmlHelper.assertSameHtml(actual,expected);
  expected=""String_Node_Str"";
  actual=expected.replace(""String_Node_Str"",""String_Node_Str"" + EOL);
  HtmlHelper.assertSameHtml(actual,expected);
  actual=expected.replace(""String_Node_Str"",""String_Node_Str"");
  HtmlHelper.assertSameHtml(actual,expected);
  actual=expected.replace(""String_Node_Str"",""String_Node_Str"" + EOL + EOL);
  HtmlHelper.assertSameHtml(actual,expected);
  actual=expected.replace(""String_Node_Str"",EOL + EOL + ""String_Node_Str""+ EOL);
  HtmlHelper.assertSameHtml(actual,expected);
}",0.8847631241997439
62935,"/** 
 * Verifies current page with a reference page, i.e., finding the reference string in current page (so the reference does not have to be full page)<br /> This will reload the page from the given url up to two more times (that is, three times checking), depending on the variable  {@link #PAGE_VERIFY_RETRY}<br /> <br /> This method has minimal placeholder capability, matching {*} in the reference with anything in current page, trying to maximize the match. This method also replaces {version} into the value stored at Common.VERSION<br /> <br /> Example usage is to test sorting elements, say we want to test the order of two known elements, which should be independent in the presence of other elements. We can also ignore the rowID which maybe different under different number of elements.<br /> <br /> This method will try to display the difference between the expected and actual if the match fails.<br />
 * @param filepath
 * @param url
 * @throws Exception
 */
public void verifyCurrentPageHTMLWithRetry(String filepath,String url) throws Exception {
  String pageSrc=null;
  String inputStr=null;
  for (int i=0; i < PAGE_VERIFY_RETRY; i++) {
    pageSrc=getCurrentPageSource();
    inputStr=Common.readFile(filepath).replace(""String_Node_Str"",TestProperties.inst().TEAMMATES_VERSION);
    HtmlHelper.assertSameHtml(inputStr,pageSrc);
    if (HtmlHelper.assertSameHtml(inputStr,pageSrc)) {
      return;
    }
    if (i == PAGE_VERIFY_RETRY - 1)     break;
    System.out.println(""String_Node_Str"" + url);
    waitAWhile(1000);
    goToUrl(url);
  }
}","/** 
 * Verifies current page with a reference page, i.e., finding the reference string in current page (so the reference does not have to be full page)<br /> This will reload the page from the given url up to two more times (that is, three times checking), depending on the variable  {@link #PAGE_VERIFY_RETRY}<br /> <br /> This method has minimal placeholder capability, matching {*} in the reference with anything in current page, trying to maximize the match. This method also replaces {version} into the value stored at Common.VERSION<br /> <br /> Example usage is to test sorting elements, say we want to test the order of two known elements, which should be independent in the presence of other elements. We can also ignore the rowID which maybe different under different number of elements.<br /> <br /> This method will try to display the difference between the expected and actual if the match fails.<br />
 * @param filepath
 * @param url
 * @throws Exception
 */
public void verifyCurrentPageHTMLWithRetry(String filepath,String url) throws Exception {
  String actual=null;
  String expected=null;
  for (int i=0; i < PAGE_VERIFY_RETRY; i++) {
    actual=getCurrentPageSource();
    expected=Common.readFile(filepath).replace(""String_Node_Str"",TestProperties.inst().TEAMMATES_VERSION);
    HtmlHelper.assertSameHtml(actual,expected);
    if (HtmlHelper.assertSameHtml(actual,expected)) {
      return;
    }
    if (i == PAGE_VERIFY_RETRY - 1)     break;
    System.out.println(""String_Node_Str"" + url);
    waitAWhile(1000);
    goToUrl(url);
  }
}",0.9533248081841432
62936,"/** 
 * Verifies current page against the page stored at location as pointed by filepath. This method replaces the occurence of {version} in the reference file with the value stored at Common.VERSION
 * @param filepath
 * @throws Exception
 */
public void verifyCurrentPageHTML(String filepath) throws Exception {
  String pageSrc=getCurrentPageSource();
  String inputStr=Common.readFile(filepath).replace(""String_Node_Str"",TestProperties.inst().TEAMMATES_VERSION);
  HtmlHelper.assertSameHtml(inputStr,pageSrc);
}","/** 
 * Verifies current page against the page stored at location as pointed by filepath. This method replaces the occurence of {version} in the reference file with the value stored at Common.VERSION
 * @param filepath
 * @throws Exception
 */
public void verifyCurrentPageHTML(String filepath) throws Exception {
  String actual=getCurrentPageSource();
  String expected=Common.readFile(filepath).replace(""String_Node_Str"",TestProperties.inst().TEAMMATES_VERSION);
  HtmlHelper.assertSameHtml(actual,expected);
}",0.943579766536965
62937,"public static boolean compare(Node actual,Node expected,String indentation,StringBuilder expectedOutput,StringBuilder actualOutput){
  if (expected.getNodeType() == Node.TEXT_NODE) {
    expectedOutput.append(indentation + expected.getNodeValue() + ""String_Node_Str"");
  }
  if (expected.getNodeType() != Node.TEXT_NODE) {
    expectedOutput.append(indentation + ""String_Node_Str"" + expected.getNodeName()+ ""String_Node_Str"");
  }
  if (actual.getNodeType() == Node.TEXT_NODE) {
    actualOutput.append(indentation + actual.getNodeValue() + ""String_Node_Str"");
  }
  if (actual.getNodeType() != Node.TEXT_NODE) {
    actualOutput.append(indentation + ""String_Node_Str"" + actual.getNodeName()+ ""String_Node_Str"");
  }
  Node debugNode=actual.cloneNode(false);
  if (expected.getNodeType() == Node.ELEMENT_NODE) {
    if (actual.getNodeType() != Node.ELEMENT_NODE) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(""String_Node_Str"" + actual.getNodeName() + ""String_Node_Str"");
      return false;
    }
    if (!actual.getNodeName().equals(expected.getNodeName())) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(""String_Node_Str"" + expected.getNodeName() + ""String_Node_Str""+ actual.getNodeName()+ ""String_Node_Str"");
      return false;
    }
    NamedNodeMap actualAttributeList=actual.getAttributes();
    NamedNodeMap expectedAttributeList=expected.getAttributes();
    boolean dhtmltooltipIgnore=false;
    for (int i=0; i < expectedAttributeList.getLength(); i++) {
      Node expectedAttribute=expectedAttributeList.item(i);
      expectedOutput.append(expectedAttribute.getNodeName() + ""String_Node_Str"" + expectedAttribute.getNodeValue()+ ""String_Node_Str"");
    }
    expectedOutput.append(""String_Node_Str"");
    for (int i=0; i < actualAttributeList.getLength(); i++) {
      Node actualAttribute=actualAttributeList.item(i);
      actualOutput.append(actualAttribute.getNodeName() + ""String_Node_Str"" + actualAttribute.getNodeValue()+ ""String_Node_Str"");
    }
    actualOutput.append(""String_Node_Str"");
    for (int i=0; i < expectedAttributeList.getLength(); i++) {
      Node expectedAttribute=expectedAttributeList.item(i);
      Node actualAttribute=null;
      try {
        actualAttribute=actualAttributeList.removeNamedItem(expectedAttribute.getNodeName());
        if (actualAttribute.getNodeName().equals(""String_Node_Str"") && actualAttribute.getNodeValue().equals(""String_Node_Str"")) {
          dhtmltooltipIgnore=true;
        }
      }
 catch (      DOMException e) {
        if (dhtmltooltipIgnore && expectedAttribute.getNodeName().equals(""String_Node_Str"")) {
          return true;
        }
        actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
        actualOutput.append(""String_Node_Str"" + expectedAttribute.getNodeName() + ""String_Node_Str"");
        return false;
      }
      if (actualAttribute.getNodeValue().trim().equals(""String_Node_Str"")) {
      }
 else       if (!actualAttribute.getNodeValue().equals(expectedAttribute.getNodeValue())) {
        actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
        actualOutput.append(""String_Node_Str"" + expectedAttribute.getNodeName() + ""String_Node_Str""+ actualAttribute.getNodeValue()+ ""String_Node_Str""+ expectedAttribute.getNodeValue()+ ""String_Node_Str"");
        return false;
      }
    }
    if (actualAttributeList.getLength() > 0) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(""String_Node_Str"");
      for (int i=0; i < actualAttributeList.getLength(); i++) {
        Node actualAttribute=actualAttributeList.item(i);
        actualOutput.append(""String_Node_Str"" + actualAttribute.getNodeName() + ""String_Node_Str""+ actualAttribute.getNodeValue()+ ""String_Node_Str"");
      }
      return false;
    }
  }
 else   if (expected.getNodeType() == Node.TEXT_NODE) {
    if (actual.getNodeType() != Node.TEXT_NODE) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(indentation + ""String_Node_Str"" + actual.getNodeName()+ ""String_Node_Str"");
      return false;
    }
 else     if (actual.getNodeValue().trim().equals(""String_Node_Str"")) {
    }
 else     if (!actual.getNodeValue().trim().equals(expected.getNodeValue().trim())) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(indentation + ""String_Node_Str"" + expected.getNodeValue()+ ""String_Node_Str""+ actual.getNodeValue()+ ""String_Node_Str"");
      return false;
    }
  }
  if (expected.hasChildNodes() || expected.hasChildNodes()) {
    NodeList actualChildNodes=actual.getChildNodes();
    NodeList expectedChildNodes=expected.getChildNodes();
    if (actualChildNodes.getLength() != expectedChildNodes.getLength()) {
      actualOutput.append(indentation + ""String_Node_Str"");
      actualOutput.append(indentation + ""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(indentation + ""String_Node_Str"");
      for (int i=0; i < actualChildNodes.getLength(); i++) {
        actualOutput.append(actualChildNodes.item(i).getNodeName() + ""String_Node_Str"");
      }
      actualOutput.append(""String_Node_Str"");
      actualOutput.append(indentation + ""String_Node_Str"" + printHtmlFromNode(expected));
      actualOutput.append(indentation + ""String_Node_Str"");
      for (int i=0; i < expectedChildNodes.getLength(); i++) {
        actualOutput.append(expectedChildNodes.item(i).getNodeName() + ""String_Node_Str"");
      }
      actualOutput.append(""String_Node_Str"");
      return false;
    }
 else {
      for (int i=0; i < actualChildNodes.getLength(); i++) {
        if (!compare(actualChildNodes.item(i),expectedChildNodes.item(i),indentation + ""String_Node_Str"",expectedOutput,actualOutput)) {
          return false;
        }
      }
    }
  }
  if (expected.getNodeType() != Node.TEXT_NODE) {
    expectedOutput.append(indentation + ""String_Node_Str"" + expected.getNodeName()+ ""String_Node_Str"");
  }
  if (actual.getNodeType() != Node.TEXT_NODE) {
    actualOutput.append(indentation + ""String_Node_Str"" + actual.getNodeName()+ ""String_Node_Str"");
  }
  return true;
}","public static boolean compare(Node actual,Node expected,String indentation,StringBuilder actualOutput,StringBuilder expectedOutput){
  if (expected.getNodeType() == Node.TEXT_NODE) {
    expectedOutput.append(indentation + expected.getNodeValue() + ""String_Node_Str"");
  }
  if (expected.getNodeType() != Node.TEXT_NODE) {
    expectedOutput.append(indentation + ""String_Node_Str"" + expected.getNodeName()+ ""String_Node_Str"");
  }
  if (actual.getNodeType() == Node.TEXT_NODE) {
    actualOutput.append(indentation + actual.getNodeValue() + ""String_Node_Str"");
  }
  if (actual.getNodeType() != Node.TEXT_NODE) {
    actualOutput.append(indentation + ""String_Node_Str"" + actual.getNodeName()+ ""String_Node_Str"");
  }
  Node debugNode=actual.cloneNode(false);
  if (expected.getNodeType() == Node.ELEMENT_NODE) {
    if (actual.getNodeType() != Node.ELEMENT_NODE) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(""String_Node_Str"" + actual.getNodeName() + ""String_Node_Str"");
      return false;
    }
    if (!actual.getNodeName().equals(expected.getNodeName())) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(""String_Node_Str"" + expected.getNodeName() + ""String_Node_Str""+ actual.getNodeName()+ ""String_Node_Str"");
      return false;
    }
    NamedNodeMap actualAttributeList=actual.getAttributes();
    NamedNodeMap expectedAttributeList=expected.getAttributes();
    boolean dhtmltooltipIgnore=false;
    for (int i=0; i < expectedAttributeList.getLength(); i++) {
      Node expectedAttribute=expectedAttributeList.item(i);
      expectedOutput.append(expectedAttribute.getNodeName() + ""String_Node_Str"" + expectedAttribute.getNodeValue()+ ""String_Node_Str"");
    }
    expectedOutput.append(""String_Node_Str"");
    for (int i=0; i < actualAttributeList.getLength(); i++) {
      Node actualAttribute=actualAttributeList.item(i);
      actualOutput.append(actualAttribute.getNodeName() + ""String_Node_Str"" + actualAttribute.getNodeValue()+ ""String_Node_Str"");
    }
    actualOutput.append(""String_Node_Str"");
    for (int i=0; i < expectedAttributeList.getLength(); i++) {
      Node expectedAttribute=expectedAttributeList.item(i);
      Node actualAttribute=null;
      try {
        actualAttribute=actualAttributeList.removeNamedItem(expectedAttribute.getNodeName());
        if (actualAttribute.getNodeName().equals(""String_Node_Str"") && actualAttribute.getNodeValue().equals(""String_Node_Str"")) {
          dhtmltooltipIgnore=true;
        }
      }
 catch (      DOMException e) {
        actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
        actualOutput.append(""String_Node_Str"" + expectedAttribute.getNodeName() + ""String_Node_Str"");
        return false;
      }
      if (expectedAttribute.getNodeValue().trim().equals(""String_Node_Str"")) {
      }
 else       if (!actualAttribute.getNodeValue().equals(expectedAttribute.getNodeValue())) {
        actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
        actualOutput.append(""String_Node_Str"" + expectedAttribute.getNodeName() + ""String_Node_Str""+ actualAttribute.getNodeValue()+ ""String_Node_Str""+ expectedAttribute.getNodeValue()+ ""String_Node_Str"");
        return false;
      }
    }
    if (actualAttributeList.getLength() > 0) {
      if (dhtmltooltipIgnore && actualAttributeList.getLength() == 1 && actualAttributeList.item(0).getNodeName().equals(""String_Node_Str"")) {
      }
 else {
        actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
        actualOutput.append(""String_Node_Str"");
        for (int i=0; i < actualAttributeList.getLength(); i++) {
          Node actualAttribute=actualAttributeList.item(i);
          actualOutput.append(""String_Node_Str"" + actualAttribute.getNodeName() + ""String_Node_Str""+ actualAttribute.getNodeValue()+ ""String_Node_Str"");
        }
        return false;
      }
    }
  }
 else   if (expected.getNodeType() == Node.TEXT_NODE) {
    if (actual.getNodeType() != Node.TEXT_NODE) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(indentation + ""String_Node_Str"" + actual.getNodeName()+ ""String_Node_Str"");
      return false;
    }
 else     if (expected.getNodeValue().trim().equals(""String_Node_Str"")) {
    }
 else     if (!actual.getNodeValue().trim().equals(expected.getNodeValue().trim())) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(indentation + ""String_Node_Str"" + expected.getNodeValue()+ ""String_Node_Str""+ actual.getNodeValue()+ ""String_Node_Str"");
      return false;
    }
  }
  if (expected.hasChildNodes() || expected.hasChildNodes()) {
    NodeList actualChildNodes=actual.getChildNodes();
    NodeList expectedChildNodes=expected.getChildNodes();
    if (actualChildNodes.getLength() != expectedChildNodes.getLength()) {
      actualOutput.append(indentation + ""String_Node_Str"");
      actualOutput.append(indentation + ""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(indentation + ""String_Node_Str"");
      for (int i=0; i < actualChildNodes.getLength(); i++) {
        actualOutput.append(indentation + indentation + actualChildNodes.item(i).getNodeName()+ ""String_Node_Str"");
        NamedNodeMap actualAttributeList=actualChildNodes.item(i).getAttributes();
        for (int j=0; j < actualAttributeList.getLength(); j++) {
          actualOutput.append(actualAttributeList.item(j).getNodeName() + ""String_Node_Str"" + actualAttributeList.item(j).getNodeValue()+ ""String_Node_Str"");
        }
        actualOutput.append(""String_Node_Str"");
      }
      actualOutput.append(""String_Node_Str"");
      actualOutput.append(indentation + ""String_Node_Str"" + printHtmlFromNode(expected));
      actualOutput.append(indentation + ""String_Node_Str"");
      for (int i=0; i < expectedChildNodes.getLength(); i++) {
        actualOutput.append(indentation + indentation + expectedChildNodes.item(i).getNodeName()+ ""String_Node_Str"");
        NamedNodeMap expectedAttributeList=expectedChildNodes.item(i).getAttributes();
        for (int j=0; j < expectedAttributeList.getLength(); j++) {
          actualOutput.append(expectedAttributeList.item(j).getNodeName() + ""String_Node_Str"" + expectedAttributeList.item(j).getNodeValue()+ ""String_Node_Str"");
        }
        actualOutput.append(""String_Node_Str"");
      }
      actualOutput.append(""String_Node_Str"");
      return false;
    }
 else {
      for (int i=0; i < actualChildNodes.getLength(); i++) {
        if (!compare(actualChildNodes.item(i),expectedChildNodes.item(i),indentation + ""String_Node_Str"",expectedOutput,actualOutput)) {
          return false;
        }
      }
    }
  }
  if (expected.getNodeType() != Node.TEXT_NODE) {
    expectedOutput.append(indentation + ""String_Node_Str"" + expected.getNodeName()+ ""String_Node_Str"");
  }
  if (actual.getNodeType() != Node.TEXT_NODE) {
    actualOutput.append(indentation + ""String_Node_Str"" + actual.getNodeName()+ ""String_Node_Str"");
  }
  return true;
}",0.7786964618249534
62938,"/** 
 * Assert whether two HTML strings are the same in the DOM representation. This ignores the order of attributes, and ignores unnecessary whitespaces as well.
 * @param html1
 * @param html2
 * @throws SAXException
 * @throws IOException
 * @throws TransformerException
 */
public static boolean assertSameHtml(String html1,String html2) throws SAXException, IOException, TransformerException {
  html1=preProcessHtml(html1);
  html2=preProcessHtml(html2);
  Node page1=getNodeFromString(html1);
  Node page2=getNodeFromString(html2);
  eliminateEmptyTextNodes(page1);
  eliminateEmptyTextNodes(page2);
  StringBuilder expectedHTML=new StringBuilder();
  StringBuilder actualHTML=new StringBuilder();
  boolean isLogicalMatch=compare(page1,page2,""String_Node_Str"",expectedHTML,actualHTML);
  if (!isLogicalMatch) {
    assertEquals(""String_Node_Str"",expectedHTML.toString(),actualHTML.toString());
  }
  return isLogicalMatch;
}","/** 
 * Assert whether two HTML strings are the same in the DOM representation. This ignores the order of attributes, and ignores unnecessary whitespaces as well.
 * @param html1
 * @param html2
 * @throws SAXException
 * @throws IOException
 * @throws TransformerException
 */
public static boolean assertSameHtml(String actualString,String expectedString) throws SAXException, IOException, TransformerException {
  actualString=preProcessHtml(actualString);
  expectedString=preProcessHtml(expectedString);
  Node actualPage=getNodeFromString(actualString);
  Node expectedPage=getNodeFromString(expectedString);
  eliminateEmptyTextNodes(actualPage);
  eliminateEmptyTextNodes(expectedPage);
  StringBuilder expectedHTML=new StringBuilder();
  StringBuilder actualHTML=new StringBuilder();
  boolean isLogicalMatch=compare(actualPage,expectedPage,""String_Node_Str"",actualHTML,expectedHTML);
  if (!isLogicalMatch) {
    assertEquals(""String_Node_Str"",expectedHTML.toString(),actualHTML.toString());
  }
  return isLogicalMatch;
}",0.8635437881873728
62939,"public static boolean compare(Node actual,Node expected,String indentation,StringBuilder expectedOutput,StringBuilder actualOutput){
  if (expected.getNodeType() == Node.TEXT_NODE) {
    expectedOutput.append(indentation + expected.getNodeValue() + ""String_Node_Str"");
  }
  if (expected.getNodeType() != Node.TEXT_NODE) {
    expectedOutput.append(indentation + ""String_Node_Str"" + expected.getNodeName()+ ""String_Node_Str"");
  }
  if (actual.getNodeType() == Node.TEXT_NODE) {
    actualOutput.append(indentation + actual.getNodeValue() + ""String_Node_Str"");
  }
  if (actual.getNodeType() != Node.TEXT_NODE) {
    actualOutput.append(indentation + ""String_Node_Str"" + actual.getNodeName()+ ""String_Node_Str"");
  }
  Node debugNode=actual.cloneNode(false);
  if (expected.getNodeType() == Node.ELEMENT_NODE) {
    if (actual.getNodeType() != Node.ELEMENT_NODE) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(""String_Node_Str"" + actual.getNodeName() + ""String_Node_Str"");
      return false;
    }
    if (!actual.getNodeName().equals(expected.getNodeName())) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(""String_Node_Str"" + expected.getNodeName() + ""String_Node_Str""+ actual.getNodeName()+ ""String_Node_Str"");
      return false;
    }
    NamedNodeMap actualAttributeList=actual.getAttributes();
    NamedNodeMap expectedAttributeList=expected.getAttributes();
    boolean dhtmltooltipIgnore=false;
    for (int i=0; i < expectedAttributeList.getLength(); i++) {
      Node expectedAttribute=expectedAttributeList.item(i);
      expectedOutput.append(expectedAttribute.getNodeName() + ""String_Node_Str"" + expectedAttribute.getNodeValue()+ ""String_Node_Str"");
    }
    expectedOutput.append(""String_Node_Str"");
    for (int i=0; i < actualAttributeList.getLength(); i++) {
      Node actualAttribute=actualAttributeList.item(i);
      actualOutput.append(actualAttribute.getNodeName() + ""String_Node_Str"" + actualAttribute.getNodeValue()+ ""String_Node_Str"");
    }
    actualOutput.append(""String_Node_Str"");
    for (int i=0; i < expectedAttributeList.getLength(); i++) {
      Node expectedAttribute=expectedAttributeList.item(i);
      Node actualAttribute=null;
      try {
        actualAttribute=actualAttributeList.removeNamedItem(expectedAttribute.getNodeName());
        if (actualAttribute.getNodeName().equals(""String_Node_Str"") && actualAttribute.getNodeValue().equals(""String_Node_Str"")) {
          dhtmltooltipIgnore=true;
        }
      }
 catch (      DOMException e) {
        actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
        actualOutput.append(""String_Node_Str"" + expectedAttribute.getNodeName() + ""String_Node_Str"");
        return false;
      }
      if (expectedAttribute.getNodeValue().trim().equals(""String_Node_Str"")) {
      }
 else       if (!actualAttribute.getNodeValue().equals(expectedAttribute.getNodeValue())) {
        actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
        actualOutput.append(""String_Node_Str"" + expectedAttribute.getNodeName() + ""String_Node_Str""+ actualAttribute.getNodeValue()+ ""String_Node_Str""+ expectedAttribute.getNodeValue()+ ""String_Node_Str"");
        return false;
      }
    }
    if (actualAttributeList.getLength() > 0) {
      if (dhtmltooltipIgnore && actualAttributeList.getLength() == 1 && actualAttributeList.item(0).getNodeName().equals(""String_Node_Str"")) {
      }
 else {
        actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
        actualOutput.append(""String_Node_Str"");
        for (int i=0; i < actualAttributeList.getLength(); i++) {
          Node actualAttribute=actualAttributeList.item(i);
          actualOutput.append(""String_Node_Str"" + actualAttribute.getNodeName() + ""String_Node_Str""+ actualAttribute.getNodeValue()+ ""String_Node_Str"");
        }
        return false;
      }
    }
  }
 else   if (expected.getNodeType() == Node.TEXT_NODE) {
    if (actual.getNodeType() != Node.TEXT_NODE) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(indentation + ""String_Node_Str"" + actual.getNodeName()+ ""String_Node_Str"");
      return false;
    }
 else     if (expected.getNodeValue().trim().equals(""String_Node_Str"")) {
    }
 else     if (!actual.getNodeValue().trim().equals(expected.getNodeValue().trim())) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(indentation + ""String_Node_Str"" + expected.getNodeValue()+ ""String_Node_Str""+ actual.getNodeValue()+ ""String_Node_Str"");
      return false;
    }
  }
  if (expected.hasChildNodes() || expected.hasChildNodes()) {
    NodeList actualChildNodes=actual.getChildNodes();
    NodeList expectedChildNodes=expected.getChildNodes();
    if (actualChildNodes.getLength() != expectedChildNodes.getLength()) {
      actualOutput.append(indentation + ""String_Node_Str"");
      actualOutput.append(indentation + ""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(indentation + ""String_Node_Str"");
      for (int i=0; i < actualChildNodes.getLength(); i++) {
        actualOutput.append(indentation + indentation + actualChildNodes.item(i).getNodeName()+ ""String_Node_Str"");
        NamedNodeMap actualAttributeList=actualChildNodes.item(i).getAttributes();
        for (int j=0; j < actualAttributeList.getLength(); j++) {
          actualOutput.append(actualAttributeList.item(j).getNodeName() + ""String_Node_Str"" + actualAttributeList.item(j).getNodeValue()+ ""String_Node_Str"");
        }
        actualOutput.append(""String_Node_Str"");
      }
      actualOutput.append(""String_Node_Str"");
      actualOutput.append(indentation + ""String_Node_Str"" + printHtmlFromNode(expected));
      actualOutput.append(indentation + ""String_Node_Str"");
      for (int i=0; i < expectedChildNodes.getLength(); i++) {
        actualOutput.append(indentation + indentation + expectedChildNodes.item(i).getNodeName()+ ""String_Node_Str"");
        NamedNodeMap expectedAttributeList=expectedChildNodes.item(i).getAttributes();
        for (int j=0; j < expectedAttributeList.getLength(); j++) {
          actualOutput.append(expectedAttributeList.item(j).getNodeName() + ""String_Node_Str"" + expectedAttributeList.item(j).getNodeValue()+ ""String_Node_Str"");
        }
        actualOutput.append(""String_Node_Str"");
      }
      actualOutput.append(""String_Node_Str"");
      return false;
    }
 else {
      for (int i=0; i < actualChildNodes.getLength(); i++) {
        if (!compare(actualChildNodes.item(i),expectedChildNodes.item(i),indentation + ""String_Node_Str"",expectedOutput,actualOutput)) {
          return false;
        }
      }
    }
  }
  if (expected.getNodeType() != Node.TEXT_NODE) {
    expectedOutput.append(indentation + ""String_Node_Str"" + expected.getNodeName()+ ""String_Node_Str"");
  }
  if (actual.getNodeType() != Node.TEXT_NODE) {
    actualOutput.append(indentation + ""String_Node_Str"" + actual.getNodeName()+ ""String_Node_Str"");
  }
  return true;
}","public static boolean compare(Node actual,Node expected,String indentation,StringBuilder actualOutput,StringBuilder expectedOutput){
  if (expected.getNodeType() == Node.TEXT_NODE) {
    expectedOutput.append(indentation + expected.getNodeValue() + ""String_Node_Str"");
  }
  if (expected.getNodeType() != Node.TEXT_NODE) {
    expectedOutput.append(indentation + ""String_Node_Str"" + expected.getNodeName()+ ""String_Node_Str"");
  }
  if (actual.getNodeType() == Node.TEXT_NODE) {
    actualOutput.append(indentation + actual.getNodeValue() + ""String_Node_Str"");
  }
  if (actual.getNodeType() != Node.TEXT_NODE) {
    actualOutput.append(indentation + ""String_Node_Str"" + actual.getNodeName()+ ""String_Node_Str"");
  }
  Node debugNode=actual.cloneNode(false);
  if (expected.getNodeType() == Node.ELEMENT_NODE) {
    if (actual.getNodeType() != Node.ELEMENT_NODE) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(""String_Node_Str"" + actual.getNodeName() + ""String_Node_Str"");
      return false;
    }
    if (!actual.getNodeName().equals(expected.getNodeName())) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(""String_Node_Str"" + expected.getNodeName() + ""String_Node_Str""+ actual.getNodeName()+ ""String_Node_Str"");
      return false;
    }
    NamedNodeMap actualAttributeList=actual.getAttributes();
    NamedNodeMap expectedAttributeList=expected.getAttributes();
    boolean dhtmltooltipIgnore=false;
    for (int i=0; i < expectedAttributeList.getLength(); i++) {
      Node expectedAttribute=expectedAttributeList.item(i);
      expectedOutput.append(expectedAttribute.getNodeName() + ""String_Node_Str"" + expectedAttribute.getNodeValue()+ ""String_Node_Str"");
    }
    expectedOutput.append(""String_Node_Str"");
    for (int i=0; i < actualAttributeList.getLength(); i++) {
      Node actualAttribute=actualAttributeList.item(i);
      actualOutput.append(actualAttribute.getNodeName() + ""String_Node_Str"" + actualAttribute.getNodeValue()+ ""String_Node_Str"");
    }
    actualOutput.append(""String_Node_Str"");
    for (int i=0; i < expectedAttributeList.getLength(); i++) {
      Node expectedAttribute=expectedAttributeList.item(i);
      Node actualAttribute=null;
      try {
        actualAttribute=actualAttributeList.removeNamedItem(expectedAttribute.getNodeName());
        if (actualAttribute.getNodeName().equals(""String_Node_Str"") && actualAttribute.getNodeValue().equals(""String_Node_Str"")) {
          dhtmltooltipIgnore=true;
        }
      }
 catch (      DOMException e) {
        actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
        actualOutput.append(""String_Node_Str"" + expectedAttribute.getNodeName() + ""String_Node_Str"");
        return false;
      }
      if (expectedAttribute.getNodeValue().trim().equals(""String_Node_Str"")) {
      }
 else       if (!actualAttribute.getNodeValue().equals(expectedAttribute.getNodeValue())) {
        actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
        actualOutput.append(""String_Node_Str"" + expectedAttribute.getNodeName() + ""String_Node_Str""+ actualAttribute.getNodeValue()+ ""String_Node_Str""+ expectedAttribute.getNodeValue()+ ""String_Node_Str"");
        return false;
      }
    }
    if (actualAttributeList.getLength() > 0) {
      if (dhtmltooltipIgnore && actualAttributeList.getLength() == 1 && actualAttributeList.item(0).getNodeName().equals(""String_Node_Str"")) {
      }
 else {
        actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
        actualOutput.append(""String_Node_Str"");
        for (int i=0; i < actualAttributeList.getLength(); i++) {
          Node actualAttribute=actualAttributeList.item(i);
          actualOutput.append(""String_Node_Str"" + actualAttribute.getNodeName() + ""String_Node_Str""+ actualAttribute.getNodeValue()+ ""String_Node_Str"");
        }
        return false;
      }
    }
  }
 else   if (expected.getNodeType() == Node.TEXT_NODE) {
    if (actual.getNodeType() != Node.TEXT_NODE) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(indentation + ""String_Node_Str"" + actual.getNodeName()+ ""String_Node_Str"");
      return false;
    }
 else     if (expected.getNodeValue().trim().equals(""String_Node_Str"")) {
    }
 else     if (!actual.getNodeValue().trim().equals(expected.getNodeValue().trim())) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(indentation + ""String_Node_Str"" + expected.getNodeValue()+ ""String_Node_Str""+ actual.getNodeValue()+ ""String_Node_Str"");
      return false;
    }
  }
  if (expected.hasChildNodes() || expected.hasChildNodes()) {
    NodeList actualChildNodes=actual.getChildNodes();
    NodeList expectedChildNodes=expected.getChildNodes();
    if (actualChildNodes.getLength() != expectedChildNodes.getLength()) {
      actualOutput.append(indentation + ""String_Node_Str"");
      actualOutput.append(indentation + ""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(indentation + ""String_Node_Str"");
      for (int i=0; i < actualChildNodes.getLength(); i++) {
        actualOutput.append(indentation + indentation + actualChildNodes.item(i).getNodeName()+ ""String_Node_Str"");
        NamedNodeMap actualAttributeList=actualChildNodes.item(i).getAttributes();
        for (int j=0; j < actualAttributeList.getLength(); j++) {
          actualOutput.append(actualAttributeList.item(j).getNodeName() + ""String_Node_Str"" + actualAttributeList.item(j).getNodeValue()+ ""String_Node_Str"");
        }
        actualOutput.append(""String_Node_Str"");
      }
      actualOutput.append(""String_Node_Str"");
      actualOutput.append(indentation + ""String_Node_Str"" + printHtmlFromNode(expected));
      actualOutput.append(indentation + ""String_Node_Str"");
      for (int i=0; i < expectedChildNodes.getLength(); i++) {
        actualOutput.append(indentation + indentation + expectedChildNodes.item(i).getNodeName()+ ""String_Node_Str"");
        NamedNodeMap expectedAttributeList=expectedChildNodes.item(i).getAttributes();
        for (int j=0; j < expectedAttributeList.getLength(); j++) {
          actualOutput.append(expectedAttributeList.item(j).getNodeName() + ""String_Node_Str"" + expectedAttributeList.item(j).getNodeValue()+ ""String_Node_Str"");
        }
        actualOutput.append(""String_Node_Str"");
      }
      actualOutput.append(""String_Node_Str"");
      return false;
    }
 else {
      for (int i=0; i < actualChildNodes.getLength(); i++) {
        if (!compare(actualChildNodes.item(i),expectedChildNodes.item(i),indentation + ""String_Node_Str"",expectedOutput,actualOutput)) {
          return false;
        }
      }
    }
  }
  if (expected.getNodeType() != Node.TEXT_NODE) {
    expectedOutput.append(indentation + ""String_Node_Str"" + expected.getNodeName()+ ""String_Node_Str"");
  }
  if (actual.getNodeType() != Node.TEXT_NODE) {
    actualOutput.append(indentation + ""String_Node_Str"" + actual.getNodeName()+ ""String_Node_Str"");
  }
  return true;
}",0.9962174278509386
62940,"/** 
 * Assert whether two HTML strings are the same in the DOM representation. This ignores the order of attributes, and ignores unnecessary whitespaces as well.
 * @param html1
 * @param html2
 * @throws SAXException
 * @throws IOException
 * @throws TransformerException
 */
public static boolean assertSameHtml(String actualString,String expectedString) throws SAXException, IOException, TransformerException {
  actualString=preProcessHtml(actualString);
  expectedString=preProcessHtml(expectedString);
  Node actualPage=getNodeFromString(actualString);
  Node expectedPage=getNodeFromString(expectedString);
  eliminateEmptyTextNodes(actualPage);
  eliminateEmptyTextNodes(expectedPage);
  StringBuilder expectedHTML=new StringBuilder();
  StringBuilder actualHTML=new StringBuilder();
  boolean isLogicalMatch=compare(actualPage,expectedPage,""String_Node_Str"",expectedHTML,actualHTML);
  if (!isLogicalMatch) {
    assertEquals(""String_Node_Str"",expectedHTML.toString(),actualHTML.toString());
  }
  return isLogicalMatch;
}","/** 
 * Assert whether two HTML strings are the same in the DOM representation. This ignores the order of attributes, and ignores unnecessary whitespaces as well.
 * @param html1
 * @param html2
 * @throws SAXException
 * @throws IOException
 * @throws TransformerException
 */
public static boolean assertSameHtml(String actualString,String expectedString) throws SAXException, IOException, TransformerException {
  actualString=preProcessHtml(actualString);
  expectedString=preProcessHtml(expectedString);
  Node actualPage=getNodeFromString(actualString);
  Node expectedPage=getNodeFromString(expectedString);
  eliminateEmptyTextNodes(actualPage);
  eliminateEmptyTextNodes(expectedPage);
  StringBuilder expectedHTML=new StringBuilder();
  StringBuilder actualHTML=new StringBuilder();
  boolean isLogicalMatch=compare(actualPage,expectedPage,""String_Node_Str"",actualHTML,expectedHTML);
  if (!isLogicalMatch) {
    assertEquals(""String_Node_Str"",expectedHTML.toString(),actualHTML.toString());
  }
  return isLogicalMatch;
}",0.9864341085271318
62941,"@Test public void testComparison() throws SAXException, IOException, TransformerException {
  String expected=""String_Node_Str"";
  String actual=expected;
  HtmlHelper.assertSameHtml(expected,actual);
  actual=""String_Node_Str"";
  HtmlHelper.assertSameHtml(expected,actual);
  expected=""String_Node_Str"";
  actual=expected.replace(""String_Node_Str"",""String_Node_Str"" + EOL);
  HtmlHelper.assertSameHtml(expected,actual);
  actual=expected.replace(""String_Node_Str"",""String_Node_Str"");
  HtmlHelper.assertSameHtml(expected,actual);
  actual=expected.replace(""String_Node_Str"",""String_Node_Str"" + EOL + EOL);
  HtmlHelper.assertSameHtml(expected,actual);
  actual=expected.replace(""String_Node_Str"",EOL + EOL + ""String_Node_Str""+ EOL);
  HtmlHelper.assertSameHtml(expected,actual);
}","@Test public void testComparison() throws SAXException, IOException, TransformerException {
  String expected=""String_Node_Str"";
  String actual=expected;
  HtmlHelper.assertSameHtml(actual,expected);
  actual=""String_Node_Str"";
  HtmlHelper.assertSameHtml(actual,expected);
  expected=""String_Node_Str"";
  actual=expected.replace(""String_Node_Str"",""String_Node_Str"" + EOL);
  HtmlHelper.assertSameHtml(actual,expected);
  actual=expected.replace(""String_Node_Str"",""String_Node_Str"");
  HtmlHelper.assertSameHtml(actual,expected);
  actual=expected.replace(""String_Node_Str"",""String_Node_Str"" + EOL + EOL);
  HtmlHelper.assertSameHtml(actual,expected);
  actual=expected.replace(""String_Node_Str"",EOL + EOL + ""String_Node_Str""+ EOL);
  HtmlHelper.assertSameHtml(actual,expected);
}",0.8847631241997439
62942,"/** 
 * Verifies current page with a reference page, i.e., finding the reference string in current page (so the reference does not have to be full page)<br /> This will reload the page from the given url up to two more times (that is, three times checking), depending on the variable  {@link #PAGE_VERIFY_RETRY}<br /> <br /> This method has minimal placeholder capability, matching {*} in the reference with anything in current page, trying to maximize the match. This method also replaces {version} into the value stored at Common.VERSION<br /> <br /> Example usage is to test sorting elements, say we want to test the order of two known elements, which should be independent in the presence of other elements. We can also ignore the rowID which maybe different under different number of elements.<br /> <br /> This method will try to display the difference between the expected and actual if the match fails.<br />
 * @param filepath
 * @param url
 * @throws Exception
 */
public void verifyCurrentPageHTMLWithRetry(String filepath,String url) throws Exception {
  String pageSrc=null;
  String inputStr=null;
  for (int i=0; i < PAGE_VERIFY_RETRY; i++) {
    pageSrc=getCurrentPageSource();
    inputStr=Common.readFile(filepath).replace(""String_Node_Str"",TestProperties.inst().TEAMMATES_VERSION);
    HtmlHelper.assertSameHtml(inputStr,pageSrc);
    if (HtmlHelper.assertSameHtml(inputStr,pageSrc)) {
      return;
    }
    if (i == PAGE_VERIFY_RETRY - 1)     break;
    System.out.println(""String_Node_Str"" + url);
    waitAWhile(1000);
    goToUrl(url);
  }
}","/** 
 * Verifies current page with a reference page, i.e., finding the reference string in current page (so the reference does not have to be full page)<br /> This will reload the page from the given url up to two more times (that is, three times checking), depending on the variable  {@link #PAGE_VERIFY_RETRY}<br /> <br /> This method has minimal placeholder capability, matching {*} in the reference with anything in current page, trying to maximize the match. This method also replaces {version} into the value stored at Common.VERSION<br /> <br /> Example usage is to test sorting elements, say we want to test the order of two known elements, which should be independent in the presence of other elements. We can also ignore the rowID which maybe different under different number of elements.<br /> <br /> This method will try to display the difference between the expected and actual if the match fails.<br />
 * @param filepath
 * @param url
 * @throws Exception
 */
public void verifyCurrentPageHTMLWithRetry(String filepath,String url) throws Exception {
  String actual=null;
  String expected=null;
  for (int i=0; i < PAGE_VERIFY_RETRY; i++) {
    actual=getCurrentPageSource();
    expected=Common.readFile(filepath).replace(""String_Node_Str"",TestProperties.inst().TEAMMATES_VERSION);
    HtmlHelper.assertSameHtml(actual,expected);
    if (HtmlHelper.assertSameHtml(actual,expected)) {
      return;
    }
    if (i == PAGE_VERIFY_RETRY - 1)     break;
    System.out.println(""String_Node_Str"" + url);
    waitAWhile(1000);
    goToUrl(url);
  }
}",0.9533248081841432
62943,"/** 
 * Verifies current page against the page stored at location as pointed by filepath. This method replaces the occurence of {version} in the reference file with the value stored at Common.VERSION
 * @param filepath
 * @throws Exception
 */
public void verifyCurrentPageHTML(String filepath) throws Exception {
  String pageSrc=getCurrentPageSource();
  String inputStr=Common.readFile(filepath).replace(""String_Node_Str"",TestProperties.inst().TEAMMATES_VERSION);
  HtmlHelper.assertSameHtml(inputStr,pageSrc);
}","/** 
 * Verifies current page against the page stored at location as pointed by filepath. This method replaces the occurence of {version} in the reference file with the value stored at Common.VERSION
 * @param filepath
 * @throws Exception
 */
public void verifyCurrentPageHTML(String filepath) throws Exception {
  String actual=getCurrentPageSource();
  String expected=Common.readFile(filepath).replace(""String_Node_Str"",TestProperties.inst().TEAMMATES_VERSION);
  HtmlHelper.assertSameHtml(actual,expected);
}",0.943579766536965
62944,"public static boolean compare(Node actual,Node expected,String indentation,StringBuilder expectedOutput,StringBuilder actualOutput){
  if (expected.getNodeType() == Node.TEXT_NODE) {
    expectedOutput.append(indentation + expected.getNodeValue() + ""String_Node_Str"");
  }
  if (expected.getNodeType() != Node.TEXT_NODE) {
    expectedOutput.append(indentation + ""String_Node_Str"" + expected.getNodeName()+ ""String_Node_Str"");
  }
  if (actual.getNodeType() == Node.TEXT_NODE) {
    actualOutput.append(indentation + actual.getNodeValue() + ""String_Node_Str"");
  }
  if (actual.getNodeType() != Node.TEXT_NODE) {
    actualOutput.append(indentation + ""String_Node_Str"" + actual.getNodeName()+ ""String_Node_Str"");
  }
  Node debugNode=actual.cloneNode(false);
  if (expected.getNodeType() == Node.ELEMENT_NODE) {
    if (actual.getNodeType() != Node.ELEMENT_NODE) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(""String_Node_Str"" + actual.getNodeName() + ""String_Node_Str"");
      return false;
    }
    if (!actual.getNodeName().equals(expected.getNodeName())) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(""String_Node_Str"" + expected.getNodeName() + ""String_Node_Str""+ actual.getNodeName()+ ""String_Node_Str"");
      return false;
    }
    NamedNodeMap actualAttributeList=actual.getAttributes();
    NamedNodeMap expectedAttributeList=expected.getAttributes();
    boolean dhtmltooltipIgnore=false;
    for (int i=0; i < expectedAttributeList.getLength(); i++) {
      Node expectedAttribute=expectedAttributeList.item(i);
      expectedOutput.append(expectedAttribute.getNodeName() + ""String_Node_Str"" + expectedAttribute.getNodeValue()+ ""String_Node_Str"");
    }
    expectedOutput.append(""String_Node_Str"");
    for (int i=0; i < actualAttributeList.getLength(); i++) {
      Node actualAttribute=actualAttributeList.item(i);
      actualOutput.append(actualAttribute.getNodeName() + ""String_Node_Str"" + actualAttribute.getNodeValue()+ ""String_Node_Str"");
    }
    actualOutput.append(""String_Node_Str"");
    for (int i=0; i < expectedAttributeList.getLength(); i++) {
      Node expectedAttribute=expectedAttributeList.item(i);
      Node actualAttribute=null;
      try {
        actualAttribute=actualAttributeList.removeNamedItem(expectedAttribute.getNodeName());
        if (actualAttribute.getNodeName().equals(""String_Node_Str"") && actualAttribute.getNodeValue().equals(""String_Node_Str"")) {
          dhtmltooltipIgnore=true;
        }
      }
 catch (      DOMException e) {
        if (dhtmltooltipIgnore && expectedAttribute.getNodeName().equals(""String_Node_Str"")) {
          return true;
        }
        actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
        actualOutput.append(""String_Node_Str"" + expectedAttribute.getNodeName() + ""String_Node_Str"");
        return false;
      }
      if (actualAttribute.getNodeValue().trim().equals(""String_Node_Str"")) {
      }
 else       if (!actualAttribute.getNodeValue().equals(expectedAttribute.getNodeValue())) {
        actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
        actualOutput.append(""String_Node_Str"" + expectedAttribute.getNodeName() + ""String_Node_Str""+ actualAttribute.getNodeValue()+ ""String_Node_Str""+ expectedAttribute.getNodeValue()+ ""String_Node_Str"");
        return false;
      }
    }
    if (actualAttributeList.getLength() > 0) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(""String_Node_Str"");
      for (int i=0; i < actualAttributeList.getLength(); i++) {
        Node actualAttribute=actualAttributeList.item(i);
        actualOutput.append(""String_Node_Str"" + actualAttribute.getNodeName() + ""String_Node_Str""+ actualAttribute.getNodeValue()+ ""String_Node_Str"");
      }
      return false;
    }
  }
 else   if (expected.getNodeType() == Node.TEXT_NODE) {
    if (actual.getNodeType() != Node.TEXT_NODE) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(indentation + ""String_Node_Str"" + actual.getNodeName()+ ""String_Node_Str"");
      return false;
    }
 else     if (actual.getNodeValue().trim().equals(""String_Node_Str"")) {
    }
 else     if (!actual.getNodeValue().trim().equals(expected.getNodeValue().trim())) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(indentation + ""String_Node_Str"" + expected.getNodeValue()+ ""String_Node_Str""+ actual.getNodeValue()+ ""String_Node_Str"");
      return false;
    }
  }
  if (expected.hasChildNodes() || expected.hasChildNodes()) {
    NodeList actualChildNodes=actual.getChildNodes();
    NodeList expectedChildNodes=expected.getChildNodes();
    if (actualChildNodes.getLength() != expectedChildNodes.getLength()) {
      actualOutput.append(indentation + ""String_Node_Str"");
      actualOutput.append(indentation + ""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(indentation + ""String_Node_Str"");
      for (int i=0; i < actualChildNodes.getLength(); i++) {
        actualOutput.append(actualChildNodes.item(i).getNodeName() + ""String_Node_Str"");
      }
      actualOutput.append(""String_Node_Str"");
      actualOutput.append(indentation + ""String_Node_Str"" + printHtmlFromNode(expected));
      actualOutput.append(indentation + ""String_Node_Str"");
      for (int i=0; i < expectedChildNodes.getLength(); i++) {
        actualOutput.append(expectedChildNodes.item(i).getNodeName() + ""String_Node_Str"");
      }
      actualOutput.append(""String_Node_Str"");
      return false;
    }
 else {
      for (int i=0; i < actualChildNodes.getLength(); i++) {
        if (!compare(actualChildNodes.item(i),expectedChildNodes.item(i),indentation + ""String_Node_Str"",expectedOutput,actualOutput)) {
          return false;
        }
      }
    }
  }
  if (expected.getNodeType() != Node.TEXT_NODE) {
    expectedOutput.append(indentation + ""String_Node_Str"" + expected.getNodeName()+ ""String_Node_Str"");
  }
  if (actual.getNodeType() != Node.TEXT_NODE) {
    actualOutput.append(indentation + ""String_Node_Str"" + actual.getNodeName()+ ""String_Node_Str"");
  }
  return true;
}","public static boolean compare(Node actual,Node expected,String indentation,StringBuilder expectedOutput,StringBuilder actualOutput){
  if (expected.getNodeType() == Node.TEXT_NODE) {
    expectedOutput.append(indentation + expected.getNodeValue() + ""String_Node_Str"");
  }
  if (expected.getNodeType() != Node.TEXT_NODE) {
    expectedOutput.append(indentation + ""String_Node_Str"" + expected.getNodeName()+ ""String_Node_Str"");
  }
  if (actual.getNodeType() == Node.TEXT_NODE) {
    actualOutput.append(indentation + actual.getNodeValue() + ""String_Node_Str"");
  }
  if (actual.getNodeType() != Node.TEXT_NODE) {
    actualOutput.append(indentation + ""String_Node_Str"" + actual.getNodeName()+ ""String_Node_Str"");
  }
  Node debugNode=actual.cloneNode(false);
  if (expected.getNodeType() == Node.ELEMENT_NODE) {
    if (actual.getNodeType() != Node.ELEMENT_NODE) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(""String_Node_Str"" + actual.getNodeName() + ""String_Node_Str"");
      return false;
    }
    if (!actual.getNodeName().equals(expected.getNodeName())) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(""String_Node_Str"" + expected.getNodeName() + ""String_Node_Str""+ actual.getNodeName()+ ""String_Node_Str"");
      return false;
    }
    NamedNodeMap actualAttributeList=actual.getAttributes();
    NamedNodeMap expectedAttributeList=expected.getAttributes();
    boolean dhtmltooltipIgnore=false;
    for (int i=0; i < expectedAttributeList.getLength(); i++) {
      Node expectedAttribute=expectedAttributeList.item(i);
      expectedOutput.append(expectedAttribute.getNodeName() + ""String_Node_Str"" + expectedAttribute.getNodeValue()+ ""String_Node_Str"");
    }
    expectedOutput.append(""String_Node_Str"");
    for (int i=0; i < actualAttributeList.getLength(); i++) {
      Node actualAttribute=actualAttributeList.item(i);
      actualOutput.append(actualAttribute.getNodeName() + ""String_Node_Str"" + actualAttribute.getNodeValue()+ ""String_Node_Str"");
    }
    actualOutput.append(""String_Node_Str"");
    for (int i=0; i < expectedAttributeList.getLength(); i++) {
      Node expectedAttribute=expectedAttributeList.item(i);
      Node actualAttribute=null;
      try {
        actualAttribute=actualAttributeList.removeNamedItem(expectedAttribute.getNodeName());
        if (actualAttribute.getNodeName().equals(""String_Node_Str"") && actualAttribute.getNodeValue().equals(""String_Node_Str"")) {
          dhtmltooltipIgnore=true;
        }
      }
 catch (      DOMException e) {
        actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
        actualOutput.append(""String_Node_Str"" + expectedAttribute.getNodeName() + ""String_Node_Str"");
        return false;
      }
      if (expectedAttribute.getNodeValue().trim().equals(""String_Node_Str"")) {
      }
 else       if (!actualAttribute.getNodeValue().equals(expectedAttribute.getNodeValue())) {
        actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
        actualOutput.append(""String_Node_Str"" + expectedAttribute.getNodeName() + ""String_Node_Str""+ actualAttribute.getNodeValue()+ ""String_Node_Str""+ expectedAttribute.getNodeValue()+ ""String_Node_Str"");
        return false;
      }
    }
    if (actualAttributeList.getLength() > 0) {
      if (dhtmltooltipIgnore && actualAttributeList.getLength() == 1 && actualAttributeList.item(0).getNodeName().equals(""String_Node_Str"")) {
      }
 else {
        actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
        actualOutput.append(""String_Node_Str"");
        for (int i=0; i < actualAttributeList.getLength(); i++) {
          Node actualAttribute=actualAttributeList.item(i);
          actualOutput.append(""String_Node_Str"" + actualAttribute.getNodeName() + ""String_Node_Str""+ actualAttribute.getNodeValue()+ ""String_Node_Str"");
        }
        return false;
      }
    }
  }
 else   if (expected.getNodeType() == Node.TEXT_NODE) {
    if (actual.getNodeType() != Node.TEXT_NODE) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(indentation + ""String_Node_Str"" + actual.getNodeName()+ ""String_Node_Str"");
      return false;
    }
 else     if (expected.getNodeValue().trim().equals(""String_Node_Str"")) {
    }
 else     if (!actual.getNodeValue().trim().equals(expected.getNodeValue().trim())) {
      actualOutput.append(""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(indentation + ""String_Node_Str"" + expected.getNodeValue()+ ""String_Node_Str""+ actual.getNodeValue()+ ""String_Node_Str"");
      return false;
    }
  }
  if (expected.hasChildNodes() || expected.hasChildNodes()) {
    NodeList actualChildNodes=actual.getChildNodes();
    NodeList expectedChildNodes=expected.getChildNodes();
    if (actualChildNodes.getLength() != expectedChildNodes.getLength()) {
      actualOutput.append(indentation + ""String_Node_Str"");
      actualOutput.append(indentation + ""String_Node_Str"" + printHtmlFromNode(debugNode));
      actualOutput.append(indentation + ""String_Node_Str"");
      for (int i=0; i < actualChildNodes.getLength(); i++) {
        actualOutput.append(indentation + indentation + actualChildNodes.item(i).getNodeName()+ ""String_Node_Str"");
        NamedNodeMap actualAttributeList=actualChildNodes.item(i).getAttributes();
        for (int j=0; j < actualAttributeList.getLength(); j++) {
          actualOutput.append(actualAttributeList.item(j).getNodeName() + ""String_Node_Str"" + actualAttributeList.item(j).getNodeValue()+ ""String_Node_Str"");
        }
        actualOutput.append(""String_Node_Str"");
      }
      actualOutput.append(""String_Node_Str"");
      actualOutput.append(indentation + ""String_Node_Str"" + printHtmlFromNode(expected));
      actualOutput.append(indentation + ""String_Node_Str"");
      for (int i=0; i < expectedChildNodes.getLength(); i++) {
        actualOutput.append(indentation + indentation + expectedChildNodes.item(i).getNodeName()+ ""String_Node_Str"");
        NamedNodeMap expectedAttributeList=expectedChildNodes.item(i).getAttributes();
        for (int j=0; j < expectedAttributeList.getLength(); j++) {
          actualOutput.append(expectedAttributeList.item(j).getNodeName() + ""String_Node_Str"" + expectedAttributeList.item(j).getNodeValue()+ ""String_Node_Str"");
        }
        actualOutput.append(""String_Node_Str"");
      }
      actualOutput.append(""String_Node_Str"");
      return false;
    }
 else {
      for (int i=0; i < actualChildNodes.getLength(); i++) {
        if (!compare(actualChildNodes.item(i),expectedChildNodes.item(i),indentation + ""String_Node_Str"",expectedOutput,actualOutput)) {
          return false;
        }
      }
    }
  }
  if (expected.getNodeType() != Node.TEXT_NODE) {
    expectedOutput.append(indentation + ""String_Node_Str"" + expected.getNodeName()+ ""String_Node_Str"");
  }
  if (actual.getNodeType() != Node.TEXT_NODE) {
    actualOutput.append(indentation + ""String_Node_Str"" + actual.getNodeName()+ ""String_Node_Str"");
  }
  return true;
}",0.7827188081936686
62945,"/** 
 * Assert whether two HTML strings are the same in the DOM representation. This ignores the order of attributes, and ignores unnecessary whitespaces as well.
 * @param html1
 * @param html2
 * @throws SAXException
 * @throws IOException
 * @throws TransformerException
 */
public static boolean assertSameHtml(String html1,String html2) throws SAXException, IOException, TransformerException {
  html1=preProcessHtml(html1);
  html2=preProcessHtml(html2);
  Node page1=getNodeFromString(html1);
  Node page2=getNodeFromString(html2);
  eliminateEmptyTextNodes(page1);
  eliminateEmptyTextNodes(page2);
  StringBuilder expectedHTML=new StringBuilder();
  StringBuilder actualHTML=new StringBuilder();
  boolean isLogicalMatch=compare(page1,page2,""String_Node_Str"",expectedHTML,actualHTML);
  if (!isLogicalMatch) {
    assertEquals(""String_Node_Str"",expectedHTML.toString(),actualHTML.toString());
  }
  return isLogicalMatch;
}","/** 
 * Assert whether two HTML strings are the same in the DOM representation. This ignores the order of attributes, and ignores unnecessary whitespaces as well.
 * @param html1
 * @param html2
 * @throws SAXException
 * @throws IOException
 * @throws TransformerException
 */
public static boolean assertSameHtml(String actualString,String expectedString) throws SAXException, IOException, TransformerException {
  actualString=preProcessHtml(actualString);
  expectedString=preProcessHtml(expectedString);
  Node actualPage=getNodeFromString(actualString);
  Node expectedPage=getNodeFromString(expectedString);
  eliminateEmptyTextNodes(actualPage);
  eliminateEmptyTextNodes(expectedPage);
  StringBuilder expectedHTML=new StringBuilder();
  StringBuilder actualHTML=new StringBuilder();
  boolean isLogicalMatch=compare(actualPage,expectedPage,""String_Node_Str"",expectedHTML,actualHTML);
  if (!isLogicalMatch) {
    assertEquals(""String_Node_Str"",expectedHTML.toString(),actualHTML.toString());
  }
  return isLogicalMatch;
}",0.8778004073319755
62946,"@Override protected void doAction(HttpServletRequest req,AdminHomeHelper helper){
  String instructorID=req.getParameter(Common.PARAM_INSTRUCTOR_ID);
  String instructorName=req.getParameter(Common.PARAM_INSTRUCTOR_NAME);
  String instructorEmail=req.getParameter(Common.PARAM_INSTRUCTOR_EMAIL);
  String importSampleData=req.getParameter(Common.PARAM_INSTRUCTOR_IMPORT_SAMPLE);
  try {
    if (instructorID != null && instructorName != null && instructorEmail != null) {
      helper.server.createAccount(instructorID,true);
      helper.statusMessage=""String_Node_Str"" + instructorName + ""String_Node_Str"";
    }
    if (importSampleData != null) {
      importDemoData(instructorID,instructorName,instructorEmail,helper);
    }
  }
 catch (  Exception e) {
    helper.statusMessage=e.getMessage();
    helper.error=true;
  }
}","@Override protected void doAction(HttpServletRequest req,AdminHomeHelper helper){
  String instructorID=req.getParameter(Common.PARAM_INSTRUCTOR_ID);
  String instructorName=req.getParameter(Common.PARAM_INSTRUCTOR_NAME);
  String instructorEmail=req.getParameter(Common.PARAM_INSTRUCTOR_EMAIL);
  String importSampleData=req.getParameter(Common.PARAM_INSTRUCTOR_IMPORT_SAMPLE);
  try {
    if (instructorID != null && instructorName != null && instructorEmail != null) {
      helper.server.createAccount(instructorID,instructorName,true,instructorEmail,""String_Node_Str"");
      helper.statusMessage=""String_Node_Str"" + instructorName + ""String_Node_Str"";
    }
    if (importSampleData != null) {
      importDemoData(instructorID,instructorName,instructorEmail,helper);
    }
  }
 catch (  Exception e) {
    helper.statusMessage=e.getMessage();
    helper.error=true;
  }
}",0.9666080843585236
62947,"public String getInvalidStateInfo(){
  String errorMessage=""String_Node_Str"";
  if (this.id == null || this.id == ""String_Node_Str"") {
    errorMessage+=""String_Node_Str"";
  }
  if (this.name == null || this.name == ""String_Node_Str"") {
    errorMessage+=""String_Node_Str"";
  }
  if (this.email == null || this.email == ""String_Node_Str"") {
    errorMessage+=""String_Node_Str"";
  }
  return errorMessage;
}","public String getInvalidStateInfo(){
  String errorMessage=""String_Node_Str"";
  if (!Common.isValidGoogleId(id)) {
    errorMessage+=ERROR_FIELD_ID;
  }
  if (!Common.isValidName(name)) {
    errorMessage+=ERROR_FIELD_NAME;
  }
  if (!Common.isValidEmail(email)) {
    errorMessage+=ERROR_FIELD_EMAIL;
  }
  return errorMessage;
}",0.5380434782608695
62948,"public CoordData(){
  isCoord=true;
}","public CoordData(){
}",0.7241379310344828
62949,"protected void getUserActionLog(HttpServletRequest req,String resp,T helper){
  StringBuilder sb=new StringBuilder();
  String[] actionTkn=req.getServletPath().split(""String_Node_Str"");
  String action=req.getServletPath();
  if (actionTkn.length > 0) {
    action=actionTkn[actionTkn.length - 1];
  }
  sb.append(action + ""String_Node_Str"");
  sb.append(printRequestParameters(req) + ""String_Node_Str"");
  if (helper.user.isCoord) {
    sb.append(""String_Node_Str"");
    CoordData u=helper.server.getCoord(helper.userId);
    sb.append(u.name + ""String_Node_Str"");
    sb.append(u.id + ""String_Node_Str"");
    sb.append(u.email + ""String_Node_Str"");
  }
  if (helper.user.isStudent) {
    sb.append(""String_Node_Str"");
    ArrayList<StudentData> students=helper.server.getStudentsWithId(helper.userId);
    if (students.size() == 1) {
      StudentData s=students.get(0);
      sb.append(s.name + ""String_Node_Str"");
      sb.append(s.id + ""String_Node_Str"");
      sb.append(s.email + ""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(helper.userId + ""String_Node_Str"");
      sb.append(""String_Node_Str"");
    }
  }
  sb.append(resp + ""String_Node_Str"");
}","protected String getUserActionLog(HttpServletRequest req,String resp,T helper){
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  String[] actionTkn=req.getServletPath().split(""String_Node_Str"");
  String action=req.getServletPath();
  if (actionTkn.length > 0) {
    action=actionTkn[actionTkn.length - 1];
  }
  sb.append(action + ""String_Node_Str"");
  if (helper.user.isCoord) {
    sb.append(""String_Node_Str"");
    CoordData u=helper.server.getCoord(helper.userId);
    sb.append(u.name + ""String_Node_Str"");
    sb.append(u.id + ""String_Node_Str"");
    sb.append(u.email + ""String_Node_Str"");
  }
 else   if (helper.user.isStudent) {
    sb.append(""String_Node_Str"");
    ArrayList<StudentData> students=helper.server.getStudentsWithId(helper.userId);
    if (students.size() == 1) {
      StudentData s=students.get(0);
      sb.append(s.name + ""String_Node_Str"");
      sb.append(s.id + ""String_Node_Str"");
      sb.append(s.email + ""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(helper.userId + ""String_Node_Str"");
      sb.append(helper.userId + ""String_Node_Str"");
    }
  }
 else {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(helper.userId + ""String_Node_Str"");
    sb.append(helper.userId + ""String_Node_Str"");
  }
  sb.append(resp + ""String_Node_Str"");
  sb.append(printRequestParameters(req));
  return sb.toString();
}",0.7051625239005737
62950,"@Override public final void doPost(HttpServletRequest req,HttpServletResponse resp) throws IOException, ServletException {
  isPost=req.getMethod().equals(""String_Node_Str"");
  if (isPost) {
    log.info(""String_Node_Str"");
  }
 else {
    log.info(""String_Node_Str"");
  }
  T helper=instantiateHelper();
  prepareHelper(req,helper);
  try {
    doAction(req,helper);
    log.info(""String_Node_Str"" + req.getServletPath() + ""String_Node_Str""+ ""String_Node_Str""+ printRequestParameters(req)+ ""String_Node_Str""+ ""String_Node_Str""+ resp.SC_OK);
  }
 catch (  EntityDoesNotExistException e) {
    log.warning(""String_Node_Str"" + req.getServletPath() + ""String_Node_Str""+ ""String_Node_Str""+ printRequestParameters(req)+ ""String_Node_Str""+ ""String_Node_Str""+ e.getMessage());
    resp.sendRedirect(Common.JSP_ENTITY_NOT_FOUND_PAGE);
    return;
  }
catch (  UnauthorizedAccessException e) {
    UserData user=new Logic().getLoggedInUser();
    log.warning(""String_Node_Str"" + req.getServletPath() + ""String_Node_Str""+ ""String_Node_Str""+ printRequestParameters(req)+ ""String_Node_Str""+ ""String_Node_Str""+ (user == null ? ""String_Node_Str"" : user.id)+ Common.stackTraceToString(e));
    resp.sendRedirect(Common.JSP_UNAUTHORIZED);
    return;
  }
catch (  Exception e) {
    log.severe(""String_Node_Str"" + req.getServletPath() + ""String_Node_Str""+ ""String_Node_Str""+ printRequestParameters(req)+ ""String_Node_Str""+ ""String_Node_Str""+ Common.stackTraceToString(e));
    resp.sendRedirect(Common.JSP_ERROR_PAGE);
    return;
  }
  doCreateResponse(req,resp,helper);
}","@Override public final void doPost(HttpServletRequest req,HttpServletResponse resp) throws IOException, ServletException {
  isPost=req.getMethod().equals(""String_Node_Str"");
  if (isPost) {
    log.info(""String_Node_Str"");
  }
 else {
    log.info(""String_Node_Str"");
  }
  T helper=instantiateHelper();
  prepareHelper(req,helper);
  Level logLevel=null;
  String response=null;
  try {
    doAction(req,helper);
    logLevel=Level.INFO;
    response=""String_Node_Str"";
    doCreateResponse(req,resp,helper);
  }
 catch (  EntityDoesNotExistException e) {
    logLevel=Level.WARNING;
    response=""String_Node_Str"";
    resp.sendRedirect(Common.JSP_ENTITY_NOT_FOUND_PAGE);
  }
catch (  UnauthorizedAccessException e) {
    UserData user=new Logic().getLoggedInUser();
    logLevel=Level.WARNING;
    response=""String_Node_Str"" + (user == null ? ""String_Node_Str"" : user.id);
    resp.sendRedirect(Common.JSP_UNAUTHORIZED);
  }
catch (  Throwable e) {
    logLevel=Level.SEVERE;
    response=""String_Node_Str"" + (e.getMessage() == null ? ""String_Node_Str"" : e.getMessage());
    resp.sendRedirect(Common.JSP_ERROR_PAGE);
  }
 finally {
    String logMsg=getUserActionLog(req,response,helper);
    logUserAction(logLevel,logMsg);
  }
}",0.4606017191977077
62951,"private List<AppLogLine> getAppLogs(LogQuery query,int queryLimit,AdminHomeHelper helper){
  List<AppLogLine> appLogs=new LinkedList<AppLogLine>();
  String lastOffset=null;
  int i=0;
  for (  RequestLogs record : LogServiceFactory.getLogService().fetch(query)) {
    lastOffset=record.getOffset();
    for (    AppLogLine appLog : record.getAppLogLines()) {
      if (appLog.getLogMessage().contains(""String_Node_Str"")) {
        appLogs.add(appLog);
      }
    }
    if (++i >= queryLimit) {
      break;
    }
  }
  if (lastOffset != null) {
    helper.statusMessage=String.format(""String_Node_Str"",Common.PAGE_ADMIN_ACTIVITY_LOG,lastOffset);
  }
  return appLogs;
}","private List<AppLogLine> getAppLogs(LogQuery query,int queryLimit,AdminHomeHelper helper){
  List<AppLogLine> appLogs=new LinkedList<AppLogLine>();
  String lastOffset=null;
  int i=0;
  for (  RequestLogs record : LogServiceFactory.getLogService().fetch(query)) {
    lastOffset=record.getOffset();
    for (    AppLogLine appLog : record.getAppLogLines()) {
      String logMsg=appLog.getLogMessage();
      if (logMsg.contains(""String_Node_Str"")) {
        appLogs.add(appLog);
      }
    }
    if (++i >= queryLimit) {
      break;
    }
  }
  if (lastOffset != null) {
    helper.statusMessage=String.format(""String_Node_Str"",Common.PAGE_ADMIN_ACTIVITY_LOG,lastOffset);
  }
  return appLogs;
}",0.945985401459854
62952,"@PerformanceTest(name=""String_Node_Str"") public Long coordDeleteEval() throws Exception {
  int evalRowID=bi.getEvaluationRowID(""String_Node_Str"",""String_Node_Str"");
  By deleteLinkLocator=bi.getCoordEvaluationDeleteLinkLocator(evalRowID);
  long startTime=System.nanoTime();
  bi.clickAndConfirm(deleteLinkLocator);
  return System.nanoTime() - startTime;
}","@PerformanceTest(name=""String_Node_Str"",customTimer=true) public Long coordDeleteEval(){
  int evalRowID=bi.getEvaluationRowID(""String_Node_Str"",""String_Node_Str"");
  By deleteLinkLocator=bi.getCoordEvaluationDeleteLinkLocator(evalRowID);
  long startTime=System.nanoTime();
  bi.clickAndConfirm(deleteLinkLocator);
  return System.nanoTime() - startTime;
}",0.951048951048951
62953,"public void run(){
  String jsonString=""String_Node_Str"";
  try {
    jsonString=Common.readFile(Common.TEST_DATA_FOLDER + ""String_Node_Str"" + runningDataSourceFile);
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
  }
  data=gson.fromJson(jsonString,DataBundle.class);
  try {
    results=importReportFile(reportFilePath);
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  for (int i=0; i < NUM_OF_RUNS; i++) {
    bi=BrowserInstancePool.getBrowserInstance();
    Method[] methods=PerformanceProfiler.class.getMethods();
    for (    Method method : methods) {
      if (method.isAnnotationPresent(PerformanceTest.class)) {
        PerformanceTest test=method.getAnnotation(PerformanceTest.class);
        String name=test.name();
        boolean customTimer=test.customTimer();
        Type type=method.getReturnType();
        if (!results.containsKey(name)) {
          results.put(name,new ArrayList<Float>());
        }
        try {
          float duration=0;
          if (type.equals(String.class) && customTimer == false) {
            long startTime=System.nanoTime();
            Object retVal=(String)method.invoke(this);
            long endTime=System.nanoTime();
            duration=(float)((endTime - startTime) / 1000000.0);
            System.out.print(""String_Node_Str"" + name + ""String_Node_Str""+ duration+ ""String_Node_Str""+ retVal.toString()+ ""String_Node_Str"");
          }
 else           if (type.equals(Long.class) && customTimer == true) {
            duration=(float)(((Long)(method.invoke(this))) / 1000000.0);
            System.out.print(""String_Node_Str"" + name + ""String_Node_Str""+ duration+ ""String_Node_Str"");
          }
          ArrayList<Float> countList=results.get(name);
          countList.add(duration);
        }
 catch (        Exception e) {
          System.out.print(e.toString());
        }
        try {
          Thread.sleep(WAIT_TIME_TEST);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
    BrowserInstancePool.release(bi);
    try {
      Thread.sleep(WAIT_TIME_RUN);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  try {
    printResult(reportFilePath);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  System.out.print(""String_Node_Str"");
}","public void run(){
  String jsonString=""String_Node_Str"";
  try {
    jsonString=Common.readFile(Common.TEST_DATA_FOLDER + ""String_Node_Str"" + runningDataSourceFile);
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
  }
  data=gson.fromJson(jsonString,DataBundle.class);
  try {
    results=importReportFile(reportFilePath);
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  for (int i=0; i < NUM_OF_RUNS; i++) {
    bi=BrowserInstancePool.getBrowserInstance();
    Method[] methods=PerformanceProfiler.class.getMethods();
    for (    Method method : methods) {
      performMethod(method);
    }
    BrowserInstancePool.release(bi);
    try {
      Thread.sleep(WAIT_TIME_RUN);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  try {
    printResult(reportFilePath);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  System.out.print(""String_Node_Str"");
}",0.5265405735204393
62954,"/** 
 * Run this script as an single-thread Java application (for simple, non-parallel profiling)
 * @param args
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  (new PerformanceProfiler(defaultReportPath)).start();
}","/** 
 * Run this script as an single-thread Java application (for simple, non-parallel profiling) For parallel profiling, please use ParallelProfiler.java
 * @param args
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  (new PerformanceProfiler(defaultReportPath)).start();
}",0.8987566607460036
62955,"@PerformanceTest(name=""String_Node_Str"",customTimer=true) public Long coordAddCourse(){
  bi.addCourse(""String_Node_Str"",""String_Node_Str"");
  long startTime=System.nanoTime();
  bi.waitForStatusMessage(Common.MESSAGE_COURSE_ADDED);
  return System.nanoTime() - startTime;
}","@PerformanceTest(name=""String_Node_Str"",customTimer=true) public Long coordAddCourse(){
  long startTime=System.nanoTime();
  bi.addCourse(""String_Node_Str"",""String_Node_Str"");
  bi.waitForStatusMessage(Common.MESSAGE_COURSE_ADDED);
  return System.nanoTime() - startTime;
}",0.8686131386861314
62956,"@PerformanceTest(name=""String_Node_Str"") public Long coordCourseDeleteStudent(){
  int studentRowId=bi.getStudentRowId(""String_Node_Str"");
  long startTime=System.nanoTime();
  bi.clickCoordCourseDetailStudentDeleteAndConfirm(studentRowId);
  return System.nanoTime() - startTime;
}","@PerformanceTest(name=""String_Node_Str"",customTimer=true) public Long coordCourseDeleteStudent(){
  int studentRowId=bi.getStudentRowId(""String_Node_Str"");
  long startTime=System.nanoTime();
  bi.clickCoordCourseDetailStudentDeleteAndConfirm(studentRowId);
  return System.nanoTime() - startTime;
}",0.9707401032702238
62957,"@PerformanceTest(name=""String_Node_Str"",customTimer=true) public Long coordAddEval(){
  Calendar cal=Calendar.getInstance();
  cal.add(Calendar.DATE,+1);
  Date date1=cal.getTime();
  cal.add(Calendar.DATE,+2);
  Date date2=cal.getTime();
  bi.addEvaluation(""String_Node_Str"",""String_Node_Str"",date1,date2,true,""String_Node_Str"",5);
  long startTime=System.nanoTime();
  bi.waitForStatusMessage(Common.MESSAGE_EVALUATION_ADDED);
  return System.nanoTime() - startTime;
}","@PerformanceTest(name=""String_Node_Str"",customTimer=true) public Long coordAddEval(){
  Calendar cal=Calendar.getInstance();
  cal.add(Calendar.DATE,+1);
  Date date1=cal.getTime();
  cal.add(Calendar.DATE,+2);
  Date date2=cal.getTime();
  long startTime=System.nanoTime();
  bi.addEvaluation(""String_Node_Str"",""String_Node_Str"",date1,date2,true,""String_Node_Str"",5);
  bi.waitForStatusMessage(Common.MESSAGE_EVALUATION_ADDED);
  return System.nanoTime() - startTime;
}",0.9234042553191488
62958,"@PerformanceTest(name=""String_Node_Str"") public Long coordCourseEnrollStudent(){
  String enrollString=""String_Node_Str"";
  bi.fillString(By.id(""String_Node_Str""),enrollString);
  long startTime=System.nanoTime();
  bi.click(By.id(""String_Node_Str""));
  return System.nanoTime() - startTime;
}","@PerformanceTest(name=""String_Node_Str"",customTimer=true) public Long coordCourseEnrollStudent(){
  String enrollString=""String_Node_Str"";
  bi.fillString(By.id(""String_Node_Str""),enrollString);
  long startTime=System.nanoTime();
  bi.click(By.id(""String_Node_Str""));
  return System.nanoTime() - startTime;
}",0.9718076285240465
62959,"public static boolean isValidCourseId(String courseId){
  if (isValidString(courseId) && hasNoSpace(courseId) && courseId.matches(""String_Node_Str"")&& courseId.length() <= COURSE_ID_MAX_LENGTH) {
    return true;
  }
  return false;
}","public static boolean isValidCourseId(String courseId){
  return (isValidString(courseId) && hasNoSpace(courseId) && courseId.matches(""String_Node_Str"")&& courseId.length() <= COURSE_ID_MAX_LENGTH);
}",0.8940092165898618
62960,"public static boolean hasNoSpace(String string){
  if (string.split(""String_Node_Str"").length > 1) {
    return false;
  }
  return true;
}","public static boolean hasNoSpace(String string){
  return string.split(""String_Node_Str"").length == 1;
}",0.7901234567901234
62961,"public static boolean isValidEmail(String email){
  if (isValidString(email) && hasNoSpace(email) && email.contains(""String_Node_Str"")) {
    return true;
  }
  return false;
}","public static boolean isValidEmail(String email){
  return (isValidString(email) && hasNoSpace(email) && email.contains(""String_Node_Str""));
}",0.8553459119496856
62962,"public static boolean isValidName(String name){
  if (isValidString(name)) {
    return true;
  }
  return false;
}","public static boolean isValidName(String name){
  return isValidString(name);
}",0.7525773195876289
62963,"public static boolean isValidGoogleId(String googleId){
  if (isValidString(googleId) && hasNoSpace(googleId)) {
    return true;
  }
  return false;
}","public static boolean isValidGoogleId(String googleId){
  return (isValidString(googleId) && hasNoSpace(googleId));
}",0.8283582089552238
62964,"public static boolean isValidString(String string){
  if (string == null || string == ""String_Node_Str"" || string.length() == 0) {
    return false;
  }
  return true;
}","public static boolean isValidString(String string){
  return (string != null && string != ""String_Node_Str"" && string.length() != 0);
}",0.8026315789473685
62965,"public boolean isValid(){
  if (Common.isValidGoogleId(id) && Common.isValidName(name) && Common.isValidEmail(email)) {
    return true;
  }
  return false;
}","public boolean isValid(){
  return getInvalidStateInfo() == ""String_Node_Str"";
}",0.3529411764705882
62966,"public boolean isValid(){
  if (Common.isValidCourseId(id) && Common.isValidName(name) && name.length() <= COURSE_NAME_MAX_LENGTH && Common.isValidGoogleId(coord)) {
    return true;
  }
  return false;
}","public boolean isValid(){
  return getInvalidStateInfo() == ""String_Node_Str"";
}",0.2957746478873239
62967,"public String getInvalidStateInfo(){
  String errorMessage=""String_Node_Str"";
  if (!Common.isValidCourseId(course)) {
    errorMessage+=ERROR_FIELD_COURSE;
  }
  if (!Common.isValidName(name)) {
    errorMessage+=ERROR_FIELD_NAME;
  }
 else   if (name.length() > EVALUATION_NAME_MAX_LENGTH) {
    errorMessage+=ERROR_NAME_TOOLONG;
  }
  if (this.startTime == null) {
    errorMessage+=ERROR_FIELD_STARTTIME;
  }
  if (this.endTime == null) {
    errorMessage+=ERROR_FIELD_ENDTIME;
  }
  if (this.startTime != null && this.endTime != null) {
    if (endTime.before(startTime)) {
      errorMessage+=ERROR_END_BEFORE_START;
    }
    if (beforeTime(endTime) && published) {
      errorMessage+=ERROR_PUBLISHED_BEFORE_END;
    }
    if (beforeTime(startTime) && activated) {
      errorMessage+=ERROR_ACTIVATED_BEFORE_START;
    }
  }
  return errorMessage;
}","public String getInvalidStateInfo(){
  String errorMessage=""String_Node_Str"";
  if (!Common.isValidCourseId(course)) {
    errorMessage+=ERROR_FIELD_COURSE;
  }
  if (!Common.isValidName(name)) {
    errorMessage+=ERROR_FIELD_NAME;
  }
 else   if (name.length() > EVALUATION_NAME_MAX_LENGTH) {
    errorMessage+=ERROR_NAME_TOOLONG;
  }
  if (this.startTime == null) {
    errorMessage+=ERROR_FIELD_STARTTIME;
  }
  if (this.endTime == null) {
    errorMessage+=ERROR_FIELD_ENDTIME;
  }
  if (this.startTime != null && this.endTime != null) {
    if (endTime.before(startTime)) {
      errorMessage+=ERROR_END_BEFORE_START;
    }
    if (isCurrentTimeZoneEarlierThan(endTime) && published) {
      errorMessage+=ERROR_PUBLISHED_BEFORE_END;
    }
    if (isCurrentTimeZoneEarlierThan(startTime) && activated) {
      errorMessage+=ERROR_ACTIVATED_BEFORE_START;
    }
  }
  return errorMessage;
}",0.9565714285714284
62968,"public boolean isValid(){
  course=course == null ? null : course.trim();
  name=name == null ? null : name.trim();
  if (Common.isValidCourseId(course) && Common.isValidName(name) && name.length() <= EVALUATION_NAME_MAX_LENGTH && this.startTime != null && this.endTime != null && !endTime.before(startTime) && !(beforeTime(endTime) && published) && !(beforeTime(startTime) && activated)) {
    return true;
  }
  return false;
}","public boolean isValid(){
  course=course == null ? null : course.trim();
  name=name == null ? null : name.trim();
  return getInvalidStateInfo() == ""String_Node_Str"";
}",0.4407345575959933
62969,"public StudentData(Student student){
  this();
  this.email=student.getEmail();
  this.course=student.getCourseID();
  this.name=student.getName();
  this.comments=student.getComments() == null ? ""String_Node_Str"" : student.getComments();
  this.team=student.getTeamName() == null ? ""String_Node_Str"" : student.getTeamName();
  this.profile=student.getProfileDetail();
  this.id=student.getID() == null ? ""String_Node_Str"" : student.getID();
  Long keyAsLong=student.getRegistrationKey();
  this.key=(keyAsLong == null ? null : Student.getStringKeyForLongKey(keyAsLong));
}","public StudentData(Student student){
  this();
  this.email=student.getEmail();
  this.course=student.getCourseID();
  this.name=student.getName();
  this.comments=((student.getComments() == null) ? ""String_Node_Str"" : student.getComments());
  this.team=((student.getTeamName() == null) ? ""String_Node_Str"" : student.getTeamName());
  this.profile=student.getProfileDetail();
  this.id=((student.getID() == null) ? ""String_Node_Str"" : student.getID());
  Long keyAsLong=student.getRegistrationKey();
  this.key=(keyAsLong == null ? null : Student.getStringKeyForLongKey(keyAsLong));
}",0.9654576856649396
62970,"public boolean isValid(){
  if (Common.isValidName(name) && name.length() <= STUDENT_NAME_MAX_LENGTH && (team == null || (team.length() <= TEAM_NAME_MAX_LENGTH)) && Common.isValidEmail(email) && Common.isValidCourseId(course) && (comments == null || (comments.length() <= COMMENTS_MAX_LENGTH))) {
    return true;
  }
  return false;
}","public boolean isValid(){
  return getInvalidStateInfo() == ""String_Node_Str"";
}",0.2024096385542168
62971,"public boolean isValid(){
  if (Common.isValidCourseId(course) && Common.isValidName(evaluation) && Common.isValidEmail(reviewee)&& Common.isValidEmail(reviewer)) {
    return true;
  }
  return false;
}","public boolean isValid(){
  return getInvalidStateInfo() == ""String_Node_Str"";
}",0.2968197879858657
62972,"public MimeMessage generateSystemErrorEmail(Throwable error,String requestPath,String requestParam) throws AddressException, MessagingException {
  Session session=Session.getDefaultInstance(new Properties(),null);
  MimeMessage message=new MimeMessage(session);
  String errorMessage=error.getMessage();
  String stackTrace=Common.stackTraceToString(error);
  if (errorMessage == null) {
    int msgTruncateIndex=stackTrace.indexOf(""String_Node_Str"");
    if (msgTruncateIndex > 0) {
      errorMessage=stackTrace.substring(0,msgTruncateIndex);
    }
 else {
      errorMessage=""String_Node_Str"";
    }
  }
  String recipient=BuildProperties.inst().getAppCrashReportEmail();
  message.addRecipient(Message.RecipientType.TO,new InternetAddress(recipient));
  message.setFrom(new InternetAddress(from));
  message.setSubject(String.format(SUBJECT_PREFIX_ADMIN_SYSTEM_ERROR,BuildProperties.getAppVersion(),errorMessage));
  String emailBody=Common.SYSTEM_ERROR_EMAIL_TEMPLATE;
  emailBody=emailBody.replace(""String_Node_Str"",requestPath);
  emailBody=emailBody.replace(""String_Node_Str"",requestParam);
  emailBody=emailBody.replace(""String_Node_Str"",errorMessage);
  emailBody=emailBody.replace(""String_Node_Str"",stackTrace);
  message.setContent(emailBody,""String_Node_Str"");
  sendEmail(message);
  return message;
}","/** 
 * Generate Email of system error the parameter ""version"" can be encapsulated in side this function it's kept as a parameter for testing purpose
 */
public MimeMessage generateSystemErrorEmail(Throwable error,String requestPath,String requestParam,String version) throws AddressException, MessagingException {
  Session session=Session.getDefaultInstance(new Properties(),null);
  MimeMessage message=new MimeMessage(session);
  String errorMessage=error.getMessage();
  String stackTrace=Common.stackTraceToString(error);
  if (errorMessage == null) {
    int msgTruncateIndex=stackTrace.indexOf(""String_Node_Str"");
    if (msgTruncateIndex > 0) {
      errorMessage=stackTrace.substring(0,msgTruncateIndex);
    }
 else {
      errorMessage=""String_Node_Str"";
    }
  }
  String recipient=BuildProperties.inst().getAppCrashReportEmail();
  message.addRecipient(Message.RecipientType.TO,new InternetAddress(recipient));
  message.setFrom(new InternetAddress(from));
  message.setSubject(String.format(SUBJECT_PREFIX_ADMIN_SYSTEM_ERROR,version,errorMessage));
  String emailBody=Common.SYSTEM_ERROR_EMAIL_TEMPLATE;
  emailBody=emailBody.replace(""String_Node_Str"",requestPath);
  emailBody=emailBody.replace(""String_Node_Str"",requestParam);
  emailBody=emailBody.replace(""String_Node_Str"",errorMessage);
  emailBody=emailBody.replace(""String_Node_Str"",stackTrace);
  message.setContent(emailBody,""String_Node_Str"");
  return message;
}",0.9168784029038112
62973,"/** 
 * This method sends run-time error message to system support email
 * @param req httpRequest that triggers the error
 * @param error the error object
 */
public MimeMessage emailErrorReport(String path,String params,Throwable error){
  Emails emailMgr=new Emails();
  MimeMessage email=null;
  try {
    email=emailMgr.generateSystemErrorEmail(error,path,params);
    emailMgr.sendEmail(email);
    log.severe(""String_Node_Str"" + Emails.getEmailInfo(email));
  }
 catch (  Exception e) {
    log.severe(""String_Node_Str"" + (email == null ? ""String_Node_Str"" : email.toString()));
  }
  return email;
}","/** 
 * This method sends run-time error message to system support email
 * @param req httpRequest that triggers the error
 * @param error the error object
 */
public MimeMessage emailErrorReport(String path,String params,Throwable error){
  Emails emailMgr=new Emails();
  MimeMessage email=null;
  try {
    email=emailMgr.generateSystemErrorEmail(error,path,params,BuildProperties.getAppVersion());
    emailMgr.sendEmail(email);
    log.severe(""String_Node_Str"" + Emails.getEmailInfo(email));
  }
 catch (  Exception e) {
    log.severe(""String_Node_Str"" + (email == null ? ""String_Node_Str"" : email.toString()));
  }
  return email;
}",0.9743178170144462
62974,"@Test public void testSystemCrashReportEmailContent() throws IOException, MessagingException {
  AssertionError error=new AssertionError(""String_Node_Str"");
  StackTraceElement s1=new StackTraceElement(SystemErrorEmailReportTest.class.getName(),""String_Node_Str"",""String_Node_Str"",89);
  error.setStackTrace(new StackTraceElement[]{s1});
  String stackTrace=Common.stackTraceToString(error);
  String requestPath=""String_Node_Str"";
  String requestParam=""String_Node_Str"";
  String version=""String_Node_Str"";
  ______TS(""String_Node_Str"");
  MimeMessage email=new Emails().generateSystemErrorEmail(error.getMessage(),stackTrace,requestPath,requestParam,version);
  String recipient=BuildProperties.inst().getAppCrashReportEmail();
  assertEquals(recipient,email.getAllRecipients()[0].toString());
  assertEquals(from,email.getFrom()[0].toString());
  String emailBody=email.getContent().toString();
  assertContainsRegex(""String_Node_Str"" + error.getMessage() + ""String_Node_Str""+ requestPath+ ""String_Node_Str""+ requestParam+ ""String_Node_Str""+ stackTrace+ ""String_Node_Str"",emailBody);
}","@Test public void testSystemCrashReportEmailContent() throws IOException, MessagingException {
  AssertionError error=new AssertionError(""String_Node_Str"");
  StackTraceElement s1=new StackTraceElement(SystemErrorEmailReportTest.class.getName(),""String_Node_Str"",""String_Node_Str"",89);
  error.setStackTrace(new StackTraceElement[]{s1});
  String stackTrace=Common.stackTraceToString(error);
  String requestPath=""String_Node_Str"";
  String requestParam=""String_Node_Str"";
  ______TS(""String_Node_Str"");
  MimeMessage email=new Emails().generateSystemErrorEmail(error,requestPath,requestParam,TestProperties.inst().TEAMMATES_VERSION);
  String recipient=BuildProperties.inst().getAppCrashReportEmail();
  assertEquals(recipient,email.getAllRecipients()[0].toString());
  assertEquals(from,email.getFrom()[0].toString());
  String emailBody=email.getContent().toString();
  assertContainsRegex(""String_Node_Str"" + error.getMessage() + ""String_Node_Str""+ requestPath+ ""String_Node_Str""+ requestParam+ ""String_Node_Str""+ stackTrace+ ""String_Node_Str"",emailBody);
}",0.906046511627907
62975,"@Test public void testCoordEvalSubmissionViewAndEdit() throws Exception {
  EvaluationData eval=scn.evaluations.get(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  String link=appUrl + Common.PAGE_COORD_EVAL_RESULTS;
  link=Common.addParamToUrl(link,Common.PARAM_COURSE_ID,eval.course);
  link=Common.addParamToUrl(link,Common.PARAM_EVALUATION_NAME,eval.name);
  link=Common.addParamToUrl(link,Common.PARAM_USER_ID,scn.coords.get(""String_Node_Str"").id);
  bi.goToUrl(link);
  int studentResultsRowID=bi.getStudentRowId(scn.students.get(""String_Node_Str"").name);
  bi.click(bi.getReviewerSummaryView(studentResultsRowID));
  String current=bi.getDriver().getWindowHandle();
  for (  String s : bi.getDriver().getWindowHandles()) {
    if (!current.equals(s)) {
      bi.getSelenium().selectWindow(s);
      break;
    }
  }
  bi.verifyCurrentPageHTML(Common.TEST_PAGES_FOLDER + ""String_Node_Str"");
  ______TS(""String_Node_Str"");
  link=appUrl + Common.PAGE_COORD_EVAL_SUBMISSION_VIEW;
  link=Common.addParamToUrl(link,Common.PARAM_COURSE_ID,eval.course);
  link=Common.addParamToUrl(link,Common.PARAM_EVALUATION_NAME,eval.name);
  link=Common.addParamToUrl(link,Common.PARAM_STUDENT_EMAIL,scn.students.get(""String_Node_Str"").email);
  link=Common.addParamToUrl(link,Common.PARAM_USER_ID,scn.coords.get(""String_Node_Str"").id);
  bi.goToUrl(link);
  bi.verifyCurrentPageHTML(Common.TEST_PAGES_FOLDER + ""String_Node_Str"");
  bi.click(By.id(""String_Node_Str""));
  ______TS(""String_Node_Str"");
  bi.verifyCurrentPageHTML(Common.TEST_PAGES_FOLDER + ""String_Node_Str"");
  SubmissionData[] subs=new SubmissionData[3];
  subs[0]=scn.submissions.get(""String_Node_Str"");
  subs[1]=scn.submissions.get(""String_Node_Str"");
  subs[2]=scn.submissions.get(""String_Node_Str"");
  for (int i=0; i < 3; i++) {
    subs[i].points-=10;
    subs[i].justification=new Text(subs[i].justification.getValue() + ""String_Node_Str"");
    subs[i].p2pFeedback=new Text(subs[i].p2pFeedback.getValue() + ""String_Node_Str"");
  }
  int charlieEditRowID=bi.getStudentRowIdInEditSubmission(scn.students.get(""String_Node_Str"").name);
  bi.setSubmissionPoint(charlieEditRowID,subs[0].points + ""String_Node_Str"");
  bi.setSubmissionJustification(charlieEditRowID,subs[0].justification.getValue());
  bi.setSubmissionComments(charlieEditRowID,subs[0].p2pFeedback.getValue());
  int dannyEditRowID=bi.getStudentRowIdInEditSubmission(scn.students.get(""String_Node_Str"").name);
  bi.setSubmissionPoint(dannyEditRowID,subs[1].points + ""String_Node_Str"");
  bi.setSubmissionJustification(dannyEditRowID,subs[1].justification.getValue());
  bi.setSubmissionComments(dannyEditRowID,subs[1].p2pFeedback.getValue());
  int emilyEditRowID=bi.getStudentRowIdInEditSubmission(scn.students.get(""String_Node_Str"").name);
  bi.setSubmissionPoint(emilyEditRowID,subs[2].points + ""String_Node_Str"");
  bi.setSubmissionJustification(emilyEditRowID,subs[2].justification.getValue());
  bi.setSubmissionComments(emilyEditRowID,subs[2].p2pFeedback.getValue());
  bi.click(By.id(""String_Node_Str""));
  String charlieEmail=scn.students.get(""String_Node_Str"").email;
  String dannyEmail=scn.students.get(""String_Node_Str"").email;
  String emilyEmail=scn.students.get(""String_Node_Str"").email;
  print(""String_Node_Str"");
  bi.checkCloseWindowAlertIfAny();
  bi.getSelenium().selectWindow(""String_Node_Str"");
  bi.waitForStatusMessage(String.format(Common.MESSAGE_COORD_EVALUATION_SUBMISSION_RECEIVED,scn.students.get(""String_Node_Str"").name,eval.name,eval.course).replace(""String_Node_Str"",""String_Node_Str""));
  print(""String_Node_Str"");
  String json=""String_Node_Str"";
  json=BackDoor.getSubmissionAsJson(eval.course,eval.name,charlieEmail,charlieEmail);
  SubmissionData charlieModified=Common.getTeammatesGson().fromJson(json,SubmissionData.class);
  assertEquals(subs[0].points + ""String_Node_Str"",charlieModified.points + ""String_Node_Str"");
  assertEquals(subs[0].justification.getValue(),charlieModified.justification.getValue());
  assertEquals(subs[0].p2pFeedback.getValue(),charlieModified.p2pFeedback.getValue());
  json=BackDoor.getSubmissionAsJson(eval.course,eval.name,charlieEmail,dannyEmail);
  SubmissionData dannyModified=Common.getTeammatesGson().fromJson(json,SubmissionData.class);
  assertEquals(subs[1].points + ""String_Node_Str"",dannyModified.points + ""String_Node_Str"");
  assertEquals(subs[1].justification.getValue(),dannyModified.justification.getValue());
  assertEquals(subs[1].p2pFeedback.getValue(),dannyModified.p2pFeedback.getValue());
  json=BackDoor.getSubmissionAsJson(eval.course,eval.name,charlieEmail,emilyEmail);
  SubmissionData emilyModified=Common.getTeammatesGson().fromJson(json,SubmissionData.class);
  assertEquals(subs[2].points + ""String_Node_Str"",emilyModified.points + ""String_Node_Str"");
  assertEquals(subs[2].justification.getValue(),emilyModified.justification.getValue());
  assertEquals(subs[2].p2pFeedback.getValue(),emilyModified.p2pFeedback.getValue());
}","@Test public void testCoordEvalSubmissionViewAndEdit() throws Exception {
  EvaluationData eval=scn.evaluations.get(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  String link=appUrl + Common.PAGE_COORD_EVAL_RESULTS;
  link=Common.addParamToUrl(link,Common.PARAM_COURSE_ID,eval.course);
  link=Common.addParamToUrl(link,Common.PARAM_EVALUATION_NAME,eval.name);
  link=Common.addParamToUrl(link,Common.PARAM_USER_ID,scn.coords.get(""String_Node_Str"").id);
  bi.goToUrl(link);
  int studentResultsRowID=bi.getStudentRowId(scn.students.get(""String_Node_Str"").name);
  bi.click(bi.getReviewerSummaryView(studentResultsRowID));
  String current=bi.getDriver().getWindowHandle();
  for (  String s : bi.getDriver().getWindowHandles()) {
    if (!current.equals(s)) {
      bi.getSelenium().selectWindow(s);
      break;
    }
  }
  bi.verifyCurrentPageHTML(Common.TEST_PAGES_FOLDER + ""String_Node_Str"");
  ______TS(""String_Node_Str"");
  link=appUrl + Common.PAGE_COORD_EVAL_SUBMISSION_VIEW;
  link=Common.addParamToUrl(link,Common.PARAM_COURSE_ID,eval.course);
  link=Common.addParamToUrl(link,Common.PARAM_EVALUATION_NAME,eval.name);
  link=Common.addParamToUrl(link,Common.PARAM_STUDENT_EMAIL,scn.students.get(""String_Node_Str"").email);
  link=Common.addParamToUrl(link,Common.PARAM_USER_ID,scn.coords.get(""String_Node_Str"").id);
  bi.goToUrl(link);
  bi.verifyCurrentPageHTML(Common.TEST_PAGES_FOLDER + ""String_Node_Str"");
  bi.click(By.id(""String_Node_Str""));
  ______TS(""String_Node_Str"");
  bi.verifyCurrentPageHTML(Common.TEST_PAGES_FOLDER + ""String_Node_Str"");
  SubmissionData[] subs=new SubmissionData[3];
  subs[0]=scn.submissions.get(""String_Node_Str"");
  subs[1]=scn.submissions.get(""String_Node_Str"");
  subs[2]=scn.submissions.get(""String_Node_Str"");
  for (int i=0; i < 3; i++) {
    subs[i].points-=10;
    subs[i].justification=new Text(subs[i].justification.getValue() + ""String_Node_Str"");
    subs[i].p2pFeedback=new Text(subs[i].p2pFeedback.getValue() + ""String_Node_Str"");
  }
  int charlieEditRowID=bi.getStudentRowIdInEditSubmission(scn.students.get(""String_Node_Str"").name);
  bi.setSubmissionPoint(charlieEditRowID,subs[0].points + ""String_Node_Str"");
  bi.setSubmissionJustification(charlieEditRowID,subs[0].justification.getValue());
  bi.setSubmissionComments(charlieEditRowID,subs[0].p2pFeedback.getValue());
  int dannyEditRowID=bi.getStudentRowIdInEditSubmission(scn.students.get(""String_Node_Str"").name);
  bi.setSubmissionPoint(dannyEditRowID,subs[1].points + ""String_Node_Str"");
  bi.setSubmissionJustification(dannyEditRowID,subs[1].justification.getValue());
  bi.setSubmissionComments(dannyEditRowID,subs[1].p2pFeedback.getValue());
  int emilyEditRowID=bi.getStudentRowIdInEditSubmission(scn.students.get(""String_Node_Str"").name);
  bi.setSubmissionPoint(emilyEditRowID,subs[2].points + ""String_Node_Str"");
  bi.setSubmissionJustification(emilyEditRowID,subs[2].justification.getValue());
  bi.setSubmissionComments(emilyEditRowID,subs[2].p2pFeedback.getValue());
  bi.click(By.id(""String_Node_Str""));
  String charlieEmail=scn.students.get(""String_Node_Str"").email;
  String dannyEmail=scn.students.get(""String_Node_Str"").email;
  String emilyEmail=scn.students.get(""String_Node_Str"").email;
  print(""String_Node_Str"");
  bi.dismissCloseWindowAlertIfAny();
  bi.getSelenium().selectWindow(""String_Node_Str"");
  bi.waitForStatusMessage(String.format(Common.MESSAGE_COORD_EVALUATION_SUBMISSION_RECEIVED,scn.students.get(""String_Node_Str"").name,eval.name,eval.course).replace(""String_Node_Str"",""String_Node_Str""));
  print(""String_Node_Str"");
  String json=""String_Node_Str"";
  json=BackDoor.getSubmissionAsJson(eval.course,eval.name,charlieEmail,charlieEmail);
  SubmissionData charlieModified=Common.getTeammatesGson().fromJson(json,SubmissionData.class);
  assertEquals(subs[0].points + ""String_Node_Str"",charlieModified.points + ""String_Node_Str"");
  assertEquals(subs[0].justification.getValue(),charlieModified.justification.getValue());
  assertEquals(subs[0].p2pFeedback.getValue(),charlieModified.p2pFeedback.getValue());
  json=BackDoor.getSubmissionAsJson(eval.course,eval.name,charlieEmail,dannyEmail);
  SubmissionData dannyModified=Common.getTeammatesGson().fromJson(json,SubmissionData.class);
  assertEquals(subs[1].points + ""String_Node_Str"",dannyModified.points + ""String_Node_Str"");
  assertEquals(subs[1].justification.getValue(),dannyModified.justification.getValue());
  assertEquals(subs[1].p2pFeedback.getValue(),dannyModified.p2pFeedback.getValue());
  json=BackDoor.getSubmissionAsJson(eval.course,eval.name,charlieEmail,emilyEmail);
  SubmissionData emilyModified=Common.getTeammatesGson().fromJson(json,SubmissionData.class);
  assertEquals(subs[2].points + ""String_Node_Str"",emilyModified.points + ""String_Node_Str"");
  assertEquals(subs[2].justification.getValue(),emilyModified.justification.getValue());
  assertEquals(subs[2].p2pFeedback.getValue(),emilyModified.p2pFeedback.getValue());
}",0.9987895904781118
62976,"/** 
 * @param filepath
 * @return Returns content of the file after replacing parameters e.g. {version} and transforming to ""clean"" HTML. 
 * @throws Exception
 */
private String getCleanExpectedHtml(String filepath) throws Exception {
  String inputStr=Common.readFile(filepath).replace(""String_Node_Str"",TestProperties.inst().TEAMMATES_VERSION);
  inputStr=HtmlHelper.cleanupHtml(inputStr);
  return inputStr;
}","/** 
 * @param filepath
 * @return Returns content of the file after replacing parameters e.g. {version} and transforming to ""clean"" HTML. 
 * @throws Exception
 */
private String getCleanExpectedHtml(String filepath) throws Exception {
  String inputStr=Common.readFile(filepath).replace(""String_Node_Str"",TestProperties.inst().TEAMMATES_VERSION);
  inputStr=HtmlHelper.parseHtml(inputStr);
  return inputStr;
}",0.9854721549636803
62977,"/** 
 * @return Returns content of the file after transforming to ""clean"" HTML.
 * @throws Exception
 */
private String getCleanPageSource() throws Exception {
  String pageSrc=getCurrentPageSource();
  pageSrc=HtmlHelper.preProcessHtml(pageSrc);
  pageSrc=HtmlHelper.cleanupHtml(pageSrc);
  pageSrc=HtmlHelper.postProcessHtml(pageSrc);
  return pageSrc;
}","/** 
 * @return Returns content of the file after transforming to ""clean"" HTML.
 * @throws Exception
 */
private String getCleanPageSource() throws Exception {
  String pageSrc=getCurrentPageSource();
  pageSrc=HtmlHelper.parseHtml(pageSrc);
  return pageSrc;
}",0.7876823338735819
62978,"public static String postProcessHtml(String htmlString){
  htmlString=htmlString.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return htmlString;
}","private static String postProcessHtml(String htmlString){
  htmlString=htmlString.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return htmlString;
}",0.9704918032786886
62979,"/** 
 * Assert whether two HTML strings are the same in the DOM representation. This ignores the order of attributes, and ignores unnecessary whitespaces as well.
 * @param html1
 * @param html2
 * @throws SAXException
 * @throws IOException
 * @throws TransformerException
 */
public static void assertSameHtml(String html1,String html2) throws SAXException, IOException, TransformerException {
  html1=preProcessHtml(html1);
  html1=cleanupHtml(html1);
  html1=postProcessHtml(html1);
  html2=preProcessHtml(html2);
  html2=cleanupHtml(html2);
  html2=postProcessHtml(html2);
  assertEquals(html1,html2);
}","/** 
 * Assert whether two HTML strings are the same in the DOM representation. This ignores the order of attributes, and ignores unnecessary whitespaces as well.
 * @param html1
 * @param html2
 * @throws SAXException
 * @throws IOException
 * @throws TransformerException
 */
public static void assertSameHtml(String html1,String html2) throws SAXException, IOException, TransformerException {
  html1=parseHtml(html1);
  html2=parseHtml(html2);
  assertEquals(html1,html2);
}",0.8342541436464088
62980,"public static String preProcessHtml(String htmlString){
  htmlString=htmlString.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  if (htmlString.indexOf(""String_Node_Str"") < 0) {
    htmlString=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + htmlString + ""String_Node_Str"";
  }
  return htmlString;
}","private static String preProcessHtml(String htmlString){
  htmlString=htmlString.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  if (htmlString.indexOf(""String_Node_Str"") < 0) {
    htmlString=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + htmlString + ""String_Node_Str"";
  }
  return htmlString;
}",0.98256735340729
62981,"@Test public void testCoordCourseEnrollPage() throws Exception {
  ______TS(""String_Node_Str"");
  bi.verifyCurrentPageHTML(Common.TEST_PAGES_FOLDER + ""String_Node_Str"");
  bi.fillString(By.id(""String_Node_Str""),""String_Node_Str"");
  bi.click(By.id(""String_Node_Str""));
  bi.verifyCurrentPageHTML(Common.TEST_PAGES_FOLDER + ""String_Node_Str"");
  ______TS(""String_Node_Str"");
  bi.fillString(By.id(""String_Node_Str""),enrollString);
  bi.click(By.id(""String_Node_Str""));
  bi.verifyCurrentPageHTML(Common.TEST_PAGES_FOLDER + ""String_Node_Str"");
}","@Test public void testCoordCourseEnrollPage() throws Exception {
  ______TS(""String_Node_Str"");
  bi.verifyCurrentPageHTML(Common.TEST_PAGES_FOLDER + ""String_Node_Str"");
  String errorString=""String_Node_Str"";
  bi.fillString(By.id(""String_Node_Str""),errorString);
  bi.click(By.id(""String_Node_Str""));
  assertContains(bi.getElementText(By.id(""String_Node_Str"")),errorString);
  bi.fillString(By.id(""String_Node_Str""),""String_Node_Str"");
  bi.verifyCurrentPageHTML(Common.TEST_PAGES_FOLDER + ""String_Node_Str"");
  ______TS(""String_Node_Str"");
  bi.fillString(By.id(""String_Node_Str""),enrollString);
  bi.click(By.id(""String_Node_Str""));
  bi.verifyCurrentPageHTML(Common.TEST_PAGES_FOLDER + ""String_Node_Str"");
}",0.8375796178343949
62982,"/** 
 * Assert whether two HTML strings are the same in the DOM representation. This ignores the order of attributes, and ignores unnecessary whitespaces as well.
 * @param html1
 * @param html2
 * @throws SAXException
 * @throws IOException
 * @throws TransformerException
 */
public static void assertSameHtml(String html1,String html2) throws SAXException, IOException, TransformerException {
  html1=preProcessHTML(html1);
  html1=cleanupHtml(html1);
  html2=preProcessHTML(html2);
  html2=cleanupHtml(html2);
  assertEquals(html1,html2);
}","/** 
 * Assert whether two HTML strings are the same in the DOM representation. This ignores the order of attributes, and ignores unnecessary whitespaces as well.
 * @param html1
 * @param html2
 * @throws SAXException
 * @throws IOException
 * @throws TransformerException
 */
public static void assertSameHtml(String html1,String html2) throws SAXException, IOException, TransformerException {
  html1=preProcessHtml(html1);
  html1=cleanupHtml(html1);
  html1=postProcessHtml(html1);
  html2=preProcessHtml(html2);
  html2=cleanupHtml(html2);
  html2=postProcessHtml(html2);
  assertEquals(html1,html2);
}",0.9184027777777778
62983,"/** 
 * Access level: Admin, Coord (for self)
 * @return Returns a less-detailed version of Coord's evaluations <br>
 */
public ArrayList<EvaluationData> getEvaluationsListForCoord(String coordId) throws EntityDoesNotExistException {
  Common.verifyNotNull(coordId,""String_Node_Str"");
  verifyCoordUsingOwnIdOrAbove(coordId);
  List<Course> courseList=CoursesStorage.inst().getCoordinatorCourseList(coordId);
  if ((courseList.size() == 0) && (getCoord(coordId) == null)) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + coordId);
  }
  ArrayList<EvaluationData> evaluationDetailsList=new ArrayList<EvaluationData>();
  for (  Course c : courseList) {
    ArrayList<EvaluationData> evaluationsSummaryForCourse=EvaluationsStorage.inst().getEvaluationsSummaryForCourse(c.getID());
    evaluationDetailsList.addAll(evaluationsSummaryForCourse);
  }
  return evaluationDetailsList;
}","/** 
 * Access level: Admin, Coord (for self)
 * @return Returns a less-detailed version of Coord's evaluations <br>
 */
public ArrayList<EvaluationData> getEvaluationsListForCoord(String coordId) throws EntityDoesNotExistException {
  Common.verifyNotNull(coordId,""String_Node_Str"");
  verifyCoordUsingOwnIdOrAbove(coordId);
  List<Course> courseList=CoursesStorage.inst().getCoordinatorCourseList(coordId);
  if ((courseList.size() == 0) && (getCoord(coordId) == null)) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + coordId);
  }
  ArrayList<EvaluationData> evaluationSummaryList=new ArrayList<EvaluationData>();
  for (  Course c : courseList) {
    ArrayList<EvaluationData> evaluationsSummaryForCourse=EvaluationsStorage.inst().getEvaluationsSummaryForCourse(c.getID());
    List<StudentData> students=getStudentListForCourse(c.getID());
    for (    EvaluationData evaluation : evaluationsSummaryForCourse) {
      evaluation.expectedTotal=students.size();
      HashMap<String,SubmissionData> submissions=getSubmissionsForEvaluation(c.getID(),evaluation.name);
      evaluation.submittedTotal=countSubmittedStudents(submissions.values());
      evaluationSummaryList.add(evaluation);
    }
  }
  return evaluationSummaryList;
}",0.7614165890027959
62984,"private HashMap<String,SubmissionData> getSubmissionsForEvaluation(String courseId,String evaluationName) throws EntityDoesNotExistException {
  if (getEvaluation(courseId,evaluationName) == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + evaluationName + ""String_Node_Str""+ courseId+ ""String_Node_Str"");
  }
  List<StudentData> students=getStudentListForCourse(courseId);
  List<Submission> submissionsList=EvaluationsStorage.inst().getSubmissionList(courseId,evaluationName);
  submissionsList=purgeOrphanSubmissions(students,submissionsList);
  HashMap<String,SubmissionData> submissionDataList=new HashMap<String,SubmissionData>();
  for (  Submission s : submissionsList) {
    SubmissionData sd=new SubmissionData(s);
    submissionDataList.put(sd.reviewer + ""String_Node_Str"" + sd.reviewee,sd);
  }
  return submissionDataList;
}","/** 
 * Returns submission for the evaluation, excluding orphaned submissions.
 */
private HashMap<String,SubmissionData> getSubmissionsForEvaluation(String courseId,String evaluationName) throws EntityDoesNotExistException {
  if (getEvaluation(courseId,evaluationName) == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + evaluationName + ""String_Node_Str""+ courseId+ ""String_Node_Str"");
  }
  List<StudentData> students=getStudentListForCourse(courseId);
  List<Submission> submissionsList=EvaluationsStorage.inst().getSubmissionList(courseId,evaluationName);
  submissionsList=purgeOrphanSubmissions(students,submissionsList);
  HashMap<String,SubmissionData> submissionDataList=new HashMap<String,SubmissionData>();
  for (  Submission s : submissionsList) {
    SubmissionData sd=new SubmissionData(s);
    submissionDataList.put(sd.reviewer + ""String_Node_Str"" + sd.reviewee,sd);
  }
  return submissionDataList;
}",0.9538632573652028
62985,"public ArrayList<EvaluationData> getEvaluationsSummaryForCourse(String courseId){
  ArrayList<EvaluationData> evaluationsSummaryList=new ArrayList<EvaluationData>();
  List<Evaluation> evaluationList=getEvaluationList(courseId);
  for (  Evaluation e : evaluationList) {
    EvaluationData ed=new EvaluationData();
    ed.course=e.getCourseID();
    ed.name=e.getName();
    ed.instructions=e.getInstructions();
    ed.p2pEnabled=e.isCommentsEnabled();
    ed.startTime=e.getStart();
    ed.endTime=e.getDeadline();
    ed.timeZone=e.getTimeZone();
    ed.gracePeriod=e.getGracePeriod();
    ed.published=e.isPublished();
    ed.activated=e.isActivated();
    ed.submittedTotal=getNumberOfCompletedEvaluations(e.getCourseID(),e.getName());
    ed.expectedTotal=getNumberOfEvaluations(e.getCourseID(),e.getName());
    evaluationsSummaryList.add(ed);
  }
  return evaluationsSummaryList;
}","public ArrayList<EvaluationData> getEvaluationsSummaryForCourse(String courseId){
  ArrayList<EvaluationData> evaluationsSummaryList=new ArrayList<EvaluationData>();
  List<Evaluation> evaluationList=getEvaluationList(courseId);
  for (  Evaluation e : evaluationList) {
    EvaluationData ed=new EvaluationData();
    ed.course=e.getCourseID();
    ed.name=e.getName();
    ed.instructions=e.getInstructions();
    ed.p2pEnabled=e.isCommentsEnabled();
    ed.startTime=e.getStart();
    ed.endTime=e.getDeadline();
    ed.timeZone=e.getTimeZone();
    ed.gracePeriod=e.getGracePeriod();
    ed.published=e.isPublished();
    ed.activated=e.isActivated();
    evaluationsSummaryList.add(ed);
  }
  return evaluationsSummaryList;
}",0.9023485784919654
62986,"@Test public void testGetEvalListForCoord() throws Exception {
  restoreTypicalDataInDatastore();
  ______TS(""String_Node_Str"");
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class<?>[]{String.class};
  Object[] params=new Object[]{""String_Node_Str""};
  verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_UNREGISTERED,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,new Object[]{""String_Node_Str""});
  verifyCanAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  ______TS(""String_Node_Str"");
  CoordData coord1=dataBundle.coords.get(""String_Node_Str"");
  ArrayList<EvaluationData> evalList=logic.getEvaluationsListForCoord(coord1.id);
  assertEquals(3,evalList.size());
  for (  EvaluationData ed : evalList) {
    assertTrue(ed.course.contains(""String_Node_Str""));
  }
  ______TS(""String_Node_Str"");
  loginAsAdmin(""String_Node_Str"");
  CoordData coord2=dataBundle.coords.get(""String_Node_Str"");
  evalList=logic.getEvaluationsListForCoord(coord2.id);
  assertEquals(1,evalList.size());
  for (  EvaluationData ed : evalList) {
    assertTrue(ed.course.contains(""String_Node_Str""));
  }
  ______TS(""String_Node_Str"");
  CoordData coord3=dataBundle.coords.get(""String_Node_Str"");
  evalList=logic.getEvaluationsListForCoord(coord3.id);
  assertEquals(0,evalList.size());
  ______TS(""String_Node_Str"");
  verifyNullPointerException(methodName,""String_Node_Str"",paramTypes,new Object[]{null});
  ______TS(""String_Node_Str"");
  verifyEntityDoesNotExistException(methodName,paramTypes,new Object[]{""String_Node_Str""});
}","@Test public void testGetEvalListForCoord() throws Exception {
  restoreTypicalDataInDatastore();
  ______TS(""String_Node_Str"");
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class<?>[]{String.class};
  Object[] params=new Object[]{""String_Node_Str""};
  verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_UNREGISTERED,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,new Object[]{""String_Node_Str""});
  verifyCanAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  ______TS(""String_Node_Str"");
  CoordData coord1=dataBundle.coords.get(""String_Node_Str"");
  ArrayList<EvaluationData> evalList=logic.getEvaluationsListForCoord(coord1.id);
  assertEquals(3,evalList.size());
  EvaluationData evaluation=dataBundle.evaluations.get(""String_Node_Str"");
  for (  EvaluationData ed : evalList) {
    assertTrue(ed.course.contains(""String_Node_Str""));
    if (ed.name.equals(evaluation.name)) {
      assertEquals(5,ed.expectedTotal);
      assertEquals(3,ed.submittedTotal);
    }
  }
  ______TS(""String_Node_Str"");
  StudentData student=dataBundle.students.get(""String_Node_Str"");
  student.team=""String_Node_Str"";
  logic.editStudent(student.email,student);
  evalList=logic.getEvaluationsListForCoord(coord1.id);
  assertEquals(3,evalList.size());
  for (  EvaluationData ed : evalList) {
    if (ed.name.equals(evaluation.name)) {
      assertEquals(5,ed.expectedTotal);
      assertEquals(2,ed.submittedTotal);
    }
  }
  ______TS(""String_Node_Str"");
  loginAsAdmin(""String_Node_Str"");
  CoordData coord2=dataBundle.coords.get(""String_Node_Str"");
  evalList=logic.getEvaluationsListForCoord(coord2.id);
  assertEquals(1,evalList.size());
  for (  EvaluationData ed : evalList) {
    assertTrue(ed.course.contains(""String_Node_Str""));
  }
  ______TS(""String_Node_Str"");
  CoordData coord3=dataBundle.coords.get(""String_Node_Str"");
  evalList=logic.getEvaluationsListForCoord(coord3.id);
  assertEquals(0,evalList.size());
  ______TS(""String_Node_Str"");
  verifyNullPointerException(methodName,""String_Node_Str"",paramTypes,new Object[]{null});
  ______TS(""String_Node_Str"");
  verifyEntityDoesNotExistException(methodName,paramTypes,new Object[]{""String_Node_Str""});
}",0.8476415094339622
62987,"@Test public void testGetSubmissionsFromStudent() throws Exception {
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class<?>[]{String.class,String.class,String.class};
  Object[] params=new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_UNREGISTERED,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCanAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  verifyCanAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  loginAsAdmin(""String_Node_Str"");
  EvaluationData evaluation=dataBundle.evaluations.get(""String_Node_Str"");
  evaluation.name=""String_Node_Str"";
  logic.createEvaluation(evaluation);
  StudentData student=dataBundle.students.get(""String_Node_Str"");
  List<SubmissionData> submissions=logic.getSubmissionsFromStudent(evaluation.course,evaluation.name,student.email);
  assertEquals(4,submissions.size());
  for (  SubmissionData s : submissions) {
    assertEquals(evaluation.course,s.course);
    assertEquals(evaluation.name,s.evaluation);
    assertEquals(student.email,s.reviewer);
    assertEquals(student.name,s.reviewerName);
    assertEquals(logic.getStudent(evaluation.course,s.reviewee).name,s.revieweeName);
  }
  ______TS(""String_Node_Str"");
  ______TS(""String_Node_Str"");
  verifyNullPointerException(methodName,""String_Node_Str"",paramTypes,new Object[]{null,evaluation.name,student.email});
  verifyNullPointerException(methodName,""String_Node_Str"",paramTypes,new Object[]{evaluation.course,null,student.email});
  verifyNullPointerException(methodName,""String_Node_Str"",paramTypes,new Object[]{evaluation.course,evaluation.name,null});
  ______TS(""String_Node_Str"");
  verifyEntityDoesNotExistException(methodName,paramTypes,new Object[]{""String_Node_Str"",evaluation.name,student.email});
  verifyEntityDoesNotExistException(methodName,paramTypes,new Object[]{evaluation.course,""String_Node_Str"",student.email});
  verifyEntityDoesNotExistException(methodName,paramTypes,new Object[]{evaluation.course,evaluation.name,""String_Node_Str""});
}","@Test public void testGetSubmissionsFromStudent() throws Exception {
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class<?>[]{String.class,String.class,String.class};
  Object[] params=new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_UNREGISTERED,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCanAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  verifyCanAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  loginAsAdmin(""String_Node_Str"");
  EvaluationData evaluation=dataBundle.evaluations.get(""String_Node_Str"");
  evaluation.name=""String_Node_Str"";
  logic.createEvaluation(evaluation);
  StudentData student=dataBundle.students.get(""String_Node_Str"");
  List<SubmissionData> submissions=logic.getSubmissionsFromStudent(evaluation.course,evaluation.name,student.email);
  assertEquals(4,submissions.size());
  for (  SubmissionData s : submissions) {
    assertEquals(evaluation.course,s.course);
    assertEquals(evaluation.name,s.evaluation);
    assertEquals(student.email,s.reviewer);
    assertEquals(student.name,s.reviewerName);
    assertEquals(logic.getStudent(evaluation.course,s.reviewee).name,s.revieweeName);
  }
  ______TS(""String_Node_Str"");
  student.team=""String_Node_Str"";
  logic.editStudent(student.email,student);
  submissions=logic.getSubmissionsFromStudent(evaluation.course,evaluation.name,student.email);
  assertEquals(1,submissions.size());
  ______TS(""String_Node_Str"");
  verifyNullPointerException(methodName,""String_Node_Str"",paramTypes,new Object[]{null,evaluation.name,student.email});
  verifyNullPointerException(methodName,""String_Node_Str"",paramTypes,new Object[]{evaluation.course,null,student.email});
  verifyNullPointerException(methodName,""String_Node_Str"",paramTypes,new Object[]{evaluation.course,evaluation.name,null});
  ______TS(""String_Node_Str"");
  verifyEntityDoesNotExistException(methodName,paramTypes,new Object[]{""String_Node_Str"",evaluation.name,student.email});
  verifyEntityDoesNotExistException(methodName,paramTypes,new Object[]{evaluation.course,""String_Node_Str"",student.email});
  verifyEntityDoesNotExistException(methodName,paramTypes,new Object[]{evaluation.course,evaluation.name,""String_Node_Str""});
}",0.9591993841416474
62988,"/** 
 * Access: course owner and above
 */
public void createStudent(StudentData studentData) throws EntityAlreadyExistsException, InvalidParametersException {
  Common.verifyNotNull(studentData,""String_Node_Str"");
  verifyCourseOwnerOrAbove(studentData.course);
  Student student=new Student(studentData);
  if (student.getID() == null) {
    student.setID(""String_Node_Str"");
  }
  if (student.getComments() == null) {
    student.setComments(""String_Node_Str"");
  }
  if (student.getTeamName() == null) {
    student.setTeamName(""String_Node_Str"");
  }
  CoursesStorage.inst().createStudent(student);
}","/** 
 * Creates a student and adjust existing evaluations to  accommodate the new student Access: course owner and above
 */
public void createStudent(StudentData studentData) throws EntityAlreadyExistsException, InvalidParametersException {
  Common.verifyNotNull(studentData,""String_Node_Str"");
  verifyCourseOwnerOrAbove(studentData.course);
  Student student=new Student(studentData);
  if (student.getID() == null) {
    student.setID(""String_Node_Str"");
  }
  if (student.getComments() == null) {
    student.setComments(""String_Node_Str"");
  }
  if (student.getTeamName() == null) {
    student.setTeamName(""String_Node_Str"");
  }
  CoursesStorage.inst().createStudent(student);
  EvaluationsStorage.inst().adjustSubmissions(student.getCourseID());
}",0.8883994126284875
62989,"@Test public void testCreateStudent() throws Exception {
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class<?>[]{StudentData.class};
  StudentData s=new StudentData(""String_Node_Str"",""String_Node_Str"");
  Object[] params=new Object[]{s};
  verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_UNREGISTERED,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,new Object[]{new StudentData(""String_Node_Str"",""String_Node_Str"")});
  verifyCanAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  ______TS(""String_Node_Str"");
  loginAsAdmin(""String_Node_Str"");
  StudentData newStudent=new StudentData(""String_Node_Str"",""String_Node_Str"");
  verifyAbsentInDatastore(newStudent);
  logic.createStudent(newStudent);
  verifyPresentInDatastore(newStudent);
  ______TS(""String_Node_Str"");
  try {
    logic.createStudent(newStudent);
    fail();
  }
 catch (  EntityAlreadyExistsException e) {
  }
  ______TS(""String_Node_Str"");
  verifyNullPointerException(methodName,""String_Node_Str"",paramTypes,new Object[]{null});
}","@Test public void testCreateStudent() throws Exception {
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class<?>[]{StudentData.class};
  StudentData s=new StudentData(""String_Node_Str"",""String_Node_Str"");
  Object[] params=new Object[]{s};
  verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_UNREGISTERED,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,new Object[]{new StudentData(""String_Node_Str"",""String_Node_Str"")});
  verifyCanAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  ______TS(""String_Node_Str"");
  loginAsAdmin(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  StudentData newStudent=dataBundle.students.get(""String_Node_Str"");
  newStudent.email=""String_Node_Str"";
  verifyAbsentInDatastore(newStudent);
  List<Submission> submissionsBeforeAdding=EvaluationsStorage.inst().getSubmissionList(newStudent.course);
  logic.createStudent(newStudent);
  verifyPresentInDatastore(newStudent);
  List<Submission> submissionsAfterAdding=EvaluationsStorage.inst().getSubmissionList(newStudent.course);
  assertEquals(submissionsBeforeAdding.size() + 18,submissionsAfterAdding.size());
  ______TS(""String_Node_Str"");
  try {
    logic.createStudent(newStudent);
    fail();
  }
 catch (  EntityAlreadyExistsException e) {
  }
  ______TS(""String_Node_Str"");
  verifyNullPointerException(methodName,""String_Node_Str"",paramTypes,new Object[]{null});
}",0.8350212348905587
62990,"public ArrayList<EvaluationData> getEvaluationsSummaryForCourse(String courseId){
  ArrayList<EvaluationData> evaluationsSummaryList=new ArrayList<EvaluationData>();
  List<Evaluation> evaluationList=getEvaluationList(courseId);
  for (  Evaluation e : evaluationList) {
    EvaluationData ed=new EvaluationData();
    ed.course=e.getCourseID();
    ed.name=e.getName();
    ed.instructions=e.getInstructions();
    ed.p2pEnabled=e.isCommentsEnabled();
    ed.startTime=e.getStart();
    ed.endTime=e.getDeadline();
    ed.timeZone=e.getTimeZone();
    ed.gracePeriod=e.getGracePeriod();
    ed.published=e.isPublished();
    ed.activated=e.isActivated();
    ed.submittedTotal=getNumberOfCompletedEvaluations(e.getCourseID(),e.getName());
    ed.expectedTotal=getNumberOfEvaluations(e.getCourseID(),e.getName());
    evaluationsSummaryList.add(ed);
  }
  return evaluationsSummaryList;
}","public ArrayList<EvaluationData> getEvaluationsSummaryForCourse(String courseId){
  ArrayList<EvaluationData> evaluationsSummaryList=new ArrayList<EvaluationData>();
  List<Evaluation> evaluationList=getEvaluationList(courseId);
  for (  Evaluation e : evaluationList) {
    EvaluationData ed=new EvaluationData();
    ed.course=e.getCourseID();
    ed.name=e.getName();
    ed.instructions=e.getInstructions();
    ed.p2pEnabled=e.isCommentsEnabled();
    ed.startTime=e.getStart();
    ed.endTime=e.getDeadline();
    ed.timeZone=e.getTimeZone();
    ed.gracePeriod=e.getGracePeriod();
    ed.published=e.isPublished();
    ed.activated=e.isActivated();
    evaluationsSummaryList.add(ed);
  }
  return evaluationsSummaryList;
}",0.9023485784919654
62991,"private boolean isOrphanSubmission(StudentData reviewer,StudentData reviewee,Submission submission){
  if (!submission.getTeamName().equals(reviewer.team)) {
    return true;
  }
  if (!submission.getTeamName().equals(reviewee.team)) {
    return true;
  }
  return false;
}","/** 
 * Returns true if either of the three objects is null or if the team in submission is different from those in two students.
 */
private boolean isOrphanSubmission(StudentData reviewer,StudentData reviewee,Submission submission){
  if ((reviewer == null) || (reviewee == null) || (submission == null)) {
    return true;
  }
  if (!submission.getTeamName().equals(reviewer.team)) {
    return true;
  }
  if (!submission.getTeamName().equals(reviewee.team)) {
    return true;
  }
  return false;
}",0.7052767052767053
62992,"private HashMap<String,SubmissionData> getSubmissionsForEvaluation(String courseId,String evaluationName) throws EntityDoesNotExistException {
  if (getEvaluation(courseId,evaluationName) == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + evaluationName + ""String_Node_Str""+ courseId+ ""String_Node_Str"");
  }
  List<Submission> submissionsList=EvaluationsStorage.inst().getSubmissionList(courseId,evaluationName);
  HashMap<String,SubmissionData> submissionDataList=new HashMap<String,SubmissionData>();
  for (  Submission s : submissionsList) {
    SubmissionData sd=new SubmissionData(s);
    submissionDataList.put(sd.reviewer + ""String_Node_Str"" + sd.reviewee,sd);
  }
  return submissionDataList;
}","private HashMap<String,SubmissionData> getSubmissionsForEvaluation(String courseId,String evaluationName) throws EntityDoesNotExistException {
  if (getEvaluation(courseId,evaluationName) == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + evaluationName + ""String_Node_Str""+ courseId+ ""String_Node_Str"");
  }
  List<StudentData> students=getStudentListForCourse(courseId);
  List<Submission> submissionsList=EvaluationsStorage.inst().getSubmissionList(courseId,evaluationName);
  submissionsList=purgeOrphanSubmissions(students,submissionsList);
  HashMap<String,SubmissionData> submissionDataList=new HashMap<String,SubmissionData>();
  for (  Submission s : submissionsList) {
    SubmissionData sd=new SubmissionData(s);
    submissionDataList.put(sd.reviewer + ""String_Node_Str"" + sd.reviewee,sd);
  }
  return submissionDataList;
}",0.9166666666666666
62993,"@Test public void testGetSubmissoinsForEvaluation() throws Exception {
  restoreTypicalDataInDatastore();
  ______TS(""String_Node_Str"");
  loginAsAdmin(""String_Node_Str"");
  EvaluationData evaluation=dataBundle.evaluations.get(""String_Node_Str"");
  evaluation.name=""String_Node_Str"";
  logic.createEvaluation(evaluation);
  HashMap<String,SubmissionData> submissions=invokeGetSubmissionsForEvaluation(evaluation.course,evaluation.name);
  assertEquals(17,submissions.keySet().size());
  for (  String key : submissions.keySet()) {
    assertEquals(evaluation.course,submissions.get(key).course);
    assertEquals(evaluation.name,submissions.get(key).evaluation);
  }
  ______TS(""String_Node_Str"");
  logic.createCourse(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  evaluation.course=""String_Node_Str"";
  logic.createEvaluation(evaluation);
  submissions=invokeGetSubmissionsForEvaluation(evaluation.course,evaluation.name);
  assertEquals(0,submissions.keySet().size());
  ______TS(""String_Node_Str"");
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class[]{String.class,String.class};
  verifyEntityDoesNotExistException(methodName,paramTypes,new Object[]{evaluation.course,""String_Node_Str""});
  verifyEntityDoesNotExistException(methodName,paramTypes,new Object[]{""String_Node_Str"",evaluation.name});
}","@Test public void testGetSubmissoinsForEvaluation() throws Exception {
  restoreTypicalDataInDatastore();
  ______TS(""String_Node_Str"");
  loginAsAdmin(""String_Node_Str"");
  EvaluationData evaluation=dataBundle.evaluations.get(""String_Node_Str"");
  evaluation.name=""String_Node_Str"";
  logic.createEvaluation(evaluation);
  HashMap<String,SubmissionData> submissions=invokeGetSubmissionsForEvaluation(evaluation.course,evaluation.name);
  assertEquals(17,submissions.keySet().size());
  for (  String key : submissions.keySet()) {
    assertEquals(evaluation.course,submissions.get(key).course);
    assertEquals(evaluation.name,submissions.get(key).evaluation);
  }
  ______TS(""String_Node_Str"");
  StudentData student=dataBundle.students.get(""String_Node_Str"");
  student.team=""String_Node_Str"";
  logic.editStudent(student.email,student);
  submissions=invokeGetSubmissionsForEvaluation(evaluation.course,evaluation.name);
  assertEquals(13,submissions.keySet().size());
  List<StudentData> students=logic.getStudentListForCourse(evaluation.course);
  verifySubmissionsExistForCurrentTeamStructureInEvaluation(evaluation.name,students,new ArrayList<SubmissionData>(submissions.values()));
  ______TS(""String_Node_Str"");
  logic.createCourse(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  evaluation.course=""String_Node_Str"";
  logic.createEvaluation(evaluation);
  submissions=invokeGetSubmissionsForEvaluation(evaluation.course,evaluation.name);
  assertEquals(0,submissions.keySet().size());
  ______TS(""String_Node_Str"");
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class[]{String.class,String.class};
  verifyEntityDoesNotExistException(methodName,paramTypes,new Object[]{evaluation.course,""String_Node_Str""});
  verifyEntityDoesNotExistException(methodName,paramTypes,new Object[]{""String_Node_Str"",evaluation.name});
}",0.8357835470753832
62994,"/** 
 * Access: course owner and above
 */
public void createStudent(StudentData studentData) throws EntityAlreadyExistsException, InvalidParametersException {
  Common.verifyNotNull(studentData,""String_Node_Str"");
  verifyCourseOwnerOrAbove(studentData.course);
  Student student=new Student(studentData);
  if (student.getID() == null) {
    student.setID(""String_Node_Str"");
  }
  if (student.getComments() == null) {
    student.setComments(""String_Node_Str"");
  }
  if (student.getTeamName() == null) {
    student.setTeamName(""String_Node_Str"");
  }
  CoursesStorage.inst().createStudent(student);
}","/** 
 * Creates a student and adjust existing evaluations to  accommodate the new student Access: course owner and above
 */
public void createStudent(StudentData studentData) throws EntityAlreadyExistsException, InvalidParametersException {
  Common.verifyNotNull(studentData,""String_Node_Str"");
  verifyCourseOwnerOrAbove(studentData.course);
  Student student=new Student(studentData);
  if (student.getID() == null) {
    student.setID(""String_Node_Str"");
  }
  if (student.getComments() == null) {
    student.setComments(""String_Node_Str"");
  }
  if (student.getTeamName() == null) {
    student.setTeamName(""String_Node_Str"");
  }
  CoursesStorage.inst().createStudent(student);
  EvaluationsStorage.inst().adjustSubmissions(student.getCourseID());
}",0.8883994126284875
62995,"@Test public void testCreateStudent() throws Exception {
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class<?>[]{StudentData.class};
  StudentData s=new StudentData(""String_Node_Str"",""String_Node_Str"");
  Object[] params=new Object[]{s};
  verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_UNREGISTERED,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,new Object[]{new StudentData(""String_Node_Str"",""String_Node_Str"")});
  verifyCanAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  ______TS(""String_Node_Str"");
  loginAsAdmin(""String_Node_Str"");
  StudentData newStudent=new StudentData(""String_Node_Str"",""String_Node_Str"");
  verifyAbsentInDatastore(newStudent);
  logic.createStudent(newStudent);
  verifyPresentInDatastore(newStudent);
  ______TS(""String_Node_Str"");
  try {
    logic.createStudent(newStudent);
    fail();
  }
 catch (  EntityAlreadyExistsException e) {
  }
  ______TS(""String_Node_Str"");
  verifyNullPointerException(methodName,""String_Node_Str"",paramTypes,new Object[]{null});
}","@Test public void testCreateStudent() throws Exception {
  ______TS(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  String methodName=""String_Node_Str"";
  Class<?>[] paramTypes=new Class<?>[]{StudentData.class};
  StudentData s=new StudentData(""String_Node_Str"",""String_Node_Str"");
  Object[] params=new Object[]{s};
  verifyCannotAccess(USER_TYPE_NOT_LOGGED_IN,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_UNREGISTERED,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_STUDENT,methodName,""String_Node_Str"",paramTypes,params);
  verifyCannotAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,new Object[]{new StudentData(""String_Node_Str"",""String_Node_Str"")});
  verifyCanAccess(USER_TYPE_COORD,methodName,""String_Node_Str"",paramTypes,params);
  ______TS(""String_Node_Str"");
  loginAsAdmin(""String_Node_Str"");
  restoreTypicalDataInDatastore();
  StudentData newStudent=dataBundle.students.get(""String_Node_Str"");
  newStudent.email=""String_Node_Str"";
  verifyAbsentInDatastore(newStudent);
  List<Submission> submissionsBeforeAdding=EvaluationsStorage.inst().getSubmissionList(newStudent.course);
  logic.createStudent(newStudent);
  verifyPresentInDatastore(newStudent);
  List<Submission> submissionsAfterAdding=EvaluationsStorage.inst().getSubmissionList(newStudent.course);
  assertEquals(submissionsBeforeAdding.size() + 18,submissionsAfterAdding.size());
  ______TS(""String_Node_Str"");
  try {
    logic.createStudent(newStudent);
    fail();
  }
 catch (  EntityAlreadyExistsException e) {
  }
  ______TS(""String_Node_Str"");
  verifyNullPointerException(methodName,""String_Node_Str"",paramTypes,new Object[]{null});
}",0.8350212348905587
62996,"public List<CourseData> getCourseListForStudent(String googleId){
  List<Student> studentList=getStudentCourseList(googleId);
  ArrayList<CourseData> courseList=new ArrayList<CourseData>();
  for (  Student s : studentList) {
    CourseData c=new CourseData();
    c.id=s.getCourseID();
    c.name=CoursesStorage.inst().getCourse(c.id).getName();
    courseList.add(c);
  }
  return courseList;
}","public List<CourseData> getCourseListForStudent(String googleId){
  List<Student> studentList=getStudentListForGoogleId(googleId);
  ArrayList<CourseData> courseList=new ArrayList<CourseData>();
  for (  Student s : studentList) {
    CourseData c=new CourseData();
    c.id=s.getCourseID();
    c.name=CoursesStorage.inst().getCourse(c.id).getName();
    courseList.add(c);
  }
  return courseList;
}",0.9636135508155584
62997,"/** 
 * Edit an evaluation through the UI. Pre-condition: Should be at Evaluation page.
 * @param startTime Format: (YYYY,MM,DD)
 * @param nextTimeValue Format: HHMM
 * @param comments
 * @param instructions
 * @param gracePeriod
 */
public void editEvaluation(Date startTime,Date endTime,boolean p2pEnabled,String instructions,Integer gracePeriod){
  JavascriptExecutor js=(JavascriptExecutor)driver;
  js.executeScript(""String_Node_Str"" + Common.PARAM_EVALUATION_START + ""String_Node_Str""+ Common.formatDate(startTime)+ ""String_Node_Str"");
  selectDropdownByValue(inputOpeningTime,Common.formatTimeForEvaluation(startTime));
  js.executeScript(""String_Node_Str"" + Common.PARAM_EVALUATION_DEADLINE + ""String_Node_Str""+ Common.formatDate(endTime)+ ""String_Node_Str"");
  selectDropdownByValue(inputClosingTime,Common.formatTimeForEvaluation(endTime));
  if (p2pEnabled) {
    clickWithWait(By.id(""String_Node_Str""));
  }
 else {
    clickWithWait(By.id(""String_Node_Str""));
  }
  fillString(inputInstruction,instructions);
  selectDropdownByValue(inputGracePeriod,Integer.toString(gracePeriod));
  clickWithWait(editEvaluationButton);
}","/** 
 * Edit an evaluation through the UI. Pre-condition: Should be at Evaluation page.
 * @param startTime Format: (YYYY,MM,DD)
 * @param nextTimeValue Format: HHMM
 * @param comments
 * @param instructions
 * @param gracePeriod
 */
public void editEvaluation(Date startTime,Date endTime,boolean p2pEnabled,String instructions,Integer gracePeriod){
  JavascriptExecutor js=(JavascriptExecutor)driver;
  js.executeScript(""String_Node_Str"" + Common.PARAM_EVALUATION_START + ""String_Node_Str""+ Common.formatDate(startTime)+ ""String_Node_Str"");
  selectDropdownByValue(inputOpeningTime,Common.convertToOptionValueInTimeDropDown(startTime));
  js.executeScript(""String_Node_Str"" + Common.PARAM_EVALUATION_DEADLINE + ""String_Node_Str""+ Common.formatDate(endTime)+ ""String_Node_Str"");
  selectDropdownByValue(inputClosingTime,Common.convertToOptionValueInTimeDropDown(endTime));
  if (p2pEnabled) {
    clickWithWait(By.id(""String_Node_Str""));
  }
 else {
    clickWithWait(By.id(""String_Node_Str""));
  }
  fillString(inputInstruction,instructions);
  selectDropdownByValue(inputGracePeriod,Integer.toString(gracePeriod));
  clickWithWait(editEvaluationButton);
}",0.9537521815008726
62998,"@Test public void testCoordEval(){
  bi.loginCoord(coordUsername,coordPassword);
  ______TS(""String_Node_Str"");
  link=Common.PAGE_COORD_EVAL;
  verifyPageContains(link,coordUsername + ""String_Node_Str"" + ownCourse.id);
  ______TS(""String_Node_Str"");
  bi.addEvaluation(ownCourse.id,""String_Node_Str"",Common.getDateOffsetToCurrentTime(1),Common.getDateOffsetToCurrentTime(2),true,""String_Node_Str"",0);
  assertContainsRegex(coordUsername + ""String_Node_Str"" + Common.MESSAGE_EVALUATION_ADDED,bi.getCurrentPageSource());
  ______TS(""String_Node_Str"");
  verifyCannotMasquerade(link,otherCoord.id);
}","public void testCoordEval(){
  bi.loginCoord(coordUsername,coordPassword);
  ______TS(""String_Node_Str"");
  link=Common.PAGE_COORD_EVAL;
  verifyPageContains(link,coordUsername + ""String_Node_Str"" + ownCourse.id);
  ______TS(""String_Node_Str"");
  bi.addEvaluation(ownCourse.id,""String_Node_Str"",Common.getDateOffsetToCurrentTime(1),Common.getDateOffsetToCurrentTime(2),true,""String_Node_Str"",0);
  assertContainsRegex(coordUsername + ""String_Node_Str"" + Common.MESSAGE_EVALUATION_ADDED,bi.getCurrentPageSource());
  ______TS(""String_Node_Str"");
  verifyCannotMasquerade(link,otherCoord.id);
}",0.9949579831932772
62999,"/** 
 * Access: owner and above
 * @param evaluation
 * @throws EntityDoesNotExistException
 * @throws InvalidParametersException
 */
public void editEvaluation(EvaluationData evaluation) throws EntityDoesNotExistException, InvalidParametersException {
  Common.verifyNotNull(evaluation,""String_Node_Str"");
  verifyCourseOwnerOrAbove(evaluation.course);
  evaluation.validate();
  Evaluations.inst().editEvaluation(evaluation.course,evaluation.name,evaluation.instructions,evaluation.p2pEnabled,evaluation.startTime,evaluation.endTime,evaluation.gracePeriod,evaluation.activated,evaluation.published,evaluation.timeZone);
}","/** 
 * Can be used to change all fields exception ""activated"" field Access: owner and above
 * @param evaluation
 * @throws EntityDoesNotExistException
 * @throws InvalidParametersException
 */
public void editEvaluation(String courseId,String evaluationName,String instructions,Date start,Date end,double timeZone,int gracePeriod,boolean p2pEndabled) throws EntityDoesNotExistException, InvalidParametersException {
  Common.verifyNotNull(courseId,""String_Node_Str"");
  Common.verifyNotNull(evaluationName,""String_Node_Str"");
  Common.verifyNotNull(start,""String_Node_Str"");
  Common.verifyNotNull(end,""String_Node_Str"");
  verifyCourseOwnerOrAbove(courseId);
  EvaluationData original=getEvaluation(courseId,evaluationName);
  if (original == null) {
    throw new EntityDoesNotExistException(""String_Node_Str"" + evaluationName + ""String_Node_Str""+ courseId);
  }
  EvaluationData evaluation=new EvaluationData();
  evaluation.course=courseId;
  evaluation.name=evaluationName;
  evaluation.instructions=instructions;
  evaluation.p2pEnabled=p2pEndabled;
  evaluation.startTime=start;
  evaluation.endTime=end;
  evaluation.gracePeriod=gracePeriod;
  evaluation.timeZone=timeZone;
  evaluation.activated=original.activated;
  evaluation.published=original.published;
  evaluation.validate();
  editEvaluationAllFields(evaluation);
}",0.3370786516853932
63000,"@Override protected void doAction(HttpServletRequest req,CoordEvalEditHelper helper) throws EntityDoesNotExistException {
  EvaluationData newEval=CoordEvalServlet.extractEvaluationData(req);
  if (newEval.course == null && newEval.name == null) {
    helper.redirectUrl=Common.PAGE_COORD_EVAL;
    return;
  }
  boolean isSubmit=isPost;
  if (isSubmit) {
    helper.submittedEval=newEval;
    try {
      helper.server.editEvaluation(newEval);
      helper.statusMessage=Common.MESSAGE_EVALUATION_EDITED;
      helper.redirectUrl=Common.PAGE_COORD_EVAL;
    }
 catch (    InvalidParametersException e) {
      helper.statusMessage=e.getMessage();
      helper.error=true;
    }
  }
 else {
    helper.submittedEval=helper.server.getEvaluation(newEval.course,newEval.name);
    if (helper.submittedEval == null) {
      helper.redirectUrl=Common.PAGE_COORD_EVAL;
      return;
    }
  }
}","@Override protected void doAction(HttpServletRequest req,CoordEvalEditHelper helper) throws EntityDoesNotExistException {
  EvaluationData newEval=CoordEvalServlet.extractEvaluationData(req);
  if (newEval.course == null && newEval.name == null) {
    helper.redirectUrl=Common.PAGE_COORD_EVAL;
    return;
  }
  boolean isSubmit=isPost;
  if (isSubmit) {
    helper.submittedEval=newEval;
    try {
      helper.server.editEvaluation(newEval.course,newEval.name,newEval.instructions,newEval.startTime,newEval.endTime,newEval.timeZone,newEval.gracePeriod,newEval.p2pEnabled);
      helper.statusMessage=Common.MESSAGE_EVALUATION_EDITED;
      helper.redirectUrl=Common.PAGE_COORD_EVAL;
    }
 catch (    InvalidParametersException ex) {
      helper.statusMessage=ex.getMessage();
      helper.error=true;
    }
  }
 else {
    helper.submittedEval=helper.server.getEvaluation(newEval.course,newEval.name);
    if (helper.submittedEval == null) {
      helper.redirectUrl=Common.PAGE_COORD_EVAL;
      return;
    }
  }
}",0.930330015715034
