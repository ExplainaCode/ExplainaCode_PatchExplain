record_number,buggy_code,fixed_code,code_similarity
179001,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.welcome:
    new AlertDialog.Builder(this).setTitle(""String_Node_Str"").setMessage(""String_Node_Str"").setNeutralButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
      }
    }
).show();
  return true;
case R.id.credits:
Intent myIntent=new Intent(Main.this,Credits.class);
Main.this.startActivity(myIntent);
return true;
case R.id.links:
Intent myIntent2=new Intent(Main.this,News.class);
Main.this.startActivity(myIntent2);
return true;
case R.id.todo:
Intent myIntent3=new Intent(Main.this,ToDoListActivity.class);
Main.this.startActivity(myIntent3);
case R.id.feedback:
String feedbackURL=""String_Node_Str"";
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(feedbackURL));
startActivity(browserIntent);
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.welcome:
    new AlertDialog.Builder(this).setTitle(""String_Node_Str"").setMessage(""String_Node_Str"").setNeutralButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
      }
    }
).show();
  return true;
case R.id.credits:
Intent myIntent=new Intent(Main.this,Credits.class);
Main.this.startActivity(myIntent);
return true;
case R.id.links:
Intent myIntent2=new Intent(Main.this,News.class);
Main.this.startActivity(myIntent2);
return true;
case R.id.todo:
Intent myIntent3=new Intent(Main.this,ToDoListActivity.class);
Main.this.startActivity(myIntent3);
return true;
case R.id.feedback:
String feedbackURL=""String_Node_Str"";
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(feedbackURL));
Main.this.startActivity(browserIntent);
return true;
default :
return super.onOptionsItemSelected(item);
}
}",0.9817629179331308
179002,"public List<Warp> listWarps(Player player){
  List<Warp> list=new ArrayList<Warp>();
  for (  Warp warp : warps.values()) {
    if (warp.canWarpHere(User.getUser(player))) {
      list.add(warp);
    }
  }
  return list;
}","public List<Warp> listWarps(Player player){
  List<Warp> list=new ArrayList<Warp>();
  for (  Warp warp : warps.values()) {
    try {
      if (warp.canWarpHere(User.getUser(player))) {
        list.add(warp);
      }
    }
 catch (    Exception e) {
    }
  }
  return list;
}",0.8897795591182365
179003,"@Override public void onEnable(){
  this.setNaggable(false);
  try {
    String logName=""String_Node_Str"";
    Calendar c=Calendar.getInstance();
    clog=c;
    logName+=c.get(Calendar.MONTH);
    logName+=""String_Node_Str"" + c.get(Calendar.DAY_OF_MONTH);
    logName+=""String_Node_Str"" + c.get(Calendar.YEAR);
    bLog.setLevel(Level.INFO);
    bLog.setUseParentHandlers(false);
    fh=new FileHandler(propDir + logName + ""String_Node_Str"",true);
    fh.setFormatter(new LogFormatter());
    bLog.addHandler(fh);
  }
 catch (  IOException e) {
    BenCmd.log(Level.SEVERE,""String_Node_Str"");
    BenCmd.log(e);
  }
  BenCmd.log(""String_Node_Str"" + getDescription().getVersion());
  BenCmd.log(""String_Node_Str"");
  if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
    BenCmd.log(""String_Node_Str"");
  }
 else {
    BenCmd.log(Level.WARNING,""String_Node_Str"");
  }
  bLog.info(""String_Node_Str"");
  new File(propDir).mkdirs();
  for (  String f : files) {
    File file;
    if (!(file=new File(propDir + f)).exists()) {
      bLog.info(""String_Node_Str"" + f + ""String_Node_Str"");
      try {
        file.createNewFile();
      }
 catch (      IOException e) {
        BenCmd.log(Level.SEVERE,""String_Node_Str"" + f + ""String_Node_Str"");
        BenCmd.log(e);
      }
    }
  }
  User.finalizeAll();
  BenCmd.log(""String_Node_Str"");
  try {
    BenCmd.loadAll();
  }
 catch (  Exception e) {
    BenCmd.log(Level.SEVERE,""String_Node_Str"");
    BenCmd.log(e);
    getServer().getPluginManager().disablePlugin(this);
    return;
  }
  BenCmd.log(""String_Node_Str"");
  if (!sanityCheck()) {
    this.getServer().getPluginManager().disablePlugin(this);
    return;
  }
  BenCmd.log(""String_Node_Str"");
  try {
    URL devlistloc=new URL(""String_Node_Str"");
    BufferedReader r=new BufferedReader(new InputStreamReader((InputStream)devlistloc.getContent()));
    String l;
    while ((l=r.readLine()) != null) {
      if (l.startsWith(""String_Node_Str"")) {
        l=l.substring(1);
        devs=l.split(""String_Node_Str"");
        break;
      }
    }
    r.close();
  }
 catch (  Exception e) {
    BenCmd.log(Level.WARNING,""String_Node_Str"");
    devs=new String[]{""String_Node_Str"",""String_Node_Str""};
  }
  for (  Player player : this.getServer().getOnlinePlayers()) {
    User user;
    JoinType jt=BenCmd.getPermissionManager().getMaxPlayerHandler().join(user=User.getUser(player));
    if (jt == JoinType.NO_SLOT_NORMAL || jt == JoinType.NO_SLOT_RESERVED) {
      user.kick(""String_Node_Str"");
    }
    if (BenCmd.isSpoutConnected() && BenCmd.getSpoutConnector().enabled(player)) {
      for (      NPC n : BenCmd.getNPCFile().allNPCs()) {
        if (n.isSpawned()) {
          BenCmd.getSpoutConnector().sendSkin(player,n.getEntityId(),n.getSkinURL());
        }
      }
    }
    if (BenCmd.getChatChannels().getChannel(user.getVar(""String_Node_Str"",""String_Node_Str"")) != null) {
      user.joinChannel(BenCmd.getChatChannels().getChannel(user.getVar(""String_Node_Str"",""String_Node_Str"")),false);
    }
  }
  if (!BenCmd.getMainProperties().getBoolean(""String_Node_Str"",true)) {
    BenCmd.log(Level.WARNING,""String_Node_Str"");
  }
  BenCmd.log(""String_Node_Str"");
  try {
    BenCmdPlayerListener.getInstance();
  }
 catch (  Exception e) {
    BenCmd.log(Level.SEVERE,""String_Node_Str"");
    BenCmd.log(e);
  }
  try {
    BenCmdBlockListener.getInstance();
  }
 catch (  Exception e) {
    BenCmd.log(Level.SEVERE,""String_Node_Str"");
    BenCmd.log(e);
  }
  try {
    BenCmdEntityListener.getInstance();
  }
 catch (  Exception e) {
    BenCmd.log(Level.SEVERE,""String_Node_Str"");
    BenCmd.log(e);
  }
  try {
    BenCmdWorldListener.getInstance();
  }
 catch (  Exception e) {
    BenCmd.log(Level.SEVERE,""String_Node_Str"");
    BenCmd.log(e);
  }
  if (BenCmd.isSpoutConnected()) {
    try {
      BenCmdSpoutListener.getInstance();
      BenCmdScreenListener.getInstance();
      BenCmdInventoryListener.getInstance();
    }
 catch (    Exception e) {
      BenCmd.log(Level.SEVERE,""String_Node_Str"");
      BenCmd.log(e);
    }
  }
  PluginDescriptionFile pdfFile=this.getDescription();
  BenCmd.log(""String_Node_Str"");
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new Update(),36000,36000);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new TimeFreeze(),100,100);
  BenCmd.log(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str""+ buildId+ ""String_Node_Str"");
  for (  World w : getServer().getWorlds()) {
    w.setPVP(true);
  }
}","@Override public void onEnable(){
  this.setNaggable(false);
  try {
    String logName=""String_Node_Str"";
    Calendar c=Calendar.getInstance();
    clog=c;
    logName+=c.get(Calendar.MONTH);
    logName+=""String_Node_Str"" + c.get(Calendar.DAY_OF_MONTH);
    logName+=""String_Node_Str"" + c.get(Calendar.YEAR);
    bLog.setLevel(Level.INFO);
    bLog.setUseParentHandlers(false);
    fh=new FileHandler(propDir + logName + ""String_Node_Str"",true);
    fh.setFormatter(new LogFormatter());
    bLog.addHandler(fh);
  }
 catch (  IOException e) {
    BenCmd.log(Level.SEVERE,""String_Node_Str"");
    BenCmd.log(e);
  }
  BenCmd.log(""String_Node_Str"" + getDescription().getVersion());
  BenCmd.log(""String_Node_Str"");
  if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
    BenCmd.log(""String_Node_Str"");
  }
 else {
    BenCmd.log(Level.WARNING,""String_Node_Str"");
  }
  bLog.info(""String_Node_Str"");
  new File(propDir).mkdirs();
  for (  String f : files) {
    File file;
    if (!(file=new File(propDir + f)).exists()) {
      bLog.info(""String_Node_Str"" + f + ""String_Node_Str"");
      try {
        file.createNewFile();
      }
 catch (      IOException e) {
        BenCmd.log(Level.SEVERE,""String_Node_Str"" + f + ""String_Node_Str"");
        BenCmd.log(e);
      }
    }
  }
  User.finalizeAll();
  BenCmd.log(""String_Node_Str"");
  try {
    BenCmd.loadAll();
  }
 catch (  Exception e) {
    BenCmd.log(Level.SEVERE,""String_Node_Str"");
    BenCmd.log(e);
    getServer().getPluginManager().disablePlugin(this);
    return;
  }
  BenCmd.log(""String_Node_Str"");
  if (!sanityCheck()) {
    this.getServer().getPluginManager().disablePlugin(this);
    return;
  }
  BenCmd.log(""String_Node_Str"");
  try {
    URL devlistloc=new URL(""String_Node_Str"");
    BufferedReader r=new BufferedReader(new InputStreamReader((InputStream)devlistloc.getContent()));
    String l;
    while ((l=r.readLine()) != null) {
      if (l.startsWith(""String_Node_Str"")) {
        l=l.substring(1);
        devs=l.split(""String_Node_Str"");
        break;
      }
    }
    r.close();
  }
 catch (  Exception e) {
    BenCmd.log(Level.WARNING,""String_Node_Str"");
    devs=new String[]{""String_Node_Str"",""String_Node_Str""};
  }
  for (  Player player : this.getServer().getOnlinePlayers()) {
    User user;
    JoinType jt=BenCmd.getPermissionManager().getMaxPlayerHandler().join(user=User.getUser(player));
    if (jt == JoinType.NO_SLOT_NORMAL || jt == JoinType.NO_SLOT_RESERVED) {
      user.kick(""String_Node_Str"");
    }
    if (BenCmd.isSpoutConnected() && BenCmd.getSpoutConnector().enabled(player)) {
      for (      NPC n : BenCmd.getNPCFile().allNPCs()) {
        if (n.isSpawned()) {
          BenCmd.getSpoutConnector().sendSkin(player,n.getEntityId(),n.getSkinURL());
        }
      }
    }
    if (BenCmd.getChatChannels() != null) {
      if (BenCmd.getChatChannels().getChannel(user.getVar(""String_Node_Str"",""String_Node_Str"")) != null) {
        user.joinChannel(BenCmd.getChatChannels().getChannel(user.getVar(""String_Node_Str"",""String_Node_Str"")),false);
      }
    }
  }
  if (!BenCmd.getMainProperties().getBoolean(""String_Node_Str"",true)) {
    BenCmd.log(Level.WARNING,""String_Node_Str"");
  }
  BenCmd.log(""String_Node_Str"");
  try {
    BenCmdPlayerListener.getInstance();
  }
 catch (  Exception e) {
    BenCmd.log(Level.SEVERE,""String_Node_Str"");
    BenCmd.log(e);
  }
  try {
    BenCmdBlockListener.getInstance();
  }
 catch (  Exception e) {
    BenCmd.log(Level.SEVERE,""String_Node_Str"");
    BenCmd.log(e);
  }
  try {
    BenCmdEntityListener.getInstance();
  }
 catch (  Exception e) {
    BenCmd.log(Level.SEVERE,""String_Node_Str"");
    BenCmd.log(e);
  }
  try {
    BenCmdWorldListener.getInstance();
  }
 catch (  Exception e) {
    BenCmd.log(Level.SEVERE,""String_Node_Str"");
    BenCmd.log(e);
  }
  if (BenCmd.isSpoutConnected()) {
    try {
      BenCmdSpoutListener.getInstance();
      BenCmdScreenListener.getInstance();
      BenCmdInventoryListener.getInstance();
    }
 catch (    Exception e) {
      BenCmd.log(Level.SEVERE,""String_Node_Str"");
      BenCmd.log(e);
    }
  }
  PluginDescriptionFile pdfFile=this.getDescription();
  BenCmd.log(""String_Node_Str"");
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new Update(),36000,36000);
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new TimeFreeze(),100,100);
  BenCmd.log(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str""+ buildId+ ""String_Node_Str"");
  for (  World w : getServer().getWorlds()) {
    w.setPVP(true);
  }
}",0.9804867353650516
179004,"private void userInit(PlayerJoinEvent event){
  SlowMode slow=SlowMode.getInstance();
  ViewableInventory.replInv((CraftPlayer)event.getPlayer());
  User user=User.getUser(event.getPlayer());
  String cheatstring=""String_Node_Str"";
  if (!user.hasPerm(""String_Node_Str"")) {
    cheatstring+=""String_Node_Str"";
    cheatstring+=""String_Node_Str"";
  }
  if (!user.hasPerm(""String_Node_Str"")) {
    cheatstring+=""String_Node_Str"";
    cheatstring+=""String_Node_Str"";
    cheatstring+=""String_Node_Str"";
  }
  if (!cheatstring.isEmpty()) {
    cheatstring=cheatstring.replaceAll(""String_Node_Str"",""String_Node_Str"");
    user.sendMessage(cheatstring);
  }
  if (BenCmd.updateAvailable && user.hasPerm(""String_Node_Str"")) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  Player[] playerList=Bukkit.getOnlinePlayers();
  if (user.hasPerm(""String_Node_Str"")) {
    if (playerList.length == 1) {
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      String playerString=""String_Node_Str"";
      for (      Player player2 : playerList) {
        if (User.getUser(player2).isOffline()) {
          continue;
        }
        playerString+=User.getUser(player2).getColor() + player2.getDisplayName() + ChatColor.WHITE+ ""String_Node_Str"";
      }
      user.sendMessage(""String_Node_Str"" + playerString);
    }
  }
  if (user.isMuted() != null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
 else   if (slow.isEnabled()) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"" + (slow.getDefTime() / 1000)+ ""String_Node_Str"");
  }
  if (user.hasPerm(""String_Node_Str"") && BenCmd.getReports().unreadTickets()) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  if (BenCmd.getChatChannels().getChannel(user.getVar(""String_Node_Str"",""String_Node_Str"")) != null) {
    user.joinChannel(BenCmd.getChatChannels().getChannel(user.getVar(""String_Node_Str"",""String_Node_Str"")),false);
  }
  event.setJoinMessage(user.getColor() + user.getDisplayName() + ChatColor.YELLOW+ ""String_Node_Str"");
  if (BenCmd.getPermissionManager().getActionFile().isUnjailed(user) != null) {
    user.spawn();
    BenCmd.getPermissionManager().getActionFile().removeAction(BenCmd.getPermissionManager().getActionFile().isUnjailed(user));
  }
  if (user.isJailed() != null) {
    user.warpTo(BenCmd.getPermissionManager().getJailWarp());
  }
  if (user.isDev()) {
    ((Player)user.getHandle()).getWorld().strikeLightningEffect(((Player)user.getHandle()).getLocation());
    Bukkit.broadcastMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
  }
}","private void userInit(PlayerJoinEvent event){
  SlowMode slow=SlowMode.getInstance();
  ViewableInventory.replInv((CraftPlayer)event.getPlayer());
  User user=User.getUser(event.getPlayer());
  String cheatstring=""String_Node_Str"";
  if (!user.hasPerm(""String_Node_Str"")) {
    cheatstring+=""String_Node_Str"";
    cheatstring+=""String_Node_Str"";
  }
  if (!user.hasPerm(""String_Node_Str"")) {
    cheatstring+=""String_Node_Str"";
    cheatstring+=""String_Node_Str"";
    cheatstring+=""String_Node_Str"";
  }
  if (!cheatstring.isEmpty()) {
    cheatstring=cheatstring.replaceAll(""String_Node_Str"",""String_Node_Str"");
    user.sendMessage(cheatstring);
  }
  if (BenCmd.updateAvailable && user.hasPerm(""String_Node_Str"")) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  Player[] playerList=Bukkit.getOnlinePlayers();
  if (user.hasPerm(""String_Node_Str"")) {
    if (playerList.length == 1) {
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      String playerString=""String_Node_Str"";
      for (      Player player2 : playerList) {
        if (User.getUser(player2).isOffline()) {
          continue;
        }
        playerString+=User.getUser(player2).getColor() + player2.getDisplayName() + ChatColor.WHITE+ ""String_Node_Str"";
      }
      user.sendMessage(""String_Node_Str"" + playerString);
    }
  }
  if (user.isMuted() != null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
 else   if (slow.isEnabled()) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"" + (slow.getDefTime() / 1000)+ ""String_Node_Str"");
  }
  if (user.hasPerm(""String_Node_Str"") && BenCmd.getReports().unreadTickets()) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  if (BenCmd.getChatChannels() != null) {
    if (BenCmd.getChatChannels().getChannel(user.getVar(""String_Node_Str"",""String_Node_Str"")) != null) {
      user.joinChannel(BenCmd.getChatChannels().getChannel(user.getVar(""String_Node_Str"",""String_Node_Str"")),false);
    }
  }
  event.setJoinMessage(user.getColor() + user.getDisplayName() + ChatColor.YELLOW+ ""String_Node_Str"");
  if (BenCmd.getPermissionManager().getActionFile().isUnjailed(user) != null) {
    user.spawn();
    BenCmd.getPermissionManager().getActionFile().removeAction(BenCmd.getPermissionManager().getActionFile().isUnjailed(user));
  }
  if (user.isJailed() != null) {
    user.warpTo(BenCmd.getPermissionManager().getJailWarp());
  }
  if (user.isDev()) {
    ((Player)user.getHandle()).getWorld().strikeLightningEffect(((Player)user.getHandle()).getLocation());
    Bukkit.broadcastMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
  }
}",0.9666283084004604
179005,"@Override public boolean inGroup(String player,String group){
  return PermissionUser.matchUser(player).inGroup(getPermissionManager().getGroupFile().getGroup(group));
}","@Override public boolean inGroup(String player,String group){
  return PermissionUser.matchUserIgnoreCase(player).inGroup(getPermissionManager().getGroupFile().getGroup(group));
}",0.971264367816092
179006,"private void loginCheck(PlayerLoginEvent event){
  PermissionUser user;
  if (!BenCmd.getPermissionManager().getUserFile().userExists(event.getPlayer().getName())) {
    if (BenCmd.getMainProperties().getBoolean(""String_Node_Str"",false)) {
      event.disallow(Result.KICK_WHITELIST,BenCmd.getMainProperties().getString(""String_Node_Str"",""String_Node_Str""));
      return;
    }
 else {
      BenCmd.getPermissionManager().getUserFile().addUser(user=PermissionUser.newUser(event.getPlayer().getName(),new ArrayList<String>()));
    }
  }
 else {
    user=PermissionUser.matchUser(event.getPlayer().getName());
  }
  if (BenCmd.getPermissionManager().getGroupFile().getAllUserGroups(user).isEmpty()) {
    BenCmd.getPermissionManager().getGroupFile().getGroup(BenCmd.getMainProperties().getString(""String_Node_Str"",""String_Node_Str"")).addUser(user);
  }
  if ((User.getUser(event.getPlayer())).isBanned() != null) {
    event.disallow(Result.KICK_BANNED,""String_Node_Str"");
    return;
  }
  long timeLeft;
  if ((timeLeft=BenCmd.getPermissionManager().getKickTracker().isBlocked(event.getPlayer().getName())) > 0) {
    event.disallow(Result.KICK_OTHER,""String_Node_Str"" + String.valueOf((int)Math.ceil(timeLeft / 60000.0)) + ""String_Node_Str"");
    return;
  }
switch (BenCmd.getPermissionManager().getMaxPlayerHandler().join(User.getUser(event.getPlayer()))) {
case NO_SLOT_NORMAL:
    event.disallow(Result.KICK_FULL,BenCmd.getMainProperties().getString(""String_Node_Str"",""String_Node_Str""));
  break;
case NO_SLOT_RESERVED:
event.disallow(Result.KICK_FULL,BenCmd.getMainProperties().getString(""String_Node_Str"",""String_Node_Str""));
break;
}
User.finalizeUser(User.getUser(event.getPlayer()));
}","private void loginCheck(PlayerLoginEvent event){
  PermissionUser user;
  if (!BenCmd.getPermissionManager().getUserFile().userExists(event.getPlayer().getName())) {
    if (BenCmd.getMainProperties().getBoolean(""String_Node_Str"",false)) {
      event.disallow(Result.KICK_WHITELIST,BenCmd.getMainProperties().getString(""String_Node_Str"",""String_Node_Str""));
      return;
    }
 else {
      BenCmd.getPermissionManager().getUserFile().addUser(user=PermissionUser.newUser(event.getPlayer().getName(),new ArrayList<String>()));
    }
  }
 else {
    user=PermissionUser.matchUserIgnoreCase(event.getPlayer().getName());
    if (!user.getName().equals(event.getPlayer().getName())) {
      BenCmd.log(Level.WARNING,""String_Node_Str"" + user.getName() + ""String_Node_Str""+ event.getPlayer().getName());
      BenCmd.getPermissionManager().getUserFile().correctCase(user,event.getPlayer().getName());
    }
  }
  if (BenCmd.getPermissionManager().getGroupFile().getAllUserGroups(user).isEmpty()) {
    BenCmd.getPermissionManager().getGroupFile().getGroup(BenCmd.getMainProperties().getString(""String_Node_Str"",""String_Node_Str"")).addUser(user);
  }
  if ((User.getUser(event.getPlayer())).isBanned() != null) {
    event.disallow(Result.KICK_BANNED,""String_Node_Str"");
    return;
  }
  long timeLeft;
  if ((timeLeft=BenCmd.getPermissionManager().getKickTracker().isBlocked(event.getPlayer().getName())) > 0) {
    event.disallow(Result.KICK_OTHER,""String_Node_Str"" + String.valueOf((int)Math.ceil(timeLeft / 60000.0)) + ""String_Node_Str"");
    return;
  }
switch (BenCmd.getPermissionManager().getMaxPlayerHandler().join(User.getUser(event.getPlayer()))) {
case NO_SLOT_NORMAL:
    event.disallow(Result.KICK_FULL,BenCmd.getMainProperties().getString(""String_Node_Str"",""String_Node_Str""));
  break;
case NO_SLOT_RESERVED:
event.disallow(Result.KICK_FULL,BenCmd.getMainProperties().getString(""String_Node_Str"",""String_Node_Str""));
break;
}
User.finalizeUser(User.getUser(event.getPlayer()));
}",0.9205746814854974
179007,"public String ownsHere(Player player,Location location){
  boolean inLot=false;
  for (  String LotID : lots.keySet()) {
    if (getLot(LotID).withinLot(location)) {
      inLot=true;
      PermissionUser user=PermissionUser.matchUser(player.getName());
      if (user == null) {
        return ""String_Node_Str"";
      }
      if (getLot(LotID).isOwner(player) || user.hasPerm(""String_Node_Str"")) {
        return getLot(LotID).getLotID();
      }
    }
  }
  if (inLot) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}","public String ownsHere(Player player,Location location){
  boolean inLot=false;
  for (  String LotID : lots.keySet()) {
    if (getLot(LotID).withinLot(location)) {
      inLot=true;
      PermissionUser user=PermissionUser.matchUserIgnoreCase(player.getName());
      if (user == null) {
        return ""String_Node_Str"";
      }
      if (getLot(LotID).isOwner(player) || user.hasPerm(""String_Node_Str"")) {
        return getLot(LotID).getLotID();
      }
    }
  }
  if (inLot) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}",0.9910071942446044
179008,"public void Ban(String[] args,User user){
  if (args.length < 1 || args.length > 2) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  PermissionUser puser2;
  if ((puser2=PermissionUser.matchUser(args[0])) == null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (puser2.isBanned() != null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  long duration=-1;
  TimeType durationType;
  if (args.length == 2) {
    if (args[1].endsWith(""String_Node_Str"")) {
      durationType=TimeType.SECOND;
    }
 else     if (args[1].endsWith(""String_Node_Str"")) {
      durationType=TimeType.MINUTE;
    }
 else     if (args[1].endsWith(""String_Node_Str"")) {
      durationType=TimeType.HOUR;
    }
 else     if (args[1].endsWith(""String_Node_Str"")) {
      durationType=TimeType.DAY;
    }
 else {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    args[1]=args[1].substring(0,args[1].length() - 1);
    try {
      duration=Long.parseLong(args[1]);
    }
 catch (    NumberFormatException e) {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    duration*=getValue(durationType);
  }
  if (duration == -1 && !user.hasPerm(""String_Node_Str"")) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    BenCmd.getPlugin().logPermFail();
    return;
  }
  if (duration == -1) {
    BenCmd.getPermissionManager().getActionLog().log(new ActionLogEntry(ActionLogType.BAN_PERM,puser2.getName(),user.getName()));
  }
 else {
    BenCmd.getPermissionManager().getActionLog().log(new ActionLogEntry(ActionLogType.BAN_TEMP,puser2.getName(),user.getName(),duration));
  }
  BenCmd.getPermissionManager().getActionFile().addAction(puser2.getName(),ActionType.BAN,duration);
  User user2;
  if ((user2=User.matchUser(args[0])) != null) {
    user2.kick(""String_Node_Str"");
  }
  user.sendMessage(ChatColor.RED + ""String_Node_Str"");
}","public void Ban(String[] args,User user){
  if (args.length < 1 || args.length > 2) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  PermissionUser puser2;
  if ((puser2=PermissionUser.matchUserIgnoreCase(args[0])) == null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (puser2.isBanned() != null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  long duration=-1;
  TimeType durationType;
  if (args.length == 2) {
    if (args[1].endsWith(""String_Node_Str"")) {
      durationType=TimeType.SECOND;
    }
 else     if (args[1].endsWith(""String_Node_Str"")) {
      durationType=TimeType.MINUTE;
    }
 else     if (args[1].endsWith(""String_Node_Str"")) {
      durationType=TimeType.HOUR;
    }
 else     if (args[1].endsWith(""String_Node_Str"")) {
      durationType=TimeType.DAY;
    }
 else {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    args[1]=args[1].substring(0,args[1].length() - 1);
    try {
      duration=Long.parseLong(args[1]);
    }
 catch (    NumberFormatException e) {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    duration*=getValue(durationType);
  }
  if (duration == -1 && !user.hasPerm(""String_Node_Str"")) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    BenCmd.getPlugin().logPermFail();
    return;
  }
  if (duration == -1) {
    BenCmd.getPermissionManager().getActionLog().log(new ActionLogEntry(ActionLogType.BAN_PERM,puser2.getName(),user.getName()));
  }
 else {
    BenCmd.getPermissionManager().getActionLog().log(new ActionLogEntry(ActionLogType.BAN_TEMP,puser2.getName(),user.getName(),duration));
  }
  BenCmd.getPermissionManager().getActionFile().addAction(puser2.getName(),ActionType.BAN,duration);
  User user2;
  if ((user2=User.matchUser(args[0])) != null) {
    user2.kick(""String_Node_Str"");
  }
  user.sendMessage(ChatColor.RED + ""String_Node_Str"");
}",0.9974696356275304
179009,"public void Unban(String[] args,User user){
  if (args.length != 1) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  PermissionUser puser2;
  if ((puser2=PermissionUser.matchUser(args[0])) == null && !Bukkit.getPlayerExact(args[0]).isBanned()) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (puser2.isBanned() == null && !Bukkit.getPlayerExact(puser2.getName()).isBanned()) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (puser2 != null) {
    BenCmd.getPermissionManager().getActionLog().log(new ActionLogEntry(ActionLogType.UNBAN_MAN,puser2.getName(),user.getName()));
    BenCmd.getPermissionManager().getActionFile().removeAction(puser2.isBanned());
  }
  user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}","public void Unban(String[] args,User user){
  if (args.length != 1) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  PermissionUser puser2;
  if ((puser2=PermissionUser.matchUserIgnoreCase(args[0])) == null && !Bukkit.getPlayerExact(args[0]).isBanned()) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (puser2.isBanned() == null && !Bukkit.getPlayerExact(puser2.getName()).isBanned()) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (puser2 != null) {
    BenCmd.getPermissionManager().getActionLog().log(new ActionLogEntry(ActionLogType.UNBAN_MAN,puser2.getName(),user.getName()));
    BenCmd.getPermissionManager().getActionFile().removeAction(puser2.isBanned());
  }
  user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}",0.9938875305623472
179010,"public void Note(String[] args,User user){
  if (args.length < 2) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  PermissionUser puser2;
  if ((puser2=PermissionUser.matchUser(args[0])) == null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  String m=""String_Node_Str"";
  for (int i=1; i < args.length; i++) {
    if (m.isEmpty()) {
      m+=args[i];
    }
 else {
      m+=""String_Node_Str"" + args[i];
    }
  }
  BenCmd.getPermissionManager().getActionLog().log(new ActionLogEntry(ActionLogType.NOTE,puser2.getName(),user.getName(),m));
  user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + puser2.getName()+ ""String_Node_Str"");
}","public void Note(String[] args,User user){
  if (args.length < 2) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  PermissionUser puser2;
  if ((puser2=PermissionUser.matchUserIgnoreCase(args[0])) == null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  String m=""String_Node_Str"";
  for (int i=1; i < args.length; i++) {
    if (m.isEmpty()) {
      m+=args[i];
    }
 else {
      m+=""String_Node_Str"" + args[i];
    }
  }
  BenCmd.getPermissionManager().getActionLog().log(new ActionLogEntry(ActionLogType.NOTE,puser2.getName(),user.getName(),m));
  user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + puser2.getName()+ ""String_Node_Str"");
}",0.9928774928774928
179011,"public void Unjail(String[] args,User user){
  if (args.length != 1) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  PermissionUser puser2;
  if ((puser2=PermissionUser.matchUser(args[0])) == null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (puser2.isJailed() == null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  BenCmd.getPermissionManager().getActionLog().log(new ActionLogEntry(ActionLogType.UNJAIL_MAN,puser2.getName(),user.getName()));
  BenCmd.getPermissionManager().getActionFile().removeAction(puser2.isJailed());
  User user2;
  if ((user2=User.matchUser(args[0])) != null) {
    user2.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    user2.spawn();
  }
 else {
    BenCmd.getPermissionManager().getActionFile().addAction(puser2.getName(),ActionType.LEAVEJAIL,-1);
  }
  user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}","public void Unjail(String[] args,User user){
  if (args.length != 1) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  PermissionUser puser2;
  if ((puser2=PermissionUser.matchUserIgnoreCase(args[0])) == null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (puser2.isJailed() == null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  BenCmd.getPermissionManager().getActionLog().log(new ActionLogEntry(ActionLogType.UNJAIL_MAN,puser2.getName(),user.getName()));
  BenCmd.getPermissionManager().getActionFile().removeAction(puser2.isJailed());
  User user2;
  if ((user2=User.matchUser(args[0])) != null) {
    user2.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    user2.spawn();
  }
 else {
    BenCmd.getPermissionManager().getActionFile().addAction(puser2.getName(),ActionType.LEAVEJAIL,-1);
  }
  user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}",0.9947257383966244
179012,"public void Jail(String[] args,User user){
  if (args.length < 1 || args.length > 2) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  PermissionUser puser2;
  if ((puser2=PermissionUser.matchUser(args[0])) == null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (puser2.isJailed() != null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  long duration=-1;
  TimeType durationType;
  if (args.length == 2) {
    if (args[1].endsWith(""String_Node_Str"")) {
      durationType=TimeType.SECOND;
    }
 else     if (args[1].endsWith(""String_Node_Str"")) {
      durationType=TimeType.MINUTE;
    }
 else     if (args[1].endsWith(""String_Node_Str"")) {
      durationType=TimeType.HOUR;
    }
 else     if (args[1].endsWith(""String_Node_Str"")) {
      durationType=TimeType.DAY;
    }
 else {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    args[1]=args[1].substring(0,args[1].length() - 1);
    try {
      duration=Long.parseLong(args[1]);
    }
 catch (    NumberFormatException e) {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    duration*=getValue(durationType);
  }
  if (duration == -1 && !user.hasPerm(""String_Node_Str"")) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    BenCmd.getPlugin().logPermFail();
    return;
  }
  if (duration == -1) {
    BenCmd.getPermissionManager().getActionLog().log(new ActionLogEntry(ActionLogType.JAIL_PERM,puser2.getName(),user.getName()));
  }
 else {
    BenCmd.getPermissionManager().getActionLog().log(new ActionLogEntry(ActionLogType.JAIL_TEMP,puser2.getName(),user.getName(),duration));
  }
  BenCmd.getPermissionManager().getActionFile().addAction(puser2.getName(),ActionType.JAIL,duration);
  User user2;
  if ((user2=User.matchUser(args[0])) != null) {
    user2.warpTo(BenCmd.getPermissionManager().getJailWarp());
    user2.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  user.sendMessage(ChatColor.RED + ""String_Node_Str"");
}","public void Jail(String[] args,User user){
  if (args.length < 1 || args.length > 2) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  PermissionUser puser2;
  if ((puser2=PermissionUser.matchUserIgnoreCase(args[0])) == null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (puser2.isJailed() != null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  long duration=-1;
  TimeType durationType;
  if (args.length == 2) {
    if (args[1].endsWith(""String_Node_Str"")) {
      durationType=TimeType.SECOND;
    }
 else     if (args[1].endsWith(""String_Node_Str"")) {
      durationType=TimeType.MINUTE;
    }
 else     if (args[1].endsWith(""String_Node_Str"")) {
      durationType=TimeType.HOUR;
    }
 else     if (args[1].endsWith(""String_Node_Str"")) {
      durationType=TimeType.DAY;
    }
 else {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    args[1]=args[1].substring(0,args[1].length() - 1);
    try {
      duration=Long.parseLong(args[1]);
    }
 catch (    NumberFormatException e) {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    duration*=getValue(durationType);
  }
  if (duration == -1 && !user.hasPerm(""String_Node_Str"")) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    BenCmd.getPlugin().logPermFail();
    return;
  }
  if (duration == -1) {
    BenCmd.getPermissionManager().getActionLog().log(new ActionLogEntry(ActionLogType.JAIL_PERM,puser2.getName(),user.getName()));
  }
 else {
    BenCmd.getPermissionManager().getActionLog().log(new ActionLogEntry(ActionLogType.JAIL_TEMP,puser2.getName(),user.getName(),duration));
  }
  BenCmd.getPermissionManager().getActionFile().addAction(puser2.getName(),ActionType.JAIL,duration);
  User user2;
  if ((user2=User.matchUser(args[0])) != null) {
    user2.warpTo(BenCmd.getPermissionManager().getJailWarp());
    user2.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  user.sendMessage(ChatColor.RED + ""String_Node_Str"");
}",0.9975798644724104
179013,"public void Mute(String[] args,User user){
  if (args.length < 1 || args.length > 2) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  PermissionUser puser2;
  if ((puser2=PermissionUser.matchUser(args[0])) == null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (puser2.isMuted() != null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  long duration=-1;
  TimeType durationType;
  if (args.length == 2) {
    if (args[1].endsWith(""String_Node_Str"")) {
      durationType=TimeType.SECOND;
    }
 else     if (args[1].endsWith(""String_Node_Str"")) {
      durationType=TimeType.MINUTE;
    }
 else     if (args[1].endsWith(""String_Node_Str"")) {
      durationType=TimeType.HOUR;
    }
 else     if (args[1].endsWith(""String_Node_Str"")) {
      durationType=TimeType.DAY;
    }
 else {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    args[1]=args[1].substring(0,args[1].length() - 1);
    try {
      duration=Long.parseLong(args[1]);
    }
 catch (    NumberFormatException e) {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    duration*=getValue(durationType);
  }
  if (duration == -1 && !user.hasPerm(""String_Node_Str"")) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    BenCmd.getPlugin().logPermFail();
    return;
  }
  if (duration == -1) {
    BenCmd.getPermissionManager().getActionLog().log(new ActionLogEntry(ActionLogType.MUTE_PERM,puser2.getName(),user.getName()));
  }
 else {
    BenCmd.getPermissionManager().getActionLog().log(new ActionLogEntry(ActionLogType.MUTE_TEMP,puser2.getName(),user.getName(),duration));
  }
  BenCmd.getPermissionManager().getActionFile().addAction(puser2.getName(),ActionType.ALLMUTE,duration);
  User user2;
  if ((user2=User.matchUser(args[0])) != null) {
    user2.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  user.sendMessage(ChatColor.RED + ""String_Node_Str"");
}","public void Mute(String[] args,User user){
  if (args.length < 1 || args.length > 2) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  PermissionUser puser2;
  if ((puser2=PermissionUser.matchUserIgnoreCase(args[0])) == null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (puser2.isMuted() != null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  long duration=-1;
  TimeType durationType;
  if (args.length == 2) {
    if (args[1].endsWith(""String_Node_Str"")) {
      durationType=TimeType.SECOND;
    }
 else     if (args[1].endsWith(""String_Node_Str"")) {
      durationType=TimeType.MINUTE;
    }
 else     if (args[1].endsWith(""String_Node_Str"")) {
      durationType=TimeType.HOUR;
    }
 else     if (args[1].endsWith(""String_Node_Str"")) {
      durationType=TimeType.DAY;
    }
 else {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    args[1]=args[1].substring(0,args[1].length() - 1);
    try {
      duration=Long.parseLong(args[1]);
    }
 catch (    NumberFormatException e) {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    duration*=getValue(durationType);
  }
  if (duration == -1 && !user.hasPerm(""String_Node_Str"")) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    BenCmd.getPlugin().logPermFail();
    return;
  }
  if (duration == -1) {
    BenCmd.getPermissionManager().getActionLog().log(new ActionLogEntry(ActionLogType.MUTE_PERM,puser2.getName(),user.getName()));
  }
 else {
    BenCmd.getPermissionManager().getActionLog().log(new ActionLogEntry(ActionLogType.MUTE_TEMP,puser2.getName(),user.getName(),duration));
  }
  BenCmd.getPermissionManager().getActionFile().addAction(puser2.getName(),ActionType.ALLMUTE,duration);
  User user2;
  if ((user2=User.matchUser(args[0])) != null) {
    user2.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  user.sendMessage(ChatColor.RED + ""String_Node_Str"");
}",0.9975062344139652
179014,"public void Unmute(String[] args,User user){
  if (args.length != 1) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  PermissionUser puser2;
  if ((puser2=PermissionUser.matchUser(args[0])) == null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (puser2.isMuted() == null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  BenCmd.getPermissionManager().getActionLog().log(new ActionLogEntry(ActionLogType.UNMUTE_MAN,puser2.getName(),user.getName()));
  BenCmd.getPermissionManager().getActionFile().removeAction(puser2.isMuted());
  User user2;
  if ((user2=User.matchUser(args[0])) != null) {
    user2.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  }
  user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}","public void Unmute(String[] args,User user){
  if (args.length != 1) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  PermissionUser puser2;
  if ((puser2=PermissionUser.matchUserIgnoreCase(args[0])) == null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (puser2.isMuted() == null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  BenCmd.getPermissionManager().getActionLog().log(new ActionLogEntry(ActionLogType.UNMUTE_MAN,puser2.getName(),user.getName()));
  BenCmd.getPermissionManager().getActionFile().removeAction(puser2.isMuted());
  User user2;
  if ((user2=User.matchUser(args[0])) != null) {
    user2.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  }
  user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
}",0.9938423645320196
179015,"public static PermissionUser matchUser(String name){
  for (  Object oUser : BenCmd.getPermissionManager().getUserFile().listUsers().values()) {
    if (((InternalUser)oUser).getName().equals(name)) {
      return new PermissionUser((InternalUser)oUser);
    }
  }
  return null;
}","/** 
 * @deprecated Use matchUserIgnoreCase(String name) instead!
 */
public static PermissionUser matchUser(String name){
  for (  Object oUser : BenCmd.getPermissionManager().getUserFile().listUsers().values()) {
    if (((InternalUser)oUser).getName().equals(name)) {
      return new PermissionUser((InternalUser)oUser);
    }
  }
  return null;
}",0.8892405063291139
179016,"public void PublicProtect(String[] args,User user){
  if (!user.hasPerm(""String_Node_Str"")) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    BenCmd.getPlugin().logPermFail();
    return;
  }
  Block pointedAt=((Player)user.getHandle()).getTargetBlock(null,4);
  if (args.length == 1) {
    this.Lock(pointedAt,user,true);
  }
 else   if (args.length == 2) {
    PermissionUser p=PermissionUser.matchUser(args[1]);
    if (p != null) {
      this.Lock(pointedAt,user,p,true);
    }
 else {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
 else {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
  }
}","public void PublicProtect(String[] args,User user){
  if (!user.hasPerm(""String_Node_Str"")) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    BenCmd.getPlugin().logPermFail();
    return;
  }
  Block pointedAt=((Player)user.getHandle()).getTargetBlock(null,4);
  if (args.length == 1) {
    this.Lock(pointedAt,user,true);
  }
 else   if (args.length == 2) {
    PermissionUser p=PermissionUser.matchUserIgnoreCase(args[1]);
    if (p != null) {
      this.Lock(pointedAt,user,p,true);
    }
 else {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
 else {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
  }
}",0.9923076923076924
179017,"public void AddGuest(String[] args,User user){
  Block pointedAt=((Player)user.getHandle()).getTargetBlock(null,4);
  ProtectedBlock block;
  if (args.length == 2) {
    if ((block=BenCmd.getProtections().getProtection(BenCmd.getProtections().getProtection(pointedAt.getLocation()))) != null) {
      if (!block.canChange(user.getName()) && !user.hasPerm(""String_Node_Str"")) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      PermissionUser newOwner;
      if ((newOwner=PermissionUser.matchUser(args[1])) == null) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      ProtectionEditEvent event=new ProtectionEditEvent(block,user,ChangeType.ADD_GUEST,newOwner);
      Bukkit.getPluginManager().callEvent(event);
      if (event.isCancelled()) {
        return;
      }
      BenCmd.log(user.getDisplayName() + ""String_Node_Str"" + newOwner.getName()+ ""String_Node_Str""+ block.getOwner()+ ""String_Node_Str""+ block.GetId()+ ""String_Node_Str"");
      user.sendMessage(ChatColor.GREEN + newOwner.getName() + ""String_Node_Str"");
      BenCmd.getProtections().addGuest(block.GetId(),newOwner.getName());
    }
 else {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
 else   if (args.length == 3) {
    int id;
    try {
      id=Integer.parseInt(args[2]);
    }
 catch (    NumberFormatException e) {
      user.sendMessage(ChatColor.RED + args[2] + ""String_Node_Str"");
      return;
    }
    if ((block=BenCmd.getProtections().getProtection(id)) != null) {
      if (!block.canChange(user.getName()) && !user.hasPerm(""String_Node_Str"")) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      block=BenCmd.getProtections().getProtection(id);
      PermissionUser newOwner;
      if ((newOwner=PermissionUser.matchUser(args[0])) == null) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      ProtectionEditEvent event=new ProtectionEditEvent(block,user,ChangeType.ADD_GUEST,newOwner);
      Bukkit.getPluginManager().callEvent(event);
      if (event.isCancelled()) {
        return;
      }
      BenCmd.log(user.getDisplayName() + ""String_Node_Str"" + newOwner.getName()+ ""String_Node_Str""+ block.getOwner()+ ""String_Node_Str""+ block.GetId()+ ""String_Node_Str"");
      user.sendMessage(ChatColor.GREEN + newOwner.getName() + ""String_Node_Str"");
      BenCmd.getProtections().addGuest(block.GetId(),newOwner.getName());
    }
  }
 else {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
  }
}","public void AddGuest(String[] args,User user){
  Block pointedAt=((Player)user.getHandle()).getTargetBlock(null,4);
  ProtectedBlock block;
  if (args.length == 2) {
    if ((block=BenCmd.getProtections().getProtection(BenCmd.getProtections().getProtection(pointedAt.getLocation()))) != null) {
      if (!block.canChange(user.getName()) && !user.hasPerm(""String_Node_Str"")) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      PermissionUser newOwner;
      if ((newOwner=PermissionUser.matchUserIgnoreCase(args[1])) == null) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      ProtectionEditEvent event=new ProtectionEditEvent(block,user,ChangeType.ADD_GUEST,newOwner);
      Bukkit.getPluginManager().callEvent(event);
      if (event.isCancelled()) {
        return;
      }
      BenCmd.log(user.getDisplayName() + ""String_Node_Str"" + newOwner.getName()+ ""String_Node_Str""+ block.getOwner()+ ""String_Node_Str""+ block.GetId()+ ""String_Node_Str"");
      user.sendMessage(ChatColor.GREEN + newOwner.getName() + ""String_Node_Str"");
      BenCmd.getProtections().addGuest(block.GetId(),newOwner.getName());
    }
 else {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
 else   if (args.length == 3) {
    int id;
    try {
      id=Integer.parseInt(args[2]);
    }
 catch (    NumberFormatException e) {
      user.sendMessage(ChatColor.RED + args[2] + ""String_Node_Str"");
      return;
    }
    if ((block=BenCmd.getProtections().getProtection(id)) != null) {
      if (!block.canChange(user.getName()) && !user.hasPerm(""String_Node_Str"")) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      block=BenCmd.getProtections().getProtection(id);
      PermissionUser newOwner;
      if ((newOwner=PermissionUser.matchUserIgnoreCase(args[0])) == null) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      ProtectionEditEvent event=new ProtectionEditEvent(block,user,ChangeType.ADD_GUEST,newOwner);
      Bukkit.getPluginManager().callEvent(event);
      if (event.isCancelled()) {
        return;
      }
      BenCmd.log(user.getDisplayName() + ""String_Node_Str"" + newOwner.getName()+ ""String_Node_Str""+ block.getOwner()+ ""String_Node_Str""+ block.GetId()+ ""String_Node_Str"");
      user.sendMessage(ChatColor.GREEN + newOwner.getName() + ""String_Node_Str"");
      BenCmd.getProtections().addGuest(block.GetId(),newOwner.getName());
    }
  }
 else {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
  }
}",0.9961315280464216
179018,"public void AddProtect(String[] args,User user){
  if (!user.hasPerm(""String_Node_Str"")) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    BenCmd.getPlugin().logPermFail();
    return;
  }
  Block pointedAt=((Player)user.getHandle()).getTargetBlock(null,4);
  if (args.length == 1) {
    this.Lock(pointedAt,user,false);
  }
 else   if (args.length == 2) {
    PermissionUser p=PermissionUser.matchUser(args[1]);
    if (p != null) {
      this.Lock(pointedAt,user,p,false);
    }
 else {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
 else {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
  }
}","public void AddProtect(String[] args,User user){
  if (!user.hasPerm(""String_Node_Str"")) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    BenCmd.getPlugin().logPermFail();
    return;
  }
  Block pointedAt=((Player)user.getHandle()).getTargetBlock(null,4);
  if (args.length == 1) {
    this.Lock(pointedAt,user,false);
  }
 else   if (args.length == 2) {
    PermissionUser p=PermissionUser.matchUserIgnoreCase(args[1]);
    if (p != null) {
      this.Lock(pointedAt,user,p,false);
    }
 else {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
 else {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
  }
}",0.9922958397534668
179019,"public void RemGuest(String[] args,User user){
  Block pointedAt=((Player)user.getHandle()).getTargetBlock(null,4);
  ProtectedBlock block;
  if (args.length == 2) {
    if ((block=BenCmd.getProtections().getProtection(BenCmd.getProtections().getProtection(pointedAt.getLocation()))) != null) {
      if (!block.canChange(user.getName()) && !user.hasPerm(""String_Node_Str"")) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      PermissionUser newOwner;
      if ((newOwner=PermissionUser.matchUser(args[1])) == null) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      ProtectionEditEvent event=new ProtectionEditEvent(block,user,ChangeType.REMOVE_GUEST,newOwner);
      Bukkit.getPluginManager().callEvent(event);
      if (event.isCancelled()) {
        return;
      }
      BenCmd.log(user.getDisplayName() + ""String_Node_Str"" + newOwner.getName()+ ""String_Node_Str""+ block.getOwner()+ ""String_Node_Str""+ block.GetId()+ ""String_Node_Str"");
      user.sendMessage(ChatColor.GREEN + newOwner.getName() + ""String_Node_Str"");
      BenCmd.getProtections().removeGuest(block.GetId(),newOwner.getName());
    }
 else {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
 else   if (args.length == 3) {
    int id;
    try {
      id=Integer.parseInt(args[2]);
    }
 catch (    NumberFormatException e) {
      user.sendMessage(ChatColor.RED + args[2] + ""String_Node_Str"");
      return;
    }
    if ((block=BenCmd.getProtections().getProtection(id)) != null) {
      if (!block.canChange(user.getName()) && !user.hasPerm(""String_Node_Str"")) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      PermissionUser newOwner;
      if ((newOwner=PermissionUser.matchUser(args[0])) == null) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      ProtectionEditEvent event=new ProtectionEditEvent(block,user,ChangeType.REMOVE_GUEST,newOwner);
      Bukkit.getPluginManager().callEvent(event);
      if (event.isCancelled()) {
        return;
      }
      BenCmd.log(user.getDisplayName() + ""String_Node_Str"" + newOwner.getName()+ ""String_Node_Str""+ block.getOwner()+ ""String_Node_Str""+ block.GetId()+ ""String_Node_Str"");
      user.sendMessage(ChatColor.GREEN + newOwner.getName() + ""String_Node_Str"");
      BenCmd.getProtections().removeGuest(block.GetId(),newOwner.getName());
    }
  }
 else {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
  }
}","public void RemGuest(String[] args,User user){
  Block pointedAt=((Player)user.getHandle()).getTargetBlock(null,4);
  ProtectedBlock block;
  if (args.length == 2) {
    if ((block=BenCmd.getProtections().getProtection(BenCmd.getProtections().getProtection(pointedAt.getLocation()))) != null) {
      if (!block.canChange(user.getName()) && !user.hasPerm(""String_Node_Str"")) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      PermissionUser newOwner;
      if ((newOwner=PermissionUser.matchUserIgnoreCase(args[1])) == null) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      ProtectionEditEvent event=new ProtectionEditEvent(block,user,ChangeType.REMOVE_GUEST,newOwner);
      Bukkit.getPluginManager().callEvent(event);
      if (event.isCancelled()) {
        return;
      }
      BenCmd.log(user.getDisplayName() + ""String_Node_Str"" + newOwner.getName()+ ""String_Node_Str""+ block.getOwner()+ ""String_Node_Str""+ block.GetId()+ ""String_Node_Str"");
      user.sendMessage(ChatColor.GREEN + newOwner.getName() + ""String_Node_Str"");
      BenCmd.getProtections().removeGuest(block.GetId(),newOwner.getName());
    }
 else {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
 else   if (args.length == 3) {
    int id;
    try {
      id=Integer.parseInt(args[2]);
    }
 catch (    NumberFormatException e) {
      user.sendMessage(ChatColor.RED + args[2] + ""String_Node_Str"");
      return;
    }
    if ((block=BenCmd.getProtections().getProtection(id)) != null) {
      if (!block.canChange(user.getName()) && !user.hasPerm(""String_Node_Str"")) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      PermissionUser newOwner;
      if ((newOwner=PermissionUser.matchUserIgnoreCase(args[0])) == null) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      ProtectionEditEvent event=new ProtectionEditEvent(block,user,ChangeType.REMOVE_GUEST,newOwner);
      Bukkit.getPluginManager().callEvent(event);
      if (event.isCancelled()) {
        return;
      }
      BenCmd.log(user.getDisplayName() + ""String_Node_Str"" + newOwner.getName()+ ""String_Node_Str""+ block.getOwner()+ ""String_Node_Str""+ block.GetId()+ ""String_Node_Str"");
      user.sendMessage(ChatColor.GREEN + newOwner.getName() + ""String_Node_Str"");
      BenCmd.getProtections().removeGuest(block.GetId(),newOwner.getName());
    }
  }
 else {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
  }
}",0.996066089693155
179020,"public void OwnerProtect(String[] args,User user){
  Block pointedAt=((Player)user.getHandle()).getTargetBlock(null,4);
  ProtectedBlock block;
  if (args.length == 2) {
    if ((block=BenCmd.getProtections().getProtection(BenCmd.getProtections().getProtection(pointedAt.getLocation()))) != null) {
      if (!block.canChange(user.getName()) && !user.hasPerm(""String_Node_Str"")) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      PermissionUser newOwner;
      if ((newOwner=PermissionUser.matchUser(args[1])) == null) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      ProtectionEditEvent event=new ProtectionEditEvent(block,user,ChangeType.SET_OWNER,newOwner);
      Bukkit.getPluginManager().callEvent(event);
      if (event.isCancelled()) {
        return;
      }
      BenCmd.log(user.getDisplayName() + ""String_Node_Str"" + block.getOwner()+ ""String_Node_Str""+ block.GetId()+ ""String_Node_Str""+ args[1]);
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + newOwner.getName());
      BenCmd.getProtections().changeOwner(block.GetId(),newOwner.getName());
    }
 else {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
 else   if (args.length == 3) {
    int id;
    try {
      id=Integer.parseInt(args[2]);
    }
 catch (    NumberFormatException e) {
      user.sendMessage(ChatColor.RED + args[2] + ""String_Node_Str"");
      return;
    }
    block=BenCmd.getProtections().getProtection(id);
    if (!block.canChange(user.getName()) && !user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    PermissionUser newOwner;
    if ((newOwner=PermissionUser.matchUser(args[0])) == null) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    ProtectionEditEvent event=new ProtectionEditEvent(block,user,ChangeType.SET_OWNER,newOwner);
    Bukkit.getPluginManager().callEvent(event);
    if (event.isCancelled()) {
      return;
    }
    BenCmd.log(user.getDisplayName() + ""String_Node_Str"" + block.getOwner()+ ""String_Node_Str""+ block.GetId()+ ""String_Node_Str""+ args[1]);
    user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + newOwner.getName());
    BenCmd.getProtections().changeOwner(block.GetId(),newOwner.getName());
  }
 else {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
  }
}","public void OwnerProtect(String[] args,User user){
  Block pointedAt=((Player)user.getHandle()).getTargetBlock(null,4);
  ProtectedBlock block;
  if (args.length == 2) {
    if ((block=BenCmd.getProtections().getProtection(BenCmd.getProtections().getProtection(pointedAt.getLocation()))) != null) {
      if (!block.canChange(user.getName()) && !user.hasPerm(""String_Node_Str"")) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      PermissionUser newOwner;
      if ((newOwner=PermissionUser.matchUserIgnoreCase(args[1])) == null) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      ProtectionEditEvent event=new ProtectionEditEvent(block,user,ChangeType.SET_OWNER,newOwner);
      Bukkit.getPluginManager().callEvent(event);
      if (event.isCancelled()) {
        return;
      }
      BenCmd.log(user.getDisplayName() + ""String_Node_Str"" + block.getOwner()+ ""String_Node_Str""+ block.GetId()+ ""String_Node_Str""+ args[1]);
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + newOwner.getName());
      BenCmd.getProtections().changeOwner(block.GetId(),newOwner.getName());
    }
 else {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
 else   if (args.length == 3) {
    int id;
    try {
      id=Integer.parseInt(args[2]);
    }
 catch (    NumberFormatException e) {
      user.sendMessage(ChatColor.RED + args[2] + ""String_Node_Str"");
      return;
    }
    block=BenCmd.getProtections().getProtection(id);
    if (!block.canChange(user.getName()) && !user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    PermissionUser newOwner;
    if ((newOwner=PermissionUser.matchUserIgnoreCase(args[0])) == null) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    ProtectionEditEvent event=new ProtectionEditEvent(block,user,ChangeType.SET_OWNER,newOwner);
    Bukkit.getPluginManager().callEvent(event);
    if (event.isCancelled()) {
      return;
    }
    BenCmd.log(user.getDisplayName() + ""String_Node_Str"" + block.getOwner()+ ""String_Node_Str""+ block.GetId()+ ""String_Node_Str""+ args[1]);
    user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + newOwner.getName());
    BenCmd.getProtections().changeOwner(block.GetId(),newOwner.getName());
  }
 else {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
  }
}",0.995874587458746
179021,"public void broadcastMessage(String message){
  for (  User u : inChannel) {
    u.sendMessage(message);
  }
  for (  User u : spies) {
    u.sendMessage(ChatColor.GRAY + name + ""String_Node_Str""+ message);
  }
}","public void broadcastMessage(String message){
  for (  User u : inChannel) {
    u.sendMessage(message);
  }
  for (  User u : spies) {
    u.sendMessage(ChatColor.GRAY + name + ""String_Node_Str""+ message);
  }
  BenCmd.log(message);
}",0.9485458612975392
179022,"public void Item(String[] args,User user){
  if (args.length == 0 || args.length > 3) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  BCItem Item;
  if ((Item=InventoryBackend.getInstance().checkAlias(args[0])) == null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  int Amount=1;
  if (args.length >= 2) {
    try {
      Amount=Integer.parseInt(args[1]);
    }
 catch (    NumberFormatException e) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
  int fullAmount=Amount;
  List<Integer> splitamount=new ArrayList<Integer>();
  while (Amount > 0) {
    Integer maxAmount=InventoryBackend.getInstance().getStackNumber(Item.getMaterial().getId());
    if (Amount > maxAmount) {
      splitamount.add(maxAmount);
      Amount-=maxAmount;
    }
 else {
      splitamount.add(Amount);
      Amount=0;
    }
  }
  Material mat=Item.getMaterial();
  if (!BenCmd.getPermissionManager().getItemLists().canSpawn(mat,user.highestLevelGroup().getName())) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  int ItemDamage=Item.getDamage();
  if (args.length == 3) {
    User user2;
    if ((user2=User.matchUser(args[2])) == null) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[2]+ ""String_Node_Str"");
      return;
    }
    for (    Integer amount : splitamount) {
      if (((Player)user.getHandle()).getInventory().firstEmpty() >= 0) {
        ((Player)user.getHandle()).getInventory().addItem(new ItemStack(mat,amount,(short)ItemDamage));
      }
 else {
        ((Player)user.getHandle()).getWorld().dropItem(((Player)user.getHandle()).getLocation(),new ItemStack(mat,amount,(short)ItemDamage));
      }
    }
    user2.sendMessage(ChatColor.GREEN + user.getDisplayName() + ""String_Node_Str"");
    user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    BenCmd.log(""String_Node_Str"" + user.getDisplayName() + ""String_Node_Str""+ user2.getDisplayName()+ ""String_Node_Str""+ String.valueOf(mat.getId())+ ""String_Node_Str""+ String.valueOf(fullAmount)+ ""String_Node_Str""+ String.valueOf(ItemDamage)+ ""String_Node_Str"");
  }
 else {
    if (user.isServer()) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    for (    Integer amount : splitamount) {
      if (((Player)user.getHandle()).getInventory().firstEmpty() >= 0) {
        ((Player)user.getHandle()).getInventory().addItem(new ItemStack(mat,amount,(short)ItemDamage));
      }
 else {
        ((Player)user.getHandle()).getWorld().dropItem(((Player)user.getHandle()).getLocation(),new ItemStack(mat,amount,(short)ItemDamage));
      }
    }
    user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + user.getDisplayName()+ ""String_Node_Str"");
    BenCmd.log(""String_Node_Str"" + user.getDisplayName() + ""String_Node_Str""+ user.getDisplayName()+ ""String_Node_Str""+ String.valueOf(mat.getId())+ ""String_Node_Str""+ String.valueOf(fullAmount)+ ""String_Node_Str""+ String.valueOf(ItemDamage)+ ""String_Node_Str"");
  }
}","public void Item(String[] args,User user){
  if (args.length == 0 || args.length > 3) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  BCItem Item;
  if ((Item=InventoryBackend.getInstance().checkAlias(args[0])) == null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  int Amount=1;
  if (args.length >= 2) {
    try {
      Amount=Integer.parseInt(args[1]);
    }
 catch (    NumberFormatException e) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
  int fullAmount=Amount;
  List<Integer> splitamount=new ArrayList<Integer>();
  while (Amount > 0) {
    Integer maxAmount=InventoryBackend.getInstance().getStackNumber(Item.getMaterial().getId());
    if (Amount > maxAmount) {
      splitamount.add(maxAmount);
      Amount-=maxAmount;
    }
 else {
      splitamount.add(Amount);
      Amount=0;
    }
  }
  Material mat=Item.getMaterial();
  if (!BenCmd.getPermissionManager().getItemLists().canSpawn(mat,user.highestLevelGroup().getName())) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  int ItemDamage=Item.getDamage();
  if (args.length == 3) {
    User user2;
    if ((user2=User.matchUser(args[2])) == null) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[2]+ ""String_Node_Str"");
      return;
    }
    for (    Integer amount : splitamount) {
      if (((Player)user2.getHandle()).getInventory().firstEmpty() >= 0) {
        ((Player)user2.getHandle()).getInventory().addItem(new ItemStack(mat,amount,(short)ItemDamage));
      }
 else {
        ((Player)user2.getHandle()).getWorld().dropItem(((Player)user2.getHandle()).getLocation(),new ItemStack(mat,amount,(short)ItemDamage));
      }
    }
    user2.sendMessage(ChatColor.GREEN + user.getDisplayName() + ""String_Node_Str"");
    user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + user2.getColor()+ user2.getName()+ ChatColor.GREEN+ ""String_Node_Str"");
    BenCmd.log(""String_Node_Str"" + user.getDisplayName() + ""String_Node_Str""+ user2.getDisplayName()+ ""String_Node_Str""+ String.valueOf(mat.getId())+ ""String_Node_Str""+ String.valueOf(fullAmount)+ ""String_Node_Str""+ String.valueOf(ItemDamage)+ ""String_Node_Str"");
  }
 else {
    if (user.isServer()) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    for (    Integer amount : splitamount) {
      if (((Player)user.getHandle()).getInventory().firstEmpty() >= 0) {
        ((Player)user.getHandle()).getInventory().addItem(new ItemStack(mat,amount,(short)ItemDamage));
      }
 else {
        ((Player)user.getHandle()).getWorld().dropItem(((Player)user.getHandle()).getLocation(),new ItemStack(mat,amount,(short)ItemDamage));
      }
    }
    user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + user.getDisplayName()+ ""String_Node_Str"");
    BenCmd.log(""String_Node_Str"" + user.getDisplayName() + ""String_Node_Str""+ user.getDisplayName()+ ""String_Node_Str""+ String.valueOf(mat.getId())+ ""String_Node_Str""+ String.valueOf(fullAmount)+ ""String_Node_Str""+ String.valueOf(ItemDamage)+ ""String_Node_Str"");
  }
}",0.6965853658536585
179023,"@Override public void execute(Listener listener,Event event) throws EventException {
  if (event instanceof PlayerChatEvent) {
    PlayerChatEvent e=(PlayerChatEvent)event;
    chat(e);
  }
 else   if (event instanceof PlayerJoinEvent) {
    PlayerJoinEvent e=(PlayerJoinEvent)event;
    userInit(e);
  }
 else   if (event instanceof PlayerQuitEvent) {
    PlayerQuitEvent e=(PlayerQuitEvent)event;
    quitFinalize(e);
  }
 else   if (event instanceof PlayerKickEvent) {
    PlayerKickEvent e=(PlayerKickEvent)event;
    kickFinalize(e);
  }
 else   if (event instanceof PlayerInteractEvent) {
    PlayerInteractEvent e=(PlayerInteractEvent)event;
    logWand(e);
    if (e.isCancelled()) {
      return;
    }
    bookshelfInteract(e);
    spawnerEggEvent(e);
    lockInteract(e);
    disposalChestInteract(e);
    strikeBind(e);
    lotSelectInteract(e);
    chestOpenLog(e);
  }
 else   if (event instanceof PlayerBucketEmptyEvent) {
    PlayerBucketEmptyEvent e=(PlayerBucketEmptyEvent)event;
    lotBucketEmpty(e);
    jailBucketEmpty(e);
    logBucket(e);
  }
 else   if (event instanceof PlayerBucketFillEvent) {
    PlayerBucketFillEvent e=(PlayerBucketFillEvent)event;
    lotBucketFill(e);
    jailBucketFill(e);
  }
 else   if (event instanceof PlayerRespawnEvent) {
    PlayerRespawnEvent e=(PlayerRespawnEvent)event;
    pvpRespawn(e);
  }
 else   if (event instanceof PlayerPortalEvent) {
    PlayerPortalEvent e=(PlayerPortalEvent)event;
    checkPortal(e);
    flyPortal(e);
  }
 else   if (event instanceof PlayerTeleportEvent) {
    PlayerTeleportEvent e=(PlayerTeleportEvent)event;
    sendSkins(e.getPlayer(),e.getTo());
    flyTeleport(e);
  }
 else   if (event instanceof PlayerMoveEvent) {
    PlayerMoveEvent e=(PlayerMoveEvent)event;
    sendSkins(e.getPlayer(),e.getTo());
    areaMoveCheck(e);
    BenCmd.getMonitorController().playerMove(e.getPlayer());
  }
 else   if (event instanceof PlayerLoginEvent) {
    PlayerLoginEvent e=(PlayerLoginEvent)event;
    loginCheck(e);
  }
 else   if (event instanceof PlayerPickupItemEvent) {
    PlayerPickupItemEvent e=(PlayerPickupItemEvent)event;
    jailPickupCheck(e);
  }
 else   if (event instanceof PlayerDropItemEvent) {
    PlayerDropItemEvent e=(PlayerDropItemEvent)event;
    jailDropCheck(e);
  }
 else   if (event instanceof PlayerInteractEntityEvent) {
    PlayerInteractEntityEvent e=(PlayerInteractEntityEvent)event;
    npcInteractEntity(e);
  }
}","@Override public void execute(Listener listener,Event event) throws EventException {
  if (event instanceof PlayerChatEvent) {
    PlayerChatEvent e=(PlayerChatEvent)event;
    chat(e);
  }
 else   if (event instanceof PlayerJoinEvent) {
    PlayerJoinEvent e=(PlayerJoinEvent)event;
    userInit(e);
  }
 else   if (event instanceof PlayerQuitEvent) {
    PlayerQuitEvent e=(PlayerQuitEvent)event;
    quitFinalize(e);
  }
 else   if (event instanceof PlayerKickEvent) {
    PlayerKickEvent e=(PlayerKickEvent)event;
    kickFinalize(e);
  }
 else   if (event instanceof PlayerInteractEvent) {
    PlayerInteractEvent e=(PlayerInteractEvent)event;
    logWand(e);
    if (e.isCancelled()) {
      return;
    }
    bookshelfInteract(e);
    spawnerEggInteract(e);
    lockInteract(e);
    disposalChestInteract(e);
    strikeBind(e);
    lotSelectInteract(e);
    chestOpenLog(e);
  }
 else   if (event instanceof PlayerBucketEmptyEvent) {
    PlayerBucketEmptyEvent e=(PlayerBucketEmptyEvent)event;
    lotBucketEmpty(e);
    jailBucketEmpty(e);
    logBucket(e);
  }
 else   if (event instanceof PlayerBucketFillEvent) {
    PlayerBucketFillEvent e=(PlayerBucketFillEvent)event;
    lotBucketFill(e);
    jailBucketFill(e);
  }
 else   if (event instanceof PlayerRespawnEvent) {
    PlayerRespawnEvent e=(PlayerRespawnEvent)event;
    pvpRespawn(e);
  }
 else   if (event instanceof PlayerPortalEvent) {
    PlayerPortalEvent e=(PlayerPortalEvent)event;
    checkPortal(e);
    flyPortal(e);
  }
 else   if (event instanceof PlayerTeleportEvent) {
    PlayerTeleportEvent e=(PlayerTeleportEvent)event;
    sendSkins(e.getPlayer(),e.getTo());
    flyTeleport(e);
  }
 else   if (event instanceof PlayerMoveEvent) {
    PlayerMoveEvent e=(PlayerMoveEvent)event;
    sendSkins(e.getPlayer(),e.getTo());
    areaMoveCheck(e);
    BenCmd.getMonitorController().playerMove(e.getPlayer());
  }
 else   if (event instanceof PlayerLoginEvent) {
    PlayerLoginEvent e=(PlayerLoginEvent)event;
    loginCheck(e);
  }
 else   if (event instanceof PlayerPickupItemEvent) {
    PlayerPickupItemEvent e=(PlayerPickupItemEvent)event;
    jailPickupCheck(e);
  }
 else   if (event instanceof PlayerDropItemEvent) {
    PlayerDropItemEvent e=(PlayerDropItemEvent)event;
    jailDropCheck(e);
  }
 else   if (event instanceof PlayerInteractEntityEvent) {
    PlayerInteractEntityEvent e=(PlayerInteractEntityEvent)event;
    npcInteractEntity(e);
  }
}",0.99774173680969
179024,"public void onBlockBreak(BlockBreakEvent event){
  lotBreakCheck(event);
  bookshelfBreak(event);
  dcudDestroy(event);
  lockDestroyCheck(event);
  logBlockBreak(event);
  jailedDestroyCheck(event);
}","public void onBlockBreak(BlockBreakEvent event){
  if (!enabled) {
    return;
  }
  lotBreakCheck(event);
  bookshelfBreak(event);
  dcudDestroy(event);
  lockDestroyCheck(event);
  logBlockBreak(event);
  jailedDestroyCheck(event);
}",0.9220183486238532
179025,"public void onSignChange(SignChangeEvent event){
  signLog(event);
}","public void onSignChange(SignChangeEvent event){
  if (!enabled) {
    return;
  }
  signLog(event);
}",0.8
179026,"public static void destroyInstance(){
  instance=null;
}","public static void destroyInstance(){
  instance.enabled=false;
  instance=null;
}",0.8115942028985508
179027,"public void onBlockPlace(BlockPlaceEvent event){
  lotPlaceCheck(event);
  newPortalCheck(event);
  logBlockPlace(event);
  jailedPlaceCheck(event);
}","public void onBlockPlace(BlockPlaceEvent event){
  if (!enabled) {
    return;
  }
  lotPlaceCheck(event);
  newPortalCheck(event);
  logBlockPlace(event);
  jailedPlaceCheck(event);
}",0.8982035928143712
179028,"public void onBlockRedstoneChange(BlockRedstoneEvent event){
  unlDispRedstone(event);
}","public void onBlockRedstoneChange(BlockRedstoneEvent event){
  if (!enabled) {
    return;
  }
  unlDispRedstone(event);
}",0.8380952380952381
179029,"public void onBlockIgnite(BlockIgniteEvent event){
  igniteCheck(event);
}","public void onBlockIgnite(BlockIgniteEvent event){
  if (!enabled) {
    return;
  }
  igniteCheck(event);
}",0.8131868131868132
179030,"public void onBlockBurn(BlockBurnEvent event){
  burnCheck(event);
}","public void onBlockBurn(BlockBurnEvent event){
  if (!enabled) {
    return;
  }
  burnCheck(event);
}",0.8
179031,"public void onEntityDeath(EntityDeathEvent event){
  pvpDie(event);
  playerDie(event);
  mobDrop(event);
  endermanDropBlock(event);
}","public void onEntityDeath(EntityDeathEvent event){
  if (!enabled) {
    return;
  }
  pvpDie(event);
  playerDie(event);
  mobDrop(event);
  endermanDropBlock(event);
}",0.8881578947368421
179032,"public static void destroyInstance(){
  instance=null;
}","public static void destroyInstance(){
  instance.enabled=false;
  instance=null;
}",0.8115942028985508
179033,"public void onEndermanPickup(EndermanPickupEvent event){
  endermanGriefTake(event);
}","public void onEndermanPickup(EndermanPickupEvent event){
  if (!enabled) {
    return;
  }
  endermanGriefTake(event);
}",0.8349514563106796
179034,"public void onEntityTarget(EntityTargetEvent event){
  endermanPassive(event);
  creeperPassive(event);
}","public void onEntityTarget(EntityTargetEvent event){
  if (!enabled) {
    return;
  }
  endermanPassive(event);
  creeperPassive(event);
}",0.860655737704918
179035,"public void onExplosionPrime(ExplosionPrimeEvent event){
  tntExplode(event);
}","public void onExplosionPrime(ExplosionPrimeEvent event){
  if (!enabled) {
    return;
  }
  tntExplode(event);
}",0.8229166666666666
179036,"public void onEndermanPlace(EndermanPlaceEvent event){
  endermanGriefPlace(event);
}","public void onEndermanPlace(EndermanPlaceEvent event){
  if (!enabled) {
    return;
  }
  endermanGriefPlace(event);
}",0.8333333333333334
179037,"public static void destroyInstance(){
  instance=null;
}","public static void destroyInstance(){
  instance.enabled=false;
  instance=null;
}",0.8115942028985508
179038,"public void onInventoryCraft(InventoryCraftEvent event){
  User user=User.getUser(event.getPlayer());
  Material m=event.getResult().getType();
  if (user.hasPerm(""String_Node_Str"" + m.getId(),false) && !user.hasPerm(""String_Node_Str"")) {
    if (BenCmd.getSpoutConnector().enabled(event.getPlayer())) {
      BenCmd.getSpoutConnector().sendNotification(event.getPlayer(),""String_Node_Str"",""String_Node_Str"",m);
    }
 else {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
}","public void onInventoryCraft(InventoryCraftEvent event){
  if (!enabled) {
    return;
  }
  User user=User.getUser(event.getPlayer());
  Material m=event.getResult().getType();
  if (user.hasPerm(""String_Node_Str"" + m.getId(),false) && !user.hasPerm(""String_Node_Str"")) {
    if (BenCmd.getSpoutConnector().enabled(event.getPlayer())) {
      BenCmd.getSpoutConnector().sendNotification(event.getPlayer(),""String_Node_Str"",""String_Node_Str"",m);
    }
 else {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
}",0.972312703583062
179039,"public void onPlayerKick(PlayerKickEvent event){
  kickFinalize(event);
}","public void onPlayerKick(PlayerKickEvent event){
  if (!enabled) {
    return;
  }
  kickFinalize(event);
}",0.8111111111111111
179040,"public void onPlayerQuit(PlayerQuitEvent event){
  quitFinalize(event);
}","public void onPlayerQuit(PlayerQuitEvent event){
  if (!enabled) {
    return;
  }
  quitFinalize(event);
}",0.8111111111111111
179041,"public void onPlayerTeleport(PlayerTeleportEvent event){
  sendSkins(event.getPlayer(),event.getTo());
  flyTeleport(event);
}","public void onPlayerTeleport(PlayerTeleportEvent event){
  if (!enabled) {
    return;
  }
  sendSkins(event.getPlayer(),event.getTo());
  flyTeleport(event);
}",0.8811188811188811
179042,"public void onPlayerBucketEmpty(PlayerBucketEmptyEvent event){
  lotBucketEmpty(event);
  jailBucketEmpty(event);
  logBucket(event);
}","public void onPlayerBucketEmpty(PlayerBucketEmptyEvent event){
  if (!enabled) {
    return;
  }
  lotBucketEmpty(event);
  jailBucketEmpty(event);
  logBucket(event);
}",0.8881578947368421
179043,"public void onPlayerMove(PlayerMoveEvent event){
  sendSkins(event.getPlayer(),event.getTo());
  areaMoveCheck(event);
}","public void onPlayerMove(PlayerMoveEvent event){
  if (!enabled) {
    return;
  }
  sendSkins(event.getPlayer(),event.getTo());
  areaMoveCheck(event);
}",0.8759124087591241
179044,"public void onPlayerChat(PlayerChatEvent event){
  chat(event);
}","public void onPlayerChat(PlayerChatEvent event){
  if (!enabled) {
    return;
  }
  chat(event);
}",0.7926829268292683
179045,"public void onPlayerLogin(PlayerLoginEvent event){
  loginCheck(event);
}","public void onPlayerLogin(PlayerLoginEvent event){
  if (!enabled) {
    return;
  }
  loginCheck(event);
}",0.8111111111111111
179046,"public void onPlayerBucketFill(PlayerBucketFillEvent event){
  lotBucketFill(event);
  jailBucketFill(event);
}","public void onPlayerBucketFill(PlayerBucketFillEvent event){
  if (!enabled) {
    return;
  }
  lotBucketFill(event);
  jailBucketFill(event);
}",0.8671875
179047,"public static void destroyInstance(){
  instance=null;
}","public static void destroyInstance(){
  instance.enabled=false;
  instance=null;
}",0.8115942028985508
179048,"public void onPlayerInteract(PlayerInteractEvent event){
  logWand(event);
  if (event.isCancelled()) {
    return;
  }
  bookshelfInteract(event);
  lockInteract(event);
  disposalChestInteract(event);
  strikeBind(event);
  lotSelectInteract(event);
  chestOpenLog(event);
}","public void onPlayerInteract(PlayerInteractEvent event){
  if (!enabled) {
    return;
  }
  logWand(event);
  if (event.isCancelled()) {
    return;
  }
  bookshelfInteract(event);
  lockInteract(event);
  disposalChestInteract(event);
  strikeBind(event);
  lotSelectInteract(event);
  chestOpenLog(event);
}",0.9419795221843004
179049,"public void onPlayerDropItem(PlayerDropItemEvent event){
  jailDropCheck(event);
}","public void onPlayerDropItem(PlayerDropItemEvent event){
  if (!enabled) {
    return;
  }
  jailDropCheck(event);
}",0.8282828282828283
179050,"public void onPlayerJoin(PlayerJoinEvent event){
  userInit(event);
}","public void onPlayerJoin(PlayerJoinEvent event){
  if (!enabled) {
    return;
  }
  userInit(event);
}",0.8023255813953488
179051,"public void onPlayerRespawn(PlayerRespawnEvent event){
  pvpRespawn(event);
}","public void onPlayerRespawn(PlayerRespawnEvent event){
  if (!enabled) {
    return;
  }
  pvpRespawn(event);
}",0.8191489361702128
179052,"public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  npcInteractEntity(event);
}","public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  if (!enabled) {
    return;
  }
  npcInteractEntity(event);
}",0.8521739130434782
179053,"public void onPlayerPortal(PlayerPortalEvent event){
  checkPortal(event);
  flyPortal(event);
}","public void onPlayerPortal(PlayerPortalEvent event){
  if (!enabled) {
    return;
  }
  checkPortal(event);
  flyPortal(event);
}",0.8495575221238938
179054,"public void onPlayerPickupItem(PlayerPickupItemEvent event){
  jailPickupCheck(event);
}","public void onPlayerPickupItem(PlayerPickupItemEvent event){
  if (!enabled) {
    return;
  }
  jailPickupCheck(event);
}",0.8380952380952381
179055,"public static void destroyInstance(){
  instance=null;
}","public static void destroyInstance(){
  instance.enabled=false;
  instance=null;
}",0.8115942028985508
179056,"public void onButtonClick(ButtonClickEvent event){
  buttonNPC(event);
  buttonStatus(event);
}","public void onButtonClick(ButtonClickEvent event){
  if (!enabled) {
    return;
  }
  buttonNPC(event);
  buttonStatus(event);
}",0.8482142857142857
179057,"@Override public void onSpoutCraftEnable(SpoutCraftEnableEvent event){
  SpoutPlayer p=SpoutManager.getPlayer(event.getPlayer());
  if (p.isSpoutCraftEnabled()) {
    for (    NPC n : BenCmd.getNPCFile().allNPCs()) {
      if (n.isSpawned()) {
        p.sendPacket(new PacketSkinURL(n.getEntityId(),n.getSkinURL()));
      }
    }
  }
}","@Override public void onSpoutCraftEnable(SpoutCraftEnableEvent event){
  if (!enabled) {
    return;
  }
  SpoutPlayer p=SpoutManager.getPlayer(event.getPlayer());
  if (p.isSpoutCraftEnabled()) {
    for (    NPC n : BenCmd.getNPCFile().allNPCs()) {
      if (n.isSpawned()) {
        p.sendPacket(new PacketSkinURL(n.getEntityId(),n.getSkinURL()));
      }
    }
  }
}",0.9518413597733713
179058,"public static void destroyInstance(){
  instance=null;
}","public static void destroyInstance(){
  instance.enabled=false;
  instance=null;
}",0.8115942028985508
179059,"public void onChunkLoad(ChunkLoadEvent event){
  for (  NPC npc : BenCmd.getNPCFile().inChunk(event.getChunk())) {
    npc.spawn();
  }
}","public void onChunkLoad(ChunkLoadEvent event){
  if (!enabled) {
    return;
  }
  for (  NPC npc : BenCmd.getNPCFile().inChunk(event.getChunk())) {
    npc.spawn();
  }
}",0.8896103896103896
179060,"public static void destroyInstance(){
  instance=null;
}","public static void destroyInstance(){
  instance.enabled=false;
  instance=null;
}",0.8115942028985508
179061,"public void onChunkUnload(ChunkUnloadEvent event){
  if (event.isCancelled()) {
    return;
  }
  for (  NPC npc : BenCmd.getNPCFile().inChunk(event.getChunk())) {
    npc.despawn();
  }
}","public void onChunkUnload(ChunkUnloadEvent event){
  if (!enabled) {
    return;
  }
  if (event.isCancelled()) {
    return;
  }
  for (  NPC npc : BenCmd.getNPCFile().inChunk(event.getChunk())) {
    npc.despawn();
  }
}",0.9170731707317074
179062,"public void onWorldLoad(WorldLoadEvent event){
  BenCmd.getNPCFile().reloadNPCs();
}","public void onWorldLoad(WorldLoadEvent event){
  if (!enabled) {
    return;
  }
  BenCmd.getNPCFile().reloadNPCs();
}",0.8316831683168316
179063,"public void onWorldUnload(WorldUnloadEvent event){
  BenCmd.getNPCFile().reloadNPCs();
}","public void onWorldUnload(WorldUnloadEvent event){
  if (!enabled) {
    return;
  }
  BenCmd.getNPCFile().reloadNPCs();
}",0.8380952380952381
179064,"public boolean withinLot(Location loc){
  if (this.DISABLED) {
    return false;
  }
  if (this.GLOBALLOT) {
    return true;
  }
  if (this.getWorld() != loc.getWorld()) {
    return false;
  }
  if (BenCmd.getLots().isBetween(corner1.getBlockX(),loc.getBlockX(),corner2.getBlockX()) && BenCmd.getLots().isBetween(corner1.getBlockZ(),loc.getBlockZ(),corner2.getBlockZ()) && BenCmd.getLots().isBetween(corner1.getBlockY(),loc.getBlockY(),corner2.getBlockY())) {
    return true;
  }
 else   return false;
}","public boolean withinLot(Location loc){
  if (this.DISABLED) {
    return false;
  }
  if (this.GLOBALLOT && loc.getWorld() == World) {
    return true;
  }
  if (this.getWorld() != loc.getWorld()) {
    return false;
  }
  if (BenCmd.getLots().isBetween(corner1.getBlockX(),loc.getBlockX(),corner2.getBlockX()) && BenCmd.getLots().isBetween(corner1.getBlockZ(),loc.getBlockZ(),corner2.getBlockZ()) && BenCmd.getLots().isBetween(corner1.getBlockY(),loc.getBlockY(),corner2.getBlockY())) {
    return true;
  }
 else   return false;
}",0.9740134744947064
179065,"public boolean LoadHomes(){
  warpString.clear();
  warps.clear();
  File warpFile;
  warpFile=new File(BenCmd.propDir + ""String_Node_Str"");
  String str=""String_Node_Str"";
  BufferedReader br;
  try {
    br=new BufferedReader(new InputStreamReader(new FileInputStream(warpFile)));
  }
 catch (  FileNotFoundException e) {
    BenCmd.log(Level.WARNING,""String_Node_Str"");
    try {
      warpFile.createNewFile();
      br=new BufferedReader(new InputStreamReader(new FileInputStream(warpFile)));
    }
 catch (    IOException ex) {
      BenCmd.log(Level.SEVERE,""String_Node_Str"");
      BenCmd.log(ex);
      return false;
    }
  }
  try {
    while ((str=br.readLine()) != null) {
      try {
        warpString.add(str);
        String name=str.split(""String_Node_Str"")[0];
        double x=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[0]);
        double y=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[1]);
        double z=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[2]);
        double yaw;
        double pitch;
        try {
          yaw=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[3]);
          pitch=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[4]);
        }
 catch (        IndexOutOfBoundsException e) {
          yaw=0;
          pitch=0;
        }
        String world=str.split(""String_Node_Str"")[2];
        String group=""String_Node_Str"";
        if (str.split(""String_Node_Str"").length == 4) {
          group=str.split(""String_Node_Str"")[3];
        }
        warps.put(name,new Warp(x,y,z,yaw,pitch,world,name,group));
      }
 catch (      IndexOutOfBoundsException e) {
        BenCmd.log(Level.WARNING,""String_Node_Str"");
        BenCmd.log(e);
      }
catch (      NumberFormatException e) {
        BenCmd.log(Level.WARNING,""String_Node_Str"");
        BenCmd.log(e);
      }
    }
    br.close();
  }
 catch (  IOException e) {
    BenCmd.log(Level.SEVERE,""String_Node_Str"");
    BenCmd.log(e);
    return false;
  }
  return true;
}","public boolean LoadHomes(){
  warpString.clear();
  warps.clear();
  File warpFile;
  warpFile=new File(BenCmd.propDir + ""String_Node_Str"");
  String str=""String_Node_Str"";
  BufferedReader br;
  try {
    br=new BufferedReader(new InputStreamReader(new FileInputStream(warpFile)));
  }
 catch (  FileNotFoundException e) {
    BenCmd.log(Level.WARNING,""String_Node_Str"");
    try {
      warpFile.createNewFile();
      br=new BufferedReader(new InputStreamReader(new FileInputStream(warpFile)));
    }
 catch (    IOException ex) {
      BenCmd.log(Level.SEVERE,""String_Node_Str"");
      BenCmd.log(ex);
      return false;
    }
  }
  try {
    while ((str=br.readLine()) != null) {
      try {
        warpString.add(str);
        String name=str.split(""String_Node_Str"")[0];
        double x=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[0]);
        double y=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[1]);
        double z=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[2]);
        double yaw;
        double pitch;
        try {
          yaw=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[3]);
          pitch=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[4]);
        }
 catch (        IndexOutOfBoundsException e) {
          yaw=0;
          pitch=0;
        }
        String world=str.split(""String_Node_Str"")[2];
        String group=""String_Node_Str"";
        if (str.split(""String_Node_Str"").length == 4) {
          group=str.split(""String_Node_Str"")[3];
        }
        if (Bukkit.getWorld(world) != null) {
          warps.put(name,new Warp(x,y,z,yaw,pitch,world,name,group));
        }
      }
 catch (      IndexOutOfBoundsException e) {
        BenCmd.log(Level.WARNING,""String_Node_Str"");
        BenCmd.log(e);
      }
catch (      NumberFormatException e) {
        BenCmd.log(Level.WARNING,""String_Node_Str"");
        BenCmd.log(e);
      }
    }
    br.close();
  }
 catch (  IOException e) {
    BenCmd.log(Level.SEVERE,""String_Node_Str"");
    BenCmd.log(e);
    return false;
  }
  return true;
}",0.9865116279069768
179066,"public boolean LoadWarps(){
  warpString.clear();
  warps.clear();
  File warpFile;
  warpFile=new File(BenCmd.propDir + ""String_Node_Str"");
  String str=""String_Node_Str"";
  BufferedReader br;
  try {
    br=new BufferedReader(new InputStreamReader(new FileInputStream(warpFile)));
  }
 catch (  FileNotFoundException e) {
    BenCmd.log(Level.WARNING,""String_Node_Str"");
    try {
      warpFile.createNewFile();
      br=new BufferedReader(new InputStreamReader(new FileInputStream(warpFile)));
    }
 catch (    IOException ex) {
      BenCmd.log(Level.SEVERE,""String_Node_Str"");
      BenCmd.log(ex);
      return false;
    }
  }
  try {
    while ((str=br.readLine()) != null) {
      try {
        warpString.add(str);
        String name=str.split(""String_Node_Str"")[0];
        double x=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[0]);
        double y=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[1]);
        double z=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[2]);
        double yaw;
        double pitch;
        try {
          yaw=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[3]);
          pitch=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[4]);
        }
 catch (        IndexOutOfBoundsException e) {
          yaw=0;
          pitch=0;
        }
        String world=str.split(""String_Node_Str"")[2];
        String group=""String_Node_Str"";
        if (str.split(""String_Node_Str"").length == 4) {
          group=str.split(""String_Node_Str"")[3];
        }
        warps.put(name,new Warp(x,y,z,yaw,pitch,world,name,group));
      }
 catch (      IndexOutOfBoundsException e) {
        BenCmd.log(Level.WARNING,""String_Node_Str"");
        BenCmd.log(e);
      }
catch (      NumberFormatException e) {
        BenCmd.log(Level.WARNING,""String_Node_Str"");
        BenCmd.log(e);
      }
    }
    br.close();
  }
 catch (  IOException e) {
    BenCmd.log(Level.SEVERE,""String_Node_Str"");
    BenCmd.log(e);
    return false;
  }
  return true;
}","public boolean LoadWarps(){
  warpString.clear();
  warps.clear();
  File warpFile;
  warpFile=new File(BenCmd.propDir + ""String_Node_Str"");
  String str=""String_Node_Str"";
  BufferedReader br;
  try {
    br=new BufferedReader(new InputStreamReader(new FileInputStream(warpFile)));
  }
 catch (  FileNotFoundException e) {
    BenCmd.log(Level.WARNING,""String_Node_Str"");
    try {
      warpFile.createNewFile();
      br=new BufferedReader(new InputStreamReader(new FileInputStream(warpFile)));
    }
 catch (    IOException ex) {
      BenCmd.log(Level.SEVERE,""String_Node_Str"");
      BenCmd.log(ex);
      return false;
    }
  }
  try {
    while ((str=br.readLine()) != null) {
      try {
        warpString.add(str);
        String name=str.split(""String_Node_Str"")[0];
        double x=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[0]);
        double y=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[1]);
        double z=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[2]);
        double yaw;
        double pitch;
        try {
          yaw=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[3]);
          pitch=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[4]);
        }
 catch (        IndexOutOfBoundsException e) {
          yaw=0;
          pitch=0;
        }
        String world=str.split(""String_Node_Str"")[2];
        String group=""String_Node_Str"";
        if (str.split(""String_Node_Str"").length == 4) {
          group=str.split(""String_Node_Str"")[3];
        }
        if (Bukkit.getWorld(world) != null) {
          warps.put(name,new Warp(x,y,z,yaw,pitch,world,name,group));
        }
      }
 catch (      IndexOutOfBoundsException e) {
        BenCmd.log(Level.WARNING,""String_Node_Str"");
        BenCmd.log(e);
      }
catch (      NumberFormatException e) {
        BenCmd.log(Level.WARNING,""String_Node_Str"");
        BenCmd.log(e);
      }
    }
    br.close();
  }
 catch (  IOException e) {
    BenCmd.log(Level.SEVERE,""String_Node_Str"");
    BenCmd.log(e);
    return false;
  }
  return true;
}",0.9865116279069768
179067,"public Lot(String key,String value) throws NumberFormatException {
  World=Bukkit.getWorld(value.split(""String_Node_Str"")[3]);
  if (World == null) {
    DISABLED=true;
    originalWorld=value.split(""String_Node_Str"")[3];
    World=Bukkit.getWorlds().get(0);
  }
  LotID=key.split(""String_Node_Str"")[0];
  SubID=key.split(""String_Node_Str"")[1];
  FullID=key;
  corner1=new Location(World,Double.parseDouble(value.split(""String_Node_Str"")[0]),Integer.parseInt(value.split(""String_Node_Str"")[1]),Integer.parseInt(value.split(""String_Node_Str"")[2]));
  corner2=new Location(World,Integer.parseInt(value.split(""String_Node_Str"")[4]),Integer.parseInt(value.split(""String_Node_Str"")[5]),Integer.parseInt(value.split(""String_Node_Str"")[6]));
  if (corner1.getX() == 1.1) {
    GLOBALLOT=true;
  }
  if (SubID.equalsIgnoreCase(""String_Node_Str"")) {
    owner=value.split(""String_Node_Str"")[8];
    group=value.split(""String_Node_Str"")[9];
    guests=new ArrayList<String>();
    int i=10;
    while (i < value.split(""String_Node_Str"").length) {
      guests.add(value.split(""String_Node_Str"")[i]);
      i++;
    }
  }
}","public Lot(String key,String value) throws NumberFormatException {
  World=Bukkit.getWorld(value.split(""String_Node_Str"")[3]);
  if (World == null) {
    DISABLED=true;
    originalWorld=value.split(""String_Node_Str"")[3];
    World=Bukkit.getWorlds().get(0);
  }
  LotID=key.split(""String_Node_Str"")[0];
  SubID=key.split(""String_Node_Str"")[1];
  FullID=key;
  corner1=new Location(World,Double.parseDouble(value.split(""String_Node_Str"")[0]),Double.parseDouble(value.split(""String_Node_Str"")[1]),Double.parseDouble(value.split(""String_Node_Str"")[2]));
  corner2=new Location(World,Double.parseDouble(value.split(""String_Node_Str"")[4]),Double.parseDouble(value.split(""String_Node_Str"")[5]),Double.parseDouble(value.split(""String_Node_Str"")[6]));
  if (corner1.getX() == 1.1) {
    GLOBALLOT=true;
  }
  if (SubID.equalsIgnoreCase(""String_Node_Str"")) {
    owner=value.split(""String_Node_Str"")[8];
    group=value.split(""String_Node_Str"")[9];
    guests=new ArrayList<String>();
    int i=10;
    while (i < value.split(""String_Node_Str"").length) {
      guests.add(value.split(""String_Node_Str"")[i]);
      i++;
    }
  }
}",0.9239033124440466
179068,"public void saveLot(Lot lot,boolean saveFile){
  Location corner1, corner2;
  corner1=lot.getCorner1();
  corner2=lot.getCorner2();
  String LotID=lot.getFullID();
  String value=""String_Node_Str"";
  value+=corner1.getX() + ""String_Node_Str"";
  value+=corner1.getY() + ""String_Node_Str"";
  value+=corner1.getZ() + ""String_Node_Str"";
  if (lot.DISABLED) {
    value+=lot.originalWorld + ""String_Node_Str"";
  }
 else {
    value+=lot.World.getName() + ""String_Node_Str"";
  }
  value+=corner2.getX() + ""String_Node_Str"";
  value+=corner2.getY() + ""String_Node_Str"";
  value+=corner2.getZ() + ""String_Node_Str"";
  if (lot.DISABLED) {
    value+=lot.originalWorld + ""String_Node_Str"";
  }
 else {
    value+=lot.World.getName() + ""String_Node_Str"";
  }
  if (lot.getSubID().equalsIgnoreCase(""String_Node_Str"")) {
    String owner=lot.getOwner();
    String group=lot.getLotGroup();
    List<String> guests=lot.guests;
    value+=""String_Node_Str"" + owner + ""String_Node_Str"";
    value+=group;
    int i=0;
    while (i < guests.size()) {
      value+=""String_Node_Str"" + guests.get(i);
      i++;
    }
  }
  getFile().put(LotID,value);
  if (saveFile)   saveFile();
}","public void saveLot(Lot lot,boolean saveFile){
  Location corner1, corner2;
  corner1=lot.getCorner1();
  corner2=lot.getCorner2();
  String LotID=lot.getFullID();
  String value=""String_Node_Str"";
  value+=corner1.getX() + ""String_Node_Str"";
  value+=corner1.getY() + ""String_Node_Str"";
  value+=corner1.getZ() + ""String_Node_Str"";
  if (lot.DISABLED) {
    value+=lot.originalWorld + ""String_Node_Str"";
  }
 else {
    value+=lot.World.getName() + ""String_Node_Str"";
  }
  value+=corner2.getX() + ""String_Node_Str"";
  value+=corner2.getY() + ""String_Node_Str"";
  value+=corner2.getZ() + ""String_Node_Str"";
  if (lot.DISABLED) {
    value+=lot.originalWorld;
  }
 else {
    value+=lot.World.getName();
  }
  if (lot.getSubID().equalsIgnoreCase(""String_Node_Str"")) {
    String owner=lot.getOwner();
    String group=lot.getLotGroup();
    List<String> guests=lot.guests;
    value+=""String_Node_Str"" + owner + ""String_Node_Str"";
    value+=group;
    int i=0;
    while (i < guests.size()) {
      value+=""String_Node_Str"" + guests.get(i);
      i++;
    }
  }
  getFile().put(LotID,value);
  if (saveFile)   saveFile();
}",0.9825174825174824
179069,"public void trimToLastHour(){
  for (  RecordEntry e : entries) {
    if (new Date().getTime() - e.getTime() > 60000) {
      entries.remove(e);
    }
  }
}","public void trimToLastHour(){
  for (  RecordEntry e : entries) {
    if (new Date().getTime() - e.getTime() > 3600000) {
      entries.remove(e);
    }
  }
}",0.9936305732484076
179070,"public void showNPCScreen(Player p,NPC n){
  User u=User.getUser(p);
  NPCScreen infoscr=new NPCScreen();
  InGameHUD mainscr=SpoutManager.getPlayer(p).getMainScreen();
  infoscr.npc=n;
  GenericLabel idlabel=new GenericLabel();
  idlabel.setText(""String_Node_Str"").setX(10).setY(20).setWidth(40).setHeight(12);
  infoscr.attachWidget(BenCmd.getPlugin(),idlabel);
  GenericLabel idlabel2=new GenericLabel();
  idlabel2.setText(String.valueOf(n.getID())).setTextColor(new Color(50F / 255F,1F,50F / 255F)).setX(65).setY(20).setWidth(100).setHeight(12);
  infoscr.attachWidget(BenCmd.getPlugin(),idlabel2);
  GenericLabel typelabel=new GenericLabel();
  typelabel.setText(""String_Node_Str"").setX(10).setY(40).setWidth(40).setHeight(12);
  infoscr.attachWidget(BenCmd.getPlugin(),typelabel);
  GenericLabel typelabel2=new GenericLabel();
  String text;
  if (n instanceof BankerNPC) {
    text=""String_Node_Str"";
  }
 else   if (n instanceof BankManagerNPC) {
    text=""String_Node_Str"";
  }
 else   if (n instanceof BlacksmithNPC) {
    text=""String_Node_Str"";
  }
 else   if (n instanceof StaticNPC) {
    text=""String_Node_Str"";
  }
 else {
    text=""String_Node_Str"";
  }
  typelabel2.setText(text).setTextColor(new Color(50F / 255F,50F / 255F,1F)).setX(65).setY(40).setWidth(100).setHeight(12);
  infoscr.attachWidget(BenCmd.getPlugin(),typelabel2);
  GenericTextField namefield=new GenericTextField();
  namefield.setText(n.getName()).setMaximumCharacters(20).setEnabled(n instanceof Skinnable && u.hasPerm(""String_Node_Str"")).setX(65).setY(60).setWidth(200).setHeight(12);
  infoscr.attachWidget(BenCmd.getPlugin(),namefield);
  infoscr.name=namefield;
  GenericLabel namelabel=new GenericLabel();
  namelabel.setText(""String_Node_Str"").setX(10).setY(60).setWidth(40).setHeight(12);
  infoscr.attachWidget(BenCmd.getPlugin(),namelabel);
  GenericTextField skinfield=new GenericTextField();
  skinfield.setText(n.getSkinURL()).setMaximumCharacters(500).setEnabled(n instanceof Skinnable && u.hasPerm(""String_Node_Str"")).setX(65).setY(80).setWidth(350).setHeight(12);
  infoscr.attachWidget(BenCmd.getPlugin(),skinfield);
  infoscr.skin=skinfield;
  GenericLabel skinlabel=new GenericLabel();
  skinlabel.setText(""String_Node_Str"").setX(10).setY(80).setWidth(40).setHeight(12);
  infoscr.attachWidget(BenCmd.getPlugin(),skinlabel);
  GenericLabel itemlabel=new GenericLabel();
  itemlabel.setText(""String_Node_Str"").setX(10).setY(105).setWidth(40).setHeight(12);
  infoscr.attachWidget(BenCmd.getPlugin(),itemlabel);
  GenericItemWidget itemimage=new GenericItemWidget();
  itemimage.setTypeId(n.getHeldItem().getTypeId()).setDepth(16).setData(n.getHeldItem().getDurability()).setX(65).setY(100).setWidth(16).setHeight(16);
  infoscr.attachWidget(BenCmd.getPlugin(),itemimage);
  infoscr.item=itemimage;
  GenericButton idownbutton=new GenericButton();
  idownbutton.setEnabled((n instanceof Skinnable) && u.hasPerm(""String_Node_Str""));
  idownbutton.setText(""String_Node_Str"").setX(90).setY(110).setWidth(12).setHeight(10);
  infoscr.attachWidget(BenCmd.getPlugin(),idownbutton);
  infoscr.idown=idownbutton;
  GenericButton iupbutton=new GenericButton();
  iupbutton.setEnabled((n instanceof Skinnable) && u.hasPerm(""String_Node_Str""));
  iupbutton.setText(""String_Node_Str"").setX(90).setY(100).setWidth(12).setHeight(10);
  infoscr.attachWidget(BenCmd.getPlugin(),iupbutton);
  infoscr.iup=iupbutton;
  GenericButton applybutton=new GenericButton();
  applybutton.setEnabled((n instanceof Skinnable) && u.hasPerm(""String_Node_Str""));
  applybutton.setText(""String_Node_Str"").setY(210).setX(325).setWidth(40).setHeight(20);
  infoscr.attachWidget(BenCmd.getPlugin(),applybutton);
  infoscr.apply=applybutton;
  GenericButton okbutton=new GenericButton();
  okbutton.setEnabled((n instanceof Skinnable) && u.hasPerm(""String_Node_Str""));
  okbutton.setText(""String_Node_Str"").setY(210).setX(275).setWidth(40).setHeight(20);
  infoscr.attachWidget(BenCmd.getPlugin(),okbutton);
  infoscr.ok=okbutton;
  GenericButton cancelbutton=new GenericButton();
  cancelbutton.setText(""String_Node_Str"").setY(210).setX(375).setWidth(40).setHeight(20);
  infoscr.attachWidget(BenCmd.getPlugin(),cancelbutton);
  infoscr.cancel=cancelbutton;
  infoscr.setBgVisible(true);
  mainscr.attachPopupScreen(infoscr);
}","public void showNPCScreen(Player p,NPC n){
  User u=User.getUser(p);
  NPCScreen infoscr=new NPCScreen();
  InGameHUD mainscr=SpoutManager.getPlayer(p).getMainScreen();
  infoscr.npc=n;
  GenericLabel idlabel=new GenericLabel();
  idlabel.setText(""String_Node_Str"").setX(10).setY(20).setWidth(40).setHeight(12);
  infoscr.attachWidget(BenCmd.getPlugin(),idlabel);
  GenericLabel idlabel2=new GenericLabel();
  idlabel2.setText(String.valueOf(n.getID())).setTextColor(new Color(50F / 255F,1F,50F / 255F)).setX(65).setY(20).setWidth(100).setHeight(12);
  infoscr.attachWidget(BenCmd.getPlugin(),idlabel2);
  GenericLabel typelabel=new GenericLabel();
  typelabel.setText(""String_Node_Str"").setX(10).setY(40).setWidth(40).setHeight(12);
  infoscr.attachWidget(BenCmd.getPlugin(),typelabel);
  GenericLabel typelabel2=new GenericLabel();
  String text;
  if (n instanceof BankerNPC) {
    text=""String_Node_Str"";
  }
 else   if (n instanceof BankManagerNPC) {
    text=""String_Node_Str"";
  }
 else   if (n instanceof BlacksmithNPC) {
    text=""String_Node_Str"";
  }
 else   if (n instanceof StaticNPC) {
    text=""String_Node_Str"";
  }
 else {
    text=""String_Node_Str"";
  }
  typelabel2.setText(text).setTextColor(new Color(50F / 255F,50F / 255F,1F)).setX(65).setY(40).setWidth(100).setHeight(12);
  infoscr.attachWidget(BenCmd.getPlugin(),typelabel2);
  GenericTextField namefield=new GenericTextField();
  namefield.setText(n.getName()).setMaximumCharacters(20).setEnabled(n instanceof Skinnable && u.hasPerm(""String_Node_Str"")).setX(65).setY(60).setWidth(200).setHeight(12);
  infoscr.attachWidget(BenCmd.getPlugin(),namefield);
  infoscr.name=namefield;
  GenericLabel namelabel=new GenericLabel();
  namelabel.setText(""String_Node_Str"").setX(10).setY(60).setWidth(40).setHeight(12);
  infoscr.attachWidget(BenCmd.getPlugin(),namelabel);
  GenericTextField skinfield=new GenericTextField();
  skinfield.setText(n.getSkinURL()).setMaximumCharacters(500).setEnabled(n instanceof Skinnable && u.hasPerm(""String_Node_Str"")).setX(65).setY(80).setWidth(350).setHeight(12);
  infoscr.attachWidget(BenCmd.getPlugin(),skinfield);
  infoscr.skin=skinfield;
  GenericLabel skinlabel=new GenericLabel();
  skinlabel.setText(""String_Node_Str"").setX(10).setY(80).setWidth(40).setHeight(12);
  infoscr.attachWidget(BenCmd.getPlugin(),skinlabel);
  GenericLabel itemlabel=new GenericLabel();
  itemlabel.setText(""String_Node_Str"").setX(10).setY(105).setWidth(40).setHeight(12);
  infoscr.attachWidget(BenCmd.getPlugin(),itemlabel);
  GenericItemWidget itemimage=new GenericItemWidget();
  itemimage.setTypeId(n.getHeldItem().getTypeId()).setDepth(16).setData(n.getHeldItem().getDurability()).setX(65).setY(100).setWidth(16).setHeight(16);
  infoscr.attachWidget(BenCmd.getPlugin(),itemimage);
  infoscr.item=itemimage;
  GenericButton idownbutton=new GenericButton();
  idownbutton.setEnabled((n instanceof Skinnable) && u.hasPerm(""String_Node_Str""));
  idownbutton.setText(""String_Node_Str"").setX(90).setY(110).setWidth(12).setHeight(10);
  infoscr.attachWidget(BenCmd.getPlugin(),idownbutton);
  infoscr.idown=idownbutton;
  GenericButton iupbutton=new GenericButton();
  iupbutton.setEnabled((n instanceof Skinnable) && u.hasPerm(""String_Node_Str""));
  iupbutton.setText(""String_Node_Str"").setX(90).setY(100).setWidth(12).setHeight(10);
  infoscr.attachWidget(BenCmd.getPlugin(),iupbutton);
  infoscr.iup=iupbutton;
  GenericButton applybutton=new GenericButton();
  applybutton.setEnabled((n instanceof Skinnable) && u.hasPerm(""String_Node_Str""));
  applybutton.setText(""String_Node_Str"").setY(210).setX(325).setWidth(40).setHeight(20);
  infoscr.attachWidget(BenCmd.getPlugin(),applybutton);
  infoscr.apply=applybutton;
  GenericButton okbutton=new GenericButton();
  okbutton.setEnabled((n instanceof Skinnable) && u.hasPerm(""String_Node_Str""));
  okbutton.setText(""String_Node_Str"").setY(210).setX(275).setWidth(40).setHeight(20);
  infoscr.attachWidget(BenCmd.getPlugin(),okbutton);
  infoscr.ok=okbutton;
  GenericButton cancelbutton=new GenericButton();
  cancelbutton.setText(""String_Node_Str"").setY(210).setX(375).setWidth(40).setHeight(20);
  infoscr.attachWidget(BenCmd.getPlugin(),cancelbutton);
  infoscr.cancel=cancelbutton;
  mainscr.attachPopupScreen(infoscr);
}",0.9964977819285548
179071,"public static void faceLocation(EntityNPC enpc,Vec3D loc2){
  Location loc=enpc.getBukkitEntity().getLocation();
  double xDiff=loc2.a - loc.getX();
  double yDiff=loc2.b - loc.getY();
  double zDiff=loc2.c - loc.getZ();
  double DistanceXZ=Math.sqrt(xDiff * xDiff + zDiff * zDiff);
  double DistanceY=Math.sqrt(DistanceXZ * DistanceXZ + yDiff * yDiff);
  double yaw=(Math.acos(xDiff / DistanceXZ) * 180 / Math.PI);
  double pitch=(Math.acos(yDiff / DistanceY) * 180 / Math.PI) - 90;
  if (zDiff < 0.0) {
    yaw=yaw + (Math.abs(180 - yaw) * 2);
  }
  enpc.setLocation(loc.getX(),loc.getY(),loc.getZ(),(float)yaw - 90,(float)pitch);
}","public static void faceLocation(EntityNPC enpc,Vec3D loc2){
  Location loc=new Location(enpc.world.getWorld(),enpc.locX,enpc.locY,enpc.locZ);
  double xDiff=loc2.a - loc.getX();
  double yDiff=loc2.b - loc.getY();
  double zDiff=loc2.c - loc.getZ();
  double DistanceXZ=Math.sqrt(xDiff * xDiff + zDiff * zDiff);
  double DistanceY=Math.sqrt(DistanceXZ * DistanceXZ + yDiff * yDiff);
  double yaw=(Math.acos(xDiff / DistanceXZ) * 180 / Math.PI);
  double pitch=(Math.acos(yDiff / DistanceY) * 180 / Math.PI) - 90;
  if (zDiff < 0.0) {
    yaw=yaw + (Math.abs(180 - yaw) * 2);
  }
  yaw-=90;
  enpc.yaw=(float)yaw;
  enpc.pitch=(float)pitch;
}",0.8266666666666667
179072,"public LargeBankInventory(BankInventory inv1){
  super(inv1);
  inv2=new TileEntityBankChest();
  inv2.setName(super.p + ""String_Node_Str"");
  lc=new InventoryLargeChest(super.p + ""String_Node_Str"",chest,inv2);
}","public LargeBankInventory(BankInventory inv1){
  super(inv1);
  inv2=new TileEntityBankChest();
  inv2.setName(""String_Node_Str"");
  lc=new InventoryLargeChest(""String_Node_Str"",chest,inv2);
}",0.9504950495049505
179073,"public void info(Player p,NPC n){
  if (plugin.spoutcraft && plugin.spoutconnect.enabled(p)) {
    plugin.spoutconnect.showNPCScreen(p,n);
  }
 else {
    p.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + n.getID());
    if (n instanceof BankerNPC) {
      p.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    }
 else     if (n instanceof BankManagerNPC) {
      p.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    }
 else     if (n instanceof BlacksmithNPC) {
      p.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    }
 else     if (n instanceof StaticNPC) {
      p.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    }
 else {
      p.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    }
    p.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + n.getName());
    p.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + ((StaticNPC)n).getSkinURL());
  }
}","public void info(Player p,NPC n){
  if (plugin.spoutcraft && plugin.spoutconnect.enabled(p)) {
    plugin.spoutconnect.showNPCScreen(p,n);
  }
 else {
    p.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + n.getID());
    if (n instanceof BankerNPC) {
      p.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    }
 else     if (n instanceof BankManagerNPC) {
      p.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    }
 else     if (n instanceof BlacksmithNPC) {
      p.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    }
 else     if (n instanceof StaticNPC) {
      p.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    }
 else {
      p.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    }
    p.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + n.getName());
    p.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + n.getSkinURL());
  }
}",0.9912434325744308
179074,"public void onEntityDamage(EntityDamageEvent e){
  if (e instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent event=(EntityDamageByEntityEvent)e;
    if (event.getDamager() instanceof Player && event.getEntity() instanceof Player) {
      if (((CraftPlayer)event.getDamager()).getHandle() instanceof EntityNPC) {
        if (plugin.isGod((Player)event.getEntity()))         event.setCancelled(true);
        return;
      }
      NPC npc=plugin.npcs.getNPC((EntityNPC)((CraftPlayer)event.getEntity()).getHandle());
      if (npc instanceof Damageable) {
        ((Damageable)npc).onDamage(event.getDamager(),event.getDamage());
        return;
      }
      event.setCancelled(!(inPVP((Player)event.getDamager()) != null && inPVP((Player)event.getEntity()) != null));
    }
  }
 else   if (e instanceof EntityDamageByProjectileEvent) {
    if (e.getEntity().equals(((CraftArrow)((EntityDamageByProjectileEvent)e).getDamager()).getShooter())) {
      e.setCancelled(true);
      return;
    }
  }
}","public void onEntityDamage(EntityDamageEvent e){
  if (e instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent event=(EntityDamageByEntityEvent)e;
    if (event.getDamager() instanceof Player && event.getEntity() instanceof Player) {
      if (((CraftPlayer)event.getDamager()).getHandle() instanceof EntityNPC) {
        if (plugin.isGod((Player)event.getEntity()))         event.setCancelled(true);
        return;
      }
      if (((CraftPlayer)event.getEntity()).getHandle() instanceof EntityNPC) {
        NPC npc=plugin.npcs.getNPC((EntityNPC)((CraftPlayer)event.getEntity()).getHandle());
        if (npc instanceof Damageable) {
          ((Damageable)npc).onDamage(event.getDamager(),event.getDamage());
          return;
        }
      }
      event.setCancelled(!(inPVP((Player)event.getDamager()) != null && inPVP((Player)event.getEntity()) != null));
    }
  }
 else   if (e instanceof EntityDamageByProjectileEvent) {
    if (e.getEntity().equals(((CraftArrow)((EntityDamageByProjectileEvent)e).getDamager()).getShooter())) {
      e.setCancelled(true);
      return;
    }
  }
}",0.9543529411764706
179075,"public void onPlayerMove(PlayerMoveEvent event){
  if (plugin.spoutcraft) {
    for (    NPC n : BenCmd.getPlugin().npcs.allNPCs()) {
      if (n.isSpawned() && event.getTo().distance(n.getCurrentLocation()) > 30 && event.getTo().distance(n.getCurrentLocation()) < 40) {
        plugin.spoutconnect.sendSkin(event.getPlayer(),n.getEntityId(),n.getSkinURL());
      }
    }
  }
  Player p=event.getPlayer();
  if (ignore.contains(p)) {
    event.setCancelled(true);
    return;
  }
  if (!areas.containsKey(p)) {
    areas.put(p,new ArrayList<SPArea>());
  }
  for (  SPArea a : plugin.spafile.listAreas()) {
    if (a instanceof PVPArea && a.insideArea(p.getLocation())) {
      int money=0;
      for (      Currency c : plugin.prices.getCurrencies()) {
        for (        ItemStack i : p.getInventory().all(c.getMaterial()).values()) {
          if (i.getDurability() == c.getDurability()) {
            money+=Math.floor(i.getAmount() * c.getPrice());
          }
        }
      }
      if (money < ((PVPArea)a).getMinimumCurrency()) {
        ignore.add(p);
        p.sendMessage(ChatColor.RED + ""String_Node_Str"" + ((PVPArea)a).getMinimumCurrency()+ ""String_Node_Str"");
        int c=1;
        while (true) {
          Location f=p.getLocation();
          f.setX(f.getX() + c);
          if (!a.insideArea(f) && f.getBlock().getType() == Material.AIR) {
            event.setTo(f);
            event.setCancelled(false);
            ignore.remove(p);
            return;
          }
          f.setX(f.getX() - (c * 2));
          if (!a.insideArea(f) && f.getBlock().getType() == Material.AIR) {
            event.setTo(f);
            event.setCancelled(false);
            ignore.remove(p);
            return;
          }
          f.setX(f.getX() + c);
          f.setZ(f.getZ() + c);
          if (!a.insideArea(f) && f.getBlock().getType() == Material.AIR) {
            event.setTo(f);
            event.setCancelled(false);
            ignore.remove(p);
            return;
          }
          f.setZ(f.getZ() - (c * 2));
          if (!a.insideArea(f) && f.getBlock().getType() == Material.AIR) {
            event.setTo(f);
            event.setCancelled(false);
            ignore.remove(p);
            return;
          }
          f.setZ(f.getZ() + c);
          f.setY(f.getY() + c);
          if (!a.insideArea(f) && f.getBlock().getType() == Material.AIR) {
            event.setTo(f);
            event.setCancelled(false);
            ignore.remove(p);
            return;
          }
          f.setY(f.getY() - (c * 2));
          if (!a.insideArea(f) && f.getBlock().getType() == Material.AIR) {
            event.setTo(f);
            event.setCancelled(false);
            ignore.remove(p);
            return;
          }
          c+=1;
        }
      }
    }
    if (a instanceof TRArea) {
      if (a.insideArea(p.getLocation()) && ((TRArea)a).isLocked(p)) {
        ignore.add(p);
        p.sendMessage(ChatColor.RED + ""String_Node_Str"");
        int c=1;
        while (true) {
          Location f=p.getLocation();
          f.setX(f.getX() + c);
          if (!a.insideArea(f) && f.getBlock().getType() == Material.AIR) {
            event.setTo(f);
            event.setCancelled(false);
            ignore.remove(p);
            return;
          }
          f.setX(f.getX() - (c * 2));
          if (!a.insideArea(f) && f.getBlock().getType() == Material.AIR) {
            event.setTo(f);
            event.setCancelled(false);
            ignore.remove(p);
            return;
          }
          f.setX(f.getX() + c);
          f.setZ(f.getZ() + c);
          if (!a.insideArea(f) && f.getBlock().getType() == Material.AIR) {
            event.setTo(f);
            event.setCancelled(false);
            ignore.remove(p);
            return;
          }
          f.setZ(f.getZ() - (c * 2));
          if (!a.insideArea(f) && f.getBlock().getType() == Material.AIR) {
            event.setTo(f);
            event.setCancelled(false);
            ignore.remove(p);
            return;
          }
          f.setZ(f.getZ() + c);
          f.setY(f.getY() + c);
          if (!a.insideArea(f) && f.getBlock().getType() == Material.AIR) {
            event.setTo(f);
            event.setCancelled(false);
            ignore.remove(p);
            return;
          }
          f.setY(f.getY() - (c * 2));
          if (!a.insideArea(f) && f.getBlock().getType() == Material.AIR) {
            event.setTo(f);
            event.setCancelled(false);
            ignore.remove(p);
            return;
          }
          c+=1;
        }
      }
    }
    if (a instanceof MsgArea) {
      if (a.insideArea(p.getLocation())) {
        if (!areas.get(p).contains(a)) {
          if (((MsgArea)a).getEnterMessage().startsWith(""String_Node_Str"") && ((MsgArea)a).getEnterMessage().length() == 2) {
            return;
          }
          p.sendMessage(((MsgArea)a).getEnterMessage());
          areas.get(p).add(a);
        }
      }
 else {
        if (areas.get(p).contains(a)) {
          if (((MsgArea)a).getLeaveMessage().startsWith(""String_Node_Str"") && ((MsgArea)a).getLeaveMessage().length() == 2) {
            return;
          }
          p.sendMessage(((MsgArea)a).getLeaveMessage());
          areas.get(p).remove(a);
        }
      }
    }
  }
}","public void onPlayerMove(PlayerMoveEvent event){
  if (plugin.spoutcraft) {
    for (    NPC n : BenCmd.getPlugin().npcs.allNPCs()) {
      if (n.isSpawned() && event.getTo().getWorld().equals(n.getCurrentLocation().getWorld()) && event.getTo().distance(n.getCurrentLocation()) > 30 && event.getTo().distance(n.getCurrentLocation()) < 40) {
        plugin.spoutconnect.sendSkin(event.getPlayer(),n.getEntityId(),n.getSkinURL());
      }
    }
  }
  Player p=event.getPlayer();
  if (ignore.contains(p)) {
    event.setCancelled(true);
    return;
  }
  if (!areas.containsKey(p)) {
    areas.put(p,new ArrayList<SPArea>());
  }
  for (  SPArea a : plugin.spafile.listAreas()) {
    if (a instanceof PVPArea && a.insideArea(p.getLocation())) {
      int money=0;
      for (      Currency c : plugin.prices.getCurrencies()) {
        for (        ItemStack i : p.getInventory().all(c.getMaterial()).values()) {
          if (i.getDurability() == c.getDurability()) {
            money+=Math.floor(i.getAmount() * c.getPrice());
          }
        }
      }
      if (money < ((PVPArea)a).getMinimumCurrency()) {
        ignore.add(p);
        p.sendMessage(ChatColor.RED + ""String_Node_Str"" + ((PVPArea)a).getMinimumCurrency()+ ""String_Node_Str"");
        int c=1;
        while (true) {
          Location f=p.getLocation();
          f.setX(f.getX() + c);
          if (!a.insideArea(f) && f.getBlock().getType() == Material.AIR) {
            event.setTo(f);
            event.setCancelled(false);
            ignore.remove(p);
            return;
          }
          f.setX(f.getX() - (c * 2));
          if (!a.insideArea(f) && f.getBlock().getType() == Material.AIR) {
            event.setTo(f);
            event.setCancelled(false);
            ignore.remove(p);
            return;
          }
          f.setX(f.getX() + c);
          f.setZ(f.getZ() + c);
          if (!a.insideArea(f) && f.getBlock().getType() == Material.AIR) {
            event.setTo(f);
            event.setCancelled(false);
            ignore.remove(p);
            return;
          }
          f.setZ(f.getZ() - (c * 2));
          if (!a.insideArea(f) && f.getBlock().getType() == Material.AIR) {
            event.setTo(f);
            event.setCancelled(false);
            ignore.remove(p);
            return;
          }
          f.setZ(f.getZ() + c);
          f.setY(f.getY() + c);
          if (!a.insideArea(f) && f.getBlock().getType() == Material.AIR) {
            event.setTo(f);
            event.setCancelled(false);
            ignore.remove(p);
            return;
          }
          f.setY(f.getY() - (c * 2));
          if (!a.insideArea(f) && f.getBlock().getType() == Material.AIR) {
            event.setTo(f);
            event.setCancelled(false);
            ignore.remove(p);
            return;
          }
          c+=1;
        }
      }
    }
    if (a instanceof TRArea) {
      if (a.insideArea(p.getLocation()) && ((TRArea)a).isLocked(p)) {
        ignore.add(p);
        p.sendMessage(ChatColor.RED + ""String_Node_Str"");
        int c=1;
        while (true) {
          Location f=p.getLocation();
          f.setX(f.getX() + c);
          if (!a.insideArea(f) && f.getBlock().getType() == Material.AIR) {
            event.setTo(f);
            event.setCancelled(false);
            ignore.remove(p);
            return;
          }
          f.setX(f.getX() - (c * 2));
          if (!a.insideArea(f) && f.getBlock().getType() == Material.AIR) {
            event.setTo(f);
            event.setCancelled(false);
            ignore.remove(p);
            return;
          }
          f.setX(f.getX() + c);
          f.setZ(f.getZ() + c);
          if (!a.insideArea(f) && f.getBlock().getType() == Material.AIR) {
            event.setTo(f);
            event.setCancelled(false);
            ignore.remove(p);
            return;
          }
          f.setZ(f.getZ() - (c * 2));
          if (!a.insideArea(f) && f.getBlock().getType() == Material.AIR) {
            event.setTo(f);
            event.setCancelled(false);
            ignore.remove(p);
            return;
          }
          f.setZ(f.getZ() + c);
          f.setY(f.getY() + c);
          if (!a.insideArea(f) && f.getBlock().getType() == Material.AIR) {
            event.setTo(f);
            event.setCancelled(false);
            ignore.remove(p);
            return;
          }
          f.setY(f.getY() - (c * 2));
          if (!a.insideArea(f) && f.getBlock().getType() == Material.AIR) {
            event.setTo(f);
            event.setCancelled(false);
            ignore.remove(p);
            return;
          }
          c+=1;
        }
      }
    }
    if (a instanceof MsgArea) {
      if (a.insideArea(p.getLocation())) {
        if (!areas.get(p).contains(a)) {
          if (((MsgArea)a).getEnterMessage().startsWith(""String_Node_Str"") && ((MsgArea)a).getEnterMessage().length() == 2) {
            return;
          }
          p.sendMessage(((MsgArea)a).getEnterMessage());
          areas.get(p).add(a);
        }
      }
 else {
        if (areas.get(p).contains(a)) {
          if (((MsgArea)a).getLeaveMessage().startsWith(""String_Node_Str"") && ((MsgArea)a).getLeaveMessage().length() == 2) {
            return;
          }
          p.sendMessage(((MsgArea)a).getLeaveMessage());
          areas.get(p).remove(a);
        }
      }
    }
  }
}",0.9934518241347052
179076,"public boolean canUse(User user){
  if (neededPermission.equalsIgnoreCase(""String_Node_Str"")) {
    return true;
  }
  return user.hasPerm(neededPermission);
}","public boolean canUse(User user){
  if (neededPermission.equalsIgnoreCase(""String_Node_Str"")) {
    return true;
  }
  for (  String p : neededPermission.split(""String_Node_Str"")) {
    if (user.hasPerm(p)) {
      return true;
    }
  }
  return false;
}",0.6473429951690821
179077,"public void Lot(String[] args,User user){
  if (args.length == 0) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    String LotID;
    if (args.length >= 2) {
      LotID=args[1];
      if (LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"")) {
        if (user.isServer()) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        Player player=user.getHandle();
        LotID=String.valueOf(plugin.lots.isInLot(player.getLocation()));
        if (LotID == ""String_Node_Str"") {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
      }
      plugin.lots.sortSubs(LotID);
      if (args.length >= 3)       LotID=LotID + ""String_Node_Str"" + args[2];
      if (!plugin.lots.lotExists(LotID)) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        return;
      }
    }
 else {
      if (user.isServer()) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      LotID=String.valueOf(plugin.lots.isInLot(user.getHandle().getLocation()));
    }
    if (LotID.equalsIgnoreCase(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    Lot thisLot=plugin.lots.getLot(LotID);
    String lot=thisLot.getLotID();
    String sub=thisLot.getSubID();
    if (thisLot != null) {
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + lot+ ""String_Node_Str""+ sub+ ""String_Node_Str""+ (thisLot.getSubs().size())+ ""String_Node_Str""+ thisLot.getWorld().getName());
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + thisLot.getOwner()+ ""String_Node_Str""+ thisLot.getLotGroup()+ ""String_Node_Str""+ thisLot.getGuests().size());
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + thisLot.getCorner1().getX()+ ""String_Node_Str""+ thisLot.getCorner1().getBlockY()+ ""String_Node_Str""+ thisLot.getCorner1().getBlockZ());
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + thisLot.getCorner2().getX()+ ""String_Node_Str""+ thisLot.getCorner2().getBlockY()+ ""String_Node_Str""+ thisLot.getCorner2().getBlockZ());
    }
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length == 1) {
      if (user.isServer()) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      Player player=user.getHandle();
      String LotID=String.valueOf(plugin.lots.isInLot(player.getLocation()));
      if (LotID == ""String_Node_Str"") {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      Lot lot=plugin.lots.getLot(LotID);
      if (!user.hasPerm(""String_Node_Str"") && !lot.isOwner(user.getHandle())) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      lot.listGuests(user);
      return;
    }
    if (!args[1].startsWith(""String_Node_Str"") && !args[1].startsWith(""String_Node_Str"")) {
      String LotID=args[1];
      if (LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"")|| LotID.equalsIgnoreCase(""String_Node_Str"")) {
        if (user.isServer()) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        Player player=user.getHandle();
        LotID=plugin.lots.ownsHere(player,player.getLocation());
        if (LotID.equalsIgnoreCase(""String_Node_Str"")) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (LotID.equalsIgnoreCase(""String_Node_Str"")) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (LotID.equalsIgnoreCase(""String_Node_Str"")) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
      }
      Lot lot;
      if (plugin.lots.lotExists(LotID)) {
        lot=plugin.lots.getLot(LotID);
      }
 else {
        user.sendMessage(""String_Node_Str"");
        return;
      }
      if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
        int size=lot.getGuests().size();
        if (lot.clearGuests())         user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + size+ ""String_Node_Str"");
 else         user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
 else       if (args.length >= 3 && args[2].equalsIgnoreCase(""String_Node_Str"")) {
        int size=lot.getGuests().size();
        if (lot.clearGuests())         user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + size+ ""String_Node_Str"");
 else         user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (args.length == 2) {
        if (user.hasPerm(""String_Node_Str"") || lot.isOwner(user.getHandle())) {
          plugin.lots.getLot(LotID).listGuests(user);
          return;
        }
      }
      boolean commandsReady=false;
      for (      String str : args) {
        if (!commandsReady) {
          commandsReady=true;
          continue;
        }
        if (str.startsWith(""String_Node_Str"")) {
          if (!user.hasPerm(""String_Node_Str"") && !lot.isOwner(user.getHandle())) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return;
          }
          str=str.replaceFirst(""String_Node_Str"",""String_Node_Str"");
          Lot Lot=plugin.lots.getLot(LotID);
          if (Lot.isGuest(str)) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"" + str+ ""String_Node_Str""+ LotID.split(""String_Node_Str"")[0]);
          }
 else {
            plugin.lots.getLot(LotID).addGuest(str);
            user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + str+ ""String_Node_Str""+ LotID.split(""String_Node_Str"")[0]);
          }
        }
 else         if (str.startsWith(""String_Node_Str"")) {
          if (!user.hasPerm(""String_Node_Str"") && !lot.isOwner(user.getHandle())) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return;
          }
          str=str.replaceFirst(""String_Node_Str"",""String_Node_Str"");
          Lot Lot=plugin.lots.getLot(LotID);
          if (!Lot.isGuest(str)) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"" + str+ ""String_Node_Str""+ LotID.split(""String_Node_Str"")[0]);
          }
 else {
            user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + str+ ""String_Node_Str""+ LotID.split(""String_Node_Str"")[0]);
            plugin.lots.getLot(LotID).deleteGuest(str);
          }
        }
      }
    }
 else {
      if (user.isServer()) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      String LotID=""String_Node_Str"";
      Player player=user.getHandle();
      LotID=plugin.lots.ownsHere(player,player.getLocation());
      if (LotID.equalsIgnoreCase(""String_Node_Str"")) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (LotID.equalsIgnoreCase(""String_Node_Str"")) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (LotID.equalsIgnoreCase(""String_Node_Str"")) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      Lot lot=plugin.lots.getLot(LotID);
      boolean commandsReady=false;
      for (      String str : args) {
        if (!commandsReady) {
          commandsReady=true;
          continue;
        }
        if (str.startsWith(""String_Node_Str"")) {
          if (!user.hasPerm(""String_Node_Str"") && !lot.isOwner(user.getHandle())) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return;
          }
          str=str.replaceFirst(""String_Node_Str"",""String_Node_Str"");
          Lot Lot=plugin.lots.getLot(LotID);
          if (Lot.isGuest(str)) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"" + str+ ""String_Node_Str""+ LotID.split(""String_Node_Str"")[0]);
          }
 else {
            plugin.lots.getLot(LotID).addGuest(str);
            user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + str+ ""String_Node_Str""+ LotID.split(""String_Node_Str"")[0]);
          }
        }
 else         if (str.startsWith(""String_Node_Str"")) {
          if (!user.hasPerm(""String_Node_Str"") && !lot.isOwner(user.getHandle())) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return;
          }
          str=str.replaceFirst(""String_Node_Str"",""String_Node_Str"");
          Lot Lot=plugin.lots.getLot(LotID);
          if (!Lot.isGuest(str)) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"" + str+ ""String_Node_Str""+ LotID.split(""String_Node_Str"")[0]);
          }
 else {
            user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + str+ ""String_Node_Str""+ LotID.split(""String_Node_Str"")[0]);
            plugin.lots.getLot(LotID).deleteGuest(str);
          }
        }
      }
    }
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (user.isServer()) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    Location corner1;
    Location corner2;
    String owner, group;
    if (!plugin.lotListener.corner.containsKey(user.getName())) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    boolean cor1=plugin.lotListener.corner.get(user.getName()).corner1set;
    boolean cor2=plugin.lotListener.corner.get(user.getName()).corner2set;
    if (cor1 && cor2) {
      String LotID=plugin.lots.getNextID();
      corner1=plugin.lotListener.corner.get(user.getName()).getCorner1();
      corner2=plugin.lotListener.corner.get(user.getName()).getCorner2();
      World c1world=corner1.getWorld();
      World c2world=corner2.getWorld();
      World pworld=user.getHandle().getWorld();
      if (c1world != pworld && c2world != pworld) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (c1world != pworld && c2world == pworld) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (c1world == pworld && c2world != pworld) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (args.length >= 2) {
        owner=args[1];
      }
 else {
        owner=user.getName();
      }
      if (!plugin.perm.groupFile.groupExists(plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str""))) {
        plugin.perm.groupFile.addGroup(new PermissionGroup(plugin,plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str""),new ArrayList<String>(),new ArrayList<String>(),new ArrayList<String>(),""String_Node_Str"",-1,0));
      }
      group=plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str"");
      plugin.lots.addLot(LotID,corner1,corner2,owner,group);
      LotID=plugin.lots.getLot(LotID).getLotID();
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + LotID+ ""String_Node_Str""+ owner);
      return;
    }
 else {
      if (!cor1 && !cor2)       user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      if (!cor1 && cor2)       user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      if (cor1 && !cor2)       user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (user.isServer()) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    Location corner1;
    Location corner2;
    String owner, group;
    if (!plugin.lotListener.corner.containsKey(user.getName())) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    boolean cor1=plugin.lotListener.corner.get(user.getName()).corner1set;
    boolean cor2=plugin.lotListener.corner.get(user.getName()).corner2set;
    int up, down;
    if (cor1 && cor2) {
      String LotID=plugin.lots.getNextID();
      corner1=plugin.lotListener.corner.get(user.getName()).getCorner1();
      corner2=plugin.lotListener.corner.get(user.getName()).getCorner2();
      World c1world=corner1.getWorld();
      World c2world=corner2.getWorld();
      World pworld=user.getHandle().getWorld();
      if (c1world != pworld && c2world != pworld) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (c1world != pworld && c2world == pworld) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (c1world == pworld && c2world != pworld) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (args.length >= 4) {
        try {
          up=Integer.parseInt(args[1]);
          down=Integer.parseInt(args[2]);
        }
 catch (        NumberFormatException e) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        owner=args[3];
      }
 else       if (args.length >= 3) {
        try {
          up=Integer.parseInt(args[1]);
          down=Integer.parseInt(args[2]);
        }
 catch (        NumberFormatException e) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        owner=user.getName();
      }
 else {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (up < -1 || down < -1) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
      int oldY1=corner1.getBlockY();
      int oldY2=corner2.getBlockY();
      if (up > 0) {
        if (corner1.getBlockY() >= corner2.getBlockY()) {
          corner1.setY(corner1.getY() + up);
        }
 else {
          corner2.setY(corner2.getY() + up);
        }
      }
 else       if (up == -1) {
        if (corner1.getBlockY() >= corner2.getBlockY()) {
          corner1.setY(128);
        }
 else {
          corner2.setY(128);
        }
      }
      if (down > 0) {
        if (corner1.getBlockY() <= corner2.getBlockY()) {
          corner1.setY(corner1.getY() - down);
        }
 else {
          corner2.setY(corner2.getY() - down);
        }
      }
 else       if (down == -1) {
        if (corner1.getBlockY() <= corner2.getBlockY()) {
          corner1.setY(0);
        }
 else {
          corner2.setY(0);
        }
      }
      if (!plugin.perm.groupFile.groupExists(plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str""))) {
        plugin.perm.groupFile.addGroup(new PermissionGroup(plugin,plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str""),new ArrayList<String>(),new ArrayList<String>(),new ArrayList<String>(),""String_Node_Str"",-1,0));
      }
      group=plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str"");
      plugin.lots.addLot(LotID,corner1,corner2,owner,group);
      LotID=plugin.lots.getLot(LotID).getLotID();
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + LotID+ ""String_Node_Str""+ owner);
      corner1.setY(oldY1);
      corner2.setY(oldY2);
      return;
    }
 else {
      if (!cor1 && !cor2)       user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      if (!cor1 && cor2)       user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      if (cor1 && !cor2)       user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    String LotID;
    String SubID=""String_Node_Str"";
    if (args.length == 1) {
      LotID=""String_Node_Str"";
    }
 else {
      LotID=args[1];
    }
    if (args.length >= 3) {
      SubID=args[2];
    }
    if (LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"")) {
      if (user.isServer()) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      Player player=user.getHandle();
      LotID=String.valueOf(plugin.lots.isInLot(player.getLocation())).split(""String_Node_Str"")[0];
      if (LotID == ""String_Node_Str"") {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
    }
    if (!SubID.equalsIgnoreCase(""String_Node_Str"")) {
      if (plugin.lots.lotExists((LotID + ""String_Node_Str"" + SubID))) {
        if (plugin.lots.deleteLot((LotID + ""String_Node_Str"" + SubID))) {
          user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + LotID+ ""String_Node_Str""+ SubID+ ""String_Node_Str"");
          return;
        }
 else {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"" + LotID+ ""String_Node_Str""+ SubID+ ""String_Node_Str"");
      }
      return;
    }
 else     if (plugin.lots.lotExists(LotID)) {
      int size=plugin.lots.getLot(LotID).getSubs().size();
      if (plugin.lots.deleteLot(LotID)) {
        user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + LotID+ ""String_Node_Str""+ size+ ""String_Node_Str"");
        return;
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
    }
 else {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"" + LotID+ ""String_Node_Str"");
    }
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (args.length == 1) {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
      return;
    }
    if (args.length >= 2) {
      String LotID, Owner;
      Owner=args[1];
      if (args.length >= 3) {
        LotID=args[2];
        if (LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"")) {
          if (user.isServer()) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return;
          }
          LotID=String.valueOf(plugin.lots.isInLot(user.getHandle().getLocation()));
          if (LotID == ""String_Node_Str"") {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return;
          }
        }
      }
 else {
        if (user.isServer()) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        LotID=String.valueOf(plugin.lots.isInLot(user.getHandle().getLocation()));
        if (LotID == ""String_Node_Str"") {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
      }
      plugin.lots.getLot(LotID).setOwner(Owner);
      user.sendMessage(ChatColor.GREEN + Owner + ""String_Node_Str""+ LotID);
      return;
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (args.length == 1) {
      int size=0;
      for (      String key : plugin.lots.lot.keySet()) {
        plugin.lots.sortSubs(key.split(""String_Node_Str"")[0]);
        if (key.split(""String_Node_Str"")[1].equalsIgnoreCase(""String_Node_Str""))         size++;
      }
      int[] Lot=new int[size];
      int total=plugin.lots.lot.size();
      int i=0;
      for (      String key : plugin.lots.lot.keySet()) {
        if (key.split(""String_Node_Str"")[1].equalsIgnoreCase(""String_Node_Str"")) {
          Lot[i]=Integer.parseInt((String)key.split(""String_Node_Str"")[0]);
          i++;
        }
      }
      plugin.lots.selectionSort(Lot);
      String list=""String_Node_Str"";
      i=0;
      int r=0;
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + size+ ""String_Node_Str""+ total);
      for (      int key : Lot) {
        String LotIDString=String.valueOf(key);
        list+=LotIDString;
        i++;
        r++;
        if (r < Lot.length)         list+=""String_Node_Str"";
 else         list+=""String_Node_Str"";
        if (i >= 12) {
          user.sendMessage(ChatColor.GRAY + list);
          i=0;
          list=""String_Node_Str"";
        }
      }
      if (!list.equalsIgnoreCase(""String_Node_Str"")) {
        user.sendMessage(ChatColor.GRAY + list);
      }
      return;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"") || args[1].equalsIgnoreCase(""String_Node_Str"")) {
      Player player=user.getHandle();
      Location location=player.getLocation();
      int total=0;
      if (plugin.lots.isInLot(location).equalsIgnoreCase(""String_Node_Str"")) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
 else {
        for (        String LotID : plugin.lots.lot.keySet()) {
          if (plugin.lots.getLot(LotID).withinLot(location)) {
            total++;
          }
        }
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + total+ ""String_Node_Str"");
      }
      String list=""String_Node_Str"";
      int i=0, r=0;
      List<String> usedIDs=new ArrayList<String>();
      for (      String LotID : plugin.lots.lot.keySet()) {
        if (!plugin.lots.getLot(LotID).withinLot(location)) {
          continue;
        }
        LotID=LotID.split(""String_Node_Str"")[0];
        if (!usedIDs.contains(LotID)) {
          usedIDs.add(LotID);
          list+=LotID;
          i++;
          r++;
          if (r < total)           list+=""String_Node_Str"";
 else           list+=""String_Node_Str"";
          if (i >= 3) {
            user.sendMessage(ChatColor.GRAY + list);
            i=0;
            list=""String_Node_Str"";
          }
        }
      }
      if (!list.equalsIgnoreCase(""String_Node_Str"")) {
        user.sendMessage(ChatColor.YELLOW + list);
      }
      return;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length == 2) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      String owner=args[2];
      int total=0;
      List<String> usedIDs=new ArrayList<String>();
      for (      String LotID : plugin.lots.lot.keySet()) {
        if (plugin.lots.getLot(LotID).getOwner().equalsIgnoreCase(owner) && !usedIDs.contains(LotID.split(""String_Node_Str"")[0])) {
          usedIDs.add(LotID.split(""String_Node_Str"")[0]);
        }
      }
      user.sendMessage(ChatColor.GRAY + owner + ""String_Node_Str""+ usedIDs.size()+ ""String_Node_Str"");
      String list=""String_Node_Str"";
      int i=0, r=0;
      for (      String LotID : usedIDs) {
        list+=LotID;
        i++;
        r++;
        if (r < total)         list+=""String_Node_Str"";
 else         list+=""String_Node_Str"";
        if (i >= 3) {
          user.sendMessage(ChatColor.GRAY + list);
          i=0;
          list=""String_Node_Str"";
        }
      }
      if (!list.equalsIgnoreCase(""String_Node_Str"")) {
        user.sendMessage(ChatColor.GRAY + list);
      }
      return;
    }
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    String LotID, group;
    Player player=user.getHandle();
    if (args.length < 2) {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    if (args.length == 2) {
      group=args[1];
      LotID=plugin.lots.ownsHere(player,player.getLocation());
      if (LotID.equalsIgnoreCase(""String_Node_Str"")) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (LotID.equalsIgnoreCase(""String_Node_Str"")) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (LotID.equalsIgnoreCase(""String_Node_Str"")) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      Lot lot=plugin.lots.getLot(LotID);
      lot.setGroup(group);
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + LotID.split(""String_Node_Str"")[0]+ ""String_Node_Str""+ group+ ""String_Node_Str"");
      return;
    }
 else     if (args.length >= 3) {
      group=args[1];
      LotID=args[2];
      if (LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"")) {
        if (user.isServer()) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        LotID=plugin.lots.ownsHere(player,player.getLocation());
        if (LotID.equalsIgnoreCase(""String_Node_Str"")) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (LotID.equalsIgnoreCase(""String_Node_Str"")) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (LotID.equalsIgnoreCase(""String_Node_Str"")) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
      }
 else {
        if (!plugin.lots.lotExists(LotID)) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
      }
      Lot lot=plugin.lots.getLot(LotID);
      if (!user.hasPerm(""String_Node_Str"") && !lot.isOwner(player)) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      lot.setGroup(group);
      LotID=lot.getLotID();
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + LotID+ ""String_Node_Str""+ group+ ""String_Node_Str"");
      return;
    }
 else {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")|| args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (user.isServer()) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    Location corner1;
    Location corner2;
    String LotID;
    if (!plugin.lotListener.corner.containsKey(user.getName())) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    Player player=user.getHandle();
    if (args.length >= 2)     LotID=args[1];
 else     LotID=""String_Node_Str"";
    if (LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"")) {
      LotID=String.valueOf(plugin.lots.isInLot(player.getLocation()));
      if (LotID == ""String_Node_Str"") {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (LotID.split(""String_Node_Str"").length == 2) {
        LotID=LotID.split(""String_Node_Str"")[0];
      }
    }
 else {
      if (!plugin.lots.lotExists(LotID)) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
    }
    boolean cor1=plugin.lotListener.corner.get(user.getName()).corner1set;
    boolean cor2=plugin.lotListener.corner.get(user.getName()).corner2set;
    if (cor1 && cor2) {
      corner1=plugin.lotListener.corner.get(user.getName()).getCorner1();
      corner2=plugin.lotListener.corner.get(user.getName()).getCorner2();
      World c1world=corner1.getWorld();
      World c2world=corner2.getWorld();
      World pworld=user.getHandle().getWorld();
      if (c1world != pworld && c2world != pworld) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (c1world != pworld && c2world == pworld) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (c1world == pworld && c2world != pworld) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      String group=plugin.lots.getLot(LotID).getLotGroup();
      String owner=plugin.lots.getLot(LotID).getOwner();
      plugin.lots.sortSubs(LotID);
      String SubID=plugin.lots.getNextSubID(LotID);
      plugin.lots.addLot(LotID + ""String_Node_Str"" + SubID,corner1,corner2,owner,group);
      LotID=plugin.lots.getLot(LotID).getLotID();
      int SubSize=plugin.lots.getLot(LotID).getSubs().size();
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + LotID+ ""String_Node_Str""+ SubID+ ""String_Node_Str""+ SubSize+ ""String_Node_Str"");
      return;
    }
 else {
      if (!cor1 && !cor2)       user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      if (!cor1 && cor2)       user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      if (cor1 && !cor2)       user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")|| args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (user.isServer()) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    Player player=user.getHandle();
    Location corner1;
    Location corner2;
    String LotID;
    if (!plugin.lotListener.corner.containsKey(user.getName())) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    boolean cor1=plugin.lotListener.corner.get(user.getName()).corner1set;
    boolean cor2=plugin.lotListener.corner.get(user.getName()).corner2set;
    int up, down;
    if (cor1 && cor2) {
      corner1=plugin.lotListener.corner.get(user.getName()).getCorner1();
      corner2=plugin.lotListener.corner.get(user.getName()).getCorner2();
      World c1world=corner1.getWorld();
      World c2world=corner2.getWorld();
      World pworld=user.getHandle().getWorld();
      if (c1world != pworld && c2world != pworld) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (c1world != pworld && c2world == pworld) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (c1world == pworld && c2world != pworld) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (args.length >= 4) {
        try {
          up=Integer.parseInt(args[1]);
          down=Integer.parseInt(args[2]);
        }
 catch (        NumberFormatException e) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        LotID=args[3];
      }
 else       if (args.length == 3) {
        try {
          up=Integer.parseInt(args[1]);
          down=Integer.parseInt(args[2]);
        }
 catch (        NumberFormatException e) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        LotID=""String_Node_Str"";
      }
 else {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (up < -1 || down < -1) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
      LotID=LotID.split(""String_Node_Str"")[0];
      if (LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"")) {
        LotID=String.valueOf(plugin.lots.isInLot(player.getLocation()));
        if (LotID == ""String_Node_Str"") {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (LotID.split(""String_Node_Str"").length == 2) {
          LotID=LotID.split(""String_Node_Str"")[0];
        }
      }
 else {
        if (!plugin.lots.lotExists(LotID)) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
      }
      int oldY1=corner1.getBlockY();
      int oldY2=corner2.getBlockY();
      if (up > 0) {
        if (corner1.getBlockY() >= corner2.getBlockY()) {
          corner1.setY(corner1.getY() + up);
        }
 else {
          corner2.setY(corner2.getY() + up);
        }
      }
 else       if (up == -1) {
        if (corner1.getBlockY() >= corner2.getBlockY()) {
          corner1.setY(128);
        }
 else {
          corner2.setY(128);
        }
      }
      if (down > 0) {
        if (corner1.getBlockY() <= corner2.getBlockY()) {
          corner1.setY(corner1.getY() - down);
        }
 else {
          corner2.setY(corner2.getY() - down);
        }
      }
 else       if (down == -1) {
        if (corner1.getBlockY() <= corner2.getBlockY()) {
          corner1.setY(0);
        }
 else {
          corner2.setY(0);
        }
      }
      String owner=plugin.lots.getLot(LotID).getOwner();
      String group=plugin.lots.getLot(LotID).getLotGroup();
      plugin.lots.sortSubs(LotID);
      String SubID=plugin.lots.getNextSubID(LotID);
      plugin.lots.addLot(LotID + ""String_Node_Str"" + SubID,corner1,corner2,owner,group);
      int SubSize=plugin.lots.getLot(LotID).getSubs().size();
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + LotID+ ""String_Node_Str""+ SubID+ ""String_Node_Str""+ SubSize+ ""String_Node_Str"");
      corner1.setY(oldY1);
      corner2.setY(oldY2);
      return;
    }
 else {
      if (!cor1 && !cor2)       user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      if (!cor1 && cor2)       user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      if (cor1 && !cor2)       user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return;
  }
  user.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
  user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
  return;
}","public void Lot(String[] args,User user){
  if (args.length == 0) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    String LotID;
    if (args.length >= 2) {
      LotID=args[1];
      if (LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"")) {
        if (user.isServer()) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        Player player=user.getHandle();
        LotID=String.valueOf(plugin.lots.isInLot(player.getLocation()));
        if (LotID == ""String_Node_Str"") {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
      }
      plugin.lots.sortSubs(LotID);
      if (args.length >= 3)       LotID=LotID + ""String_Node_Str"" + args[2];
      if (!plugin.lots.lotExists(LotID)) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
        return;
      }
    }
 else {
      if (user.isServer()) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      LotID=String.valueOf(plugin.lots.isInLot(user.getHandle().getLocation()));
    }
    if (LotID.equalsIgnoreCase(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    Lot thisLot=plugin.lots.getLot(LotID);
    String lot=thisLot.getLotID();
    String sub=thisLot.getSubID();
    if (thisLot != null) {
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + lot+ ""String_Node_Str""+ sub+ ""String_Node_Str""+ (thisLot.getSubs().size())+ ""String_Node_Str""+ thisLot.getWorld().getName());
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + thisLot.getOwner()+ ""String_Node_Str""+ thisLot.getLotGroup()+ ""String_Node_Str""+ thisLot.getGuests().size());
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + thisLot.getCorner1().getX()+ ""String_Node_Str""+ thisLot.getCorner1().getBlockY()+ ""String_Node_Str""+ thisLot.getCorner1().getBlockZ());
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + thisLot.getCorner2().getX()+ ""String_Node_Str""+ thisLot.getCorner2().getBlockY()+ ""String_Node_Str""+ thisLot.getCorner2().getBlockZ());
    }
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length == 1) {
      if (user.isServer()) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      Player player=user.getHandle();
      String LotID=String.valueOf(plugin.lots.isInLot(player.getLocation()));
      if (LotID == ""String_Node_Str"") {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      Lot lot=plugin.lots.getLot(LotID);
      if (!user.hasPerm(""String_Node_Str"") && !lot.isOwner(user.getHandle())) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      lot.listGuests(user);
      return;
    }
    if (!args[1].startsWith(""String_Node_Str"") && !args[1].startsWith(""String_Node_Str"")) {
      String LotID=args[1];
      if (LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"")|| LotID.equalsIgnoreCase(""String_Node_Str"")) {
        if (user.isServer()) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        Player player=user.getHandle();
        LotID=plugin.lots.ownsHere(player,player.getLocation());
        if (LotID.equalsIgnoreCase(""String_Node_Str"")) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (LotID.equalsIgnoreCase(""String_Node_Str"")) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (LotID.equalsIgnoreCase(""String_Node_Str"")) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
      }
      Lot lot;
      if (plugin.lots.lotExists(LotID)) {
        lot=plugin.lots.getLot(LotID);
      }
 else {
        user.sendMessage(""String_Node_Str"");
        return;
      }
      if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
        int size=lot.getGuests().size();
        if (lot.clearGuests())         user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + size+ ""String_Node_Str"");
 else         user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
 else       if (args.length >= 3 && args[2].equalsIgnoreCase(""String_Node_Str"")) {
        int size=lot.getGuests().size();
        if (lot.clearGuests())         user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + size+ ""String_Node_Str"");
 else         user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (args.length == 2) {
        if (user.hasPerm(""String_Node_Str"") || lot.isOwner(user.getHandle())) {
          plugin.lots.getLot(LotID).listGuests(user);
          return;
        }
      }
      boolean commandsReady=false;
      for (      String str : args) {
        if (!commandsReady) {
          commandsReady=true;
          continue;
        }
        if (str.startsWith(""String_Node_Str"")) {
          if (!user.hasPerm(""String_Node_Str"") && !lot.isOwner(user.getHandle())) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return;
          }
          str=str.replaceFirst(""String_Node_Str"",""String_Node_Str"");
          Lot Lot=plugin.lots.getLot(LotID);
          if (Lot.isGuest(str)) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"" + str+ ""String_Node_Str""+ LotID.split(""String_Node_Str"")[0]);
          }
 else {
            plugin.lots.getLot(LotID).addGuest(str);
            user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + str+ ""String_Node_Str""+ LotID.split(""String_Node_Str"")[0]);
          }
        }
 else         if (str.startsWith(""String_Node_Str"")) {
          if (!user.hasPerm(""String_Node_Str"") && !lot.isOwner(user.getHandle())) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return;
          }
          str=str.replaceFirst(""String_Node_Str"",""String_Node_Str"");
          Lot Lot=plugin.lots.getLot(LotID);
          if (!Lot.isGuest(str)) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"" + str+ ""String_Node_Str""+ LotID.split(""String_Node_Str"")[0]);
          }
 else {
            user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + str+ ""String_Node_Str""+ LotID.split(""String_Node_Str"")[0]);
            plugin.lots.getLot(LotID).deleteGuest(str);
          }
        }
      }
    }
 else {
      if (user.isServer()) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      String LotID=""String_Node_Str"";
      Player player=user.getHandle();
      LotID=plugin.lots.ownsHere(player,player.getLocation());
      if (LotID.equalsIgnoreCase(""String_Node_Str"")) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (LotID.equalsIgnoreCase(""String_Node_Str"")) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (LotID.equalsIgnoreCase(""String_Node_Str"")) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      Lot lot=plugin.lots.getLot(LotID);
      boolean commandsReady=false;
      for (      String str : args) {
        if (!commandsReady) {
          commandsReady=true;
          continue;
        }
        if (str.startsWith(""String_Node_Str"")) {
          if (!user.hasPerm(""String_Node_Str"") && !lot.isOwner(user.getHandle())) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return;
          }
          str=str.replaceFirst(""String_Node_Str"",""String_Node_Str"");
          Lot Lot=plugin.lots.getLot(LotID);
          if (Lot.isGuest(str)) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"" + str+ ""String_Node_Str""+ LotID.split(""String_Node_Str"")[0]);
          }
 else {
            plugin.lots.getLot(LotID).addGuest(str);
            user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + str+ ""String_Node_Str""+ LotID.split(""String_Node_Str"")[0]);
          }
        }
 else         if (str.startsWith(""String_Node_Str"")) {
          if (!user.hasPerm(""String_Node_Str"") && !lot.isOwner(user.getHandle())) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return;
          }
          str=str.replaceFirst(""String_Node_Str"",""String_Node_Str"");
          Lot Lot=plugin.lots.getLot(LotID);
          if (!Lot.isGuest(str)) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"" + str+ ""String_Node_Str""+ LotID.split(""String_Node_Str"")[0]);
          }
 else {
            user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + str+ ""String_Node_Str""+ LotID.split(""String_Node_Str"")[0]);
            plugin.lots.getLot(LotID).deleteGuest(str);
          }
        }
      }
    }
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (user.isServer()) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    Location corner1;
    Location corner2;
    String owner, group;
    if (!plugin.lotListener.corner.containsKey(user.getName())) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    boolean cor1=plugin.lotListener.corner.get(user.getName()).corner1set;
    boolean cor2=plugin.lotListener.corner.get(user.getName()).corner2set;
    if (cor1 && cor2) {
      String LotID=plugin.lots.getNextID();
      corner1=plugin.lotListener.corner.get(user.getName()).getCorner1();
      corner2=plugin.lotListener.corner.get(user.getName()).getCorner2();
      World c1world=corner1.getWorld();
      World c2world=corner2.getWorld();
      World pworld=user.getHandle().getWorld();
      if (c1world != pworld && c2world != pworld) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (c1world != pworld && c2world == pworld) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (c1world == pworld && c2world != pworld) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (args.length >= 2) {
        owner=args[1];
      }
 else {
        owner=user.getName();
      }
      if (!plugin.perm.groupFile.groupExists(plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str""))) {
        plugin.perm.groupFile.addGroup(new PermissionGroup(plugin,plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str""),new ArrayList<String>(),new ArrayList<String>(),new ArrayList<String>(),""String_Node_Str"",-1,0));
      }
      group=plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str"");
      plugin.lots.addLot(LotID,corner1,corner2,owner,group);
      LotID=plugin.lots.getLot(LotID).getLotID();
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + LotID+ ""String_Node_Str""+ owner);
      return;
    }
 else {
      if (!cor1 && !cor2)       user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      if (!cor1 && cor2)       user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      if (cor1 && !cor2)       user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (user.isServer()) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    Location corner1;
    Location corner2;
    String owner, group;
    if (!plugin.lotListener.corner.containsKey(user.getName())) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    boolean cor1=plugin.lotListener.corner.get(user.getName()).corner1set;
    boolean cor2=plugin.lotListener.corner.get(user.getName()).corner2set;
    int up, down;
    if (cor1 && cor2) {
      String LotID=plugin.lots.getNextID();
      corner1=plugin.lotListener.corner.get(user.getName()).getCorner1();
      corner2=plugin.lotListener.corner.get(user.getName()).getCorner2();
      World c1world=corner1.getWorld();
      World c2world=corner2.getWorld();
      World pworld=user.getHandle().getWorld();
      if (c1world != pworld && c2world != pworld) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (c1world != pworld && c2world == pworld) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (c1world == pworld && c2world != pworld) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (args.length >= 4) {
        try {
          up=Integer.parseInt(args[1]);
          down=Integer.parseInt(args[2]);
        }
 catch (        NumberFormatException e) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        owner=args[3];
      }
 else       if (args.length >= 3) {
        try {
          up=Integer.parseInt(args[1]);
          down=Integer.parseInt(args[2]);
        }
 catch (        NumberFormatException e) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        owner=user.getName();
      }
 else {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (up < -1 || down < -1) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
      int oldY1=corner1.getBlockY();
      int oldY2=corner2.getBlockY();
      if (up > 0) {
        if (corner1.getBlockY() >= corner2.getBlockY()) {
          corner1.setY(corner1.getY() + up);
        }
 else {
          corner2.setY(corner2.getY() + up);
        }
      }
 else       if (up == -1) {
        if (corner1.getBlockY() >= corner2.getBlockY()) {
          corner1.setY(128);
        }
 else {
          corner2.setY(128);
        }
      }
      if (down > 0) {
        if (corner1.getBlockY() <= corner2.getBlockY()) {
          corner1.setY(corner1.getY() - down);
        }
 else {
          corner2.setY(corner2.getY() - down);
        }
      }
 else       if (down == -1) {
        if (corner1.getBlockY() <= corner2.getBlockY()) {
          corner1.setY(0);
        }
 else {
          corner2.setY(0);
        }
      }
      if (!plugin.perm.groupFile.groupExists(plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str""))) {
        plugin.perm.groupFile.addGroup(new PermissionGroup(plugin,plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str""),new ArrayList<String>(),new ArrayList<String>(),new ArrayList<String>(),""String_Node_Str"",-1,0));
      }
      group=plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str"");
      plugin.lots.addLot(LotID,corner1,corner2,owner,group);
      LotID=plugin.lots.getLot(LotID).getLotID();
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + LotID+ ""String_Node_Str""+ owner);
      corner1.setY(oldY1);
      corner2.setY(oldY2);
      return;
    }
 else {
      if (!cor1 && !cor2)       user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      if (!cor1 && cor2)       user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      if (cor1 && !cor2)       user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    String LotID;
    String SubID=""String_Node_Str"";
    if (args.length == 1) {
      LotID=""String_Node_Str"";
    }
 else {
      LotID=args[1];
    }
    if (args.length >= 3) {
      SubID=args[2];
    }
    if (LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"")) {
      if (user.isServer()) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      Player player=user.getHandle();
      LotID=String.valueOf(plugin.lots.isInLot(player.getLocation())).split(""String_Node_Str"")[0];
      if (LotID == ""String_Node_Str"") {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
    }
    if (!SubID.equalsIgnoreCase(""String_Node_Str"")) {
      if (plugin.lots.lotExists((LotID + ""String_Node_Str"" + SubID))) {
        if (plugin.lots.deleteLot((LotID + ""String_Node_Str"" + SubID))) {
          user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + LotID+ ""String_Node_Str""+ SubID+ ""String_Node_Str"");
          return;
        }
 else {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"" + LotID+ ""String_Node_Str""+ SubID+ ""String_Node_Str"");
      }
      return;
    }
 else     if (plugin.lots.lotExists(LotID)) {
      int size=plugin.lots.getLot(LotID).getSubs().size();
      if (plugin.lots.deleteLot(LotID)) {
        user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + LotID+ ""String_Node_Str""+ size+ ""String_Node_Str"");
        return;
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
    }
 else {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"" + LotID+ ""String_Node_Str"");
    }
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (args.length == 1) {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
      return;
    }
    if (args.length >= 2) {
      String LotID, Owner;
      Owner=args[1];
      if (args.length >= 3) {
        LotID=args[2];
        if (LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"")) {
          if (user.isServer()) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return;
          }
          LotID=String.valueOf(plugin.lots.isInLot(user.getHandle().getLocation()));
          if (LotID == ""String_Node_Str"") {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return;
          }
        }
      }
 else {
        if (user.isServer()) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        LotID=String.valueOf(plugin.lots.isInLot(user.getHandle().getLocation()));
        if (LotID == ""String_Node_Str"") {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
      }
      plugin.lots.getLot(LotID).setOwner(Owner);
      user.sendMessage(ChatColor.GREEN + Owner + ""String_Node_Str""+ LotID);
      return;
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (args.length == 1) {
      int size=0;
      for (      String key : plugin.lots.lot.keySet()) {
        plugin.lots.sortSubs(key.split(""String_Node_Str"")[0]);
        if (key.split(""String_Node_Str"")[1].equalsIgnoreCase(""String_Node_Str""))         size++;
      }
      int[] Lot=new int[size];
      int total=plugin.lots.lot.size();
      int i=0;
      for (      String key : plugin.lots.lot.keySet()) {
        if (key.split(""String_Node_Str"")[1].equalsIgnoreCase(""String_Node_Str"")) {
          Lot[i]=Integer.parseInt((String)key.split(""String_Node_Str"")[0]);
          i++;
        }
      }
      plugin.lots.selectionSort(Lot);
      String list=""String_Node_Str"";
      i=0;
      int r=0;
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + size+ ""String_Node_Str""+ total);
      for (      int key : Lot) {
        String LotIDString=String.valueOf(key);
        list+=LotIDString;
        i++;
        r++;
        if (r < Lot.length)         list+=""String_Node_Str"";
 else         list+=""String_Node_Str"";
        if (i >= 12) {
          user.sendMessage(ChatColor.GRAY + list);
          i=0;
          list=""String_Node_Str"";
        }
      }
      if (!list.equalsIgnoreCase(""String_Node_Str"")) {
        user.sendMessage(ChatColor.GRAY + list);
      }
      return;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"") || args[1].equalsIgnoreCase(""String_Node_Str"")) {
      Player player=user.getHandle();
      Location location=player.getLocation();
      int total=0;
      if (plugin.lots.isInLot(location).equalsIgnoreCase(""String_Node_Str"")) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
 else {
        for (        String LotID : plugin.lots.lot.keySet()) {
          if (plugin.lots.getLot(LotID).withinLot(location)) {
            total++;
          }
        }
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + total+ ""String_Node_Str"");
      }
      String list=""String_Node_Str"";
      int i=0, r=0;
      List<String> usedIDs=new ArrayList<String>();
      for (      String LotID : plugin.lots.lot.keySet()) {
        if (!plugin.lots.getLot(LotID).withinLot(location)) {
          continue;
        }
        LotID=LotID.split(""String_Node_Str"")[0];
        if (!usedIDs.contains(LotID)) {
          usedIDs.add(LotID);
          list+=LotID;
          i++;
          r++;
          if (r < total)           list+=""String_Node_Str"";
 else           list+=""String_Node_Str"";
          if (i >= 3) {
            user.sendMessage(ChatColor.GRAY + list);
            i=0;
            list=""String_Node_Str"";
          }
        }
      }
      if (!list.equalsIgnoreCase(""String_Node_Str"")) {
        user.sendMessage(ChatColor.YELLOW + list);
      }
      return;
    }
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length == 2) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      String owner=args[2];
      int total=0;
      List<String> usedIDs=new ArrayList<String>();
      for (      String LotID : plugin.lots.lot.keySet()) {
        if (plugin.lots.getLot(LotID).getOwner().equalsIgnoreCase(owner) && !usedIDs.contains(LotID.split(""String_Node_Str"")[0])) {
          usedIDs.add(LotID.split(""String_Node_Str"")[0]);
        }
      }
      user.sendMessage(ChatColor.GRAY + owner + ""String_Node_Str""+ usedIDs.size()+ ""String_Node_Str"");
      String list=""String_Node_Str"";
      int i=0, r=0;
      for (      String LotID : usedIDs) {
        list+=LotID;
        i++;
        r++;
        if (r < total)         list+=""String_Node_Str"";
 else         list+=""String_Node_Str"";
        if (i >= 3) {
          user.sendMessage(ChatColor.GRAY + list);
          i=0;
          list=""String_Node_Str"";
        }
      }
      if (!list.equalsIgnoreCase(""String_Node_Str"")) {
        user.sendMessage(ChatColor.GRAY + list);
      }
      return;
    }
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    String LotID, group;
    Player player=user.getHandle();
    if (args.length < 2) {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    if (args.length == 2) {
      group=args[1];
      LotID=plugin.lots.ownsHere(player,player.getLocation());
      if (LotID.equalsIgnoreCase(""String_Node_Str"") && !user.hasPerm(""String_Node_Str"")) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (LotID.equalsIgnoreCase(""String_Node_Str"")) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (LotID.equalsIgnoreCase(""String_Node_Str"")) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      Lot lot=plugin.lots.getLot(LotID);
      lot.setGroup(group);
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + LotID.split(""String_Node_Str"")[0]+ ""String_Node_Str""+ group+ ""String_Node_Str"");
      return;
    }
 else     if (args.length >= 3) {
      group=args[1];
      LotID=args[2];
      if (LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"")) {
        if (user.isServer()) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        LotID=plugin.lots.ownsHere(player,player.getLocation());
        if (LotID.equalsIgnoreCase(""String_Node_Str"")) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (LotID.equalsIgnoreCase(""String_Node_Str"")) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (LotID.equalsIgnoreCase(""String_Node_Str"")) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
      }
 else {
        if (!plugin.lots.lotExists(LotID)) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
      }
      Lot lot=plugin.lots.getLot(LotID);
      if (!user.hasPerm(""String_Node_Str"") && !lot.isOwner(player)) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      lot.setGroup(group);
      LotID=lot.getLotID();
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + LotID+ ""String_Node_Str""+ group+ ""String_Node_Str"");
      return;
    }
 else {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")|| args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (user.isServer()) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    Location corner1;
    Location corner2;
    String LotID;
    if (!plugin.lotListener.corner.containsKey(user.getName())) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    Player player=user.getHandle();
    if (args.length >= 2)     LotID=args[1];
 else     LotID=""String_Node_Str"";
    if (LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"")) {
      LotID=String.valueOf(plugin.lots.isInLot(player.getLocation()));
      if (LotID == ""String_Node_Str"") {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (LotID.split(""String_Node_Str"").length == 2) {
        LotID=LotID.split(""String_Node_Str"")[0];
      }
    }
 else {
      if (!plugin.lots.lotExists(LotID)) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
    }
    boolean cor1=plugin.lotListener.corner.get(user.getName()).corner1set;
    boolean cor2=plugin.lotListener.corner.get(user.getName()).corner2set;
    if (cor1 && cor2) {
      corner1=plugin.lotListener.corner.get(user.getName()).getCorner1();
      corner2=plugin.lotListener.corner.get(user.getName()).getCorner2();
      World c1world=corner1.getWorld();
      World c2world=corner2.getWorld();
      World pworld=user.getHandle().getWorld();
      if (c1world != pworld && c2world != pworld) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (c1world != pworld && c2world == pworld) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (c1world == pworld && c2world != pworld) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      String group=plugin.lots.getLot(LotID).getLotGroup();
      String owner=plugin.lots.getLot(LotID).getOwner();
      plugin.lots.sortSubs(LotID);
      String SubID=plugin.lots.getNextSubID(LotID);
      plugin.lots.addLot(LotID + ""String_Node_Str"" + SubID,corner1,corner2,owner,group);
      LotID=plugin.lots.getLot(LotID).getLotID();
      int SubSize=plugin.lots.getLot(LotID).getSubs().size();
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + LotID+ ""String_Node_Str""+ SubID+ ""String_Node_Str""+ SubSize+ ""String_Node_Str"");
      return;
    }
 else {
      if (!cor1 && !cor2)       user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      if (!cor1 && cor2)       user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      if (cor1 && !cor2)       user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")|| args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (user.isServer()) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    Player player=user.getHandle();
    Location corner1;
    Location corner2;
    String LotID;
    if (!plugin.lotListener.corner.containsKey(user.getName())) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    boolean cor1=plugin.lotListener.corner.get(user.getName()).corner1set;
    boolean cor2=plugin.lotListener.corner.get(user.getName()).corner2set;
    int up, down;
    if (cor1 && cor2) {
      corner1=plugin.lotListener.corner.get(user.getName()).getCorner1();
      corner2=plugin.lotListener.corner.get(user.getName()).getCorner2();
      World c1world=corner1.getWorld();
      World c2world=corner2.getWorld();
      World pworld=user.getHandle().getWorld();
      if (c1world != pworld && c2world != pworld) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (c1world != pworld && c2world == pworld) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (c1world == pworld && c2world != pworld) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (args.length >= 4) {
        try {
          up=Integer.parseInt(args[1]);
          down=Integer.parseInt(args[2]);
        }
 catch (        NumberFormatException e) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        LotID=args[3];
      }
 else       if (args.length == 3) {
        try {
          up=Integer.parseInt(args[1]);
          down=Integer.parseInt(args[2]);
        }
 catch (        NumberFormatException e) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        LotID=""String_Node_Str"";
      }
 else {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (up < -1 || down < -1) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
      LotID=LotID.split(""String_Node_Str"")[0];
      if (LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"") || LotID.equalsIgnoreCase(""String_Node_Str"")) {
        LotID=String.valueOf(plugin.lots.isInLot(player.getLocation()));
        if (LotID == ""String_Node_Str"") {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (LotID.split(""String_Node_Str"").length == 2) {
          LotID=LotID.split(""String_Node_Str"")[0];
        }
      }
 else {
        if (!plugin.lots.lotExists(LotID)) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
      }
      int oldY1=corner1.getBlockY();
      int oldY2=corner2.getBlockY();
      if (up > 0) {
        if (corner1.getBlockY() >= corner2.getBlockY()) {
          corner1.setY(corner1.getY() + up);
        }
 else {
          corner2.setY(corner2.getY() + up);
        }
      }
 else       if (up == -1) {
        if (corner1.getBlockY() >= corner2.getBlockY()) {
          corner1.setY(128);
        }
 else {
          corner2.setY(128);
        }
      }
      if (down > 0) {
        if (corner1.getBlockY() <= corner2.getBlockY()) {
          corner1.setY(corner1.getY() - down);
        }
 else {
          corner2.setY(corner2.getY() - down);
        }
      }
 else       if (down == -1) {
        if (corner1.getBlockY() <= corner2.getBlockY()) {
          corner1.setY(0);
        }
 else {
          corner2.setY(0);
        }
      }
      String owner=plugin.lots.getLot(LotID).getOwner();
      String group=plugin.lots.getLot(LotID).getLotGroup();
      plugin.lots.sortSubs(LotID);
      String SubID=plugin.lots.getNextSubID(LotID);
      plugin.lots.addLot(LotID + ""String_Node_Str"" + SubID,corner1,corner2,owner,group);
      int SubSize=plugin.lots.getLot(LotID).getSubs().size();
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + LotID+ ""String_Node_Str""+ SubID+ ""String_Node_Str""+ SubSize+ ""String_Node_Str"");
      corner1.setY(oldY1);
      corner2.setY(oldY2);
      return;
    }
 else {
      if (!cor1 && !cor2)       user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      if (!cor1 && cor2)       user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      if (cor1 && !cor2)       user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    return;
  }
  user.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str"");
  user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
  return;
}",0.9994906765513144
179078,"public String readReport(Boolean isAdmin){
  if (this.status == ReportStatus.UNREAD && isAdmin) {
    this.status=ReportStatus.READ;
    plugin.reports.saveTicket(this);
  }
  String message=""String_Node_Str"";
  message+=ChatColor.GRAY + ""String_Node_Str"" + this.status.toString()+ ""String_Node_Str""+ this.idNumber.toString()+ ""String_Node_Str"";
  message+=ChatColor.GRAY + this.sender.getName() + ""String_Node_Str""+ this.accused.getName()+ ""String_Node_Str"";
  message+=ChatColor.GRAY + ""String_Node_Str"" + this.reason;
  if (!this.addedInfo.isEmpty() && !this.addedInfo.get(0).isEmpty()) {
    message+=""String_Node_Str"" + ChatColor.GRAY + ""String_Node_Str"";
    for (    String info : addedInfo) {
      message+=""String_Node_Str"" + ChatColor.GRAY + ""String_Node_Str""+ info;
    }
  }
  if (this.status == ReportStatus.CLOSED || this.status == ReportStatus.LOCKED) {
    message+=""String_Node_Str"" + ChatColor.GRAY + ""String_Node_Str""+ this.finalRemark;
  }
  return message;
}","public String readReport(Boolean isAdmin,Boolean isAnon){
  if (this.status == ReportStatus.UNREAD && isAdmin) {
    this.status=ReportStatus.READ;
    plugin.reports.saveTicket(this);
  }
  String message=""String_Node_Str"";
  message+=ChatColor.GRAY + ""String_Node_Str"" + this.status.toString()+ ""String_Node_Str""+ this.idNumber.toString()+ ""String_Node_Str"";
  if (isAnon) {
    message+=ChatColor.GRAY + ""String_Node_Str"" + this.accused.getName()+ ""String_Node_Str"";
  }
 else {
    message+=ChatColor.GRAY + this.sender.getName() + ""String_Node_Str""+ this.accused.getName()+ ""String_Node_Str"";
  }
  message+=ChatColor.GRAY + ""String_Node_Str"" + this.reason;
  if (!this.addedInfo.isEmpty() && !this.addedInfo.get(0).isEmpty()) {
    message+=""String_Node_Str"" + ChatColor.GRAY + ""String_Node_Str"";
    for (    String info : addedInfo) {
      message+=""String_Node_Str"" + ChatColor.GRAY + ""String_Node_Str""+ info;
    }
  }
  if (this.status == ReportStatus.CLOSED || this.status == ReportStatus.LOCKED) {
    message+=""String_Node_Str"" + ChatColor.GRAY + ""String_Node_Str""+ this.finalRemark;
  }
  return message;
}",0.8934348239771646
179079,"public void Ticket(String[] args,User user){
  if (args.length == 0) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    int page=1;
    if (args.length > 1) {
      try {
        page=Integer.parseInt(args[1]);
      }
 catch (      NumberFormatException e) {
        user.sendMessage(ChatColor.RED + args[1] + ""String_Node_Str"");
        return;
      }
    }
    plugin.reports.listTickets(user,page);
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    int page=1;
    if (args.length > 1) {
      try {
        page=Integer.parseInt(args[1]);
      }
 catch (      NumberFormatException e) {
        user.sendMessage(ChatColor.RED + args[1] + ""String_Node_Str"");
        return;
      }
    }
    plugin.reports.listAllTickets(user,page);
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    plugin.reports.PurgeOpen(user);
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (args.length != 2) {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    plugin.reports.PurgeFrom(user,args[1]);
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (args.length != 2) {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    plugin.reports.PurgeTo(user,args[1]);
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (args.length == 1) {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    int page=1;
    if (args.length == 3) {
      try {
        page=Integer.parseInt(args[2]);
      }
 catch (      NumberFormatException e) {
        user.sendMessage(ChatColor.RED + args[2] + ""String_Node_Str"");
        return;
      }
    }
    plugin.reports.searchTickets(user,args[1],page);
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (args.length == 1) {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    int page=1;
    if (args.length == 3) {
      try {
        page=Integer.parseInt(args[2]);
      }
 catch (      NumberFormatException e) {
        user.sendMessage(ChatColor.RED + args[2] + ""String_Node_Str"");
        return;
      }
    }
    plugin.reports.searchAllTickets(user,args[1],page);
  }
 else {
    Integer id;
    try {
      id=Integer.parseInt(args[0]);
    }
 catch (    NumberFormatException e) {
      user.sendMessage(ChatColor.RED + args[0] + ""String_Node_Str"");
      return;
    }
    Report report=plugin.reports.getTicketById(id);
    if (report == null) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
      return;
    }
    if (args.length == 1) {
      for (      String s : plugin.reports.getTicketById(id).readReport(user.hasPerm(""String_Node_Str"")).split(""String_Node_Str"")) {
        user.sendMessage(s);
      }
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (user.hasPerm(""String_Node_Str"")) {
        if (report.getStatus() == Report.ReportStatus.LOCKED) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (report.getStatus() == Report.ReportStatus.CLOSED) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (args.length == 2) {
          report.closeTicket(""String_Node_Str"");
          plugin.log.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
          plugin.bLog.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
          user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + report.getId()+ ""String_Node_Str"");
        }
 else {
          String reason=""String_Node_Str"";
          for (int i=2; i < args.length; i++) {
            if (reason.equalsIgnoreCase(""String_Node_Str"")) {
              reason+=args[i];
            }
 else {
              reason+=""String_Node_Str"" + args[i];
            }
          }
          report.closeTicket(reason);
          plugin.log.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str""+ reason);
          plugin.bLog.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str""+ reason);
          user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + report.getId()+ ""String_Node_Str"");
        }
      }
 else {
        if (report.canBasicChange(user)) {
          if (report.getStatus() == Report.ReportStatus.LOCKED) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return;
          }
          if (report.getStatus() == Report.ReportStatus.CLOSED) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return;
          }
          report.closeTicket(""String_Node_Str"");
          user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + report.getId()+ ""String_Node_Str"");
          plugin.log.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
          plugin.bLog.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
        }
 else {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (user.hasPerm(""String_Node_Str"")) {
        if (report.getStatus() == Report.ReportStatus.LOCKED) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (report.getStatus() != Report.ReportStatus.CLOSED) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        report.reopenTicket(true);
        plugin.log.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
        plugin.bLog.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
        user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      }
 else       if (report.canBasicChange(user)) {
        if (report.getStatus() == Report.ReportStatus.LOCKED) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (report.getStatus() != Report.ReportStatus.CLOSED) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (report.reopenTicket(false)) {
          plugin.log.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
          plugin.bLog.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
          user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        }
 else {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (user.hasPerm(""String_Node_Str"") && report.canBasicChange(user)) {
        if (report.getStatus() == Report.ReportStatus.LOCKED) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (args.length > 2) {
          String reason=""String_Node_Str"";
          for (int i=2; i < args.length; i++) {
            if (reason.equalsIgnoreCase(""String_Node_Str"")) {
              reason+=args[i];
            }
 else {
              reason+=""String_Node_Str"" + args[i];
            }
          }
          report.lockTicket(reason);
        }
 else         if (report.getRemark().equalsIgnoreCase(""String_Node_Str"")) {
          report.lockTicket(report.getRemark());
        }
 else {
          report.lockTicket(""String_Node_Str"");
        }
        user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        plugin.log.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
        plugin.bLog.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (user.hasPerm(""String_Node_Str"") && report.canBasicChange(user)) {
        if (report.getStatus() == Report.ReportStatus.LOCKED) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        report.InvestigateTicket();
        user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        plugin.log.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
        plugin.bLog.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (user.hasPerm(""String_Node_Str"") && report.canBasicChange(user)) {
        if (report.getStatus() == Report.ReportStatus.LOCKED) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        report.UninvestigateTicket();
        user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        plugin.log.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
        plugin.bLog.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (report.canBasicChange(user)) {
        if (report.getStatus() == Report.ReportStatus.LOCKED) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (report.getStatus() == Report.ReportStatus.CLOSED && !user.hasPerm(""String_Node_Str"")) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"" + report.getId()+ ""String_Node_Str"");
          return;
        }
        if (report.getStatus() == Report.ReportStatus.INVESTIGATING && !user.hasPerm(""String_Node_Str"")) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (args.length == 2) {
          user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return;
        }
        String newInfo=""String_Node_Str"";
        for (int i=2; i < args.length; i++) {
          if (newInfo.equalsIgnoreCase(""String_Node_Str"")) {
            newInfo+=args[i];
          }
 else {
            newInfo+=""String_Node_Str"" + args[i];
          }
        }
        report.addInfo(newInfo);
        if (!user.hasPerm(""String_Node_Str"")) {
          report.setStatus(Report.ReportStatus.UNREAD);
        }
        user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        plugin.log.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
        plugin.bLog.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
        if (user.hasPerm(""String_Node_Str"")) {
          return;
        }
        for (        Player onlinePlayer : plugin.getServer().getOnlinePlayers()) {
          User onlineUser;
          if ((onlineUser=User.getUser(plugin,onlinePlayer)).hasPerm(""String_Node_Str"")) {
            onlineUser.sendMessage(ChatColor.RED + ""String_Node_Str"" + id+ ""String_Node_Str"");
          }
        }
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    }
  }
}","public void Ticket(String[] args,User user){
  if (args.length == 0) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    int page=1;
    if (args.length > 1) {
      try {
        page=Integer.parseInt(args[1]);
      }
 catch (      NumberFormatException e) {
        user.sendMessage(ChatColor.RED + args[1] + ""String_Node_Str"");
        return;
      }
    }
    plugin.reports.listTickets(user,page);
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    int page=1;
    if (args.length > 1) {
      try {
        page=Integer.parseInt(args[1]);
      }
 catch (      NumberFormatException e) {
        user.sendMessage(ChatColor.RED + args[1] + ""String_Node_Str"");
        return;
      }
    }
    plugin.reports.listAllTickets(user,page);
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    plugin.reports.PurgeOpen(user);
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (args.length != 2) {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    plugin.reports.PurgeFrom(user,args[1]);
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (args.length != 2) {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    plugin.reports.PurgeTo(user,args[1]);
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (args.length == 1) {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    int page=1;
    if (args.length == 3) {
      try {
        page=Integer.parseInt(args[2]);
      }
 catch (      NumberFormatException e) {
        user.sendMessage(ChatColor.RED + args[2] + ""String_Node_Str"");
        return;
      }
    }
    plugin.reports.searchTickets(user,args[1],page);
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (!user.hasPerm(""String_Node_Str"")) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (args.length == 1) {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    int page=1;
    if (args.length == 3) {
      try {
        page=Integer.parseInt(args[2]);
      }
 catch (      NumberFormatException e) {
        user.sendMessage(ChatColor.RED + args[2] + ""String_Node_Str"");
        return;
      }
    }
    plugin.reports.searchAllTickets(user,args[1],page);
  }
 else {
    Integer id;
    try {
      id=Integer.parseInt(args[0]);
    }
 catch (    NumberFormatException e) {
      user.sendMessage(ChatColor.RED + args[0] + ""String_Node_Str"");
      return;
    }
    Report report=plugin.reports.getTicketById(id);
    if (report == null) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
      return;
    }
    if (!report.canRead(user)) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (args.length == 1) {
      for (      String s : report.readReport(user.hasPerm(""String_Node_Str""),user.getName().equals(report.getAccused().getName()) && !user.hasPerm(""String_Node_Str"")).split(""String_Node_Str"")) {
        user.sendMessage(s);
      }
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (user.hasPerm(""String_Node_Str"")) {
        if (report.getStatus() == Report.ReportStatus.LOCKED) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (report.getStatus() == Report.ReportStatus.CLOSED) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (args.length == 2) {
          report.closeTicket(""String_Node_Str"");
          plugin.log.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
          plugin.bLog.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
          user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + report.getId()+ ""String_Node_Str"");
        }
 else {
          String reason=""String_Node_Str"";
          for (int i=2; i < args.length; i++) {
            if (reason.equalsIgnoreCase(""String_Node_Str"")) {
              reason+=args[i];
            }
 else {
              reason+=""String_Node_Str"" + args[i];
            }
          }
          report.closeTicket(reason);
          plugin.log.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str""+ reason);
          plugin.bLog.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str""+ reason);
          user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + report.getId()+ ""String_Node_Str"");
        }
      }
 else {
        if (report.canBasicChange(user)) {
          if (report.getStatus() == Report.ReportStatus.LOCKED) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return;
          }
          if (report.getStatus() == Report.ReportStatus.CLOSED) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return;
          }
          report.closeTicket(""String_Node_Str"");
          user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + report.getId()+ ""String_Node_Str"");
          plugin.log.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
          plugin.bLog.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
        }
 else {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (user.hasPerm(""String_Node_Str"")) {
        if (report.getStatus() == Report.ReportStatus.LOCKED) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (report.getStatus() != Report.ReportStatus.CLOSED) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        report.reopenTicket(true);
        plugin.log.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
        plugin.bLog.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
        user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      }
 else       if (report.canBasicChange(user)) {
        if (report.getStatus() == Report.ReportStatus.LOCKED) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (report.getStatus() != Report.ReportStatus.CLOSED) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (report.reopenTicket(false)) {
          plugin.log.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
          plugin.bLog.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
          user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        }
 else {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (user.hasPerm(""String_Node_Str"") && report.canBasicChange(user)) {
        if (report.getStatus() == Report.ReportStatus.LOCKED) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (args.length > 2) {
          String reason=""String_Node_Str"";
          for (int i=2; i < args.length; i++) {
            if (reason.equalsIgnoreCase(""String_Node_Str"")) {
              reason+=args[i];
            }
 else {
              reason+=""String_Node_Str"" + args[i];
            }
          }
          report.lockTicket(reason);
        }
 else         if (report.getRemark().equalsIgnoreCase(""String_Node_Str"")) {
          report.lockTicket(report.getRemark());
        }
 else {
          report.lockTicket(""String_Node_Str"");
        }
        user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        plugin.log.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
        plugin.bLog.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (user.hasPerm(""String_Node_Str"") && report.canBasicChange(user)) {
        if (report.getStatus() == Report.ReportStatus.LOCKED) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        report.InvestigateTicket();
        user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        plugin.log.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
        plugin.bLog.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (user.hasPerm(""String_Node_Str"") && report.canBasicChange(user)) {
        if (report.getStatus() == Report.ReportStatus.LOCKED) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        report.UninvestigateTicket();
        user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        plugin.log.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
        plugin.bLog.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (report.canBasicChange(user)) {
        if (report.getStatus() == Report.ReportStatus.LOCKED) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (report.getStatus() == Report.ReportStatus.CLOSED && !user.hasPerm(""String_Node_Str"")) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"" + report.getId()+ ""String_Node_Str"");
          return;
        }
        if (report.getStatus() == Report.ReportStatus.INVESTIGATING && !user.hasPerm(""String_Node_Str"")) {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
        if (args.length == 2) {
          user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return;
        }
        String newInfo=""String_Node_Str"";
        for (int i=2; i < args.length; i++) {
          if (newInfo.equalsIgnoreCase(""String_Node_Str"")) {
            newInfo+=args[i];
          }
 else {
            newInfo+=""String_Node_Str"" + args[i];
          }
        }
        report.addInfo(newInfo);
        if (!user.hasPerm(""String_Node_Str"")) {
          report.setStatus(Report.ReportStatus.UNREAD);
        }
        user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        plugin.log.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
        plugin.bLog.info(user.getDisplayName() + ""String_Node_Str"" + id.toString()+ ""String_Node_Str"");
        if (user.hasPerm(""String_Node_Str"")) {
          return;
        }
        for (        Player onlinePlayer : plugin.getServer().getOnlinePlayers()) {
          User onlineUser;
          if ((onlineUser=User.getUser(plugin,onlinePlayer)).hasPerm(""String_Node_Str"")) {
            onlineUser.sendMessage(ChatColor.RED + ""String_Node_Str"" + id+ ""String_Node_Str"");
          }
        }
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    }
  }
}",0.9893586659599624
179080,"public void showTickets(List<Report> reports,int page,User user){
  HashMap<Integer,List<Report>> pages=new HashMap<Integer,List<Report>>();
  int cpage=1;
  for (  Report r : reports) {
    if (pages.containsKey(cpage)) {
      pages.get(cpage).add(r);
      if (pages.get(cpage).size() == 10) {
        cpage++;
      }
    }
 else {
      List<Report> t=new ArrayList<Report>();
      t.add(r);
      pages.put(cpage,t);
    }
  }
  if (!pages.containsKey(cpage)) {
    cpage--;
  }
  if (page <= 0) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (page > cpage) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"" + cpage+ ""String_Node_Str"");
    return;
  }
  if (cpage != 1) {
    user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + ChatColor.GREEN+ page+ ChatColor.GRAY+ ""String_Node_Str""+ ChatColor.GREEN+ cpage);
  }
  for (  Report r : pages.get(page)) {
switch (r.getStatus()) {
case UNREAD:
      user.sendMessage(ChatColor.RED + r.readShorthand());
    break;
case READ:
  user.sendMessage(ChatColor.YELLOW + r.readShorthand());
break;
case INVESTIGATING:
user.sendMessage(ChatColor.GREEN + r.readShorthand());
break;
case CLOSED:
user.sendMessage(ChatColor.GRAY + r.readShorthand());
break;
case LOCKED:
user.sendMessage(ChatColor.DARK_GRAY + r.readShorthand());
break;
}
}
}","public void showTickets(List<Report> reports,int page,User user){
  HashMap<Integer,List<Report>> pages=new HashMap<Integer,List<Report>>();
  int cpage=1;
  for (  Report r : reports) {
    if (pages.containsKey(cpage)) {
      pages.get(cpage).add(r);
      if (pages.get(cpage).size() == 10) {
        cpage++;
      }
    }
 else {
      List<Report> t=new ArrayList<Report>();
      t.add(r);
      pages.put(cpage,t);
    }
  }
  if (!pages.containsKey(cpage)) {
    cpage--;
  }
  if (page <= 0) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (page > cpage) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"" + cpage+ ""String_Node_Str"");
    return;
  }
  if (cpage != 1) {
    user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + ChatColor.GREEN+ page+ ChatColor.GRAY+ ""String_Node_Str""+ ChatColor.GREEN+ cpage);
  }
  for (  Report r : pages.get(page)) {
switch (r.getStatus()) {
case UNREAD:
      if (user.getName().equals(r.getAccused().getName()) && !user.hasPerm(""String_Node_Str"")) {
        user.sendMessage(ChatColor.RED + r.readShorthandAnon());
      }
 else {
        user.sendMessage(ChatColor.RED + r.readShorthand());
      }
    break;
case READ:
  if (user.getName().equals(r.getAccused().getName()) && !user.hasPerm(""String_Node_Str"")) {
    user.sendMessage(ChatColor.YELLOW + r.readShorthandAnon());
  }
 else {
    user.sendMessage(ChatColor.YELLOW + r.readShorthand());
  }
break;
case INVESTIGATING:
if (user.getName().equals(r.getAccused().getName()) && !user.hasPerm(""String_Node_Str"")) {
user.sendMessage(ChatColor.GREEN + r.readShorthandAnon());
}
 else {
user.sendMessage(ChatColor.GREEN + r.readShorthand());
}
break;
case CLOSED:
if (user.getName().equals(r.getAccused().getName()) && !user.hasPerm(""String_Node_Str"")) {
user.sendMessage(ChatColor.GRAY + r.readShorthandAnon());
}
 else {
user.sendMessage(ChatColor.GRAY + r.readShorthand());
}
break;
case LOCKED:
if (user.getName().equals(r.getAccused().getName()) && !user.hasPerm(""String_Node_Str"")) {
user.sendMessage(ChatColor.DARK_GRAY + r.readShorthandAnon());
}
 else {
user.sendMessage(ChatColor.DARK_GRAY + r.readShorthand());
}
break;
}
}
}",0.7457240592930444
179081,"@Override public void onEnable(){
  this.setNaggable(false);
  try {
    String logName=""String_Node_Str"";
    Calendar c=Calendar.getInstance();
    clog=c;
    logName+=c.get(Calendar.MONTH);
    logName+=""String_Node_Str"" + c.get(Calendar.DAY_OF_MONTH);
    logName+=""String_Node_Str"" + c.get(Calendar.YEAR);
    bLog.setLevel(Level.INFO);
    bLog.setUseParentHandlers(false);
    fh=new FileHandler(propDir + logName + ""String_Node_Str"",true);
    fh.setFormatter(new LogFormatter());
    bLog.addHandler(fh);
  }
 catch (  IOException e) {
    log.severe(""String_Node_Str"");
  }
  bLog.info(""String_Node_Str"" + getDescription().getVersion());
  bLog.info(""String_Node_Str"");
  if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
    spoutcraft=true;
    bLog.info(""String_Node_Str"");
  }
 else {
    spoutcraft=false;
    bLog.warning(""String_Node_Str"");
    log.warning(""String_Node_Str"");
  }
  bLog.info(""String_Node_Str"");
  new File(propDir).mkdirs();
  for (  String f : files) {
    File file;
    if (!(file=new File(propDir + f)).exists()) {
      bLog.info(""String_Node_Str"" + f + ""String_Node_Str"");
      try {
        file.createNewFile();
      }
 catch (      IOException e) {
        bLog.log(Level.SEVERE,""String_Node_Str"" + f + ""String_Node_Str"",e);
        System.out.println(""String_Node_Str"");
        e.printStackTrace();
      }
    }
  }
  User.finalizeAll();
  bLog.info(""String_Node_Str"");
  perm=new MainPermissions(this);
  warps=new WarpList(this);
  homes=new HomeWarps(this);
  checkpoints=new PreWarp(this);
  blockCheck=new BlockChecker(this);
  mainProperties=new PluginProperties(propDir + ""String_Node_Str"");
  mainProperties.loadFile();
  itemAliases=new PluginProperties(propDir + ""String_Node_Str"");
  itemAliases.loadFile();
  chatListen=new ChatPlayerListener(this);
  jail=new Jail(this);
  dispensers=new UnlimitedDisp(propDir + ""String_Node_Str"");
  chests=new DispChest(propDir + ""String_Node_Str"");
  lots=new LotFile(this);
  kits=new KitList(this);
  creeperListen=new CreeperListener(this);
  inv=new Invisibility(this);
  protectFile=new ProtectFile(this,propDir + ""String_Node_Str"");
  channels=new ChatChannelController(propDir + ""String_Node_Str"",this);
  maxPlayers=new MaxPlayers(this,mainProperties.getInteger(""String_Node_Str"",10),mainProperties.getInteger(""String_Node_Str"",4),mainProperties.getBoolean(""String_Node_Str"",true),mainProperties.getBoolean(""String_Node_Str"",true));
  reports=new ReportFile(this);
  flyDetect=new FlyDetect(this);
  strikeBind=new WeatherBinding(this);
  prices=new PriceFile(this,propDir + ""String_Node_Str"");
  kicked=new KickList(this);
  portals=new PortalFile(this,propDir + ""String_Node_Str"");
  shelff=new ShelfFile(this,propDir + ""String_Node_Str"");
  actions=new ActionFile(this);
  spafile=new SPAreaFile(this,propDir + ""String_Node_Str"");
  banks=new BankFile(this,propDir + ""String_Node_Str"");
  npcs=new NPCFile(this,propDir + ""String_Node_Str"");
  levers=new RedstoneFile(this,propDir + ""String_Node_Str"");
  bLog.info(""String_Node_Str"");
  if (!sanityCheck()) {
    this.getServer().getPluginManager().disablePlugin(this);
    return;
  }
  for (  Player player : this.getServer().getOnlinePlayers()) {
    User user;
    JoinType jt=maxPlayers.join(user=User.getUser(this,player));
    if (jt == JoinType.NO_SLOT_NORMAL || jt == JoinType.NO_SLOT_RESERVED) {
      user.Kick(""String_Node_Str"");
    }
    if (spoutcraft && ((SpoutPlayer)player).isSpoutCraftEnabled()) {
      SpoutPlayer p=(SpoutPlayer)player;
      if (p.getVersion() > 4) {
        for (        NPC n : BenCmd.getPlugin().npcs.allNPCs()) {
          if (n.isSpawned()) {
            p.sendPacket(new PacketSkinURL(n.getEntityId(),n.getSkinURL()));
          }
        }
      }
    }
  }
  bLog.info(""String_Node_Str"");
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_JOIN,this.chatListen,Event.Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_LOGIN,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.blockCheck,Event.Priority.High,this);
  pm.registerEvent(Event.Type.BLOCK_BURN,this.blockCheck,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_IGNITE,this.blockCheck,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.SIGN_CHANGE,this.blockCheck,Event.Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.invPlayerListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.invBlockListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,this.death,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,this.death,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.REDSTONE_CHANGE,this.invBlockListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.lotBListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.lotBListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_PICKUP_ITEM,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_DROP_ITEM,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,this.creeperListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.pbListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.ppListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_BUCKET_EMPTY,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_BUCKET_FILL,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_KICK,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.EXPLOSION_PRIME,this.entListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.wpListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_PORTAL,this.portalListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.shelflp,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.shelflb,Event.Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_MOVE,this.spaplisten,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_RESPAWN,this.spaplisten,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,this.spaelisten,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,this.spaelisten,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_TELEPORT,this.flyListen,Event.Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_PORTAL,this.flyListen,Event.Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT_ENTITY,this.npcl,Event.Priority.Monitor,this);
  pm.registerEvent(Event.Type.CHUNK_LOAD,this.npccl,Event.Priority.Monitor,this);
  pm.registerEvent(Event.Type.CHUNK_UNLOAD,this.npccl,Event.Priority.Monitor,this);
  pm.registerEvent(Event.Type.CUSTOM_EVENT,new BenCmdSpoutListener(),Event.Priority.Normal,this);
  PluginDescriptionFile pdfFile=this.getDescription();
  bLog.info(""String_Node_Str"");
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new Update(),36000,36000);
  bLog.info(""String_Node_Str"");
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new TimeFreeze(),100,100);
  bLog.info(""String_Node_Str"");
  log.info(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str""+ buildId+ ""String_Node_Str"");
  for (  World w : getServer().getWorlds()) {
    w.setPVP(true);
  }
  if (!mainProperties.getBoolean(""String_Node_Str"",false)) {
    log.severe(""String_Node_Str"");
  }
}","@Override public void onEnable(){
  this.setNaggable(false);
  try {
    String logName=""String_Node_Str"";
    Calendar c=Calendar.getInstance();
    clog=c;
    logName+=c.get(Calendar.MONTH);
    logName+=""String_Node_Str"" + c.get(Calendar.DAY_OF_MONTH);
    logName+=""String_Node_Str"" + c.get(Calendar.YEAR);
    bLog.setLevel(Level.INFO);
    bLog.setUseParentHandlers(false);
    fh=new FileHandler(propDir + logName + ""String_Node_Str"",true);
    fh.setFormatter(new LogFormatter());
    bLog.addHandler(fh);
  }
 catch (  IOException e) {
    log.severe(""String_Node_Str"");
  }
  bLog.info(""String_Node_Str"" + getDescription().getVersion());
  bLog.info(""String_Node_Str"");
  if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
    spoutcraft=true;
    spoutconnect=new SpoutConnector();
    bLog.info(""String_Node_Str"");
  }
 else {
    spoutcraft=false;
    bLog.warning(""String_Node_Str"");
    log.warning(""String_Node_Str"");
  }
  bLog.info(""String_Node_Str"");
  new File(propDir).mkdirs();
  for (  String f : files) {
    File file;
    if (!(file=new File(propDir + f)).exists()) {
      bLog.info(""String_Node_Str"" + f + ""String_Node_Str"");
      try {
        file.createNewFile();
      }
 catch (      IOException e) {
        bLog.log(Level.SEVERE,""String_Node_Str"" + f + ""String_Node_Str"",e);
        System.out.println(""String_Node_Str"");
        e.printStackTrace();
      }
    }
  }
  User.finalizeAll();
  bLog.info(""String_Node_Str"");
  perm=new MainPermissions(this);
  warps=new WarpList(this);
  homes=new HomeWarps(this);
  checkpoints=new PreWarp(this);
  blockCheck=new BlockChecker(this);
  mainProperties=new PluginProperties(propDir + ""String_Node_Str"");
  mainProperties.loadFile();
  itemAliases=new PluginProperties(propDir + ""String_Node_Str"");
  itemAliases.loadFile();
  chatListen=new ChatPlayerListener(this);
  jail=new Jail(this);
  dispensers=new UnlimitedDisp(propDir + ""String_Node_Str"");
  chests=new DispChest(propDir + ""String_Node_Str"");
  lots=new LotFile(this);
  kits=new KitList(this);
  creeperListen=new CreeperListener(this);
  inv=new Invisibility(this);
  protectFile=new ProtectFile(this,propDir + ""String_Node_Str"");
  channels=new ChatChannelController(propDir + ""String_Node_Str"",this);
  maxPlayers=new MaxPlayers(this,mainProperties.getInteger(""String_Node_Str"",10),mainProperties.getInteger(""String_Node_Str"",4),mainProperties.getBoolean(""String_Node_Str"",true),mainProperties.getBoolean(""String_Node_Str"",true));
  reports=new ReportFile(this);
  flyDetect=new FlyDetect(this);
  strikeBind=new WeatherBinding(this);
  prices=new PriceFile(this,propDir + ""String_Node_Str"");
  kicked=new KickList(this);
  portals=new PortalFile(this,propDir + ""String_Node_Str"");
  shelff=new ShelfFile(this,propDir + ""String_Node_Str"");
  actions=new ActionFile(this);
  spafile=new SPAreaFile(this,propDir + ""String_Node_Str"");
  banks=new BankFile(this,propDir + ""String_Node_Str"");
  npcs=new NPCFile(this,propDir + ""String_Node_Str"");
  levers=new RedstoneFile(this,propDir + ""String_Node_Str"");
  bLog.info(""String_Node_Str"");
  if (!sanityCheck()) {
    this.getServer().getPluginManager().disablePlugin(this);
    return;
  }
  for (  Player player : this.getServer().getOnlinePlayers()) {
    User user;
    JoinType jt=maxPlayers.join(user=User.getUser(this,player));
    if (jt == JoinType.NO_SLOT_NORMAL || jt == JoinType.NO_SLOT_RESERVED) {
      user.Kick(""String_Node_Str"");
    }
    if (spoutcraft && spoutconnect.enabled(player)) {
      for (      NPC n : BenCmd.getPlugin().npcs.allNPCs()) {
        if (n.isSpawned()) {
          spoutconnect.sendSkin(player,n.getEntityId(),n.getSkinURL());
        }
      }
    }
  }
  bLog.info(""String_Node_Str"");
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_JOIN,this.chatListen,Event.Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_LOGIN,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.blockCheck,Event.Priority.High,this);
  pm.registerEvent(Event.Type.BLOCK_BURN,this.blockCheck,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_IGNITE,this.blockCheck,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.SIGN_CHANGE,this.blockCheck,Event.Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.invPlayerListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.invBlockListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,this.death,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,this.death,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.REDSTONE_CHANGE,this.invBlockListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.lotBListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.lotBListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_PICKUP_ITEM,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_DROP_ITEM,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,this.creeperListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.pbListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.ppListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_BUCKET_EMPTY,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_BUCKET_FILL,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_KICK,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.EXPLOSION_PRIME,this.entListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.wpListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_PORTAL,this.portalListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.shelflp,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.shelflb,Event.Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_MOVE,this.spaplisten,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_RESPAWN,this.spaplisten,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,this.spaelisten,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,this.spaelisten,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_TELEPORT,this.flyListen,Event.Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_PORTAL,this.flyListen,Event.Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT_ENTITY,this.npcl,Event.Priority.Monitor,this);
  pm.registerEvent(Event.Type.CHUNK_LOAD,this.npccl,Event.Priority.Monitor,this);
  pm.registerEvent(Event.Type.CHUNK_UNLOAD,this.npccl,Event.Priority.Monitor,this);
  if (spoutcraft) {
    pm.registerEvent(Event.Type.CUSTOM_EVENT,new BenCmdSpoutListener(),Event.Priority.Normal,this);
    pm.registerEvent(Event.Type.CUSTOM_EVENT,new NPCScreenListener(),Event.Priority.Normal,this);
  }
  PluginDescriptionFile pdfFile=this.getDescription();
  bLog.info(""String_Node_Str"");
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new Update(),36000,36000);
  bLog.info(""String_Node_Str"");
  getServer().getScheduler().scheduleSyncRepeatingTask(this,new TimeFreeze(),100,100);
  bLog.info(""String_Node_Str"");
  log.info(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str""+ buildId+ ""String_Node_Str"");
  for (  World w : getServer().getWorlds()) {
    w.setPVP(true);
  }
  if (!mainProperties.getBoolean(""String_Node_Str"",false)) {
    log.severe(""String_Node_Str"");
  }
}",0.963683368213714
179082,"public BankManagerNPC(BenCmd instance,int id,Location l){
  super(instance,""String_Node_Str"",id,l);
}","public BankManagerNPC(BenCmd instance,int id,Location l){
  super(instance,""String_Node_Str"",id,l,new ItemStack(Material.BOOK));
}",0.8744588744588745
179083,"public BankerNPC(BenCmd instance,int id,Location l){
  super(instance,""String_Node_Str"",id,l);
}","public BankerNPC(BenCmd instance,int id,Location l){
  super(instance,""String_Node_Str"",id,l,new ItemStack(Material.PAPER));
}",0.8648648648648649
179084,"public BlacksmithNPC(BenCmd instance,int id,Location l,HashMap<ToolMaterial,HashMap<ToolType,Double>> tools,HashMap<ArmorMaterial,HashMap<ArmorType,Double>> armor){
  super(instance,""String_Node_Str"",id,l);
  if (tools == null) {
    toolPrices=new HashMap<ToolMaterial,HashMap<ToolType,Double>>();
  }
 else {
    toolPrices=tools;
  }
  if (armor == null) {
    armorPrices=new HashMap<ArmorMaterial,HashMap<ArmorType,Double>>();
  }
  if (plugin.spoutcraft) {
    SpoutManager.getAppearanceManager().setGlobalSkin(new CraftHumanEntity((CraftServer)Bukkit.getServer(),super.enpc),""String_Node_Str"");
  }
}","public BlacksmithNPC(BenCmd instance,int id,Location l,HashMap<ToolMaterial,HashMap<ToolType,Double>> tools,HashMap<ArmorMaterial,HashMap<ArmorType,Double>> armor){
  super(instance,""String_Node_Str"",id,l,new ItemStack(Material.IRON_AXE));
  if (tools == null) {
    toolPrices=new HashMap<ToolMaterial,HashMap<ToolType,Double>>();
  }
 else {
    toolPrices=tools;
  }
  if (armor == null) {
    armorPrices=new HashMap<ArmorMaterial,HashMap<ArmorType,Double>>();
  }
}",0.8115134633240483
179085,"public NPC(BenCmd instance,String name,int id,Location l){
  plugin=instance;
  this.id=id;
  this.l=l;
  this.n=name;
  if (l.getWorld().isChunkLoaded(l.getBlock().getChunk())) {
    spawn();
  }
}","public NPC(BenCmd instance,String name,int id,Location l,ItemStack itemHeld){
  plugin=instance;
  this.id=id;
  this.l=l;
  this.n=name;
  this.itemHeld=itemHeld;
  if (l.getWorld().isChunkLoaded(l.getBlock().getChunk())) {
    spawn();
  }
}",0.8979591836734694
179086,"public void setName(String name){
  despawn();
  n=name;
  spawn();
  despawn();
  spawn();
  plugin.npcs.saveNPC(this);
}","public void setName(String name){
  despawn();
  n=name;
  spawn();
  plugin.npcs.saveNPC(this);
}",0.8909090909090909
179087,"public void spawn(){
  if (enpc == null) {
    WorldServer ws=((CraftWorld)l.getWorld()).getHandle();
    MinecraftServer ms=((CraftServer)ws.getServer()).getServer();
    enpc=new EntityNPC(ms,ws,n,new ItemInWorldManager(ws));
    enpc.setLocation(l.getX(),l.getY(),l.getZ(),l.getYaw(),l.getPitch());
    ws.addEntity(enpc);
    ws.players.remove(enpc);
    if (plugin.spoutcraft) {
      for (      Player p : plugin.getServer().getOnlinePlayers()) {
        SpoutPlayer player=((SpoutPlayer)p);
        if (player.getVersion() > 4) {
          player.sendPacket(new PacketSkinURL(enpc.id,getSkinURL()));
        }
      }
    }
  }
}","public void spawn(){
  if (enpc == null) {
    WorldServer ws=((CraftWorld)l.getWorld()).getHandle();
    MinecraftServer ms=((CraftServer)ws.getServer()).getServer();
    enpc=new EntityNPC(ms,ws,n,new ItemInWorldManager(ws));
    enpc.setLocation(l.getX(),l.getY(),l.getZ(),l.getYaw(),l.getPitch());
    if (itemHeld.getTypeId() != 0) {
      enpc.inventory.setItem(0,new net.minecraft.server.ItemStack(itemHeld.getTypeId(),itemHeld.getAmount(),itemHeld.getDurability()));
      enpc.inventory.itemInHandIndex=0;
    }
    ws.addEntity(enpc);
    ws.players.remove(enpc);
    if (plugin.spoutcraft) {
      for (      Player p : plugin.getServer().getOnlinePlayers()) {
        plugin.spoutconnect.sendSkin(p,enpc.id,getSkinURL());
      }
    }
  }
}",0.706983441324694
179088,"public void despawn(){
  if (enpc != null) {
    WorldServer ws=((CraftWorld)l.getWorld()).getHandle();
    enpc.die();
    ws.removeEntity(enpc);
    enpc=null;
  }
}","public void despawn(){
  if (enpc != null) {
    if (plugin.spoutcraft) {
      for (      Player p : plugin.getServer().getOnlinePlayers()) {
        plugin.spoutconnect.sendSkin(p,enpc.id,""String_Node_Str"" + enpc.name + ""String_Node_Str"");
      }
    }
    WorldServer ws=((CraftWorld)l.getWorld()).getHandle();
    enpc.die();
    ws.removeEntity(enpc);
    enpc=null;
  }
}",0.6128440366972477
179089,"public void onBlockBreak(BlockBreakEvent event){
  if (player.getItemInHand().getType() == Material.WOOD_SPADE && User.getUser(plugin,player).hasPerm(""String_Node_Str"")) {
    event.setCancelled(true);
  }
  Player player=event.getPlayer();
  if (!plugin.lots.canBuildHere(player,event.getBlock().getLocation())) {
    event.setCancelled(true);
    player.sendMessage(""String_Node_Str"");
  }
}","public void onBlockBreak(BlockBreakEvent event){
  Player player=event.getPlayer();
  User user=User.getUser(plugin,player);
  if (player.getItemInHand().getType() == Material.WOOD_SPADE && user.hasPerm(""String_Node_Str"")) {
    event.setCancelled(true);
  }
  if (!plugin.lots.canBuildHere(player,event.getBlock().getLocation())) {
    event.setCancelled(true);
    player.sendMessage(""String_Node_Str"");
  }
}",0.8233830845771144
179090,"public void onPlayerInteract(PlayerInteractEvent event){
  if (event.getAction() == Action.RIGHT_CLICK_BLOCK) {
    Player player=event.getPlayer();
    if (User.getUser(plugin,player).hasPerm(""String_Node_Str"") && player.getItemInHand().getType() == Material.WOOD_SPADE) {
      checkPlayer(player.getName());
      if (this.corner.get(player.getName()).corner2 != event.getClickedBlock().getLocation()) {
        this.corner.get(player.getName()).setCorner2(event.getClickedBlock().getLocation());
        Location corner2=this.corner.get(player.getName()).getCorner2();
        player.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + corner2.getX()+ ""String_Node_Str""+ corner2.getY()+ ""String_Node_Str""+ corner2.getZ()+ ""String_Node_Str""+ corner2.getWorld().getName()+ ""String_Node_Str"");
      }
      return;
    }
  }
 else   if (event.getAction() == Action.LEFT_CLICK_BLOCK) {
    Player player=event.getPlayer();
    if (User.getUser(plugin,player).hasPerm(""String_Node_Str"") && player.getItemInHand().getType() == Material.WOOD_SPADE) {
      checkPlayer(player.getName());
      if (this.corner.get(player.getName()).corner1 != event.getClickedBlock().getLocation()) {
        this.corner.get(player.getName()).setCorner1(event.getClickedBlock().getLocation());
        Location corner1=this.corner.get(player.getName()).getCorner1();
        player.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + corner1.getX()+ ""String_Node_Str""+ corner1.getY()+ ""String_Node_Str""+ corner1.getZ()+ ""String_Node_Str""+ corner1.getWorld().getName()+ ""String_Node_Str"");
      }
      return;
    }
  }
}","public void onPlayerInteract(PlayerInteractEvent event){
  if (event.getAction() == Action.RIGHT_CLICK_BLOCK) {
    Player player=event.getPlayer();
    if (User.getUser(plugin,player).hasPerm(""String_Node_Str"") && player.getItemInHand().getType() == Material.WOOD_SPADE) {
      checkPlayer(player.getName());
      if (this.corner.get(player.getName()).corner2set) {
        if (this.corner.get(player.getName()).corner2.equals(event.getClickedBlock().getLocation())) {
          return;
        }
      }
      this.corner.get(player.getName()).setCorner2(event.getClickedBlock().getLocation());
      Location corner2=this.corner.get(player.getName()).getCorner2();
      player.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + corner2.getX()+ ""String_Node_Str""+ corner2.getY()+ ""String_Node_Str""+ corner2.getZ()+ ""String_Node_Str""+ corner2.getWorld().getName()+ ""String_Node_Str"");
    }
    return;
  }
 else   if (event.getAction() == Action.LEFT_CLICK_BLOCK) {
    Player player=event.getPlayer();
    if (User.getUser(plugin,player).hasPerm(""String_Node_Str"") && player.getItemInHand().getType() == Material.WOOD_SPADE) {
      checkPlayer(player.getName());
      if (this.corner.get(player.getName()).corner1set) {
        if (this.corner.get(player.getName()).corner1.equals(event.getClickedBlock().getLocation())) {
          return;
        }
      }
      this.corner.get(player.getName()).setCorner1(event.getClickedBlock().getLocation());
      Location corner1=this.corner.get(player.getName()).getCorner1();
      player.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + corner1.getX()+ ""String_Node_Str""+ corner1.getY()+ ""String_Node_Str""+ corner1.getZ()+ ""String_Node_Str""+ corner1.getWorld().getName()+ ""String_Node_Str"");
    }
    return;
  }
}",0.9287396937573617
179091,"public void Spawn(String world){
  if (isConsole) {
    return;
  }
  try {
    plugin.getServer().getWorld(world);
  }
 catch (  NullPointerException e) {
    Spawn();
    return;
  }
  Location spawn=plugin.getServer().getWorld(world).getSpawnLocation();
  new Warp(spawn.getX(),spawn.getY(),spawn.getZ(),spawn.getYaw(),spawn.getPitch(),spawn.getWorld().getName(),""String_Node_Str"",""String_Node_Str"",plugin).WarpHere(this);
}","public void Spawn(String world){
  if (isConsole) {
    return;
  }
  Location spawn;
  try {
    spawn=plugin.getServer().getWorld(world).getSpawnLocation();
  }
 catch (  NullPointerException e) {
    Spawn();
    return;
  }
  new Warp(spawn.getX(),spawn.getY(),spawn.getZ(),spawn.getYaw(),spawn.getPitch(),spawn.getWorld().getName(),""String_Node_Str"",""String_Node_Str"",plugin).WarpHere(this);
}",0.8606060606060606
179092,"public void onPlayerQuit(PlayerQuitEvent event){
  for (int i=0; i < plugin.graves.size(); i++) {
    Grave g=plugin.graves.get(i);
    if (g.getPlayer().equals(event.getPlayer())) {
      g.delete();
      plugin.graves.remove(i);
    }
  }
  if (plugin.returns.containsKey(event.getPlayer())) {
    plugin.returns.remove(event.getPlayer());
  }
  User user=User.getUser(plugin,event.getPlayer());
  if (user.isOffline()) {
    user.goOnlineNoMsg();
    event.setQuitMessage(""String_Node_Str"");
  }
 else {
    event.setQuitMessage(user.getColor() + user.getDisplayName() + ChatColor.WHITE+ ""String_Node_Str"");
  }
  plugin.maxPlayers.leave(user);
  if (user.isPoofed()) {
    user.UnPoof();
  }
  if (user.isNoPoofed()) {
    user.UnNoPoof();
  }
  if (user.inChannel()) {
    user.leaveChannel();
  }
  user.unspyAll();
  User.finalizeUser(user);
}","public void onPlayerQuit(PlayerQuitEvent event){
  for (int i=0; i < plugin.graves.size(); i++) {
    Grave g=plugin.graves.get(i);
    if (g.getPlayer().equals(event.getPlayer())) {
      g.delete();
      plugin.graves.remove(i);
    }
  }
  if (plugin.returns.containsKey(event.getPlayer())) {
    plugin.returns.remove(event.getPlayer());
  }
  User user=User.getUser(plugin,event.getPlayer());
  if (user.isOffline()) {
    user.goOnlineNoMsg();
    event.setQuitMessage(""String_Node_Str"");
  }
 else {
    event.setQuitMessage(user.getColor() + user.getDisplayName() + ChatColor.WHITE+ ""String_Node_Str"");
  }
  plugin.maxPlayers.leave(user);
  if (user.isPoofed()) {
    user.UnPoof();
  }
  if (user.isNoPoofed()) {
    user.UnNoPoof();
  }
  if (user.isAllPoofed()) {
    user.UnAllPoof();
  }
  if (user.inChannel()) {
    user.leaveChannel();
  }
  user.unspyAll();
  User.finalizeUser(user);
}",0.969248291571754
179093,"public void remAInv(Player player){
  plugin.invisible.remove(player);
  for (  Player appearTo : plugin.noinvisible) {
    if (player != appearTo) {
      uninvisible(player,appearTo);
    }
  }
}","public void remAInv(Player player){
  plugin.allinvisible.remove(player);
  for (  Player appearTo : plugin.noinvisible) {
    if (player != appearTo) {
      uninvisible(player,appearTo);
    }
  }
}",0.9924433249370276
179094,"public void Item(String[] args,User user){
  if (args.length == 0 || args.length > 3) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  BCItem Item;
  if ((Item=back.checkAlias(args[0])) == null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  int Amount=1;
  if (args.length >= 2) {
    try {
      Amount=Integer.parseInt(args[1]);
    }
 catch (    NumberFormatException e) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
  int fullAmount=Amount;
  List<Integer> splitamount=new ArrayList<Integer>();
  while (Amount > 0) {
    Integer maxAmount=back.getStackNumber(Item.getMaterial().getId());
    if (Amount > maxAmount) {
      splitamount.add(maxAmount);
      Amount-=maxAmount;
    }
 else {
      splitamount.add(Amount);
      Amount=0;
    }
  }
  Material mat=Item.getMaterial();
  int ItemDamage=Item.getDamage();
  if (args.length == 3) {
    User user2;
    if ((user2=User.matchUser(args[2],plugin)) == null) {
      user.sendMessage(""String_Node_Str"" + args[2] + ""String_Node_Str"");
      return;
    }
    for (    Integer amount : splitamount) {
      if (user2.getHandle().getInventory().firstEmpty() >= 0) {
        user2.getHandle().getInventory().addItem(new ItemStack(mat,amount,(short)ItemDamage));
      }
 else {
        user2.getHandle().getWorld().dropItem(user2.getHandle().getLocation(),new ItemStack(mat,amount,(short)ItemDamage));
      }
    }
    user2.sendMessage(ChatColor.GREEN + user.getDisplayName() + ""String_Node_Str"");
    user.sendMessage(""String_Node_Str"");
    log.info(""String_Node_Str"" + user.getDisplayName() + ""String_Node_Str""+ user2.getDisplayName()+ ""String_Node_Str""+ String.valueOf(mat.getId())+ ""String_Node_Str""+ String.valueOf(fullAmount)+ ""String_Node_Str""+ String.valueOf(ItemDamage)+ ""String_Node_Str"");
  }
 else {
    if (user.isServer()) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    for (    Integer amount : splitamount) {
      if (user.getHandle().getInventory().firstEmpty() >= 0) {
        user.getHandle().getInventory().addItem(new ItemStack(mat,amount,(short)ItemDamage));
      }
 else {
        user.getHandle().getWorld().dropItem(user.getHandle().getLocation(),new ItemStack(mat,amount,(short)ItemDamage));
      }
    }
    user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + user.getDisplayName()+ ""String_Node_Str"");
    log.info(""String_Node_Str"" + user.getDisplayName() + ""String_Node_Str""+ user.getDisplayName()+ ""String_Node_Str""+ String.valueOf(mat.getId())+ ""String_Node_Str""+ String.valueOf(fullAmount)+ ""String_Node_Str""+ String.valueOf(ItemDamage)+ ""String_Node_Str"");
  }
}","public void Item(String[] args,User user){
  if (args.length == 0 || args.length > 3) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  BCItem Item;
  if ((Item=back.checkAlias(args[0])) == null) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  int Amount=1;
  if (args.length >= 2) {
    try {
      Amount=Integer.parseInt(args[1]);
    }
 catch (    NumberFormatException e) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
  int fullAmount=Amount;
  List<Integer> splitamount=new ArrayList<Integer>();
  while (Amount > 0) {
    Integer maxAmount=back.getStackNumber(Item.getMaterial().getId());
    if (Amount > maxAmount) {
      splitamount.add(maxAmount);
      Amount-=maxAmount;
    }
 else {
      splitamount.add(Amount);
      Amount=0;
    }
  }
  Material mat=Item.getMaterial();
  int ItemDamage=Item.getDamage();
  if (args.length == 3) {
    User user2;
    if ((user2=User.matchUser(args[2],plugin)) == null) {
      user.sendMessage(""String_Node_Str"" + args[2] + ""String_Node_Str"");
      return;
    }
    for (    Integer amount : splitamount) {
      if (user2.getHandle().getInventory().firstEmpty() >= 0) {
        user2.getHandle().getInventory().addItem(new ItemStack(mat,amount,(short)ItemDamage));
      }
 else {
        user2.getHandle().getWorld().dropItem(user2.getHandle().getLocation(),new ItemStack(mat,amount,(short)ItemDamage));
      }
    }
    user2.sendMessage(ChatColor.GREEN + user.getDisplayName() + ""String_Node_Str"");
    user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    log.info(""String_Node_Str"" + user.getDisplayName() + ""String_Node_Str""+ user2.getDisplayName()+ ""String_Node_Str""+ String.valueOf(mat.getId())+ ""String_Node_Str""+ String.valueOf(fullAmount)+ ""String_Node_Str""+ String.valueOf(ItemDamage)+ ""String_Node_Str"");
  }
 else {
    if (user.isServer()) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    for (    Integer amount : splitamount) {
      if (user.getHandle().getInventory().firstEmpty() >= 0) {
        user.getHandle().getInventory().addItem(new ItemStack(mat,amount,(short)ItemDamage));
      }
 else {
        user.getHandle().getWorld().dropItem(user.getHandle().getLocation(),new ItemStack(mat,amount,(short)ItemDamage));
      }
    }
    user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + user.getDisplayName()+ ""String_Node_Str"");
    log.info(""String_Node_Str"" + user.getDisplayName() + ""String_Node_Str""+ user.getDisplayName()+ ""String_Node_Str""+ String.valueOf(mat.getId())+ ""String_Node_Str""+ String.valueOf(fullAmount)+ ""String_Node_Str""+ String.valueOf(ItemDamage)+ ""String_Node_Str"");
  }
}",0.6731833271855404
179095,"public void addOffence(Player player){
  if (User.getUser(plugin,player).hasPerm(""String_Node_Str"",false)) {
    return;
  }
  if (offenders.containsKey(player.getName())) {
    offenders.put(player.getName(),getOffences(player) + 1);
  }
 else {
    offenders.put(player.getName(),1);
  }
}","public void addOffence(Player player){
  if (User.getUser(plugin,player).isJailed() != null) {
    return;
  }
  if (offenders.containsKey(player.getName())) {
    offenders.put(player.getName(),getOffences(player) + 1);
  }
 else {
    offenders.put(player.getName(),1);
  }
}",0.9119718309859156
179096,"public int getOffences(Player player){
  if (User.getUser(plugin,player).isJailed() == null) {
    return 3;
  }
  if (offenders.containsKey(player.getName())) {
    return offenders.get(player.getName());
  }
 else {
    return 0;
  }
}","public int getOffences(Player player){
  if (User.getUser(plugin,player).isJailed() != null) {
    return 3;
  }
  if (offenders.containsKey(player.getName())) {
    return offenders.get(player.getName());
  }
 else {
    return 0;
  }
}",0.9957805907172996
179097,"public void Status(String[] args,User user){
  PermissionUser puser2=null;
  User user2=null;
  if (args.length == 1 && !user.hasPerm(""String_Node_Str"")) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
 else   if (args.length == 1) {
    if ((puser2=PermissionUser.matchUserIgnoreCase(args[0],plugin)) == null) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    user2=User.matchUser(args[0],plugin);
  }
 else   if (args.length == 0) {
    puser2=user;
    user2=user;
  }
 else {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  boolean banned=puser2.isBanned() != null;
  boolean jailed=puser2.isJailed() != null;
  boolean muted=puser2.isMuted() != null;
  boolean reported=false;
  for (  Report ticket : plugin.reports.getReports()) {
    if (ticket.getAccused().getName().equalsIgnoreCase(puser2.getName()) && ticket.getStatus() != ReportStatus.CLOSED && ticket.getStatus() != ReportStatus.LOCKED) {
      reported=true;
      break;
    }
  }
  user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + puser2.getName()+ ""String_Node_Str"");
  if (banned) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
 else {
    user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (jailed) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
 else {
    user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (muted) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
 else {
    user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (reported) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
 else {
    user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (user.hasPerm(""String_Node_Str"") && user2 != null) {
    boolean godded=user2.isGod();
    boolean poofed=user2.isPoofed();
    boolean nopoofed=user2.isNoPoofed();
    int health=user2.getHandle().getHealth();
    if (godded) {
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    }
    if (poofed) {
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    }
    if (nopoofed) {
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    }
    if (health >= 15) {
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + (((double)health) / 2)+ ""String_Node_Str"");
    }
 else     if (health <= 5) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"" + (((double)health) / 2)+ ""String_Node_Str"");
    }
 else {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + (((double)health) / 2)+ ""String_Node_Str"");
    }
  }
}","public void Status(String[] args,User user){
  PermissionUser puser2=null;
  User user2=null;
  if (args.length == 1 && !user.hasPerm(""String_Node_Str"")) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
 else   if (args.length == 1) {
    if ((puser2=PermissionUser.matchUserIgnoreCase(args[0],plugin)) == null) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    user2=User.matchUser(args[0],plugin);
  }
 else   if (args.length == 0) {
    puser2=user;
    user2=user;
  }
 else {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  boolean banned=puser2.isBanned() != null;
  boolean jailed=puser2.isJailed() != null;
  boolean muted=puser2.isMuted() != null;
  boolean reported=false;
  for (  Report ticket : plugin.reports.getReports()) {
    if (ticket.getAccused().getName().equalsIgnoreCase(puser2.getName()) && ticket.getStatus() != ReportStatus.CLOSED && ticket.getStatus() != ReportStatus.LOCKED) {
      reported=true;
      break;
    }
  }
  String groups=""String_Node_Str"";
  for (  PermissionGroup group : plugin.perm.groupFile.getAllUserGroups(puser2)) {
    if (groups.isEmpty()) {
      groups=group.getName();
    }
 else {
      groups+=""String_Node_Str"" + group.getName();
    }
  }
  if (groups.isEmpty()) {
    groups=""String_Node_Str"";
  }
  user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + puser2.getName()+ ""String_Node_Str"");
  if (banned) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
 else {
    user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (jailed) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
 else {
    user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (muted) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
 else {
    user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (reported) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
 else {
    user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + groups);
  if (user.hasPerm(""String_Node_Str"") && user2 != null) {
    boolean godded=user2.isGod();
    boolean allpoofed=user2.isNoPoofed();
    boolean poofed=user2.isPoofed();
    boolean nopoofed=user2.isNoPoofed();
    int health=user2.getHandle().getHealth();
    if (user.getActiveChannel() != null) {
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + user.getActiveChannel().getDisplayName());
    }
    if (godded) {
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    }
    if (allpoofed) {
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else     if (poofed) {
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    }
    if (nopoofed) {
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    }
    if (health >= 15) {
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + (((double)health) / 2)+ ""String_Node_Str"");
    }
 else     if (health <= 5) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"" + (((double)health) / 2)+ ""String_Node_Str"");
    }
 else {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + (((double)health) / 2)+ ""String_Node_Str"");
    }
  }
}",0.8900889453621347
179098,"public boolean hasPerm(String perm,boolean testStar,boolean testGroup){
  if (isServer()) {
    return testStar;
  }
  boolean isStarred=false;
  boolean isJailed=false;
  boolean isDenied=false;
  boolean isAllowed=false;
  List<String> perms=new ArrayList<String>(permissions);
  if (testGroup) {
    for (    PermissionGroup group : plugin.perm.groupFile.getAllUserGroups(this)) {
      perms.addAll(group.getInternal().getPermissions(true));
    }
  }
  for (  String perm2 : perms) {
    if (perm2.equals(""String_Node_Str"") && testStar) {
      isStarred=true;
    }
    if (perm2.equalsIgnoreCase(""String_Node_Str"" + perm)) {
      isDenied=true;
    }
    if (perm2.equalsIgnoreCase(""String_Node_Str"")) {
      isJailed=true;
    }
    if (perm.equalsIgnoreCase(perm2)) {
      isAllowed=true;
    }
  }
  if ((isDenied || isJailed) && testGroup) {
    return false;
  }
 else   if (isStarred) {
    return true;
  }
 else {
    return isAllowed;
  }
}","public boolean hasPerm(String perm,boolean testStar,boolean testGroup){
  if (isServer()) {
    return testStar;
  }
  boolean isStarred=false;
  boolean isJailed=false;
  boolean isDenied=false;
  boolean isAllowed=false;
  List<String> perms=new ArrayList<String>(permissions);
  if (testGroup) {
    for (    PermissionGroup group : plugin.perm.groupFile.getAllUserGroups(this)) {
      perms.addAll(group.getInternal().getPermissions(true));
    }
  }
  for (  String perm2 : perms) {
    if (perm2.equals(""String_Node_Str"")) {
      isStarred=true;
    }
    if (perm2.equalsIgnoreCase(""String_Node_Str"" + perm)) {
      isDenied=true;
    }
    if (perm2.equalsIgnoreCase(""String_Node_Str"")) {
      isJailed=true;
    }
    if (perm.equalsIgnoreCase(perm2)) {
      isAllowed=true;
    }
  }
  if ((isDenied || isJailed) && testStar) {
    return false;
  }
 else   if (isStarred && testStar) {
    return true;
  }
 else {
    return isAllowed;
  }
}",0.6426708398539385
179099,"public void Unjail(String[] args,User user){
  if (args.length == 1) {
    User user2;
    if ((user2=User.matchUser(args[0],plugin)) == null) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    user2.toggleJail();
    plugin.getServer().broadcastMessage(ChatColor.RED + user2.getName() + ""String_Node_Str"");
  }
 else {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
  }
}","public void Unjail(String[] args,User user){
  if (args.length == 1) {
    User user2;
    if ((user2=User.matchUser(args[0],plugin)) == null) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (!user2.hasPerm(""String_Node_Str"",false,true)) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    user2.toggleJail();
    plugin.getServer().broadcastMessage(ChatColor.RED + user2.getName() + ""String_Node_Str"");
  }
 else {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
  }
}",0.8612538540596094
179100,"public void Jail(String[] args,User user){
  if (args.length == 1) {
    User user2;
    if ((user2=User.matchUser(args[0],plugin)) == null) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (user.getName() == user2.getName()) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    user2.toggleJail();
    plugin.getServer().broadcastMessage(ChatColor.RED + user2.getName() + ""String_Node_Str"");
  }
 else {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
  }
}","public void Jail(String[] args,User user){
  if (args.length == 1) {
    User user2;
    if ((user2=User.matchUser(args[0],plugin)) == null) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (user.getName() == user2.getName()) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (user2.hasPerm(""String_Node_Str"",false,true)) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    user2.toggleJail();
    plugin.getServer().broadcastMessage(ChatColor.RED + user2.getName() + ""String_Node_Str"");
  }
 else {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
  }
}",0.8898026315789473
179101,"@Override public void onEnable(){
  new File(propDir).mkdirs();
  if (!mainProp.exists()) {
    try {
      mainProp.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!itemAlias.exists()) {
    try {
      itemAlias.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!unlDisp.exists()) {
    try {
      unlDisp.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!dispChests.exists()) {
    try {
      dispChests.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!lotFile.exists()) {
    try {
      lotFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!kitFile.exists()) {
    try {
      kitFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!proFile.exists()) {
    try {
      proFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!chatFile.exists()) {
    try {
      chatFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!ticketFile.exists()) {
    try {
      ticketFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!pricesFile.exists()) {
    try {
      pricesFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!portalFile.exists()) {
    try {
      portalFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!shelfFile.exists()) {
    try {
      shelfFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!actionFile.exists()) {
    try {
      actionFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!spareaFile.exists()) {
    try {
      spareaFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  User.finalizeAll();
  perm=new MainPermissions(this);
  warps=new WarpList(this);
  homes=new HomeWarps(this);
  checkpoints=new PreWarp(this);
  blockCheck=new BlockChecker(this);
  mainProperties=new PluginProperties(propDir + ""String_Node_Str"");
  mainProperties.loadFile();
  itemAliases=new PluginProperties(propDir + ""String_Node_Str"");
  itemAliases.loadFile();
  chatListen=new ChatPlayerListener(this);
  jail=new Jail(this);
  dispensers=new UnlimitedDisp(propDir + ""String_Node_Str"");
  chests=new DispChest(propDir + ""String_Node_Str"");
  lots=new LotFile(this);
  kits=new KitList(this);
  creeperListen=new CreeperListener(this);
  inv=new Invisibility(this);
  protectFile=new ProtectFile(this,propDir + ""String_Node_Str"");
  channels=new ChatChannelController(propDir + ""String_Node_Str"",this);
  maxPlayers=new MaxPlayers(this,mainProperties.getInteger(""String_Node_Str"",10),mainProperties.getInteger(""String_Node_Str"",4),mainProperties.getBoolean(""String_Node_Str"",true),mainProperties.getBoolean(""String_Node_Str"",true));
  reports=new ReportFile(this);
  flyDetect=new FlyDetect(this);
  strikeBind=new WeatherBinding(this);
  prices=new PriceFile(this,propDir + ""String_Node_Str"");
  kicked=new KickList(this);
  portals=new PortalFile(this,propDir + ""String_Node_Str"");
  shelff=new ShelfFile(this,propDir + ""String_Node_Str"");
  actions=new ActionFile(this);
  spafile=new SPAreaFile(this,propDir + ""String_Node_Str"");
  if (!sanityCheck()) {
    this.getServer().getPluginManager().disablePlugin(this);
    return;
  }
  for (  Player player : this.getServer().getOnlinePlayers()) {
    User user;
    JoinType jt=maxPlayers.join(user=User.getUser(this,player));
    if (jt == JoinType.NO_SLOT_NORMAL || jt == JoinType.NO_SLOT_RESERVED) {
      user.Kick(""String_Node_Str"");
    }
  }
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_JOIN,this.chatListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_LOGIN,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.blockCheck,Event.Priority.High,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.blockCheck,Event.Priority.High,this);
  pm.registerEvent(Event.Type.BLOCK_BURN,this.blockCheck,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_IGNITE,this.blockCheck,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.SIGN_CHANGE,this.blockCheck,Event.Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.invPlayerListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.invBlockListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,this.death,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,this.death,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.REDSTONE_CHANGE,this.invBlockListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.lotBListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.lotBListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_PICKUP_ITEM,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_DROP_ITEM,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,this.creeperListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.pbListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.ppListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_BUCKET_EMPTY,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_BUCKET_FILL,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_KICK,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.EXPLOSION_PRIME,this.entListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.wpListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_PORTAL,this.portalListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.shelflp,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.shelflb,Event.Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_MOVE,this.spaplisten,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_RESPAWN,this.spaplisten,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,this.spaelisten,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,this.spaelisten,Event.Priority.Highest,this);
  PluginDescriptionFile pdfFile=this.getDescription();
  FreezeTimer.schedule(new TimeFreeze(this),0,5000);
  log.info(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
  for (  World w : getServer().getWorlds()) {
    w.setPVP(true);
  }
  if (mainProperties.getBoolean(""String_Node_Str"",false)) {
    log.warning(""String_Node_Str"");
  }
}","@Override public void onEnable(){
  new File(propDir).mkdirs();
  if (!mainProp.exists()) {
    try {
      mainProp.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!itemAlias.exists()) {
    try {
      itemAlias.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!unlDisp.exists()) {
    try {
      unlDisp.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!dispChests.exists()) {
    try {
      dispChests.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!lotFile.exists()) {
    try {
      lotFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!kitFile.exists()) {
    try {
      kitFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!proFile.exists()) {
    try {
      proFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!chatFile.exists()) {
    try {
      chatFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!ticketFile.exists()) {
    try {
      ticketFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!pricesFile.exists()) {
    try {
      pricesFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!portalFile.exists()) {
    try {
      portalFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!shelfFile.exists()) {
    try {
      shelfFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!actionFile.exists()) {
    try {
      actionFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!spareaFile.exists()) {
    try {
      spareaFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  User.finalizeAll();
  perm=new MainPermissions(this);
  warps=new WarpList(this);
  homes=new HomeWarps(this);
  checkpoints=new PreWarp(this);
  blockCheck=new BlockChecker(this);
  mainProperties=new PluginProperties(propDir + ""String_Node_Str"");
  mainProperties.loadFile();
  itemAliases=new PluginProperties(propDir + ""String_Node_Str"");
  itemAliases.loadFile();
  chatListen=new ChatPlayerListener(this);
  jail=new Jail(this);
  dispensers=new UnlimitedDisp(propDir + ""String_Node_Str"");
  chests=new DispChest(propDir + ""String_Node_Str"");
  lots=new LotFile(this);
  kits=new KitList(this);
  creeperListen=new CreeperListener(this);
  inv=new Invisibility(this);
  protectFile=new ProtectFile(this,propDir + ""String_Node_Str"");
  channels=new ChatChannelController(propDir + ""String_Node_Str"",this);
  maxPlayers=new MaxPlayers(this,mainProperties.getInteger(""String_Node_Str"",10),mainProperties.getInteger(""String_Node_Str"",4),mainProperties.getBoolean(""String_Node_Str"",true),mainProperties.getBoolean(""String_Node_Str"",true));
  reports=new ReportFile(this);
  flyDetect=new FlyDetect(this);
  strikeBind=new WeatherBinding(this);
  prices=new PriceFile(this,propDir + ""String_Node_Str"");
  kicked=new KickList(this);
  portals=new PortalFile(this,propDir + ""String_Node_Str"");
  shelff=new ShelfFile(this,propDir + ""String_Node_Str"");
  actions=new ActionFile(this);
  spafile=new SPAreaFile(this,propDir + ""String_Node_Str"");
  if (!sanityCheck()) {
    this.getServer().getPluginManager().disablePlugin(this);
    return;
  }
  for (  Player player : this.getServer().getOnlinePlayers()) {
    User user;
    JoinType jt=maxPlayers.join(user=User.getUser(this,player));
    if (jt == JoinType.NO_SLOT_NORMAL || jt == JoinType.NO_SLOT_RESERVED) {
      user.Kick(""String_Node_Str"");
    }
  }
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_JOIN,this.chatListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_LOGIN,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.blockCheck,Event.Priority.High,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.blockCheck,Event.Priority.High,this);
  pm.registerEvent(Event.Type.BLOCK_BURN,this.blockCheck,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_IGNITE,this.blockCheck,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.SIGN_CHANGE,this.blockCheck,Event.Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.invPlayerListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.invBlockListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,this.death,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,this.death,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.REDSTONE_CHANGE,this.invBlockListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.lotBListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.lotBListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_PICKUP_ITEM,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_DROP_ITEM,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,this.creeperListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.pbListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.ppListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_BUCKET_EMPTY,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_BUCKET_FILL,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_KICK,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.EXPLOSION_PRIME,this.entListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.wpListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_PORTAL,this.portalListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.shelflp,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.shelflb,Event.Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_MOVE,this.spaplisten,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_RESPAWN,this.spaplisten,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,this.spaelisten,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,this.spaelisten,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_TELEPORT,this.flyListen,Event.Priority.Monitor,this);
  pm.registerEvent(Event.Type.PLAYER_PORTAL,this.flyListen,Event.Priority.Monitor,this);
  PluginDescriptionFile pdfFile=this.getDescription();
  FreezeTimer.schedule(new TimeFreeze(this),0,5000);
  log.info(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
  for (  World w : getServer().getWorlds()) {
    w.setPVP(true);
  }
  if (mainProperties.getBoolean(""String_Node_Str"",false)) {
    log.warning(""String_Node_Str"");
  }
}",0.989001588659416
179102,"public void actionOnce(Player player,FlyResponse action){
switch (action) {
case PULLDOWN:
    Location l=player.getLocation();
  l.setY(player.getWorld().getHighestBlockYAt(l));
player.teleport(l);
plugin.log.info(player.getName() + ""String_Node_Str"");
lastL.put(player,player.getLocation());
break;
case RESPAWN:
User.getUser(plugin,player).Spawn();
plugin.checkpoints.RemovePreWarp(player);
player.sendMessage(ChatColor.RED + ""String_Node_Str"");
plugin.log.info(player.getName() + ""String_Node_Str"");
lastL.put(player,player.getLocation());
break;
case KICK:
User.getUser(plugin,player).Kick(""String_Node_Str"");
plugin.log.info(player.getName() + ""String_Node_Str"");
break;
case JAIL:
User user=User.getUser(plugin,player);
if (user.isJailed() != null) {
plugin.log.warning(""String_Node_Str"" + user.getName() + ""String_Node_Str"");
}
 else {
plugin.actions.addAction(user,ActionType.JAIL,3600000L);
plugin.jail.SendToJail(player);
player.sendMessage(ChatColor.RED + ""String_Node_Str"");
lastL.put(player,player.getLocation());
plugin.log.info(player.getName() + ""String_Node_Str"");
}
break;
case BAN:
User u=User.getUser(plugin,player);
plugin.actions.addAction(u,ActionType.BAN,3600000L);
u.Kick(""String_Node_Str"");
plugin.log.info(player.getName() + ""String_Node_Str"");
break;
case WARN:
player.sendMessage(ChatColor.RED + ""String_Node_Str"");
plugin.log.info(player.getName() + ""String_Node_Str"");
break;
}
}","public void actionOnce(Player player,FlyResponse action){
switch (action) {
case PULLDOWN:
    Location l=player.getLocation();
  while (l.getBlock().getType() == Material.AIR) {
    if (l.getY() <= 0) {
      l.setY(l.getWorld().getHighestBlockYAt(l) - 1);
    }
 else {
      l.setY(l.getY() - 1);
    }
  }
l.setY(l.getY() + 1);
player.teleport(l);
plugin.log.info(player.getName() + ""String_Node_Str"");
break;
case RESPAWN:
User.getUser(plugin,player).Spawn();
plugin.checkpoints.RemovePreWarp(player);
player.sendMessage(ChatColor.RED + ""String_Node_Str"");
plugin.log.info(player.getName() + ""String_Node_Str"");
lastL.put(player,player.getLocation());
break;
case KICK:
User.getUser(plugin,player).Kick(""String_Node_Str"");
plugin.log.info(player.getName() + ""String_Node_Str"");
break;
case JAIL:
User user=User.getUser(plugin,player);
if (user.isJailed() != null) {
plugin.log.warning(""String_Node_Str"" + user.getName() + ""String_Node_Str"");
}
 else {
plugin.actions.addAction(user,ActionType.JAIL,3600000L);
plugin.jail.SendToJail(player);
player.sendMessage(ChatColor.RED + ""String_Node_Str"");
lastL.put(player,player.getLocation());
plugin.log.info(player.getName() + ""String_Node_Str"");
}
break;
case BAN:
User u=User.getUser(plugin,player);
plugin.actions.addAction(u,ActionType.BAN,3600000L);
u.Kick(""String_Node_Str"");
plugin.log.info(player.getName() + ""String_Node_Str"");
break;
case WARN:
player.sendMessage(ChatColor.RED + ""String_Node_Str"");
plugin.log.info(player.getName() + ""String_Node_Str"");
break;
}
}",0.9281090289608176
179103,"public void Area(String[] args,User user){
  if (args.length == 0) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.lotListener.checkPlayer(user.getName());
    if (!plugin.lotListener.corner.get(user.getName()).corner1set || !plugin.lotListener.corner.get(user.getName()).corner2set) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (args.length == 1) {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      int up, down;
      Location c1=plugin.lotListener.corner.get(user.getName()).corner1, c2=plugin.lotListener.corner.get(user.getName()).corner2;
      if (args.length == 2) {
        up=0;
        down=0;
      }
 else       if (args.length == 4) {
        try {
          up=Integer.parseInt(args[2]);
          down=Integer.parseInt(args[3]);
        }
 catch (        NumberFormatException e) {
          user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return;
        }
      }
 else {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (up != 0) {
        if (c1.getBlockY() > c2.getBlockY()) {
          if (up == -1) {
            c1.setY(128);
          }
 else           if (c1.getBlockX() + up > 128) {
            c1.setY(128);
          }
 else {
            c1.setY(c1.getBlockX() + up);
          }
        }
 else {
          if (up == -1) {
            c2.setY(128);
          }
 else           if (c2.getBlockX() + up > 128) {
            c2.setY(128);
          }
 else {
            c2.setY(c2.getBlockX() + up);
          }
        }
      }
      if (down != 0) {
        if (c1.getBlockY() > c2.getBlockY()) {
          if (down == -1) {
            c2.setY(0);
          }
 else           if (c2.getBlockX() - down < 0) {
            c2.setY(0);
          }
 else {
            c2.setY(c1.getBlockX() - down);
          }
        }
 else {
          if (down == -1) {
            c1.setY(0);
          }
 else           if (c1.getBlockX() - down < 0) {
            c1.setY(0);
          }
 else {
            c1.setY(c1.getBlockX() - down);
          }
        }
      }
      plugin.spafile.addArea(new MsgArea(plugin,plugin.spafile.nextId(),c1,c2,""String_Node_Str"",""String_Node_Str""));
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      int up, down;
      Location c1=plugin.lotListener.corner.get(user.getName()).corner1, c2=plugin.lotListener.corner.get(user.getName()).corner2;
      if (args.length == 2) {
        up=0;
        down=0;
      }
 else       if (args.length == 4) {
        try {
          up=Integer.parseInt(args[2]);
          down=Integer.parseInt(args[3]);
        }
 catch (        NumberFormatException e) {
          user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return;
        }
      }
 else {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (up != 0) {
        if (c1.getBlockY() > c2.getBlockY()) {
          if (up == -1) {
            c1.setY(128);
          }
 else           if (c1.getBlockX() + up > 128) {
            c1.setY(128);
          }
 else {
            c1.setY(c1.getBlockX() + up);
          }
        }
 else {
          if (up == -1) {
            c2.setY(128);
          }
 else           if (c2.getBlockX() + up > 128) {
            c2.setY(128);
          }
 else {
            c2.setY(c2.getBlockX() + up);
          }
        }
      }
      if (down != 0) {
        if (c1.getBlockY() > c2.getBlockY()) {
          if (down == -1) {
            c2.setY(0);
          }
 else           if (c2.getBlockX() - down < 0) {
            c2.setY(0);
          }
 else {
            c2.setY(c1.getBlockX() - down);
          }
        }
 else {
          if (down == -1) {
            c1.setY(0);
          }
 else           if (c1.getBlockX() - down < 0) {
            c1.setY(0);
          }
 else {
            c1.setY(c1.getBlockX() - down);
          }
        }
      }
      plugin.spafile.addArea(new HealArea(plugin,plugin.spafile.nextId(),c1,c2));
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      int reqval, up, down;
      Location c1=plugin.lotListener.corner.get(user.getName()).corner1, c2=plugin.lotListener.corner.get(user.getName()).corner2;
      if (args.length == 3) {
        try {
          reqval=Integer.parseInt(args[2]);
        }
 catch (        NumberFormatException e) {
          user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return;
        }
        up=0;
        down=0;
      }
 else       if (args.length == 5) {
        try {
          reqval=Integer.parseInt(args[2]);
          up=Integer.parseInt(args[3]);
          down=Integer.parseInt(args[4]);
        }
 catch (        NumberFormatException e) {
          user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return;
        }
      }
 else {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (up != 0) {
        if (c1.getBlockY() > c2.getBlockY()) {
          if (up == -1) {
            c1.setY(128);
          }
 else           if (c1.getBlockX() + up > 128) {
            c1.setY(128);
          }
 else {
            c1.setY(c1.getBlockX() + up);
          }
        }
 else {
          if (up == -1) {
            c2.setY(128);
          }
 else           if (c2.getBlockX() + up > 128) {
            c2.setY(128);
          }
 else {
            c2.setY(c2.getBlockX() + up);
          }
        }
      }
      if (down != 0) {
        if (c1.getBlockY() > c2.getBlockY()) {
          if (down == -1) {
            c2.setY(0);
          }
 else           if (c2.getBlockX() - down < 0) {
            c2.setY(0);
          }
 else {
            c2.setY(c1.getBlockX() - down);
          }
        }
 else {
          if (down == -1) {
            c1.setY(0);
          }
 else           if (c1.getBlockX() - down < 0) {
            c1.setY(0);
          }
 else {
            c1.setY(c1.getBlockX() - down);
          }
        }
      }
      plugin.spafile.addArea(new PVPArea(plugin,plugin.spafile.nextId(),c1,c2,reqval));
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length != 1 && args.length != 2) {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    SPArea d=null;
    if (args.length == 1) {
      for (      SPArea a : plugin.spafile.listAreas()) {
        if (a.insideArea(user.getHandle().getLocation())) {
          d=a;
          break;
        }
      }
      if (d == null) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
    }
 else {
      int id;
      try {
        id=Integer.parseInt(args[1]);
      }
 catch (      NumberFormatException e) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      d=plugin.spafile.byId(id);
      if (d == null) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
    }
    plugin.spafile.removeArea(d);
    user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    String msg=""String_Node_Str"";
    for (int i=1; i < args.length; i++) {
      if (msg.isEmpty()) {
        msg+=args[i];
      }
 else {
        msg+=""String_Node_Str"" + args[i];
      }
    }
    MsgArea e=null;
    for (    SPArea a : plugin.spafile.listAreas()) {
      if (a instanceof MsgArea && a.insideArea(user.getHandle().getLocation())) {
        e=(MsgArea)a;
        break;
      }
    }
    if (e == null) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    e.setEnterMessage(args.length > 1 ? msg : ""String_Node_Str"");
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    String msg=""String_Node_Str"";
    for (int i=1; i < args.length; i++) {
      if (msg.isEmpty()) {
        msg+=args[i];
      }
 else {
        msg+=""String_Node_Str"" + args[i];
      }
    }
    MsgArea e=null;
    for (    SPArea a : plugin.spafile.listAreas()) {
      if (a instanceof MsgArea && a.insideArea(user.getHandle().getLocation())) {
        e=(MsgArea)a;
        break;
      }
    }
    if (e == null) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    e.setLeaveMessage(args.length > 1 ? msg : ""String_Node_Str"");
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    BCItem item;
    int chance, max, min;
    if (args.length == 3) {
      item=new InventoryBackend(plugin).checkAlias(args[1]);
      if (item == null) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      try {
        chance=Integer.parseInt(args[2]);
      }
 catch (      NumberFormatException e) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      max=1;
      min=1;
    }
 else     if (args.length == 5) {
      item=new InventoryBackend(plugin).checkAlias(args[1]);
      if (item == null) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      try {
        chance=Integer.parseInt(args[2]);
        min=Integer.parseInt(args[3]);
        max=Integer.parseInt(args[4]);
      }
 catch (      NumberFormatException e) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
    }
 else {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    PVPArea e=null;
    for (    SPArea a : plugin.spafile.listAreas()) {
      if (a instanceof PVPArea && a.insideArea(user.getHandle().getLocation())) {
        e=(PVPArea)a;
        break;
      }
    }
    if (e == null) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    e.addDrop(item,new DropInfo(chance,min,max));
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length == 2) {
      BCItem item=null;
      item=new InventoryBackend(plugin).checkAlias(args[1]);
      if (item == null) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      PVPArea e=null;
      for (      SPArea a : plugin.spafile.listAreas()) {
        if (a instanceof PVPArea && a.insideArea(user.getHandle().getLocation())) {
          e=(PVPArea)a;
          break;
        }
      }
      if (e == null) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      e.remDrop(item);
    }
 else {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length == 2) {
      if (args[1].length() == 2) {
        char nc=args[1].charAt(0);
        char cc=args[1].charAt(1);
        PVPArea.DropMode n;
        PVPArea.DropMode c;
switch (nc) {
case 'd':
          n=PVPArea.DropMode.DROP;
        break;
case 'l':
      n=PVPArea.DropMode.LOSE;
    break;
case 'k':
  n=PVPArea.DropMode.KEEP;
break;
default :
n=null;
break;
}
switch (cc) {
case 'd':
c=PVPArea.DropMode.DROP;
break;
case 'l':
c=PVPArea.DropMode.LOSE;
break;
case 'k':
c=PVPArea.DropMode.KEEP;
break;
default :
c=null;
break;
}
PVPArea e=null;
for (SPArea a : plugin.spafile.listAreas()) {
if (a instanceof PVPArea && a.insideArea(user.getHandle().getLocation())) {
e=(PVPArea)a;
break;
}
}
if (e == null) {
user.sendMessage(ChatColor.RED + ""String_Node_Str"");
return;
}
if (n != null) {
e.setNDrop(n);
}
if (e != null) {
e.setCDrop(c);
}
}
 else {
user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
return;
}
}
 else {
user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
return;
}
}
 else {
user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
return;
}
}","public void Area(String[] args,User user){
  if (args.length == 0) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.lotListener.checkPlayer(user.getName());
    if (!plugin.lotListener.corner.get(user.getName()).corner1set || !plugin.lotListener.corner.get(user.getName()).corner2set) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (args.length == 1) {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      int up, down;
      Location c1=plugin.lotListener.corner.get(user.getName()).corner1, c2=plugin.lotListener.corner.get(user.getName()).corner2;
      if (args.length == 2) {
        up=0;
        down=0;
      }
 else       if (args.length == 4) {
        try {
          up=Integer.parseInt(args[2]);
          down=Integer.parseInt(args[3]);
        }
 catch (        NumberFormatException e) {
          user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return;
        }
      }
 else {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (up != 0) {
        if (c1.getBlockY() > c2.getBlockY()) {
          if (up == -1) {
            c1.setY(128);
          }
 else           if (c1.getBlockX() + up > 128) {
            c1.setY(128);
          }
 else {
            c1.setY(c1.getBlockX() + up);
          }
        }
 else {
          if (up == -1) {
            c2.setY(128);
          }
 else           if (c2.getBlockX() + up > 128) {
            c2.setY(128);
          }
 else {
            c2.setY(c2.getBlockX() + up);
          }
        }
      }
      if (down != 0) {
        if (c1.getBlockY() > c2.getBlockY()) {
          if (down == -1) {
            c2.setY(0);
          }
 else           if (c2.getBlockX() - down < 0) {
            c2.setY(0);
          }
 else {
            c2.setY(c1.getBlockX() - down);
          }
        }
 else {
          if (down == -1) {
            c1.setY(0);
          }
 else           if (c1.getBlockX() - down < 0) {
            c1.setY(0);
          }
 else {
            c1.setY(c1.getBlockX() - down);
          }
        }
      }
      plugin.spafile.addArea(new MsgArea(plugin,plugin.spafile.nextId(),c1,c2,""String_Node_Str"",""String_Node_Str""));
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      int up, down;
      Location c1=plugin.lotListener.corner.get(user.getName()).corner1, c2=plugin.lotListener.corner.get(user.getName()).corner2;
      if (args.length == 2) {
        up=0;
        down=0;
      }
 else       if (args.length == 4) {
        try {
          up=Integer.parseInt(args[2]);
          down=Integer.parseInt(args[3]);
        }
 catch (        NumberFormatException e) {
          user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return;
        }
      }
 else {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (up != 0) {
        if (c1.getBlockY() > c2.getBlockY()) {
          if (up == -1) {
            c1.setY(128);
          }
 else           if (c1.getBlockX() + up > 128) {
            c1.setY(128);
          }
 else {
            c1.setY(c1.getBlockX() + up);
          }
        }
 else {
          if (up == -1) {
            c2.setY(128);
          }
 else           if (c2.getBlockX() + up > 128) {
            c2.setY(128);
          }
 else {
            c2.setY(c2.getBlockX() + up);
          }
        }
      }
      if (down != 0) {
        if (c1.getBlockY() > c2.getBlockY()) {
          if (down == -1) {
            c2.setY(0);
          }
 else           if (c2.getBlockX() - down < 0) {
            c2.setY(0);
          }
 else {
            c2.setY(c1.getBlockX() - down);
          }
        }
 else {
          if (down == -1) {
            c1.setY(0);
          }
 else           if (c1.getBlockX() - down < 0) {
            c1.setY(0);
          }
 else {
            c1.setY(c1.getBlockX() - down);
          }
        }
      }
      plugin.spafile.addArea(new HealArea(plugin,plugin.spafile.nextId(),c1,c2,0));
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      int up, down;
      Location c1=plugin.lotListener.corner.get(user.getName()).corner1, c2=plugin.lotListener.corner.get(user.getName()).corner2;
      if (args.length == 2) {
        up=0;
        down=0;
      }
 else       if (args.length == 4) {
        try {
          up=Integer.parseInt(args[2]);
          down=Integer.parseInt(args[3]);
        }
 catch (        NumberFormatException e) {
          user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return;
        }
      }
 else {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (up != 0) {
        if (c1.getBlockY() > c2.getBlockY()) {
          if (up == -1) {
            c1.setY(128);
          }
 else           if (c1.getBlockX() + up > 128) {
            c1.setY(128);
          }
 else {
            c1.setY(c1.getBlockX() + up);
          }
        }
 else {
          if (up == -1) {
            c2.setY(128);
          }
 else           if (c2.getBlockX() + up > 128) {
            c2.setY(128);
          }
 else {
            c2.setY(c2.getBlockX() + up);
          }
        }
      }
      if (down != 0) {
        if (c1.getBlockY() > c2.getBlockY()) {
          if (down == -1) {
            c2.setY(0);
          }
 else           if (c2.getBlockX() - down < 0) {
            c2.setY(0);
          }
 else {
            c2.setY(c1.getBlockX() - down);
          }
        }
 else {
          if (down == -1) {
            c1.setY(0);
          }
 else           if (c1.getBlockX() - down < 0) {
            c1.setY(0);
          }
 else {
            c1.setY(c1.getBlockX() - down);
          }
        }
      }
      plugin.spafile.addArea(new DamageArea(plugin,plugin.spafile.nextId(),c1,c2,0));
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      int reqval, up, down;
      Location c1=plugin.lotListener.corner.get(user.getName()).corner1, c2=plugin.lotListener.corner.get(user.getName()).corner2;
      if (args.length == 3) {
        try {
          reqval=Integer.parseInt(args[2]);
        }
 catch (        NumberFormatException e) {
          user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return;
        }
        up=0;
        down=0;
      }
 else       if (args.length == 5) {
        try {
          reqval=Integer.parseInt(args[2]);
          up=Integer.parseInt(args[3]);
          down=Integer.parseInt(args[4]);
        }
 catch (        NumberFormatException e) {
          user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return;
        }
      }
 else {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (up != 0) {
        if (c1.getBlockY() > c2.getBlockY()) {
          if (up == -1) {
            c1.setY(128);
          }
 else           if (c1.getBlockX() + up > 128) {
            c1.setY(128);
          }
 else {
            c1.setY(c1.getBlockX() + up);
          }
        }
 else {
          if (up == -1) {
            c2.setY(128);
          }
 else           if (c2.getBlockX() + up > 128) {
            c2.setY(128);
          }
 else {
            c2.setY(c2.getBlockX() + up);
          }
        }
      }
      if (down != 0) {
        if (c1.getBlockY() > c2.getBlockY()) {
          if (down == -1) {
            c2.setY(0);
          }
 else           if (c2.getBlockX() - down < 0) {
            c2.setY(0);
          }
 else {
            c2.setY(c1.getBlockX() - down);
          }
        }
 else {
          if (down == -1) {
            c1.setY(0);
          }
 else           if (c1.getBlockX() - down < 0) {
            c1.setY(0);
          }
 else {
            c1.setY(c1.getBlockX() - down);
          }
        }
      }
      plugin.spafile.addArea(new PVPArea(plugin,plugin.spafile.nextId(),c1,c2,reqval));
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      int time, up, down;
      Location c1=plugin.lotListener.corner.get(user.getName()).corner1, c2=plugin.lotListener.corner.get(user.getName()).corner2;
      if (args.length == 3) {
        try {
          time=Integer.parseInt(args[2]);
        }
 catch (        NumberFormatException e) {
          user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return;
        }
        up=0;
        down=0;
      }
 else       if (args.length == 5) {
        try {
          time=Integer.parseInt(args[2]);
          up=Integer.parseInt(args[3]);
          down=Integer.parseInt(args[4]);
        }
 catch (        NumberFormatException e) {
          user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
          return;
        }
      }
 else {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (up != 0) {
        if (c1.getBlockY() > c2.getBlockY()) {
          if (up == -1) {
            c1.setY(128);
          }
 else           if (c1.getBlockX() + up > 128) {
            c1.setY(128);
          }
 else {
            c1.setY(c1.getBlockX() + up);
          }
        }
 else {
          if (up == -1) {
            c2.setY(128);
          }
 else           if (c2.getBlockX() + up > 128) {
            c2.setY(128);
          }
 else {
            c2.setY(c2.getBlockX() + up);
          }
        }
      }
      if (down != 0) {
        if (c1.getBlockY() > c2.getBlockY()) {
          if (down == -1) {
            c2.setY(0);
          }
 else           if (c2.getBlockX() - down < 0) {
            c2.setY(0);
          }
 else {
            c2.setY(c1.getBlockX() - down);
          }
        }
 else {
          if (down == -1) {
            c1.setY(0);
          }
 else           if (c1.getBlockX() - down < 0) {
            c1.setY(0);
          }
 else {
            c1.setY(c1.getBlockX() - down);
          }
        }
      }
      plugin.spafile.addArea(new TRArea(plugin,plugin.spafile.nextId(),c1,c2,time));
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length != 1 && args.length != 2) {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    SPArea d=null;
    if (args.length == 1) {
      for (      SPArea a : plugin.spafile.listAreas()) {
        if (a.insideArea(user.getHandle().getLocation())) {
          d=a;
          break;
        }
      }
      if (d == null) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
    }
 else {
      int id;
      try {
        id=Integer.parseInt(args[1]);
      }
 catch (      NumberFormatException e) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      d=plugin.spafile.byId(id);
      if (d == null) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
    }
    plugin.spafile.removeArea(d);
    user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    String msg=""String_Node_Str"";
    for (int i=1; i < args.length; i++) {
      if (msg.isEmpty()) {
        msg+=args[i];
      }
 else {
        msg+=""String_Node_Str"" + args[i];
      }
    }
    MsgArea e=null;
    for (    SPArea a : plugin.spafile.listAreas()) {
      if (a instanceof MsgArea && a.insideArea(user.getHandle().getLocation())) {
        e=(MsgArea)a;
        break;
      }
    }
    if (e == null) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    e.setEnterMessage(args.length > 1 ? msg : ""String_Node_Str"");
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    String msg=""String_Node_Str"";
    for (int i=1; i < args.length; i++) {
      if (msg.isEmpty()) {
        msg+=args[i];
      }
 else {
        msg+=""String_Node_Str"" + args[i];
      }
    }
    MsgArea e=null;
    for (    SPArea a : plugin.spafile.listAreas()) {
      if (a instanceof MsgArea && a.insideArea(user.getHandle().getLocation())) {
        e=(MsgArea)a;
        break;
      }
    }
    if (e == null) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    e.setLeaveMessage(args.length > 1 ? msg : ""String_Node_Str"");
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    BCItem item;
    int chance, max, min;
    if (args.length == 3) {
      item=new InventoryBackend(plugin).checkAlias(args[1]);
      if (item == null) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      try {
        chance=Integer.parseInt(args[2]);
      }
 catch (      NumberFormatException e) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      max=1;
      min=1;
    }
 else     if (args.length == 5) {
      item=new InventoryBackend(plugin).checkAlias(args[1]);
      if (item == null) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      try {
        chance=Integer.parseInt(args[2]);
        min=Integer.parseInt(args[3]);
        max=Integer.parseInt(args[4]);
      }
 catch (      NumberFormatException e) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
    }
 else {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    PVPArea e=null;
    for (    SPArea a : plugin.spafile.listAreas()) {
      if (a instanceof PVPArea && a.insideArea(user.getHandle().getLocation())) {
        e=(PVPArea)a;
        break;
      }
    }
    if (e == null) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    e.addDrop(item,new DropInfo(chance,min,max));
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length == 2) {
      BCItem item=null;
      item=new InventoryBackend(plugin).checkAlias(args[1]);
      if (item == null) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      PVPArea e=null;
      for (      SPArea a : plugin.spafile.listAreas()) {
        if (a instanceof PVPArea && a.insideArea(user.getHandle().getLocation())) {
          e=(PVPArea)a;
          break;
        }
      }
      if (e == null) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      e.remDrop(item);
    }
 else {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length == 2) {
      if (args[1].length() == 2) {
        char nc=args[1].charAt(0);
        char cc=args[1].charAt(1);
        PVPArea.DropMode n;
        PVPArea.DropMode c;
switch (nc) {
case 'd':
          n=PVPArea.DropMode.DROP;
        break;
case 'l':
      n=PVPArea.DropMode.LOSE;
    break;
case 'k':
  n=PVPArea.DropMode.KEEP;
break;
default :
n=null;
break;
}
switch (cc) {
case 'd':
c=PVPArea.DropMode.DROP;
break;
case 'l':
c=PVPArea.DropMode.LOSE;
break;
case 'k':
c=PVPArea.DropMode.KEEP;
break;
default :
c=null;
break;
}
PVPArea e=null;
for (SPArea a : plugin.spafile.listAreas()) {
if (a instanceof PVPArea && a.insideArea(user.getHandle().getLocation())) {
e=(PVPArea)a;
break;
}
}
if (e == null) {
user.sendMessage(ChatColor.RED + ""String_Node_Str"");
return;
}
if (n != null) {
e.setNDrop(n);
}
if (e != null) {
e.setCDrop(c);
}
}
 else {
user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
return;
}
}
 else {
user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
return;
}
}
 else if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
if (args.length == 2) {
int time;
try {
time=Integer.parseInt(args[1]);
}
 catch (NumberFormatException e) {
user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
return;
}
TimedArea e=null;
for (SPArea a : plugin.spafile.listAreas()) {
if (a instanceof TimedArea && a.insideArea(user.getHandle().getLocation())) {
e=(TimedArea)a;
break;
}
}
if (e == null) {
user.sendMessage(ChatColor.RED + ""String_Node_Str"");
return;
}
e.setMinTime(time);
}
 else {
user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
return;
}
}
 else {
user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
return;
}
}",0.4494591699208625
179104,"public DropInfo(int chance,int minAmt,int maxAmt){
  if (c == 0) {
    c=1;
  }
  c=chance;
  if (min > max) {
    int m=min;
    min=max;
    max=m;
  }
  min=minAmt;
  max=maxAmt;
}","public DropInfo(int chance,int minAmt,int maxAmt){
  if (c == 0) {
    c=1;
  }
  c=chance;
  min=minAmt;
  max=maxAmt;
  if (min > max) {
    int m=min;
    min=max;
    max=m;
  }
}",0.8469945355191257
179105,"public String getValue(){
  String internal=super.getInternalValue();
  return ""String_Node_Str"" + internal.substring(0,internal.length() - 1);
}","public String getValue(){
  return ""String_Node_Str"" + super.getInternalValue();
}",0.6167400881057269
179106,"public HealArea(BenCmd instance,Integer id,Location corner1,Location corner2){
  super(instance,id,corner1,corner2);
  t=new Timer();
  t.schedule(new TimerTask(){
    public void run(){
      heal();
    }
  }
,0,1000);
}","public HealArea(BenCmd instance,Integer id,Location corner1,Location corner2,Integer minimumTime){
  super(instance,id,corner1,corner2,minimumTime);
}",0.6612903225806451
179107,"public void loadAreas(){
  areas.clear();
  for (int i=0; i < this.size(); i++) {
    String key=(String)this.keySet().toArray()[i];
    String value=(String)this.values().toArray()[i];
    int id;
    try {
      id=Integer.parseInt(key);
    }
 catch (    NumberFormatException e) {
      plugin.log.warning(""String_Node_Str"" + key + ""String_Node_Str"");
      continue;
    }
    String type=value.split(""String_Node_Str"")[0];
    try {
      if (type.equals(""String_Node_Str"")) {
        areas.put(id,new PVPArea(plugin,key,value));
      }
 else       if (type.equals(""String_Node_Str"")) {
        areas.put(id,new MsgArea(plugin,key,value));
      }
 else       if (type.equals(""String_Node_Str"")) {
        areas.put(id,new HealArea(plugin,key,value));
      }
 else {
        plugin.log.warning(""String_Node_Str"" + key + ""String_Node_Str"");
        continue;
      }
    }
 catch (    Exception e) {
      plugin.log.warning(""String_Node_Str"" + key + ""String_Node_Str"");
      continue;
    }
  }
}","public void loadAreas(){
  areas.clear();
  for (int i=0; i < this.size(); i++) {
    String key=(String)this.keySet().toArray()[i];
    String value=(String)this.values().toArray()[i];
    int id;
    try {
      id=Integer.parseInt(key);
    }
 catch (    NumberFormatException e) {
      plugin.log.warning(""String_Node_Str"" + key + ""String_Node_Str"");
      continue;
    }
    String type=value.split(""String_Node_Str"")[0];
    try {
      if (type.equals(""String_Node_Str"")) {
        areas.put(id,new PVPArea(plugin,key,value));
      }
 else       if (type.equals(""String_Node_Str"")) {
        areas.put(id,new MsgArea(plugin,key,value));
      }
 else       if (type.equals(""String_Node_Str"")) {
        areas.put(id,new HealArea(plugin,key,value));
      }
 else       if (type.equals(""String_Node_Str"")) {
        areas.put(id,new DamageArea(plugin,key,value));
      }
 else       if (type.equals(""String_Node_Str"")) {
        areas.put(id,new TRArea(plugin,key,value));
      }
 else {
        plugin.log.warning(""String_Node_Str"" + key + ""String_Node_Str"");
        continue;
      }
    }
 catch (    Exception e) {
      plugin.log.warning(""String_Node_Str"" + key + ""String_Node_Str"");
      continue;
    }
  }
}",0.8997314234556849
179108,"public void onPlayerKick(PlayerKickEvent event){
  User user=User.getUser(plugin,event.getPlayer());
  if (user.isOffline()) {
    user.goOnlineNoMsg();
    event.setLeaveMessage(""String_Node_Str"");
  }
 else {
    event.setLeaveMessage(user.getColor() + user.getName() + ChatColor.WHITE+ ""String_Node_Str"");
  }
  plugin.maxPlayers.leave(user);
  if (user.isPoofed()) {
    user.UnPoof();
  }
  if (user.isNoPoofed()) {
    user.UnNoPoof();
  }
  User.finalizeUser(user);
}","public void onPlayerKick(PlayerKickEvent event){
  User user=User.getUser(plugin,event.getPlayer());
  if (user.isOffline()) {
    user.goOnlineNoMsg();
    event.setLeaveMessage(""String_Node_Str"");
  }
 else {
    event.setLeaveMessage(user.getColor() + user.getName() + ChatColor.WHITE+ ""String_Node_Str"");
  }
  plugin.maxPlayers.leave(user);
  if (user.isPoofed()) {
    user.UnPoof();
  }
  if (user.isNoPoofed()) {
    user.UnNoPoof();
  }
  if (user.inChannel()) {
    user.leaveChannel();
  }
  user.unspyAll();
  User.finalizeUser(user);
}",0.9275929549902152
179109,"public void onPlayerQuit(PlayerQuitEvent event){
  User user=User.getUser(plugin,event.getPlayer());
  if (user.isOffline()) {
    user.goOnlineNoMsg();
    event.setQuitMessage(""String_Node_Str"");
  }
 else {
    event.setQuitMessage(user.getColor() + user.getName() + ChatColor.WHITE+ ""String_Node_Str"");
  }
  plugin.maxPlayers.leave(user);
  if (user.isPoofed()) {
    user.UnPoof();
  }
  if (user.isNoPoofed()) {
    user.UnNoPoof();
  }
  User.finalizeUser(user);
}","public void onPlayerQuit(PlayerQuitEvent event){
  User user=User.getUser(plugin,event.getPlayer());
  if (user.isOffline()) {
    user.goOnlineNoMsg();
    event.setQuitMessage(""String_Node_Str"");
  }
 else {
    event.setQuitMessage(user.getColor() + user.getName() + ChatColor.WHITE+ ""String_Node_Str"");
  }
  plugin.maxPlayers.leave(user);
  if (user.isPoofed()) {
    user.UnPoof();
  }
  if (user.isNoPoofed()) {
    user.UnNoPoof();
  }
  if (user.inChannel()) {
    user.leaveChannel();
  }
  user.unspyAll();
  User.finalizeUser(user);
}",0.9273084479371316
179110,"public Portal getPortalAt(Location loc){
  loc=Portal.getHandleBlock(loc);
  for (int i=0; i < portals.size(); i++) {
    Location key=(Location)portals.keySet().toArray()[i];
    if (key.getBlockX() == loc.getBlockX() && key.getBlockY() == loc.getBlockY() && key.getBlockY() == loc.getBlockY()) {
      return portals.get(key);
    }
  }
  return null;
}","public Portal getPortalAt(Location loc){
  loc=Portal.getHandleBlock(loc);
  for (int i=0; i < portals.size(); i++) {
    Location key=(Location)portals.keySet().toArray()[i];
    if (key.getBlockX() == loc.getBlockX() && key.getBlockY() == loc.getBlockY() && key.getBlockZ() == loc.getBlockZ() && key.getWorld().getName().equals(loc.getWorld().getName())) {
      return portals.get(key);
    }
  }
  return null;
}",0.8664072632944229
179111,"public void onPlayerPortal(PlayerPortalEvent event){
  Portal portal;
  Location loc=event.getPlayer().getLocation();
  loc.setX(loc.getX() * 8);
  loc.setZ(loc.getZ() * 8);
  if ((portal=plugin.portals.getPortalAt(loc)) == null) {
    event.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if (portal.getGroup() != null && !User.getUser(plugin,event.getPlayer()).inGroup(portal.getGroup())) {
    event.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  event.useTravelAgent(false);
  event.setTo(portal.getWarp().loc);
}","public void onPlayerPortal(PlayerPortalEvent event){
  Portal portal;
  Location loc=event.getPlayer().getLocation();
  loc.setX(loc.getX() * 8);
  loc.setZ(loc.getZ() * 8);
  if ((portal=plugin.portals.getPortalAt(loc)) == null) {
    event.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if (portal.getGroup() != null && !User.getUser(plugin,event.getPlayer()).inGroup(portal.getGroup())) {
    event.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  event.useTravelAgent(false);
  event.setTo(portal.getWarp().loc);
  plugin.checkpoints.SetPreWarp(event.getPlayer());
}",0.960843373493976
179112,"public void Help(String[] args,User user){
  int pageToShow;
  if (args.length == 0) {
    pageToShow=1;
  }
 else {
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str"");
      return;
    }
    try {
      pageToShow=Integer.parseInt(args[0]);
    }
 catch (    NumberFormatException e) {
      user.sendMessage(ChatColor.RED + args[0] + ""String_Node_Str"");
      return;
    }
  }
  List<BCommand> commands=getCommands(user);
  int max;
  if (pageToShow > (max=(int)Math.ceil(commands.size() / 6) + 1)) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"" + max+ ""String_Node_Str"");
    return;
  }
 else   if (pageToShow <= 0) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  int i=(pageToShow - 1) * 6;
  user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GREEN+ pageToShow+ ChatColor.YELLOW+ ""String_Node_Str""+ ChatColor.GREEN+ max+ ChatColor.YELLOW+ ""String_Node_Str"");
  while (i < (pageToShow - 1) * 6 + 6) {
    if (i >= commands.size()) {
      break;
    }
    user.sendMessage(ChatColor.GREEN + commands.get(i).getName() + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ commands.get(i).getDescription());
    i++;
  }
}","public void Help(String[] args,User user){
  int pageToShow;
  if (args.length == 0) {
    pageToShow=1;
  }
 else {
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str"");
      return;
    }
    try {
      pageToShow=Integer.parseInt(args[0]);
    }
 catch (    NumberFormatException e) {
      user.sendMessage(ChatColor.RED + args[0] + ""String_Node_Str"");
      return;
    }
  }
  List<BCommand> commands=getCommands(user);
  int max;
  if (pageToShow > (max=(int)Math.ceil((commands.size() - 1) / 6) + 1)) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"" + max+ ""String_Node_Str"");
    return;
  }
 else   if (pageToShow <= 0) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  int i=(pageToShow - 1) * 6;
  user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GREEN+ pageToShow+ ChatColor.YELLOW+ ""String_Node_Str""+ ChatColor.GREEN+ max+ ChatColor.YELLOW+ ""String_Node_Str"");
  while (i < (pageToShow - 1) * 6 + 6) {
    if (i >= commands.size()) {
      break;
    }
    user.sendMessage(ChatColor.GREEN + commands.get(i).getName() + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ commands.get(i).getDescription());
    i++;
  }
}",0.9977272727272728
179113,"public List<BCommand> getCommands(User user){
  List<BCommand> commands=new ArrayList<BCommand>();
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  for (int i=0; i < commands.size(); i++) {
    if (!commands.get(i).canUse(user)) {
      commands.remove(i);
    }
  }
  return commands;
}","public List<BCommand> getCommands(User user){
  List<BCommand> commands=new ArrayList<BCommand>();
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  commands.add(new BCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  for (int i=0; i < commands.size(); i++) {
    if (!commands.get(i).canUse(user)) {
      commands.remove(i);
    }
  }
  return commands;
}",0.9742813918305596
179114,"@Override public void onEnable(){
  new File(propDir).mkdirs();
  if (!mainProp.exists()) {
    try {
      mainProp.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!itemAlias.exists()) {
    try {
      itemAlias.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!unlDisp.exists()) {
    try {
      unlDisp.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!dispChests.exists()) {
    try {
      dispChests.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!lotFile.exists()) {
    try {
      lotFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!kitFile.exists()) {
    try {
      kitFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!proFile.exists()) {
    try {
      proFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!chatFile.exists()) {
    try {
      chatFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!ticketFile.exists()) {
    try {
      ticketFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!ticketFile.exists()) {
    try {
      ticketFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  perm=new MainPermissions(this);
  warps=new WarpList(this);
  homes=new HomeWarps(this);
  checkpoints=new PreWarp(this);
  blockCheck=new BlockChecker(this);
  mainProperties=new PluginProperties(propDir + ""String_Node_Str"");
  mainProperties.loadFile();
  itemAliases=new PluginProperties(propDir + ""String_Node_Str"");
  itemAliases.loadFile();
  chatListen=new ChatPlayerListener(this);
  jail=new Jail(this);
  dispensers=new UnlimitedDisp(propDir + ""String_Node_Str"");
  chests=new DispChest(propDir + ""String_Node_Str"");
  lots=new LotFile(this);
  kits=new KitList(this);
  creeperListen=new CreeperListener(this);
  inv=new Invisibility(this);
  protectFile=new ProtectFile(this,propDir + ""String_Node_Str"");
  channels=new ChatChannelController(propDir + ""String_Node_Str"",this);
  maxPlayers=new MaxPlayers(this,mainProperties.getInteger(""String_Node_Str"",10),mainProperties.getInteger(""String_Node_Str"",4),mainProperties.getBoolean(""String_Node_Str"",true),mainProperties.getBoolean(""String_Node_Str"",true));
  reports=new ReportFile(this);
  flyDetect=new FlyDetect(this);
  strikeBind=new WeatherBinding(this);
  prices=new PriceFile(this,propDir + ""String_Node_Str"");
  kicked=new KickList(this);
  if (!sanityCheck()) {
    this.getServer().getPluginManager().disablePlugin(this);
    return;
  }
  for (  Player player : this.getServer().getOnlinePlayers()) {
    User user;
    JoinType jt=maxPlayers.join(user=new User(this,player));
    if (jt == JoinType.NO_SLOT_NORMAL || jt == JoinType.NO_SLOT_RESERVED) {
      user.Kick(""String_Node_Str"");
    }
  }
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_JOIN,this.chatListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_LOGIN,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.blockCheck,Event.Priority.High,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.blockCheck,Event.Priority.High,this);
  pm.registerEvent(Event.Type.BLOCK_BURN,this.blockCheck,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_IGNITE,this.blockCheck,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.invPlayerListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.invBlockListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,this.death,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,this.death,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.REDSTONE_CHANGE,this.invBlockListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.lotBListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.lotBListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_PICKUP_ITEM,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_DROP_ITEM,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,this.creeperListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.pbListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.ppListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_BUCKET_EMPTY,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_BUCKET_FILL,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_KICK,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.EXPLOSION_PRIME,this.entListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.wpListen,Event.Priority.Highest,this);
  PluginDescriptionFile pdfFile=this.getDescription();
  FreezeTimer.schedule(new TimeFreeze(this),0,100);
  log.info(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
  if (mainProperties.getBoolean(""String_Node_Str"",false)) {
    log.warning(""String_Node_Str"");
  }
}","@Override public void onEnable(){
  new File(propDir).mkdirs();
  if (!mainProp.exists()) {
    try {
      mainProp.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!itemAlias.exists()) {
    try {
      itemAlias.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!unlDisp.exists()) {
    try {
      unlDisp.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!dispChests.exists()) {
    try {
      dispChests.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!lotFile.exists()) {
    try {
      lotFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!kitFile.exists()) {
    try {
      kitFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!proFile.exists()) {
    try {
      proFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!chatFile.exists()) {
    try {
      chatFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!ticketFile.exists()) {
    try {
      ticketFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!pricesFile.exists()) {
    try {
      pricesFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  perm=new MainPermissions(this);
  warps=new WarpList(this);
  homes=new HomeWarps(this);
  checkpoints=new PreWarp(this);
  blockCheck=new BlockChecker(this);
  mainProperties=new PluginProperties(propDir + ""String_Node_Str"");
  mainProperties.loadFile();
  itemAliases=new PluginProperties(propDir + ""String_Node_Str"");
  itemAliases.loadFile();
  chatListen=new ChatPlayerListener(this);
  jail=new Jail(this);
  dispensers=new UnlimitedDisp(propDir + ""String_Node_Str"");
  chests=new DispChest(propDir + ""String_Node_Str"");
  lots=new LotFile(this);
  kits=new KitList(this);
  creeperListen=new CreeperListener(this);
  inv=new Invisibility(this);
  protectFile=new ProtectFile(this,propDir + ""String_Node_Str"");
  channels=new ChatChannelController(propDir + ""String_Node_Str"",this);
  maxPlayers=new MaxPlayers(this,mainProperties.getInteger(""String_Node_Str"",10),mainProperties.getInteger(""String_Node_Str"",4),mainProperties.getBoolean(""String_Node_Str"",true),mainProperties.getBoolean(""String_Node_Str"",true));
  reports=new ReportFile(this);
  flyDetect=new FlyDetect(this);
  strikeBind=new WeatherBinding(this);
  prices=new PriceFile(this,propDir + ""String_Node_Str"");
  kicked=new KickList(this);
  if (!sanityCheck()) {
    this.getServer().getPluginManager().disablePlugin(this);
    return;
  }
  for (  Player player : this.getServer().getOnlinePlayers()) {
    User user;
    JoinType jt=maxPlayers.join(user=new User(this,player));
    if (jt == JoinType.NO_SLOT_NORMAL || jt == JoinType.NO_SLOT_RESERVED) {
      user.Kick(""String_Node_Str"");
    }
  }
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_JOIN,this.chatListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_LOGIN,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.blockCheck,Event.Priority.High,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.blockCheck,Event.Priority.High,this);
  pm.registerEvent(Event.Type.BLOCK_BURN,this.blockCheck,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_IGNITE,this.blockCheck,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.invPlayerListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.invBlockListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,this.death,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,this.death,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.REDSTONE_CHANGE,this.invBlockListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.lotBListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.lotBListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_PICKUP_ITEM,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_DROP_ITEM,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,this.creeperListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.pbListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.ppListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_BUCKET_EMPTY,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_BUCKET_FILL,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_KICK,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.EXPLOSION_PRIME,this.entListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.wpListen,Event.Priority.Highest,this);
  PluginDescriptionFile pdfFile=this.getDescription();
  FreezeTimer.schedule(new TimeFreeze(this),0,100);
  log.info(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
  if (mainProperties.getBoolean(""String_Node_Str"",false)) {
    log.warning(""String_Node_Str"");
  }
}",0.9980988593155894
179115,"public void onPlayerLogin(PlayerLoginEvent event){
  if (!plugin.perm.userFile.userExists(event.getPlayer().getName())) {
    plugin.perm.userFile.addUser(event.getPlayer().getName());
  }
  if ((new ActionableUser(plugin,event.getPlayer())).hasPerm(""String_Node_Str"",false)) {
    event.disallow(Result.KICK_BANNED,""String_Node_Str"");
    return;
  }
  long timeLeft;
  if ((timeLeft=plugin.kicked.isBlocked(event.getPlayer().getName())) > 0) {
    event.disallow(Result.KICK_OTHER,""String_Node_Str"" + String.valueOf(Math.ceil(timeLeft / 60000.0)) + ""String_Node_Str"");
    return;
  }
switch (plugin.maxPlayers.join(new User(plugin,event.getPlayer()))) {
case NO_SLOT_NORMAL:
    event.disallow(Result.KICK_FULL,plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str""));
  break;
case NO_SLOT_RESERVED:
event.disallow(Result.KICK_FULL,plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str""));
break;
}
}","public void onPlayerLogin(PlayerLoginEvent event){
  if (!plugin.perm.userFile.userExists(event.getPlayer().getName())) {
    plugin.perm.userFile.addUser(event.getPlayer().getName());
  }
  if ((new ActionableUser(plugin,event.getPlayer())).hasPerm(""String_Node_Str"",false)) {
    event.disallow(Result.KICK_BANNED,""String_Node_Str"");
    return;
  }
  long timeLeft;
  if ((timeLeft=plugin.kicked.isBlocked(event.getPlayer().getName())) > 0) {
    event.disallow(Result.KICK_OTHER,""String_Node_Str"" + String.valueOf((int)Math.ceil(timeLeft / 60000.0)) + ""String_Node_Str"");
    return;
  }
switch (plugin.maxPlayers.join(new User(plugin,event.getPlayer()))) {
case NO_SLOT_NORMAL:
    event.disallow(Result.KICK_FULL,plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str""));
  break;
case NO_SLOT_RESERVED:
event.disallow(Result.KICK_FULL,plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str""));
break;
}
}",0.9973190348525468
179116,"public boolean LoadHomes(){
  File warpFile;
  warpFile=new File(plugin.propDir + ""String_Node_Str"");
  String str=""String_Node_Str"";
  BufferedReader br;
  try {
    br=new BufferedReader(new InputStreamReader(new FileInputStream(warpFile)));
  }
 catch (  FileNotFoundException e) {
    log.warning(""String_Node_Str"");
    try {
      warpFile.createNewFile();
      br=new BufferedReader(new InputStreamReader(new FileInputStream(warpFile)));
    }
 catch (    IOException ex) {
      log.severe(""String_Node_Str"");
      ex.printStackTrace();
      return false;
    }
  }
  try {
    while ((str=br.readLine()) != null) {
      try {
        warpString.add(str);
        String name=str.split(""String_Node_Str"")[0];
        double x=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[0]);
        double y=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[1]);
        double z=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[2]);
        double yaw;
        double pitch;
        try {
          yaw=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[3]);
          pitch=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[4]);
        }
 catch (        IndexOutOfBoundsException e) {
          yaw=0;
          pitch=0;
        }
        String world=str.split(""String_Node_Str"")[2];
        String group=""String_Node_Str"";
        if (str.split(""String_Node_Str"").length == 4) {
          group=str.split(""String_Node_Str"")[3];
        }
        warps.put(name,new Warp(x,y,z,yaw,pitch,world,name,group,plugin));
      }
 catch (      IndexOutOfBoundsException e) {
        log.warning(""String_Node_Str"");
        e.printStackTrace();
      }
catch (      NumberFormatException e) {
        log.warning(""String_Node_Str"");
        e.printStackTrace();
      }
    }
    br.close();
  }
 catch (  IOException e) {
    log.severe(""String_Node_Str"");
    e.printStackTrace();
    return false;
  }
  return true;
}","public boolean LoadHomes(){
  warpString.clear();
  warps.clear();
  File warpFile;
  warpFile=new File(plugin.propDir + ""String_Node_Str"");
  String str=""String_Node_Str"";
  BufferedReader br;
  try {
    br=new BufferedReader(new InputStreamReader(new FileInputStream(warpFile)));
  }
 catch (  FileNotFoundException e) {
    log.warning(""String_Node_Str"");
    try {
      warpFile.createNewFile();
      br=new BufferedReader(new InputStreamReader(new FileInputStream(warpFile)));
    }
 catch (    IOException ex) {
      log.severe(""String_Node_Str"");
      ex.printStackTrace();
      return false;
    }
  }
  try {
    while ((str=br.readLine()) != null) {
      try {
        warpString.add(str);
        String name=str.split(""String_Node_Str"")[0];
        double x=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[0]);
        double y=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[1]);
        double z=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[2]);
        double yaw;
        double pitch;
        try {
          yaw=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[3]);
          pitch=Double.parseDouble(str.split(""String_Node_Str"")[1].split(""String_Node_Str"")[4]);
        }
 catch (        IndexOutOfBoundsException e) {
          yaw=0;
          pitch=0;
        }
        String world=str.split(""String_Node_Str"")[2];
        String group=""String_Node_Str"";
        if (str.split(""String_Node_Str"").length == 4) {
          group=str.split(""String_Node_Str"")[3];
        }
        warps.put(name,new Warp(x,y,z,yaw,pitch,world,name,group,plugin));
      }
 catch (      IndexOutOfBoundsException e) {
        log.warning(""String_Node_Str"");
        e.printStackTrace();
      }
catch (      NumberFormatException e) {
        log.warning(""String_Node_Str"");
        e.printStackTrace();
      }
    }
    br.close();
  }
 catch (  IOException e) {
    log.severe(""String_Node_Str"");
    e.printStackTrace();
    return false;
  }
  return true;
}",0.9905683192261184
179117,"public boolean sellItem(User user,Integer amount){
  Integer amountHas=0;
  Integer amountTaken=0;
  Integer fullAmt=amount;
  HashMap<Integer,? extends ItemStack> matches=user.getHandle().getInventory().all(this.getMaterial());
  for (  ItemStack iStack : matches.values()) {
    amountHas+=iStack.getAmount();
  }
  if (amount > amountHas) {
    return false;
  }
  for (int i=0; i < matches.size(); i++) {
    ItemStack iStack=(ItemStack)matches.values().toArray()[i];
    if (iStack.getDurability() != this.durability) {
      continue;
    }
    Integer slot=(Integer)matches.keySet().toArray()[i];
    if (amountTaken + iStack.getAmount() <= amount) {
      amountTaken+=iStack.getAmount();
      user.getHandle().getInventory().clear(slot);
    }
 else {
      Integer toTake=amount - amountTaken;
      amountTaken+=toTake;
      iStack.setAmount(iStack.getAmount() - toTake);
      user.getHandle().getInventory().setItem(slot,iStack);
    }
    if (amountTaken == amount) {
      break;
    }
  }
  HashMap<Double,Currency> sortedCurrencies=new HashMap<Double,Currency>();
  for (  Currency currencyType : priceFile.getCurrencies()) {
    sortedCurrencies.put(currencyType.getPrice(),currencyType);
  }
  Object[] reversedCurrencies=sortedCurrencies.values().toArray();
  for (int i=0; i < reversedCurrencies.length / 2; i++) {
    Currency temp=(Currency)reversedCurrencies[i];
    reversedCurrencies[i]=reversedCurrencies[reversedCurrencies.length - i - 1];
    reversedCurrencies[reversedCurrencies.length - i - 1]=temp;
  }
  HashMap<Currency,Integer> change=makeChange(amount * cost,reversedCurrencies);
  for (int i=0; i < change.size(); i++) {
    Currency changeCurrency=(Currency)change.keySet().toArray()[i];
    Integer changeAmount=(Integer)change.values().toArray()[i];
    List<Integer> splitamount=new ArrayList<Integer>();
    while (changeAmount > 0) {
      Integer maxAmount=new InventoryBackend(priceFile.plugin).getStackNumber(changeCurrency.getItemId());
      if (changeAmount > maxAmount) {
        splitamount.add(maxAmount);
        changeAmount-=maxAmount;
      }
 else {
        splitamount.add(changeAmount);
        changeAmount=0;
      }
    }
    for (    Integer amt : splitamount) {
      if (user.getHandle().getInventory().firstEmpty() >= 0) {
        user.getHandle().getInventory().addItem(new ItemStack(changeCurrency.getMaterial(),amt));
      }
 else {
        user.getHandle().getWorld().dropItem(user.getHandle().getLocation(),new ItemStack(changeCurrency.getMaterial(),amt));
      }
    }
  }
  supdem-=fullAmt;
  if (supply != -1) {
    supply+=fullAmt;
  }
  return true;
}","public boolean sellItem(User user,Integer amount){
  Integer amountHas=0;
  Integer amountTaken=0;
  Integer fullAmt=amount;
  HashMap<Integer,? extends ItemStack> matches=user.getHandle().getInventory().all(this.getMaterial());
  for (  ItemStack iStack : matches.values()) {
    if (iStack.getDurability() != this.durability) {
      continue;
    }
    amountHas+=iStack.getAmount();
  }
  if (amount > amountHas) {
    return false;
  }
  for (int i=0; i < matches.size(); i++) {
    ItemStack iStack=(ItemStack)matches.values().toArray()[i];
    if (iStack.getDurability() != this.durability) {
      continue;
    }
    Integer slot=(Integer)matches.keySet().toArray()[i];
    if (amountTaken + iStack.getAmount() <= amount) {
      amountTaken+=iStack.getAmount();
      user.getHandle().getInventory().clear(slot);
    }
 else {
      Integer toTake=amount - amountTaken;
      amountTaken+=toTake;
      iStack.setAmount(iStack.getAmount() - toTake);
      user.getHandle().getInventory().setItem(slot,iStack);
    }
    if (amountTaken == amount) {
      break;
    }
  }
  HashMap<Double,Currency> sortedCurrencies=new HashMap<Double,Currency>();
  for (  Currency currencyType : priceFile.getCurrencies()) {
    sortedCurrencies.put(currencyType.getPrice(),currencyType);
  }
  Object[] reversedCurrencies=sortedCurrencies.values().toArray();
  for (int i=0; i < reversedCurrencies.length / 2; i++) {
    Currency temp=(Currency)reversedCurrencies[i];
    reversedCurrencies[i]=reversedCurrencies[reversedCurrencies.length - i - 1];
    reversedCurrencies[reversedCurrencies.length - i - 1]=temp;
  }
  HashMap<Currency,Integer> change=makeChange(amount * cost,reversedCurrencies);
  for (int i=0; i < change.size(); i++) {
    Currency changeCurrency=(Currency)change.keySet().toArray()[i];
    Integer changeAmount=(Integer)change.values().toArray()[i];
    List<Integer> splitamount=new ArrayList<Integer>();
    while (changeAmount > 0) {
      Integer maxAmount=new InventoryBackend(priceFile.plugin).getStackNumber(changeCurrency.getItemId());
      if (changeAmount > maxAmount) {
        splitamount.add(maxAmount);
        changeAmount-=maxAmount;
      }
 else {
        splitamount.add(changeAmount);
        changeAmount=0;
      }
    }
    for (    Integer amt : splitamount) {
      if (user.getHandle().getInventory().firstEmpty() >= 0) {
        user.getHandle().getInventory().addItem(new ItemStack(changeCurrency.getMaterial(),amt));
      }
 else {
        user.getHandle().getWorld().dropItem(user.getHandle().getLocation(),new ItemStack(changeCurrency.getMaterial(),amt));
      }
    }
  }
  supdem-=fullAmt;
  if (supply != -1) {
    supply+=fullAmt;
  }
  return true;
}",0.9859524255478554
179118,"public boolean Unspy(User user){
  if (isMod(user)) {
    if (!isSpying(user)) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return false;
    }
    for (int i=0; i < spies.size(); i++) {
      if (spies.get(i).getName().equalsIgnoreCase(user.getName())) {
        spies.remove(i);
      }
    }
    user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + name);
    return true;
  }
 else {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return false;
  }
}","public boolean Unspy(User user){
  if (isMod(user) || isOwner(user)) {
    if (!isSpying(user)) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return false;
    }
    for (int i=0; i < spies.size(); i++) {
      if (spies.get(i).getName().equalsIgnoreCase(user.getName())) {
        spies.remove(i);
      }
    }
    user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + name);
    return true;
  }
 else {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return false;
  }
}",0.982982982982983
179119,"public boolean Kick(User user){
  if (isOwner(user)) {
    return false;
  }
  if (isMod(user)) {
    return false;
  }
  if (isOnline(user) != null) {
    leaveChannel(user);
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
 else {
    return false;
  }
}","public boolean Kick(User user){
  if (isOwner(user)) {
    return false;
  }
  if (isMod(user)) {
    return false;
  }
  if (isOnline(user) != null) {
    user.leaveChannel();
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
 else {
    return false;
  }
}",0.9842381786339754
179120,"public void sendChat(User user,String message){
  if (isMuted(user)) {
    user.sendMessage(ChatColor.GRAY + control.plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str""));
  }
  boolean blocked=ChatChecker.checkBlocked(message,control.plugin);
  if (blocked) {
    user.sendMessage(ChatColor.GRAY + control.plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  long slowTimeLeft=slow.playerBlocked(user.getName());
  if (!(isMod(user) || isOwner(user)) && slow.isEnabled()) {
    if (slowTimeLeft > 0) {
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + (int)Math.ceil(slowTimeLeft / 1000)+ ""String_Node_Str"");
      return;
    }
 else {
      slow.playerAdd(user.getName());
    }
  }
  String username=user.getColor() + user.getName();
  if (isOwner(user)) {
    username=ChatColor.GOLD + ""String_Node_Str"" + username;
  }
 else   if (isMod(user)) {
    username=ChatColor.GRAY + ""String_Node_Str"" + username;
  }
  String prefix;
  if (user.getGroup() != null && !(prefix=user.getGroup().getPrefix()).isEmpty()) {
    message=user.getGroup().getPrefixColor() + ""String_Node_Str"" + prefix+ ""String_Node_Str""+ username+ ""String_Node_Str""+ ChatColor.WHITE+ message;
    this.broadcastMessage(message);
  }
 else {
    message=username + ""String_Node_Str"" + ChatColor.WHITE+ message;
    this.broadcastMessage(message);
  }
}","public void sendChat(User user,String message){
  if (isMuted(user)) {
    user.sendMessage(ChatColor.GRAY + control.plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  boolean blocked=ChatChecker.checkBlocked(message,control.plugin);
  if (blocked) {
    user.sendMessage(ChatColor.GRAY + control.plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  long slowTimeLeft=slow.playerBlocked(user.getName());
  if (!(isMod(user) || isOwner(user)) && slow.isEnabled()) {
    if (slowTimeLeft > 0) {
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + (int)Math.ceil(slowTimeLeft / 1000)+ ""String_Node_Str"");
      return;
    }
 else {
      slow.playerAdd(user.getName());
    }
  }
  String username=user.getColor() + user.getName();
  if (isOwner(user)) {
    username=ChatColor.GOLD + ""String_Node_Str"" + username;
  }
 else   if (isMod(user)) {
    username=ChatColor.GRAY + ""String_Node_Str"" + username;
  }
  String prefix;
  if (user.getGroup() != null && !(prefix=user.getGroup().getPrefix()).isEmpty()) {
    message=user.getGroup().getPrefixColor() + ""String_Node_Str"" + prefix+ ""String_Node_Str""+ username+ ""String_Node_Str""+ ChatColor.WHITE+ message;
    this.broadcastMessage(message);
  }
 else {
    message=username + ""String_Node_Str"" + ChatColor.WHITE+ message;
    this.broadcastMessage(message);
  }
}",0.9956896551724138
179121,"public ChatLevel joinChannel(User user){
  ChatLevel level;
switch (level=getLevel(user)) {
case BANNED:
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
case MUTED:
  user.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + ChatColor.GREEN+ this.name);
user.sendMessage(ChatColor.YELLOW + motd);
user.sendMessage(ChatColor.RED + ""String_Node_Str"");
forceJoin(user);
default :
user.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + ChatColor.GREEN+ this.name);
user.sendMessage(ChatColor.YELLOW + motd);
if (user.hasPerm(""String_Node_Str"") && !isMod(user) && !isOwner(user)) {
Mod(user);
}
forceJoin(user);
}
return level;
}","public ChatLevel joinChannel(User user){
  if (isSpying(user)) {
    Unspy(user);
  }
  ChatLevel level;
switch (level=getLevel(user)) {
case BANNED:
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
  break;
case MUTED:
user.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + ChatColor.GREEN+ this.name);
user.sendMessage(ChatColor.YELLOW + motd);
user.sendMessage(ChatColor.RED + ""String_Node_Str"");
forceJoin(user);
break;
default :
user.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + ChatColor.GREEN+ this.name);
user.sendMessage(ChatColor.YELLOW + motd);
if (user.hasPerm(""String_Node_Str"") && !isMod(user) && !isOwner(user)) {
Mod(user);
}
forceJoin(user);
break;
}
return level;
}",0.947209653092006
179122,"public boolean Spy(User user){
  if (isMod(user)) {
    if (isOnline(user) != null) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return false;
    }
    if (isSpying(user)) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return false;
    }
    spies.add(user);
    user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + name);
    user.sendMessage(ChatColor.YELLOW + motd);
    return true;
  }
 else {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return false;
  }
}","public boolean Spy(User user){
  if (isMod(user) || isOwner(user)) {
    if (isOnline(user) != null) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return false;
    }
    if (isSpying(user)) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return false;
    }
    spies.add(user);
    user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + name);
    user.sendMessage(ChatColor.YELLOW + motd);
    return true;
  }
 else {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return false;
  }
}",0.984037558685446
179123,"protected void broadcastMessage(String message){
  control.plugin.log.info(""String_Node_Str"" + name + ""String_Node_Str""+ message);
  for (  User user : inChannel) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + this.name+ ""String_Node_Str""+ ChatColor.WHITE+ message);
  }
  for (  User user : spies) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + this.name+ ""String_Node_Str""+ ChatColor.WHITE+ message);
  }
}","protected void broadcastMessage(String message){
  control.plugin.log.info(""String_Node_Str"" + name + ""String_Node_Str""+ ChatColor.stripColor(message));
  for (  User user : inChannel) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + this.name+ ""String_Node_Str""+ ChatColor.WHITE+ message);
  }
  for (  User user : spies) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + this.name+ ""String_Node_Str""+ ChatColor.WHITE+ message);
  }
}",0.959910913140312
179124,"public void leaveChannel(User user){
  for (int i=0; i < inChannel.size(); i++) {
    if (inChannel.get(i).getName().equalsIgnoreCase(user.getName())) {
      inChannel.remove(i);
      if (isOwner(user)) {
        broadcastMessage(ChatColor.GOLD + ""String_Node_Str"" + user.getColor()+ user.getName()+ ChatColor.WHITE+ ""String_Node_Str"");
      }
 else       if (isMod(user)) {
        broadcastMessage(ChatColor.GRAY + ""String_Node_Str"" + user.getColor()+ user.getName()+ ChatColor.WHITE+ ""String_Node_Str"");
      }
 else {
        broadcastMessage(user.getColor() + user.getName() + ChatColor.WHITE+ ""String_Node_Str"");
      }
      return;
    }
  }
  user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + name);
}","public void leaveChannel(User user){
  for (int i=0; i < inChannel.size(); i++) {
    if (inChannel.get(i).getName().equalsIgnoreCase(user.getName())) {
      inChannel.remove(i);
      if (isOwner(user)) {
        broadcastMessage(ChatColor.GOLD + ""String_Node_Str"" + user.getColor()+ user.getName()+ ChatColor.WHITE+ ""String_Node_Str"");
      }
 else       if (isMod(user)) {
        broadcastMessage(ChatColor.GRAY + ""String_Node_Str"" + user.getColor()+ user.getName()+ ChatColor.WHITE+ ""String_Node_Str"");
      }
 else {
        broadcastMessage(user.getColor() + user.getName() + ChatColor.WHITE+ ""String_Node_Str"");
      }
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + name);
      return;
    }
  }
}",0.969486823855756
179125,"protected String getValue(){
  String value=owner.getName() + ""String_Node_Str"";
  for (int i=0; i < mods.size(); i++) {
    if (i != 0) {
      value+=""String_Node_Str"";
    }
    value+=mods.get(i).getName();
  }
  value+=""String_Node_Str"";
  for (int i=0; i < guests.size(); i++) {
    if (i != 0) {
      value+=""String_Node_Str"";
    }
    value+=guests.get(i).getName();
  }
  value+=""String_Node_Str"";
  for (int i=0; i < banned.size(); i++) {
    if (i != 0) {
      value+=""String_Node_Str"";
    }
    value+=banned.get(i).getName();
  }
  value+=""String_Node_Str"";
  for (int i=0; i < muted.size(); i++) {
    if (i != 0) {
      value+=""String_Node_Str"";
    }
    value+=muted.get(i).getName();
  }
  value+=""String_Node_Str"";
switch (defLevel) {
case BANNED:
    value+=""String_Node_Str"";
case MUTED:
  value+=""String_Node_Str"";
default :
value+=""String_Node_Str"";
}
return value;
}","protected String getValue(){
  String value=owner.getName() + ""String_Node_Str"";
  for (int i=0; i < mods.size(); i++) {
    if (i != 0) {
      value+=""String_Node_Str"";
    }
    value+=mods.get(i).getName();
  }
  value+=""String_Node_Str"";
  for (int i=0; i < guests.size(); i++) {
    if (i != 0) {
      value+=""String_Node_Str"";
    }
    value+=guests.get(i).getName();
  }
  value+=""String_Node_Str"";
  for (int i=0; i < banned.size(); i++) {
    if (i != 0) {
      value+=""String_Node_Str"";
    }
    value+=banned.get(i).getName();
  }
  value+=""String_Node_Str"";
  for (int i=0; i < muted.size(); i++) {
    if (i != 0) {
      value+=""String_Node_Str"";
    }
    value+=muted.get(i).getName();
  }
  value+=""String_Node_Str"" + motd + ""String_Node_Str"";
switch (defLevel) {
case BANNED:
    value+=""String_Node_Str"";
case MUTED:
  value+=""String_Node_Str"";
default :
value+=""String_Node_Str"";
}
return value;
}",0.9851403412217942
179126,"public void Channel(String[] args,User user){
  if (args.length == 0) {
    if (user.inChannel()) {
      if (user.getActiveChannel().isOwner(user)) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
 else       if (user.getActiveChannel().isMod(user)) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
 else {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
    }
 else {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    }
  }
 else {
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (!user.inChannel()) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        user.leaveChannel();
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (!user.inChannel()) {
        if (args.length == 1) {
          plugin.channels.listChannels(user);
        }
 else {
          ChatChannel channel=plugin.channels.getChannel(args[1]);
          if (channel == null) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
 else {
            if (channel.isMod(user) || channel.isOwner(user)) {
              channel.listUsers(user);
            }
 else {
              user.sendMessage(ChatColor.RED + ""String_Node_Str"");
            }
          }
        }
      }
 else {
        if (args.length == 1) {
          user.getActiveChannel().listUsers(user);
        }
 else {
          ChatChannel channel=plugin.channels.getChannel(args[1]);
          if (channel == null) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
 else {
            if (channel.isMod(user) || channel.isOwner(user) || (channel.isOnline(user) != null)) {
              channel.listUsers(user);
            }
 else {
              user.sendMessage(ChatColor.RED + ""String_Node_Str"");
            }
          }
        }
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length != 2) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (user.inChannel()) {
        if (user.getActiveChannel().isMod(user) || user.getActiveChannel().isOwner(user)) {
          PermissionUser mutee=PermissionUser.matchUserIgnoreCase(args[1],plugin);
          if (mutee != null) {
            if (user.getActiveChannel().isMod(user) && user.getActiveChannel().isMod(mutee)) {
              user.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return;
            }
            user.getActiveChannel().Mute(mutee);
          }
 else {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
        }
 else {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length != 2) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (user.inChannel()) {
        if (user.getActiveChannel().isMod(user) || user.getActiveChannel().isOwner(user)) {
          User kickee=user.getActiveChannel().isOnline(PermissionUser.matchUserIgnoreCase(args[1],plugin));
          if (kickee != null) {
            if (user.getActiveChannel().isMod(user) && user.getActiveChannel().isMod(kickee)) {
              user.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return;
            }
            user.getActiveChannel().Kick(kickee);
          }
 else {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
        }
 else {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length != 2) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (user.inChannel()) {
        if (user.getActiveChannel().isMod(user) || user.getActiveChannel().isOwner(user)) {
          PermissionUser banee=PermissionUser.matchUserIgnoreCase(args[1],plugin);
          if (banee != null) {
            if (user.getActiveChannel().isMod(user) && user.getActiveChannel().isMod(banee)) {
              user.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return;
            }
            user.getActiveChannel().Ban(banee);
          }
 else {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
        }
 else {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length != 2) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (user.inChannel()) {
        if (user.getActiveChannel().isMod(user) || user.getActiveChannel().isOwner(user)) {
          PermissionUser guestee=PermissionUser.matchUserIgnoreCase(args[1],plugin);
          if (guestee != null) {
            if (user.getActiveChannel().isMod(user) && user.getActiveChannel().isMod(guestee)) {
              user.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return;
            }
            user.getActiveChannel().Guest(guestee);
          }
 else {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
        }
 else {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length > 2) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (user.inChannel()) {
        if (user.getActiveChannel().isMod(user) || user.getActiveChannel().isOwner(user)) {
          if (args.length == 1) {
            if (user.getActiveChannel().isSlow()) {
              user.getActiveChannel().disableSlow();
            }
 else {
              user.getActiveChannel().enableSlow();
            }
          }
 else {
            int millis;
            try {
              millis=Integer.parseInt(args[1]);
            }
 catch (            NumberFormatException e) {
              user.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return;
            }
            user.getActiveChannel().enableSlow(millis);
          }
        }
 else {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (!user.inChannel()) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (args.length == 1) {
        user.sendMessage(ChatColor.YELLOW + user.getActiveChannel().getMotd());
      }
 else {
        if (user.getActiveChannel().isMod(user) || user.getActiveChannel().isOwner(user)) {
          for (int i=1; i < args.length; i++) {
          }
        }
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length != 2) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (user.inChannel()) {
        if (user.getActiveChannel().isOwner(user)) {
          PermissionUser owner=PermissionUser.matchUserIgnoreCase(args[1],plugin);
          if (owner != null) {
            user.getActiveChannel().changeOwner(owner);
          }
 else {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
        }
 else {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length != 2) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (user.inChannel()) {
        if (user.getActiveChannel().isOwner(user)) {
          PermissionUser mod=PermissionUser.matchUserIgnoreCase(args[1],plugin);
          if (mod != null) {
            user.getActiveChannel().Mod(mod);
          }
 else {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
        }
 else {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length != 2) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      ChatChannel channel=plugin.channels.getChannel(args[1]);
      if (channel != null) {
        user.joinChannel(channel);
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length != 2) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      ChatChannel channel=plugin.channels.getChannel(args[1]);
      if (channel != null) {
        user.spyChannel(channel);
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length != 2) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      ChatChannel channel=plugin.channels.getChannel(args[1]);
      if (channel != null) {
        user.unspyChannel(channel);
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    }
  }
}","public void Channel(String[] args,User user){
  if (args.length == 0) {
    if (user.inChannel()) {
      if (user.getActiveChannel().isOwner(user)) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
 else       if (user.getActiveChannel().isMod(user)) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
 else {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
    }
 else {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    }
  }
 else {
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (!user.inChannel()) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        user.leaveChannel();
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (!user.inChannel()) {
        if (args.length == 1) {
          plugin.channels.listChannels(user);
        }
 else {
          ChatChannel channel=plugin.channels.getChannel(args[1]);
          if (channel == null) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
 else {
            if (channel.isMod(user) || channel.isOwner(user)) {
              channel.listUsers(user);
            }
 else {
              user.sendMessage(ChatColor.RED + ""String_Node_Str"");
            }
          }
        }
      }
 else {
        if (args.length == 1) {
          user.getActiveChannel().listUsers(user);
        }
 else {
          ChatChannel channel=plugin.channels.getChannel(args[1]);
          if (channel == null) {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
 else {
            if (channel.isMod(user) || channel.isOwner(user) || (channel.isOnline(user) != null)) {
              channel.listUsers(user);
            }
 else {
              user.sendMessage(ChatColor.RED + ""String_Node_Str"");
            }
          }
        }
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length != 2) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (user.inChannel()) {
        if (user.getActiveChannel().isMod(user) || user.getActiveChannel().isOwner(user)) {
          PermissionUser mutee=PermissionUser.matchUserIgnoreCase(args[1],plugin);
          if (mutee != null) {
            if (user.getActiveChannel().isMod(user) && user.getActiveChannel().isMod(mutee)) {
              user.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return;
            }
            user.getActiveChannel().Mute(mutee);
          }
 else {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
        }
 else {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length != 2) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (user.inChannel()) {
        if (user.getActiveChannel().isMod(user) || user.getActiveChannel().isOwner(user)) {
          User kickee=user.getActiveChannel().isOnline(PermissionUser.matchUserIgnoreCase(args[1],plugin));
          if (kickee != null) {
            if (user.getActiveChannel().isMod(user) && user.getActiveChannel().isMod(kickee)) {
              user.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return;
            }
            user.getActiveChannel().Kick(kickee);
          }
 else {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
        }
 else {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length != 2) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (user.inChannel()) {
        if (user.getActiveChannel().isMod(user) || user.getActiveChannel().isOwner(user)) {
          PermissionUser banee=PermissionUser.matchUserIgnoreCase(args[1],plugin);
          if (banee != null) {
            if (user.getActiveChannel().isMod(user) && user.getActiveChannel().isMod(banee)) {
              user.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return;
            }
            user.getActiveChannel().Ban(banee);
          }
 else {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
        }
 else {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length != 2) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (user.inChannel()) {
        if (user.getActiveChannel().isMod(user) || user.getActiveChannel().isOwner(user)) {
          PermissionUser guestee=PermissionUser.matchUserIgnoreCase(args[1],plugin);
          if (guestee != null) {
            if (user.getActiveChannel().isMod(user) && user.getActiveChannel().isMod(guestee)) {
              user.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return;
            }
            user.getActiveChannel().Guest(guestee);
          }
 else {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
        }
 else {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length > 2) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (user.inChannel()) {
        if (user.getActiveChannel().isMod(user) || user.getActiveChannel().isOwner(user)) {
          if (args.length == 1) {
            if (user.getActiveChannel().isSlow()) {
              user.getActiveChannel().disableSlow();
            }
 else {
              user.getActiveChannel().enableSlow();
            }
          }
 else {
            int millis;
            try {
              millis=Integer.parseInt(args[1]);
            }
 catch (            NumberFormatException e) {
              user.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return;
            }
            user.getActiveChannel().enableSlow(millis);
          }
        }
 else {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (!user.inChannel()) {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
      if (args.length == 1) {
        user.sendMessage(ChatColor.YELLOW + user.getActiveChannel().getMotd());
      }
 else {
        if (user.getActiveChannel().isMod(user) || user.getActiveChannel().isOwner(user)) {
          String newMotd=""String_Node_Str"";
          for (int i=1; i < args.length; i++) {
            if (newMotd.isEmpty()) {
              newMotd+=args[i];
            }
 else {
              newMotd+=""String_Node_Str"" + args[i];
            }
          }
          user.getActiveChannel().setMotd(newMotd);
          user.sendMessage(ChatColor.YELLOW + user.getActiveChannel().getMotd());
        }
 else {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length != 2) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (user.inChannel()) {
        if (user.getActiveChannel().isOwner(user)) {
          PermissionUser owner=PermissionUser.matchUserIgnoreCase(args[1],plugin);
          if (owner != null) {
            user.getActiveChannel().changeOwner(owner);
          }
 else {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
        }
 else {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length != 2) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      if (user.inChannel()) {
        if (user.getActiveChannel().isOwner(user)) {
          PermissionUser mod=PermissionUser.matchUserIgnoreCase(args[1],plugin);
          if (mod != null) {
            user.getActiveChannel().Mod(mod);
          }
 else {
            user.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
        }
 else {
          user.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length != 2) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      ChatChannel channel=plugin.channels.getChannel(args[1]);
      if (channel != null) {
        user.joinChannel(channel);
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length != 2) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      ChatChannel channel=plugin.channels.getChannel(args[1]);
      if (channel != null) {
        user.spyChannel(channel);
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length != 2) {
        user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
        return;
      }
      ChatChannel channel=plugin.channels.getChannel(args[1]);
      if (channel != null) {
        user.unspyChannel(channel);
      }
 else {
        user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    }
  }
}",0.9173005656329236
179127,"public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  User user;
  try {
    user=new User(plugin,(Player)sender);
  }
 catch (  ClassCastException e) {
    user=new User(plugin);
  }
  if (commandLabel.equalsIgnoreCase(""String_Node_Str"") && user.hasPerm(""String_Node_Str"")) {
    Time(args,user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"") && user.hasPerm(""String_Node_Str"")) {
    Spawn(args,user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"") && user.hasPerm(""String_Node_Str"")) {
    God(args,user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"") && user.hasPerm(""String_Node_Str"")) {
    Heal(args,user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"") && user.hasPerm(""String_Node_Str"")) {
    GenTree(user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"")) {
    BenCmd(args,user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"") && user.hasPerm(""String_Node_Str"")) {
    SetSpawn(user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"")) {
    Help(args,user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"")) {
    plugin.getServer().dispatchCommand(sender,""String_Node_Str"");
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"") && user.hasPerm(""String_Node_Str"")) {
    Kill(args,user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"") && user.hasPerm(""String_Node_Str"")) {
    SpawnMob(args,user);
    return true;
  }
  return false;
}","public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  User user;
  try {
    user=User.getUser(plugin,(Player)sender);
  }
 catch (  ClassCastException e) {
    user=User.getUser(plugin);
  }
  if (commandLabel.equalsIgnoreCase(""String_Node_Str"") && user.hasPerm(""String_Node_Str"")) {
    Time(args,user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"") && user.hasPerm(""String_Node_Str"")) {
    Spawn(args,user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"") && user.hasPerm(""String_Node_Str"")) {
    God(args,user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"") && user.hasPerm(""String_Node_Str"")) {
    Heal(args,user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"") && user.hasPerm(""String_Node_Str"")) {
    GenTree(user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"")) {
    BenCmd(args,user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"") && user.hasPerm(""String_Node_Str"")) {
    SetSpawn(user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"")) {
    Help(args,user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"")) {
    plugin.getServer().dispatchCommand(sender,""String_Node_Str"");
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"") && user.hasPerm(""String_Node_Str"")) {
    Kill(args,user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"") && user.hasPerm(""String_Node_Str"")) {
    SpawnMob(args,user);
    return true;
  }
  return false;
}",0.9930994824611846
179128,"public void Heal(String[] args,User user){
  if (args.length == 0) {
    if (user.isServer()) {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    user.Heal();
    user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    log.info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ user.getName());
  }
 else {
    User user2;
    if ((user2=User.matchUser(args[0],plugin)) != null) {
      user2=new User(plugin,plugin.getServer().matchPlayer(args[0]).get(0));
      user2.Heal();
      user2.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      log.info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ user2.getName());
    }
 else {
      user.sendMessage(ChatColor.RED + args[0] + ""String_Node_Str"");
    }
  }
}","public void Heal(String[] args,User user){
  if (args.length == 0) {
    if (user.isServer()) {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      return;
    }
    user.Heal();
    user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    log.info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ user.getName());
  }
 else {
    User user2;
    if ((user2=User.matchUser(args[0],plugin)) != null) {
      user2=User.matchUser(args[0],plugin);
      user2.Heal();
      user2.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      log.info(""String_Node_Str"" + user.getName() + ""String_Node_Str""+ user2.getName());
    }
 else {
      user.sendMessage(ChatColor.RED + args[0] + ""String_Node_Str"");
    }
  }
}",0.9660678642714572
179129,"public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (new BasicCommands(this).onCommand(sender,command,commandLabel,args)) {
    return true;
  }
 else   if (new ChatCommands(this).onCommand(sender,command,commandLabel,args)) {
    return true;
  }
 else   if (new PermissionCommands(this).onCommand(sender,command,commandLabel,args)) {
    return true;
  }
 else   if (new WarpCommands(this).onCommand(sender,command,commandLabel,args)) {
    return true;
  }
 else   if (new InventoryCommands(this).onCommand(sender,command,commandLabel,args)) {
    return true;
  }
 else   if (new LotCommands(this).onCommand(sender,command,commandLabel,args)) {
    return true;
  }
 else   if (new InvisibleCommands(this).onCommand(sender,command,commandLabel,args)) {
    return true;
  }
 else   if (new ProtectedCommands(this).onCommand(sender,command,commandLabel,args)) {
    return true;
  }
 else   if (new ChatChannelCommands(this).onCommand(sender,command,commandLabel,args)) {
    return true;
  }
 else   if (new ReportCommands(this).onCommand(sender,command,commandLabel,args)) {
    return true;
  }
 else   if (new WeatherCommands(this).onCommand(sender,command,commandLabel,args)) {
    return true;
  }
 else   if (new MoneyCommands(this).onCommand(sender,command,commandLabel,args)) {
    return true;
  }
 else {
    User user;
    try {
      user=new User(this,(Player)sender);
    }
 catch (    ClassCastException e) {
      user=new User(this);
    }
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
}","public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (new BasicCommands(this).onCommand(sender,command,commandLabel,args)) {
    return true;
  }
 else   if (new ChatCommands(this).onCommand(sender,command,commandLabel,args)) {
    return true;
  }
 else   if (new PermissionCommands(this).onCommand(sender,command,commandLabel,args)) {
    return true;
  }
 else   if (new WarpCommands(this).onCommand(sender,command,commandLabel,args)) {
    return true;
  }
 else   if (new InventoryCommands(this).onCommand(sender,command,commandLabel,args)) {
    return true;
  }
 else   if (new LotCommands(this).onCommand(sender,command,commandLabel,args)) {
    return true;
  }
 else   if (new InvisibleCommands(this).onCommand(sender,command,commandLabel,args)) {
    return true;
  }
 else   if (new ProtectedCommands(this).onCommand(sender,command,commandLabel,args)) {
    return true;
  }
 else   if (new ChatChannelCommands(this).onCommand(sender,command,commandLabel,args)) {
    return true;
  }
 else   if (new ReportCommands(this).onCommand(sender,command,commandLabel,args)) {
    return true;
  }
 else   if (new WeatherCommands(this).onCommand(sender,command,commandLabel,args)) {
    return true;
  }
 else   if (new MoneyCommands(this).onCommand(sender,command,commandLabel,args)) {
    return true;
  }
 else {
    User user;
    try {
      user=User.getUser(this,(Player)sender);
    }
 catch (    ClassCastException e) {
      user=User.getUser(this);
    }
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
}",0.9924764890282132
179130,"@Override public void onEnable(){
  new File(propDir).mkdirs();
  if (!mainProp.exists()) {
    try {
      mainProp.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!itemAlias.exists()) {
    try {
      itemAlias.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!unlDisp.exists()) {
    try {
      unlDisp.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!dispChests.exists()) {
    try {
      dispChests.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!lotFile.exists()) {
    try {
      lotFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!kitFile.exists()) {
    try {
      kitFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!proFile.exists()) {
    try {
      proFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!chatFile.exists()) {
    try {
      chatFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!ticketFile.exists()) {
    try {
      ticketFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!pricesFile.exists()) {
    try {
      pricesFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  perm=new MainPermissions(this);
  warps=new WarpList(this);
  homes=new HomeWarps(this);
  checkpoints=new PreWarp(this);
  blockCheck=new BlockChecker(this);
  mainProperties=new PluginProperties(propDir + ""String_Node_Str"");
  mainProperties.loadFile();
  itemAliases=new PluginProperties(propDir + ""String_Node_Str"");
  itemAliases.loadFile();
  chatListen=new ChatPlayerListener(this);
  jail=new Jail(this);
  dispensers=new UnlimitedDisp(propDir + ""String_Node_Str"");
  chests=new DispChest(propDir + ""String_Node_Str"");
  lots=new LotFile(this);
  kits=new KitList(this);
  creeperListen=new CreeperListener(this);
  inv=new Invisibility(this);
  protectFile=new ProtectFile(this,propDir + ""String_Node_Str"");
  channels=new ChatChannelController(propDir + ""String_Node_Str"",this);
  maxPlayers=new MaxPlayers(this,mainProperties.getInteger(""String_Node_Str"",10),mainProperties.getInteger(""String_Node_Str"",4),mainProperties.getBoolean(""String_Node_Str"",true),mainProperties.getBoolean(""String_Node_Str"",true));
  reports=new ReportFile(this);
  flyDetect=new FlyDetect(this);
  strikeBind=new WeatherBinding(this);
  prices=new PriceFile(this,propDir + ""String_Node_Str"");
  kicked=new KickList(this);
  if (!sanityCheck()) {
    this.getServer().getPluginManager().disablePlugin(this);
    return;
  }
  for (  Player player : this.getServer().getOnlinePlayers()) {
    User user;
    JoinType jt=maxPlayers.join(user=new User(this,player));
    if (jt == JoinType.NO_SLOT_NORMAL || jt == JoinType.NO_SLOT_RESERVED) {
      user.Kick(""String_Node_Str"");
    }
  }
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_JOIN,this.chatListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_LOGIN,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.blockCheck,Event.Priority.High,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.blockCheck,Event.Priority.High,this);
  pm.registerEvent(Event.Type.BLOCK_BURN,this.blockCheck,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_IGNITE,this.blockCheck,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.invPlayerListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.invBlockListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,this.death,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,this.death,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.REDSTONE_CHANGE,this.invBlockListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.lotBListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.lotBListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_PICKUP_ITEM,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_DROP_ITEM,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,this.creeperListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.pbListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.ppListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_BUCKET_EMPTY,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_BUCKET_FILL,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_KICK,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.EXPLOSION_PRIME,this.entListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.wpListen,Event.Priority.Highest,this);
  PluginDescriptionFile pdfFile=this.getDescription();
  FreezeTimer.schedule(new TimeFreeze(this),0,100);
  log.info(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
  if (mainProperties.getBoolean(""String_Node_Str"",false)) {
    log.warning(""String_Node_Str"");
  }
}","@Override public void onEnable(){
  new File(propDir).mkdirs();
  if (!mainProp.exists()) {
    try {
      mainProp.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!itemAlias.exists()) {
    try {
      itemAlias.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!unlDisp.exists()) {
    try {
      unlDisp.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!dispChests.exists()) {
    try {
      dispChests.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!lotFile.exists()) {
    try {
      lotFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!kitFile.exists()) {
    try {
      kitFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!proFile.exists()) {
    try {
      proFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!chatFile.exists()) {
    try {
      chatFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!ticketFile.exists()) {
    try {
      ticketFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!pricesFile.exists()) {
    try {
      pricesFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  User.finalizeAll();
  perm=new MainPermissions(this);
  warps=new WarpList(this);
  homes=new HomeWarps(this);
  checkpoints=new PreWarp(this);
  blockCheck=new BlockChecker(this);
  mainProperties=new PluginProperties(propDir + ""String_Node_Str"");
  mainProperties.loadFile();
  itemAliases=new PluginProperties(propDir + ""String_Node_Str"");
  itemAliases.loadFile();
  chatListen=new ChatPlayerListener(this);
  jail=new Jail(this);
  dispensers=new UnlimitedDisp(propDir + ""String_Node_Str"");
  chests=new DispChest(propDir + ""String_Node_Str"");
  lots=new LotFile(this);
  kits=new KitList(this);
  creeperListen=new CreeperListener(this);
  inv=new Invisibility(this);
  protectFile=new ProtectFile(this,propDir + ""String_Node_Str"");
  channels=new ChatChannelController(propDir + ""String_Node_Str"",this);
  maxPlayers=new MaxPlayers(this,mainProperties.getInteger(""String_Node_Str"",10),mainProperties.getInteger(""String_Node_Str"",4),mainProperties.getBoolean(""String_Node_Str"",true),mainProperties.getBoolean(""String_Node_Str"",true));
  reports=new ReportFile(this);
  flyDetect=new FlyDetect(this);
  strikeBind=new WeatherBinding(this);
  prices=new PriceFile(this,propDir + ""String_Node_Str"");
  kicked=new KickList(this);
  if (!sanityCheck()) {
    this.getServer().getPluginManager().disablePlugin(this);
    return;
  }
  for (  Player player : this.getServer().getOnlinePlayers()) {
    User user;
    JoinType jt=maxPlayers.join(user=User.getUser(this,player));
    if (jt == JoinType.NO_SLOT_NORMAL || jt == JoinType.NO_SLOT_RESERVED) {
      user.Kick(""String_Node_Str"");
    }
  }
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_JOIN,this.chatListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_LOGIN,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.blockCheck,Event.Priority.High,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.blockCheck,Event.Priority.High,this);
  pm.registerEvent(Event.Type.BLOCK_BURN,this.blockCheck,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_IGNITE,this.blockCheck,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.invPlayerListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.invBlockListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,this.death,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,this.death,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.REDSTONE_CHANGE,this.invBlockListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.lotBListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.lotBListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_PICKUP_ITEM,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_DROP_ITEM,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,this.creeperListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.pbListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.ppListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_BUCKET_EMPTY,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_BUCKET_FILL,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_KICK,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.EXPLOSION_PRIME,this.entListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.wpListen,Event.Priority.Highest,this);
  PluginDescriptionFile pdfFile=this.getDescription();
  FreezeTimer.schedule(new TimeFreeze(this),0,100);
  log.info(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
  if (mainProperties.getBoolean(""String_Node_Str"",false)) {
    log.warning(""String_Node_Str"");
  }
}",0.9973122529644268
179131,"/** 
 * Creates an ActionableUser corresponding to the console.
 * @param instance The BenCmd Plugin reference to point to
 */
public User(BenCmd instance){
  super(instance);
  plugin=instance;
}","/** 
 * Creates an ActionableUser corresponding to the console.
 * @param instance The BenCmd Plugin reference to point to
 */
private User(BenCmd instance){
  super(instance);
  plugin=instance;
}",0.9770992366412212
179132,"public boolean unspyChannel(ChatChannel channel){
  if (channel.Unspy(this)) {
    spying.remove(channel);
    return true;
  }
 else {
    return false;
  }
}","public boolean unspyChannel(ChatChannel channel){
  if (channel.Unspy(this)) {
    spying.remove(channel);
    pushSpying();
    return true;
  }
 else {
    return false;
  }
}",0.9464285714285714
179133,"public boolean spyChannel(ChatChannel channel){
  if (channel.Spy(this)) {
    spying.add(channel);
    return true;
  }
 else {
    return false;
  }
}","public boolean spyChannel(ChatChannel channel){
  if (channel.Spy(this)) {
    spying.add(channel);
    pushSpying();
    return true;
  }
 else {
    return false;
  }
}",0.9440993788819876
179134,"public boolean inChannel(){
  return (activeChannel == null);
}","public boolean inChannel(){
  return (activeChannel != null);
}",0.984126984126984
179135,"public static User matchUser(String name,BenCmd instance){
  for (  Player online : instance.getServer().getOnlinePlayers()) {
    if (online.getName().equalsIgnoreCase(name)) {
      return new User(instance,online);
    }
  }
  return null;
}","public static User matchUser(String name,BenCmd instance){
  for (  Player online : instance.getServer().getOnlinePlayers()) {
    if (online.getName().equalsIgnoreCase(name)) {
      return User.getUser(instance,online);
    }
  }
  return null;
}",0.975609756097561
179136,"public boolean joinChannel(ChatChannel channel){
  if (inChannel()) {
    getActiveChannel().leaveChannel(this);
  }
  if (channel.joinChannel(this) != ChatLevel.BANNED) {
    activeChannel=channel;
    return true;
  }
 else {
    return false;
  }
}","public boolean joinChannel(ChatChannel channel){
  if (inChannel()) {
    getActiveChannel().leaveChannel(this);
  }
  if (channel.joinChannel(this) != ChatLevel.BANNED) {
    activeChannel=channel;
    pushActive();
    return true;
  }
 else {
    return false;
  }
}",0.9653846153846154
179137,"public void leaveChannel(){
  getActiveChannel().leaveChannel(this);
}","public void leaveChannel(){
  getActiveChannel().leaveChannel(this);
  activeChannel=null;
  pushActive();
}",0.7865168539325843
179138,"public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  User user;
  try {
    user=new User(plugin,(Player)sender);
  }
 catch (  ClassCastException e) {
    user=new User(plugin);
  }
  if (commandLabel.equalsIgnoreCase(""String_Node_Str"")) {
    tell(args,user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"") && user.hasPerm(""String_Node_Str"")) {
    list(args,user);
    return true;
  }
  if (channelsEnabled()) {
    return false;
  }
  if (commandLabel.equalsIgnoreCase(""String_Node_Str"") && user.hasPerm(""String_Node_Str"")) {
    slowMode(args,user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"") && user.hasPerm(""String_Node_Str"")) {
    mute(args,user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"") && user.hasPerm(""String_Node_Str"")) {
    unmute(args,user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"")) {
    me(args,user);
    return true;
  }
  return false;
}","public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  User user;
  try {
    user=User.getUser(plugin,(Player)sender);
  }
 catch (  ClassCastException e) {
    user=User.getUser(plugin);
  }
  if (commandLabel.equalsIgnoreCase(""String_Node_Str"")) {
    tell(args,user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"") && user.hasPerm(""String_Node_Str"")) {
    list(args,user);
    return true;
  }
  if (channelsEnabled()) {
    return false;
  }
  if (commandLabel.equalsIgnoreCase(""String_Node_Str"") && user.hasPerm(""String_Node_Str"")) {
    slowMode(args,user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"") && user.hasPerm(""String_Node_Str"")) {
    mute(args,user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"") && user.hasPerm(""String_Node_Str"")) {
    unmute(args,user);
    return true;
  }
 else   if (commandLabel.equalsIgnoreCase(""String_Node_Str"")) {
    me(args,user);
    return true;
  }
  return false;
}",0.9887640449438202
179139,"public void me(String[] args,User user){
  if (args.length == 0) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  if (user.isMuted()) {
    user.sendMessage(ChatColor.GRAY + plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  String message=""String_Node_Str"";
  for (  String word : args) {
    if (message == ""String_Node_Str"") {
      message+=word;
    }
 else {
      message+=""String_Node_Str"" + word;
    }
  }
  boolean blocked=ChatChecker.checkBlocked(message,plugin);
  if (blocked) {
    user.sendMessage(ChatColor.GRAY + plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  long slowTimeLeft=plugin.chatListen.slow.playerBlocked(user.getName());
  if ((!plugin.perm.userFile.hasPermission(user.getName(),""String_Node_Str"",true,true)) && plugin.chatListen.slow.isEnabled()) {
    if (slowTimeLeft > 0) {
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + (int)Math.ceil(slowTimeLeft / 1000)+ ""String_Node_Str"");
      return;
    }
 else {
      plugin.chatListen.slow.playerAdd(user.getName());
    }
  }
  message=ChatColor.WHITE + ""String_Node_Str"" + user.getColor()+ user.getName()+ ""String_Node_Str""+ ChatColor.WHITE+ message;
  plugin.getServer().broadcastMessage(message);
  new User(plugin).sendMessage(message);
}","public void me(String[] args,User user){
  if (args.length == 0) {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  if (user.isMuted()) {
    user.sendMessage(ChatColor.GRAY + plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  String message=""String_Node_Str"";
  for (  String word : args) {
    if (message == ""String_Node_Str"") {
      message+=word;
    }
 else {
      message+=""String_Node_Str"" + word;
    }
  }
  boolean blocked=ChatChecker.checkBlocked(message,plugin);
  if (blocked) {
    user.sendMessage(ChatColor.GRAY + plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  long slowTimeLeft=plugin.chatListen.slow.playerBlocked(user.getName());
  if ((!plugin.perm.userFile.hasPermission(user.getName(),""String_Node_Str"",true,true)) && plugin.chatListen.slow.isEnabled()) {
    if (slowTimeLeft > 0) {
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + (int)Math.ceil(slowTimeLeft / 1000)+ ""String_Node_Str"");
      return;
    }
 else {
      plugin.chatListen.slow.playerAdd(user.getName());
    }
  }
  message=ChatColor.WHITE + ""String_Node_Str"" + user.getColor()+ user.getName()+ ""String_Node_Str""+ ChatColor.WHITE+ message;
  plugin.getServer().broadcastMessage(message);
  User.getUser(plugin).sendMessage(message);
}",0.9955456570155902
179140,"public void list(String[] args,User user){
  Player[] playerList=plugin.getServer().getOnlinePlayers();
  if (playerList.length == 1 && !user.isServer()) {
    user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  }
 else {
    String playerString=""String_Node_Str"";
    for (    Player player2 : playerList) {
      User user2=new User(plugin,player2);
      if (user2.isOffline() && !user.isServer()) {
        continue;
      }
      playerString+=user2.getColor() + user2.getName() + ChatColor.WHITE+ ""String_Node_Str"";
    }
    user.sendMessage(""String_Node_Str"" + playerString);
  }
}","public void list(String[] args,User user){
  Player[] playerList=plugin.getServer().getOnlinePlayers();
  if (playerList.length == 1 && !user.isServer()) {
    user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  }
 else {
    String playerString=""String_Node_Str"";
    for (    Player player2 : playerList) {
      User user2=User.getUser(plugin,player2);
      if (user2.isOffline() && !user.isServer()) {
        continue;
      }
      playerString+=user2.getColor() + user2.getName() + ChatColor.WHITE+ ""String_Node_Str"";
    }
    user.sendMessage(""String_Node_Str"" + playerString);
  }
}",0.9899328859060402
179141,"public void onPlayerKick(PlayerKickEvent event){
  User user=new User(plugin,event.getPlayer());
  if (user.isOffline()) {
    user.goOnlineNoMsg();
    event.setLeaveMessage(""String_Node_Str"");
  }
 else {
    event.setLeaveMessage(user.getColor() + user.getName() + ChatColor.WHITE+ ""String_Node_Str"");
  }
  plugin.maxPlayers.leave(user);
  if (user.isPoofed()) {
    user.UnPoof();
  }
  if (user.isNoPoofed()) {
    user.UnNoPoof();
  }
}","public void onPlayerKick(PlayerKickEvent event){
  User user=User.getUser(plugin,event.getPlayer());
  if (user.isOffline()) {
    user.goOnlineNoMsg();
    event.setLeaveMessage(""String_Node_Str"");
  }
 else {
    event.setLeaveMessage(user.getColor() + user.getName() + ChatColor.WHITE+ ""String_Node_Str"");
  }
  plugin.maxPlayers.leave(user);
  if (user.isPoofed()) {
    user.UnPoof();
  }
  if (user.isNoPoofed()) {
    user.UnNoPoof();
  }
  User.finalizeUser(user);
}",0.9574700109051254
179142,"public void onPlayerQuit(PlayerQuitEvent event){
  User user=new User(plugin,event.getPlayer());
  if (user.isOffline()) {
    user.goOnlineNoMsg();
    event.setQuitMessage(""String_Node_Str"");
  }
 else {
    event.setQuitMessage(user.getColor() + user.getName() + ChatColor.WHITE+ ""String_Node_Str"");
  }
  plugin.maxPlayers.leave(user);
  if (user.isPoofed()) {
    user.UnPoof();
  }
  if (user.isNoPoofed()) {
    user.UnNoPoof();
  }
}","public void onPlayerQuit(PlayerQuitEvent event){
  User user=User.getUser(plugin,event.getPlayer());
  if (user.isOffline()) {
    user.goOnlineNoMsg();
    event.setQuitMessage(""String_Node_Str"");
  }
 else {
    event.setQuitMessage(user.getColor() + user.getName() + ChatColor.WHITE+ ""String_Node_Str"");
  }
  plugin.maxPlayers.leave(user);
  if (user.isPoofed()) {
    user.UnPoof();
  }
  if (user.isNoPoofed()) {
    user.UnNoPoof();
  }
  User.finalizeUser(user);
}",0.9572836801752465
179143,"public void onPlayerChat(PlayerChatEvent event){
  String message=event.getMessage();
  User user=new User(plugin,event.getPlayer());
  if (plugin.mainProperties.getBoolean(""String_Node_Str"",false)) {
    if (user.inChannel()) {
      user.getActiveChannel().sendChat(user,message);
    }
 else {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (user.isMuted()) {
    event.setCancelled(true);
    user.sendMessage(ChatColor.GRAY + plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  boolean blocked=ChatChecker.checkBlocked(message,plugin);
  if (blocked) {
    event.setCancelled(true);
    user.sendMessage(ChatColor.GRAY + plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  long slowTimeLeft=slow.playerBlocked(user.getName());
  if ((!user.hasPerm(""String_Node_Str"")) && slow.isEnabled()) {
    if (slowTimeLeft > 0) {
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + (int)Math.ceil(slowTimeLeft / 1000)+ ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
 else {
      slow.playerAdd(user.getName());
    }
  }
  String prefix;
  log.info(user.getName() + ""String_Node_Str"" + message);
  if (user.getGroup() != null && !(prefix=user.getGroup().getPrefix()).isEmpty()) {
    message=user.getGroup().getPrefixColor() + ""String_Node_Str"" + prefix+ ""String_Node_Str""+ user.getColor()+ user.getName()+ ""String_Node_Str""+ ChatColor.WHITE+ message;
    plugin.getServer().broadcastMessage(message);
    event.setCancelled(true);
  }
 else {
    message=user.getColor() + user.getName() + ""String_Node_Str""+ ChatColor.WHITE+ message;
    plugin.getServer().broadcastMessage(message);
    event.setCancelled(true);
  }
}","public void onPlayerChat(PlayerChatEvent event){
  String message=event.getMessage();
  User user=User.getUser(plugin,event.getPlayer());
  if (plugin.mainProperties.getBoolean(""String_Node_Str"",false)) {
    if (user.inChannel()) {
      user.getActiveChannel().sendChat(user,message);
    }
 else {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    event.setCancelled(true);
    return;
  }
  if (user.isMuted()) {
    event.setCancelled(true);
    user.sendMessage(ChatColor.GRAY + plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  boolean blocked=ChatChecker.checkBlocked(message,plugin);
  if (blocked) {
    event.setCancelled(true);
    user.sendMessage(ChatColor.GRAY + plugin.mainProperties.getString(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  long slowTimeLeft=slow.playerBlocked(user.getName());
  if ((!user.hasPerm(""String_Node_Str"")) && slow.isEnabled()) {
    if (slowTimeLeft > 0) {
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + (int)Math.ceil(slowTimeLeft / 1000)+ ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
 else {
      slow.playerAdd(user.getName());
    }
  }
  String prefix;
  log.info(user.getName() + ""String_Node_Str"" + message);
  if (user.getGroup() != null && !(prefix=user.getGroup().getPrefix()).isEmpty()) {
    message=user.getGroup().getPrefixColor() + ""String_Node_Str"" + prefix+ ""String_Node_Str""+ user.getColor()+ user.getName()+ ""String_Node_Str""+ ChatColor.WHITE+ message;
    plugin.getServer().broadcastMessage(message);
    event.setCancelled(true);
  }
 else {
    message=user.getColor() + user.getName() + ""String_Node_Str""+ ChatColor.WHITE+ message;
    plugin.getServer().broadcastMessage(message);
    event.setCancelled(true);
  }
}",0.9966555183946488
179144,"public void onPlayerJoin(PlayerJoinEvent event){
  User user=new User(plugin,event.getPlayer());
  Player[] playerList=plugin.getServer().getOnlinePlayers();
  if (user.hasPerm(""String_Node_Str"")) {
    if (playerList.length == 1) {
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      String playerString=""String_Node_Str"";
      for (      Player player2 : playerList) {
        if (new User(plugin,player2).isOffline()) {
          continue;
        }
        playerString+=plugin.perm.groupFile.getColor(plugin.perm.userFile.getGroup(player2.getName())) + player2.getName() + ChatColor.WHITE+ ""String_Node_Str"";
      }
      user.sendMessage(""String_Node_Str"" + playerString);
    }
  }
  if (user.isMuted()) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
 else   if (slow.isEnabled()) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"" + (slow.getDefTime() / 1000)+ ""String_Node_Str"");
  }
  if (user.hasPerm(""String_Node_Str"") && plugin.reports.unreadTickets()) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  event.setJoinMessage(user.getColor() + user.getName() + ChatColor.WHITE+ ""String_Node_Str"");
}","public void onPlayerJoin(PlayerJoinEvent event){
  User user=User.getUser(plugin,event.getPlayer());
  Player[] playerList=plugin.getServer().getOnlinePlayers();
  if (user.hasPerm(""String_Node_Str"")) {
    if (playerList.length == 1) {
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      String playerString=""String_Node_Str"";
      for (      Player player2 : playerList) {
        if (User.getUser(plugin,player2).isOffline()) {
          continue;
        }
        playerString+=plugin.perm.groupFile.getColor(plugin.perm.userFile.getGroup(player2.getName())) + player2.getName() + ChatColor.WHITE+ ""String_Node_Str"";
      }
      user.sendMessage(""String_Node_Str"" + playerString);
    }
  }
  if (user.isMuted()) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
 else   if (slow.isEnabled()) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"" + (slow.getDefTime() / 1000)+ ""String_Node_Str"");
  }
  if (user.hasPerm(""String_Node_Str"") && plugin.reports.unreadTickets()) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  event.setJoinMessage(user.getColor() + user.getName() + ChatColor.WHITE+ ""String_Node_Str"");
}",0.9898477157360406
179145,"public void Status(String[] args,User user){
  PermissionUser puser2=null;
  User user2=null;
  if (args.length == 1 && !user.hasPerm(""String_Node_Str"")) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
 else   if (args.length == 1) {
    if ((puser2=PermissionUser.matchUserIgnoreCase(args[0],plugin)) == null) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    user2=User.matchUser(args[0],plugin);
  }
 else   if (args.length == 0) {
    puser2=user;
    user2=user;
  }
 else {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  boolean jailed=puser2.hasPerm(""String_Node_Str"",false);
  boolean muted=puser2.hasPerm(""String_Node_Str"",false);
  boolean reported=false;
  for (  Report ticket : plugin.reports.getReports()) {
    if (ticket.getAccused().getName().equalsIgnoreCase(puser2.getName()) && ticket.getStatus() != ReportStatus.CLOSED && ticket.getStatus() != ReportStatus.LOCKED) {
      reported=true;
      break;
    }
  }
  user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + puser2.getName()+ ""String_Node_Str"");
  if (jailed) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
 else {
    user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (muted) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
 else {
    user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (reported) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
 else {
    user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (user.hasPerm(""String_Node_Str"") && user2 != null) {
    boolean godded=user2.isGod();
    boolean poofed=user2.isPoofed();
    boolean nopoofed=user2.isNoPoofed();
    int health=user2.getHandle().getHealth();
    if (godded) {
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    }
    if (poofed) {
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    }
    if (nopoofed) {
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    }
    if (health >= 15) {
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + (health / 2)+ ""String_Node_Str"");
    }
 else     if (health <= 5) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"" + (health / 2)+ ""String_Node_Str"");
    }
 else {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + (health / 2)+ ""String_Node_Str"");
    }
  }
}","public void Status(String[] args,User user){
  PermissionUser puser2=null;
  User user2=null;
  if (args.length == 1 && !user.hasPerm(""String_Node_Str"")) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
 else   if (args.length == 1) {
    if ((puser2=PermissionUser.matchUserIgnoreCase(args[0],plugin)) == null) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    user2=User.matchUser(args[0],plugin);
  }
 else   if (args.length == 0) {
    puser2=user;
    user2=user;
  }
 else {
    user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  boolean jailed=puser2.hasPerm(""String_Node_Str"",false);
  boolean muted=puser2.hasPerm(""String_Node_Str"",false);
  boolean reported=false;
  for (  Report ticket : plugin.reports.getReports()) {
    if (ticket.getAccused().getName().equalsIgnoreCase(puser2.getName()) && ticket.getStatus() != ReportStatus.CLOSED && ticket.getStatus() != ReportStatus.LOCKED) {
      reported=true;
      break;
    }
  }
  user.sendMessage(ChatColor.GRAY + ""String_Node_Str"" + puser2.getName()+ ""String_Node_Str"");
  if (jailed) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
 else {
    user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (muted) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
 else {
    user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (reported) {
    user.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
 else {
    user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (user.hasPerm(""String_Node_Str"") && user2 != null) {
    boolean godded=user2.isGod();
    boolean poofed=user2.isPoofed();
    boolean nopoofed=user2.isNoPoofed();
    int health=user2.getHandle().getHealth();
    if (godded) {
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    }
    if (poofed) {
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    }
    if (nopoofed) {
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      user.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    }
    if (health >= 15) {
      user.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + (((double)health) / 2)+ ""String_Node_Str"");
    }
 else     if (health <= 5) {
      user.sendMessage(ChatColor.RED + ""String_Node_Str"" + (((double)health) / 2)+ ""String_Node_Str"");
    }
 else {
      user.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + (((double)health) / 2)+ ""String_Node_Str"");
    }
  }
}",0.9874952633573324
179146,"/** 
 * Gets whether or not the ActionableUser can see invisible ActionableUsers
 * @return Returns whether or not the ActionableUser can see invisible ActionableUsers
 */
public boolean isNoPoofed(){
  if (isConsole) {
    return false;
  }
 else {
    return plugin.noinvisible.contains(player);
  }
}","/** 
 * Gets whether or not the ActionableUser can see invisible ActionableUsers
 * @return Returns whether or not the ActionableUser can see invisibleActionableUsers
 */
public boolean isNoPoofed(){
  if (isConsole) {
    return false;
  }
 else {
    return plugin.noinvisible.contains(player);
  }
}",0.9983471074380166
179147,"public void updateValue(ProtectedBlock block){
  if (block instanceof ProtectedChest) {
    String value;
    String key;
    key=String.valueOf(block.GetId());
    value=""String_Node_Str"";
    value+=""String_Node_Str"";
    boolean init=false;
    for (    PermissionUser guest : block.getGuests()) {
      if (init) {
        value+=""String_Node_Str"";
      }
 else {
        init=false;
      }
      value+=guest.getName();
    }
    value+=""String_Node_Str"" + block.getOwner().getName();
    Location blockLoc=block.getLocation();
    value+=""String_Node_Str"" + blockLoc.getWorld().getName() + ""String_Node_Str""+ String.valueOf(blockLoc.getBlockX())+ ""String_Node_Str""+ String.valueOf(blockLoc.getBlockY())+ ""String_Node_Str""+ String.valueOf(blockLoc.getBlockZ());
    this.put(key,value);
  }
  this.saveFile(proFile);
}","public void updateValue(ProtectedBlock block){
  if (block instanceof ProtectedChest) {
    String value;
    String key;
    key=String.valueOf(block.GetId());
    value=""String_Node_Str"";
    value+=""String_Node_Str"";
    boolean init=false;
    for (    PermissionUser guest : block.getGuests()) {
      if (init) {
        value+=""String_Node_Str"";
      }
 else {
        init=false;
      }
      value+=guest.getName();
    }
    value+=""String_Node_Str"" + block.getOwner().getName();
    Location blockLoc=block.getLocation();
    value+=""String_Node_Str"" + blockLoc.getWorld().getName() + ""String_Node_Str""+ String.valueOf(blockLoc.getBlockX())+ ""String_Node_Str""+ String.valueOf(blockLoc.getBlockY())+ ""String_Node_Str""+ String.valueOf(blockLoc.getBlockZ());
    this.put(key,value);
  }
 else   if (block instanceof ProtectedDoor) {
    String value;
    String key;
    key=String.valueOf(block.GetId());
    value=""String_Node_Str"";
    value+=""String_Node_Str"";
    boolean init=false;
    for (    PermissionUser guest : block.getGuests()) {
      if (init) {
        value+=""String_Node_Str"";
      }
 else {
        init=false;
      }
      value+=guest.getName();
    }
    value+=""String_Node_Str"" + block.getOwner().getName();
    Location blockLoc=block.getLocation();
    value+=""String_Node_Str"" + blockLoc.getWorld().getName() + ""String_Node_Str""+ String.valueOf(blockLoc.getBlockX())+ ""String_Node_Str""+ String.valueOf(blockLoc.getBlockY())+ ""String_Node_Str""+ String.valueOf(blockLoc.getBlockZ());
    this.put(key,value);
  }
  this.saveFile(proFile);
}",0.685785536159601
179148,"public void saveValues(){
  this.clear();
  for (  ProtectedBlock block : protectedBlocks) {
    if (block instanceof ProtectedChest) {
      String value;
      String key;
      key=String.valueOf(block.GetId());
      value=""String_Node_Str"";
      value+=""String_Node_Str"";
      boolean init=false;
      for (      PermissionUser guest : block.getGuests()) {
        if (init) {
          value+=""String_Node_Str"";
        }
 else {
          init=false;
        }
        value+=guest.getName();
      }
      value+=""String_Node_Str"" + block.getOwner().getName();
      Location blockLoc=block.getLocation();
      value+=""String_Node_Str"" + blockLoc.getWorld().getName() + ""String_Node_Str""+ String.valueOf(blockLoc.getBlockX())+ ""String_Node_Str""+ String.valueOf(blockLoc.getBlockY())+ ""String_Node_Str""+ String.valueOf(blockLoc.getBlockZ());
      this.put(key,value);
    }
  }
}","public void saveValues(){
  this.clear();
  for (  ProtectedBlock block : protectedBlocks) {
    if (block instanceof ProtectedChest) {
      String value;
      String key;
      key=String.valueOf(block.GetId());
      value=""String_Node_Str"";
      value+=""String_Node_Str"";
      boolean init=false;
      for (      PermissionUser guest : block.getGuests()) {
        if (init) {
          value+=""String_Node_Str"";
        }
 else {
          init=false;
        }
        value+=guest.getName();
      }
      value+=""String_Node_Str"" + block.getOwner().getName();
      Location blockLoc=block.getLocation();
      value+=""String_Node_Str"" + blockLoc.getWorld().getName() + ""String_Node_Str""+ String.valueOf(blockLoc.getBlockX())+ ""String_Node_Str""+ String.valueOf(blockLoc.getBlockY())+ ""String_Node_Str""+ String.valueOf(blockLoc.getBlockZ());
      this.put(key,value);
    }
 else     if (block instanceof ProtectedDoor) {
      String value;
      String key;
      key=String.valueOf(block.GetId());
      value=""String_Node_Str"";
      value+=""String_Node_Str"";
      boolean init=false;
      for (      PermissionUser guest : block.getGuests()) {
        if (init) {
          value+=""String_Node_Str"";
        }
 else {
          init=false;
        }
        value+=guest.getName();
      }
      value+=""String_Node_Str"" + block.getOwner().getName();
      Location blockLoc=block.getLocation();
      value+=""String_Node_Str"" + blockLoc.getWorld().getName() + ""String_Node_Str""+ String.valueOf(blockLoc.getBlockX())+ ""String_Node_Str""+ String.valueOf(blockLoc.getBlockY())+ ""String_Node_Str""+ String.valueOf(blockLoc.getBlockZ());
      this.put(key,value);
    }
  }
}",0.6906976744186046
179149,"public void loadValues(){
  protectedBlocks=new ArrayList<ProtectedBlock>();
  for (int i=0; i < this.values().size(); i++) {
    String value=(String)this.values().toArray()[i];
    String key=(String)this.keySet().toArray()[i];
    String[] slashsplit=value.split(""String_Node_Str"");
    if (slashsplit.length != 4) {
      log.warning(""String_Node_Str"" + key + ""String_Node_Str""+ proFile+ ""String_Node_Str"");
      continue;
    }
    int id;
    try {
      id=Integer.parseInt(key);
    }
 catch (    NumberFormatException e) {
      log.warning(""String_Node_Str"" + key + ""String_Node_Str""+ proFile+ ""String_Node_Str"");
      continue;
    }
    PermissionUser owner;
    if ((owner=PermissionUser.matchUser(slashsplit[2],plugin)) == null) {
      log.warning(""String_Node_Str"" + key + ""String_Node_Str""+ proFile+ ""String_Node_Str"");
      continue;
    }
    List<PermissionUser> guests=new ArrayList<PermissionUser>();
    try {
      if (!slashsplit[1].isEmpty()) {
        for (        String guest : slashsplit[1].split(""String_Node_Str"")) {
          PermissionUser newGuest;
          if ((newGuest=PermissionUser.matchUser(guest,plugin)) == null) {
            throw new NullPointerException();
          }
          guests.add(newGuest);
        }
      }
    }
 catch (    NullPointerException e) {
      log.warning(""String_Node_Str"" + key + ""String_Node_Str""+ proFile+ ""String_Node_Str"");
      continue;
    }
    String type=slashsplit[0];
    Location loc;
    try {
      World world=plugin.getServer().getWorld(slashsplit[3].split(""String_Node_Str"")[0]);
      int x=Integer.parseInt(slashsplit[3].split(""String_Node_Str"")[1]);
      int y=Integer.parseInt(slashsplit[3].split(""String_Node_Str"")[2]);
      int z=Integer.parseInt(slashsplit[3].split(""String_Node_Str"")[3]);
      loc=new Location(world,x,y,z);
    }
 catch (    NumberFormatException e) {
      log.warning(""String_Node_Str"" + key + ""String_Node_Str""+ proFile+ ""String_Node_Str"");
      continue;
    }
catch (    NullPointerException e) {
      log.warning(""String_Node_Str"" + key + ""String_Node_Str""+ proFile+ ""String_Node_Str"");
      continue;
    }
    if (type.equalsIgnoreCase(""String_Node_Str"")) {
      protectedBlocks.add(new ProtectedChest(plugin,id,owner,guests,loc));
    }
 else {
      log.warning(""String_Node_Str"" + key + ""String_Node_Str""+ proFile+ ""String_Node_Str"");
    }
  }
}","public void loadValues(){
  protectedBlocks=new ArrayList<ProtectedBlock>();
  for (int i=0; i < this.values().size(); i++) {
    String value=(String)this.values().toArray()[i];
    String key=(String)this.keySet().toArray()[i];
    String[] slashsplit=value.split(""String_Node_Str"");
    if (slashsplit.length != 4) {
      log.warning(""String_Node_Str"" + key + ""String_Node_Str""+ proFile+ ""String_Node_Str"");
      continue;
    }
    int id;
    try {
      id=Integer.parseInt(key);
    }
 catch (    NumberFormatException e) {
      log.warning(""String_Node_Str"" + key + ""String_Node_Str""+ proFile+ ""String_Node_Str"");
      continue;
    }
    PermissionUser owner;
    if ((owner=PermissionUser.matchUser(slashsplit[2],plugin)) == null) {
      log.warning(""String_Node_Str"" + key + ""String_Node_Str""+ proFile+ ""String_Node_Str"");
      continue;
    }
    List<PermissionUser> guests=new ArrayList<PermissionUser>();
    try {
      if (!slashsplit[1].isEmpty()) {
        for (        String guest : slashsplit[1].split(""String_Node_Str"")) {
          PermissionUser newGuest;
          if ((newGuest=PermissionUser.matchUser(guest,plugin)) == null) {
            throw new NullPointerException();
          }
          guests.add(newGuest);
        }
      }
    }
 catch (    NullPointerException e) {
      log.warning(""String_Node_Str"" + key + ""String_Node_Str""+ proFile+ ""String_Node_Str"");
      continue;
    }
    String type=slashsplit[0];
    Location loc;
    try {
      World world=plugin.getServer().getWorld(slashsplit[3].split(""String_Node_Str"")[0]);
      int x=Integer.parseInt(slashsplit[3].split(""String_Node_Str"")[1]);
      int y=Integer.parseInt(slashsplit[3].split(""String_Node_Str"")[2]);
      int z=Integer.parseInt(slashsplit[3].split(""String_Node_Str"")[3]);
      loc=new Location(world,x,y,z);
    }
 catch (    NumberFormatException e) {
      log.warning(""String_Node_Str"" + key + ""String_Node_Str""+ proFile+ ""String_Node_Str"");
      continue;
    }
catch (    NullPointerException e) {
      log.warning(""String_Node_Str"" + key + ""String_Node_Str""+ proFile+ ""String_Node_Str"");
      continue;
    }
    if (type.equalsIgnoreCase(""String_Node_Str"")) {
      protectedBlocks.add(new ProtectedChest(plugin,id,owner,guests,loc));
    }
 else     if (type.equalsIgnoreCase(""String_Node_Str"")) {
      protectedBlocks.add(new ProtectedDoor(plugin,id,owner,guests,loc));
    }
 else {
      log.warning(""String_Node_Str"" + key + ""String_Node_Str""+ proFile+ ""String_Node_Str"");
    }
  }
}",0.9702768729641694
179150,"public int addProtection(PermissionUser owner,Location loc,ProtectionType type){
  int id=getNextId();
  ProtectedBlock protect=null;
switch (type) {
case Chest:
    protectedBlocks.add(protect=new ProtectedChest(plugin,id,owner,new ArrayList<PermissionUser>(),loc));
}
updateValue(protect);
return id;
}","public int addProtection(PermissionUser owner,Location loc,ProtectionType type){
  int id=getNextId();
  ProtectedBlock protect=null;
switch (type) {
case Chest:
    protectedBlocks.add(protect=new ProtectedChest(plugin,id,owner,new ArrayList<PermissionUser>(),loc));
case Door:
  protectedBlocks.add(protect=new ProtectedDoor(plugin,id,owner,new ArrayList<PermissionUser>(),loc));
}
updateValue(protect);
return id;
}",0.8421052631578947
179151,"public void onPlayerInteract(PlayerInteractEvent event){
  if (event.getAction() != Action.RIGHT_CLICK_BLOCK || event.isCancelled()) {
    return;
  }
  int id;
  ProtectedBlock block;
  if ((id=plugin.protectFile.getProtection(event.getClickedBlock().getLocation())) != -1) {
    block=plugin.protectFile.getProtection(id);
    User user=new User(plugin,event.getPlayer());
    if (!block.canUse(user)) {
      event.setCancelled(true);
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      if (!user.getName().equalsIgnoreCase(block.getOwner().getName())) {
        log.info(user.getName() + ""String_Node_Str"" + block.getOwner().getName()+ ""String_Node_Str"");
      }
    }
  }
}","public void onPlayerInteract(PlayerInteractEvent event){
  if ((event.getAction() != Action.RIGHT_CLICK_BLOCK && !(event.getAction() == Action.LEFT_CLICK_BLOCK && event.getClickedBlock().getType() == Material.WOODEN_DOOR)) || event.isCancelled()) {
    return;
  }
  int id;
  ProtectedBlock block;
  if ((id=plugin.protectFile.getProtection(event.getClickedBlock().getLocation())) != -1) {
    block=plugin.protectFile.getProtection(id);
    User user=new User(plugin,event.getPlayer());
    if (!block.canUse(user)) {
      event.setCancelled(true);
      user.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 else {
      if (!user.getName().equalsIgnoreCase(block.getOwner().getName())) {
        log.info(user.getName() + ""String_Node_Str"" + block.getOwner().getName()+ ""String_Node_Str""+ block.GetId()+ ""String_Node_Str"");
      }
    }
  }
}",0.9051282051282052
179152,"@Override public void onEnable(){
  new File(propDir).mkdirs();
  if (!mainProp.exists()) {
    try {
      mainProp.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!itemAlias.exists()) {
    try {
      itemAlias.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!unlDisp.exists()) {
    try {
      unlDisp.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!dispChests.exists()) {
    try {
      dispChests.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!lotFile.exists()) {
    try {
      lotFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!kitFile.exists()) {
    try {
      kitFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!proFile.exists()) {
    try {
      proFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!chatFile.exists()) {
    try {
      chatFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!ticketFile.exists()) {
    try {
      ticketFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  perm=new MainPermissions(this);
  warps=new WarpList(this);
  homes=new HomeWarps(this);
  checkpoints=new PreWarp(this);
  blockCheck=new BlockChecker(this);
  mainProperties=new PluginProperties(propDir + ""String_Node_Str"");
  mainProperties.loadFile();
  itemAliases=new PluginProperties(propDir + ""String_Node_Str"");
  itemAliases.loadFile();
  chatListen=new ChatPlayerListener(this);
  jail=new Jail(this);
  dispensers=new UnlimitedDisp(propDir + ""String_Node_Str"");
  chests=new DispChest(propDir + ""String_Node_Str"");
  lots=new LotFile(this);
  kits=new KitList(this);
  creeperListen=new CreeperListener(this);
  inv=new Invisibility(this);
  protectFile=new ProtectFile(this,propDir + ""String_Node_Str"");
  channels=new ChatChannelController(propDir + ""String_Node_Str"",this);
  maxPlayers=new MaxPlayers(this,mainProperties.getInteger(""String_Node_Str"",10),mainProperties.getInteger(""String_Node_Str"",4),mainProperties.getBoolean(""String_Node_Str"",true),mainProperties.getBoolean(""String_Node_Str"",true));
  reports=new ReportFile(this);
  flyDetect=new FlyDetect(this);
  strikeBind=new WeatherBinding(this);
  prices=new PriceFile(this,propDir + ""String_Node_Str"");
  for (  Player player : this.getServer().getOnlinePlayers()) {
    User user;
    JoinType jt=maxPlayers.join(user=new User(this,player));
    if (jt == JoinType.NO_SLOT_NORMAL || jt == JoinType.NO_SLOT_RESERVED) {
      user.Kick(""String_Node_Str"");
    }
  }
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_JOIN,this.chatListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_LOGIN,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.blockCheck,Event.Priority.High,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.blockCheck,Event.Priority.High,this);
  pm.registerEvent(Event.Type.BLOCK_BURN,this.blockCheck,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_IGNITE,this.blockCheck,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.invPlayerListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.invBlockListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,this.death,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,this.death,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.REDSTONE_CHANGE,this.invBlockListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.lotBListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.lotBListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_PICKUP_ITEM,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_DROP_ITEM,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,this.creeperListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.pbListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.ppListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_BUCKET_EMPTY,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_BUCKET_FILL,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_KICK,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.EXPLOSION_PRIME,this.entListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.wpListen,Event.Priority.Highest,this);
  PluginDescriptionFile pdfFile=this.getDescription();
  FreezeTimer.schedule(new TimeFreeze(this),0,1);
  log.info(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
  if (mainProperties.getBoolean(""String_Node_Str"",false)) {
    log.warning(""String_Node_Str"");
  }
}","@Override public void onEnable(){
  new File(propDir).mkdirs();
  if (!mainProp.exists()) {
    try {
      mainProp.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!itemAlias.exists()) {
    try {
      itemAlias.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!unlDisp.exists()) {
    try {
      unlDisp.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!dispChests.exists()) {
    try {
      dispChests.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!lotFile.exists()) {
    try {
      lotFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!kitFile.exists()) {
    try {
      kitFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!proFile.exists()) {
    try {
      proFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!chatFile.exists()) {
    try {
      chatFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!ticketFile.exists()) {
    try {
      ticketFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (!ticketFile.exists()) {
    try {
      ticketFile.createNewFile();
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  perm=new MainPermissions(this);
  warps=new WarpList(this);
  homes=new HomeWarps(this);
  checkpoints=new PreWarp(this);
  blockCheck=new BlockChecker(this);
  mainProperties=new PluginProperties(propDir + ""String_Node_Str"");
  mainProperties.loadFile();
  itemAliases=new PluginProperties(propDir + ""String_Node_Str"");
  itemAliases.loadFile();
  chatListen=new ChatPlayerListener(this);
  jail=new Jail(this);
  dispensers=new UnlimitedDisp(propDir + ""String_Node_Str"");
  chests=new DispChest(propDir + ""String_Node_Str"");
  lots=new LotFile(this);
  kits=new KitList(this);
  creeperListen=new CreeperListener(this);
  inv=new Invisibility(this);
  protectFile=new ProtectFile(this,propDir + ""String_Node_Str"");
  channels=new ChatChannelController(propDir + ""String_Node_Str"",this);
  maxPlayers=new MaxPlayers(this,mainProperties.getInteger(""String_Node_Str"",10),mainProperties.getInteger(""String_Node_Str"",4),mainProperties.getBoolean(""String_Node_Str"",true),mainProperties.getBoolean(""String_Node_Str"",true));
  reports=new ReportFile(this);
  flyDetect=new FlyDetect(this);
  strikeBind=new WeatherBinding(this);
  prices=new PriceFile(this,propDir + ""String_Node_Str"");
  for (  Player player : this.getServer().getOnlinePlayers()) {
    User user;
    JoinType jt=maxPlayers.join(user=new User(this,player));
    if (jt == JoinType.NO_SLOT_NORMAL || jt == JoinType.NO_SLOT_RESERVED) {
      user.Kick(""String_Node_Str"");
    }
  }
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_JOIN,this.chatListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_LOGIN,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.blockCheck,Event.Priority.High,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.blockCheck,Event.Priority.High,this);
  pm.registerEvent(Event.Type.BLOCK_BURN,this.blockCheck,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_IGNITE,this.blockCheck,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.invPlayerListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.invBlockListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,this.death,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGE,this.death,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.REDSTONE_CHANGE,this.invBlockListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.lotBListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,this.lotBListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_PICKUP_ITEM,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_DROP_ITEM,this.permLoginListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_TARGET,this.creeperListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.pbListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.ppListen,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_BUCKET_EMPTY,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_BUCKET_FILL,this.lotListener,Event.Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_KICK,this.chatListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.EXPLOSION_PRIME,this.entListen,Event.Priority.Highest,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,this.wpListen,Event.Priority.Highest,this);
  PluginDescriptionFile pdfFile=this.getDescription();
  FreezeTimer.schedule(new TimeFreeze(this),0,1);
  log.info(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
  if (mainProperties.getBoolean(""String_Node_Str"",false)) {
    log.warning(""String_Node_Str"");
  }
}",0.9843043799819212
179153,"public int addProtection(PermissionUser owner,Location loc,ProtectionType type){
  int id=getNextId();
  ProtectedBlock protect=null;
switch (type) {
case Chest:
    protectedBlocks.add(protect=new ProtectedChest(plugin,id,owner,new ArrayList<PermissionUser>(),loc));
case Door:
  protectedBlocks.add(protect=new ProtectedDoor(plugin,id,owner,new ArrayList<PermissionUser>(),loc));
}
updateValue(protect);
return id;
}","public int addProtection(PermissionUser owner,Location loc,ProtectionType type){
  int id=getNextId();
  ProtectedBlock protect=null;
switch (type) {
case Chest:
{
      protectedBlocks.add(protect=new ProtectedChest(plugin,id,owner,new ArrayList<PermissionUser>(),loc));
      break;
    }
case Door:
{
    protectedBlocks.add(protect=new ProtectedDoor(plugin,id,owner,new ArrayList<PermissionUser>(),loc));
    break;
  }
}
updateValue(protect);
return id;
}",0.9521640091116174
179154,"public boolean onBlock(Player player){
  Location loc=player.getLocation();
  loc.setY(loc.getY() - 1);
  loc.setX(loc.getX() - 1);
  loc.setZ(loc.getZ() - 1);
  if (loc.getBlock().getType() != Material.AIR) {
    return true;
  }
  loc.setZ(loc.getZ() + 1);
  if (loc.getBlock().getType() != Material.AIR) {
    return true;
  }
  loc.setZ(loc.getZ() + 1);
  if (loc.getBlock().getType() != Material.AIR) {
    return true;
  }
  loc.setX(loc.getX() + 1);
  if (loc.getBlock().getType() != Material.AIR) {
    return true;
  }
  loc.setZ(loc.getZ() - 1);
  if (loc.getBlock().getType() != Material.AIR) {
    return true;
  }
  loc.setZ(loc.getZ() - 1);
  if (loc.getBlock().getType() != Material.AIR) {
    return true;
  }
  loc.setX(loc.getX() + 1);
  if (loc.getBlock().getType() != Material.AIR) {
    return true;
  }
  loc.setZ(loc.getZ() + 1);
  if (loc.getBlock().getType() != Material.AIR) {
    return true;
  }
  loc.setZ(loc.getZ() + 1);
  if (loc.getBlock().getType() != Material.AIR) {
    return true;
  }
  return false;
}","public boolean onBlock(Location loc){
  loc.setX(loc.getX() - 1);
  loc.setZ(loc.getZ() - 1);
  if (loc.getBlock().getType() != Material.AIR) {
    return true;
  }
  loc.setZ(loc.getZ() + 1);
  if (loc.getBlock().getType() != Material.AIR) {
    return true;
  }
  loc.setZ(loc.getZ() + 1);
  if (loc.getBlock().getType() != Material.AIR) {
    return true;
  }
  loc.setX(loc.getX() + 1);
  if (loc.getBlock().getType() != Material.AIR) {
    return true;
  }
  loc.setZ(loc.getZ() - 1);
  if (loc.getBlock().getType() != Material.AIR) {
    return true;
  }
  loc.setZ(loc.getZ() - 1);
  if (loc.getBlock().getType() != Material.AIR) {
    return true;
  }
  loc.setX(loc.getX() + 1);
  if (loc.getBlock().getType() != Material.AIR) {
    return true;
  }
  loc.setZ(loc.getZ() + 1);
  if (loc.getBlock().getType() != Material.AIR) {
    return true;
  }
  loc.setZ(loc.getZ() + 1);
  if (loc.getBlock().getType() != Material.AIR) {
    return true;
  }
  return false;
}",0.955312810327706
179155,"@Override public void run(){
  for (  Player player : flyDetect.plugin.getServer().getOnlinePlayers()) {
    if (!onBlock(player)) {
      flyDetect.detect(player);
    }
 else {
      flyDetect.undetect(player);
    }
  }
}","@Override public void run(){
  for (  Player player : flyDetect.plugin.getServer().getOnlinePlayers()) {
    Location loc=player.getLocation();
    loc.setY(loc.getY() - 1);
    if (!onBlock(player.getLocation()) && !onBlock(loc)) {
      flyDetect.detect(player);
    }
 else {
      flyDetect.undetect(player);
    }
  }
}",0.8175182481751825
179156,"@Override public void onDisable(){
  FreezeTimer.cancel();
  PluginDescriptionFile pdfFile=this.getDescription();
  log.info(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
}","@Override public void onDisable(){
  FreezeTimer.cancel();
  chatListen.slow.slowTimer.cancel();
  inv.timer.cancel();
  flyDetect.flyTime.cancel();
  PluginDescriptionFile pdfFile=this.getDescription();
  log.info(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
}",0.8221343873517787
179157,"public static void open(RemoteWebDriver remoteWebDriver,State state,Map<String,String> params){
  String url=params.get(""String_Node_Str"");
  if (checkIsRelativeUrl(url)) {
    url=state.getBaseUrl().toString().concat(url);
  }
  remoteWebDriver.get(url);
}","public static void open(RemoteWebDriver remoteWebDriver,State state,Map<String,String> params){
  String url=params.get(""String_Node_Str"");
  if (checkIsRelativeUrl(url)) {
    String base=state.getBaseUrl().toString();
    if (base.endsWith(""String_Node_Str""))     base=base.substring(0,base.length() - 1);
    url=base.concat(url);
  }
  remoteWebDriver.get(url);
}",0.8141025641025641
179158,"public static By detectTargetMethod(String target){
  if ((target.startsWith(""String_Node_Str"")) || (target.startsWith(""String_Node_Str"")))   By.xpath(target);
  if (target.startsWith(""String_Node_Str""))   By.linkText(target);
  if (target.startsWith(""String_Node_Str""))   By.cssSelector(target);
  if (target.startsWith(""String_Node_Str""))   By.name(target);
  if ((target.startsWith(""String_Node_Str"")) || (target.startsWith(""String_Node_Str""))) {
    return new ByDOM(target);
  }
  if (target.startsWith(""String_Node_Str"")) {
    target=target.replace(""String_Node_Str"",""String_Node_Str"");
    return By.id(target);
  }
  return new ByIdOrName(target);
}","public static By detectTargetMethod(String target){
  if ((target.startsWith(""String_Node_Str"")) || (target.startsWith(""String_Node_Str""))) {
    target=target.replace(""String_Node_Str"",""String_Node_Str"");
    return By.xpath(target);
  }
  if (target.startsWith(""String_Node_Str"")) {
    target=target.replace(""String_Node_Str"",""String_Node_Str"");
    return By.linkText(target);
  }
  if (target.startsWith(""String_Node_Str"")) {
    target=target.replace(""String_Node_Str"",""String_Node_Str"");
    return By.cssSelector(target);
  }
  if (target.startsWith(""String_Node_Str"")) {
    target=target.replace(""String_Node_Str"",""String_Node_Str"");
    return By.name(target);
  }
  if ((target.startsWith(""String_Node_Str"")) || (target.startsWith(""String_Node_Str""))) {
    return new ByDOM(target);
  }
  if (target.startsWith(""String_Node_Str"")) {
    target=target.replace(""String_Node_Str"",""String_Node_Str"");
    return By.id(target);
  }
  return new ByIdOrName(target);
}",0.8014705882352942
179159,"@Test public void testDetectTargetMethod(){
}","/** 
 * This test depends on current Selenium Implementation
 * @TODO add ByDom , when finish ByDom class
 */
@Test public void testDetectTargetMethod(){
  String target;
  target=""String_Node_Str"";
  By context=CommandMappings.detectTargetMethod(target);
  assertEquals(""String_Node_Str"",context.toString());
  target=""String_Node_Str"";
  context=CommandMappings.detectTargetMethod(target);
  assertEquals(""String_Node_Str"",context.toString());
  target=""String_Node_Str"";
  context=CommandMappings.detectTargetMethod(target);
  assertEquals(""String_Node_Str"",context.toString());
  target=""String_Node_Str"";
  context=CommandMappings.detectTargetMethod(target);
  assertEquals(""String_Node_Str"",context.toString());
  target=""String_Node_Str"";
  context=CommandMappings.detectTargetMethod(target);
  assertEquals(""String_Node_Str"",context.toString());
  target=""String_Node_Str"";
  context=CommandMappings.detectTargetMethod(target);
  assertEquals(""String_Node_Str"",context.toString());
  target=""String_Node_Str"";
  context=CommandMappings.detectTargetMethod(target);
  assertEquals(""String_Node_Str"",context.toString());
}",0.0767918088737201
179160,"public static void main(String[] args){
  Config.parseConfiguration(args);
  if (Config.isRunnable() == false)   System.exit(0);
  Map<String,Object> config=Config.getConfig();
  String tsPath=(String)config.get(""String_Node_Str"");
  if (tsPath == null) {
    System.err.println(""String_Node_Str"");
    System.exit(ExitCodes.SUITE_NAME_EXPECTED);
  }
  try {
    Suite suite=ParserHelper.parseTestSuite(tsPath);
    Executor executor=new Executor(new URL((String)config.get(""String_Node_Str"")),DesiredCapabilities.firefox());
    SuiteResult suiteResult=executor.execute(suite);
    DefaultResultFormater defaultResultFormater=new DefaultResultFormater();
    defaultResultFormater.AddSuiteResult(suiteResult);
    defaultResultFormater.Process();
  }
 catch (  Exception ex) {
    System.err.println(ex);
  }
}","public static void main(String[] args){
  Config.parseConfiguration(args);
  if (Config.isRunnable() == false)   System.exit(0);
  Map<String,Object> config=Config.getConfig();
  String tsPath=(String)config.get(""String_Node_Str"");
  if (tsPath == null) {
    System.err.println(""String_Node_Str"");
    System.exit(ExitCodes.SUITE_NAME_EXPECTED);
  }
  try {
    Suite suite=ParserHelper.parseTestSuite(tsPath);
    Executor executor=new Executor(new URL((String)config.get(""String_Node_Str"")),DesiredCapabilities.firefox());
    SuiteResult suiteResult=executor.execute(suite);
    executor.close();
    DefaultResultFormater defaultResultFormater=new DefaultResultFormater();
    defaultResultFormater.AddSuiteResult(suiteResult);
    defaultResultFormater.Process();
  }
 catch (  Exception ex) {
    System.err.println(ex);
  }
}",0.98661800486618
179161,"public SuiteResult execute(Suite testSuite){
  for (  Test test : testSuite.getTests()) {
    State state=test.getState();
    while (test.hasNextCommand()) {
      Command command=test.nextCommand();
      String commandText=command.getCommandText();
      Map<String,String> params=state.processParams(command.getParams());
      try {
        CommandMappings.execute(this,state,commandText,params);
      }
 catch (      NoSuchMethodException ex) {
        Logger.getLogger(Executor.class).error(""String_Node_Str"" + commandText,ex);
      }
      if (state.isAborted())       break;
    }
  }
  suiteResult=new SuiteResult(testSuite);
  fireExecutionDone();
  return suiteResult;
}","public SuiteResult execute(Suite testSuite){
  for (  Test test : testSuite.getTests()) {
    State state=test.getState();
    while (test.hasNextCommand()) {
      Command command=test.nextCommand();
      String commandText=command.getCommandText();
      Map<String,String> params=state.processParams(command.getParams());
      state.setLastCommand(command);
      try {
        CommandMappings.execute(this,state,commandText,params);
      }
 catch (      NoSuchMethodException ex) {
        Logger.getLogger(Executor.class).error(""String_Node_Str"" + commandText,ex);
      }
      if (state.isAborted())       break;
    }
  }
  suiteResult=new SuiteResult(testSuite);
  fireExecutionDone();
  return suiteResult;
}",0.9736654804270464
179162,"protected SecureShell getSecureShell() throws Exception {
  final Logger logger=getLogger(CloudFormation.class);
  final SecureShell ssh=new SecureShell(logger,sshKeyFile,sshUser,sshHost);
  return ssh;
}","protected SecureShell getSecureShell() throws Exception {
  final Logger logger=getLogger(CloudFormation.class);
  final String sshHostConverted=getSSHHost();
  final SecureShell ssh=new SecureShell(logger,sshKeyFile,sshUser,sshHostConverted,maxRetries,timeOut);
  return ssh;
}",0.8464730290456431
179163,"private void ensureTargetFolder(final ChannelSftp channel,final String folder) throws Exception {
  logger.debug(""String_Node_Str"" + folder);
  final String[] pathArray=folder.split(""String_Node_Str"");
  String root=""String_Node_Str"";
  for (  final String path : pathArray) {
    if (path.length() == 0) {
      continue;
    }
    if (""String_Node_Str"".equals(path)) {
      continue;
    }
    channel.cd(root);
    final String next=makePath(root,path);
    boolean isPresent=false;
    try {
      channel.stat(next);
      isPresent=true;
    }
 catch (    final Exception e) {
      isPresent=false;
    }
    if (isPresent) {
      logger.debug(""String_Node_Str"" + next);
    }
 else {
      channel.mkdir(path);
      logger.debug(""String_Node_Str"" + next);
    }
    root=next;
  }
}","private void ensureTargetFolder(final ChannelSftp channel,final String folder) throws Exception {
  logger.debug(""String_Node_Str"" + folder);
  final String[] pathArray=folder.split(""String_Node_Str"");
  String root=""String_Node_Str"";
  for (  final String path : pathArray) {
    if (path.length() == 0) {
      continue;
    }
    if (""String_Node_Str"".equals(path)) {
      continue;
    }
    channel.cd(root);
    final String next=makePath(root,path);
    boolean isPresent=false;
    try {
      channel.stat(next);
      isPresent=true;
    }
 catch (    final Exception e) {
      isPresent=false;
    }
    if (isPresent) {
      logger.debug(""String_Node_Str"" + next);
    }
 else {
      logger.debug(""String_Node_Str"" + next + ""String_Node_Str""+ path);
      channel.mkdir(path);
      logger.debug(""String_Node_Str"" + next);
    }
    root=next;
  }
}",0.9565741857659832
179164,"public int publish(final String source,final String target) throws Exception {
  logger.info(""String_Node_Str"" + source);
  logger.info(""String_Node_Str"" + target);
  final Session session=getSession();
  session.connect();
  final ChannelSftp channel=(ChannelSftp)session.openChannel(""String_Node_Str"");
  channel.connect();
  final SftpProgressMonitor monitor=new SftpProgressMonitor(){
    @Override public void init(    final int op,    final String source,    final String target,    final long max){
      logger.info(""String_Node_Str"" + target);
    }
    @Override public boolean count(    final long count){
      logger.debug(""String_Node_Str"" + count);
      return true;
    }
    @Override public void end(){
      logger.debug(""String_Node_Str"");
    }
  }
;
  final PathMaker maker=new PathMaker(logger,source,target);
  final List<Entry> entryList=maker.getEntryList();
  ensureTargetFolder(channel,target);
  for (  final Entry entry : entryList) {
    final String file=entry.target;
    final int index=file.lastIndexOf(""String_Node_Str"");
    final String folder=file.substring(0,index);
    ensureTargetFolder(channel,folder);
    channel.put(entry.source,entry.target,monitor,ChannelSftp.OVERWRITE);
  }
  channel.disconnect();
  final int status=channel.getExitStatus();
  session.disconnect();
  logger.info(""String_Node_Str"" + status);
  return status;
}","public int publish(final String source,final String target) throws Exception {
  logger.info(""String_Node_Str"" + host);
  logger.info(""String_Node_Str"" + source);
  logger.info(""String_Node_Str"" + target);
  final Session session=getSession();
  final ChannelSftp channel=(ChannelSftp)session.openChannel(""String_Node_Str"");
  channel.connect();
  final SftpProgressMonitor monitor=new SftpProgressMonitor(){
    @Override public void init(    final int op,    final String source,    final String target,    final long max){
      logger.info(""String_Node_Str"" + target);
    }
    @Override public boolean count(    final long count){
      logger.debug(""String_Node_Str"" + count);
      return true;
    }
    @Override public void end(){
      logger.debug(""String_Node_Str"");
    }
  }
;
  final PathMaker maker=new PathMaker(logger,source,target);
  final List<Entry> entryList=maker.getEntryList();
  ensureTargetFolder(channel,target);
  for (  final Entry entry : entryList) {
    final String file=entry.target;
    final int index=file.lastIndexOf(""String_Node_Str"");
    final String folder=file.substring(0,index);
    ensureTargetFolder(channel,folder);
    channel.put(entry.source,entry.target,monitor,ChannelSftp.OVERWRITE);
  }
  channel.disconnect();
  final int status=channel.getExitStatus();
  session.disconnect();
  logger.info(""String_Node_Str"" + status);
  return status;
}",0.9733621310295176
179165,"public SecureShell(final Logger logger,final File keyFile,final String user,final String host){
  this.logger=logger;
  this.keyFile=keyFile;
  this.user=user;
  this.host=host;
  this.port=22;
}","public SecureShell(final Logger logger,final File keyFile,final String user,final String host,int maxretries,int timeout){
  this.logger=logger;
  this.keyFile=keyFile;
  this.user=user;
  this.host=host;
  this.port=22;
  this.maxretries=maxretries;
  this.timeout=(long)timeout * 1000;
}",0.8057851239669421
179166,"private Session getSession() throws Exception {
  final JSch jsch=new JSch();
  jsch.addIdentity(keyFile.getAbsolutePath());
  final Session session=jsch.getSession(user,host,port);
  session.setConfig(""String_Node_Str"",""String_Node_Str"");
  return session;
}","private Session getSession() throws Exception {
  logger.debug(""String_Node_Str"" + host + ""String_Node_Str""+ port+ ""String_Node_Str""+ user);
  final JSch jsch=new JSch();
  jsch.addIdentity(keyFile.getAbsolutePath());
  final Session session=jsch.getSession(user,host,port);
  session.setConfig(""String_Node_Str"",""String_Node_Str"");
  sessionConnectRetry(session);
  return session;
}",0.8055987558320373
179167,"public int execute(final String command) throws Exception {
  logger.info(""String_Node_Str"" + command);
  final Session session=getSession();
  session.connect();
  final ChannelExec channel=(ChannelExec)session.openChannel(""String_Node_Str"");
  channel.setCommand(command);
  channel.connect();
  final InputStream input=channel.getInputStream();
  final Reader reader=new InputStreamReader(input);
  final BufferedReader buffered=new BufferedReader(reader);
  while (true) {
    final String line=buffered.readLine();
    if (line == null) {
      break;
    }
    logger.info(""String_Node_Str"" + line);
  }
  channel.disconnect();
  final int status=channel.getExitStatus();
  session.disconnect();
  logger.info(""String_Node_Str"" + status);
  return status;
}","public int execute(final String command) throws Exception {
  logger.info(""String_Node_Str"" + command + ""String_Node_Str""+ host);
  final Session session=getSession();
  final ChannelExec channel=(ChannelExec)session.openChannel(""String_Node_Str"");
  channel.setCommand(command);
  channel.setPty(true);
  channel.connect();
  final InputStream input=channel.getInputStream();
  final Reader reader=new InputStreamReader(input);
  final BufferedReader buffered=new BufferedReader(reader);
  while (true) {
    final String line=buffered.readLine();
    if (line == null) {
      break;
    }
    logger.info(""String_Node_Str"" + line);
  }
  channel.disconnect();
  final int status=channel.getExitStatus();
  session.disconnect();
  logger.info(""String_Node_Str"" + status);
  return status;
}",0.9067524115755627
179168,"@GET public Response childDSRs(){
  if (EMIRServer.getServerProperties().isGlobalEnabled()) {
    return Response.noContent().entity(""String_Node_Str"").build();
  }
  List<String> resp;
  resp=NeighborsManager.getInstance().getNeighbors();
  JSONArray respArray=new JSONArray();
  for (int i=0; i < resp.size(); i++) {
    respArray.put(resp.get(i));
  }
  return Response.ok().entity(respArray).build();
}","@GET public Response childDSRs(){
  if (!EMIRServer.getServerProperties().isGlobalEnabled()) {
    return Response.noContent().entity(""String_Node_Str"").build();
  }
  List<String> resp;
  resp=NeighborsManager.getInstance().getNeighbors();
  JSONArray respArray=new JSONArray();
  for (int i=0; i < resp.size(); i++) {
    respArray.put(resp.get(i));
  }
  return Response.ok().entity(respArray).build();
}",0.998769987699877
179169,"@GET public Response childDSRs(){
  String parent=DSRServer.getProperty(ServerConstants.REGISTRY_PARENT_URL);
  if (parent.isEmpty()) {
    parent=""String_Node_Str"";
  }
  return Response.ok().entity(parent).build();
}","@GET public Response childDSRs(){
  String parent=DSRServer.getProperty(ServerConstants.REGISTRY_PARENT_URL);
  if (parent == null || parent.isEmpty()) {
    parent=""String_Node_Str"";
  }
  return Response.ok().entity(parent).build();
}",0.960352422907489
179170,"@GET public Response childDSRs(){
  System.out.println(""String_Node_Str"");
  List<String> resp;
  resp=ChildrenManager.getInstance().getChildDSRs();
  JSONArray respArray=new JSONArray();
  for (int i=0; i < resp.size(); i++) {
    System.out.println(i + ""String_Node_Str"" + resp.get(i));
    respArray.put(resp.get(i));
  }
  return Response.ok().entity(respArray).build();
}","@GET public Response childDSRs(){
  System.out.println(""String_Node_Str"");
  List<String> resp;
  try {
    resp=ChildrenManager.getInstance().getChildDSRs();
  }
 catch (  ConcurrentModificationException e) {
    resp=ChildrenManager.getInstance().getChildDSRs();
  }
  JSONArray respArray=new JSONArray();
  for (int i=0; i < resp.size(); i++) {
    System.out.println(i + ""String_Node_Str"" + resp.get(i));
    respArray.put(resp.get(i));
  }
  return Response.ok().entity(respArray).build();
}",0.8623853211009175
179171,"@GET public Response childDSRs(){
  List<String> resp;
  resp=NeighborsManager.getInstance().getNeighbors();
  JSONArray respArray=new JSONArray();
  for (int i=0; i < resp.size(); i++) {
    respArray.put(resp.get(i));
  }
  return Response.ok().entity(respArray).build();
}","@GET public Response childDSRs(){
  if (""String_Node_Str"".equalsIgnoreCase(DSRServer.getProperty(ServerConstants.REGISTRY_GLOBAL_ENABLE,""String_Node_Str"").toString())) {
    return Response.noContent().entity(""String_Node_Str"").build();
  }
  List<String> resp;
  resp=NeighborsManager.getInstance().getNeighbors();
  JSONArray respArray=new JSONArray();
  for (int i=0; i < resp.size(); i++) {
    respArray.put(resp.get(i));
  }
  return Response.ok().entity(respArray).build();
}",0.726552179656539
179172,"/** 
 * @param messageGenerationTime
 * @param serviceurl 
 * @return
 * @throws PersistentStoreFailureException
 * @throws QueryException
 */
public boolean checkMessageGenerationTime(String messageTime,String serviceurl) throws QueryException, PersistentStoreFailureException {
  Map<String,String> map=new HashMap<String,String>();
  map.put(ServiceBasicAttributeNames.SERVICE_ENDPOINT_URL.getAttributeName(),serviceurl);
  JSONObject jo=new JSONObject(map);
  List<ServiceObject> storedEntries=serviceDB.query(jo.toString());
  if (storedEntries.size() > 0) {
    Date messageDate=new Date();
    try {
      messageDate=ServiceUtil.UTCISODateFormat.parse(messageTime);
    }
 catch (    ParseException e) {
    }
    Date entryDate=storedEntries.get(0).getUpdateSince();
    if (messageDate.compareTo(entryDate) > 0) {
      return true;
    }
 else {
      return false;
    }
  }
  return true;
}","/** 
 * @param messageGenerationTime
 * @param serviceurl 
 * @return
 * @throws PersistentStoreFailureException
 * @throws QueryException
 */
public boolean checkMessageGenerationTime(String messageTime,String serviceurl) throws QueryException, PersistentStoreFailureException {
  Map<String,String> map=new HashMap<String,String>();
  map.put(ServiceBasicAttributeNames.SERVICE_ENDPOINT_URL.getAttributeName(),serviceurl);
  JSONObject jo=new JSONObject(map);
  List<ServiceObject> storedEntries=serviceDB.query(jo.toString());
  if (storedEntries.size() > 0) {
    Date messageDate=new Date();
    try {
      messageDate=ServiceUtil.UTCISODateFormat.parse(ServiceUtil.toUTCFormat(messageDate));
      messageDate=ServiceUtil.UTCISODateFormat.parse(messageTime);
    }
 catch (    ParseException e) {
    }
    Date entryDate=storedEntries.get(0).getUpdateSince();
    if (messageDate.compareTo(entryDate) > 0) {
      return true;
    }
 else {
      return false;
    }
  }
  return true;
}",0.9441517386722866
179173,"/** 
 * @param jo
 * @throws JSONException
 * @throws InvalidServiceDescriptionException
 * @throws NonExistingResourceException
 * @throws MultipleResourceException
 */
public JSONObject updateService(JSONObject jo) throws UnknownServiceException, InvalidServiceDescriptionException, JSONException, WebApplicationException {
  if (!ServiceUtil.isValidServiceInfo(jo)) {
    throw new InvalidServiceDescriptionException(""String_Node_Str"");
  }
  if (!jo.has(ServiceBasicAttributeNames.SERVICE_EXPIRE_ON.getAttributeName())) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    DateUtil.setExpiryTime(jo,Integer.valueOf(DSRServer.getProperty(ServerConstants.REGISTRY_EXPIRY_DEFAULT,""String_Node_Str"")));
  }
  if (!jo.has(ServiceBasicAttributeNames.SERVICE_CREATED_ON.getAttributeName())) {
    JSONObject date=new JSONObject();
    date.put(""String_Node_Str"",ServiceUtil.toUTCFormat(new Date()));
    jo.put(ServiceBasicAttributeNames.SERVICE_CREATED_ON.getAttributeName(),date);
  }
  jo=DateUtil.addDate(jo,ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName(),new Date());
  ServiceObject sObj=new ServiceObject(jo);
  try {
    serviceDB.update(sObj);
    return jo;
  }
 catch (  MultipleResourceException e) {
    e.printStackTrace();
  }
catch (  NonExistingResourceException e) {
    throw new WebApplicationException(Status.CONFLICT);
  }
catch (  PersistentStoreFailureException e) {
    e.printStackTrace();
  }
  return null;
}","/** 
 * @param jo
 * @throws JSONException
 * @throws InvalidServiceDescriptionException
 * @throws NonExistingResourceException
 * @throws MultipleResourceException
 */
public JSONObject updateService(JSONObject jo) throws UnknownServiceException, InvalidServiceDescriptionException, JSONException, WebApplicationException {
  if (!ServiceUtil.isValidServiceInfo(jo)) {
    throw new InvalidServiceDescriptionException(""String_Node_Str"");
  }
  if (!jo.has(ServiceBasicAttributeNames.SERVICE_EXPIRE_ON.getAttributeName())) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    DateUtil.setExpiryTime(jo,Integer.valueOf(DSRServer.getProperty(ServerConstants.REGISTRY_EXPIRY_DEFAULT,""String_Node_Str"")));
  }
  if (!jo.has(ServiceBasicAttributeNames.SERVICE_CREATED_ON.getAttributeName())) {
    JSONObject date=new JSONObject();
    date.put(""String_Node_Str"",ServiceUtil.toUTCFormat(new Date()));
    jo.put(ServiceBasicAttributeNames.SERVICE_CREATED_ON.getAttributeName(),date);
  }
  if (!jo.has(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName())) {
    jo=DateUtil.addDate(jo,ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName(),new Date());
  }
  ServiceObject sObj=new ServiceObject(jo);
  try {
    serviceDB.update(sObj);
    return jo;
  }
 catch (  MultipleResourceException e) {
    e.printStackTrace();
  }
catch (  NonExistingResourceException e) {
    throw new WebApplicationException(Status.CONFLICT);
  }
catch (  PersistentStoreFailureException e) {
    e.printStackTrace();
  }
  return null;
}",0.9550672351590686
179174,"/** 
 * Store the given DB entries into the local Database.
 * @param list of the DB entries
 * @return boolean, all elements can be stored without any failure or not.
 */
private boolean DBStore(JSONArray newDB){
  ServiceAdminManager serviceAdmin=new ServiceAdminManager();
  boolean retval=true;
  for (int i=0; i < newDB.length(); i++) {
    JSONObject jo=null;
    try {
      jo=new JSONObject(newDB.getString(0));
      String serviceurl=jo.getString(ServiceBasicAttributeNames.SERVICE_ENDPOINT_URL.getAttributeName());
      String messageTime=""String_Node_Str"";
      if (jo.has(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName())) {
        messageTime=jo.getString(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName());
      }
      if (serviceAdmin.checkMessageGenerationTime(messageTime,serviceurl)) {
        @SuppressWarnings(""String_Node_Str"") JSONObject res=serviceAdmin.addService(jo);
      }
    }
 catch (    JSONException e) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + e.getMessage());
      }
      retval=false;
    }
catch (    InvalidServiceDescriptionException e) {
      e.printStackTrace();
      retval=false;
    }
catch (    ExistingResourceException e) {
      if (logger.isDebugEnabled()) {
        logger.warn(""String_Node_Str"" + jo.toString());
      }
      retval=false;
    }
catch (    QueryException e) {
      e.printStackTrace();
      retval=false;
    }
catch (    PersistentStoreFailureException e) {
      e.printStackTrace();
      retval=false;
    }
  }
  return retval;
}","/** 
 * Store the given DB entries into the local Database.
 * @param list of the DB entries
 * @return boolean, all elements can be stored without any failure or not.
 */
private boolean DBStore(JSONArray newDB){
  ServiceAdminManager serviceAdmin=new ServiceAdminManager();
  boolean retval=true;
  for (int i=0; i < newDB.length(); i++) {
    JSONObject jo=null;
    try {
      jo=new JSONObject(newDB.getString(0));
      String serviceurl=jo.getString(ServiceBasicAttributeNames.SERVICE_ENDPOINT_URL.getAttributeName());
      String messageTime=""String_Node_Str"";
      if (jo.has(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName())) {
        messageTime=(jo.getJSONObject(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName())).getString(""String_Node_Str"");
      }
      if (serviceAdmin.checkMessageGenerationTime(messageTime,serviceurl)) {
        @SuppressWarnings(""String_Node_Str"") JSONObject res=serviceAdmin.addService(jo);
      }
    }
 catch (    JSONException e) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + e.getMessage());
      }
      retval=false;
    }
catch (    InvalidServiceDescriptionException e) {
      e.printStackTrace();
      retval=false;
    }
catch (    ExistingResourceException e) {
      if (logger.isDebugEnabled()) {
        logger.warn(""String_Node_Str"" + jo.toString());
      }
      retval=false;
    }
catch (    QueryException e) {
      e.printStackTrace();
      retval=false;
    }
catch (    PersistentStoreFailureException e) {
      e.printStackTrace();
      retval=false;
    }
  }
  return retval;
}",0.9853719265483972
179175,"/** 
 * adding an array of json documents, where each item in the array is service endpoint information
 * @throws InterruptedException TODO: polymorphic registrations: Supporting JSONObject as well as Array
 * @throws JSONException
 */
@POST @Consumes({MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_JSON}) public Response registerServices(JSONArray serviceInfos) throws WebApplicationException, InterruptedException, JSONException {
  Long max=Long.valueOf(DSRServer.getProperty(ServerConstants.REGISTRY_MAX_REGISTRATIONS,""String_Node_Str""));
  if (serviceInfos.length() > max) {
    return Response.status(Status.FORBIDDEN).entity(new String(""String_Node_Str"" + max)).build();
  }
  JSONObject serviceInfo=null;
  JSONArray arr=new JSONArray();
  JSONArray errorArray=new JSONArray();
  for (int i=0; i < serviceInfos.length(); i++) {
    try {
      serviceInfo=serviceInfos.getJSONObject(i);
      Integer length=serviceInfo.length();
      if (length <= 0 || length > 100) {
        throw new WebApplicationException(Status.FORBIDDEN);
      }
      Client c=(Client)req.getAttribute(""String_Node_Str"");
      JSONObject res=null;
      if (c.getRole().getName().equalsIgnoreCase(""String_Node_Str"")) {
        if (!serviceInfo.has(ServiceBasicAttributeNames.SERVICE_OWNER.getAttributeName())) {
          serviceInfo.put(ServiceBasicAttributeNames.SERVICE_OWNER.getAttributeName(),c.getDistinguishedName());
        }
        res=serviceAdmin.addService(serviceInfo);
      }
 else {
        String serviceurl=serviceInfo.getString(ServiceBasicAttributeNames.SERVICE_ENDPOINT_URL.getAttributeName());
        String messageTime=""String_Node_Str"";
        if (serviceInfo.has(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName())) {
          messageTime=serviceInfo.getString(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName());
        }
        if (serviceAdmin.checkMessageGenerationTime(messageTime,serviceurl)) {
          serviceInfo.put(ServiceBasicAttributeNames.SERVICE_OWNER.getAttributeName(),c.getDistinguishedName());
          res=serviceAdmin.addService(serviceInfo);
        }
      }
      arr.put(res);
      continue;
    }
 catch (    ExistingResourceException e) {
      errorArray.put(serviceInfo);
    }
catch (    Exception e) {
      JSONObject jErr=new JSONObject();
      jErr.put(""String_Node_Str"",e.getCause());
      throw new WebApplicationException(Response.status(Status.INTERNAL_SERVER_ERROR).entity(jErr).build());
    }
  }
  EventDispatcher.notifyRecievers(new Event(EventTypes.SERVICE_ADD,arr));
  if (errorArray.length() > 0) {
    return Response.status(Status.CONFLICT).entity(errorArray).build();
  }
  return Response.ok(arr).build();
}","/** 
 * adding an array of json documents, where each item in the array is service endpoint information
 * @throws InterruptedException TODO: polymorphic registrations: Supporting JSONObject as well as Array
 * @throws JSONException
 */
@POST @Consumes({MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_JSON}) public Response registerServices(JSONArray serviceInfos) throws WebApplicationException, InterruptedException, JSONException {
  Long max=Long.valueOf(DSRServer.getProperty(ServerConstants.REGISTRY_MAX_REGISTRATIONS,""String_Node_Str""));
  if (serviceInfos.length() > max) {
    return Response.status(Status.FORBIDDEN).entity(new String(""String_Node_Str"" + max)).build();
  }
  JSONObject serviceInfo=null;
  JSONArray arr=new JSONArray();
  JSONArray errorArray=new JSONArray();
  for (int i=0; i < serviceInfos.length(); i++) {
    try {
      serviceInfo=serviceInfos.getJSONObject(i);
      Integer length=serviceInfo.length();
      if (length <= 0 || length > 100) {
        throw new WebApplicationException(Status.FORBIDDEN);
      }
      String serviceurl=serviceInfo.getString(ServiceBasicAttributeNames.SERVICE_ENDPOINT_URL.getAttributeName());
      String messageTime=""String_Node_Str"";
      if (serviceInfo.has(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName())) {
        messageTime=(serviceInfo.getJSONObject(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName())).getString(""String_Node_Str"");
      }
      Client c=(Client)req.getAttribute(""String_Node_Str"");
      JSONObject res=null;
      if (c.getRole().getName().equalsIgnoreCase(""String_Node_Str"")) {
        if (!serviceInfo.has(ServiceBasicAttributeNames.SERVICE_OWNER.getAttributeName())) {
          serviceInfo.put(ServiceBasicAttributeNames.SERVICE_OWNER.getAttributeName(),c.getDistinguishedName());
        }
        if (serviceAdmin.checkMessageGenerationTime(messageTime,serviceurl)) {
          res=serviceAdmin.addService(serviceInfo);
        }
      }
 else {
        if (serviceAdmin.checkMessageGenerationTime(messageTime,serviceurl)) {
          serviceInfo.put(ServiceBasicAttributeNames.SERVICE_OWNER.getAttributeName(),c.getDistinguishedName());
          res=serviceAdmin.addService(serviceInfo);
        }
      }
      arr.put(res);
      continue;
    }
 catch (    ExistingResourceException e) {
      errorArray.put(serviceInfo);
    }
catch (    Exception e) {
      JSONObject jErr=new JSONObject();
      jErr.put(""String_Node_Str"",e.getCause());
      throw new WebApplicationException(Response.status(Status.INTERNAL_SERVER_ERROR).entity(jErr).build());
    }
  }
  EventDispatcher.notifyRecievers(new Event(EventTypes.SERVICE_ADD,arr));
  if (errorArray.length() > 0) {
    return Response.status(Status.CONFLICT).entity(errorArray).build();
  }
  return Response.ok(arr).build();
}",0.8156384505021521
179176,"/** 
 * updating array of entries
 * @throws JSONException
 */
@PUT @Consumes({MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_JSON}) public Response updateServices(JSONArray serviceInfos) throws WebApplicationException, JSONException {
  try {
    JSONArray arr=new JSONArray();
    JSONArray errorArray=new JSONArray();
    for (int i=0; i < serviceInfos.length(); i++) {
      JSONObject serviceInfo=serviceInfos.getJSONObject(i);
      Client c=(Client)req.getAttribute(""String_Node_Str"");
      String owner=c.getDistinguishedName();
      String url=serviceInfo.getString(ServiceBasicAttributeNames.SERVICE_ENDPOINT_URL.getAttributeName());
      serviceInfo.put(ServiceBasicAttributeNames.SERVICE_OWNER.getAttributeName(),c.getDistinguishedName());
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + url + ""String_Node_Str""+ owner);
      }
      String messageTime=""String_Node_Str"";
      if (serviceInfo.has(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName())) {
        messageTime=serviceInfo.getString(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName());
      }
      if (c.getRole().getName().equalsIgnoreCase(""String_Node_Str"")) {
        JSONObject res;
        try {
          res=serviceAdmin.updateService(serviceInfo);
          arr.put(res);
        }
 catch (        UnknownServiceException e) {
          return Response.status(Status.NOT_FOUND).build();
        }
catch (        WebApplicationException e) {
          errorArray.put(serviceInfo);
        }
        continue;
      }
 else       if (owner != null && serviceAdmin.checkOwner(owner,serviceInfo.getString(ServiceBasicAttributeNames.SERVICE_ENDPOINT_URL.getAttributeName())) && serviceAdmin.checkMessageGenerationTime(messageTime,url)) {
        JSONObject res;
        try {
          res=serviceAdmin.updateService(serviceInfo);
          arr.put(res);
        }
 catch (        UnknownServiceException e) {
          return Response.status(Status.NOT_FOUND).build();
        }
catch (        WebApplicationException e) {
          errorArray.put(serviceInfo);
        }
        continue;
      }
 else {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + serviceInfo.getString(ServiceBasicAttributeNames.SERVICE_ENDPOINT_URL.getAttributeName()) + ""String_Node_Str"");
        }
        return Response.status(Status.UNAUTHORIZED).entity(""String_Node_Str"" + owner + ""String_Node_Str""+ url).build();
      }
    }
    EventDispatcher.notifyRecievers(new Event(EventTypes.SERVICE_UPDATE,arr));
    if (errorArray.length() > 0) {
      return Response.status(Status.CONFLICT).entity(errorArray).build();
    }
    return Response.ok(arr).build();
  }
 catch (  Exception e) {
    JSONObject jErr=new JSONObject();
    jErr.put(""String_Node_Str"",e.getCause());
    throw new WebApplicationException(Response.status(Status.INTERNAL_SERVER_ERROR).entity(jErr).build());
  }
}","/** 
 * updating array of entries
 * @throws JSONException
 */
@PUT @Consumes({MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_JSON}) public Response updateServices(JSONArray serviceInfos) throws WebApplicationException, JSONException {
  try {
    JSONArray arr=new JSONArray();
    JSONArray errorArray=new JSONArray();
    for (int i=0; i < serviceInfos.length(); i++) {
      JSONObject serviceInfo=serviceInfos.getJSONObject(i);
      Client c=(Client)req.getAttribute(""String_Node_Str"");
      String owner=c.getDistinguishedName();
      String url=serviceInfo.getString(ServiceBasicAttributeNames.SERVICE_ENDPOINT_URL.getAttributeName());
      serviceInfo.put(ServiceBasicAttributeNames.SERVICE_OWNER.getAttributeName(),c.getDistinguishedName());
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + url + ""String_Node_Str""+ owner);
      }
      String messageTime=""String_Node_Str"";
      if (serviceInfo.has(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName())) {
        messageTime=(serviceInfo.getJSONObject(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName())).getString(""String_Node_Str"");
      }
      if (c.getRole().getName().equalsIgnoreCase(""String_Node_Str"") && serviceAdmin.checkMessageGenerationTime(messageTime,url)) {
        JSONObject res;
        try {
          res=serviceAdmin.updateService(serviceInfo);
          arr.put(res);
        }
 catch (        UnknownServiceException e) {
          return Response.status(Status.NOT_FOUND).build();
        }
catch (        WebApplicationException e) {
          errorArray.put(serviceInfo);
        }
        continue;
      }
 else       if (owner != null && serviceAdmin.checkOwner(owner,serviceInfo.getString(ServiceBasicAttributeNames.SERVICE_ENDPOINT_URL.getAttributeName())) && serviceAdmin.checkMessageGenerationTime(messageTime,url)) {
        JSONObject res;
        try {
          res=serviceAdmin.updateService(serviceInfo);
          arr.put(res);
        }
 catch (        UnknownServiceException e) {
          return Response.status(Status.NOT_FOUND).build();
        }
catch (        WebApplicationException e) {
          errorArray.put(serviceInfo);
        }
        continue;
      }
 else {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + serviceInfo.getString(ServiceBasicAttributeNames.SERVICE_ENDPOINT_URL.getAttributeName()) + ""String_Node_Str"");
        }
        return Response.status(Status.UNAUTHORIZED).entity(""String_Node_Str"" + owner + ""String_Node_Str""+ url).build();
      }
    }
    EventDispatcher.notifyRecievers(new Event(EventTypes.SERVICE_UPDATE,arr));
    if (errorArray.length() > 0) {
      return Response.status(Status.CONFLICT).entity(errorArray).build();
    }
    return Response.ok(arr).build();
  }
 catch (  Exception e) {
    JSONObject jErr=new JSONObject();
    jErr.put(""String_Node_Str"",e.getCause());
    throw new WebApplicationException(Response.status(Status.INTERNAL_SERVER_ERROR).entity(jErr).build());
  }
}",0.9822170516868872
179177,"/** 
 * adding an array of json documents, where each item in the array is service endpoint information
 * @throws InterruptedException TODO: polymorphic registrations: Supporting JSONObject as well as Array
 * @throws JSONException
 */
@POST @Consumes({MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_JSON}) public Response registerServices(JSONArray serviceInfos) throws WebApplicationException, InterruptedException, JSONException {
  Long max=Long.valueOf(DSRServer.getProperty(ServerConstants.REGISTRY_MAX_REGISTRATIONS,""String_Node_Str""));
  if (serviceInfos.length() > max) {
    return Response.status(Status.FORBIDDEN).entity(new String(""String_Node_Str"" + max)).build();
  }
  JSONObject serviceInfo=null;
  JSONArray arr=new JSONArray();
  JSONArray errorArray=new JSONArray();
  for (int i=0; i < serviceInfos.length(); i++) {
    try {
      serviceInfo=serviceInfos.getJSONObject(i);
      Integer length=serviceInfo.length();
      if (length <= 0 || length > 100) {
        throw new WebApplicationException(Status.FORBIDDEN);
      }
      String serviceurl=serviceInfo.getString(ServiceBasicAttributeNames.SERVICE_ENDPOINT_URL.getAttributeName());
      String messageTime=""String_Node_Str"";
      if (serviceInfo.has(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName())) {
        messageTime=(serviceInfo.getJSONObject(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName())).getString(""String_Node_Str"");
      }
      Client c=(Client)req.getAttribute(""String_Node_Str"");
      JSONObject res=null;
      if (c.getRole().getName().equalsIgnoreCase(""String_Node_Str"")) {
        if (!serviceInfo.has(ServiceBasicAttributeNames.SERVICE_OWNER.getAttributeName())) {
          serviceInfo.put(ServiceBasicAttributeNames.SERVICE_OWNER.getAttributeName(),c.getDistinguishedName());
        }
        if (serviceAdmin.checkMessageGenerationTime(messageTime,serviceurl)) {
          res=serviceAdmin.addService(serviceInfo);
        }
      }
 else {
        if (serviceAdmin.checkMessageGenerationTime(messageTime,serviceurl)) {
          serviceInfo.put(ServiceBasicAttributeNames.SERVICE_OWNER.getAttributeName(),c.getDistinguishedName());
          res=serviceAdmin.addService(serviceInfo);
        }
      }
      arr.put(res);
      continue;
    }
 catch (    ExistingResourceException e) {
      errorArray.put(serviceInfo);
    }
catch (    Exception e) {
      JSONObject jErr=new JSONObject();
      jErr.put(""String_Node_Str"",e.getCause());
      throw new WebApplicationException(Response.status(Status.INTERNAL_SERVER_ERROR).entity(jErr).build());
    }
  }
  EventDispatcher.notifyRecievers(new Event(EventTypes.SERVICE_ADD,arr));
  if (errorArray.length() > 0) {
    return Response.status(Status.CONFLICT).entity(errorArray).build();
  }
  return Response.ok(arr).build();
}","/** 
 * adding an array of json documents, where each item in the array is service endpoint information
 * @throws InterruptedException TODO: polymorphic registrations: Supporting JSONObject as well as Array
 * @throws JSONException
 */
@POST @Consumes({MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_JSON}) public Response registerServices(JSONArray serviceInfos) throws WebApplicationException, InterruptedException, JSONException {
  Long max=Long.valueOf(DSRServer.getProperty(ServerConstants.REGISTRY_MAX_REGISTRATIONS,""String_Node_Str""));
  if (serviceInfos.length() > max) {
    return Response.status(Status.FORBIDDEN).entity(new String(""String_Node_Str"" + max)).build();
  }
  JSONObject serviceInfo=null;
  JSONArray arr=new JSONArray();
  JSONArray errorArray=new JSONArray();
  for (int i=0; i < serviceInfos.length(); i++) {
    try {
      serviceInfo=serviceInfos.getJSONObject(i);
      Integer length=serviceInfo.length();
      if (length <= 0 || length > 100) {
        throw new WebApplicationException(Status.FORBIDDEN);
      }
      String serviceurl=serviceInfo.getString(ServiceBasicAttributeNames.SERVICE_ENDPOINT_URL.getAttributeName());
      String messageTime=""String_Node_Str"";
      if (serviceInfo.has(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName())) {
        messageTime=(serviceInfo.getJSONObject(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName())).getString(""String_Node_Str"");
      }
      Client c=(Client)req.getAttribute(""String_Node_Str"");
      JSONObject res=null;
      if (c.getRole().getName().equalsIgnoreCase(""String_Node_Str"")) {
        if (!serviceInfo.has(ServiceBasicAttributeNames.SERVICE_OWNER.getAttributeName())) {
          serviceInfo.put(ServiceBasicAttributeNames.SERVICE_OWNER.getAttributeName(),c.getDistinguishedName());
        }
        if (serviceAdmin.checkMessageGenerationTime(messageTime,serviceurl)) {
          res=serviceAdmin.addService(serviceInfo);
        }
      }
 else {
        if (serviceAdmin.checkMessageGenerationTime(messageTime,serviceurl)) {
          serviceInfo.put(ServiceBasicAttributeNames.SERVICE_OWNER.getAttributeName(),c.getDistinguishedName());
          res=serviceAdmin.addService(serviceInfo);
        }
      }
      if (res != null) {
        arr.put(res);
      }
      continue;
    }
 catch (    ExistingResourceException e) {
      errorArray.put(serviceInfo);
    }
catch (    Exception e) {
      JSONObject jErr=new JSONObject();
      jErr.put(""String_Node_Str"",e.getCause());
      throw new WebApplicationException(Response.status(Status.INTERNAL_SERVER_ERROR).entity(jErr).build());
    }
  }
  EventDispatcher.notifyRecievers(new Event(EventTypes.SERVICE_ADD,arr));
  if (errorArray.length() > 0) {
    return Response.status(Status.CONFLICT).entity(errorArray).build();
  }
  return Response.ok(arr).build();
}",0.9938885978697398
179178,"private void setSecurityProperties(){
  try {
    if (getProperty(ServerConstants.REGISTRY_SCHEME).equalsIgnoreCase(""String_Node_Str"")) {
      conf.setProperty(ISecurityProperties.REGISTRY_SSL_ENABLED,""String_Node_Str"");
    }
    if (""String_Node_Str"".equalsIgnoreCase(getProperty(ISecurityProperties.REGISTRY_SSL_ENABLED,""String_Node_Str""))) {
      sProps=new DSRSecurityProperties(conf.getProperties());
    }
  }
 catch (  UnrecoverableKeyException e) {
    e.printStackTrace();
  }
catch (  KeyStoreException e) {
    e.printStackTrace();
  }
catch (  NoSuchAlgorithmException e) {
    e.printStackTrace();
  }
catch (  CertificateException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","private void setSecurityProperties(){
  try {
    if (getProperty(ServerConstants.REGISTRY_SCHEME,""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
      conf.setProperty(ISecurityProperties.REGISTRY_SSL_ENABLED,""String_Node_Str"");
    }
    if (""String_Node_Str"".equalsIgnoreCase(getProperty(ISecurityProperties.REGISTRY_SSL_ENABLED,""String_Node_Str""))) {
      sProps=new DSRSecurityProperties(conf.getProperties());
    }
  }
 catch (  UnrecoverableKeyException e) {
    e.printStackTrace();
  }
catch (  KeyStoreException e) {
    e.printStackTrace();
  }
catch (  NoSuchAlgorithmException e) {
    e.printStackTrace();
  }
catch (  CertificateException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9879518072289156
179179,"/** 
 * @param hostname - default <b>localhost</b>
 * @param port - default <b>27017</b>
 * @param dbName - default <b>emiregistry</b>
 * @param colName - default <b>services</b>
 */
public MongoDBServiceDatabase(String hostname,Integer port,String dbName,String colName){
  try {
    if (DSRServer.getConfiguration() == null) {
      new DSRServer(new Configuration(new Properties()));
    }
    if (connection == null) {
      connection=new Mongo(hostname,port);
    }
    database=connection.getDB(dbName);
    serviceCollection=database.getCollection(colName);
    BasicDBObject obj=new BasicDBObject(ServiceBasicAttributeNames.SERVICE_ENDPOINT_URL.getAttributeName(),""String_Node_Str"");
    serviceCollection.ensureIndex(obj,ServiceBasicAttributeNames.SERVICE_ENDPOINT_URL.getAttributeName(),true);
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + obj);
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}","/** 
 * @param hostname - default <b>localhost</b>
 * @param port - default <b>27017</b>
 * @param dbName - default <b>emiregistry</b>
 * @param colName - default <b>services</b>
 */
public MongoDBServiceDatabase(String hostname,Integer port,String dbName,String colName){
  try {
    if (DSRServer.getConfiguration() == null) {
      Properties serverProps=new Properties();
      serverProps.put(ServerConstants.MONGODB_HOSTNAME,hostname);
      serverProps.put(ServerConstants.MONGODB_PORT,port);
      serverProps.put(ServerConstants.MONGODB_COLLECTION_NAME,colName);
      serverProps.put(ServerConstants.MONGODB_DB_NAME,dbName);
      new DSRServer(new Configuration(serverProps));
    }
    if (connection == null) {
      connection=new Mongo(hostname,port);
    }
    database=connection.getDB(dbName);
    serviceCollection=database.getCollection(colName);
    BasicDBObject obj=new BasicDBObject(ServiceBasicAttributeNames.SERVICE_ENDPOINT_URL.getAttributeName(),""String_Node_Str"");
    serviceCollection.ensureIndex(obj,ServiceBasicAttributeNames.SERVICE_ENDPOINT_URL.getAttributeName(),true);
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + obj);
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}",0.8461193360251233
179180,"/** 
 * get the server's identity, or <code>null</code> if  no server keystore has been configured
 * @see #getServerCert()
 * @return an {@link X500Principal} or <code>null</code>
 */
public static X500Principal getServerIdentity(){
  ISecurityProperties secProps=DSRServer.getSecurityProperties();
  if (secProps.isSslEnabled() && secProps.getKeystore() != null) {
    return getServerCert().getSubjectX500Principal();
  }
 else {
    return null;
  }
}","/** 
 * get the server's identity, or <code>null</code> if  no server keystore has been configured makeAnonymousClient
 * @see #getServerCert()
 * @return an {@link X500Principal} or <code>null</code>
 */
public static X500Principal getServerIdentity(){
  ISecurityProperties secProps=DSRServer.getSecurityProperties();
  if (secProps.isSslEnabled() && secProps.getKeystore() != null) {
    return getServerCert().getSubjectX500Principal();
  }
 else {
    return null;
  }
}",0.978494623655914
179181,"@BeforeClass public static void setUpBeforeClass() throws Exception {
  final MongoDBServiceDatabase parentDB=new MongoDBServiceDatabase(""String_Node_Str"",27017,""String_Node_Str"",""String_Node_Str"");
  parentDB.deleteAll();
  final MongoDBServiceDatabase childDB=new MongoDBServiceDatabase(""String_Node_Str"",27017,""String_Node_Str"",""String_Node_Str"");
  childDB.deleteAll();
}","@BeforeClass public static void setUpBeforeClass() throws Exception {
  ServiceUtil.initLogger(""String_Node_Str"");
  final MongoDBServiceDatabase parentDB=new MongoDBServiceDatabase(""String_Node_Str"",27017,""String_Node_Str"",""String_Node_Str"");
  parentDB.deleteAll();
  final MongoDBServiceDatabase childDB=new MongoDBServiceDatabase(""String_Node_Str"",27017,""String_Node_Str"",""String_Node_Str"");
  childDB.deleteAll();
}",0.9433962264150944
179182,"@Override public PDPResult checkAuthorisation(Client c,String action,ResourceDescriptor d) throws Exception {
  if (c.getRole().getName().equalsIgnoreCase(""String_Node_Str"") || c.getRole().getName().equalsIgnoreCase(""String_Node_Str"")) {
    return new PDPResult(PDPResult.Decision.PERMIT,""String_Node_Str"");
  }
  return new PDPResult(PDPResult.Decision.DENY,""String_Node_Str"");
}","@Override public PDPResult checkAuthorisation(Client c,String action,ResourceDescriptor d) throws Exception {
  if (d.getServiceName().equalsIgnoreCase(""String_Node_Str"")) {
    if (c.getRole().getName().equalsIgnoreCase(""String_Node_Str"") || c.getRole().getName().equalsIgnoreCase(""String_Node_Str"")) {
      return new PDPResult(PDPResult.Decision.PERMIT,""String_Node_Str"");
    }
 else {
      return new PDPResult(PDPResult.Decision.DENY,""String_Node_Str"");
    }
  }
  return new PDPResult(PDPResult.Decision.PERMIT,""String_Node_Str"");
}",0.8255687973997833
179183,"@Override public ContainerRequest filter(ContainerRequest request) throws WebApplicationException {
  MultivaluedMap<String,String> map;
  Map<String,Object> m;
  try {
    map=request.getRequestHeaders();
    m=request.getProperties();
    checkAccess();
  }
 catch (  AuthorisationException e) {
    throw new WebApplicationException(e,Response.status(Status.UNAUTHORIZED).entity(""String_Node_Str"" + e).build());
  }
  return request;
}","@Override public ContainerRequest filter(ContainerRequest request) throws WebApplicationException {
  try {
    checkAccess();
  }
 catch (  AuthorisationException e) {
    throw new WebApplicationException(e,Response.status(Status.UNAUTHORIZED).entity(""String_Node_Str"" + e).build());
  }
  return request;
}",0.8273092369477911
179184,"@Test public void test() throws ClientHandlerException, UniformInterfaceException, JSONException {
  DSRClient cr1=new DSRClient(BaseURI + ""String_Node_Str"");
  assertTrue(cr1.getClientResource().accept(MediaType.APPLICATION_JSON_TYPE).get(ClientResponse.class).getStatus() == Status.OK.getStatusCode());
  JSONObject jo=cr1.getClientResource().accept(MediaType.APPLICATION_JSON_TYPE).get(ClientResponse.class).getEntity(JSONObject.class);
  System.out.println(jo);
  assertNotNull(jo);
}","@Test public void test() throws Exception {
  DSRClient cr1=new DSRClient(BaseURI + ""String_Node_Str"");
  assertTrue(cr1.getClientResource().accept(MediaType.APPLICATION_JSON_TYPE).get(ClientResponse.class).getStatus() == Status.OK.getStatusCode());
  JSONObject jo=cr1.getClientResource().accept(MediaType.APPLICATION_JSON_TYPE).get(ClientResponse.class).getEntity(JSONObject.class);
  System.out.println(jo);
  assertNotNull(jo);
}",0.9402823018458196
179185,"/** 
 * Starts the servicereaper thread to purge the expired service entries
 */
private void startServiceExpiryCheckcer(){
  RegistryThreadPool.getScheduledExecutorService().scheduleWithFixedDelay(new ServiceReaper(),10,5,TimeUnit.SECONDS);
}","/** 
 * Starts the servicereaper thread to purge the expired service entries
 */
private void startServiceExpiryCheckcer(){
  RegistryThreadPool.getScheduledExecutorService().scheduleWithFixedDelay(new ServiceReaper(),10,1,TimeUnit.SECONDS);
}",0.9958847736625516
179186,"/** 
 * Finding a service by its url
 * @param string
 * @throws NonExistingResourceException
 * @throws MultipleResourceException
 * @throws PersistentStoreFailureException
 */
public JSONObject findServiceByUrl(String url){
  ServiceObject so=null;
  try {
    so=serviceDB.getServiceByUrl(url);
  }
 catch (  MultipleResourceException e) {
    e.printStackTrace();
  }
catch (  NonExistingResourceException e) {
    e.printStackTrace();
  }
catch (  PersistentStoreFailureException e) {
    e.printStackTrace();
  }
  if (so == null) {
    return null;
  }
  return so.toJSON();
}","/** 
 * Finding a service by its url
 * @param string
 * @throws NonExistingResourceException
 * @throws MultipleResourceException
 * @throws PersistentStoreFailureException
 */
public JSONObject findServiceByUrl(String url) throws NonExistingResourceException, PersistentStoreFailureException {
  ServiceObject so=null;
  try {
    so=serviceDB.getServiceByUrl(url);
  }
 catch (  MultipleResourceException e) {
    e.printStackTrace();
  }
  if (so == null) {
    return null;
  }
  return so.toJSON();
}",0.800734618916437
179187,"public static ServiceAdminManager getServiceAdminManager(){
  return new ServiceAdminManager();
}","public ServiceAdminManager getServiceAdminManager(){
  return new ServiceAdminManager();
}",0.962566844919786
179188,"public NonExistingResourceException(String message){
  super(message);
}","public NonExistingResourceException(Throwable e){
  super(e);
}",0.8148148148148148
179189,"@Override public JSONArray paginatedQuery(String query,Integer pageSize,String id){
  DBObject queryObj=(DBObject)JSON.parse(query);
  DBCursor cur=null;
  BasicDBObject idOrderBy=new BasicDBObject(""String_Node_Str"",1);
  if (id == null) {
    cur=serviceCollection.find(queryObj).sort(idOrderBy).limit(pageSize);
  }
 else {
    StringBuffer b=new StringBuffer();
    b.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(""String_Node_Str"");
    DBObject db=(DBObject)JSON.parse(b.toString());
    if (queryObj.keySet().size() > 0) {
      db.putAll(queryObj);
    }
    cur=serviceCollection.find(db).sort(idOrderBy).limit(pageSize);
  }
  List<DBObject> lst=cur.toArray();
  JSONArray arr=new JSONArray(lst);
  return arr;
}","@Override public JSONArray paginatedQuery(String query,Integer pageSize,String id){
  DBObject queryObj=(DBObject)JSON.parse(query);
  DBCursor cur=null;
  BasicDBObject idOrderBy=new BasicDBObject(""String_Node_Str"",1);
  if (id == null) {
    cur=serviceCollection.find(queryObj).sort(idOrderBy).limit(pageSize);
  }
 else {
    StringBuffer b=new StringBuffer();
    b.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(id).append(""String_Node_Str"").append(""String_Node_Str"");
    DBObject db=(DBObject)JSON.parse(b.toString());
    if (queryObj.keySet().size() > 0) {
      db.putAll(queryObj);
    }
    cur=serviceCollection.find(db).sort(idOrderBy).limit(pageSize);
  }
  List<DBObject> lst=cur.toArray();
  cur.close();
  JSONArray arr=new JSONArray(lst);
  return arr;
}",0.9919743178170144
179190,"@Override public void deleteByUrl(String url) throws MultipleResourceException, NonExistingResourceException, PersistentStoreFailureException {
  BasicDBObject query=new BasicDBObject();
  query.put(ServiceBasicAttributeNames.SERVICE_URL.getAttributeName(),url);
  DBObject d=serviceCollection.findAndRemove(query);
  if (d == null) {
    if (logger.isDebugEnabled()) {
      String msg=""String_Node_Str"" + url + ""String_Node_Str"";
      logger.debug(msg);
    }
    throw new NonExistingResourceException(""String_Node_Str"" + url + ""String_Node_Str"");
  }
}","@Override public void deleteByUrl(String url) throws MultipleResourceException, NonExistingResourceException, PersistentStoreFailureException {
  BasicDBObject query=new BasicDBObject();
  query.put(ServiceBasicAttributeNames.SERVICE_ENDPOINT_URL.getAttributeName(),url);
  DBObject d=serviceCollection.findAndRemove(query);
  if (d == null) {
    if (logger.isDebugEnabled()) {
      String msg=""String_Node_Str"" + url + ""String_Node_Str"";
      logger.debug(msg);
    }
    throw new NonExistingResourceException(""String_Node_Str"" + url + ""String_Node_Str"");
  }
}",0.9919857524487978
179191,"@Override public List<ServiceObject> query(String query,Integer skip) throws QueryException, PersistentStoreFailureException {
  DBObject o=(DBObject)JSON.parse(query);
  DBCursor cur=serviceCollection.find(o).skip(skip);
  logger.debug(cur.getCursorId());
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + cur.size());
  }
  List<ServiceObject> resultCollection=new ArrayList<ServiceObject>();
  int i=0;
  try {
    while (cur.hasNext()) {
      ServiceObject s=new ServiceObject(cur.next().toString());
      resultCollection.add(s);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return Collections.unmodifiableList(resultCollection);
}","@Override public List<ServiceObject> query(String query,Integer skip) throws QueryException, PersistentStoreFailureException {
  DBObject o=(DBObject)JSON.parse(query);
  DBCursor cur=serviceCollection.find(o).skip(skip);
  logger.debug(cur.getCursorId());
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + cur.size());
  }
  List<ServiceObject> resultCollection=new ArrayList<ServiceObject>();
  int i=0;
  try {
    while (cur.hasNext()) {
      ServiceObject s=new ServiceObject(cur.next().toString());
      resultCollection.add(s);
    }
    cur.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return Collections.unmodifiableList(resultCollection);
}",0.9876363636363636
179192,"@Override public void deleteAll(){
  BasicDBObject o=new BasicDBObject(0);
  serviceCollection.remove(o);
}","@Override public void deleteAll(){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"");
  }
  BasicDBObject o=new BasicDBObject(0);
  serviceCollection.remove(o);
}",0.7430555555555556
179193,"@Override public void insert(ServiceObject item) throws ExistingResourceException, PersistentStoreFailureException {
  List<String> lstError=new CopyOnWriteArrayList<String>();
  try {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + item.toDBObject());
    }
    DBObject db=item.toDBObject();
    db.put(ServiceBasicAttributeNames.SERVICE_CREATED_ON.getAttributeName(),new Date());
    WriteResult wr=serviceCollection.insert(db,WriteConcern.SAFE);
    EventManager.notifyRecievers(new Event(EventTypes.SERVICE_ADD,db));
  }
 catch (  MongoException e) {
    if (e instanceof DuplicateKey) {
      throw new ExistingResourceException(""String_Node_Str"" + item.getUrl() + ""String_Node_Str"",e);
    }
 else {
      throw new PersistentStoreFailureException(e);
    }
  }
}","@Override public void insert(ServiceObject item) throws ExistingResourceException, PersistentStoreFailureException {
  List<String> lstError=new CopyOnWriteArrayList<String>();
  try {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + item.toDBObject());
    }
    DBObject db=item.toDBObject();
    db.put(ServiceBasicAttributeNames.SERVICE_CREATED_ON.getAttributeName(),new Date());
    serviceCollection.insert(db,WriteConcern.SAFE);
    EventManager.notifyRecievers(new Event(EventTypes.SERVICE_ADD,db));
  }
 catch (  MongoException e) {
    if (e instanceof DuplicateKey) {
      throw new ExistingResourceException(""String_Node_Str"" + item.getUrl() + ""String_Node_Str"",e);
    }
 else {
      throw new PersistentStoreFailureException(e);
    }
  }
}",0.9904882688649336
179194,"@Override public void update(ServiceObject sObj) throws MultipleResourceException, NonExistingResourceException, PersistentStoreFailureException {
  DBObject dbObj=sObj.toDBObject();
  dbObj.put(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName(),new Date());
  BasicDBObject query=new BasicDBObject();
  query.put(ServiceBasicAttributeNames.SERVICE_URL.getAttributeName(),sObj.getUrl());
  serviceCollection.update(query,dbObj);
  EventManager.notifyRecievers(new Event(EventTypes.SERVICE_UPDATE,dbObj));
}","@Override public void update(ServiceObject sObj) throws MultipleResourceException, NonExistingResourceException, PersistentStoreFailureException {
  DBObject dbObj=sObj.toDBObject();
  dbObj.put(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName(),new Date());
  BasicDBObject query=new BasicDBObject();
  query.put(ServiceBasicAttributeNames.SERVICE_ENDPOINT_URL.getAttributeName(),sObj.getUrl());
  serviceCollection.update(query,dbObj);
  EventManager.notifyRecievers(new Event(EventTypes.SERVICE_UPDATE,dbObj));
}",0.9914529914529916
179195,"/** 
 * @param hostname - default <b>localhost</b>
 * @param port - default <b>27017</b>
 * @param dbName - default <b>emiregistry</b>
 * @param colName - default <b>services</b>
 */
public MongoDBServiceDatabase(String hostname,Integer port,String dbName,String colName){
  try {
    connection=MongoConnection.get(hostname,port);
    database=connection.getDB(dbName);
    if (Boolean.parseBoolean(DSRServer.getConfiguration().getProperty(ServerConstants.MONGODB_COL_CREATE,""String_Node_Str""))) {
      serviceCollection=database.getCollection(colName);
      serviceCollection.dropIndexes();
      serviceCollection.drop();
    }
    serviceCollection=database.getCollection(colName);
    BasicDBObject obj=new BasicDBObject(ServiceBasicAttributeNames.SERVICE_URL.getAttributeName(),1);
    logger.info(obj);
    serviceCollection.createIndex(obj);
    serviceCollection.ensureIndex(obj,""String_Node_Str"",true);
  }
 catch (  UnknownHostException e) {
    Log.logException(e);
  }
catch (  MongoException e) {
    Log.logException(e);
  }
}","/** 
 * @param hostname - default <b>localhost</b>
 * @param port - default <b>27017</b>
 * @param dbName - default <b>emiregistry</b>
 * @param colName - default <b>services</b>
 */
public MongoDBServiceDatabase(String hostname,Integer port,String dbName,String colName){
  try {
    if (DSRServer.getConfiguration() == null) {
      DSRServer s=new DSRServer(new Configuration(new Properties()));
    }
    connection=MongoConnection.get(hostname,port);
    database=connection.getDB(dbName);
    serviceCollection=database.getCollection(colName);
    BasicDBObject obj=new BasicDBObject(ServiceBasicAttributeNames.SERVICE_ENDPOINT_URL.getAttributeName(),""String_Node_Str"");
    logger.info(obj);
    serviceCollection.ensureIndex(obj,ServiceBasicAttributeNames.SERVICE_ENDPOINT_URL.getAttributeName(),true);
  }
 catch (  UnknownHostException e) {
    Log.logException(e);
  }
catch (  MongoException e) {
    Log.logException(e);
  }
}",0.7315842583249244
179196,"@Override public ServiceObject getServiceByUrl(String identifier) throws MultipleResourceException, NonExistingResourceException, PersistentStoreFailureException {
  Map<String,String> map=new HashMap<String,String>();
  map.put(ServiceBasicAttributeNames.SERVICE_URL.getAttributeName(),identifier);
  ServiceObject so=null;
  try {
    DBCursor cur=serviceCollection.find(new BasicDBObject(""String_Node_Str"",identifier));
    while (cur.hasNext()) {
      so=new ServiceObject(cur.next().toString());
    }
  }
 catch (  MongoException e) {
    e.printStackTrace();
  }
catch (  JSONException e) {
    e.printStackTrace();
  }
  return so;
}","@Override public ServiceObject getServiceByUrl(String identifier) throws MultipleResourceException, NonExistingResourceException, PersistentStoreFailureException {
  ServiceObject so=null;
  try {
    DBObject db=serviceCollection.findOne(new BasicDBObject(ServiceBasicAttributeNames.SERVICE_ENDPOINT_URL.getAttributeName(),identifier));
    if (db == null) {
      return null;
    }
    so=new ServiceObject(db);
  }
 catch (  MongoException e) {
    e.printStackTrace();
  }
catch (  JSONException e) {
    throw new NonExistingResourceException(e);
  }
  return so;
}",0.6150041220115416
179197,"/** 
 * @throws JSONException
 */
public List<ServiceObject> findAll() throws JSONException {
  List<ServiceObject> lst=new CopyOnWriteArrayList<ServiceObject>();
  DBCursor c=serviceCollection.find();
  while (c.hasNext()) {
    DBObject type=(DBObject)c.next();
    ServiceObject s=new ServiceObject(type.toString());
    lst.add(s);
  }
  return Collections.unmodifiableList(lst);
}","/** 
 * @throws JSONException
 */
public List<ServiceObject> findAll() throws JSONException {
  List<ServiceObject> lst=new CopyOnWriteArrayList<ServiceObject>();
  DBCursor c=serviceCollection.find();
  while (c.hasNext()) {
    DBObject type=(DBObject)c.next();
    ServiceObject s=new ServiceObject(type.toString());
    lst.add(s);
  }
  c.close();
  return Collections.unmodifiableList(lst);
}",0.983397190293742
179198,"@Override public JSONArray queryJSONWithLimit(String s,Integer limit){
  DBObject o=(DBObject)JSON.parse(s);
  DBCursor cur=serviceCollection.find(o).limit(limit);
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + cur.size());
  }
  JSONArray arr=new JSONArray();
  try {
    while (cur.hasNext()) {
      arr.put(JSON.serialize(cur.next()));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return arr;
}","@Override public JSONArray queryJSONWithLimit(String s,Integer limit){
  DBObject o=(DBObject)JSON.parse(s);
  DBCursor cur=serviceCollection.find(o).limit(limit);
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + cur.size());
  }
  JSONArray arr=new JSONArray();
  try {
    while (cur.hasNext()) {
      arr.put(JSON.serialize(cur.next()));
    }
    cur.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return arr;
}",0.981132075471698
179199,"@Override public JSONArray queryJSON(String query,Integer skip) throws QueryException, PersistentStoreFailureException {
  DBObject o=(DBObject)JSON.parse(query);
  DBCursor cur=serviceCollection.find(o).skip(skip);
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + cur.size());
  }
  JSONArray arr=new JSONArray();
  try {
    while (cur.hasNext()) {
      arr.put(JSON.serialize(cur.next()));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return arr;
}","@Override public JSONArray queryJSON(String query,Integer skip) throws QueryException, PersistentStoreFailureException {
  DBObject o=(DBObject)JSON.parse(query);
  DBCursor cur=serviceCollection.find(o).skip(skip);
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + cur.size());
  }
  JSONArray arr=new JSONArray();
  try {
    while (cur.hasNext()) {
      arr.put(JSON.serialize(cur.next()));
    }
    cur.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return arr;
}",0.983084577114428
179200,"public String getUrl(){
  String serviceUrl=null;
  try {
    serviceUrl=jo.get(ServiceBasicAttributeNames.SERVICE_URL.getAttributeName()).toString();
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return serviceUrl;
}","public String getUrl(){
  String serviceUrl=null;
  try {
    serviceUrl=jo.get(ServiceBasicAttributeNames.SERVICE_ENDPOINT_URL.getAttributeName()).toString();
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return serviceUrl;
}",0.9812108559498957
179201,"public DBObject toDBObject(){
  DBObject d=null;
  d=(DBObject)JSON.parse(toString());
  if (d.get(ServiceBasicAttributeNames.SERVICE_CREATED_ON.getAttributeName()) != null)   d.put(ServiceBasicAttributeNames.SERVICE_CREATED_ON.getAttributeName(),getCreationTime());
  if (d.get(ServiceBasicAttributeNames.SERVICE_EXPIRE_ON.getAttributeName()) != null)   d.put(ServiceBasicAttributeNames.SERVICE_EXPIRE_ON.getAttributeName(),getExpireOn());
  if (d.get(ServiceBasicAttributeNames.SERVICE_CREATED_ON.getAttributeName()) != null)   d.put(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName(),getUpdateSince());
  return d;
}","public DBObject toDBObject(){
  DBObject d=null;
  d=(DBObject)JSON.parse(toString());
  if (d.get(ServiceBasicAttributeNames.SERVICE_CREATED_ON.getAttributeName()) != null)   d.put(ServiceBasicAttributeNames.SERVICE_CREATED_ON.getAttributeName(),getCreationTime());
  if (d.get(ServiceBasicAttributeNames.SERVICE_EXPIRE_ON.getAttributeName()) != null)   d.put(ServiceBasicAttributeNames.SERVICE_EXPIRE_ON.getAttributeName(),getExpireOn());
  if (d.get(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName()) != null)   d.put(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName(),getUpdateSince());
  return d;
}",0.9874213836477987
179202,"/** 
 */
public ServiceReaper(){
  sm=ServiceManagerFactory.getServiceAdminManager();
}","/** 
 */
public ServiceReaper(){
  sm=new ServiceAdminManager();
}",0.8235294117647058
179203,"/** 
 * @param jo
 * @throws JSONException
 * @throws InvalidServiceDescriptionException
 * @throws NonExistingResourceException
 * @throws MultipleResourceException
 */
public void updateService(JSONObject jo) throws UnknownServiceException, InvalidServiceDescriptionException, JSONException {
  if (!ServiceUtil.isValidServiceInfo(jo)) {
    throw new InvalidServiceDescriptionException(""String_Node_Str"");
  }
  if (jo.get(ServiceBasicAttributeNames.SERVICE_CREATED_ON.getAttributeName()) != null) {
    jo.remove(ServiceBasicAttributeNames.SERVICE_CREATED_ON.getAttributeName());
  }
  jo.put(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName(),ServiceUtil.ServiceDateFormat.format(new Date()));
  ServiceObject sObj=new ServiceObject(jo);
  try {
    serviceDB.update(sObj);
  }
 catch (  MultipleResourceException e) {
    e.printStackTrace();
  }
catch (  NonExistingResourceException e) {
    e.printStackTrace();
  }
catch (  PersistentStoreFailureException e) {
    e.printStackTrace();
  }
}","/** 
 * @param jo
 * @throws JSONException
 * @throws InvalidServiceDescriptionException
 * @throws NonExistingResourceException
 * @throws MultipleResourceException
 */
public void updateService(JSONObject jo) throws UnknownServiceException, InvalidServiceDescriptionException, JSONException {
  if (!ServiceUtil.isValidServiceInfo(jo)) {
    throw new InvalidServiceDescriptionException(""String_Node_Str"");
  }
  if (jo.has(ServiceBasicAttributeNames.SERVICE_CREATED_ON.getAttributeName())) {
    jo.remove(ServiceBasicAttributeNames.SERVICE_CREATED_ON.getAttributeName());
  }
  jo.put(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName(),ServiceUtil.ServiceDateFormat.format(new Date()));
  ServiceObject sObj=new ServiceObject(jo);
  try {
    serviceDB.update(sObj);
  }
 catch (  MultipleResourceException e) {
    e.printStackTrace();
  }
catch (  NonExistingResourceException e) {
    e.printStackTrace();
  }
catch (  PersistentStoreFailureException e) {
    e.printStackTrace();
  }
}",0.9930898321816388
179204,"@Override public void deleteByUrl(String url) throws MultipleResourceException, NonExistingResourceException, PersistentStoreFailureException {
  BasicDBObject query=new BasicDBObject();
  query.put(ServiceBasicAttributeNames.SERVICE_URL.getAttributeName(),url);
  DBObject d=serviceCollection.findAndRemove(query);
  if (d == null) {
    throw new NonExistingResourceException();
  }
}","@Override public void deleteByUrl(String url) throws MultipleResourceException, NonExistingResourceException, PersistentStoreFailureException {
  BasicDBObject query=new BasicDBObject();
  query.put(ServiceBasicAttributeNames.SERVICE_URL.getAttributeName(),url);
  DBObject d=serviceCollection.findAndRemove(query);
  if (d == null) {
    if (logger.isDebugEnabled()) {
      String msg=""String_Node_Str"" + url + ""String_Node_Str"";
      logger.debug(msg);
    }
  }
}",0.8149882903981265
179205,"private static JSONObject getDummyServiceDesc(){
  Map<String,String> map=new HashMap<String,String>();
  map.put(ServiceBasicAttributeNames.SERVICE_URL.getAttributeName(),""String_Node_Str"");
  map.put(ServiceBasicAttributeNames.SERVICE_TYPE.getAttributeName(),""String_Node_Str"");
  map.put(ServiceBasicAttributeNames.SERVICE_EXPIRE_ON.getAttributeName(),""String_Node_Str"");
  map.put(ServiceBasicAttributeNames.SERVICE_OWNER.getAttributeName(),""String_Node_Str"");
  map.put(ServiceBasicAttributeNames.SERVICE_CREATED_ON.getAttributeName(),""String_Node_Str"");
  map.put(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName(),""String_Node_Str"");
  JSONObject jo=new JSONObject(map);
  return jo;
}","private static JSONObject getDummyServiceDesc(){
  Map<String,String> map=new HashMap<String,String>();
  map.put(ServiceBasicAttributeNames.SERVICE_URL.getAttributeName(),""String_Node_Str"");
  map.put(ServiceBasicAttributeNames.SERVICE_TYPE.getAttributeName(),""String_Node_Str"");
  map.put(ServiceBasicAttributeNames.SERVICE_EXPIRE_ON.getAttributeName(),""String_Node_Str"");
  map.put(ServiceBasicAttributeNames.SERVICE_OWNER.getAttributeName(),""String_Node_Str"");
  JSONObject jo=new JSONObject(map);
  return jo;
}",0.8431372549019608
179206,"private static JSONObject getUpdatedServiceDesc(){
  Map<String,String> map=new HashMap<String,String>();
  map.put(ServiceBasicAttributeNames.SERVICE_URL.getAttributeName(),""String_Node_Str"");
  map.put(ServiceBasicAttributeNames.SERVICE_TYPE.getAttributeName(),""String_Node_Str"");
  map.put(ServiceBasicAttributeNames.SERVICE_EXPIRE_ON.getAttributeName(),""String_Node_Str"");
  map.put(ServiceBasicAttributeNames.SERVICE_OWNER.getAttributeName(),""String_Node_Str"");
  map.put(ServiceBasicAttributeNames.SERVICE_CREATED_ON.getAttributeName(),""String_Node_Str"");
  map.put(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName(),""String_Node_Str"");
  JSONObject jo=new JSONObject(map);
  return jo;
}","private static JSONObject getUpdatedServiceDesc(){
  Map<String,String> map=new HashMap<String,String>();
  map.put(ServiceBasicAttributeNames.SERVICE_URL.getAttributeName(),""String_Node_Str"");
  map.put(ServiceBasicAttributeNames.SERVICE_TYPE.getAttributeName(),""String_Node_Str"");
  map.put(ServiceBasicAttributeNames.SERVICE_EXPIRE_ON.getAttributeName(),""String_Node_Str"");
  map.put(ServiceBasicAttributeNames.SERVICE_OWNER.getAttributeName(),""String_Node_Str"");
  JSONObject jo=new JSONObject(map);
  return jo;
}",0.8436482084690554
179207,"private static JSONObject getDummyServiceDesc(){
  Map<String,String> map=new HashMap<String,String>();
  map.put(ServiceBasicAttributeNames.SERVICE_URL.getAttributeName(),""String_Node_Str"");
  map.put(ServiceBasicAttributeNames.SERVICE_TYPE.getAttributeName(),""String_Node_Str"");
  map.put(ServiceBasicAttributeNames.SERVICE_EXPIRE_ON.getAttributeName(),""String_Node_Str"");
  map.put(ServiceBasicAttributeNames.SERVICE_OWNER.getAttributeName(),""String_Node_Str"");
  map.put(ServiceBasicAttributeNames.SERVICE_CREATED_ON.getAttributeName(),""String_Node_Str"");
  map.put(ServiceBasicAttributeNames.SERVICE_UPDATE_SINCE.getAttributeName(),""String_Node_Str"");
  JSONObject jo=new JSONObject(map);
  return jo;
}","private static JSONObject getDummyServiceDesc(){
  Map<String,String> map=new HashMap<String,String>();
  map.put(ServiceBasicAttributeNames.SERVICE_URL.getAttributeName(),""String_Node_Str"");
  map.put(ServiceBasicAttributeNames.SERVICE_TYPE.getAttributeName(),""String_Node_Str"");
  map.put(ServiceBasicAttributeNames.SERVICE_EXPIRE_ON.getAttributeName(),""String_Node_Str"");
  map.put(ServiceBasicAttributeNames.SERVICE_OWNER.getAttributeName(),""String_Node_Str"");
  JSONObject jo=new JSONObject(map);
  return jo;
}",0.8431372549019608
179208,"private static List<PFile> extractUsingRegExp(PFile pFile){
  List<PFile> result=new ArrayList<PFile>();
  PArchive pArchive=pFile.getPArchive();
  Map<String,File> files=extractFilesForRegExp(pArchive.getFile(),pArchive.getType(),pFile.getRelativePath());
  for (  String relativePath : files.keySet()) {
    PFile aClone=ModelUtils.createPFile(pFile,relativePath,files.get(relativePath));
    result.add(aClone);
  }
  if (result.size() == 0) {
    result.add(pFile);
  }
  return result;
}","private static List<PFile> extractUsingRegExp(PFile pFile){
  List<PFile> result=new ArrayList<PFile>();
  PArchive pArchive=pFile.getPArchive();
  Map<String,File> files=extractFilesForRegExp(pArchive.getFile(),pArchive.getType(),pFile.getRelativePath());
  for (  String relativePath : files.keySet()) {
    PFile aClone=ModelUtils.clonePFile(pFile,relativePath,files.get(relativePath));
    result.add(aClone);
  }
  if (result.size() == 0) {
    result.add(pFile);
  }
  return result;
}",0.992878942014242
179209,"public static void checkIfResultIsAsExpected(File actual,File expected,String encoding){
  if (!actual.isDirectory()) {
    throw new IllegalArgumentException(""String_Node_Str"" + actual.getAbsolutePath() + ""String_Node_Str"");
  }
  if (!expected.isDirectory()) {
    throw new IllegalArgumentException(""String_Node_Str"" + expected.getAbsolutePath() + ""String_Node_Str"");
  }
  for (  File expectedFile : getFiles(expected)) {
    String completeRelativePath=expected.getPath();
    int index=expectedFile.getPath().indexOf(completeRelativePath) + completeRelativePath.length();
    String relativePath=expectedFile.getPath().substring(index);
    File filteredFile=new File(actual,relativePath);
    try {
      Assert.assertEquals(""String_Node_Str"",expectedFile.exists(),filteredFile.exists());
      if (ArchiveUtils.isArchiveAndIsSupported(expectedFile.getName())) {
        checkArchiveIsAsExpected(filteredFile,expectedFile);
      }
 else {
        Assert.assertEquals(""String_Node_Str"" + filteredFile.getPath() + ""String_Node_Str""+ expectedFile.getPath()+ ""String_Node_Str"",FileUtils.readFileToString(expectedFile,encoding),FileUtils.readFileToString(filteredFile,encoding));
      }
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
catch (    ArchiveException e) {
      throw new RuntimeException(e);
    }
  }
  for (  File actualFile : getFiles(actual)) {
    String completeRelativePath=actual.getPath();
    int index=actualFile.getPath().indexOf(completeRelativePath) + completeRelativePath.length();
    String relativePath=actualFile.getPath().substring(index);
    File expectedFile=new File(expected,relativePath);
    Assert.assertEquals(""String_Node_Str"" + actualFile.getPath() + ""String_Node_Str"",expectedFile.exists(),actualFile.exists());
  }
}","public static void checkIfResultIsAsExpected(File actual,File expected,String encoding){
  if (!actual.isDirectory()) {
    throw new IllegalArgumentException(""String_Node_Str"" + actual.getAbsolutePath() + ""String_Node_Str"");
  }
  if (!expected.isDirectory()) {
    throw new IllegalArgumentException(""String_Node_Str"" + expected.getAbsolutePath() + ""String_Node_Str"");
  }
  for (  File expectedFile : getFiles(expected)) {
    String completeRelativePath=expected.getPath();
    int index=expectedFile.getPath().indexOf(completeRelativePath) + completeRelativePath.length();
    String relativePath=expectedFile.getPath().substring(index);
    File filteredFile=new File(actual,relativePath);
    try {
      Assert.assertEquals(""String_Node_Str"" + expectedFile.getPath() + ""String_Node_Str"",expectedFile.exists(),filteredFile.exists());
      if (ArchiveUtils.isArchiveAndIsSupported(expectedFile.getName())) {
        checkArchiveIsAsExpected(filteredFile,expectedFile);
      }
 else {
        Assert.assertEquals(""String_Node_Str"" + filteredFile.getPath() + ""String_Node_Str""+ expectedFile.getPath()+ ""String_Node_Str"",FileUtils.readFileToString(expectedFile,encoding),FileUtils.readFileToString(filteredFile,encoding));
      }
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
catch (    ArchiveException e) {
      throw new RuntimeException(e);
    }
  }
  for (  File actualFile : getFiles(actual)) {
    String completeRelativePath=actual.getPath();
    int index=actualFile.getPath().indexOf(completeRelativePath) + completeRelativePath.length();
    String relativePath=actualFile.getPath().substring(index);
    File expectedFile=new File(expected,relativePath);
    Assert.assertEquals(""String_Node_Str"" + actualFile.getPath() + ""String_Node_Str"",expectedFile.exists(),actualFile.exists());
  }
}",0.987627165246082
179210,"PFileFinder(PFile pFile){
  matcher=FileSystems.getDefault().getPathMatcher(""String_Node_Str"" + pFile.getRelativePath());
  foundFiles=new ArrayList<String>();
  parents=new ArrayList<Path>();
}","PFileFinder(PFile pFile){
  this.pFile=pFile;
  foundFiles=new ArrayList<Path>();
}",0.5631768953068592
179211,"@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs){
  evaluate(file);
  return CONTINUE;
}","@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs){
  Path relativeFilePath=pFile.getPMarker().getFolder().toPath().relativize(file);
  if (FileUtils.matches(relativeFilePath,pFile.getRelativePath())) {
    foundFiles.add(file);
  }
  return CONTINUE;
}",0.5586034912718204
179212,"public List<String> getFiles(){
  return foundFiles;
}","public List<Path> getFiles(){
  return foundFiles;
}",0.9245283018867924
179213,"public List<PFile> resolve(){
  List<PFile> result=new ArrayList<PFile>();
  if (pFile.isUseRegExResolution()) {
    result.addAll(resolveRegExp());
  }
 else {
    if (pFile.getFile() == null) {
      pFile.setFile(new File(pFile.getPMarker().getFolder(),pFile.getRelativePath()));
    }
    result.add(pFile);
  }
  return result;
}","public List<PFile> resolve(){
  List<PFile> result=new ArrayList<PFile>();
  if (pFile.isUseRegExResolution()) {
    result.addAll(resolveRegEx());
  }
 else {
    if (pFile.getFile() == null) {
      pFile.setFile(new File(pFile.getPMarker().getFolder(),pFile.getRelativePath()));
    }
    result.add(pFile);
  }
  return result;
}",0.9985007496251874
179214,"public void addIfItDoesNotExist(PProperty pProperty){
  try {
    String xpath=pProperty.getXPath();
    Node childNode=(Node)xpathSearch.evaluate(xpath,document,XPathConstants.NODE);
    if (childNode != null) {
      return;
    }
    Node parentNode=(Node)xpathSearch.evaluate(getParentXPath(xpath),document,XPathConstants.NODE);
    Attr nameAttr=document.createAttribute(""String_Node_Str"");
    nameAttr.setValue(pProperty.getName());
    Element newChild=document.createElement(""String_Node_Str"");
    newChild.setAttributeNode(nameAttr);
    parentNode.appendChild(newChild);
  }
 catch (  Exception e) {
    logger.debug(e);
    throw new DefectRuntimeException(""String_Node_Str"" + pProperty.getXPath() + ""String_Node_Str"");
  }
}","public void addIfItDoesNotExist(PProperty pProperty){
  try {
    String xpath=pProperty.getXPath();
    Node childNode=(Node)xpathSearch.evaluate(xpath,document,XPathConstants.NODE);
    if (childNode != null) {
      return;
    }
    Node parentNode=getNode(pProperty.getPFile());
    Attr nameAttr=document.createAttribute(""String_Node_Str"");
    nameAttr.setValue(pProperty.getName());
    Element newChild=document.createElement(""String_Node_Str"");
    newChild.setAttributeNode(nameAttr);
    parentNode.appendChild(newChild);
  }
 catch (  Exception e) {
    logger.debug(e);
    throw new DefectRuntimeException(""String_Node_Str"" + pProperty.getXPath() + ""String_Node_Str"");
  }
}",0.9264190609670636
179215,"private String getParentXPath(String xpath){
  if (StringUtils.isEmpty(xpath) || xpath.lastIndexOf(SLASH) <= 0) {
    return null;
  }
  return xpath.substring(0,xpath.lastIndexOf(SLASH));
}","private String getParentXPath(String xpath){
  return xpath + ""String_Node_Str"";
}",0.5147058823529411
179216,"private void adjustPMarkerFile(PMarker pMarker){
  XMLUtils xmlUtils=new XMLUtils(pMarker);
  for (  PProperty pProperty : entityManager.getPPropertiesFrom(pMarker)) {
    if (pProperty.isSuccessfullyProcessed()) {
      xmlUtils.deleteExistingElement(pProperty.getXPath());
    }
 else {
      xmlUtils.addIfItDoesNotExist(pProperty);
    }
    addAllReferences(xmlUtils,pProperty);
  }
  xmlUtils.removeEntriesWithoutChilds();
  xmlUtils.writeDocument();
}","private void adjustPMarkerFile(PMarker pMarker){
  XMLUtils xmlUtils=new XMLUtils(pMarker);
  for (  PProperty pProperty : entityManager.getPPropertiesFrom(pMarker)) {
    if (pProperty.isSuccessfullyProcessed()) {
      removeEntry(xmlUtils,pProperty);
    }
 else {
      xmlUtils.addIfItDoesNotExist(pProperty);
    }
    addAllReferences(xmlUtils,pProperty);
  }
  xmlUtils.removeEntriesWithoutChilds();
  xmlUtils.writeDocument();
}",0.9139664804469274
179217,"@Test public void Bug2(){
  Logger logger=LogManager.getLogger();
  LoggingUtils.setLogLevel(logger,Level.INFO);
  File testResourceFolder=new File(""String_Node_Str"");
  File targetResourceFolder=new File(""String_Node_Str"");
  LinkedHashSet<Defect> defects=createPrepareAndExecuteValidator(testResourceFolder,targetResourceFolder);
  Assert.assertEquals(""String_Node_Str"",0,defects.size());
}","@Test public void Bug2(){
  File testResourceFolder=new File(""String_Node_Str"");
  File targetResourceFolder=new File(""String_Node_Str"");
  LinkedHashSet<Defect> defects=createPrepareAndExecuteValidator(testResourceFolder,targetResourceFolder);
  Assert.assertEquals(""String_Node_Str"",0,defects.size());
}",0.8751793400286944
179218,"@Test public void Bug1(){
  Logger logger=LogManager.getLogger();
  LoggingUtils.setLogLevel(logger,Level.INFO);
  File testResourceFolder=new File(""String_Node_Str"");
  File targetResourceFolder=new File(""String_Node_Str"");
  LinkedHashSet<Defect> defects=createPrepareAndExecuteValidator(testResourceFolder,targetResourceFolder);
  Assert.assertEquals(""String_Node_Str"",0,defects.size());
}","@Test public void Bug1(){
  File testResourceFolder=new File(""String_Node_Str"");
  File targetResourceFolder=new File(""String_Node_Str"");
  LinkedHashSet<Defect> defects=createPrepareAndExecuteValidator(testResourceFolder,targetResourceFolder);
  Assert.assertEquals(""String_Node_Str"",0,defects.size());
}",0.8751793400286944
179219,"private LinkedHashSet<Defect> createPrepareAndExecuteValidator(File testResourceFolder,File targetResourceFolder){
  TestUtil.removeOldTestResourcesAndCopyAgain(testResourceFolder,targetResourceFolder);
  File packagePath=new File(targetResourceFolder,""String_Node_Str"");
  HashMapPropertyResolver hpr=new HashMapPropertyResolver();
  PropertyResolveManager prm=getPropertyResolveManager(hpr);
  EntityManager entityManager=new EntityManager(packagePath);
  LinkedHashSet<Defect> defects=entityManager.initialize();
  Validator validator=new Validator(prm);
  validator.setPackagePath(packagePath);
  validator.enableMarkerFileChecks();
  validator.enablePropertyResolveChecks();
  defects.addAll(validator.validateInternal(entityManager));
  return defects;
}","private LinkedHashSet<Defect> createPrepareAndExecuteValidator(File testResourceFolder,File targetResourceFolder){
  File packagePath=new File(targetResourceFolder,""String_Node_Str"");
  TestUtil.removeOldTestResourcesAndCopyAgain(testResourceFolder,targetResourceFolder);
  PropertyResolveManager propertyResolveManager=createPropertyResolveManager();
  EntityManager entityManager=new EntityManager(packagePath);
  LinkedHashSet<Defect> defects=entityManager.initialize();
  defects.addAll(createValidator(propertyResolveManager,packagePath).validateInternal(entityManager));
  defects.addAll(createReplacer(propertyResolveManager,packagePath).doReplacement(entityManager));
  return defects;
}",0.5030927835051546
179220,"private List<String> getNotReplacedProperties(String fileContent,String beginToken,String endToken){
  List<String> result=new ArrayList<String>();
  String searchPattern=Pattern.quote(beginToken) + ""String_Node_Str"" + Pattern.quote(endToken)+ ""String_Node_Str""+ Pattern.quote(endToken);
  Pattern pattern=Pattern.compile(searchPattern);
  Matcher matcher=pattern.matcher(fileContent);
  while (matcher.find()) {
    String propertyId=matcher.group(1);
    result.add(propertyId);
  }
  return result;
}","private List<String> getNotReplacedProperties(String fileContent,String beginToken,String endToken){
  List<String> result=new ArrayList<String>();
  Pattern pattern=RegExpUtils.getDefaultPattern(beginToken,endToken);
  Matcher matcher=pattern.matcher(fileContent);
  while (matcher.find()) {
    String propertyId=matcher.group(1);
    result.add(propertyId);
  }
  return result;
}",0.7945823927765236
179221,"private Set<String> getAllPlaceHolders(String fileContent,String encoding,String beginToken,String endToken){
  String regexp=""String_Node_Str"" + beginToken + ""String_Node_Str"";
  Matcher matcher=getPlaceHolderMatcher(fileContent,regexp,encoding,beginToken,endToken);
  Set<String> result=new TreeSet<String>();
  while (matcher.find()) {
    String placeHolder=matcher.group(1);
    result.add(placeHolder);
  }
  return result;
}","private Set<String> getAllPlaceHolders(String fileContent,String encoding,String beginToken,String endToken){
  Pattern pattern=RegExpUtils.getDefaultPattern(beginToken,endToken);
  Matcher matcher=getPlaceHolderMatcher(fileContent,pattern,encoding,beginToken,endToken);
  Set<String> result=new TreeSet<String>();
  while (matcher.find()) {
    String placeHolder=matcher.group(1);
    result.add(placeHolder);
  }
  return result;
}",0.7630057803468208
179222,"private boolean doesPropertyExistInFile(String fileContent,PProperty pProperty,String encoding,String beginToken,String endToken){
  return getPlaceHolderMatcher(fileContent,Pattern.quote(pProperty.getName()),encoding,beginToken,endToken).find();
}","private boolean doesPropertyExistInFile(String fileContent,PProperty pProperty,String encoding,String beginToken,String endToken){
  Pattern pattern=RegExpUtils.getPatternFor(beginToken,endToken,Pattern.quote(pProperty.getName()));
  return getPlaceHolderMatcher(fileContent,pattern,encoding,beginToken,endToken).find();
}",0.7298245614035088
179223,"private Matcher getPlaceHolderMatcher(String fileContent,String regexp,String encoding,String beginToken,String endToken){
  String searchPattern=Pattern.quote(beginToken) + regexp + Pattern.quote(endToken);
  Pattern pattern=Pattern.compile(searchPattern);
  Matcher matcher=pattern.matcher(fileContent);
  return matcher;
}","private Matcher getPlaceHolderMatcher(String fileContent,Pattern pattern,String encoding,String beginToken,String endToken){
  Matcher matcher=pattern.matcher(fileContent);
  return matcher;
}",0.7040618955512572
179224,"public PropertyDuplicateDefinedInPropertyFileDefect(String property,PropertyResolver propertyResolver){
  super();
}","public PropertyDuplicateDefinedInPropertyFileDefect(String property,PropertyResolver propertyResolver){
  super();
  this.property=property;
  this.propertyResolver=propertyResolver;
}",0.7733333333333333
179225,"/** 
 * Return the annotations that are present on this field.
 * @return an array of all the annotations set on the field
 * @since 1.4
 */
public Collection<Annotation> getAnnotations(){
  if (annotations == null) {
    Pair<Class<?>,String> key=new Pair<Class<?>,String>(declaringClazz,name);
    annotations=ANNOTATION_CACHE.getElement(key);
    if (annotations == null) {
      annotations=Collections.unmodifiableCollection(Arrays.asList(field.getAnnotations()));
      ANNOTATION_CACHE.addElement(key,annotations);
    }
  }
  return annotations;
}","/** 
 * Return the annotations that are present on this field.
 * @return an array of all the annotations set on the field
 * @since 1.4
 */
public Collection<Annotation> getAnnotations(){
  if (annotations == null) {
    Pair<Class<?>,String> key=new Pair<Class<?>,String>(declaringClazz,name);
    Collection<Annotation> cachedValue=ANNOTATION_CACHE.getElement(key);
    if (cachedValue == null) {
      cachedValue=Collections.unmodifiableCollection(Arrays.asList(field.getAnnotations()));
      ANNOTATION_CACHE.addElement(key,cachedValue);
    }
    annotations=cachedValue;
  }
  return annotations;
}",0.8795180722891566
179226,"JsonElement serialize(Object src,Type typeOfSrc,boolean preserveType){
  if (src == null) {
    return JsonNull.createJsonNull();
  }
  JsonSerializationVisitor visitor=new JsonSerializationVisitor(objectNavigator,fieldNamingPolicy,serializeNulls,serializers,this,ancestors);
  objectNavigator.accept(new ObjectTypePair(src,typeOfSrc,preserveType),visitor);
  return visitor.getJsonElement();
}","JsonElement serialize(Object src,Type typeOfSrc,boolean preserveType){
  if (src == null) {
    return JsonNull.createJsonNull();
  }
  JsonSerializationVisitor visitor=new JsonSerializationVisitor(objectNavigator,fieldNamingPolicy,serializeNulls,serializers,this,ancestors);
  ObjectTypePair objTypePair=new ObjectTypePair(src,typeOfSrc,preserveType);
  objectNavigator.accept(objTypePair,visitor);
  return visitor.getJsonElement();
}",0.8939759036144578
179227,"/** 
 * Navigate all the fields of the specified object. If a field is null, it does not get visited.
 * @param objTypePair The object,type (fully genericized) being navigated
 */
public void accept(ObjectTypePair objTypePair,Visitor visitor){
  if (exclusionStrategy.shouldSkipClass($Gson$Types.getRawType(objTypePair.type))) {
    return;
  }
  boolean visitedWithCustomHandler=visitor.visitUsingCustomHandler(objTypePair);
  if (!visitedWithCustomHandler) {
    Object obj=objTypePair.getObject();
    Object objectToVisit=(obj == null) ? visitor.getTarget() : obj;
    if (objectToVisit == null) {
      return;
    }
    objTypePair.setObject(objectToVisit);
    visitor.start(objTypePair);
    try {
      if ($Gson$Types.isArray(objTypePair.type)) {
        visitor.visitArray(objectToVisit,objTypePair.type);
      }
 else       if (objTypePair.type == Object.class && isPrimitiveOrString(objectToVisit)) {
        visitor.visitPrimitive(objectToVisit);
        visitor.getTarget();
      }
 else {
        visitor.startVisitingObject(objectToVisit);
        reflectingFieldNavigator.visitFieldsReflectively(objTypePair,visitor);
      }
    }
  finally {
      visitor.end(objTypePair);
    }
  }
}","/** 
 * Navigate all the fields of the specified object. If a field is null, it does not get visited.
 * @param objTypePair The object,type (fully genericized) being navigated
 */
public void accept(ObjectTypePair objTypePair,Visitor visitor){
  if (exclusionStrategy.shouldSkipClass($Gson$Types.getRawType(objTypePair.type))) {
    return;
  }
  boolean visitedWithCustomHandler=visitor.visitUsingCustomHandler(objTypePair);
  if (!visitedWithCustomHandler) {
    objTypePair=objTypePair.toMoreSpecificType();
    Object obj=objTypePair.getObject();
    Object objectToVisit=(obj == null) ? visitor.getTarget() : obj;
    if (objectToVisit == null) {
      return;
    }
    objTypePair.setObject(objectToVisit);
    visitor.start(objTypePair);
    try {
      if ($Gson$Types.isArray(objTypePair.getMoreSpecificType())) {
        visitor.visitArray(objectToVisit,objTypePair.type);
      }
 else       if (objTypePair.type == Object.class && isPrimitiveOrString(objectToVisit)) {
        visitor.visitPrimitive(objectToVisit);
        visitor.getTarget();
      }
 else {
        visitor.startVisitingObject(objectToVisit);
        reflectingFieldNavigator.visitFieldsReflectively(objTypePair,visitor);
      }
    }
  finally {
      visitor.end(objTypePair);
    }
  }
}",0.969770253929867
179228,"ObjectTypePair toMoreSpecificType(){
  if (preserveType || obj == null) {
    return this;
  }
  Type actualType=getActualTypeIfMoreSpecific(type,obj.getClass());
  if (actualType == type) {
    return this;
  }
  return new ObjectTypePair(obj,actualType,preserveType);
}","ObjectTypePair toMoreSpecificType(){
  if (preserveType || obj == null) {
    return this;
  }
  Type actualType=getActualTypeIfMoreSpecific(type,obj.getClass());
  if (actualType == type) {
    return this;
  }
  return new ObjectTypePair(obj,actualType,true);
}",0.9737827715355806
179229,"/** 
 * Regression test for Issue 205
 */
public void testMixingTypesInObjectArraySerialization(){
  Object[] array=new Object[]{1,2,new Object[]{""String_Node_Str"",""String_Node_Str""}};
  assertEquals(""String_Node_Str"",gson.toJson(array));
}","/** 
 * Regression test for Issue 205
 */
public void testMixingTypesInObjectArraySerialization(){
  Object[] array=new Object[]{1,2,new Object[]{""String_Node_Str"",""String_Node_Str"",3}};
  assertEquals(""String_Node_Str"",gson.toJson(array));
}",0.995850622406639
179230,"/** 
 * Enabling this feature will only change the serialized form if the map key is a complex type (i.e. non-primitive) in its <strong>serialized</strong> JSON form. The default implementation of map serialization uses   {@code toString()}on the key; however, when this is called then one of the following cases apply: <h3>Maps as JSON objects</h3> For this case, assume that a type adapter is registered to serialize and deserialize some   {@code Point} class, which contains an x and y coordinate,to/from the JSON Primitive string value  {@code ""(x,y)""}. The Java map would then be serialized as a   {@link JsonObject}. <p>Below is an example: <pre>    {@code Gson gson = new GsonBuilder() .register(Point.class, new MyPointTypeAdapter()) .enableComplexMapKeySerialization() .create(); Map<Point, String> original = new LinkedHashMap<Point, String>(); original.put(new Point(5, 6), ""a""); original.put(new Point(8, 8), ""b""); System.out.println(gson.toJson(original, type));}</pre> The above code prints this JSON object:<pre>    {@code}{ ""(5,6)"": ""a"", ""(8,8)"": ""b"" } }</pre> <h3>Maps as JSON arrays</h3> For this case, assume that a type adapter was NOT registered for some  {@code Point} class, but rather the default Gson serialization is applied.In this case, some  {@code new Point(2,3)} would serialize as {@code}{""x"":2,""y"":5}}. <p>Given the assumption above, a   {@code Map<Point, String>} will beserialize as an array of arrays (can be viewed as an entry set of pairs). <p>Below is an example of serializing complex types as JSON arrays: <pre>  {@code Gson gson = new GsonBuilder() .enableComplexMapKeySerialization() .create(); Map<Point, String> original = new LinkedHashMap<Point, String>(); original.put(new Point(5, 6), ""a""); original.put(new Point(8, 8), ""b""); System.out.println(gson.toJson(original, type));}The JSON output would look as follows: <pre>     {@code [ [}{ ""x"": 5, ""y"": 6 }, ""a"", ], [ { ""x"": 8, ""y"": 8 }, ""b"" ] ] }</pre>
 * @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
 * @since 1.7
 */
public GsonBuilder enableComplexMapKeySerialization(){
  registerTypeHierarchyAdapter(Map.class,COMPLEX_KEY_MAP_TYPE_ADAPTER);
  return this;
}","/** 
 * Enabling this feature will only change the serialized form if the map key is a complex type (i.e. non-primitive) in its <strong>serialized</strong> JSON form. The default implementation of map serialization uses   {@code toString()}on the key; however, when this is called then one of the following cases apply: <h3>Maps as JSON objects</h3> For this case, assume that a type adapter is registered to serialize and deserialize some   {@code Point} class, which contains an x and y coordinate,to/from the JSON Primitive string value  {@code ""(x,y)""}. The Java map would then be serialized as a   {@link JsonObject}. <p>Below is an example: <pre>    {@code Gson gson = new GsonBuilder() .register(Point.class, new MyPointTypeAdapter()) .enableComplexMapKeySerialization() .create(); Map<Point, String> original = new LinkedHashMap<Point, String>(); original.put(new Point(5, 6), ""a""); original.put(new Point(8, 8), ""b""); System.out.println(gson.toJson(original, type));}</pre> The above code prints this JSON object:<pre>    {@code}{ ""(5,6)"": ""a"", ""(8,8)"": ""b"" } }</pre> <h3>Maps as JSON arrays</h3> For this case, assume that a type adapter was NOT registered for some  {@code Point} class, but rather the default Gson serialization is applied.In this case, some  {@code new Point(2,3)} would serialize as {@code}{""x"":2,""y"":5}}. <p>Given the assumption above, a   {@code Map<Point, String>} will beserialize as an array of arrays (can be viewed as an entry set of pairs). <p>Below is an example of serializing complex types as JSON arrays: <pre>  {@code Gson gson = new GsonBuilder() .enableComplexMapKeySerialization() .create(); Map<Point, String> original = new LinkedHashMap<Point, String>(); original.put(new Point(5, 6), ""a""); original.put(new Point(8, 8), ""b""); System.out.println(gson.toJson(original, type));}The JSON output would look as follows: <pre>     {@code [ [}{ ""x"": 5, ""y"": 6 }, ""a"" ], [ { ""x"": 8, ""y"": 8 }, ""b"" ] ] }</pre>
 * @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
 * @since 1.7
 */
public GsonBuilder enableComplexMapKeySerialization(){
  registerTypeHierarchyAdapter(Map.class,COMPLEX_KEY_MAP_TYPE_ADAPTER);
  return this;
}",0.9997729852440408
179231,"private static ParameterizedTypeHandlerMap<JsonSerializer<?>> createDefaultSerializers(){
  ParameterizedTypeHandlerMap<JsonSerializer<?>> map=new ParameterizedTypeHandlerMap<JsonSerializer<?>>();
  map.register(URL.class,URL_TYPE_ADAPTER);
  map.register(URI.class,URI_TYPE_ADAPTER);
  map.register(UUID.class,UUUID_TYPE_ADAPTER);
  map.register(Locale.class,LOCALE_TYPE_ADAPTER);
  map.register(Date.class,DATE_TYPE_ADAPTER);
  map.register(java.sql.Date.class,JAVA_SQL_DATE_TYPE_ADAPTER);
  map.register(Timestamp.class,DATE_TYPE_ADAPTER);
  map.register(Time.class,TIME_TYPE_ADAPTER);
  map.register(Calendar.class,GREGORIAN_CALENDAR_TYPE_ADAPTER);
  map.register(GregorianCalendar.class,GREGORIAN_CALENDAR_TYPE_ADAPTER);
  map.register(BigDecimal.class,BIG_DECIMAL_TYPE_ADAPTER);
  map.register(BigInteger.class,BIG_INTEGER_TYPE_ADAPTER);
  map.register(Boolean.class,BOOLEAN_TYPE_ADAPTER);
  map.register(boolean.class,BOOLEAN_TYPE_ADAPTER);
  map.register(Byte.class,BYTE_TYPE_ADAPTER);
  map.register(byte.class,BYTE_TYPE_ADAPTER);
  map.register(Character.class,CHARACTER_TYPE_ADAPTER);
  map.register(char.class,CHARACTER_TYPE_ADAPTER);
  map.register(Integer.class,INTEGER_TYPE_ADAPTER);
  map.register(int.class,INTEGER_TYPE_ADAPTER);
  map.register(Number.class,NUMBER_TYPE_ADAPTER);
  map.register(Short.class,SHORT_TYPE_ADAPTER);
  map.register(short.class,SHORT_TYPE_ADAPTER);
  map.register(String.class,STRING_TYPE_ADAPTER);
  map.makeUnmodifiable();
  return map;
}","private static ParameterizedTypeHandlerMap<JsonSerializer<?>> createDefaultSerializers(){
  ParameterizedTypeHandlerMap<JsonSerializer<?>> map=new ParameterizedTypeHandlerMap<JsonSerializer<?>>();
  map.register(URL.class,URL_TYPE_ADAPTER);
  map.register(URI.class,URI_TYPE_ADAPTER);
  map.register(UUID.class,UUUID_TYPE_ADAPTER);
  map.register(Locale.class,LOCALE_TYPE_ADAPTER);
  map.register(Date.class,DATE_TYPE_ADAPTER);
  map.register(java.sql.Date.class,JAVA_SQL_DATE_TYPE_ADAPTER);
  map.register(Timestamp.class,DATE_TYPE_ADAPTER);
  map.register(Time.class,TIME_TYPE_ADAPTER);
  map.register(Calendar.class,GREGORIAN_CALENDAR_TYPE_ADAPTER);
  map.register(GregorianCalendar.class,GREGORIAN_CALENDAR_TYPE_ADAPTER);
  map.register(BigDecimal.class,BIG_DECIMAL_TYPE_ADAPTER);
  map.register(BigInteger.class,BIG_INTEGER_TYPE_ADAPTER);
  map.register(Boolean.class,BOOLEAN_TYPE_ADAPTER);
  map.register(boolean.class,BOOLEAN_TYPE_ADAPTER);
  map.register(Byte.class,BYTE_TYPE_ADAPTER);
  map.register(byte.class,BYTE_TYPE_ADAPTER);
  map.register(Character.class,CHARACTER_TYPE_ADAPTER);
  map.register(char.class,CHARACTER_TYPE_ADAPTER);
  map.register(Integer.class,INTEGER_TYPE_ADAPTER);
  map.register(int.class,INTEGER_TYPE_ADAPTER);
  map.register(Number.class,NUMBER_TYPE_ADAPTER);
  map.register(Short.class,SHORT_TYPE_ADAPTER);
  map.register(short.class,SHORT_TYPE_ADAPTER);
  map.register(String.class,STRING_TYPE_ADAPTER);
  map.register(StringBuilder.class,STRING_BUILDER_TYPE_ADAPTER);
  map.register(StringBuffer.class,STRING_BUFFER_TYPE_ADAPTER);
  map.makeUnmodifiable();
  return map;
}",0.958656330749354
179232,"private static ParameterizedTypeHandlerMap<JsonDeserializer<?>> createDefaultDeserializers(){
  ParameterizedTypeHandlerMap<JsonDeserializer<?>> map=new ParameterizedTypeHandlerMap<JsonDeserializer<?>>();
  map.register(URL.class,wrapDeserializer(URL_TYPE_ADAPTER));
  map.register(URI.class,wrapDeserializer(URI_TYPE_ADAPTER));
  map.register(UUID.class,wrapDeserializer(UUUID_TYPE_ADAPTER));
  map.register(Locale.class,wrapDeserializer(LOCALE_TYPE_ADAPTER));
  map.register(Date.class,wrapDeserializer(DATE_TYPE_ADAPTER));
  map.register(java.sql.Date.class,wrapDeserializer(JAVA_SQL_DATE_TYPE_ADAPTER));
  map.register(Timestamp.class,wrapDeserializer(TIMESTAMP_DESERIALIZER));
  map.register(Time.class,wrapDeserializer(TIME_TYPE_ADAPTER));
  map.register(Calendar.class,GREGORIAN_CALENDAR_TYPE_ADAPTER);
  map.register(GregorianCalendar.class,GREGORIAN_CALENDAR_TYPE_ADAPTER);
  map.register(BigDecimal.class,wrapDeserializer(BIG_DECIMAL_TYPE_ADAPTER));
  map.register(BigInteger.class,wrapDeserializer(BIG_INTEGER_TYPE_ADAPTER));
  map.register(Boolean.class,wrapDeserializer(BOOLEAN_TYPE_ADAPTER));
  map.register(boolean.class,wrapDeserializer(BOOLEAN_TYPE_ADAPTER));
  map.register(Byte.class,wrapDeserializer(BYTE_TYPE_ADAPTER));
  map.register(byte.class,wrapDeserializer(BYTE_TYPE_ADAPTER));
  map.register(Character.class,wrapDeserializer(CHARACTER_TYPE_ADAPTER));
  map.register(char.class,wrapDeserializer(CHARACTER_TYPE_ADAPTER));
  map.register(Double.class,wrapDeserializer(DOUBLE_TYPE_ADAPTER));
  map.register(double.class,wrapDeserializer(DOUBLE_TYPE_ADAPTER));
  map.register(Float.class,wrapDeserializer(FLOAT_TYPE_ADAPTER));
  map.register(float.class,wrapDeserializer(FLOAT_TYPE_ADAPTER));
  map.register(Integer.class,wrapDeserializer(INTEGER_TYPE_ADAPTER));
  map.register(int.class,wrapDeserializer(INTEGER_TYPE_ADAPTER));
  map.register(Long.class,wrapDeserializer(LONG_DESERIALIZER));
  map.register(long.class,wrapDeserializer(LONG_DESERIALIZER));
  map.register(Number.class,wrapDeserializer(NUMBER_TYPE_ADAPTER));
  map.register(Short.class,wrapDeserializer(SHORT_TYPE_ADAPTER));
  map.register(short.class,wrapDeserializer(SHORT_TYPE_ADAPTER));
  map.register(String.class,wrapDeserializer(STRING_TYPE_ADAPTER));
  map.makeUnmodifiable();
  return map;
}","private static ParameterizedTypeHandlerMap<JsonDeserializer<?>> createDefaultDeserializers(){
  ParameterizedTypeHandlerMap<JsonDeserializer<?>> map=new ParameterizedTypeHandlerMap<JsonDeserializer<?>>();
  map.register(URL.class,wrapDeserializer(URL_TYPE_ADAPTER));
  map.register(URI.class,wrapDeserializer(URI_TYPE_ADAPTER));
  map.register(UUID.class,wrapDeserializer(UUUID_TYPE_ADAPTER));
  map.register(Locale.class,wrapDeserializer(LOCALE_TYPE_ADAPTER));
  map.register(Date.class,wrapDeserializer(DATE_TYPE_ADAPTER));
  map.register(java.sql.Date.class,wrapDeserializer(JAVA_SQL_DATE_TYPE_ADAPTER));
  map.register(Timestamp.class,wrapDeserializer(TIMESTAMP_DESERIALIZER));
  map.register(Time.class,wrapDeserializer(TIME_TYPE_ADAPTER));
  map.register(Calendar.class,GREGORIAN_CALENDAR_TYPE_ADAPTER);
  map.register(GregorianCalendar.class,GREGORIAN_CALENDAR_TYPE_ADAPTER);
  map.register(BigDecimal.class,wrapDeserializer(BIG_DECIMAL_TYPE_ADAPTER));
  map.register(BigInteger.class,wrapDeserializer(BIG_INTEGER_TYPE_ADAPTER));
  map.register(Boolean.class,wrapDeserializer(BOOLEAN_TYPE_ADAPTER));
  map.register(boolean.class,wrapDeserializer(BOOLEAN_TYPE_ADAPTER));
  map.register(Byte.class,wrapDeserializer(BYTE_TYPE_ADAPTER));
  map.register(byte.class,wrapDeserializer(BYTE_TYPE_ADAPTER));
  map.register(Character.class,wrapDeserializer(CHARACTER_TYPE_ADAPTER));
  map.register(char.class,wrapDeserializer(CHARACTER_TYPE_ADAPTER));
  map.register(Double.class,wrapDeserializer(DOUBLE_TYPE_ADAPTER));
  map.register(double.class,wrapDeserializer(DOUBLE_TYPE_ADAPTER));
  map.register(Float.class,wrapDeserializer(FLOAT_TYPE_ADAPTER));
  map.register(float.class,wrapDeserializer(FLOAT_TYPE_ADAPTER));
  map.register(Integer.class,wrapDeserializer(INTEGER_TYPE_ADAPTER));
  map.register(int.class,wrapDeserializer(INTEGER_TYPE_ADAPTER));
  map.register(Long.class,wrapDeserializer(LONG_DESERIALIZER));
  map.register(long.class,wrapDeserializer(LONG_DESERIALIZER));
  map.register(Number.class,wrapDeserializer(NUMBER_TYPE_ADAPTER));
  map.register(Short.class,wrapDeserializer(SHORT_TYPE_ADAPTER));
  map.register(short.class,wrapDeserializer(SHORT_TYPE_ADAPTER));
  map.register(String.class,wrapDeserializer(STRING_TYPE_ADAPTER));
  map.register(StringBuilder.class,wrapDeserializer(STRING_BUILDER_TYPE_ADAPTER));
  map.register(StringBuffer.class,wrapDeserializer(STRING_BUFFER_TYPE_ADAPTER));
  map.makeUnmodifiable();
  return map;
}",0.9654154365246732
179233,"public synchronized ParameterizedTypeHandlerMap<T> copyOf(){
  ParameterizedTypeHandlerMap<T> copy=new ParameterizedTypeHandlerMap<T>();
  for (  Map.Entry<Type,T> entry : map.entrySet()) {
    copy.register(entry.getKey(),entry.getValue());
  }
  for (  Pair<Class<?>,T> entry : typeHierarchyList) {
    copy.registerForTypeHierarchy(entry);
  }
  return copy;
}","public synchronized ParameterizedTypeHandlerMap<T> copyOf(){
  ParameterizedTypeHandlerMap<T> copy=new ParameterizedTypeHandlerMap<T>();
  copy.map.putAll(map);
  copy.typeHierarchyList.addAll(typeHierarchyList);
  return copy;
}",0.4864864864864865
179234,"public void disabled_testEnumSubclassWithRegisteredTypeAdapter(){
  gson=new GsonBuilder().registerTypeHierarchyAdapter(Roshambo.class,new MyEnumTypeAdapter()).create();
  assertRoshambo();
}","public void disabled_testEnumSubclassWithRegisteredTypeAdapter(){
  gson=new GsonBuilder().create();
  assertRoshambo();
}",0.7795527156549521
179235,"private static Type getActualType(Type typeToEvaluate,Type parentType,Class<?> rawParentClass){
  if (typeToEvaluate instanceof Class<?>) {
    return typeToEvaluate;
  }
 else   if (typeToEvaluate instanceof ParameterizedType) {
    ParameterizedType castedType=(ParameterizedType)typeToEvaluate;
    Type owner=castedType.getOwnerType();
    Type[] actualTypeParameters=extractRealTypes(castedType.getActualTypeArguments(),parentType,rawParentClass);
    Type rawType=castedType.getRawType();
    return new ParameterizedTypeImpl(rawType,actualTypeParameters,owner);
  }
 else   if (typeToEvaluate instanceof GenericArrayType) {
    GenericArrayType castedType=(GenericArrayType)typeToEvaluate;
    Type componentType=castedType.getGenericComponentType();
    Type actualType=getActualType(componentType,parentType,rawParentClass);
    if (componentType.equals(actualType)) {
      return castedType;
    }
    return actualType instanceof Class<?> ? TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType)) : new GenericArrayTypeImpl(actualType);
  }
 else   if (typeToEvaluate instanceof TypeVariable<?>) {
    if (parentType instanceof ParameterizedType) {
      TypeVariable<?> fieldTypeVariable=(TypeVariable<?>)typeToEvaluate;
      TypeVariable<?>[] classTypeVariables=rawParentClass.getTypeParameters();
      ParameterizedType objParameterizedType=(ParameterizedType)parentType;
      int indexOfActualTypeArgument=getIndex(classTypeVariables,fieldTypeVariable);
      Type[] actualTypeArguments=objParameterizedType.getActualTypeArguments();
      return actualTypeArguments[indexOfActualTypeArgument];
    }
    throw new UnsupportedOperationException(""String_Node_Str"" + parentType + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else   if (typeToEvaluate instanceof WildcardType) {
    WildcardType castedType=(WildcardType)typeToEvaluate;
    return getActualType(castedType.getUpperBounds()[0],parentType,rawParentClass);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + typeToEvaluate + ""String_Node_Str""+ ""String_Node_Str"");
  }
}","private static Type getActualType(Type typeToEvaluate,Type parentType,Class<?> rawParentClass){
  if (typeToEvaluate instanceof Class<?>) {
    return typeToEvaluate;
  }
 else   if (typeToEvaluate instanceof ParameterizedType) {
    ParameterizedType castedType=(ParameterizedType)typeToEvaluate;
    Type owner=castedType.getOwnerType();
    Type[] actualTypeParameters=extractRealTypes(castedType.getActualTypeArguments(),parentType,rawParentClass);
    Type rawType=castedType.getRawType();
    return new ParameterizedTypeImpl(rawType,actualTypeParameters,owner);
  }
 else   if (typeToEvaluate instanceof GenericArrayType) {
    GenericArrayType castedType=(GenericArrayType)typeToEvaluate;
    Type componentType=castedType.getGenericComponentType();
    Type actualType=getActualType(componentType,parentType,rawParentClass);
    if (componentType.equals(actualType)) {
      return castedType;
    }
    return actualType instanceof Class<?> ? TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType)) : new GenericArrayTypeImpl(actualType);
  }
 else   if (typeToEvaluate instanceof TypeVariable<?>) {
    if (parentType instanceof ParameterizedType) {
      TypeVariable<?> fieldTypeVariable=(TypeVariable<?>)typeToEvaluate;
      TypeVariable<?>[] classTypeVariables=rawParentClass.getTypeParameters();
      ParameterizedType objParameterizedType=(ParameterizedType)parentType;
      int indexOfActualTypeArgument=getIndex(classTypeVariables,fieldTypeVariable);
      Type[] actualTypeArguments=objParameterizedType.getActualTypeArguments();
      return actualTypeArguments[indexOfActualTypeArgument];
    }
 else     if (typeToEvaluate instanceof TypeVariable<?>) {
      Type theSearchedType=null;
      do {
        theSearchedType=extractTypeForHierarchy(parentType,(TypeVariable<?>)typeToEvaluate);
      }
 while ((theSearchedType != null) && (theSearchedType instanceof TypeVariable<?>));
      if (theSearchedType != null) {
        return theSearchedType;
      }
    }
    throw new UnsupportedOperationException(""String_Node_Str"" + parentType + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else   if (typeToEvaluate instanceof WildcardType) {
    WildcardType castedType=(WildcardType)typeToEvaluate;
    return getActualType(castedType.getUpperBounds()[0],parentType,rawParentClass);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + typeToEvaluate + ""String_Node_Str""+ ""String_Node_Str"");
  }
}",0.9177565949900244
179236,"private void string(String value) throws IOException {
  out.write(""String_Node_Str"");
  for (int i=0, length=value.length(); i < length; i++) {
    char c=value.charAt(i);
    if (c == '""' || c == '\\') {
      out.write('\\');
      out.write(c);
    }
 else     if (c <= 0x1F) {
      out.write(String.format(""String_Node_Str"",(int)c));
    }
 else {
      out.write(c);
    }
  }
  out.write(""String_Node_Str"");
}","private void string(String value) throws IOException {
  out.write(""String_Node_Str"");
  for (int i=0, length=value.length(); i < length; i++) {
    char c=value.charAt(i);
switch (c) {
case '""':
case '\\':
      out.write('\\');
    out.write(c);
  break;
case '\t':
out.write(""String_Node_Str"");
break;
case '\b':
out.write(""String_Node_Str"");
break;
case '\n':
out.write(""String_Node_Str"");
break;
case '\r':
out.write(""String_Node_Str"");
break;
case '\f':
out.write(""String_Node_Str"");
break;
default :
if (c <= 0x1F) {
out.write(String.format(""String_Node_Str"",(int)c));
}
 else {
out.write(c);
}
break;
}
}
out.write(""String_Node_Str"");
}",0.4863336475023562
179237,"/** 
 * Inserts any necessary separators and whitespace before a literal value, inline array, or inline object. Also adjusts the stack to expect either a closing bracket or another element.
 * @param root true if the value is a new array or object, the two valuespermitted as top-level elements.
 */
private void beforeValue(boolean root) throws IOException {
switch (peek()) {
case EMPTY_DOCUMENT:
    if (!root) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  replaceTop(JsonScope.NONEMPTY_DOCUMENT);
break;
case EMPTY_ARRAY:
replaceTop(JsonScope.NONEMPTY_ARRAY);
newline();
break;
case NONEMPTY_ARRAY:
out.append(',');
newline();
break;
case DANGLING_NAME:
out.append(separator);
replaceTop(JsonScope.NONEMPTY_OBJECT);
break;
case NONEMPTY_DOCUMENT:
throw new IllegalStateException(""String_Node_Str"");
default :
throw new IllegalStateException(""String_Node_Str"" + stack);
}
}","/** 
 * Inserts any necessary separators and whitespace before a literal value, inline array, or inline object. Also adjusts the stack to expect either a closing bracket or another element.
 * @param root true if the value is a new array or object, the two valuespermitted as top-level elements.
 */
private void beforeValue(boolean root) throws IOException {
switch (peek()) {
case EMPTY_DOCUMENT:
    if (!lenient && !root) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  replaceTop(JsonScope.NONEMPTY_DOCUMENT);
break;
case EMPTY_ARRAY:
replaceTop(JsonScope.NONEMPTY_ARRAY);
newline();
break;
case NONEMPTY_ARRAY:
out.append(',');
newline();
break;
case DANGLING_NAME:
out.append(separator);
replaceTop(JsonScope.NONEMPTY_OBJECT);
break;
case NONEMPTY_DOCUMENT:
throw new IllegalStateException(""String_Node_Str"");
default :
throw new IllegalStateException(""String_Node_Str"" + stack);
}
}",0.9933628318584072
179238,"/** 
 * Encodes   {@code value}.
 * @param value a finite value. May not be {@link Double#isNaN() NaNs} or{@link Double#isInfinite() infinities}.
 * @return this writer.
 */
public JsonWriter value(Number value) throws IOException {
  if (value == null) {
    return nullValue();
  }
  String string=value.toString();
  if (string.equals(""String_Node_Str"") || string.equals(""String_Node_Str"") || string.equals(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"" + value);
  }
  beforeValue(false);
  out.append(string);
  return this;
}","/** 
 * Encodes   {@code value}.
 * @param value a finite value. May not be {@link Double#isNaN() NaNs} or{@link Double#isInfinite() infinities}.
 * @return this writer.
 */
public JsonWriter value(Number value) throws IOException {
  if (value == null) {
    return nullValue();
  }
  String string=value.toString();
  if (!lenient && (string.equals(""String_Node_Str"") || string.equals(""String_Node_Str"") || string.equals(""String_Node_Str""))) {
    throw new IllegalArgumentException(""String_Node_Str"" + value);
  }
  beforeValue(false);
  out.append(string);
  return this;
}",0.987719298245614
179239,"public void testAddingNullOrEmptyPropertyName() throws Exception {
  JsonObject jsonObj=new JsonObject();
  try {
    jsonObj.add(null,JsonNull.createJsonNull());
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    jsonObj.add(""String_Node_Str"",JsonNull.createJsonNull());
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    jsonObj.add(""String_Node_Str"",JsonNull.createJsonNull());
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException expected) {
  }
}","public void testAddingNullOrEmptyPropertyName() throws Exception {
  JsonObject jsonObj=new JsonObject();
  try {
    jsonObj.add(null,JsonNull.createJsonNull());
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException expected) {
  }
  jsonObj.add(""String_Node_Str"",JsonNull.createJsonNull());
  jsonObj.add(""String_Node_Str"",JsonNull.createJsonNull());
}",0.670995670995671
179240,"public void testReadWriteTwoObjects() throws Exception {
  Gson gson=new Gson();
  CharArrayWriter writer=new CharArrayWriter();
  BagOfPrimitives expectedOne=new BagOfPrimitives(1,1,true,""String_Node_Str"");
  writer.write(gson.toJson(expectedOne).toCharArray());
  BagOfPrimitives expectedTwo=new BagOfPrimitives(2,2,false,""String_Node_Str"");
  writer.write(gson.toJson(expectedTwo).toCharArray());
  CharArrayReader reader=new CharArrayReader(writer.toCharArray());
  JsonReader parser=new JsonReader(reader);
  parser.setLenient(true);
  JsonElement element1=GsonReader.parse(parser);
  JsonElement element2=GsonReader.parse(parser);
  BagOfPrimitives actualOne=gson.fromJson(element1,BagOfPrimitives.class);
  assertEquals(""String_Node_Str"",actualOne.stringValue);
  BagOfPrimitives actualTwo=gson.fromJson(element2,BagOfPrimitives.class);
  assertEquals(""String_Node_Str"",actualTwo.stringValue);
}","public void testReadWriteTwoObjects() throws Exception {
  Gson gson=new Gson();
  CharArrayWriter writer=new CharArrayWriter();
  BagOfPrimitives expectedOne=new BagOfPrimitives(1,1,true,""String_Node_Str"");
  writer.write(gson.toJson(expectedOne).toCharArray());
  BagOfPrimitives expectedTwo=new BagOfPrimitives(2,2,false,""String_Node_Str"");
  writer.write(gson.toJson(expectedTwo).toCharArray());
  CharArrayReader reader=new CharArrayReader(writer.toCharArray());
  JsonReader parser=new JsonReader(reader);
  parser.setLenient(true);
  JsonElement element1=Streams.parse(parser);
  JsonElement element2=Streams.parse(parser);
  BagOfPrimitives actualOne=gson.fromJson(element1,BagOfPrimitives.class);
  assertEquals(""String_Node_Str"",actualOne.stringValue);
  BagOfPrimitives actualTwo=gson.fromJson(element2,BagOfPrimitives.class);
  assertEquals(""String_Node_Str"",actualTwo.stringValue);
}",0.9810901001112348
179241,"public void visitObjectMember(JsonObject parent,String memberName,JsonObject member,boolean isFirst) throws IOException {
  if (!isFirst) {
    writer.append(',');
  }
  writer.append('""');
  writer.append(memberName);
  writer.append(""String_Node_Str"");
}","public void visitObjectMember(JsonObject parent,String memberName,JsonObject member,boolean isFirst) throws IOException {
  if (!isFirst) {
    writer.append(',');
  }
  writer.append('""');
  writer.append(escaper.escapeJsonString(memberName));
  writer.append(""String_Node_Str"");
}",0.9516728624535316
179242,"@Override protected void toString(Appendable sb,Escaper escaper) throws IOException {
  sb.append('{');
  boolean first=true;
  for (  Map.Entry<String,JsonElement> entry : members.entrySet()) {
    if (first) {
      first=false;
    }
 else {
      sb.append(',');
    }
    sb.append('\""');
    sb.append(entry.getKey());
    sb.append(""String_Node_Str"");
    entry.getValue().toString(sb,escaper);
  }
  sb.append('}');
}","@Override protected void toString(Appendable sb,Escaper escaper) throws IOException {
  sb.append('{');
  boolean first=true;
  for (  Map.Entry<String,JsonElement> entry : members.entrySet()) {
    if (first) {
      first=false;
    }
 else {
      sb.append(',');
    }
    sb.append('\""');
    sb.append(escaper.escapeJsonString(entry.getKey()));
    sb.append(""String_Node_Str"");
    entry.getValue().toString(sb,escaper);
  }
  sb.append('}');
}",0.9703196347031964
179243,"public void visitObjectMember(JsonObject parent,String memberName,JsonObject member,boolean isFirst) throws IOException {
  addCommaCheckingFirst(isFirst);
  writer.key(memberName);
  writer.fieldSeparator();
}","public void visitObjectMember(JsonObject parent,String memberName,JsonObject member,boolean isFirst) throws IOException {
  addCommaCheckingFirst(isFirst);
  writer.key(escaper.escapeJsonString(memberName));
  writer.fieldSeparator();
}",0.9417040358744396
179244,"private static ParameterizedTypeHandlerMap<JsonSerializer<?>> createDefaultSerializers(){
  ParameterizedTypeHandlerMap<JsonSerializer<?>> map=new ParameterizedTypeHandlerMap<JsonSerializer<?>>();
  map.register(Enum.class,ENUM_TYPE_ADAPTER);
  map.register(URL.class,URL_TYPE_ADAPTER);
  map.register(URI.class,URI_TYPE_ADAPTER);
  map.register(UUID.class,UUUID_TYPE_ADAPTER);
  map.register(Locale.class,LOCALE_TYPE_ADAPTER);
  map.register(Collection.class,COLLECTION_TYPE_ADAPTER);
  map.register(Map.class,MAP_TYPE_ADAPTER);
  map.register(Date.class,DATE_TYPE_ADAPTER);
  map.register(Calendar.class,GREGORIAN_CALENDAR_TYPE_ADAPTER);
  map.register(GregorianCalendar.class,GREGORIAN_CALENDAR_TYPE_ADAPTER);
  map.register(BigDecimal.class,BIG_DECIMAL_TYPE_ADAPTER);
  map.register(BigInteger.class,BIG_INTEGER_TYPE_ADAPTER);
  map.register(Boolean.class,BOOLEAN_TYPE_ADAPTER);
  map.register(boolean.class,BOOLEAN_TYPE_ADAPTER);
  map.register(Byte.class,BYTE_TYPE_ADAPTER);
  map.register(byte.class,BYTE_TYPE_ADAPTER);
  map.register(Character.class,CHARACTER_TYPE_ADAPTER);
  map.register(char.class,CHARACTER_TYPE_ADAPTER);
  map.register(Integer.class,INTEGER_TYPE_ADAPTER);
  map.register(int.class,INTEGER_TYPE_ADAPTER);
  map.register(Number.class,NUMBER_TYPE_ADAPTER);
  map.register(Short.class,SHORT_TYPE_ADAPTER);
  map.register(short.class,SHORT_TYPE_ADAPTER);
  map.register(String.class,STRING_TYPE_ADAPTER);
  map.makeUnmodifiable();
  return map;
}","private static ParameterizedTypeHandlerMap<JsonSerializer<?>> createDefaultSerializers(){
  ParameterizedTypeHandlerMap<JsonSerializer<?>> map=new ParameterizedTypeHandlerMap<JsonSerializer<?>>();
  map.register(Enum.class,ENUM_TYPE_ADAPTER);
  map.register(URL.class,URL_TYPE_ADAPTER);
  map.register(URI.class,URI_TYPE_ADAPTER);
  map.register(UUID.class,UUUID_TYPE_ADAPTER);
  map.register(Locale.class,LOCALE_TYPE_ADAPTER);
  map.register(Collection.class,COLLECTION_TYPE_ADAPTER);
  map.register(Map.class,MAP_TYPE_ADAPTER);
  map.register(Date.class,DATE_TYPE_ADAPTER);
  map.register(Timestamp.class,DATE_TYPE_ADAPTER);
  map.register(java.sql.Date.class,DATE_TYPE_ADAPTER);
  map.register(Calendar.class,GREGORIAN_CALENDAR_TYPE_ADAPTER);
  map.register(GregorianCalendar.class,GREGORIAN_CALENDAR_TYPE_ADAPTER);
  map.register(BigDecimal.class,BIG_DECIMAL_TYPE_ADAPTER);
  map.register(BigInteger.class,BIG_INTEGER_TYPE_ADAPTER);
  map.register(Boolean.class,BOOLEAN_TYPE_ADAPTER);
  map.register(boolean.class,BOOLEAN_TYPE_ADAPTER);
  map.register(Byte.class,BYTE_TYPE_ADAPTER);
  map.register(byte.class,BYTE_TYPE_ADAPTER);
  map.register(Character.class,CHARACTER_TYPE_ADAPTER);
  map.register(char.class,CHARACTER_TYPE_ADAPTER);
  map.register(Integer.class,INTEGER_TYPE_ADAPTER);
  map.register(int.class,INTEGER_TYPE_ADAPTER);
  map.register(Number.class,NUMBER_TYPE_ADAPTER);
  map.register(Short.class,SHORT_TYPE_ADAPTER);
  map.register(short.class,SHORT_TYPE_ADAPTER);
  map.register(String.class,STRING_TYPE_ADAPTER);
  map.makeUnmodifiable();
  return map;
}",0.9652230971128608
179245,"private static ParameterizedTypeHandlerMap<JsonDeserializer<?>> createDefaultDeserializers(){
  ParameterizedTypeHandlerMap<JsonDeserializer<?>> map=new ParameterizedTypeHandlerMap<JsonDeserializer<?>>();
  map.register(Enum.class,wrapDeserializer(ENUM_TYPE_ADAPTER));
  map.register(URL.class,wrapDeserializer(URL_TYPE_ADAPTER));
  map.register(URI.class,wrapDeserializer(URI_TYPE_ADAPTER));
  map.register(UUID.class,wrapDeserializer(UUUID_TYPE_ADAPTER));
  map.register(Locale.class,wrapDeserializer(LOCALE_TYPE_ADAPTER));
  map.register(Collection.class,wrapDeserializer(COLLECTION_TYPE_ADAPTER));
  map.register(Map.class,wrapDeserializer(MAP_TYPE_ADAPTER));
  map.register(Date.class,wrapDeserializer(DATE_TYPE_ADAPTER));
  map.register(Calendar.class,GREGORIAN_CALENDAR_TYPE_ADAPTER);
  map.register(GregorianCalendar.class,GREGORIAN_CALENDAR_TYPE_ADAPTER);
  map.register(BigDecimal.class,wrapDeserializer(BIG_DECIMAL_TYPE_ADAPTER));
  map.register(BigInteger.class,wrapDeserializer(BIG_INTEGER_TYPE_ADAPTER));
  map.register(Boolean.class,wrapDeserializer(BOOLEAN_TYPE_ADAPTER));
  map.register(boolean.class,wrapDeserializer(BOOLEAN_TYPE_ADAPTER));
  map.register(Byte.class,wrapDeserializer(BYTE_TYPE_ADAPTER));
  map.register(byte.class,wrapDeserializer(BYTE_TYPE_ADAPTER));
  map.register(Character.class,wrapDeserializer(CHARACTER_TYPE_ADAPTER));
  map.register(char.class,wrapDeserializer(CHARACTER_TYPE_ADAPTER));
  map.register(Double.class,wrapDeserializer(DOUBLE_TYPE_ADAPTER));
  map.register(double.class,wrapDeserializer(DOUBLE_TYPE_ADAPTER));
  map.register(Float.class,wrapDeserializer(FLOAT_TYPE_ADAPTER));
  map.register(float.class,wrapDeserializer(FLOAT_TYPE_ADAPTER));
  map.register(Integer.class,wrapDeserializer(INTEGER_TYPE_ADAPTER));
  map.register(int.class,wrapDeserializer(INTEGER_TYPE_ADAPTER));
  map.register(Long.class,wrapDeserializer(LONG_DESERIALIZER));
  map.register(long.class,wrapDeserializer(LONG_DESERIALIZER));
  map.register(Number.class,wrapDeserializer(NUMBER_TYPE_ADAPTER));
  map.register(Short.class,wrapDeserializer(SHORT_TYPE_ADAPTER));
  map.register(short.class,wrapDeserializer(SHORT_TYPE_ADAPTER));
  map.register(String.class,wrapDeserializer(STRING_TYPE_ADAPTER));
  map.makeUnmodifiable();
  return map;
}","private static ParameterizedTypeHandlerMap<JsonDeserializer<?>> createDefaultDeserializers(){
  ParameterizedTypeHandlerMap<JsonDeserializer<?>> map=new ParameterizedTypeHandlerMap<JsonDeserializer<?>>();
  map.register(Enum.class,wrapDeserializer(ENUM_TYPE_ADAPTER));
  map.register(URL.class,wrapDeserializer(URL_TYPE_ADAPTER));
  map.register(URI.class,wrapDeserializer(URI_TYPE_ADAPTER));
  map.register(UUID.class,wrapDeserializer(UUUID_TYPE_ADAPTER));
  map.register(Locale.class,wrapDeserializer(LOCALE_TYPE_ADAPTER));
  map.register(Collection.class,wrapDeserializer(COLLECTION_TYPE_ADAPTER));
  map.register(Map.class,wrapDeserializer(MAP_TYPE_ADAPTER));
  map.register(Date.class,wrapDeserializer(DATE_TYPE_ADAPTER));
  map.register(java.sql.Date.class,wrapDeserializer(JAVA_SQL_DATE_DESERIALIZER));
  map.register(Timestamp.class,wrapDeserializer(TIMESTAMP_DESERIALIZER));
  map.register(Calendar.class,GREGORIAN_CALENDAR_TYPE_ADAPTER);
  map.register(GregorianCalendar.class,GREGORIAN_CALENDAR_TYPE_ADAPTER);
  map.register(BigDecimal.class,wrapDeserializer(BIG_DECIMAL_TYPE_ADAPTER));
  map.register(BigInteger.class,wrapDeserializer(BIG_INTEGER_TYPE_ADAPTER));
  map.register(Boolean.class,wrapDeserializer(BOOLEAN_TYPE_ADAPTER));
  map.register(boolean.class,wrapDeserializer(BOOLEAN_TYPE_ADAPTER));
  map.register(Byte.class,wrapDeserializer(BYTE_TYPE_ADAPTER));
  map.register(byte.class,wrapDeserializer(BYTE_TYPE_ADAPTER));
  map.register(Character.class,wrapDeserializer(CHARACTER_TYPE_ADAPTER));
  map.register(char.class,wrapDeserializer(CHARACTER_TYPE_ADAPTER));
  map.register(Double.class,wrapDeserializer(DOUBLE_TYPE_ADAPTER));
  map.register(double.class,wrapDeserializer(DOUBLE_TYPE_ADAPTER));
  map.register(Float.class,wrapDeserializer(FLOAT_TYPE_ADAPTER));
  map.register(float.class,wrapDeserializer(FLOAT_TYPE_ADAPTER));
  map.register(Integer.class,wrapDeserializer(INTEGER_TYPE_ADAPTER));
  map.register(int.class,wrapDeserializer(INTEGER_TYPE_ADAPTER));
  map.register(Long.class,wrapDeserializer(LONG_DESERIALIZER));
  map.register(long.class,wrapDeserializer(LONG_DESERIALIZER));
  map.register(Number.class,wrapDeserializer(NUMBER_TYPE_ADAPTER));
  map.register(Short.class,wrapDeserializer(SHORT_TYPE_ADAPTER));
  map.register(short.class,wrapDeserializer(SHORT_TYPE_ADAPTER));
  map.register(String.class,wrapDeserializer(STRING_TYPE_ADAPTER));
  map.makeUnmodifiable();
  return map;
}",0.966794380587484
179246,"public void testDefaultDateDeserialization(){
  Date date=new Date();
  String json=gson.toJson(date);
  Date extracted=gson.fromJson(json,Date.class);
  assertEquals(date.toString(),extracted.toString());
}","public void testDefaultDateDeserialization(){
  String json=""String_Node_Str"";
  Date extracted=gson.fromJson(json,Date.class);
  assertEquals(extracted,2009,11,13,7,18,02);
}",0.743455497382199
179247,"private static ParameterizedTypeHandlerMap<InstanceCreator<?>> createDefaultInstanceCreators(){
  ParameterizedTypeHandlerMap<InstanceCreator<?>> map=new ParameterizedTypeHandlerMap<InstanceCreator<?>>();
  map.register(Map.class,MAP_TYPE_ADAPTER);
  map.register(Collection.class,COLLECTION_TYPE_ADAPTER);
  map.register(List.class,COLLECTION_TYPE_ADAPTER);
  map.register(Queue.class,COLLECTION_TYPE_ADAPTER);
  map.register(Set.class,HASH_SET_CREATOR);
  map.register(SortedSet.class,TREE_SET_CREATOR);
  map.register(Properties.class,PROPERTIES_CREATOR);
  map.makeUnmodifiable();
  return map;
}","private static ParameterizedTypeHandlerMap<InstanceCreator<?>> createDefaultInstanceCreators(){
  ParameterizedTypeHandlerMap<InstanceCreator<?>> map=new ParameterizedTypeHandlerMap<InstanceCreator<?>>();
  map.register(Map.class,MAP_TYPE_ADAPTER);
  map.register(Collection.class,COLLECTION_TYPE_ADAPTER);
  map.register(List.class,COLLECTION_TYPE_ADAPTER);
  map.register(Queue.class,COLLECTION_TYPE_ADAPTER);
  map.register(Set.class,HASH_SET_CREATOR);
  map.register(SortedSet.class,TREE_SET_CREATOR);
  map.register(TreeSet.class,TREE_SET_CREATOR);
  map.register(Properties.class,PROPERTIES_CREATOR);
  map.makeUnmodifiable();
  return map;
}",0.9615384615384616
179248,"/** 
 * This method serializes the specified object, including those of generic types, into its equivalent Json representation. This method must be used if the specified object is a generic type. For non-generic objects, use   {@link #toJson(Object,Appendable)} instead.
 * @param src the object for which JSON representation is to be created
 * @param typeOfSrc The specific genericized type of src. You can obtainthis type by using the  {@link com.google.gson.reflect.TypeToken} class. For example,to get the type for  {@code Collection<Foo>}, you should use: <pre> Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType(); </pre>
 * @param writer Writer to which the Json representation of src needs to be written.
 * @since 1.2
 */
public void toJson(Object src,Type typeOfSrc,Appendable writer){
  try {
    if (generateNonExecutableJson) {
      writer.append(JSON_NON_EXECUTABLE_PREFIX);
    }
    JsonElement jsonElement=toJsonTree(src,typeOfSrc);
    formatter.format(jsonElement,writer,serializeNulls);
  }
 catch (  IOException ioe) {
    throw new RuntimeException(ioe);
  }
}","/** 
 * Writes out the equivalent JSON for the tree of   {@link JsonElement}s.
 * @param jsonElement root of the tree of {@link JsonElement}s
 * @param writer Writer to which the Json representation needs to be written
 * @since 1.4
 */
public void toJson(JsonElement jsonElement,Appendable writer){
  try {
    if (generateNonExecutableJson) {
      writer.append(JSON_NON_EXECUTABLE_PREFIX);
    }
    if (jsonElement == null && serializeNulls) {
      writeOutNullString(writer);
    }
    formatter.format(jsonElement,writer,serializeNulls);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.4262485481997677
179249,"@Override public int hashCode(){
  return (value == null) ? 31 : value.hashCode();
}","@Override public int hashCode(){
  if (value == null) {
    return 31;
  }
  if (isIntegral(this)) {
    long value=getAsNumber().longValue();
    return (int)(value ^ (value >>> 32));
  }
  if (isFloatingPoint(this)) {
    long value=Double.doubleToLongBits(getAsNumber().doubleValue());
    return (int)(value ^ (value >>> 32));
  }
  return value.hashCode();
}",0.3087248322147651
179250,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null || getClass() != obj.getClass()) {
    return false;
  }
  JsonPrimitive other=(JsonPrimitive)obj;
  if (value == null) {
    return other.value == null;
  }
  return value.equals(other.value);
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null || getClass() != obj.getClass()) {
    return false;
  }
  JsonPrimitive other=(JsonPrimitive)obj;
  if (value == null) {
    return other.value == null;
  }
  if (isIntegral(this) && isIntegral(other)) {
    return getAsNumber().longValue() == other.getAsNumber().longValue();
  }
  if (isFloatingPoint(this) && isFloatingPoint(other)) {
    return getAsNumber().doubleValue() == other.getAsNumber().doubleValue();
  }
  return value.equals(other.value);
}",0.6960556844547564
179251,"public void visitObjectField(Field f,Type typeOfF,Object obj){
  if (isFieldNull(f,obj)) {
    if (serializeNulls) {
      addChildAsElement(f,JsonNull.createJsonNull());
    }
  }
 else {
    Object fieldValue=getFieldValue(f,obj);
    if (fieldValue != null && typeOfF == Object.class) {
      typeOfF=fieldValue.getClass();
    }
    addAsChildOfObject(f,typeOfF,fieldValue);
  }
}","public void visitObjectField(Field f,Type typeOfF,Object obj){
  if (isFieldNull(f,obj)) {
    if (serializeNulls) {
      addChildAsElement(f,JsonNull.createJsonNull());
    }
  }
 else {
    Object fieldValue=getFieldValue(f,obj);
    if (fieldValue != null) {
      typeOfF=getActualTypeIfMoreSpecific(typeOfF,fieldValue.getClass());
    }
    addAsChildOfObject(f,typeOfF,fieldValue);
  }
}",0.8740359897172236
179252,"public void visitArray(Object array,Type arrayType){
  assignToRoot(new JsonArray());
  int length=Array.getLength(array);
  TypeInfoArray fieldTypeInfo=TypeInfoFactory.getTypeInfoForArray(arrayType);
  Type componentType=fieldTypeInfo.getSecondLevelType();
  for (int i=0; i < length; ++i) {
    Object child=Array.get(array,i);
    addAsArrayElement(componentType,child);
  }
}","public void visitArray(Object array,Type arrayType){
  assignToRoot(new JsonArray());
  int length=Array.getLength(array);
  TypeInfoArray fieldTypeInfo=TypeInfoFactory.getTypeInfoForArray(arrayType);
  Type componentType=fieldTypeInfo.getSecondLevelType();
  for (int i=0; i < length; ++i) {
    Object child=Array.get(array,i);
    Type childType=componentType;
    if (child != null) {
      childType=getActualTypeIfMoreSpecific(childType,child.getClass());
    }
    addAsArrayElement(childType,child);
  }
}",0.8318385650224215
179253,"public DefaultDateTypeAdapter(int dateStyle,int timeStyle){
  this.format=DateFormat.getDateTimeInstance(dateStyle,timeStyle);
}","public DefaultDateTypeAdapter(final int dateStyle,final int timeStyle){
  this.format=DateFormat.getDateTimeInstance(dateStyle,timeStyle);
}",0.9552238805970148
179254,"private void navigateClassFields(Object obj,Class<?> clazz,Visitor visitor){
  Field[] fields=clazz.getDeclaredFields();
  AccessibleObject.setAccessible(fields,true);
  for (  Field f : fields) {
    TypeInfo fieldTypeInfo=TypeInfoFactory.getTypeInfoForField(f,objType);
    Type actualTypeOfField=fieldTypeInfo.getActualType();
    if (exclusionStrategy.shouldSkipField(f)) {
      continue;
    }
 else {
      boolean visitedWithCustomHandler=visitor.visitFieldUsingCustomHandler(f,actualTypeOfField,obj);
      if (!visitedWithCustomHandler) {
        if (fieldTypeInfo.isArray()) {
          visitor.visitArrayField(f,actualTypeOfField,obj);
        }
 else {
          visitor.visitObjectField(f,actualTypeOfField,obj);
        }
      }
    }
  }
}","private void navigateClassFields(Object obj,Class<?> clazz,Visitor visitor){
  Field[] fields=clazz.getDeclaredFields();
  AccessibleObject.setAccessible(fields,true);
  for (  Field f : fields) {
    if (exclusionStrategy.shouldSkipField(f)) {
      continue;
    }
 else {
      TypeInfo fieldTypeInfo=TypeInfoFactory.getTypeInfoForField(f,objType);
      Type actualTypeOfField=fieldTypeInfo.getActualType();
      boolean visitedWithCustomHandler=visitor.visitFieldUsingCustomHandler(f,actualTypeOfField,obj);
      if (!visitedWithCustomHandler) {
        if (fieldTypeInfo.isArray()) {
          visitor.visitArrayField(f,actualTypeOfField,obj);
        }
 else {
          visitor.visitObjectField(f,actualTypeOfField,obj);
        }
      }
    }
  }
}",0.8218997361477572
179255,"public void startArray(JsonArray array) throws IOException {
  firstArrayElement.put(++level,true);
  writer.beginArray();
}","public void startArray(JsonArray array) throws IOException {
  firstElementInLevel.push(true);
  writer.beginArray();
}",0.9053497942386832
179256,"public void visitNullArrayMember(JsonArray parent,boolean isFirst) throws IOException {
  addCommaCheckingFirst(firstArrayElement);
}","public void visitNullArrayMember(JsonArray parent,boolean isFirst) throws IOException {
  addCommaCheckingFirst();
}",0.931726907630522
179257,"private void addCommaCheckingFirst(Map<Integer,Boolean> first) throws IOException {
  if (first.get(level) != Boolean.FALSE) {
    first.put(level,false);
  }
 else {
    writer.elementSeparator();
  }
}","private void addCommaCheckingFirst() throws IOException {
  if (firstElementInLevel.peek()) {
    firstElementInLevel.pop();
    firstElementInLevel.push(false);
  }
 else {
    writer.elementSeparator();
  }
}",0.3825665859564164
179258,"public void endArray(JsonArray array){
  level--;
  writer.endArray();
}","public void endArray(JsonArray array){
  writer.endArray();
  firstElementInLevel.pop();
}",0.7530864197530864
179259,"PrintFormattingVisitor(JsonWriter writer,Escaper escaper,boolean serializeNulls){
  this.writer=writer;
  this.escaper=escaper;
  this.serializeNulls=serializeNulls;
  this.firstArrayElement=new HashMap<Integer,Boolean>();
  this.firstObjectMember=new HashMap<Integer,Boolean>();
}","PrintFormattingVisitor(JsonWriter writer,Escaper escaper,boolean serializeNulls){
  this.writer=writer;
  this.escaper=escaper;
  this.serializeNulls=serializeNulls;
  this.firstElementInLevel=new Stack<Boolean>();
}",0.8008048289738431
179260,"public void visitArrayMember(JsonArray parent,JsonObject member,boolean first) throws IOException {
  addCommaCheckingFirst(firstArrayElement);
}","public void visitArrayMember(JsonArray parent,JsonObject member,boolean first) throws IOException {
  addCommaCheckingFirst();
}",0.9377289377289376
179261,"public void endObject(JsonObject object){
  writer.endObject();
}","public void endObject(JsonObject object){
  writer.endObject();
  firstElementInLevel.pop();
}",0.8176100628930818
179262,"public void startObject(JsonObject object) throws IOException {
  firstObjectMember.put(level,true);
  writer.beginObject();
}","public void startObject(JsonObject object) throws IOException {
  firstElementInLevel.push(true);
  writer.beginObject();
}",0.891566265060241
179263,"public void visitObjectMember(JsonObject parent,String memberName,JsonObject member,boolean isFirst) throws IOException {
  addCommaCheckingFirst(firstObjectMember);
  writer.key(memberName);
  writer.fieldSeparator();
}","public void visitObjectMember(JsonObject parent,String memberName,JsonObject member,boolean isFirst) throws IOException {
  addCommaCheckingFirst();
  writer.key(memberName);
  writer.fieldSeparator();
}",0.9598108747044918
179264,"private static ParameterizedTypeHandlerMap<JsonSerializer<?>> createDefaultSerializers(){
  ParameterizedTypeHandlerMap<JsonSerializer<?>> map=new ParameterizedTypeHandlerMap<JsonSerializer<?>>();
  map.register(Enum.class,ENUM_TYPE_ADAPTER);
  map.register(URL.class,URL_TYPE_ADAPTER);
  map.register(URI.class,URI_TYPE_ADAPTER);
  map.register(UUID.class,UUUID_TYPE_ADAPTER);
  map.register(Locale.class,LOCALE_TYPE_ADAPTER);
  map.register(Collection.class,COLLECTION_TYPE_ADAPTER);
  map.register(Map.class,MAP_TYPE_ADAPTER);
  map.register(Date.class,DATE_TYPE_ADAPTER);
  map.register(BigDecimal.class,BIG_DECIMAL_TYPE_ADAPTER);
  map.register(BigInteger.class,BIG_INTEGER_TYPE_ADAPTER);
  map.register(Boolean.class,BOOLEAN_TYPE_ADAPTER);
  map.register(boolean.class,BOOLEAN_TYPE_ADAPTER);
  map.register(Byte.class,BYTE_TYPE_ADAPTER);
  map.register(byte.class,BYTE_TYPE_ADAPTER);
  map.register(Character.class,CHARACTER_TYPE_ADAPTER);
  map.register(char.class,CHARACTER_TYPE_ADAPTER);
  map.register(Integer.class,INTEGER_TYPE_ADAPTER);
  map.register(int.class,INTEGER_TYPE_ADAPTER);
  map.register(Number.class,NUMBER_TYPE_ADAPTER);
  map.register(Short.class,SHORT_TYPE_ADAPTER);
  map.register(short.class,SHORT_TYPE_ADAPTER);
  map.register(String.class,STRING_TYPE_ADAPTER);
  map.makeUnmodifiable();
  return map;
}","private static ParameterizedTypeHandlerMap<JsonSerializer<?>> createDefaultSerializers(){
  ParameterizedTypeHandlerMap<JsonSerializer<?>> map=new ParameterizedTypeHandlerMap<JsonSerializer<?>>();
  map.register(Enum.class,ENUM_TYPE_ADAPTER);
  map.register(URL.class,URL_TYPE_ADAPTER);
  map.register(URI.class,URI_TYPE_ADAPTER);
  map.register(UUID.class,UUUID_TYPE_ADAPTER);
  map.register(Locale.class,LOCALE_TYPE_ADAPTER);
  map.register(Collection.class,COLLECTION_TYPE_ADAPTER);
  map.register(Map.class,MAP_TYPE_ADAPTER);
  map.register(Date.class,DATE_TYPE_ADAPTER);
  map.register(Calendar.class,GREGORIAN_CALENDAR_TYPE_ADAPTER);
  map.register(GregorianCalendar.class,GREGORIAN_CALENDAR_TYPE_ADAPTER);
  map.register(BigDecimal.class,BIG_DECIMAL_TYPE_ADAPTER);
  map.register(BigInteger.class,BIG_INTEGER_TYPE_ADAPTER);
  map.register(Boolean.class,BOOLEAN_TYPE_ADAPTER);
  map.register(boolean.class,BOOLEAN_TYPE_ADAPTER);
  map.register(Byte.class,BYTE_TYPE_ADAPTER);
  map.register(byte.class,BYTE_TYPE_ADAPTER);
  map.register(Character.class,CHARACTER_TYPE_ADAPTER);
  map.register(char.class,CHARACTER_TYPE_ADAPTER);
  map.register(Integer.class,INTEGER_TYPE_ADAPTER);
  map.register(int.class,INTEGER_TYPE_ADAPTER);
  map.register(Number.class,NUMBER_TYPE_ADAPTER);
  map.register(Short.class,SHORT_TYPE_ADAPTER);
  map.register(short.class,SHORT_TYPE_ADAPTER);
  map.register(String.class,STRING_TYPE_ADAPTER);
  map.makeUnmodifiable();
  return map;
}",0.9511586452762923
179265,"private static ParameterizedTypeHandlerMap<JsonDeserializer<?>> createDefaultDeserializers(){
  ParameterizedTypeHandlerMap<JsonDeserializer<?>> map=new ParameterizedTypeHandlerMap<JsonDeserializer<?>>();
  map.register(Enum.class,wrapDeserializer(ENUM_TYPE_ADAPTER));
  map.register(URL.class,wrapDeserializer(URL_TYPE_ADAPTER));
  map.register(URI.class,wrapDeserializer(URI_TYPE_ADAPTER));
  map.register(UUID.class,wrapDeserializer(UUUID_TYPE_ADAPTER));
  map.register(Locale.class,wrapDeserializer(LOCALE_TYPE_ADAPTER));
  map.register(Collection.class,wrapDeserializer(COLLECTION_TYPE_ADAPTER));
  map.register(Map.class,wrapDeserializer(MAP_TYPE_ADAPTER));
  map.register(Date.class,wrapDeserializer(DATE_TYPE_ADAPTER));
  map.register(BigDecimal.class,wrapDeserializer(BIG_DECIMAL_TYPE_ADAPTER));
  map.register(BigInteger.class,wrapDeserializer(BIG_INTEGER_TYPE_ADAPTER));
  map.register(Boolean.class,wrapDeserializer(BOOLEAN_TYPE_ADAPTER));
  map.register(boolean.class,wrapDeserializer(BOOLEAN_TYPE_ADAPTER));
  map.register(Byte.class,wrapDeserializer(BYTE_TYPE_ADAPTER));
  map.register(byte.class,wrapDeserializer(BYTE_TYPE_ADAPTER));
  map.register(Character.class,wrapDeserializer(CHARACTER_TYPE_ADAPTER));
  map.register(char.class,wrapDeserializer(CHARACTER_TYPE_ADAPTER));
  map.register(Double.class,wrapDeserializer(DOUBLE_TYPE_ADAPTER));
  map.register(double.class,wrapDeserializer(DOUBLE_TYPE_ADAPTER));
  map.register(Float.class,wrapDeserializer(FLOAT_TYPE_ADAPTER));
  map.register(float.class,wrapDeserializer(FLOAT_TYPE_ADAPTER));
  map.register(Integer.class,wrapDeserializer(INTEGER_TYPE_ADAPTER));
  map.register(int.class,wrapDeserializer(INTEGER_TYPE_ADAPTER));
  map.register(Long.class,wrapDeserializer(LONG_DESERIALIZER));
  map.register(long.class,wrapDeserializer(LONG_DESERIALIZER));
  map.register(Number.class,wrapDeserializer(NUMBER_TYPE_ADAPTER));
  map.register(Short.class,wrapDeserializer(SHORT_TYPE_ADAPTER));
  map.register(short.class,wrapDeserializer(SHORT_TYPE_ADAPTER));
  map.register(String.class,wrapDeserializer(STRING_TYPE_ADAPTER));
  map.makeUnmodifiable();
  return map;
}","private static ParameterizedTypeHandlerMap<JsonDeserializer<?>> createDefaultDeserializers(){
  ParameterizedTypeHandlerMap<JsonDeserializer<?>> map=new ParameterizedTypeHandlerMap<JsonDeserializer<?>>();
  map.register(Enum.class,wrapDeserializer(ENUM_TYPE_ADAPTER));
  map.register(URL.class,wrapDeserializer(URL_TYPE_ADAPTER));
  map.register(URI.class,wrapDeserializer(URI_TYPE_ADAPTER));
  map.register(UUID.class,wrapDeserializer(UUUID_TYPE_ADAPTER));
  map.register(Locale.class,wrapDeserializer(LOCALE_TYPE_ADAPTER));
  map.register(Collection.class,wrapDeserializer(COLLECTION_TYPE_ADAPTER));
  map.register(Map.class,wrapDeserializer(MAP_TYPE_ADAPTER));
  map.register(Date.class,wrapDeserializer(DATE_TYPE_ADAPTER));
  map.register(Calendar.class,GREGORIAN_CALENDAR_TYPE_ADAPTER);
  map.register(GregorianCalendar.class,GREGORIAN_CALENDAR_TYPE_ADAPTER);
  map.register(BigDecimal.class,wrapDeserializer(BIG_DECIMAL_TYPE_ADAPTER));
  map.register(BigInteger.class,wrapDeserializer(BIG_INTEGER_TYPE_ADAPTER));
  map.register(Boolean.class,wrapDeserializer(BOOLEAN_TYPE_ADAPTER));
  map.register(boolean.class,wrapDeserializer(BOOLEAN_TYPE_ADAPTER));
  map.register(Byte.class,wrapDeserializer(BYTE_TYPE_ADAPTER));
  map.register(byte.class,wrapDeserializer(BYTE_TYPE_ADAPTER));
  map.register(Character.class,wrapDeserializer(CHARACTER_TYPE_ADAPTER));
  map.register(char.class,wrapDeserializer(CHARACTER_TYPE_ADAPTER));
  map.register(Double.class,wrapDeserializer(DOUBLE_TYPE_ADAPTER));
  map.register(double.class,wrapDeserializer(DOUBLE_TYPE_ADAPTER));
  map.register(Float.class,wrapDeserializer(FLOAT_TYPE_ADAPTER));
  map.register(float.class,wrapDeserializer(FLOAT_TYPE_ADAPTER));
  map.register(Integer.class,wrapDeserializer(INTEGER_TYPE_ADAPTER));
  map.register(int.class,wrapDeserializer(INTEGER_TYPE_ADAPTER));
  map.register(Long.class,wrapDeserializer(LONG_DESERIALIZER));
  map.register(long.class,wrapDeserializer(LONG_DESERIALIZER));
  map.register(Number.class,wrapDeserializer(NUMBER_TYPE_ADAPTER));
  map.register(Short.class,wrapDeserializer(SHORT_TYPE_ADAPTER));
  map.register(short.class,wrapDeserializer(SHORT_TYPE_ADAPTER));
  map.register(String.class,wrapDeserializer(STRING_TYPE_ADAPTER));
  map.makeUnmodifiable();
  return map;
}",0.9688989784335982
179266,"/** 
 * Translates the field name into its JSON field name representation.
 * @param f the field object that we are translating
 * @return the translated field name.
 */
public String translateName(Field f);","/** 
 * Translates the field name into its JSON field name representation.
 * @param f the field object that we are translating
 * @return the translated field name.
 * @since 1.3
 */
public String translateName(Field f);",0.9672897196261684
179267,"/** 
 * Configures Gson to apply a specific naming policy strategy to an object's field during serialization and deserialization.
 * @param fieldNamingPolicy the actual naming strategy to apply to the fields
 * @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
 */
private GsonBuilder setFieldNamingStrategy(FieldNamingStrategy fieldNamingPolicy){
  this.fieldNamingPolicy=new SerializedNameAnnotationInterceptingNamingPolicy(fieldNamingPolicy);
  return this;
}","/** 
 * Configures Gson to apply a specific naming policy strategy to an object's field during serialization and deserialization.
 * @param fieldNamingStrategy the actual naming strategy to apply to the fields
 * @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
 * @since 1.3
 */
public GsonBuilder setFieldNamingStrategy(FieldNamingStrategy fieldNamingStrategy){
  this.fieldNamingPolicy=new SerializedNameAnnotationInterceptingNamingPolicy(fieldNamingStrategy);
  return this;
}",0.9401373895976448
179268,"public TreeSet<?> createInstance(Type type){
  return new TreeSet<Object>();
}","public HashSet<?> createInstance(Type type){
  return new HashSet<Object>();
}",0.8974358974358975
179269,"@Override public String toString(){
  return TreeSetCreator.class.getSimpleName();
}","@Override public String toString(){
  return HashSetCreator.class.getSimpleName();
}",0.9523809523809524
179270,"private static ParameterizedTypeHandlerMap<InstanceCreator<?>> createDefaultInstanceCreators(){
  ParameterizedTypeHandlerMap<InstanceCreator<?>> map=new ParameterizedTypeHandlerMap<InstanceCreator<?>>();
  map.register(Map.class,MAP_TYPE_ADAPTER);
  map.register(Collection.class,COLLECTION_TYPE_ADAPTER);
  map.register(List.class,COLLECTION_TYPE_ADAPTER);
  map.register(Queue.class,COLLECTION_TYPE_ADAPTER);
  map.register(Set.class,TREE_SET_CREATOR);
  map.register(SortedSet.class,TREE_SET_CREATOR);
  map.register(Properties.class,PROPERTIES_CREATOR);
  map.makeUnmodifiable();
  return map;
}","private static ParameterizedTypeHandlerMap<InstanceCreator<?>> createDefaultInstanceCreators(){
  ParameterizedTypeHandlerMap<InstanceCreator<?>> map=new ParameterizedTypeHandlerMap<InstanceCreator<?>>();
  map.register(Map.class,MAP_TYPE_ADAPTER);
  map.register(Collection.class,COLLECTION_TYPE_ADAPTER);
  map.register(List.class,COLLECTION_TYPE_ADAPTER);
  map.register(Queue.class,COLLECTION_TYPE_ADAPTER);
  map.register(Set.class,HASH_SET_CREATOR);
  map.register(SortedSet.class,HASH_SET_CREATOR);
  map.register(Properties.class,PROPERTIES_CREATOR);
  map.makeUnmodifiable();
  return map;
}",0.9866666666666668
179271,"private static ParameterizedTypeHandlerMap<InstanceCreator<?>> createDefaultInstanceCreators(){
  ParameterizedTypeHandlerMap<InstanceCreator<?>> map=new ParameterizedTypeHandlerMap<InstanceCreator<?>>();
  map.register(Map.class,MAP_TYPE_ADAPTER);
  map.register(Collection.class,COLLECTION_TYPE_ADAPTER);
  map.register(List.class,COLLECTION_TYPE_ADAPTER);
  map.register(Queue.class,COLLECTION_TYPE_ADAPTER);
  map.register(Set.class,HASH_SET_CREATOR);
  map.register(SortedSet.class,HASH_SET_CREATOR);
  map.register(Properties.class,PROPERTIES_CREATOR);
  map.makeUnmodifiable();
  return map;
}","private static ParameterizedTypeHandlerMap<InstanceCreator<?>> createDefaultInstanceCreators(){
  ParameterizedTypeHandlerMap<InstanceCreator<?>> map=new ParameterizedTypeHandlerMap<InstanceCreator<?>>();
  map.register(Map.class,MAP_TYPE_ADAPTER);
  map.register(Collection.class,COLLECTION_TYPE_ADAPTER);
  map.register(List.class,COLLECTION_TYPE_ADAPTER);
  map.register(Queue.class,COLLECTION_TYPE_ADAPTER);
  map.register(Set.class,HASH_SET_CREATOR);
  map.register(SortedSet.class,TREE_SET_CREATOR);
  map.register(Properties.class,PROPERTIES_CREATOR);
  map.makeUnmodifiable();
  return map;
}",0.9016666666666666
179272,"public void testSubInterfacesOfCollectionDeserialization() throws Exception {
  String json=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  ClassWithSubInterfacesOfCollection target=gson.fromJson(json,ClassWithSubInterfacesOfCollection.class);
  assertEquals(json,target.getExpectedJson());
}","public void testSubInterfacesOfCollectionDeserialization() throws Exception {
  String json=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  ClassWithSubInterfacesOfCollection target=gson.fromJson(json,ClassWithSubInterfacesOfCollection.class);
  assertTrue(target.listContains(0,1,2,3));
  assertTrue(target.queueContains(0,1,2,3));
  assertTrue(target.setContains(0.1F,0.2F,0.3F,0.4F));
  assertTrue(target.sortedSetContains('a','b','c','d'));
}",0.7120418848167539
179273,"private static ParameterizedTypeHandlerMap<InstanceCreator<?>> createDefaultInstanceCreators(){
  ParameterizedTypeHandlerMap<InstanceCreator<?>> map=new ParameterizedTypeHandlerMap<InstanceCreator<?>>();
  map.register(Enum.class,ENUM_TYPE_ADAPTER);
  map.register(Map.class,MAP_TYPE_ADAPTER);
  map.register(Collection.class,COLLECTION_TYPE_ADAPTER);
  map.register(List.class,COLLECTION_TYPE_ADAPTER);
  map.register(Queue.class,COLLECTION_TYPE_ADAPTER);
  map.register(Set.class,TREE_SET_CREATOR);
  map.register(SortedSet.class,TREE_SET_CREATOR);
  map.makeUnmodifiable();
  return map;
}","private static ParameterizedTypeHandlerMap<InstanceCreator<?>> createDefaultInstanceCreators(){
  ParameterizedTypeHandlerMap<InstanceCreator<?>> map=new ParameterizedTypeHandlerMap<InstanceCreator<?>>();
  map.register(Enum.class,ENUM_TYPE_ADAPTER);
  map.register(Map.class,MAP_TYPE_ADAPTER);
  map.register(Collection.class,COLLECTION_TYPE_ADAPTER);
  map.register(List.class,COLLECTION_TYPE_ADAPTER);
  map.register(Queue.class,COLLECTION_TYPE_ADAPTER);
  map.register(Set.class,TREE_SET_CREATOR);
  map.register(SortedSet.class,TREE_SET_CREATOR);
  map.register(Properties.class,PROPERTIES_CREATOR);
  map.makeUnmodifiable();
  return map;
}",0.9572235673930588
179274,"public TypeInfoMap(Type mapType){
  if (!(mapType instanceof ParameterizedType)) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
  TypeInfo rawType=new TypeInfo(mapType);
  Preconditions.checkArgument(Map.class.isAssignableFrom(rawType.getRawClass()));
  this.mapType=(ParameterizedType)mapType;
}","public TypeInfoMap(Type mapType){
  if (mapType instanceof Class && Properties.class.isAssignableFrom((Class<?>)mapType)) {
    keyType=String.class;
    valueType=String.class;
  }
 else   if (mapType instanceof ParameterizedType) {
    TypeInfo rawType=new TypeInfo(mapType);
    Preconditions.checkArgument(Map.class.isAssignableFrom(rawType.getRawClass()));
    ParameterizedType paramType=(ParameterizedType)mapType;
    keyType=paramType.getActualTypeArguments()[0];
    valueType=paramType.getActualTypeArguments()[1];
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
}",0.3430962343096234
179275,"public Type getKeyType(){
  return mapType.getActualTypeArguments()[0];
}","public Type getKeyType(){
  return keyType;
}",0.711864406779661
179276,"public Type getValueType(){
  return mapType.getActualTypeArguments()[1];
}","public Type getValueType(){
  return valueType;
}",0.7258064516129032
179277,"public void testPropertiesDeserialization(){
  String json=""String_Node_Str"";
  Properties props=gson.fromJson(json,Properties.class);
  assertEquals(""String_Node_Str"",props.get(""String_Node_Str""));
}","public void testPropertiesDeserialization(){
  String json=""String_Node_Str"";
  Properties props=gson.fromJson(json,Properties.class);
  assertEquals(""String_Node_Str"",props.getProperty(""String_Node_Str""));
}",0.9803921568627452
179278,"public void testPropertiesSerialization(){
  Properties props=new Properties();
  props.put(""String_Node_Str"",""String_Node_Str"");
  String json=gson.toJson(props);
  System.out.println(json);
}","public void testPropertiesSerialization(){
  Properties props=new Properties();
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  String json=gson.toJson(props);
  System.out.println(json);
}",0.4974619289340101
179279,"public void startObject(JsonObject object){
  delegate.startObject(object);
}","public void startObject(JsonObject object) throws IOException {
  delegate.startObject(object);
}",0.8850574712643678
179280,"public void startArray(JsonArray array){
  delegate.startArray(array);
}","public void startArray(JsonArray array) throws IOException {
  delegate.startArray(array);
}",0.8780487804878049
179281,"public void visitPrimitive(JsonPrimitive primitive){
  delegate.visitPrimitive(primitive);
}","public void visitPrimitive(JsonPrimitive primitive) throws IOException {
  delegate.visitPrimitive(primitive);
}",0.9019607843137256
179282,"public void visitNullArrayMember(JsonArray parent,boolean isFirst){
  delegate.visitNullArrayMember(parent,isFirst);
}","public void visitNullArrayMember(JsonArray parent,boolean isFirst) throws IOException {
  delegate.visitNullArrayMember(parent,isFirst);
}",0.921875
179283,"public void visitNull(){
  delegate.visitNull();
}","public void visitNull() throws IOException {
  delegate.visitNull();
}",0.8333333333333334
179284,"public void visitObjectMember(JsonObject parent,String memberName,JsonObject member,boolean isFirst){
  delegate.visitObjectMember(parent,memberName,member,isFirst);
}","public void visitObjectMember(JsonObject parent,String memberName,JsonObject member,boolean isFirst) throws IOException {
  delegate.visitObjectMember(parent,memberName,member,isFirst);
}",0.943502824858757
179285,"public void visitNullObjectMember(JsonObject parent,String memberName,boolean isFirst){
  delegate.visitNullObjectMember(parent,memberName,isFirst);
}","public void visitNullObjectMember(JsonObject parent,String memberName,boolean isFirst) throws IOException {
  delegate.visitNullObjectMember(parent,memberName,isFirst);
}",0.9375
179286,"public void visitArrayMember(JsonArray parent,JsonObject member,boolean isFirst){
  delegate.visitArrayMember(parent,member,isFirst);
}","public void visitArrayMember(JsonArray parent,JsonObject member,boolean isFirst) throws IOException {
  delegate.visitArrayMember(parent,member,isFirst);
}",0.9310344827586208
179287,"public void endArray(JsonArray array){
  delegate.endArray(array);
}","public void endArray(JsonArray array) throws IOException {
  delegate.endArray(array);
}",0.8717948717948718
179288,"public void endObject(JsonObject object){
  delegate.endObject(object);
}","public void endObject(JsonObject object) throws IOException {
  delegate.endObject(object);
}",0.8795180722891566
179289,"/** 
 * Appends the   {@link #NULL_STRING} to the {@code writer} object.
 * @param writer the object to append the null value to
 */
private void writeOutNullString(Writer writer){
  try {
    writer.append(NULL_STRING);
  }
 catch (  IOException e) {
    throw new JsonParseException(e);
  }
}","/** 
 * Appends the   {@link #NULL_STRING} to the {@code writer} object.
 * @param writer the object to append the null value to
 */
private void writeOutNullString(Appendable writer) throws IOException {
  writer.append(NULL_STRING);
}",0.7773584905660378
179290,"/** 
 * This method serializes the specified object, including those of generic types, into its equivalent Json representation. This method must be used if the specified object is a generic type. For non-generic objects, use   {@link #toJson(Object,Writer)} instead.
 * @param src the object for which JSON representation is to be created
 * @param typeOfSrc The specific genericized type of src. You can obtainthis type by using the  {@link com.google.gson.reflect.TypeToken} class. For example,to get the type for  {@code Collection<Foo>}, you should use: <pre> Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType(); </pre>
 * @param writer Writer to which the Json representation of src needs to be written.
 * @since 1.2
 */
public void toJson(Object src,Type typeOfSrc,Writer writer){
  if (src != null) {
    JsonSerializationContext context=new JsonSerializationContextDefault(createDefaultObjectNavigatorFactory(),serializeNulls,serializers);
    JsonElement jsonElement=context.serialize(src,typeOfSrc);
    formatter.format(jsonElement,new PrintWriter(writer),serializeNulls);
  }
 else {
    if (serializeNulls) {
      writeOutNullString(writer);
    }
  }
}","/** 
 * This method serializes the specified object, including those of generic types, into its equivalent Json representation. This method must be used if the specified object is a generic type. For non-generic objects, use   {@link #toJson(Object,Appendable)} instead.
 * @param src the object for which JSON representation is to be created
 * @param typeOfSrc The specific genericized type of src. You can obtainthis type by using the  {@link com.google.gson.reflect.TypeToken} class. For example,to get the type for  {@code Collection<Foo>}, you should use: <pre> Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType(); </pre>
 * @param writer Writer to which the Json representation of src needs to be written.
 * @since 1.2
 */
public void toJson(Object src,Type typeOfSrc,Appendable writer){
  try {
    if (src != null) {
      JsonSerializationContext context=new JsonSerializationContextDefault(createDefaultObjectNavigatorFactory(),serializeNulls,serializers);
      JsonElement jsonElement=context.serialize(src,typeOfSrc);
      formatter.format(jsonElement,writer,serializeNulls);
    }
 else {
      if (serializeNulls) {
        writeOutNullString(writer);
      }
    }
  }
 catch (  IOException ioe) {
    throw new RuntimeException(ioe);
  }
}",0.8668555240793201
179291,"public void startObject(JsonObject object){
  writer.append('{');
}","public void startObject(JsonObject object) throws IOException {
  writer.append('{');
}",0.8701298701298701
179292,"public void visitPrimitive(JsonPrimitive primitive){
  writer.append(primitive.toString());
}","public void visitPrimitive(JsonPrimitive primitive) throws IOException {
  writer.append(primitive.toString());
}",0.9029126213592232
179293,"public void startArray(JsonArray array){
  writer.append('[');
}","public void startArray(JsonArray array) throws IOException {
  writer.append('[');
}",0.8648648648648649
179294,"public void visitNullArrayMember(JsonArray parent,boolean isFirst){
  if (!isFirst) {
    writer.append(',');
  }
}","public void visitNullArrayMember(JsonArray parent,boolean isFirst) throws IOException {
  if (!isFirst) {
    writer.append(',');
  }
}",0.92
179295,"public void visitNull(){
  writer.append(""String_Node_Str"");
}","public void visitNull() throws IOException {
  writer.append(""String_Node_Str"");
}",0.8611111111111112
179296,"public void format(JsonElement root,PrintWriter writer,boolean serializeNulls){
  if (root == null) {
    return;
  }
  JsonElementVisitor visitor=new JsonEscapingVisitor(new FormattingVisitor(writer,serializeNulls));
  JsonTreeNavigator navigator=new JsonTreeNavigator(visitor,serializeNulls);
  navigator.navigate(root);
}","public void format(JsonElement root,Appendable writer,boolean serializeNulls) throws IOException {
  if (root == null) {
    return;
  }
  JsonElementVisitor visitor=new JsonEscapingVisitor(new FormattingVisitor(writer,serializeNulls));
  JsonTreeNavigator navigator=new JsonTreeNavigator(visitor,serializeNulls);
  navigator.navigate(root);
}",0.9385307346326835
179297,"public void visitObjectMember(JsonObject parent,String memberName,JsonObject member,boolean isFirst){
  if (!isFirst) {
    writer.append(',');
  }
  writer.append('""');
  writer.append(memberName);
  writer.append(""String_Node_Str"");
}","public void visitObjectMember(JsonObject parent,String memberName,JsonObject member,boolean isFirst) throws IOException {
  if (!isFirst) {
    writer.append(',');
  }
  writer.append('""');
  writer.append(memberName);
  writer.append(""String_Node_Str"");
}",0.959349593495935
179298,"public void visitNullObjectMember(JsonObject parent,String memberName,boolean isFirst){
  if (serializeNulls) {
    visitObjectMember(parent,memberName,(JsonObject)null,isFirst);
  }
}","public void visitNullObjectMember(JsonObject parent,String memberName,boolean isFirst) throws IOException {
  if (serializeNulls) {
    visitObjectMember(parent,memberName,(JsonObject)null,isFirst);
  }
}",0.9484536082474226
179299,"public void visitArrayMember(JsonArray parent,JsonObject member,boolean isFirst){
  if (!isFirst) {
    writer.append(',');
  }
}","public void visitArrayMember(JsonArray parent,JsonObject member,boolean isFirst) throws IOException {
  if (!isFirst) {
    writer.append(',');
  }
}",0.9280575539568344
179300,"public void endArray(JsonArray array){
  writer.append(']');
}","public void endArray(JsonArray array) throws IOException {
  writer.append(']');
}",0.8611111111111112
179301,"FormattingVisitor(PrintWriter writer,boolean serializeNulls){
  this.writer=writer;
  this.serializeNulls=serializeNulls;
}","FormattingVisitor(Appendable writer,boolean serializeNulls){
  this.writer=writer;
  this.serializeNulls=serializeNulls;
}",0.9306122448979592
179302,"public void endObject(JsonObject object){
  writer.append('}');
}","public void endObject(JsonObject object) throws IOException {
  writer.append('}');
}",0.8666666666666667
179303,void startObject(JsonObject object);,void startObject(JsonObject object) throws IOException ;,0.782608695652174
179304,void visitPrimitive(JsonPrimitive primitive);,void visitPrimitive(JsonPrimitive primitive) throws IOException ;,0.8181818181818182
179305,void startArray(JsonArray array);,void startArray(JsonArray array) throws IOException ;,0.7674418604651163
179306,"void visitNullArrayMember(JsonArray parent,boolean isFirst);","void visitNullArrayMember(JsonArray parent,boolean isFirst) throws IOException ;",0.8571428571428571
179307,void visitNull();,void visitNull() throws IOException ;,0.6296296296296297
179308,"void visitObjectMember(JsonObject parent,String memberName,JsonObject member,boolean isFirst);","void visitObjectMember(JsonObject parent,String memberName,JsonObject member,boolean isFirst) throws IOException ;",0.903846153846154
179309,"void visitNullObjectMember(JsonObject parent,String memberName,boolean isFirst);","void visitNullObjectMember(JsonObject parent,String memberName,boolean isFirst) throws IOException ;",0.8888888888888888
179310,"void visitArrayMember(JsonArray parent,JsonObject member,boolean isFirst);","void visitArrayMember(JsonArray parent,JsonObject member,boolean isFirst) throws IOException ;",0.8809523809523809
179311,void endArray(JsonArray array);,void endArray(JsonArray array) throws IOException ;,0.7560975609756098
179312,void endObject(JsonObject object);,void endObject(JsonObject object) throws IOException ;,0.7727272727272727
179313,"@SuppressWarnings(""String_Node_Str"") public boolean visitUsingCustomHandler(Object obj,Type objType){
  JsonSerializer serializer=serializers.getHandlerFor(objType);
  if (serializer == null && obj instanceof Map) {
    serializer=serializers.getHandlerFor(Map.class);
  }
  if (serializer != null) {
    assignToRoot(serializer.serialize(obj,objType,context));
    return true;
  }
  return false;
}","@SuppressWarnings(""String_Node_Str"") public boolean visitUsingCustomHandler(Object obj,Type objType){
  JsonSerializer serializer=serializers.getHandlerFor(objType);
  if (serializer == null && obj instanceof Map) {
    serializer=serializers.getHandlerFor(Map.class);
  }
  if (serializer != null) {
    if (obj == null) {
      assignToRoot(JsonNull.INSTANCE);
    }
 else {
      assignToRoot(serializer.serialize(obj,objType,context));
    }
    return true;
  }
  return false;
}",0.8710407239819005
179314,"private void navigateClassFields(Object obj,Class<?> clazz,Visitor visitor){
  Field[] fields=clazz.getDeclaredFields();
  AccessibleObject.setAccessible(fields,true);
  for (  Field f : fields) {
    TypeInfo fieldTypeInfo=TypeInfoFactory.getTypeInfoForField(f,objType);
    Type actualTypeOfField=fieldTypeInfo.getActualType();
    if (exclusionStrategy.shouldSkipField(f)) {
      continue;
    }
 else     if (fieldTypeInfo.isCollectionOrArray()) {
      if (fieldTypeInfo.isArray()) {
        visitor.visitArrayField(f,actualTypeOfField,obj);
      }
 else {
        visitor.visitCollectionField(f,actualTypeOfField,obj);
      }
    }
 else     if (fieldTypeInfo.isPrimitiveOrStringAndNotAnArray()) {
      visitor.visitPrimitiveField(f,actualTypeOfField,obj);
    }
 else {
      visitor.visitObjectField(f,actualTypeOfField,obj);
    }
  }
}","private void navigateClassFields(Object obj,Class<?> clazz,Visitor visitor){
  Field[] fields=clazz.getDeclaredFields();
  AccessibleObject.setAccessible(fields,true);
  for (  Field f : fields) {
    TypeInfo fieldTypeInfo=TypeInfoFactory.getTypeInfoForField(f,objType);
    Type actualTypeOfField=fieldTypeInfo.getActualType();
    if (exclusionStrategy.shouldSkipField(f)) {
      continue;
    }
 else {
      boolean visitedWithCustomHandler=visitor.visitFieldUsingCustomHandler(f,actualTypeOfField,obj);
      if (!visitedWithCustomHandler) {
        if (fieldTypeInfo.isCollectionOrArray()) {
          if (fieldTypeInfo.isArray()) {
            visitor.visitArrayField(f,actualTypeOfField,obj);
          }
 else {
            visitor.visitCollectionField(f,actualTypeOfField,obj);
          }
        }
 else         if (fieldTypeInfo.isPrimitiveOrStringAndNotAnArray()) {
          visitor.visitPrimitiveField(f,actualTypeOfField,obj);
        }
 else {
          visitor.visitObjectField(f,actualTypeOfField,obj);
        }
      }
    }
  }
}",0.8922753547031004
179315,"/** 
 * Navigate all the fields of the specified object. If a field is null, it does not get visited.
 */
public void accept(Visitor visitor){
  if (obj == null) {
    return;
  }
  TypeInfo objTypeInfo=new TypeInfo(objType);
  if (exclusionStrategy.shouldSkipClass(objTypeInfo.getRawClass())) {
    return;
  }
  if (ancestors.contains(obj)) {
    throw new IllegalStateException(""String_Node_Str"" + obj);
  }
  ancestors.push(obj);
  try {
    if (objTypeInfo.isCollectionOrArray()) {
      if (objTypeInfo.isArray()) {
        visitor.visitArray(obj,objType);
      }
 else {
        visitor.visitCollection((Collection<?>)obj,objType);
      }
    }
 else     if (objTypeInfo.isEnum()) {
      visitor.visitEnum(obj,objType);
    }
 else     if (objTypeInfo.isPrimitiveOrStringAndNotAnArray()) {
      visitor.visitPrimitiveValue(obj);
    }
 else {
      if (!visitor.visitUsingCustomHandler(obj,objType)) {
        visitor.startVisitingObject(obj);
        for (Class<?> curr=objTypeInfo.getRawClass(); curr != null && !curr.equals(Object.class); curr=curr.getSuperclass()) {
          if (!curr.isSynthetic()) {
            navigateClassFields(obj,curr,visitor);
          }
        }
        visitor.endVisitingObject(obj);
      }
    }
  }
  finally {
    ancestors.pop();
  }
}","/** 
 * Navigate all the fields of the specified object. If a field is null, it does not get visited.
 */
public void accept(Visitor visitor){
  if (obj == null) {
    return;
  }
  TypeInfo objTypeInfo=new TypeInfo(objType);
  if (exclusionStrategy.shouldSkipClass(objTypeInfo.getRawClass())) {
    return;
  }
  if (ancestors.contains(obj)) {
    throw new IllegalStateException(""String_Node_Str"" + obj);
  }
  ancestors.push(obj);
  try {
    boolean visitedWithCustomHandler=visitor.visitUsingCustomHandler(obj,objType);
    if (!visitedWithCustomHandler) {
      if (objTypeInfo.isCollectionOrArray()) {
        if (objTypeInfo.isArray()) {
          visitor.visitArray(obj,objType);
        }
 else {
          visitor.visitCollection((Collection<?>)obj,objType);
        }
      }
 else       if (objTypeInfo.isEnum()) {
        visitor.visitEnum(obj,objType);
      }
 else       if (objTypeInfo.isPrimitiveOrStringAndNotAnArray()) {
        visitor.visitPrimitiveValue(obj);
      }
 else {
        visitor.startVisitingObject(obj);
        for (Class<?> curr=objTypeInfo.getRawClass(); curr != null && !curr.equals(Object.class); curr=curr.getSuperclass()) {
          if (!curr.isSynthetic()) {
            navigateClassFields(obj,curr,visitor);
          }
        }
        visitor.endVisitingObject(obj);
      }
    }
  }
  finally {
    ancestors.pop();
  }
}",0.8922268118663161
179316,"public JsonElement serialize(Foo src,Type typeOfSrc,JsonSerializationContext context){
  return context.serialize(src,typeOfSrc);
}","public JsonElement serialize(Long src,Type typeOfSrc,JsonSerializationContext context){
  customSerializerInvoked.value=true;
  return src == null ? new JsonNull() : new JsonPrimitive(src);
}",0.6708074534161491
179317,"public Long deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context) throws JsonParseException {
  customDeserializerInvoked.value=true;
  String str=json.getAsJsonPrimitive().getAsString();
  return str.length() == 0 ? null : Long.parseLong(str);
}","public Long deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context) throws JsonParseException {
  customDeserializerInvoked.value=true;
  if (json == null || json.isJsonNull()) {
    return null;
  }
 else {
    Number number=json.getAsJsonPrimitive().getAsNumber();
    return number == null ? null : number.longValue();
  }
}",0.5654281098546042
179318,"public void testCustomDeserializerForLong(){
  final ClassWithBooleanField customDeserializerInvoked=new ClassWithBooleanField();
  customDeserializerInvoked.value=false;
  Gson gson=new GsonBuilder().registerTypeAdapter(Long.class,new JsonDeserializer<Long>(){
    public Long deserialize(    JsonElement json,    Type typeOfT,    JsonDeserializationContext context) throws JsonParseException {
      customDeserializerInvoked.value=true;
      String str=json.getAsJsonPrimitive().getAsString();
      return str.length() == 0 ? null : Long.parseLong(str);
    }
  }
).create();
  String json=""String_Node_Str"";
  ClassWithWrapperLongField target=gson.fromJson(json,ClassWithWrapperLongField.class);
  assertNull(target.value);
  assertTrue(customDeserializerInvoked.value);
}","public void testCustomDeserializerForLong(){
  final ClassWithBooleanField customDeserializerInvoked=new ClassWithBooleanField();
  customDeserializerInvoked.value=false;
  Gson gson=new GsonBuilder().registerTypeAdapter(Long.class,new JsonDeserializer<Long>(){
    public Long deserialize(    JsonElement json,    Type typeOfT,    JsonDeserializationContext context) throws JsonParseException {
      customDeserializerInvoked.value=true;
      if (json == null || json.isJsonNull()) {
        return null;
      }
 else {
        Number number=json.getAsJsonPrimitive().getAsNumber();
        return number == null ? null : number.longValue();
      }
    }
  }
).create();
  String json=""String_Node_Str"";
  ClassWithWrapperLongField target=gson.fromJson(json,ClassWithWrapperLongField.class);
  assertNull(target.value);
  assertTrue(customDeserializerInvoked.value);
  customDeserializerInvoked.value=false;
  json=""String_Node_Str"";
  target=gson.fromJson(json,ClassWithWrapperLongField.class);
  assertEquals(10L,target.value.longValue());
  assertTrue(customDeserializerInvoked.value);
}",0.7549386011745862
179319,"public void visitObjectField(Field f,Type typeOfF,Object obj){
  if (isFieldNull(f,obj)) {
    if (serializeNulls) {
      addChildAsElement(f,new JsonNull());
    }
  }
 else {
    Object fieldValue=getFieldValue(f,obj);
    if (fieldValue != null && typeOfF instanceof Class) {
      Class<?> classOfF=(Class<?>)typeOfF;
      Class<?> actualClassOfF=fieldValue.getClass();
      if (classOfF.isAssignableFrom(actualClassOfF)) {
        typeOfF=actualClassOfF;
      }
    }
    addAsChildOfObject(f,typeOfF,fieldValue);
  }
}","public void visitObjectField(Field f,Type typeOfF,Object obj){
  if (isFieldNull(f,obj)) {
    if (serializeNulls) {
      addChildAsElement(f,new JsonNull());
    }
  }
 else {
    Object fieldValue=getFieldValue(f,obj);
    if (fieldValue != null && typeOfF == Object.class) {
      typeOfF=fieldValue.getClass();
    }
    addAsChildOfObject(f,typeOfF,fieldValue);
  }
}",0.7635960044395117
179320,"/** 
 * This method serializes the specified object, including those of generic types, into its equivalent Json representation. This method must be used if the specified object is a generic type. For non-generic objects, use   {@link #toJson(Object,Writer)} instead.
 * @param src the object for which JSON representation is to be created
 * @param typeOfSrc The specific genericized type of src. You can obtainthis type by using the  {@link com.google.gson.reflect.TypeToken} class. For example,to get the type for  {@code Collection<Foo>}, you should use: <pre> Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType(); </pre>
 * @param writer Writer to which the Json representation of src needs to be written.
 * @since 1.2
 */
public void toJson(Object src,Type typeOfSrc,Writer writer){
  if (src != null) {
    JsonSerializationContext context=new JsonSerializationContextDefault(navigatorFactory,serializeNulls,serializers);
    JsonElement jsonElement=context.serialize(src,typeOfSrc);
    formatter.format(jsonElement,new PrintWriter(writer),serializeNulls);
  }
 else {
    if (serializeNulls) {
      writeOutNullString(writer);
    }
  }
}","/** 
 * This method serializes the specified object, including those of generic types, into its equivalent Json representation. This method must be used if the specified object is a generic type. For non-generic objects, use   {@link #toJson(Object,Writer)} instead.
 * @param src the object for which JSON representation is to be created
 * @param typeOfSrc The specific genericized type of src. You can obtainthis type by using the  {@link com.google.gson.reflect.TypeToken} class. For example,to get the type for  {@code Collection<Foo>}, you should use: <pre> Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType(); </pre>
 * @param writer Writer to which the Json representation of src needs to be written.
 * @since 1.2
 */
public void toJson(Object src,Type typeOfSrc,Writer writer){
  if (src != null) {
    JsonSerializationContext context=new JsonSerializationContextDefault(createDefaultObjectNavigatorFactory(),serializeNulls,serializers);
    JsonElement jsonElement=context.serialize(src,typeOfSrc);
    formatter.format(jsonElement,new PrintWriter(writer),serializeNulls);
  }
 else {
    if (serializeNulls) {
      writeOutNullString(writer);
    }
  }
}",0.9902501059771088
179321,"Gson(ObjectNavigatorFactory factory,MappedObjectConstructor objectConstructor,TypeAdapter typeAdapter,JsonFormatter formatter,boolean serializeNulls,ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers){
  this.navigatorFactory=factory;
  this.objectConstructor=objectConstructor;
  this.typeAdapter=typeAdapter;
  this.formatter=formatter;
  this.serializeNulls=serializeNulls;
  this.serializers=serializers;
  this.deserializers=deserializers;
}","Gson(ExclusionStrategy strategy,FieldNamingStrategy fieldNamingPolicy,MappedObjectConstructor objectConstructor,TypeAdapter typeAdapter,JsonFormatter formatter,boolean serializeNulls,ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers){
  this.strategy=strategy;
  this.fieldNamingPolicy=fieldNamingPolicy;
  this.objectConstructor=objectConstructor;
  this.typeAdapter=typeAdapter;
  this.formatter=formatter;
  this.serializeNulls=serializeNulls;
  this.serializers=serializers;
  this.deserializers=deserializers;
}",0.8506787330316742
179322,"private static ObjectNavigatorFactory createDefaultObjectNavigatorFactory(){
  return new ObjectNavigatorFactory(createExclusionStrategy(VersionConstants.IGNORE_VERSIONS),DEFAULT_NAMING_POLICY);
}","private ObjectNavigatorFactory createDefaultObjectNavigatorFactory(){
  return new ObjectNavigatorFactory(strategy,fieldNamingPolicy);
}",0.7289156626506024
179323,"/** 
 * This method deserializes the Json read from the specified reader into an object of the specified type. This method is useful if the specified object is a generic type. For non-generic objects, use   {@link #fromJson(Reader,Class)} instead. If you have the Json in aString form instead of a  {@link Reader}, use   {@link #fromJson(String,Type)} instead.
 * @param < T > the type of the desired object
 * @param json the reader producing Json from which the object is to be deserialized
 * @param typeOfT The specific genericized type of src. You can obtain this type by using the{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for{@code Collection<Foo>}, you should use: <pre> Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType(); </pre>
 * @return an object of type T from the json
 * @throws JsonParseException if json is not a valid representation for an object of type typeOfT
 * @since 1.2
 */
@SuppressWarnings(""String_Node_Str"") public <T>T fromJson(Reader json,Type typeOfT) throws JsonParseException {
  try {
    JsonParser parser=new JsonParser(json);
    JsonElement root=parser.parse();
    JsonDeserializationContext context=new JsonDeserializationContextDefault(navigatorFactory,deserializers,objectConstructor,typeAdapter);
    T target=(T)context.deserialize(root,typeOfT);
    return target;
  }
 catch (  TokenMgrError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  ParseException e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  StackOverflowError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  OutOfMemoryError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
}","/** 
 * This method deserializes the Json read from the specified reader into an object of the specified type. This method is useful if the specified object is a generic type. For non-generic objects, use   {@link #fromJson(Reader,Class)} instead. If you have the Json in aString form instead of a  {@link Reader}, use   {@link #fromJson(String,Type)} instead.
 * @param < T > the type of the desired object
 * @param json the reader producing Json from which the object is to be deserialized
 * @param typeOfT The specific genericized type of src. You can obtain this type by using the{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for{@code Collection<Foo>}, you should use: <pre> Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType(); </pre>
 * @return an object of type T from the json
 * @throws JsonParseException if json is not a valid representation for an object of type typeOfT
 * @since 1.2
 */
@SuppressWarnings(""String_Node_Str"") public <T>T fromJson(Reader json,Type typeOfT) throws JsonParseException {
  try {
    JsonParser parser=new JsonParser(json);
    JsonElement root=parser.parse();
    JsonDeserializationContext context=new JsonDeserializationContextDefault(createDefaultObjectNavigatorFactory(),deserializers,objectConstructor,typeAdapter);
    T target=(T)context.deserialize(root,typeOfT);
    return target;
  }
 catch (  TokenMgrError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  ParseException e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  StackOverflowError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  OutOfMemoryError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
}",0.9937753721244924
179324,"/** 
 * Creates a   {@link Gson} instance based on the current configuration. This method is free ofside-effects to this  {@code GsonBuilder} instance and hence can be called multiple times.
 * @return an instance of Gson configured with the options currently set in this builder
 */
public Gson create(){
  List<ExclusionStrategy> strategies=new LinkedList<ExclusionStrategy>();
  strategies.add(innerClassExclusionStrategy);
  strategies.add(modifierBasedExclusionStrategy);
  if (ignoreVersionsAfter != VersionConstants.IGNORE_VERSIONS) {
    strategies.add(new VersionExclusionStrategy(ignoreVersionsAfter));
  }
  if (excludeFieldsWithoutExposeAnnotation) {
    strategies.add(new ExposeAnnotationBasedExclusionStrategy());
  }
  ExclusionStrategy exclusionStrategy=new DisjunctionExclusionStrategy(strategies);
  ObjectNavigatorFactory objectNavigatorFactory=new ObjectNavigatorFactory(exclusionStrategy,fieldNamingPolicy);
  ParameterizedTypeHandlerMap<JsonSerializer<?>> customSerializers=serializers.copyOf();
  ParameterizedTypeHandlerMap<JsonDeserializer<?>> customDeserializers=deserializers.copyOf();
  addTypeAdaptersForDate(datePattern,dateStyle,timeStyle,customSerializers,customDeserializers);
  customSerializers.registerIfAbsent(DefaultTypeAdapters.DEFAULT_SERIALIZERS);
  customDeserializers.registerIfAbsent(DefaultTypeAdapters.DEFAULT_DESERIALIZERS);
  ParameterizedTypeHandlerMap<InstanceCreator<?>> customInstanceCreators=instanceCreators.copyOf();
  customInstanceCreators.registerIfAbsent(DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS);
  MappedObjectConstructor objConstructor=Gson.createObjectConstructor(customInstanceCreators);
  Gson gson=new Gson(objectNavigatorFactory,objConstructor,typeAdapter,formatter,serializeNulls,customSerializers,customDeserializers);
  return gson;
}","/** 
 * Creates a   {@link Gson} instance based on the current configuration. This method is free ofside-effects to this  {@code GsonBuilder} instance and hence can be called multiple times.
 * @return an instance of Gson configured with the options currently set in this builder
 */
public Gson create(){
  List<ExclusionStrategy> strategies=new LinkedList<ExclusionStrategy>();
  strategies.add(innerClassExclusionStrategy);
  strategies.add(modifierBasedExclusionStrategy);
  if (ignoreVersionsAfter != VersionConstants.IGNORE_VERSIONS) {
    strategies.add(new VersionExclusionStrategy(ignoreVersionsAfter));
  }
  if (excludeFieldsWithoutExposeAnnotation) {
    strategies.add(new ExposeAnnotationBasedExclusionStrategy());
  }
  ExclusionStrategy exclusionStrategy=new DisjunctionExclusionStrategy(strategies);
  ParameterizedTypeHandlerMap<JsonSerializer<?>> customSerializers=serializers.copyOf();
  ParameterizedTypeHandlerMap<JsonDeserializer<?>> customDeserializers=deserializers.copyOf();
  addTypeAdaptersForDate(datePattern,dateStyle,timeStyle,customSerializers,customDeserializers);
  customSerializers.registerIfAbsent(DefaultTypeAdapters.DEFAULT_SERIALIZERS);
  customDeserializers.registerIfAbsent(DefaultTypeAdapters.DEFAULT_DESERIALIZERS);
  ParameterizedTypeHandlerMap<InstanceCreator<?>> customInstanceCreators=instanceCreators.copyOf();
  customInstanceCreators.registerIfAbsent(DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS);
  MappedObjectConstructor objConstructor=Gson.createObjectConstructor(customInstanceCreators);
  Gson gson=new Gson(exclusionStrategy,fieldNamingPolicy,objConstructor,typeAdapter,formatter,serializeNulls,customSerializers,customDeserializers);
  return gson;
}",0.9534090909090908
179325,"public void testAnonymousLocalClassesSerialization(){
  Gson gson=new Gson(new ObjectNavigatorFactory(new ModifierBasedExclusionStrategy(true,Modifier.TRANSIENT,Modifier.STATIC),Gson.DEFAULT_NAMING_POLICY));
  assertEquals(""String_Node_Str"",gson.toJson(new ClassWithNoFields(){
  }
));
}","public void testAnonymousLocalClassesSerialization(){
  Gson gson=new Gson(new ModifierBasedExclusionStrategy(true,Modifier.TRANSIENT,Modifier.STATIC),Gson.DEFAULT_NAMING_POLICY);
  assertEquals(""String_Node_Str"",gson.toJson(new ClassWithNoFields(){
  }
));
}",0.9487179487179488
179326,"public void run(){
  MyObject myObj=new MyObject();
  try {
    startLatch.await();
    for (int i=0; i < 10; i++) {
      String json=gson.toJson(myObj);
    }
  }
 catch (  Throwable t) {
    failed.set(true);
  }
 finally {
    finishedLatch.countDown();
  }
}","public void run(){
  try {
    startLatch.await();
    for (int i=0; i < 10; i++) {
      gson.fromJson(""String_Node_Str"",MyObject.class);
    }
  }
 catch (  Throwable t) {
    failed.set(true);
  }
 finally {
    finishedLatch.countDown();
  }
}",0.1215686274509803
179327,"private static void jj_la1_0(){
  jj_la1_0=new int[]{0x1d280c0,0x80,0x40000,0x1d280c0,0x40000,0x1d280c0,0x1c000c0,0x2000000,0x20,0x1000000,0x4c00,0x4c00,0x4c00};
}","private static void jj_la1_0(){
  jj_la1_0=new int[]{0x74a0340,0x300,0x100000,0x74a0340,0x100000,0x74a0340,0x7000340,0x8000000,0x20,0x4000000,0x13000,0x300,0x13000,0x13000};
}",0.7928994082840237
179328,"final private JsonPrimitive JsonPrimitive() throws ParseException {
  JsonPrimitive value;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTE:
    value=JsonString();
{
    if (true)     return value;
  }
break;
case DIGITS:
case 24:
value=JsonNumber();
{
if (true) return value;
}
break;
case 22:
jj_consume_token(22);
{
if (true) return new JsonPrimitive(true);
}
break;
case 23:
jj_consume_token(23);
{
if (true) return new JsonPrimitive(false);
}
break;
default :
jj_la1[6]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""String_Node_Str"");
}","final private JsonPrimitive JsonPrimitive() throws ParseException {
  JsonPrimitive value;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case SINGLE_QUOTE_LITERAL:
case QUOTE:
    value=JsonString();
{
    if (true)     return value;
  }
break;
case DIGITS:
case 26:
value=JsonNumber();
{
if (true) return value;
}
break;
case 24:
jj_consume_token(24);
{
if (true) return new JsonPrimitive(true);
}
break;
case 25:
jj_consume_token(25);
{
if (true) return new JsonPrimitive(false);
}
break;
default :
jj_la1[6]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""String_Node_Str"");
}",0.8023549201009251
179329,"final private JsonObject JsonObject() throws ParseException {
  JsonObject o=new JsonObject();
  jj_consume_token(15);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTE:
    Members(o);
  break;
default :
jj_la1[1]=jj_gen;
;
}
jj_consume_token(16);
{
if (true) return o;
}
throw new Error(""String_Node_Str"");
}","final private JsonObject JsonObject() throws ParseException {
  JsonObject o=new JsonObject();
  jj_consume_token(17);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case SINGLE_QUOTE_LITERAL:
case QUOTE:
    Members(o);
  break;
default :
jj_la1[1]=jj_gen;
;
}
jj_consume_token(18);
{
if (true) return o;
}
throw new Error(""String_Node_Str"");
}",0.9531013615733736
179330,"final private String JsonFrac() throws ParseException {
  String digits;
  jj_consume_token(25);
  digits=Digits();
{
    if (true)     return ""String_Node_Str"" + digits;
  }
  throw new Error(""String_Node_Str"");
}","final private String JsonFrac() throws ParseException {
  String digits;
  jj_consume_token(27);
  digits=Digits();
{
    if (true)     return ""String_Node_Str"" + digits;
  }
  throw new Error(""String_Node_Str"");
}",0.9953271028037384
179331,"final private void Elements(JsonArray array) throws ParseException {
  JsonElement element;
  element=JsonValue();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 18:
    jj_consume_token(18);
  Elements(array);
break;
default :
jj_la1[4]=jj_gen;
;
}
array.add(element);
}","final private void Elements(JsonArray array) throws ParseException {
  JsonElement element;
  element=JsonValue();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 20:
    jj_consume_token(20);
  Elements(array);
break;
default :
jj_la1[4]=jj_gen;
;
}
array.add(element);
}",0.9854545454545456
179332,"final private JsonNull JsonNull() throws ParseException {
  JsonNull json=new JsonNull();
  jj_consume_token(17);
{
    if (true)     return json;
  }
  throw new Error(""String_Node_Str"");
}","final private JsonNull JsonNull() throws ParseException {
  JsonNull json=new JsonNull();
  jj_consume_token(19);
{
    if (true)     return json;
  }
  throw new Error(""String_Node_Str"");
}",0.9947368421052633
179333,"final private char Char() throws ParseException {
  Token t;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case CHAR:
    t=jj_consume_token(CHAR);
  break;
case CNTRL_ESC:
t=jj_consume_token(CNTRL_ESC);
break;
case HEX_ESC:
t=jj_consume_token(HEX_ESC);
break;
default :
jj_la1[12]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
if (t.image.length() < 2) {
{
if (true) return t.image.charAt(0);
}
}
if (t.image.length() < 6) {
char c=t.image.charAt(1);
switch (t.image.charAt(1)) {
case 'b':
{
if (true) return (char)8;
}
break;
case 'f':
{
if (true) return (char)12;
}
break;
case 'n':
{
if (true) return (char)10;
}
break;
case 'r':
{
if (true) return (char)13;
}
break;
case 't':
{
if (true) return (char)9;
}
break;
default :
{
if (true) return c;
}
}
}
 else {
int i=Integer.valueOf(t.image.substring(2,6),16).intValue();
{
if (true) return (char)i;
}
}
throw new Error(""String_Node_Str"");
}","final private char Char() throws ParseException {
  Token t;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case CHAR:
    t=jj_consume_token(CHAR);
  break;
case CNTRL_ESC:
t=jj_consume_token(CNTRL_ESC);
break;
case HEX_ESC:
t=jj_consume_token(HEX_ESC);
break;
default :
jj_la1[13]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
if (t.image.length() < 2) {
{
if (true) return t.image.charAt(0);
}
}
if (t.image.length() < 6) {
char c=t.image.charAt(1);
switch (t.image.charAt(1)) {
case 'b':
{
if (true) return (char)8;
}
break;
case 'f':
{
if (true) return (char)12;
}
break;
case 'n':
{
if (true) return (char)10;
}
break;
case 'r':
{
if (true) return (char)13;
}
break;
case 't':
{
if (true) return (char)9;
}
break;
default :
{
if (true) return c;
}
}
}
 else {
int i=Integer.valueOf(t.image.substring(2,6),16).intValue();
{
if (true) return (char)i;
}
}
throw new Error(""String_Node_Str"");
}",0.9988998899889988
179334,"public void ReInit(JsonParserTokenManager tm){
  token_source=tm;
  token=new Token();
  jj_ntk=-1;
  jj_gen=0;
  for (int i=0; i < 13; i++)   jj_la1[i]=-1;
}","public void ReInit(JsonParserTokenManager tm){
  token_source=tm;
  token=new Token();
  jj_ntk=-1;
  jj_gen=0;
  for (int i=0; i < 14; i++)   jj_la1[i]=-1;
}",0.9936708860759492
179335,"final private void Chars(StringBuffer strbuf) throws ParseException {
  char c;
  c=Char();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case CHAR:
case CNTRL_ESC:
case HEX_ESC:
    Chars(strbuf);
  break;
default :
jj_la1[11]=jj_gen;
;
}
strbuf.insert(0,c);
}","final private void Chars(StringBuffer strbuf) throws ParseException {
  char c;
  c=Char();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case CHAR:
case CNTRL_ESC:
case HEX_ESC:
    Chars(strbuf);
  break;
default :
jj_la1[12]=jj_gen;
;
}
strbuf.insert(0,c);
}",0.9961685823754788
179336,"final private String JsonInt() throws ParseException {
  String digits;
  boolean negative=false;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 24:
    jj_consume_token(24);
  negative=true;
break;
default :
jj_la1[9]=jj_gen;
;
}
digits=Digits();
if (negative) {
if (true) return ""String_Node_Str"" + digits;
}
{
if (true) return digits;
}
throw new Error(""String_Node_Str"");
}","final private String JsonInt() throws ParseException {
  String digits;
  boolean negative=false;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 26:
    jj_consume_token(26);
  negative=true;
break;
default :
jj_la1[9]=jj_gen;
;
}
digits=Digits();
if (negative) {
if (true) return ""String_Node_Str"" + digits;
}
{
if (true) return digits;
}
throw new Error(""String_Node_Str"");
}",0.994750656167979
179337,"final private void Pair(JsonObject o) throws ParseException {
  JsonPrimitive property;
  JsonElement value;
  property=JsonString();
  jj_consume_token(19);
  value=JsonValue();
  o.add(property.getAsString(),value);
}","final private void Pair(JsonObject o) throws ParseException {
  JsonPrimitive property;
  JsonElement value;
  property=JsonString();
  jj_consume_token(21);
  value=JsonValue();
  o.add(property.getAsString(),value);
}",0.9954337899543378
179338,"public JsonParser(JsonParserTokenManager tm){
  token_source=tm;
  token=new Token();
  jj_ntk=-1;
  jj_gen=0;
  for (int i=0; i < 13; i++)   jj_la1[i]=-1;
}","public JsonParser(JsonParserTokenManager tm){
  token_source=tm;
  token=new Token();
  jj_ntk=-1;
  jj_gen=0;
  for (int i=0; i < 14; i++)   jj_la1[i]=-1;
}",0.9936305732484076
179339,"public ParseException generateParseException(){
  jj_expentries.removeAllElements();
  boolean[] la1tokens=new boolean[26];
  for (int i=0; i < 26; i++) {
    la1tokens[i]=false;
  }
  if (jj_kind >= 0) {
    la1tokens[jj_kind]=true;
    jj_kind=-1;
  }
  for (int i=0; i < 13; i++) {
    if (jj_la1[i] == jj_gen) {
      for (int j=0; j < 32; j++) {
        if ((jj_la1_0[i] & (1 << j)) != 0) {
          la1tokens[j]=true;
        }
      }
    }
  }
  for (int i=0; i < 26; i++) {
    if (la1tokens[i]) {
      jj_expentry=new int[1];
      jj_expentry[0]=i;
      jj_expentries.addElement(jj_expentry);
    }
  }
  int[][] exptokseq=new int[jj_expentries.size()][];
  for (int i=0; i < jj_expentries.size(); i++) {
    exptokseq[i]=(int[])jj_expentries.elementAt(i);
  }
  return new ParseException(token,exptokseq,tokenImage);
}","public ParseException generateParseException(){
  jj_expentries.removeAllElements();
  boolean[] la1tokens=new boolean[28];
  for (int i=0; i < 28; i++) {
    la1tokens[i]=false;
  }
  if (jj_kind >= 0) {
    la1tokens[jj_kind]=true;
    jj_kind=-1;
  }
  for (int i=0; i < 14; i++) {
    if (jj_la1[i] == jj_gen) {
      for (int j=0; j < 32; j++) {
        if ((jj_la1_0[i] & (1 << j)) != 0) {
          la1tokens[j]=true;
        }
      }
    }
  }
  for (int i=0; i < 28; i++) {
    if (la1tokens[i]) {
      jj_expentry=new int[1];
      jj_expentry[0]=i;
      jj_expentries.addElement(jj_expentry);
    }
  }
  int[][] exptokseq=new int[jj_expentries.size()][];
  for (int i=0; i < jj_expentries.size(); i++) {
    exptokseq[i]=(int[])jj_expentries.elementAt(i);
  }
  return new ParseException(token,exptokseq,tokenImage);
}",0.9951980792316928
179340,"final private JsonElement JsonValue() throws ParseException {
  JsonElement o=null;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTE:
    o=JsonString();
  break;
case DIGITS:
case 24:
o=JsonNumber();
break;
case 15:
o=JsonObject();
break;
case 20:
o=JsonArray();
break;
case 22:
jj_consume_token(22);
o=new JsonPrimitive(true);
break;
case 23:
jj_consume_token(23);
o=new JsonPrimitive(false);
break;
case 17:
jj_consume_token(17);
break;
default :
jj_la1[5]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
{
if (true) return o;
}
throw new Error(""String_Node_Str"");
}","final private JsonElement JsonValue() throws ParseException {
  JsonElement o=null;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case SINGLE_QUOTE_LITERAL:
case QUOTE:
    o=JsonString();
  break;
case DIGITS:
case 26:
o=JsonNumber();
break;
case 17:
o=JsonObject();
break;
case 22:
o=JsonArray();
break;
case 24:
jj_consume_token(24);
o=new JsonPrimitive(true);
break;
case 25:
jj_consume_token(25);
o=new JsonPrimitive(false);
break;
case 19:
jj_consume_token(19);
break;
default :
jj_la1[5]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
{
if (true) return o;
}
throw new Error(""String_Node_Str"");
}",0.8879668049792531
179341,"final public JsonElement parse() throws ParseException {
  JsonElement json=null;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 15:
    json=JsonObject();
  break;
case 20:
json=JsonArray();
break;
case DIGITS:
case QUOTE:
case 22:
case 23:
case 24:
json=JsonPrimitive();
break;
case 17:
json=JsonNull();
break;
default :
jj_la1[0]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
{
if (true) return json;
}
throw new Error(""String_Node_Str"");
}","final public JsonElement parse() throws ParseException {
  JsonElement json=null;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 17:
    json=JsonObject();
  break;
case 22:
json=JsonArray();
break;
case DIGITS:
case SINGLE_QUOTE_LITERAL:
case QUOTE:
case 24:
case 25:
case 26:
json=JsonPrimitive();
break;
case 19:
json=JsonNull();
break;
default :
jj_la1[0]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
{
if (true) return json;
}
throw new Error(""String_Node_Str"");
}",0.9272918861959958
179342,"final private JsonArray JsonArray() throws ParseException {
  JsonArray array=new JsonArray();
  jj_consume_token(20);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DIGITS:
case QUOTE:
case 15:
case 17:
case 20:
case 22:
case 23:
case 24:
    Elements(array);
  break;
default :
jj_la1[3]=jj_gen;
;
}
jj_consume_token(21);
array.reverse();
{
if (true) return array;
}
throw new Error(""String_Node_Str"");
}","final private JsonArray JsonArray() throws ParseException {
  JsonArray array=new JsonArray();
  jj_consume_token(22);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DIGITS:
case SINGLE_QUOTE_LITERAL:
case QUOTE:
case 17:
case 19:
case 22:
case 24:
case 25:
case 26:
    Elements(array);
  break;
default :
jj_la1[3]=jj_gen;
;
}
jj_consume_token(23);
array.reverse();
{
if (true) return array;
}
throw new Error(""String_Node_Str"");
}",0.8949232585596222
179343,"final private JsonPrimitive JsonNumber() throws ParseException {
  String intpart=null, fracpart=null, exppart=null;
  intpart=JsonInt();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 25:
    fracpart=JsonFrac();
  break;
default :
jj_la1[7]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case E:
exppart=JsonExp();
break;
default :
jj_la1[8]=jj_gen;
;
}
Number n;
if (exppart != null) {
n=new BigDecimal(intpart + fracpart + exppart);
}
 else if (fracpart != null) {
n=new Double(intpart + fracpart);
}
 else {
if (intpart.length() < 10) {
n=new Integer(intpart);
}
 else if (intpart.length() < 19) {
n=new Long(intpart);
}
 else {
n=new BigInteger(intpart);
}
}
{
if (true) return new JsonPrimitive(n);
}
throw new Error(""String_Node_Str"");
}","final private JsonPrimitive JsonNumber() throws ParseException {
  String intpart=null, fracpart=null, exppart=null;
  intpart=JsonInt();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 27:
    fracpart=JsonFrac();
  break;
default :
jj_la1[7]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case E:
exppart=JsonExp();
break;
default :
jj_la1[8]=jj_gen;
;
}
Number n;
if (exppart != null) {
n=new BigDecimal(intpart + fracpart + exppart);
}
 else if (fracpart != null) {
n=new Double(intpart + fracpart);
}
 else {
if (intpart.length() < 10) {
n=new Integer(intpart);
}
 else if (intpart.length() < 19) {
n=new Long(intpart);
}
 else {
n=new BigInteger(intpart);
}
}
{
if (true) return new JsonPrimitive(n);
}
throw new Error(""String_Node_Str"");
}",0.9986842105263158
179344,"final private JsonPrimitive JsonString() throws ParseException {
  StringBuffer strbuf=new StringBuffer();
  jj_consume_token(QUOTE);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case CHAR:
case CNTRL_ESC:
case HEX_ESC:
    Chars(strbuf);
  break;
default :
jj_la1[10]=jj_gen;
;
}
jj_consume_token(ENDQUOTE);
{
if (true) return new JsonPrimitive(strbuf.toString());
}
throw new Error(""String_Node_Str"");
}","final private JsonPrimitive JsonString() throws ParseException {
  StringBuffer strbuf=new StringBuffer();
  Token t;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case SINGLE_QUOTE_LITERAL:
    t=jj_consume_token(SINGLE_QUOTE_LITERAL);
  String value=t.image;
String valueWithInQuotes=value.substring(1,value.length() - 1);
{
if (true) return new JsonPrimitive(valueWithInQuotes);
}
break;
case QUOTE:
jj_consume_token(QUOTE);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case CHAR:
case CNTRL_ESC:
case HEX_ESC:
Chars(strbuf);
break;
default :
jj_la1[10]=jj_gen;
;
}
jj_consume_token(ENDQUOTE);
{
if (true) return new JsonPrimitive(strbuf.toString());
}
break;
default :
jj_la1[11]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""String_Node_Str"");
}",0.6734006734006734
179345,"final private void Members(JsonObject o) throws ParseException {
  Pair(o);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 18:
    jj_consume_token(18);
  Members(o);
break;
default :
jj_la1[2]=jj_gen;
;
}
}","final private void Members(JsonObject o) throws ParseException {
  Pair(o);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 20:
    jj_consume_token(20);
  Members(o);
break;
default :
jj_la1[2]=jj_gen;
;
}
}",0.981042654028436
179346,"public void visitObjectField(Field f,Type typeOfF,Object obj){
  if (isFieldNull(f,obj)) {
    if (serializeNulls) {
      addChildAsElement(f,new JsonNull());
    }
  }
 else {
    Object fieldValue=getFieldValue(f,obj);
    addAsChildOfObject(f,typeOfF,fieldValue);
  }
}","public void visitObjectField(Field f,Type typeOfF,Object obj){
  if (isFieldNull(f,obj)) {
    if (serializeNulls) {
      addChildAsElement(f,new JsonNull());
    }
  }
 else {
    Object fieldValue=getFieldValue(f,obj);
    if (fieldValue != null && typeOfF instanceof Class) {
      Class<?> classOfF=(Class<?>)typeOfF;
      Class<?> actualClassOfF=fieldValue.getClass();
      if (classOfF.isAssignableFrom(actualClassOfF)) {
        typeOfF=actualClassOfF;
      }
    }
    addAsChildOfObject(f,typeOfF,fieldValue);
  }
}",0.6741573033707865
179347,"public DefaultDateTypeAdapter(int style){
  this.format=DateFormat.getDateInstance(style);
}","public DefaultDateTypeAdapter(int dateStyle,int timeStyle){
  this.format=DateFormat.getDateTimeInstance(dateStyle,timeStyle);
}",0.8181818181818182
179348,"/** 
 * Configures Gson to to serialize   {@code Date} objects according to the style value provided.You can call this method or  {@link #setDateFormat(String)} multiple times, but only the lastinvocation will be used to decide the serialization format. <p>Note that this style value should be one of the predefined constants in the {@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for moreinformation on the valid style constants.</p>
 * @param style the predefined date style that date objects will be serialized/deserializedto/from
 * @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
 * @since 1.2
 */
public GsonBuilder setDateFormat(int style){
  this.dateStyle=style;
  this.datePattern=null;
  return this;
}","/** 
 * Configures Gson to to serialize   {@code Date} objects according to the style value provided.You can call this method or  {@link #setDateFormat(String)} multiple times, but only the lastinvocation will be used to decide the serialization format. <p>Note that this style value should be one of the predefined constants in the {@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for moreinformation on the valid style constants.</p>
 * @param dateStyle the predefined date style that date objects will be serialized/deserializedto/from
 * @param timeStyle the predefined style for the time portion of the date objects
 * @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern
 * @since 1.2
 */
public GsonBuilder setDateFormat(int dateStyle,int timeStyle){
  this.dateStyle=dateStyle;
  this.timeStyle=timeStyle;
  this.datePattern=null;
  return this;
}",0.9167643610785464
179349,"/** 
 * Creates a GsonBuilder instance that can be used to build Gson with various configuration settings. GsonBuilder follows the builder pattern, and it is typically used by first invoking various configuration methods to set desired options, and finally calling  {@link #create()}.
 */
public GsonBuilder(){
  ignoreVersionsAfter=VersionConstants.IGNORE_VERSIONS;
  innerClassExclusionStrategy=new InnerClassExclusionStrategy();
  modifierBasedExclusionStrategy=Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY;
  excludeFieldsWithoutExposeAnnotation=false;
  typeAdapter=Gson.DEFAULT_TYPE_ADAPTER;
  formatter=Gson.DEFAULT_JSON_FORMATTER;
  fieldNamingPolicy=Gson.DEFAULT_NAMING_POLICY;
  instanceCreators=new ParameterizedTypeHandlerMap<InstanceCreator<?>>();
  serializers=new ParameterizedTypeHandlerMap<JsonSerializer<?>>();
  deserializers=new ParameterizedTypeHandlerMap<JsonDeserializer<?>>();
  serializeNulls=false;
  dateStyle=DateFormat.DEFAULT;
}","/** 
 * Creates a GsonBuilder instance that can be used to build Gson with various configuration settings. GsonBuilder follows the builder pattern, and it is typically used by first invoking various configuration methods to set desired options, and finally calling  {@link #create()}.
 */
public GsonBuilder(){
  ignoreVersionsAfter=VersionConstants.IGNORE_VERSIONS;
  innerClassExclusionStrategy=new InnerClassExclusionStrategy();
  modifierBasedExclusionStrategy=Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY;
  excludeFieldsWithoutExposeAnnotation=false;
  typeAdapter=Gson.DEFAULT_TYPE_ADAPTER;
  formatter=Gson.DEFAULT_JSON_FORMATTER;
  fieldNamingPolicy=Gson.DEFAULT_NAMING_POLICY;
  instanceCreators=new ParameterizedTypeHandlerMap<InstanceCreator<?>>();
  serializers=new ParameterizedTypeHandlerMap<JsonSerializer<?>>();
  deserializers=new ParameterizedTypeHandlerMap<JsonDeserializer<?>>();
  serializeNulls=false;
  dateStyle=DateFormat.DEFAULT;
  timeStyle=DateFormat.DEFAULT;
}",0.9836065573770492
179350,"private static void addTypeAdaptersForDate(String datePattern,int dateStyle,ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers){
  DefaultDateTypeAdapter dateTypeAdapter=null;
  if (datePattern != null && !""String_Node_Str"".equals(datePattern.trim())) {
    dateTypeAdapter=new DefaultDateTypeAdapter(datePattern);
  }
 else   if (dateStyle != DateFormat.DEFAULT) {
    dateTypeAdapter=new DefaultDateTypeAdapter(dateStyle);
  }
  if (dateTypeAdapter != null && !serializers.hasAnyHandlerFor(Date.class) && !deserializers.hasAnyHandlerFor(Date.class)) {
    serializers.register(Date.class,dateTypeAdapter);
    deserializers.register(Date.class,dateTypeAdapter);
  }
}","private static void addTypeAdaptersForDate(String datePattern,int dateStyle,int timeStyle,ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers){
  DefaultDateTypeAdapter dateTypeAdapter=null;
  if (datePattern != null && !""String_Node_Str"".equals(datePattern.trim())) {
    dateTypeAdapter=new DefaultDateTypeAdapter(datePattern);
  }
 else   if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {
    dateTypeAdapter=new DefaultDateTypeAdapter(dateStyle,timeStyle);
  }
  if (dateTypeAdapter != null && !serializers.hasAnyHandlerFor(Date.class) && !deserializers.hasAnyHandlerFor(Date.class)) {
    serializers.register(Date.class,dateTypeAdapter);
    deserializers.register(Date.class,dateTypeAdapter);
  }
}",0.8473034437946718
179351,"/** 
 * Creates a   {@link Gson} instance based on the current configuration. This method is free ofside-effects to this  {@code GsonBuilder} instance and hence can be called multiple times.
 * @return an instance of Gson configured with the options currently set in this builder
 */
public Gson create(){
  List<ExclusionStrategy> strategies=new LinkedList<ExclusionStrategy>();
  strategies.add(innerClassExclusionStrategy);
  strategies.add(modifierBasedExclusionStrategy);
  if (ignoreVersionsAfter != VersionConstants.IGNORE_VERSIONS) {
    strategies.add(new VersionExclusionStrategy(ignoreVersionsAfter));
  }
  if (excludeFieldsWithoutExposeAnnotation) {
    strategies.add(new ExposeAnnotationBasedExclusionStrategy());
  }
  ExclusionStrategy exclusionStrategy=new DisjunctionExclusionStrategy(strategies);
  ObjectNavigatorFactory objectNavigatorFactory=new ObjectNavigatorFactory(exclusionStrategy,fieldNamingPolicy);
  ParameterizedTypeHandlerMap<JsonSerializer<?>> customSerializers=serializers.copyOf();
  ParameterizedTypeHandlerMap<JsonDeserializer<?>> customDeserializers=deserializers.copyOf();
  addTypeAdaptersForDate(datePattern,dateStyle,customSerializers,customDeserializers);
  customSerializers.registerIfAbsent(DefaultTypeAdapters.DEFAULT_SERIALIZERS);
  customDeserializers.registerIfAbsent(DefaultTypeAdapters.DEFAULT_DESERIALIZERS);
  ParameterizedTypeHandlerMap<InstanceCreator<?>> customInstanceCreators=instanceCreators.copyOf();
  customInstanceCreators.registerIfAbsent(DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS);
  MappedObjectConstructor objConstructor=Gson.createObjectConstructor(customInstanceCreators);
  Gson gson=new Gson(objectNavigatorFactory,objConstructor,typeAdapter,formatter,serializeNulls,customSerializers,customDeserializers);
  return gson;
}","/** 
 * Creates a   {@link Gson} instance based on the current configuration. This method is free ofside-effects to this  {@code GsonBuilder} instance and hence can be called multiple times.
 * @return an instance of Gson configured with the options currently set in this builder
 */
public Gson create(){
  List<ExclusionStrategy> strategies=new LinkedList<ExclusionStrategy>();
  strategies.add(innerClassExclusionStrategy);
  strategies.add(modifierBasedExclusionStrategy);
  if (ignoreVersionsAfter != VersionConstants.IGNORE_VERSIONS) {
    strategies.add(new VersionExclusionStrategy(ignoreVersionsAfter));
  }
  if (excludeFieldsWithoutExposeAnnotation) {
    strategies.add(new ExposeAnnotationBasedExclusionStrategy());
  }
  ExclusionStrategy exclusionStrategy=new DisjunctionExclusionStrategy(strategies);
  ObjectNavigatorFactory objectNavigatorFactory=new ObjectNavigatorFactory(exclusionStrategy,fieldNamingPolicy);
  ParameterizedTypeHandlerMap<JsonSerializer<?>> customSerializers=serializers.copyOf();
  ParameterizedTypeHandlerMap<JsonDeserializer<?>> customDeserializers=deserializers.copyOf();
  addTypeAdaptersForDate(datePattern,dateStyle,timeStyle,customSerializers,customDeserializers);
  customSerializers.registerIfAbsent(DefaultTypeAdapters.DEFAULT_SERIALIZERS);
  customDeserializers.registerIfAbsent(DefaultTypeAdapters.DEFAULT_DESERIALIZERS);
  ParameterizedTypeHandlerMap<InstanceCreator<?>> customInstanceCreators=instanceCreators.copyOf();
  customInstanceCreators.registerIfAbsent(DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS);
  MappedObjectConstructor objConstructor=Gson.createObjectConstructor(customInstanceCreators);
  Gson gson=new Gson(objectNavigatorFactory,objConstructor,typeAdapter,formatter,serializeNulls,customSerializers,customDeserializers);
  return gson;
}",0.997229916897507
179352,"public void testDefaultDateSerialization(){
  Date now=new Date();
  String json=gson.toJson(now);
  assertEquals(""String_Node_Str"" + DateFormat.getDateInstance().format(now) + ""String_Node_Str"",json);
}","public void testDefaultDateSerialization(){
  Date now=new Date();
  String json=gson.toJson(now);
  assertEquals(""String_Node_Str"" + DateFormat.getDateTimeInstance().format(now) + ""String_Node_Str"",json);
}",0.9902439024390244
179353,"public void testDateSerializationWithPattern() throws Exception {
  String pattern=""String_Node_Str"";
  DateFormat formatter=new SimpleDateFormat(pattern);
  Gson gson=new GsonBuilder().setDateFormat(DateFormat.LONG).setDateFormat(pattern).create();
  Date now=new Date();
  String json=gson.toJson(now);
  assertEquals(""String_Node_Str"" + formatter.format(now) + ""String_Node_Str"",json);
}","public void testDateSerializationWithPattern() throws Exception {
  String pattern=""String_Node_Str"";
  DateFormat formatter=new SimpleDateFormat(pattern);
  Gson gson=new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create();
  Date now=new Date();
  String json=gson.toJson(now);
  assertEquals(""String_Node_Str"" + formatter.format(now) + ""String_Node_Str"",json);
}",0.9923076923076924
179354,"public void testDefaultDateDeserialization(){
  Date date=new Date();
  assertEquals(date,gson.fromJson(gson.toJson(date),Date.class));
}","public void testDefaultDateDeserialization(){
  Date date=new Date();
  String json=gson.toJson(date);
  Date extracted=gson.fromJson(json,Date.class);
  assertEquals(date.toString(),extracted.toString());
}",0.5523255813953488
179355,"public void testDateDeserializationWithPattern() throws Exception {
  String pattern=""String_Node_Str"";
  DateFormat formatter=new SimpleDateFormat(pattern);
  Gson gson=new GsonBuilder().setDateFormat(DateFormat.LONG).setDateFormat(pattern).create();
  Date now=new Date();
  String json=gson.toJson(now);
  assertEquals(now,gson.fromJson(json,Date.class));
}","@SuppressWarnings(""String_Node_Str"") public void testDateDeserializationWithPattern() throws Exception {
  String pattern=""String_Node_Str"";
  DateFormat formatter=new SimpleDateFormat(pattern);
  Gson gson=new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create();
  Date now=new Date();
  String json=gson.toJson(now);
  Date extracted=gson.fromJson(json,Date.class);
  assertEquals(now.getYear(),extracted.getYear());
  assertEquals(now.getMonth(),extracted.getMonth());
  assertEquals(now.getDay(),extracted.getDay());
}",0.7254685777287762
179356,"public void testDefaultDateSerializationUsingBuilder() throws Exception {
  Gson gson=new GsonBuilder().create();
  Date now=new Date();
  String json=gson.toJson(now);
  assertEquals(""String_Node_Str"" + DateFormat.getDateInstance().format(now) + ""String_Node_Str"",json);
}","public void testDefaultDateSerializationUsingBuilder() throws Exception {
  Gson gson=new GsonBuilder().create();
  Date now=new Date();
  String json=gson.toJson(now);
  assertEquals(""String_Node_Str"" + DateFormat.getDateTimeInstance().format(now) + ""String_Node_Str"",json);
}",0.9927272727272728
179357,"public void testDefaultDateDeserializationUsingBuilder() throws Exception {
  Gson gson=new GsonBuilder().create();
  Date now=new Date();
  String json=gson.toJson(now);
  assertEquals(now,gson.fromJson(json,Date.class));
}","public void testDefaultDateDeserializationUsingBuilder() throws Exception {
  Gson gson=new GsonBuilder().create();
  Date now=new Date();
  String json=gson.toJson(now);
  Date extracted=gson.fromJson(json,Date.class);
  assertEquals(now.toString(),extracted.toString());
}",0.7831325301204819
179358,"public void visitPrimitiveField(Field f,Type typeOfF,Object obj){
  if (!isFieldNull(f,obj)) {
    TypeInfo typeInfo=new TypeInfo(typeOfF);
    if (typeInfo.isPrimitiveOrStringAndNotAnArray()) {
      Object fieldValue=getFieldValue(f,obj);
      addAsChildOfObject(f,typeOfF,fieldValue);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
}","public void visitPrimitiveField(Field f,Type typeOfF,Object obj){
  if (isFieldNull(f,obj)) {
    if (serializeNulls) {
      addChildAsElement(f,new JsonNull());
    }
  }
 else {
    TypeInfo typeInfo=new TypeInfo(typeOfF);
    if (typeInfo.isPrimitiveOrStringAndNotAnArray()) {
      Object fieldValue=getFieldValue(f,obj);
      addAsChildOfObject(f,typeOfF,fieldValue);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
}",0.8947368421052632
179359,"public void visitArrayField(Field f,Type typeOfF,Object obj){
  if (!isFieldNull(f,obj)) {
    Object array=getFieldValue(f,obj);
    addAsChildOfObject(f,typeOfF,array);
  }
}","public void visitArrayField(Field f,Type typeOfF,Object obj){
  if (isFieldNull(f,obj)) {
    if (serializeNulls) {
      addChildAsElement(f,new JsonNull());
    }
  }
 else {
    Object array=getFieldValue(f,obj);
    addAsChildOfObject(f,typeOfF,array);
  }
}",0.7990867579908676
179360,"public void visitCollectionField(Field f,Type typeOfF,Object obj){
  if (!isFieldNull(f,obj)) {
    if (typeOfF == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    Object collection=getFieldValue(f,obj);
    addAsChildOfObject(f,typeOfF,collection);
  }
}","public void visitCollectionField(Field f,Type typeOfF,Object obj){
  if (isFieldNull(f,obj)) {
    if (serializeNulls) {
      addChildAsElement(f,new JsonNull());
    }
  }
 else {
    if (typeOfF == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    Object collection=getFieldValue(f,obj);
    addAsChildOfObject(f,typeOfF,collection);
  }
}",0.8625
179361,"/** 
 * This method deserializes the Json read from the specified reader into an object of the specified type. This method is useful if the specified object is a generic type. For non-generic objects, use   {@link #fromJson(Reader,Class)} instead. If you have the Json in aString form instead of a  {@link Reader}, use   {@link #fromJson(String,Type)} instead.
 * @param json the reader producing Json from which the object is to be deserialized.
 * @param typeOfT The specific genericized type of src. You can obtain this type by using the{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for{@code Collection<Foo>}, you should use: <pre> Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType(); </pre>
 * @param < T > the type of the desired object.
 * @return an object of type T from the json.
 * @throws JsonParseException if json is not a valid representation for an object of type typeOfT.
 */
@SuppressWarnings(""String_Node_Str"") public <T>T fromJson(Reader json,Type typeOfT) throws JsonParseException {
  try {
    JsonParser parser=new JsonParser(json);
    JsonElement root=parser.parse();
    JsonDeserializationContext context=new JsonDeserializationContextDefault(navigatorFactory,deserializers,objectConstructor,typeAdapter);
    T target=(T)context.deserialize(root,typeOfT);
    return target;
  }
 catch (  TokenMgrError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  ParseException e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  StackOverflowError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  OutOfMemoryError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
}","/** 
 * This method deserializes the Json read from the specified reader into an object of the specified type. This method is useful if the specified object is a generic type. For non-generic objects, use   {@link #fromJson(Reader,Class)} instead. If you have the Json in aString form instead of a  {@link Reader}, use   {@link #fromJson(String,Type)} instead.
 * @param json the reader producing Json from which the object is to be deserialized.
 * @param typeOfT The specific genericized type of src. You can obtain this type by using the{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for{@code Collection<Foo>}, you should use: <pre> Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType(); </pre>
 * @param < T > the type of the desired object.
 * @return an object of type T from the json.
 * @throws JsonParseException if json is not a valid representation for an object of type typeOfT.
 */
@SuppressWarnings(""String_Node_Str"") public <T>T fromJson(Reader json,Type typeOfT) throws JsonParseException {
  try {
    JsonParser parser=new JsonParser(json);
    JsonElement root=parser.parse();
    if (root == null) {
      return null;
    }
    JsonDeserializationContext context=new JsonDeserializationContextDefault(navigatorFactory,deserializers,objectConstructor,typeAdapter);
    T target=(T)context.deserialize(root,typeOfT);
    return target;
  }
 catch (  TokenMgrError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  ParseException e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  StackOverflowError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  OutOfMemoryError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
}",0.9867674858223062
179362,"private static void jj_la1_0(){
  jj_la1_0=new int[]{0x16880c0,0x80,0x20000,0x1e880c0,0x20000,0x1e880c0,0x16000c0,0x2000000,0x20,0x1000000,0x4c00,0x4c00,0x4c00};
}","private static void jj_la1_0(){
  jj_la1_0=new int[]{0x1d180c0,0x80,0x40000,0x1d180c0,0x40000,0x1d180c0,0x1c000c0,0x2000000,0x20,0x1000000,0x4c00,0x4c00,0x4c00};
}",0.9447852760736196
179363,"final private JsonPrimitive JsonPrimitive() throws ParseException {
  JsonPrimitive value;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTE:
    value=JsonString();
{
    if (true)     return value;
  }
break;
case DIGITS:
case 24:
value=JsonNumber();
{
if (true) return value;
}
break;
case 21:
jj_consume_token(21);
{
if (true) return new JsonPrimitive(true);
}
break;
case 22:
jj_consume_token(22);
{
if (true) return new JsonPrimitive(false);
}
break;
default :
jj_la1[6]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""String_Node_Str"");
}","final private JsonPrimitive JsonPrimitive() throws ParseException {
  JsonPrimitive value;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTE:
    value=JsonString();
{
    if (true)     return value;
  }
break;
case DIGITS:
case 24:
value=JsonNumber();
{
if (true) return value;
}
break;
case 22:
jj_consume_token(22);
{
if (true) return new JsonPrimitive(true);
}
break;
case 23:
jj_consume_token(23);
{
if (true) return new JsonPrimitive(false);
}
break;
default :
jj_la1[6]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""String_Node_Str"");
}",0.9242685025817556
179364,"final private JsonObject JsonObject() throws ParseException {
  JsonObject o=new JsonObject();
  jj_consume_token(15);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTE:
    Members(o);
  break;
default :
jj_la1[1]=jj_gen;
;
}
jj_consume_token(16);
{
if (true) return o;
}
throw new Error(""String_Node_Str"");
}","final private JsonObject JsonObject() throws ParseException {
  JsonObject o=new JsonObject();
  jj_consume_token(16);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTE:
    Members(o);
  break;
default :
jj_la1[1]=jj_gen;
;
}
jj_consume_token(17);
{
if (true) return o;
}
throw new Error(""String_Node_Str"");
}",0.9936908517350158
179365,"final private void Elements(JsonArray array) throws ParseException {
  JsonElement element;
  element=JsonValue();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 17:
    jj_consume_token(17);
  Elements(array);
break;
default :
jj_la1[4]=jj_gen;
;
}
array.add(element);
}","final private void Elements(JsonArray array) throws ParseException {
  JsonElement element;
  element=JsonValue();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 18:
    jj_consume_token(18);
  Elements(array);
break;
default :
jj_la1[4]=jj_gen;
;
}
array.add(element);
}",0.9927272727272728
179366,"final private void Pair(JsonObject o) throws ParseException {
  JsonPrimitive property;
  JsonElement value;
  property=JsonString();
  jj_consume_token(18);
  value=JsonValue();
  o.add(property.getAsString(),value);
}","final private void Pair(JsonObject o) throws ParseException {
  JsonPrimitive property;
  JsonElement value;
  property=JsonString();
  jj_consume_token(19);
  value=JsonValue();
  o.add(property.getAsString(),value);
}",0.9954337899543378
179367,"final private JsonElement JsonValue() throws ParseException {
  JsonElement o=null;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTE:
    o=JsonString();
  break;
case DIGITS:
case 24:
o=JsonNumber();
break;
case 15:
o=JsonObject();
break;
case 19:
o=JsonArray();
break;
case 21:
jj_consume_token(21);
o=new JsonPrimitive(true);
break;
case 22:
jj_consume_token(22);
o=new JsonPrimitive(false);
break;
case 23:
jj_consume_token(23);
break;
default :
jj_la1[5]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
{
if (true) return o;
}
throw new Error(""String_Node_Str"");
}","final private JsonElement JsonValue() throws ParseException {
  JsonElement o=null;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTE:
    o=JsonString();
  break;
case DIGITS:
case 24:
o=JsonNumber();
break;
case 16:
o=JsonObject();
break;
case 20:
o=JsonArray();
break;
case 22:
jj_consume_token(22);
o=new JsonPrimitive(true);
break;
case 23:
jj_consume_token(23);
o=new JsonPrimitive(false);
break;
case 15:
jj_consume_token(15);
break;
default :
jj_la1[5]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
{
if (true) return o;
}
throw new Error(""String_Node_Str"");
}",0.6400679117147708
179368,"final public JsonElement parse() throws ParseException {
  JsonElement json;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 15:
    json=JsonObject();
  break;
case 19:
json=JsonArray();
break;
case DIGITS:
case QUOTE:
case 21:
case 22:
case 24:
json=JsonPrimitive();
break;
default :
jj_la1[0]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
{
if (true) return json;
}
throw new Error(""String_Node_Str"");
}","final public JsonElement parse() throws ParseException {
  JsonElement json=null;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 16:
    json=JsonObject();
  break;
case 20:
json=JsonArray();
break;
case DIGITS:
case QUOTE:
case 22:
case 23:
case 24:
json=JsonPrimitive();
break;
case 15:
jj_consume_token(15);
break;
default :
jj_la1[0]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
{
if (true) return json;
}
throw new Error(""String_Node_Str"");
}",0.9268841394825648
179369,"final private JsonArray JsonArray() throws ParseException {
  JsonArray array=new JsonArray();
  jj_consume_token(19);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DIGITS:
case QUOTE:
case 15:
case 19:
case 21:
case 22:
case 23:
case 24:
    Elements(array);
  break;
default :
jj_la1[3]=jj_gen;
;
}
jj_consume_token(20);
array.reverse();
{
if (true) return array;
}
throw new Error(""String_Node_Str"");
}","final private JsonArray JsonArray() throws ParseException {
  JsonArray array=new JsonArray();
  jj_consume_token(20);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DIGITS:
case QUOTE:
case 15:
case 16:
case 20:
case 22:
case 23:
case 24:
    Elements(array);
  break;
default :
jj_la1[3]=jj_gen;
;
}
jj_consume_token(21);
array.reverse();
{
if (true) return array;
}
throw new Error(""String_Node_Str"");
}",0.9682926829268292
179370,"final private void Members(JsonObject o) throws ParseException {
  Pair(o);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 17:
    jj_consume_token(17);
  Members(o);
break;
default :
jj_la1[2]=jj_gen;
;
}
}","final private void Members(JsonObject o) throws ParseException {
  Pair(o);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 18:
    jj_consume_token(18);
  Members(o);
break;
default :
jj_la1[2]=jj_gen;
;
}
}",0.990521327014218
179371,"private final int jjMoveStringLiteralDfa2_0(long old0,long active0){
  if (((active0&=old0)) == 0L)   return jjStartNfa_0(0,old0);
  try {
    curChar=input_stream.readChar();
  }
 catch (  java.io.IOException e) {
    jjStopStringLiteralDfa_0(1,active0);
    return 2;
  }
switch (curChar) {
case 108:
    return jjMoveStringLiteralDfa3_0(active0,0xc00000L);
case 117:
  return jjMoveStringLiteralDfa3_0(active0,0x200000L);
default :
break;
}
return jjStartNfa_0(1,active0);
}","private final int jjMoveStringLiteralDfa2_0(long old0,long active0){
  if (((active0&=old0)) == 0L)   return jjStartNfa_0(0,old0);
  try {
    curChar=input_stream.readChar();
  }
 catch (  java.io.IOException e) {
    jjStopStringLiteralDfa_0(1,active0);
    return 2;
  }
switch (curChar) {
case 108:
    return jjMoveStringLiteralDfa3_0(active0,0x808000L);
case 117:
  return jjMoveStringLiteralDfa3_0(active0,0x400000L);
default :
break;
}
return jjStartNfa_0(1,active0);
}",0.9916142557651992
179372,"private final int jjMoveStringLiteralDfa1_0(long active0){
  try {
    curChar=input_stream.readChar();
  }
 catch (  java.io.IOException e) {
    jjStopStringLiteralDfa_0(0,active0);
    return 1;
  }
switch (curChar) {
case 97:
    return jjMoveStringLiteralDfa2_0(active0,0x400000L);
case 114:
  return jjMoveStringLiteralDfa2_0(active0,0x200000L);
case 117:
return jjMoveStringLiteralDfa2_0(active0,0x800000L);
default :
break;
}
return jjStartNfa_0(0,active0);
}","private final int jjMoveStringLiteralDfa1_0(long active0){
  try {
    curChar=input_stream.readChar();
  }
 catch (  java.io.IOException e) {
    jjStopStringLiteralDfa_0(0,active0);
    return 1;
  }
switch (curChar) {
case 97:
    return jjMoveStringLiteralDfa2_0(active0,0x800000L);
case 114:
  return jjMoveStringLiteralDfa2_0(active0,0x400000L);
case 117:
return jjMoveStringLiteralDfa2_0(active0,0x8000L);
default :
break;
}
return jjStartNfa_0(0,active0);
}",0.9935622317596566
179373,"private final int jjMoveStringLiteralDfa4_0(long old0,long active0){
  if (((active0&=old0)) == 0L)   return jjStartNfa_0(2,old0);
  try {
    curChar=input_stream.readChar();
  }
 catch (  java.io.IOException e) {
    jjStopStringLiteralDfa_0(3,active0);
    return 4;
  }
switch (curChar) {
case 101:
    if ((active0 & 0x400000L) != 0L)     return jjStopAtPos(4,22);
  break;
default :
break;
}
return jjStartNfa_0(3,active0);
}","private final int jjMoveStringLiteralDfa4_0(long old0,long active0){
  if (((active0&=old0)) == 0L)   return jjStartNfa_0(2,old0);
  try {
    curChar=input_stream.readChar();
  }
 catch (  java.io.IOException e) {
    jjStopStringLiteralDfa_0(3,active0);
    return 4;
  }
switch (curChar) {
case 101:
    if ((active0 & 0x800000L) != 0L)     return jjStopAtPos(4,23);
  break;
default :
break;
}
return jjStartNfa_0(3,active0);
}",0.9953596287703016
179374,"private final int jjMoveStringLiteralDfa3_0(long old0,long active0){
  if (((active0&=old0)) == 0L)   return jjStartNfa_0(1,old0);
  try {
    curChar=input_stream.readChar();
  }
 catch (  java.io.IOException e) {
    jjStopStringLiteralDfa_0(2,active0);
    return 3;
  }
switch (curChar) {
case 101:
    if ((active0 & 0x200000L) != 0L)     return jjStopAtPos(3,21);
  break;
case 108:
if ((active0 & 0x800000L) != 0L) return jjStopAtPos(3,23);
break;
case 115:
return jjMoveStringLiteralDfa4_0(active0,0x400000L);
default :
break;
}
return jjStartNfa_0(2,active0);
}","private final int jjMoveStringLiteralDfa3_0(long old0,long active0){
  if (((active0&=old0)) == 0L)   return jjStartNfa_0(1,old0);
  try {
    curChar=input_stream.readChar();
  }
 catch (  java.io.IOException e) {
    jjStopStringLiteralDfa_0(2,active0);
    return 3;
  }
switch (curChar) {
case 101:
    if ((active0 & 0x400000L) != 0L)     return jjStopAtPos(3,22);
  break;
case 108:
if ((active0 & 0x8000L) != 0L) return jjStopAtPos(3,15);
break;
case 115:
return jjMoveStringLiteralDfa4_0(active0,0x800000L);
default :
break;
}
return jjStartNfa_0(2,active0);
}",0.9894551845342706
179375,"private final int jjMoveStringLiteralDfa0_0(){
switch (curChar) {
case 34:
    return jjStopAtPos(0,7);
case 44:
  return jjStopAtPos(0,17);
case 45:
return jjStopAtPos(0,24);
case 46:
return jjStopAtPos(0,25);
case 58:
return jjStopAtPos(0,18);
case 91:
return jjStopAtPos(0,19);
case 93:
return jjStopAtPos(0,20);
case 102:
return jjMoveStringLiteralDfa1_0(0x400000L);
case 110:
return jjMoveStringLiteralDfa1_0(0x800000L);
case 116:
return jjMoveStringLiteralDfa1_0(0x200000L);
case 123:
return jjStopAtPos(0,15);
case 125:
return jjStopAtPos(0,16);
default :
return jjMoveNfa_0(0,0);
}
}","private final int jjMoveStringLiteralDfa0_0(){
switch (curChar) {
case 34:
    return jjStopAtPos(0,7);
case 44:
  return jjStopAtPos(0,18);
case 45:
return jjStopAtPos(0,24);
case 46:
return jjStopAtPos(0,25);
case 58:
return jjStopAtPos(0,19);
case 91:
return jjStopAtPos(0,20);
case 93:
return jjStopAtPos(0,21);
case 102:
return jjMoveStringLiteralDfa1_0(0x800000L);
case 110:
return jjMoveStringLiteralDfa1_0(0x8000L);
case 116:
return jjMoveStringLiteralDfa1_0(0x400000L);
case 123:
return jjStopAtPos(0,16);
case 125:
return jjStopAtPos(0,17);
default :
return jjMoveNfa_0(0,0);
}
}",0.8728813559322034
179376,"/** 
 * Creates a   {@link Gson} instance based on the current configuration. This method is free ofside-effects to the GsonBuilder and hence can be called multiple times.
 * @return an instance of Gson configured with the options currently set in this builder.
 */
public Gson create(){
  List<ExclusionStrategy> strategies=new LinkedList<ExclusionStrategy>();
  strategies.add(innerClassExclusionStrategy);
  strategies.add(modifierBasedExclusionStrategy);
  if (ignoreVersionsAfter != VersionConstants.IGNORE_VERSIONS) {
    strategies.add(new VersionExclusionStrategy(ignoreVersionsAfter));
  }
  if (excludeFieldsWithoutExposeAnnotation) {
    strategies.add(new ExposeAnnotationBasedExclusionStrategy());
  }
  ExclusionStrategy exclusionStrategy=new DisjunctionExclusionStrategy(strategies);
  ObjectNavigatorFactory objectNavigatorFactory=new ObjectNavigatorFactory(exclusionStrategy,fieldNamingPolicy);
  ParameterizedTypeHandlerMap<JsonSerializer<?>> customSerializers=serializers.copyOf();
  ParameterizedTypeHandlerMap<JsonDeserializer<?>> customDeserializers=deserializers.copyOf();
  addTypeAdaptersForDate(datePattern,dateStyle,customSerializers,customDeserializers);
  customSerializers.addIfAbsent(DefaultJsonSerializers.getDefaultSerializers());
  customDeserializers.addIfAbsent(DefaultJsonDeserializers.getDefaultDeserializers());
  ParameterizedTypeHandlerMap<InstanceCreator<?>> customInstanceCreators=instanceCreators.copyOf();
  customInstanceCreators.addIfAbsent(DefaultInstanceCreators.getDefaultInstanceCreators());
  MappedObjectConstructor objConstructor=Gson.createObjectConstructor(customInstanceCreators);
  Gson gson=new Gson(objectNavigatorFactory,objConstructor,typeAdapter,formatter,serializeNulls,customSerializers,customDeserializers);
  return gson;
}","/** 
 * Creates a   {@link Gson} instance based on the current configuration. This method is free ofside-effects to the GsonBuilder and hence can be called multiple times.
 * @return an instance of Gson configured with the options currently set in this builder.
 */
public Gson create(){
  List<ExclusionStrategy> strategies=new LinkedList<ExclusionStrategy>();
  strategies.add(innerClassExclusionStrategy);
  strategies.add(modifierBasedExclusionStrategy);
  if (ignoreVersionsAfter != VersionConstants.IGNORE_VERSIONS) {
    strategies.add(new VersionExclusionStrategy(ignoreVersionsAfter));
  }
  if (excludeFieldsWithoutExposeAnnotation) {
    strategies.add(new ExposeAnnotationBasedExclusionStrategy());
  }
  ExclusionStrategy exclusionStrategy=new DisjunctionExclusionStrategy(strategies);
  ObjectNavigatorFactory objectNavigatorFactory=new ObjectNavigatorFactory(exclusionStrategy,fieldNamingPolicy);
  ParameterizedTypeHandlerMap<JsonSerializer<?>> customSerializers=serializers.copyOf();
  ParameterizedTypeHandlerMap<JsonDeserializer<?>> customDeserializers=deserializers.copyOf();
  addTypeAdaptersForDate(datePattern,dateStyle,customSerializers,customDeserializers);
  customSerializers.addIfAbsent(DefaultTypeAdapters.getDefaultSerializers());
  customDeserializers.addIfAbsent(DefaultTypeAdapters.getDefaultDeserializers());
  ParameterizedTypeHandlerMap<InstanceCreator<?>> customInstanceCreators=instanceCreators.copyOf();
  customInstanceCreators.addIfAbsent(DefaultTypeAdapters.getDefaultInstanceCreators());
  MappedObjectConstructor objConstructor=Gson.createObjectConstructor(customInstanceCreators);
  Gson gson=new Gson(objectNavigatorFactory,objConstructor,typeAdapter,formatter,serializeNulls,customSerializers,customDeserializers);
  return gson;
}",0.9809417040358744
179377,"/** 
 * This method deserializes the Json read from the specified reader into an object of the specified type. This method is useful if the specified object is a generic type. For non-generic objects, use   {@link #fromJson(Reader,Class)} instead. If you have the Json in aString form instead of a  {@link Reader}, use   {@link #fromJson(String,Type)} instead.
 * @param json the reader producing Json from which the object is to be deserialized.
 * @param typeOfT The specific genericized type of src. You can obtain this type by using the{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for{@code Collection<Foo>}, you should use: <pre> Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType(); </pre>
 * @param < T > the type of the desired object.
 * @return an object of type T from the json.
 * @throws JsonParseException if json is not a valid representation for an object of type typeOfT.
 */
@SuppressWarnings(""String_Node_Str"") public <T>T fromJson(Reader json,Type typeOfT) throws JsonParseException {
  try {
    JsonParser parser=new JsonParser(json);
    JsonElement root=parser.parse();
    JsonDeserializationContext context=new JsonDeserializationContextDefault(navigatorFactory,deserializers,objectConstructor,typeAdapter);
    T target=(T)context.deserialize(root,typeOfT);
    return target;
  }
 catch (  TokenMgrError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  ParseException e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  StackOverflowError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  OutOfMemoryError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
}","/** 
 * This method deserializes the Json read from the specified reader into an object of the specified type. This method is useful if the specified object is a generic type. For non-generic objects, use   {@link #fromJson(Reader,Class)} instead. If you have the Json in aString form instead of a  {@link Reader}, use   {@link #fromJson(String,Type)} instead.
 * @param json the reader producing Json from which the object is to be deserialized.
 * @param typeOfT The specific genericized type of src. You can obtain this type by using the{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for{@code Collection<Foo>}, you should use: <pre> Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType(); </pre>
 * @param < T > the type of the desired object.
 * @return an object of type T from the json.
 * @throws JsonParseException if json is not a valid representation for an object of type typeOfT.
 */
@SuppressWarnings(""String_Node_Str"") public <T>T fromJson(Reader json,Type typeOfT) throws JsonParseException {
  try {
    JsonParser parser=new JsonParser(json);
    JsonElement root=parser.parse();
    JsonDeserializationContext context=new JsonDeserializationContextDefault(navigatorFactory,deserializers,objectConstructor,typeAdapter);
    T target=(T)context.deserialize(root,typeOfT);
    return target;
  }
 catch (  TokenMgrError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  ParseException e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  StackOverflowError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  OutOfMemoryError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  NumberFormatException e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
}",0.9676906779661016
179378,"/** 
 * convenience method to get this element as a   {@link BigInteger}.
 * @return get this element as a {@link BigInteger}.
 * @throws ClassCastException if the value contained is not a valid {@link BigInteger}.
 */
@Override public BigInteger getAsBigInteger(){
  return (BigInteger)value;
}","/** 
 * convenience method to get this element as a   {@link BigInteger}.
 * @return get this element as a {@link BigInteger}.
 * @throws NumberFormatException if the value contained is not a valid {@link BigInteger}.
 */
@Override public BigInteger getAsBigInteger(){
  if (value instanceof BigInteger) {
    return (BigInteger)value;
  }
 else {
    return new BigInteger(value.toString());
  }
}",0.8253968253968254
179379,"/** 
 * convenience method to get this element as a   {@link BigDecimal}.
 * @return get this element as a {@link BigDecimal}.
 * @throws ClassCastException if the value contained is not a valid {@link BigDecimal}.
 */
@Override public BigDecimal getAsBigDecimal(){
  return (BigDecimal)value;
}","/** 
 * convenience method to get this element as a   {@link BigDecimal}.
 * @return get this element as a {@link BigDecimal}.
 * @throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.
 */
@Override public BigDecimal getAsBigDecimal(){
  if (value instanceof BigDecimal) {
    return (BigDecimal)value;
  }
 else {
    return new BigDecimal(value.toString());
  }
}",0.8253968253968254
179380,"private final int jjMoveNfa_3(int startState,int curPos){
  int[] nextStates;
  int startsAt=0;
  jjnewStateCnt=4;
  int i=1;
  jjstateSet[0]=startState;
  int j, kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      MatchLoop:       do {
switch (jjstateSet[--i]) {
case 0:
          if ((0x3ff000000000000L & l) != 0L)           jjstateSet[jjnewStateCnt++]=1;
        break;
case 1:
      if ((0x3ff000000000000L & l) != 0L)       jjstateSet[jjnewStateCnt++]=2;
    break;
case 2:
  if ((0x3ff000000000000L & l) != 0L)   jjstateSet[jjnewStateCnt++]=3;
break;
case 3:
if ((0x3ff000000000000L & l) != 0L && kind > 14) kind=14;
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 0:
if ((0x7e0000007eL & l) != 0L) jjstateSet[jjnewStateCnt++]=1;
break;
case 1:
if ((0x7e0000007eL & l) != 0L) jjstateSet[jjnewStateCnt++]=2;
break;
case 2:
if ((0x7e0000007eL & l) != 0L) jjstateSet[jjnewStateCnt++]=3;
break;
case 3:
if ((0x7e0000007eL & l) != 0L && kind > 14) kind=14;
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=4 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}","private final int jjMoveNfa_3(int startState,int curPos){
  int[] nextStates;
  int startsAt=0;
  jjnewStateCnt=4;
  int i=1;
  jjstateSet[0]=startState;
  int j, kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      MatchLoop:       do {
switch (jjstateSet[--i]) {
case 0:
          if ((0x3ff000000000000L & l) != 0L)           jjstateSet[jjnewStateCnt++]=1;
        break;
case 1:
      if ((0x3ff000000000000L & l) != 0L)       jjstateSet[jjnewStateCnt++]=2;
    break;
case 2:
  if ((0x3ff000000000000L & l) != 0L)   jjstateSet[jjnewStateCnt++]=3;
break;
case 3:
if ((0x3ff000000000000L & l) != 0L && kind > 14) kind=14;
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 0:
if ((0x7e0000007eL & l) != 0L) jjstateSet[jjnewStateCnt++]=1;
break;
case 1:
if ((0x7e0000007eL & l) != 0L) jjstateSet[jjnewStateCnt++]=2;
break;
case 2:
if ((0x7e0000007eL & l) != 0L) jjstateSet[jjnewStateCnt++]=3;
break;
case 3:
if ((0x7e0000007eL & l) != 0L && kind > 14) kind=14;
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int hiByte=(int)(curChar >> 8);
int i1=hiByte >> 6;
long l1=1L << (hiByte & 077);
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=4 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}",0.975682087781732
179381,"private final int jjMoveNfa_1(int startState,int curPos){
  int[] nextStates;
  int startsAt=0;
  jjnewStateCnt=2;
  int i=1;
  jjstateSet[0]=startState;
  int j, kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      MatchLoop:       do {
switch (jjstateSet[--i]) {
case 0:
          if ((0xfffffffbffffffffL & l) != 0L) {
            if (kind > 10)             kind=10;
          }
 else           if (curChar == 34) {
            if (kind > 9)             kind=9;
          }
        break;
case 1:
      if ((0xfffffffbffffffffL & l) != 0L)       kind=10;
    break;
default :
  break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 0:
if ((0xffffffffefffffffL & l) != 0L) kind=10;
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 0:
if ((jjbitVec0[i2] & l2) != 0L && kind > 10) kind=10;
break;
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=2 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}","private final int jjMoveNfa_1(int startState,int curPos){
  int[] nextStates;
  int startsAt=0;
  jjnewStateCnt=2;
  int i=1;
  jjstateSet[0]=startState;
  int j, kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      MatchLoop:       do {
switch (jjstateSet[--i]) {
case 0:
          if ((0xfffffffbffffffffL & l) != 0L) {
            if (kind > 10)             kind=10;
          }
 else           if (curChar == 34) {
            if (kind > 9)             kind=9;
          }
        break;
case 1:
      if ((0xfffffffbffffffffL & l) != 0L)       kind=10;
    break;
default :
  break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 0:
if ((0xffffffffefffffffL & l) != 0L) kind=10;
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int hiByte=(int)(curChar >> 8);
int i1=hiByte >> 6;
long l1=1L << (hiByte & 077);
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 0:
if (jjCanMove_0(hiByte,i1,i2,l1,l2) && kind > 10) kind=10;
break;
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=2 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}",0.9557764826876928
179382,"private final int jjMoveNfa_2(int startState,int curPos){
  int[] nextStates;
  int startsAt=0;
  jjnewStateCnt=1;
  int i=1;
  jjstateSet[0]=startState;
  int j, kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      MatchLoop:       do {
switch (jjstateSet[--i]) {
case 0:
          if ((0x800400000000L & l) != 0L)           kind=11;
        break;
default :
      break;
  }
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 0:
    if ((0x14404410000000L & l) != 0L)     kind=11;
  break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=1 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}","private final int jjMoveNfa_2(int startState,int curPos){
  int[] nextStates;
  int startsAt=0;
  jjnewStateCnt=1;
  int i=1;
  jjstateSet[0]=startState;
  int j, kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      MatchLoop:       do {
switch (jjstateSet[--i]) {
case 0:
          if ((0x800400000000L & l) != 0L)           kind=11;
        break;
default :
      break;
  }
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 0:
    if ((0x14404410000000L & l) != 0L)     kind=11;
  break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int hiByte=(int)(curChar >> 8);
int i1=hiByte >> 6;
long l1=1L << (hiByte & 077);
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=1 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}",0.9653130287648054
179383,"private final int jjMoveNfa_0(int startState,int curPos){
  int[] nextStates;
  int startsAt=0;
  jjnewStateCnt=3;
  int i=1;
  jjstateSet[0]=startState;
  int j, kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      MatchLoop:       do {
switch (jjstateSet[--i]) {
case 0:
case 2:
          if ((0x3ff000000000000L & l) == 0L)           break;
        kind=6;
      jjCheckNAdd(2);
    break;
case 1:
  if ((0x280000000000L & l) != 0L)   kind=5;
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 0:
if ((0x2000000020L & l) == 0L) break;
kind=5;
jjstateSet[jjnewStateCnt++]=1;
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=3 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}","private final int jjMoveNfa_0(int startState,int curPos){
  int[] nextStates;
  int startsAt=0;
  jjnewStateCnt=3;
  int i=1;
  jjstateSet[0]=startState;
  int j, kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      MatchLoop:       do {
switch (jjstateSet[--i]) {
case 0:
case 2:
          if ((0x3ff000000000000L & l) == 0L)           break;
        kind=6;
      jjCheckNAdd(2);
    break;
case 1:
  if ((0x280000000000L & l) != 0L)   kind=5;
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 0:
if ((0x2000000020L & l) == 0L) break;
kind=5;
jjstateSet[jjnewStateCnt++]=1;
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int hiByte=(int)(curChar >> 8);
int i1=hiByte >> 6;
long l1=1L << (hiByte & 077);
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=3 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}",0.9684615384615384
179384,"public MapTypeInfo(Type mapType){
  this.mapType=(ParameterizedType)mapType;
}","public MapTypeInfo(Type mapType){
  if (!(mapType instanceof ParameterizedType)) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
  TypeInfo<Object> rawType=new TypeInfo<Object>(mapType);
  Preconditions.checkArgument(Map.class.isAssignableFrom(rawType.getTopLevelClass()));
  this.mapType=(ParameterizedType)mapType;
}",0.3279445727482679
179385,"/** 
 * This method serializes the specified object, including those of generic types, into its equivalent Json representation. This method must be used if the specified object is a generic type. For non-generic objects, use   {@link #toJson(Object)} instead.
 * @param src the object for which JSON representation is to be created.
 * @param typeOfSrc The specific genericized type of src. You can obtainthis type by using the  {@link com.google.gson.reflect.TypeToken} class. For example,to get the type for  {@code Collection<Foo>}, you should use: <pre> Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType(); </pre>
 * @return Json representation of src.
 */
public String toJson(Object src,Type typeOfSrc){
  if (src == null) {
    return ""String_Node_Str"";
  }
  JsonSerializationContext context=new JsonSerializationContextDefault(navigatorFactory,serializeNulls,serializers);
  JsonElement jsonElement=context.serialize(src,typeOfSrc);
  StringWriter writer=new StringWriter();
  formatter.format(jsonElement,new PrintWriter(writer),serializeNulls);
  return jsonElement == null ? ""String_Node_Str"" : writer.toString();
}","/** 
 * This method serializes the specified object, including those of generic types, into its equivalent Json representation. This method must be used if the specified object is a generic type. For non-generic objects, use   {@link #toJson(Object,Writer)} instead.
 * @param src the object for which JSON representation is to be created.
 * @param typeOfSrc The specific genericized type of src. You can obtainthis type by using the  {@link com.google.gson.reflect.TypeToken} class. For example,to get the type for  {@code Collection<Foo>}, you should use: <pre> Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType(); </pre>
 * @param writer Writer to which the Json representation of src needs to be written.
 */
public void toJson(Object src,Type typeOfSrc,Writer writer){
  if (src == null) {
    return;
  }
  JsonSerializationContext context=new JsonSerializationContextDefault(navigatorFactory,serializeNulls,serializers);
  JsonElement jsonElement=context.serialize(src,typeOfSrc);
  formatter.format(jsonElement,new PrintWriter(writer),serializeNulls);
}",0.8526645768025078
179386,"/** 
 * This method deserializes the specified Json into an object of the specified type. This method is useful if the specified object is a generic type. For non-generic objects, use  {@link #fromJson(String,Class)} instead.
 * @param json the string from which the object is to be deserialized.
 * @param typeOfT The specific genericized type of src. You can obtain this type by using the{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for{@code Collection<Foo>}, you should use: <pre> Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType(); </pre>
 * @param < T > the type of the desired object.
 * @return an object of type T from the string.
 * @throws JsonParseException if json is not a valid representation for an object of type typeOfT.
 */
@SuppressWarnings(""String_Node_Str"") public <T>T fromJson(String json,Type typeOfT) throws JsonParseException {
  try {
    StringReader reader=new StringReader(json);
    JsonParser parser=new JsonParser(reader);
    JsonElement root=parser.parse();
    JsonDeserializationContext context=new JsonDeserializationContextDefault(navigatorFactory,deserializers,objectConstructor,typeAdapter);
    return (T)context.deserialize(root,typeOfT);
  }
 catch (  TokenMgrError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  ParseException e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  StackOverflowError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  OutOfMemoryError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
}","/** 
 * This method deserializes the Json read from the specified reader into an object of the specified type. This method is useful if the specified object is a generic type. For non-generic objects, use   {@link #fromJson(Reader,Class)} instead. If you have the Json in aString form instead of a  {@link Reader}, use   {@link #fromJson(String,Type)} instead.
 * @param json the reader producing Json from which the object is to be deserialized.
 * @param typeOfT The specific genericized type of src. You can obtain this type by using the{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for{@code Collection<Foo>}, you should use: <pre> Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType(); </pre>
 * @param < T > the type of the desired object.
 * @return an object of type T from the json.
 * @throws JsonParseException if json is not a valid representation for an object of type typeOfT.
 */
public <T>T fromJson(Reader json,Type typeOfT) throws JsonParseException {
  try {
    JsonParser parser=new JsonParser(json);
    JsonElement root=parser.parse();
    JsonDeserializationContext context=new JsonDeserializationContextDefault(navigatorFactory,deserializers,objectConstructor,typeAdapter);
    T target=context.deserialize(root,typeOfT);
    return target;
  }
 catch (  TokenMgrError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  ParseException e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  StackOverflowError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  OutOfMemoryError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
}",0.8743919885550787
179387,"PrintFormattingVisitor(JsonWriter writer){
  this.writer=writer;
}","PrintFormattingVisitor(JsonWriter writer){
  this.writer=writer;
  this.first=new HashMap<Integer,Boolean>();
}",0.7457627118644068
179388,"public void startArray(JsonArray array){
  writer.beginArray();
}","public void startArray(JsonArray array){
  first.put(++level,true);
  writer.beginArray();
}",0.8280254777070064
179389,"private void addCommaCheckingFirst(){
  if (first) {
    first=false;
  }
 else {
    writer.elementSeparator();
  }
}","private void addCommaCheckingFirst(){
  if (first.get(level) != Boolean.FALSE) {
    first.put(level,false);
  }
 else {
    writer.elementSeparator();
  }
}",0.850909090909091
179390,"public void endArray(JsonArray array){
  writer.endArray();
}","public void endArray(JsonArray array){
  level--;
  writer.endArray();
}",0.9172932330827068
179391,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public <T>T adaptType(Object from,Class<T> to){
  Class<?> aClass=Primitives.wrap(to);
  if (Primitives.isWrapperType(aClass)) {
    if (aClass == Character.class) {
      return (T)(Character)from.toString().charAt(0);
    }
    try {
      Constructor<?> constructor=aClass.getConstructor(String.class);
      return (T)constructor.newInstance(from.toString());
    }
 catch (    NoSuchMethodException e) {
      throw new JsonParseException(e);
    }
catch (    IllegalAccessException e) {
      throw new JsonParseException(e);
    }
catch (    InvocationTargetException e) {
      throw new JsonParseException(e);
    }
catch (    InstantiationException e) {
      throw new JsonParseException(e);
    }
  }
 else   if (Enum.class.isAssignableFrom(to)) {
    try {
      Method valuesMethod=to.getMethod(""String_Node_Str"",String.class);
      return (T)valuesMethod.invoke(null,from.toString());
    }
 catch (    NoSuchMethodException e) {
      throw new RuntimeException(e);
    }
catch (    IllegalAccessException e) {
      throw new RuntimeException(e);
    }
catch (    InvocationTargetException e) {
      throw new RuntimeException(e);
    }
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + from.getClass() + ""String_Node_Str""+ to);
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public <T>T adaptType(Object from,Class<T> to){
  Class<?> aClass=Primitives.wrap(to);
  if (Primitives.isWrapperType(aClass)) {
    if (aClass == Character.class) {
      String value=from.toString();
      if (value.length() == 1) {
        return (T)(Character)from.toString().charAt(0);
      }
 else {
        throw new JsonParseException(""String_Node_Str"" + value + ""String_Node_Str"");
      }
    }
    try {
      Constructor<?> constructor=aClass.getConstructor(String.class);
      return (T)constructor.newInstance(from.toString());
    }
 catch (    NoSuchMethodException e) {
      throw new JsonParseException(e);
    }
catch (    IllegalAccessException e) {
      throw new JsonParseException(e);
    }
catch (    InvocationTargetException e) {
      throw new JsonParseException(e);
    }
catch (    InstantiationException e) {
      throw new JsonParseException(e);
    }
  }
 else   if (Enum.class.isAssignableFrom(to)) {
    try {
      Method valuesMethod=to.getMethod(""String_Node_Str"",String.class);
      return (T)valuesMethod.invoke(null,from.toString());
    }
 catch (    NoSuchMethodException e) {
      throw new RuntimeException(e);
    }
catch (    IllegalAccessException e) {
      throw new RuntimeException(e);
    }
catch (    InvocationTargetException e) {
      throw new RuntimeException(e);
    }
  }
 else {
    throw new JsonParseException(""String_Node_Str"" + from.getClass() + ""String_Node_Str""+ to);
  }
}",0.928067700987306
179392,"/** 
 * This method deserializes the specified Json into an object of the specified type. This method is useful if the specified object is a generic type. For non-generic objects, use  {@link #fromJson(String,Class)} instead.
 * @param json the string from which the object is to be deserialized.
 * @param typeOfT The specific genericized type of src. You can obtain this type by using the{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for{@code Collection<Foo>}, you should use: <pre> Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType(); </pre>
 * @param < T > the type of the desired object.
 * @return an object of type T from the string.
 * @throws JsonParseException if json is not a valid representation for an object of type typeOfT.
 */
public <T>T fromJson(String json,Type typeOfT) throws JsonParseException {
  try {
    StringReader reader=new StringReader(json);
    JsonParser parser=new JsonParser(reader);
    JsonElement root=parser.parse();
    JsonDeserializationContext context=new JsonDeserializationContextDefault(navigatorFactory,deserializers,objectConstructor,typeAdapter);
    return context.deserialize(root,typeOfT);
  }
 catch (  TokenMgrError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  ParseException e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  StackOverflowError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  OutOfMemoryError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
}","/** 
 * This method deserializes the specified Json into an object of the specified type. This method is useful if the specified object is a generic type. For non-generic objects, use  {@link #fromJson(String,Class)} instead.
 * @param json the string from which the object is to be deserialized.
 * @param typeOfT The specific genericized type of src. You can obtain this type by using the{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for{@code Collection<Foo>}, you should use: <pre> Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType(); </pre>
 * @param < T > the type of the desired object.
 * @return an object of type T from the string.
 * @throws JsonParseException if json is not a valid representation for an object of type typeOfT.
 */
@SuppressWarnings(""String_Node_Str"") public <T>T fromJson(String json,Type typeOfT) throws JsonParseException {
  try {
    StringReader reader=new StringReader(json);
    JsonParser parser=new JsonParser(reader);
    JsonElement root=parser.parse();
    JsonDeserializationContext context=new JsonDeserializationContextDefault(navigatorFactory,deserializers,objectConstructor,typeAdapter);
    return (T)context.deserialize(root,typeOfT);
  }
 catch (  TokenMgrError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  ParseException e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  StackOverflowError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  OutOfMemoryError e) {
    throw new JsonParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
}",0.9881516587677726
179393,"@SuppressWarnings(""String_Node_Str"") final Object visitChildAsObject(Type childType,JsonElement jsonChild){
  if (jsonChild == null) {
    return null;
  }
  JsonDeserializationVisitor<?> childVisitor=new JsonObjectDeserializationVisitor<Object>(jsonChild,childType,factory,objectConstructor,typeAdapter,deserializers,context);
  return visitChild(childType,childVisitor);
}","@SuppressWarnings(""String_Node_Str"") final Object visitChildAsObject(Type childType,JsonElement jsonChild){
  JsonDeserializationVisitor<?> childVisitor=new JsonObjectDeserializationVisitor<Object>(jsonChild,childType,factory,objectConstructor,typeAdapter,deserializers,context);
  return visitChild(childType,childVisitor);
}",0.9314285714285714
179394,"@SuppressWarnings(""String_Node_Str"") final Object visitChildAsArray(Type childType,JsonArray jsonChild){
  if (jsonChild == null) {
    return null;
  }
  JsonDeserializationVisitor<?> childVisitor=new JsonArrayDeserializationVisitor<Object>(jsonChild.getAsJsonArray(),childType,factory,objectConstructor,typeAdapter,deserializers,context);
  return visitChild(childType,childVisitor);
}","@SuppressWarnings(""String_Node_Str"") final Object visitChildAsArray(Type childType,JsonArray jsonChild){
  JsonDeserializationVisitor<?> childVisitor=new JsonArrayDeserializationVisitor<Object>(jsonChild.getAsJsonArray(),childType,factory,objectConstructor,typeAdapter,deserializers,context);
  return visitChild(childType,childVisitor);
}",0.9338842975206612
179395,"public void visitArrayField(Field f,Object obj){
  try {
    JsonObject jsonObject=json.getAsJsonObject();
    String fName=f.getName();
    if (jsonObject.has(fName)) {
      JsonArray jsonChild=(JsonArray)jsonObject.get(fName);
      Object array=visitChildAsArray(f.getType(),jsonChild);
      f.set(obj,array);
    }
 else {
      f.set(obj,null);
    }
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}","public void visitArrayField(Field f,Object obj){
  try {
    JsonObject jsonObject=json.getAsJsonObject();
    String fName=f.getName();
    JsonArray jsonChild=(JsonArray)jsonObject.get(fName);
    if (jsonChild != null) {
      Object array=visitChildAsArray(f.getType(),jsonChild);
      f.set(obj,array);
    }
 else {
      f.set(obj,null);
    }
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}",0.8283752860411899
179396,"@SuppressWarnings(""String_Node_Str"") public void visitCollectionField(Field f,Object obj){
  try {
    JsonObject jsonObject=json.getAsJsonObject();
    String fName=f.getName();
    if (jsonObject.has(fName)) {
      Collection collection=(Collection)objectConstructor.construct(f.getType());
      f.set(obj,collection);
      Type childType=new TypeInfo(f.getGenericType()).getGenericClass();
      JsonArray jsonArray=jsonObject.get(fName).getAsJsonArray();
      for (      JsonElement jsonChild : jsonArray) {
        Object child=visitChild(childType,jsonChild);
        if (childType == Object.class) {
          throw new JsonParseException(fName + ""String_Node_Str"");
        }
        collection.add(child);
      }
    }
 else {
      f.set(obj,null);
    }
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}","@SuppressWarnings(""String_Node_Str"") public void visitCollectionField(Field f,Object obj){
  try {
    JsonObject jsonObject=json.getAsJsonObject();
    String fName=f.getName();
    JsonArray jsonArray=(JsonArray)jsonObject.get(fName);
    if (jsonArray != null) {
      Collection collection=(Collection)objectConstructor.construct(f.getType());
      f.set(obj,collection);
      Type childType=new TypeInfo(f.getGenericType()).getGenericClass();
      for (      JsonElement jsonChild : jsonArray) {
        Object child=visitChild(childType,jsonChild);
        if (childType == Object.class) {
          throw new JsonParseException(fName + ""String_Node_Str"");
        }
        collection.add(child);
      }
    }
 else {
      f.set(obj,null);
    }
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}",0.9208037825059102
179397,"public void visitPrimitiveField(Field f,Object obj){
  try {
    JsonObject jsonObject=json.getAsJsonObject();
    String fName=f.getName();
    if (jsonObject.has(fName)) {
      JsonPrimitive value=jsonObject.getAsJsonPrimitive(fName);
      if (value == null) {
        throw new JsonParseException(""String_Node_Str"" + fName + ""String_Node_Str"");
      }
      f.set(obj,typeAdapter.adaptType(value.getAsObject(),f.getType()));
    }
 else {
      if (f.getType() == String.class) {
        f.set(obj,null);
      }
    }
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}","public void visitPrimitiveField(Field f,Object obj){
  try {
    JsonObject jsonObject=json.getAsJsonObject();
    String fName=f.getName();
    JsonPrimitive value=jsonObject.getAsJsonPrimitive(fName);
    if (value != null) {
      f.set(obj,typeAdapter.adaptType(value.getAsObject(),f.getType()));
    }
 else {
      if (f.getType() == String.class) {
        f.set(obj,null);
      }
    }
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}",0.3062730627306273
179398,"public void visitObjectField(Field f,Object obj){
  try {
    JsonObject jsonObject=json.getAsJsonObject();
    String fName=f.getName();
    if (jsonObject.has(fName)) {
      JsonElement jsonChild=jsonObject.get(fName);
      Type fieldType=f.getGenericType();
      Object child=visitChildAsObject(fieldType,jsonChild);
      f.set(obj,child);
    }
 else {
      f.set(obj,null);
    }
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}","public void visitObjectField(Field f,Object obj){
  try {
    JsonObject jsonObject=json.getAsJsonObject();
    String fName=f.getName();
    JsonElement jsonChild=jsonObject.get(fName);
    if (jsonChild != null) {
      Type fieldType=f.getGenericType();
      Object child=visitChildAsObject(fieldType,jsonChild);
      f.set(obj,child);
    }
 else {
      f.set(obj,null);
    }
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}",0.8592750533049041
179399,"/** 
 * Created in response to Issue 14: http://code.google.com/p/google-gson/issues/detail?id=14
 */
public void testNullPrimitiveFields(){
  try {
    String json=""String_Node_Str"";
    gson.fromJson(json,BagOfPrimitives.class);
    fail(""String_Node_Str"");
  }
 catch (  JsonParseException expected) {
  }
}","/** 
 * Created in response to Issue 14: http://code.google.com/p/google-gson/issues/detail?id=14
 */
public void testNullPrimitiveFields(){
  String json=""String_Node_Str"";
  BagOfPrimitives target=gson.fromJson(json,BagOfPrimitives.class);
  assertEquals(BagOfPrimitives.DEFAULT_VALUE,target.longValue);
}",0.6742301458670988
179400,"@SuppressWarnings(""String_Node_Str"") final Object visitChildAsObject(Type childType,JsonElement jsonChild){
  JsonDeserializationVisitor<?> childVisitor=new JsonObjectDeserializationVisitor<Object>(jsonChild,childType,factory,objectConstructor,typeAdapter,deserializers,context);
  return visitChild(childType,childVisitor);
}","@SuppressWarnings(""String_Node_Str"") final Object visitChildAsObject(Type childType,JsonElement jsonChild){
  if (jsonChild == null) {
    return null;
  }
  JsonDeserializationVisitor<?> childVisitor=new JsonObjectDeserializationVisitor<Object>(jsonChild,childType,factory,objectConstructor,typeAdapter,deserializers,context);
  return visitChild(childType,childVisitor);
}",0.9314285714285714
179401,"@SuppressWarnings(""String_Node_Str"") final Object visitChildAsPrimitive(Type childType,JsonPrimitive jsonChild){
  Class<?> childClass;
  if (childType instanceof Class) {
    childClass=(Class)childType;
  }
 else {
    TypeInfo<?> childTypeInfo=new TypeInfo(childType);
    Type genericClass=childTypeInfo.getGenericClass();
    childClass=new TypeInfo(genericClass).getTopLevelClass();
  }
  return typeAdapter.adaptType(jsonChild.getAsObject(),childClass);
}","@SuppressWarnings(""String_Node_Str"") final Object visitChildAsPrimitive(Type childType,JsonPrimitive jsonChild){
  Preconditions.checkNotNull(jsonChild);
  Class<?> childClass;
  if (childType instanceof Class) {
    childClass=(Class)childType;
  }
 else {
    TypeInfo<?> childTypeInfo=new TypeInfo(childType);
    Type genericClass=childTypeInfo.getGenericClass();
    childClass=new TypeInfo(genericClass).getTopLevelClass();
  }
  return typeAdapter.adaptType(jsonChild.getAsObject(),childClass);
}",0.9575129533678756
179402,"@SuppressWarnings(""String_Node_Str"") final Object visitChildAsArray(Type childType,JsonArray jsonChild){
  JsonDeserializationVisitor<?> childVisitor=new JsonArrayDeserializationVisitor<Object>(jsonChild.getAsJsonArray(),childType,factory,objectConstructor,typeAdapter,deserializers,context);
  return visitChild(childType,childVisitor);
}","@SuppressWarnings(""String_Node_Str"") final Object visitChildAsArray(Type childType,JsonArray jsonChild){
  if (jsonChild == null) {
    return null;
  }
  JsonDeserializationVisitor<?> childVisitor=new JsonArrayDeserializationVisitor<Object>(jsonChild.getAsJsonArray(),childType,factory,objectConstructor,typeAdapter,deserializers,context);
  return visitChild(childType,childVisitor);
}",0.9338842975206612
179403,"public void visitPrimitiveField(Field f,Object obj){
  try {
    JsonObject jsonObject=json.getAsJsonObject();
    String fName=f.getName();
    if (jsonObject.has(fName)) {
      JsonPrimitive value=jsonObject.getAsJsonPrimitive(fName);
      f.set(obj,typeAdapter.adaptType(value.getAsObject(),f.getType()));
    }
 else {
      if (f.getType() == String.class) {
        f.set(obj,null);
      }
    }
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}","public void visitPrimitiveField(Field f,Object obj){
  try {
    JsonObject jsonObject=json.getAsJsonObject();
    String fName=f.getName();
    if (jsonObject.has(fName)) {
      JsonPrimitive value=jsonObject.getAsJsonPrimitive(fName);
      if (value == null) {
        throw new JsonParseException(""String_Node_Str"" + fName + ""String_Node_Str"");
      }
      f.set(obj,typeAdapter.adaptType(value.getAsObject(),f.getType()));
    }
 else {
      if (f.getType() == String.class) {
        f.set(obj,null);
      }
    }
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}",0.8903107861060329
179404,"public void visitArray(Object array,Type arrayType){
  JsonArray jsonArray=json.getAsJsonArray();
  TypeInfo<?> arrayTypeInfo=new TypeInfo<Object>(arrayType);
  for (int i=0; i < jsonArray.size(); i++) {
    JsonElement jsonChild=jsonArray.get(i);
    Object child;
    if (jsonChild instanceof JsonObject) {
      child=visitChildAsObject(arrayTypeInfo.getComponentType(),jsonChild);
    }
 else     if (jsonChild instanceof JsonArray) {
      child=visitChildAsArray(arrayTypeInfo.getSecondLevelClass(),jsonChild.getAsJsonArray());
    }
 else     if (jsonChild instanceof JsonPrimitive) {
      child=visitChildAsPrimitive(arrayTypeInfo.getComponentType(),jsonChild.getAsJsonPrimitive());
    }
 else {
      throw new IllegalStateException();
    }
    Array.set(array,i,child);
  }
}","public void visitArray(Object array,Type arrayType){
  JsonArray jsonArray=json.getAsJsonArray();
  TypeInfo<?> arrayTypeInfo=new TypeInfo<Object>(arrayType);
  for (int i=0; i < jsonArray.size(); i++) {
    JsonElement jsonChild=jsonArray.get(i);
    Object child;
    if (jsonChild == null) {
      child=null;
    }
 else     if (jsonChild instanceof JsonObject) {
      child=visitChildAsObject(arrayTypeInfo.getComponentType(),jsonChild);
    }
 else     if (jsonChild instanceof JsonArray) {
      child=visitChildAsArray(arrayTypeInfo.getSecondLevelClass(),jsonChild.getAsJsonArray());
    }
 else     if (jsonChild instanceof JsonPrimitive) {
      child=visitChildAsPrimitive(arrayTypeInfo.getComponentType(),jsonChild.getAsJsonPrimitive());
    }
 else {
      throw new IllegalStateException();
    }
    Array.set(array,i,child);
  }
}",0.963914373088685
179405,"private void addAsArrayElement(Type elementType,Object elementValue){
  JsonElement childElement=getJsonElementForChild(elementType,elementValue);
  root.getAsJsonArray().add(childElement);
}","private void addAsArrayElement(Type elementType,Object elementValue){
  if (elementValue == null) {
    addNullAsArrayElement();
  }
 else {
    JsonElement childElement=getJsonElementForChild(elementType,elementValue);
    root.getAsJsonArray().add(childElement);
  }
}",0.8286334056399133
179406,"@SuppressWarnings(""String_Node_Str"") public void visitCollection(Collection collection,Type collectionType){
  assignToRoot(new JsonArray());
  for (  Object child : collection) {
    addAsArrayElement(child.getClass(),child);
  }
}","@SuppressWarnings(""String_Node_Str"") public void visitCollection(Collection collection,Type collectionType){
  assignToRoot(new JsonArray());
  for (  Object child : collection) {
    TypeInfo<?> collectionTypeInfo=new TypeInfo<Object>(collectionType);
    Type childType=collectionTypeInfo.getGenericClass();
    if (childType == Object.class && child != null) {
      childType=child.getClass();
    }
    addAsArrayElement(childType,child);
  }
}",0.6138032305433186
179407,"public void navigate(JsonElement element){
  if (element.isJsonArray()) {
    JsonArray array=element.getAsJsonArray();
    visitor.startArray(array);
    boolean isFirst=true;
    for (    JsonElement child : array) {
      visitChild(array,child,isFirst);
      if (isFirst) {
        isFirst=false;
      }
    }
    visitor.endArray(array);
  }
 else   if (element.isJsonObject()) {
    JsonObject object=element.getAsJsonObject();
    visitor.startObject(object);
    boolean isFirst=true;
    for (    Map.Entry<String,JsonElement> member : object.entrySet()) {
      visitChild(object,member.getKey(),member.getValue(),isFirst);
      if (isFirst) {
        isFirst=false;
      }
    }
    visitor.endObject(object);
  }
 else {
    visitor.visitPrimitive(element.getAsJsonPrimitive());
  }
}","public void navigate(JsonElement element){
  if (element == null) {
    visitor.visitNull();
  }
 else   if (element.isJsonArray()) {
    JsonArray array=element.getAsJsonArray();
    visitor.startArray(array);
    boolean isFirst=true;
    for (    JsonElement child : array) {
      visitChild(array,child,isFirst);
      if (isFirst) {
        isFirst=false;
      }
    }
    visitor.endArray(array);
  }
 else   if (element.isJsonObject()) {
    JsonObject object=element.getAsJsonObject();
    visitor.startObject(object);
    boolean isFirst=true;
    for (    Map.Entry<String,JsonElement> member : object.entrySet()) {
      visitChild(object,member.getKey(),member.getValue(),isFirst);
      if (isFirst) {
        isFirst=false;
      }
    }
    visitor.endObject(object);
  }
 else {
    visitor.visitPrimitive(element.getAsJsonPrimitive());
  }
}",0.963855421686747
179408,"private void visitChild(JsonArray parent,JsonElement child,boolean isFirst){
  if (child.isJsonArray()) {
    JsonArray childAsArray=child.getAsJsonArray();
    visitor.visitArrayMember(parent,childAsArray,isFirst);
    navigate(childAsArray);
  }
 else   if (child.isJsonObject()) {
    JsonObject childAsObject=child.getAsJsonObject();
    visitor.visitArrayMember(parent,childAsObject,isFirst);
    navigate(childAsObject);
  }
 else {
    visitor.visitArrayMember(parent,child.getAsJsonPrimitive(),isFirst);
  }
}","private void visitChild(JsonArray parent,JsonElement child,boolean isFirst){
  if (child == null) {
    visitor.visitNullArrayMember(parent,isFirst);
    navigate(null);
  }
 else   if (child.isJsonArray()) {
    JsonArray childAsArray=child.getAsJsonArray();
    visitor.visitArrayMember(parent,childAsArray,isFirst);
    navigate(childAsArray);
  }
 else   if (child.isJsonObject()) {
    JsonObject childAsObject=child.getAsJsonObject();
    visitor.visitArrayMember(parent,childAsObject,isFirst);
    navigate(childAsObject);
  }
 else {
    visitor.visitArrayMember(parent,child.getAsJsonPrimitive(),isFirst);
  }
}",0.8847845206684257
179409,"public void testCollection(){
  Collection<Integer> target=Arrays.asList(1,2,3,4,5,6,7,8,9);
  assertEquals(""String_Node_Str"",gson.toJson(target));
}","public void testCollection(){
  Collection<Integer> target=Arrays.asList(1,2,3,4,5,6,7,8,9);
  Type targetType=new TypeToken<Collection<Integer>>(){
  }
.getType();
  String json=gson.toJson(target,targetType);
  assertEquals(""String_Node_Str"",json);
}",0.6483790523690773
179410,"/** 
 * This method is useful if you want custom deserialization corresponding to the specific generic type. For most other cases, use   {@link #fromJson(Class,String)} instead
 * @param < T > the type of the desired object
 * @param typeOfT the specific generic type of T
 * @param json the string from which the object is to be deserialized
 * @return an object of type T from the string
 * @throws ParseException if json is not a valid representation for an objectof type typeOfT.
 */
@SuppressWarnings(""String_Node_Str"") public <T>T fromJson(Type typeOfT,String json) throws ParseException {
  try {
    StringReader reader=new StringReader(json);
    JsonParser parser=new JsonParser(reader);
    JsonElement root=parser.parse();
    JsonDeserializer.Context context=new JsonDeserializationContext(navigatorFactory,deserializers,objectConstructor,typeAdapter);
    return context.deserialize(typeOfT,root);
  }
 catch (  TokenMgrError e) {
    throw new ParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  com.google.gson.parser.ParseException e) {
    throw new ParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
}","/** 
 * This method is useful if you want custom deserialization corresponding to the specific generic type. For most other cases, use   {@link #fromJson(Class,String)} instead
 * @param < T > the type of the desired object
 * @param typeOfT the specific generic type of T
 * @param json the string from which the object is to be deserialized
 * @return an object of type T from the string
 * @throws ParseException if json is not a valid representation for an objectof type typeOfT.
 */
@SuppressWarnings(""String_Node_Str"") public <T>T fromJson(Type typeOfT,String json) throws ParseException {
  try {
    StringReader reader=new StringReader(json);
    JsonParser parser=new JsonParser(reader);
    JsonElement root=parser.parse();
    JsonDeserializer.Context context=new JsonDeserializationContext(navigatorFactory,deserializers,objectConstructor,typeAdapter);
    return (T)context.deserialize(typeOfT,root);
  }
 catch (  TokenMgrError e) {
    throw new ParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
catch (  com.google.gson.parser.ParseException e) {
    throw new ParseException(""String_Node_Str"" + json + ""String_Node_Str"",e);
  }
}",0.9987107864202835
179411,"@SuppressWarnings(""String_Node_Str"") public void visitCollection(@SuppressWarnings(""String_Node_Str"") Collection collection,Type collectionType){
  TypeInfo<Object> childTypeInfo=new TypeInfo<Object>(collectionType);
  Type childType=childTypeInfo.getGenericClass();
  for (  JsonElement jsonChild : json.getAsJsonArray()) {
    Object child=visitChild(childType,jsonChild);
    if (childType == Object.class && !ObjectNavigator.isPrimitive(child)) {
      throw new JsonParseException(collection + ""String_Node_Str"");
    }
    collection.add(child);
  }
}","@SuppressWarnings(""String_Node_Str"") public void visitCollection(@SuppressWarnings(""String_Node_Str"") Collection collection,Type collectionType){
  TypeInfo<Object> childTypeInfo=new TypeInfo<Object>(collectionType);
  Type childType=childTypeInfo.getGenericClass();
  for (  JsonElement jsonChild : json.getAsJsonArray()) {
    Object child=visitChild(childType,jsonChild);
    if (childType == Object.class && !ObjectNavigator.isPrimitiveOrString(child)) {
      throw new JsonParseException(collection + ""String_Node_Str"");
    }
    collection.add(child);
  }
}",0.9928698752228164
179412,"@SuppressWarnings(""String_Node_Str"") public void visitCollectionField(Field f,Object obj){
  try {
    JsonObject jsonObject=json.getAsJsonObject();
    String fName=f.getName();
    if (jsonObject.has(fName)) {
      Collection collection=(Collection)objectConstructor.construct(f.getType());
      f.set(obj,collection);
      Type childType=new TypeInfo(f.getGenericType()).getGenericClass();
      JsonArray jsonArray=jsonObject.get(fName).getAsJsonArray();
      for (      JsonElement jsonChild : jsonArray) {
        Object child=visitChild(childType,jsonChild);
        if (childType == Object.class && !ObjectNavigator.isPrimitive(child)) {
          throw new JsonParseException(fName + ""String_Node_Str"");
        }
        collection.add(child);
      }
    }
 else {
      f.set(obj,null);
    }
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}","@SuppressWarnings(""String_Node_Str"") public void visitCollectionField(Field f,Object obj){
  try {
    JsonObject jsonObject=json.getAsJsonObject();
    String fName=f.getName();
    if (jsonObject.has(fName)) {
      Collection collection=(Collection)objectConstructor.construct(f.getType());
      f.set(obj,collection);
      Type childType=new TypeInfo(f.getGenericType()).getGenericClass();
      JsonArray jsonArray=jsonObject.get(fName).getAsJsonArray();
      for (      JsonElement jsonChild : jsonArray) {
        Object child=visitChild(childType,jsonChild);
        if (childType == Object.class && !ObjectNavigator.isPrimitiveOrString(child)) {
          throw new JsonParseException(fName + ""String_Node_Str"");
        }
        collection.add(child);
      }
    }
 else {
      f.set(obj,null);
    }
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}",0.9955307262569832
179413,"public JsonPrimitive(Object primitive){
  if (primitive instanceof Character) {
    char c=((Character)primitive).charValue();
    this.value=String.valueOf(c);
  }
 else {
    Preconditions.checkArgument(primitive instanceof Number || primitive instanceof String || ObjectNavigator.isPrimitive(primitive));
    this.value=primitive;
  }
}","public JsonPrimitive(Object primitive){
  if (primitive instanceof Character) {
    char c=((Character)primitive).charValue();
    this.value=String.valueOf(c);
  }
 else {
    Preconditions.checkArgument(primitive instanceof Number || ObjectNavigator.isPrimitiveOrString(primitive));
    this.value=primitive;
  }
}",0.9404580152671757
179414,"/** 
 * Navigate all the fields of the specified object. If a field is null, it does not get visited.
 */
@SuppressWarnings(""String_Node_Str"") public void accept(Visitor visitor){
  if (obj == null) {
    return;
  }
  TypeInfo<?> objTypeInfo=new TypeInfo<Object>(objType);
  if (exclusionStrategy.shouldSkipClass(objTypeInfo.getTopLevelClass())) {
    return;
  }
  if (ancestors.contains(obj)) {
    throw new IllegalStateException(""String_Node_Str"" + obj);
  }
  ancestors.push(obj);
  try {
    if (isCollectionOrArray(objTypeInfo)) {
      if (objTypeInfo.isArray()) {
        visitor.visitArray(obj,objType);
      }
 else {
        visitor.visitCollection((Collection<?>)obj,objType);
      }
    }
 else     if (objTypeInfo.getTopLevelClass().isEnum()) {
      visitor.visitEnum(obj,objType);
    }
 else     if (objTypeInfo.isPrimitiveOrStringAndNotAnArray()) {
      visitor.visitPrimitiveValue(obj);
    }
 else     if (objType == Object.class && isPrimitive(obj)) {
      visitor.visitPrimitiveValue(obj);
    }
 else {
      if (!visitor.visitUsingCustomHandler(obj,objType)) {
        visitor.startVisitingObject(obj);
        for (Class<?> curr=objTypeInfo.getTopLevelClass(); curr != null && !curr.equals(Object.class); curr=curr.getSuperclass()) {
          if (!curr.isSynthetic()) {
            navigateClassFields(obj,curr,visitor);
          }
        }
        visitor.endVisitingObject(obj);
      }
    }
  }
  finally {
    ancestors.pop();
  }
}","/** 
 * Navigate all the fields of the specified object. If a field is null, it does not get visited.
 */
@SuppressWarnings(""String_Node_Str"") public void accept(Visitor visitor){
  if (obj == null) {
    return;
  }
  TypeInfo<?> objTypeInfo=new TypeInfo<Object>(objType);
  if (exclusionStrategy.shouldSkipClass(objTypeInfo.getTopLevelClass())) {
    return;
  }
  if (ancestors.contains(obj)) {
    throw new IllegalStateException(""String_Node_Str"" + obj);
  }
  ancestors.push(obj);
  try {
    if (isCollectionOrArray(objTypeInfo)) {
      if (objTypeInfo.isArray()) {
        visitor.visitArray(obj,objType);
      }
 else {
        visitor.visitCollection((Collection<?>)obj,objType);
      }
    }
 else     if (objTypeInfo.getTopLevelClass().isEnum()) {
      visitor.visitEnum(obj,objType);
    }
 else     if (objTypeInfo.isPrimitiveOrStringAndNotAnArray()) {
      visitor.visitPrimitiveValue(obj);
    }
 else     if (objType == Object.class && isPrimitiveOrString(obj)) {
      visitor.visitPrimitiveValue(obj);
    }
 else {
      if (!visitor.visitUsingCustomHandler(obj,objType)) {
        visitor.startVisitingObject(obj);
        for (Class<?> curr=objTypeInfo.getTopLevelClass(); curr != null && !curr.equals(Object.class); curr=curr.getSuperclass()) {
          if (!curr.isSynthetic()) {
            navigateClassFields(obj,curr,visitor);
          }
        }
        visitor.endVisitingObject(obj);
      }
    }
  }
  finally {
    ancestors.pop();
  }
}",0.9972881355932204
179415,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.log);
  _fromPhoneNumber=getMyPhoneNumber();
  _textView=(TextView)findViewById(R.id.messageLog);
  _textView.setText(getString(R.string.welcome));
  loadPrefs();
  try {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
    String logBasePath=prefs.getString(""String_Node_Str"",LOG_DEFAULT_PATH);
    _smsLogger=new SMSLogger(SMSLogger.MODE_SEND,logBasePath);
  }
 catch (  Exception e) {
    Toast.makeText(this,""String_Node_Str"" + e.getMessage(),Toast.LENGTH_LONG).show();
  }
  _telMgr=(TelephonyManager)getSystemService(Context.TELEPHONY_SERVICE);
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.log);
  _fromPhoneNumber=getMyPhoneNumber();
  _textView=(TextView)findViewById(R.id.messageLog);
  _textView.setText(getString(R.string.welcome));
  loadPrefs();
  try {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
    String logBasePath=prefs.getString(""String_Node_Str"",LOG_DEFAULT_PATH);
    _smsLogger=new SMSLogger(SMSLogger.MODE_SEND,logBasePath);
  }
 catch (  Exception e) {
    Toast.makeText(this,""String_Node_Str"" + e.getMessage(),Toast.LENGTH_LONG).show();
  }
  _telMgr=(TelephonyManager)getSystemService(Context.TELEPHONY_SERVICE);
  _sentPI=PendingIntent.getBroadcast(this,0,new Intent(SENT),0);
  _deliveredPI=PendingIntent.getBroadcast(this,0,new Intent(DELIVERED),0);
}",0.9178403755868544
179416,"private void sendTestMessages(String toPhoneNumber,boolean useDataPort){
  _toPhoneNumber=toPhoneNumber;
  statusDialog=ProgressDialog.show(this,""String_Node_Str"",""String_Node_Str"",true);
  statusDialog.setCancelable(true);
  statusDialog.show();
  listMsgs=loadTestMessageList();
  statusDialog.setMax(listMsgs.size());
  runThread=new Thread(this);
  runThread.start();
}","private void sendTestMessages(String toPhoneNumber,boolean useDataPort){
  _toPhoneNumber=toPhoneNumber;
  if (_statusRev != null)   unregisterReceiver(_statusRev);
  _statusRev=new SMSErrorStatusReceiver(_fromPhoneNumber,_toPhoneNumber,_smsLogger);
  registerReceiver(_statusRev,new IntentFilter(SENT));
  statusDialog=ProgressDialog.show(this,""String_Node_Str"",""String_Node_Str"",true);
  statusDialog.setCancelable(true);
  statusDialog.show();
  listMsgs=loadTestMessageList();
  statusDialog.setMax(listMsgs.size());
  runThread=new Thread(this);
  runThread.start();
}",0.7885835095137421
179417,"public void run(){
  keepRunning=true;
  _smsLogger.logStart(operator,cid + ""String_Node_Str"",lac + ""String_Node_Str"",new Date());
  do {
    Iterator<String> itMsgs=listMsgs.iterator();
    int count=0;
    while (keepRunning && itMsgs.hasNext()) {
      String nextMsg=itMsgs.next();
      sendSMS(_toPhoneNumber,nextMsg,_useDataPort,_addTrackingMetadata);
      Message msg=new Message();
      Bundle data=new Bundle();
      data.putString(""String_Node_Str"",""String_Node_Str"" + nextMsg + ""String_Node_Str"");
      count++;
      data.putInt(""String_Node_Str"",count);
      msg.setData(data);
      handler.sendMessage(msg);
      try {
        Thread.sleep(_timeDelay);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 while (_doLoop);
  Message msg=new Message();
  Bundle data=new Bundle();
  data.putInt(""String_Node_Str"",-1);
  msg.setData(data);
  handler.sendMessage(msg);
}","public void run(){
  keepRunning=true;
  do {
    Iterator<String> itMsgs=listMsgs.iterator();
    int count=0;
    while (keepRunning && itMsgs.hasNext()) {
      String nextMsg=itMsgs.next();
      sendSMS(_toPhoneNumber,nextMsg,_useDataPort,_addTrackingMetadata);
      Message msg=new Message();
      Bundle data=new Bundle();
      data.putString(""String_Node_Str"",""String_Node_Str"" + nextMsg + ""String_Node_Str"");
      count++;
      data.putInt(""String_Node_Str"",count);
      msg.setData(data);
      handler.sendMessage(msg);
      try {
        Thread.sleep(_timeDelay);
      }
 catch (      InterruptedException e) {
        Log.i(TAG,""String_Node_Str"",e);
      }
    }
  }
 while (_doLoop);
  Message msg=new Message();
  Bundle data=new Bundle();
  data.putInt(""String_Node_Str"",-1);
  msg.setData(data);
  handler.sendMessage(msg);
}",0.923163208076276
179418,"private void startSMSTest(){
  loadPrefs();
  getLocationInfo();
  _smsLogger.logStart(operator,cid + ""String_Node_Str"",lac + ""String_Node_Str"",new Date());
  AlertDialog.Builder alert=new AlertDialog.Builder(this);
  alert.setTitle(""String_Node_Str"");
  alert.setMessage(""String_Node_Str"");
  final EditText input=new EditText(this);
  if (_toPhoneNumber != null)   input.setText(_toPhoneNumber);
  alert.setView(input);
  alert.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int whichButton){
      _toPhoneNumber=input.getText().toString();
      sendTestMessages(_toPhoneNumber,_useDataPort);
    }
  }
);
  alert.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int whichButton){
    }
  }
);
  alert.show();
}","private void startSMSTest(){
  loadPrefs();
  AlertDialog.Builder alert=new AlertDialog.Builder(this);
  alert.setTitle(""String_Node_Str"");
  alert.setMessage(""String_Node_Str"");
  final EditText input=new EditText(this);
  if (_toPhoneNumber != null)   input.setText(_toPhoneNumber);
  alert.setView(input);
  alert.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int whichButton){
      _toPhoneNumber=input.getText().toString();
      sendTestMessages(_toPhoneNumber,_useDataPort);
    }
  }
);
  alert.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int whichButton){
    }
  }
);
  alert.show();
}",0.268693009118541
179419,"private void sendSMS(String phoneNumber,String testMessage,boolean useDataPort,boolean addTrackingMetadata){
  PendingIntent sentPI=PendingIntent.getBroadcast(this,0,new Intent(SENT),0);
  PendingIntent deliveredPI=PendingIntent.getBroadcast(this,0,new Intent(DELIVERED),0);
  getLocationInfo();
  StringBuffer message=new StringBuffer();
  message.append(testMessage);
  if (addTrackingMetadata) {
    message.append(' ');
    message.append(""String_Node_Str"");
    message.append(java.util.UUID.randomUUID().toString());
    message.append(' ');
    message.append(""String_Node_Str"");
    message.append(new Date().getTime());
    message.append(' ');
    message.append(""String_Node_Str"");
    message.append(cid);
    message.append(' ');
    message.append(""String_Node_Str"");
    message.append(lac);
  }
  SMSSentStatusReceiver statusRev=new SMSSentStatusReceiver(_fromPhoneNumber,phoneNumber,message.toString(),operator,cid + ""String_Node_Str"",lac + ""String_Node_Str"",_smsLogger);
  registerReceiver(statusRev,new IntentFilter(SENT));
  if (!useDataPort) {
    sms.sendTextMessage(phoneNumber,null,message.toString(),sentPI,deliveredPI);
  }
 else {
    sms.sendDataMessage(phoneNumber,null,SMS_DATA_PORT,message.toString().getBytes(),sentPI,deliveredPI);
  }
}","private void sendSMS(String phoneNumber,String testMessage,boolean useDataPort,boolean addTrackingMetadata){
  String operator;
  int cid=-1, lac=-1;
  CellLocation location=(CellLocation)_telMgr.getCellLocation();
  if (location instanceof GsmCellLocation) {
    cid=((GsmCellLocation)location).getCid();
    lac=((GsmCellLocation)location).getLac();
  }
  operator=_telMgr.getNetworkOperator();
  StringBuffer message=new StringBuffer();
  message.append(testMessage);
  if (addTrackingMetadata) {
    String shortUUID=java.util.UUID.randomUUID().toString();
    shortUUID=shortUUID.substring(0,8);
    message.append(' ');
    message.append(""String_Node_Str"");
    message.append(shortUUID);
    message.append(' ');
    message.append(""String_Node_Str"");
    message.append(new Date().getTime());
    message.append(' ');
    message.append(""String_Node_Str"");
    message.append(cid);
    message.append(' ');
    message.append(""String_Node_Str"");
    message.append(lac);
    message.append(' ');
    message.append(""String_Node_Str"");
    message.append(operator);
  }
  if (!useDataPort) {
    sms.sendTextMessage(phoneNumber,null,message.toString(),_sentPI,_deliveredPI);
  }
 else {
    sms.sendDataMessage(phoneNumber,null,SMS_DATA_PORT,message.toString().getBytes(),_sentPI,_deliveredPI);
  }
  _smsLogger.logSend(_fromPhoneNumber,_toPhoneNumber,message.toString(),new Date(),operator,cid + ""String_Node_Str"",lac + ""String_Node_Str"");
}",0.501655020228025
179420,"private void stopSMSTest(){
  _doLoop=false;
  keepRunning=false;
}","private void stopSMSTest(){
  _doLoop=false;
  keepRunning=false;
  if (runThread.isAlive())   runThread.interrupt();
}",0.7204301075268817
179421,"public static <T>PropertyInfo<T> createPropertyInfo(String name,Class<T> valueType){
  return new PropertyInfo<T>(name){
  }
;
}","public static <T>PropertyInfo<T> createPropertyInfo(String name,Class<T> valueType){
  return new PropertyInfo<T>(name,valueType){
  }
;
}",0.962406015037594
179422,"@SuppressWarnings(""String_Node_Str"") private PropertyInfo(String name){
  this.name=name;
  valueType=(Class<T>)((ParameterizedType)getClass().getGenericSuperclass()).getActualTypeArguments()[0];
}","private PropertyInfo(String name,Class<T> valueType){
  this.name=name;
  this.valueType=valueType;
}",0.4966442953020134
179423,"public void setValue(T value){
  internalSetValue(value);
}","public void setValue(T value){
  internalSetValue(value);
  notifyListeners();
}",0.8489208633093526
179424,"/** 
 * Forward quotes to specific day (only day/month/year are being taken into account). Please ensure given date is a working day! In other case iterator will be set to point end of the quotes stream.
 * @param date - date to find (<b>must</b> be working day)
 */
public void forward(Date date){
  if (hasNext()) {
    long a=next.getDate().getTime();
    long b=date.getTime();
    long m=1000 * 60 * 60* 24;
    if (b / m < (a - m) / m) {
      SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
      throw new IllegalArgumentException(""String_Node_Str"" + sdf.format(next.getDate()) + ""String_Node_Str""+ ""String_Node_Str""+ sdf.format(date));
    }
  }
 else {
    throw new NoSuchElementException(""String_Node_Str"");
  }
  boolean found=false;
  try {
    found=qsr.seek(date);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  if (found) {
    next=null;
  }
}","/** 
 * Forward quotes to specific day (only day/month/year are being taken into account). Please ensure given date is a working day! In other case iterator will be set to point end of the quotes stream.
 * @param date - date to find (<b>must</b> be working day)
 */
public void forward(Date date){
  if (hasNext()) {
    long a=next.getDate().getTime();
    long b=date.getTime();
    long m=1000 * 60 * 60* 24;
    long db=b / m;
    long da=(a - m) / m;
    if (db < da) {
      SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
      throw new IllegalArgumentException(""String_Node_Str"" + sdf.format(next.getDate()) + ""String_Node_Str""+ ""String_Node_Str""+ sdf.format(date));
    }
 else     if (db == da) {
      return;
    }
 else {
      boolean found=false;
      try {
        found=qsr.seek(date);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
      if (found) {
        next=null;
      }
    }
  }
 else {
    throw new NoSuchElementException(""String_Node_Str"");
  }
}",0.7510373443983402
179425,"public static Date fromCGL(String str){
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  try {
    return sdf.parse(str);
  }
 catch (  ParseException e) {
    throw new RuntimeException(""String_Node_Str"" + str,e);
  }
}","public static Date fromCGL(String str){
  SimpleDateFormat sdf=QuotesStreamReader.DATE_FORMAT_SHORT;
  try {
    return sdf.parse(str);
  }
 catch (  ParseException e) {
    throw new RuntimeException(""String_Node_Str"" + str,e);
  }
}",0.8492569002123143
179426,"@Override public QuotesIterator<Quote> getIntradayQuotes(Symbol symbol) throws ProviderException {
  String tmpdir=CFG.getProperty(""String_Node_Str"",""String_Node_Str"");
  File f=new File(tmpdir + ""String_Node_Str"" + symbol.getName()+ ""String_Node_Str"");
  InputStream is=null;
  try {
    is=FileUtils.openInputStream(f);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return new QuotesIterator<Quote>(is);
}","@Override public QuotesIterator<Quote> getIntradayQuotes(Symbol symbol) throws ProviderException {
  String tmpdir=CFG.getProperty(""String_Node_Str"",""String_Node_Str"");
  File f=new File(tmpdir + ""String_Node_Str"" + symbol.getName()+ ""String_Node_Str"");
  if (!f.exists()) {
    throw new ProviderException(""String_Node_Str"" + f.getPath());
  }
  InputStream is=null;
  try {
    is=FileUtils.openInputStream(f);
  }
 catch (  IOException e) {
    throw new ProviderException(""String_Node_Str"" + f.getPath());
  }
  return new QuotesIterator<Quote>(is);
}",0.8302658486707567
179427,"public FakeRealTimeProvider(Symbol symbol,long from,long to){
  if (from > to) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + from + ""String_Node_Str""+ to);
  }
  try {
    qi=new QuotesIterator<Quote>(symbol);
  }
 catch (  FileNotFoundException e) {
    try {
      qi=Providers.getHistoryProvider().getIntradayQuotes(symbol);
    }
 catch (    ProviderException e1) {
      e1.printStackTrace();
    }
  }
catch (  IOException e) {
    throw new RuntimeException(e);
  }
  this.from=from;
  this.to=to;
  this.registry=FakeQuotesRegistry.getInstance();
}","public FakeRealTimeProvider(Symbol symbol,Date from,Date to){
  if (from != null) {
    this.from=from.getTime();
  }
 else {
    this.from=Long.MIN_VALUE;
  }
  if (to != null) {
    this.to=to.getTime();
  }
 else {
    this.to=Long.MAX_VALUE;
  }
  if (this.from > this.to) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + from + ""String_Node_Str""+ to);
  }
  try {
    qi=new QuotesIterator<Quote>(symbol);
  }
 catch (  FileNotFoundException e) {
    try {
      qi=Providers.getHistoryProvider().getIntradayQuotes(symbol);
    }
 catch (    ProviderException e1) {
      e1.printStackTrace();
    }
  }
catch (  IOException e) {
    throw new RuntimeException(e);
  }
  if (from != null) {
    qi.forward(from);
    if (!qi.hasNext()) {
      throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + from + ""String_Node_Str""+ to);
    }
  }
  this.registry=FakeQuotesRegistry.getInstance();
}",0.7056530214424951
179428,"@Override public Quote getQuote(Symbol symbol) throws ProviderException {
  if (reached) {
    return null;
  }
  Date d=null;
  Quote q=null;
  do {
    if ((q=qi.next()) == null) {
      return null;
    }
    putInRegistry(symbol,q);
    d=q.getDate();
  }
 while (d.getTime() < from);
  if (d.getTime() > to) {
    reached=true;
  }
  if (last != null) {
    q.setOpen(open);
    q.setHigh(high);
    q.setLow(low);
    q.setVolume(volume);
  }
  return q;
}","@Override public Quote getQuote(Symbol symbol) throws ProviderException {
  if (reached) {
    return null;
  }
  Date d=null;
  Quote q=null;
  do {
    try {
      q=qi.next();
    }
 catch (    NoSuchElementException e) {
      this.reached=true;
      qi.close();
      return null;
    }
    putInRegistry(symbol,q);
    d=q.getDate();
  }
 while (d.getTime() < from);
  if (d.getTime() > to) {
    reached=true;
    qi.close();
    return null;
  }
  if (last != null) {
    q.setOpen(open);
    q.setHigh(high);
    q.setLow(low);
    q.setVolume(volume);
  }
  return q;
}",0.6218809980806143
179429,"public static void main(String[] args) throws InterruptedException {
  Configuration CFG=Configuration.getInstance();
  CFG.setProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  CFG.setProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Symbol symbol=Symbol.FW20M11;
  String name=symbol + ""String_Node_Str"";
  SignalGenerator<Quote> siggen=new MAVD(5,10,20);
  Paper paper=new Paper(symbol);
  RealTimeProvider provider=new FakeRealTimeProvider(symbol,1,2);
  final FuturesTrader trader=new FuturesTrader(name,siggen,paper,provider);
  trader.getObserver().setInterval(0);
  trader.getDecisionMaker().setNullHandler(new NullEventHandler(){
    @Override public void handleNull(    NullEvent ne){
      trader.getObserver().stop();
    }
  }
);
  trader.trade();
  Thread.sleep(20000);
}","public static void main(String[] args) throws InterruptedException {
  Configuration CFG=Configuration.getInstance();
  CFG.setProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  CFG.setProperty(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Symbol symbol=Symbol.FW20M11;
  String name=symbol + ""String_Node_Str"";
  SignalGenerator<Quote> siggen=new MAVD(5,10,20);
  Paper paper=new Paper(symbol);
  RealTimeProvider provider=new FakeRealTimeProvider(symbol,null,null);
  final FuturesTrader trader=new FuturesTrader(name,siggen,paper,provider);
  trader.getObserver().setInterval(0);
  trader.getDecisionMaker().setNullHandler(new NullEventHandler(){
    @Override public void handleNull(    NullEvent ne){
      trader.getObserver().stop();
    }
  }
);
  trader.trade();
  Thread.sleep(20000);
}",0.9926918392204628
179430,"@Test public void test_getQuote() throws ProviderException {
  FakeRealTimeProvider sp=new FakeRealTimeProvider(SYMBOL,start.getTime(),end.getTime());
  while (!sp.isReached()) {
    Quote q=sp.getQuote(SYMBOL);
    System.out.println(q);
  }
}","@Test public void test_getQuote() throws ProviderException {
  Date start=DateUtils.fromCGL(""String_Node_Str"");
  Date end=DateUtils.fromCGL(""String_Node_Str"");
  FakeRealTimeProvider sp=new FakeRealTimeProvider(SYMBOL,start,end);
  for (int i=0; !sp.isReached(); i++) {
    Quote q=sp.getQuote(SYMBOL);
    if (i < 5) {
      Assert.assertNotNull(q);
    }
 else {
      Assert.assertNull(q);
    }
  }
}",0.5978428351309707
179431,"private DBDAO() throws DBDAOException {
  String usr=cfg.getProperty(""String_Node_Str"",""String_Node_Str"");
  String pwd=cfg.getProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    con=DriverManager.getConnection(url,usr,pwd);
    SQLUtils.installProcedures(con);
  }
 catch (  Exception e) {
    throw new DBDAOException(e);
  }
}","private DBDAO() throws DBDAOException {
  String usr=cfg.getProperty(""String_Node_Str"",""String_Node_Str"");
  String pwd=cfg.getProperty(""String_Node_Str"",""String_Node_Str"");
  if (usr == null) {
    throw new DBDAOException(""String_Node_Str"");
  }
  if (pwd == null) {
    throw new DBDAOException(""String_Node_Str"");
  }
  try {
    con=DriverManager.getConnection(url,usr,pwd);
    SQLUtils.installProcedures(con);
  }
 catch (  Exception e) {
    throw new DBDAOException(e);
  }
}",0.5292682926829269
179432,"/** 
 * Install all stored procedures from the Medusa stored procedures directory.
 * @throws SQLException if stored procedures directory is empty or otherreason
 */
public static void installProcedures(Connection conn) throws SQLException {
  File dir=new File(STORED_PROC_PATH);
  String[] paths=dir.list(new SQLFileFilter());
  if (paths.length > 0) {
    String name=null;
    for (    String path : paths) {
      name=path.substring(0,path.lastIndexOf(""String_Node_Str""));
      try {
        installProcedure(conn,name);
      }
 catch (      IOException e) {
        LOG.error(e.getMessage(),e);
      }
    }
  }
 else {
    throw new SQLException(""String_Node_Str"");
  }
}","/** 
 * Install all stored procedures from the Medusa stored procedures directory.
 * @throws SQLException if stored procedures directory is empty or otherreason
 */
public static void installProcedures(Connection conn) throws SQLException {
  if (STORED_PROC_PATH == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  File dir=new File(STORED_PROC_PATH);
  String[] paths=dir.list(new SQLFileFilter());
  if (paths.length > 0) {
    String name=null;
    for (    String path : paths) {
      name=path.substring(0,path.lastIndexOf(""String_Node_Str""));
      try {
        installProcedure(conn,name);
      }
 catch (      IOException e) {
        LOG.error(e.getMessage(),e);
      }
    }
  }
 else {
    throw new SQLException(""String_Node_Str"");
  }
}",0.9153475567790778
179433,"public static void main(String[] args){
  List<Double> list=new LinkedList<Double>();
  for (int u=0; u < close.length; u++) {
    list.add(close[u]);
  }
  Collections.reverse(list);
  for (int u=0; u < list.size(); u++) {
    close[u]=list.get(u);
  }
  double[] jma=SX.reverse(jrk(close,3,5));
  for (int i=70; i < jma.length; i++) {
    System.out.println(Double.toString(jma[i]).replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
  }
}","public static void main(String[] args){
  List<Double> list=new LinkedList<Double>();
  for (int u=0; u < close.length; u++) {
    list.add(close[u]);
  }
  Collections.reverse(list);
  for (int u=0; u < list.size(); u++) {
    close[u]=list.get(u);
  }
  double[] jma=SX.reverse(jrk(close,5,0));
  for (int i=70; i < jma.length; i++) {
    System.out.println(jma[i] - ref[i]);
  }
}",0.8836104513064132
179434,"/** 
 * Calculate <b>J</b>urik's <b>M</b>oving <b>A</b>verage for given quote point.
 * @param q - quote
 * @param K - MA degree
 * @param P - phase
 * @return Return double value
 */
public static double jma(Quote q,double K,double P){
  double[] c=SX.reverse(SX.detach(q,80)[3]);
  double[] jma=JRK.jrk(c,K,P);
  return jma[jma.length - 1];
}","/** 
 * Calculate <b>J</b>urik's <b>M</b>oving <b>A</b>verage for given quote point.
 * @param q - quote
 * @param K - MA degree
 * @param P - phase
 * @return Return double value
 */
public static double jma(Quote q,double K,double P){
  double[] c=SX.reverse(SX.detach(q,100)[3]);
  double[] jma=JRK.jrk(c,K,P);
  return jma[0];
}",0.9733727810650888
179435,"/** 
 * @return Return instance of history data provider
 */
public HistoryProvider getProvider(){
  String tmp=CFG.getProperty(""String_Node_Str"",""String_Node_Str"");
  if (name == null || !name.equals(tmp)) {
    name=tmp;
    Class<?> clazz=null;
    try {
      clazz=Class.forName(name);
    }
 catch (    ClassNotFoundException e) {
      throw new RuntimeException(e);
    }
    if (!HistoryProvider.class.isAssignableFrom(clazz)) {
      throw new RuntimeException(""String_Node_Str"" + HistoryProvider.class.getSimpleName());
    }
    Class<? extends HistoryProvider> pclazz=clazz.asSubclass(HistoryProvider.class);
    try {
      provider=pclazz.newInstance();
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  return provider;
}","/** 
 * @return Return instance of history data provider
 */
public HistoryProvider getProvider(){
  String tmp=CFG.getProperty(""String_Node_Str"",""String_Node_Str"");
  if (tmp == null) {
    return null;
  }
  if (name == null || !name.equals(tmp)) {
    name=tmp;
    Class<?> clazz=null;
    try {
      clazz=Class.forName(name);
    }
 catch (    ClassNotFoundException e) {
      throw new RuntimeException(e);
    }
    if (!HistoryProvider.class.isAssignableFrom(clazz)) {
      throw new RuntimeException(""String_Node_Str"" + HistoryProvider.class.getSimpleName());
    }
    Class<? extends HistoryProvider> pclazz=clazz.asSubclass(HistoryProvider.class);
    try {
      provider=pclazz.newInstance();
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  return provider;
}",0.9734177215189872
179436,"@Override public List<Quote> getLastQuotes(Symbol symbol) throws ProviderException {
  boolean download=true;
  File f=new File(""String_Node_Str"");
  if (f.exists()) {
    Date modified=new Date(f.lastModified());
    if (DateUtils.isToday(modified)) {
      download=false;
    }
  }
  if (download) {
    try {
      new MedusaHttpClient().download(LAST_QUOTES_URL,f);
    }
 catch (    HttpException e) {
      LOG.error(e.getMessage(),e);
    }
  }
  List<File> files=new LinkedList<File>();
  ZipEntry entry=null;
  String name=null;
  FileOutputStream fos=null;
  InputStream is=null;
  int i=-1;
  byte[] bytes=new byte[1024];
  try {
    ZipFile zip=new ZipFile(f);
    Enumeration<? extends ZipEntry> entries=zip.entries();
    while (entries.hasMoreElements()) {
      entry=entries.nextElement();
      name=entry.getName();
      if (!name.matches(""String_Node_Str"")) {
        continue;
      }
      is=zip.getInputStream(entry);
      f=new File(""String_Node_Str"" + name);
      if (!f.exists()) {
        if (!f.createNewFile()) {
          throw new ProviderException(""String_Node_Str"" + f.getName());
        }
      }
      fos=new FileOutputStream(f);
      while ((i=is.read(bytes)) != -1) {
        fos.write(bytes,0,i);
      }
      fos.close();
      files.add(f);
    }
  }
 catch (  Exception e) {
    throw new ProviderException(e);
  }
  FileInputStream fis=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  String line=null;
  String[] parts=null;
  Date date=null;
  double open=0;
  double high=0;
  double low=0;
  double close=0;
  long volume=0;
  List<Quote> quotes=new LinkedList<Quote>();
  Quote quote=null;
  for (  File file : files) {
    try {
      fis=new FileInputStream(file);
      isr=new InputStreamReader(fis);
      br=new BufferedReader(isr);
      while (br.ready()) {
        line=br.readLine();
        if (line.startsWith(symbol.getName())) {
          parts=line.split(""String_Node_Str"");
          break;
        }
      }
      if (parts == null) {
        if (quote == null) {
          List<Quote> tmp=QuotesRegistry.getInstance().getQuotes(symbol);
          if (tmp.size() > 0) {
            quote=tmp.get(tmp.size() - 1);
          }
 else {
            continue;
          }
        }
 else {
        }
      }
 else {
        if (parts.length < 7) {
          throw new ProviderException(""String_Node_Str"" + ""String_Node_Str"" + parts.length + ""String_Node_Str"");
        }
        if (!parts[0].equals(symbol.getName())) {
          throw new ProviderException(""String_Node_Str"" + symbol + ""String_Node_Str""+ ""String_Node_Str""+ parts[0]+ ""String_Node_Str"");
        }
        date=DATE_FORMAT.parse(parts[1]);
        open=Double.valueOf(parts[2]);
        high=Double.valueOf(parts[3]);
        low=Double.valueOf(parts[4]);
        close=Double.valueOf(parts[5]);
        volume=Long.valueOf(parts[6]);
        quote=new Quote(date,open,high,low,close,volume);
      }
      quotes.add(quote);
    }
 catch (    Throwable e) {
      throw new ProviderException(e);
    }
  }
  return quotes;
}","@Override public List<Quote> getLastQuotes(Symbol symbol) throws ProviderException {
  boolean download=true;
  String dir=CFG.getProperty(""String_Node_Str"",""String_Node_Str"");
  File f=new File(dir + ""String_Node_Str"");
  if (f.exists()) {
    Date modified=new Date(f.lastModified());
    if (DateUtils.isToday(modified)) {
      download=false;
    }
  }
  if (download) {
    try {
      new MedusaHttpClient().download(LAST_QUOTES_URL,f);
    }
 catch (    HttpException e) {
      LOG.error(e.getMessage(),e);
    }
  }
  List<File> files=new LinkedList<File>();
  ZipEntry entry=null;
  String name=null;
  FileOutputStream fos=null;
  InputStream is=null;
  int i=-1;
  byte[] bytes=new byte[1024];
  try {
    ZipFile zip=new ZipFile(f);
    Enumeration<? extends ZipEntry> entries=zip.entries();
    while (entries.hasMoreElements()) {
      entry=entries.nextElement();
      name=entry.getName();
      if (!name.matches(""String_Node_Str"")) {
        continue;
      }
      is=zip.getInputStream(entry);
      f=new File(dir + ""String_Node_Str"" + name);
      if (!f.exists()) {
        if (!f.createNewFile()) {
          throw new ProviderException(""String_Node_Str"" + f.getName());
        }
      }
      fos=new FileOutputStream(f);
      while ((i=is.read(bytes)) != -1) {
        fos.write(bytes,0,i);
      }
      fos.close();
      files.add(f);
    }
  }
 catch (  Exception e) {
    throw new ProviderException(e);
  }
  FileInputStream fis=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  String line=null;
  String[] parts=null;
  Date date=null;
  double open=0;
  double high=0;
  double low=0;
  double close=0;
  long volume=0;
  List<Quote> quotes=new LinkedList<Quote>();
  Quote quote=null;
  for (  File file : files) {
    try {
      fis=new FileInputStream(file);
      isr=new InputStreamReader(fis);
      br=new BufferedReader(isr);
      while (br.ready()) {
        line=br.readLine();
        if (line.startsWith(symbol.getName())) {
          parts=line.split(""String_Node_Str"");
          break;
        }
      }
      if (parts == null) {
        if (quote == null) {
          List<Quote> tmp=QuotesRegistry.getInstance().getQuotes(symbol);
          if (tmp.size() > 0) {
            quote=tmp.get(tmp.size() - 1);
          }
 else {
            continue;
          }
        }
 else {
        }
      }
 else {
        if (parts.length < 7) {
          throw new ProviderException(""String_Node_Str"" + ""String_Node_Str"" + parts.length + ""String_Node_Str"");
        }
        if (!parts[0].equals(symbol.getName())) {
          throw new ProviderException(""String_Node_Str"" + symbol + ""String_Node_Str""+ ""String_Node_Str""+ parts[0]+ ""String_Node_Str"");
        }
        date=DATE_FORMAT.parse(parts[1]);
        open=Double.valueOf(parts[2]);
        high=Double.valueOf(parts[3]);
        low=Double.valueOf(parts[4]);
        close=Double.valueOf(parts[5]);
        volume=Long.valueOf(parts[6]);
        quote=new Quote(date,open,high,low,close,volume);
      }
      quotes.add(quote);
    }
 catch (    Throwable e) {
      throw new ProviderException(e);
    }
  }
  return quotes;
}",0.9841116995666828
179437,"private void downloadZIP(File zipf,Symbol symbol) throws ProviderException {
  FileOutputStream fos=null;
  HttpEntity entity=null;
  try {
    fos=new FileOutputStream(zipf);
    MedusaHttpClient client=new MedusaHttpClient();
    HttpGet get=new HttpGet(""String_Node_Str"" + symbol.getName() + ""String_Node_Str"");
    HttpResponse response=client.execute(get);
    entity=response.getEntity();
    entity.writeTo(fos);
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + symbol + ""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    throw new ProviderException(e);
  }
 finally {
    if (fos != null) {
      try {
        fos.close();
      }
 catch (      IOException e) {
        throw new ProviderException(e);
      }
    }
    if (entity != null) {
      try {
        entity.getContent().close();
      }
 catch (      Exception e) {
        throw new ProviderException(e);
      }
    }
  }
}","private void downloadZIP(File zipf,Symbol symbol) throws ProviderException {
  FileOutputStream fos=null;
  HttpEntity entity=null;
  try {
    if (!zipf.exists()) {
      File parent=new File(zipf.getParent());
      if (!parent.exists()) {
        parent.mkdirs();
      }
      if (!zipf.exists()) {
        if (zipf.createNewFile()) {
          throw new ProviderException(""String_Node_Str"");
        }
      }
    }
    fos=new FileOutputStream(zipf);
    MedusaHttpClient client=new MedusaHttpClient();
    HttpGet get=new HttpGet(""String_Node_Str"" + symbol.getName() + ""String_Node_Str"");
    HttpResponse response=client.execute(get);
    entity=response.getEntity();
    entity.writeTo(fos);
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + symbol + ""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    throw new ProviderException(e);
  }
 finally {
    if (fos != null) {
      try {
        fos.close();
      }
 catch (      IOException e) {
        throw new ProviderException(e);
      }
    }
    if (entity != null) {
      try {
        entity.getContent().close();
      }
 catch (      Exception e) {
        throw new ProviderException(e);
      }
    }
  }
}",0.8678890456041373
179438,"@Override public QuotesIterator<Quote> getIntradayQuotes(Symbol symbol) throws ProviderException {
  boolean download=true;
  File prn=new File(""String_Node_Str"" + symbol.getName() + ""String_Node_Str"");
  if (prn.exists()) {
    Date modified=new Date(prn.lastModified());
    if (DateUtils.isToday(modified)) {
      download=false;
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + symbol + ""String_Node_Str""+ (download ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
  }
  if (download) {
    File zipf=new File(""String_Node_Str"" + symbol.getName() + ""String_Node_Str"");
    downloadZIP(zipf,symbol);
    ZipFile zf=null;
    int attempts=0;
    do {
      try {
        zf=new ZipFile(zipf);
        break;
      }
 catch (      ZipException ze) {
        LOG.error(""String_Node_Str"" + zipf.getName());
        downloadZIP(zipf,symbol);
      }
catch (      IOException e) {
        throw new ProviderException(e);
      }
    }
 while (attempts++ < 5);
    boolean unpacked=false;
    Enumeration<? extends ZipEntry> zfe=zf.entries();
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + symbol);
    }
    while (zfe.hasMoreElements()) {
      ZipEntry ze=zfe.nextElement();
      if (!prn.getName().equals(ze.getName())) {
        continue;
      }
      OutputStream os=null;
      InputStream is=null;
      try {
        os=new FileOutputStream(prn);
        is=zf.getInputStream(ze);
        byte[] bytes=new byte[1024 * 8];
        int n=0;
        while ((n=is.read(bytes)) > 0) {
          os.write(bytes,0,n);
        }
        unpacked=true;
      }
 catch (      IOException e) {
        throw new ProviderException(e);
      }
 finally {
        if (os != null) {
          try {
            os.close();
          }
 catch (          IOException e) {
            throw new ProviderException(e);
          }
        }
        if (is != null) {
          try {
            is.close();
          }
 catch (          IOException e) {
            throw new ProviderException(e);
          }
        }
        if (!zipf.delete()) {
          zipf.deleteOnExit();
        }
      }
    }
    if (!unpacked) {
      throw new ProviderException(""String_Node_Str"" + prn.getName() + ""String_Node_Str"");
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + symbol + ""String_Node_Str""+ prn.getName());
    }
  }
  try {
    return new QuotesIterator<Quote>(symbol);
  }
 catch (  IOException e) {
    throw new ProviderException(e);
  }
}","@Override public QuotesIterator<Quote> getIntradayQuotes(Symbol symbol) throws ProviderException {
  boolean download=true;
  String dir=CFG.getProperty(""String_Node_Str"",""String_Node_Str"");
  File prn=new File(dir + ""String_Node_Str"" + symbol.getName()+ ""String_Node_Str"");
  File parent=prn.getParentFile();
  if (!parent.exists()) {
    parent.mkdirs();
  }
  if (prn.exists()) {
    Date modified=new Date(prn.lastModified());
    if (DateUtils.isToday(modified)) {
      download=false;
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + symbol + ""String_Node_Str""+ (download ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
    }
  }
  if (download) {
    File zipf=new File(""String_Node_Str"" + symbol.getName() + ""String_Node_Str"");
    downloadZIP(zipf,symbol);
    ZipFile zf=null;
    int attempts=0;
    do {
      try {
        zf=new ZipFile(zipf);
        break;
      }
 catch (      ZipException ze) {
        LOG.error(""String_Node_Str"" + zipf.getName());
        downloadZIP(zipf,symbol);
      }
catch (      IOException e) {
        throw new ProviderException(e);
      }
    }
 while (attempts++ < 5);
    boolean unpacked=false;
    Enumeration<? extends ZipEntry> zfe=zf.entries();
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + symbol);
    }
    while (zfe.hasMoreElements()) {
      ZipEntry ze=zfe.nextElement();
      if (!prn.getName().equals(ze.getName())) {
        continue;
      }
      OutputStream os=null;
      InputStream is=null;
      try {
        os=new FileOutputStream(prn);
        is=zf.getInputStream(ze);
        byte[] bytes=new byte[1024 * 8];
        int n=0;
        while ((n=is.read(bytes)) > 0) {
          os.write(bytes,0,n);
        }
        unpacked=true;
      }
 catch (      IOException e) {
        throw new ProviderException(e);
      }
 finally {
        if (os != null) {
          try {
            os.close();
          }
 catch (          IOException e) {
            throw new ProviderException(e);
          }
        }
        if (is != null) {
          try {
            is.close();
          }
 catch (          IOException e) {
            throw new ProviderException(e);
          }
        }
        if (!zipf.delete()) {
          zipf.deleteOnExit();
        }
      }
    }
    if (!unpacked) {
      throw new ProviderException(""String_Node_Str"" + prn.getName() + ""String_Node_Str"");
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + symbol + ""String_Node_Str""+ prn.getName());
    }
  }
  try {
    return new QuotesIterator<Quote>(symbol);
  }
 catch (  IOException e) {
    throw new ProviderException(e);
  }
}",0.9692544196771714
179439,"@Override public List<Quote> getAllQuotes(Symbol symbol) throws ProviderException {
  boolean download=true;
  File f=new File(""String_Node_Str"");
  if (f.exists()) {
    Date modified=new Date(f.lastModified());
    if (DateUtils.isToday(modified)) {
      download=false;
    }
  }
  if (download) {
    downloadMSTCGL(f);
  }
  File file=null;
  ZipEntry entry=null;
  String name=null;
  FileOutputStream fos=null;
  InputStream is=null;
  int i=-1;
  byte[] bytes=new byte[32 * 1024];
  try {
    File sessall=new File(""String_Node_Str"");
    if (!sessall.exists()) {
      if (!sessall.mkdirs()) {
        throw new ProviderException(""String_Node_Str"" + f.getName());
      }
    }
    ZipFile zip=null;
    int attempts=0;
    do {
      try {
        zip=new ZipFile(f);
        break;
      }
 catch (      ZipException ze) {
        LOG.error(""String_Node_Str"" + f.getName());
        downloadMSTCGL(f);
      }
    }
 while (attempts++ < 5);
    Enumeration<? extends ZipEntry> entries=zip.entries();
    while (entries.hasMoreElements()) {
      entry=entries.nextElement();
      name=entry.getName();
      if (!name.matches(symbol.getName() + ""String_Node_Str"")) {
        continue;
      }
      is=zip.getInputStream(entry);
      File mstf=new File(""String_Node_Str"" + name);
      if (!mstf.exists()) {
        if (!mstf.createNewFile()) {
          throw new ProviderException(""String_Node_Str"" + mstf.getName());
        }
      }
      fos=new FileOutputStream(mstf);
      while ((i=is.read(bytes)) != -1) {
        fos.write(bytes,0,i);
      }
      fos.close();
      file=mstf;
      break;
    }
  }
 catch (  Exception e) {
    throw new ProviderException(e);
  }
  FileInputStream fis=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  String line=null;
  String[] parts=null;
  Date date=null;
  double open=0;
  double high=0;
  double low=0;
  double close=0;
  long volume=0;
  List<Quote> quotes=new LinkedList<Quote>();
  try {
    fis=new FileInputStream(file);
    isr=new InputStreamReader(fis);
    br=new BufferedReader(isr);
    while (br.ready()) {
      line=br.readLine();
      parts=line.split(""String_Node_Str"");
      if (parts[0].startsWith(""String_Node_Str"")) {
        continue;
      }
      if (parts.length < 7) {
        throw new ProviderException(""String_Node_Str"" + ""String_Node_Str"" + parts.length + ""String_Node_Str"");
      }
      if (!parts[0].equals(symbol.getName())) {
        throw new ProviderException(""String_Node_Str"" + symbol + ""String_Node_Str""+ ""String_Node_Str""+ parts[0]+ ""String_Node_Str"");
      }
      date=DATE_FORMAT.parse(parts[1]);
      open=Double.valueOf(parts[2]);
      high=Double.valueOf(parts[3]);
      low=Double.valueOf(parts[4]);
      close=Double.valueOf(parts[5]);
      volume=Long.valueOf(parts[6]);
      quotes.add(new Quote(date,open,high,low,close,volume));
    }
  }
 catch (  Throwable e) {
    throw new ProviderException(e);
  }
  return quotes;
}","@Override public List<Quote> getAllQuotes(Symbol symbol) throws ProviderException {
  boolean download=true;
  String dir=CFG.getProperty(""String_Node_Str"",""String_Node_Str"");
  File f=new File(dir + ""String_Node_Str"");
  if (f.exists()) {
    Date modified=new Date(f.lastModified());
    if (DateUtils.isToday(modified)) {
      download=false;
    }
  }
  if (download) {
    downloadMSTCGL(f);
  }
  File file=null;
  ZipEntry entry=null;
  String name=null;
  FileOutputStream fos=null;
  InputStream is=null;
  int i=-1;
  byte[] bytes=new byte[32 * 1024];
  try {
    File sessall=new File(dir + ""String_Node_Str"");
    if (!sessall.exists()) {
      if (!sessall.mkdirs()) {
        throw new ProviderException(""String_Node_Str"" + f.getName());
      }
    }
    ZipFile zip=null;
    int attempts=0;
    do {
      try {
        zip=new ZipFile(f);
        break;
      }
 catch (      ZipException ze) {
        LOG.error(""String_Node_Str"" + f.getName());
        downloadMSTCGL(f);
      }
    }
 while (attempts++ < 5);
    Enumeration<? extends ZipEntry> entries=zip.entries();
    while (entries.hasMoreElements()) {
      entry=entries.nextElement();
      name=entry.getName();
      if (!name.matches(symbol.getName() + ""String_Node_Str"")) {
        continue;
      }
      is=zip.getInputStream(entry);
      File mstf=new File(""String_Node_Str"" + name);
      if (!mstf.exists()) {
        if (!mstf.createNewFile()) {
          throw new ProviderException(""String_Node_Str"" + mstf.getName());
        }
      }
      fos=new FileOutputStream(mstf);
      while ((i=is.read(bytes)) != -1) {
        fos.write(bytes,0,i);
      }
      fos.close();
      file=mstf;
      break;
    }
  }
 catch (  Exception e) {
    throw new ProviderException(e);
  }
  FileInputStream fis=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  String line=null;
  String[] parts=null;
  Date date=null;
  double open=0;
  double high=0;
  double low=0;
  double close=0;
  long volume=0;
  List<Quote> quotes=new LinkedList<Quote>();
  Quote q=null, t=null;
  try {
    fis=new FileInputStream(file);
    isr=new InputStreamReader(fis);
    br=new BufferedReader(isr);
    while (br.ready()) {
      line=br.readLine();
      parts=line.split(""String_Node_Str"");
      if (parts[0].startsWith(""String_Node_Str"")) {
        continue;
      }
      if (parts.length < 7) {
        throw new ProviderException(""String_Node_Str"" + ""String_Node_Str"" + parts.length + ""String_Node_Str"");
      }
      if (!parts[0].equals(symbol.getName())) {
        throw new ProviderException(""String_Node_Str"" + symbol + ""String_Node_Str""+ ""String_Node_Str""+ parts[0]+ ""String_Node_Str"");
      }
      date=DATE_FORMAT.parse(parts[1]);
      open=Double.valueOf(parts[2]);
      high=Double.valueOf(parts[3]);
      low=Double.valueOf(parts[4]);
      close=Double.valueOf(parts[5]);
      volume=Long.valueOf(parts[6]);
      t=new Quote(date,open,high,low,close,volume);
      if (q != null) {
        t.setPrev(q);
        q.setNext(t);
      }
      q=t;
      quotes.add(t);
    }
  }
 catch (  Throwable e) {
    throw new ProviderException(e);
  }
  return quotes;
}",0.960586319218241
179440,"@Override public void priceChange(PriceEvent pe){
  if (pe instanceof NullEvent) {
    handleNull((NullEvent)pe);
    return;
  }
  Paper paper=null;
  if (trader != null) {
    paper=trader.getPaper();
  }
 else {
    paper=Wallet.getInstance().getPaper(observer.getSymbol());
  }
  if (paper == null) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + trader.getSymbol());
  }
  Quote quote=pe.getQuote();
  Symbol symbol=observer.getSymbol();
  quote=bind(quote,symbol);
  Signal signal=generator.generate(quote);
  SignalType type=signal.getType();
  boolean buy=position == SHORT && type == BUY;
  boolean sell=position == LONG && type == SELL;
  if (LOG.isInfoEnabled()) {
    LOG.info(""String_Node_Str"" + pe + ""String_Node_Str""+ signal);
  }
  if (buy || sell) {
    notifyListeners(new DecisionEvent(this,paper,quote,type));
  }
 else {
    unbind(quote,symbol);
  }
}","@Override public void priceChange(PriceEvent pe){
  if (pe instanceof NullEvent) {
    handleNull((NullEvent)pe);
    return;
  }
  Paper paper=null;
  if (trader != null) {
    paper=trader.getPaper();
  }
 else {
    paper=Wallet.getInstance().getPaper(observer.getSymbol());
  }
  if (paper == null) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + observer.getSymbol());
  }
  Quote quote=pe.getQuote();
  Symbol symbol=observer.getSymbol();
  quote=bind(quote,symbol);
  Signal signal=generator.generate(quote);
  SignalType type=signal.getType();
  boolean buy=position == SHORT && type == BUY;
  boolean sell=position == LONG && type == SELL;
  if (LOG.isInfoEnabled()) {
    LOG.info(""String_Node_Str"" + pe + ""String_Node_Str""+ signal);
  }
  if (buy || sell) {
    notifyListeners(new DecisionEvent(this,paper,quote,type));
  }
 else {
    unbind(quote,symbol);
  }
}",0.9944382647385984
179441,"/** 
 * Force reload wallet from the database.
 */
public void reload(){
  papers=dbdao.getPapers();
}","/** 
 * Force reload wallet from the database.
 */
public void reload(){
  if (dbdao == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  papers=dbdao.getPapers();
}",0.723404255319149
179442,"public static void main(String[] args) throws ParseException {
  configureLoggers();
  Symbol sym=Symbol.POZ;
  String from=""String_Node_Str"";
  String to=""String_Node_Str"";
  SignalGenerator<Quote> siggen=new MAVD(20,40,100);
  Wallet.getInstance().addPaper(new Paper(sym,100));
  final QuotesRegistrySimulator registry=new QuotesRegistrySimulator();
  final StocksSimulator observer=new StocksSimulator(sym,DATE_FORMAT.parse(from),DATE_FORMAT.parse(to));
  observer.getRunner().setDaemon(false);
  final CyclicBarrier cb=new CyclicBarrier(2);
  final DecisionMaker dmaker=new DecisionMaker(observer,siggen){
    @Override protected void handleNull(    NullEvent ne){
      try {
        cb.await();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
catch (      BrokenBarrierException e) {
        e.printStackTrace();
      }
      getObserver().stop();
    }
  }
;
  dmaker.setRegistry(registry);
  final double start=3000;
  final double[] finish=new double[1];
  DecisionListener dl=new DecisionListener(){
    Map<String,Object> dates=new HashMap<String,Object>();
    double cash=start;
    int number=0;
    double assets=0;
    @Override public void positionChange(    PositionEvent pe){
    }
    @Override public void decisionChange(    DecisionEvent de){
      Quote q=de.getQuote();
      String date=q.getDateString();
      if (dates.get(date) == null) {
        if (de.getSignalType() == SignalType.BUY) {
          dmaker.setPosition(Position.LONG);
          int n=(int)Math.ceil(cash / q.getClose());
          double fund=n * q.getClose();
          double tax=fund * 0.0028;
          double spread=n * 0.01;
          cash=cash - fund - tax- spread;
          number=n;
          assets=n * q.getClose() + cash;
          finish[0]=assets;
          System.out.println(q.getDateString() + ""String_Node_Str"" + ""String_Node_Str""+ n+ ""String_Node_Str""+ q.getClose()+ ""String_Node_Str""+ String.format(""String_Node_Str"",assets)+ ""String_Node_Str""+ ""String_Node_Str""+ String.format(""String_Node_Str"",tax)+ ""String_Node_Str""+ String.format(""String_Node_Str"",spread));
        }
 else {
          dmaker.setPosition(Position.SHORT);
          double fund=number * q.getClose();
          double tax=fund * 0.0028;
          double spread=number * 0.01;
          int n=number;
          cash=cash + fund - tax - spread;
          number=0;
          assets=cash;
          finish[0]=assets;
          System.out.println(q.getDateString() + ""String_Node_Str"" + ""String_Node_Str""+ n+ ""String_Node_Str""+ q.getClose()+ ""String_Node_Str""+ String.format(""String_Node_Str"",assets)+ ""String_Node_Str""+ ""String_Node_Str""+ String.format(""String_Node_Str"",tax)+ ""String_Node_Str""+ String.format(""String_Node_Str"",spread));
        }
      }
 else {
        return;
      }
      dates.put(date,true);
    }
  }
;
  dmaker.addDecisionListener(dl);
  dmaker.start();
  try {
    cb.await();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  BrokenBarrierException e) {
    e.printStackTrace();
  }
  System.out.println(""String_Node_Str"" + Math.round(100 * (finish[0] - start) / start) + ""String_Node_Str"");
}","public static void main(String[] args) throws ParseException {
  configureLoggers();
  Symbol sym=Symbol.IPL;
  String from=""String_Node_Str"";
  String to=""String_Node_Str"";
  SignalGenerator<Quote> siggen=new JMAC(7,14,10);
  Wallet.getInstance().addPaper(new Paper(sym,100));
  final QuotesRegistrySimulator registry=new QuotesRegistrySimulator();
  final StocksSimulator observer=new StocksSimulator(sym,DATE_FORMAT.parse(from),DATE_FORMAT.parse(to));
  observer.getRunner().setDaemon(false);
  final CyclicBarrier cb=new CyclicBarrier(2);
  final DecisionMaker dmaker=new DecisionMaker(observer,siggen){
    @Override protected void handleNull(    NullEvent ne){
      try {
        cb.await();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
catch (      BrokenBarrierException e) {
        e.printStackTrace();
      }
      getObserver().stop();
    }
  }
;
  dmaker.setRegistry(registry);
  final double start=3000;
  final double[] finish=new double[1];
  DecisionListener dl=new DecisionListener(){
    Map<String,Object> dates=new HashMap<String,Object>();
    double cash=start;
    int number=0;
    double assets=0;
    @Override public void positionChange(    PositionEvent pe){
    }
    @Override public void decisionChange(    DecisionEvent de){
      Quote q=de.getQuote();
      String date=q.getDateString();
      if (dates.get(date) == null) {
        if (de.getSignalType() == SignalType.BUY) {
          dmaker.setPosition(Position.LONG);
          int n=(int)Math.ceil(cash / q.getClose());
          double fund=n * q.getClose();
          double tax=fund * 0.0028;
          double spread=n * 0.01;
          cash=cash - fund - tax- spread;
          number=n;
          assets=n * q.getClose() + cash;
          finish[0]=assets;
          System.out.println(q.getDateString() + ""String_Node_Str"" + ""String_Node_Str""+ n+ ""String_Node_Str""+ q.getClose()+ ""String_Node_Str""+ String.format(""String_Node_Str"",assets)+ ""String_Node_Str""+ ""String_Node_Str""+ String.format(""String_Node_Str"",tax)+ ""String_Node_Str""+ String.format(""String_Node_Str"",spread));
        }
 else {
          dmaker.setPosition(Position.SHORT);
          double fund=number * q.getClose();
          double tax=fund * 0.0028;
          double spread=number * 0.01;
          int n=number;
          cash=cash + fund - tax - spread;
          number=0;
          assets=cash;
          finish[0]=assets;
          System.out.println(q.getDateString() + ""String_Node_Str"" + ""String_Node_Str""+ n+ ""String_Node_Str""+ q.getClose()+ ""String_Node_Str""+ String.format(""String_Node_Str"",assets)+ ""String_Node_Str""+ ""String_Node_Str""+ String.format(""String_Node_Str"",tax)+ ""String_Node_Str""+ String.format(""String_Node_Str"",spread));
        }
      }
 else {
        return;
      }
      dates.put(date,true);
    }
  }
;
  dmaker.addDecisionListener(dl);
  dmaker.start();
  try {
    cb.await();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  BrokenBarrierException e) {
    e.printStackTrace();
  }
  System.out.println(""String_Node_Str"" + Math.round(100 * (finish[0] - start) / start) + ""String_Node_Str"");
}",0.9968474148802018
179443,"/** 
 * Read HTML, parse it and find symbol data inside.
 * @param symbol - symbol to find
 * @param html - input HTML
 * @return Return new quote
 * @throws ProviderException
 */
private Quote getQuoteFromHTML(Symbol symbol,String html) throws ProviderException {
  Document dom=parseHTML(html);
  String xpath=""String_Node_Str"";
  XPathExpression expression=getExpression(xpath);
  NodeList nodes=getNodeList(dom,expression);
  Node node=null;
  if (nodes.getLength() > 0) {
    node=nodes.item(0);
    expression=getExpression(""String_Node_Str"" + symbol.getName() + ""String_Node_Str"");
    nodes=getNodeList(node,expression);
    if (nodes.getLength() > 0) {
      node=nodes.item(0).getParentNode().getParentNode();
    }
 else {
      throw new ProviderException(""String_Node_Str"" + symbol.getName());
    }
    String time=getNodeValue(node,getExpression(""String_Node_Str""));
    String price=getNodeValue(node,getExpression(""String_Node_Str""));
    String open=getNodeValue(node,getExpression(""String_Node_Str""));
    String high=getNodeValue(node,getExpression(""String_Node_Str""));
    String low=getNodeValue(node,getExpression(""String_Node_Str""));
    String volume=getNodeValue(node,getExpression(""String_Node_Str""));
    Date now=new Date();
    Date date=null;
    try {
      date=TIME_FORMAT.parse(time);
    }
 catch (    ParseException e) {
      throw new ProviderException(e);
    }
    Calendar tmp=new GregorianCalendar();
    tmp.setTime(date);
    Calendar calendar=new GregorianCalendar();
    Calendarium c=Calendarium.getInstance();
    while (c.isFreeDay(now)) {
      now=c.getPreviousWorkingDay(now);
    }
    calendar.setTime(now);
    calendar.set(Calendar.HOUR_OF_DAY,tmp.get(Calendar.HOUR_OF_DAY));
    calendar.set(Calendar.MINUTE,tmp.get(Calendar.MINUTE));
    calendar.set(Calendar.SECOND,tmp.get(Calendar.SECOND));
    calendar.set(Calendar.MILLISECOND,0);
    now=calendar.getTime();
    double dopen=Double.parseDouble(open.replaceAll(""String_Node_Str"",""String_Node_Str""));
    double dhigh=Double.parseDouble(high.replaceAll(""String_Node_Str"",""String_Node_Str""));
    double dlow=Double.parseDouble(low.replaceAll(""String_Node_Str"",""String_Node_Str""));
    double close=Double.parseDouble(price.replaceAll(""String_Node_Str"",""String_Node_Str""));
    long dvolume=Long.parseLong(volume.replaceAll(""String_Node_Str"",""String_Node_Str""));
    return new Quote(now,dopen,dhigh,dlow,close,dvolume);
  }
 else {
    throw new ProviderException(""String_Node_Str"" + xpath);
  }
}","/** 
 * Read HTML, parse it and find symbol data inside.
 * @param symbol - symbol to find
 * @param html - input HTML
 * @return Return new quote
 * @throws ProviderException
 */
private Quote getQuoteFromHTML(Symbol symbol,String html) throws ProviderException {
  Document dom=parseHTML(html);
  String xpath=""String_Node_Str"";
  XPathExpression expression=getExpression(xpath);
  NodeList nodes=getNodeList(dom,expression);
  Node node=null;
  if (nodes.getLength() > 0) {
    node=nodes.item(0);
    expression=getExpression(""String_Node_Str"" + symbol.getName() + ""String_Node_Str"");
    nodes=getNodeList(node,expression);
    if (nodes.getLength() > 0) {
      node=nodes.item(0).getParentNode().getParentNode();
    }
 else {
      throw new ProviderException(""String_Node_Str"" + symbol.getName());
    }
    String time=getNodeValue(node,getExpression(""String_Node_Str""));
    String price=getNodeValue(node,getExpression(""String_Node_Str""));
    String open=getNodeValue(node,getExpression(""String_Node_Str""));
    String high=getNodeValue(node,getExpression(""String_Node_Str""));
    String low=getNodeValue(node,getExpression(""String_Node_Str""));
    String volume=getNodeValue(node,getExpression(""String_Node_Str""));
    Date now=new Date();
    Date date=null;
    try {
      date=TIME_FORMAT.parse(time);
    }
 catch (    ParseException e) {
      throw new ProviderException(e);
    }
    Calendar tmp=new GregorianCalendar();
    tmp.setTime(date);
    Calendar calendar=new GregorianCalendar();
    Calendarium c=Calendarium.getInstance();
    while (c.isFreeDay(now)) {
      now=c.getPreviousWorkingDay(now);
    }
    calendar.setTime(now);
    calendar.set(Calendar.HOUR_OF_DAY,tmp.get(Calendar.HOUR_OF_DAY));
    calendar.set(Calendar.MINUTE,tmp.get(Calendar.MINUTE));
    calendar.set(Calendar.SECOND,tmp.get(Calendar.SECOND));
    calendar.set(Calendar.MILLISECOND,0);
    now=calendar.getTime();
    String[] check=new String[]{open,high,low,price,volume};
    for (int j=0; j < check.length; j++) {
      if (""String_Node_Str"".equals(check[j])) {
        throw new QuoteLackException(""String_Node_Str"" + symbol);
      }
    }
    double dopen=Double.parseDouble(open.replaceAll(""String_Node_Str"",""String_Node_Str""));
    double dhigh=Double.parseDouble(high.replaceAll(""String_Node_Str"",""String_Node_Str""));
    double dlow=Double.parseDouble(low.replaceAll(""String_Node_Str"",""String_Node_Str""));
    double close=Double.parseDouble(price.replaceAll(""String_Node_Str"",""String_Node_Str""));
    long dvolume=Long.parseLong(volume.replaceAll(""String_Node_Str"",""String_Node_Str""));
    return new Quote(now,dopen,dhigh,dlow,close,dvolume);
  }
 else {
    throw new ProviderException(""String_Node_Str"" + xpath);
  }
}",0.7543792840822544
179444,"@Override public void priceChange(PriceEvent pe){
  if (pe instanceof NullEvent) {
    handleNull((NullEvent)pe);
    return;
  }
  Paper paper=null;
  if (trader == null) {
    paper=trader.getPaper();
  }
 else {
    paper=Wallet.getInstance().getPaper(observer.getSymbol());
  }
  if (paper == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Quote quote=pe.getQuote();
  Symbol symbol=observer.getSymbol();
  quote=bind(quote,symbol);
  Signal signal=generator.generate(quote);
  SignalType type=signal.getType();
  boolean buy=position == SHORT && type == BUY;
  boolean sell=position == LONG && type == SELL;
  if (LOG.isInfoEnabled()) {
    LOG.info(""String_Node_Str"" + pe + ""String_Node_Str""+ signal);
  }
  if (buy || sell) {
    notifyListeners(new DecisionEvent(this,paper,quote,type));
  }
 else {
    unbind(quote,symbol);
  }
}","@Override public void priceChange(PriceEvent pe){
  if (pe instanceof NullEvent) {
    handleNull((NullEvent)pe);
    return;
  }
  Paper paper=null;
  if (trader == null) {
    paper=trader.getPaper();
  }
 else {
    paper=Wallet.getInstance().getPaper(observer.getSymbol());
  }
  if (paper == null) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + trader.getSymbol());
  }
  Quote quote=pe.getQuote();
  Symbol symbol=observer.getSymbol();
  quote=bind(quote,symbol);
  Signal signal=generator.generate(quote);
  SignalType type=signal.getType();
  boolean buy=position == SHORT && type == BUY;
  boolean sell=position == LONG && type == SELL;
  if (LOG.isInfoEnabled()) {
    LOG.info(""String_Node_Str"" + pe + ""String_Node_Str""+ signal);
  }
  if (buy || sell) {
    notifyListeners(new DecisionEvent(this,paper,quote,type));
  }
 else {
    unbind(quote,symbol);
  }
}",0.9766381766381766
179445,"/** 
 * Run once per observer tick. If price is different in comparison previous one, notify price listeners.
 * @throws ProviderException
 */
protected void runOnce() throws ProviderException {
  Quote q=provider.getQuote(symbol);
  if (q == null) {
    notifyListeners(new NullEvent(this,price,price,null));
  }
 else {
    double tmp=q.getClose();
    if (tmp != price && price != -1) {
      notifyListeners(new PriceEvent(this,price,tmp,q));
    }
    price=tmp;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(getSymbol() + ""String_Node_Str"" + q);
  }
}","/** 
 * Run once per observer tick. If price is different in comparison previous one, notify price listeners.
 * @throws ProviderException
 */
protected void runOnce() throws ProviderException {
  Quote q=null;
  try {
    q=provider.getQuote(symbol);
  }
 catch (  QuoteLackException e) {
    LOG.warn(e.getMessage());
    return;
  }
  if (q == null) {
    notifyListeners(new NullEvent(this,price,price,null));
  }
 else {
    double tmp=q.getClose();
    if (tmp != price && price != -1) {
      notifyListeners(new PriceEvent(this,price,tmp,q));
    }
    price=tmp;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(getSymbol() + ""String_Node_Str"" + q);
  }
}",0.9148936170212766
179446,"/** 
 * @return Return paper.
 */
public Paper getPaper(){
  return paper;
}","/** 
 * @return Return paper.
 */
public Paper getPaper(){
  if (paper == null) {
    paper=new Paper(getSymbol(),paperDesiredQuantity,paperQuantity);
  }
  return paper;
}",0.6129032258064516
179447,"/** 
 * Obtain message for particular message code.
 * @param code - code to search
 * @return Message for given code or null if message has not been found
 * @throws SmesXException
 */
public Message receiveSMSForCode(String code) throws SmesXException {
  if (code == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  SmesXSMSReceive receiveSMS=null;
  do {
    receiveSMS=new SmesXSMSReceive();
    receiveSMS.setMarkAsRead(false);
    receiveSMS.setType(UNREAD);
    SmesXResponse response=execute(receiveSMS);
    SmesXOperation operation=response.getOperation();
    if (operation instanceof SmesXSMSReceive) {
      receiveSMS=(SmesXSMSReceive)operation;
      if (receiveSMS.containSMS()) {
        SmesXSMS sms=receiveSMS.getSMS();
        Message message=smsToMessage(sms);
        if (code.equals(message.getCode())) {
          return message;
        }
        if (receiveSMS.hasMore()) {
          receiveSMS.setAfterID(sms.getId());
        }
      }
    }
  }
 while (receiveSMS.hasMore());
  return null;
}","/** 
 * Obtain message for particular message code.
 * @param code - code to search
 * @return Message for given code or null if message has not been found
 * @throws SmesXException
 */
public Message receiveSMSForCode(String code) throws SmesXException {
  return smsToMessage(receiveRawSMSForCode(code));
}",0.3929098966026588
179448,"public List<Message> receiveSMSs(boolean markAsRead) throws SmesXException {
  List<Message> messages=new LinkedList<Message>();
  SmesXSMSReceive receiveSMS=null;
  do {
    receiveSMS=new SmesXSMSReceive();
    receiveSMS.setMarkAsRead(markAsRead);
    receiveSMS.setType(UNREAD);
    SmesXResponse response=execute(receiveSMS);
    SmesXOperation operation=response.getOperation();
    if (operation == null) {
      throw new SmesXException(""String_Node_Str"");
    }
    if (operation instanceof SmesXSMSReceive) {
      receiveSMS=(SmesXSMSReceive)operation;
      if (receiveSMS.containSMS()) {
        SmesXSMS sms=receiveSMS.getSMS();
        Message message=smsToMessage(sms);
        messages.add(message);
        if (receiveSMS.hasMore()) {
          receiveSMS.setAfterID(sms.getId());
        }
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + operation.getClass().getSimpleName() + ""String_Node_Str""+ ""String_Node_Str""+ receiveSMS.getClass().getSimpleName()+ ""String_Node_Str"");
    }
  }
 while (receiveSMS.hasMore());
  return messages;
}","public List<Message> receiveSMSs(boolean markAsRead) throws SmesXException {
  List<Message> messages=new LinkedList<Message>();
  SmesXSMSReceive receiveSMS=new SmesXSMSReceive();
  do {
    receiveSMS.setMarkAsRead(markAsRead);
    receiveSMS.setType(UNREAD);
    SmesXResponse response=execute(receiveSMS);
    SmesXOperation operation=response.getOperation();
    if (operation == null) {
      throw new SmesXException(""String_Node_Str"");
    }
    if (operation instanceof SmesXSMSReceive) {
      receiveSMS=(SmesXSMSReceive)operation;
      if (receiveSMS.containSMS()) {
        SmesXSMS sms=receiveSMS.getSMS();
        Message message=smsToMessage(sms);
        messages.add(message);
        if (receiveSMS.hasMore()) {
          receiveSMS.setSMS(null);
          receiveSMS.setAfterID(sms.getID());
        }
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + operation.getClass().getSimpleName() + ""String_Node_Str""+ ""String_Node_Str""+ receiveSMS.getClass().getSimpleName()+ ""String_Node_Str"");
    }
  }
 while (receiveSMS.hasMore());
  return messages;
}",0.9549632352941176
179449,"/** 
 * Convert   {@link SmesXSMS} to the {@link Message} object.
 * @param sms - SMS to convert
 * @return New message converted from SMS
 */
private Message smsToMessage(SmesXSMS sms){
  String body=sms.getBody();
  String code=null;
  Pattern pat=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pat.matcher(body);
  if (matcher.find()) {
    code=matcher.group();
  }
  if (code != null) {
    body=body.substring(code.length()).trim();
    code=code.substring(0,code.length() - 1);
  }
  Message message=new Message();
  message.setBody(body);
  message.setCode(code);
  message.setSender(sms.getMSISDN());
  return message;
}","/** 
 * Convert   {@link SmesXSMS} to the {@link Message} object.
 * @param sms - SMS to convert
 * @return New message converted from SMS
 */
protected Message smsToMessage(SmesXSMS sms){
  String body=sms.getBody();
  String code=null;
  Pattern pat=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pat.matcher(body);
  if (matcher.find()) {
    code=matcher.group();
  }
  if (code != null) {
    body=body.substring(code.length()).trim();
    code=code.substring(0,code.length() - 1);
  }
  Message message=new Message();
  message.setBody(body);
  message.setCode(code);
  message.setSender(sms.getMSISDN());
  return message;
}",0.9905808477237048
179450,"public static void main(String[] args){
  Configuration cfg=Configuration.getInstance();
  String usr=cfg.getProperty(""String_Node_Str"",""String_Node_Str"");
  String pwd=cfg.getProperty(""String_Node_Str"",""String_Node_Str"");
  SmesXProvider p=new SmesXProvider(usr,pwd);
  try {
    Message m=p.receiveSMSForCode(""String_Node_Str"");
    System.out.println(m);
  }
 catch (  SmesXException e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  Configuration cfg=Configuration.getInstance();
  String usr=cfg.getProperty(""String_Node_Str"",""String_Node_Str"");
  String pwd=cfg.getProperty(""String_Node_Str"",""String_Node_Str"");
  SmesXProvider p=new SmesXProvider(usr,pwd);
  try {
    List<Message> messages=p.receiveSMSsUnread();
    for (    Message m : messages) {
      System.out.println(m);
    }
    System.out.println(""String_Node_Str"");
    SmesXSMS sms=p.receiveRawSMSForCode(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + sms);
    p.markRawSMSAsRead(sms);
    System.out.println(""String_Node_Str"");
    messages=p.receiveSMSsUnread();
    for (    Message m : messages) {
      System.out.println(m);
    }
  }
 catch (  SmesXException e) {
    e.printStackTrace();
  }
}",0.6852917009038619
179451,"/** 
 * Add SMS ID to check status of. 
 * @param id - SMS ID
 */
public void addID(String id){
  if (ids == null) {
    ids=new LinkedList<String>();
  }
  ids.add(id);
}","/** 
 * Add SMS ID to check status of.
 * @param id - SMS ID
 */
public void addID(String id){
  if (ids == null) {
    ids=new LinkedList<String>();
  }
  ids.add(id);
}",0.997067448680352
179452,"public static void main(String[] args) throws IOException {
  Issue issue=new Issue();
  issue.user=""String_Node_Str"";
  issue.project=""String_Node_Str"";
  issue.title=""String_Node_Str"";
  issue.body=""String_Node_Str"";
  issue.assignee=""String_Node_Str"";
  new GitHubIssueHelper().openIssue(issue,args[1],args[2]);
}","public static void main(String[] args) throws IOException {
  Issue issue=new Issue();
  issue.user=""String_Node_Str"";
  issue.project=""String_Node_Str"";
  issue.title=""String_Node_Str"";
  issue.body=""String_Node_Str"";
  issue.assignee=""String_Node_Str"";
  openIssue(issue,args[0],args[1]);
}",0.8881578947368421
179453,"public static void openIssue(Issue issue,String username,String password) throws IOException {
  String apiPage=""String_Node_Str"" + issue.user + ""String_Node_Str""+ issue.project+ ""String_Node_Str"";
  String authString=username + ""String_Node_Str"" + password;
  byte[] authEncoded=Base64.encodeBase64(authString.getBytes());
  URL url=new URL(apiPage);
  URLConnection con=url.openConnection();
  con.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + new String(authEncoded));
  con.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  con.setDoOutput(true);
  OutputStreamWriter wr=new OutputStreamWriter(con.getOutputStream());
  wr.write(issue.toJson());
  wr.flush();
  InputStream is=con.getInputStream();
  InputStreamReader isr=new InputStreamReader(is);
  int numCharsRead;
  char[] charArray=new char[1024];
  StringBuffer sb=new StringBuffer();
  while ((numCharsRead=isr.read(charArray)) > 0) {
    sb.append(charArray,0,numCharsRead);
  }
  String result=sb.toString();
  System.out.println(""String_Node_Str"");
  System.out.println(result);
  System.out.println(""String_Node_Str"");
}","public static void openIssue(Issue issue,String username,String password) throws IOException {
  try {
    String apiPage=""String_Node_Str"" + issue.user + ""String_Node_Str""+ issue.project+ ""String_Node_Str"";
    String authString=username + ""String_Node_Str"" + password;
    byte[] authEncoded=Base64.encodeBase64(authString.getBytes());
    URL url=new URL(apiPage);
    URLConnection con=url.openConnection();
    con.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + new String(authEncoded));
    con.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    con.setDoOutput(true);
    OutputStreamWriter wr=new OutputStreamWriter(con.getOutputStream());
    wr.write(issue.toJson());
    wr.flush();
    InputStream is=con.getInputStream();
    InputStreamReader isr=new InputStreamReader(is);
    int numCharsRead;
    char[] charArray=new char[1024];
    StringBuffer sb=new StringBuffer();
    while ((numCharsRead=isr.read(charArray)) > 0) {
      sb.append(charArray,0,numCharsRead);
    }
    String result=sb.toString();
    System.out.println(""String_Node_Str"");
    System.out.println(result);
    System.out.println(""String_Node_Str"");
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9510309278350516
179454,"public void setProjectUrl(String githubProjectUrl){
  this.projectUrl=githubProjectUrl;
}","public void setProjectUrl(String projectUrl){
  this.projectUrl=projectUrl;
}",0.9036144578313252
179455,"@DataBoundConstructor public GitHubIssueNotifier(String githubProjectUrl){
  if (LOGGER.isLoggable(FINE)) {
    LOGGER.entering(this.getClass().getName(),""String_Node_Str"",new Object[]{githubProjectUrl});
  }
  LOGGER.info(""String_Node_Str"" + githubProjectUrl);
  this.projectUrl=githubProjectUrl;
}","@DataBoundConstructor public GitHubIssueNotifier(String projectUrl){
  if (LOGGER.isLoggable(FINE)) {
    LOGGER.entering(this.getClass().getName(),""String_Node_Str"",new Object[]{projectUrl});
  }
  this.projectUrl=projectUrl;
}",0.6869070208728653
179456,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener) throws InterruptedException, IOException {
  if (LOGGER.isLoggable(FINE)) {
    LOGGER.entering(this.getClass().getName(),""String_Node_Str"");
  }
  Result result=build.getResult();
  Result prevResult=null;
  AbstractBuild<?,?> prevBuild=build.getPreviousBuild();
  if (prevBuild != null)   prevResult=prevBuild.getResult();
  if (result == prevResult) {
  }
  AbstractTestResultAction<AbstractTestResultAction> testResultAction=build.getTestResultAction();
  if (testResultAction != null && testResultAction.getFailCount() > 0) {
    List<CaseResult> failed=testResultAction.getFailedTests();
    StringBuilder body=new StringBuilder();
    for (    CaseResult fail : failed) {
      LOGGER.info(fail.getDescription());
      LOGGER.info(fail.getDisplayName());
      LOGGER.info(fail.getDurationString());
      LOGGER.info(fail.getErrorDetails());
      LOGGER.info(fail.getErrorStackTrace());
      LOGGER.info(fail.getFullName());
      LOGGER.info(fail.getId());
      LOGGER.info(fail.getName());
      LOGGER.info(fail.getTitle());
      LOGGER.info(projectUrl + ""String_Node_Str"");
      body.append(""String_Node_Str"");
      body.append(fail.getId() + ""String_Node_Str"");
      body.append(fail.getFullName() + ""String_Node_Str"");
      body.append(fail.getDurationString() + ""String_Node_Str"");
      body.append(fail.getErrorDetails() + ""String_Node_Str"");
      body.append(fail.getErrorStackTrace() + ""String_Node_Str"");
      String username=DESCRIPTOR.getUsername();
      String password=DESCRIPTOR.getPassword();
      Issue issue=new Issue();
      issue.user=""String_Node_Str"";
      issue.project=""String_Node_Str"";
      issue.title=""String_Node_Str"";
      issue.assignee=username;
      issue.body=body.toString();
      GitHubIssueHelper.openIssue(issue,username,password);
    }
    LOGGER.info(""String_Node_Str"");
  }
  LOGGER.info(""String_Node_Str"");
  if (LOGGER.isLoggable(INFO)) {
    LOGGER.exiting(this.getClass().getName(),""String_Node_Str"");
  }
  return true;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener) throws InterruptedException, IOException {
  if (LOGGER.isLoggable(FINE)) {
    LOGGER.entering(this.getClass().getName(),""String_Node_Str"");
  }
  Result result=build.getResult();
  Result prevResult=null;
  AbstractBuild<?,?> prevBuild=build.getPreviousBuild();
  if (prevBuild != null)   prevResult=prevBuild.getResult();
  if (result == prevResult) {
  }
  AbstractTestResultAction<AbstractTestResultAction> testResultAction=build.getTestResultAction();
  if (testResultAction != null && testResultAction.getFailCount() > 0) {
    List<CaseResult> failed=testResultAction.getFailedTests();
    StringBuilder body=new StringBuilder();
    for (    CaseResult fail : failed) {
      LOGGER.info(fail.getDescription());
      LOGGER.info(fail.getDisplayName());
      LOGGER.info(fail.getDurationString());
      LOGGER.info(fail.getErrorDetails());
      LOGGER.info(fail.getErrorStackTrace());
      LOGGER.info(fail.getFullName());
      LOGGER.info(fail.getId());
      LOGGER.info(fail.getName());
      LOGGER.info(fail.getTitle());
      LOGGER.info(projectUrl + ""String_Node_Str"");
      body.append(""String_Node_Str"");
      body.append(fail.getId() + ""String_Node_Str"");
      body.append(fail.getFullName() + ""String_Node_Str"");
      body.append(fail.getDurationString() + ""String_Node_Str"");
      body.append(fail.getErrorDetails() + ""String_Node_Str"");
      body.append(fail.getErrorStackTrace() + ""String_Node_Str"");
      String username=null;
      String password=null;
      try {
        DescriptorImpl descriptor=(DescriptorImpl)getDescriptor();
        username=descriptor.getUsername();
        password=descriptor.getPassword();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      LOGGER.info(username);
      LOGGER.info(password);
      Issue issue=new Issue();
      issue.user=""String_Node_Str"";
      issue.project=""String_Node_Str"";
      issue.title=""String_Node_Str"";
      issue.assignee=""String_Node_Str"";
      issue.body=body.toString();
      GitHubIssueHelper.openIssue(issue,username,password);
    }
    LOGGER.info(""String_Node_Str"");
  }
  LOGGER.info(""String_Node_Str"");
  if (LOGGER.isLoggable(INFO)) {
    LOGGER.exiting(this.getClass().getName(),""String_Node_Str"");
  }
  return true;
}",0.8806296458242239
179457,"void setCourseInfo(String input){
  Pattern pattern1=Pattern.compile(""String_Node_Str"");
  Matcher matcher1=pattern1.matcher(input);
  Pattern pattern2=Pattern.compile(""String_Node_Str"");
  Matcher matcher2=pattern2.matcher(input);
  coursesInfo=new ArrayList<CourseInfo>();
  if (matcher1.find() && matcher2.find()) {
    int start=matcher1.start();
    int end=matcher1.end();
    String course_link=input.substring(start,end);
    start=matcher2.start() + 1;
    end=matcher2.end() - 1;
    String course_name=input.substring(start,end);
    coursesInfo.add(new CourseInfo(course_name,course_link));
  }
}","void setCourseInfo(String input){
  Pattern pattern1=Pattern.compile(""String_Node_Str"");
  Matcher matcher1=pattern1.matcher(input);
  Pattern pattern2=Pattern.compile(""String_Node_Str"");
  Matcher matcher2=pattern2.matcher(input);
  coursesInfo=new ArrayList<CourseInfo>();
  if (matcher1.find() && matcher2.find()) {
    int start=matcher1.start();
    int end=matcher1.end();
    String course_link=input.substring(start,end);
    start=matcher2.start() + 1;
    end=matcher2.end() - 1;
    String course_name=input.substring(start,end).trim();
    coursesInfo.add(new CourseInfo(course_name,course_link));
  }
}",0.9942763695829926
179458,"public ConfigManager(MobRider plugin){
  this.plugin=plugin;
  configFile=new File(plugin.getDataFolder(),CONFIG_FILE);
  config=getConfig(configFile);
  ConfigurationSection general=config.getConfigurationSection(""String_Node_Str"");
  LoggerUtil.getInstance().setDebug(general.getBoolean(""String_Node_Str"",false));
  controlItem=Material.matchMaterial(general.getString(""String_Node_Str""));
  updatePeriod=general.getLong(""String_Node_Str"");
  ConfigurationSection range=config.getConfigurationSection(""String_Node_Str"");
  maxTravelDistance=Double.valueOf(range.getDouble(""String_Node_Str"")).intValue();
  maxSearchRange=range.getDouble(""String_Node_Str"");
  attackRange=range.getDouble(""String_Node_Str"");
  mountRange=range.getDouble(""String_Node_Str"");
  goalRange=range.getDouble(""String_Node_Str"");
  ConfigurationSection messageSuffix=config.getConfigurationSection(""String_Node_Str"");
  attackConfirmedMessage=messageSuffix.getString(""String_Node_Str"");
  attackConfusedMessage=messageSuffix.getString(""String_Node_Str"");
  followConfirmedMessage=messageSuffix.getString(""String_Node_Str"");
  followConfusedMessage=messageSuffix.getString(""String_Node_Str"");
  goConfirmedMessage=messageSuffix.getString(""String_Node_Str"");
  goConfusedMessage=messageSuffix.getString(""String_Node_Str"");
  stopConfirmedMessage=messageSuffix.getString(""String_Node_Str"");
  fedConfirmedMessage=messageSuffix.getString(""String_Node_Str"");
  fedConfusedMessage=messageSuffix.getString(""String_Node_Str"");
  food=new HashSet<Material>();
  List<String> materials=config.getStringList(""String_Node_Str"");
  for (  String material : materials) {
    food.add(Material.matchMaterial(material));
  }
  ConfigurationSection mobs=config.getConfigurationSection(""String_Node_Str"");
  for (  String name : mobs.getKeys(false)) {
    ConfigurationSection mob=mobs.getConfigurationSection(name);
    new RideType(EntityType.fromName(name),Double.valueOf(mob.getDouble(""String_Node_Str"")).floatValue(),mob.getString(""String_Node_Str""),mob.getDouble(""String_Node_Str""),mob.getDouble(""String_Node_Str""));
  }
}","public ConfigManager(MobRider plugin){
  this.plugin=plugin;
  configFile=new File(plugin.getDataFolder(),CONFIG_FILE);
  config=getConfig(configFile);
  ConfigurationSection general=config.getConfigurationSection(""String_Node_Str"");
  LoggerUtil.getInstance().setDebug(general.getBoolean(""String_Node_Str"",false));
  controlItem=Material.matchMaterial(general.getString(""String_Node_Str""));
  updatePeriod=general.getLong(""String_Node_Str"");
  ConfigurationSection range=config.getConfigurationSection(""String_Node_Str"");
  maxTravelDistance=Double.valueOf(range.getDouble(""String_Node_Str"")).intValue();
  maxSearchRange=range.getDouble(""String_Node_Str"");
  attackRange=range.getDouble(""String_Node_Str"");
  mountRange=range.getDouble(""String_Node_Str"");
  goalRange=range.getDouble(""String_Node_Str"");
  ConfigurationSection messageSuffix=config.getConfigurationSection(""String_Node_Str"");
  attackConfirmedMessage=messageSuffix.getString(""String_Node_Str"");
  attackConfusedMessage=messageSuffix.getString(""String_Node_Str"");
  followConfirmedMessage=messageSuffix.getString(""String_Node_Str"");
  followConfusedMessage=messageSuffix.getString(""String_Node_Str"");
  goConfirmedMessage=messageSuffix.getString(""String_Node_Str"");
  goConfusedMessage=messageSuffix.getString(""String_Node_Str"");
  stopConfirmedMessage=messageSuffix.getString(""String_Node_Str"");
  fedConfirmedMessage=messageSuffix.getString(""String_Node_Str"");
  fedConfusedMessage=messageSuffix.getString(""String_Node_Str"");
  food=new HashSet<Material>();
  List<String> materials=config.getStringList(""String_Node_Str"");
  for (  String material : materials) {
    food.add(Material.matchMaterial(material));
  }
  ConfigurationSection mobs=config.getConfigurationSection(""String_Node_Str"");
  for (  String name : mobs.getKeys(false)) {
    ConfigurationSection mob=mobs.getConfigurationSection(name);
    EntityType type=EntityType.fromName(name);
    if (type != null) {
      new RideType(type,Double.valueOf(mob.getDouble(""String_Node_Str"")).floatValue(),mob.getString(""String_Node_Str""),mob.getDouble(""String_Node_Str""),mob.getDouble(""String_Node_Str""));
    }
  }
}",0.9730496453900708
179459,"public static void sendMessage(Rider rider,String suffix){
  Player player=rider.getPlayer();
  LivingEntity ride=rider.getRide();
  if (player != null && ride != null && !(ride instanceof HumanEntity)) {
    player.sendMessage(""String_Node_Str"" + getHealthString(rider) + ""String_Node_Str""+ ride.getType().getName()+ ""String_Node_Str""+ rider.getRideType().getNoise()+ suffix);
  }
}","public static void sendMessage(Rider rider,String suffix){
  Player player=rider.getPlayer();
  LivingEntity ride=rider.getRide();
  if (player != null && ride != null && rider.getRideType() != null && !(ride instanceof HumanEntity)) {
    player.sendMessage(""String_Node_Str"" + getHealthString(rider) + ""String_Node_Str""+ ride.getType().getName()+ ""String_Node_Str""+ rider.getRideType().getNoise()+ suffix);
  }
}",0.961104140526976
179460,"public void removeRider(Player player){
  Entity entity=player.getVehicle();
  if (entity instanceof LivingEntity) {
    LivingEntity target=(LivingEntity)entity;
    player.eject();
    if (DependencyUtils.hasPermission(player,""String_Node_Str"") && hasSpawnEgg(target)) {
      SpawnEggTask spawnEggTask=new SpawnEggTask(target);
      spawnEggTask.setTaskId(Bukkit.getScheduler().scheduleSyncRepeatingTask(plugin,spawnEggTask,0,1));
    }
  }
}","public void removeRider(Player player){
  Entity entity=player.getVehicle();
  if (entity instanceof LivingEntity) {
    LivingEntity target=(LivingEntity)entity;
    player.eject();
    if (DependencyUtils.hasPermission(player,""String_Node_Str"")) {
      scheduleSpawnEgg(target);
    }
  }
}",0.7469553450608931
179461,"public RiderManager(MobRider plugin){
  this.plugin=plugin;
  metrics=plugin.getMetricsManager();
  configManager=plugin.getConfigManager();
  goalManager=plugin.getGoalManager();
  riders=new ConcurrentHashMap<String,Rider>();
  if (Bukkit.getScheduler().scheduleSyncRepeatingTask(plugin,this,UPDATE_DELAY,Math.min(configManager.updatePeriod,MAX_UPDATE_PERIOD)) < 0) {
    Bukkit.getPluginManager().disablePlugin(plugin);
    LoggerUtil.getInstance().severe(""String_Node_Str"");
  }
}","public RiderManager(MobRider plugin){
  this.plugin=plugin;
  metrics=plugin.getMetricsManager();
  configManager=plugin.getConfigManager();
  goalManager=plugin.getGoalManager();
  riders=new ConcurrentHashMap<String,Rider>();
  spawnEggTag=new FixedMetadataValue(plugin,true);
  if (Bukkit.getScheduler().scheduleSyncRepeatingTask(plugin,this,UPDATE_DELAY,Math.min(configManager.updatePeriod,MAX_UPDATE_PERIOD)) < 0) {
    Bukkit.getPluginManager().disablePlugin(plugin);
    LoggerUtil.getInstance().severe(""String_Node_Str"");
  }
}",0.9499509322865556
179462,"public void removeRider(Player player){
  Entity entity=player.getVehicle();
  if (entity instanceof LivingEntity) {
    LivingEntity target=(LivingEntity)entity;
    player.eject();
    if (DependencyUtils.hasPermission(player,""String_Node_Str"")) {
      scheduleSpawnEgg(target);
    }
  }
}","public void removeRider(Player player){
  Entity entity=player.getVehicle();
  if (entity instanceof LivingEntity) {
    LivingEntity target=(LivingEntity)entity;
    entity.eject();
    if (DependencyUtils.hasPermission(player,""String_Node_Str"")) {
      scheduleSpawnEgg(target);
    }
  }
}",0.9795221843003412
179463,"private static boolean isAllowed(Player player,Entity entity){
  if (player == null || entity == null) {
    return false;
  }
  if (player.isOp() || isOwner(player,entity)) {
    return true;
  }
  if (entity.getPassenger() != null) {
    player.sendMessage(""String_Node_Str"");
    return false;
  }
  if (entity instanceof Animals || entity instanceof Squid || entity instanceof Golem|| entity instanceof Villager|| entity instanceof Bat) {
    if (DependencyUtils.hasPermission(player,""String_Node_Str"") || DependencyUtils.hasPermission(player,""String_Node_Str"" + EntityUtils.getCreatureName(entity).toLowerCase())) {
      return true;
    }
 else {
      player.sendMessage(""String_Node_Str"");
      return false;
    }
  }
  if (entity instanceof Monster || entity instanceof Ghast || entity instanceof Slime|| entity instanceof EnderDragon) {
    if (DependencyUtils.hasPermission(player,""String_Node_Str"") || DependencyUtils.hasPermission(player,""String_Node_Str"" + EntityUtils.getCreatureName(entity).toLowerCase())) {
      return true;
    }
 else {
      player.sendMessage(""String_Node_Str"");
      return false;
    }
  }
  if (entity instanceof Player) {
    if (DependencyUtils.hasPermission(player,""String_Node_Str"") || DependencyUtils.hasPermission(player,""String_Node_Str"" + ((Player)entity).getName().toLowerCase())) {
      return true;
    }
 else {
      player.sendMessage(""String_Node_Str"");
      return false;
    }
  }
  return false;
}","private static boolean isAllowed(Player player,Entity entity){
  if (player == null || entity == null) {
    return false;
  }
  if (entity.getPassenger() != null) {
    player.sendMessage(""String_Node_Str"");
    return false;
  }
  if (entity instanceof Animals || entity instanceof Squid || entity instanceof Golem|| entity instanceof Villager|| entity instanceof Bat) {
    if (DependencyUtils.hasPermission(player,""String_Node_Str"") || DependencyUtils.hasPermission(player,""String_Node_Str"" + EntityUtils.getCreatureName(entity).toLowerCase())) {
      return true;
    }
 else {
      player.sendMessage(""String_Node_Str"");
      return false;
    }
  }
  if (entity instanceof Monster || entity instanceof Ghast || entity instanceof Slime|| entity instanceof EnderDragon) {
    if (DependencyUtils.hasPermission(player,""String_Node_Str"") || DependencyUtils.hasPermission(player,""String_Node_Str"" + EntityUtils.getCreatureName(entity).toLowerCase())) {
      return true;
    }
 else {
      player.sendMessage(""String_Node_Str"");
      return false;
    }
  }
  if (entity instanceof Player) {
    if (DependencyUtils.hasPermission(player,""String_Node_Str"") || DependencyUtils.hasPermission(player,""String_Node_Str"" + ((Player)entity).getName().toLowerCase())) {
      return true;
    }
 else {
      player.sendMessage(""String_Node_Str"");
      return false;
    }
  }
  return false;
}",0.9755073477956612
179464,"public static boolean canRide(Player player,Entity entity){
  return isAllowed(player,entity) && isWinner(player,entity) && isWithdrawSuccess(player,entity);
}","public static boolean canRide(Player player,Entity entity){
  return isAllowed(player,entity) && (player.isOp() || isOwner(player,entity) || isWinner(player,entity) && isWithdrawSuccess(player,entity));
}",0.8760330578512396
179465,"@Override public void run(){
  for (  String playerName : riders.keySet()) {
    Rider rider=riders.get(playerName);
    if (rider.isValid()) {
      goalManager.update(rider);
    }
 else {
      rider.setTarget(null);
      riders.remove(playerName);
    }
  }
}","@Override public void run(){
  for (  Entry<String,Rider> entry : riders.entrySet()) {
    String playerName=entry.getKey();
    Rider rider=entry.getValue();
    if (rider.isValid()) {
      goalManager.update(rider);
    }
 else {
      rider.setTarget(null);
      riders.remove(playerName);
    }
  }
}",0.7789473684210526
179466,"public RiderManager(MobRider plugin){
  this.plugin=plugin;
  metrics=plugin.getMetricsManager();
  configManager=plugin.getConfigManager();
  goalManager=plugin.getGoalManager();
  riders=new Hashtable<String,Rider>();
  if (Bukkit.getScheduler().scheduleSyncRepeatingTask(plugin,this,UPDATE_DELAY,Math.min(configManager.updatePeriod,MAX_UPDATE_PERIOD)) < 0) {
    Bukkit.getPluginManager().disablePlugin(plugin);
    MRLogger.getInstance().severe(""String_Node_Str"");
  }
}","public RiderManager(MobRider plugin){
  this.plugin=plugin;
  metrics=plugin.getMetricsManager();
  configManager=plugin.getConfigManager();
  goalManager=plugin.getGoalManager();
  riders=new ConcurrentHashMap<String,Rider>();
  if (Bukkit.getScheduler().scheduleSyncRepeatingTask(plugin,this,UPDATE_DELAY,Math.min(configManager.updatePeriod,MAX_UPDATE_PERIOD)) < 0) {
    Bukkit.getPluginManager().disablePlugin(plugin);
    MRLogger.getInstance().severe(""String_Node_Str"");
  }
}",0.9811715481171548
179467,"@Override public void executeUpdate(Rider rider){
  if (rider != null) {
    LivingEntity ride=rider.getRide();
    if (target == null) {
      goalManager.setStopGoal(rider);
    }
 else {
      if (target.isDead()) {
        target=null;
        goalManager.setStopGoal(rider);
      }
 else {
        if (isWithinRange(ride.getLocation(),target.getLocation(),rangeSquared)) {
          rider.setTarget(target);
        }
 else {
          setPathEntity(rider,target.getLocation());
        }
        updateSpeed(rider);
      }
    }
  }
}","@Override public void executeUpdate(Rider rider){
  if (rider != null) {
    LivingEntity ride=rider.getRide();
    if (target == null) {
      isGoalDone=true;
    }
 else {
      if (target.isDead()) {
        target=null;
        isGoalDone=true;
      }
 else {
        if (isWithinRange(ride.getLocation(),target.getLocation(),rangeSquared)) {
          rider.setTarget(target);
        }
 else {
          setPathEntity(rider,target.getLocation());
        }
        updateSpeed(rider);
      }
    }
  }
}",0.7855787476280834
179468,"public BasicGoal(MobRider plugin){
  configManager=plugin.getConfigManager();
  goalManager=plugin.getGoalManager();
  rangeSquared=configManager.MOUNT_RANGE * configManager.MOUNT_RANGE;
  timeCreated=System.currentTimeMillis();
}","public BasicGoal(MobRider plugin){
  configManager=plugin.getConfigManager();
  rangeSquared=configManager.MOUNT_RANGE * configManager.MOUNT_RANGE;
  timeCreated=System.currentTimeMillis();
  isGoalDone=false;
}",0.8662131519274376
179469,"@Override public void executeUpdate(Rider rider){
  if (rider != null) {
    rider.setTarget(null);
    LivingEntity ride=rider.getRide();
    if (target == null) {
      goalManager.setStopGoal(rider);
    }
 else {
      if (target.isDead()) {
        target=null;
        goalManager.setStopGoal(rider);
      }
 else {
        if (isWithinRange(ride.getLocation(),target.getLocation(),rangeSquared)) {
          setPathEntity(rider,ride.getLocation());
        }
 else {
          setPathEntity(rider,target.getLocation());
          updateSpeed(rider);
        }
      }
    }
  }
}","@Override public void executeUpdate(Rider rider){
  if (rider != null) {
    rider.setTarget(null);
    LivingEntity ride=rider.getRide();
    if (target == null) {
      isGoalDone=true;
    }
 else {
      if (target.isDead()) {
        target=null;
        isGoalDone=true;
      }
 else {
        if (isWithinRange(ride.getLocation(),target.getLocation(),rangeSquared)) {
          setPathEntity(rider,ride.getLocation());
        }
 else {
          setPathEntity(rider,target.getLocation());
          updateSpeed(rider);
        }
      }
    }
  }
}",0.9353146853146852
179470,"@Override public void executeUpdate(Rider rider){
  if (rider != null) {
    rider.setTarget(null);
    LivingEntity ride=rider.getRide();
    if (target == null) {
      goalManager.setStopGoal(rider);
    }
 else {
      if (target.isDead()) {
        target=null;
        goalManager.setStopGoal(rider);
      }
 else {
        if (isWithinRange(ride.getLocation(),target.getLocation(),rangeSquared)) {
          goalManager.setStopGoal(rider);
        }
 else {
          setPathEntity(rider,target.getLocation());
          updateSpeed(rider);
        }
      }
    }
  }
}","@Override public void executeUpdate(Rider rider){
  if (rider != null) {
    rider.setTarget(null);
    LivingEntity ride=rider.getRide();
    if (target == null) {
      isGoalDone=true;
    }
 else {
      if (target.isDead()) {
        target=null;
        isGoalDone=true;
      }
 else {
        if (isWithinRange(ride.getLocation(),target.getLocation(),rangeSquared)) {
          isGoalDone=true;
        }
 else {
          setPathEntity(rider,target.getLocation());
          updateSpeed(rider);
        }
      }
    }
  }
}",0.7632763276327633
179471,"@Override public void executeUpdate(Rider rider){
  if (rider != null) {
    rider.setTarget(null);
    LivingEntity ride=rider.getRide();
    if (ride != null) {
      if (isWithinRange(ride.getLocation(),destination,rangeSquared)) {
        goalManager.setStopGoal(rider);
      }
 else {
        setPathEntity(rider,destination);
        updateSpeed(rider);
      }
    }
  }
}","@Override public void executeUpdate(Rider rider){
  if (rider != null) {
    rider.setTarget(null);
    LivingEntity ride=rider.getRide();
    if (ride != null) {
      if (isWithinRange(ride.getLocation(),destination,rangeSquared)) {
        isGoalDone=true;
      }
 else {
        setPathEntity(rider,destination);
        updateSpeed(rider);
      }
    }
  }
}",0.9503355704697988
179472,"@Override public void executeUpdate(Rider rider){
  if (rider != null) {
    rider.setTarget(null);
    LivingEntity ride=rider.getRide();
    if (ride != null) {
      if (isWithinRange(ride.getLocation(),destination,rangeSquared) || isWithinRegion(ride.getLocation())) {
        goalManager.setStopGoal(rider);
      }
 else {
        setPathEntity(rider,destination);
        updateSpeed(rider);
      }
    }
  }
}","@Override public void executeUpdate(Rider rider){
  if (rider != null) {
    rider.setTarget(null);
    LivingEntity ride=rider.getRide();
    if (ride != null) {
      if (isWithinRange(ride.getLocation(),destination,rangeSquared) || isWithinRegion(ride.getLocation())) {
        isGoalDone=true;
      }
 else {
        setPathEntity(rider,destination);
        updateSpeed(rider);
      }
    }
  }
}",0.9549330085261876
179473,"@Override public void executeUpdate(Rider rider){
  if (rider != null) {
    rider.setTarget(null);
    LivingEntity ride=rider.getRide();
    if (ride != null) {
      if (isWithinRange(ride.getLocation(),destination,rangeSquared) || isWithinResidence(ride.getLocation())) {
        goalManager.setStopGoal(rider);
      }
 else {
        setPathEntity(rider,destination);
        updateSpeed(rider);
      }
    }
  }
}","@Override public void executeUpdate(Rider rider){
  if (rider != null) {
    rider.setTarget(null);
    LivingEntity ride=rider.getRide();
    if (ride != null) {
      if (isWithinRange(ride.getLocation(),destination,rangeSquared) || isWithinResidence(ride.getLocation())) {
        isGoalDone=true;
      }
 else {
        setPathEntity(rider,destination);
        updateSpeed(rider);
      }
    }
  }
}",0.9552599758162033
179474,"public void update(Rider rider){
  Goal goal=rider.getGoal();
  if (goal != null) {
    goal.executeUpdate(rider);
  }
}","public void update(Rider rider){
  if (rider.hasGoal()) {
    if (rider.getGoal().isGoalDone()) {
      setStopGoal(rider);
    }
    rider.getGoal().executeUpdate(rider);
  }
}",0.6666666666666666
179475,"public void setFollowGoal(Rider rider,String entityName){
  LivingEntity entity=findGoal(rider,entityName,configManager.MAX_SEARCH_RANGE);
  if (entity != null) {
    rider.setGoal(new FollowGoal(plugin,entity));
    messageManager.sendMessage(rider,configManager.followConfirmedMessage);
  }
 else {
    messageManager.sendMessage(rider,configManager.followConfusedMessage);
  }
}","public void setFollowGoal(Rider rider,String entityName){
  LivingEntity entity=findLivingEntity(rider,entityName,configManager.MAX_SEARCH_RANGE);
  if (entity != null) {
    rider.setGoal(new FollowGoal(plugin,entity));
    messageManager.sendMessage(rider,configManager.followConfirmedMessage);
  }
 else {
    messageManager.sendMessage(rider,configManager.followConfusedMessage);
  }
}",0.9792207792207792
179476,"public void setGotoGoal(Rider rider,String goalName){
  LivingEntity entity;
  if ((entity=findGoal(rider,goalName,configManager.MAX_SEARCH_RANGE)) != null) {
    rider.setGoal(new GotoGoal(plugin,entity));
    messageManager.sendMessage(rider,configManager.goConfirmedMessage);
  }
 else   if (foundPortal(rider,goalName) || foundResidence(rider,goalName) || foundRegion(rider,goalName)) {
    messageManager.sendMessage(rider,configManager.goConfirmedMessage);
  }
 else {
    messageManager.sendMessage(rider,configManager.goConfusedMessage);
  }
}","public void setGotoGoal(Rider rider,String goalName){
  LivingEntity entity;
  if ((entity=findLivingEntity(rider,goalName,configManager.MAX_SEARCH_RANGE)) != null) {
    rider.setGoal(new GotoGoal(plugin,entity));
    messageManager.sendMessage(rider,configManager.goConfirmedMessage);
  }
 else   if (foundPortal(rider,goalName) || foundResidence(rider,goalName) || foundRegion(rider,goalName)) {
    messageManager.sendMessage(rider,configManager.goConfirmedMessage);
  }
 else {
    messageManager.sendMessage(rider,configManager.goConfusedMessage);
  }
}",0.9855855855855856
179477,"private static Location getDestination(ProtectedRegion region,World world){
  Location midPoint=null;
  if (region != null && world != null) {
    BlockVector minPoint=region.getMinimumPoint();
    BlockVector maxPoint=region.getMaximumPoint();
    double x=minPoint.getX() + maxPoint.getX() / 2;
    double z=minPoint.getZ() + maxPoint.getZ() / 2;
    midPoint=world.getHighestBlockAt((int)x,(int)z).getLocation();
  }
  return midPoint;
}","private static Location getDestination(ProtectedRegion region,World world){
  Location midPoint=null;
  if (region != null && world != null) {
    BlockVector minPoint=region.getMinimumPoint();
    BlockVector maxPoint=region.getMaximumPoint();
    double x=(minPoint.getX() + maxPoint.getX()) / 2;
    double z=(minPoint.getZ() + maxPoint.getZ()) / 2;
    midPoint=world.getHighestBlockAt((int)x,(int)z).getLocation();
  }
  return midPoint;
}",0.995475113122172
179478,"private static Location getMidPoint(CuboidArea area){
  Location midPoint=null;
  if (area != null) {
    Location lowLoc=area.getLowLoc();
    Location highLoc=area.getHighLoc();
    double x=lowLoc.getX() + highLoc.getX() / 2;
    double z=lowLoc.getZ() + highLoc.getZ() / 2;
    midPoint=area.getWorld().getHighestBlockAt((int)x,(int)z).getLocation();
  }
  return midPoint;
}","private static Location getMidPoint(CuboidArea area){
  Location midPoint=null;
  if (area != null) {
    Location lowLoc=area.getLowLoc();
    Location highLoc=area.getHighLoc();
    double x=(lowLoc.getX() + highLoc.getX()) / 2;
    double z=(lowLoc.getZ() + highLoc.getZ()) / 2;
    midPoint=area.getWorld().getHighestBlockAt((int)x,(int)z).getLocation();
  }
  return midPoint;
}",0.994750656167979
179479,"private void registerKeyBindings(){
  if (hasSpout()) {
    BindingExecutionDelegate riderControlDelegate=new RiderControlDelegate(this);
    SpoutManager.getKeyBindingManager().registerBinding(""String_Node_Str"",Keyboard.KEY_UP,""String_Node_Str"",riderControlDelegate,this);
    SpoutManager.getKeyBindingManager().registerBinding(""String_Node_Str"",Keyboard.KEY_LEFT,""String_Node_Str"",riderControlDelegate,this);
    SpoutManager.getKeyBindingManager().registerBinding(""String_Node_Str"",Keyboard.KEY_DOWN,""String_Node_Str"",riderControlDelegate,this);
    SpoutManager.getKeyBindingManager().registerBinding(""String_Node_Str"",Keyboard.KEY_RIGHT,""String_Node_Str"",riderControlDelegate,this);
  }
}","private void registerKeyBindings(){
  if (hasSpout()) {
    new RiderControlDelegate(this);
  }
}",0.2452591656131479
179480,"public RiderControlDelegate(MobRider plugin){
  goalManager=plugin.getGoalManager();
  riderManager=plugin.getRiderManager();
}","public RiderControlDelegate(MobRider plugin){
  goalManager=plugin.getGoalManager();
  riderManager=plugin.getRiderManager();
  SpoutManager.getKeyBindingManager().registerBinding(""String_Node_Str"",Keyboard.KEY_UP,""String_Node_Str"",this,plugin);
  SpoutManager.getKeyBindingManager().registerBinding(""String_Node_Str"",Keyboard.KEY_LEFT,""String_Node_Str"",this,plugin);
  SpoutManager.getKeyBindingManager().registerBinding(""String_Node_Str"",Keyboard.KEY_DOWN,""String_Node_Str"",this,plugin);
  SpoutManager.getKeyBindingManager().registerBinding(""String_Node_Str"",Keyboard.KEY_RIGHT,""String_Node_Str"",this,plugin);
}",0.3427800269905533
179481,"protected static boolean isWithinRange(Location start,Location end,double distanceSquared){
  return start.distanceSquared(end) < distanceSquared;
}","protected static boolean isWithinRange(Location start,Location end,double distanceSquared){
  return !start.getWorld().equals(end.getWorld()) || start.distanceSquared(end) < distanceSquared;
}",0.8705882352941177
179482,"private Location getInterimLocation(LivingEntity ride,Location destination){
  Location interimTarget=null;
  if (ride != null && ride.getLocation().distanceSquared(destination) > 64.0D) {
    interimTarget=ride.getLocation().clone().add(new Vector(destination.getX() - ride.getLocation().getX(),destination.getY() - ride.getLocation().getY(),destination.getZ() - ride.getLocation().getZ()).normalize().multiply(8));
  }
 else {
    interimTarget=destination;
  }
  return interimTarget;
}","private Location getInterimLocation(LivingEntity ride,Location destination){
  Location interimTarget=null;
  if (ride != null && ride.getLocation().getWorld().equals(destination.getWorld()) && ride.getLocation().distanceSquared(destination) > 64.0D) {
    interimTarget=ride.getLocation().clone().add(new Vector(destination.getX() - ride.getLocation().getX(),destination.getY() - ride.getLocation().getY(),destination.getZ() - ride.getLocation().getZ()).normalize().multiply(8));
  }
 else {
    interimTarget=destination;
  }
  return interimTarget;
}",0.9385796545105566
179483,"public void setAttackGoal(Rider rider,LivingEntity entity){
  if (MRUtil.isAggressive(entity)) {
    rider.setGoal(new AttackGoal(plugin,entity));
    messageManager.sendMessage(rider,configManager.attackConfirmedMessage);
  }
 else {
    messageManager.sendMessage(rider,configManager.attackConfusedMessage);
  }
}","public void setAttackGoal(Rider rider,LivingEntity entity){
  if (MRUtil.isAggressive(rider.getRide())) {
    rider.setGoal(new AttackGoal(plugin,entity));
    messageManager.sendMessage(rider,configManager.attackConfirmedMessage);
  }
 else {
    messageManager.sendMessage(rider,configManager.attackConfusedMessage);
  }
}",0.9671361502347418
179484,"public boolean isValid(){
  Player player=getPlayer();
  return hasRide(player);
}","public boolean isValid(){
  Player player=getPlayer();
  return hasRide(player) && !player.isDead();
}",0.8913043478260869
179485,"public void updateGoal(){
  if (!isCreature())   return;
  if (hasGoal()) {
switch (intent) {
case ATTACK:
      LivingEntity goalEntity=((EntityGoal)goal).getEntity();
    if (vehicle.getBukkitEntity().getLocation().distanceSquared(goalEntity.getLocation()) > ATTACK_RANGE) {
      setPathEntity(((EntityGoal)goal).getEntity().getLocation());
    }
 else {
      setTarget(((EntityGoal)goal).getEntity());
    }
  break;
case FOLLOW:
setTarget(null);
if (vehicle.getBukkitEntity().getLocation().distanceSquared(goal.getLocation()) < GOAL_RANGE) {
setPathEntity(getBukkitEntity().getLocation());
intent=IntentType.PAUSE;
}
 else {
setPathEntity(((EntityGoal)goal).getEntity().getLocation());
}
break;
case PAUSE:
setTarget(null);
if (vehicle.getBukkitEntity().getLocation().distanceSquared(goal.getLocation()) > GOAL_RANGE) {
setPathEntity(((EntityGoal)goal).getEntity().getLocation());
intent=IntentType.FOLLOW;
}
 else {
setPathEntity(getBukkitEntity().getLocation());
}
break;
case MOUNT:
break;
case PASSIVE:
if (vehicle.getBukkitEntity().getLocation().distanceSquared(goal.getLocation()) < GOAL_RANGE) stop();
break;
case STOP:
setTarget(null);
setPathEntity(((LocationGoal)goal).getLocation());
break;
}
updateSpeed();
}
}","public void updateGoal(){
  if (!isCreature())   return;
  if (hasGoal()) {
switch (intent) {
case ATTACK:
      LivingEntity goalEntity=((EntityGoal)goal).getEntity();
    if (vehicle.getBukkitEntity().getLocation().distanceSquared(goalEntity.getLocation()) > ATTACK_RANGE) {
      setPathEntity(((EntityGoal)goal).getEntity().getLocation());
    }
 else {
      setTarget(((EntityGoal)goal).getEntity());
    }
  break;
case FOLLOW:
setTarget(null);
if (vehicle.getBukkitEntity().getLocation().distanceSquared(goal.getLocation()) < GOAL_RANGE) {
setPathEntity(getBukkitEntity().getLocation());
intent=IntentType.PAUSE;
}
 else {
setPathEntity(((EntityGoal)goal).getEntity().getLocation());
}
break;
case PAUSE:
setTarget(null);
if (vehicle.getBukkitEntity().getLocation().distanceSquared(goal.getLocation()) > GOAL_RANGE) {
setPathEntity(((EntityGoal)goal).getEntity().getLocation());
intent=IntentType.FOLLOW;
}
 else {
setPathEntity(getBukkitEntity().getLocation());
}
break;
case MOUNT:
break;
case PASSIVE:
if (vehicle.getBukkitEntity().getLocation().distanceSquared(goal.getLocation()) < GOAL_RANGE) {
stop();
}
 else {
setTarget(null);
setPathEntity(goal.getLocation());
}
break;
case STOP:
setTarget(null);
setPathEntity(((LocationGoal)goal).getLocation());
break;
}
updateSpeed();
}
}",0.9738302934179224
179486,"public void setTarget(LivingEntity target){
  LivingEntity ride=getRide();
  if (ride != null) {
    ((Creature)ride).setTarget(target);
  }
}","public void setTarget(LivingEntity target){
  LivingEntity ride=getRide();
  if (ride != null) {
    if (ride instanceof Creature) {
      ((Creature)ride).setTarget(target);
    }
 else     if (ride instanceof Slime) {
    }
 else     if (ride instanceof Ghast) {
    }
 else     if (ride instanceof EnderDragon) {
    }
  }
}",0.5842217484008528
179487,"private void setPathEntity(Location location){
  LivingEntity ride=getRide();
  if (ride != null) {
    if (hasNewAI()) {
      if (ride.getLocation().distanceSquared(location) > 64.0D) {
        Vector distance=new Vector(location.getX() - ride.getLocation().getX(),location.getY() - ride.getLocation().getY(),location.getZ() - ride.getLocation().getZ()).normalize().multiply(8);
        ((CraftLivingEntity)ride).getHandle().al().a(ride.getLocation().getX() + distance.getX(),ride.getLocation().getY() + distance.getY(),ride.getLocation().getZ() + distance.getZ(),getSpeed());
      }
 else {
        ((CraftLivingEntity)ride).getHandle().al().a(location.getX(),location.getY(),location.getZ(),getSpeed());
      }
    }
 else {
      ((CraftCreature)ride).getHandle().setPathEntity(new PathEntity(new PathPoint[]{new PathPoint(location.getBlockX(),location.getBlockY(),location.getBlockZ())}));
    }
  }
}","private void setPathEntity(Location location){
  LivingEntity ride=getRide();
  if (ride instanceof CraftCreature) {
    CraftCreature livingEntity=(CraftCreature)ride;
    if (hasNewAI()) {
      Location interimLocation=getInterimLocation(location);
      livingEntity.getHandle().al().a(interimLocation.getX(),interimLocation.getY(),interimLocation.getZ(),getSpeed());
    }
 else {
      ((CraftCreature)ride).getHandle().setPathEntity(new PathEntity(new PathPoint[]{new PathPoint(location.getBlockX(),location.getBlockY(),location.getBlockZ())}));
    }
  }
 else   if (ride instanceof CraftSlime) {
  }
 else   if (ride instanceof CraftGhast) {
  }
 else   if (ride instanceof CraftEnderDragon) {
  }
}",0.4638218923933209
179488,"private void updateSpeed(){
  if (!isCreature() || intent == IntentType.STOP) {
    return;
  }
  CreatureType type=MRUtil.getCreatureType(vehicle.getBukkitEntity());
  if (RideType.fromType(type) == null) {
    return;
  }
  Vector velocity=vehicle.getBukkitEntity().getVelocity();
  velocity.normalize().multiply(getSpeed());
  vehicle.getBukkitEntity().setVelocity(velocity);
}","private void updateSpeed(){
  if (!isCreature() || intent == IntentType.STOP) {
    return;
  }
  CreatureType type=MRUtil.getCreatureType(vehicle.getBukkitEntity());
  if (RideType.fromType(type) == null) {
    return;
  }
  Vector velocity=vehicle.getBukkitEntity().getVelocity();
  double saveY=velocity.getY();
  velocity.normalize().multiply(getSpeed());
  velocity.setY(saveY);
  vehicle.getBukkitEntity().setVelocity(velocity);
}",0.931372549019608
179489,"public boolean dispatch(CommandSender sender,Command command,String label,String[] args){
  if (args.length < 1) {
    return false;
  }
 else   if (!isRider(sender)) {
    return true;
  }
  String input=label + ""String_Node_Str"";
  for (  String s : args) {
    input=input + s + ""String_Node_Str"";
  }
  BaseCommand match=null;
  String[] trimmedArgs=(String[])null;
  StringBuilder identifier=new StringBuilder();
  for (  BaseCommand cmd : this.commands) {
    StringBuilder tmpIdentifier=new StringBuilder();
    String[] tmpArgs=cmd.validate(input,tmpIdentifier);
    if (tmpIdentifier.length() > identifier.length()) {
      identifier=tmpIdentifier;
      match=cmd;
      trimmedArgs=tmpArgs;
    }
  }
  if (match != null) {
    if (trimmedArgs != null) {
      if (hasPermission(sender,match.getPermission())) {
        match.execute(sender,trimmedArgs);
      }
 else {
        sender.sendMessage(""String_Node_Str"");
      }
    }
    sender.sendMessage(""String_Node_Str"" + match.getUsage());
    return true;
  }
  return false;
}","public boolean dispatch(CommandSender sender,Command command,String label,String[] args){
  if (args.length < 1) {
    return false;
  }
 else   if (!isRider(sender)) {
    return true;
  }
  String input=label + ""String_Node_Str"";
  for (  String s : args) {
    input=input + s + ""String_Node_Str"";
  }
  BaseCommand match=null;
  String[] trimmedArgs=(String[])null;
  StringBuilder identifier=new StringBuilder();
  for (  BaseCommand cmd : this.commands) {
    StringBuilder tmpIdentifier=new StringBuilder();
    String[] tmpArgs=cmd.validate(input,tmpIdentifier);
    if (tmpIdentifier.length() > identifier.length()) {
      identifier=tmpIdentifier;
      match=cmd;
      trimmedArgs=tmpArgs;
    }
  }
  if (match != null) {
    if (trimmedArgs != null) {
      if (hasPermission(sender,match.getPermission())) {
        match.execute(sender,trimmedArgs);
      }
 else {
        sender.sendMessage(""String_Node_Str"");
      }
    }
 else {
      sender.sendMessage(""String_Node_Str"" + match.getUsage());
    }
    return true;
  }
  return false;
}",0.964828897338403
179490,"public void onEntityDamage(EntityDamageEvent event){
  if (event.isCancelled())   return;
  if (event instanceof EntityDamageByEntityEvent) {
    Entity entity=event.getEntity();
    Entity damager=((EntityDamageByEntityEvent)event).getDamager();
    if (damager instanceof Projectile) {
      damager=((Projectile)damager).getShooter();
    }
    if (entity instanceof Player) {
      Ride ride=plugin.getRideHandler().getRide(entity);
      if (ride.hasRider()) {
        if (!damager.equals(ride.getBukkitEntity()) && !damager.equals(ride.getTarget())) {
          ride.attack((LivingEntity)damager);
          return;
        }
      }
    }
    if (damager instanceof Player) {
      Ride ride=plugin.getRideHandler().getRide(damager);
      if (ride.hasRider()) {
        if (!entity.equals(ride.getBukkitEntity()) && !entity.equals(ride.getTarget())) {
          ride.attack((LivingEntity)entity);
          return;
        }
      }
    }
    if (damager instanceof LivingEntity) {
      Ride ride=plugin.getRideHandler().getRide(entity.getPassenger());
      if (ride.hasRider()) {
        if (!damager.equals(ride.getRider().getBukkitEntity())) {
          ride.attack((LivingEntity)damager);
        }
      }
    }
  }
 else   if (event instanceof EntityDamageByBlockEvent) {
    Entity rider=event.getEntity();
    Ride ride=plugin.getRideHandler().getRide(rider);
    if (rider instanceof Player && ride.getBukkitEntity() instanceof LivingEntity) {
switch (event.getCause()) {
case SUFFOCATION:
        event.setCancelled(true);
      break;
case DROWNING:
    if (ride.isWaterCreature())     event.setCancelled(true);
}
}
}
}","public void onEntityDamage(EntityDamageEvent event){
  if (event.isCancelled())   return;
  if (event instanceof EntityDamageByEntityEvent) {
    Entity entity=event.getEntity();
    Entity damager=((EntityDamageByEntityEvent)event).getDamager();
    if (damager instanceof Projectile) {
      damager=((Projectile)damager).getShooter();
    }
    if (entity instanceof Player) {
      Ride ride=plugin.getRideHandler().getRide(entity);
      if (ride.hasRider()) {
        if (damager.equals(ride.getBukkitEntity())) {
          event.setCancelled(true);
        }
 else         if (!damager.equals(ride.getBukkitEntity()) && !damager.equals(ride.getTarget())) {
          ride.attack((LivingEntity)damager);
          return;
        }
      }
    }
    if (damager instanceof Player) {
      Ride ride=plugin.getRideHandler().getRide(damager);
      if (ride.hasRider()) {
        if (!entity.equals(ride.getBukkitEntity()) && !entity.equals(ride.getTarget())) {
          ride.attack((LivingEntity)entity);
          return;
        }
      }
    }
    if (damager instanceof LivingEntity) {
      Ride ride=plugin.getRideHandler().getRide(entity.getPassenger());
      if (ride.hasRider()) {
        if (!damager.equals(ride.getRider().getBukkitEntity())) {
          ride.attack((LivingEntity)damager);
        }
      }
    }
  }
 else   if (event instanceof EntityDamageByBlockEvent) {
    Entity rider=event.getEntity();
    Ride ride=plugin.getRideHandler().getRide(rider);
    if (rider instanceof Player && ride.hasRider()) {
switch (event.getCause()) {
case SUFFOCATION:
        event.setCancelled(true);
      break;
case DROWNING:
    if (ride.isWaterCreature())     event.setCancelled(true);
}
}
}
}",0.952608047690015
179491,"public BasicCookieStore getNewCookieStore() throws JSONException, ParseException {
  BasicCookieStore basicCookieStore=new BasicCookieStore();
  Iterator<String> cookieNames=jsonCookies.keys();
  while (cookieNames.hasNext()) {
    String cookieName=cookieNames.next();
    JSONObject cookie=(JSONObject)jsonCookies.get(cookieName);
    System.out.println(""String_Node_Str"" + cookie);
    BasicClientCookie basicCookie=new BasicClientCookie(cookieName,cookie.getString(VALUE));
    System.out.println(dateFormat);
    System.out.println(cookie.getString(EXPIRES));
    basicCookie.setExpiryDate(new Date(cookie.getString(EXPIRES)));
    basicCookie.setDomain(""String_Node_Str"");
    basicCookie.setPath(""String_Node_Str"");
    basicCookieStore.addCookie(basicCookie);
  }
  return basicCookieStore;
}","public BasicCookieStore getNewCookieStore() throws JSONException, ParseException {
  BasicCookieStore basicCookieStore=new BasicCookieStore();
  Iterator<String> cookieNames=jsonCookies.keys();
  while (cookieNames.hasNext()) {
    String cookieName=cookieNames.next();
    JSONObject cookie=(JSONObject)jsonCookies.get(cookieName);
    System.out.println(""String_Node_Str"" + cookie);
    BasicClientCookie basicCookie=new BasicClientCookie(cookieName,cookie.getString(VALUE));
    System.out.println(cookie.getString(EXPIRES));
    basicCookie.setExpiryDate(dateFormatWithoutTimeZone.parse(cookie.getString(EXPIRES)));
    basicCookie.setDomain(""String_Node_Str"");
    basicCookie.setPath(""String_Node_Str"");
    basicCookieStore.addCookie(basicCookie);
  }
  return basicCookieStore;
}",0.9540012602394456
179492,"public CookieManager(MyApplication myApp) throws IOException, JSONException, ParseException {
  this.myApp=myApp;
  dateFormat=new SimpleDateFormat(DATE_FORMAT);
  jsonCookies=new JSONObject();
  basicCookies=new BasicCookieStore();
  cookiesFile=myApp.getFileStreamPath(COOKIESFILE);
  if (cookiesFile.exists()) {
    String recoveredJSONStr=readCookiesFromFile();
    System.out.println(""String_Node_Str"" + recoveredJSONStr);
    if (recoveredJSONStr != null) {
      jsonCookies=new JSONObject(recoveredJSONStr);
      basicCookies=getNewCookieStore();
    }
  }
}","public CookieManager(MyApplication myApp) throws IOException, JSONException, ParseException {
  this.myApp=myApp;
  dateFormatWithoutTimeZone=new SimpleDateFormat(DATE_FORMAT_WITHOUT_TIMEZONE);
  dateFormatWithTimeZone=new SimpleDateFormat(DATE_FORMAT_WITH_TIMEZONE);
  jsonCookies=new JSONObject();
  basicCookies=new BasicCookieStore();
  cookiesFile=myApp.getFileStreamPath(COOKIESFILE);
  if (cookiesFile.exists()) {
    String recoveredJSONStr=readCookiesFromFile();
    System.out.println(""String_Node_Str"" + recoveredJSONStr);
    if (recoveredJSONStr != null) {
      jsonCookies=new JSONObject(recoveredJSONStr);
      basicCookies=getNewCookieStore();
    }
  }
}",0.914516129032258
179493,"public void storeCookies(CookieStore cookieStore) throws JSONException, IOException {
  System.out.println(""String_Node_Str"" + basicCookies.getCookies());
  System.out.println(""String_Node_Str"" + cookieStore.getCookies());
  basicCookies.clearExpired(new Date());
  if (basicCookies.getCookies().size() < cookieStore.getCookies().size()) {
    basicCookies=(BasicCookieStore)cookieStore;
    jsonCookies=new JSONObject();
    List<Cookie> cookieList=cookieStore.getCookies();
    for (int i=0; i < cookieList.size(); i++) {
      Cookie cookie=cookieList.get(i);
      JSONObject jsonCookie=new JSONObject();
      jsonCookie.put(EXPIRES,cookie.getExpiryDate());
      jsonCookie.put(PATH,NULL);
      jsonCookie.put(DOMAIN,Router.mOX);
      jsonCookie.put(VALUE,cookie.getValue());
      jsonCookie.put(NAME,cookie.getName());
      jsonCookies.put(cookie.getName(),jsonCookie);
    }
    System.out.println(""String_Node_Str"" + jsonCookies);
    writeCookiesToFile();
  }
}","public void storeCookies(CookieStore cookieStore) throws JSONException, IOException {
  System.out.println(""String_Node_Str"" + basicCookies.getCookies());
  System.out.println(""String_Node_Str"" + cookieStore.getCookies());
  basicCookies.clearExpired(new Date());
  if (basicCookies.getCookies().size() < cookieStore.getCookies().size()) {
    basicCookies=(BasicCookieStore)cookieStore;
    jsonCookies=new JSONObject();
    List<Cookie> cookieList=cookieStore.getCookies();
    for (int i=0; i < cookieList.size(); i++) {
      Cookie cookie=cookieList.get(i);
      JSONObject jsonCookie=new JSONObject();
      jsonCookie.put(EXPIRES,dateFormatWithoutTimeZone.format(cookie.getExpiryDate()));
      jsonCookie.put(PATH,NULL);
      jsonCookie.put(DOMAIN,Router.mOX);
      jsonCookie.put(VALUE,cookie.getValue());
      jsonCookie.put(NAME,cookie.getName());
      jsonCookies.put(cookie.getName(),jsonCookie);
    }
    System.out.println(""String_Node_Str"" + jsonCookies);
    writeCookiesToFile();
  }
}",0.9828629032258064
179494,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.content_page_template);
  homeBreadcrumb.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent myIntent=new Intent(v.getContext(),MyApplication.getPageClass(""String_Node_Str""));
      startActivityForResult(myIntent,0);
    }
  }
);
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.content_page_template);
  homeBreadcrumb.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent myIntent=new Intent(v.getContext(),MyApplication.getPageClass(""String_Node_Str""));
      HomePage.firstHomeLoad=true;
      startActivityForResult(myIntent,0);
    }
  }
);
}",0.9575757575757576
179495,"private List<View> generatePage(final LibraryResultsPage page,JSONObject results) throws JSONException {
  LayoutInflater layoutInflater=(LayoutInflater)page.getApplication().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  LinearLayout libraryResultsTemplate=(LinearLayout)layoutInflater.inflate(R.layout.library_results_template,page.getContentLayout(),false);
  page.getContentLayout().addView(libraryResultsTemplate);
  List<View> outputs=new ArrayList<View>();
  final JSONObject jsonPage=results.getJSONObject(""String_Node_Str"");
  final LinearLayout resultsLayout=(LinearLayout)page.findViewById(R.id.resultsLayout);
  final TextView resultsNo=(TextView)page.findViewById(R.id.libraryResultsNo);
  populateResults(page,getNextResultsPage(page),resultsLayout,resultsNo);
  Button nextButton=(Button)page.findViewById(R.id.moreButton);
  nextButton.setEnabled(false);
  if (jsonPage.getBoolean(""String_Node_Str"")) {
    nextButton.setEnabled(true);
    nextButton.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        new LibraryNextPageTask(page,resultsLayout,resultsNo,false).execute();
      }
    }
);
  }
  return outputs;
}","private List<View> generatePage(final LibraryResultsPage page,JSONObject results) throws JSONException {
  LayoutInflater layoutInflater=(LayoutInflater)page.getApplication().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  LinearLayout libraryResultsTemplate=(LinearLayout)layoutInflater.inflate(R.layout.library_results_template,page.getContentLayout(),false);
  page.getContentLayout().addView(libraryResultsTemplate);
  List<View> outputs=new ArrayList<View>();
  final JSONObject jsonPage=results.getJSONObject(""String_Node_Str"");
  final LinearLayout resultsLayout=(LinearLayout)page.findViewById(R.id.resultsLayout);
  final TextView resultsNo=(TextView)page.findViewById(R.id.libraryResultsNo);
  populateResults(page,getNextResultsPage(page),resultsLayout,resultsNo);
  Button nextButton=(Button)page.findViewById(R.id.moreButton);
  nextButton.setEnabled(false);
  System.out.println();
  if (jsonPage.getBoolean(""String_Node_Str"") & jsonPage.getInt(""String_Node_Str"") > 1) {
    nextButton.setEnabled(true);
    nextButton.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        new LibraryNextPageTask(page,resultsLayout,resultsNo,false).execute();
      }
    }
);
  }
  return outputs;
}",0.973305954825462
179496,"protected void populateResults(Page page,JSONObject nextJSONPage,LinearLayout resultsLayout,TextView resultsNo) throws JSONException {
  int curPageNum=((LibraryResultsPage)page).getCurPageNum();
  JSONArray newObjects=nextJSONPage.getJSONArray(""String_Node_Str"");
  TextView pageNumView=new TextView(page);
  pageNumView.setText(""String_Node_Str"" + curPageNum);
  pageNumView.setGravity(Gravity.CENTER);
  if (curPageNum > 1) {
    resultsLayout.addView(pageNumView);
  }
  for (int i=0; i < newObjects.length(); i++) {
    LinearLayout thisResultLayout=new LinearLayout(page);
    thisResultLayout.setOrientation(LinearLayout.VERTICAL);
    JSONObject thisResult=newObjects.getJSONObject(i);
    addTextField(page,thisResult,""String_Node_Str"",""String_Node_Str"",thisResultLayout,18);
    addTextField(page,thisResult,""String_Node_Str"",""String_Node_Str"",thisResultLayout,16);
    addTextField(page,thisResult,""String_Node_Str"",""String_Node_Str"",thisResultLayout,16);
    addTextField(page,thisResult,""String_Node_Str"",""String_Node_Str"",thisResultLayout,16);
    thisResultLayout.setBackgroundResource(R.drawable.bg_blue);
    thisResultLayout.setPadding(10,10,0,10);
    thisResultLayout.setLayoutParams(Page.paramsWithLine);
    resultsLayout.addView(thisResultLayout);
  }
  if (nextJSONPage.getString(""String_Node_Str"").equals(""String_Node_Str"")) {
    resultsNo.setText(""String_Node_Str"" + ""String_Node_Str"");
  }
 else {
    resultsNo.setText(""String_Node_Str"" + nextJSONPage.getString(""String_Node_Str"") + ""String_Node_Str""+ '\n'+ ""String_Node_Str""+ curPageNum+ ""String_Node_Str""+ nextJSONPage.getString(""String_Node_Str"")+ ""String_Node_Str"");
  }
}","protected void populateResults(Page page,JSONObject nextJSONPage,LinearLayout resultsLayout,TextView resultsNo) throws JSONException {
  int curPageNum=((LibraryResultsPage)page).getCurPageNum();
  JSONArray newObjects=nextJSONPage.getJSONArray(""String_Node_Str"");
  TextView pageNumView=new TextView(page);
  pageNumView.setTextColor(R.color.blue);
  pageNumView.setText(""String_Node_Str"" + curPageNum);
  pageNumView.setGravity(Gravity.CENTER);
  if (curPageNum > 1) {
    resultsLayout.addView(pageNumView);
  }
  for (int i=0; i < newObjects.length(); i++) {
    LinearLayout thisResultLayout=new LinearLayout(page);
    thisResultLayout.setOrientation(LinearLayout.VERTICAL);
    JSONObject thisResult=newObjects.getJSONObject(i);
    addTextField(page,thisResult,""String_Node_Str"",""String_Node_Str"",thisResultLayout,18);
    addTextField(page,thisResult,""String_Node_Str"",""String_Node_Str"",thisResultLayout,16);
    addTextField(page,thisResult,""String_Node_Str"",""String_Node_Str"",thisResultLayout,16);
    addTextField(page,thisResult,""String_Node_Str"",""String_Node_Str"",thisResultLayout,16);
    thisResultLayout.setBackgroundResource(R.drawable.bg_blue);
    thisResultLayout.setPadding(10,10,0,10);
    thisResultLayout.setLayoutParams(Page.paramsWithLine);
    resultsLayout.addView(thisResultLayout);
  }
  if (nextJSONPage.getInt(""String_Node_Str"") == 0) {
    resultsNo.setText(""String_Node_Str"" + ""String_Node_Str"");
  }
 else {
    resultsNo.setText(""String_Node_Str"" + nextJSONPage.getString(""String_Node_Str"") + ""String_Node_Str""+ '\n'+ ""String_Node_Str""+ curPageNum+ ""String_Node_Str""+ nextJSONPage.getString(""String_Node_Str"")+ ""String_Node_Str"");
  }
}",0.9639423076923076
179497,"public void onLocationChanged(Location location){
  display.updateLocation(location);
  NetworkMessageMedium msg=new NetworkMessageMedium(""String_Node_Str"");
  msg.doubles.add(location.getLatitude());
  msg.doubles.add(location.getLongitude());
  networkBinder.sendGameUpdate(msg);
  Regions newRegion=checkRegion(location);
  if (currentRegion != newRegion) {
    foundPokeInRegion=false;
    if (newRegion == Regions.POKEMART) {
    }
 else     if (newRegion == Regions.POKEMON_CENTER) {
      for (      Pokemon p : G.player.pokemon) {
        p.setHP(p.getTotalHP());
        p.restorePP();
      }
      display.showToast(""String_Node_Str"");
      display.showNoPokemonAlert(false);
      G.player.playerState=PlayerState.AVAILABLE;
      networkBinder.sendGameUpdate(new NetworkMessage(""String_Node_Str""));
    }
  }
  currentRegion=newRegion;
}","public void onLocationChanged(Location location){
  display.updateLocation(location);
  NetworkMessageMedium msg=new NetworkMessageMedium(""String_Node_Str"");
  msg.doubles.add(location.getLatitude());
  msg.doubles.add(location.getLongitude());
  if (networkBinder != null)   networkBinder.sendGameUpdate(msg);
  Regions newRegion=checkRegion(location);
  if (currentRegion != newRegion) {
    foundPokeInRegion=false;
    if (newRegion == Regions.POKEMART) {
    }
 else     if (newRegion == Regions.POKEMON_CENTER) {
      for (      Pokemon p : G.player.pokemon) {
        p.setHP(p.getTotalHP());
        p.restorePP();
      }
      display.showToast(""String_Node_Str"");
      display.showNoPokemonAlert(false);
      G.player.playerState=PlayerState.AVAILABLE;
      if (networkBinder != null)       networkBinder.sendGameUpdate(new NetworkMessage(""String_Node_Str""));
    }
  }
  currentRegion=newRegion;
}",0.9648526077097506
179498,"protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.map);
  mapView=(MapView)findViewById(R.id.mapview);
  mapView.setKeepScreenOn(true);
  mapView.setZoomMax((byte)19);
  mapView.setZoomMin((byte)19);
  mapView.setClickable(true);
  mapView.setMapFile(G.mapDir + G.mapFile);
  animator=new Runnable(){
    public void run(){
      double timeStep=(System.currentTimeMillis() - lastTime) * 0.003;
      lastTime=System.currentTimeMillis();
      if (end != null) {
        double newLat=start.getLatitude() + (end.getLatitude() - start.getLatitude()) * timeStep;
        double newLon=start.getLongitude() + (end.getLongitude() - start.getLongitude()) * timeStep;
        start=new GeoPoint(newLat,newLon);
        Location loc=Util.fromGeoPoint(start);
        if (loc.distanceTo(end_loc) < 1) {
          G.player.setLocation(end_loc);
          mapController.setCenter(end);
          end=null;
        }
 else {
          G.player.setLocation(loc);
          mapController.setCenter(start);
        }
      }
      trainer_aura.requestRedraw();
      animHandler.postDelayed(animator,50);
    }
  }
;
  redraw=new Runnable(){
    public void run(){
      players.requestRedraw();
      shadows_player.requestRedraw();
      redrawHandler.postDelayed(redraw,1000);
    }
  }
;
  animHandler=new Handler();
  redrawHandler=new Handler();
  mapView.setOnTouchListener(new View.OnTouchListener(){
    public boolean onTouch(    View v,    MotionEvent e){
      if (e.getAction() == MotionEvent.ACTION_MOVE)       return true;
 else       if (e.getAction() == MotionEvent.ACTION_UP) {
        if (G.testMode == TestMode.CONTROL) {
          if (SystemClock.uptimeMillis() - e.getDownTime() > 500)           return false;
 else {
            GeoPoint point=mapView.getProjection().fromPixels((int)e.getX(),(int)e.getY());
            G.game.onLocationChanged(Util.fromGeoPoint(point));
            return true;
          }
        }
 else         return false;
      }
 else       return false;
    }
  }
);
  mapController=mapView.getController();
  mapController.setCenter(new GeoPoint(-33.957657,18.46125));
  start=new GeoPoint(-33.957657,18.46125);
  mapController.setZoom(19);
  bag_button=(Button)findViewById(R.id.bag_button);
  bag_button.setOnClickListener(this);
  poke_button=(Button)findViewById(R.id.poke_button);
  poke_button.setOnClickListener(this);
  coins=(TextView)findViewById(R.id.coins_label);
  coins.setText(G.player.coins + ""String_Node_Str"");
  rank=(TextView)findViewById(R.id.rank_label);
  rank.setText(""String_Node_Str"");
  persistent_alert=(TextView)findViewById(R.id.persistent_alert);
  persistent_alert.setText(""String_Node_Str"");
  persistent_alert.setVisibility(View.INVISIBLE);
  hud=(ViewGroup)findViewById(R.id.hud);
  alertBuilder=new AlertDialog.Builder(this);
  alertBuilder.setCancelable(false);
  alertBuilder.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
      dialog.cancel();
    }
  }
);
  progressDialog=new ProgressDialog(this,ProgressDialog.STYLE_SPINNER);
  toast=Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT);
  playerIDs=new ArrayList<Integer>();
  itemIDs=new ArrayList<Integer>();
  players=new ArrayItemizedOverlay(G.player_marker_available,this){
    public boolean onTap(    int index){
      G.game.requestPlayer(playerIDs.get(index));
      return true;
    }
  }
;
  ItemizedOverlay.boundCenterBottom(G.player_marker_busy);
  shadows_player=new ArrayItemizedOverlay(getResources().getDrawable(R.drawable.marker_shadow),this);
  items=new ArrayItemizedOverlay(getResources().getDrawable(R.drawable.marker_item),this){
    public boolean onTap(    int index){
      G.game.requestItem(itemIDs.get(index));
      return true;
    }
  }
;
  ItemizedOverlay.boundCenter(getResources().getDrawable(R.drawable.marker_item));
  regions=new ArrayWayOverlay(null,null);
  setupTrainerAura();
  setupTrainerCircle();
  trainer_aura.addItem(G.player.aura);
  trainer_circle.addCircle(G.player.circle);
  mapView.getOverlays().add(regions);
  mapView.getOverlays().add(trainer_circle);
  mapView.getOverlays().add(trainer_aura);
  mapView.getOverlays().add(shadows_player);
  mapView.getOverlays().add(players);
  mapView.getOverlays().add(items);
  if (G.game == null) {
    new Game(this);
    if (G.testMode == TestMode.EXPERIMENT)     location_adapter=new LBGLocationAdapter(this,LBGLocationAdapter.GPS_LOCATION_ONLY,0,2,G.game);
    G.game.createConnection();
    Log.i(""String_Node_Str"",""String_Node_Str"");
  }
 else   Log.i(""String_Node_Str"",""String_Node_Str"");
}","protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.map);
  mapView=(MapView)findViewById(R.id.mapview);
  mapView.setKeepScreenOn(true);
  mapView.setZoomMax((byte)19);
  mapView.setZoomMin((byte)19);
  mapView.setClickable(true);
  mapView.setMapFile(G.mapDir + G.mapFile);
  animator=new Runnable(){
    public void run(){
      double timeStep=(System.currentTimeMillis() - lastTime) * 0.003;
      lastTime=System.currentTimeMillis();
      if (end != null) {
        double newLat=start.getLatitude() + (end.getLatitude() - start.getLatitude()) * timeStep;
        double newLon=start.getLongitude() + (end.getLongitude() - start.getLongitude()) * timeStep;
        start=new GeoPoint(newLat,newLon);
        Location loc=Util.fromGeoPoint(start);
        if (loc.distanceTo(end_loc) < 1) {
          G.player.setLocation(end_loc);
          mapController.setCenter(end);
          end=null;
        }
 else {
          G.player.setLocation(loc);
          mapController.setCenter(start);
        }
      }
      trainer_aura.requestRedraw();
      animHandler.postDelayed(animator,50);
    }
  }
;
  redraw=new Runnable(){
    public void run(){
      players.requestRedraw();
      shadows_player.requestRedraw();
      redrawHandler.postDelayed(redraw,1000);
    }
  }
;
  animHandler=new Handler();
  redrawHandler=new Handler();
  mapView.setOnTouchListener(new View.OnTouchListener(){
    public boolean onTouch(    View v,    MotionEvent e){
      if (e.getAction() == MotionEvent.ACTION_MOVE)       return true;
 else       if (e.getAction() == MotionEvent.ACTION_UP) {
        if (G.testMode == TestMode.CONTROL) {
          if (SystemClock.uptimeMillis() - e.getDownTime() > 500)           return false;
 else {
            GeoPoint point=mapView.getProjection().fromPixels((int)e.getX(),(int)e.getY());
            G.game.onLocationChanged(Util.fromGeoPoint(point));
            return true;
          }
        }
 else         return false;
      }
 else       return false;
    }
  }
);
  mapController=mapView.getController();
  mapController.setCenter(new GeoPoint(-33.957657,18.46125));
  start=new GeoPoint(-33.957657,18.46125);
  mapController.setZoom(19);
  bag_button=(Button)findViewById(R.id.bag_button);
  bag_button.setOnClickListener(this);
  poke_button=(Button)findViewById(R.id.poke_button);
  poke_button.setOnClickListener(this);
  coins=(TextView)findViewById(R.id.coins_label);
  coins.setText(G.player.coins + ""String_Node_Str"");
  rank=(TextView)findViewById(R.id.rank_label);
  rank.setText(""String_Node_Str"");
  persistent_alert=(TextView)findViewById(R.id.persistent_alert);
  persistent_alert.setText(""String_Node_Str"");
  persistent_alert.setVisibility(View.INVISIBLE);
  hud=(ViewGroup)findViewById(R.id.hud);
  alertBuilder=new AlertDialog.Builder(this);
  alertBuilder.setCancelable(false);
  alertBuilder.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int id){
      dialog.cancel();
    }
  }
);
  progressDialog=new ProgressDialog(this,ProgressDialog.STYLE_SPINNER);
  toast=Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT);
  playerIDs=new ArrayList<Integer>();
  itemIDs=new ArrayList<Integer>();
  players=new ArrayItemizedOverlay(G.player_marker_available,this){
    public boolean onTap(    int index){
      G.game.requestPlayer(playerIDs.get(index));
      return true;
    }
  }
;
  ItemizedOverlay.boundCenterBottom(G.player_marker_busy);
  shadows_player=new ArrayItemizedOverlay(getResources().getDrawable(R.drawable.marker_shadow),this);
  items=new ArrayItemizedOverlay(getResources().getDrawable(R.drawable.marker_item),this){
    public boolean onTap(    int index){
      G.game.requestItem(itemIDs.get(index));
      return true;
    }
  }
;
  ItemizedOverlay.boundCenter(getResources().getDrawable(R.drawable.marker_item));
  regions=new ArrayWayOverlay(null,null);
  setupTrainerAura();
  setupTrainerCircle();
  trainer_aura.addItem(G.player.aura);
  trainer_circle.addCircle(G.player.circle);
  mapView.getOverlays().add(regions);
  mapView.getOverlays().add(trainer_circle);
  mapView.getOverlays().add(trainer_aura);
  mapView.getOverlays().add(shadows_player);
  mapView.getOverlays().add(players);
  mapView.getOverlays().add(items);
  if (G.game == null) {
    new Game(this);
    G.game.createConnection();
    Log.i(""String_Node_Str"",""String_Node_Str"");
  }
 else   Log.i(""String_Node_Str"",""String_Node_Str"");
  if (G.testMode == TestMode.EXPERIMENT)   location_adapter=new LBGLocationAdapter(this,LBGLocationAdapter.GPS_LOCATION_ONLY,0,2,G.game);
}",0.971190781049936
179499,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void run(){
  if (Looper.myLooper() == null) {
    Looper.prepare();
  }
  if (!connected) {
    connectToServer();
  }
  if (connected) {
    isRunning=true;
    registerWithServer(getPlayerRegistrationInformation());
    while (!stopOperation) {
      try {
        NetworkMessage msg=null;
        Schema schema=null;
        byte[] messageHeader=new byte[6];
        int success=in.read(messageHeader);
        if (success == 6) {
          byte classType=messageHeader[0];
          boolean compressed=false;
          if (messageHeader[1] == 1)           compressed=true;
switch (classType) {
case -1:
            keepAliveBreak=true;
          break;
case 1:
        msg=new PlayerRegistrationMessage();
      schema=playerRegSchema;
    break;
case 2:
  msg=new NetworkMessageMedium();
schema=mediumMsgSchema;
break;
case 3:
msg=new NetworkMessageLarge();
schema=largeMsgSchema;
break;
default :
msg=new NetworkMessage();
schema=networkMsgSchema;
Log.i(NetworkVariables.TAG,""String_Node_Str"" + classType);
break;
}
if (!keepAliveBreak) {
b.clear();
b.put(messageHeader,2,4);
b.rewind();
int mSize=b.getInt();
byte[] object;
try {
object=new byte[mSize];
}
 catch (RuntimeException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + ""String_Node_Str"" + mSize + ""String_Node_Str""+ classType+ ""String_Node_Str""+ compressed);
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
shutdownThread();
break;
}
catch (OutOfMemoryError e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + ""String_Node_Str"" + mSize + ""String_Node_Str""+ classType+ ""String_Node_Str""+ compressed);
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
shutdownThread();
break;
}
int bytesRead=0;
while (bytesRead != mSize) {
bytesRead+=in.read(object,bytesRead,object.length - bytesRead);
}
Log.i(""String_Node_Str"",""String_Node_Str"" + (mSize + 6));
byte[] decompressed;
if (compressed) {
decompressed=QuickLZ.decompress(object);
Log.i(""String_Node_Str"",""String_Node_Str"" + decompressed.length + ""String_Node_Str""+ mSize+ ""String_Node_Str""+ (decompressed.length - mSize));
}
 else {
decompressed=object;
Log.i(""String_Node_Str"",""String_Node_Str"" + decompressed.length);
}
ProtostuffIOUtil.mergeFrom(decompressed,msg,schema);
try {
processNetworkMessage(msg);
}
 catch (Exception e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
}
}
}
 else {
if (success == -1) {
Log.e(NetworkVariables.TAG,""String_Node_Str"");
shutdownThread();
}
}
}
 catch (InterruptedIOException e) {
}
catch (IOException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
this.shutdownThread();
break;
}
catch (NullPointerException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
}
catch (BufferOverflowException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"");
}
catch (RuntimeException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
}
catch (NoSuchMethodError e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"");
}
 finally {
b.rewind();
b.clear();
buffer.clear();
}
}
}
 else {
shutdownThread();
}
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void run(){
  if (!connected) {
    connectToServer();
  }
  if (connected) {
    isRunning=true;
    registerWithServer(getPlayerRegistrationInformation());
    while (!stopOperation) {
      try {
        NetworkMessage msg=null;
        Schema schema=null;
        byte[] messageHeader=new byte[6];
        int success=in.read(messageHeader);
        if (success == 6) {
          byte classType=messageHeader[0];
          boolean compressed=false;
          if (messageHeader[1] == 1)           compressed=true;
switch (classType) {
case -1:
            keepAliveBreak=true;
          break;
case 1:
        msg=new PlayerRegistrationMessage();
      schema=playerRegSchema;
    break;
case 2:
  msg=new NetworkMessageMedium();
schema=mediumMsgSchema;
break;
case 3:
msg=new NetworkMessageLarge();
schema=largeMsgSchema;
break;
default :
msg=new NetworkMessage();
schema=networkMsgSchema;
Log.i(NetworkVariables.TAG,""String_Node_Str"" + classType);
break;
}
if (!keepAliveBreak) {
b.clear();
b.put(messageHeader,2,4);
b.rewind();
int mSize=b.getInt();
byte[] object;
try {
object=new byte[mSize];
}
 catch (RuntimeException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + ""String_Node_Str"" + mSize + ""String_Node_Str""+ classType+ ""String_Node_Str""+ compressed);
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
shutdownThread();
break;
}
catch (OutOfMemoryError e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + ""String_Node_Str"" + mSize + ""String_Node_Str""+ classType+ ""String_Node_Str""+ compressed);
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
shutdownThread();
break;
}
int bytesRead=0;
while (bytesRead != mSize) {
if (mSize > 4000) Log.i(""String_Node_Str"",""String_Node_Str"" + bytesRead + ""String_Node_Str""+ mSize);
bytesRead+=in.read(object,bytesRead,object.length - bytesRead);
}
Log.i(""String_Node_Str"",""String_Node_Str"" + (mSize + 6));
byte[] decompressed;
if (compressed) {
decompressed=QuickLZ.decompress(object);
Log.i(""String_Node_Str"",""String_Node_Str"" + decompressed.length + ""String_Node_Str""+ mSize+ ""String_Node_Str""+ (decompressed.length - mSize));
}
 else {
decompressed=object;
Log.i(""String_Node_Str"",""String_Node_Str"" + decompressed.length);
}
ProtostuffIOUtil.mergeFrom(decompressed,msg,schema);
try {
processNetworkMessage(msg);
}
 catch (Exception e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
}
}
}
 else {
if (success == -1) {
Log.e(NetworkVariables.TAG,""String_Node_Str"");
shutdownThread();
}
}
}
 catch (InterruptedIOException e) {
}
catch (IOException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
this.shutdownThread();
break;
}
catch (NullPointerException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
}
catch (BufferOverflowException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"");
}
catch (RuntimeException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
}
catch (NoSuchMethodError e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"");
}
 finally {
b.rewind();
b.clear();
buffer.clear();
}
}
}
 else {
shutdownThread();
}
}",0.9735984354628422
179500,"private void connectToServer(){
  boolean success=true;
  try {
    Inet4Address hostAddress=(Inet4Address)InetAddress.getByName(NetworkVariables.hostname);
    socket=new Socket(hostAddress,NetworkVariables.port);
    in=socket.getInputStream();
    out=new NetworkWriteThread(socket);
    out.start();
    startLatencyLogger();
    Looper.loop();
    fireEvent(new NetworkEvent(this,""String_Node_Str""),ConnectionEstablishedListener.class);
  }
 catch (  UnknownHostException e) {
    Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
    success=false;
  }
catch (  IOException e) {
    Log.e(NetworkVariables.TAG,""String_Node_Str"");
    success=false;
  }
 finally {
    if (!success) {
      fireEvent(new NetworkEvent(this,""String_Node_Str""),ConnectionFailedListener.class);
    }
 else {
      connected=true;
    }
  }
  Log.i(NetworkVariables.TAG,""String_Node_Str"");
}","private void connectToServer(){
  boolean success=true;
  try {
    Inet4Address hostAddress=(Inet4Address)InetAddress.getByName(NetworkVariables.hostname);
    socket=new Socket(hostAddress,NetworkVariables.port);
    in=socket.getInputStream();
    out=new NetworkWriteThread(socket);
    out.start();
    startLatencyLogger();
    fireEvent(new NetworkEvent(this,""String_Node_Str""),ConnectionEstablishedListener.class);
  }
 catch (  UnknownHostException e) {
    Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
    success=false;
  }
catch (  IOException e) {
    Log.e(NetworkVariables.TAG,""String_Node_Str"");
    success=false;
  }
 finally {
    if (!success) {
      fireEvent(new NetworkEvent(this,""String_Node_Str""),ConnectionFailedListener.class);
    }
 else {
      connected=true;
    }
  }
  Log.i(NetworkVariables.TAG,""String_Node_Str"");
}",0.9890236857307916
179501,"public void shutdownThread(){
  try {
    Log.d(NetworkVariables.TAG,""String_Node_Str"");
    isRunning=false;
    if (out != null)     out.shutdownThread();
    stopOperation=true;
    this.interrupt();
    if (socket != null)     socket.close();
    connected=false;
  }
 catch (  IOException e) {
    Log.w(NetworkVariables.TAG,""String_Node_Str"" + e);
  }
 finally {
    hasCompletedOperation=true;
    Looper.myLooper().quit();
    fireEvent(new NetworkEvent(this,""String_Node_Str""),ConnectionLostListener.class);
  }
}","public void shutdownThread(){
  try {
    Log.d(NetworkVariables.TAG,""String_Node_Str"");
    isRunning=false;
    if (out != null)     out.shutdownThread();
    stopOperation=true;
    this.interrupt();
    if (socket != null)     socket.close();
    connected=false;
  }
 catch (  IOException e) {
    Log.w(NetworkVariables.TAG,""String_Node_Str"" + e);
  }
 finally {
    hasCompletedOperation=true;
    fireEvent(new NetworkEvent(this,""String_Node_Str""),ConnectionLostListener.class);
  }
}",0.970414201183432
179502,"/** 
 * Asynchronously connects to the server
 */
public void connectToServerAsync(){
  if (!connected) {
    if (!this.isAlive())     this.start();
  }
}","/** 
 * Asynchronously connects to the server
 */
public void connectToServerAsync(){
  connectToManager();
  if (!connected) {
    if (!this.isAlive())     this.start();
  }
}",0.9333333333333332
179503,"/** 
 * Starts the latency logging as well as the data networks logging.
 */
private void startLatencyLogger(){
  manager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);
  manager.listen(new DataNetworkListener(this),DataNetworkListener.LISTEN_DATA_CONNECTION_STATE);
  Timer t=new Timer();
  t.schedule(new TimerTask(){
    @Override public void run(){
      if (connected) {
        requestNetworkLatency();
      }
    }
  }
,0,1000);
}","/** 
 * Starts the latency logging as well as the data networks logging.
 */
private void startLatencyLogger(){
  Timer t=new Timer();
  t.schedule(new TimerTask(){
    @Override public void run(){
      if (connected) {
        requestNetworkLatency();
      }
    }
  }
,0,1000);
}",0.4402684563758389
179504,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void run(){
  if (!connected) {
    connectToServer();
  }
  if (connected) {
    isRunning=true;
    registerWithServer(getPlayerRegistrationInformation());
    while (!stopOperation) {
      try {
        NetworkMessage msg=null;
        Schema schema=null;
        byte[] messageHeader=new byte[6];
        int success=in.read(messageHeader);
        if (success == 6) {
          byte classType=messageHeader[0];
          boolean compressed=false;
          if (messageHeader[1] == 1)           compressed=true;
switch (classType) {
case -1:
            keepAliveBreak=true;
          break;
case 1:
        msg=new PlayerRegistrationMessage();
      schema=playerRegSchema;
    break;
case 2:
  msg=new NetworkMessageMedium();
schema=mediumMsgSchema;
break;
case 3:
msg=new NetworkMessageLarge();
schema=largeMsgSchema;
break;
default :
msg=new NetworkMessage();
schema=networkMsgSchema;
}
if (!keepAliveBreak) {
b.clear();
b.put(messageHeader,2,4);
b.rewind();
int mSize=b.getInt();
byte[] object=new byte[mSize];
int bytesRead=0;
while (bytesRead != mSize) {
bytesRead+=in.read(object,bytesRead,object.length - bytesRead);
}
Log.i(""String_Node_Str"",""String_Node_Str"" + (mSize + 6));
byte[] decompressed;
if (compressed) {
decompressed=QuickLZ.decompress(object);
Log.i(""String_Node_Str"",""String_Node_Str"" + decompressed.length + ""String_Node_Str""+ mSize+ ""String_Node_Str""+ (decompressed.length - mSize));
}
 else {
decompressed=object;
Log.i(""String_Node_Str"",""String_Node_Str"" + decompressed.length);
}
ProtostuffIOUtil.mergeFrom(decompressed,msg,schema);
try {
processNetworkMessage(msg);
}
 catch (Exception e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
}
}
}
 else {
if (success == -1) {
Log.e(NetworkVariables.TAG,""String_Node_Str"");
shutdownThread();
}
}
}
 catch (InterruptedIOException e) {
}
catch (IOException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
this.shutdownThread();
break;
}
catch (NullPointerException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
}
catch (BufferOverflowException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"");
}
catch (RuntimeException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
}
catch (NoSuchMethodError e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"");
}
 finally {
b.rewind();
b.clear();
buffer.clear();
}
}
}
 else {
shutdownThread();
}
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void run(){
  if (Looper.myLooper() == null) {
    Looper.prepare();
  }
  if (!connected) {
    connectToServer();
  }
  if (connected) {
    isRunning=true;
    registerWithServer(getPlayerRegistrationInformation());
    while (!stopOperation) {
      try {
        NetworkMessage msg=null;
        Schema schema=null;
        byte[] messageHeader=new byte[6];
        int success=in.read(messageHeader);
        if (success == 6) {
          byte classType=messageHeader[0];
          boolean compressed=false;
          if (messageHeader[1] == 1)           compressed=true;
switch (classType) {
case -1:
            keepAliveBreak=true;
          break;
case 1:
        msg=new PlayerRegistrationMessage();
      schema=playerRegSchema;
    break;
case 2:
  msg=new NetworkMessageMedium();
schema=mediumMsgSchema;
break;
case 3:
msg=new NetworkMessageLarge();
schema=largeMsgSchema;
break;
default :
msg=new NetworkMessage();
schema=networkMsgSchema;
}
if (!keepAliveBreak) {
b.clear();
b.put(messageHeader,2,4);
b.rewind();
int mSize=b.getInt();
byte[] object=new byte[mSize];
int bytesRead=0;
while (bytesRead != mSize) {
bytesRead+=in.read(object,bytesRead,object.length - bytesRead);
}
Log.i(""String_Node_Str"",""String_Node_Str"" + (mSize + 6));
byte[] decompressed;
if (compressed) {
decompressed=QuickLZ.decompress(object);
Log.i(""String_Node_Str"",""String_Node_Str"" + decompressed.length + ""String_Node_Str""+ mSize+ ""String_Node_Str""+ (decompressed.length - mSize));
}
 else {
decompressed=object;
Log.i(""String_Node_Str"",""String_Node_Str"" + decompressed.length);
}
ProtostuffIOUtil.mergeFrom(decompressed,msg,schema);
try {
processNetworkMessage(msg);
}
 catch (Exception e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
}
}
}
 else {
if (success == -1) {
Log.e(NetworkVariables.TAG,""String_Node_Str"");
shutdownThread();
}
}
}
 catch (InterruptedIOException e) {
}
catch (IOException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
this.shutdownThread();
break;
}
catch (NullPointerException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
}
catch (BufferOverflowException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"");
}
catch (RuntimeException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
}
catch (NoSuchMethodError e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"");
}
 finally {
b.rewind();
b.clear();
buffer.clear();
}
}
}
 else {
shutdownThread();
}
}",0.9875332107091764
179505,"private void connectToServer(){
  boolean success=true;
  try {
    Inet4Address hostAddress=(Inet4Address)InetAddress.getByName(NetworkVariables.hostname);
    socket=new Socket(hostAddress,NetworkVariables.port);
    in=socket.getInputStream();
    out=new NetworkWriteThread(socket);
    out.start();
    fireEvent(new NetworkEvent(this,""String_Node_Str""),ConnectionEstablishedListener.class);
  }
 catch (  UnknownHostException e) {
    Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
    success=false;
  }
catch (  IOException e) {
    Log.e(NetworkVariables.TAG,""String_Node_Str"");
    success=false;
  }
 finally {
    if (!success) {
      fireEvent(new NetworkEvent(this,""String_Node_Str""),ConnectionFailedListener.class);
    }
 else {
      connected=true;
    }
  }
  Log.i(NetworkVariables.TAG,""String_Node_Str"");
}","private void connectToServer(){
  boolean success=true;
  try {
    Inet4Address hostAddress=(Inet4Address)InetAddress.getByName(NetworkVariables.hostname);
    socket=new Socket(hostAddress,NetworkVariables.port);
    in=socket.getInputStream();
    out=new NetworkWriteThread(socket);
    out.start();
    startLatencyLogger();
    Looper.loop();
    fireEvent(new NetworkEvent(this,""String_Node_Str""),ConnectionEstablishedListener.class);
  }
 catch (  UnknownHostException e) {
    Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
    success=false;
  }
catch (  IOException e) {
    Log.e(NetworkVariables.TAG,""String_Node_Str"");
    success=false;
  }
 finally {
    if (!success) {
      fireEvent(new NetworkEvent(this,""String_Node_Str""),ConnectionFailedListener.class);
    }
 else {
      connected=true;
    }
  }
  Log.i(NetworkVariables.TAG,""String_Node_Str"");
}",0.9736070381231672
179506,"public void shutdownThread(){
  try {
    Log.d(NetworkVariables.TAG,""String_Node_Str"");
    isRunning=false;
    if (out != null)     out.shutdownThread();
    stopOperation=true;
    this.interrupt();
    if (socket != null)     socket.close();
    connected=false;
  }
 catch (  IOException e) {
    Log.w(NetworkVariables.TAG,""String_Node_Str"" + e);
  }
 finally {
    hasCompletedOperation=true;
    fireEvent(new NetworkEvent(this,""String_Node_Str""),ConnectionLostListener.class);
  }
}","public void shutdownThread(){
  try {
    Log.d(NetworkVariables.TAG,""String_Node_Str"");
    isRunning=false;
    if (out != null)     out.shutdownThread();
    stopOperation=true;
    this.interrupt();
    if (socket != null)     socket.close();
    connected=false;
  }
 catch (  IOException e) {
    Log.w(NetworkVariables.TAG,""String_Node_Str"" + e);
  }
 finally {
    hasCompletedOperation=true;
    Looper.myLooper().quit();
    fireEvent(new NetworkEvent(this,""String_Node_Str""),ConnectionLostListener.class);
  }
}",0.970414201183432
179507,"/** 
 * Asynchronously connects to the server
 */
public void connectToServerAsync(){
  if (!connected) {
    startLatencyLogger();
    this.start();
  }
}","/** 
 * Asynchronously connects to the server
 */
public void connectToServerAsync(){
  if (!connected) {
    if (!this.isAlive())     this.start();
  }
}",0.8867313915857605
179508,"/** 
 * Starts the latency logging as well as the data networks logging.
 */
private void startLatencyLogger(){
  Timer t=new Timer();
  t.schedule(new TimerTask(){
    @Override public void run(){
      if (connected) {
        requestNetworkLatency();
      }
    }
  }
,0,1000);
  manager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);
  manager.listen(new DataNetworkListener(this),DataNetworkListener.LISTEN_DATA_CONNECTION_STATE);
}","/** 
 * Starts the latency logging as well as the data networks logging.
 */
private void startLatencyLogger(){
  manager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);
  manager.listen(new DataNetworkListener(this),DataNetworkListener.LISTEN_DATA_CONNECTION_STATE);
  Timer t=new Timer();
  t.schedule(new TimerTask(){
    @Override public void run(){
      if (connected) {
        requestNetworkLatency();
      }
    }
  }
,0,1000);
}",0.6125541125541125
179509,"/** 
 * An android utility function that registers a messenger for all the available network events. The event object will be passed to the Messenger whenever any event occurs, using the  message.what parameter to describe what type of event it is. The message.what parameter is and integer representation of the EventType enum in this class.
 * @param eventMessenger
 */
public void registerMessenger(final Messenger eventMessenger){
  linkedMessengers.add(eventMessenger);
  addListener(ConnectionEstablishedListener.class,new ConnectionEstablishedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        isConnected=true;
        eventMessenger.send(Message.obtain(null,EventType.CONNECTION_ESTABLISHED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(ConnectionLostListener.class,new ConnectionLostListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        isConnected=false;
        eventMessenger.send(Message.obtain(null,EventType.CONNECTION_LOST.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(ConnectionFailedListener.class,new ConnectionFailedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.CONNECTION_FAILED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(DirectMessageListener.class,new DirectMessageListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.DIRECT_MESSAGE_RECEIVED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(GamestateReceivedListener.class,new GamestateReceivedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.GAMESTATE_RECEIVED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(LatencyUpdateListener.class,new LatencyUpdateListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.LATENCY_UPDATE_RECEIVED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(PartialGamestateReceivedListener.class,new PartialGamestateReceivedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.PARTIAL_GAMESTATE_RECEIVED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(RequestReceivedListener.class,new RequestReceivedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.REQUEST_RECEIVED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(UnknownMessageTypeReceivedListener.class,new UnknownMessageTypeReceivedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.UNKNOWN_MESSAGE_TYPE_RECEIVED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(UpdateReceivedListener.class,new UpdateReceivedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.UPDATE_RECEIVED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(PlayerRegisteredListener.class,new PlayerRegisteredListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.PLAYER_REGISTERED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
}","/** 
 * An android utility function that registers a messenger for all the available network events. The event object will be passed to the Messenger whenever any event occurs, using the  message.what parameter to describe what type of event it is. The message.what parameter is and integer representation of the EventType enum in this class.
 * @param eventMessenger
 */
public void registerMessenger(final Messenger eventMessenger){
  linkedMessengers.add(eventMessenger);
  addListener(ConnectionEstablishedListener.class,new ConnectionEstablishedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        isConnected=true;
        eventMessenger.send(Message.obtain(null,EventType.CONNECTION_ESTABLISHED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(ConnectionLostListener.class,new ConnectionLostListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        isConnected=false;
        eventMessenger.send(Message.obtain(null,EventType.CONNECTION_LOST.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(ConnectionFailedListener.class,new ConnectionFailedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        isConnected=false;
        eventMessenger.send(Message.obtain(null,EventType.CONNECTION_FAILED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(DirectMessageListener.class,new DirectMessageListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.DIRECT_MESSAGE_RECEIVED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(GamestateReceivedListener.class,new GamestateReceivedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.GAMESTATE_RECEIVED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(LatencyUpdateListener.class,new LatencyUpdateListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.LATENCY_UPDATE_RECEIVED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(PartialGamestateReceivedListener.class,new PartialGamestateReceivedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.PARTIAL_GAMESTATE_RECEIVED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(RequestReceivedListener.class,new RequestReceivedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.REQUEST_RECEIVED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(UnknownMessageTypeReceivedListener.class,new UnknownMessageTypeReceivedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.UNKNOWN_MESSAGE_TYPE_RECEIVED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(UpdateReceivedListener.class,new UpdateReceivedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.UPDATE_RECEIVED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(PlayerRegisteredListener.class,new PlayerRegisteredListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.PLAYER_REGISTERED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
}",0.9969903020844944
179510,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void run(){
  if (!connected) {
    connectToServer();
  }
  if (connected) {
    isRunning=true;
    registerWithServer(getPlayerRegistrationInformation());
    while (!stopOperation) {
      try {
        NetworkMessage msg=null;
        Schema schema=null;
        byte[] messageHeader=new byte[6];
        int success=in.read(messageHeader);
        if (success == 6) {
          byte classType=messageHeader[0];
          boolean compressed=false;
          if (messageHeader[1] == 1)           compressed=true;
switch (classType) {
case -1:
            keepAliveBreak=true;
          break;
case 1:
        msg=new PlayerRegistrationMessage();
      schema=playerRegSchema;
    break;
case 2:
  msg=new NetworkMessageMedium();
schema=mediumMsgSchema;
break;
case 3:
msg=new NetworkMessageLarge();
schema=largeMsgSchema;
break;
default :
msg=new NetworkMessage();
schema=networkMsgSchema;
}
if (!keepAliveBreak) {
b.clear();
b.put(messageHeader,2,4);
b.rewind();
int mSize=b.getInt();
byte[] object=new byte[mSize];
int bytesRead=0;
while (bytesRead != mSize) {
bytesRead+=in.read(object,bytesRead,object.length - bytesRead);
}
Log.i(""String_Node_Str"",""String_Node_Str"" + (mSize + 6));
byte[] decompressed;
if (compressed) {
decompressed=QuickLZ.decompress(object);
Log.i(""String_Node_Str"",""String_Node_Str"" + decompressed.length + ""String_Node_Str""+ mSize+ ""String_Node_Str""+ (decompressed.length - mSize));
}
 else {
decompressed=object;
Log.i(""String_Node_Str"",""String_Node_Str"" + decompressed.length);
}
ProtostuffIOUtil.mergeFrom(decompressed,msg,schema);
processNetworkMessage(msg);
}
}
 else {
if (success == -1) {
Log.e(NetworkVariables.TAG,""String_Node_Str"");
shutdownThread();
}
}
}
 catch (InterruptedIOException e) {
}
catch (IOException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
fireEvent(new NetworkEvent(this,""String_Node_Str"" + e),ConnectionLostListener.class);
this.shutdownThread();
break;
}
catch (NullPointerException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
}
catch (BufferOverflowException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"");
}
catch (RuntimeException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
}
catch (NoSuchMethodError e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"");
}
 finally {
b.rewind();
b.clear();
buffer.clear();
}
}
}
 else {
shutdownThread();
}
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void run(){
  if (!connected) {
    connectToServer();
  }
  if (connected) {
    isRunning=true;
    registerWithServer(getPlayerRegistrationInformation());
    while (!stopOperation) {
      try {
        NetworkMessage msg=null;
        Schema schema=null;
        byte[] messageHeader=new byte[6];
        int success=in.read(messageHeader);
        if (success == 6) {
          byte classType=messageHeader[0];
          boolean compressed=false;
          if (messageHeader[1] == 1)           compressed=true;
switch (classType) {
case -1:
            keepAliveBreak=true;
          break;
case 1:
        msg=new PlayerRegistrationMessage();
      schema=playerRegSchema;
    break;
case 2:
  msg=new NetworkMessageMedium();
schema=mediumMsgSchema;
break;
case 3:
msg=new NetworkMessageLarge();
schema=largeMsgSchema;
break;
default :
msg=new NetworkMessage();
schema=networkMsgSchema;
}
if (!keepAliveBreak) {
b.clear();
b.put(messageHeader,2,4);
b.rewind();
int mSize=b.getInt();
byte[] object=new byte[mSize];
int bytesRead=0;
while (bytesRead != mSize) {
bytesRead+=in.read(object,bytesRead,object.length - bytesRead);
}
Log.i(""String_Node_Str"",""String_Node_Str"" + (mSize + 6));
byte[] decompressed;
if (compressed) {
decompressed=QuickLZ.decompress(object);
Log.i(""String_Node_Str"",""String_Node_Str"" + decompressed.length + ""String_Node_Str""+ mSize+ ""String_Node_Str""+ (decompressed.length - mSize));
}
 else {
decompressed=object;
Log.i(""String_Node_Str"",""String_Node_Str"" + decompressed.length);
}
ProtostuffIOUtil.mergeFrom(decompressed,msg,schema);
processNetworkMessage(msg);
}
}
 else {
if (success == -1) {
Log.e(NetworkVariables.TAG,""String_Node_Str"");
shutdownThread();
}
}
}
 catch (InterruptedIOException e) {
}
catch (IOException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
this.shutdownThread();
break;
}
catch (NullPointerException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
}
catch (BufferOverflowException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"");
}
catch (RuntimeException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
}
catch (NoSuchMethodError e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"");
}
 finally {
b.rewind();
b.clear();
buffer.clear();
}
}
}
 else {
shutdownThread();
}
}",0.9818947368421052
179511,"public void shutdownThread(){
  try {
    Log.d(NetworkVariables.TAG,""String_Node_Str"");
    isRunning=false;
    if (out != null)     out.shutdownThread();
    stopOperation=true;
    this.interrupt();
    if (socket != null)     socket.close();
    connected=false;
  }
 catch (  IOException e) {
    Log.w(NetworkVariables.TAG,""String_Node_Str"" + e);
  }
 finally {
    hasCompletedOperation=true;
  }
}","public void shutdownThread(){
  try {
    Log.d(NetworkVariables.TAG,""String_Node_Str"");
    isRunning=false;
    if (out != null)     out.shutdownThread();
    stopOperation=true;
    this.interrupt();
    if (socket != null)     socket.close();
    connected=false;
  }
 catch (  IOException e) {
    Log.w(NetworkVariables.TAG,""String_Node_Str"" + e);
  }
 finally {
    hasCompletedOperation=true;
    fireEvent(new NetworkEvent(this,""String_Node_Str""),ConnectionLostListener.class);
  }
}",0.9042316258351892
179512,"@Override public void run(){
  while (!stopOperation) {
    try {
      NetworkMessage msg=null;
      Schema schema=null;
      byte[] messageHeader=new byte[6];
      int headerBytesRead=in.read(messageHeader);
      if (headerBytesRead == 6) {
        byte classType=messageHeader[0];
        boolean compressed=false;
        if (messageHeader[1] == 1)         compressed=true;
switch (classType) {
case -1:
          keepAliveBreak=true;
        break;
case 1:
      msg=new PlayerRegistrationMessage();
    schema=playerRegSchema;
  break;
case 2:
msg=new NetworkMessageMedium();
schema=mediumMsgSchema;
break;
case 3:
msg=new NetworkMessageLarge();
schema=largeMsgSchema;
break;
default :
msg=new NetworkMessage();
schema=networkMsgSchema;
}
if (!keepAliveBreak) {
b.clear();
b.put(messageHeader,2,4);
b.rewind();
int mSize=b.getInt();
byte[] object=new byte[mSize];
int bytesRead=0;
while (bytesRead != mSize) {
bytesRead+=in.read(object,bytesRead,object.length - bytesRead);
}
byte[] decompressed;
if (compressed) {
decompressed=QuickLZ.decompress(object);
}
 else {
decompressed=object;
}
ProtostuffIOUtil.mergeFrom(decompressed,msg,schema);
processNetworkMessage(msg);
}
}
 else {
if (headerBytesRead == -1) {
LogMaker.errorPrintln(""String_Node_Str"",playerID);
shutdownThread();
}
}
}
 catch (InterruptedIOException e) {
}
catch (IOException e) {
LogMaker.errorPrintln(""String_Node_Str"" + e,playerID);
this.shutdownThread();
}
catch (NullPointerException e) {
LogMaker.errorPrintln(""String_Node_Str"" + e.getMessage(),playerID);
this.shutdownThread();
}
catch (BufferOverflowException e) {
LogMaker.errorPrintln(""String_Node_Str"",playerID);
}
catch (java.lang.OutOfMemoryError e) {
LogMaker.errorPrintln(""String_Node_Str"",playerID);
}
catch (RuntimeException e) {
LogMaker.errorPrintln(""String_Node_Str"" + e,playerID);
}
 finally {
keepAliveBreak=false;
buffer.clear();
b.clear();
}
}
}","@Override public void run(){
  while (!stopOperation) {
    try {
      NetworkMessage msg=null;
      Schema schema=null;
      byte[] messageHeader=new byte[6];
      int headerBytesRead=in.read(messageHeader);
      if (headerBytesRead == 6) {
        byte classType=messageHeader[0];
        boolean compressed=false;
        if (messageHeader[1] == 1)         compressed=true;
switch (classType) {
case -1:
          keepAliveBreak=true;
        break;
case 1:
      msg=new PlayerRegistrationMessage();
    schema=playerRegSchema;
  break;
case 2:
msg=new NetworkMessageMedium();
schema=mediumMsgSchema;
break;
case 3:
msg=new NetworkMessageLarge();
schema=largeMsgSchema;
break;
default :
msg=new NetworkMessage();
schema=networkMsgSchema;
}
if (!keepAliveBreak) {
b.clear();
b.put(messageHeader,2,4);
b.rewind();
int mSize=b.getInt();
byte[] object=new byte[mSize];
int bytesRead=0;
while (bytesRead != mSize) {
bytesRead+=in.read(object,bytesRead,object.length - bytesRead);
}
byte[] decompressed;
if (compressed) {
decompressed=QuickLZ.decompress(object);
}
 else {
decompressed=object;
}
ProtostuffIOUtil.mergeFrom(decompressed,msg,schema);
processNetworkMessage(msg);
}
}
 else {
if (headerBytesRead == -1) {
LogMaker.errorPrintln(""String_Node_Str"",playerID);
shutdownThread();
}
}
}
 catch (InterruptedIOException e) {
}
catch (IOException e) {
LogMaker.errorPrintln(""String_Node_Str"" + e,playerID);
this.shutdownThread();
}
catch (NullPointerException e) {
LogMaker.errorPrintln(""String_Node_Str"" + e.getMessage(),playerID);
this.shutdownThread();
}
catch (BufferOverflowException e) {
LogMaker.errorPrintln(""String_Node_Str"",playerID);
}
catch (java.lang.OutOfMemoryError e) {
LogMaker.errorPrintln(""String_Node_Str"",playerID);
}
catch (RuntimeException e) {
LogMaker.errorPrintln(""String_Node_Str"" + e,playerID);
}
catch (Exception e) {
LogMaker.errorPrintln(""String_Node_Str"" + e,playerID);
}
 finally {
keepAliveBreak=false;
buffer.clear();
b.clear();
}
}
}",0.979591836734694
179513,"@Override public void run(){
  while (!stopOperation) {
    try {
      NetworkMessage msg=messageQueue.take();
      Schema schema;
      byte classType;
      if (msg instanceof PlayerRegistrationMessage) {
        schema=playerRegSchema;
        classType=1;
      }
 else       if (msg instanceof NetworkMessageMedium) {
        schema=mediumMsgSchema;
        classType=2;
      }
 else       if (msg instanceof NetworkMessageLarge) {
        schema=largeMsgSchema;
        classType=3;
      }
 else {
        schema=networkMsgSchema;
        classType=0;
      }
      byte[] serializedObject=ProtostuffIOUtil.toByteArray(msg,schema,buffer);
      boolean compressed=false;
      byte[] tempArray=QuickLZ.compress(serializedObject,3);
      if (tempArray.length < serializedObject.length) {
        serializedObject=tempArray;
        compressed=true;
      }
      b.clear();
      b.putInt(serializedObject.length);
      byte[] lengthField=b.array();
      byte[] message=new byte[serializedObject.length + lengthField.length + 2];
      message[0]=classType;
      if (compressed) {
        message[1]=1;
      }
 else {
        message[1]=0;
      }
      System.arraycopy(lengthField,0,message,2,lengthField.length);
      System.arraycopy(serializedObject,0,message,lengthField.length + 2,serializedObject.length);
      if (message.length > 8000) {
        LogMaker.println(""String_Node_Str"" + message.length + ""String_Node_Str"",mainThread.playerID);
        int numMsgs=message.length / 4096;
        int remainder=message.length % 4096;
        byte[][] msgs=new byte[numMsgs][4096];
        byte[] lastMsg=new byte[remainder];
        for (int i=0; i < numMsgs; i++) {
          msgs[i]=Arrays.copyOfRange(message,i * 4096,(i * 4096) + 4096);
          os.write(msgs[i]);
        }
        if (remainder != 0) {
          lastMsg=Arrays.copyOfRange(message,numMsgs * 4096,message.length);
          os.write(lastMsg);
          LogMaker.println(""String_Node_Str"" + (lastMsg.length + numMsgs * 4096) + ""String_Node_Str""+ message.length+ ""String_Node_Str"",mainThread.playerID);
        }
      }
 else {
        os.write(message);
      }
      os.flush();
    }
 catch (    IOException e) {
      LogMaker.errorPrintln(""String_Node_Str"" + e,mainThread.playerID);
    }
catch (    InterruptedException e) {
    }
catch (    Exception e) {
      LogMaker.errorPrintln(""String_Node_Str"" + e,mainThread.playerID);
    }
 finally {
      buffer.clear();
    }
  }
}","@Override public void run(){
  while (!stopOperation) {
    try {
      NetworkMessage msg;
      try {
        msg=messageQueue.take();
      }
 catch (      InterruptedException e) {
        break;
      }
      Schema schema;
      byte classType;
      if (msg instanceof PlayerRegistrationMessage) {
        schema=playerRegSchema;
        classType=1;
      }
 else       if (msg instanceof NetworkMessageMedium) {
        schema=mediumMsgSchema;
        classType=2;
      }
 else       if (msg instanceof NetworkMessageLarge) {
        schema=largeMsgSchema;
        classType=3;
      }
 else {
        schema=networkMsgSchema;
        classType=0;
      }
      byte[] serializedObject=ProtostuffIOUtil.toByteArray(msg,schema,buffer);
      boolean compressed=false;
      byte[] tempArray=QuickLZ.compress(serializedObject,3);
      if (tempArray.length < serializedObject.length) {
        serializedObject=tempArray;
        compressed=true;
      }
      b.clear();
      b.putInt(serializedObject.length);
      byte[] lengthField=b.array();
      byte[] message=new byte[serializedObject.length + lengthField.length + 2];
      message[0]=classType;
      if (compressed) {
        message[1]=1;
      }
 else {
        message[1]=0;
      }
      System.arraycopy(lengthField,0,message,2,lengthField.length);
      System.arraycopy(serializedObject,0,message,lengthField.length + 2,serializedObject.length);
      if (message.length > 8000) {
        LogMaker.println(""String_Node_Str"" + message.length + ""String_Node_Str"",mainThread.playerID);
        int numMsgs=message.length / 4096;
        int remainder=message.length % 4096;
        byte[][] msgs=new byte[numMsgs][4096];
        byte[] lastMsg=new byte[remainder];
        for (int i=0; i < numMsgs; i++) {
          msgs[i]=Arrays.copyOfRange(message,i * 4096,(i * 4096) + 4096);
          os.write(msgs[i]);
        }
        if (remainder != 0) {
          lastMsg=Arrays.copyOfRange(message,numMsgs * 4096,message.length);
          os.write(lastMsg);
          LogMaker.println(""String_Node_Str"" + (lastMsg.length + numMsgs * 4096) + ""String_Node_Str""+ message.length+ ""String_Node_Str"",mainThread.playerID);
        }
      }
 else {
        os.write(message);
      }
      os.flush();
    }
 catch (    IOException e) {
      LogMaker.errorPrintln(""String_Node_Str"" + e,mainThread.playerID);
    }
catch (    Exception e) {
      LogMaker.errorPrintln(""String_Node_Str"" + e,mainThread.playerID);
    }
 finally {
      buffer.clear();
    }
  }
}",0.9722388655881764
179514,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void run(){
  if (Looper.myLooper() == null) {
    Looper.prepare();
  }
  if (!connected) {
    connectToServer();
  }
  if (connected) {
    isRunning=true;
    registerWithServer(getPlayerRegistrationInformation());
    while (!stopOperation) {
      try {
        NetworkMessage msg=null;
        Schema schema=null;
        byte[] messageHeader=new byte[6];
        int success=in.read(messageHeader);
        if (success == 6) {
          byte classType=messageHeader[0];
          boolean compressed=false;
          if (messageHeader[1] == 1)           compressed=true;
switch (classType) {
case -1:
            keepAliveBreak=true;
          break;
case 1:
        msg=new PlayerRegistrationMessage();
      schema=playerRegSchema;
    break;
case 2:
  msg=new NetworkMessageMedium();
schema=mediumMsgSchema;
break;
case 3:
msg=new NetworkMessageLarge();
schema=largeMsgSchema;
break;
default :
msg=new NetworkMessage();
schema=networkMsgSchema;
Log.i(NetworkVariables.TAG,""String_Node_Str"" + classType);
break;
}
if (!keepAliveBreak) {
b.clear();
b.put(messageHeader,2,4);
b.rewind();
int mSize=b.getInt();
byte[] object;
try {
object=new byte[mSize];
}
 catch (RuntimeException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + ""String_Node_Str"" + mSize + ""String_Node_Str""+ classType+ ""String_Node_Str""+ compressed);
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
shutdownThread();
break;
}
int bytesRead=0;
while (bytesRead != mSize) {
bytesRead+=in.read(object,bytesRead,object.length - bytesRead);
}
Log.i(""String_Node_Str"",""String_Node_Str"" + (mSize + 6));
byte[] decompressed;
if (compressed) {
decompressed=QuickLZ.decompress(object);
Log.i(""String_Node_Str"",""String_Node_Str"" + decompressed.length + ""String_Node_Str""+ mSize+ ""String_Node_Str""+ (decompressed.length - mSize));
}
 else {
decompressed=object;
Log.i(""String_Node_Str"",""String_Node_Str"" + decompressed.length);
}
ProtostuffIOUtil.mergeFrom(decompressed,msg,schema);
try {
processNetworkMessage(msg);
}
 catch (Exception e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
}
}
}
 else {
if (success == -1) {
Log.e(NetworkVariables.TAG,""String_Node_Str"");
shutdownThread();
}
}
}
 catch (InterruptedIOException e) {
}
catch (IOException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
this.shutdownThread();
break;
}
catch (NullPointerException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
}
catch (BufferOverflowException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"");
}
catch (RuntimeException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
}
catch (NoSuchMethodError e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"");
}
 finally {
b.rewind();
b.clear();
buffer.clear();
}
}
}
 else {
shutdownThread();
}
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void run(){
  if (Looper.myLooper() == null) {
    Looper.prepare();
  }
  if (!connected) {
    connectToServer();
  }
  if (connected) {
    isRunning=true;
    registerWithServer(getPlayerRegistrationInformation());
    while (!stopOperation) {
      try {
        NetworkMessage msg=null;
        Schema schema=null;
        byte[] messageHeader=new byte[6];
        int success=in.read(messageHeader);
        if (success == 6) {
          byte classType=messageHeader[0];
          boolean compressed=false;
          if (messageHeader[1] == 1)           compressed=true;
switch (classType) {
case -1:
            keepAliveBreak=true;
          break;
case 1:
        msg=new PlayerRegistrationMessage();
      schema=playerRegSchema;
    break;
case 2:
  msg=new NetworkMessageMedium();
schema=mediumMsgSchema;
break;
case 3:
msg=new NetworkMessageLarge();
schema=largeMsgSchema;
break;
default :
msg=new NetworkMessage();
schema=networkMsgSchema;
Log.i(NetworkVariables.TAG,""String_Node_Str"" + classType);
break;
}
if (!keepAliveBreak) {
b.clear();
b.put(messageHeader,2,4);
b.rewind();
int mSize=b.getInt();
byte[] object;
try {
object=new byte[mSize];
}
 catch (RuntimeException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + ""String_Node_Str"" + mSize + ""String_Node_Str""+ classType+ ""String_Node_Str""+ compressed);
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
shutdownThread();
break;
}
catch (OutOfMemoryError e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + ""String_Node_Str"" + mSize + ""String_Node_Str""+ classType+ ""String_Node_Str""+ compressed);
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
shutdownThread();
break;
}
int bytesRead=0;
while (bytesRead != mSize) {
bytesRead+=in.read(object,bytesRead,object.length - bytesRead);
}
Log.i(""String_Node_Str"",""String_Node_Str"" + (mSize + 6));
byte[] decompressed;
if (compressed) {
decompressed=QuickLZ.decompress(object);
Log.i(""String_Node_Str"",""String_Node_Str"" + decompressed.length + ""String_Node_Str""+ mSize+ ""String_Node_Str""+ (decompressed.length - mSize));
}
 else {
decompressed=object;
Log.i(""String_Node_Str"",""String_Node_Str"" + decompressed.length);
}
ProtostuffIOUtil.mergeFrom(decompressed,msg,schema);
try {
processNetworkMessage(msg);
}
 catch (Exception e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
}
}
}
 else {
if (success == -1) {
Log.e(NetworkVariables.TAG,""String_Node_Str"");
shutdownThread();
}
}
}
 catch (InterruptedIOException e) {
}
catch (IOException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
this.shutdownThread();
break;
}
catch (NullPointerException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
}
catch (BufferOverflowException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"");
}
catch (RuntimeException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
}
catch (NoSuchMethodError e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"");
}
 finally {
b.rewind();
b.clear();
buffer.clear();
}
}
}
 else {
shutdownThread();
}
}",0.9583048530416952
179515,"@Override public void run(){
  while (!stopOperation) {
    try {
      NetworkMessage msg=null;
      Schema schema=null;
      byte[] messageHeader=new byte[6];
      int headerBytesRead=in.read(messageHeader);
      if (headerBytesRead == 6) {
        byte classType=messageHeader[0];
        boolean compressed=false;
        if (messageHeader[1] == 1)         compressed=true;
switch (classType) {
case -1:
          keepAliveBreak=true;
        break;
case 1:
      msg=new PlayerRegistrationMessage();
    schema=playerRegSchema;
  break;
case 2:
msg=new NetworkMessageMedium();
schema=mediumMsgSchema;
break;
case 3:
msg=new NetworkMessageLarge();
schema=largeMsgSchema;
break;
default :
msg=new NetworkMessage();
schema=networkMsgSchema;
}
if (!keepAliveBreak) {
b.clear();
b.put(messageHeader,2,4);
b.rewind();
int mSize=b.getInt();
byte[] object;
try {
object=new byte[mSize];
}
 catch (RuntimeException e) {
LogMaker.errorPrintln(""String_Node_Str"" + ""String_Node_Str"" + mSize + ""String_Node_Str""+ classType+ ""String_Node_Str""+ compressed,playerID);
LogMaker.errorPrintln(""String_Node_Str"" + e,playerID);
shutdownThread();
break;
}
int bytesRead=0;
while (bytesRead != mSize) {
bytesRead+=in.read(object,bytesRead,object.length - bytesRead);
}
byte[] decompressed;
if (compressed) {
decompressed=QuickLZ.decompress(object);
}
 else {
decompressed=object;
}
ProtostuffIOUtil.mergeFrom(decompressed,msg,schema);
try {
processNetworkMessage(msg);
}
 catch (Exception e) {
LogMaker.errorPrintln(""String_Node_Str"" + e,playerID);
}
}
}
 else {
if (headerBytesRead == -1) {
LogMaker.errorPrintln(""String_Node_Str"",playerID);
shutdownThread();
}
}
}
 catch (InterruptedIOException e) {
}
catch (IOException e) {
LogMaker.errorPrintln(""String_Node_Str"" + e,playerID);
this.shutdownThread();
}
catch (NullPointerException e) {
LogMaker.errorPrintln(""String_Node_Str"" + e.getMessage(),playerID);
this.shutdownThread();
}
catch (BufferOverflowException e) {
LogMaker.errorPrintln(""String_Node_Str"",playerID);
}
catch (java.lang.OutOfMemoryError e) {
LogMaker.errorPrintln(""String_Node_Str"",playerID);
}
catch (RuntimeException e) {
LogMaker.errorPrintln(""String_Node_Str"" + e,playerID);
}
catch (Exception e) {
LogMaker.errorPrintln(""String_Node_Str"" + e,playerID);
}
 finally {
keepAliveBreak=false;
buffer.clear();
b.clear();
}
}
}","@Override public void run(){
  while (!stopOperation) {
    try {
      NetworkMessage msg=null;
      Schema schema=null;
      byte[] messageHeader=new byte[6];
      int headerBytesRead=in.read(messageHeader);
      if (headerBytesRead == 6) {
        byte classType=messageHeader[0];
        boolean compressed=false;
        if (messageHeader[1] == 1)         compressed=true;
switch (classType) {
case -1:
          keepAliveBreak=true;
        break;
case 1:
      msg=new PlayerRegistrationMessage();
    schema=playerRegSchema;
  break;
case 2:
msg=new NetworkMessageMedium();
schema=mediumMsgSchema;
break;
case 3:
msg=new NetworkMessageLarge();
schema=largeMsgSchema;
break;
default :
msg=new NetworkMessage();
schema=networkMsgSchema;
}
if (!keepAliveBreak) {
b.clear();
b.put(messageHeader,2,4);
b.rewind();
int mSize=b.getInt();
byte[] object;
try {
object=new byte[mSize];
}
 catch (RuntimeException e) {
LogMaker.errorPrintln(""String_Node_Str"" + ""String_Node_Str"" + mSize + ""String_Node_Str""+ classType+ ""String_Node_Str""+ compressed,playerID);
LogMaker.errorPrintln(""String_Node_Str"" + e,playerID);
shutdownThread();
break;
}
catch (OutOfMemoryError e) {
LogMaker.errorPrintln(""String_Node_Str"" + ""String_Node_Str"" + mSize + ""String_Node_Str""+ classType+ ""String_Node_Str""+ compressed,playerID);
LogMaker.errorPrintln(""String_Node_Str"" + e,playerID);
shutdownThread();
break;
}
int bytesRead=0;
while (bytesRead != mSize) {
bytesRead+=in.read(object,bytesRead,object.length - bytesRead);
}
byte[] decompressed;
if (compressed) {
decompressed=QuickLZ.decompress(object);
}
 else {
decompressed=object;
}
ProtostuffIOUtil.mergeFrom(decompressed,msg,schema);
try {
processNetworkMessage(msg);
}
 catch (Exception e) {
LogMaker.errorPrintln(""String_Node_Str"" + e,playerID);
}
}
}
 else {
if (headerBytesRead == -1) {
LogMaker.errorPrintln(""String_Node_Str"",playerID);
shutdownThread();
}
}
}
 catch (InterruptedIOException e) {
}
catch (IOException e) {
LogMaker.errorPrintln(""String_Node_Str"" + e,playerID);
this.shutdownThread();
}
catch (NullPointerException e) {
LogMaker.errorPrintln(""String_Node_Str"" + e.getMessage(),playerID);
this.shutdownThread();
}
catch (BufferOverflowException e) {
LogMaker.errorPrintln(""String_Node_Str"",playerID);
}
catch (java.lang.OutOfMemoryError e) {
LogMaker.errorPrintln(""String_Node_Str"",playerID);
}
catch (RuntimeException e) {
LogMaker.errorPrintln(""String_Node_Str"" + e,playerID);
}
catch (Exception e) {
LogMaker.errorPrintln(""String_Node_Str"" + e,playerID);
}
 finally {
keepAliveBreak=false;
buffer.clear();
b.clear();
}
}
}",0.9487388120423108
179516,"@Override public void run(){
  while (!stopOperation) {
    try {
      NetworkMessage msg=null;
      Schema schema=null;
      byte[] messageHeader=new byte[5];
      int headerBytesRead=in.read(messageHeader);
      if (headerBytesRead == 5) {
        byte classType=messageHeader[0];
switch (classType) {
case -1:
          keepAliveBreak=true;
        break;
case 1:
      msg=new PlayerRegistrationMessage();
    schema=playerRegSchema;
  break;
case 2:
msg=new NetworkMessageMedium();
schema=mediumMsgSchema;
break;
case 3:
msg=new NetworkMessageLarge();
schema=largeMsgSchema;
break;
default :
msg=new NetworkMessage();
schema=networkMsgSchema;
}
if (!keepAliveBreak) {
b.clear();
b.put(messageHeader,1,4);
b.rewind();
int mSize=b.getInt();
byte[] object=new byte[mSize];
int bytesRead=0;
while (bytesRead != mSize) {
bytesRead+=in.read(object,bytesRead,object.length - bytesRead);
}
byte[] decompressed=QuickLZ.decompress(object);
ProtostuffIOUtil.mergeFrom(decompressed,msg,schema);
processNetworkMessage(msg);
}
}
 else {
if (headerBytesRead == -1) {
LogMaker.errorPrintln(""String_Node_Str"",playerID);
shutdownThread();
}
}
}
 catch (InterruptedIOException e) {
}
catch (IOException e) {
LogMaker.errorPrintln(""String_Node_Str"" + e,playerID);
this.shutdownThread();
}
catch (NullPointerException e) {
LogMaker.errorPrintln(""String_Node_Str"" + e.getMessage(),playerID);
this.shutdownThread();
}
catch (BufferOverflowException e) {
LogMaker.errorPrintln(""String_Node_Str"",playerID);
}
catch (RuntimeException e) {
LogMaker.errorPrintln(""String_Node_Str"" + e,playerID);
}
 finally {
keepAliveBreak=false;
buffer.clear();
b.clear();
}
}
}","@Override public void run(){
  while (!stopOperation) {
    try {
      NetworkMessage msg=null;
      Schema schema=null;
      byte[] messageHeader=new byte[5];
      int headerBytesRead=in.read(messageHeader);
      if (headerBytesRead == 5) {
        byte classType=messageHeader[0];
switch (classType) {
case -1:
          keepAliveBreak=true;
        break;
case 1:
      msg=new PlayerRegistrationMessage();
    schema=playerRegSchema;
  break;
case 2:
msg=new NetworkMessageMedium();
schema=mediumMsgSchema;
break;
case 3:
msg=new NetworkMessageLarge();
schema=largeMsgSchema;
break;
default :
msg=new NetworkMessage();
schema=networkMsgSchema;
}
if (!keepAliveBreak) {
b.clear();
b.put(messageHeader,1,4);
b.rewind();
int mSize=b.getInt();
byte[] object=new byte[mSize];
int bytesRead=0;
while (bytesRead != mSize) {
bytesRead+=in.read(object,bytesRead,object.length - bytesRead);
}
byte[] decompressed=QuickLZ.decompress(object);
ProtostuffIOUtil.mergeFrom(decompressed,msg,schema);
processNetworkMessage(msg);
}
}
 else {
if (headerBytesRead == -1) {
LogMaker.errorPrintln(""String_Node_Str"",playerID);
shutdownThread();
}
}
}
 catch (InterruptedIOException e) {
}
catch (IOException e) {
LogMaker.errorPrintln(""String_Node_Str"" + e,playerID);
this.shutdownThread();
}
catch (NullPointerException e) {
LogMaker.errorPrintln(""String_Node_Str"" + e.getMessage(),playerID);
this.shutdownThread();
}
catch (BufferOverflowException e) {
LogMaker.errorPrintln(""String_Node_Str"",playerID);
}
catch (java.lang.OutOfMemoryError e) {
LogMaker.errorPrintln(""String_Node_Str"",playerID);
}
catch (RuntimeException e) {
LogMaker.errorPrintln(""String_Node_Str"" + e,playerID);
}
 finally {
keepAliveBreak=false;
buffer.clear();
b.clear();
}
}
}",0.9727971614429332
179517,"@Override public void run(){
  while (!stopOperation) {
    try {
      NetworkMessage msg=messageQueue.take();
      Schema schema;
      byte classType;
      if (msg instanceof PlayerRegistrationMessage) {
        schema=playerRegSchema;
        classType=1;
      }
 else       if (msg instanceof NetworkMessageMedium) {
        schema=mediumMsgSchema;
        classType=2;
      }
 else       if (msg instanceof NetworkMessageLarge) {
        schema=largeMsgSchema;
        classType=3;
      }
 else {
        schema=networkMsgSchema;
        classType=0;
      }
      byte[] serializedObject=ProtostuffIOUtil.toByteArray(msg,schema,buffer);
      b.clear();
      b.putInt(serializedObject.length);
      byte[] lengthField=b.array();
      byte[] message=new byte[serializedObject.length + lengthField.length + 1];
      message[0]=classType;
      System.arraycopy(lengthField,0,message,1,lengthField.length);
      System.arraycopy(serializedObject,0,message,lengthField.length + 1,serializedObject.length);
      os.write(message);
      os.flush();
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"" + e);
    }
catch (    InterruptedException e) {
    }
catch (    Exception e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace(System.err);
    }
 finally {
      buffer.clear();
    }
  }
}","@Override public void run(){
  while (!stopOperation) {
    try {
      NetworkMessage msg=messageQueue.take();
      Schema schema;
      byte classType;
      if (msg instanceof PlayerRegistrationMessage) {
        schema=playerRegSchema;
        classType=1;
      }
 else       if (msg instanceof NetworkMessageMedium) {
        schema=mediumMsgSchema;
        classType=2;
      }
 else       if (msg instanceof NetworkMessageLarge) {
        schema=largeMsgSchema;
        classType=3;
      }
 else {
        schema=networkMsgSchema;
        classType=0;
      }
      byte[] serializedObject=ProtostuffIOUtil.toByteArray(msg,schema,buffer);
      b.clear();
      b.putInt(serializedObject.length);
      byte[] lengthField=b.array();
      byte[] message=new byte[serializedObject.length + lengthField.length + 1];
      message[0]=classType;
      System.arraycopy(lengthField,0,message,1,lengthField.length);
      System.arraycopy(serializedObject,0,message,lengthField.length + 1,serializedObject.length);
      if (message.length > 8000) {
        System.out.println(""String_Node_Str"" + message.length + ""String_Node_Str"");
        int bytesWriten=0;
        while (bytesWriten != message.length) {
          if (message.length - bytesWriten > 4096) {
            os.write(message,bytesWriten,4096);
            bytesWriten+=4096;
            System.out.println(""String_Node_Str"" + bytesWriten + ""String_Node_Str""+ message.length+ ""String_Node_Str"");
          }
 else {
            os.write(message,bytesWriten,message.length - bytesWriten);
            bytesWriten+=message.length - bytesWriten;
            System.out.println(""String_Node_Str"" + bytesWriten + ""String_Node_Str""+ message.length+ ""String_Node_Str"");
          }
        }
      }
 else {
        os.write(message);
      }
      os.flush();
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"" + e);
    }
catch (    InterruptedException e) {
    }
catch (    Exception e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace(System.err);
    }
 finally {
      buffer.clear();
    }
  }
}",0.7706951254687049
179518,"public void handleMessage(Message msg){
  tv.append(""String_Node_Str"");
switch (NetworkComBinder.EventType.values()[msg.what]) {
case CONNECTION_ESTABLISHED:
    tv.append(""String_Node_Str"");
  break;
case CONNECTION_LOST:
tv.append(""String_Node_Str"");
break;
case CONNECTION_FAILED:
tv.append(""String_Node_Str"");
break;
case LATENCY_UPDATE_RECEIVED:
tv.append(""String_Node_Str"" + ((NetworkEvent)msg.obj).getMessage() + ""String_Node_Str"");
int latency=((Long)((NetworkEvent)msg.obj).getMessage()).intValue();
if (latency > highest) highest=latency;
if (latency < lowest) lowest=latency;
total+=latency;
if (pingsPerformed == 20) {
tv.append(""String_Node_Str"" + highest + ""String_Node_Str""+ lowest+ ""String_Node_Str""+ (total / 20));
}
break;
default :
tv.append(""String_Node_Str"" + NetworkComBinder.EventType.values()[msg.what] + ""String_Node_Str"");
}
}","public void handleMessage(Message msg){
  tv.append(""String_Node_Str"");
switch (NetworkComBinder.EventType.values()[msg.what]) {
case CONNECTION_ESTABLISHED:
    tv.append(""String_Node_Str"");
  break;
case CONNECTION_LOST:
tv.append(""String_Node_Str"");
break;
case CONNECTION_FAILED:
tv.append(""String_Node_Str"");
break;
case LATENCY_UPDATE_RECEIVED:
tv.append(""String_Node_Str"" + ((NetworkEvent)msg.obj).getMessage() + ""String_Node_Str"");
int latency=((Long)((NetworkEvent)msg.obj).getMessage()).intValue();
if (latency > highest) highest=latency;
if (latency < lowest) lowest=latency;
total+=latency;
if (pingsPerformed == 20) {
tv.append(""String_Node_Str"" + highest + ""String_Node_Str""+ lowest+ ""String_Node_Str""+ (total / 20)+ ""String_Node_Str"");
}
 else if (pingsPerformed == 2) {
NetworkMessageMedium medMessage=new NetworkMessageMedium(""String_Node_Str"");
medMessage.doubles.add(18.5);
medMessage.doubles.add(32.5);
binder.sendGameUpdate(medMessage);
}
 else if (pingsPerformed == 5) {
binder.sendGameStateRequest(new NetworkMessage(""String_Node_Str""));
tv.append(""String_Node_Str"");
}
break;
case GAMESTATE_RECEIVED:
NetworkMessage mMsg=(NetworkMessage)(((NetworkEvent)msg.obj).getMessage());
if (mMsg.getMessage().equals(""String_Node_Str"")) {
tv.append(""String_Node_Str"");
if (((NetworkMessageLarge)mMsg).objectDict.containsKey(""String_Node_Str"")) {
Object pl=((NetworkMessageLarge)mMsg).objectDict.get(""String_Node_Str"");
if (pl instanceof ArrayList<?>) {
ArrayList<LokemonPotion> players=(ArrayList<LokemonPotion>)pl;
tv.append(""String_Node_Str"" + players.size() + ""String_Node_Str"");
}
 else {
tv.append(""String_Node_Str"");
}
}
 else {
tv.append(""String_Node_Str"");
}
}
 else {
tv.append(""String_Node_Str"" + mMsg.getMessage() + ""String_Node_Str"");
}
break;
default :
tv.append(""String_Node_Str"" + NetworkComBinder.EventType.values()[msg.what] + ""String_Node_Str"");
}
}",0.623718887262079
179519,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void run(){
  if (!connected) {
    connectToServer();
  }
  if (connected) {
    isRunning=true;
    registerWithServer(getPlayerRegistrationInformation());
    while (!stopOperation) {
      try {
        NetworkMessage msg=null;
        Schema schema=null;
        byte[] messageHeader=new byte[5];
        int success=in.read(messageHeader);
        if (success == 5) {
          byte classType=messageHeader[0];
switch (classType) {
case -1:
            keepAliveBreak=true;
          break;
case 1:
        msg=new PlayerRegistrationMessage();
      schema=playerRegSchema;
    break;
case 2:
  msg=new NetworkMessageMedium();
schema=mediumMsgSchema;
break;
case 3:
msg=new NetworkMessageLarge();
schema=largeMsgSchema;
break;
default :
msg=new NetworkMessage();
schema=networkMsgSchema;
}
if (!keepAliveBreak) {
b.clear();
b.put(messageHeader,1,4);
b.rewind();
int mSize=b.getInt();
byte[] object=new byte[mSize];
int bytesRead=0;
while (bytesRead != mSize) {
bytesRead+=in.read(object,bytesRead,object.length - bytesRead);
}
ProtostuffIOUtil.mergeFrom(object,msg,schema);
processNetworkMessage(msg);
}
}
 else {
if (success == -1) {
System.err.println(""String_Node_Str"");
shutdownThread();
}
}
}
 catch (InterruptedIOException e) {
}
catch (IOException e) {
System.err.println(""String_Node_Str"" + e);
fireEvent(new NetworkEvent(this,""String_Node_Str"" + e),ConnectionLostListener.class);
this.shutdownThread();
break;
}
catch (NullPointerException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
}
catch (RuntimeException e) {
System.err.println(""String_Node_Str"");
}
 finally {
buffer.clear();
}
}
}
 else {
shutdownThread();
}
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void run(){
  if (!connected) {
    connectToServer();
  }
  if (connected) {
    isRunning=true;
    registerWithServer(getPlayerRegistrationInformation());
    while (!stopOperation) {
      try {
        NetworkMessage msg=null;
        Schema schema=null;
        byte[] messageHeader=new byte[5];
        int success=in.read(messageHeader);
        if (success == 5) {
          byte classType=messageHeader[0];
switch (classType) {
case -1:
            keepAliveBreak=true;
          break;
case 1:
        msg=new PlayerRegistrationMessage();
      schema=playerRegSchema;
    break;
case 2:
  msg=new NetworkMessageMedium();
schema=mediumMsgSchema;
break;
case 3:
msg=new NetworkMessageLarge();
schema=largeMsgSchema;
break;
default :
msg=new NetworkMessage();
schema=networkMsgSchema;
}
if (!keepAliveBreak) {
b.clear();
b.put(messageHeader,1,4);
b.rewind();
int mSize=b.getInt();
byte[] object=new byte[mSize];
int bytesRead=0;
while (bytesRead != mSize) {
bytesRead+=in.read(object,bytesRead,object.length - bytesRead);
}
ProtostuffIOUtil.mergeFrom(object,msg,schema);
processNetworkMessage(msg);
}
}
 else {
if (success == -1) {
System.err.println(""String_Node_Str"");
shutdownThread();
}
}
}
 catch (InterruptedIOException e) {
}
catch (IOException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"" + e);
fireEvent(new NetworkEvent(this,""String_Node_Str"" + e),ConnectionLostListener.class);
this.shutdownThread();
break;
}
catch (NullPointerException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
}
catch (RuntimeException e) {
Log.e(NetworkVariables.TAG,""String_Node_Str"");
}
 finally {
buffer.clear();
}
}
}
 else {
shutdownThread();
}
}",0.8666666666666667
179520,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void run(){
  while (!stopOperation) {
    try {
      NetworkMessage msg=messageQueue.take();
      connectionInUse=true;
      Schema schema;
      byte classType;
      if (msg instanceof KeepAliveMessage) {
        classType=-1;
        byte[] message={classType,0,0,0,0};
        os.write(message);
        keepAliveBreak=true;
      }
      if (msg instanceof PlayerRegistrationMessage) {
        schema=playerRegSchema;
        classType=1;
      }
 else       if (msg instanceof NetworkMessageMedium) {
        schema=mediumMsgSchema;
        classType=2;
      }
 else       if (msg instanceof NetworkMessageLarge) {
        schema=largeMsgSchema;
        classType=3;
      }
 else {
        schema=networkMsgSchema;
        classType=0;
      }
      if (!keepAliveBreak) {
        byte[] serializedObject=ProtostuffIOUtil.toByteArray(msg,schema,buffer);
        b.clear();
        b.putInt(serializedObject.length);
        byte[] lengthField=b.array();
        byte[] message=new byte[serializedObject.length + lengthField.length + 1];
        message[0]=classType;
        System.arraycopy(lengthField,0,message,1,lengthField.length);
        System.arraycopy(serializedObject,0,message,lengthField.length + 1,serializedObject.length);
        Log.d(NetworkVariables.TAG,""String_Node_Str"" + serializedObject.length);
        os.write(message);
      }
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"" + e);
    }
catch (    InterruptedException e) {
    }
catch (    Exception e) {
      Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
    }
 finally {
      connectionInUse=false;
      keepAliveBreak=false;
      buffer.clear();
      b.clear();
    }
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void run(){
  while (!stopOperation) {
    try {
      NetworkMessage msg=messageQueue.take();
      connectionInUse=true;
      Schema schema;
      byte classType;
      if (msg instanceof KeepAliveMessage) {
        classType=-1;
        byte[] message={classType,0,0,0,0};
        os.write(message);
        keepAliveBreak=true;
      }
      if (msg instanceof PlayerRegistrationMessage) {
        schema=playerRegSchema;
        classType=1;
      }
 else       if (msg instanceof NetworkMessageMedium) {
        schema=mediumMsgSchema;
        classType=2;
      }
 else       if (msg instanceof NetworkMessageLarge) {
        schema=largeMsgSchema;
        classType=3;
      }
 else {
        schema=networkMsgSchema;
        classType=0;
      }
      if (!keepAliveBreak) {
        byte[] serializedObject=ProtostuffIOUtil.toByteArray(msg,schema,buffer);
        b.clear();
        b.putInt(serializedObject.length);
        byte[] lengthField=b.array();
        byte[] message=new byte[serializedObject.length + lengthField.length + 1];
        message[0]=classType;
        System.arraycopy(lengthField,0,message,1,lengthField.length);
        System.arraycopy(serializedObject,0,message,lengthField.length + 1,serializedObject.length);
        os.write(message);
      }
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"" + e);
    }
catch (    InterruptedException e) {
    }
catch (    Exception e) {
      Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
    }
 finally {
      connectionInUse=false;
      keepAliveBreak=false;
      buffer.clear();
      b.clear();
    }
  }
}",0.8011510791366907
179521,"public LokemonPlayer(){
}","public LokemonPlayer(){
  playerID=-1;
  playerName=""String_Node_Str"";
  busy=false;
  avatar=0;
  position=new Location();
}",0.3333333333333333
179522,"public LokemonPlayer(){
}","public LokemonPlayer(){
  playerID=-1;
  playerName=""String_Node_Str"";
  busy=false;
  avatar=0;
  position=new Location();
}",0.3333333333333333
179523,"public LokemonPotion(){
}","public LokemonPotion(){
  type=PotionType.HEALTH;
  id=-1;
  position=new Location();
}",0.4464285714285714
179524,"public void onServiceConnected(ComponentName name,IBinder service){
  binder=(NetworkComBinder)service;
  networkBound=true;
  tv.append(""String_Node_Str"");
  binder.registerMessenger(eventMessenger);
  if (!binder.isConnectedToServer())   binder.ConnectToServer();
  timer.schedule(new TimerTask(){
    @Override public void run(){
      if (pingsPerformed < 20) {
        if (networkBound)         binder.requestLatency();
        pingsPerformed++;
      }
 else {
        this.cancel();
      }
    }
  }
,recurranceDelay * 1000,recurranceDelay * 200);
}","public void onServiceConnected(ComponentName name,IBinder service){
  binder=(NetworkComBinder)service;
  networkBound=true;
  tv.append(""String_Node_Str"");
  binder.registerMessenger(eventMessenger);
  if (!binder.isConnectedToServer())   binder.ConnectToServer();
  timer.schedule(new TimerTask(){
    @Override public void run(){
      if (pingsPerformed < 20) {
        if (networkBound)         binder.requestLatency();
        pingsPerformed++;
      }
 else {
        this.cancel();
      }
    }
  }
,recurranceDelay * 1000,recurranceDelay * 1000);
}",0.9973094170403588
179525,"public void handleMessage(Message msg){
  tv.append(""String_Node_Str"");
switch (NetworkComBinder.EventType.values()[msg.what]) {
case CONNECTION_ESTABLISHED:
    tv.append(""String_Node_Str"");
  break;
case CONNECTION_LOST:
tv.append(""String_Node_Str"");
timer.schedule(new TimerTask(){
@Override public void run(){
  binder.ConnectToServer();
}
}
,3000);
break;
case CONNECTION_FAILED:
tv.append(""String_Node_Str"");
break;
case LATENCY_UPDATE_RECEIVED:
tv.append(""String_Node_Str"" + ((NetworkEvent)msg.obj).getMessage() + ""String_Node_Str"");
int latency=((Long)((NetworkEvent)msg.obj).getMessage()).intValue();
if (latency > highest) highest=latency;
if (latency < lowest) lowest=latency;
total+=latency;
if (pingsPerformed == 20) {
tv.append(""String_Node_Str"" + highest + ""String_Node_Str""+ lowest+ ""String_Node_Str""+ (total / 20)+ ""String_Node_Str"");
}
 else if (pingsPerformed == 2) {
NetworkMessageMedium medMessage=new NetworkMessageMedium(""String_Node_Str"");
medMessage.doubles.add(18.5);
medMessage.doubles.add(32.5);
binder.sendGameUpdate(medMessage);
NetworkMessage busyMessage=new NetworkMessage(""String_Node_Str"");
binder.sendGameUpdate(busyMessage);
}
 else if (pingsPerformed == 5) {
binder.sendGameStateRequest(new NetworkMessage(""String_Node_Str""));
tv.append(""String_Node_Str"");
}
break;
case GAMESTATE_RECEIVED:
NetworkMessage mMsg=(NetworkMessage)(((NetworkEvent)msg.obj).getMessage());
if (mMsg.getMessage().equals(""String_Node_Str"")) {
tv.append(""String_Node_Str"");
if (((NetworkMessageLarge)mMsg).objectDict.containsKey(""String_Node_Str"")) {
Object pl=((NetworkMessageLarge)mMsg).objectDict.get(""String_Node_Str"");
if (pl instanceof ArrayList<?>) {
ArrayList<LokemonPotion> players=(ArrayList<LokemonPotion>)pl;
tv.append(""String_Node_Str"" + players.size() + ""String_Node_Str"");
}
 else {
tv.append(""String_Node_Str"");
}
}
 else {
tv.append(""String_Node_Str"");
}
}
 else if (mMsg.getMessage().equals(""String_Node_Str"")) {
tv.append(""String_Node_Str"");
if (((NetworkMessageLarge)mMsg).objectDict.containsKey(""String_Node_Str"")) {
Object pl=((NetworkMessageLarge)mMsg).objectDict.get(""String_Node_Str"");
if (pl instanceof ArrayList<?>) {
ArrayList<LokemonPlayer> players=(ArrayList<LokemonPlayer>)pl;
tv.append(""String_Node_Str"" + players.size() + ""String_Node_Str"");
if (players.size() > 0) {
tv.append(""String_Node_Str"" + players.get(0).getPlayerID() + ""String_Node_Str"");
tv.append(""String_Node_Str"" + players.get(0).getBusy() + ""String_Node_Str"");
tv.append(""String_Node_Str"" + players.get(0).getAvatar() + ""String_Node_Str""+ players.get(0).getPlayerName()+ ""String_Node_Str"");
}
}
 else {
tv.append(""String_Node_Str"");
}
}
 else {
tv.append(""String_Node_Str"");
}
}
 else {
tv.append(""String_Node_Str"" + mMsg.getMessage() + ""String_Node_Str"");
}
break;
case PLAYER_REGISTERED:
tv.append(""String_Node_Str"");
break;
default :
tv.append(""String_Node_Str"" + NetworkComBinder.EventType.values()[msg.what] + ""String_Node_Str"");
}
}","public void handleMessage(Message msg){
  tv.append(""String_Node_Str"");
switch (NetworkComBinder.EventType.values()[msg.what]) {
case CONNECTION_ESTABLISHED:
    tv.append(""String_Node_Str"");
  break;
case CONNECTION_LOST:
tv.append(""String_Node_Str"");
timer.schedule(new TimerTask(){
@Override public void run(){
  binder.ConnectToServer();
}
}
,3000);
break;
case CONNECTION_FAILED:
tv.append(""String_Node_Str"");
break;
case LATENCY_UPDATE_RECEIVED:
tv.append(""String_Node_Str"" + ((NetworkEvent)msg.obj).getMessage() + ""String_Node_Str"");
int latency=((Long)((NetworkEvent)msg.obj).getMessage()).intValue();
if (latency > highest) highest=latency;
if (latency < lowest) lowest=latency;
total+=latency;
if (pingsPerformed == 20) {
tv.append(""String_Node_Str"" + highest + ""String_Node_Str""+ lowest+ ""String_Node_Str""+ (total / 20)+ ""String_Node_Str"");
}
 else if (pingsPerformed == 2) {
NetworkMessageMedium medMessage=new NetworkMessageMedium(""String_Node_Str"");
medMessage.doubles.add(18.5);
medMessage.doubles.add(32.5);
binder.sendGameUpdate(medMessage);
NetworkMessage busyMessage=new NetworkMessage(""String_Node_Str"");
binder.sendGameUpdate(busyMessage);
tv.append(""String_Node_Str"");
}
 else if (pingsPerformed == 5) {
binder.sendGameStateRequest(new NetworkMessage(""String_Node_Str""));
tv.append(""String_Node_Str"");
}
 else if (pingsPerformed == 15) {
binder.sendGameStateRequest(new NetworkMessage(""String_Node_Str""));
tv.append(""String_Node_Str"");
}
break;
case GAMESTATE_RECEIVED:
NetworkMessage mMsg=(NetworkMessage)(((NetworkEvent)msg.obj).getMessage());
if (mMsg.getMessage().equals(""String_Node_Str"")) {
tv.append(""String_Node_Str"");
if (((NetworkMessageLarge)mMsg).objectDict.containsKey(""String_Node_Str"")) {
Object pl=((NetworkMessageLarge)mMsg).objectDict.get(""String_Node_Str"");
if (pl instanceof ArrayList<?>) {
ArrayList<LokemonPotion> players=(ArrayList<LokemonPotion>)pl;
tv.append(""String_Node_Str"" + players.size() + ""String_Node_Str"");
tv.append(""String_Node_Str"");
for (LokemonPotion pot : players) {
tv.append(""String_Node_Str"" + pot.getType());
}
tv.append(""String_Node_Str"");
}
 else {
tv.append(""String_Node_Str"");
}
}
 else {
tv.append(""String_Node_Str"");
}
}
 else if (mMsg.getMessage().equals(""String_Node_Str"")) {
tv.append(""String_Node_Str"");
if (((NetworkMessageLarge)mMsg).objectDict.containsKey(""String_Node_Str"")) {
Object pl=((NetworkMessageLarge)mMsg).objectDict.get(""String_Node_Str"");
if (pl instanceof ArrayList<?>) {
ArrayList<LokemonPlayer> players=(ArrayList<LokemonPlayer>)pl;
tv.append(""String_Node_Str"" + players.size() + ""String_Node_Str"");
if (players.size() > 0) {
tv.append(""String_Node_Str"" + players.get(0).getPlayerID() + ""String_Node_Str"");
tv.append(""String_Node_Str"" + players.get(0).getBusy() + ""String_Node_Str"");
tv.append(""String_Node_Str"" + players.get(0).getAvatar() + ""String_Node_Str""+ players.get(0).getPlayerName()+ ""String_Node_Str"");
}
}
 else {
tv.append(""String_Node_Str"");
}
}
 else {
tv.append(""String_Node_Str"");
}
}
 else {
tv.append(""String_Node_Str"" + mMsg.getMessage() + ""String_Node_Str"");
}
break;
case PLAYER_REGISTERED:
tv.append(""String_Node_Str"");
break;
default :
tv.append(""String_Node_Str"" + NetworkComBinder.EventType.values()[msg.what] + ""String_Node_Str"");
}
}",0.9503386004514672
179526,"public void EventOccured(NetworkEvent e){
  System.out.println(""String_Node_Str"" + ((NetworkMessage)e.getMessage()).getMessage());
}","public void EventOccured(NetworkEvent e){
  System.out.println(""String_Node_Str"" + ((NetworkMessage)e.getMessage()).getMessage());
  ServerVariables.playerThreadMap.get(player.getPlayerID()).shutdownThread();
  LokemonServerVariables.playerList.remove(player);
}",0.6700507614213198
179527,"@Override public void run(){
  while (!stopOperation) {
    try {
      if (requestAccumulationBuffer.size() != 0) {
        for (        ItemPickupRequest req : requestAccumulationBuffer) {
          if (req.shouldBeRemoved == false) {
            if (LokemonServerVariables.itemMap.containsKey(req.itemId)) {
              if (System.currentTimeMillis() - req.requestTimeStamp > LokemonServerVariables.pickupLatency) {
                boolean earliestRequest=true;
                for (int i=0; i < requestAccumulationBuffer.size(); i++) {
                  if (requestAccumulationBuffer.get(i) != req) {
                    if (requestAccumulationBuffer.get(i).itemId == req.itemId) {
                      if (req.requestTimeStamp > requestAccumulationBuffer.get(i).requestTimeStamp) {
                        earliestRequest=false;
                        break;
                      }
                    }
                  }
                }
                if (earliestRequest) {
                  req.sendAccept();
                  LokemonServerVariables.itemMap.remove(req.itemId);
                }
              }
            }
 else {
              req.sendReject();
            }
          }
        }
      }
      for (int i=requestAccumulationBuffer.size() - 1; i >= 0; i--) {
        if (requestAccumulationBuffer.get(i).shouldBeRemoved) {
          requestAccumulationBuffer.remove(i);
        }
      }
      if (System.currentTimeMillis() - itemSpawnTime > LokemonServerVariables.itemSpawnTimer) {
        itemSpawnTime=System.currentTimeMillis();
        if (LokemonServerVariables.itemMap.values().size() < LokemonServerVariables.maxItemsIngame) {
          if (LokemonServerVariables.playerList.size() >= 1) {
            for (            LokemonPlayer pl : LokemonServerVariables.playerList) {
              if (pl.getPosition() != null) {
                Location center=pl.getPosition();
                double randomDist=(Math.random() * (LokemonServerVariables.itemSpawnRangeMax - LokemonServerVariables.itemSpawnRangeMin)) + LokemonServerVariables.itemSpawnRangeMin;
                double randomAngle=Math.random() * 360;
                double x=center.getX() + (randomDist * Math.cos(randomAngle) / LokemonDaemonThread.DEGREE_METER_HACK);
                double y=center.getY() + (randomDist * Math.sin(randomAngle) / LokemonDaemonThread.DEGREE_METER_HACK);
                LokemonPotion pot=new LokemonPotion(LokemonPotion.PotionType.values()[((int)Math.random() * LokemonPotion.PotionType.values().length)],itemIDCounter);
                pot.setPosition(new Location(x,y));
                itemIDCounter++;
                LokemonServerVariables.itemMap.put(pot.getId(),pot);
              }
            }
          }
        }
      }
      Thread.sleep(10);
    }
 catch (    InterruptedException e) {
    }
catch (    Exception e) {
      System.err.println(""String_Node_Str"" + e);
    }
  }
}","@Override public void run(){
  while (!stopOperation) {
    try {
      if (requestAccumulationBuffer.size() != 0) {
        for (        ItemPickupRequest req : requestAccumulationBuffer) {
          if (req.shouldBeRemoved == false) {
            if (LokemonServerVariables.itemMap.containsKey(req.itemId)) {
              if (System.currentTimeMillis() - req.requestTimeStamp > LokemonServerVariables.pickupLatency) {
                boolean earliestRequest=true;
                for (int i=0; i < requestAccumulationBuffer.size(); i++) {
                  if (requestAccumulationBuffer.get(i) != req) {
                    if (requestAccumulationBuffer.get(i).itemId == req.itemId) {
                      if (req.requestTimeStamp > requestAccumulationBuffer.get(i).requestTimeStamp) {
                        earliestRequest=false;
                        break;
                      }
                    }
                  }
                }
                if (earliestRequest) {
                  req.sendAccept();
                  LokemonServerVariables.itemMap.remove(req.itemId);
                }
              }
            }
 else {
              req.sendReject();
            }
          }
        }
      }
      for (int i=requestAccumulationBuffer.size() - 1; i >= 0; i--) {
        if (requestAccumulationBuffer.get(i).shouldBeRemoved) {
          requestAccumulationBuffer.remove(i);
        }
      }
      if (System.currentTimeMillis() - itemSpawnTime > LokemonServerVariables.itemSpawnTimer) {
        itemSpawnTime=System.currentTimeMillis();
        if (LokemonServerVariables.itemMap.values().size() < LokemonServerVariables.maxItemsIngame) {
          if (LokemonServerVariables.playerList.size() >= 1) {
            for (            LokemonPlayer pl : LokemonServerVariables.playerList) {
              if (pl.getPosition() != null) {
                Location center=pl.getPosition();
                double randomDist=(Math.random() * (LokemonServerVariables.itemSpawnRangeMax - LokemonServerVariables.itemSpawnRangeMin)) + LokemonServerVariables.itemSpawnRangeMin;
                double randomAngle=Math.random() * 360;
                double x=center.getX() + (randomDist * Math.cos(randomAngle) / LokemonDaemonThread.DEGREE_METER_HACK);
                double y=center.getY() + (randomDist * Math.sin(randomAngle) / LokemonDaemonThread.DEGREE_METER_HACK);
                int type=(int)(Math.random() * LokemonPotion.PotionType.values().length);
                LokemonPotion pot=new LokemonPotion(LokemonPotion.PotionType.values()[type],itemIDCounter);
                pot.setPosition(new Location(x,y));
                itemIDCounter++;
                LokemonServerVariables.itemMap.put(pot.getId(),pot);
              }
            }
          }
        }
      }
      Thread.sleep(10);
    }
 catch (    InterruptedException e) {
    }
catch (    Exception e) {
      System.err.println(""String_Node_Str"" + e);
    }
  }
}",0.9730645434524818
179528,"@Override public void run(){
  while (!stopOperation) {
    try {
      NetworkMessage msg=null;
      Schema schema=null;
      byte[] messageHeader=new byte[5];
      int success=in.read(messageHeader);
      if (success == 5) {
        byte classType=messageHeader[0];
switch (classType) {
case -1:
          keepAliveBreak=true;
        break;
case 1:
      msg=new PlayerRegistrationMessage();
    schema=playerRegSchema;
  break;
case 2:
msg=new NetworkMessageMedium();
schema=mediumMsgSchema;
break;
case 3:
msg=new NetworkMessageLarge();
schema=largeMsgSchema;
break;
default :
msg=new NetworkMessage();
schema=networkMsgSchema;
}
if (!keepAliveBreak) {
b.clear();
b.put(messageHeader,1,4);
b.rewind();
int mSize=b.getInt();
byte[] object=new byte[mSize];
int bytesRead=0;
while (bytesRead != mSize) {
bytesRead+=in.read(object,bytesRead,object.length - bytesRead);
}
ProtostuffIOUtil.mergeFrom(object,msg,schema);
processNetworkMessage(msg);
}
}
 else {
if (success == -1) {
System.err.println(""String_Node_Str"");
fireEvent(new NetworkEvent(this,""String_Node_Str"" + e),ConnectionLostListener.class);
shutdownThread();
}
}
}
 catch (InterruptedIOException e) {
}
catch (IOException e) {
System.err.println(""String_Node_Str"" + e);
fireEvent(new NetworkEvent(this,""String_Node_Str"" + e),ConnectionLostListener.class);
this.shutdownThread();
break;
}
catch (NullPointerException e) {
System.err.println(""String_Node_Str"" + e.getMessage());
fireEvent(new NetworkEvent(this,""String_Node_Str"" + e),ConnectionLostListener.class);
stopOperation=true;
}
catch (RuntimeException e) {
System.err.println(""String_Node_Str"" + e);
}
 finally {
keepAliveBreak=false;
buffer.clear();
b.clear();
}
}
}","@Override public void run(){
  while (!stopOperation) {
    try {
      NetworkMessage msg=null;
      Schema schema=null;
      byte[] messageHeader=new byte[5];
      int success=in.read(messageHeader);
      if (success == 5) {
        byte classType=messageHeader[0];
switch (classType) {
case -1:
          keepAliveBreak=true;
        break;
case 1:
      msg=new PlayerRegistrationMessage();
    schema=playerRegSchema;
  break;
case 2:
msg=new NetworkMessageMedium();
schema=mediumMsgSchema;
break;
case 3:
msg=new NetworkMessageLarge();
schema=largeMsgSchema;
break;
default :
msg=new NetworkMessage();
schema=networkMsgSchema;
}
if (!keepAliveBreak) {
b.clear();
b.put(messageHeader,1,4);
b.rewind();
int mSize=b.getInt();
byte[] object=new byte[mSize];
int bytesRead=0;
while (bytesRead != mSize) {
bytesRead+=in.read(object,bytesRead,object.length - bytesRead);
}
ProtostuffIOUtil.mergeFrom(object,msg,schema);
processNetworkMessage(msg);
}
}
 else {
if (success == -1) {
System.err.println(""String_Node_Str"");
fireEvent(new NetworkEvent(this,""String_Node_Str""),ConnectionLostListener.class);
shutdownThread();
}
}
}
 catch (InterruptedIOException e) {
}
catch (IOException e) {
System.err.println(""String_Node_Str"" + e);
fireEvent(new NetworkEvent(this,""String_Node_Str"" + e),ConnectionLostListener.class);
this.shutdownThread();
break;
}
catch (NullPointerException e) {
System.err.println(""String_Node_Str"" + e.getMessage());
fireEvent(new NetworkEvent(this,""String_Node_Str"" + e),ConnectionLostListener.class);
stopOperation=true;
}
catch (RuntimeException e) {
System.err.println(""String_Node_Str"" + e);
}
 finally {
keepAliveBreak=false;
buffer.clear();
b.clear();
}
}
}",0.9988165680473372
179529,"public void handleMessage(Message msg){
  tv.append(""String_Node_Str"");
switch (NetworkComBinder.EventType.values()[msg.what]) {
case CONNECTION_ESTABLISHED:
    tv.append(""String_Node_Str"");
  break;
case CONNECTION_LOST:
tv.append(""String_Node_Str"");
break;
case CONNECTION_FAILED:
tv.append(""String_Node_Str"");
case LATENCY_UPDATE_RECEIVED:
tv.append(""String_Node_Str"" + ((NetworkEvent)msg.obj).getMessage() + ""String_Node_Str"");
int latency=((Long)((NetworkEvent)msg.obj).getMessage()).intValue();
if (latency > highest) highest=latency;
if (latency < lowest) lowest=latency;
total+=latency;
if (pingsPerformed == 20) {
tv.append(""String_Node_Str"" + highest + ""String_Node_Str""+ lowest+ ""String_Node_Str""+ (total / 20));
}
break;
default :
tv.append(""String_Node_Str"" + NetworkComBinder.EventType.values()[msg.what] + ""String_Node_Str"");
}
}","public void handleMessage(Message msg){
  tv.append(""String_Node_Str"");
switch (NetworkComBinder.EventType.values()[msg.what]) {
case CONNECTION_ESTABLISHED:
    tv.append(""String_Node_Str"");
  break;
case CONNECTION_LOST:
tv.append(""String_Node_Str"");
break;
case CONNECTION_FAILED:
tv.append(""String_Node_Str"");
break;
case LATENCY_UPDATE_RECEIVED:
tv.append(""String_Node_Str"" + ((NetworkEvent)msg.obj).getMessage() + ""String_Node_Str"");
int latency=((Long)((NetworkEvent)msg.obj).getMessage()).intValue();
if (latency > highest) highest=latency;
if (latency < lowest) lowest=latency;
total+=latency;
if (pingsPerformed == 20) {
tv.append(""String_Node_Str"" + highest + ""String_Node_Str""+ lowest+ ""String_Node_Str""+ (total / 20));
}
break;
default :
tv.append(""String_Node_Str"" + NetworkComBinder.EventType.values()[msg.what] + ""String_Node_Str"");
}
}",0.995875073659399
179530,"@Override public void run(){
  while (!stopOperation) {
    try {
      if (LokemonServerVariables.playerList.size() >= 1) {
        for (        LokemonPlayer pl : LokemonServerVariables.playerList) {
          Location center=pl.getPosition();
          double randomDist=(Math.random() * (LokemonServerVariables.itemSpawnRangeMax - LokemonServerVariables.itemSpawnRangeMin)) + LokemonServerVariables.itemSpawnRangeMin;
          double randomAngle=Math.random() * 360;
          double x=center.getX() + randomDist * Math.cos(randomAngle);
          double y=center.getY() + randomDist * Math.sin(randomAngle);
          LokemonPotion pot=new LokemonPotion(LokemonPotion.PotionType.values()[((int)Math.random() * LokemonPotion.PotionType.values().length)]);
          pot.setPosition(new Location(x,y));
          LokemonServerVariables.itemList.add(pot);
        }
      }
      Thread.sleep(LokemonServerVariables.itemSpawnTimer);
    }
 catch (    InterruptedException e) {
    }
  }
}","@Override public void run(){
  while (!stopOperation) {
    try {
      if (LokemonServerVariables.playerList.size() >= 1) {
        for (        LokemonPlayer pl : LokemonServerVariables.playerList) {
          if (pl.getPosition() != null) {
            Location center=pl.getPosition();
            double randomDist=(Math.random() * (LokemonServerVariables.itemSpawnRangeMax - LokemonServerVariables.itemSpawnRangeMin)) + LokemonServerVariables.itemSpawnRangeMin;
            double randomAngle=Math.random() * 360;
            double x=center.getX() + randomDist * Math.cos(randomAngle);
            double y=center.getY() + randomDist * Math.sin(randomAngle);
            LokemonPotion pot=new LokemonPotion(LokemonPotion.PotionType.values()[((int)Math.random() * LokemonPotion.PotionType.values().length)]);
            pot.setPosition(new Location(x,y));
            LokemonServerVariables.itemList.add(pot);
          }
        }
      }
      Thread.sleep(LokemonServerVariables.itemSpawnTimer);
    }
 catch (    InterruptedException e) {
    }
catch (    Exception e) {
      System.err.println(""String_Node_Str"" + e);
    }
  }
}",0.9151429910923582
179531,"private void processNetworkMessage(NetworkMessage message){
  if (message instanceof PlayerRegistrationMessage) {
    playerId=((PlayerRegistrationMessage)message).playerID;
    Log.i(NetworkVariables.TAG,""String_Node_Str"" + playerId + ""String_Node_Str"");
    requestNetworkTimeSync();
  }
 else   if (message instanceof NetworkMessage) {
    NetworkMessage msg=(NetworkMessage)message;
switch (msg.getMessageType()) {
case UPDATE_MESSAGE:
      fireEvent(new NetworkEvent(this,msg),UpdateReceivedListener.class);
    break;
case REQUEST_MESSAGE:
  fireEvent(new NetworkEvent(this,msg),RequestReceivedListener.class);
break;
case INITIAL_GAME_STATE_MESSAGE:
processInitialGameState(msg);
break;
case PARTIAL_GAMESTATE_UPDATE_MESSAGE:
fireEvent(new NetworkEvent(this,msg),PartialGamestateReceivedListener.class);
break;
case GAMESTATE_UPDATE_MESSAGE:
fireEvent(new NetworkEvent(this,msg),GamestateReceivedListener.class);
break;
case GAMESTATE_REQUEST_MESSAGE:
break;
case TERMINATION_REQUEST_MESSAGE:
break;
case PEER_LIST_MESSAGE:
handlePeerListUpdate(msg);
break;
case PEER_LIST_REQUEST_MESSAGE:
break;
case LATENCY_REQUEST_MESSAGE:
NetworkMessage latMsg=new NetworkMessage(""String_Node_Str"");
latMsg.setMessageType(NetworkMessage.MessageType.LATENCY_RESPONSE_MESSAGE);
writeOut(latMsg);
break;
case LATENCY_RESPONSE_MESSAGE:
awaitingLatencyResponse=false;
latencyEndTime=System.currentTimeMillis();
if (latencyStartTime < latencyEndTime) {
fireEvent(new NetworkEvent(this,(latencyEndTime - latencyStartTime)),LatencyUpdateListener.class);
}
break;
case DIRECT_COMMUNICATION_MESSAGE:
if (msg instanceof NetworkMessageLarge) {
int listSize=((NetworkMessageLarge)msg).integers.size();
int sourcePlayerId=((NetworkMessageLarge)msg).integers.get(listSize - 1);
((NetworkMessageLarge)msg).integers.remove(listSize - 1);
((NetworkMessageLarge)msg).integers.remove(listSize - 2);
fireEvent(new DirectCommunicationEvent(this,msg,sourcePlayerId),DirectMessageListener.class);
}
 else if (msg instanceof NetworkMessageMedium) {
int listSize=((NetworkMessageMedium)msg).integers.size();
int sourcePlayerId=((NetworkMessageMedium)msg).integers.get(listSize - 1);
((NetworkMessageMedium)msg).integers.remove(listSize - 1);
((NetworkMessageMedium)msg).integers.remove(listSize - 2);
fireEvent(new DirectCommunicationEvent(this,msg,sourcePlayerId),DirectMessageListener.class);
}
 else {
Log.w(NetworkVariables.TAG,""String_Node_Str"");
}
break;
case TIME_REQUEST:
break;
case TIME_RESPONSE:
if (timeSyncReceived == 0 && timeSyncInProgress) {
long sentTime=Long.parseLong(msg.getMessage());
long currentTime=gameClock.currentTimeMillis();
long latency=(currentTime - sentTime) / 2;
long serverTime=msg.getTimeStamp();
long clockDelta=(currentTime - latency) - serverTime;
Log.i(NetworkVariables.TAG,""String_Node_Str"" + clockDelta);
gameClock.setTimeDelta(clockDelta);
timeSyncReceived++;
}
 else if (timeSyncReceived <= 5 && timeSyncInProgress) {
long sentTime=Long.parseLong(msg.getMessage());
long currentTime=gameClock.currentTimeMillis();
long latency=(currentTime - sentTime) / 2;
long serverTime=msg.getTimeStamp();
long clockDelta=(currentTime - latency) - serverTime;
gameClock.accumulateSyncPacket(gameClock.new TimeSyncPacket(latency,clockDelta));
timeSyncReceived++;
if (timeSyncReceived == 5) {
gameClock.convergeSyncPackets();
}
}
 else {
timeSyncReceived=0;
timeSyncInProgress=false;
syncTimer.cancel();
}
break;
default :
fireEvent(new NetworkEvent(this,msg),UnknownMessageTypeReceivedListener.class);
break;
}
}
}","private void processNetworkMessage(NetworkMessage message){
  if (message instanceof PlayerRegistrationMessage) {
    playerId=((PlayerRegistrationMessage)message).playerID;
    Log.i(NetworkVariables.TAG,""String_Node_Str"" + playerId + ""String_Node_Str"");
    requestNetworkTimeSync();
  }
 else   if (message instanceof NetworkMessage) {
    NetworkMessage msg=(NetworkMessage)message;
switch (msg.getMessageType()) {
case UPDATE_MESSAGE:
      fireEvent(new NetworkEvent(this,msg),UpdateReceivedListener.class);
    break;
case REQUEST_MESSAGE:
  fireEvent(new NetworkEvent(this,msg),RequestReceivedListener.class);
break;
case INITIAL_GAME_STATE_MESSAGE:
processInitialGameState(msg);
break;
case PARTIAL_GAMESTATE_UPDATE_MESSAGE:
fireEvent(new NetworkEvent(this,msg),PartialGamestateReceivedListener.class);
break;
case GAMESTATE_UPDATE_MESSAGE:
fireEvent(new NetworkEvent(this,msg),GamestateReceivedListener.class);
break;
case GAMESTATE_REQUEST_MESSAGE:
break;
case TERMINATION_REQUEST_MESSAGE:
break;
case PEER_LIST_MESSAGE:
handlePeerListUpdate(msg);
break;
case PEER_LIST_REQUEST_MESSAGE:
break;
case LATENCY_REQUEST_MESSAGE:
NetworkMessage latMsg=new NetworkMessage(""String_Node_Str"");
latMsg.setMessageType(NetworkMessage.MessageType.LATENCY_RESPONSE_MESSAGE);
writeOut(latMsg);
break;
case LATENCY_RESPONSE_MESSAGE:
awaitingLatencyResponse=false;
latencyEndTime=System.currentTimeMillis();
if (latencyStartTime < latencyEndTime) {
fireEvent(new NetworkEvent(this,(latencyEndTime - latencyStartTime)),LatencyUpdateListener.class);
}
break;
case DIRECT_COMMUNICATION_MESSAGE:
if (msg instanceof NetworkMessageLarge) {
int listSize=((NetworkMessageLarge)msg).integers.size();
int sourcePlayerId=((NetworkMessageLarge)msg).integers.get(listSize - 1);
((NetworkMessageLarge)msg).integers.remove(listSize - 1);
((NetworkMessageLarge)msg).integers.remove(listSize - 2);
fireEvent(new DirectCommunicationEvent(this,msg,sourcePlayerId),DirectMessageListener.class);
}
 else if (msg instanceof NetworkMessageMedium) {
int listSize=((NetworkMessageMedium)msg).integers.size();
int sourcePlayerId=((NetworkMessageMedium)msg).integers.get(listSize - 1);
((NetworkMessageMedium)msg).integers.remove(listSize - 1);
((NetworkMessageMedium)msg).integers.remove(listSize - 2);
fireEvent(new DirectCommunicationEvent(this,msg,sourcePlayerId),DirectMessageListener.class);
}
 else {
Log.w(NetworkVariables.TAG,""String_Node_Str"");
}
break;
case TIME_REQUEST:
break;
case TIME_RESPONSE:
if (timeSyncReceived == 0 && timeSyncInProgress) {
long sentTime=Long.parseLong(msg.getMessage());
long currentTime=gameClock.currentTimeMillis();
long latency=(currentTime - sentTime) / 2;
long serverTime=msg.getTimeStamp();
long clockDelta=(currentTime - latency) - serverTime;
Log.i(NetworkVariables.TAG,""String_Node_Str"" + clockDelta);
gameClock.setTimeDelta(clockDelta);
timeSyncReceived++;
}
 else if (timeSyncReceived <= 5 && timeSyncInProgress) {
long sentTime=Long.parseLong(msg.getMessage());
long currentTime=gameClock.currentTimeMillis();
long latency=(currentTime - sentTime) / 2;
long serverTime=msg.getTimeStamp();
long clockDelta=(currentTime - latency) - serverTime;
gameClock.accumulateSyncPacket(gameClock.new TimeSyncPacket(latency,clockDelta));
if (timeSyncReceived == 5) {
gameClock.convergeSyncPackets();
}
timeSyncReceived++;
}
 else {
timeSyncReceived=0;
timeSyncInProgress=false;
syncTimer.cancel();
}
break;
default :
fireEvent(new NetworkEvent(this,msg),UnknownMessageTypeReceivedListener.class);
break;
}
}
}",0.9817871371656232
179532,"/** 
 * Used to start a time synchronisation protocal with the server. This is  automatically run upon first contact with the server, but can be manually  run again if the network latency has changed drastically (IE change from wifi to EDGE). If a time sync is already in progress, calls to this method will be ignored.
 */
public void requestNetworkTimeSync(){
  if (!timeSyncInProgress) {
    timeSyncInProgress=true;
    timeSyncReceived=0;
    NetworkMessage msg=new NetworkMessage(""String_Node_Str"");
    msg.setMessageType(NetworkMessage.MessageType.TIME_REQUEST);
    writeOut(msg);
    syncTimer.schedule(new TimerTask(){
      @Override public void run(){
        NetworkMessage msg=new NetworkMessage(""String_Node_Str"");
        msg.setMessageType(NetworkMessage.MessageType.TIME_REQUEST);
        writeOut(msg);
      }
    }
,2000,2000);
  }
}","/** 
 * Used to start a time synchronisation protocal with the server. This is  automatically run upon first contact with the server, but can be manually  run again if the network latency has changed drastically (IE change from wifi to EDGE). If a time sync is already in progress, calls to this method will be ignored.
 */
public void requestNetworkTimeSync(){
  if (!timeSyncInProgress) {
    timeSyncInProgress=true;
    timeSyncReceived=0;
    NetworkMessage msg=new NetworkMessage(""String_Node_Str"");
    msg.setMessageType(NetworkMessage.MessageType.TIME_REQUEST);
    writeOut(msg);
    syncTimer.schedule(new TimerTask(){
      @Override public void run(){
        NetworkMessage msg=new NetworkMessage(""String_Node_Str"");
        msg.setMessageType(NetworkMessage.MessageType.TIME_REQUEST);
        writeOut(msg);
      }
    }
,500,2000);
  }
}",0.9982445874780572
179533,"/** 
 * Method used to remove outliers from accumulated sync packets, and average the time delta. Will then automatically add the time delta to current time delta to get an accurate estimate  of the server time.
 */
public void convergeSyncPackets(){
  TimeSyncPacket[] workList=(GameClock.TimeSyncPacket[])accumulationList.toArray();
  Arrays.sort(workList);
  long medianLatency=workList[3].latency;
  Log.i(NetworkVariables.TAG,""String_Node_Str"" + medianLatency);
  long meanLatency=0;
  for (  TimeSyncPacket pct : workList) {
    meanLatency+=pct.latency;
  }
  meanLatency/=workList.length;
  Log.i(NetworkVariables.TAG,""String_Node_Str"" + meanLatency);
  double stdDeviation=0;
  for (  TimeSyncPacket pct : workList) {
    stdDeviation+=(pct.latency - meanLatency) * (pct.latency - meanLatency);
  }
  stdDeviation/=workList.length;
  stdDeviation=Math.sqrt(stdDeviation);
  Log.i(NetworkVariables.TAG,""String_Node_Str"" + stdDeviation);
  long averageTimeDelta=0;
  int deltaCount=0;
  for (  TimeSyncPacket pct : workList) {
    if (Math.abs(meanLatency - pct.latency) <= stdDeviation) {
      averageTimeDelta+=pct.timedel;
      deltaCount++;
    }
  }
  averageTimeDelta/=deltaCount;
  Log.i(NetworkVariables.TAG,""String_Node_Str"" + averageTimeDelta);
  timeDelta+=averageTimeDelta;
  accumulationList.clear();
}","/** 
 * Method used to remove outliers from accumulated sync packets, and average the time delta. Will then automatically add the time delta to current time delta to get an accurate estimate  of the server time.
 */
public void convergeSyncPackets(){
  Object[] workList=accumulationList.toArray();
  Log.i(NetworkVariables.TAG,""String_Node_Str"");
  Arrays.sort(workList);
  long medianLatency=((TimeSyncPacket)workList[2]).latency;
  Log.i(NetworkVariables.TAG,""String_Node_Str"" + medianLatency);
  long meanLatency=0;
  for (  Object pct : workList) {
    meanLatency+=((TimeSyncPacket)pct).latency;
  }
  meanLatency/=workList.length;
  Log.i(NetworkVariables.TAG,""String_Node_Str"" + meanLatency);
  double stdDeviation=0;
  for (  Object pct : workList) {
    stdDeviation+=(((TimeSyncPacket)pct).latency - meanLatency) * (((TimeSyncPacket)pct).latency - meanLatency);
  }
  stdDeviation/=workList.length;
  stdDeviation=Math.sqrt(stdDeviation);
  Log.i(NetworkVariables.TAG,""String_Node_Str"" + stdDeviation);
  long averageTimeDelta=0;
  int deltaCount=0;
  for (  Object pct : workList) {
    if (Math.abs(meanLatency - ((TimeSyncPacket)pct).latency) <= stdDeviation) {
      averageTimeDelta+=((TimeSyncPacket)pct).timedel;
      deltaCount++;
    }
  }
  averageTimeDelta/=deltaCount;
  Log.i(NetworkVariables.TAG,""String_Node_Str"" + averageTimeDelta);
  timeDelta+=averageTimeDelta;
  accumulationList.clear();
}",0.5318761384335154
179534,"/** 
 * Sends a message directly to the player with the given player ID. Uses P2P communication if possible, but if that isn't possible, it will route the message via the game server.
 * @param message The message to send to the peer. Must be one of the standard NetworkMessages(NetworkMessage, NetworkMessageMedium or NetworkMessageLarge)
 * @param targetPlayerId The player ID of the player we wish to send this message too. If theplayer ID does not exist, this message will be lost in transit, with no notification.
 */
public void sendDirectCommunicationMessage(NetworkMessage message,int targetPlayerId){
  if (playerId != -1) {
    if (message instanceof NetworkMessageLarge) {
      ((NetworkMessageLarge)message).integers.add(targetPlayerId);
      ((NetworkMessageLarge)message).integers.add(playerId);
    }
 else     if (message instanceof NetworkMessageMedium) {
      ((NetworkMessageMedium)message).integers.add(targetPlayerId);
      ((NetworkMessageLarge)message).integers.add(playerId);
    }
 else {
      NetworkMessageMedium msg=new NetworkMessageMedium();
      msg.setMessage(message.getMessage());
      msg.integers.add(targetPlayerId);
      msg.integers.add(playerId);
      message=msg;
    }
    message.setMessageType(NetworkMessage.MessageType.DIRECT_COMMUNICATION_MESSAGE);
    writeOut(message);
  }
 else {
    throw new NotYetRegisteredException(""String_Node_Str"");
  }
}","/** 
 * Sends a message directly to the player with the given player ID. Uses P2P communication if possible, but if that isn't possible, it will route the message via the game server.
 * @param message The message to send to the peer. Must be one of the standard NetworkMessages(NetworkMessage, NetworkMessageMedium or NetworkMessageLarge)
 * @param targetPlayerId The player ID of the player we wish to send this message too. If theplayer ID does not exist, this message will be lost in transit, with no notification.
 */
public void sendDirectCommunicationMessage(NetworkMessage message,int targetPlayerId){
  if (playerId != -1) {
    if (message instanceof NetworkMessageLarge) {
      ((NetworkMessageLarge)message).integers.add(targetPlayerId);
      ((NetworkMessageLarge)message).integers.add(playerId);
    }
 else     if (message instanceof NetworkMessageMedium) {
      ((NetworkMessageMedium)message).integers.add(targetPlayerId);
      ((NetworkMessageMedium)message).integers.add(playerId);
    }
 else {
      NetworkMessageMedium msg=new NetworkMessageMedium();
      msg.setMessage(message.getMessage());
      msg.integers.add(targetPlayerId);
      msg.integers.add(playerId);
      message=msg;
    }
    message.setMessageType(NetworkMessage.MessageType.DIRECT_COMMUNICATION_MESSAGE);
    writeOut(message);
  }
 else {
    throw new NotYetRegisteredException(""String_Node_Str"");
  }
}",0.9960868018498756
179535,"public NetworkMessageLarge(){
  super();
}","public NetworkMessageLarge(){
  super();
  objectDict=new HashMap<String,Object>();
  stringDict=new HashMap<String,String>();
  integers=new ArrayList<Integer>();
  doubles=new ArrayList<Double>();
  strings=new ArrayList<String>();
}",0.3032490974729241
179536,"public NetworkMessageMedium(){
  super();
}","public NetworkMessageMedium(){
  super();
  strings=new ArrayList<String>();
  integers=new ArrayList<Integer>();
  doubles=new ArrayList<Double>();
}",0.4455958549222797
179537,"private void processNetworkMessage(NetworkMessage message){
  if (message.getTimeStamp() == 0) {
    System.err.println(""String_Node_Str"");
  }
  if (message instanceof PlayerRegistrationMessage) {
    PlayerRegistrationMessage regMessage=(PlayerRegistrationMessage)message;
    playerID=ServerVariables.playerNetworkAddressList.size();
    regMessage.playerID=playerID;
    ServerVariables.playerNetworkAddressList.add(socket.getInetAddress());
    ServerVariables.playerThreads.add(this);
    ServerVariables.playerThreadMap.put(playerID,this);
    playerName=regMessage.playerName;
    PlayerRegistrationMessage reply=new PlayerRegistrationMessage(playerID);
    reply.playerName=playerName;
    writeOut(reply);
    registerPlayer(regMessage);
    sendInitialState();
    sendPeerList();
    fireEvent(new NetworkEvent(this,""String_Node_Str""),ConnectionEstablishedListener.class);
  }
 else {
    NetworkMessage msg=(NetworkMessage)message;
switch (msg.getMessageType()) {
case UPDATE_MESSAGE:
      fireEvent(new NetworkEvent(this,msg),UpdateReceivedListener.class);
    break;
case REQUEST_MESSAGE:
  fireEvent(new NetworkEvent(this,msg),RequestReceivedListener.class);
break;
case INITIAL_GAME_STATE_MESSAGE:
break;
case PARTIAL_GAMESTATE_UPDATE_MESSAGE:
break;
case GAMESTATE_UPDATE_MESSAGE:
break;
case GAMESTATE_REQUEST_MESSAGE:
fireEvent(new NetworkEvent(this,msg),GameStateRequestReceivedListener.class);
break;
case TERMINATION_REQUEST_MESSAGE:
fireEvent(new NetworkEvent(this,msg),TerminationRequestReceivedListener.class);
break;
case PEER_LIST_MESSAGE:
break;
case PEER_LIST_REQUEST_MESSAGE:
sendPeerList();
break;
case LATENCY_REQUEST_MESSAGE:
NetworkMessage latMsg=new NetworkMessage(""String_Node_Str"");
latMsg.setMessageType(NetworkMessage.MessageType.LATENCY_RESPONSE_MESSAGE);
writeOut(latMsg);
break;
case LATENCY_RESPONSE_MESSAGE:
latencyEndTime=System.currentTimeMillis();
if (latencyStartTime < latencyEndTime) {
fireEvent(new NetworkEvent(this,(latencyEndTime - latencyStartTime)),LatencyUpdateListener.class);
}
break;
case DIRECT_COMMUNICATION_MESSAGE:
if (msg instanceof NetworkMessageLarge) {
int targetPlayerId=((NetworkMessageLarge)msg).integers.get(((NetworkMessageLarge)msg).integers.size() - 2);
if (ServerVariables.playerThreadMap.get(targetPlayerId) != null) {
ServerVariables.playerThreadMap.get(targetPlayerId).forwardDirectCommunication(msg);
}
}
 else if (msg instanceof NetworkMessageMedium) {
int targetPlayerId=((NetworkMessageMedium)msg).integers.get(((NetworkMessageMedium)msg).integers.size() - 2);
if (ServerVariables.playerThreadMap.get(targetPlayerId) != null) {
ServerVariables.playerThreadMap.get(targetPlayerId).forwardDirectCommunication(msg);
}
}
 else {
System.err.println(""String_Node_Str"" + playerID + ""String_Node_Str""+ ""String_Node_Str"");
}
break;
case TIME_REQUEST:
NetworkMessage newMsg=new NetworkMessage(""String_Node_Str"" + msg.getTimeStamp());
newMsg.setMessageType(NetworkMessage.MessageType.TIME_RESPONSE);
writeOut(newMsg);
break;
default :
fireEvent(new NetworkEvent(this,msg),UnknownMessageTypeReceivedListener.class);
break;
}
}
}","private void processNetworkMessage(NetworkMessage message){
  if (message.getTimeStamp() == 0) {
    System.err.println(""String_Node_Str"");
  }
  if (message instanceof PlayerRegistrationMessage) {
    PlayerRegistrationMessage regMessage=(PlayerRegistrationMessage)message;
    playerID=ServerVariables.playerNetworkAddressList.size();
    regMessage.playerID=playerID;
    ServerVariables.playerNetworkAddressList.add(socket.getInetAddress());
    ServerVariables.playerThreads.add(this);
    ServerVariables.playerThreadMap.put(playerID,this);
    playerName=regMessage.playerName;
    PlayerRegistrationMessage reply=new PlayerRegistrationMessage(playerID);
    reply.playerName=playerName;
    writeOut(reply);
    registerPlayer(regMessage);
    sendInitialState();
    sendPeerList();
    fireEvent(new NetworkEvent(this,""String_Node_Str""),ConnectionEstablishedListener.class);
  }
 else {
    NetworkMessage msg=(NetworkMessage)message;
switch (msg.getMessageType()) {
case UPDATE_MESSAGE:
      fireEvent(new NetworkEvent(this,msg),UpdateReceivedListener.class);
    break;
case REQUEST_MESSAGE:
  fireEvent(new NetworkEvent(this,msg),RequestReceivedListener.class);
break;
case INITIAL_GAME_STATE_MESSAGE:
break;
case PARTIAL_GAMESTATE_UPDATE_MESSAGE:
break;
case GAMESTATE_UPDATE_MESSAGE:
break;
case GAMESTATE_REQUEST_MESSAGE:
fireEvent(new NetworkEvent(this,msg),GameStateRequestReceivedListener.class);
break;
case TERMINATION_REQUEST_MESSAGE:
fireEvent(new NetworkEvent(this,msg),TerminationRequestReceivedListener.class);
break;
case PEER_LIST_MESSAGE:
break;
case PEER_LIST_REQUEST_MESSAGE:
sendPeerList();
break;
case LATENCY_REQUEST_MESSAGE:
NetworkMessage latMsg=new NetworkMessage(""String_Node_Str"");
latMsg.setMessageType(NetworkMessage.MessageType.LATENCY_RESPONSE_MESSAGE);
writeOut(latMsg);
break;
case LATENCY_RESPONSE_MESSAGE:
latencyEndTime=System.currentTimeMillis();
if (latencyStartTime < latencyEndTime) {
fireEvent(new NetworkEvent(this,(latencyEndTime - latencyStartTime)),LatencyUpdateListener.class);
}
break;
case DIRECT_COMMUNICATION_MESSAGE:
if (msg instanceof NetworkMessageLarge) {
int targetPlayerId=((NetworkMessageLarge)msg).integers.get(((NetworkMessageLarge)msg).integers.size() - 2);
if (ServerVariables.playerThreadMap.get(targetPlayerId) != null) {
ServerVariables.playerThreadMap.get(targetPlayerId).forwardDirectCommunication(msg);
}
}
 else if (msg instanceof NetworkMessageMedium) {
int targetPlayerId=((NetworkMessageMedium)msg).integers.get(((NetworkMessageMedium)msg).integers.size() - 2);
System.out.println(""String_Node_Str"" + ((NetworkMessageMedium)msg).integers.get(((NetworkMessageMedium)msg).integers.size() - 1) + ""String_Node_Str""+ targetPlayerId);
if (ServerVariables.playerThreadMap.get(targetPlayerId) != null) {
ServerVariables.playerThreadMap.get(targetPlayerId).forwardDirectCommunication(msg);
}
}
 else {
System.err.println(""String_Node_Str"" + playerID + ""String_Node_Str""+ ""String_Node_Str"");
}
break;
case TIME_REQUEST:
NetworkMessage newMsg=new NetworkMessage(""String_Node_Str"" + msg.getTimeStamp());
newMsg.setMessageType(NetworkMessage.MessageType.TIME_RESPONSE);
writeOut(newMsg);
break;
default :
fireEvent(new NetworkEvent(this,msg),UnknownMessageTypeReceivedListener.class);
break;
}
}
}",0.973779243209295
179538,"public void shutdownThread(){
  try {
    isRunning=false;
    out.shutdownThread();
    stopOperation=true;
    this.interrupt();
    socket.close();
    connected=false;
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e);
  }
}","public void shutdownThread(){
  try {
    isRunning=false;
    if (out != null)     out.shutdownThread();
    stopOperation=true;
    this.interrupt();
    if (socket != null)     socket.close();
    connected=false;
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e);
  }
}",0.918918918918919
179539,"@Override public void run(){
  if (!connected) {
    connectToServer();
  }
  isRunning=true;
  registerWithServer(getPlayerRegistrationInformation());
  while (!stopOperation) {
    try {
      Object data=in.readObject();
      processNetworkMessage(data);
    }
 catch (    InterruptedIOException e) {
    }
catch (    IOException e) {
      System.err.println(""String_Node_Str"" + e);
      fireEvent(new NetworkEvent(this,""String_Node_Str"" + e),ConnectionLostListener.class);
      this.shutdownThread();
      break;
    }
catch (    ClassNotFoundException e) {
      System.err.println(""String_Node_Str"");
    }
  }
}","@Override public void run(){
  if (!connected) {
    connectToServer();
  }
  if (connected) {
    isRunning=true;
    registerWithServer(getPlayerRegistrationInformation());
    while (!stopOperation) {
      try {
        Object data=in.readObject();
        processNetworkMessage(data);
      }
 catch (      InterruptedIOException e) {
      }
catch (      IOException e) {
        System.err.println(""String_Node_Str"" + e);
        fireEvent(new NetworkEvent(this,""String_Node_Str"" + e),ConnectionLostListener.class);
        this.shutdownThread();
        break;
      }
catch (      ClassNotFoundException e) {
        System.err.println(""String_Node_Str"");
      }
catch (      NullPointerException e) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
      }
    }
  }
 else {
    shutdownThread();
  }
}",0.813840830449827
179540,"@SuppressWarnings(""String_Node_Str"") private void handlePeerListUpdate(NetworkMessage msg){
  peers=(Vector<ClientPeer>)msg.getDataObject(""String_Node_Str"");
}","@SuppressWarnings(""String_Node_Str"") private void handlePeerListUpdate(NetworkMessage msg){
  peers=(Vector<ClientPeer>)msg.getDataObject(""String_Node_Str"");
  Log.d(NetworkVariables.TAG,""String_Node_Str"");
}",0.8664850136239782
179541,"private void connectToServer(){
  boolean success=true;
  try {
    Inet4Address hostAddress=(Inet4Address)InetAddress.getByName(NetworkVariables.hostname);
    socket=new Socket(hostAddress,NetworkVariables.port);
    in=new ObjectInputStream(socket.getInputStream());
    out=new NetworkWriteThread(socket);
    out.start();
  }
 catch (  UnknownHostException e) {
    Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
    success=false;
  }
catch (  IOException e) {
    Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
    success=false;
  }
 finally {
    if (!success) {
      fireEvent(new NetworkEvent(this,""String_Node_Str""),ConnectionFailedListener.class);
    }
 else {
      connected=true;
    }
  }
  Log.i(NetworkVariables.TAG,""String_Node_Str"");
}","private void connectToServer(){
  boolean success=true;
  try {
    Inet4Address hostAddress=(Inet4Address)InetAddress.getByName(NetworkVariables.hostname);
    socket=new Socket(hostAddress,NetworkVariables.port);
    in=new ObjectInputStream(socket.getInputStream());
    out=new NetworkWriteThread(socket);
    out.start();
    fireEvent(new NetworkEvent(this,""String_Node_Str""),ConnectionEstablishedListener.class);
  }
 catch (  UnknownHostException e) {
    Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
    success=false;
  }
catch (  IOException e) {
    Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
    success=false;
  }
 finally {
    if (!success) {
      fireEvent(new NetworkEvent(this,""String_Node_Str""),ConnectionFailedListener.class);
    }
 else {
      connected=true;
    }
  }
  Log.i(NetworkVariables.TAG,""String_Node_Str"");
}",0.9424860853432282
179542,"/** 
 * Asyncronously connects to the server
 */
public void connect(){
  if (!connected)   this.start();
}","/** 
 * Asynchronously connects to the server
 */
public void connect(){
  if (!connected)   this.start();
}",0.9953488372093025
179543,"private void writeOut(Object object) throws BufferOverflowException {
  if (!out.writeMessage(object)) {
    throw new BufferOverflowException();
  }
}","private void writeOut(Object object) throws BufferOverflowException {
  try {
    if (!out.writeMessage(object)) {
      throw new BufferOverflowException();
    }
  }
 catch (  NullPointerException e) {
  }
}",0.8222222222222222
179544,"public boolean writeMessage(Object message){
  return messageQueue.offer(message);
}","public boolean writeMessage(Object message){
  if (message != null) {
    return messageQueue.offer(message);
  }
 else {
    return false;
  }
}",0.7336244541484717
179545,"public void onServiceConnected(ComponentName name,IBinder service){
  binder=(NetworkComBinder)service;
  networkBound=true;
  tv.append(""String_Node_Str"");
  binder.registerMessenger(eventMessenger);
  binder.ConnectToServer();
  timer.schedule(new TimerTask(){
    @Override public void run(){
      if (networkBound)       binder.requestLatency();
    }
  }
,recurranceDelay * 1000,recurranceDelay * 1000);
}","public void onServiceConnected(ComponentName name,IBinder service){
  binder=(NetworkComBinder)service;
  networkBound=true;
  tv.append(""String_Node_Str"");
  binder.registerMessenger(eventMessenger);
  binder.ConnectToServer();
  timer.schedule(new TimerTask(){
    @Override public void run(){
      if (networkBound)       binder.requestLatency();
    }
  }
,recurranceDelay * 1000,recurranceDelay * 200);
}",0.9963459196102314
179546,"private void processNetworkMessage(NetworkMessage message){
  if (message instanceof PlayerRegistrationMessage) {
    playerId=((PlayerRegistrationMessage)message).playerID;
    Log.i(NetworkVariables.TAG,""String_Node_Str"" + playerId + ""String_Node_Str"");
  }
 else   if (message instanceof NetworkMessage) {
    NetworkMessage msg=(NetworkMessage)message;
switch (msg.getMessageType()) {
case UPDATE_MESSAGE:
      fireEvent(new NetworkEvent(this,msg),UpdateReceivedListener.class);
    break;
case REQUEST_MESSAGE:
  fireEvent(new NetworkEvent(this,msg),RequestReceivedListener.class);
break;
case INITIAL_GAME_STATE_MESSAGE:
processInitialGameState(msg);
break;
case PARTIAL_GAMESTATE_UPDATE_MESSAGE:
fireEvent(new NetworkEvent(this,msg),PartialGamestateReceivedListener.class);
break;
case GAMESTATE_UPDATE_MESSAGE:
fireEvent(new NetworkEvent(this,msg),GamestateReceivedListener.class);
break;
case GAMESTATE_REQUEST_MESSAGE:
break;
case TERMINATION_REQUEST_MESSAGE:
break;
case PEER_LIST_MESSAGE:
handlePeerListUpdate(msg);
break;
case PEER_LIST_REQUEST_MESSAGE:
break;
case LATENCY_REQUEST_MESSAGE:
NetworkMessage latMsg=new NetworkMessage(""String_Node_Str"");
latMsg.setMessageType(NetworkMessage.MessageType.LATENCY_RESPONSE_MESSAGE);
writeOut(latMsg);
break;
case LATENCY_RESPONSE_MESSAGE:
latencyEndTime=System.currentTimeMillis();
if (latencyStartTime < latencyEndTime) {
fireEvent(new NetworkEvent(this,(latencyEndTime - latencyStartTime)),LatencyUpdateListener.class);
}
break;
default :
fireEvent(new NetworkEvent(this,msg),UnknownMessageTypeReceivedListener.class);
break;
}
}
}","private void processNetworkMessage(NetworkMessage message){
  if (message instanceof PlayerRegistrationMessage) {
    playerId=((PlayerRegistrationMessage)message).playerID;
    Log.i(NetworkVariables.TAG,""String_Node_Str"" + playerId + ""String_Node_Str"");
  }
 else   if (message instanceof NetworkMessage) {
    NetworkMessage msg=(NetworkMessage)message;
switch (msg.getMessageType()) {
case UPDATE_MESSAGE:
      fireEvent(new NetworkEvent(this,msg),UpdateReceivedListener.class);
    break;
case REQUEST_MESSAGE:
  fireEvent(new NetworkEvent(this,msg),RequestReceivedListener.class);
break;
case INITIAL_GAME_STATE_MESSAGE:
processInitialGameState(msg);
break;
case PARTIAL_GAMESTATE_UPDATE_MESSAGE:
fireEvent(new NetworkEvent(this,msg),PartialGamestateReceivedListener.class);
break;
case GAMESTATE_UPDATE_MESSAGE:
fireEvent(new NetworkEvent(this,msg),GamestateReceivedListener.class);
break;
case GAMESTATE_REQUEST_MESSAGE:
break;
case TERMINATION_REQUEST_MESSAGE:
break;
case PEER_LIST_MESSAGE:
handlePeerListUpdate(msg);
break;
case PEER_LIST_REQUEST_MESSAGE:
break;
case LATENCY_REQUEST_MESSAGE:
NetworkMessage latMsg=new NetworkMessage(""String_Node_Str"");
latMsg.setMessageType(NetworkMessage.MessageType.LATENCY_RESPONSE_MESSAGE);
writeOut(latMsg);
break;
case LATENCY_RESPONSE_MESSAGE:
awaitingLatencyResponse=false;
latencyEndTime=System.currentTimeMillis();
if (latencyStartTime < latencyEndTime) {
fireEvent(new NetworkEvent(this,(latencyEndTime - latencyStartTime)),LatencyUpdateListener.class);
}
break;
default :
fireEvent(new NetworkEvent(this,msg),UnknownMessageTypeReceivedListener.class);
break;
}
}
}",0.990357698289269
179547,"/** 
 * Will make a request to the server to check out what kind of latency there is between android device and server. Response will come as a latencyUpdateEvent.
 */
public void requestNetworkLatency(){
  NetworkMessage msg=new NetworkMessage(""String_Node_Str"");
  msg.setMessageType(NetworkMessage.MessageType.LATENCY_REQUEST_MESSAGE);
  writeOut(msg);
  latencyStartTime=System.currentTimeMillis();
}","/** 
 * Will make a request to the server to check out what kind of latency there is between android device and server. Response will come as a latencyUpdateEvent.
 */
public void requestNetworkLatency(){
  if (!awaitingLatencyResponse) {
    awaitingLatencyResponse=true;
    NetworkMessage msg=new NetworkMessage(""String_Node_Str"");
    msg.setMessageType(NetworkMessage.MessageType.LATENCY_REQUEST_MESSAGE);
    writeOut(msg);
    latencyStartTime=System.currentTimeMillis();
  }
}",0.8693693693693694
179548,"private void processNetworkMessage(NetworkMessage message){
  if (message instanceof PlayerRegistrationMessage) {
    PlayerRegistrationMessage regMessage=(PlayerRegistrationMessage)message;
    playerID=ServerVariables.playerNetworkAddressList.size();
    ServerVariables.playerNetworkAddressList.add(socket.getInetAddress());
    playerName=regMessage.playerName;
    PlayerRegistrationMessage reply=new PlayerRegistrationMessage(playerID);
    writeOut(reply);
    registerPlayer(regMessage);
    sendInitialState();
    sendPeerList();
    fireEvent(new NetworkEvent(this,""String_Node_Str""),ConnectionEstablishedListener.class);
  }
 else   if (message instanceof NetworkMessage) {
    NetworkMessage msg=(NetworkMessage)message;
switch (msg.getMessageType()) {
case UPDATE_MESSAGE:
      fireEvent(new NetworkEvent(this,msg),UpdateReceivedListener.class);
    break;
case REQUEST_MESSAGE:
  fireEvent(new NetworkEvent(this,msg),RequestReceivedListener.class);
break;
case INITIAL_GAME_STATE_MESSAGE:
break;
case PARTIAL_GAMESTATE_UPDATE_MESSAGE:
break;
case GAMESTATE_UPDATE_MESSAGE:
break;
case GAMESTATE_REQUEST_MESSAGE:
fireEvent(new NetworkEvent(this,msg),GameStateRequestReceivedListener.class);
break;
case TERMINATION_REQUEST_MESSAGE:
fireEvent(new NetworkEvent(this,msg),TerminationRequestReceivedListener.class);
break;
case PEER_LIST_MESSAGE:
break;
case PEER_LIST_REQUEST_MESSAGE:
sendPeerList();
break;
case LATENCY_REQUEST_MESSAGE:
NetworkMessage latMsg=new NetworkMessage(""String_Node_Str"");
latMsg.setMessageType(NetworkMessage.MessageType.LATENCY_RESPONSE_MESSAGE);
writeOut(latMsg);
break;
case LATENCY_RESPONSE_MESSAGE:
latencyEndTime=System.currentTimeMillis();
if (latencyStartTime < latencyEndTime) {
fireEvent(new NetworkEvent(this,(latencyEndTime - latencyStartTime)),LatencyUpdateListener.class);
}
break;
default :
fireEvent(new NetworkEvent(this,msg),UnknownMessageTypeReceivedListener.class);
break;
}
}
 else {
System.err.println(""String_Node_Str"" + message.getClass());
}
}","private void processNetworkMessage(NetworkMessage message){
  if (message instanceof PlayerRegistrationMessage) {
    System.out.println(""String_Node_Str"" + message.getMessage());
    PlayerRegistrationMessage regMessage=(PlayerRegistrationMessage)message;
    playerID=ServerVariables.playerNetworkAddressList.size();
    ServerVariables.playerNetworkAddressList.add(socket.getInetAddress());
    playerName=regMessage.playerName;
    PlayerRegistrationMessage reply=new PlayerRegistrationMessage(playerID);
    writeOut(reply);
    registerPlayer(regMessage);
    sendInitialState();
    sendPeerList();
    fireEvent(new NetworkEvent(this,""String_Node_Str""),ConnectionEstablishedListener.class);
  }
 else   if (message instanceof NetworkMessage) {
    NetworkMessage msg=(NetworkMessage)message;
switch (msg.getMessageType()) {
case UPDATE_MESSAGE:
      fireEvent(new NetworkEvent(this,msg),UpdateReceivedListener.class);
    break;
case REQUEST_MESSAGE:
  fireEvent(new NetworkEvent(this,msg),RequestReceivedListener.class);
break;
case INITIAL_GAME_STATE_MESSAGE:
break;
case PARTIAL_GAMESTATE_UPDATE_MESSAGE:
break;
case GAMESTATE_UPDATE_MESSAGE:
break;
case GAMESTATE_REQUEST_MESSAGE:
fireEvent(new NetworkEvent(this,msg),GameStateRequestReceivedListener.class);
break;
case TERMINATION_REQUEST_MESSAGE:
fireEvent(new NetworkEvent(this,msg),TerminationRequestReceivedListener.class);
break;
case PEER_LIST_MESSAGE:
break;
case PEER_LIST_REQUEST_MESSAGE:
sendPeerList();
break;
case LATENCY_REQUEST_MESSAGE:
NetworkMessage latMsg=new NetworkMessage(""String_Node_Str"");
latMsg.setMessageType(NetworkMessage.MessageType.LATENCY_RESPONSE_MESSAGE);
writeOut(latMsg);
break;
case LATENCY_RESPONSE_MESSAGE:
latencyEndTime=System.currentTimeMillis();
if (latencyStartTime < latencyEndTime) {
fireEvent(new NetworkEvent(this,(latencyEndTime - latencyStartTime)),LatencyUpdateListener.class);
}
break;
default :
fireEvent(new NetworkEvent(this,msg),UnknownMessageTypeReceivedListener.class);
break;
}
}
 else {
System.err.println(""String_Node_Str"" + message.getClass());
}
}",0.9838235294117648
179549,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void run(){
  if (!connected) {
    connectToServer();
  }
  if (connected) {
    isRunning=true;
    while (!stopOperation) {
      try {
        NetworkMessage msg=new NetworkMessage();
        Schema<NetworkMessage> schema=RuntimeSchema.getSchema(NetworkMessage.class);
        byte[] bytes=new byte[32];
        int bytesRead=0;
        do {
          if (bytesRead == bytes.length) {
            byte[] newBytes=copyOf(bytes,2 * bytes.length);
            bytes=newBytes;
          }
          bytesRead+=in.read(bytes,bytesRead,bytes.length - bytesRead);
        }
 while (bytesRead == bytes.length);
        if (bytesRead != -1) {
          Log.i(NetworkVariables.TAG,""String_Node_Str"" + bytesRead);
          ProtostuffIOUtil.mergeFrom(copyOf(bytes,bytesRead),msg,schema);
          processNetworkMessage(msg);
        }
 else {
          System.err.println(""String_Node_Str"");
          fireEvent(new NetworkEvent(this,""String_Node_Str""),ConnectionLostListener.class);
          shutdownThread();
        }
      }
 catch (      InterruptedIOException e) {
      }
catch (      IOException e) {
        System.err.println(""String_Node_Str"" + e);
        fireEvent(new NetworkEvent(this,""String_Node_Str"" + e),ConnectionLostListener.class);
        this.shutdownThread();
        break;
      }
catch (      NullPointerException e) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
      }
 finally {
        buffer.clear();
      }
    }
  }
 else {
    shutdownThread();
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void run(){
  if (!connected) {
    connectToServer();
  }
  if (connected) {
    isRunning=true;
    while (!stopOperation) {
      try {
        NetworkMessage msg=new NetworkMessage();
        Schema<NetworkMessage> schema=RuntimeSchema.getSchema(NetworkMessage.class);
        byte[] messageSizeBytes=new byte[6];
        int success=in.read(messageSizeBytes);
        if (success == 6) {
          String mSizeString=new String(messageSizeBytes);
          int mSize=Integer.parseInt(mSizeString);
          byte[] object=new byte[mSize];
          int bytesRead=0;
          while (bytesRead != mSize) {
            bytesRead+=in.read(object,bytesRead,object.length - bytesRead);
          }
          System.out.println(""String_Node_Str"" + bytesRead);
          ProtostuffIOUtil.mergeFrom(object,msg,schema);
          processNetworkMessage(msg);
        }
 else {
          if (success == -1) {
            System.err.println(""String_Node_Str"");
            shutdownThread();
          }
        }
      }
 catch (      InterruptedIOException e) {
      }
catch (      IOException e) {
        System.err.println(""String_Node_Str"" + e);
        fireEvent(new NetworkEvent(this,""String_Node_Str"" + e),ConnectionLostListener.class);
        this.shutdownThread();
        break;
      }
catch (      NullPointerException e) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
      }
catch (      RuntimeException e) {
        System.err.println(""String_Node_Str"");
      }
 finally {
        buffer.clear();
      }
    }
  }
 else {
    shutdownThread();
  }
}",0.3088875077688005
179550,"@Override public void run(){
  while (!stopOperation) {
    try {
      NetworkMessage msg=messageQueue.take();
      Schema<NetworkMessage> schema=RuntimeSchema.getSchema(NetworkMessage.class);
      ProtostuffIOUtil.writeTo(os,msg,schema,buffer);
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"" + e);
    }
catch (    InterruptedException e) {
    }
catch (    Exception e) {
      Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
    }
 finally {
      buffer.clear();
    }
  }
}","@Override public void run(){
  while (!stopOperation) {
    try {
      NetworkMessage msg=messageQueue.take();
      Schema<NetworkMessage> schema=RuntimeSchema.getSchema(NetworkMessage.class);
      byte[] serializedObject=ProtostuffIOUtil.toByteArray(msg,schema,buffer);
      NumberFormat nf=new DecimalFormat(""String_Node_Str"");
      byte[] lengthField=nf.format(serializedObject.length).getBytes();
      byte[] message=new byte[serializedObject.length + lengthField.length];
      System.arraycopy(lengthField,0,message,0,lengthField.length);
      System.arraycopy(serializedObject,0,message,lengthField.length,serializedObject.length);
      os.write(message);
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"" + e);
    }
catch (    InterruptedException e) {
    }
catch (    Exception e) {
      Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
    }
 finally {
      buffer.clear();
    }
  }
}",0.6933701657458563
179551,"public NetworkMessageMedium(String message){
  super(message);
  strings=new ArrayList<String>();
  ints=new ArrayList<Integer>();
}","public NetworkMessageMedium(String message){
  super(message);
  strings=new ArrayList<String>();
}",0.8571428571428571
179552,"public PlayerRegistrationMessage(int playerId){
  super(""String_Node_Str"");
  playerID=playerId;
  strings=new ArrayList<String>();
  ints=new ArrayList<Integer>();
}","public PlayerRegistrationMessage(){
  super(""String_Node_Str"");
}",0.5627705627705628
179553,"@Override public PlayerRegistrationMessage getPlayerRegistrationInformation(){
  return new PlayerRegistrationMessage(1,""String_Node_Str"");
}","@Override public PlayerRegistrationMessage getPlayerRegistrationInformation(){
  return new PlayerRegistrationMessage(""String_Node_Str"");
}",0.9928571428571428
179554,"public void onCreate(){
  try {
    networkThread=NetworkVariables.getInstance();
    binder=new NetworkComBinder(networkThread);
  }
 catch (  IllegalAccessException e) {
    Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
  }
catch (  InstantiationException e) {
    Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
  }
}","public void onCreate(){
  try {
    networkThread=NetworkVariables.getInstance();
    binder=new NetworkComBinder(networkThread);
  }
 catch (  IllegalAccessException e) {
    Log.e(NetworkVariables.TAG,""String_Node_Str"" + e.getMessage(),e);
  }
catch (  InstantiationException e) {
    Log.e(NetworkVariables.TAG,""String_Node_Str"" + e.getMessage(),e);
  }
}",0.9501466275659824
179555,"/** 
 * An android utility function that registers a messenger for all the available network events. The event object will be passed to the Messenger whenever any event occurs, using the  message.what parameter to describe what type of event it is. The message.what parameter is and integer representation of the EventType enum in this class.
 * @param eventMessenger
 */
public void registerMessenger(final Messenger eventMessenger){
  addListener(ConnectionEstablishedListener.class,new ConnectionEstablishedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.CONNECTION_ESTABLISHED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(ConnectionLostListener.class,new ConnectionLostListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.CONNECTION_LOST.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(GamestateReceivedListener.class,new GamestateReceivedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.GAMESTATE_RECEIVED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(PartialGamestateReceivedListener.class,new PartialGamestateReceivedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.PARTIAL_GAMESTATE_RECEIVED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(RequestReceivedListener.class,new RequestReceivedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.REQUEST_RECEIVED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(UnknownMessageTypeReceivedListener.class,new UnknownMessageTypeReceivedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.UNKNOWN_MESSAGE_TYPE_RECEIVED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(UpdateReceivedListener.class,new UpdateReceivedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.UPDATE_RECEIVED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
}","/** 
 * An android utility function that registers a messenger for all the available network events. The event object will be passed to the Messenger whenever any event occurs, using the  message.what parameter to describe what type of event it is. The message.what parameter is and integer representation of the EventType enum in this class.
 * @param eventMessenger
 */
public void registerMessenger(final Messenger eventMessenger){
  addListener(ConnectionEstablishedListener.class,new ConnectionEstablishedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.CONNECTION_ESTABLISHED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(ConnectionLostListener.class,new ConnectionLostListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.CONNECTION_LOST.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(GamestateReceivedListener.class,new GamestateReceivedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.GAMESTATE_RECEIVED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(LatencyUpdateListener.class,new LatencyUpdateListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.LATENCY_UPDATE_RECEIVED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(PartialGamestateReceivedListener.class,new PartialGamestateReceivedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.PARTIAL_GAMESTATE_RECEIVED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(RequestReceivedListener.class,new RequestReceivedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.REQUEST_RECEIVED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(UnknownMessageTypeReceivedListener.class,new UnknownMessageTypeReceivedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.UNKNOWN_MESSAGE_TYPE_RECEIVED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
  addListener(UpdateReceivedListener.class,new UpdateReceivedListener(){
    public void EventOccured(    NetworkEvent e){
      try {
        eventMessenger.send(Message.obtain(null,EventType.UPDATE_RECEIVED.ordinal(),e));
      }
 catch (      RemoteException e1) {
        Log.e(NetworkVariables.TAG,""String_Node_Str"",e1);
      }
    }
  }
);
}",0.943852393828535
179556,"public void onServiceConnected(ComponentName name,IBinder service){
  binder=(NetworkComBinder)service;
  networkBound=true;
  tv.append(""String_Node_Str"");
  binder.addListener(ConnectionEstablishedListener.class,new ConnectionEstablishedListener(){
    public void EventOccured(    NetworkEvent e){
      tv.append(""String_Node_Str"");
    }
  }
);
  if (binder.ConnectToServer()) {
    tv.append(""String_Node_Str"");
  }
 else {
    tv.append(""String_Node_Str"");
  }
}","public void onServiceConnected(ComponentName name,IBinder service){
  binder=(NetworkComBinder)service;
  networkBound=true;
  tv.append(""String_Node_Str"");
  binder.addListener(ConnectionEstablishedListener.class,new ConnectionEstablishedListener(){
    public void EventOccured(    NetworkEvent e){
      tv.append(""String_Node_Str"");
    }
  }
);
  binder.addListener(ConnectionLostListener.class,new ConnectionLostListener(){
    public void EventOccured(    NetworkEvent e){
      tv.append(""String_Node_Str"");
    }
  }
);
  if (binder.ConnectToServer()) {
    tv.append(""String_Node_Str"");
  }
 else {
    tv.append(""String_Node_Str"");
  }
}",0.8397493285586393
179557,"@SuppressWarnings(""String_Node_Str"") private void handlePeerListUpdate(NetworkMessage msg){
  peers=(Vector<ClientPeer>)msg.getDataObject(""String_Node_Str"");
}","@SuppressWarnings(""String_Node_Str"") private void handlePeerListUpdate(NetworkMessage msg){
  peers=(Vector<ClientPeer>)msg.getDataObject(""String_Node_Str"");
  Log.d(NetworkVariables.TAG,""String_Node_Str"");
}",0.8664850136239782
179558,"public boolean connect(){
  try {
    Inet4Address hostAddress=(Inet4Address)InetAddress.getByName(NetworkVariables.hostname);
    socket=new Socket(hostAddress,NetworkVariables.port);
    in=new ObjectInputStream(socket.getInputStream());
    out=new NetworkWriteThread(socket);
    out.start();
  }
 catch (  UnknownHostException e) {
    Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
    return false;
  }
catch (  IOException e) {
    Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
    return false;
  }
  Log.i(NetworkVariables.TAG,""String_Node_Str"");
  return true;
}","public boolean connect(){
  try {
    Inet4Address hostAddress=(Inet4Address)InetAddress.getByName(NetworkVariables.hostname);
    socket=new Socket(hostAddress,NetworkVariables.port);
    in=new ObjectInputStream(socket.getInputStream());
    out=new NetworkWriteThread(socket);
    out.start();
    fireEvent(new NetworkEvent(this,""String_Node_Str""),ConnectionEstablishedListener.class);
  }
 catch (  UnknownHostException e) {
    Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
    return false;
  }
catch (  IOException e) {
    Log.e(NetworkVariables.TAG,""String_Node_Str"",e);
    return false;
  }
  Log.i(NetworkVariables.TAG,""String_Node_Str"");
  return true;
}",0.9255404323458768
179559,"private void processNetworkMessage(Object message){
  if (message instanceof NetworkMessage) {
    NetworkMessage msg=(NetworkMessage)message;
switch (msg.getMessageType()) {
case UPDATE_MESSAGE:
      fireEvent(new NetworkEvent(this,msg),UpdateReceivedListener.class);
    break;
case REQUEST_MESSAGE:
  fireEvent(new NetworkEvent(this,msg),RequestReceivedListener.class);
break;
case INITIAL_GAME_STATE_MESSAGE:
processInitialGameState(msg);
break;
case PARTIAL_GAMESTATE_UPDATE_MESSAGE:
fireEvent(new NetworkEvent(this,msg),PartialGamestateReceivedListener.class);
break;
case GAMESTATE_UPDATE_MESSAGE:
fireEvent(new NetworkEvent(this,msg),GamestateReceivedListener.class);
break;
case GAMESTATE_REQUEST_MESSAGE:
break;
case TERMINATION_REQUEST_MESSAGE:
break;
case PEER_LIST_MESSAGE:
handlePeerListUpdate(msg);
break;
case PEER_LIST_REQUEST_MESSAGE:
break;
case LATENCY_REQUEST_MESSAGE:
NetworkMessage latMsg=new NetworkMessage(""String_Node_Str"");
latMsg.setMessageType(NetworkMessage.MessageType.LATENCY_RESPONSE_MESSAGE);
writeOut(latMsg);
break;
case LATENCY_RESPONSE_MESSAGE:
latencyEndTime=System.currentTimeMillis();
if (latencyStartTime < latencyEndTime) {
fireEvent(new NetworkEvent(this,(latencyEndTime - latencyStartTime)),LatencyUpdateListener.class);
}
default :
fireEvent(new NetworkEvent(this,msg),UnknownMessageTypeReceivedListener.class);
}
}
}","private void processNetworkMessage(Object message){
  if (message instanceof NetworkMessage) {
    NetworkMessage msg=(NetworkMessage)message;
switch (msg.getMessageType()) {
case UPDATE_MESSAGE:
      fireEvent(new NetworkEvent(this,msg),UpdateReceivedListener.class);
    break;
case REQUEST_MESSAGE:
  fireEvent(new NetworkEvent(this,msg),RequestReceivedListener.class);
break;
case INITIAL_GAME_STATE_MESSAGE:
processInitialGameState(msg);
break;
case PARTIAL_GAMESTATE_UPDATE_MESSAGE:
fireEvent(new NetworkEvent(this,msg),PartialGamestateReceivedListener.class);
break;
case GAMESTATE_UPDATE_MESSAGE:
fireEvent(new NetworkEvent(this,msg),GamestateReceivedListener.class);
break;
case GAMESTATE_REQUEST_MESSAGE:
break;
case TERMINATION_REQUEST_MESSAGE:
break;
case PEER_LIST_MESSAGE:
handlePeerListUpdate(msg);
break;
case PEER_LIST_REQUEST_MESSAGE:
break;
case LATENCY_REQUEST_MESSAGE:
NetworkMessage latMsg=new NetworkMessage(""String_Node_Str"");
latMsg.setMessageType(NetworkMessage.MessageType.LATENCY_RESPONSE_MESSAGE);
writeOut(latMsg);
break;
case LATENCY_RESPONSE_MESSAGE:
latencyEndTime=System.currentTimeMillis();
if (latencyStartTime < latencyEndTime) {
fireEvent(new NetworkEvent(this,(latencyEndTime - latencyStartTime)),LatencyUpdateListener.class);
}
break;
default :
fireEvent(new NetworkEvent(this,msg),UnknownMessageTypeReceivedListener.class);
break;
}
}
}",0.9948942377826404
179560,"private void processNetworkMessage(Object message){
  if (message instanceof NetworkMessage) {
    NetworkMessage msg=(NetworkMessage)message;
switch (msg.getMessageType()) {
case UPDATE_MESSAGE:
      fireEvent(new NetworkEvent(this,msg),UpdateReceivedListener.class);
    break;
case REQUEST_MESSAGE:
  fireEvent(new NetworkEvent(this,msg),RequestReceivedListener.class);
break;
case INITIAL_GAME_STATE_MESSAGE:
break;
case PARTIAL_GAMESTATE_UPDATE_MESSAGE:
break;
case GAMESTATE_UPDATE_MESSAGE:
break;
case GAMESTATE_REQUEST_MESSAGE:
fireEvent(new NetworkEvent(this,msg),GameStateRequestReceivedListener.class);
break;
case TERMINATION_REQUEST_MESSAGE:
fireEvent(new NetworkEvent(this,msg),TerminationRequestReceivedListener.class);
break;
case PEER_LIST_MESSAGE:
break;
case PEER_LIST_REQUEST_MESSAGE:
sendPeerList();
break;
case LATENCY_REQUEST_MESSAGE:
NetworkMessage latMsg=new NetworkMessage(""String_Node_Str"");
latMsg.setMessageType(NetworkMessage.MessageType.LATENCY_RESPONSE_MESSAGE);
writeOut(latMsg);
break;
case LATENCY_RESPONSE_MESSAGE:
latencyEndTime=System.currentTimeMillis();
if (latencyStartTime < latencyEndTime) {
fireEvent(new NetworkEvent(this,(latencyEndTime - latencyStartTime)),LatencyUpdateListener.class);
}
default :
fireEvent(new NetworkEvent(this,msg),UnknownMessageTypeReceivedListener.class);
}
}
 else if (message instanceof PlayerRegistrationMessage) {
PlayerRegistrationMessage regMessage=(PlayerRegistrationMessage)message;
ServerVariables.playerNetworkAddressList.put(new Integer(regMessage.playerID),socket.getInetAddress());
playerID=regMessage.playerID;
playerName=regMessage.playerName;
registerPlayer(regMessage);
sendInitialState();
sendPeerList();
fireEvent(new NetworkEvent(this,""String_Node_Str""),ConnectionEstablishedListener.class);
}
 else {
System.err.println(""String_Node_Str"" + message.getClass());
}
}","private void processNetworkMessage(Object message){
  if (message instanceof NetworkMessage) {
    NetworkMessage msg=(NetworkMessage)message;
switch (msg.getMessageType()) {
case UPDATE_MESSAGE:
      fireEvent(new NetworkEvent(this,msg),UpdateReceivedListener.class);
    break;
case REQUEST_MESSAGE:
  fireEvent(new NetworkEvent(this,msg),RequestReceivedListener.class);
break;
case INITIAL_GAME_STATE_MESSAGE:
break;
case PARTIAL_GAMESTATE_UPDATE_MESSAGE:
break;
case GAMESTATE_UPDATE_MESSAGE:
break;
case GAMESTATE_REQUEST_MESSAGE:
fireEvent(new NetworkEvent(this,msg),GameStateRequestReceivedListener.class);
break;
case TERMINATION_REQUEST_MESSAGE:
fireEvent(new NetworkEvent(this,msg),TerminationRequestReceivedListener.class);
break;
case PEER_LIST_MESSAGE:
break;
case PEER_LIST_REQUEST_MESSAGE:
sendPeerList();
break;
case LATENCY_REQUEST_MESSAGE:
NetworkMessage latMsg=new NetworkMessage(""String_Node_Str"");
latMsg.setMessageType(NetworkMessage.MessageType.LATENCY_RESPONSE_MESSAGE);
writeOut(latMsg);
break;
case LATENCY_RESPONSE_MESSAGE:
latencyEndTime=System.currentTimeMillis();
if (latencyStartTime < latencyEndTime) {
fireEvent(new NetworkEvent(this,(latencyEndTime - latencyStartTime)),LatencyUpdateListener.class);
}
break;
default :
fireEvent(new NetworkEvent(this,msg),UnknownMessageTypeReceivedListener.class);
break;
}
}
 else if (message instanceof PlayerRegistrationMessage) {
PlayerRegistrationMessage regMessage=(PlayerRegistrationMessage)message;
ServerVariables.playerNetworkAddressList.put(new Integer(regMessage.playerID),socket.getInetAddress());
playerID=regMessage.playerID;
playerName=regMessage.playerName;
registerPlayer(regMessage);
sendInitialState();
sendPeerList();
fireEvent(new NetworkEvent(this,""String_Node_Str""),ConnectionEstablishedListener.class);
}
 else {
System.err.println(""String_Node_Str"" + message.getClass());
}
}",0.9962426194310252
179561,"public NetworkMessage(String message){
  primeMessage=message;
}","public NetworkMessage(String message){
  primeMessage=message;
  strings=new HashMap<String,String>(ServerCustomisation.initialNetworkMessageMapSize);
  ints=new HashMap<String,Integer>(ServerCustomisation.initialNetworkMessageMapSize);
  objects=new HashMap<String,Object>(ServerCustomisation.initialNetworkMessageMapSize);
}",0.3282051282051282
179562,"@Override public void run(){
  while (true) {
    try {
      System.out.println(""String_Node_Str"");
      Socket con=socket.accept();
      System.out.println(""String_Node_Str"" + con);
      ServerDaemonThread daemonThread=customSettings.buildInstance();
      daemonThread.start();
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"" + e);
    }
catch (    InstantiationException e) {
      System.err.println(""String_Node_Str"" + ""String_Node_Str"" + e);
    }
catch (    IllegalAccessException e) {
      System.err.println(""String_Node_Str"" + e);
    }
  }
}","@Override public void run(){
  while (true) {
    try {
      System.out.println(""String_Node_Str"");
      Socket con=socket.accept();
      System.out.println(""String_Node_Str"" + con);
      ServerDaemonThread daemonThread=customSettings.buildInstance();
      daemonThread.setSocket(con);
      daemonThread.start();
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"" + e);
    }
catch (    InstantiationException e) {
      System.err.println(""String_Node_Str"" + ""String_Node_Str"" + e);
    }
catch (    IllegalAccessException e) {
      System.err.println(""String_Node_Str"" + e);
    }
  }
}",0.9710504549214226
179563,"private void processNetworkMessage(Object message){
  if (message instanceof NetworkMessage) {
    NetworkMessage msg=(NetworkMessage)message;
switch (msg.getMessageType()) {
case UPDATE_MESSAGE:
      fireEvent(new NetworkEvent(this,AWTEvent.RESERVED_ID_MAX + 1,message),UpdateReceivedListener.class);
    break;
case REQUEST_MESSAGE:
  fireEvent(new NetworkEvent(this,AWTEvent.RESERVED_ID_MAX + 1,message),RequestReceivedListener.class);
break;
case PARTIAL_GAMESTATE_UPDATE_MESSAGE:
break;
case GAMESTATE_UPDATE_MESSAGE:
break;
case GAMESTATE_REQUEST_MESSAGE:
fireEvent(new NetworkEvent(this,AWTEvent.RESERVED_ID_MAX + 1,message),GameStateRequestReceivedListener.class);
break;
case TERMINATION_REQUEST_MESSAGE:
fireEvent(new NetworkEvent(this,AWTEvent.RESERVED_ID_MAX + 1,message),TerminationRequestReceivedListener.class);
break;
default :
throw new UnsupportedOperationException(""String_Node_Str"");
}
}
 else if (message instanceof PlayerRegistrationMessage) {
PlayerRegistrationMessage regMessage=(PlayerRegistrationMessage)message;
registerPlayer(regMessage.playerName,regMessage.playerID,socket.getInetAddress());
sendInitialState();
sendInitialPeerList();
fireEvent(new NetworkEvent(this,AWTEvent.RESERVED_ID_MAX + 1,""String_Node_Str""),ConnectionEstablishedListener.class);
}
 else {
System.err.println(""String_Node_Str"" + message.getClass());
}
}","private void processNetworkMessage(Object message){
  if (message instanceof NetworkMessage) {
    NetworkMessage msg=(NetworkMessage)message;
switch (msg.getMessageType()) {
case UPDATE_MESSAGE:
      fireEvent(new NetworkEvent(this,AWTEvent.RESERVED_ID_MAX + 1,message),UpdateReceivedListener.class);
    break;
case REQUEST_MESSAGE:
  fireEvent(new NetworkEvent(this,AWTEvent.RESERVED_ID_MAX + 1,message),RequestReceivedListener.class);
break;
case PARTIAL_GAMESTATE_UPDATE_MESSAGE:
break;
case GAMESTATE_UPDATE_MESSAGE:
break;
case GAMESTATE_REQUEST_MESSAGE:
fireEvent(new NetworkEvent(this,AWTEvent.RESERVED_ID_MAX + 1,message),GameStateRequestReceivedListener.class);
break;
case TERMINATION_REQUEST_MESSAGE:
fireEvent(new NetworkEvent(this,AWTEvent.RESERVED_ID_MAX + 1,message),TerminationRequestReceivedListener.class);
break;
case PEER_LIST_REQUEST_MESSAGE:
sendPeerList();
break;
default :
fireEvent(new NetworkEvent(this,AWTEvent.RESERVED_ID_MAX + 1,message),UnknownMessageTypeReceivedListener.class);
}
}
 else if (message instanceof PlayerRegistrationMessage) {
PlayerRegistrationMessage regMessage=(PlayerRegistrationMessage)message;
registerPlayer(regMessage.playerName,regMessage.playerID,socket.getInetAddress());
sendInitialState();
sendPeerList();
fireEvent(new NetworkEvent(this,AWTEvent.RESERVED_ID_MAX + 1,""String_Node_Str""),ConnectionEstablishedListener.class);
}
 else {
System.err.println(""String_Node_Str"" + message.getClass());
}
}",0.6238010657193606
179564,"public abstract void registerPlayer(String playerName,int playerID,InetAddress clientAddress);","protected abstract void registerPlayer(String playerName,int playerID,InetAddress clientAddress);",0.9424083769633508
179565,"/** 
 * EVENTS 
 */
public <T extends NetworkEventListener>void addNetworkListener(Class<T> t,T listener){
  listeners.add(t,listener);
}","/** 
 * EVENTS HANDELING
 */
public <T extends NetworkEventListener>void addNetworkListener(Class<T> t,T listener){
  listeners.add(t,listener);
}",0.9681978798586572
179566,public abstract void sendInitialState();,protected abstract void sendInitialState();,0.8674698795180723
179567,"public void setSocket(Socket acceptedSocket) throws IOException {
  socket=acceptedSocket;
  in=new ObjectInputStream(socket.getInputStream());
  out=new ServerDaemonWriteoutThread(acceptedSocket);
}","public void setSocket(Socket acceptedSocket) throws IOException {
  socket=acceptedSocket;
  in=new ObjectInputStream(socket.getInputStream());
  out=new ServerDaemonWriteoutThread(acceptedSocket);
  out.start();
}",0.9636803874092008
179568,public abstract Vector<ClientPeer> getPeerList();,protected abstract Vector<ClientPeer> getPeerList();,0.8910891089108911
179569,"public void setSocket(Socket acceptedSocket) throws IOException {
  socket=acceptedSocket;
  in=new ObjectInputStream(socket.getInputStream());
  out=new ServerDaemonWriteoutThread(acceptedSocket);
  out.start();
}","public void setSocket(Socket acceptedSocket) throws IOException {
  socket=acceptedSocket;
  out=new ServerDaemonWriteoutThread(acceptedSocket);
  in=new ObjectInputStream(socket.getInputStream());
  out.start();
}",0.7476635514018691
179570,"private void handleConnection(Socket client){
  BufferedReader in=null;
  PrintWriter out=null;
  try {
    in=new BufferedReader(new InputStreamReader(client.getInputStream()));
    String data=""String_Node_Str"";
    String line=""String_Node_Str"";
    if (in.ready()) {
      System.out.println(""String_Node_Str"");
    }
    while (in.ready()) {
      line=in.readLine();
      if (line != null) {
        System.out.println(line);
        data+=line;
      }
 else {
        System.out.println(""String_Node_Str"");
        break;
      }
    }
    String response=processData(client,data);
    System.out.println(response);
    out=new PrintWriter(client.getOutputStream(),true);
    out.write(response);
    out.flush();
  }
 catch (  IOException ioe) {
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException ioe) {
      }
    }
    if (out != null) {
      out.close();
    }
  }
}","private void handleConnection(Socket client){
  BufferedReader in=null;
  PrintWriter out=null;
  try {
    in=new BufferedReader(new InputStreamReader(client.getInputStream()));
    String data=""String_Node_Str"";
    String line=""String_Node_Str"";
    System.out.println(""String_Node_Str"");
    while (in.ready()) {
      int c;
      while ((c=in.read()) != -1) {
        data+=Character.toString((char)c);
      }
    }
    System.out.println(data);
    System.out.println(""String_Node_Str"");
    String response=processData(client,data);
    System.out.println(response);
    out=new PrintWriter(client.getOutputStream(),true);
    out.write(response);
    out.flush();
  }
 catch (  IOException ioe) {
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException ioe) {
      }
    }
    if (out != null) {
      out.close();
    }
  }
}",0.8596587782058338
179571,"@Override protected void process(Entity e){
  CharacterControllerComponent component=e.getComponent(CharacterControllerComponent.class);
  CharacterController characterController=component.getCharacterController();
  AnimationComponent animationComponent=e.getComponent(AnimationComponent.class);
  PhysicsComponent physicsComponent=e.getComponent(PhysicsComponent.class);
  Body body=physicsComponent.getBody();
  Contact contact=physicsComponent.getContact();
  if (characterController.isWalking()) {
    animationComponent.setCurrentAnimation(0);
    characterController.getWalkingDirection(direction);
    force.set(direction[0],direction[1]);
    force.mul(10f);
    body.applyForce(force,body.getTransform().getPosition());
    Vector2 linearVelocity=body.getLinearVelocity();
    float speed=Math.abs(linearVelocity.x);
    float maxSpeed=2f;
    if (speed > maxSpeed) {
      float factor=maxSpeed / speed;
      linearVelocity.x*=factor;
      body.setLinearVelocity(linearVelocity);
    }
  }
 else {
    if (contact.isInContact()) {
      animationComponent.setCurrentAnimation(1);
      Vector2 linearVelocity=body.getLinearVelocity();
      linearVelocity.x=0f;
      body.setLinearVelocity(linearVelocity);
    }
  }
  Vector2 linearVelocity=body.getLinearVelocity();
  if (linearVelocity.y > 0.05f && !contact.isInContact()) {
    animationComponent.setCurrentAnimation(2);
  }
  if (linearVelocity.y < -0.05f && !contact.isInContact()) {
    animationComponent.setCurrentAnimation(3);
  }
  Vector2 normal=contact.getNormal();
  Vector2 horizontal=new Vector2(1f,0f);
  float dot=Math.abs(normal.dot(horizontal));
  if (characterController.jumped() && contact.isInContact() && dot < 0.4f && Math.abs(linearVelocity.y) < 0.01f) {
    Resource<Sound> jumpSound=resourceManager.get(""String_Node_Str"");
    jumpSound.get().play();
    impulse.set(0f,1.1f);
    body.applyLinearImpulse(impulse,body.getTransform().getPosition());
  }
}","@Override protected void process(Entity e){
  CharacterControllerComponent component=e.getComponent(CharacterControllerComponent.class);
  CharacterController characterController=component.getCharacterController();
  AnimationComponent animationComponent=e.getComponent(AnimationComponent.class);
  PhysicsComponent physicsComponent=e.getComponent(PhysicsComponent.class);
  Body body=physicsComponent.getBody();
  Contact contact=physicsComponent.getContact();
  if (characterController.isWalking()) {
    animationComponent.setCurrentAnimation(0);
    characterController.getWalkingDirection(direction);
    force.set(direction[0],direction[1]);
    force.mul(10f);
    body.applyForce(force,body.getTransform().getPosition());
    Vector2 linearVelocity=body.getLinearVelocity();
    float speed=Math.abs(linearVelocity.x);
    float maxSpeed=2f;
    if (speed > maxSpeed) {
      float factor=maxSpeed / speed;
      linearVelocity.x*=factor;
      body.setLinearVelocity(linearVelocity);
    }
  }
 else {
    if (contact.isInContact()) {
      animationComponent.setCurrentAnimation(1);
      Vector2 linearVelocity=body.getLinearVelocity();
      linearVelocity.x=0f;
      body.setLinearVelocity(linearVelocity);
    }
  }
  Vector2 linearVelocity=body.getLinearVelocity();
  if (linearVelocity.y > 0.05f && !contact.isInContact()) {
    animationComponent.setCurrentAnimation(2);
  }
  if (linearVelocity.y < -0.05f && !contact.isInContact()) {
    animationComponent.setCurrentAnimation(3);
  }
  Vector2 normal=contact.getNormal();
  Vector2 horizontal=new Vector2(1f,0f);
  float dot=Math.abs(normal.dot(horizontal));
  if (characterController.jumped() && contact.isInContact() && dot < 0.4f) {
    Resource<Sound> jumpSound=resourceManager.get(""String_Node_Str"");
    jumpSound.get().play();
    impulse.set(0f,1.1f);
    body.applyLinearImpulse(impulse,body.getTransform().getPosition());
  }
}",0.9901401141670992
179572,"void createMainCharacter(){
  Resource<SpriteSheet> walkingAnimationResource=resourceManager.get(""String_Node_Str"");
  Resource<SpriteSheet> idleAnimationResource=resourceManager.get(""String_Node_Str"");
  Resource<SpriteSheet> jumpAnimationResource=resourceManager.get(""String_Node_Str"");
  Resource<SpriteSheet> fallAnimationResource=resourceManager.get(""String_Node_Str"");
  Sprite sprite=new Sprite(idleAnimationResource.get().getFrame(0));
  float x=0f;
  float y=2f;
  float size=1f;
  float width=0.15f;
  float height=1f;
  Vector2[] bodyShape=Box2dUtils.createRectangle(width,height);
  Body body=physicsObjectsFactory.createPolygonBody(x,y,bodyShape,true,0.1f,1f,0.15f);
  mainCharacter=world.createEntity();
  mainCharacter.setTag(""String_Node_Str"");
  body.setUserData(mainCharacter);
  PhysicsComponent physicsComponent=new PhysicsComponent(body);
  physicsComponent.setVertices(bodyShape);
  mainCharacter.setGroup(""String_Node_Str"");
  mainCharacter.addComponent(physicsComponent);
  mainCharacter.addComponent(new SpatialComponent(new Box2dPositionProperty(body),PropertyBuilder.vector2(size,size),new Box2dAngleProperty(body)));
  mainCharacter.addComponent(new SpriteComponent(sprite,1,new Vector2(0.5f,0.5f),new Color(Color.WHITE)));
  SpriteSheet[] spriteSheets=new SpriteSheet[]{walkingAnimationResource.get(),idleAnimationResource.get(),jumpAnimationResource.get(),fallAnimationResource.get()};
  FrameAnimation[] animations=new FrameAnimation[]{new FrameAnimationImpl(150,2,true),new FrameAnimationImpl(new int[]{1000,50},true),new FrameAnimationImpl(100,1,false),new FrameAnimationImpl(new int[]{400,200},true)};
  mainCharacter.addComponent(new AnimationComponent(spriteSheets,animations));
  mainCharacter.addComponent(new CameraFollowComponent(cameraData));
  mainCharacter.addComponent(new HealthComponent(new Container(50f,50f)));
  CharacterController characterController=null;
  if (Gdx.app.getType() == ApplicationType.Desktop)   characterController=new KeyboardCharacterController();
 else   if (Gdx.input.isPeripheralAvailable(Peripheral.MultitouchScreen))   characterController=new MultitouchController(new LibgdxPointer(0),new LibgdxPointer(1));
 else   characterController=new SingleTouchController(new LibgdxPointer(0));
  mainCharacter.addComponent(new CharacterControllerComponent(characterController));
  controllers.add(characterController);
  mainCharacter.refresh();
}","void createMainCharacter(){
  Resource<SpriteSheet> walkingAnimationResource=resourceManager.get(""String_Node_Str"");
  Resource<SpriteSheet> idleAnimationResource=resourceManager.get(""String_Node_Str"");
  Resource<SpriteSheet> jumpAnimationResource=resourceManager.get(""String_Node_Str"");
  Resource<SpriteSheet> fallAnimationResource=resourceManager.get(""String_Node_Str"");
  Sprite sprite=new Sprite(idleAnimationResource.get().getFrame(0));
  float x=0f;
  float y=2f;
  float size=1f;
  float width=0.15f;
  float height=1f;
  Vector2[] bodyShape=Box2dUtils.createRectangle(width,height);
  Body body=physicsObjectsFactory.createPolygonBody(x,y,bodyShape,true,0.1f,1f,0f);
  mainCharacter=world.createEntity();
  mainCharacter.setTag(""String_Node_Str"");
  body.setUserData(mainCharacter);
  PhysicsComponent physicsComponent=new PhysicsComponent(body);
  physicsComponent.setVertices(bodyShape);
  mainCharacter.setGroup(""String_Node_Str"");
  mainCharacter.addComponent(physicsComponent);
  mainCharacter.addComponent(new SpatialComponent(new Box2dPositionProperty(body),PropertyBuilder.vector2(size,size),new Box2dAngleProperty(body)));
  mainCharacter.addComponent(new SpriteComponent(sprite,1,new Vector2(0.5f,0.5f),new Color(Color.WHITE)));
  SpriteSheet[] spriteSheets=new SpriteSheet[]{walkingAnimationResource.get(),idleAnimationResource.get(),jumpAnimationResource.get(),fallAnimationResource.get()};
  FrameAnimation[] animations=new FrameAnimation[]{new FrameAnimationImpl(150,2,true),new FrameAnimationImpl(new int[]{1000,50},true),new FrameAnimationImpl(100,1,false),new FrameAnimationImpl(new int[]{400,200},true)};
  mainCharacter.addComponent(new AnimationComponent(spriteSheets,animations));
  mainCharacter.addComponent(new CameraFollowComponent(cameraData));
  mainCharacter.addComponent(new HealthComponent(new Container(50f,50f)));
  CharacterController characterController=null;
  if (Gdx.app.getType() == ApplicationType.Desktop)   characterController=new KeyboardCharacterController();
 else   if (Gdx.input.isPeripheralAvailable(Peripheral.MultitouchScreen))   characterController=new MultitouchController(new LibgdxPointer(0),new LibgdxPointer(1));
 else   characterController=new SingleTouchController(new LibgdxPointer(0));
  mainCharacter.addComponent(new CharacterControllerComponent(characterController));
  controllers.add(characterController);
  mainCharacter.refresh();
}",0.9993774642041916
179573,"@Override public void render(float delta){
  Gdx.graphics.getGL10().glClear(GL10.GL_COLOR_BUFFER_BIT);
  camera.zoom(cameraData.getZoom() * 2f);
  camera.move(cameraData.getX(),cameraData.getY());
  camera.rotate(cameraData.getAngle());
  int deltaInMs=(int)(delta * 1000f);
  score+=100 * delta;
  HealthComponent healthComponent=mainCharacter.getComponent(HealthComponent.class);
  SpatialComponent spatialComponent=mainCharacter.getComponent(SpatialComponent.class);
  if (healthComponent.getHealth().isEmpty() || (spatialComponent.getPosition().y < -50)) {
    game.scoreScreen.setScore((int)score);
    game.setScreen(game.scoreScreen);
    gameOver=true;
  }
  worldWrapper.update(deltaInMs);
  Resource<BitmapFont> font=resourceManager.get(""String_Node_Str"");
  BitmapFont bitmapFont=font.get();
  spriteBatch.begin();
  String scoreLabel=""String_Node_Str"" + (int)score;
  spriteBatch.setColor(Color.WHITE);
  bitmapFont.setScale(0.7f);
  bitmapFont.draw(spriteBatch,scoreLabel,10,Gdx.graphics.getHeight() - 10);
  spriteBatch.end();
  Synchronizers.synchronize();
  inputDevicesMonitor.update();
  if (inputDevicesMonitor.getButton(""String_Node_Str"").isPressed()) {
    game.setScreen(game.scoreScreen);
    gameOver=true;
  }
  for (int i=0; i < controllers.size(); i++) {
    Controller controller=controllers.get(i);
    controller.update(deltaInMs);
  }
}","@Override public void render(float delta){
  Gdx.graphics.getGL10().glClear(GL10.GL_COLOR_BUFFER_BIT);
  camera.zoom(cameraData.getZoom() * 2f);
  camera.move(cameraData.getX(),cameraData.getY());
  camera.rotate(cameraData.getAngle());
  int deltaInMs=(int)(delta * 1000f);
  score+=100 * delta;
  HealthComponent healthComponent=mainCharacter.getComponent(HealthComponent.class);
  SpatialComponent spatialComponent=mainCharacter.getComponent(SpatialComponent.class);
  if (healthComponent.getHealth().isEmpty() || (spatialComponent.getPosition().y < -50)) {
    game.scoreScreen.setScore((int)score);
    game.setScreen(game.scoreScreen);
    gameOver=true;
  }
  worldWrapper.update(deltaInMs);
  Resource<BitmapFont> font=resourceManager.get(""String_Node_Str"");
  BitmapFont bitmapFont=font.get();
  spriteBatch.begin();
  String scoreLabel=""String_Node_Str"" + (int)score;
  spriteBatch.setColor(Color.WHITE);
  bitmapFont.setScale(0.7f);
  bitmapFont.draw(spriteBatch,scoreLabel,10,Gdx.graphics.getHeight() - 10);
  spriteBatch.end();
  Synchronizers.synchronize();
  inputDevicesMonitor.update();
  if (inputDevicesMonitor.getButton(""String_Node_Str"").isPressed()) {
    game.setScreen(game.scoreScreen);
    gameOver=true;
  }
  if (inputDevicesMonitor.getButton(""String_Node_Str"").isHolded()) {
    box2dCustomDebugRenderer.render();
  }
  for (int i=0; i < controllers.size(); i++) {
    Controller controller=controllers.get(i);
    controller.update(deltaInMs);
  }
}",0.960646521433591
179574,"public void build(DroolsMonitoringAgent monitoringAgent){
  this.clear();
  this.connected=true;
  List<KnowledgeBaseInfo> kbases=monitoringAgent.getDiscoveredKnowledgeBases();
  for (  KnowledgeBaseInfo kbaseInfo : kbases) {
    KnowledgeBase kbase=new KnowledgeBase();
    kbase.setParent(this);
    kbase.setId(String.valueOf(kbaseInfo.getKnowledgeBaseId()));
    this.knowledgeBases.put(kbase.getId(),kbase);
  }
  List<KnowledgeSessionInfo> ksessions=monitoringAgent.getDiscoveredKnowledgeSessions();
  for (  KnowledgeSessionInfo ksessionInfo : ksessions) {
    KnowledgeBase knowledgeBase=knowledgeBases.get(ksessionInfo.getKnowledgeBaseId());
    if (knowledgeBase != null) {
      KnowledgeSession ksession=new KnowledgeSession();
      ksession.setId(String.valueOf(ksessionInfo.getKnowledgeSessionId()));
      ksession.setParent(knowledgeBase);
      knowledgeBase.addKnowledgeSession(ksession);
      String consoleId=ActivityConsoleFactory.getViewId(ksession);
      String id=ksession.getParent().getId() + ""String_Node_Str"" + ksession.getId();
      ActivityConsoleListener listener=new ActivityConsoleListener(id,consoleId);
      monitoringAgent.registerListener(listener);
    }
  }
}","public void build(DroolsMonitoringAgent monitoringAgent){
  this.connected=true;
  List<KnowledgeBaseInfo> kbases=monitoringAgent.getDiscoveredKnowledgeBases();
  for (  KnowledgeBaseInfo kbaseInfo : kbases) {
    if (!knowledgeBases.containsKey(kbaseInfo.getKnowledgeBaseId())) {
      KnowledgeBase kbase=new KnowledgeBase();
      kbase.setParent(this);
      kbase.setId(String.valueOf(kbaseInfo.getKnowledgeBaseId()));
      this.knowledgeBases.put(kbase.getId(),kbase);
    }
  }
  List<KnowledgeSessionInfo> ksessions=monitoringAgent.getDiscoveredKnowledgeSessions();
  for (  KnowledgeSessionInfo ksessionInfo : ksessions) {
    KnowledgeBase knowledgeBase=knowledgeBases.get(ksessionInfo.getKnowledgeBaseId());
    if (knowledgeBase != null) {
      KnowledgeSession ksession=new KnowledgeSession();
      ksession.setId(String.valueOf(ksessionInfo.getKnowledgeSessionId()));
      ksession.setParent(knowledgeBase);
      knowledgeBase.addKnowledgeSession(ksession);
      String consoleId=ActivityConsoleFactory.getViewId(ksession);
      String id=ksession.getParent().getId() + ""String_Node_Str"" + ksession.getId();
      ActivityConsoleListener listener=new ActivityConsoleListener(id,consoleId);
      monitoringAgent.registerListener(listener);
    }
  }
}",0.947878787878788
179575,"/** 
 * @throws DroolsMonitoringException
 */
@Override public void discover() throws DroolsMonitoringException {
  discover=false;
  discoverResource(KBASE_RESOURCE_NAMESPACE,new ResourceScanner(){
    public void add(    ObjectName resource){
      String knowledgeBaseId=resource.getKeyProperty(""String_Node_Str"");
synchronized (resourceScanners) {
        if (!resourceScanners.containsKey(knowledgeBaseId)) {
          KnowledgeBaseInfo kbaseInfo=new KnowledgeBaseInfo();
          kbaseInfo.setKnowledgeBaseId(knowledgeBaseId);
          kbaseInfo.setAgentId(agentId);
          knowledgeBaseInfos.add(kbaseInfo);
          KnowledgeBaseScanner scanner=new KnowledgeBaseScanner(agentId,resource,connector);
          resourceScanners.put(knowledgeBaseId,scanner);
          logger.info(""String_Node_Str"" + resource.getCanonicalName());
          discover=true;
        }
      }
    }
  }
);
  discoverResource(KSESSION_RESOURCE_NAMESPACE,new ResourceScanner(){
    public void add(    ObjectName resource){
      String knowledgeSessionId=String.valueOf(resource.getKeyProperty(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      String knowledgeBaseId;
      try {
        knowledgeBaseId=(String)connector.getConnection().getAttribute(resource,""String_Node_Str"");
      }
 catch (      Exception e1) {
        logger.error(""String_Node_Str"" + agentId);
        return;
      }
      String scannerId=knowledgeBaseId.concat(knowledgeSessionId);
synchronized (resourceScanners) {
        if (!resourceScanners.containsKey(scannerId)) {
          KnowledgeSessionInfo ksessionInfo=new KnowledgeSessionInfo();
          ksessionInfo.setKnowledgeSessionId(Integer.valueOf(knowledgeSessionId));
          ksessionInfo.setAgentId(agentId);
          ksessionInfo.setKnowledgeBaseId(knowledgeBaseId);
          knowledgeSessionInfos.add(ksessionInfo);
          KnowledgeSessionScanner scanner=new KnowledgeSessionScanner(agentId,resource,connector);
          resourceScanners.put(scannerId,scanner);
          logger.info(""String_Node_Str"" + resource.getCanonicalName());
          discover=true;
        }
      }
    }
  }
);
  if (discoveredListener != null && discover) {
    discoveredListener.discovered(agentId);
  }
}","/** 
 * @throws DroolsMonitoringException
 */
@Override public void discover() throws DroolsMonitoringException {
  discover=false;
  discoverResource(KBASE_RESOURCE_NAMESPACE,new ResourceScanner(){
    public void add(    ObjectName resource){
      String knowledgeBaseId=resource.getKeyProperty(""String_Node_Str"");
synchronized (resourceScanners) {
        if (!resourceScanners.containsKey(knowledgeBaseId)) {
          KnowledgeBaseInfo kbaseInfo=new KnowledgeBaseInfo();
          kbaseInfo.setKnowledgeBaseId(knowledgeBaseId);
          kbaseInfo.setAgentId(agentId);
synchronized (knowledgeBaseInfos) {
            knowledgeBaseInfos.add(kbaseInfo);
          }
          KnowledgeBaseScanner scanner=new KnowledgeBaseScanner(agentId,resource,connector);
          resourceScanners.put(knowledgeBaseId,scanner);
          logger.info(""String_Node_Str"" + resource.getCanonicalName());
          discover=true;
        }
      }
    }
  }
);
  discoverResource(KSESSION_RESOURCE_NAMESPACE,new ResourceScanner(){
    public void add(    ObjectName resource){
      String knowledgeSessionId=String.valueOf(resource.getKeyProperty(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      String knowledgeBaseId;
      try {
        knowledgeBaseId=(String)connector.getConnection().getAttribute(resource,""String_Node_Str"");
      }
 catch (      Exception e1) {
        logger.error(""String_Node_Str"" + agentId);
        return;
      }
      String scannerId=knowledgeBaseId.concat(knowledgeSessionId);
synchronized (resourceScanners) {
        if (!resourceScanners.containsKey(scannerId)) {
          KnowledgeSessionInfo ksessionInfo=new KnowledgeSessionInfo();
          ksessionInfo.setKnowledgeSessionId(Integer.valueOf(knowledgeSessionId));
          ksessionInfo.setAgentId(agentId);
          ksessionInfo.setKnowledgeBaseId(knowledgeBaseId);
synchronized (knowledgeSessionInfos) {
            knowledgeSessionInfos.add(ksessionInfo);
          }
          KnowledgeSessionScanner scanner=new KnowledgeSessionScanner(agentId,resource,connector);
          resourceScanners.put(scannerId,scanner);
          logger.info(""String_Node_Str"" + resource.getCanonicalName());
          discover=true;
        }
      }
    }
  }
);
  if (discoveredListener != null && discover) {
    discoveredListener.discovered(agentId);
  }
}",0.9654272667971298
179576,"public List<KnowledgeBaseInfo> getKnowledgeBaseInfos(){
  return knowledgeBaseInfos;
}","public List<KnowledgeBaseInfo> getKnowledgeBaseInfos(){
synchronized (knowledgeBaseInfos) {
    List<KnowledgeBaseInfo> copy=new ArrayList<KnowledgeBaseInfo>(knowledgeBaseInfos.size());
    for (    KnowledgeBaseInfo knowledgeBaseInfo : knowledgeBaseInfos) {
      copy.add(knowledgeBaseInfo);
    }
    return copy;
  }
}",0.3333333333333333
179577,"public List<KnowledgeSessionInfo> getKnowledgeSessionInfos(){
  return knowledgeSessionInfos;
}","public List<KnowledgeSessionInfo> getKnowledgeSessionInfos(){
synchronized (knowledgeSessionInfos) {
    List<KnowledgeSessionInfo> copy=new ArrayList<KnowledgeSessionInfo>(knowledgeSessionInfos.size());
    for (    KnowledgeSessionInfo knowledgeSessionInfo : knowledgeSessionInfos) {
      copy.add(knowledgeSessionInfo);
    }
    return copy;
  }
}",0.3310961968680089
179578,"/** 
 * Sets how many items of a type a   {@link Player} has.<p> You can't touch this You can't touch this You can't touch this You can't touch this
 * @param player The {@link Player} to check.
 * @param type   The item id to check.
 * @return True if success (always).
 */
protected final boolean setItemAmount(Player player,int type,double amount){
  int numberOfItems=this.getItemAmount(player,type);
  if (numberOfItems > amount) {
    this.takeItem(player,numberOfItems - amount,type);
  }
 else   if (numberOfItems < amount) {
    this.giveItem(player,amount - numberOfItems,type);
  }
  return true;
}","/** 
 * Sets how many items of a type a   {@link Player} has.<p> You can't touch this You can't touch this You can't touch this You can't touch this
 * @param player The {@link Player} to check.
 * @param type   The item id to check.
 * @param amount what to set the balance to.
 * @return True if success (always).
 */
protected final boolean setItemAmount(Player player,int type,double amount){
  int numberOfItems=this.getItemAmount(player,type);
  if (numberOfItems > amount) {
    this.takeItem(player,numberOfItems - amount,type);
  }
 else   if (numberOfItems < amount) {
    this.giveItem(player,amount - numberOfItems,type);
  }
  return true;
}",0.9643705463182898
179579,"/** 
 * Sets the balance in items or currency of a user.
 * @param player the player to check.
 * @param itemId the item (or -1 for money).
 * @return True if success; false if fail.
 */
public boolean setBalance(Player player,int itemId,double amount){
  if (itemId == -1) {
    return setMoneyBalance(player,amount);
  }
  return setItemAmount(player,itemId,amount);
}","/** 
 * Sets the balance in items or currency of a user.
 * @param player the player to check.
 * @param itemId the item (or -1 for money).
 * @param amount what to set the balance to.
 * @return True if success; false if fail.
 */
public boolean setBalance(Player player,int itemId,double amount){
  if (itemId == -1) {
    return setMoneyBalance(player,amount);
  }
  return setItemAmount(player,itemId,amount);
}",0.9426751592356688
179580,"/** 
 * @deprecated This was a typo, use getItemAmount.
 */
@Deprecated protected final int getItemAnount(Player player,int type){
  return this.getItemAmount(player,type);
}","/** 
 * @deprecated This was a typo, use getItemAmount.
 * @param player deprecated
 * @param type deprecated
 * @return deprecated stuff.
 */
@Deprecated protected final int getItemAnount(Player player,int type){
  return this.getItemAmount(player,type);
}",0.8074245939675174
179581,"/** 
 * Sets how much money a player has.
 * @param player The player to check.
 * @return True if the set was successful.
 */
protected abstract boolean setMoneyBalance(Player player,double amount);","/** 
 * Sets how much money a player has.
 * @param player The player to check.
 * @param amount what to set the balance to.
 * @return True if the set was successful.
 */
protected abstract boolean setMoneyBalance(Player player,double amount);",0.8984198645598194
179582,"/** 
 * Sets how much money a player has.
 * @param player The player to check.
 * @return True if the set was successful.
 */
@Override protected boolean setMoneyBalance(Player player,double amount){
  CurrencyList.setValue(((String)CurrencyList.maxCurrency(player.getName())[0]),player.getName(),amount);
  return true;
}","@Override protected boolean setMoneyBalance(Player player,double amount){
  CurrencyList.setValue(((String)CurrencyList.maxCurrency(player.getName())[0]),player.getName(),amount);
  return true;
}",0.7552986512524085
179583,"public TestMigrationTaskRollback1(){
  setName(""String_Node_Str"");
  setLevel(13);
}","public TestMigrationTaskRollback1(){
  setName(""String_Node_Str"");
  setLevel(new Integer(13));
}",0.9281767955801103
179584,"/** 
 * {@inheritDoc} 
 */
public void migrationSuccessful(MigrationTask task,MigrationContext ctx) throws MigrationException {
  log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str""+ ctx+ ""String_Node_Str""+ this);
  int patchLevel=task.getLevel().intValue();
  for (Iterator patchTableIter=contexts.entrySet().iterator(); patchTableIter.hasNext(); ) {
    PatchInfoStore store=(PatchInfoStore)((Map.Entry)patchTableIter.next()).getValue();
    store.updatePatchLevel(patchLevel);
  }
}","/** 
 * {@inheritDoc} 
 */
public void migrationSuccessful(MigrationTask task,MigrationContext ctx) throws MigrationException {
  log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str""+ ctx+ ""String_Node_Str""+ this);
  int patchLevel=task.getLevel().intValue();
  for (Iterator patchTableIter=contexts.entrySet().iterator(); patchTableIter.hasNext(); ) {
    PatchInfoStore store=(PatchInfoStore)((Map.Entry)patchTableIter.next()).getValue();
    int storePatchLevel=store.getPatchLevel();
    if (patchLevel > storePatchLevel) {
      store.updatePatchLevel(patchLevel);
    }
  }
}",0.912923923006416
179585,"/** 
 * Test doing migrations with a lock override
 * @exception Exception if there is a problem
 */
public void testLockOverride() throws Exception {
  PreparedStatementResultSetHandler h=conn.getPreparedStatementResultSetHandler();
  MockResultSet rs=h.createResultSet();
  rs.addRow(new Integer[]{new Integer(0)});
  h.prepareGlobalResultSet(rs);
  MockControl mockControl=MockControl.createStrictControl(PatchInfoStore.class);
  PatchInfoStore patchStore=(PatchInfoStore)mockControl.getMock();
  patchStore.isPatchStoreLocked();
  mockControl.setReturnValue(true);
  patchStore.isPatchStoreLocked();
  mockControl.setReturnValue(true);
  patchStore.isPatchStoreLocked();
  mockControl.setReturnValue(true);
  patchStore.isPatchStoreLocked();
  mockControl.setReturnValue(true);
  patchStore.unlockPatchStore();
  patchStore.isPatchStoreLocked();
  mockControl.setReturnValue(false);
  patchStore.getPatchLevel();
  mockControl.setReturnValue(2);
  patchStore.lockPatchStore();
  patchStore.getPatchLevel();
  mockControl.setReturnValue(2);
  patchStore.updatePatchLevel(4);
  patchStore.updatePatchLevel(5);
  patchStore.updatePatchLevel(6);
  patchStore.updatePatchLevel(7);
  patchStore.unlockPatchStore();
  mockControl.replay();
  TestJdbcMigrationLauncher testLauncher=new TestJdbcMigrationLauncher(context);
  testLauncher.setLockPollMillis(0);
  testLauncher.setLockPollRetries(3);
  testLauncher.setIgnoreMigrationSuccessfulEvents(false);
  testLauncher.setPatchStore(patchStore);
  testLauncher.setPatchPath(""String_Node_Str"");
  testLauncher.doMigrations();
  mockControl.verify();
}","/** 
 * Test doing migrations with a lock override
 * @exception Exception if there is a problem
 */
public void testLockOverride() throws Exception {
  PreparedStatementResultSetHandler h=conn.getPreparedStatementResultSetHandler();
  MockResultSet rs=h.createResultSet();
  rs.addRow(new Integer[]{new Integer(0)});
  h.prepareGlobalResultSet(rs);
  MockControl mockControl=MockControl.createStrictControl(PatchInfoStore.class);
  PatchInfoStore patchStore=(PatchInfoStore)mockControl.getMock();
  patchStore.isPatchStoreLocked();
  mockControl.setReturnValue(true);
  patchStore.isPatchStoreLocked();
  mockControl.setReturnValue(true);
  patchStore.isPatchStoreLocked();
  mockControl.setReturnValue(true);
  patchStore.isPatchStoreLocked();
  mockControl.setReturnValue(true);
  patchStore.unlockPatchStore();
  patchStore.isPatchStoreLocked();
  mockControl.setReturnValue(false);
  patchStore.getPatchLevel();
  mockControl.setReturnValue(2);
  patchStore.lockPatchStore();
  patchStore.getPatchLevel();
  mockControl.setReturnValue(2,MockControl.ONE_OR_MORE);
  patchStore.updatePatchLevel(4);
  patchStore.getPatchLevel();
  mockControl.setReturnValue(4,MockControl.ONE_OR_MORE);
  patchStore.updatePatchLevel(5);
  patchStore.getPatchLevel();
  mockControl.setReturnValue(5,MockControl.ONE_OR_MORE);
  patchStore.updatePatchLevel(6);
  patchStore.getPatchLevel();
  mockControl.setReturnValue(6,MockControl.ONE_OR_MORE);
  patchStore.updatePatchLevel(7);
  patchStore.getPatchLevel();
  mockControl.setReturnValue(7,MockControl.ZERO_OR_MORE);
  patchStore.unlockPatchStore();
  mockControl.replay();
  TestJdbcMigrationLauncher testLauncher=new TestJdbcMigrationLauncher(context);
  testLauncher.setLockPollMillis(0);
  testLauncher.setLockPollRetries(3);
  testLauncher.setIgnoreMigrationSuccessfulEvents(false);
  testLauncher.setPatchStore(patchStore);
  testLauncher.setPatchPath(""String_Node_Str"");
  testLauncher.doMigrations();
  mockControl.verify();
}",0.8853378188954303
179586,"/** 
 * Test doing migrations with a lock race from a quick cluster
 * @exception Exception if there is a problem
 */
public void testDoMigrationsWithLockRace() throws Exception {
  PreparedStatementResultSetHandler h=conn.getPreparedStatementResultSetHandler();
  MockResultSet rs=h.createResultSet();
  rs.addRow(new Integer[]{new Integer(0)});
  h.prepareGlobalResultSet(rs);
  MockControl mockControl=MockControl.createStrictControl(PatchInfoStore.class);
  PatchInfoStore patchStore=(PatchInfoStore)mockControl.getMock();
  patchStore.isPatchStoreLocked();
  mockControl.setReturnValue(true);
  patchStore.isPatchStoreLocked();
  mockControl.setReturnValue(false);
  patchStore.getPatchLevel();
  mockControl.setReturnValue(0);
  patchStore.lockPatchStore();
  mockControl.setThrowable(new IllegalStateException(""String_Node_Str""));
  patchStore.isPatchStoreLocked();
  mockControl.setReturnValue(false);
  patchStore.getPatchLevel();
  mockControl.setReturnValue(2);
  patchStore.lockPatchStore();
  patchStore.getPatchLevel();
  mockControl.setReturnValue(2);
  patchStore.updatePatchLevel(4);
  patchStore.updatePatchLevel(5);
  patchStore.updatePatchLevel(6);
  patchStore.updatePatchLevel(7);
  patchStore.unlockPatchStore();
  mockControl.replay();
  TestJdbcMigrationLauncher testLauncher=new TestJdbcMigrationLauncher(context);
  testLauncher.setLockPollMillis(0);
  testLauncher.setLockPollRetries(4);
  testLauncher.setIgnoreMigrationSuccessfulEvents(false);
  testLauncher.setPatchStore(patchStore);
  testLauncher.setPatchPath(""String_Node_Str"");
  testLauncher.doMigrations();
  mockControl.verify();
}","/** 
 * Test doing migrations with a lock race from a quick cluster
 * @exception Exception if there is a problem
 */
public void testDoMigrationsWithLockRace() throws Exception {
  PreparedStatementResultSetHandler h=conn.getPreparedStatementResultSetHandler();
  MockResultSet rs=h.createResultSet();
  rs.addRow(new Integer[]{new Integer(0)});
  h.prepareGlobalResultSet(rs);
  MockControl mockControl=MockControl.createStrictControl(PatchInfoStore.class);
  PatchInfoStore patchStore=(PatchInfoStore)mockControl.getMock();
  patchStore.isPatchStoreLocked();
  mockControl.setReturnValue(true);
  patchStore.isPatchStoreLocked();
  mockControl.setReturnValue(false);
  patchStore.getPatchLevel();
  mockControl.setReturnValue(0);
  patchStore.lockPatchStore();
  mockControl.setThrowable(new IllegalStateException(""String_Node_Str""));
  patchStore.isPatchStoreLocked();
  mockControl.setReturnValue(false);
  patchStore.getPatchLevel();
  mockControl.setReturnValue(2,MockControl.ONE_OR_MORE);
  patchStore.lockPatchStore();
  patchStore.getPatchLevel();
  mockControl.setReturnValue(2,MockControl.ONE_OR_MORE);
  patchStore.updatePatchLevel(4);
  patchStore.getPatchLevel();
  mockControl.setReturnValue(4);
  patchStore.updatePatchLevel(5);
  patchStore.getPatchLevel();
  mockControl.setReturnValue(5);
  patchStore.updatePatchLevel(6);
  patchStore.getPatchLevel();
  mockControl.setReturnValue(6);
  patchStore.updatePatchLevel(7);
  patchStore.getPatchLevel();
  mockControl.setReturnValue(7,MockControl.ZERO_OR_MORE);
  patchStore.unlockPatchStore();
  mockControl.replay();
  TestJdbcMigrationLauncher testLauncher=new TestJdbcMigrationLauncher(context);
  testLauncher.setLockPollMillis(0);
  testLauncher.setLockPollRetries(4);
  testLauncher.setIgnoreMigrationSuccessfulEvents(false);
  testLauncher.setPatchStore(patchStore);
  testLauncher.setPatchPath(""String_Node_Str"");
  testLauncher.doMigrations();
  mockControl.verify();
}",0.908835904628331
179587,"public void testValidateControlledSystemsWhenNodePatchLevelsAreOutOfSync() throws Exception {
  int currentPatchLevel=4;
  String systemName=""String_Node_Str"";
  JdbcMigrationLauncher launcher=new JdbcMigrationLauncher();
  MockControl node1ContextControl=MockControl.createControl(JdbcMigrationContext.class);
  JdbcMigrationContext node1Context=(JdbcMigrationContext)node1ContextControl.getMock();
  MockControl node1PatchInfoStoreControl=MockControl.createControl(PatchInfoStore.class);
  PatchInfoStore node1PatchInfoStore=(PatchInfoStore)node1PatchInfoStoreControl.getMock();
  node1PatchInfoStore.getPatchLevel();
  node1PatchInfoStoreControl.setReturnValue(currentPatchLevel);
  node1PatchInfoStoreControl.replay();
  MockControl node2ContextControl=MockControl.createControl(JdbcMigrationContext.class);
  JdbcMigrationContext node2Context=(JdbcMigrationContext)node2ContextControl.getMock();
  MockControl node2PatchInfoStoreControl=MockControl.createControl(PatchInfoStore.class);
  PatchInfoStore node2PatchInfoStore=(PatchInfoStore)node2PatchInfoStoreControl.getMock();
  node2PatchInfoStore.getPatchLevel();
  node2PatchInfoStoreControl.setReturnValue(0);
  node2PatchInfoStoreControl.replay();
  LinkedHashMap contexts=new LinkedHashMap();
  contexts.put(node1Context,node1PatchInfoStore);
  contexts.put(node2Context,node2PatchInfoStore);
  launcher.setContexts(contexts);
  HashMap controlledSystems=new HashMap();
  controlledSystems.put(systemName,launcher);
  migrationProcess.setControlledSystems(controlledSystems);
  try {
    migrationProcess.validateControlledSystems(currentPatchLevel);
    fail(""String_Node_Str"");
  }
 catch (  MigrationException me) {
  }
catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","public void testValidateControlledSystemsWhenNodePatchLevelsAreOutOfSync() throws Exception {
  int currentPatchLevel=4;
  String systemName=""String_Node_Str"";
  JdbcMigrationLauncher launcher=new JdbcMigrationLauncher();
  MockControl node1ContextControl=MockControl.createControl(JdbcMigrationContext.class);
  JdbcMigrationContext node1Context=(JdbcMigrationContext)node1ContextControl.getMock();
  MockControl node1PatchInfoStoreControl=MockControl.createControl(PatchInfoStore.class);
  PatchInfoStore node1PatchInfoStore=(PatchInfoStore)node1PatchInfoStoreControl.getMock();
  node1Context.getDatabaseName();
  node1ContextControl.setReturnValue(""String_Node_Str"",MockControl.ONE_OR_MORE);
  node1ContextControl.replay();
  node1PatchInfoStore.getPatchLevel();
  node1PatchInfoStoreControl.setReturnValue(currentPatchLevel);
  node1PatchInfoStoreControl.replay();
  MockControl node2ContextControl=MockControl.createControl(JdbcMigrationContext.class);
  JdbcMigrationContext node2Context=(JdbcMigrationContext)node2ContextControl.getMock();
  MockControl node2PatchInfoStoreControl=MockControl.createControl(PatchInfoStore.class);
  PatchInfoStore node2PatchInfoStore=(PatchInfoStore)node2PatchInfoStoreControl.getMock();
  node2Context.getDatabaseName();
  node2ContextControl.setReturnValue(""String_Node_Str"",MockControl.ONE_OR_MORE);
  node2ContextControl.replay();
  node2PatchInfoStore.getPatchLevel();
  node2PatchInfoStoreControl.setReturnValue(0);
  node2PatchInfoStoreControl.replay();
  LinkedHashMap contexts=new LinkedHashMap();
  contexts.put(node1Context,node1PatchInfoStore);
  contexts.put(node2Context,node2PatchInfoStore);
  launcher.setContexts(contexts);
  HashMap controlledSystems=new HashMap();
  controlledSystems.put(systemName,launcher);
  migrationProcess.setControlledSystems(controlledSystems);
  try {
    migrationProcess.validateControlledSystems(currentPatchLevel);
    fail(""String_Node_Str"");
  }
 catch (  MigrationException me) {
  }
catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9221810481736368
179588,"public void execute() throws MojoExecutionException, MojoFailureException {
  try {
    addClasspathElementsClassLoader();
    JdbcMigrationLauncherFactory launcherFactory=JdbcMigrationLauncherFactoryLoader.createFactory();
    JdbcMigrationLauncher launcher=launcherFactory.createMigrationLauncher(systemName);
    launcher.doMigrations();
  }
 catch (  Exception e) {
    getLog().error(e);
  }
}","public void execute() throws MojoExecutionException, MojoFailureException {
  try {
    addClasspathElementsClassLoader();
    JdbcMigrationLauncherFactory launcherFactory=JdbcMigrationLauncherFactoryLoader.createFactory();
    JdbcMigrationLauncher launcher=launcherFactory.createMigrationLauncher(systemName);
    launcher.doMigrations();
  }
 catch (  Exception e) {
    getLog().error(e);
    throw new MojoFailureException(e.getMessage());
  }
}",0.9386792452830188
179589,"/** 
 * {@inheritDoc} 
 */
public void migrate(MigrationContext ctx) throws MigrationException {
  JdbcMigrationContext context=(JdbcMigrationContext)ctx;
  Connection conn=null;
  Statement stmt=null;
  String sqlStatement=""String_Node_Str"";
  try {
    conn=context.getConnection();
    List sqlStatements=getSqlStatements(context);
    for (Iterator i=sqlStatements.iterator(); i.hasNext(); ) {
      sqlStatement=(String)i.next();
      if (log.isDebugEnabled()) {
        log.debug(getName() + ""String_Node_Str"" + sqlStatement);
      }
      stmt=conn.createStatement();
      stmt.execute(sqlStatement);
      SqlUtil.close(null,stmt,null);
    }
    context.commit();
  }
 catch (  Exception e) {
    String message=getName() + ""String_Node_Str"" + sqlStatement+ ""String_Node_Str"";
    log.error(message,e);
    if (e instanceof SQLException) {
      if (((SQLException)e).getNextException() != null) {
        log.error(""String_Node_Str"",((SQLException)e).getNextException());
      }
    }
    context.rollback();
    throw new MigrationException(message,e);
  }
 finally {
    SqlUtil.close(null,stmt,null);
  }
}","/** 
 * {@inheritDoc} 
 */
public void migrate(MigrationContext ctx) throws MigrationException {
  JdbcMigrationContext context=(JdbcMigrationContext)ctx;
  Connection conn=null;
  Statement stmt=null;
  String sqlStatement=""String_Node_Str"";
  try {
    conn=context.getConnection();
    context.commit();
    List sqlStatements=getSqlStatements(context);
    for (Iterator i=sqlStatements.iterator(); i.hasNext(); ) {
      sqlStatement=(String)i.next();
      if (log.isDebugEnabled()) {
        log.debug(getName() + ""String_Node_Str"" + sqlStatement);
      }
      stmt=conn.createStatement();
      stmt.execute(sqlStatement);
      SqlUtil.close(null,stmt,null);
    }
    context.commit();
  }
 catch (  Exception e) {
    String message=getName() + ""String_Node_Str"" + sqlStatement+ ""String_Node_Str"";
    log.error(message,e);
    if (e instanceof SQLException) {
      if (((SQLException)e).getNextException() != null) {
        log.error(""String_Node_Str"",((SQLException)e).getNextException());
      }
    }
    context.rollback();
    throw new MigrationException(message,e);
  }
 finally {
    SqlUtil.close(null,stmt,null);
  }
}",0.9902998236331568
179590,"/** 
 * Used to configure the migration launcher with properties from a servlet  context.  You do not need migration.properties to use this method.
 * @param launcher the launcher to configure
 * @param sce the event to get the context and associated parameters from
 * @throws MigrationException if a problem with the look up in JNDI occurs
 */
private void configureFromServletContext(JdbcMigrationLauncher launcher,ServletContextEvent sce) throws MigrationException {
  DataSourceMigrationContext context=getDataSourceMigrationContext();
  String systemName=ConfigurationUtil.getRequiredParam(""String_Node_Str"",sce,this);
  context.setSystemName(systemName);
  String readOnly=sce.getServletContext().getInitParameter(""String_Node_Str"");
  launcher.setReadOnly(false);
  if (""String_Node_Str"".equals(readOnly)) {
    launcher.setReadOnly(true);
  }
  String patchPath=ConfigurationUtil.getRequiredParam(""String_Node_Str"",sce,this);
  launcher.setPatchPath(patchPath);
  String postPatchPath=sce.getServletContext().getInitParameter(""String_Node_Str"");
  launcher.setPostPatchPath(postPatchPath);
  String databases=sce.getServletContext().getInitParameter(""String_Node_Str"");
  String[] databaseNames;
  if ((databases == null) || ""String_Node_Str"".equals(databases)) {
    databaseNames=new String[1];
    databaseNames[0]=""String_Node_Str"";
  }
 else {
    databaseNames=databases.split(""String_Node_Str"");
  }
  for (int i=0; i < databaseNames.length; i++) {
    String databaseName=databaseNames[i];
    if (databaseName != ""String_Node_Str"") {
      databaseName=databaseName + ""String_Node_Str"";
    }
    String databaseType=ConfigurationUtil.getRequiredParam(""String_Node_Str"" + databaseName + ""String_Node_Str"",sce,this);
    context.setDatabaseType(new DatabaseType(databaseType));
    String dataSource=ConfigurationUtil.getRequiredParam(""String_Node_Str"" + databaseName + ""String_Node_Str"",sce,this);
    try {
      Context ctx=new InitialContext();
      if (ctx == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
      }
      DataSource ds=(DataSource)ctx.lookup(""String_Node_Str"" + dataSource);
      context.setDataSource(ds);
      launcher.addContext(context);
    }
 catch (    NamingException e) {
      throw new MigrationException(""String_Node_Str"" + dataSource,e);
    }
  }
}","/** 
 * Used to configure the migration launcher with properties from a servlet  context.  You do not need migration.properties to use this method.
 * @param launcher the launcher to configure
 * @param sce the event to get the context and associated parameters from
 * @throws MigrationException if a problem with the look up in JNDI occurs
 */
private void configureFromServletContext(JdbcMigrationLauncher launcher,ServletContextEvent sce) throws MigrationException {
  String readOnly=sce.getServletContext().getInitParameter(""String_Node_Str"");
  launcher.setReadOnly(false);
  if (""String_Node_Str"".equals(readOnly)) {
    launcher.setReadOnly(true);
  }
  String patchPath=ConfigurationUtil.getRequiredParam(""String_Node_Str"",sce,this);
  launcher.setPatchPath(patchPath);
  String postPatchPath=sce.getServletContext().getInitParameter(""String_Node_Str"");
  launcher.setPostPatchPath(postPatchPath);
  String databases=sce.getServletContext().getInitParameter(""String_Node_Str"");
  String[] databaseNames;
  if ((databases == null) || ""String_Node_Str"".equals(databases)) {
    databaseNames=new String[1];
    databaseNames[0]=""String_Node_Str"";
    log.debug(""String_Node_Str"");
  }
 else {
    databaseNames=databases.split(""String_Node_Str"");
    log.debug(""String_Node_Str"" + databases + ""String_Node_Str"");
  }
  for (int i=0; i < databaseNames.length; i++) {
    String databaseName=databaseNames[i];
    if (databaseName != ""String_Node_Str"") {
      databaseName=databaseName + ""String_Node_Str"";
    }
    String databaseType=ConfigurationUtil.getRequiredParam(""String_Node_Str"" + databaseName + ""String_Node_Str"",sce,this);
    String systemName=ConfigurationUtil.getRequiredParam(""String_Node_Str"",sce,this);
    String dataSource=ConfigurationUtil.getRequiredParam(""String_Node_Str"" + databaseName + ""String_Node_Str"",sce,this);
    DataSourceMigrationContext context=getDataSourceMigrationContext();
    context.setSystemName(systemName);
    context.setDatabaseType(new DatabaseType(databaseType));
    try {
      Context ctx=new InitialContext();
      if (ctx == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
      }
      DataSource ds=(DataSource)ctx.lookup(""String_Node_Str"" + dataSource);
      context.setDataSource(ds);
      log.debug(""String_Node_Str"" + dataSource + ""String_Node_Str""+ databaseType);
      launcher.addContext(context);
    }
 catch (    NamingException e) {
      throw new MigrationException(""String_Node_Str"" + dataSource,e);
    }
  }
}",0.8335039934466516
179591,"/** 
 * Tests that the new mechanism for configuring a launcher from a  servlet context works, with multi-node configurations
 * @throws NamingException a problem with the test
 */
public void testConfiguredMultiNodeContext() throws NamingException {
  JdbcMigrationLauncherFactory launcherFactory=new JdbcMigrationLauncherFactory();
  MockServletContext sc=new MockServletContext();
  String dbType1=""String_Node_Str"";
  String dbType2=""String_Node_Str"";
  String sysName=""String_Node_Str"";
  sc.setInitParameter(""String_Node_Str"",sysName);
  sc.setInitParameter(""String_Node_Str"",""String_Node_Str"");
  sc.setInitParameter(""String_Node_Str"",""String_Node_Str"");
  sc.setInitParameter(""String_Node_Str"",dbType1);
  sc.setInitParameter(""String_Node_Str"",""String_Node_Str"");
  sc.setInitParameter(""String_Node_Str"",dbType2);
  sc.setInitParameter(""String_Node_Str"",""String_Node_Str"");
  sc.setInitParameter(""String_Node_Str"",""String_Node_Str"");
  MockDataSource ds=new MockDataSource();
  MockContextFactory.setAsInitial();
  InitialContext context=new InitialContext();
  context.createSubcontext(""String_Node_Str"");
  context.bind(""String_Node_Str"",ds);
  ServletContextEvent sce=new ServletContextEvent(sc);
  JdbcMigrationLauncher launcher=null;
  try {
    launcher=launcherFactory.createMigrationLauncher(sce);
  }
 catch (  MigrationException e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
  Iterator contextIter=launcher.getContexts().keySet().iterator();
  JdbcMigrationContext jdbcContext1=(JdbcMigrationContext)contextIter.next();
  JdbcMigrationContext jdbcContext2=(JdbcMigrationContext)contextIter.next();
  assertEquals(dbType1,jdbcContext1.getDatabaseType().getDatabaseType());
  assertEquals(sysName,jdbcContext1.getSystemName());
  assertEquals(dbType2,jdbcContext2.getDatabaseType().getDatabaseType());
  assertEquals(sysName,jdbcContext2.getSystemName());
  assertEquals(true,launcher.isReadOnly());
}","/** 
 * Tests that the new mechanism for configuring a launcher from a  servlet context works, with multi-node configurations
 * @throws NamingException a problem with the test
 */
public void testConfiguredMultiNodeContext() throws NamingException {
  JdbcMigrationLauncherFactory launcherFactory=new JdbcMigrationLauncherFactory();
  MockServletContext sc=new MockServletContext();
  String dbType1=""String_Node_Str"";
  String dbType2=""String_Node_Str"";
  String sysName=""String_Node_Str"";
  sc.setInitParameter(""String_Node_Str"",sysName);
  sc.setInitParameter(""String_Node_Str"",""String_Node_Str"");
  sc.setInitParameter(""String_Node_Str"",""String_Node_Str"");
  sc.setInitParameter(""String_Node_Str"",dbType1);
  sc.setInitParameter(""String_Node_Str"",""String_Node_Str"");
  sc.setInitParameter(""String_Node_Str"",dbType2);
  sc.setInitParameter(""String_Node_Str"",""String_Node_Str"");
  sc.setInitParameter(""String_Node_Str"",""String_Node_Str"");
  MockDataSource ds=new MockDataSource();
  MockContextFactory.setAsInitial();
  InitialContext context=new InitialContext();
  context.bind(""String_Node_Str"",ds);
  context.bind(""String_Node_Str"",ds);
  ServletContextEvent sce=new ServletContextEvent(sc);
  JdbcMigrationLauncher launcher=null;
  try {
    launcher=launcherFactory.createMigrationLauncher(sce);
  }
 catch (  MigrationException e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
  Iterator contextIter=launcher.getContexts().keySet().iterator();
  JdbcMigrationContext jdbcContext1=(JdbcMigrationContext)contextIter.next();
  JdbcMigrationContext jdbcContext2=(JdbcMigrationContext)contextIter.next();
  assertEquals(dbType1,jdbcContext1.getDatabaseType().getDatabaseType());
  assertEquals(sysName,jdbcContext1.getSystemName());
  assertEquals(dbType2,jdbcContext2.getDatabaseType().getDatabaseType());
  assertEquals(sysName,jdbcContext2.getSystemName());
  assertEquals(true,launcher.isReadOnly());
}",0.9847110650427572
179592,"/** 
 * Tests that the new mechanism for configuring a launcher from a  servlet context works.
 * @throws NamingException a problem with the test
 */
public void testConfiguredContext() throws NamingException {
  JdbcMigrationLauncherFactory launcherFactory=new JdbcMigrationLauncherFactory();
  MockServletContext sc=new MockServletContext();
  String dbType=""String_Node_Str"";
  String sysName=""String_Node_Str"";
  sc.setInitParameter(""String_Node_Str"",sysName);
  sc.setInitParameter(""String_Node_Str"",""String_Node_Str"");
  sc.setInitParameter(""String_Node_Str"",dbType);
  sc.setInitParameter(""String_Node_Str"",""String_Node_Str"");
  sc.setInitParameter(""String_Node_Str"",""String_Node_Str"");
  MockDataSource ds=new MockDataSource();
  MockContextFactory.setAsInitial();
  InitialContext context=new InitialContext();
  context.createSubcontext(""String_Node_Str"");
  context.bind(""String_Node_Str"",ds);
  ServletContextEvent sce=new ServletContextEvent(sc);
  JdbcMigrationLauncher launcher=null;
  try {
    launcher=launcherFactory.createMigrationLauncher(sce);
  }
 catch (  MigrationException e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
  JdbcMigrationContext jdbcContext=(JdbcMigrationContext)launcher.getContexts().keySet().iterator().next();
  assertEquals(dbType,jdbcContext.getDatabaseType().getDatabaseType());
  assertEquals(sysName,jdbcContext.getSystemName());
  assertEquals(true,launcher.isReadOnly());
}","/** 
 * Tests that the new mechanism for configuring a launcher from a  servlet context works.
 * @throws NamingException a problem with the test
 */
public void testConfiguredContext() throws NamingException {
  JdbcMigrationLauncherFactory launcherFactory=new JdbcMigrationLauncherFactory();
  MockServletContext sc=new MockServletContext();
  String dbType=""String_Node_Str"";
  String sysName=""String_Node_Str"";
  sc.setInitParameter(""String_Node_Str"",sysName);
  sc.setInitParameter(""String_Node_Str"",""String_Node_Str"");
  sc.setInitParameter(""String_Node_Str"",dbType);
  sc.setInitParameter(""String_Node_Str"",""String_Node_Str"");
  sc.setInitParameter(""String_Node_Str"",""String_Node_Str"");
  MockDataSource ds=new MockDataSource();
  InitialContext context=new InitialContext();
  context.bind(""String_Node_Str"",ds);
  ServletContextEvent sce=new ServletContextEvent(sc);
  JdbcMigrationLauncher launcher=null;
  try {
    launcher=launcherFactory.createMigrationLauncher(sce);
  }
 catch (  MigrationException e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
  JdbcMigrationContext jdbcContext=(JdbcMigrationContext)launcher.getContexts().keySet().iterator().next();
  assertEquals(dbType,jdbcContext.getDatabaseType().getDatabaseType());
  assertEquals(sysName,jdbcContext.getSystemName());
  assertEquals(true,launcher.isReadOnly());
}",0.9549356223175964
179593,"/** 
 * Test that all the tables were created successfully in all of the databases
 * @exception Exception if anything goes wrong
 */
public void testMultiNodePatch() throws Exception {
  log.debug(""String_Node_Str"");
  try {
    launcher.doMigrations();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    fail(""String_Node_Str"");
  }
}","/** 
 * Test that all the tables were created successfully in all of the databases
 * @exception Exception if anything goes wrong
 */
public void testMultiNodePatch() throws Exception {
  log.debug(""String_Node_Str"");
  try {
    launcher.doMigrations();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    fail(""String_Node_Str"");
  }
  Connection core=DriverManager.getConnection(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Connection orders=DriverManager.getConnection(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Connection catalog1=DriverManager.getConnection(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Connection catalog2=DriverManager.getConnection(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(4,getPatchLevel(core));
  assertEquals(4,getPatchLevel(orders));
  assertEquals(4,getPatchLevel(catalog1));
  assertEquals(4,getPatchLevel(catalog2));
  verifyTestTable(core,""String_Node_Str"");
  verifyTestTable(orders,""String_Node_Str"");
  verifyTestTable(orders,""String_Node_Str"");
  verifyTestTable(catalog1,""String_Node_Str"");
  verifyTestTable(catalog2,""String_Node_Str"");
  SqlUtil.close(core,null,null);
  SqlUtil.close(orders,null,null);
  SqlUtil.close(catalog1,null,null);
  SqlUtil.close(catalog2,null,null);
}",0.4262492474413004
179594,"/** 
 * @see junit.framework.TestCase#setUp()
 */
protected void setUp() throws Exception {
  super.setUp();
  System.getProperties().setProperty(""String_Node_Str"",""String_Node_Str"");
  DistributedJdbcMigrationLauncherFactory factory=new TestDistributedJdbcMigrationLauncherFactory();
  launcher=(DistributedJdbcMigrationLauncher)factory.createMigrationLauncher(""String_Node_Str"");
  launcher.getMigrationProcess().addListener(this);
}","/** 
 * @see junit.framework.TestCase#setUp()
 */
protected void setUp() throws Exception {
  super.setUp();
  log.debug(""String_Node_Str"" + this.getClass().getName());
  System.getProperties().setProperty(""String_Node_Str"",""String_Node_Str"");
  DistributedJdbcMigrationLauncherFactory factory=new TestDistributedJdbcMigrationLauncherFactory();
  launcher=(DistributedJdbcMigrationLauncher)factory.createMigrationLauncher(""String_Node_Str"");
  launcher.getMigrationProcess().addListener(this);
}",0.9247311827956988
179595,"/** 
 * Make sure that the task loading works correctly
 * @exception MigrationException if anything goes wrong
 */
public void testDistributedMigrationTaskLoading() throws MigrationException {
  MigrationProcess process=launcher.getMigrationProcess();
  assertEquals(7,process.getMigrationTasks().size());
}","/** 
 * Make sure that the task loading works correctly
 * @exception MigrationException if anything goes wrong
 */
public void testDistributedMigrationTaskLoading() throws MigrationException {
  DistributedMigrationProcess process=(DistributedMigrationProcess)launcher.getMigrationProcess();
  assertEquals(7,process.getMigrationTasksWithLaunchers().size());
  assertEquals(7,process.getMigrationTasks().size());
}",0.8520055325034578
179596,"/** 
 * Starts the application migration process.
 * @param conn the connection to use
 * @return the number of patches applied
 * @throws SQLException if an unrecoverable database error occurs whileworking with the patches table.
 * @throws MigrationException if an unrecoverable error occurs duringthe migration
 */
private int doMigrations(Connection conn) throws SQLException, MigrationException {
  patchTable=new PatchTable(context,conn);
  patchTable.getPatchLevel();
  conn.commit();
  boolean b=true;
  try {
    b=conn.getAutoCommit();
    conn.setAutoCommit(false);
    waitForFreeLock();
    try {
      patchTable.lockPatchTable();
      int patchLevel=patchTable.getPatchLevel();
      migrationProcess.addListener(this);
      return migrationProcess.doMigrations(patchLevel,context);
    }
  finally {
      try {
        patchTable.unlockPatchTable();
        conn.commit();
      }
 catch (      SQLException e) {
        log.error(""String_Node_Str"",e);
      }
    }
  }
  finally {
    conn.setAutoCommit(b);
  }
}","/** 
 * Starts the application migration process.
 * @param conn the connection to use
 * @return the number of patches applied
 * @throws SQLException if an unrecoverable database error occurs whileworking with the patches table.
 * @throws MigrationException if an unrecoverable error occurs duringthe migration
 */
private int doMigrations(Connection conn) throws SQLException, MigrationException {
  patchTable=new PatchTable(context,conn);
  patchTable.getPatchLevel();
  if (!conn.getAutoCommit()) {
    conn.commit();
  }
  boolean b=true;
  try {
    b=conn.getAutoCommit();
    conn.setAutoCommit(false);
    waitForFreeLock();
    try {
      patchTable.lockPatchTable();
      int patchLevel=patchTable.getPatchLevel();
      migrationProcess.addListener(this);
      return migrationProcess.doMigrations(patchLevel,context);
    }
  finally {
      try {
        patchTable.unlockPatchTable();
        conn.commit();
      }
 catch (      SQLException e) {
        log.error(""String_Node_Str"",e);
      }
    }
  }
  finally {
    conn.setAutoCommit(b);
  }
}",0.9691211401425178
179597,"/** 
 * Returns a list of all migration tasks, regardless of patch level.
 * @return a list of all migration tasks
 * @throws MigrationException if one or more migration tasks could not becreated
 */
public List getMigrationTasks() throws MigrationException {
  List tasks=new ArrayList();
  for (Iterator i=resourcePackages.iterator(); i.hasNext(); ) {
    String packageName=(String)i.next();
    log.debug(""String_Node_Str"" + packageName);
    for (Iterator j=migrationTaskSources.iterator(); j.hasNext(); ) {
      MigrationTaskSource source=(MigrationTaskSource)j.next();
      tasks.addAll(source.getMigrationTasks(packageName));
    }
  }
  if (tasks.size() == 0) {
    log.info(""String_Node_Str"" + ""String_Node_Str"");
  }
  return tasks;
}","/** 
 * Returns a list of all migration tasks, regardless of patch level.
 * @return a list of all migration tasks
 * @throws MigrationException if one or more migration tasks could not becreated
 */
public List getMigrationTasks() throws MigrationException {
  List tasks=new ArrayList();
  for (Iterator i=resourcePackages.iterator(); i.hasNext(); ) {
    String packageName=(String)i.next();
    log.debug(""String_Node_Str"" + packageName);
    for (Iterator j=migrationTaskSources.iterator(); j.hasNext(); ) {
      MigrationTaskSource source=(MigrationTaskSource)j.next();
      List sourceTasks=source.getMigrationTasks(packageName);
      if (log.isDebugEnabled()) {
        if (sourceTasks.size() > 0) {
          log.debug(""String_Node_Str"" + source + ""String_Node_Str""+ sourceTasks);
        }
 else {
          log.debug(""String_Node_Str"" + source + ""String_Node_Str"");
        }
      }
      tasks.addAll(sourceTasks);
    }
  }
  if (tasks.size() == 0) {
    log.info(""String_Node_Str"" + ""String_Node_Str"");
  }
  return tasks;
}",0.8060368921185019
179598,"/** 
 * @see MigrationTaskSource#getMigrationTasks(String)
 */
public List getMigrationTasks(String packageName) throws MigrationException {
  String path=packageName.replace('.',File.separatorChar);
  String[] scripts=ClassDiscoveryUtil.getResources(path,SQL_PATCH_REGEX);
  log.debug(""String_Node_Str"" + scripts.length + ""String_Node_Str""+ path);
  return createMigrationScripts(scripts);
}","/** 
 * @see MigrationTaskSource#getMigrationTasks(String)
 */
public List getMigrationTasks(String packageName) throws MigrationException {
  String path=packageName.replace('.',File.separatorChar);
  String[] scripts=ClassDiscoveryUtil.getResources(path,SQL_PATCH_REGEX);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + scripts.length + ""String_Node_Str""+ path);
    for (int i=0; i < scripts.length; i++) {
      log.debug(""String_Node_Str"" + scripts[i] + ""String_Node_Str"");
    }
  }
  return createMigrationScripts(scripts);
}",0.823404255319149
179599,"/** 
 * Creates a list of <code>SqlScriptMigrationTask</code>s based on the array of SQL scripts.
 * @param scripts the classpath-relative array of SQL migration scripts
 * @return a list of <code>SqlScriptMigrationTask</code>s based on the arrayof SQL scripts
 * @throws MigrationException if a SqlScriptMigrationTask could no be created
 */
private List createMigrationScripts(String[] scripts) throws MigrationException {
  Pattern p=Pattern.compile(SQL_PATCH_REGEX);
  List tasks=new ArrayList();
  for (int i=0; i < scripts.length; i++) {
    String script=scripts[i];
    InputStream is=getClass().getResourceAsStream(""String_Node_Str"" + script);
    if (is != null) {
      File scriptFile=new File(script);
      String scriptFileName=scriptFile.getName();
      try {
        Matcher matcher=p.matcher(scriptFileName);
        if (!matcher.matches() || matcher.groupCount() != 2) {
          throw new MigrationException(""String_Node_Str"" + script);
        }
        int order=Integer.parseInt(matcher.group(1));
        SqlScriptMigrationTask task=new SqlScriptMigrationTask(scriptFileName,order,is);
        is.close();
        task.setName(scriptFileName);
        tasks.add(task);
      }
 catch (      IOException e) {
        throw new MigrationException(""String_Node_Str"" + script,e);
      }
    }
  }
  return tasks;
}","/** 
 * Creates a list of <code>SqlScriptMigrationTask</code>s based on the array of SQL scripts.
 * @param scripts the classpath-relative array of SQL migration scripts
 * @return a list of <code>SqlScriptMigrationTask</code>s based on the arrayof SQL scripts
 * @throws MigrationException if a SqlScriptMigrationTask could no be created
 */
private List createMigrationScripts(String[] scripts) throws MigrationException {
  Pattern p=Pattern.compile(SQL_PATCH_REGEX);
  List tasks=new ArrayList();
  for (int i=0; i < scripts.length; i++) {
    String script=scripts[i];
    script=script.replace('\\','/');
    log.debug(""String_Node_Str"" + script + ""String_Node_Str"");
    InputStream is=getClass().getResourceAsStream(""String_Node_Str"" + script);
    if (is == null) {
      log.warn(""String_Node_Str"" + script + ""String_Node_Str"");
    }
 else {
      File scriptFile=new File(script);
      String scriptFileName=scriptFile.getName();
      try {
        Matcher matcher=p.matcher(scriptFileName);
        if (!matcher.matches() || matcher.groupCount() != 2) {
          throw new MigrationException(""String_Node_Str"" + script);
        }
        int order=Integer.parseInt(matcher.group(1));
        SqlScriptMigrationTask task=new SqlScriptMigrationTask(scriptFileName,order,is);
        is.close();
        task.setName(scriptFileName);
        tasks.add(task);
      }
 catch (      IOException e) {
        throw new MigrationException(""String_Node_Str"" + script,e);
      }
    }
  }
  return tasks;
}",0.906030855539972
179600,"/** 
 * Tests several combinations of input names to insure things are  working well.
 */
public void testNameParsing(){
  String longName=DelimitedFileLoader.PATH_SEPARATOR + ""String_Node_Str"" + DelimitedFileLoader.PATH_SEPARATOR+ ""String_Node_Str""+ DelimitedFileLoader.PATH_SEPARATOR+ ""String_Node_Str"";
  String medName=DelimitedFileLoader.PATH_SEPARATOR + ""String_Node_Str"";
  String names[]={""String_Node_Str"",longName,medName};
  for (int i=0; i < names.length; i++) {
    loader.setName(names[i]);
    String tb=loader.getTableFromName();
    assertTrue(""String_Node_Str"".equals(tb));
  }
}","/** 
 * Tests several combinations of input names to insure things are  working well.
 */
public void testNameParsing(){
  String longName=DelimitedFileLoader.PATH_SEPARATOR + ""String_Node_Str"" + DelimitedFileLoader.PATH_SEPARATOR+ ""String_Node_Str""+ DelimitedFileLoader.PATH_SEPARATOR+ ""String_Node_Str"";
  String medName=DelimitedFileLoader.PATH_SEPARATOR + ""String_Node_Str"";
  String[] names={""String_Node_Str"",longName,medName};
  for (int i=0; i < names.length; i++) {
    loader.setName(names[i]);
    String tb=loader.getTableFromName();
    assertTrue(""String_Node_Str"".equals(tb));
  }
}",0.9899497487437184
179601,"/** 
 * Run the migrations for the given system name
 * @param arguments the command line arguments, if any (none are used)
 * @exception Exception if anything goes wrong
 */
public static void main(String[] arguments) throws Exception {
  String systemName=getRequiredParam(""String_Node_Str"",System.getProperties());
  try {
    MigrationLauncher launcher=new MigrationLauncher(systemName);
    log.info(""String_Node_Str"" + launcher.getDatabasePatchLevel());
    log.info(""String_Node_Str"" + ((launcher.getNextPatchLevel() - launcher.getDatabasePatchLevel()) - 1));
    log.info(""String_Node_Str"" + launcher.getNextPatchLevel());
  }
 catch (  Exception e) {
    log.error(e);
    throw e;
  }
}","/** 
 * Run the migrations for the given system name
 * @param arguments the command line arguments, if any (none are used)
 * @exception Exception if anything goes wrong
 */
public static void main(String[] arguments) throws Exception {
  String systemName=getRequiredParam(""String_Node_Str"",System.getProperties());
  try {
    MigrationLauncher launcher=new MigrationLauncher(systemName);
    log.info(""String_Node_Str"" + launcher.getDatabasePatchLevel());
    int unappliedPatches=launcher.getNextPatchLevel() - launcher.getDatabasePatchLevel() - 1;
    log.info(""String_Node_Str"" + unappliedPatches);
    log.info(""String_Node_Str"" + launcher.getNextPatchLevel());
  }
 catch (  Exception e) {
    log.error(e);
    throw e;
  }
}",0.8805031446540881
179602,"/** 
 * Returns the table name from the full path name  by parsing it out of a file in the format:  name_db.(some extension)
 * @return the name of the table to add data to
 */
protected String getTableFromName(){
  String name=getName();
  int startTable=name.lastIndexOf(pathSeparator);
  int endTable=name.indexOf(""String_Node_Str"",startTable);
  return name.substring((startTable + 1),endTable);
}","/** 
 * Returns the table name from the full path name  by parsing it out of a file in the format:  name_db.(some extension)
 * @return the name of the table to add data to
 */
protected String getTableFromName(){
  String name=getName();
  int startTable=name.lastIndexOf(PATH_SEPARATOR);
  int endTable=name.indexOf(""String_Node_Str"",startTable);
  return name.substring((startTable + 1),endTable);
}",0.9688667496886676
179603,"/** 
 * Parses a line of data, and sets the prepared statement with the  values.  If a token contains ""<null>"" then a null value is passed  in. 
 * @param data the tokenized string that is mapped to a row
 * @param stmt the statement to populate with data to be inserted
 * @return false if the header is returned, true otherwise
 */
protected boolean insert(String data,PreparedStatement stmt) throws Exception {
  if (!parsedHeader) {
    parsedHeader=true;
    log.info(""String_Node_Str"" + data);
    return false;
  }
  StringTokenizer st=new StringTokenizer(data,getDelimiter());
  int counter=1;
  log.info(""String_Node_Str"" + data);
  while (st.hasMoreTokens()) {
    String colVal=st.nextToken();
    if (colVal.equalsIgnoreCase(""String_Node_Str"")) {
      stmt.setString(counter,null);
    }
 else {
      stmt.setString(counter,colVal);
    }
    counter++;
  }
  return true;
}","/** 
 * Parses a line of data, and sets the prepared statement with the  values.  If a token contains ""<null>"" then a null value is passed  in. 
 * @param data the tokenized string that is mapped to a row
 * @param stmt the statement to populate with data to be inserted
 * @return false if the header is returned, true otherwise
 * @throws SQLException if an error occurs while inserting data into the database
 */
protected boolean insert(String data,PreparedStatement stmt) throws SQLException {
  if (!parsedHeader) {
    parsedHeader=true;
    log.info(""String_Node_Str"" + data);
    return false;
  }
  StringTokenizer st=new StringTokenizer(data,getDelimiter());
  int counter=1;
  log.info(""String_Node_Str"" + data);
  while (st.hasMoreTokens()) {
    String colVal=st.nextToken();
    if (colVal.equalsIgnoreCase(""String_Node_Str"")) {
      stmt.setString(counter,null);
    }
 else {
      stmt.setString(counter,colVal);
    }
    counter++;
  }
  return true;
}",0.954325631380978
179604,"public void setName(String name){
  this.name=name;
}","/** 
 * @see com.tacitknowledge.util.migration.MigrationTaskSupport#setName(java.lang.String)
 */
public void setName(String name){
  this.name=name;
}",0.5196078431372549
179605,"public String getName(){
  return name;
}","/** 
 * @see com.tacitknowledge.util.migration.MigrationTask#getName()
 */
public String getName(){
  return name;
}",0.5222929936305732
179606,"/** 
 * Tests several combinations of input names to insure things are  working well.
 */
public void testNameParsing(){
  String longName=loader.pathSeparator + ""String_Node_Str"" + loader.pathSeparator+ ""String_Node_Str""+ loader.pathSeparator+ ""String_Node_Str"";
  String medName=loader.pathSeparator + ""String_Node_Str"";
  String names[]={""String_Node_Str"",longName,medName};
  for (int i=0; i < names.length; i++) {
    loader.setName(names[i]);
    String tb=loader.getTableFromName();
    assertTrue(""String_Node_Str"".equals(tb));
  }
}","/** 
 * Tests several combinations of input names to insure things are  working well.
 */
public void testNameParsing(){
  String longName=DelimitedFileLoader.PATH_SEPARATOR + ""String_Node_Str"" + DelimitedFileLoader.PATH_SEPARATOR+ ""String_Node_Str""+ DelimitedFileLoader.PATH_SEPARATOR+ ""String_Node_Str"";
  String medName=DelimitedFileLoader.PATH_SEPARATOR + ""String_Node_Str"";
  String names[]={""String_Node_Str"",longName,medName};
  for (int i=0; i < names.length; i++) {
    loader.setName(names[i]);
    String tb=loader.getTableFromName();
    assertTrue(""String_Node_Str"".equals(tb));
  }
}",0.7328646748681898
179607,"public String getDelimiter(){
  return ""String_Node_Str"";
}","/** 
 * @see com.tacitknowledge.util.migration.jdbc.loader.DelimitedFileLoader#getDelimiter()
 */
public String getDelimiter(){
  return ""String_Node_Str"";
}",0.5462962962962963
179608,"public void setName(String name){
  this.name=name;
}","/** 
 * @see com.tacitknowledge.util.migration.MigrationTaskSupport#setName(java.lang.String)
 */
public void setName(String name){
  this.name=name;
}",0.5196078431372549
179609,"public String getName(){
  return name;
}","/** 
 * @see com.tacitknowledge.util.migration.MigrationTask#getName()
 */
public String getName(){
  return name;
}",0.5222929936305732
179610,"/** 
 * Tests query generation
 */
public void testQuery(){
  loader.setName(""String_Node_Str"");
  String sql=loader.getStatmentSql();
  String answer=""String_Node_Str"";
  assertTrue(answer.equals(sql));
}","/** 
 * Tests query generation
 */
public void testQuery(){
  loader.setName(""String_Node_Str"");
  String sql=loader.getStatmentSql();
  String answer=""String_Node_Str"" + ""String_Node_Str"";
  assertTrue(answer.equals(sql));
}",0.9534883720930232
179611,"protected InputStream getResourceAsStream(){
  return null;
}","/** 
 * @see com.tacitknowledge.util.migration.jdbc.SqlLoadMigrationTask#getResourceAsStream()
 */
protected InputStream getResourceAsStream(){
  return null;
}",0.5520361990950227
179612,"public String getDelimiter(){
  return ""String_Node_Str"";
}","/** 
 * @see com.tacitknowledge.util.migration.jdbc.loader.DelimitedFileLoader#getDelimiter()
 */
public String getDelimiter(){
  return ""String_Node_Str"";
}",0.5462962962962963
179613,"/** 
 * @see com.tacitknowledge.util.migration.MigrationTaskSource#getMigrationTasks(java.lang.String)
 */
public List getMigrationTasks(String packageName) throws MigrationException {
  Class[] taskClasses=ClassDiscoveryUtil.getClasses(packageName,MigrationTask.class);
  return instantiateTasks(taskClasses);
}","/** 
 * @see MigrationTaskSource#getMigrationTasks(String)
 */
public List getMigrationTasks(String packageName) throws MigrationException {
  Class[] taskClasses=ClassDiscoveryUtil.getClasses(packageName,MigrationTask.class);
  return instantiateTasks(taskClasses);
}",0.8724137931034482
179614,"@Override public View getView(int position,View convertView,ViewGroup parent){
  Release release=mReleases.get(position);
  View view=convertView;
  if (view == null) {
    view=mInflater.inflate(mLayoutId,null);
  }
  TextView environmentName=(TextView)view.findViewById(R.id.environment_name);
  TextView comment=(TextView)view.findViewById(R.id.comment);
  TextView state=(TextView)view.findViewById(R.id.state);
  TextView author=(TextView)view.findViewById(R.id.author);
  TextView deployedAt=(TextView)view.findViewById(R.id.deployed_at);
  environmentName.setText(release.getEnvironmentName());
  comment.setText(release.getComment());
  state.setText(release.getStateLabel());
  author.setText(release.getAuthor());
  deployedAt.setText(mDf.format(release.getDeployedAt()));
  return view;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  Release release=mReleases.get(position);
  View view=convertView;
  if (view == null) {
    view=mInflater.inflate(mLayoutId,null);
  }
  TextView environmentName=(TextView)view.findViewById(R.id.environment_name);
  TextView comment=(TextView)view.findViewById(R.id.comment);
  TextView state=(TextView)view.findViewById(R.id.state);
  TextView author=(TextView)view.findViewById(R.id.author);
  TextView deployedAt=(TextView)view.findViewById(R.id.deployed_at);
  environmentName.setText(release.getEnvironmentName());
  comment.setText(release.getComment());
  state.setText(release.getStateLabel());
  author.setText(release.getAuthor());
  deployedAt.setText(mDf.format(release.getDateToDisplay()));
  return view;
}",0.9893816364772018
179615,"@Override public void onItemClick(AdapterView<?> arg0,View view,int itemNumber,long arg3){
  if (itemNumber < usersArray.size()) {
    User user=usersArray.get(itemNumber);
    if (user.getAdmin() == UserType.USER && (Boolean)view.getTag()) {
      Permission permission=usersAdapter.getUserIdToPermissionMap().get(user.getId());
      Intent intent=new Intent(mContext,PermissionModifyActivity.class);
      intent.putExtra(Constants.REPOSITORY,repository);
      intent.putExtra(Constants.USER,user);
      if (permission != null) {
        intent.putExtra(Constants.PERMISSION,permission);
      }
      startActivityForResult(intent,0);
    }
 else     if (user.getAdmin() != UserType.USER) {
      GUI.displayMonit(mContext,""String_Node_Str"");
    }
 else {
      GUI.displayMonit(mContext,""String_Node_Str"");
    }
  }
}","@Override public void onItemClick(AdapterView<?> arg0,View view,int itemNumber,long arg3){
  User user=usersArray.get(itemNumber - 1);
  if (user.getAdmin() == UserType.USER && (Boolean)view.getTag()) {
    Permission permission=usersAdapter.getUserIdToPermissionMap().get(user.getId());
    Intent intent=new Intent(mContext,PermissionModifyActivity.class);
    intent.putExtra(Constants.REPOSITORY,repository);
    intent.putExtra(Constants.USER,user);
    if (permission != null) {
      intent.putExtra(Constants.PERMISSION,permission);
    }
    startActivityForResult(intent,0);
  }
 else   if (user.getAdmin() != UserType.USER) {
    GUI.displayMonit(mContext,""String_Node_Str"");
  }
 else {
    GUI.displayMonit(mContext,""String_Node_Str"");
  }
}",0.9164556962025316
179616,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.repository_deployments_layout);
  repository=getIntent().getParcelableExtra(Constants.REPOSITORY);
  ((TextView)findViewById(R.id.repoTitle)).setText(repository.getTitle());
  findViewById(R.id.colorLabel).getBackground().setLevel(repository.getColorLabelNo());
  releasesButton=(Button)findViewById(R.id.releases_button);
  releasesButton.setOnClickListener(this);
  releasesButton.setSelected(true);
  mReleasesList=(ListView)findViewById(R.id.releases_list);
  releasesLoadingFooterView=((LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.releases_loading_footer,null,false);
  View releasesAddNewFooterView=((LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.add_new_release_footer,null,false);
  releasesAddNewFooterView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(getApplicationContext(),CreateNewReleaseActivity.class);
      intent.putExtra(Constants.REPOSITORY_ID,String.valueOf(repository.getId()));
      intent.putExtra(Constants.REPOSITORY_TITLE,String.valueOf(repository.getTitle()));
      intent.putExtra(Constants.REPOSITORY_COLOR_NO,String.valueOf(repository.getColorLabelNo()));
      startActivityForResult(intent,0);
    }
  }
);
  mReleasesList.addFooterView(releasesLoadingFooterView,null,false);
  mReleasesList.addFooterView(releasesAddNewFooterView,null,true);
  mReleasesAdapter=new ReleasesAdapter(this,R.layout.releases_entry,mReleaseArray);
  mReleasesList.setAdapter(mReleasesAdapter);
  mServersList=(ExpandableListView)findViewById(R.id.servers_list);
  serversLoadingFooterView=((LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.environments_server_environments_loading_field,null,false);
  serversAddNewFooterView=((LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.add_server_environment_footer,null,false);
  mServersList.addFooterView(serversLoadingFooterView,null,false);
  mServersList.addFooterView(serversAddNewFooterView);
  serversButton=(Button)findViewById(R.id.servers_button);
  serversButton.setOnClickListener(this);
  serversButton.setSelected(false);
  mServersAdapter=new ServersAdapter(this,R.layout.environments_list_entry,mServersArray);
  mServersList.setAdapter(mServersAdapter);
  serversAddNewFooterView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(getApplicationContext(),CreateNewServerEnvironmentActivity.class);
      intent.putExtra(Constants.REPOSITORY_ID,repository.getId());
      startActivity(intent);
    }
  }
);
  new DownloadReleaseListTask(this).execute();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.repository_deployments_layout);
  repository=getIntent().getParcelableExtra(Constants.REPOSITORY);
  ((TextView)findViewById(R.id.repoTitle)).setText(repository.getTitle());
  findViewById(R.id.colorLabel).getBackground().setLevel(repository.getColorLabelNo());
  releasesButton=(Button)findViewById(R.id.releases_button);
  releasesButton.setOnClickListener(this);
  releasesButton.setSelected(true);
  mReleasesList=(ListView)findViewById(R.id.releases_list);
  releasesLoadingFooterView=((LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.releases_loading_footer,null,false);
  View releasesAddNewFooterView=((LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.add_new_release_footer,null,false);
  releasesAddNewFooterView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(getApplicationContext(),CreateNewReleaseActivity.class);
      intent.putExtra(Constants.REPOSITORY_ID,String.valueOf(repository.getId()));
      intent.putExtra(Constants.REPOSITORY_TITLE,repository.getTitle());
      intent.putExtra(Constants.REPOSITORY_COLOR_NO,repository.getColorLabelNo());
      startActivityForResult(intent,0);
    }
  }
);
  mReleasesList.addFooterView(releasesLoadingFooterView,null,false);
  mReleasesList.addFooterView(releasesAddNewFooterView,null,true);
  mReleasesAdapter=new ReleasesAdapter(this,R.layout.releases_entry,mReleaseArray);
  mReleasesList.setAdapter(mReleasesAdapter);
  mServersList=(ExpandableListView)findViewById(R.id.servers_list);
  serversLoadingFooterView=((LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.environments_server_environments_loading_field,null,false);
  serversAddNewFooterView=((LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.add_server_environment_footer,null,false);
  mServersList.addFooterView(serversLoadingFooterView,null,false);
  mServersList.addFooterView(serversAddNewFooterView);
  serversButton=(Button)findViewById(R.id.servers_button);
  serversButton.setOnClickListener(this);
  serversButton.setSelected(false);
  mServersAdapter=new ServersAdapter(this,R.layout.environments_list_entry,mServersArray);
  mServersList.setAdapter(mServersAdapter);
  serversAddNewFooterView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(getApplicationContext(),CreateNewServerEnvironmentActivity.class);
      intent.putExtra(Constants.REPOSITORY_ID,repository.getId());
      startActivity(intent);
    }
  }
);
  new DownloadReleaseListTask(this).execute();
}",0.9865581888928192
179617,"public void testParseChangesets() throws IOException, XMLParserException {
  String testXml=convertIStoString(getInstrumentation().getContext().getAssets().open(CHANGESET_XML_ADDRESS));
  ArrayList<Changeset> changesetList=XmlParser.parseChangesetList(testXml);
  Changeset changeset1=changesetList.get(0);
  assertNotNull(""String_Node_Str"",changeset1);
  assertEquals(88998,changeset1.getAccountId());
  assertEquals(""String_Node_Str"",changeset1.getAuthor());
  assertEquals(""String_Node_Str"",changeset1.getEmail());
  assertEquals(""String_Node_Str"",changeset1.getHashId());
  assertEquals(207784,changeset1.getRepositoryId());
  assertEquals(""String_Node_Str"",changeset1.getRevision());
  calendar.set(2011,4,06,13,00,29);
  assertEquals(new Date(111,4,06,13,00,29),changeset1.getTime());
  assertEquals(false,changeset1.isTooLarge());
  assertEquals(184072,changeset1.getUserId());
  Changeset changeset2=changesetList.get(1);
  assertNotNull(""String_Node_Str"",changeset2);
  assertEquals(88998,changeset2.getAccountId());
  assertEquals(""String_Node_Str"",changeset2.getAuthor());
  assertEquals(""String_Node_Str"",changeset2.getEmail());
  assertEquals(""String_Node_Str"",changeset2.getHashId());
  assertEquals(205628,changeset2.getRepositoryId());
  assertEquals(""String_Node_Str"",changeset2.getRevision());
  assertEquals(new Date(111,3,28,9,32,50),changeset2.getTime());
  assertEquals(false,changeset2.isTooLarge());
  assertEquals(0,changeset2.getUserId());
}","public void testParseChangesets() throws IOException, XMLParserException {
  String testXml=convertIStoString(getInstrumentation().getContext().getAssets().open(CHANGESET_XML_ADDRESS));
  ArrayList<Changeset> changesetList=XmlParser.parseChangesetList(testXml);
  Changeset changeset1=changesetList.get(0);
  assertNotNull(""String_Node_Str"",changeset1);
  assertEquals(88998,changeset1.getAccountId());
  assertEquals(""String_Node_Str"",changeset1.getAuthor());
  assertEquals(""String_Node_Str"",changeset1.getEmail());
  assertEquals(""String_Node_Str"",changeset1.getHashId());
  assertEquals(207784,changeset1.getRepositoryId());
  assertEquals(""String_Node_Str"",changeset1.getRevision());
  assertEquals(new Date(111,4,06,13,00,29),changeset1.getTime());
  assertEquals(false,changeset1.isTooLarge());
  assertEquals(184072,changeset1.getUserId());
  Changeset changeset2=changesetList.get(1);
  assertNotNull(""String_Node_Str"",changeset2);
  assertEquals(88998,changeset2.getAccountId());
  assertEquals(""String_Node_Str"",changeset2.getAuthor());
  assertEquals(""String_Node_Str"",changeset2.getEmail());
  assertEquals(""String_Node_Str"",changeset2.getHashId());
  assertEquals(205628,changeset2.getRepositoryId());
  assertEquals(""String_Node_Str"",changeset2.getRevision());
  assertEquals(new Date(111,3,28,9,32,50),changeset2.getTime());
  assertEquals(false,changeset2.isTooLarge());
  assertEquals(0,changeset2.getUserId());
}",0.9875776397515528
179618,"@Override protected void setUp() throws Exception {
  super.setUp();
  TimeZone.setDefault(TimeZone.getTimeZone(""String_Node_Str""));
  calendar=Calendar.getInstance();
}","@Override protected void setUp() throws Exception {
  super.setUp();
  TimeZone.setDefault(TimeZone.getTimeZone(""String_Node_Str""));
  calendar=Calendar.getInstance();
  calendar.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
}",0.8387096774193549
179619,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.repository_deployments_layout);
  repository=getIntent().getParcelableExtra(Constants.REPOSITORY);
  ((TextView)findViewById(R.id.repoTitle)).setText(repository.getTitle());
  findViewById(R.id.colorLabel).getBackground().setLevel(repository.getColorLabelNo());
  releasesButton=(Button)findViewById(R.id.releases_button);
  releasesButton.setOnClickListener(this);
  releasesButton.setSelected(true);
  mReleasesList=(ListView)findViewById(R.id.releases_list);
  relesaesLoadingFooterView=((LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.releases_loading_footer,null,false);
  mReleasesList.addFooterView(relesaesLoadingFooterView,null,false);
  mReleasesAdapter=new ReleasesAdapter(this,R.layout.releases_entry,mReleaseArray);
  mReleasesList.setAdapter(mReleasesAdapter);
  mServersList=(ExpandableListView)findViewById(R.id.servers_list);
  serversLoadingFooterView=((LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.add_server_environment_footer,null,false);
  View serversAddNewFooterView=((LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.add_server_environment_footer,null,false);
  mServersList.addFooterView(serversLoadingFooterView,null,false);
  mServersList.addFooterView(serversAddNewFooterView);
  serversButton=(Button)findViewById(R.id.servers_button);
  serversButton.setOnClickListener(this);
  serversButton.setSelected(false);
  mServersAdapter=new ServersAdapter(this,R.layout.environments_list_entry,mServersArray);
  mServersList.setAdapter(mServersAdapter);
  serversAddNewFooterView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(getApplicationContext(),CreateNewServerEnvironmentActivity.class);
      intent.putExtra(Constants.REPOSITORY_ID,repository.getId());
      startActivity(intent);
    }
  }
);
  new DownloadReleaseListTask(this).execute();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.repository_deployments_layout);
  repository=getIntent().getParcelableExtra(Constants.REPOSITORY);
  ((TextView)findViewById(R.id.repoTitle)).setText(repository.getTitle());
  findViewById(R.id.colorLabel).getBackground().setLevel(repository.getColorLabelNo());
  releasesButton=(Button)findViewById(R.id.releases_button);
  releasesButton.setOnClickListener(this);
  releasesButton.setSelected(true);
  mReleasesList=(ListView)findViewById(R.id.releases_list);
  relesaesLoadingFooterView=((LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.releases_loading_footer,null,false);
  mReleasesList.addFooterView(relesaesLoadingFooterView,null,false);
  mReleasesAdapter=new ReleasesAdapter(this,R.layout.releases_entry,mReleaseArray);
  mReleasesList.setAdapter(mReleasesAdapter);
  mServersList=(ExpandableListView)findViewById(R.id.servers_list);
  serversLoadingFooterView=((LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.environments_server_environments_loading_field,null,false);
  View serversAddNewFooterView=((LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.add_server_environment_footer,null,false);
  mServersList.addFooterView(serversLoadingFooterView,null,false);
  mServersList.addFooterView(serversAddNewFooterView);
  serversButton=(Button)findViewById(R.id.servers_button);
  serversButton.setOnClickListener(this);
  serversButton.setSelected(false);
  mServersAdapter=new ServersAdapter(this,R.layout.environments_list_entry,mServersArray);
  mServersList.setAdapter(mServersAdapter);
  serversAddNewFooterView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(getApplicationContext(),CreateNewServerEnvironmentActivity.class);
      intent.putExtra(Constants.REPOSITORY_ID,repository.getId());
      startActivity(intent);
    }
  }
);
  new DownloadReleaseListTask(this).execute();
}",0.9882859191967488
179620,"private void addBranchName(String branchName) throws IllegalArgumentException, IllegalStateException, IOException {
  if (branchName != null) {
    serializer.startTag(""String_Node_Str"",""String_Node_Str"");
    serializer.text(branchName);
    serializer.endTag(""String_Node_Str"",""String_Node_Str"");
  }
}","private void addBranchName(String branchName) throws IllegalArgumentException, IllegalStateException, IOException {
  if (branchName != null && !branchName.equals(""String_Node_Str"")) {
    serializer.startTag(""String_Node_Str"",""String_Node_Str"");
    serializer.text(branchName);
    serializer.endTag(""String_Node_Str"",""String_Node_Str"");
  }
}",0.9368258859784284
179621,"@Override public void endElement(String uri,String localName,String qName) throws SAXException {
  if (server != null) {
    if (localName == ""String_Node_Str"") {
      if (serverList != null) {
        serverList.add(server);
      }
    }
    if (localName == ""String_Node_Str"") {
      try {
        server.setAccountId(Integer.parseInt(buffer.toString()));
      }
 catch (      NumberFormatException nfe) {
        throw new SAXException(nfe);
      }
    }
    if (localName == ""String_Node_Str"") {
      try {
        server.setCreatedAt(buffer.toString());
      }
 catch (      ParseException e) {
        throw new SAXException(e);
      }
    }
    if (localName == ""String_Node_Str"") {
      try {
        server.setId(Integer.parseInt(buffer.toString()));
      }
 catch (      NumberFormatException nfe) {
        throw new SAXException(nfe);
      }
    }
    if (localName == ""String_Node_Str"") {
      server.setLocalPath(buffer.toString());
    }
    if (localName == ""String_Node_Str"") {
      server.setLogin(buffer.toString());
    }
    if (localName == ""String_Node_Str"") {
      server.setName(buffer.toString());
    }
    if (localName == ""String_Node_Str"") {
      server.setPassword(buffer.toString());
    }
    if (localName == ""String_Node_Str"") {
      try {
        server.setPort(Integer.parseInt(buffer.toString()));
      }
 catch (      NumberFormatException nfe) {
        throw new SAXException(nfe);
      }
    }
    if (localName == ""String_Node_Str"") {
      server.setProtocol(buffer.toString());
    }
    if (localName == ""String_Node_Str"") {
      server.setRemoteAddr(buffer.toString());
    }
    if (localName == ""String_Node_Str"") {
      server.setRemotePath(buffer.toString());
    }
    if (localName == ""String_Node_Str"") {
      try {
        server.setRepositoryId(Integer.parseInt(buffer.toString()));
      }
 catch (      NumberFormatException nfe) {
        throw new SAXException(nfe);
      }
    }
    if (localName == ""String_Node_Str"") {
      server.setEnvironmentName(buffer.toString());
    }
    if (localName == ""String_Node_Str"") {
      server.setServerEnvironmentId(buffer.toString());
    }
    if (localName == ""String_Node_Str"") {
      server.setRevision(Integer.parseInt(buffer.toString()));
    }
    if (localName == ""String_Node_Str"") {
      try {
        server.setUpdatedAt(buffer.toString());
      }
 catch (      ParseException e) {
        throw new SAXException(e);
      }
    }
  }
}","@Override public void endElement(String uri,String localName,String qName) throws SAXException {
  if (server != null) {
    if (localName == ""String_Node_Str"") {
      if (serverList != null) {
        serverList.add(server);
      }
    }
    if (localName == ""String_Node_Str"") {
      try {
        server.setAccountId(Integer.parseInt(buffer.toString()));
      }
 catch (      NumberFormatException nfe) {
        throw new SAXException(nfe);
      }
    }
    if (localName == ""String_Node_Str"") {
      try {
        server.setCreatedAt(buffer.toString());
      }
 catch (      ParseException e) {
        throw new SAXException(e);
      }
    }
    if (localName == ""String_Node_Str"") {
      try {
        server.setId(Integer.parseInt(buffer.toString()));
      }
 catch (      NumberFormatException nfe) {
        throw new SAXException(nfe);
      }
    }
    if (localName == ""String_Node_Str"") {
      server.setLocalPath(buffer.toString());
    }
    if (localName == ""String_Node_Str"") {
      server.setLogin(buffer.toString());
    }
    if (localName == ""String_Node_Str"") {
      server.setName(buffer.toString());
    }
    if (localName == ""String_Node_Str"") {
      server.setPassword(buffer.toString());
    }
    if (localName == ""String_Node_Str"") {
      try {
        server.setPort(Integer.parseInt(buffer.toString()));
      }
 catch (      NumberFormatException nfe) {
        throw new SAXException(nfe);
      }
    }
    if (localName == ""String_Node_Str"") {
      server.setProtocol(buffer.toString());
    }
    if (localName == ""String_Node_Str"") {
      server.setRemoteAddr(buffer.toString());
    }
    if (localName == ""String_Node_Str"") {
      server.setRemotePath(buffer.toString());
    }
    if (localName == ""String_Node_Str"") {
      try {
        server.setRepositoryId(Integer.parseInt(buffer.toString()));
      }
 catch (      NumberFormatException nfe) {
        throw new SAXException(nfe);
      }
    }
    if (localName == ""String_Node_Str"") {
      server.setEnvironmentName(buffer.toString());
    }
    if (localName == ""String_Node_Str"") {
      server.setServerEnvironmentId(buffer.toString());
    }
    if (localName == ""String_Node_Str"") {
      server.setRevision(buffer.toString());
    }
    if (localName == ""String_Node_Str"") {
      try {
        server.setUpdatedAt(buffer.toString());
      }
 catch (      ParseException e) {
        throw new SAXException(e);
      }
    }
  }
}",0.9963503649635036
179622,"public static Integer sendModifyServerEnvironmentXML(SharedPreferences prefs,String accountModificationXml,int repoId,int environmentId) throws XMLParserException, HttpSenderServerErrorException, HttpSenderException, UnsupportedEncodingException {
  UsernamePasswordCredentials credentials=getCredentialsFromPreferences(prefs);
  String domain=getAccountDomain(prefs);
  HttpPut putRequest=new HttpPut(HTTPS_PREFIX + domain + SERVER_ENVIRONMENT_UPDATE_HTTP_MIDDLE+ String.valueOf(repoId)+ SERVER_ENVIRONMENT_UPDATE_HTTP_SUFFIX+ String.valueOf(environmentId)+ ""String_Node_Str"");
  return executeModifyPutRequst(accountModificationXml,credentials,putRequest);
}","public static int sendModifyServerEnvironmentXML(SharedPreferences prefs,String modificationXml,int repoId,int environmentId) throws XMLParserException, HttpSenderServerErrorException, HttpSenderException, UnsupportedEncodingException {
  UsernamePasswordCredentials credentials=getCredentialsFromPreferences(prefs);
  String domain=getAccountDomain(prefs);
  HttpPut putRequest=new HttpPut(HTTPS_PREFIX + domain + SERVER_ENVIRONMENT_UPDATE_HTTP_MIDDLE+ String.valueOf(repoId)+ SERVER_ENVIRONMENT_UPDATE_HTTP_SUFFIX+ String.valueOf(environmentId)+ ""String_Node_Str"");
  return executeModifyPutRequst(modificationXml,credentials,putRequest);
}",0.978494623655914
179623,"private static int executeModifyPutRequst(String accountModificationXml,UsernamePasswordCredentials credentials,HttpPut putRequest) throws UnsupportedEncodingException, XMLParserException, HttpSenderServerErrorException, HttpSenderException {
  putRequest.addHeader(BasicScheme.authenticate(credentials,""String_Node_Str"",false));
  putRequest.addHeader(""String_Node_Str"",""String_Node_Str"");
  StringEntity se=new StringEntity(accountModificationXml,""String_Node_Str"");
  putRequest.setEntity(se);
  try {
    HttpResponse putResponse=httpClient.execute(putRequest);
    String entity=EntityUtils.toString(putResponse.getEntity());
    int statusCode=putResponse.getStatusLine().getStatusCode();
    if (statusCode == 200) {
      return 200;
    }
 else     if (statusCode == 422) {
      StringBuilder sb=new StringBuilder();
      for (      String s : XmlParser.parseErrors(entity)) {
        sb.append(s);
        sb.append(""String_Node_Str"");
      }
      throw new HttpSenderServerErrorException(sb.toString());
    }
 else {
      throw new HttpSenderServerErrorException(putResponse.getStatusLine().getReasonPhrase());
    }
  }
 catch (  IOException e) {
    putRequest.abort();
    e.printStackTrace();
    throw new HttpSenderException(""String_Node_Str"");
  }
}","private static int executeModifyPutRequst(String modificationXml,UsernamePasswordCredentials credentials,HttpPut putRequest) throws UnsupportedEncodingException, XMLParserException, HttpSenderServerErrorException, HttpSenderException {
  putRequest.addHeader(BasicScheme.authenticate(credentials,""String_Node_Str"",false));
  putRequest.addHeader(""String_Node_Str"",""String_Node_Str"");
  StringEntity se=new StringEntity(modificationXml,""String_Node_Str"");
  putRequest.setEntity(se);
  try {
    HttpResponse putResponse=httpClient.execute(putRequest);
    String entity=EntityUtils.toString(putResponse.getEntity());
    int statusCode=putResponse.getStatusLine().getStatusCode();
    if (statusCode == 200) {
      return 200;
    }
 else     if (statusCode == 422) {
      StringBuilder sb=new StringBuilder();
      for (      String s : XmlParser.parseErrors(entity)) {
        sb.append(s);
        sb.append(""String_Node_Str"");
      }
      throw new HttpSenderServerErrorException(sb.toString());
    }
 else {
      Log.d(""String_Node_Str"",modificationXml);
      Log.d(""String_Node_Str"",putRequest.getURI().toASCIIString());
      Log.d(""String_Node_Str"",putResponse.getStatusLine().toString());
      throw new HttpSenderServerErrorException(putResponse.getStatusLine().getReasonPhrase());
    }
  }
 catch (  IOException e) {
    putRequest.abort();
    e.printStackTrace();
    throw new HttpSenderException(""String_Node_Str"");
  }
}",0.9246046340566384
179624,"public static Integer sendUpdateAccountXML(SharedPreferences prefs,String accountModificationXml) throws XMLParserException, HttpSenderServerErrorException, HttpSenderException, UnsupportedEncodingException {
  UsernamePasswordCredentials credentials=getCredentialsFromPreferences(prefs);
  String domain=getAccountDomain(prefs);
  HttpPut putRequest=new HttpPut(HTTPS_PREFIX + domain + ACCOUNT_UPDATE_HTTP_SUFFIX);
  return executeModifyPutRequst(accountModificationXml,credentials,putRequest);
}","public static int sendUpdateAccountXML(SharedPreferences prefs,String accountModificationXml) throws XMLParserException, HttpSenderServerErrorException, HttpSenderException, UnsupportedEncodingException {
  UsernamePasswordCredentials credentials=getCredentialsFromPreferences(prefs);
  String domain=getAccountDomain(prefs);
  HttpPut putRequest=new HttpPut(HTTPS_PREFIX + domain + ACCOUNT_UPDATE_HTTP_SUFFIX);
  return executeModifyPutRequst(accountModificationXml,credentials,putRequest);
}",0.98989898989899
179625,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.create_new_server_environment_layout);
  repoId=getIntent().getIntExtra(Constants.REPOSITORY_ID,0);
  nameEditText=(EditText)findViewById(R.id.nameLabel);
  automaticCheckBox=(CheckBox)findViewById(R.id.is_automatic_checkbox);
  branchName=(EditText)findViewById(R.id.branch_name_edittext);
  findViewById(R.id.createButton).setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      new SendNewServerEnvironment(getApplicationContext()).execute();
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.create_new_server_environment_layout);
  repoId=getIntent().getIntExtra(Constants.REPOSITORY_ID,0);
  nameEditText=(EditText)findViewById(R.id.nameEditText);
  automaticCheckBox=(CheckBox)findViewById(R.id.is_automatic_checkbox);
  branchName=(EditText)findViewById(R.id.branch_name_edittext);
  findViewById(R.id.createButton).setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      new SendNewServerEnvironment(CreateNewServerEnvironmentActivity.this).execute();
    }
  }
);
}",0.9440504334121356
179626,"@Override public void onClick(View v){
  new SendNewServerEnvironment(getApplicationContext()).execute();
}","@Override public void onClick(View v){
  new SendNewServerEnvironment(CreateNewServerEnvironmentActivity.this).execute();
}",0.8
179627,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.repository_deployments_layout);
  repository=getIntent().getParcelableExtra(Constants.REPOSITORY);
  ((TextView)findViewById(R.id.repoTitle)).setText(repository.getTitle());
  findViewById(R.id.colorLabel).getBackground().setLevel(repository.getColorLabelNo());
  mReleasesList=(ListView)findViewById(R.id.releases_list);
  mServersList=(ExpandableListView)findViewById(R.id.servers_list);
  releasesButton=(Button)findViewById(R.id.releases_button);
  releasesButton.setOnClickListener(this);
  serversButton=(Button)findViewById(R.id.servers_button);
  serversButton.setOnClickListener(this);
  releasesButton.setSelected(true);
  serversButton.setSelected(false);
  mReleasesAdapter=new ReleasesAdapter(this,R.layout.releases_entry,mReleaseArray);
  mReleasesList.setAdapter(mReleasesAdapter);
  mServersAdapter=new ServersAdapter(this,R.layout.environments_list_entry,mServersArray);
  mServersList.setAdapter(mServersAdapter);
  new DownloadReleaseListTask(this).execute();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.repository_deployments_layout);
  repository=getIntent().getParcelableExtra(Constants.REPOSITORY);
  ((TextView)findViewById(R.id.repoTitle)).setText(repository.getTitle());
  findViewById(R.id.colorLabel).getBackground().setLevel(repository.getColorLabelNo());
  mReleasesList=(ListView)findViewById(R.id.releases_list);
  mServersList=(ExpandableListView)findViewById(R.id.servers_list);
  releasesButton=(Button)findViewById(R.id.releases_button);
  releasesButton.setOnClickListener(this);
  serversButton=(Button)findViewById(R.id.servers_button);
  serversButton.setOnClickListener(this);
  releasesButton.setSelected(true);
  serversButton.setSelected(false);
  View footerView=((LayoutInflater)getApplicationContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.add_server_environment_footer,null,false);
  footerView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(getApplicationContext(),CreateNewServerEnvironmentActivity.class);
      intent.putExtra(Constants.REPOSITORY_ID,repository.getId());
      startActivity(intent);
    }
  }
);
  mServersList.addFooterView(footerView);
  mReleasesAdapter=new ReleasesAdapter(this,R.layout.releases_entry,mReleaseArray);
  mReleasesList.setAdapter(mReleasesAdapter);
  mServersAdapter=new ServersAdapter(this,R.layout.environments_list_entry,mServersArray);
  mServersList.setAdapter(mServersAdapter);
  new DownloadReleaseListTask(this).execute();
}",0.809366995975119
179628,"@Override public int update(Uri uri,ContentValues values,String selection,String[] selectionArgs){
  return db.getWritableDatabase().update(Mnem.TABLE_NAME,values,selection,selectionArgs);
}","@Override public int update(Uri uri,ContentValues values,String selection,String[] selectionArgs){
  selection=Mnem._ID + ""String_Node_Str"" + uri.getLastPathSegment();
  return db.getWritableDatabase().update(Mnem.TABLE_NAME,values,selection,selectionArgs);
}",0.8463251670378619
179629,"@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  if (oldVersion < DATABASE_VERSION) {
    if (oldVersion > 11 && oldVersion < 13) {
      db.execSQL(DATABASE_CREATE_PLACE);
    }
 else     if (oldVersion < 14) {
      db.execSQL(""String_Node_Str"" + CON_TABLE + ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + REMINDER_TABLE + ""String_Node_Str"");
    }
 else {
      db.execSQL(""String_Node_Str"" + CON_TABLE);
      db.execSQL(""String_Node_Str"" + ANNOTATION_TABLE);
      db.execSQL(""String_Node_Str"" + LINE_TABLE);
      if (oldVersion > 4 && oldVersion != 6)       db.execSQL(""String_Node_Str"" + FAVORITE_TABLE);
      if (oldVersion > 5 && oldVersion != 6)       db.execSQL(""String_Node_Str"" + REMINDER_TABLE);
      this.onCreate(db);
    }
  }
}","@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  if (oldVersion < DATABASE_VERSION) {
    if (oldVersion > 11 && oldVersion < 13) {
      db.execSQL(DATABASE_CREATE_PLACE);
      db.execSQL(""String_Node_Str"" + CON_TABLE + ""String_Node_Str"");
      db.execSQL(""String_Node_Str"" + REMINDER_TABLE + ""String_Node_Str"");
    }
 else {
      db.execSQL(""String_Node_Str"" + CON_TABLE);
      db.execSQL(""String_Node_Str"" + ANNOTATION_TABLE);
      db.execSQL(""String_Node_Str"" + LINE_TABLE);
      if (oldVersion > 4 && oldVersion != 6)       db.execSQL(""String_Node_Str"" + FAVORITE_TABLE);
      if (oldVersion > 5 && oldVersion != 6)       db.execSQL(""String_Node_Str"" + REMINDER_TABLE);
      this.onCreate(db);
    }
  }
}",0.9747899159663864
179630,"public AboutDialog(Activity context){
  this.context=context;
  AlertDialog.Builder ab;
  if (Build.VERSION.SDK_INT > 10) {
    ab=new AlertDialog.Builder(context,AlertDialog.THEME_DEVICE_DEFAULT_LIGHT);
  }
 else {
    ab=new AlertDialog.Builder(context);
  }
  View v=LayoutInflater.from(context).inflate(R.layout.about_dialog,null);
  ab.setTitle(R.string.appNameAbout);
  ab.setPositiveButton(""String_Node_Str"",new OkListener());
  ab.setNeutralButton(""String_Node_Str"",new DonateListener());
  ab.setNegativeButton(""String_Node_Str"",new FeedbackListener());
  ImageView follow=((ImageView)v.findViewById(R.id.iFollow));
  follow.setOnClickListener(new FollowListener());
  ab.setIcon(R.drawable.icon);
  ab.setView(v);
  dialog=ab.create();
  dialog.show();
  mHelper=new IabHelper(AboutDialog.this.context,publicKey);
  mHelper.startSetup(new IabHelper.OnIabSetupFinishedListener(){
    public void onIabSetupFinished(    IabResult result){
      if (!result.isSuccess()) {
        Log.d(""String_Node_Str"",""String_Node_Str"" + result);
      }
      mHelper.queryInventoryAsync(new IabHelper.QueryInventoryFinishedListener(){
        @Override public void onQueryInventoryFinished(        IabResult result,        Inventory inventory){
          Log.d(""String_Node_Str"",""String_Node_Str"");
          if (mHelper == null)           return;
          if (result.isFailure()) {
            return;
          }
          Log.d(""String_Node_Str"",""String_Node_Str"");
          Purchase gasPurchase=inventory.getPurchase(sku);
          if (gasPurchase != null) {
            Log.d(""String_Node_Str"",""String_Node_Str"");
            mHelper.consumeAsync(inventory.getPurchase(sku),null);
            return;
          }
        }
      }
);
    }
  }
);
  mHelper.enableDebugLogging(true);
}","public AboutDialog(Activity context){
  this.context=context;
}",0.0680713128038897
179631,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  this.setContentView(R.layout.neighbourhood_activity);
  this.place=(Place)this.getIntent().getSerializableExtra(""String_Node_Str"");
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  TextView title=(TextView)findViewById(R.id.annot_title);
  title.setText(place.getName());
  TextView tAddress=(TextView)findViewById(R.id.tAddress);
  if (place.getAddress() != null) {
    tAddress.setText(StringUtils.join(place.getAddress(),""String_Node_Str""));
  }
 else {
    tAddress.setVisibility(View.GONE);
  }
  TextView tDescription=(TextView)findViewById(R.id.tDescription);
  if (place.getDescription() != null) {
    tDescription.setText(place.getDescription());
  }
 else {
    tDescription.setVisibility(View.GONE);
  }
  TextView tUrl=(TextView)findViewById(R.id.tUrl);
  if (place.getUrl() != null) {
    tUrl.setText(place.getUrl());
  }
 else {
    tUrl.setVisibility(View.GONE);
  }
  if (place.getGps() != null) {
    LinearLayout header=(LinearLayout)findViewById(R.id.lPlaceHeader);
    header.setClickable(true);
    header.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (place.getGps() != null) {
          String uri=String.format(Locale.ENGLISH,""String_Node_Str"",place.getGps().lat,place.getGps().lon,place.getName());
          Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(uri));
          startActivity(intent);
        }
      }
    }
);
  }
  this.setupOpening();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  this.setContentView(R.layout.neighbourhood_activity);
  this.place=(Place)this.getIntent().getSerializableExtra(""String_Node_Str"");
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  TextView title=(TextView)findViewById(R.id.annot_title);
  title.setText(place.getName());
  TextView tAddress=(TextView)findViewById(R.id.tAddress);
  if (place.getAddress() != null) {
    tAddress.setText(StringUtils.join(place.getAddress(),""String_Node_Str""));
  }
 else {
    tAddress.setVisibility(View.GONE);
  }
  TextView tDescription=(TextView)findViewById(R.id.tDescription);
  if (place.getDescription() != null) {
    tDescription.setText(place.getDescription());
  }
 else {
    tDescription.setVisibility(View.GONE);
  }
  TextView tUrl=(TextView)findViewById(R.id.tUrl);
  if (place.getUrl() != null) {
    tUrl.setText(place.getUrl());
  }
 else {
    tUrl.setVisibility(View.GONE);
  }
  if (place.getGps() != null) {
    LinearLayout header=(LinearLayout)findViewById(R.id.lPlaceHeader);
    header.setClickable(true);
    header.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (place.getGps() != null) {
          String uri=String.format(Locale.ENGLISH,""String_Node_Str"",place.getGps().lat,place.getGps().lon,place.getName());
          Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(uri));
          PackageManager manager=getPackageManager();
          List<ResolveInfo> infos=manager.queryIntentActivities(intent,0);
          if (infos.size() > 0) {
            startActivity(intent);
          }
        }
      }
    }
);
  }
  this.setupOpening();
}",0.9420685471640886
179632,"@Override public void onClick(View v){
  if (place.getGps() != null) {
    String uri=String.format(Locale.ENGLISH,""String_Node_Str"",place.getGps().lat,place.getGps().lon,place.getName());
    Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(uri));
    startActivity(intent);
  }
}","@Override public void onClick(View v){
  if (place.getGps() != null) {
    String uri=String.format(Locale.ENGLISH,""String_Node_Str"",place.getGps().lat,place.getGps().lon,place.getName());
    Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(uri));
    PackageManager manager=getPackageManager();
    List<ResolveInfo> infos=manager.queryIntentActivities(intent,0);
    if (infos.size() > 0) {
      startActivity(intent);
    }
  }
}",0.7779310344827586
179633,"@Override public void onClick(View v){
switch (v.getId()) {
case R.id.tdRestaurants:
    Intent in2=new Intent(parentActivity,NeighbourhoodListActivity.class);
  parentActivity.startActivity(in2);
break;
case R.id.tdMap:
Convention event=provider.getCon();
if (event.getGps() != null) {
String uri=String.format(Locale.ENGLISH,""String_Node_Str"",event.getGps().lat,event.getGps().lon);
Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(uri));
parentActivity.startActivity(intent);
}
break;
case R.id.tdWeb:
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(provider.getCon().getUrl()));
parentActivity.startActivity(browserIntent);
break;
case R.id.tdAnother:
Intent intent=new Intent(parentActivity,WelcomeActivity.class);
intent.putExtra(""String_Node_Str"",true);
parentActivity.startActivity(intent);
break;
case R.id.tdReminders:
Intent in=new Intent(parentActivity,ReminderList.class);
parentActivity.startActivity(in);
break;
case R.id.tdSettings:
Intent i=new Intent(parentActivity,Preferences.class);
parentActivity.startActivity(i);
break;
case R.id.tdAbout:
parentActivity.setActivityResultListener(new AboutDialog(parentActivity));
break;
}
this.parentActivity.closeDrawer();
}","@Override public void onClick(View v){
switch (v.getId()) {
case R.id.tdRestaurants:
    Intent in2=new Intent(parentActivity,NeighbourhoodListActivity.class);
  parentActivity.startActivity(in2);
break;
case R.id.tdMap:
Convention event=provider.getCon();
if (event.getGps() != null) {
String uri=String.format(Locale.ENGLISH,""String_Node_Str"",event.getGps().lat,event.getGps().lon);
Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(uri));
PackageManager manager=parentActivity.getPackageManager();
List<ResolveInfo> infos=manager.queryIntentActivities(intent,0);
if (infos.size() > 0) {
parentActivity.startActivity(intent);
}
}
break;
case R.id.tdWeb:
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(provider.getCon().getUrl()));
parentActivity.startActivity(browserIntent);
break;
case R.id.tdAnother:
Intent intent=new Intent(parentActivity,WelcomeActivity.class);
intent.putExtra(""String_Node_Str"",true);
parentActivity.startActivity(intent);
break;
case R.id.tdReminders:
Intent in=new Intent(parentActivity,ReminderList.class);
parentActivity.startActivity(in);
break;
case R.id.tdSettings:
Intent i=new Intent(parentActivity,Preferences.class);
parentActivity.startActivity(i);
break;
case R.id.tdAbout:
AboutDialog aboutDialog=new AboutDialog(parentActivity);
parentActivity.setActivityResultListener(aboutDialog);
aboutDialog.show();
break;
}
this.parentActivity.closeDrawer();
}",0.8355691835952472
179634,"@Override protected void onException(Exception e) throws RuntimeException {
  if (e instanceof RetrofitError) {
    if (((RetrofitError)e).isNetworkError()) {
      Toast.makeText(listener.getActivity(),R.string.networkError,Toast.LENGTH_LONG).show();
      return;
    }
 else     if (((RetrofitError)e).getResponse() != null && ((RetrofitError)e).getResponse().getStatus() >= 500) {
      Toast.makeText(listener.getActivity(),R.string.serverError,Toast.LENGTH_LONG).show();
      return;
    }
  }
  super.onException(e);
  listener.onTaskErrored(this);
}","@Override protected void onException(Exception e) throws RuntimeException {
  if (e instanceof RetrofitError) {
    if (((RetrofitError)e).isNetworkError()) {
      Toast.makeText(listener.getActivity(),R.string.networkError,Toast.LENGTH_LONG).show();
    }
 else     if (((RetrofitError)e).getResponse() != null && ((RetrofitError)e).getResponse().getStatus() >= 500) {
      Toast.makeText(listener.getActivity(),R.string.serverError,Toast.LENGTH_LONG).show();
    }
  }
  super.onException(e);
  listener.onTaskErrored(this);
}",0.8694852941176471
179635,"@Override protected List<?> doInBackground(String... params){
  List<Annotation> messages=new ArrayList<Annotation>();
  XmlPullParser pull=Xml.newPullParser();
  Annotation annotation=null;
  try {
    try {
      URL url=new URL(params[0]);
      HttpURLConnection conn=(HttpURLConnection)url.openConnection();
      conn.setRequestProperty(""String_Node_Str"",Build.MODEL + ""String_Node_Str"" + Build.PRODUCT+ ""String_Node_Str""+ CondroidActivity.getUniqueDeviceIdentifier(parentActivity));
      if (params.length > 1) {
        conn.setRequestProperty(""String_Node_Str"",params[1]);
        conn.setRequestProperty(""String_Node_Str"",params[2]);
      }
      InputStream is=conn.getInputStream();
      try {
        int s=Integer.parseInt(conn.getHeaderField(""String_Node_Str""));
        if (s < 150) {
          resultCode=1;
          return messages;
        }
      }
 catch (      NumberFormatException e) {
      }
      String fullSign=conn.getHeaderField(""String_Node_Str"");
      if (fullSign != null && fullSign.trim().equals(""String_Node_Str"")) {
        resultCode=2;
      }
      pull.setInput(is,null);
    }
 catch (    IOException ex) {
      Log.e(""String_Node_Str"",""String_Node_Str"",ex);
      throw new XMLProccessException(""String_Node_Str"",ex);
    }
catch (    Exception ex) {
      throw new XMLProccessException(""String_Node_Str"",ex);
    }
    int eventType;
    this.publishProgress(-1);
    try {
      eventType=pull.getEventType();
    }
 catch (    XmlPullParserException e) {
      resultCode=-1;
      throw new XMLProccessException(""String_Node_Str"",e);
    }
    int counter=0;
    while (eventType != XmlPullParser.END_DOCUMENT) {
      if (this.isCancelled()) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        return null;
      }
switch (eventType) {
case XmlPullParser.START_DOCUMENT:
        break;
case XmlPullParser.START_TAG:
      String name=pull.getName();
    if (name.equalsIgnoreCase(""String_Node_Str"")) {
      if (pull.getAttributeCount() > 0) {
        for (int i=0; i < pull.getAttributeCount(); i++) {
          if (pull.getAttributeName(i).equalsIgnoreCase(""String_Node_Str"")) {
            try {
              int x=Integer.parseInt(pull.getAttributeValue(i));
              if (x > 0)               this.publishProgress(0,x);
            }
 catch (            NumberFormatException e) {
            }
          }
          if (pull.getAttributeName(i).equalsIgnoreCase(""String_Node_Str"")) {
            DateTimeFormatter format=ISODateTimeFormat.dateTimeNoMillis();
            try {
              DataProvider.getInstance(parentActivity).getCon().setLastUpdate(format.parseDateTime(pull.getAttributeValue(i).trim()).toDate());
            }
 catch (            Exception e) {
              Log.e(""String_Node_Str"",""String_Node_Str"",e);
            }
          }
        }
      }
    }
  if (name.equalsIgnoreCase(""String_Node_Str"")) {
    annotation=new Annotation();
  }
 else {
    if (name.equalsIgnoreCase(""String_Node_Str"")) {
      annotation.setPid(pull.nextText().trim());
    }
    if (name.equalsIgnoreCase(""String_Node_Str"")) {
      annotation.setAuthor(pull.nextText().trim());
    }
    if (name.equalsIgnoreCase(""String_Node_Str"")) {
      annotation.setTitle(Html.fromHtml(pull.nextText().trim()).toString());
    }
    if (name.equalsIgnoreCase(""String_Node_Str"")) {
      annotation.setType(pull.nextText().trim());
    }
    if (name.equalsIgnoreCase(""String_Node_Str"")) {
      annotation.setProgramLine(pull.nextText().trim());
    }
    if (name.equalsIgnoreCase(""String_Node_Str"")) {
      annotation.setLocation(pull.nextText().trim());
    }
    if (name.equalsIgnoreCase(""String_Node_Str"")) {
      annotation.setAnnotation(Html.fromHtml(pull.nextText().trim()).toString());
    }
    if (name.equalsIgnoreCase(""String_Node_Str"")) {
      annotation.setStartTime(pull.nextText().trim());
    }
    if (name.equalsIgnoreCase(""String_Node_Str"")) {
      annotation.setEndTime(pull.nextText().trim());
    }
  }
break;
case XmlPullParser.END_TAG:
name=pull.getName();
if (name.equalsIgnoreCase(""String_Node_Str"") && annotation != null) {
messages.add(annotation);
this.publishProgress(counter++);
}
break;
default :
break;
}
eventType=pull.next();
}
}
 catch (Exception e) {
resultCode=-1;
Log.e(""String_Node_Str"",""String_Node_Str"",e);
backgroundException=e;
return null;
}
return messages;
}","@Override protected List<?> doInBackground(String... params){
  List<Annotation> messages=new ArrayList<Annotation>();
  XmlPullParser pull=Xml.newPullParser();
  Annotation annotation=null;
  try {
    try {
      URL url=new URL(params[0]);
      HttpURLConnection conn=(HttpURLConnection)url.openConnection();
      conn.setRequestProperty(""String_Node_Str"",Build.MODEL + ""String_Node_Str"" + Build.PRODUCT+ ""String_Node_Str""+ CondroidActivity.getUniqueDeviceIdentifier(parentActivity));
      if (params.length > 1 && params[1] != null) {
        conn.setRequestProperty(""String_Node_Str"",params[1]);
        conn.setRequestProperty(""String_Node_Str"",params[2]);
      }
      InputStream is=conn.getInputStream();
      try {
        int s=Integer.parseInt(conn.getHeaderField(""String_Node_Str""));
        if (s < 150) {
          resultCode=1;
          return messages;
        }
      }
 catch (      NumberFormatException e) {
      }
      String fullSign=conn.getHeaderField(""String_Node_Str"");
      if (fullSign != null && fullSign.trim().equals(""String_Node_Str"")) {
        resultCode=2;
      }
      pull.setInput(is,null);
    }
 catch (    IOException ex) {
      Log.e(""String_Node_Str"",""String_Node_Str"",ex);
      throw new XMLProccessException(""String_Node_Str"",ex);
    }
catch (    Exception ex) {
      throw new XMLProccessException(""String_Node_Str"",ex);
    }
    int eventType;
    this.publishProgress(-1);
    try {
      eventType=pull.getEventType();
    }
 catch (    XmlPullParserException e) {
      resultCode=-1;
      throw new XMLProccessException(""String_Node_Str"",e);
    }
    int counter=0;
    while (eventType != XmlPullParser.END_DOCUMENT) {
      if (this.isCancelled()) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        return null;
      }
switch (eventType) {
case XmlPullParser.START_DOCUMENT:
        break;
case XmlPullParser.START_TAG:
      String name=pull.getName();
    if (name.equalsIgnoreCase(""String_Node_Str"")) {
      if (pull.getAttributeCount() > 0) {
        for (int i=0; i < pull.getAttributeCount(); i++) {
          if (pull.getAttributeName(i).equalsIgnoreCase(""String_Node_Str"")) {
            try {
              int x=Integer.parseInt(pull.getAttributeValue(i));
              if (x > 0)               this.publishProgress(0,x);
            }
 catch (            NumberFormatException e) {
            }
          }
          if (pull.getAttributeName(i).equalsIgnoreCase(""String_Node_Str"")) {
            DateTimeFormatter format=ISODateTimeFormat.dateTimeNoMillis();
            try {
              DataProvider.getInstance(parentActivity).getCon().setLastUpdate(format.parseDateTime(pull.getAttributeValue(i).trim()).toDate());
            }
 catch (            Exception e) {
              Log.e(""String_Node_Str"",""String_Node_Str"",e);
            }
          }
        }
      }
    }
  if (name.equalsIgnoreCase(""String_Node_Str"")) {
    annotation=new Annotation();
  }
 else {
    if (name.equalsIgnoreCase(""String_Node_Str"")) {
      annotation.setPid(pull.nextText().trim());
    }
    if (name.equalsIgnoreCase(""String_Node_Str"")) {
      annotation.setAuthor(pull.nextText().trim());
    }
    if (name.equalsIgnoreCase(""String_Node_Str"")) {
      annotation.setTitle(Html.fromHtml(pull.nextText().trim()).toString());
    }
    if (name.equalsIgnoreCase(""String_Node_Str"")) {
      annotation.setType(pull.nextText().trim());
    }
    if (name.equalsIgnoreCase(""String_Node_Str"")) {
      annotation.setProgramLine(pull.nextText().trim());
    }
    if (name.equalsIgnoreCase(""String_Node_Str"")) {
      annotation.setLocation(pull.nextText().trim());
    }
    if (name.equalsIgnoreCase(""String_Node_Str"")) {
      annotation.setAnnotation(Html.fromHtml(pull.nextText().trim()).toString());
    }
    if (name.equalsIgnoreCase(""String_Node_Str"")) {
      annotation.setStartTime(pull.nextText().trim());
    }
    if (name.equalsIgnoreCase(""String_Node_Str"")) {
      annotation.setEndTime(pull.nextText().trim());
    }
  }
break;
case XmlPullParser.END_TAG:
name=pull.getName();
if (name.equalsIgnoreCase(""String_Node_Str"") && annotation != null) {
messages.add(annotation);
this.publishProgress(counter++);
}
break;
default :
break;
}
eventType=pull.next();
}
}
 catch (Exception e) {
resultCode=-1;
Log.e(""String_Node_Str"",""String_Node_Str"",e);
backgroundException=e;
return null;
}
return messages;
}",0.9976122797043776
179636,"public Convention getCon(){
  if (this.con != null) {
    return con;
  }
  Cursor c=this.mDatabase.query(CondroidDatabase.CON_TABLE,null,null,null,null,null);
  Convention co=new Convention();
  while (c.moveToNext()) {
    co.setCid(c.getInt(c.getColumnIndex(""String_Node_Str"")));
    co.setDataUrl(c.getString(c.getColumnIndex(""String_Node_Str"")));
    co.setDate(c.getString(c.getColumnIndex(""String_Node_Str"")));
    co.setIconUrl(c.getString(c.getColumnIndex(""String_Node_Str"")));
    co.setName(c.getString(c.getColumnIndex(""String_Node_Str"")));
    co.setMessage(c.getString(c.getColumnIndex(""String_Node_Str"")));
    co.setLocationsFile(c.getString(c.getColumnIndex(""String_Node_Str"")));
    SimpleDateFormat format=new SimpleDateFormat(""String_Node_Str"",new Locale(""String_Node_Str"",""String_Node_Str""));
    try {
      co.setLastUpdate(format.parse(c.getString(c.getColumnIndex(""String_Node_Str""))));
    }
 catch (    Exception e) {
      Log.e(""String_Node_Str"",""String_Node_Str"",e);
      co.setLastUpdate(new Date());
    }
  }
  c.close();
  this.con=co;
  return co;
}","public Convention getCon(){
  if (this.con != null) {
    return con;
  }
  Cursor c=this.mDatabase.query(CondroidDatabase.CON_TABLE,null,null,null,null,null);
  Convention co=new Convention();
  while (c.moveToNext()) {
    co.setCid(c.getInt(c.getColumnIndex(""String_Node_Str"")));
    co.setDataUrl(c.getString(c.getColumnIndex(""String_Node_Str"")));
    co.setDate(c.getString(c.getColumnIndex(""String_Node_Str"")));
    co.setIconUrl(c.getString(c.getColumnIndex(""String_Node_Str"")));
    co.setName(c.getString(c.getColumnIndex(""String_Node_Str"")));
    co.setMessage(c.getString(c.getColumnIndex(""String_Node_Str"")));
    co.setLocationsFile(c.getString(c.getColumnIndex(""String_Node_Str"")));
    DateTimeFormatter format=DateTimeFormat.forPattern(""String_Node_Str"").withZoneUTC();
    try {
      co.setLastUpdate(format.parseDateTime(c.getString(c.getColumnIndex(""String_Node_Str""))).toDate());
    }
 catch (    Exception e) {
      Log.e(""String_Node_Str"",""String_Node_Str"",e);
      co.setLastUpdate(new Date());
    }
  }
  c.close();
  this.con=co;
  return co;
}",0.920796665122742
179637,"@Override protected List<?> doInBackground(List<?>... params){
  @SuppressWarnings(""String_Node_Str"") List<Annotation> items=((List<Annotation>)params[0]);
  this.publishProgress(items.size());
  int counter=0;
  if (items.size() > 0) {
    SQLiteDatabase db=this.db.getWritableDatabase();
    if (fullInsert)     db.insert(""String_Node_Str"",null,con.getContentValues());
    HashMap<String,Integer> lines=new HashMap<String,Integer>();
    if (!fullInsert) {
      HashMap<Integer,String> l=DataProvider.getInstance(null).getProgramLines();
      for (      Integer i : l.keySet()) {
        lines.put(l.get(i),i);
      }
    }
    try {
      db.beginTransaction();
      for (      Annotation annotation : items) {
        if (!lines.containsKey(annotation.getProgramLine())) {
          ContentValues cv=new ContentValues();
          cv.put(""String_Node_Str"",annotation.getProgramLine());
          cv.put(""String_Node_Str"",con.getCid());
          int key=(int)db.replace(""String_Node_Str"",null,cv);
          lines.put(annotation.getProgramLine(),key);
        }
        this.publishProgress(counter++);
        annotation.setLid(lines.get(annotation.getProgramLine()));
        if (this.isCancelled()) {
          Log.d(""String_Node_Str"",""String_Node_Str"");
          db.endTransaction();
          return null;
        }
      }
      for (      Annotation annotation : items) {
        ContentValues cv=annotation.getContentValues();
        cv.put(""String_Node_Str"",con.getCid());
        db.replaceOrThrow(""String_Node_Str"",null,cv);
        this.publishProgress(counter++);
        if (this.isCancelled()) {
          Log.d(""String_Node_Str"",""String_Node_Str"");
          db.endTransaction();
          return null;
        }
      }
      db.setTransactionSuccessful();
    }
 catch (    SQLException e) {
      Log.e(""String_Node_Str"",""String_Node_Str"",e);
    }
    db.endTransaction();
  }
  return null;
}","@Override protected List<?> doInBackground(List<?>... params){
  @SuppressWarnings(""String_Node_Str"") List<Annotation> items=((List<Annotation>)params[0]);
  this.publishProgress(items.size());
  int counter=0;
  if (items.size() > 0) {
    SQLiteDatabase db=this.db.getWritableDatabase();
    db.replace(""String_Node_Str"",null,con.getContentValues());
    HashMap<String,Integer> lines=new HashMap<String,Integer>();
    if (!fullInsert) {
      HashMap<Integer,String> l=DataProvider.getInstance(null).getProgramLines();
      for (      Integer i : l.keySet()) {
        lines.put(l.get(i),i);
      }
    }
    try {
      db.beginTransaction();
      for (      Annotation annotation : items) {
        if (!lines.containsKey(annotation.getProgramLine())) {
          ContentValues cv=new ContentValues();
          cv.put(""String_Node_Str"",annotation.getProgramLine());
          cv.put(""String_Node_Str"",con.getCid());
          int key=(int)db.replace(""String_Node_Str"",null,cv);
          lines.put(annotation.getProgramLine(),key);
        }
        this.publishProgress(counter++);
        annotation.setLid(lines.get(annotation.getProgramLine()));
        if (this.isCancelled()) {
          Log.d(""String_Node_Str"",""String_Node_Str"");
          db.endTransaction();
          return null;
        }
      }
      for (      Annotation annotation : items) {
        ContentValues cv=annotation.getContentValues();
        cv.put(""String_Node_Str"",con.getCid());
        db.replaceOrThrow(""String_Node_Str"",null,cv);
        this.publishProgress(counter++);
        if (this.isCancelled()) {
          Log.d(""String_Node_Str"",""String_Node_Str"");
          db.endTransaction();
          return null;
        }
      }
      db.setTransactionSuccessful();
    }
 catch (    SQLException e) {
      Log.e(""String_Node_Str"",""String_Node_Str"",e);
    }
    db.endTransaction();
  }
  return null;
}",0.991381561765474
179638,"@Override protected List<?> doInBackground(String... params){
  List<Annotation> messages=new ArrayList<Annotation>();
  XmlPullParser pull=Xml.newPullParser();
  Annotation annotation=null;
  try {
    try {
      URL url=new URL(params[0]);
      HttpURLConnection conn=(HttpURLConnection)url.openConnection();
      if (params.length > 1) {
        conn.setRequestProperty(""String_Node_Str"",params[1]);
      }
      InputStream is=conn.getInputStream();
      try {
        int s=Integer.parseInt(conn.getHeaderField(""String_Node_Str""));
        if (s < 150) {
          resultCode=1;
        }
      }
 catch (      NumberFormatException e) {
      }
      pull.setInput(is,null);
    }
 catch (    Exception ex) {
      throw new XMLProccessException(""String_Node_Str"",ex);
    }
    int eventType;
    this.publishProgress(-1);
    try {
      eventType=pull.getEventType();
    }
 catch (    XmlPullParserException e) {
      resultCode=-1;
      throw new XMLProccessException(""String_Node_Str"",e);
    }
    try {
      int counter=0;
      while (eventType != XmlPullParser.END_DOCUMENT) {
        if (this.isCancelled()) {
          Log.d(""String_Node_Str"",""String_Node_Str"");
          return null;
        }
switch (eventType) {
case XmlPullParser.START_DOCUMENT:
          break;
case XmlPullParser.START_TAG:
        String name=pull.getName();
      if (name.equalsIgnoreCase(""String_Node_Str"")) {
        if (pull.getAttributeCount() > 0) {
          for (int i=0; i < pull.getAttributeCount(); i++) {
            if (pull.getAttributeName(i).equalsIgnoreCase(""String_Node_Str"")) {
              try {
                int x=Integer.parseInt(pull.getAttributeValue(i));
                if (x > 0)                 this.publishProgress(0,x);
              }
 catch (              NumberFormatException e) {
              }
            }
            if (pull.getAttributeName(i).equalsIgnoreCase(""String_Node_Str"")) {
              SimpleDateFormat format=new SimpleDateFormat(""String_Node_Str"");
              try {
                DataProvider.getInstance(parentActivity).getCon().setLastUpdate(format.parse(pull.getAttributeValue(i).trim()));
              }
 catch (              ParseException e) {
                Log.e(""String_Node_Str"",""String_Node_Str"",e);
              }
            }
          }
        }
      }
    if (name.equalsIgnoreCase(""String_Node_Str"")) {
      annotation=new Annotation();
    }
 else {
      if (name.equalsIgnoreCase(""String_Node_Str"")) {
        annotation.setPid(pull.nextText().trim());
      }
      if (name.equalsIgnoreCase(""String_Node_Str"")) {
        annotation.setAuthor(pull.nextText().trim());
      }
      if (name.equalsIgnoreCase(""String_Node_Str"")) {
        annotation.setTitle(Html.fromHtml(pull.nextText().trim()).toString());
      }
      if (name.equalsIgnoreCase(""String_Node_Str"")) {
        annotation.setType(pull.nextText().trim());
      }
      if (name.equalsIgnoreCase(""String_Node_Str"")) {
        annotation.setProgramLine(pull.nextText().trim());
      }
      if (name.equalsIgnoreCase(""String_Node_Str"")) {
        annotation.setLocation(pull.nextText().trim());
      }
      if (name.equalsIgnoreCase(""String_Node_Str"")) {
        annotation.setAnnotation(Html.fromHtml(pull.nextText().trim()).toString());
      }
      if (name.equalsIgnoreCase(""String_Node_Str"")) {
        annotation.setStartTime(pull.nextText().trim());
      }
      if (name.equalsIgnoreCase(""String_Node_Str"")) {
        annotation.setEndTime(pull.nextText().trim());
      }
    }
  break;
case XmlPullParser.END_TAG:
name=pull.getName();
if (name.equalsIgnoreCase(""String_Node_Str"") && annotation != null) {
messages.add(annotation);
this.publishProgress(counter++);
}
break;
default :
break;
}
eventType=pull.next();
}
}
 catch (Exception e) {
resultCode=-1;
throw new XMLProccessException(""String_Node_Str"",e);
}
}
 catch (XMLProccessException e) {
resultCode=-1;
Log.e(""String_Node_Str"",""String_Node_Str"",e);
throw e;
}
return messages;
}","@Override protected List<?> doInBackground(String... params){
  List<Annotation> messages=new ArrayList<Annotation>();
  XmlPullParser pull=Xml.newPullParser();
  Annotation annotation=null;
  try {
    try {
      URL url=new URL(params[0]);
      HttpURLConnection conn=(HttpURLConnection)url.openConnection();
      if (params.length > 1) {
        conn.setRequestProperty(""String_Node_Str"",params[1]);
      }
      InputStream is=conn.getInputStream();
      try {
        int s=Integer.parseInt(conn.getHeaderField(""String_Node_Str""));
        if (s < 150) {
          resultCode=1;
        }
      }
 catch (      NumberFormatException e) {
      }
      pull.setInput(is,null);
    }
 catch (    Exception ex) {
      throw new XMLProccessException(""String_Node_Str"",ex);
    }
    int eventType;
    this.publishProgress(-1);
    try {
      eventType=pull.getEventType();
    }
 catch (    XmlPullParserException e) {
      resultCode=-1;
      throw new XMLProccessException(""String_Node_Str"",e);
    }
    try {
      int counter=0;
      while (eventType != XmlPullParser.END_DOCUMENT) {
        if (this.isCancelled()) {
          Log.d(""String_Node_Str"",""String_Node_Str"");
          return null;
        }
switch (eventType) {
case XmlPullParser.START_DOCUMENT:
          break;
case XmlPullParser.START_TAG:
        String name=pull.getName();
      if (name.equalsIgnoreCase(""String_Node_Str"")) {
        if (pull.getAttributeCount() > 0) {
          for (int i=0; i < pull.getAttributeCount(); i++) {
            if (pull.getAttributeName(i).equalsIgnoreCase(""String_Node_Str"")) {
              try {
                int x=Integer.parseInt(pull.getAttributeValue(i));
                if (x > 0)                 this.publishProgress(0,x);
              }
 catch (              NumberFormatException e) {
              }
            }
            if (pull.getAttributeName(i).equalsIgnoreCase(""String_Node_Str"")) {
              DateTimeFormatter format=ISODateTimeFormat.dateTimeNoMillis();
              try {
                DataProvider.getInstance(parentActivity).getCon().setLastUpdate(format.parseDateTime(pull.getAttributeValue(i).trim()).toDate());
              }
 catch (              Exception e) {
                Log.e(""String_Node_Str"",""String_Node_Str"",e);
              }
            }
          }
        }
      }
    if (name.equalsIgnoreCase(""String_Node_Str"")) {
      annotation=new Annotation();
    }
 else {
      if (name.equalsIgnoreCase(""String_Node_Str"")) {
        annotation.setPid(pull.nextText().trim());
      }
      if (name.equalsIgnoreCase(""String_Node_Str"")) {
        annotation.setAuthor(pull.nextText().trim());
      }
      if (name.equalsIgnoreCase(""String_Node_Str"")) {
        annotation.setTitle(Html.fromHtml(pull.nextText().trim()).toString());
      }
      if (name.equalsIgnoreCase(""String_Node_Str"")) {
        annotation.setType(pull.nextText().trim());
      }
      if (name.equalsIgnoreCase(""String_Node_Str"")) {
        annotation.setProgramLine(pull.nextText().trim());
      }
      if (name.equalsIgnoreCase(""String_Node_Str"")) {
        annotation.setLocation(pull.nextText().trim());
      }
      if (name.equalsIgnoreCase(""String_Node_Str"")) {
        annotation.setAnnotation(Html.fromHtml(pull.nextText().trim()).toString());
      }
      if (name.equalsIgnoreCase(""String_Node_Str"")) {
        annotation.setStartTime(pull.nextText().trim());
      }
      if (name.equalsIgnoreCase(""String_Node_Str"")) {
        annotation.setEndTime(pull.nextText().trim());
      }
    }
  break;
case XmlPullParser.END_TAG:
name=pull.getName();
if (name.equalsIgnoreCase(""String_Node_Str"") && annotation != null) {
messages.add(annotation);
this.publishProgress(counter++);
}
break;
default :
break;
}
eventType=pull.next();
}
}
 catch (Exception e) {
resultCode=-1;
throw new XMLProccessException(""String_Node_Str"",e);
}
}
 catch (XMLProccessException e) {
resultCode=-1;
Log.e(""String_Node_Str"",""String_Node_Str"",e);
throw e;
}
return messages;
}",0.989547038327526
179639,"public ContentValues getContentValues(){
  ContentValues ret=new ContentValues();
  ret.put(""String_Node_Str"",this.cid);
  ret.put(""String_Node_Str"",date);
  ret.put(""String_Node_Str"",iconUrl);
  ret.put(""String_Node_Str"",name);
  ret.put(""String_Node_Str"",dataUrl);
  ret.put(""String_Node_Str"",message);
  ret.put(""String_Node_Str"",locationsFile);
  ret.put(""String_Node_Str"",providesAnnotations);
  ret.put(""String_Node_Str"",providesTimetable);
  return ret;
}","public ContentValues getContentValues(){
  ContentValues ret=new ContentValues();
  ret.put(""String_Node_Str"",this.cid);
  ret.put(""String_Node_Str"",date);
  ret.put(""String_Node_Str"",iconUrl);
  ret.put(""String_Node_Str"",name);
  ret.put(""String_Node_Str"",dataUrl);
  ret.put(""String_Node_Str"",message);
  ret.put(""String_Node_Str"",locationsFile);
  ret.put(""String_Node_Str"",providesAnnotations);
  ret.put(""String_Node_Str"",providesTimetable);
  DateTimeFormatter dateSQLFormatter=DateTimeFormat.forPattern(""String_Node_Str"").withZoneUTC();
  ret.put(""String_Node_Str"",dateSQLFormatter.print(lastUpdate.getTime()));
  return ret;
}",0.843065693430657
179640,"private void handleCommand(Intent intent){
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(this);
  ConnectivityManager c=(ConnectivityManager)this.getSystemService(CONNECTIVITY_SERVICE);
  if (!c.getActiveNetworkInfo().isConnected()) {
    this.stopSelf();
    return;
  }
  if (preferences.getBoolean(""String_Node_Str"",false) && !preferences.getBoolean(""String_Node_Str"",false)) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    Convention convention=DataProvider.getInstance(this).getCon();
    if (convention == null || convention.getCid() < 1) {
      Preferences.stopUpdateService(this);
      stopSelf();
      return;
    }
    HttpClient client=new DefaultHttpClient();
    HttpHead head=new HttpHead();
    try {
      head.setURI(new URI(""String_Node_Str"" + convention.getCid()));
    }
 catch (    URISyntaxException e) {
      Log.e(""String_Node_Str"",""String_Node_Str"",e);
    }
    SimpleDateFormat format=new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH);
    SimpleDateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
    head.setHeader(""String_Node_Str"",format.format(convention.getLastUpdate()));
    SharedPreferences.Editor editor=preferences.edit();
    try {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      HttpResponse response=client.execute(head);
      if (response.getStatusLine().getStatusCode() == 200) {
        editor.putBoolean(""String_Node_Str"",true);
        try {
          editor.putString(""String_Node_Str"",formatter.format(format.parse(response.getFirstHeader(""String_Node_Str"").getValue())));
        }
 catch (        NullPointerException e) {
          editor.putString(""String_Node_Str"",formatter.format(new Date()));
        }
        Preferences.stopUpdateService(this);
        Log.d(""String_Node_Str"",""String_Node_Str"");
      }
      Log.d(""String_Node_Str"",""String_Node_Str"" + response.getStatusLine().getStatusCode());
      editor.putLong(""String_Node_Str"",new Date().getTime());
    }
 catch (    IOException e) {
      Log.e(""String_Node_Str"",""String_Node_Str"",e);
    }
catch (    java.text.ParseException e) {
      Log.e(""String_Node_Str"",""String_Node_Str"",e);
    }
 finally {
      editor.commit();
      Log.d(""String_Node_Str"",""String_Node_Str"");
      this.stopSelf();
    }
  }
 else {
    Preferences.stopUpdateService(this);
    this.stopSelf();
    return;
  }
}","private void handleCommand(Intent intent){
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(this);
  ConnectivityManager c=(ConnectivityManager)this.getSystemService(CONNECTIVITY_SERVICE);
  if (!c.getActiveNetworkInfo().isConnected()) {
    this.stopSelf();
    return;
  }
  if (preferences.getBoolean(""String_Node_Str"",false) && !preferences.getBoolean(""String_Node_Str"",false)) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    Convention convention=DataProvider.getInstance(this).getCon();
    if (convention == null || convention.getCid() < 1) {
      Preferences.stopUpdateService(this);
      stopSelf();
      return;
    }
    HttpClient client=new DefaultHttpClient();
    HttpHead head=new HttpHead();
    try {
      head.setURI(new URI(convention.getDataUrl()));
    }
 catch (    URISyntaxException e) {
      Log.e(""String_Node_Str"",""String_Node_Str"",e);
    }
    SimpleDateFormat internationalFormat=new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH);
    head.setHeader(""String_Node_Str"",internationalFormat.format(convention.getLastUpdate()));
    head.setHeader(""String_Node_Str"",""String_Node_Str"" + DataProvider.getInstance(this).getAnnotationsCount());
    SharedPreferences.Editor editor=preferences.edit();
    try {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      HttpResponse response=client.execute(head);
      if (response.getStatusLine().getStatusCode() == 200) {
        editor.putBoolean(""String_Node_Str"",true);
        try {
          editor.putLong(""String_Node_Str"",internationalFormat.parse(response.getFirstHeader(""String_Node_Str"").getValue()).getTime());
        }
 catch (        NullPointerException e) {
          editor.putLong(""String_Node_Str"",new Date().getTime());
        }
        Preferences.stopUpdateService(this);
        Log.d(""String_Node_Str"",""String_Node_Str"");
      }
      Log.d(""String_Node_Str"",""String_Node_Str"" + response.getStatusLine().getStatusCode());
      editor.putLong(""String_Node_Str"",new Date().getTime());
    }
 catch (    IOException e) {
      Log.e(""String_Node_Str"",""String_Node_Str"",e);
    }
catch (    java.text.ParseException e) {
      Log.e(""String_Node_Str"",""String_Node_Str"",e);
    }
 finally {
      editor.commit();
      Log.d(""String_Node_Str"",""String_Node_Str"");
      this.stopSelf();
    }
  }
 else {
    Preferences.stopUpdateService(this);
    this.stopSelf();
    return;
  }
}",0.8762221759933431
179641,"public static void planUpdateService(Context context){
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(context);
  if (!(preferences.getBoolean(""String_Node_Str"",false) && !preferences.getBoolean(""String_Node_Str"",false))) {
    stopUpdateService(context);
    return;
  }
  AlarmManager am=(AlarmManager)context.getSystemService(ALARM_SERVICE);
  long interval;
  interval=Integer.parseInt(preferences.getString(""String_Node_Str"",""String_Node_Str""));
  interval*=60 * 1000;
  long time=interval + preferences.getLong(""String_Node_Str"",System.currentTimeMillis());
  PendingIntent pendingIntent=PendingIntent.getService(context,0,new Intent(context,UpdatesService.class),0);
  am.setInexactRepeating(AlarmManager.RTC,time,interval,pendingIntent);
  Log.d(""String_Node_Str"",""String_Node_Str"" + (new Date(time)));
}","public static void planUpdateService(Context context){
  stopUpdateService(context);
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(context);
  if (!(preferences.getBoolean(""String_Node_Str"",false) && !preferences.getBoolean(""String_Node_Str"",false))) {
    stopUpdateService(context);
    return;
  }
  AlarmManager am=(AlarmManager)context.getSystemService(ALARM_SERVICE);
  long interval;
  interval=Integer.parseInt(preferences.getString(""String_Node_Str"",""String_Node_Str""));
  if (!preferences.contains(""String_Node_Str"")) {
    SharedPreferences.Editor e=preferences.edit();
    e.putLong(""String_Node_Str"",System.currentTimeMillis() - (interval - 1) * 60 * 1000);
    e.commit();
  }
  long time=interval * 60 * 1000 + preferences.getLong(""String_Node_Str"",System.currentTimeMillis());
  PendingIntent pendingIntent=PendingIntent.getService(context,0,new Intent(context,UpdatesService.class),0);
  am.setInexactRepeating(AlarmManager.RTC,time,interval,pendingIntent);
  Log.d(""String_Node_Str"",""String_Node_Str"" + (new Date(time)));
}",0.8705636743215032
179642,"public void onAsyncTaskCompleted(ListenedAsyncTask<?,?> task){
  asyncTaskHandler=null;
  if (!provider.hasData()) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    finish();
    return;
  }
  SearchProvider.getSearchQueryBuilders().clear();
  refreshDataset=true;
  this.onResume();
  SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(this).edit();
  editor.remove(""String_Node_Str"");
  editor.remove(""String_Node_Str"");
  editor.remove(""String_Node_Str"");
  editor.commit();
  Preferences.planUpdateService(this);
  initView();
}","public void onAsyncTaskCompleted(ListenedAsyncTask<?,?> task){
  asyncTaskHandler=null;
  if (!provider.hasData()) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    finish();
    return;
  }
  refreshDataset=true;
  this.onResume();
  SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(this).edit();
  editor.remove(""String_Node_Str"");
  editor.remove(""String_Node_Str"");
  editor.remove(""String_Node_Str"");
  editor.remove(""String_Node_Str"");
  editor.commit();
  Preferences.planUpdateService(this);
  initView();
}",0.9245446660884648
179643,"public static void updateAlarmManager(Context context){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  AlarmManager am=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);
  DataProvider dp=DataProvider.getInstance(context);
  Reminder closest=dp.getNextReminder();
  if (closest != null) {
    if (closest.annotation == null) {
      Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
      return;
    }
    if (closest.annotation.getStartTime() == null) {
      dp.removeReminder(closest.annotation.getPid());
      return;
    }
    PendingIntent pi=PendingIntent.getService(context,0,new Intent(context,ReminderTask.class),0);
    long time=closest.annotation.getStartTime().getTime() + (closest.reminder * 60 * 1000);
    am.set(AlarmManager.RTC_WAKEUP,time,pi);
    Log.d(""String_Node_Str"",""String_Node_Str"" + new Date(time));
  }
 else {
    Log.d(""String_Node_Str"",""String_Node_Str"");
  }
}","public static void updateAlarmManager(Context context){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  AlarmManager am=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);
  DataProvider dp=DataProvider.getInstance(context);
  Reminder closest=dp.getNextReminder();
  if (closest != null) {
    if (closest.annotation == null) {
      Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
      return;
    }
    if (closest.annotation.getStartTime() == null) {
      dp.removeReminder(closest.annotation.getPid());
      return;
    }
    PendingIntent pi=PendingIntent.getService(context,0,new Intent(context,ReminderTask.class),0);
    long time=closest.annotation.getStartTime().getTime() - (closest.reminder * 60 * 1000);
    am.set(AlarmManager.RTC_WAKEUP,time,pi);
    Log.d(""String_Node_Str"",""String_Node_Str"" + new Date(time));
  }
 else {
    Log.d(""String_Node_Str"",""String_Node_Str"");
  }
}",0.9989212513484358
179644,"@Override protected void onProgressUpdate(Integer... values){
  int value=values[0];
  super.onProgressUpdate(values);
  if (pd == null) {
    pdMax=value;
    showDialog();
    return;
  }
  float progress=(float)value / 2;
  pd.setProgress((int)(progress));
}","@Override protected void onProgressUpdate(Integer... values){
  int value=values[0];
  super.onProgressUpdate(values);
  if (pd == null || !pd.isShowing()) {
    pdMax=value;
    showDialog();
    return;
  }
  float progress=(float)value / 2;
  pd.setProgress((int)(progress));
}",0.9648798521256932
179645,"@Override protected void showDialog(){
  pd=new ProgressDialog(parentActivity);
  pd.setMessage(parentActivity.getString(R.string.processing));
  pd.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
  pd.setMax(pdMax);
  pd.show();
}","@Override protected void showDialog(){
  if (pd != null) {
    pd.dismiss();
  }
  pd=new ProgressDialog(parentActivity);
  pd.setMessage(parentActivity.getString(R.string.processing));
  pd.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
  pd.setMax(pdMax);
  pd.show();
}",0.9176470588235294
179646,"public String getCondition(){
  return ""String_Node_Str"" + date + ""String_Node_Str""+ date2+ ""String_Node_Str"";
}","public String getCondition(){
  Date d2=(Date)d.clone();
  d2.setDate(d.getDate() + 1);
  return ""String_Node_Str"" + df.format(d) + ""String_Node_Str""+ df.format(d2)+ ""String_Node_Str"";
}",0.738255033557047
179647,"public void addParam(final Date d){
  final DateFormat df=new SimpleDateFormat(""String_Node_Str"");
  final String date=df.format(d);
  d.setDate(d.getDate() + 1);
  final String date2=df.format(d);
  this.addParam(new ICondition(){
    public String getCondition(){
      return ""String_Node_Str"" + date + ""String_Node_Str""+ date2+ ""String_Node_Str"";
    }
    @Override public String getReadable(){
      return new SimpleDateFormat(""String_Node_Str"").format(d);
    }
  }
,new Date().getClass().getName());
}","public void addParam(final Date d){
  final DateFormat df=new SimpleDateFormat(""String_Node_Str"");
  this.addParam(new ICondition(){
    public String getCondition(){
      Date d2=(Date)d.clone();
      d2.setDate(d.getDate() + 1);
      return ""String_Node_Str"" + df.format(d) + ""String_Node_Str""+ df.format(d2)+ ""String_Node_Str"";
    }
    @Override public String getReadable(){
      return new SimpleDateFormat(""String_Node_Str"").format(d);
    }
  }
,new Date().getClass().getName());
}",0.8075772681954138
179648,"public View inflateAnnotation(View v,Annotation annotation){
  ViewHolder vh=(ViewHolder)v.getTag(R.id.listItem);
  if (false) {
    vh.favorited.setVisibility(View.VISIBLE);
  }
 else {
    vh.favorited.setVisibility(View.GONE);
  }
  if (vh.title != null) {
    vh.title.setText(annotation.getTitle());
  }
  if (vh.author != null) {
    vh.author.setText(annotation.getAuthor());
  }
  if (vh.line != null) {
    vh.line.setText(provider.getProgramLine(annotation.getLid()).getName());
  }
  if (annotation.getStartTime() != null && annotation.getEndTime() != null) {
    vh.time.setText(formatDate(annotation.getStartTime()) + ""String_Node_Str"" + todayFormat.format(annotation.getEndTime()));
    if (annotation.getLid() > 0) {
      vh.line.setText(vh.line.getText() + ""String_Node_Str"");
    }
  }
 else {
    vh.title.setText(""String_Node_Str"");
  }
  if (annotation.getLocation() != null) {
    vh.place.setText(annotation.getLocation());
    if (annotation.getLid() > 0) {
      vh.line.setText(vh.line.getText() + ""String_Node_Str"");
    }
  }
 else {
    vh.place.setText(""String_Node_Str"");
  }
  if (vh.programType != null) {
    vh.programType.setImageResource(annotation.getProgramIcon());
  }
  return v;
}","public View inflateAnnotation(View v,Annotation annotation){
  ViewHolder vh=(ViewHolder)v.getTag(R.id.listItem);
  if (provider.getFavorited().contains(Integer.valueOf(annotation.getPid()))) {
    vh.favorited.setVisibility(View.VISIBLE);
  }
 else {
    vh.favorited.setVisibility(View.GONE);
  }
  if (vh.title != null) {
    vh.title.setText(annotation.getTitle());
  }
  if (vh.author != null) {
    vh.author.setText(annotation.getAuthor());
  }
  if (vh.line != null) {
    vh.line.setText(provider.getProgramLine(annotation.getLid()).getName());
  }
  if (vh.time.getVisibility() == View.VISIBLE && annotation.getStartTime() != null && annotation.getEndTime() != null) {
    vh.time.setText(formatDate(annotation.getStartTime()) + ""String_Node_Str"" + todayFormat.format(annotation.getEndTime()));
    if (annotation.getLid() > 0) {
      vh.line.setText(vh.line.getText() + ""String_Node_Str"");
    }
  }
 else {
    vh.time.setText(""String_Node_Str"");
  }
  if (vh.place.getVisibility() == View.VISIBLE && annotation.getLocation() != null) {
    vh.place.setText(annotation.getLocation());
    if (annotation.getLid() > 0) {
      vh.line.setText(vh.line.getText() + ""String_Node_Str"");
    }
  }
 else {
    vh.place.setText(""String_Node_Str"");
  }
  if (vh.programType != null) {
    vh.programType.setImageResource(annotation.getProgramIcon());
  }
  return v;
}",0.9364161849710982
179649,"private void initView(){
  Convention con=dataProvider.getCon();
  if (con != null) {
    TextView tw2=(TextView)findViewById(R.id.tLoadedInfoCon);
    findViewById(R.id.lLoadedInfo).setVisibility(View.VISIBLE);
    tw2.setText(con.getName());
  }
  LinearLayout l=(LinearLayout)findViewById(R.id.lbShowLocations);
  if (con.getLocationsFile().trim() != ""String_Node_Str"") {
    l.setVisibility(View.VISIBLE);
  }
 else {
    l.setVisibility(View.GONE);
  }
}","private void initView(){
  Convention con=dataProvider.getCon();
  if (con != null) {
    TextView tw2=(TextView)findViewById(R.id.tLoadedInfoCon);
    findViewById(R.id.lLoadedInfo).setVisibility(View.VISIBLE);
    tw2.setText(con.getName());
  }
  LinearLayout l=(LinearLayout)findViewById(R.id.lbShowLocations);
  if (con.getLocationsFile() != null && !con.getLocationsFile().trim().equals(""String_Node_Str"")) {
    l.setVisibility(View.VISIBLE);
  }
 else {
    l.setVisibility(View.GONE);
  }
}",0.9436325678496869
179650,"@Override protected boolean cacheInBackground() throws Exception {
  if (this.itemsPerPage == 0 || ((this.getCount() - 1) % this.itemsPerPage != 0)) {
    return false;
  }
  this.itemsToAdd=this.getPrecachedData(this.getCount() / this.itemsPerPage);
  return (this.itemsToAdd.size() == this.itemsPerPage);
}","@Override protected boolean cacheInBackground() throws Exception {
  if (this.itemsPerPage == 0) {
    return false;
  }
  this.itemsToAdd=this.getPrecachedData(this.getCount() / this.itemsPerPage);
  return (this.itemsToAdd.size() > 0);
}",0.4314442413162705
179651,"public void LoadTweets(String info){
  TwitterFactory twitterFactory=new TwitterFactory();
  Twitter twitter=twitterFactory.getInstance();
  Query query=new Query(info);
  QueryResult res=null;
  try {
    res=twitter.search(query);
    List<Tweet> listaTweets=res.getTweets();
    Iterator<Tweet> itTweet=listaTweets.iterator();
    while (itTweet.hasNext()) {
      Tweet tweet=itTweet.next();
      String infoTweet=(tweet.getFromUser() + ""String_Node_Str"" + tweet.getText());
      listTweets.add(infoTweet);
    }
  }
 catch (  TwitterException e) {
    e.printStackTrace();
  }
}","public void LoadTweets(String info){
  TwitterFactory twitterFactory=new TwitterFactory();
  Twitter twitter=twitterFactory.getInstance();
  Query query=new Query(info);
  QueryResult res=null;
  try {
    res=twitter.search(query);
    List<Tweet> listaTweets=res.getTweets();
    Iterator<Tweet> itTweet=listaTweets.iterator();
    listTweets.clear();
    while (itTweet.hasNext()) {
      Tweet tweet=itTweet.next();
      String infoTweet=(tweet.getFromUser() + ""String_Node_Str"" + tweet.getText());
      listTweets.add(infoTweet);
    }
  }
 catch (  TwitterException e) {
    e.printStackTrace();
  }
}",0.9798994974874372
179652,"/** 
 * Constructs this   {@code WeightedRoundRobinList} with the specifiedcollection of elements.
 * @param elements the collection of elements to initialize this list with.
 */
public WeightedRoundRobinList(List<Element<E>> elements){
  if (elements == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  loadElements(elements);
}","/** 
 * Constructs this   {@code WeightedRoundRobinList} with the specifiedcollection of elements.
 * @param elements the collection of elements to initialize this list with.
 */
public WeightedRoundRobinList(List<Element<E>> elements){
  loadElements(Check.forNull(elements));
}",0.7753164556962026
179653,"/** 
 * Gets the next available item in this list. The item provided is determined by its weight.  This list will provide elements in a weighted round robin fashion.  Distributing the elements of this list in weighted round robin fashion allows for efficiency in load balancing the distribution of elements in this list. <p>For example, the following code illustrates how this list effectively load balances the distribution of elements contained in this list.  {@code LoadBalanceList<String> list = new WeightedRoundRobinList<String>(); list.add(""low"", 1); list.add(""mid"", 2); list.add(""high"", 3);}for (String element : list)  System.out.println(item + "" ""); }} will produce the following output: <em>low mid high mid high high </em> <p>As you can see the code above yields each element the number of times defined by its weight for each complete iteration of this list. <p>Its important to note that each call to this lists   {@code iterator}method, resets the current position of this list. Calling   {@code get}several times, then calling the   {@code iterator} method, resets thislist to a state that is equal to this lists  {@code get} method neverbeing called.
 * @return
 */
public E get(){
  if (elements.size() == 0)   return null;
  if (isDistributionComplete()) {
    resetDistributionCounts();
    position=0;
  }
  boolean found=false;
  while (!found) {
    if (position >= elements.size()) {
      position=0;
    }
    Element node=elements.get(position);
    if (node.getCount() < node.getWeight()) {
      node.incrementCount();
      found=true;
    }
 else {
      position++;
    }
  }
  Element<E> result=elements.get(position++);
  return result.getValue();
}","/** 
 * Gets the next available item in this list. The item provided is determined by its weight.  This list will provide elements in a weighted round robin fashion.  Distributing the elements of this list in weighted round robin fashion allows for efficiency in load balancing the distribution of elements in this list. <p>For example, the following code illustrates how this list effectively load balances the distribution of elements contained in this list. <pre>  {@code LoadBalanceList<String> list = new WeightedRoundRobinList<String>(); list.add(""low"", 1); list.add(""mid"", 2); list.add(""high"", 3);}for (String element : list)  System.out.println(item + "" ""); }} </pre> <p>will produce the following output: <em>low mid high mid high high </em> <p>As you can see the code above yields each element the number of times defined by its weight for each complete iteration of this list. <p>Its important to note that each call to this lists   {@code iterator}method, resets the current position of this list. Calling   {@code get}several times, then calling the   {@code iterator} method, resets thislist to a state that is equal to this lists  {@code get} method neverbeing called.
 * @return
 */
public E get(){
  if (elements.size() == 0)   return null;
  if (isDistributionComplete()) {
    resetDistributionCounts();
    position=0;
  }
  boolean found=false;
  while (!found) {
    if (position >= elements.size()) {
      position=0;
    }
    Element node=elements.get(position);
    if (node.getCount() < node.getWeight()) {
      node.incrementCount();
      found=true;
    }
 else {
      position++;
    }
  }
  Element<E> result=elements.get(position++);
  return result.getValue();
}",0.9952690715552928
179654,"/** 
 * This   {@code WeightedRoundRobinList} concludes equality with the givenobject by comparing each element in the specified list. The order of elements also determines if the given object is equal to this list. Lastly, the specified object's size must match this lists size in order for both objects to be equal.
 * @param other the other list to compare to this list for equality.
 * @return {@code true} if the specified object is equal to this list.
 */
@Override public boolean equals(Object other){
  if (this == other) {
    return true;
  }
  if (other instanceof LoadBalanceList) {
    WeightedRoundRobinList<?> otherList=(WeightedRoundRobinList<?>)other;
    if (otherList.size() != size()) {
      return false;
    }
    Iterator<?> one=elements.iterator();
    Iterator<?> two=otherList.elements.iterator();
    while (one.hasNext()) {
      Object e1=one.next();
      Object e2=two.next();
      if (!(e1 == null ? e2 == null : e1.equals(e2))) {
        return false;
      }
    }
    return true;
  }
  return true;
}","/** 
 * This   {@code WeightedRoundRobinList} concludes equality with the givenobject by comparing each element in the specified list. The order of elements also determines if the given object is equal to this list. Lastly, the specified object's size must match this lists size in order for both objects to be equal.
 * @param other the other list to compare to this list for equality.
 * @return {@code true} if the specified object is equal to this list.
 */
@Override public boolean equals(Object other){
  if (this == other) {
    return true;
  }
  if (other instanceof LoadBalancedList) {
    WeightedRoundRobinList<?> otherList=(WeightedRoundRobinList<?>)other;
    if (otherList.size() != size()) {
      return false;
    }
    Iterator<?> one=elements.iterator();
    Iterator<?> two=otherList.elements.iterator();
    while (one.hasNext()) {
      Object e1=one.next();
      Object e2=two.next();
      if (!(e1 == null ? e2 == null : e1.equals(e2))) {
        return false;
      }
    }
    return true;
  }
  return true;
}",0.9995185363505056
179655,"/** 
 * Returns timestamp in human readable form, yet condensed form ""yyMMdd-HHmmss.SSS"".
 * @param timestamp timestamp in millis
 * @return timestamp as a human readable string
 */
public static String presentTimestamp(long timestamp){
  return TIMESTAMP_FORMAT.format(new Date(timestamp));
}","/** 
 * Returns timestamp in human readable form, yet condensed form ""yyMMdd-HHmmss.SSS"".
 * @param timestamp timestamp in millis
 * @return timestamp as a human readable string
 */
public static String presentTimestamp(long timestamp){
  if (timestamp == 0) {
    return UNDEF_STRING;
  }
  return TIMESTAMP_FORMAT.format(new Date(timestamp));
}",0.917057902973396
179656,"public void init(FilterConfig filterConfig) throws ServletException {
  simonPrefix=filterConfig.getInitParameter(INIT_PARAM_PREFIX);
  String publishManager=filterConfig.getInitParameter(INIT_PARAM_PUBLISH_MANAGER);
  if (publishManager != null) {
    filterConfig.getServletContext().setAttribute(publishManager,SimonManager.manager());
  }
}","public void init(FilterConfig filterConfig) throws ServletException {
  if (filterConfig.getInitParameter(INIT_PARAM_PREFIX) != null) {
    simonPrefix=filterConfig.getInitParameter(INIT_PARAM_PREFIX);
  }
  String publishManager=filterConfig.getInitParameter(INIT_PARAM_PUBLISH_MANAGER);
  if (publishManager != null) {
    filterConfig.getServletContext().setAttribute(publishManager,SimonManager.manager());
  }
}",0.9052631578947368
179657,"public void doFilter(ServletRequest servletRequest,ServletResponse response,FilterChain filterChain) throws IOException, ServletException {
  HttpServletRequest request=(HttpServletRequest)servletRequest;
  String simonName=getSimonName(request);
  Split split=SimonManager.getStopwatch(simonPrefix + Manager.HIERARCHY_DELIMITER + simonName).start();
  filterChain.doFilter(request,response);
  split.stop();
}","public void doFilter(ServletRequest servletRequest,ServletResponse response,FilterChain filterChain) throws IOException, ServletException {
  HttpServletRequest request=(HttpServletRequest)servletRequest;
  String simonName=getSimonName(request);
  Split split=SimonManager.getStopwatch(simonPrefix + Manager.HIERARCHY_DELIMITER + simonName).start();
  try {
    filterChain.doFilter(request,response);
  }
  finally {
    split.stop();
  }
}",0.9624413145539906
179658,"private void register(SimonSuperMXBean simonMxBean){
  String name=simonMxBean.getName() + ""String_Node_Str"" + simonMxBean.getType();
  try {
    ObjectName objectName=new ObjectName(name);
    if (mBeanServer.isRegistered(objectName)) {
      mBeanServer.unregisterMBean(objectName);
    }
 else {
      registeredNames.add(name);
    }
    mBeanServer.registerMBean(simonMxBean,objectName);
    message(""String_Node_Str"" + objectName);
  }
 catch (  JMException e) {
    warning(""String_Node_Str"" + name,e);
    registeredNames.remove(name);
  }
}","private void register(SimonSuperMXBean simonMxBean){
  String name=constructObjectName(simonMxBean);
  try {
    ObjectName objectName=new ObjectName(name);
    if (mBeanServer.isRegistered(objectName)) {
      mBeanServer.unregisterMBean(objectName);
    }
 else {
      registeredNames.add(name);
    }
    mBeanServer.registerMBean(simonMxBean,objectName);
    message(""String_Node_Str"" + objectName);
  }
 catch (  JMException e) {
    warning(""String_Node_Str"" + name,e);
    registeredNames.remove(name);
  }
}",0.9314553990610328
179659,"private java.sql.Driver getRealDriver(String url,Properties info) throws SQLException {
  java.sql.Driver drv=null;
  try {
    drv=DriverManager.getDriver(url);
  }
 catch (  SQLException e) {
  }
  if (drv == null && info != null && info.keySet().contains(REAL_DRIVER)) {
    drv=registerDriver(info.getProperty(REAL_DRIVER));
  }
  int i=url.indexOf(':',5);
  if (drv == null && i > -1) {
    drv=registerDriver(drivers.getProperty(url.substring(5,i - 1)));
  }
  if (drv == null) {
    Pattern re=Pattern.compile(""String_Node_Str"" + REAL_DRIVER + ""String_Node_Str"");
    Matcher matcher=re.matcher(url);
    if (matcher.lookingAt()) {
      drv=registerDriver(matcher.group(1).trim());
    }
  }
  if (drv == null) {
    throw new SQLException(""String_Node_Str"");
  }
  return drv;
}","private java.sql.Driver getRealDriver(String url,Properties info) throws SQLException {
  java.sql.Driver drv=null;
  try {
    drv=DriverManager.getDriver(url);
  }
 catch (  SQLException e) {
  }
  if (drv == null && info != null && info.keySet().contains(REAL_DRIVER)) {
    drv=registerDriver(info.getProperty(REAL_DRIVER));
  }
  int i=url.indexOf(':',5);
  if (drv == null && i > -1) {
    drv=registerDriver(drivers.getProperty(url.substring(5,i - 1)));
  }
  if (drv == null) {
    Matcher matcher=REAL_DRIVER_PATTERN.matcher(url);
    if (matcher.find()) {
      drv=registerDriver(matcher.group(1));
    }
  }
  if (drv == null) {
    throw new SQLException(""String_Node_Str"");
  }
  return drv;
}",0.8473895582329317
179660,"/** 
 * Class constructor. It loads well known driver list from resource file drivers.properties.
 */
public Driver(){
  try {
    drivers.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(""String_Node_Str""));
  }
 catch (  IOException e) {
  }
}","/** 
 * Class constructor. It loads well known driver list from resource file drivers.properties.
 */
public Driver(){
  try {
    InputStream stream=null;
    try {
      stream=Thread.currentThread().getContextClassLoader().getResourceAsStream(""String_Node_Str"");
      drivers.load(stream);
    }
  finally {
      if (stream != null) {
        stream.close();
      }
    }
  }
 catch (  IOException e) {
  }
}",0.7448680351906158
179661,"/** 
 * Opens new Simon proxy driver connection associated with real connection to specified database.
 * @param url jdbc connection string (i.e. jdbc:simon:h2:file:test)
 * @param info properties for connection
 * @return open connection to database or null if provided url is not accepted by this driver
 * @throws SQLException if there is no real driver registered/recognized or opening real connection fails
 * @see org.javasimon.jdbc.Driver
 */
public Connection connect(String url,Properties info) throws SQLException {
  if (!acceptsURL(url)) {
    return null;
  }
  String realUrl=url.replaceFirst(SIMON_JDBC,""String_Node_Str"");
  java.sql.Driver driver=getRealDriver(realUrl,info);
  return new org.javasimon.jdbc.Connection(driver.connect(realUrl,info),DEFAULT_PREFIX);
}","/** 
 * Opens new Simon proxy driver connection associated with real connection to specified database.
 * @param url	jdbc connection string (i.e. jdbc:simon:h2:file:test)
 * @param info properties for connection
 * @return open connection to database or null if provided url is not accepted by this driver
 * @throws SQLException if there is no real driver registered/recognized or opening real connection fails
 * @see org.javasimon.jdbc.Driver
 */
public Connection connect(String url,Properties info) throws SQLException {
  if (!acceptsURL(url)) {
    return null;
  }
  String realUrl=url.replaceFirst(SIMON_JDBC,""String_Node_Str"");
  java.sql.Driver driver=getRealDriver(realUrl,info);
  return new org.javasimon.jdbc.Connection(driver.connect(realUrl,info),DEFAULT_PREFIX);
}",0.9987212276214834
179662,"private static void printSimon(int level,Simon simon){
  for (int i=0; i < level; i++) {
    System.out.print(""String_Node_Str"");
  }
  System.out.println(localName(simon.getName()) + ""String_Node_Str"" + (simon.isEnabled() ? '+' : '-')+ ""String_Node_Str""+ simon);
}","private static void printSimon(int level,Simon simon,StringBuilder sb){
  for (int i=0; i < level; i++) {
    sb.append(""String_Node_Str"");
  }
  sb.append(localName(simon.getName())).append('(').append(simon.isEnabled() ? '+' : '-').append(""String_Node_Str"").append(simon.toString()).append('\n');
}",0.5982300884955752
179663,"private static void printSimonTree(int level,Simon simon){
  printSimon(level,simon);
  for (  Simon child : simon.getChildren()) {
    printSimonTree(level + 1,child);
  }
}","private static void printSimonTree(int level,Simon simon,StringBuilder sb){
  printSimon(level,simon,sb);
  for (  Simon child : simon.getChildren()) {
    printSimonTree(level + 1,child,sb);
  }
}",0.9380053908355797
179664,"/** 
 * @see org.javakontor.sherlog.application.action.Action#execute()
 */
public void execute(){
  if (isActive()) {
    activate();
  }
 else {
    deactivate();
  }
}","/** 
 * @see org.javakontor.sherlog.application.action.Action#execute()
 */
public void execute(){
  if (!isActive()) {
    activate();
    setActive(true);
  }
 else {
    deactivate();
    setActive(false);
  }
}",0.8854166666666666
179665,"@Override public void onModelChanged(ModelChangedEvent<LogEventFilterModel,LogEventFilterModelReasonForChange> event){
switch (event.getReasonForChange()) {
case filterAdded:
{
      createEditor((LogEventFilter)event.getObjects()[0]);
      break;
    }
case filterRemoved:
{
    disposeEditor((LogEventFilter)event.getObjects()[0]);
    break;
  }
case factoryAdded:
{
  handleFactoryAdded((FilterConfigurationEditorFactory)event.getObjects()[0]);
  break;
}
case factoryRemoved:
{
removedFactory((FilterConfigurationEditorFactory)event.getObjects()[0]);
break;
}
case factoryManagerAdded:
{
for (LogEventFilter logEventFilter : getModel().getLogEventFilter()) {
createEditor(logEventFilter);
}
break;
}
case factoryManagerRemoved:
{
for (LogEventFilter logEventFilter : getModel().getLogEventFilter()) {
disposeEditor(logEventFilter);
}
break;
}
default :
break;
}
}","@Override public void onModelChanged(ModelChangedEvent<LogEventFilterModel,LogEventFilterModelReasonForChange> event){
  try {
switch (event.getReasonForChange()) {
case filterAdded:
{
        createEditor((LogEventFilter)event.getObjects()[0]);
        break;
      }
case filterRemoved:
{
      disposeEditor((LogEventFilter)event.getObjects()[0]);
      break;
    }
case factoryAdded:
{
    handleFactoryAdded((FilterConfigurationEditorFactory)event.getObjects()[0]);
    break;
  }
case factoryRemoved:
{
  removedFactory((FilterConfigurationEditorFactory)event.getObjects()[0]);
  break;
}
case factoryManagerAdded:
{
for (LogEventFilter logEventFilter : getModel().getLogEventFilter()) {
  createEditor(logEventFilter);
}
break;
}
case factoryManagerRemoved:
{
for (LogEventFilter logEventFilter : getModel().getLogEventFilter()) {
disposeEditor(logEventFilter);
}
break;
}
default :
break;
}
}
 catch (Exception e) {
}
}",0.9671675013912076
179666,"public void run(){
switch (event.getType()) {
case BundleEvent.INSTALLED:
    fireModelChangedEvent(BundleListModelReasonForChange.bundleListChanged);
  break;
case BundleEvent.UNINSTALLED:
removeBundle(event.getBundle());
fireModelChangedEvent(BundleListModelReasonForChange.bundleListChanged);
break;
default :
fireModelChangedEvent(BundleListModelReasonForChange.bundleStateChanged,getBundles().indexOf(event.getBundle()));
break;
}
}","public void run(){
switch (event.getType()) {
case BundleEvent.INSTALLED:
    addBundle(event.getBundle());
  fireModelChangedEvent(BundleListModelReasonForChange.bundleListChanged);
break;
case BundleEvent.UNINSTALLED:
removeBundle(event.getBundle());
fireModelChangedEvent(BundleListModelReasonForChange.bundleListChanged);
break;
default :
fireModelChangedEvent(BundleListModelReasonForChange.bundleStateChanged,getBundles().indexOf(event.getBundle()));
break;
}
}",0.9623893805309734
179667,"public void bundleChanged(final BundleEvent event){
  GuiExecutor.execute(new Runnable(){
    public void run(){
switch (event.getType()) {
case BundleEvent.INSTALLED:
        fireModelChangedEvent(BundleListModelReasonForChange.bundleListChanged);
      break;
case BundleEvent.UNINSTALLED:
    removeBundle(event.getBundle());
  fireModelChangedEvent(BundleListModelReasonForChange.bundleListChanged);
break;
default :
fireModelChangedEvent(BundleListModelReasonForChange.bundleStateChanged,getBundles().indexOf(event.getBundle()));
break;
}
}
}
);
}","public void bundleChanged(final BundleEvent event){
  GuiExecutor.execute(new Runnable(){
    public void run(){
switch (event.getType()) {
case BundleEvent.INSTALLED:
        addBundle(event.getBundle());
      fireModelChangedEvent(BundleListModelReasonForChange.bundleListChanged);
    break;
case BundleEvent.UNINSTALLED:
  removeBundle(event.getBundle());
fireModelChangedEvent(BundleListModelReasonForChange.bundleListChanged);
break;
default :
fireModelChangedEvent(BundleListModelReasonForChange.bundleStateChanged,getBundles().indexOf(event.getBundle()));
break;
}
}
}
);
}",0.9629629629629628
179668,"public BundleListModel(BundleContext bundleContext){
  super();
  this._bundleContext=bundleContext;
  this._bundles=new HashMap<Long,Bundle>();
  this._selectedBundle=null;
  this._bundleListener=new BundleListener(){
    public void bundleChanged(    final BundleEvent event){
      GuiExecutor.execute(new Runnable(){
        public void run(){
switch (event.getType()) {
case BundleEvent.INSTALLED:
            fireModelChangedEvent(BundleListModelReasonForChange.bundleListChanged);
          break;
case BundleEvent.UNINSTALLED:
        removeBundle(event.getBundle());
      fireModelChangedEvent(BundleListModelReasonForChange.bundleListChanged);
    break;
default :
  fireModelChangedEvent(BundleListModelReasonForChange.bundleStateChanged,getBundles().indexOf(event.getBundle()));
break;
}
}
}
);
}
}
;
this._bundleContext.addBundleListener(this._bundleListener);
Bundle[] bundles=this._bundleContext.getBundles();
for (Bundle bundle : bundles) {
addBundle(bundle);
}
_serviceListener=new ServiceListener(){
public void serviceChanged(ServiceEvent event){
updateStatusMessage();
}
}
;
this._bundleContext.addServiceListener(_serviceListener);
}","public BundleListModel(BundleContext bundleContext){
  super();
  this._bundleContext=bundleContext;
  this._bundles=new HashMap<Long,Bundle>();
  this._selectedBundle=null;
  this._bundleListener=new BundleListener(){
    public void bundleChanged(    final BundleEvent event){
      GuiExecutor.execute(new Runnable(){
        public void run(){
switch (event.getType()) {
case BundleEvent.INSTALLED:
            addBundle(event.getBundle());
          fireModelChangedEvent(BundleListModelReasonForChange.bundleListChanged);
        break;
case BundleEvent.UNINSTALLED:
      removeBundle(event.getBundle());
    fireModelChangedEvent(BundleListModelReasonForChange.bundleListChanged);
  break;
default :
fireModelChangedEvent(BundleListModelReasonForChange.bundleStateChanged,getBundles().indexOf(event.getBundle()));
break;
}
}
}
);
}
}
;
this._bundleContext.addBundleListener(this._bundleListener);
Bundle[] bundles=this._bundleContext.getBundles();
for (Bundle bundle : bundles) {
addBundle(bundle);
}
_serviceListener=new ServiceListener(){
public void serviceChanged(ServiceEvent event){
updateStatusMessage();
}
}
;
this._bundleContext.addServiceListener(_serviceListener);
}",0.9786324786324786
179669,"public void installNewBundle(File file){
  URI uri=file.toURI();
  try {
    Bundle installedBundle=_bundleContext.installBundle(uri.toString());
    setSelectedBundle(installedBundle);
  }
 catch (  BundleException ex) {
    _logger.error(""String_Node_Str"" + uri.toString() + ""String_Node_Str""+ ex,ex);
    sendErrorStatusMessage(""String_Node_Str"" + ex);
  }
}","public void installNewBundle(File file){
  URI uri=file.toURI();
  try {
    Bundle installedBundle=_bundleContext.installBundle(uri.toString());
    installedBundle.start();
    setSelectedBundle(installedBundle);
    fireModelChangedEvent(BundleListModelReasonForChange.bundleListChanged);
  }
 catch (  BundleException ex) {
    _logger.error(""String_Node_Str"" + uri.toString() + ""String_Node_Str""+ ex,ex);
    sendErrorStatusMessage(""String_Node_Str"" + ex);
  }
}",0.8719806763285024
179670,"/** 
 * Creates a new filter column panel with three component which are the include list, button panel to shift elements between the two lists, and the exclude list. The include list then will contain all values to filter.
 * @param showKeepAllBox true, if an check box to keep all columns is shown
 * @param cellRenderer
 */
public TwoPaneSelectionPanel(final boolean showKeepAllBox,ListCellRenderer cellRenderer){
  final JPanel buttonPan=new JPanel();
  buttonPan.setBorder(BorderFactory.createEmptyBorder(0,15,0,15));
  buttonPan.setLayout(new BoxLayout(buttonPan,BoxLayout.Y_AXIS));
  buttonPan.add(Box.createVerticalStrut(20));
  m_addButton=new JButton(""String_Node_Str"");
  m_addButton.setMaximumSize(new Dimension(125,25));
  buttonPan.add(m_addButton);
  m_addButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent ae){
      onAddIt();
    }
  }
);
  buttonPan.add(Box.createVerticalStrut(25));
  m_addAllButton=new JButton(""String_Node_Str"");
  m_addAllButton.setMaximumSize(new Dimension(125,25));
  buttonPan.add(m_addAllButton);
  m_addAllButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent ae){
      onAddAll();
    }
  }
);
  buttonPan.add(Box.createVerticalStrut(25));
  m_remButton=new JButton(""String_Node_Str"");
  m_remButton.setMaximumSize(new Dimension(125,25));
  buttonPan.add(m_remButton);
  m_remButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent ae){
      onRemIt();
    }
  }
);
  buttonPan.add(Box.createVerticalStrut(25));
  m_remAllButton=new JButton(""String_Node_Str"");
  m_remAllButton.setMaximumSize(new Dimension(125,25));
  buttonPan.add(m_remAllButton);
  m_remAllButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent ae){
      onRemoveAll();
    }
  }
);
  buttonPan.add(Box.createVerticalStrut(20));
  buttonPan.add(Box.createGlue());
  includeOptions=new DefaultListModel();
  m_inclList=new JList(includeOptions);
  m_inclList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  m_inclList.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    final MouseEvent me){
      if (me.getClickCount() == 2) {
        onRemIt();
        me.consume();
      }
    }
  }
);
  final JScrollPane jspIncl=new JScrollPane(m_inclList);
  jspIncl.setMinimumSize(new Dimension(150,155));
  m_searchFieldIncl=new JTextField(8);
  m_searchButtonIncl=new JButton(""String_Node_Str"");
  ActionListener actionListenerIncl=new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      onSearch(m_inclList,includeOptions,m_searchFieldIncl,m_markAllHitsIncl.isSelected());
    }
  }
;
  m_searchFieldIncl.addActionListener(actionListenerIncl);
  m_searchButtonIncl.addActionListener(actionListenerIncl);
  JPanel inclSearchPanel=new JPanel(new BorderLayout());
  inclSearchPanel.add(new JLabel(""String_Node_Str""),BorderLayout.WEST);
  inclSearchPanel.setBorder(BorderFactory.createEmptyBorder(15,15,15,15));
  inclSearchPanel.add(m_searchFieldIncl,BorderLayout.CENTER);
  inclSearchPanel.add(m_searchButtonIncl,BorderLayout.EAST);
  m_markAllHitsIncl=new JCheckBox(""String_Node_Str"");
  ActionListener actionListenerAllIncl=new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      m_inclList.clearSelection();
      onSearch(m_inclList,includeOptions,m_searchFieldIncl,m_markAllHitsIncl.isSelected());
    }
  }
;
  m_markAllHitsIncl.addActionListener(actionListenerAllIncl);
  inclSearchPanel.add(m_markAllHitsIncl,BorderLayout.PAGE_END);
  JPanel includePanel=new JPanel(new BorderLayout());
  m_includeBorder=BorderFactory.createTitledBorder(INCLUDE_BORDER,""String_Node_Str"");
  includePanel.setBorder(m_includeBorder);
  includePanel.add(inclSearchPanel,BorderLayout.NORTH);
  includePanel.add(jspIncl,BorderLayout.CENTER);
  availableOptions=new DefaultListModel();
  m_exclList=new JList(availableOptions);
  m_exclList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  m_exclList.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    final MouseEvent me){
      if (me.getClickCount() == 2) {
        onAddIt();
        me.consume();
      }
    }
  }
);
  setListCellRenderer(cellRenderer);
  final JScrollPane jspExcl=new JScrollPane(m_exclList);
  jspExcl.setMinimumSize(new Dimension(150,155));
  m_searchFieldExcl=new JTextField(8);
  m_searchButtonExcl=new JButton(""String_Node_Str"");
  ActionListener actionListenerExcl=new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      onSearch(m_exclList,availableOptions,m_searchFieldExcl,m_markAllHitsExcl.isSelected());
    }
  }
;
  m_searchFieldExcl.addActionListener(actionListenerExcl);
  m_searchButtonExcl.addActionListener(actionListenerExcl);
  JPanel exclSearchPanel=new JPanel(new BorderLayout());
  exclSearchPanel.setBorder(BorderFactory.createEmptyBorder(15,15,15,15));
  exclSearchPanel.add(new JLabel(""String_Node_Str""),BorderLayout.WEST);
  exclSearchPanel.add(m_searchFieldExcl,BorderLayout.CENTER);
  exclSearchPanel.add(m_searchButtonExcl,BorderLayout.EAST);
  m_markAllHitsExcl=new JCheckBox(""String_Node_Str"");
  ActionListener actionListenerAllExcl=new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      m_exclList.clearSelection();
      onSearch(m_exclList,availableOptions,m_searchFieldExcl,m_markAllHitsExcl.isSelected());
    }
  }
;
  m_markAllHitsExcl.addActionListener(actionListenerAllExcl);
  exclSearchPanel.add(m_markAllHitsExcl,BorderLayout.PAGE_END);
  JPanel excludePanel=new JPanel(new BorderLayout());
  m_excludeBorder=BorderFactory.createTitledBorder(EXCLUDE_BORDER,""String_Node_Str"");
  excludePanel.setBorder(m_excludeBorder);
  excludePanel.add(exclSearchPanel,BorderLayout.NORTH);
  excludePanel.add(jspExcl,BorderLayout.CENTER);
  JPanel buttonPan2=new JPanel(new GridLayout());
  Border border=BorderFactory.createTitledBorder(""String_Node_Str"");
  buttonPan2.setBorder(border);
  buttonPan2.add(buttonPan);
  JPanel center=new JPanel();
  center.setLayout(new BoxLayout(center,BoxLayout.X_AXIS));
  center.add(excludePanel);
  center.add(buttonPan2);
  center.add(includePanel);
  JPanel all=new JPanel();
  all.setLayout(new BoxLayout(all,BoxLayout.Y_AXIS));
  all.add(center);
  super.setLayout(new GridLayout(1,1));
  super.add(all);
}","/** 
 * Creates a new filter column panel with three component which are the include list, button panel to shift elements between the two lists, and the exclude list. The include list then will contain all values to filter.
 * @param showKeepAllBox true, if an check box to keep all columns is shown
 * @param cellRenderer
 */
public TwoPaneSelectionPanel(final boolean showKeepAllBox,ListCellRenderer cellRenderer){
  final JPanel buttonPan=new JPanel();
  buttonPan.setBorder(BorderFactory.createEmptyBorder(0,15,0,15));
  buttonPan.setLayout(new BoxLayout(buttonPan,BoxLayout.Y_AXIS));
  buttonPan.add(Box.createVerticalStrut(20));
  m_addButton=new JButton(""String_Node_Str"");
  m_addButton.setMaximumSize(new Dimension(125,25));
  buttonPan.add(m_addButton);
  m_addButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent ae){
      onAddIt();
    }
  }
);
  buttonPan.add(Box.createVerticalStrut(25));
  m_addAllButton=new JButton(""String_Node_Str"");
  m_addAllButton.setMaximumSize(new Dimension(125,25));
  buttonPan.add(m_addAllButton);
  m_addAllButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent ae){
      onAddAll();
    }
  }
);
  buttonPan.add(Box.createVerticalStrut(25));
  m_remButton=new JButton(""String_Node_Str"");
  m_remButton.setMaximumSize(new Dimension(125,25));
  buttonPan.add(m_remButton);
  m_remButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent ae){
      onRemIt();
    }
  }
);
  buttonPan.add(Box.createVerticalStrut(25));
  m_remAllButton=new JButton(""String_Node_Str"");
  m_remAllButton.setMaximumSize(new Dimension(125,25));
  buttonPan.add(m_remAllButton);
  m_remAllButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent ae){
      onRemoveAll();
    }
  }
);
  buttonPan.add(Box.createVerticalStrut(20));
  buttonPan.add(Box.createGlue());
  includeOptions=new DefaultListModel();
  m_inclList=new JList(includeOptions);
  m_inclList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  m_inclList.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    final MouseEvent me){
      if (me.getClickCount() == 2) {
        onRemIt();
        me.consume();
      }
    }
  }
);
  final JScrollPane jspIncl=new JScrollPane(m_inclList);
  jspIncl.setMinimumSize(new Dimension(130,155));
  jspIncl.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
  m_searchFieldIncl=new JTextField(8);
  m_searchButtonIncl=new JButton(""String_Node_Str"");
  ActionListener actionListenerIncl=new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      onSearch(m_inclList,includeOptions,m_searchFieldIncl,m_markAllHitsIncl.isSelected());
    }
  }
;
  m_searchFieldIncl.addActionListener(actionListenerIncl);
  m_searchButtonIncl.addActionListener(actionListenerIncl);
  JPanel inclSearchPanel=new JPanel(new BorderLayout());
  inclSearchPanel.add(new JLabel(""String_Node_Str""),BorderLayout.WEST);
  inclSearchPanel.setBorder(BorderFactory.createEmptyBorder(15,15,15,15));
  inclSearchPanel.add(m_searchFieldIncl,BorderLayout.CENTER);
  inclSearchPanel.add(m_searchButtonIncl,BorderLayout.EAST);
  m_markAllHitsIncl=new JCheckBox(""String_Node_Str"");
  ActionListener actionListenerAllIncl=new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      m_inclList.clearSelection();
      onSearch(m_inclList,includeOptions,m_searchFieldIncl,m_markAllHitsIncl.isSelected());
    }
  }
;
  m_markAllHitsIncl.addActionListener(actionListenerAllIncl);
  inclSearchPanel.add(m_markAllHitsIncl,BorderLayout.PAGE_END);
  JPanel includePanel=new JPanel(new BorderLayout());
  m_includeBorder=BorderFactory.createTitledBorder(INCLUDE_BORDER,""String_Node_Str"");
  includePanel.setBorder(m_includeBorder);
  includePanel.add(inclSearchPanel,BorderLayout.NORTH);
  includePanel.add(jspIncl,BorderLayout.CENTER);
  availableOptions=new DefaultListModel();
  m_exclList=new JList(availableOptions);
  m_exclList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  m_exclList.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    final MouseEvent me){
      if (me.getClickCount() == 2) {
        onAddIt();
        me.consume();
      }
    }
  }
);
  setListCellRenderer(cellRenderer);
  final JScrollPane jspExcl=new JScrollPane(m_exclList);
  jspExcl.setMinimumSize(new Dimension(130,155));
  jspExcl.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
  m_searchFieldExcl=new JTextField(8);
  m_searchButtonExcl=new JButton(""String_Node_Str"");
  ActionListener actionListenerExcl=new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      onSearch(m_exclList,availableOptions,m_searchFieldExcl,m_markAllHitsExcl.isSelected());
    }
  }
;
  m_searchFieldExcl.addActionListener(actionListenerExcl);
  m_searchButtonExcl.addActionListener(actionListenerExcl);
  JPanel exclSearchPanel=new JPanel(new BorderLayout());
  exclSearchPanel.setBorder(BorderFactory.createEmptyBorder(15,15,15,15));
  exclSearchPanel.add(new JLabel(""String_Node_Str""),BorderLayout.WEST);
  exclSearchPanel.add(m_searchFieldExcl,BorderLayout.CENTER);
  exclSearchPanel.add(m_searchButtonExcl,BorderLayout.EAST);
  m_markAllHitsExcl=new JCheckBox(""String_Node_Str"");
  ActionListener actionListenerAllExcl=new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      m_exclList.clearSelection();
      onSearch(m_exclList,availableOptions,m_searchFieldExcl,m_markAllHitsExcl.isSelected());
    }
  }
;
  m_markAllHitsExcl.addActionListener(actionListenerAllExcl);
  exclSearchPanel.add(m_markAllHitsExcl,BorderLayout.PAGE_END);
  JPanel excludePanel=new JPanel(new BorderLayout());
  m_excludeBorder=BorderFactory.createTitledBorder(EXCLUDE_BORDER,""String_Node_Str"");
  excludePanel.setBorder(m_excludeBorder);
  excludePanel.add(exclSearchPanel,BorderLayout.NORTH);
  excludePanel.add(jspExcl,BorderLayout.CENTER);
  JPanel buttonPan2=new JPanel(new GridLayout());
  Border border=BorderFactory.createTitledBorder(""String_Node_Str"");
  buttonPan2.setBorder(border);
  buttonPan2.add(buttonPan);
  JPanel center=new JPanel();
  center.setLayout(new BoxLayout(center,BoxLayout.X_AXIS));
  center.add(excludePanel);
  center.add(buttonPan2);
  center.add(includePanel);
  JPanel all=new JPanel();
  all.setLayout(new BoxLayout(all,BoxLayout.Y_AXIS));
  all.add(center);
  super.setLayout(new GridLayout(1,1));
  super.add(all);
}",0.9862490450725744
179671,"@DataBoundConstructor public SSOKerberosSecurityRealm(String kdc,String realm){
}","@DataBoundConstructor public SSOKerberosSecurityRealm(String kdc,String realm){
  this.realm=realm;
  this.kdc=kdc;
  try {
    setUpKerberos();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    PluginServletFilter.addFilter(new KerberosAuthenticationFilter(authenticator));
    setUpKerberos();
  }
 catch (  ServletException e) {
    e.printStackTrace();
  }
catch (  LoginException e) {
    e.printStackTrace();
  }
catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  GSSException e) {
    e.printStackTrace();
  }
catch (  PrivilegedActionException e) {
    e.printStackTrace();
  }
catch (  URISyntaxException e) {
    e.printStackTrace();
  }
}",0.2069857697283312
179672,"private void setUpKerberos(){
}","private void setUpKerberos() throws LoginException, FileNotFoundException, GSSException, PrivilegedActionException, URISyntaxException {
  try {
    createConfigFiles();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  Map<String,String> props=new HashMap<String,String>();
  props.put(""String_Node_Str"",Hudson.getInstance().getRootDir().getPath() + ""String_Node_Str"");
  props.put(""String_Node_Str"",Hudson.getInstance().getRootDir().getPath() + ""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  authenticator=new SpnegoAuthenticator(props);
  System.setProperty(""String_Node_Str"",realm);
  System.setProperty(""String_Node_Str"",kdc);
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",Hudson.getInstance().getRootDir().getPath() + ""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",Hudson.getInstance().getRootDir().getPath() + ""String_Node_Str"");
}",0.046337817638266
179673,"private void createConfigFiles() throws IOException {
}","private void createConfigFiles() throws IOException {
  File krbConf=new File(Hudson.getInstance().getRootDir().getPath() + ""String_Node_Str"");
  if (!krbConf.exists()) {
    krbConf.createNewFile();
    FileWriter writer=new FileWriter(krbConf);
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.flush();
    writer.close();
  }
  File jaasConf=new File(Hudson.getInstance().getRootDir().getPath() + ""String_Node_Str"");
  if (!jaasConf.exists()) {
    jaasConf.createNewFile();
    FileWriter writer=new FileWriter(jaasConf);
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.flush();
    writer.close();
  }
}",0.0852052672347017
179674,"public static void main(String... args){
  if (args != null && args.length > 0) {
    int length=args.length;
    if (length != 1 && length != 2 && length != 3 && length != 4) {
      usage();
      System.exit(-1);
    }
 else {
      String path=""String_Node_Str"";
      String run=null;
      if (length == 1) {
        run=args[0];
      }
      if (length == 2) {
        SimpleModuleLogger.enableTrace(true);
        if (!args[1].equals(""String_Node_Str"")) {
          usage();
          System.exit(-1);
        }
        run=args[0];
      }
      if (length == 3) {
        if (args[0].equals(""String_Node_Str"")) {
          path=args[1];
          run=args[2];
        }
 else {
          if (!args[1].equals(""String_Node_Str"")) {
            usage();
            System.exit(-1);
          }
          run=args[0];
          path=args[2];
        }
      }
      if (length == 4) {
        SimpleModuleLogger.enableTrace(true);
        if (!args[3].equals(""String_Node_Str"")) {
          usage();
          System.exit(-1);
        }
        if (args[0].equals(""String_Node_Str"")) {
          path=args[1];
          run=args[2];
        }
 else {
          if (!args[1].equals(""String_Node_Str"")) {
            usage();
            System.exit(-1);
          }
          run=args[0];
          path=args[2];
        }
      }
      File root=new File(path);
      SimpleModuleLogger.info(""String_Node_Str"",root.getAbsolutePath());
      long start=System.currentTimeMillis();
      Collection<Configuration> configs=Modules.scanForModules(URLUtils.url(path));
      SimpleModuleLogger.info(""String_Node_Str"",configs.size(),String.valueOf((System.currentTimeMillis() - start)));
      Modules modules=new Modules();
      modules.addModules(configs);
      modules.startModule(run);
    }
  }
}","public static void main(String... args){
  if (args != null && args.length > 0) {
    int length=args.length;
    if (length != 1 && length != 2 && length != 3 && length != 4) {
      usage();
      System.exit(-1);
    }
 else {
      String path=""String_Node_Str"";
      String run=null;
      if (length == 1) {
        run=args[0];
      }
      if (length == 2) {
        SimpleModuleLogger.enableTrace(true);
        if (!args[1].equals(""String_Node_Str"")) {
          usage();
          System.exit(-1);
        }
        run=args[0];
      }
      if (length == 3) {
        if (args[0].equals(""String_Node_Str"")) {
          path=args[1];
          run=args[2];
        }
 else {
          if (!args[1].equals(""String_Node_Str"")) {
            usage();
            System.exit(-1);
          }
          run=args[0];
          path=args[2];
        }
      }
      if (length == 4) {
        SimpleModuleLogger.enableTrace(true);
        if (!args[3].equals(""String_Node_Str"")) {
          usage();
          System.exit(-1);
        }
        if (args[0].equals(""String_Node_Str"")) {
          path=args[1];
          run=args[2];
        }
 else {
          if (!args[1].equals(""String_Node_Str"")) {
            usage();
            System.exit(-1);
          }
          run=args[0];
          path=args[2];
        }
      }
      File root=new File(path);
      SimpleModuleLogger.info(""String_Node_Str"",root.getAbsolutePath());
      long start=System.currentTimeMillis();
      Collection<Configuration> configs=Modules.scanForModules(URLUtils.url(path));
      SimpleModuleLogger.info(""String_Node_Str"",configs.size(),String.valueOf((System.currentTimeMillis() - start)));
      Modules modules=new Modules();
      modules.addModules(configs);
      modules.startModule(run);
    }
  }
 else {
    usage();
    System.exit(-1);
  }
}",0.987417943107221
179675,"public void onTaskPostExecute(byte[] buffer){
  hideLoading();
  String xml=""String_Node_Str"";
  try {
    xml=new String(buffer,MENU_XML_ENCODING);
  }
 catch (  UnsupportedEncodingException e) {
    showError(R.string.err_exception);
    e.printStackTrace();
    L.e(""String_Node_Str"",e);
  }
  if (""String_Node_Str"".equals(xml)) {
    showError(R.string.err_network);
    return;
  }
  saveXML(xml);
  parseMenu();
  showMenu();
}","public void onTaskPostExecute(byte[] buffer){
  hideLoading();
  if (buffer == null) {
    showError(R.string.err_network);
    return;
  }
  String xml=""String_Node_Str"";
  try {
    xml=new String(buffer,MENU_XML_ENCODING);
  }
 catch (  UnsupportedEncodingException e) {
    showError(R.string.err_exception);
    e.printStackTrace();
    L.e(""String_Node_Str"",e);
  }
  if (""String_Node_Str"".equals(xml)) {
    showError(R.string.err_network);
    return;
  }
  saveXML(xml);
  parseMenu();
  showMenu();
}",0.9183457051961824
179676,"protected void onBackPressed(){
  L.d(""String_Node_Str"");
switch (currentScreen) {
case MENU:
    L.d(""String_Node_Str"");
  finish();
break;
case DAY_MENU:
switchToScreen(Screen.MENU);
break;
}
}","public void onBackPressed(){
  L.d(""String_Node_Str"");
switch (currentScreen) {
case MENU:
    L.d(""String_Node_Str"");
  finish();
break;
case DAY_MENU:
switchToScreen(Screen.MENU);
break;
}
}",0.9715762273901808
179677,"/** 
 * Checks if the value of the holder matches the ValueType.
 * @throws IllegalArgumentException if the value doesn't match the type 
 */
protected void typeCheck(){
  IllegalArgumentException e=new IllegalArgumentException(""String_Node_Str"" + this.value + ""String_Node_Str""+ this.type.name());
  if (this.type.equals(ValueType.STRING)) {
    if (!(this.value instanceof String)) {
      throw e;
    }
  }
 else   if (this.type.equals(ValueType.INTEGER) || this.type.equals(ValueType.REAL)) {
    if (!(this.value instanceof Number)) {
      throw e;
    }
  }
 else   if (this.type.equals(ValueType.DATE)) {
    if (!(this.value instanceof Date)) {
      throw e;
    }
  }
 else   if (this.type.equals(ValueType.BLOB)) {
    if (!(this.value instanceof Blob)) {
      throw e;
    }
  }
 else   if (this.type.equals(ValueType.BINARY)) {
    if (!(this.value instanceof byte[])) {
      throw e;
    }
  }
 else   if (this.type.equals(ValueType.BOOLEAN)) {
    if (!(this.value instanceof Boolean)) {
      throw e;
    }
  }
}","/** 
 * Checks if the value of the holder matches the ValueType.
 * @throws IllegalArgumentException if the value doesn't match the type
 */
protected void typeCheck(){
  IllegalArgumentException e=new IllegalArgumentException(""String_Node_Str"" + this.value + ""String_Node_Str""+ this.type.name());
  if (this.type.equals(ValueType.STRING)) {
    if (!(this.value instanceof String)) {
      throw e;
    }
  }
 else   if (this.type.equals(ValueType.INTEGER) || this.type.equals(ValueType.REAL)) {
    if (!(this.value instanceof Number)) {
      throw e;
    }
    if (this.type.equals(ValueType.INTEGER)) {
      if (((Number)this.value).longValue() != ((Number)this.value).doubleValue()) {
        throw e;
      }
    }
  }
 else   if (this.type.equals(ValueType.DATE)) {
    if (!(this.value instanceof Date)) {
      throw e;
    }
  }
 else   if (this.type.equals(ValueType.BLOB)) {
    if (!(this.value instanceof Blob)) {
      throw e;
    }
  }
 else   if (this.type.equals(ValueType.BINARY)) {
    if (!(this.value instanceof byte[])) {
      throw e;
    }
  }
 else   if (this.type.equals(ValueType.BOOLEAN)) {
    if (!(this.value instanceof Boolean)) {
      throw e;
    }
  }
}",0.9268073641670408
179678,"@Override public BigInteger getBigInt(BigInteger defaultValue){
  try {
    if (this.value instanceof BigInteger) {
      return (BigInteger)this.value;
    }
 else     if (getType().equals(ValueType.BOOLEAN)) {
      return ((Boolean)this.value).booleanValue() ? BigInteger.ONE : BigInteger.ZERO;
    }
 else     if (getType().equals(ValueType.BINARY) || getType().equals(ValueType.BLOB)) {
      byte[] bytes=getBytes();
      return new BigInteger(bytes);
    }
 else     if (getType().equals(ValueType.STRING)) {
      return new BigInteger(this.value.toString());
    }
 else {
      long l=0;
      if (getType().equals(ValueType.INTEGER) || getType().equals(ValueType.REAL)) {
        l=((Number)this.value).longValue();
      }
 else       if (getType().equals(ValueType.DATE)) {
        l=((Date)this.value).getTime();
      }
 else {
        return defaultValue;
      }
      return new BigInteger(String.valueOf(l));
    }
  }
 catch (  NumberFormatException e) {
  }
  return defaultValue;
}","@Override public BigInteger getBigInt(BigInteger defaultValue){
  try {
    if (this.value instanceof BigInteger) {
      return (BigInteger)this.value;
    }
 else     if (getType().equals(ValueType.BOOLEAN)) {
      return ((Boolean)this.value).booleanValue() ? BigInteger.ONE : BigInteger.ZERO;
    }
 else     if (getType().equals(ValueType.BINARY) || getType().equals(ValueType.BLOB)) {
      byte[] bytes=getBytes();
      return new BigInteger(bytes);
    }
 else     if (getType().equals(ValueType.STRING)) {
      return new BigInteger(this.value.toString());
    }
 else {
      long l=0;
      if (getType().equals(ValueType.INTEGER) || getType().equals(ValueType.REAL)) {
        l=((Number)this.value).longValue();
      }
 else       if (getType().equals(ValueType.DATE)) {
        l=((Date)this.value).getTime();
      }
 else {
        return defaultValue;
      }
      return BigInteger.valueOf(l);
    }
  }
 catch (  NumberFormatException e) {
  }
  return defaultValue;
}",0.9839679358717436
179679,"/** 
 * Sets the yaml dumper options. <p> By default it's block style, 4 spaces ident.
 * @param options  yaml dumper options
 */
public void setDumperOptions(DumperOptions options){
  this.options=options;
}","/** 
 * Sets the yaml dumper options. <p> By default it's block style, 4 spaces ident.
 * @param options  yaml dumper options
 * @return         this
 */
public Settings setDumperOptions(DumperOptions options){
  this.options=options;
  return this;
}",0.8888888888888888
179680,"/** 
 * NOT IMPLEMENTED YET! Sets the state of multi-document option (off by default). <p> This option allows to read multiple yaml documents from one file (separated by   {@code ---}).
 * @param multiDocument  true to turn on, false to turn off
 */
public void setMultiDocument(boolean multiDocument){
  this.multiDocument=multiDocument;
}","/** 
 * NOT IMPLEMENTED YET! Sets the state of multi-document option (off by default). <p> This option allows to read multiple yaml documents from one file (separated by   {@code ---}).
 * @param multiDocument  true to turn on, false to turn off
 * @return               this
 */
public Settings setMultiDocument(boolean multiDocument){
  this.multiDocument=multiDocument;
  return this;
}",0.9218106995884774
179681,"/** 
 * Sets the path separator to be used (default   {@code "".""}).
 * @param separator  the path separator
 */
public void setSeparator(String separator){
  this.separator=separator;
}","/** 
 * Sets the path separator to be used (default   {@code "".""}).
 * @param separator  the path separator
 * @return           this
 */
public Settings setSeparator(String separator){
  this.separator=separator;
  return this;
}",0.8722891566265061
179682,"/** 
 * Sets the yaml representer to be used (  {@link EmptyNullRepresenter} by default).
 * @param representer  the yaml representer
 */
public void setRepresenter(Representer representer){
  this.representer=representer;
}","/** 
 * Sets the yaml representer to be used (  {@link EmptyNullRepresenter} by default).
 * @param representer  the yaml representer
 * @return             this
 */
public Settings setRepresenter(Representer representer){
  this.representer=representer;
  return this;
}",0.8888888888888888
179683,"/** 
 * Sets the state of case-sensitive option (off by default). <p> If this option is on, node names will be case-sensitive.
 * @param caseSensitive  true to turn on, false to turn off
 */
public void setCaseSensitive(boolean caseSensitive){
  this.caseSensitive=caseSensitive;
}","/** 
 * Sets the state of case-sensitive option (off by default). <p> If this option is on, node names will be case-sensitive.
 * @param caseSensitive  true to turn on, false to turn off
 * @return               this
 */
public Settings setCaseSensitive(boolean caseSensitive){
  this.caseSensitive=caseSensitive;
  return this;
}",0.9067103109656302
179684,"/** 
 * Sets the yaml resolver to be used (  {@link Resolver} by default).
 * @param resolver  the yaml resolver
 */
public void setResolver(Resolver resolver){
  this.resolver=resolver;
}","/** 
 * Sets the yaml resolver to be used (  {@link Resolver} by default).
 * @param resolver  the yaml resolver
 * @return          this
 */
public Settings setResolver(Resolver resolver){
  this.resolver=resolver;
  return this;
}",0.8761904761904762
179685,"/** 
 * Sets the yaml constructor to be used (  {@link Constructor} by default).
 * @param constructor  the yaml constructor
 */
public void setConstructor(BaseConstructor constructor){
  this.constructor=constructor;
}","/** 
 * Sets the yaml constructor to be used (  {@link Constructor} by default).
 * @param constructor  the yaml constructor
 * @return             this
 */
public Settings setConstructor(BaseConstructor constructor){
  this.constructor=constructor;
  return this;
}",0.8865979381443299
179686,"/** 
 * Sets the logging manager to be used. <p> By default it's   {@code new LoggingManager(""CraftFire.YamlManager"", ""[YamlManager]"")}.
 * @param logger                   the logging manager
 * @throws IllegalArgumentException if the logger is null
 */
public void setLogger(LoggingManager logger){
  if (logger == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.logger=logger;
}","/** 
 * Sets the logging manager to be used. <p> By default it's   {@code new LoggingManager(""CraftFire.YamlManager"", ""[YamlManager]"")}.
 * @param logger                   the logging manager
 * @return                          this
 * @throws IllegalArgumentException if the logger is null
 */
public Settings setLogger(LoggingManager logger){
  if (logger == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.logger=logger;
  return this;
}",0.9227272727272728
179687,"/** 
 * Returns map of child nodes of this map node.
 * @return               a map of child nodes
 * @throws YamlException if the node is not a map
 */
public Map<String,YamlNode> getChildrenMap() throws YamlException {
  if (!isMap()) {
    throw new YamlException(""String_Node_Str"",getPath());
  }
  if (!this.resolved) {
    this.mapCache=new HashMap<String,YamlNode>();
    for (    Map.Entry<?,?> entry : ((Map<?,?>)getValue()).entrySet()) {
      String name=normalizePath(entry.getKey().toString());
      this.mapCache.put(name,new YamlNode(this,name,entry.getValue()));
    }
    this.holder=new ValueHolderBase(this.holder.getName(),false,null);
    this.resolved=true;
  }
  return new HashMap<String,YamlNode>(this.mapCache);
}","/** 
 * Returns map of child nodes of this map node.
 * @return               a map of child nodes
 * @throws YamlException if the node is not a map
 */
public Map<String,YamlNode> getChildrenMap() throws YamlException {
  if (!isMap()) {
    throw new YamlException(""String_Node_Str"",getPath());
  }
  if (!this.resolved) {
    this.mapCache=new HashMap<String,YamlNode>();
    for (    Map.Entry<?,?> entry : ((Map<?,?>)this.holder.getValue()).entrySet()) {
      String name=normalizePath(entry.getKey().toString());
      this.mapCache.put(name,new YamlNode(this,name,entry.getValue()));
    }
    this.holder=new ValueHolderBase(this.holder.getName(),false,null);
    this.resolved=true;
  }
  return new HashMap<String,YamlNode>(this.mapCache);
}",0.9919571045576407
179688,"/** 
 * Removes specified child node from this node's children.
 * @param node  the node to remove
 * @return      {@code node} if removed, or {@code null} if not this node's child
 */
public YamlNode removeChild(YamlNode node){
  if (isScalar() || node.getParent() != this) {
    return null;
  }
  if (!this.resolved) {
    try {
      getChildrenList();
    }
 catch (    YamlException e) {
      this.manager.getLogger().stackTrace(e);
      return null;
    }
  }
  if (isList()) {
    this.listCache.remove(node);
  }
 else {
    this.mapCache.remove(node.getName());
  }
  node.setParent(null);
  return node;
}","/** 
 * Removes specified child node from this node's children.
 * @param node  the node to remove
 * @return      {@code node} if removed, or {@code null} if not this node's child
 */
public YamlNode removeChild(YamlNode node){
  if (isScalar() || node.getParent() != this) {
    return null;
  }
  if (!this.resolved) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (isList()) {
    this.listCache.remove(node);
  }
 else {
    this.mapCache.remove(node.getName());
  }
  node.setParent(null);
  return node;
}",0.8598781549173194
179689,"/** 
 * Checks if this node is a list.
 * @return {@code true} if it's a list, {@code false} otherwise
 */
public boolean isList(){
  if (this.resolved) {
    return this.listCache != null;
  }
  return getValue() instanceof Collection<?>;
}","/** 
 * Checks if this node is a list.
 * @return {@code true} if it's a list, {@code false} otherwise
 */
public boolean isList(){
  if (this.resolved) {
    return this.listCache != null;
  }
  return this.holder.getValue() instanceof Collection<?>;
}",0.9757085020242916
179690,"/** 
 * Dumps the node with all children to a standard JRE class (lie Map, List, or Integer), which can be then dumped to file (eg. with SnakeYaml).
 * @return dumped node
 */
public Object dump(){
  if (!this.resolved) {
    return getValue();
  }
  if (isList()) {
    List<Object> list=new ArrayList<Object>();
    for (    YamlNode node : this.listCache) {
      list.add(node.dump());
    }
    return list;
  }
  Map<String,Object> map=new HashMap<String,Object>();
  for (  Map.Entry<String,YamlNode> entry : this.mapCache.entrySet()) {
    map.put(entry.getKey(),entry.getValue().dump());
  }
  return map;
}","/** 
 * Dumps the node with all children to a standard JRE class (lie Map, List, or Integer), which can be then dumped to file (eg. with SnakeYaml).
 * @return dumped node
 */
public Object dump(){
  if (!this.resolved) {
    return this.holder.getValue();
  }
  if (isList()) {
    List<Object> list=new ArrayList<Object>();
    for (    YamlNode node : this.listCache) {
      list.add(node.dump());
    }
    return list;
  }
  Map<String,Object> map=new HashMap<String,Object>();
  for (  Map.Entry<String,YamlNode> entry : this.mapCache.entrySet()) {
    map.put(entry.getKey(),entry.getValue().dump());
  }
  return map;
}",0.990353697749196
179691,"/** 
 * Returns map of child nodes of this list node or map node.
 * @return               a list of child nodes
 * @throws YamlException if the node is a scalar
 */
public List<YamlNode> getChildrenList() throws YamlException {
  if (isMap()) {
    if (this.resolved) {
      return new ArrayList<YamlNode>(this.mapCache.values());
    }
    return new ArrayList<YamlNode>(getChildrenMap().values());
  }
  if (!isList()) {
    throw new YamlException(""String_Node_Str"",getPath());
  }
  if (!this.resolved) {
    this.listCache=new ArrayList<YamlNode>();
    for (    Object o : (Collection<?>)getValue()) {
      this.listCache.add(new YamlNode(this,""String_Node_Str"",o));
    }
    this.holder=new ValueHolderBase(this.holder.getName(),false,null);
    this.resolved=true;
  }
  return new ArrayList<YamlNode>(this.listCache);
}","/** 
 * Returns map of child nodes of this list node or map node.
 * @return               a list of child nodes
 * @throws YamlException if the node is a scalar
 */
public List<YamlNode> getChildrenList() throws YamlException {
  if (isMap()) {
    if (this.resolved) {
      return new ArrayList<YamlNode>(this.mapCache.values());
    }
    return new ArrayList<YamlNode>(getChildrenMap().values());
  }
  if (!isList()) {
    throw new YamlException(""String_Node_Str"",getPath());
  }
  if (!this.resolved) {
    this.listCache=new ArrayList<YamlNode>();
    for (    Object o : (Collection<?>)this.holder.getValue()) {
      this.listCache.add(new YamlNode(this,""String_Node_Str"",o));
    }
    this.holder=new ValueHolderBase(this.holder.getName(),false,null);
    this.resolved=true;
  }
  return new ArrayList<YamlNode>(this.listCache);
}",0.9928400954653938
179692,"/** 
 * Checks if this node is a map.
 * @return {@code true} if it's a map, {@code false} otherwise
 */
public boolean isMap(){
  if (this.resolved) {
    return this.mapCache != null;
  }
  return getValue() instanceof Map<?,?>;
}","/** 
 * Checks if this node is a map.
 * @return {@code true} if it's a map, {@code false} otherwise
 */
public boolean isMap(){
  if (this.resolved) {
    return this.mapCache != null;
  }
  return this.holder.getValue() instanceof Map<?,?>;
}",0.9747899159663864
179693,"/** 
 * Returns a list of names of all nodes in the path to this node.
 * @return  a list of path elements
 */
public List<String> getPathElements(){
  List<String> elements;
  if (hasParent()) {
    elements=getParent().getPathElements();
  }
 else {
    elements=new ArrayList<String>();
  }
  if (getName() != null) {
    elements.add(getName());
  }
  return elements;
}","/** 
 * Returns a list of names of all nodes in the path to this node.
 * @return  a list of path elements
 */
public List<String> getPathElements(){
  List<String> elements;
  if (hasParent()) {
    elements=getParent().getPathElements();
  }
 else {
    elements=new ArrayList<String>();
  }
  if (this.holder.getName() != null) {
    elements.add(this.holder.getName());
  }
  return elements;
}",0.9689119170984456
179694,"/** 
 * Creates a new YamlNode with given parent node, node name, and value.
 * @param parent  the parent node
 * @param name    the name
 * @param value   the value
 */
public YamlNode(YamlNode parent,String name,Object value){
  this(parent.getYamlManager(),name,value);
  this.parent=parent;
}","/** 
 * Creates a new YamlNode with given parent node, node name, and value.
 * @param parent  the parent node
 * @param name    the name
 * @param value   the value
 */
protected YamlNode(YamlNode parent,String name,Object value){
  this(parent.getYamlManager(),name,value);
  this.parent=parent;
}",0.9815126050420168
179695,"/** 
 * Returns number of children of the node.
 * @return number of children
 */
public int getChildrenCount(){
  if (isScalar()) {
    return 0;
  }
  try {
    getChildrenList();
  }
 catch (  YamlException e) {
    this.manager.getLogger().stackTrace(e);
    return 0;
  }
  if (isList()) {
    return this.listCache.size();
  }
  return this.mapCache.size();
}","/** 
 * Returns number of children of the node.
 * @return number of children
 */
public int getChildrenCount(){
  if (isScalar()) {
    return 0;
  }
  if (!this.resolved) {
    try {
      getChildrenList();
    }
 catch (    YamlException e) {
      this.manager.getLogger().stackTrace(e);
      return 0;
    }
  }
  if (isList()) {
    return this.listCache.size();
  }
  return this.mapCache.size();
}",0.9196891191709844
179696,"/** 
 * Returns a descendant node of this node with given path (relative to this node). <p> If any the nodes in path don't exist, and   {@code add} is {@code true}, then creates them. If the node is null, and attempting to create the child, the node will be turned into a map.
 * @param path           path of the descendant node, separated with this node's YamlManager's path separator
 * @param add            weather or not create the node if doesn't exist
 * @return               the descendant node, or {@code null} if doesn't exist and not being created
 * @throws YamlException if any node in the path is not a map and not null
 */
public YamlNode getNode(String path,boolean add) throws YamlException {
  String[] elements=normalizePath(path).split(Pattern.quote(this.manager.getSeparator()),2);
  if (elements.length == 0) {
    return this;
  }
  YamlNode node=getChild(elements[0],add);
  if (node == null || elements.length == 1) {
    return node;
  }
  return node.getNode(elements[1],add);
}","/** 
 * Returns a descendant node of this node with given path (relative to this node). <p> If any the nodes in path don't exist, and   {@code add} is {@code true}, then creates them. If the node is null, and attempting to create the child, the node will be turned into a map.
 * @param path           path of the descendant node, separated with this node's YamlManager's path separator
 * @param add            weather or not create the node if doesn't exist
 * @return               the descendant node, or {@code null} if doesn't exist and not being created
 * @throws YamlException if any node in the path is not a map and not null
 */
public YamlNode getNode(String path,boolean add) throws YamlException {
  String[] elements=normalizePath(path).split(Pattern.quote(this.manager.getSeparator()),2);
  if (elements.length == 0 || path.isEmpty()) {
    return null;
  }
  YamlNode node=getChild(elements[0],add);
  if (node == null || elements.length == 1) {
    return node;
  }
  return node.getNode(elements[1],add);
}",0.9872047244094488
179697,"/** 
 * Checks if the node has a descendant node with given path (relative to this node).
 * @param path  path of the descendant node, separated with this node's YamlManager's path separator
 * @return      {@code true} if has, {@code false} otherwise
 */
public boolean hasNode(String path){
  String[] elements=normalizePath(path).split(Pattern.quote(this.manager.getSeparator()),2);
  if (elements.length == 0 || !hasChild(elements[0])) {
    return false;
  }
  if (elements.length == 1) {
    return true;
  }
  try {
    return getChild(elements[0]).hasNode(elements[1]);
  }
 catch (  YamlException e) {
    this.manager.getLogger().stackTrace(e);
    return false;
  }
}","/** 
 * Checks if the node has a descendant node with given path (relative to this node).
 * @param path  path of the descendant node, separated with this node's YamlManager's path separator
 * @return      {@code true} if has, {@code false} otherwise
 */
public boolean hasNode(String path){
  String[] elements=normalizePath(path).split(Pattern.quote(this.manager.getSeparator()),2);
  if (elements.length == 0 || path.isEmpty() || !hasChild(elements[0])) {
    return false;
  }
  if (elements.length == 1) {
    return true;
  }
  try {
    return getChild(elements[0]).hasNode(elements[1]);
  }
 catch (  YamlException e) {
    this.manager.getLogger().stackTrace(e);
    return false;
  }
}",0.9868995633187772
179698,"public void close(boolean force){
  if (this.keepAlive && !this.reconnect && !force) {
    if (this.timeout == 0) {
      return;
    }
 else     if ((System.currentTimeMillis() / 1000) < (this.startup + this.timeout)) {
      return;
    }
  }
  long start=System.currentTimeMillis();
  try {
    getLogging().debug(""String_Node_Str"" + this.datatype + ""String_Node_Str""+ new TimeUtil(getUptime()).toString()+ ""String_Node_Str""+ getQueriesCount());
    this.con.close();
    if (this.rs != null) {
      this.rs.close();
      this.rs=null;
    }
    if (this.pStmt != null) {
      this.pStmt.close();
      this.pStmt=null;
    }
    if (this.stmt != null) {
      this.stmt.close();
      this.stmt=null;
    }
    if (this.keepAlive && !force) {
      connect();
    }
  }
 catch (  SQLException e) {
    getLogging().stackTrace(e);
  }
  getLogging().debug(""String_Node_Str"" + new TimeUtil((System.currentTimeMillis() - start) / 1000).toString() + ""String_Node_Str""+ this.datatype+ ""String_Node_Str"");
}","public void close(boolean force){
  if (this.keepAlive && !this.reconnect && !force) {
    if (this.timeout == 0) {
      return;
    }
 else     if ((System.currentTimeMillis() / 1000) < (this.startup + this.timeout)) {
      return;
    }
  }
  long start=System.currentTimeMillis();
  try {
    getLogging().debug(""String_Node_Str"" + this.datatype + ""String_Node_Str""+ new TimeUtil(getUptime()).toString()+ ""String_Node_Str""+ getQueriesCount()+ ""String_Node_Str"");
    this.con.close();
    if (this.rs != null) {
      this.rs.close();
      this.rs=null;
    }
    if (this.pStmt != null) {
      this.pStmt.close();
      this.pStmt=null;
    }
    if (this.stmt != null) {
      this.stmt.close();
      this.stmt=null;
    }
    if (this.keepAlive && !force) {
      connect();
    }
  }
 catch (  SQLException e) {
    getLogging().stackTrace(e);
  }
  getLogging().debug(""String_Node_Str"" + new TimeUtil((System.currentTimeMillis() - start) / 1000).toString() + ""String_Node_Str""+ this.datatype+ ""String_Node_Str"");
}",0.9906633906633908
179699,"private void log(String query){
  this.lastQuery=query;
  this.queries.put(System.currentTimeMillis(),query);
  this.queriesCount++;
}","private void log(String query){
  getLogging().debug(""String_Node_Str"" + this.datatype + ""String_Node_Str""+ query+ ""String_Node_Str"");
  this.lastQuery=query;
  this.queries.put(System.currentTimeMillis(),query);
  this.queriesCount++;
}",0.7223719676549866
179700,"public void close(boolean force){
  if (this.keepAlive && !this.reconnect && !force) {
    if (this.timeout == 0) {
      return;
    }
 else     if ((System.currentTimeMillis() / 1000) < (this.startup + this.timeout)) {
      return;
    }
  }
  try {
    getLogging().debug(""String_Node_Str"" + this.datatype + ""String_Node_Str""+ new TimeUtil(getUptime()).toString()+ ""String_Node_Str""+ getQueriesCount());
    this.con.close();
    if (this.rs != null) {
      this.rs.close();
      this.rs=null;
    }
    if (this.pStmt != null) {
      this.pStmt.close();
      this.pStmt=null;
    }
    if (this.stmt != null) {
      this.stmt.close();
      this.stmt=null;
    }
    if (this.keepAlive) {
      connect();
    }
  }
 catch (  SQLException e) {
    getLogging().stackTrace(e);
  }
}","public void close(boolean force){
  if (this.keepAlive && !this.reconnect && !force) {
    if (this.timeout == 0) {
      return;
    }
 else     if ((System.currentTimeMillis() / 1000) < (this.startup + this.timeout)) {
      return;
    }
  }
  try {
    getLogging().debug(""String_Node_Str"" + this.datatype + ""String_Node_Str""+ new TimeUtil(getUptime()).toString()+ ""String_Node_Str""+ getQueriesCount());
    this.con.close();
    if (this.rs != null) {
      this.rs.close();
      this.rs=null;
    }
    if (this.pStmt != null) {
      this.pStmt.close();
      this.pStmt=null;
    }
    if (this.stmt != null) {
      this.stmt.close();
      this.stmt=null;
    }
    if (this.keepAlive && !force) {
      connect();
    }
  }
 catch (  SQLException e) {
    getLogging().stackTrace(e);
  }
}",0.993718592964824
179701,"private void load(InputStream yamlStream) throws IOException {
  this.yaml=new HashMap<String,Object>();
  if (yamlStream != null) {
    try {
      InputStreamReader yamlStreamReader=new InputStreamReader(yamlStream);
      BufferedReader buffer=new BufferedReader(yamlStreamReader);
      String line, node=""String_Node_Str"";
      int lastBlank=0;
      boolean isNode=false;
      while ((line=buffer.readLine()) != null) {
        int blank=0;
        if (line.length() > 0 && line.charAt(line.length() - 1) == ':') {
          for (int i=0; i < line.length(); i++) {
            if (Character.isWhitespace(line.charAt(i))) {
              blank++;
            }
          }
          line=line.replaceAll(""String_Node_Str"",""String_Node_Str"");
          line=line.replaceAll(""String_Node_Str"",""String_Node_Str"");
          if (blank == 0) {
            node=line + ""String_Node_Str"";
          }
 else           if (blank > lastBlank) {
            node+=line + ""String_Node_Str"";
          }
 else           if (blank <= lastBlank) {
            String[] split=node.split(""String_Node_Str"");
            if ((lastBlank - blank) > 0) {
              for (int i=1; ((lastBlank - blank) / 4) >= i; i++) {
                node=node.replace(""String_Node_Str"" + split[split.length - i],""String_Node_Str"");
              }
            }
 else {
              node=node.replace(""String_Node_Str"" + split[split.length - 1],""String_Node_Str"");
            }
            node+=line + ""String_Node_Str"";
          }
          lastBlank=blank;
          isNode=true;
        }
 else         if (line.length() > 0) {
          boolean set=false;
          for (int i=0; i < line.length() && !set; i++) {
            if (Character.isWhitespace(line.charAt(i))) {
              blank++;
            }
 else {
              set=true;
            }
          }
          String[] split=line.split(""String_Node_Str"");
          String finalNode=split[0].replaceAll(""String_Node_Str"",""String_Node_Str"");
          if (finalNode.startsWith(""String_Node_Str"")) {
            continue;
          }
          if (!isNode && blank > lastBlank) {
            node+=finalNode + ""String_Node_Str"";
          }
 else           if (!isNode && blank < lastBlank) {
            String[] spl=node.split(""String_Node_Str"");
            node=node.replace(""String_Node_Str"" + spl[spl.length - 1],""String_Node_Str"");
          }
          lastBlank=blank;
          String temp=split[1].substring(1);
          if (split.length > 1) {
            for (int i=2; split.length > i; i++) {
              temp+=""String_Node_Str"" + split[i];
            }
          }
          int index=temp.lastIndexOf('#');
          if (index != -1 && Character.isWhitespace(temp.charAt(index - 1))) {
            temp=temp.substring(0,index - 1);
          }
          String value=""String_Node_Str"";
          char last=0;
          for (int i=0; i < temp.length(); i++) {
            if (Character.isWhitespace(temp.charAt(i)) && Character.isWhitespace(last)) {
              continue;
            }
            value+=temp.charAt(i);
            last=temp.charAt(i);
          }
          if (Character.isWhitespace(value.charAt(value.length() - 1))) {
            value=value.substring(0,value.length() - 1);
          }
          if (value.equalsIgnoreCase(""String_Node_Str"")) {
            getLogger().debug(""String_Node_Str"" + node + finalNode+ ""String_Node_Str""+ ""String_Node_Str"");
            this.yaml.put(node + finalNode,true);
          }
 else           if (value.equalsIgnoreCase(""String_Node_Str"")) {
            getLogger().debug(""String_Node_Str"" + node + finalNode+ ""String_Node_Str""+ ""String_Node_Str"");
            this.yaml.put(node + finalNode,false);
          }
 else           if (Util.isInteger(value)) {
            getLogger().debug(""String_Node_Str"" + node + finalNode+ ""String_Node_Str""+ ""String_Node_Str""+ value+ ""String_Node_Str"");
            this.yaml.put(node + finalNode,Integer.parseInt(value));
          }
 else           if (Util.isLong(value)) {
            getLogger().debug(""String_Node_Str"" + node + finalNode+ ""String_Node_Str""+ ""String_Node_Str""+ value+ ""String_Node_Str"");
            this.yaml.put(node + finalNode,Long.parseLong(value));
          }
 else           if (value instanceof String && value != null && !value.equalsIgnoreCase(""String_Node_Str"")) {
            getLogger().debug(""String_Node_Str"" + node + finalNode+ ""String_Node_Str""+ ""String_Node_Str""+ value+ ""String_Node_Str"");
            this.yaml.put(node + finalNode,value);
          }
 else {
            getLogger().error(""String_Node_Str"" + node + finalNode+ ""String_Node_Str""+ ""String_Node_Str""+ value+ ""String_Node_Str"");
          }
          isNode=false;
        }
      }
    }
  finally {
      yamlStream.close();
    }
  }
}","private void load(InputStream yamlStream) throws IOException {
  if (yamlStream != null) {
    try {
      InputStreamReader yamlStreamReader=new InputStreamReader(yamlStream);
      BufferedReader buffer=new BufferedReader(yamlStreamReader);
      String line, node=""String_Node_Str"";
      int lastBlank=0;
      boolean isNode=false;
      while ((line=buffer.readLine()) != null) {
        int blank=0;
        if (line.length() > 0 && line.charAt(line.length() - 1) == ':') {
          for (int i=0; i < line.length(); i++) {
            if (Character.isWhitespace(line.charAt(i))) {
              blank++;
            }
          }
          line=line.replaceAll(""String_Node_Str"",""String_Node_Str"");
          line=line.replaceAll(""String_Node_Str"",""String_Node_Str"");
          if (blank == 0) {
            node=line + ""String_Node_Str"";
          }
 else           if (blank > lastBlank) {
            node+=line + ""String_Node_Str"";
          }
 else           if (blank <= lastBlank) {
            String[] split=node.split(""String_Node_Str"");
            if ((lastBlank - blank) > 0) {
              for (int i=1; ((lastBlank - blank) / 4) >= i; i++) {
                node=node.replace(""String_Node_Str"" + split[split.length - i],""String_Node_Str"");
              }
            }
 else {
              node=node.replace(""String_Node_Str"" + split[split.length - 1],""String_Node_Str"");
            }
            node+=line + ""String_Node_Str"";
          }
          lastBlank=blank;
          isNode=true;
        }
 else         if (line.length() > 0) {
          boolean set=false;
          for (int i=0; i < line.length() && !set; i++) {
            if (Character.isWhitespace(line.charAt(i))) {
              blank++;
            }
 else {
              set=true;
            }
          }
          String[] split=line.split(""String_Node_Str"");
          String finalNode=split[0].replaceAll(""String_Node_Str"",""String_Node_Str"");
          if (finalNode.startsWith(""String_Node_Str"")) {
            continue;
          }
          if (!isNode && blank > lastBlank) {
            node+=finalNode + ""String_Node_Str"";
          }
 else           if (!isNode && blank < lastBlank) {
            String[] spl=node.split(""String_Node_Str"");
            node=node.replace(""String_Node_Str"" + spl[spl.length - 1],""String_Node_Str"");
          }
          lastBlank=blank;
          String temp=split[1].substring(1);
          if (split.length > 1) {
            for (int i=2; split.length > i; i++) {
              temp+=""String_Node_Str"" + split[i];
            }
          }
          int index=temp.lastIndexOf('#');
          if (index != -1 && Character.isWhitespace(temp.charAt(index - 1))) {
            temp=temp.substring(0,index - 1);
          }
          String value=""String_Node_Str"";
          char last=0;
          for (int i=0; i < temp.length(); i++) {
            if (Character.isWhitespace(temp.charAt(i)) && Character.isWhitespace(last)) {
              continue;
            }
            value+=temp.charAt(i);
            last=temp.charAt(i);
          }
          if (Character.isWhitespace(value.charAt(value.length() - 1))) {
            value=value.substring(0,value.length() - 1);
          }
          if (value.equalsIgnoreCase(""String_Node_Str"")) {
            getLogger().debug(""String_Node_Str"" + node + finalNode+ ""String_Node_Str""+ ""String_Node_Str"");
            this.yaml.put(node + finalNode,true);
          }
 else           if (value.equalsIgnoreCase(""String_Node_Str"")) {
            getLogger().debug(""String_Node_Str"" + node + finalNode+ ""String_Node_Str""+ ""String_Node_Str"");
            this.yaml.put(node + finalNode,false);
          }
 else           if (Util.isInteger(value)) {
            getLogger().debug(""String_Node_Str"" + node + finalNode+ ""String_Node_Str""+ ""String_Node_Str""+ value+ ""String_Node_Str"");
            this.yaml.put(node + finalNode,Integer.parseInt(value));
          }
 else           if (Util.isLong(value)) {
            getLogger().debug(""String_Node_Str"" + node + finalNode+ ""String_Node_Str""+ ""String_Node_Str""+ value+ ""String_Node_Str"");
            this.yaml.put(node + finalNode,Long.parseLong(value));
          }
 else           if (value instanceof String && value != null && !value.equalsIgnoreCase(""String_Node_Str"")) {
            getLogger().debug(""String_Node_Str"" + node + finalNode+ ""String_Node_Str""+ ""String_Node_Str""+ value+ ""String_Node_Str"");
            this.yaml.put(node + finalNode,value);
          }
 else {
            getLogger().error(""String_Node_Str"" + node + finalNode+ ""String_Node_Str""+ ""String_Node_Str""+ value+ ""String_Node_Str"");
          }
          isNode=false;
        }
      }
    }
  finally {
      yamlStream.close();
    }
  }
}",0.9956140350877192
179702,"public YamlManager(String path) throws IOException {
  InputStream yaml=getClass().getClassLoader().getResourceAsStream(path);
  getLogger().debug(""String_Node_Str"" + path + ""String_Node_Str""+ yaml+ ""String_Node_Str"");
  load(yaml);
}","public YamlManager(String path) throws IOException {
  load(path);
}",0.4503311258278146
179703,"public DataField getField(FieldType field,String query) throws SQLException {
  try {
    connect();
    this.stmt=this.con.createStatement();
    this.rs=this.stmt.executeQuery(query);
    log(query);
    if (this.rs.next()) {
      Object value=null;
      if (field.equals(FieldType.STRING)) {
        value=this.rs.getString(1);
      }
 else       if (field.equals(FieldType.INTEGER)) {
        value=this.rs.getInt(1);
      }
 else       if (field.equals(FieldType.DATE)) {
        value=this.rs.getDate(1);
      }
 else       if (field.equals(FieldType.BLOB)) {
        value=this.rs.getBlob(1);
      }
 else       if (field.equals(FieldType.BINARY)) {
        value=this.rs.getBytes(1);
      }
 else       if (field.equals(FieldType.BOOLEAN)) {
        value=this.rs.getBoolean(1);
      }
 else       if (field.equals(FieldType.REAL)) {
        value=this.rs.getDouble(1);
      }
 else       if (field.equals(FieldType.UNKNOWN)) {
        return new DataField(1,this.rs);
      }
      close();
      if (value == null) {
        return null;
      }
      return new DataField(field,this.rs.getMetaData().getColumnDisplaySize(1),value);
    }
  }
  finally {
    close();
  }
  return null;
}","public DataField getField(FieldType field,String query) throws SQLException {
  try {
    connect();
    this.stmt=this.con.createStatement();
    this.rs=this.stmt.executeQuery(query);
    log(query);
    if (this.rs.next()) {
      Object value=null;
      if (field.equals(FieldType.STRING)) {
        value=this.rs.getString(1);
      }
 else       if (field.equals(FieldType.INTEGER)) {
        value=this.rs.getInt(1);
      }
 else       if (field.equals(FieldType.DATE)) {
        value=this.rs.getTimestamp(1);
      }
 else       if (field.equals(FieldType.BLOB)) {
        value=this.rs.getBlob(1);
      }
 else       if (field.equals(FieldType.BINARY)) {
        value=this.rs.getBytes(1);
      }
 else       if (field.equals(FieldType.BOOLEAN)) {
        value=this.rs.getBoolean(1);
      }
 else       if (field.equals(FieldType.REAL)) {
        value=this.rs.getDouble(1);
      }
 else       if (field.equals(FieldType.UNKNOWN)) {
        return new DataField(1,this.rs);
      }
      close();
      if (value == null) {
        return null;
      }
      return new DataField(field,this.rs.getMetaData().getColumnDisplaySize(1),value);
    }
  }
  finally {
    close();
  }
  return null;
}",0.9946258784621744
179704,"@Test public void testUpdate() throws SQLException {
  String oldString=datamanager.getStringField(wrtable,""String_Node_Str"",""String_Node_Str"");
  String testString=""String_Node_Str"" + (randomInt + 2);
  Map<String,Object> data=new HashMap<String,Object>();
  data.put(""String_Node_Str"",testString);
  datamanager.updateFields(data,wrtable,""String_Node_Str"");
  assertEquals(testString,datamanager.getStringField(wrtable,""String_Node_Str"",""String_Node_Str""));
  datamanager.updateField(wrtable,""String_Node_Str"",oldString,""String_Node_Str"");
  assertEquals(oldString,datamanager.getStringField(wrtable,""String_Node_Str"",""String_Node_Str""));
}","@Test public void testUpdate() throws SQLException {
  String oldString=datamanager.getStringField(wrtable,""String_Node_Str"",""String_Node_Str"");
  String testString=""String_Node_Str"" + (randomInt + 2);
  Date oldDate=datamanager.getDateField(wrtable,""String_Node_Str"",""String_Node_Str"");
  Map<String,Object> data=new HashMap<String,Object>();
  data.put(""String_Node_Str"",testString);
  data.put(""String_Node_Str"",null);
  datamanager.updateFields(data,wrtable,""String_Node_Str"");
  assertEquals(testString,datamanager.getStringField(wrtable,""String_Node_Str"",""String_Node_Str""));
  assertNull(datamanager.getDateField(wrtable,""String_Node_Str"",""String_Node_Str""));
  datamanager.updateField(wrtable,""String_Node_Str"",oldString,""String_Node_Str"");
  datamanager.updateField(wrtable,""String_Node_Str"",oldDate,""String_Node_Str"");
  assertEquals(oldString,datamanager.getStringField(wrtable,""String_Node_Str"",""String_Node_Str""));
  assertEquals(oldDate,datamanager.getDateField(wrtable,""String_Node_Str"",""String_Node_Str""));
}",0.7707082833133253
179705,"@Test public void testInsert() throws SQLException {
  int prevId=datamanager.getLastID(""String_Node_Str"",wrtable);
  Map<String,Object> data=new HashMap<String,Object>();
  data.put(""String_Node_Str"",""String_Node_Str"" + randomInt);
  data.put(""String_Node_Str"",randomInt + 1);
  datamanager.insertFields(data,wrtable);
  int id=datamanager.getLastID(""String_Node_Str"",wrtable);
  assertTrue(id > prevId);
  assertEquals(randomInt + 1,datamanager.getIntegerField(wrtable,""String_Node_Str"",""String_Node_Str"" + id + ""String_Node_Str""));
  assertEquals(""String_Node_Str"" + randomInt,datamanager.getStringField(wrtable,""String_Node_Str"",""String_Node_Str"" + id + ""String_Node_Str""));
}","@Test public void testInsert() throws SQLException {
  int prevId=datamanager.getLastID(""String_Node_Str"",wrtable);
  Date now=new Date();
  Map<String,Object> data=new HashMap<String,Object>();
  data.put(""String_Node_Str"",""String_Node_Str"" + randomInt);
  data.put(""String_Node_Str"",randomInt + 1);
  data.put(""String_Node_Str"",now);
  data.put(""String_Node_Str"",null);
  datamanager.insertFields(data,wrtable);
  int id=datamanager.getLastID(""String_Node_Str"",wrtable);
  assertTrue(id > prevId);
  assertEquals(randomInt + 1,datamanager.getIntegerField(wrtable,""String_Node_Str"",""String_Node_Str"" + id + ""String_Node_Str""));
  assertEquals(""String_Node_Str"" + randomInt,datamanager.getStringField(wrtable,""String_Node_Str"",""String_Node_Str"" + id + ""String_Node_Str""));
  assertEquals(now.getTime(),datamanager.getDateField(wrtable,""String_Node_Str"",""String_Node_Str"" + id + ""String_Node_Str"").getTime());
  assertNull(datamanager.getBlobField(wrtable,""String_Node_Str"",""String_Node_Str"" + id + ""String_Node_Str""));
}",0.8
179706,"@Override public InetAddress getInetAddress(){
  try {
    return InetAddress.getByName(toString());
  }
 catch (  UnknownHostException ignore) {
  }
  return null;
}","@Override public Inet6Address getInetAddress(){
  try {
    InetAddress address=InetAddress.getByAddress(getBytes());
    if (address instanceof Inet6Address) {
      return (Inet6Address)address;
    }
  }
 catch (  UnknownHostException ignore) {
  }
  return null;
}",0.6728110599078341
179707,"@Override public IPv4Address toIPv4(){
  if (this.data[0] == (short)0x2002 || this.data[0] == (short)0xfe80) {
    ByteBuffer buffer=ByteBuffer.allocate(4);
    buffer.putShort(this.data[6]).putShort(this.data[7]);
    return new IPv4Address(buffer.array());
  }
  return null;
}","@Override public IPv4Address toIPv4(){
  InetAddress inet=getInetAddress();
  if (inet.isLoopbackAddress()) {
    return new IPv4Address(127,0,0,1);
  }
 else   if (inet.isAnyLocalAddress()) {
    return new IPv4Address(0,0,0,0);
  }
 else   if (this.data[0] == (short)0x2002 || this.data[0] == (short)0xfe80) {
    ByteBuffer buffer=ByteBuffer.allocate(4);
    buffer.putShort(this.data[6]).putShort(this.data[7]);
    return new IPv4Address(buffer.array());
  }
  return null;
}",0.7351778656126482
179708,"public void debug(String line){
  if (isDebug()) {
    this.logger.info(this.prefix + ""String_Node_Str"" + line);
    toFile(Type.debug,line);
  }
}","public void debug(String line){
  if (isDebug()) {
    this.logger.info(""String_Node_Str"" + this.prefix + line);
    toFile(Type.debug,line);
  }
}",0.9047619047619048
179709,"public void connect(){
  if (this.url == null) {
    this.setURL();
  }
  if (this.con != null && this.isConnected()) {
    return;
  }
  try {
switch (this.datatype) {
case MYSQL:
      if (getClassLoader() != null) {
        getLogging().debug(""String_Node_Str"" + getClassLoader().toString());
        Class.forName(""String_Node_Str"",true,getClassLoader());
      }
 else {
        getLogging().debug(""String_Node_Str"");
        Class.forName(""String_Node_Str"");
      }
    this.con=DriverManager.getConnection(this.url,this.username,this.password);
  break;
case H2:
if (getClassLoader() != null) {
  getLogging().debug(""String_Node_Str"" + getClassLoader().toString());
  Class.forName(""String_Node_Str"",true,getClassLoader()).newInstance();
}
 else {
  getLogging().debug(""String_Node_Str"");
  Class.forName(""String_Node_Str"");
}
this.con=DriverManager.getConnection(this.url,this.username,this.password);
break;
}
if (getLogging().isDebug()) {
getLogging().debug(""String_Node_Str"");
Enumeration driverList=DriverManager.getDrivers();
int count=0;
while (driverList.hasMoreElements()) {
Driver driverClass=(Driver)driverList.nextElement();
getLogging().debug(""String_Node_Str"" + count + ""String_Node_Str""+ driverClass.getClass().getName());
count++;
}
getLogging().debug(""String_Node_Str"" + count + ""String_Node_Str"");
}
}
 catch (ClassNotFoundException e) {
getLogging().stackTrace(e);
}
catch (SQLException e) {
getLogging().stackTrace(e);
}
catch (InstantiationException e) {
e.printStackTrace();
}
catch (IllegalAccessException e) {
e.printStackTrace();
}
}","public void connect(){
  if (this.url == null) {
    this.setURL();
  }
  if (this.con != null && this.isConnected()) {
    return;
  }
  try {
switch (this.datatype) {
case MYSQL:
      if (getClassLoader() != null) {
        getLogging().debug(""String_Node_Str"" + getClassLoader().toString());
        Class.forName(""String_Node_Str"",true,getClassLoader());
      }
 else {
        getLogging().debug(""String_Node_Str"");
        Class.forName(""String_Node_Str"");
      }
    outputDrivers();
  this.con=DriverManager.getConnection(this.url,this.username,this.password);
break;
case H2:
if (getClassLoader() != null) {
getLogging().debug(""String_Node_Str"" + getClassLoader().toString());
Class.forName(""String_Node_Str"",true,getClassLoader()).newInstance();
}
 else {
getLogging().debug(""String_Node_Str"");
Class.forName(""String_Node_Str"");
}
outputDrivers();
this.con=DriverManager.getConnection(this.url,this.username,this.password);
break;
}
}
 catch (ClassNotFoundException e) {
getLogging().stackTrace(e);
}
catch (SQLException e) {
getLogging().stackTrace(e);
}
catch (InstantiationException e) {
e.printStackTrace();
}
catch (IllegalAccessException e) {
e.printStackTrace();
}
}",0.8357558139534884
179710,"public void debug(String line){
  if (this.debug) {
    this.logger.info(this.prefix + ""String_Node_Str"" + line);
    toFile(Type.debug,line);
  }
}","public void debug(String line){
  if (isDebug()) {
    this.logger.info(this.prefix + ""String_Node_Str"" + line);
    toFile(Type.debug,line);
  }
}",0.976271186440678
179711,"public void debug(String line){
  if (isDebug()) {
    this.logger.log(debugLevel,this.prefix + line);
    toFile(Type.debug,line);
  }
}","public void debug(String line){
  if (isDebug()) {
    this.logger.log(debugLevel,this.prefix + ""String_Node_Str"" + line);
    toFile(Type.debug,line);
  }
}",0.9319727891156464
179712,"private String updateFieldsString(HashMap<String,Object> data){
  String query=""String_Node_Str"", suffix=""String_Node_Str"";
  int i=1;
  Iterator<Entry<String,Object>> it=data.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry<String,Object> pairs=it.next();
    if (i == data.size()) {
      suffix=""String_Node_Str"";
    }
    query+=""String_Node_Str"" + pairs.getKey() + ""String_Node_Str""+ String.valueOf(pairs.getValue()).replaceAll(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ suffix;
    i++;
  }
  return query;
}","private String updateFieldsString(HashMap<String,Object> data){
  String query=""String_Node_Str"", suffix=""String_Node_Str"";
  int i=1;
  Iterator<Entry<String,Object>> it=data.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry<String,Object> pairs=it.next();
    if (i == data.size()) {
      suffix=""String_Node_Str"";
    }
    Object val=pairs.getValue();
    String valstr=null;
    if (val instanceof Date) {
      val=new Timestamp(((Date)val).getTime());
    }
    if (val == null) {
      valstr=""String_Node_Str"";
    }
 else {
      valstr=""String_Node_Str"" + val.toString().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    }
    query+=""String_Node_Str"" + pairs.getKey() + ""String_Node_Str""+ valstr+ suffix;
    i++;
  }
  return query;
}",0.6686792452830189
179713,"/** 
 * Detect object type and serialize it.
 * @param value - object to serialize
 * @return value serialized to string, or value.toString serialized tostring if unknown type.
 */
public String serialize(Object value){
  if (value == null) {
    return ""String_Node_Str"";
  }
 else   if (value instanceof Integer) {
    return this.serialize(((Integer)value).intValue());
  }
 else   if (value instanceof Number) {
    return this.serialize(((Number)value).doubleValue());
  }
 else   if (value instanceof Boolean) {
    return this.serialize(((Boolean)value).booleanValue());
  }
 else   if (value instanceof List<?>) {
    return this.serialize(value);
  }
 else   if (value instanceof Map<?,?>) {
    return this.serialize(value);
  }
 else   if (value instanceof SerializedPhpParser.PhpObject) {
    return this.serialize((SerializedPhpParser.PhpObject)value);
  }
  return this.serialize(value.toString());
}","/** 
 * Detect object type and serialize it.
 * @param value - object to serialize
 * @return value serialized to string, or value.toString serialized tostring if unknown type.
 */
public String serialize(Object value){
  if (value == null) {
    return ""String_Node_Str"";
  }
 else   if (value instanceof Integer) {
    return this.serialize(((Integer)value).intValue());
  }
 else   if (value instanceof Number) {
    return this.serialize(((Number)value).doubleValue());
  }
 else   if (value instanceof Boolean) {
    return this.serialize(((Boolean)value).booleanValue());
  }
 else   if (value instanceof List<?>) {
    return this.serialize((List<?>)value);
  }
 else   if (value instanceof Map<?,?>) {
    return this.serialize((Map<?,?>)value);
  }
 else   if (value instanceof SerializedPhpParser.PhpObject) {
    return this.serialize((SerializedPhpParser.PhpObject)value);
  }
  return this.serialize(value.toString());
}",0.989713048186248
179714,"public BigDecimal getDecimal(){
  try {
    if (this.sqltype == Types.DECIMAL) {
      return (BigDecimal)data;
    }
 else     if (getFieldType().equals(FieldType.BOOLEAN)) {
      return ((Boolean)data).booleanValue() ? BigDecimal.ONE : BigDecimal.ZERO;
    }
 else     if (getFieldType().equals(FieldType.STRING)) {
      return new BigDecimal(data.toString());
    }
 else     if (getFieldType().equals(FieldType.INTEGER) || getFieldType().equals(FieldType.REAL)) {
      return new BigDecimal(((Number)data).doubleValue());
    }
 else     if (getFieldType().equals(FieldType.DATE)) {
      return new BigDecimal(((Date)data).getTime());
    }
  }
 catch (  NumberFormatException e) {
  }
  return BigDecimal.ZERO;
}","public BigDecimal getDecimal(){
  try {
    if (data instanceof BigDecimal) {
      return (BigDecimal)data;
    }
 else     if (getFieldType().equals(FieldType.BOOLEAN)) {
      return ((Boolean)data).booleanValue() ? BigDecimal.ONE : BigDecimal.ZERO;
    }
 else     if (getFieldType().equals(FieldType.STRING)) {
      return new BigDecimal(data.toString());
    }
 else     if (getFieldType().equals(FieldType.INTEGER) || getFieldType().equals(FieldType.REAL)) {
      return new BigDecimal(((Number)data).doubleValue());
    }
 else     if (getFieldType().equals(FieldType.DATE)) {
      return new BigDecimal(((Date)data).getTime());
    }
  }
 catch (  NumberFormatException e) {
  }
  return null;
}",0.9481792717086834
179715,"public double getDouble(){
  if (getFieldType().equals(FieldType.INTEGER) || getFieldType().equals(FieldType.REAL)) {
    return ((Number)data).doubleValue();
  }
 else   if (getFieldType().equals(FieldType.BOOLEAN)) {
    return ((Boolean)data).booleanValue() ? 1 : 0;
  }
 else   if (getFieldType().equals(FieldType.DATE)) {
    return new Long(((Date)data).getTime()).doubleValue();
  }
 else   if (getFieldType().equals(FieldType.BINARY)) {
    byte[] bytes={0,0,0,0,0,0,0,0};
    System.arraycopy(data,0,bytes,0,((byte[])data).length);
    InputStream stream=new ByteArrayInputStream(bytes);
    try {
      return new DataInputStream(stream).readDouble();
    }
 catch (    IOException e) {
    }
  }
 else   if (getFieldType().equals(FieldType.STRING)) {
    try {
      return Double.parseDouble((String)data);
    }
 catch (    NumberFormatException e) {
    }
  }
  return 0;
}","public double getDouble(){
  if (getFieldType().equals(FieldType.INTEGER) || getFieldType().equals(FieldType.REAL)) {
    return ((Number)data).doubleValue();
  }
 else   if (getFieldType().equals(FieldType.BOOLEAN)) {
    return ((Boolean)data).booleanValue() ? 1 : 0;
  }
 else   if (getFieldType().equals(FieldType.DATE)) {
    return new Long(((Date)data).getTime()).doubleValue();
  }
 else   if (getFieldType().equals(FieldType.BINARY)) {
    byte[] bytes={0,0,0,0,0,0,0,0};
    if (((byte[])data).length >= 8) {
      System.arraycopy(data,0,bytes,0,8);
    }
 else {
      System.arraycopy(data,0,bytes,8 - ((byte[])data).length,((byte[])data).length);
    }
    return ByteBuffer.wrap(bytes).getLong();
  }
 else   if (getFieldType().equals(FieldType.STRING)) {
    try {
      return Double.parseDouble((String)data);
    }
 catch (    NumberFormatException e) {
    }
    try {
      return Long.parseLong(((String)data).replace(',','.'));
    }
 catch (    NumberFormatException e) {
    }
  }
  return 0;
}",0.7240293809024134
179716,"public String getString(){
  if (getFieldType().equals(FieldType.STRING)) {
    return (String)this.data;
  }
  return data.toString();
}","public String getString(){
  if (getFieldType().equals(FieldType.STRING)) {
    return (String)this.data;
  }
 else   if (getFieldType().equals(FieldType.BINARY) || getFieldType().equals(FieldType.BLOB)) {
    return new String(getBytes());
  }
  return data.toString();
}",0.6699266503667481
179717,"public BigInteger getBigInt(){
  try {
    if (this.sqltype == Types.BIGINT) {
      return (BigInteger)data;
    }
 else     if (getFieldType().equals(FieldType.BOOLEAN)) {
      return ((Boolean)data).booleanValue() ? BigInteger.ONE : BigInteger.ZERO;
    }
 else     if (getFieldType().equals(FieldType.BINARY)) {
      return new BigInteger((byte[])data);
    }
 else     if (getFieldType().equals(FieldType.STRING)) {
      return new BigInteger(data.toString());
    }
 else {
      long l=0;
      if (getFieldType().equals(FieldType.INTEGER) || getFieldType().equals(FieldType.REAL)) {
        l=((Number)data).longValue();
      }
 else       if (getFieldType().equals(FieldType.DATE)) {
        l=((Date)data).getTime();
      }
      return new BigInteger(String.valueOf(l));
    }
  }
 catch (  NumberFormatException e) {
  }
  return BigInteger.ZERO;
}","public BigInteger getBigInt(){
  try {
    if (data instanceof BigInteger) {
      return (BigInteger)data;
    }
 else     if (getFieldType().equals(FieldType.BOOLEAN)) {
      return ((Boolean)data).booleanValue() ? BigInteger.ONE : BigInteger.ZERO;
    }
 else     if (getFieldType().equals(FieldType.BINARY)) {
      return new BigInteger((byte[])data);
    }
 else     if (getFieldType().equals(FieldType.STRING)) {
      return new BigInteger(data.toString());
    }
 else {
      long l=0;
      if (getFieldType().equals(FieldType.INTEGER) || getFieldType().equals(FieldType.REAL)) {
        l=((Number)data).longValue();
      }
 else       if (getFieldType().equals(FieldType.DATE)) {
        l=((Date)data).getTime();
      }
      return new BigInteger(String.valueOf(l));
    }
  }
 catch (  NumberFormatException e) {
  }
  return null;
}",0.9574839836924868
179718,"public byte[] getBytes(){
  if (getFieldType().equals(FieldType.BINARY)) {
    return (byte[])data;
  }
 else   if (getFieldType().equals(FieldType.BLOB)) {
    try {
      return ((Blob)data).getBytes(0,(int)((Blob)data).length());
    }
 catch (    SQLException e) {
    }
  }
 else   if (getFieldType().equals(FieldType.BOOLEAN)) {
    return ByteBuffer.allocate(1).put((byte)(((Boolean)data).booleanValue() ? 1 : 0)).array();
  }
 else   if (getFieldType().equals(FieldType.INTEGER)) {
    return ByteBuffer.allocate(8).putLong(getLong()).array();
  }
 else   if (getFieldType().equals(FieldType.REAL)) {
    return ByteBuffer.allocate(8).putDouble(getDouble()).array();
  }
 else   if (getFieldType().equals(FieldType.STRING)) {
    return data.toString().getBytes();
  }
  return null;
}","public byte[] getBytes(){
  if (getFieldType().equals(FieldType.BINARY)) {
    return (byte[])data;
  }
 else   if (getFieldType().equals(FieldType.BLOB)) {
    try {
      return ((Blob)data).getBytes(1,(int)((Blob)data).length());
    }
 catch (    SQLException e) {
      e.getClass();
    }
  }
 else   if (getFieldType().equals(FieldType.BOOLEAN)) {
    return ByteBuffer.allocate(1).put((byte)(((Boolean)data).booleanValue() ? 1 : 0)).array();
  }
 else   if (getFieldType().equals(FieldType.INTEGER)) {
    return ByteBuffer.allocate(8).putLong(getLong()).array();
  }
 else   if (getFieldType().equals(FieldType.REAL)) {
    return ByteBuffer.allocate(8).putDouble(getDouble()).array();
  }
 else   if (getFieldType().equals(FieldType.STRING)) {
    return data.toString().getBytes();
  }
  return null;
}",0.9863013698630136
179719,"public DataField(int i,int columnType,String columnLabel,String table,int columnDisplaySize,Object data) throws SQLException {
  this.name=columnLabel;
  this.table=table;
  this.size=columnDisplaySize;
  this.data=data;
  if (data == null) {
    this.sqltype=Types.NULL;
  }
 else {
    this.sqltype=columnType;
  }
switch (sqltype) {
case Types.CHAR:
case Types.VARCHAR:
    this.ftype=FieldType.STRING;
  break;
case Types.BLOB:
case Types.LONGVARBINARY:
this.ftype=FieldType.BLOB;
break;
case Types.BIT:
if (size <= 1) {
this.ftype=FieldType.BOOLEAN;
break;
}
case Types.BINARY:
case Types.VARBINARY:
this.ftype=FieldType.BINARY;
break;
case Types.TINYINT:
if (size <= 1) {
this.ftype=FieldType.BOOLEAN;
break;
}
case Types.SMALLINT:
case Types.INTEGER:
case Types.BIGINT:
this.ftype=FieldType.INTEGER;
break;
case Types.FLOAT:
case Types.DOUBLE:
case Types.REAL:
case Types.DECIMAL:
this.ftype=FieldType.REAL;
break;
case Types.DATE:
case Types.TIMESTAMP:
case Types.TIME:
this.ftype=FieldType.DATE;
break;
case Types.NULL:
this.ftype=FieldType.NULL;
break;
default :
this.ftype=FieldType.UNKNOWN;
break;
}
}","public DataField(int i,ResultSet resultset) throws SQLException {
  ResultSetMetaData metaData=resultset.getMetaData();
  this.name=metaData.getCatalogName(i);
  this.table=metaData.getTableName(i);
  this.size=metaData.getColumnDisplaySize(i);
  this.data=resultset.getObject(i);
  if (data == null) {
    this.sqltype=Types.NULL;
  }
 else {
    this.sqltype=metaData.getColumnType(i);
  }
  this.unsigned=metaData.getColumnTypeName(i).contains(""String_Node_Str"");
switch (sqltype) {
case Types.CHAR:
case Types.VARCHAR:
case Types.LONGVARCHAR:
    this.ftype=FieldType.STRING;
  break;
case Types.BLOB:
case Types.LONGVARBINARY:
this.ftype=FieldType.BLOB;
break;
case Types.BIT:
if (size <= 1) {
this.ftype=FieldType.BOOLEAN;
break;
}
case Types.BINARY:
case Types.VARBINARY:
this.ftype=FieldType.BINARY;
break;
case Types.TINYINT:
if (size <= 1) {
this.ftype=FieldType.BOOLEAN;
break;
}
case Types.SMALLINT:
case Types.INTEGER:
case Types.BIGINT:
this.ftype=FieldType.INTEGER;
break;
case Types.FLOAT:
case Types.DOUBLE:
case Types.REAL:
case Types.DECIMAL:
this.ftype=FieldType.REAL;
break;
case Types.DATE:
case Types.TIMESTAMP:
case Types.TIME:
this.ftype=FieldType.DATE;
break;
case Types.NULL:
this.ftype=FieldType.NULL;
break;
default :
this.ftype=FieldType.UNKNOWN;
break;
}
}",0.7075
179720,"public Date getDate(){
  if (getFieldType().equals(FieldType.DATE)) {
    return (Date)this.data;
  }
 else   if (getFieldType().equals(FieldType.INTEGER)) {
    return new Date(((Number)data).longValue());
  }
 else   if (getFieldType().equals(FieldType.STRING)) {
    return new Date(data.toString());
  }
  return null;
}","public Date getDate(){
  if (getFieldType().equals(FieldType.DATE)) {
    return (Date)this.data;
  }
 else   if (getFieldType().equals(FieldType.INTEGER) || getFieldType().equals(FieldType.BINARY)) {
    return new Date(getLong());
  }
 else   if (getFieldType().equals(FieldType.STRING)) {
    try {
      return DateFormat.getDateInstance().parse((String)data);
    }
 catch (    ParseException e) {
    }
    try {
      return DateFormat.getDateTimeInstance().parse((String)data);
    }
 catch (    ParseException e) {
    }
    try {
      return DateFormat.getTimeInstance().parse((String)data);
    }
 catch (    ParseException e) {
    }
    try {
      return DateFormat.getInstance().parse((String)data);
    }
 catch (    ParseException e) {
    }
  }
  return null;
}",0.4692028985507246
179721,"public boolean getBool(){
  if (getFieldType().equals(FieldType.BOOLEAN)) {
    return (Boolean)data;
  }
 else   if (getFieldType().equals(FieldType.INTEGER) || getFieldType().equals(FieldType.REAL) || getFieldType().equals(FieldType.DATE)) {
    return getInt() != 0;
  }
 else   if (getFieldType().equals(FieldType.BINARY) || getFieldType().equals(FieldType.STRING)) {
    String s=getString();
    return (s != null) && !s.isEmpty();
  }
  return false;
}","public boolean getBool(){
  if (getFieldType().equals(FieldType.BOOLEAN)) {
    return (Boolean)data;
  }
 else   if (getFieldType().equals(FieldType.INTEGER) || getFieldType().equals(FieldType.REAL) || getFieldType().equals(FieldType.DATE)) {
    return getInt() != 0;
  }
 else   if (getFieldType().equals(FieldType.BINARY) || getFieldType().equals(FieldType.BLOB) || getFieldType().equals(FieldType.STRING)) {
    String s=getString();
    return (s != null) && !s.isEmpty();
  }
  return false;
}",0.9572471324296142
179722,"/** 
 * java.util.Date 포맷의 날짜 차이 레이블
 * @param d1
 * @param d2
 * @return
 */
public static String getTimeDiffLabel(Date d1,Date d2){
  long diff=d2.getTime() - d1.getTime();
  int sec=(int)(diff / 1000);
  if (sec < 5)   return getString(""String_Node_Str"");
  if (sec < 60)   return getString(sec,""String_Node_Str"");
  int min=(int)(sec / 60);
  if (min < 60)   return getString(min,""String_Node_Str"");
  int hour=(int)(min / 60);
  if (hour < 24)   return getString(hour,""String_Node_Str"");
  Calendar c1=Calendar.getInstance();
  Calendar c2=(Calendar)c1.clone();
  c1.setTime(d1);
  c2.setTime(d2);
  int day=c2.get(Calendar.DATE) - c1.get(Calendar.DATE);
  if (day < 0) {
    day=hour / 24;
  }
  if (hour / 24 < 30) {
    if (day == 1)     return getString(""String_Node_Str"");
    if (day == 2)     return getString(""String_Node_Str"");
    return getString(day,""String_Node_Str"");
  }
  int month=hour / 24 / 30;
  if (month == 1)   return getString(""String_Node_Str"");
  if (month == 2)   return getString(""String_Node_Str"");
  if (month < 12)   return getString(month,""String_Node_Str"");
  int year=month / 12;
  if (year == 1)   return getString(""String_Node_Str"");
  return getString(year,""String_Node_Str"");
}","/** 
 * java.util.Date 포맷의 날짜 차이 레이블
 * @param d1
 * @param d2
 * @return
 */
public static String getTimeDiffLabel(Date d1,Date d2){
  long diff=d2.getTime() - d1.getTime();
  int sec=(int)(diff / 1000);
  if (sec < 5)   return getString(""String_Node_Str"");
  if (sec < 60)   return getString(sec,""String_Node_Str"");
  int min=(int)(sec / 60);
  if (min < 60)   return getString(min,""String_Node_Str"");
  int hour=(int)(min / 60);
  if (hour < 24)   return getString(hour,""String_Node_Str"");
  Calendar c1=Calendar.getInstance();
  Calendar c2=(Calendar)c1.clone();
  c1.setTime(d1);
  c2.setTime(d2);
  int day=c2.get(Calendar.DATE) - c1.get(Calendar.DATE);
  if (day <= 0) {
    day=hour / 24;
  }
  if (hour / 24 < 30) {
    if (day == 1)     return getString(""String_Node_Str"");
    if (day == 2)     return getString(""String_Node_Str"");
    return getString(day,""String_Node_Str"");
  }
  int month=hour / 24 / 30;
  if (month == 1)   return getString(""String_Node_Str"");
  if (month == 2)   return getString(""String_Node_Str"");
  if (month < 12)   return getString(month,""String_Node_Str"");
  int year=month / 12;
  if (year == 1)   return getString(""String_Node_Str"");
  return getString(year,""String_Node_Str"");
}",0.9995903318312168
179723,"private boolean onBegin(){
  if (inProcess) {
    receiveRequested=true;
    return false;
  }
  inProcess=true;
  receiveRequested=false;
  return true;
}","private boolean onBegin(boolean update_when_possible){
  if (inProcess) {
    receiveRequested=update_when_possible;
    return false;
  }
  pb.holdCurrent();
  inProcess=true;
  receiveRequested=false;
  return true;
}",0.4598930481283422
179724,"private void queryInit(final ComplexPanelI base){
  Log.trace(""String_Node_Str"");
  onBegin();
  greetingService.getInitialContent(pb.getCurrent(),new AsyncCallback<DiffPatcher>(){
    @Override public void onSuccess(    DiffPatcher result){
      root=result.createNew(0);
      base.add(root);
      requestSucceeded(result,pb.getCurrent().getId());
    }
    @Override public void onFailure(    Throwable caught){
      requestFailed(caught,""String_Node_Str"" + pb.getCurrent().getId());
    }
  }
);
  Log.trace(""String_Node_Str"" + pb.getCurrent().getId() + ""String_Node_Str"");
}","public void queryInit(final IStreak base){
  Log.debug(""String_Node_Str"" + base.getId());
  final Parameters param=pb.getCurrent();
  param.setId(base.getId());
  if (!onBegin(true))   return;
  greetingService.getInitialContent(param,new AsyncCallback<DiffPatcher>(){
    @Override public void onSuccess(    DiffPatcher result){
      base.alterContent(result.createNew(param.getId()));
      if (param.getId().equals(0))       root=base.getContent();
      requestSucceeded(result,pb.getCurrent().getId());
    }
    @Override public void onFailure(    Throwable caught){
      requestFailed(caught,""String_Node_Str"" + pb.getCurrent().getId());
    }
  }
);
  Log.debug(""String_Node_Str"" + pb.getCurrent().getId() + ""String_Node_Str"");
}",0.744890234670704
179725,"public void init(ComplexPanel base){
  inProcess=false;
  receiveRequested=false;
  ParamsUrl.getInstance().getFromHistory(pb.getCurrent());
  IVerticalPanel container=new IVerticalPanel(0);
  base.add(container);
  base.add(new HTML(""String_Node_Str""));
  diff=new VerticalPanel();
  diff.setStylePrimaryName(""String_Node_Str"");
  base.add(diff);
  queryInit(container);
}","public void init(ComplexPanel base){
  inProcess=false;
  receiveRequested=false;
  ParamsUrl.getInstance().getFromHistory(pb.getCurrent());
  IStreak container=new IStreak(new IVoid(0));
  base.add(container);
  base.add(new HTML(""String_Node_Str""));
  diff=new VerticalPanel();
  diff.setStylePrimaryName(""String_Node_Str"");
  base.add(diff);
  queryInit(container);
}",0.8936742934051144
179726,"private void requestSucceeded(DiffPatcher result,Integer id){
  diff.clear();
  if (null != result)   diff.add(new HTML(result.toString()));
 else   diff.add(new HTML(""String_Node_Str""));
  Log.debug(""String_Node_Str"" + id + ""String_Node_Str"");
  pb.requestSucceeded();
  onEnd();
}","private void requestSucceeded(DiffPatcher result,Integer id){
  diff.clear();
  if (null != result)   diff.add(new HTML(result.toString()));
 else   diff.add(new HTML(""String_Node_Str""));
  pb.requestSucceeded();
  onEnd();
}",0.8875739644970414
179727,"public void queryPage(){
  Log.trace(""String_Node_Str"");
  if (onBegin())   return;
  final Parameters param=pb.getCurrent();
  greetingService.getDifference(param,pb.getPrev(),new AsyncCallback<DiffPatcher>(){
    @Override public void onSuccess(    DiffPatcher result){
      if (null == result) {
        requestSucceeded(result,param.getId());
        return;
      }
      result.applay(root);
      requestSucceeded(result,param.getId());
    }
    @Override public void onFailure(    Throwable caught){
      requestFailed(caught,param.getVal(""String_Node_Str"") + ""String_Node_Str"" + param.getId());
    }
  }
);
  Log.trace(""String_Node_Str"" + param.getVal(""String_Node_Str"") + ""String_Node_Str"");
}","public void queryPage(){
  final Parameters param=pb.getCurrent();
  param.setId(0);
  Log.debug(""String_Node_Str"" + param.toString());
  if (!onBegin(true))   return;
  greetingService.getDifference(param,pb.getPrev(),new AsyncCallback<DiffPatcher>(){
    @Override public void onSuccess(    DiffPatcher result){
      if (null != result)       result.applay(root);
      requestSucceeded(result,param.getId());
    }
    @Override public void onFailure(    Throwable caught){
      requestFailed(caught,param.getVal(""String_Node_Str"") + ""String_Node_Str"" + param.getId());
    }
  }
);
  Log.debug(""String_Node_Str"" + param.getVal(""String_Node_Str"") + ""String_Node_Str"");
}",0.7973950795947902
179728,"@Override public void onSuccess(DiffPatcher result){
  root=result.createNew(0);
  base.add(root);
  requestSucceeded(result,pb.getCurrent().getId());
}","@Override public void onSuccess(DiffPatcher result){
  base.alterContent(result.createNew(param.getId()));
  if (param.getId().equals(0))   root=base.getContent();
  requestSucceeded(result,pb.getCurrent().getId());
}",0.3739837398373983
179729,"public void requestSucceeded(){
  ParamsUrl.getInstance().putIntoHistory(current);
  last=current.copy();
}","public void requestSucceeded(){
  Log.debug(""String_Node_Str"" + sent);
  ParamsUrl.getInstance().putIntoHistory(sent);
  last=sent.copy();
}",0.8016194331983806
179730,"@Override public void add(IWidget w){
  ((ComplexPanel)getWidget()).add(w);
}","@Override public void add(IWidget w){
  ((ComplexPanel)getWidget()).add(new IStreak(w));
}",0.9221556886227544
179731,"@Override public abstract void insert(IWidget w,int beforeIndex);","@Override public final void insert(IWidget w,int beforeIndex){
  insertInt(new IStreak(w),beforeIndex);
}",0.6823529411764706
179732,"public void alterContent(IWidget w){
  if (!w.getId().equals(getId()))   throw new RuntimeException(""String_Node_Str"");
  ((SimplePanel)getWidget()).clear();
  ((SimplePanel)getWidget()).add(w);
}","public final void alterContent(IWidget w){
  if (!w.getId().equals(getId()))   throw new RuntimeException(""String_Node_Str"");
  ((SimplePanel)getWidget()).clear();
  ((SimplePanel)getWidget()).add(w);
}",0.984924623115578
179733,"@Override public void onKeyUp(KeyUpEvent event){
  ParamsBuilder.getCurrent().setVal(targetName,((TextBox)getWidget()).getText());
  if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER)   ElementReceiver.get().queryPage();
}","@Override public void onKeyUp(KeyUpEvent event){
  ParamsBuilder.getCurrent().setVal(targetName,((TextBox)getWidget()).getText());
  ElementReceiver.get().queryPage();
}",0.8622448979591837
179734,"private void queryInit(final ComplexPanel base){
  greetingService.getInitialContent(pb.getCurrent(),new AsyncCallback<DiffPatcher>(){
    @Override public void onSuccess(    DiffPatcher result){
      root=result.createNew(0);
      base.add(root);
      base.add(new HTML(""String_Node_Str""));
      diff=new VerticalPanel();
      diff.setStylePrimaryName(""String_Node_Str"");
      base.add(diff);
      diff.clear();
      diff.add(new HTML(result.toString()));
      pb.requestSucceeded();
    }
    @Override public void onFailure(    Throwable caught){
      base.add(new HTML(""String_Node_Str"" + ""String_Node_Str"" + caught.getMessage()));
    }
  }
);
}","private void queryInit(final ComplexPanel base){
  onBegin();
  greetingService.getInitialContent(pb.getCurrent(),new AsyncCallback<DiffPatcher>(){
    @Override public void onSuccess(    DiffPatcher result){
      root=result.createNew(0);
      base.add(root);
      logp=new VerticalPanel();
      logp.setStylePrimaryName(""String_Node_Str"");
      base.add(logp);
      base.add(new HTML(""String_Node_Str""));
      diff=new VerticalPanel();
      diff.setStylePrimaryName(""String_Node_Str"");
      base.add(diff);
      diff.clear();
      diff.add(new HTML(result.toString()));
      requestSucceeded();
    }
    @Override public void onFailure(    Throwable caught){
      requestFailed(""String_Node_Str"" + ""String_Node_Str"" + caught.getMessage() + ""String_Node_Str"");
    }
  }
);
}",0.8275862068965517
179735,"public void init(ComplexPanel base){
  ParamsUrl.getInstance().getFromHistory(pb.getCurrent());
  queryInit(base);
}","public void init(ComplexPanel base){
  inProcess=false;
  receiveRequested=false;
  ParamsUrl.getInstance().getFromHistory(pb.getCurrent());
  queryInit(base);
}",0.8375451263537906
179736,"@Override public void onFailure(Throwable caught){
  base.add(new HTML(""String_Node_Str"" + ""String_Node_Str"" + caught.getMessage()));
}","@Override public void onFailure(Throwable caught){
  requestFailed(""String_Node_Str"" + ""String_Node_Str"" + caught.getMessage() + ""String_Node_Str"");
}",0.8421052631578947
179737,"@Override public void onSuccess(DiffPatcher result){
  root=result.createNew(0);
  base.add(root);
  base.add(new HTML(""String_Node_Str""));
  diff=new VerticalPanel();
  diff.setStylePrimaryName(""String_Node_Str"");
  base.add(diff);
  diff.clear();
  diff.add(new HTML(result.toString()));
  pb.requestSucceeded();
}","@Override public void onSuccess(DiffPatcher result){
  root=result.createNew(0);
  base.add(root);
  logp=new VerticalPanel();
  logp.setStylePrimaryName(""String_Node_Str"");
  base.add(logp);
  base.add(new HTML(""String_Node_Str""));
  diff=new VerticalPanel();
  diff.setStylePrimaryName(""String_Node_Str"");
  base.add(diff);
  diff.clear();
  diff.add(new HTML(result.toString()));
  requestSucceeded();
}",0.8670360110803325
179738,"@Override public void onModuleLoad(){
  RootPanel.get().clear();
  ParamsBuilder.getCurrent().setId(0);
  ElementReceiver.get().init(RootPanel.get());
  Label lb=new Label(""String_Node_Str"");
  RootPanel.get().add(lb);
}","@Override public void onModuleLoad(){
  RootPanel.get().clear();
  ParamsBuilder.getCurrent().setId(0);
  ElementReceiver.get().init(RootPanel.get());
}",0.8172043010752689
179739,"public abstract DiffPatcher getDifference(Parameters p,Parameters prevP);","public abstract DiffPatcher getDifference(Parameters p,Parameters prevP) throws IllegalArgumentException, ServerException ;",0.7448979591836735
179740,public abstract DiffPatcher getInitialContent(Parameters p);,"public abstract DiffPatcher getInitialContent(Parameters p) throws IllegalArgumentException, ServerException ;",0.7058823529411765
179741,"@Override public void onClick(ClickEvent event){
  ElementReceiver.get().queryElement();
}","@Override public void onClick(ClickEvent event){
  ElementReceiver.get().queryPage();
}",0.9491525423728814
179742,"public IBasicButton(Integer id,String label){
  super(id,new Button(label));
  ((Button)getWidget()).addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      ElementReceiver.get().queryElement();
    }
  }
);
}","public IBasicButton(Integer id,String label){
  super(id,new Button(label));
  ((Button)getWidget()).addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      ElementReceiver.get().queryPage();
    }
  }
);
}",0.9780439121756488
179743,"public void setNewUrl(final String nUrl){
  url.setText(""String_Node_Str"" + nUrl);
  final SoundManager sm=SoundManager.getInstance();
  if (snd_playing) {
    sm.stop(SOUND_ID);
    sm.destroySound(SOUND_ID);
    snd_playing=false;
  }
  sm.createSound(SOUND_ID,nUrl);
  sm.play(SOUND_ID);
}","public void setNewUrl(final String nUrl){
  url.setText(""String_Node_Str"" + nUrl);
  final SoundManager sm=SoundManager.getInstance();
  if (snd_playing) {
    sm.stop(SOUND_ID);
    sm.destroySound(SOUND_ID);
    snd_playing=false;
  }
  sm.createSound(SOUND_ID,URL.encode(nUrl));
  sm.play(SOUND_ID);
}",0.9664429530201344
179744,"@Override public void onSelection(final SelectionEvent<Integer> event){
  if (!queryAllowed)   return;
  final IStreak sp=(IStreak)ITabPanel.this.tp.getWidget(event.getSelectedItem());
  ParamsBuilder.getCurrent().setId(sp.getId());
  ElementReceiver.get().queryElement();
}","@Override public void onSelection(final SelectionEvent<Integer> event){
  if (!queryAllowed)   return;
  final IStreak sp=(IStreak)ITabPanel.this.tp.getWidget(event.getSelectedItem());
  ParamsBuilder.getCurrent().setId(sp.getId());
  ElementReceiver.get().queryPage();
}",0.979816513761468
179745,"@Override public void onKeyUp(KeyUpEvent event){
  ParamsBuilder.getCurrent().setVal(""String_Node_Str"",((TextBox)getWidget()).getText());
  if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER)   ElementReceiver.get().queryElement();
}","@Override public void onKeyUp(KeyUpEvent event){
  ParamsBuilder.getCurrent().setVal(targetName,((TextBox)getWidget()).getText());
  if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER)   ElementReceiver.get().queryPage();
}",0.9210526315789472
179746,"public ITextBox(Integer id,String text){
  super(id,new TextBox());
  setText(text);
  ((TextBox)getWidget()).addKeyUpHandler(new KeyUpHandler(){
    @Override public void onKeyUp(    KeyUpEvent event){
      ParamsBuilder.getCurrent().setVal(""String_Node_Str"",((TextBox)getWidget()).getText());
      if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER)       ElementReceiver.get().queryElement();
    }
  }
);
}","public ITextBox(Integer id,final String name,String text){
  super(id,new TextBox());
  setText(text);
  myHandler=new OnKeyUp(name);
  ((TextBox)getWidget()).addKeyUpHandler(myHandler);
}",0.46
179747,"final public void setText(String nStr){
  ((TextBox)getWidget()).setText(nStr);
}","final private void setText(String nStr){
  ((TextBox)getWidget()).setText(nStr);
}",0.9447852760736196
179748,"public ITextCellList(final Integer id,final String name){
  super(id,new VerticalPanel());
  panel=(VerticalPanel)getWidget();
  backB=new Button(""String_Node_Str"");
  list=new CellList(new ICell());
  nextB=new Button(""String_Node_Str"");
  panel.add(backB);
  panel.add(list);
  panel.add(nextB);
  this.name=name;
  ListDataProvider<IText> ldp=new ListDataProvider<IText>();
  items=ldp.getList();
  ldp.addDataDisplay(list);
  ssm=new SingleSelectionModel<IText>();
  list.setSelectionModel(ssm);
  ssm.addSelectionChangeHandler(new SelectionChangeEvent.Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      if (!reactToSelChange)       return;
      ParamsBuilder.getCurrent().setVal(name,ssm.getSelectedObject().getId().toString());
      ElementReceiver.get().queryElement();
    }
  }
);
  nextB.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      setStart(getStart() + list.getRowCount());
      ElementReceiver.get().queryElement();
    }
  }
);
  backB.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      Integer start=getStart() - MAXIMUM_ITEMS;
      if (start < 0)       start=0;
      setStart(start);
      ElementReceiver.get().queryElement();
    }
  }
);
}","public ITextCellList(final Integer id,final String name){
  super(id,new VerticalPanel());
  panel=(VerticalPanel)getWidget();
  batPanel=new FlowPanel();
  backB=new Button(""String_Node_Str"");
  list=new CellList(new ICell());
  nextB=new Button(""String_Node_Str"");
  panel.add(batPanel);
  batPanel.add(backB);
  panel.add(batPanel);
  panel.add(list);
  panel.add(nextB);
  this.name=name;
  ListDataProvider<IText> ldp=new ListDataProvider<IText>();
  items=ldp.getList();
  ldp.addDataDisplay(list);
  ssm=new SingleSelectionModel<IText>();
  list.setSelectionModel(ssm);
  ssm.addSelectionChangeHandler(new SelectionChangeEvent.Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      if (!reactToSelChange)       return;
      ParamsBuilder.getCurrent().setVal(name,ssm.getSelectedObject().getId().toString());
      ElementReceiver.get().queryPage();
    }
  }
);
  nextB.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      setStart(getStart() + list.getRowCount());
      ElementReceiver.get().queryPage();
    }
  }
);
  backB.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      Integer start=getStart() - MAXIMUM_ITEMS;
      if (start < 0)       start=0;
      setStart(start);
      ElementReceiver.get().queryPage();
    }
  }
);
}",0.9590163934426228
179749,"@Override public void onClick(ClickEvent event){
  Integer start=getStart() - MAXIMUM_ITEMS;
  if (start < 0)   start=0;
  setStart(start);
  ElementReceiver.get().queryElement();
}","@Override public void onClick(ClickEvent event){
  Integer start=getStart() - MAXIMUM_ITEMS;
  if (start < 0)   start=0;
  setStart(start);
  ElementReceiver.get().queryPage();
}",0.9749303621169916
179750,"@Override public void onSelectionChange(SelectionChangeEvent event){
  if (!reactToSelChange)   return;
  ParamsBuilder.getCurrent().setVal(name,ssm.getSelectedObject().getId().toString());
  ElementReceiver.get().queryElement();
}","@Override public void onSelectionChange(SelectionChangeEvent event){
  if (!reactToSelChange)   return;
  ParamsBuilder.getCurrent().setVal(name,ssm.getSelectedObject().getId().toString());
  ElementReceiver.get().queryPage();
}",0.9760348583877996
179751,"public void startTransaction(){
  finishTransaction();
  emf=Persistence.createEntityManagerFactory(""String_Node_Str"");
  em=emf.createEntityManager();
  em.getTransaction().begin();
}","public void startTransaction(){
  finishTransaction();
  if (null == emf)   emf=Persistence.createEntityManagerFactory(""String_Node_Str"");
  if (null == em)   em=emf.createEntityManager();
  em.getTransaction().begin();
}",0.908641975308642
179752,"public void finishTransaction(){
  if (null != em) {
    em.getTransaction().commit();
    em.close();
  }
  em=null;
}","public void finishTransaction(){
  if (null != em && em.getTransaction().isActive()) {
    em.getTransaction().rollback();
    em.close();
  }
  em=null;
}",0.8321167883211679
179753,"@Override public DiffPatcher getDifference(Parameters p,Parameters prevP){
  WContent content=gen.createContentBranch(p);
  WContent prev=gen.createContentBranch(prevP);
  DiffPatcher ret=content.getDifference(prev,true);
  return ret;
}","@Override public DiffPatcher getDifference(Parameters p,Parameters prevP) throws IllegalArgumentException, ServerException {
  WContent content=gen.createContentBranch(p);
  WContent prev=gen.createContentBranch(prevP);
  DiffPatcher ret=content.getDifference(prev,true);
  return ret;
}",0.9045801526717556
179754,"@Override public DiffPatcher getInitialContent(Parameters p){
  return gen.createContentBranch(p).getAllContent();
}","@Override public DiffPatcher getInitialContent(Parameters p) throws IllegalArgumentException, ServerException {
  return gen.createContentBranch(p).getAllContent();
}",0.8226950354609929
179755,"public static void main(String[] args) throws SmbException, IOException {
  LogManager.getLogManager().readConfiguration();
  LocalParser musicController=new LocalParser();
  musicController.parse(""String_Node_Str"");
  musicController.close();
}","public static void main(String[] args) throws SmbException, IOException {
  LogManager.getLogManager().readConfiguration();
  LocalParser musicController=new LocalParser();
  musicController.parse(""String_Node_Str"",""String_Node_Str"");
  musicController.parse(""String_Node_Str"",""String_Node_Str"");
  musicController.parse(""String_Node_Str"",""String_Node_Str"");
  musicController.parse(""String_Node_Str"",""String_Node_Str"");
  musicController.parse(""String_Node_Str"",""String_Node_Str"");
  musicController.parse(""String_Node_Str"",""String_Node_Str"");
  musicController.parse(""String_Node_Str"",""String_Node_Str"");
  musicController.parse(""String_Node_Str"",""String_Node_Str"");
  musicController.parse(""String_Node_Str"",""String_Node_Str"");
  musicController.parse(""String_Node_Str"",""String_Node_Str"");
  musicController.parse(""String_Node_Str"",""String_Node_Str"");
  musicController.parse(""String_Node_Str"",""String_Node_Str"");
  musicController.parse(""String_Node_Str"",""String_Node_Str"");
  musicController.parse(""String_Node_Str"",""String_Node_Str"");
  musicController.parse(""String_Node_Str"",""String_Node_Str"");
  musicController.parse(""String_Node_Str"",""String_Node_Str"");
  musicController.parse(""String_Node_Str"",""String_Node_Str"");
  musicController.parse(""String_Node_Str"",""String_Node_Str"");
  musicController.close();
}",0.3137003841229193
179756,"private String formatTrack(String source){
  source=source.replaceAll(""String_Node_Str"",""String_Node_Str"");
  try {
    Integer.parseInt(source);
  }
 catch (  NumberFormatException ex) {
    source=source.trim();
    return WordUtils.capitalize(source.toLowerCase());
  }
  return null;
}","private String formatTrack(String source){
  source=EncodingConverter.getInstance().convertToUTF8(source);
  source=source.replaceAll(""String_Node_Str"",""String_Node_Str"");
  try {
    Integer.parseInt(source);
  }
 catch (  NumberFormatException ex) {
    source=source.trim();
    return WordUtils.capitalize(source.toLowerCase());
  }
  return null;
}",0.9003115264797508
179757,"private String formatArtist(String source){
  source.replaceAll(""String_Node_Str"",""String_Node_Str"");
  try {
    Integer.parseInt(source);
  }
 catch (  NumberFormatException ex) {
    source=source.trim();
    return source;
  }
  return null;
}","private String formatArtist(String source){
  source=EncodingConverter.getInstance().convertToUTF8(source);
  source.replaceAll(""String_Node_Str"",""String_Node_Str"");
  try {
    Integer.parseInt(source);
  }
 catch (  NumberFormatException ex) {
    source=source.trim();
    return source;
  }
  return null;
}",0.8853046594982079
179758,"private String formatGenre(String source){
  source=source.replaceAll(""String_Node_Str"",""String_Node_Str"");
  try {
    Integer.parseInt(source);
  }
 catch (  NumberFormatException ex) {
    source=source.trim();
    return WordUtils.capitalize(source.toLowerCase()).trim();
  }
  return null;
}","private String formatGenre(String source){
  source=EncodingConverter.getInstance().convertToUTF8(source);
  source=source.replaceAll(""String_Node_Str"",""String_Node_Str"");
  try {
    Integer.parseInt(source);
  }
 catch (  NumberFormatException ex) {
    source=source.trim();
    return WordUtils.capitalize(source.toLowerCase()).trim();
  }
  return null;
}",0.902439024390244
179759,"private String formatAlbum(String source){
  source=source.replaceAll(""String_Node_Str"",""String_Node_Str"");
  try {
    Integer.parseInt(source);
  }
 catch (  NumberFormatException ex) {
    source=source.trim();
    return WordUtils.capitalize(source.toLowerCase());
  }
  return null;
}","private String formatAlbum(String source){
  source=EncodingConverter.getInstance().convertToUTF8(source);
  source=source.replaceAll(""String_Node_Str"",""String_Node_Str"");
  try {
    Integer.parseInt(source);
  }
 catch (  NumberFormatException ex) {
    source=source.trim();
    return WordUtils.capitalize(source.toLowerCase());
  }
  return null;
}",0.9003115264797508
179760,"public static void main(String[] args){
  EntityManagerFactory emf=Persistence.createEntityManagerFactory(""String_Node_Str"");
  EntityManager em=emf.createEntityManager();
  em.getTransaction().begin();
  Query q=em.createNamedQuery(""String_Node_Str"");
  q.setParameter(""String_Node_Str"",""String_Node_Str"");
  Artist mik=(Artist)q.getSingleResult();
  System.out.print(""String_Node_Str"" + mik.getName() + ""String_Node_Str"");
  Track t=new Track(""String_Node_Str"");
  mik.addTrack(t);
  t.setArtist(mik);
  em.persist(mik);
  em.getTransaction().commit();
  em.close();
  emf.close();
}","public static void main(String[] args){
  EntityManagerFactory emf=Persistence.createEntityManagerFactory(""String_Node_Str"");
  EntityManager em=emf.createEntityManager();
  em.getTransaction().begin();
  Genre gen=new Genre(1111,""String_Node_Str"");
  em.persist(gen);
  em.getTransaction().commit();
  em.close();
  emf.close();
}",0.519650655021834
179761,"private void predict(){
  System.out.println(""String_Node_Str"" + dx + ""String_Node_Str""+ dy+ ""String_Node_Str""+ dYaw);
  double xDrift, yDrift, dir;
  if (particleList.size() < PARTICLE_TOLERANCE * NUM_PARTICLES) {
    int[] indexCopyList=resample();
    for (int i=0; i < indexCopyList.length; i++) {
      Particle temp=(Particle)particleList.get(i).clone();
      dir=Math.random() - .5;
      xDrift=dir >= 0 ? Math.random() * 5.0 : Math.random() * -5.0;
      dir=Math.random() - .5;
      yDrift=dir >= 0 ? Math.random() * 5.0 : Math.random() * -5.0;
      temp.setX(temp.getX() + xDrift);
      temp.setY(temp.getY() + yDrift);
      if (temp.getX() < 0 || temp.getX() >= map.length || temp.getY() < 0 || temp.getY() >= map[0].length) {
        i--;
        continue;
      }
      double newYaw=Math.random() * 2 * Math.PI - Math.PI;
      temp.setPose(newYaw);
      temp.setWeight(1.0 / NUM_PARTICLES);
      particleList.add(temp);
    }
  }
  int m=particleList.size();
  for (int j=0; j < m; j++) {
    Particle temp=particleList.get(j);
    gmap.clearParticle(temp.getX(),temp.getY());
    double tx=temp.getX() + dx;
    double ty=temp.getY() + dy;
    double tp=temp.getPose() + dYaw;
    if (tp > Math.PI)     tp=tp - 2 * Math.PI;
    if (tp < -1 * Math.PI)     tp=tp + 2 * Math.PI;
    temp.move(tx,ty,tp);
    if (tx < 0 || tx >= map.length || ty < 0 || ty >= map[0].length) {
      temp.setWeight(0.0);
    }
 else     if (map[(int)tx][(int)ty] == 0) {
      temp.setWeight(0.0);
    }
    particleList.set(j,temp);
  }
}","private void predict(){
  System.out.println(""String_Node_Str"" + dx + ""String_Node_Str""+ dy+ ""String_Node_Str""+ dYaw);
  double xDrift, yDrift, dir;
  if (particleList.size() < PARTICLE_TOLERANCE * NUM_PARTICLES) {
    int[] indexCopyList=resample();
    for (int i=0; i < indexCopyList.length; i++) {
      Particle temp=(Particle)particleList.get(i).clone();
      dir=Math.random() - .5;
      xDrift=dir >= 0 ? Math.random() * 5.0 : Math.random() * -5.0;
      dir=Math.random() - .5;
      yDrift=dir >= 0 ? Math.random() * 5.0 : Math.random() * -5.0;
      temp.setX(temp.getX() + xDrift);
      temp.setY(temp.getY() + yDrift);
      if (temp.getX() < 0 || temp.getX() >= map.length || temp.getY() < 0 || temp.getY() >= map[0].length) {
        i--;
        continue;
      }
      double newYaw=Math.random() * 2 * Math.PI - Math.PI;
      temp.setPose(newYaw);
      temp.setWeight(1.0 / NUM_PARTICLES);
      particleList.add(temp);
    }
  }
  int m=particleList.size();
  for (int j=0; j < m; j++) {
    Particle temp=particleList.get(j);
    double pose=temp.getPose();
    gmap.clearParticle(temp.getX(),temp.getY());
    double tx=temp.getX() + dist * Math.cos(pose);
    double ty=temp.getY() - dist * Math.sin(pose);
    double tp=pose + dYaw;
    if (tp > Math.PI)     tp=tp - 2 * Math.PI;
    if (tp < -1 * Math.PI)     tp=tp + 2 * Math.PI;
    temp.move(tx,ty,tp);
    if (tx < 0 || tx >= map.length || ty < 0 || ty >= map[0].length) {
      temp.setWeight(0.0);
    }
 else     if (map[(int)tx][(int)ty] == 0) {
      temp.setWeight(0.0);
    }
  }
}",0.916452442159383
179762,"/** 
 * Called by the wanderer to update the localizer with the robot's change in position and pose, as well as the newest sensor dataz
 */
public void receiveUpdate(double dx,double dy,double dYaw,double[] ranges){
  this.dx=dx;
  this.dy=dy;
  this.dYaw=dYaw;
  this.ranges=ranges;
}","/** 
 * Called by the wanderer to update the localizer with the robot's change in position and pose, as well as the newest sensor dataz
 */
public void receiveUpdate(double dx,double dy,double dYaw,double[] ranges){
  this.dx=dx;
  this.dy=dy;
  this.dist=Math.sqrt(dx * dx + dy * dy);
  this.dYaw=dYaw;
  this.ranges=ranges;
}",0.931372549019608
179763,"/** 
 * Kill off bad points
 */
private void killBaddies(){
  int j=0;
  boolean oob=false;
  boolean obs=false;
  while (j < particleList.size()) {
    Particle p=particleList.get(j);
    if (p.getWeight() < .01 / (NUM_PARTICLES * NUM_PARTICLES) || p.getWeight() == 0) {
      oob=(p.getX() >= map.length || p.getY() >= map[0].length);
      oob=(p.getX() < 0 || p.getY() < 0);
      obs=oob ? true : map[(int)p.getX()][(int)p.getY()] == 0;
      if (!obs)       gmap.clearParticle(p.getX(),p.getY());
      particleList.remove(j);
      j--;
    }
    j++;
  }
  particleList.trimToSize();
}","/** 
 * Kill off bad points
 */
private void killBaddies(){
  int j=0;
  boolean oob=false;
  boolean obs=false;
  while (j < particleList.size()) {
    Particle p=particleList.get(j);
    if (p.getWeight() < .01 / (NUM_PARTICLES * NUM_PARTICLES) || p.getWeight() == 0) {
      oob=(p.getX() >= map.length || p.getY() >= map[0].length);
      oob=oob || p.getX() < 0 || p.getY() < 0;
      obs=oob ? true : map[(int)p.getX()][(int)p.getY()] == 0;
      if (!obs)       gmap.clearParticle(p.getX(),p.getY());
      particleList.remove(j);
      j--;
    }
    j++;
  }
  particleList.trimToSize();
}",0.9924433249370276
179764,"public synchronized void updateDataz(double x,double y,double yaw,double[] ranges){
  boolean compound=Wanderer.updateReady;
  Wanderer.dx=compound ? Wanderer.dx + this.x - x : this.x - x;
  Wanderer.dy=compound ? Wanderer.dy + this.y - y : this.y - y;
  Wanderer.dyaw=compound ? Wanderer.dyaw + this.yaw - yaw : this.yaw - yaw;
  Wanderer.ranges=ranges;
  Wanderer.updateReady=true;
}","public synchronized void updateDataz(double x,double y,double yaw,double[] ranges){
  boolean compound=Wanderer.updateReady;
  Wanderer.dx=compound ? Wanderer.dx + x - this.x : x - this.x;
  Wanderer.dy=compound ? Wanderer.dy + y - this.y : y - this.y;
  Wanderer.dyaw=compound ? Wanderer.dyaw + this.yaw - yaw : this.yaw - yaw;
  Wanderer.ranges=ranges;
  Wanderer.updateReady=true;
}",0.9064935064935064
179765,"public synchronized void updateDataz(double x,double y,double yaw,double[] ranges){
  boolean compound=Wanderer.updateReady;
  Wanderer.dx=compound ? Wanderer.dx + x - this.x : x - this.x;
  Wanderer.dy=compound ? Wanderer.dy + y - this.y : y - this.y;
  Wanderer.dyaw=compound ? Wanderer.dyaw + this.yaw - yaw : this.yaw - yaw;
  Wanderer.ranges=ranges;
  Wanderer.updateReady=true;
}","public synchronized void updateDataz(double x,double y,double yaw,double[] ranges){
  boolean compound=Wanderer.updateReady;
  Wanderer.dx=compound ? Wanderer.dx + x - this.x : x - this.x;
  Wanderer.dy=compound ? Wanderer.dy + y - this.y : y - this.y;
  Wanderer.dyaw=compound ? Wanderer.dyaw + yaw - this.yaw : yaw - this.yaw;
  Wanderer.ranges=ranges;
  Wanderer.updateReady=true;
}",0.9428571428571428
179766,"private void predict(){
  System.out.println(""String_Node_Str"" + dx + ""String_Node_Str""+ dy+ ""String_Node_Str""+ dYaw);
  if (particleList.size() < PARTICLE_TOLERANCE * NUM_PARTICLES) {
    int[] indexCopyList=resample();
    for (int i=0; i < indexCopyList.length; i++) {
      Particle temp=(Particle)particleList.get(i).clone();
      particleList.add(temp);
    }
  }
  int m=particleList.size();
  for (int j=0; j < m; j++) {
    Particle temp=particleList.get(j);
    gmap.clearParticle(temp.getX(),temp.getY());
    double tx=temp.getX() + dx;
    double ty=temp.getY() + dy;
    double tp=temp.getPose() + dYaw;
    if (tp > Math.PI)     tp=tp - 2 * Math.PI;
    temp.move(tx,ty,tp);
    if (tx < 0 || tx > map.length || ty < 0 || ty > map[0].length) {
      temp.setWeight(0.0);
    }
 else     if (map[(int)tx][(int)ty] == 0) {
      temp.setWeight(0.0);
    }
    particleList.set(j,temp);
  }
}","private void predict(){
  System.out.println(""String_Node_Str"" + dx + ""String_Node_Str""+ dy+ ""String_Node_Str""+ dYaw);
  if (particleList.size() < PARTICLE_TOLERANCE * NUM_PARTICLES) {
    int[] indexCopyList=resample();
    for (int i=0; i < indexCopyList.length; i++) {
      Particle temp=(Particle)particleList.get(i).clone();
      temp.setWeight(1 / NUM_PARTICLES);
      particleList.add(temp);
    }
  }
  int m=particleList.size();
  for (int j=0; j < m; j++) {
    Particle temp=particleList.get(j);
    gmap.clearParticle(temp.getX(),temp.getY());
    double tx=temp.getX() + dx;
    double ty=temp.getY() + dy;
    double tp=temp.getPose() + dYaw;
    if (tp > Math.PI)     tp=tp - 2 * Math.PI;
    temp.move(tx,ty,tp);
    if (tx < 0 || tx > map.length || ty < 0 || ty > map[0].length) {
      temp.setWeight(0.0);
    }
 else     if (map[(int)tx][(int)ty] == 0) {
      temp.setWeight(0.0);
    }
    particleList.set(j,temp);
  }
}",0.97784981091302
179767,"/** 
 * Kill off bad points
 */
private void killBaddies(){
  for (  Particle p : particleList) {
    if (p.getWeight() < (1.0 / NUM_PARTICLES)) {
      if (map[(int)p.getX()][(int)p.getY()] != 0)       gmap.clearParticle(p.getX(),p.getY());
      particleList.remove(p);
    }
  }
  particleList.trimToSize();
}","/** 
 * Kill off bad points
 */
private void killBaddies(){
  int j=0;
  for (int i=0; i < particleList.size(); i++) {
    Particle p=particleList.get(i);
    if (p.getWeight() < (1.0 / NUM_PARTICLES)) {
      if (map[(int)p.getX()][(int)p.getY()] != 0)       gmap.clearParticle(p.getX(),p.getY());
      particleList.remove(i);
      j--;
    }
    j++;
  }
  particleList.trimToSize();
}",0.818830242510699
179768,"/** 
 * Create a new Localizer object to be used in a map with the given dimensions. Fills the list of particles with NUM_PARTICLES particles or mapw*maph particles, whichever is smaller. All particles are initalized with equal weight, 1 divided by the number of particles.
 * @param map the map!
 */
public Localizer(int[][] map,GridMap gmap){
}","/** 
 * Create a new Localizer object to be used in a map with the given dimensions. Fills the list of particles with NUM_PARTICLES particles or mapw*maph particles, whichever is smaller. All particles are initalized with equal weight, 1 divided by the number of particles.
 * @param map the map!
 */
public Localizer(int[][] map,GridMap gmap){
  localized=false;
  this.map=map;
  this.gmap=gmap;
  int mapw=map.length;
  int maph=map[0].length;
  int numParticles=(NUM_PARTICLES > mapw * maph) ? mapw * maph : NUM_PARTICLES;
  int ppp=Math.round(mapw * maph / numParticles);
  particleList=new ArrayList<Particle>(numParticles);
  int x=0, y=0;
  double weight=1.0 / numParticles;
  for (int i=0; i < numParticles; i++) {
    if (map[x][y] != 0) {
      particleList.add(i,new Particle(x,y,0,weight));
    }
 else {
      for (int j=1; j < numParticles; j++) {
        if (map[(x + j) % mapw][(x + i) / mapw + y] == 255) {
          particleList.add(i,new Particle((x + j) % mapw,(x + i) / mapw + y,0,weight));
          break;
        }
      }
    }
    x=(x + ppp) % mapw;
    if (x < ppp)     y++;
  }
  expectedLocation=null;
  updateReady=false;
  drawMap();
  gmap.repaint();
}",0.4516971279373368
179769,"/** 
 * Checks all the particles to see if any of them are inside an obstacle. This is impossible, so any that it finds get a weight of zero. This ensures that they get wiped out and replaced on the next update.
 */
private void collisionCheck(){
  for (  Particle p : particleList) {
    if (map[p.getX()][p.getY()] == 0)     p.setWeight(0.0);
  }
}","/** 
 * Checks all the particles to see if any of them are inside an obstacle. This is impossible, so any that it finds get a weight of zero. This ensures that they get wiped out and replaced on the next update.
 */
private void collisionCheck(){
  for (  Particle p : particleList) {
    if (map[(int)Math.round(p.getX())][(int)Math.round(p.getY())] == 0)     p.setWeight(0.0);
  }
}",0.9536784741144414
179770,"/** 
 * Create a new Localizer object to be used in a map with the given dimensions. Fills the list of particles with NUM_PARTICLES particles or mapw*maph particles, whichever is smaller. All particles are initalized with equal weight, 1 divided by the number of particles.
 * @param map the map!
 */
public Localizer(int[][] map,GridMap gmap){
  localized=false;
  this.map=map;
  this.gmap=gmap;
  int mapw=map.length;
  int maph=map[0].length;
  int numParticles=(NUM_PARTICLES > mapw * maph) ? mapw * maph : NUM_PARTICLES;
  int ppp=Math.round(mapw * maph / numParticles);
  particleList=new ArrayList<Particle>(numParticles);
  int x=0, y=0;
  double weight=1.0 / numParticles;
  for (int i=0; i < numParticles; i++) {
    if (map[x][y] != 0) {
      particleList.add(i,new Particle(x,y,0,weight));
    }
 else {
      for (int j=1; j < numParticles; j++) {
        if (map[(x + j) % mapw][(x + i) / mapw + y] == 255) {
          particleList.add(i,new Particle((x + j) % mapw,(x + i) / mapw + y,0,weight));
          break;
        }
      }
    }
    x=(x + ppp) % mapw;
    if (x < ppp)     y++;
  }
  expectedLocation=null;
  updateReady=false;
  drawMap();
  gmap.repaint();
}","/** 
 * Create a new Localizer object to be used in a map with the given dimensions. Fills the list of particles with NUM_PARTICLES particles or mapw*maph particles, whichever is smaller. All particles are initalized with equal weight, 1 divided by the number of particles.
 * @param map the map!
 */
public Localizer(int[][] map,GridMap gmap){
  localized=false;
  this.map=map;
  this.gmap=gmap;
  int mapw=map.length;
  int maph=map[0].length;
  int numParticles=(NUM_PARTICLES > mapw * maph) ? mapw * maph : NUM_PARTICLES;
  int ppp=Math.round(mapw * maph / numParticles);
  particleList=new ArrayList<Particle>(numParticles);
  int x=0, y=0;
  double weight=1.0 / numParticles;
  for (int i=0; i < numParticles; i++) {
    if (map[x][y] != 0) {
      particleList.add(i,new Particle(x,y,0,weight));
    }
 else {
      for (int j=1; j < numParticles; j++) {
        if (map[(x + j) % mapw][((x + i) / mapw + y) % maph] == 255) {
          particleList.add(i,new Particle((x + j) % mapw,(x + i) / mapw + y,0,weight));
          break;
        }
      }
    }
    x=(x + ppp) % mapw;
    if (x < ppp)     y++;
  }
  expectedLocation=null;
  updateReady=false;
  drawMap();
  gmap.repaint();
  System.out.printf(""String_Node_Str"",NUM_PARTICLES,particleList.size());
}",0.9661914460285131
179771,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  initLayout();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  initLayout();
  isExternalStorageAvailable=Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState());
  if (!isExternalStorageAvailable) {
    new Alerts(this,R.string.imagehelper_sdcard_unavailable).showAlert();
  }
}",0.5188470066518847
179772,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (keyCode == KeyEvent.KEYCODE_BACK) {
    if (!m_order.orderItems.isEmpty()) {
      new Alerts(this).showAlert();
    }
 else {
      finish();
    }
  }
  return true;
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (keyCode == KeyEvent.KEYCODE_BACK) {
    if (!m_order.orderItems.isEmpty()) {
      new Alerts(this,R.string.alters_confirm_delete).showAlert();
    }
 else {
      finish();
    }
  }
  return true;
}",0.9390962671905696
179773,"public Alerts(Context context){
  m_context=context;
}","public Alerts(Context context,int messageType){
  m_context=context;
  m_messageType=messageType;
  initAlerts();
}",0.6390532544378699
179774,"public void showAlert(){
  Resources r=m_context.getResources();
  AlertDialog.Builder builderDialog=new AlertDialog.Builder(m_context);
  builderDialog.setMessage(r.getString(R.string.alters_confirm_delete));
  builderDialog.setCancelable(true);
  builderDialog.setPositiveButton(r.getString(R.string.yes),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface arg0,    int arg1){
      ((Activity)m_context).finish();
    }
  }
);
  builderDialog.setNegativeButton(r.getString(R.string.no),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface arg0,    int arg1){
      arg0.dismiss();
    }
  }
);
  AlertDialog alert=builderDialog.create();
  alert.show();
}","public void showAlert(){
  AlertDialog alert=builderDialog.create();
  alert.show();
}",0.2084848484848485
179775,"@Override protected File doInBackground(Void... arg0){
  File file=ImageHelper.getCachedFileUnchecked(imageUrl);
  if (Environment.MEDIA_MOUNTED.equals(packageDirectory)) {
    if (file != null && file.exists() == false) {
      ImageHelper.packageDirectory.mkdirs();
      try {
        InputStream in=HttpHelper.getRaw(imageUrl);
        FileOutputStream out=new FileOutputStream(file);
        byte[] buffer=new byte[4096];
        int bufferTemp=0;
        while ((bufferTemp=in.read(buffer)) > 0) {
          out.write(buffer,0,bufferTemp);
        }
        out.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    ImageHelper.m_cachedFiles.put(imageUrl,file);
    Log.i(FdConfig.DEBUG_TAG,""String_Node_Str"" + file);
    return file;
  }
 else {
    return null;
  }
}","@Override protected File doInBackground(Void... arg0){
  File file=ImageHelper.getCachedFileUnchecked(imageUrl);
  if (file != null && file.exists() == false) {
    ImageHelper.packageDirectory.mkdirs();
    try {
      InputStream in=HttpHelper.getRaw(imageUrl);
      FileOutputStream out=new FileOutputStream(file);
      byte[] buffer=new byte[4096];
      int bufferTemp=0;
      while ((bufferTemp=in.read(buffer)) > 0) {
        out.write(buffer,0,bufferTemp);
      }
      out.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  ImageHelper.m_cachedFiles.put(imageUrl,file);
  return file;
}",0.8541810642709053
179776,"/** 
 * Does various things to make sure user is logged in and has the proper permissions. At first it will check for previously logged in information. And then it tries to do an auto login. If the auto login request is sent, it will also stop (the auto login procedure will trigger another call to this method once it's done). If the auto login request wasn't sent, a verification request will set sent to entry-point/user-info. If the server validates our information, that's good news. Otherwise, it will display and error message and / or show a   {@link LoginDialog} and letuser identify himself / herself.
 * @see #doAutoLogin()
 */
protected void requireLoggedIn(){
  setLayoutEnabled();
  if (m_user.isLoggedIn()) {
    return;
  }
  if (doAutoLogin()) {
    return;
  }
  new HttpRequestAsyncTask(this,UriStringHelper.buildUriString(""String_Node_Str"")){
    @Override protected void onSuccess(    JSONObject jsonObject,    Object processed){
      try {
        JSONObject user=jsonObject.getJSONObject(""String_Node_Str"");
        m_user.parse(user);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      if (!m_user.isLoggedIn()) {
        showLoginDialog();
      }
 else {
        Toast.makeText(Main.this,getString(R.string.welcome_back,m_user.username),Toast.LENGTH_SHORT).show();
        setLayoutEnabled();
        syncSuggestion();
      }
    }
    @Override protected void onError(    JSONObject jsonObject,    String message){
      showLoginDialog();
    }
  }
.execute();
}","/** 
 * Does various things to make sure user is logged in and has the proper permissions. At first it will check for previously logged in information. And then it tries to do an auto login. If the auto login request is sent, it will also stop (the auto login procedure will trigger another call to this method once it's done). If the auto login request wasn't sent, a verification request will set sent to entry-point/user-info. If the server validates our information, that's good news. Otherwise, it will display and error message and / or show a   {@link LoginDialog} and letuser identify himself / herself.
 * @see #doAutoLogin()
 */
protected void requireLoggedIn(){
  setLayoutEnabled();
  if (m_user.isLoggedIn()) {
    return;
  }
  if (doAutoLogin()) {
    return;
  }
  new HttpRequestAsyncTask(this,UriStringHelper.buildUriString(""String_Node_Str"")){
    @Override protected void onSuccess(    JSONObject jsonObject,    Object processed){
      try {
        JSONObject user=jsonObject.getJSONObject(""String_Node_Str"");
        m_user.parse(user);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      if (!m_user.isLoggedIn()) {
        showLoginDialog();
      }
 else {
        Toast.makeText(Main.this,getString(R.string.welcome_back,m_user.username),Toast.LENGTH_SHORT).show();
        isExternalStorageAvailable();
        setLayoutEnabled();
        syncSuggestion();
      }
    }
    @Override protected void onError(    JSONObject jsonObject,    String message){
      showLoginDialog();
    }
  }
.execute();
}",0.9876623376623376
179777,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  initLayout();
  isExternalStorageAvailable=Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState());
  if (!isExternalStorageAvailable) {
    new Alerts(this,R.string.imagehelper_sdcard_unavailable).showAlert();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  initLayout();
}",0.5188470066518847
179778,"protected void initAlerts(){
  builderDialog=new AlertDialog.Builder(m_context);
  builderDialog.setCancelable(false);
switch (m_messageType) {
case R.string.alters_confirm_delete:
    Resources r=m_context.getResources();
  builderDialog.setMessage(R.string.alters_confirm_delete);
builderDialog.setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
  @Override public void onClick(  DialogInterface arg0,  int arg1){
    ((Activity)m_context).finish();
  }
}
);
builderDialog.setNegativeButton(R.string.no,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface arg0,int arg1){
  arg0.dismiss();
}
}
);
break;
case R.string.imagehelper_sdcard_unavailable:
builderDialog.setMessage(R.string.imagehelper_sdcard_unavailable);
builderDialog.setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface arg0,int arg1){
arg0.dismiss();
}
}
);
}
}","protected void initAlerts(){
  builderDialog=new AlertDialog.Builder(m_context);
  builderDialog.setCancelable(false);
  builderDialog.setMessage(R.string.alters_confirm_delete);
  builderDialog.setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface arg0,    int arg1){
      ((Activity)m_context).finish();
    }
  }
);
  builderDialog.setNegativeButton(R.string.no,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface arg0,    int arg1){
      arg0.dismiss();
    }
  }
);
}",0.3289646133682831
179779,"@Override protected void onSuccess(File cachedFile){
  if (cachedFile != null) {
    setImage(cachedFile);
  }
 else {
    Toast.makeText(m_context,R.string.imagehelper_sdcard_unavailable,Toast.LENGTH_LONG);
  }
}","@Override protected void onSuccess(File cachedFile){
  setImage(cachedFile);
}",0.5360824742268041
179780,"public int getQuantity(){
  try {
    return Integer.valueOf(m_vwQuantity.getText().toString());
  }
 catch (  NumberFormatException e) {
    e.printStackTrace();
  }
  return 0;
}","public int getQuantity(){
  try {
    int quantity=Integer.valueOf(m_vwQuantity.getText().toString());
    if (quantity > 50) {
      quantity=50;
    }
    return quantity;
  }
 catch (  NumberFormatException e) {
    e.printStackTrace();
  }
  return 0;
}",0.7917620137299771
179781,"@Override public void onClick(View v){
switch (v.getId()) {
case R.id.btnSet:
    if (getQuantity() < 0) {
      Toast.makeText(getContext(),R.string.quantityselectordialog_please_enter_a_valid_quantity,Toast.LENGTH_SHORT);
      m_vwQuantity.requestFocus();
    }
 else {
      dismiss();
    }
  break;
case R.id.btnPlus:
quantity+=1;
m_vwQuantity.setText(String.valueOf(quantity));
break;
case R.id.btnSubtract:
quantity-=1;
if (quantity >= 0) {
m_vwQuantity.setText(String.valueOf(quantity));
}
break;
case R.id.btnCancel:
quantity=oldQuantity;
dismiss();
break;
}
}","@Override public void onClick(View v){
switch (v.getId()) {
case R.id.btnSet:
    if (getQuantity() < 0) {
      Toast.makeText(getContext(),R.string.quantityselectordialog_please_enter_a_valid_quantity,Toast.LENGTH_SHORT);
      m_vwQuantity.requestFocus();
    }
 else {
      dismiss();
    }
  break;
case R.id.btnPlus:
quantity+=1;
m_vwQuantity.setText(String.valueOf(quantity));
break;
case R.id.btnSubtract:
if (quantity > 0) {
quantity-=1;
}
 else {
quantity=0;
}
m_vwQuantity.setText(String.valueOf(quantity));
break;
case R.id.btnCancel:
quantity=oldQuantity;
dismiss();
break;
}
}",0.830318690783807
179782,"@Override public void onClick(View v){
switch (v.getId()) {
case R.id.btnSet:
    if (getQuantity() == 0) {
      Toast.makeText(getContext(),R.string.quantityselectordialog_please_enter_a_valid_quantity,Toast.LENGTH_SHORT);
      m_vwQuantity.requestFocus();
    }
 else {
      dismiss();
    }
  break;
case R.id.btnPlus:
quantity+=1;
m_vwQuantity.setText(String.valueOf(quantity));
break;
case R.id.btnSubtract:
quantity-=1;
if (quantity >= 0) m_vwQuantity.setText(String.valueOf(quantity));
break;
case R.id.btnCancel:
quantity=oldQuantity;
cancelled=true;
dismiss();
break;
}
}","@Override public void onClick(View v){
switch (v.getId()) {
case R.id.btnSet:
    if (getQuantity() == 0) {
      Toast.makeText(getContext(),R.string.quantityselectordialog_please_enter_a_valid_quantity,Toast.LENGTH_SHORT);
      m_vwQuantity.requestFocus();
    }
 else {
      dismiss();
    }
  break;
case R.id.btnPlus:
quantity+=1;
m_vwQuantity.setText(String.valueOf(quantity));
break;
case R.id.btnSubtract:
if (quantity > 0) {
quantity-=1;
}
 else {
quantity=0;
}
m_vwQuantity.setText(String.valueOf(quantity));
break;
case R.id.btnCancel:
quantity=oldQuantity;
cancelled=true;
dismiss();
break;
}
}",0.950461796809404
179783,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  initLayout();
  initListeners();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  initLayout();
  initListeners();
  initDb();
}",0.9568345323741008
179784,"@Override public void onPause(){
  super.onPause();
  closeDb();
}","@Override public void onPause(){
  super.onPause();
}",0.8907563025210085
179785,"@Override public void onResume(){
  super.onResume();
  initDb();
}","@Override public void onResume(){
  super.onResume();
}",0.9016393442622952
179786,"@Override public void microTick(){
  if (nextTick == null || distance == -1) {
    return;
  }
  Location l=what.getLocation();
  double rotation=Math.atan2(l.getY() - nextTick.getY(),l.getX() - nextTick.getX());
  int x=l.getX();
  int y=l.getY();
  x+=(Math.sin(Math.PI / 2 - rotation) * distance) * -1;
  y+=(Math.cos(Math.PI / 2 - rotation) * distance) * -1;
  what.setLocation(x,y);
  if (what.getLocation().getDist(nextTick) < what.radius) {
    distance=-1;
  }
}","@Override public void microTick(){
  if (nextTick == null || turn > 10) {
    System.out.println(""String_Node_Str"");
    return;
  }
  int x=what.getLocation().getX();
  int y=what.getLocation().getY();
  Location loc=new Location(null,nextTick.getX(),nextTick.getY());
  double rotation=Math.atan2(loc.getY() - nextTick.getY(),loc.getX() - nextTick.getX());
  distance=loc.getDist(what.getLocation()) / 10 * turn;
  x+=((Math.sin(Math.PI / 2 - rotation) * distance) / 10) * -1;
  y+=((Math.cos(Math.PI / 2 - rotation) * distance) / 10) * -1;
  what.setLocation(x,y);
  turn++;
}",0.2669208770257388
179787,"@Override public void run(){
  if (jumps.isEmpty()) {
    return;
  }
  nextTick=jumps.poll();
  what.setLocation(nextTick);
  if (jumps != null) {
    return;
  }
  System.err.println(""String_Node_Str"");
  if (nextTick != null) {
    what.setLocation(nextTick);
  }
  int maxDist=what.getProperty(""String_Node_Str"");
  Location l=what.getLocation();
  double rotation=Math.atan2(l.getY() - where.getY(),l.getX() - where.getX());
  System.out.print(""String_Node_Str"" + rotation);
  what.rotateTo(Math.toDegrees(rotation));
  int x=l.getX();
  int y=l.getY();
  if (l.getDist(where) > maxDist) {
    x+=(Math.sin(Math.PI / 2 - rotation) * maxDist) * -1;
    y+=(Math.cos(Math.PI / 2 - rotation) * maxDist) * -1;
  }
 else {
    System.out.println(""String_Node_Str"");
    x=where.getX();
    y=where.getY();
  }
  nextTick=new Location(null,x,y);
  distance=l.getDist(nextTick) / 10.0;
}","@Override public void run(){
  if (jumps.isEmpty()) {
    return;
  }
  turn=1;
  nextTick=jumps.poll();
  System.out.println(""String_Node_Str"" + nextTick);
  double rotation=Math.atan2(what.getLocation().getY() - nextTick.getY(),what.getLocation().getX() - nextTick.getX());
  what.rotateTo(Math.toDegrees(rotation));
  what.setLocation(nextTick);
  if (jumps != null) {
    return;
  }
}",0.2590266875981161
179788,"public MoveEvent(Asset what,Point where){
  this.what=what;
  this.where=new Location(what.getLocation().getSector(),where.x,where.y);
  jumps=new LinkedList<Location>();
  int maxDist=what.getProperty(""String_Node_Str"");
  Location l=what.getLocation();
  double rotation=Math.atan2(l.getY() - where.getY(),l.getX() - where.getX());
  int x=l.getX();
  int y=l.getY();
  Location prev=new Location(null,600,600);
  while (prev.getDist(l) >= maxDist) {
    x+=(Math.sin(Math.PI / 2 - rotation) * maxDist) * -1;
    y+=(Math.cos(Math.PI / 2 - rotation) * maxDist) * -1;
    prev=new Location(null,x,y);
    jumps.add(prev);
  }
}","public MoveEvent(Asset what,Point where){
  this.turn=1;
  this.what=what;
  this.where=new Location(what.getLocation().getSector(),where.x,where.y);
  jumps=new LinkedList<Location>();
  int maxDist=what.getProperty(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + where);
  System.out.println(""String_Node_Str"" + maxDist);
  Location l=what.getLocation();
  double rotation=Math.atan2(l.getY() - where.getY(),l.getX() - where.getX());
  int x=l.getX();
  int y=l.getY();
  Location prev;
  do {
    x+=(Math.sin(Math.PI / 2 - rotation) * maxDist) * -1;
    y+=(Math.cos(Math.PI / 2 - rotation) * maxDist) * -1;
    prev=new Location(null,x,y);
    jumps.add(prev);
  }
 while (prev.getDist(l) >= maxDist && prev.getDist(this.where) > maxDist);
}",0.8118240807498197
179789,"@Override public String getDescription(){
  return ""String_Node_Str"" + where;
}","@Override public String getDescription(){
  String jstr=""String_Node_Str"";
  if (jumps.size() != 1) {
    jstr=""String_Node_Str"" + jumps.size() + ""String_Node_Str"";
  }
  return ""String_Node_Str"" + where + jstr;
}",0.541095890410959
179790,"private boolean checkItemPlacement(ItemInfo occupied[][][],ItemInfo item){
  for (int x=item.cellX; x < (item.cellX + item.spanX); x++) {
    for (int y=item.cellY; y < (item.cellY + item.spanY); y++) {
      if (occupied[item.screen][x][y] != null) {
        Log.e(TAG,""String_Node_Str"" + item + ""String_Node_Str""+ item.screen+ ""String_Node_Str""+ x+ ""String_Node_Str""+ y+ ""String_Node_Str""+ occupied[item.screen][x][y]);
        return false;
      }
    }
  }
  for (int x=item.cellX; x < (item.cellX + item.spanX); x++) {
    for (int y=item.cellY; y < (item.cellY + item.spanY); y++) {
      occupied[item.screen][x][y]=item;
    }
  }
  return true;
}","private boolean checkItemPlacement(ItemInfo occupied[][][],ItemInfo item){
  if (item.container != LauncherSettings.Favorites.CONTAINER_DESKTOP) {
    return true;
  }
  for (int x=item.cellX; x < (item.cellX + item.spanX); x++) {
    for (int y=item.cellY; y < (item.cellY + item.spanY); y++) {
      if (occupied[item.screen][x][y] != null) {
        Log.e(TAG,""String_Node_Str"" + item + ""String_Node_Str""+ item.screen+ ""String_Node_Str""+ x+ ""String_Node_Str""+ y+ ""String_Node_Str""+ occupied[item.screen][x][y]);
        return false;
      }
    }
  }
  for (int x=item.cellX; x < (item.cellX + item.spanX); x++) {
    for (int y=item.cellY; y < (item.cellY + item.spanY); y++) {
      occupied[item.screen][x][y]=item;
    }
  }
  return true;
}",0.9338078291814946
179791,"@Override protected void setChildrenDrawingCacheEnabled(boolean enabled){
  final int count=getChildCount();
  for (int i=0; i < count; i++) {
    final View view=getChildAt(i);
    view.setDrawingCacheEnabled(enabled);
    view.buildDrawingCache(false);
  }
}","@Override protected void setChildrenDrawingCacheEnabled(boolean enabled){
  final int count=getChildCount();
  for (int i=0; i < count; i++) {
    final View view=getChildAt(i);
    view.setDrawingCacheEnabled(enabled);
    view.buildDrawingCache(true);
  }
}",0.9865125240847784
179792,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (mLauncher.isWorkspaceLocked()) {
    return false;
  }
  if (mLauncher.isAllAppsVisible()) {
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
    snapToScreen(mCurrentScreen);
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
  mLastMotionX=ev.getX();
mActivePointerId=ev.getPointerId(0);
break;
case MotionEvent.ACTION_MOVE:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final int pointerIndex=ev.findPointerIndex(mActivePointerId);
final float x=filterX(ev.getX(pointerIndex));
final float deltaX=mLastMotionX - x;
mLastMotionX=x;
if (deltaX < 0) {
if (mScrollX > 0) {
  scrollBy(Math.round(Math.max(-mScrollX,deltaX)),0);
  updateWallpaperOffset();
}
}
 else if (deltaX > 0) {
final int availableToScroll=getChildAt(getChildCount() - 1).getRight() - mScrollX - getWidth();
if (availableToScroll > 0) {
  scrollBy(Math.round(Math.min(availableToScroll,deltaX)),0);
  updateWallpaperOffset();
}
}
 else {
awakenScrollBars();
}
}
break;
case MotionEvent.ACTION_UP:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
final int velocityX=(int)velocityTracker.getXVelocity(mActivePointerId);
final int screenWidth=getWidth();
final int whichScreen=(mScrollX + (screenWidth / 2)) / screenWidth;
final float scrolledPos=(float)mScrollX / screenWidth;
if (velocityX > SNAP_VELOCITY && mCurrentScreen > 0) {
final int bound=scrolledPos < whichScreen ? mCurrentScreen - 1 : mCurrentScreen;
snapToScreen(Math.min(whichScreen,bound),velocityX,true);
}
 else if (velocityX < -SNAP_VELOCITY && mCurrentScreen < getChildCount() - 1) {
final int bound=scrolledPos > whichScreen ? mCurrentScreen + 1 : mCurrentScreen;
snapToScreen(Math.max(whichScreen,bound),velocityX,true);
}
 else {
snapToScreen(whichScreen,0,true);
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
resetFilter();
}
mTouchState=TOUCH_STATE_REST;
mActivePointerId=INVALID_POINTER;
break;
case MotionEvent.ACTION_CANCEL:
mTouchState=TOUCH_STATE_REST;
mActivePointerId=INVALID_POINTER;
resetFilter();
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (mLauncher.isWorkspaceLocked()) {
    return false;
  }
  if (mLauncher.isAllAppsVisible()) {
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
    snapToScreen(mCurrentScreen);
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
  mLastMotionX=ev.getX();
mActivePointerId=ev.getPointerId(0);
if (mTouchState == TOUCH_STATE_SCROLLING) {
enableChildrenCache(mCurrentScreen - 1,mCurrentScreen + 1);
}
break;
case MotionEvent.ACTION_MOVE:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final int pointerIndex=ev.findPointerIndex(mActivePointerId);
final float x=filterX(ev.getX(pointerIndex));
final float deltaX=mLastMotionX - x;
mLastMotionX=x;
if (deltaX < 0) {
if (mScrollX > 0) {
scrollBy(Math.round(Math.max(-mScrollX,deltaX)),0);
updateWallpaperOffset();
}
}
 else if (deltaX > 0) {
final int availableToScroll=getChildAt(getChildCount() - 1).getRight() - mScrollX - getWidth();
if (availableToScroll > 0) {
scrollBy(Math.round(Math.min(availableToScroll,deltaX)),0);
updateWallpaperOffset();
}
}
 else {
awakenScrollBars();
}
}
break;
case MotionEvent.ACTION_UP:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
final int velocityX=(int)velocityTracker.getXVelocity(mActivePointerId);
final int screenWidth=getWidth();
final int whichScreen=(mScrollX + (screenWidth / 2)) / screenWidth;
final float scrolledPos=(float)mScrollX / screenWidth;
if (velocityX > SNAP_VELOCITY && mCurrentScreen > 0) {
final int bound=scrolledPos < whichScreen ? mCurrentScreen - 1 : mCurrentScreen;
snapToScreen(Math.min(whichScreen,bound),velocityX,true);
}
 else if (velocityX < -SNAP_VELOCITY && mCurrentScreen < getChildCount() - 1) {
final int bound=scrolledPos > whichScreen ? mCurrentScreen + 1 : mCurrentScreen;
snapToScreen(Math.max(whichScreen,bound),velocityX,true);
}
 else {
snapToScreen(whichScreen,0,true);
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
resetFilter();
}
mTouchState=TOUCH_STATE_REST;
mActivePointerId=INVALID_POINTER;
break;
case MotionEvent.ACTION_CANCEL:
mTouchState=TOUCH_STATE_REST;
mActivePointerId=INVALID_POINTER;
resetFilter();
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return true;
}",0.9781273983115888
179793,"@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  final boolean workspaceLocked=mLauncher.isWorkspaceLocked();
  final boolean allAppsVisible=mLauncher.isAllAppsVisible();
  if (workspaceLocked || allAppsVisible) {
    return false;
  }
  final int action=ev.getAction();
  if ((action == MotionEvent.ACTION_MOVE) && (mTouchState != TOUCH_STATE_REST)) {
    return true;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_MOVE:
{
      final int pointerIndex=ev.findPointerIndex(mActivePointerId);
      final float x=ev.getX(pointerIndex);
      final float y=ev.getY(pointerIndex);
      final int xDiff=(int)Math.abs(x - mLastMotionX);
      final int yDiff=(int)Math.abs(y - mLastMotionY);
      final int touchSlop=mTouchSlop;
      boolean xPaged=xDiff > mPagingTouchSlop;
      boolean xMoved=xDiff > touchSlop;
      boolean yMoved=yDiff > touchSlop;
      if (xMoved || yMoved) {
        if (xPaged) {
          mTouchState=TOUCH_STATE_SCROLLING;
          mLastMotionX=x;
          enableChildrenCache(0,getChildCount());
        }
        if (mAllowLongPress) {
          mAllowLongPress=false;
          final View currentScreen=getChildAt(mCurrentScreen);
          currentScreen.cancelLongPress();
        }
      }
      break;
    }
case MotionEvent.ACTION_DOWN:
{
    final float x=ev.getX();
    final float y=ev.getY();
    mLastMotionX=x;
    mLastMotionY=y;
    mActivePointerId=ev.getPointerId(0);
    mAllowLongPress=true;
    mTouchState=mScroller.isFinished() ? TOUCH_STATE_REST : TOUCH_STATE_SCROLLING;
    break;
  }
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mTouchState != TOUCH_STATE_SCROLLING) {
  final CellLayout currentScreen=(CellLayout)getChildAt(mCurrentScreen);
  if (!currentScreen.lastDownOnOccupiedCell()) {
    getLocationOnScreen(mTempCell);
    final int pointerIndex=ev.findPointerIndex(mActivePointerId);
    mWallpaperManager.sendWallpaperCommand(getWindowToken(),""String_Node_Str"",mTempCell[0] + (int)ev.getX(pointerIndex),mTempCell[1] + (int)ev.getY(pointerIndex),0,null);
  }
}
clearChildrenCache();
mTouchState=TOUCH_STATE_REST;
mActivePointerId=INVALID_POINTER;
mAllowLongPress=false;
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return mTouchState != TOUCH_STATE_REST;
}","@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  final boolean workspaceLocked=mLauncher.isWorkspaceLocked();
  final boolean allAppsVisible=mLauncher.isAllAppsVisible();
  if (workspaceLocked || allAppsVisible) {
    return false;
  }
  final int action=ev.getAction();
  if ((action == MotionEvent.ACTION_MOVE) && (mTouchState != TOUCH_STATE_REST)) {
    return true;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_MOVE:
{
      final int pointerIndex=ev.findPointerIndex(mActivePointerId);
      final float x=ev.getX(pointerIndex);
      final float y=ev.getY(pointerIndex);
      final int xDiff=(int)Math.abs(x - mLastMotionX);
      final int yDiff=(int)Math.abs(y - mLastMotionY);
      final int touchSlop=mTouchSlop;
      boolean xPaged=xDiff > mPagingTouchSlop;
      boolean xMoved=xDiff > touchSlop;
      boolean yMoved=yDiff > touchSlop;
      if (xMoved || yMoved) {
        if (xPaged) {
          mTouchState=TOUCH_STATE_SCROLLING;
          mLastMotionX=x;
          enableChildrenCache(mCurrentScreen - 1,mCurrentScreen + 1);
        }
        if (mAllowLongPress) {
          mAllowLongPress=false;
          final View currentScreen=getChildAt(mCurrentScreen);
          currentScreen.cancelLongPress();
        }
      }
      break;
    }
case MotionEvent.ACTION_DOWN:
{
    final float x=ev.getX();
    final float y=ev.getY();
    mLastMotionX=x;
    mLastMotionY=y;
    mActivePointerId=ev.getPointerId(0);
    mAllowLongPress=true;
    mTouchState=mScroller.isFinished() ? TOUCH_STATE_REST : TOUCH_STATE_SCROLLING;
    break;
  }
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mTouchState != TOUCH_STATE_SCROLLING) {
  final CellLayout currentScreen=(CellLayout)getChildAt(mCurrentScreen);
  if (!currentScreen.lastDownOnOccupiedCell()) {
    getLocationOnScreen(mTempCell);
    final int pointerIndex=ev.findPointerIndex(mActivePointerId);
    mWallpaperManager.sendWallpaperCommand(getWindowToken(),""String_Node_Str"",mTempCell[0] + (int)ev.getX(pointerIndex),mTempCell[1] + (int)ev.getY(pointerIndex),0,null);
  }
}
clearChildrenCache();
mTouchState=TOUCH_STATE_REST;
mActivePointerId=INVALID_POINTER;
mAllowLongPress=false;
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return mTouchState != TOUCH_STATE_REST;
}",0.9897233201581028
179794,"/** 
 * Initializes various states for this workspace.
 */
private void initWorkspace(){
  Context context=getContext();
  mScroller=new Scroller(context,new OvershootInterpolator());
  mCurrentScreen=mDefaultScreen;
  Launcher.setScreen(mCurrentScreen);
  LauncherApplication app=(LauncherApplication)context.getApplicationContext();
  mIconCache=app.getIconCache();
  final ViewConfiguration configuration=ViewConfiguration.get(getContext());
  mTouchSlop=configuration.getScaledTouchSlop();
  mPagingTouchSlop=configuration.getScaledPagingTouchSlop();
  mMaximumVelocity=configuration.getScaledMaximumFlingVelocity();
}","/** 
 * Initializes various states for this workspace.
 */
private void initWorkspace(){
  Context context=getContext();
  mScrollInterpolator=new WorkspaceOvershootInterpolator();
  mScroller=new Scroller(context,mScrollInterpolator);
  mCurrentScreen=mDefaultScreen;
  Launcher.setScreen(mCurrentScreen);
  LauncherApplication app=(LauncherApplication)context.getApplicationContext();
  mIconCache=app.getIconCache();
  final ViewConfiguration configuration=ViewConfiguration.get(getContext());
  mTouchSlop=configuration.getScaledTouchSlop();
  mPagingTouchSlop=configuration.getScaledPagingTouchSlop();
  mMaximumVelocity=configuration.getScaledMaximumFlingVelocity();
}",0.925925925925926
179795,"void snapToScreen(int whichScreen){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta != 0 ? screenDelta * 300 : 300;
  awakenScrollBars(duration);
  if (!mScroller.isFinished())   mScroller.abortAnimation();
  mScroller.startScroll(mScrollX,0,delta,0,duration);
  invalidate();
}","void snapToScreen(int whichScreen){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta != 0 ? 200 + screenDelta * 100 : 300;
  awakenScrollBars(duration);
  if (!mScroller.isFinished())   mScroller.abortAnimation();
  mScrollInterpolator.setDistance(screenDelta);
  mScroller.startScroll(mScrollX,0,delta,0,duration);
  invalidate();
}",0.9614035087719298
179796,"public void run(){
  mPosX=((float)mData[0]) / (1 << 16);
  mVelocity=((float)mData[1]) / (1 << 16);
  mZoom=((float)mData[2]) / (1 << 16);
  mZoomDirty=false;
}","public void run(){
  mRollo.mScrollPos=((float)mData[0]) / (1 << 16);
  mVelocity=((float)mData[1]) / (1 << 16);
  mZoom=((float)mData[2]) / (1 << 16);
  mZoomDirty=false;
}",0.9580838323353292
179797,"private boolean checkClickOK(){
  return (Math.abs(mAllApps.mVelocity) < 0.4f) && (Math.abs(mAllApps.mPosX - Math.round(mAllApps.mPosX)) < 0.4f);
}","private boolean checkClickOK(){
  return (Math.abs(mAllApps.mVelocity) < 0.4f) && (Math.abs(mScrollPos - Math.round(mScrollPos)) < 0.4f);
}",0.916083916083916
179798,"private void gainFocus(){
  if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    mRollo.selectIcon(Math.round(mPosX) * mColumnsPerPage,SELECTED_FOCUSED);
    mRollo.mState.save();
  }
}","private void gainFocus(){
  if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    mRollo.selectIcon(Math.round(mRollo.mScrollPos) * mColumnsPerPage,SELECTED_FOCUSED);
    mRollo.mState.save();
  }
}",0.9688888888888888
179799,"@Override public boolean onTouchEvent(MotionEvent ev){
  mArrowNavigation=false;
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  final boolean isPortrait=getWidth() < getHeight();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if ((isPortrait && y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) || (!isPortrait && x > mRollo.mTouchXBorders[mRollo.mTouchXBorders.length - 1])) {
      mTouchTracking=TRACKING_HOME;
      mRollo.setHomeSelected(SELECTED_PRESSED);
      mRollo.mState.save();
      mCurrentIconIndex=-1;
    }
 else {
      mTouchTracking=TRACKING_FLING;
      mMotionDownRawX=(int)ev.getRawX();
      mMotionDownRawY=(int)ev.getRawY();
      mRollo.mState.newPositionX=ev.getRawY() / getHeight();
      mRollo.mState.newTouchDown=1;
      if (!mRollo.checkClickOK()) {
        mRollo.clearSelectedIcon();
      }
 else {
        mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mPosX,SELECTED_PRESSED);
        if (mDownIconIndex < 0) {
          cancelLongPress();
        }
      }
      mRollo.mState.save();
      mRollo.move();
      mVelocityTracker=VelocityTracker.obtain();
      mVelocityTracker.addMovement(ev);
      mStartedScrolling=false;
    }
  break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
  mRollo.setHomeSelected((isPortrait && y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) || (!isPortrait && x > mRollo.mTouchXBorders[mRollo.mTouchXBorders.length - 1]) ? SELECTED_PRESSED : SELECTED_NONE);
  mRollo.mState.save();
}
 else if (mTouchTracking == TRACKING_FLING) {
  int rawY=(int)ev.getRawY();
  int slop;
  slop=Math.abs(rawY - mMotionDownRawY);
  if (!mStartedScrolling && slop < mSlop) {
    mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mPosX);
    if (mDownIconIndex != mCurrentIconIndex) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
  }
 else {
    if (!mStartedScrolling) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
    mRollo.mState.newPositionX=ev.getRawY() / getHeight();
    mRollo.mState.newTouchDown=1;
    mRollo.move();
    mStartedScrolling=true;
    mRollo.clearSelectedIcon();
    mVelocityTracker.addMovement(ev);
    mRollo.mState.save();
  }
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if ((isPortrait && y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) || (!isPortrait && x > mRollo.mTouchXBorders[mRollo.mTouchXBorders.length - 1])) {
  reallyPlaySoundEffect(SoundEffectConstants.CLICK);
  mLauncher.closeAllApps(true);
}
mRollo.setHomeSelected(SELECTED_NONE);
mRollo.mState.save();
}
mCurrentIconIndex=-1;
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawY() / getHeight();
mVelocityTracker.computeCurrentVelocity(1000,mMaxFlingVelocity);
mRollo.mState.flingVelocity=mVelocityTracker.getYVelocity() / getHeight();
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  mArrowNavigation=false;
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  final boolean isPortrait=getWidth() < getHeight();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if ((isPortrait && y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) || (!isPortrait && x > mRollo.mTouchXBorders[mRollo.mTouchXBorders.length - 1])) {
      mTouchTracking=TRACKING_HOME;
      mRollo.setHomeSelected(SELECTED_PRESSED);
      mRollo.mState.save();
      mCurrentIconIndex=-1;
    }
 else {
      mTouchTracking=TRACKING_FLING;
      mMotionDownRawX=(int)ev.getRawX();
      mMotionDownRawY=(int)ev.getRawY();
      mRollo.mState.newPositionX=ev.getRawY() / getHeight();
      mRollo.mState.newTouchDown=1;
      if (!mRollo.checkClickOK()) {
        mRollo.clearSelectedIcon();
      }
 else {
        mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,SELECTED_PRESSED);
        if (mDownIconIndex < 0) {
          cancelLongPress();
        }
      }
      mRollo.mState.save();
      mRollo.move();
      mVelocityTracker=VelocityTracker.obtain();
      mVelocityTracker.addMovement(ev);
      mStartedScrolling=false;
    }
  break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
  mRollo.setHomeSelected((isPortrait && y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) || (!isPortrait && x > mRollo.mTouchXBorders[mRollo.mTouchXBorders.length - 1]) ? SELECTED_PRESSED : SELECTED_NONE);
  mRollo.mState.save();
}
 else if (mTouchTracking == TRACKING_FLING) {
  int rawY=(int)ev.getRawY();
  int slop;
  slop=Math.abs(rawY - mMotionDownRawY);
  if (!mStartedScrolling && slop < mSlop) {
    mCurrentIconIndex=mRollo.chooseTappedIcon(x,y);
    if (mDownIconIndex != mCurrentIconIndex) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
  }
 else {
    if (!mStartedScrolling) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
    mRollo.mState.newPositionX=ev.getRawY() / getHeight();
    mRollo.mState.newTouchDown=1;
    mRollo.move();
    mStartedScrolling=true;
    mRollo.clearSelectedIcon();
    mVelocityTracker.addMovement(ev);
    mRollo.mState.save();
  }
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if ((isPortrait && y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) || (!isPortrait && x > mRollo.mTouchXBorders[mRollo.mTouchXBorders.length - 1])) {
  reallyPlaySoundEffect(SoundEffectConstants.CLICK);
  mLauncher.closeAllApps(true);
}
mRollo.setHomeSelected(SELECTED_NONE);
mRollo.mState.save();
}
mCurrentIconIndex=-1;
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawY() / getHeight();
mVelocityTracker.computeCurrentVelocity(1000,mMaxFlingVelocity);
mRollo.mState.flingVelocity=mVelocityTracker.getYVelocity() / getHeight();
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}",0.9981965734896304
179800,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  boolean handled=false;
  if (!isVisible()) {
    return false;
  }
  final int iconCount=mRollo.mState.iconCount;
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      if (mLastSelection == SELECTION_HOME) {
        reallyPlaySoundEffect(SoundEffectConstants.CLICK);
        mLauncher.closeAllApps(true);
      }
 else {
        int whichApp=mRollo.mState.selectedIconIndex;
        if (whichApp >= 0) {
          ApplicationInfo app=mAllAppsList.get(whichApp);
          mLauncher.startActivitySafely(app.intent);
          handled=true;
        }
      }
    }
  }
  if (iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=Math.round(mPosX);
    final int currentPageCol=currentSelection % mColumnsPerPage;
    final int currentPageRow=(currentSelection - (currentTopRow * mColumnsPerPage)) / mRowsPerPage;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (mLastSelection == SELECTION_HOME) {
        mRollo.setHomeSelected(SELECTED_NONE);
        int lastRowCount=iconCount % mColumnsPerPage;
        if (lastRowCount == 0) {
          lastRowCount=mColumnsPerPage;
        }
        newSelection=iconCount - lastRowCount + (mColumnsPerPage / 2);
        if (newSelection >= iconCount) {
          newSelection=iconCount - 1;
        }
        int target=(newSelection / mColumnsPerPage) - (mRowsPerPage - 1);
        if (target < 0) {
          target=0;
        }
        if (currentTopRow != target) {
          mRollo.moveTo(target);
        }
      }
 else {
        if (currentPageRow > 0) {
          newSelection=currentSelection - mColumnsPerPage;
        }
 else         if (currentTopRow > 0) {
          newSelection=currentSelection - mColumnsPerPage;
          mRollo.moveTo(newSelection / mColumnsPerPage);
        }
 else         if (currentPageRow != 0) {
          newSelection=currentTopRow * mRowsPerPage;
        }
      }
    handled=true;
  break;
case KeyEvent.KEYCODE_DPAD_DOWN:
{
  final int rowCount=iconCount / mColumnsPerPage + (iconCount % mColumnsPerPage == 0 ? 0 : 1);
  final int currentRow=currentSelection / mColumnsPerPage;
  if (mLastSelection != SELECTION_HOME) {
    if (currentRow < rowCount - 1) {
      mRollo.setHomeSelected(SELECTED_NONE);
      if (currentSelection < 0) {
        newSelection=0;
      }
 else {
        newSelection=currentSelection + mColumnsPerPage;
      }
      if (newSelection >= iconCount) {
        newSelection=iconCount - 1;
      }
      if (currentPageRow >= mRowsPerPage - 1) {
        mRollo.moveTo((newSelection / mColumnsPerPage) - mRowsPerPage + 1);
      }
    }
 else {
      newSelection=-1;
      mRollo.setHomeSelected(SELECTED_FOCUSED);
    }
  }
  handled=true;
  break;
}
case KeyEvent.KEYCODE_DPAD_LEFT:
if (mLastSelection != SELECTION_HOME) {
if (currentPageCol > 0) {
  newSelection=currentSelection - 1;
}
}
handled=true;
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if (mLastSelection != SELECTION_HOME) {
if ((currentPageCol < mColumnsPerPage - 1) && (currentSelection < iconCount - 1)) {
newSelection=currentSelection + 1;
}
}
handled=true;
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection,SELECTED_FOCUSED);
mRollo.mState.save();
}
}
return handled;
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  boolean handled=false;
  if (!isVisible()) {
    return false;
  }
  final int iconCount=mRollo.mState.iconCount;
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      if (mLastSelection == SELECTION_HOME) {
        reallyPlaySoundEffect(SoundEffectConstants.CLICK);
        mLauncher.closeAllApps(true);
      }
 else {
        int whichApp=mRollo.mState.selectedIconIndex;
        if (whichApp >= 0) {
          ApplicationInfo app=mAllAppsList.get(whichApp);
          mLauncher.startActivitySafely(app.intent);
          handled=true;
        }
      }
    }
  }
  if (iconCount > 0) {
    final boolean isPortrait=getWidth() < getHeight();
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=Math.round(mRollo.mScrollPos);
    final int currentPageCol=currentSelection % mColumnsPerPage;
    final int currentPageRow=(currentSelection - (currentTopRow * mColumnsPerPage)) / mRowsPerPage;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (mLastSelection == SELECTION_HOME) {
        if (isPortrait) {
          mRollo.setHomeSelected(SELECTED_NONE);
          int lastRowCount=iconCount % mColumnsPerPage;
          if (lastRowCount == 0) {
            lastRowCount=mColumnsPerPage;
          }
          newSelection=iconCount - lastRowCount + (mColumnsPerPage / 2);
          if (newSelection >= iconCount) {
            newSelection=iconCount - 1;
          }
          int target=(newSelection / mColumnsPerPage) - (mRowsPerPage - 1);
          if (target < 0) {
            target=0;
          }
          if (currentTopRow != target) {
            mRollo.moveTo(target);
          }
        }
      }
 else {
        if (currentPageRow > 0) {
          newSelection=currentSelection - mColumnsPerPage;
          if (currentTopRow > newSelection / mColumnsPerPage) {
            mRollo.moveTo(newSelection / mColumnsPerPage);
          }
        }
 else         if (currentTopRow > 0) {
          newSelection=currentSelection - mColumnsPerPage;
          mRollo.moveTo(newSelection / mColumnsPerPage);
        }
 else         if (currentPageRow != 0) {
          newSelection=currentTopRow * mRowsPerPage;
        }
      }
    handled=true;
  break;
case KeyEvent.KEYCODE_DPAD_DOWN:
{
  final int rowCount=iconCount / mColumnsPerPage + (iconCount % mColumnsPerPage == 0 ? 0 : 1);
  final int currentRow=currentSelection / mColumnsPerPage;
  if (mLastSelection != SELECTION_HOME) {
    if (currentRow < rowCount - 1) {
      mRollo.setHomeSelected(SELECTED_NONE);
      if (currentSelection < 0) {
        newSelection=0;
      }
 else {
        newSelection=currentSelection + mColumnsPerPage;
      }
      if (newSelection >= iconCount) {
        newSelection=iconCount - 1;
      }
      if (currentPageRow >= mRowsPerPage - 1) {
        mRollo.moveTo((newSelection / mColumnsPerPage) - mRowsPerPage + 1);
      }
    }
 else     if (isPortrait) {
      newSelection=-1;
      mRollo.setHomeSelected(SELECTED_FOCUSED);
    }
  }
  handled=true;
  break;
}
case KeyEvent.KEYCODE_DPAD_LEFT:
if (mLastSelection != SELECTION_HOME) {
if (currentPageCol > 0) {
  newSelection=currentSelection - 1;
}
}
 else if (!isPortrait) {
newSelection=((int)(mRollo.mScrollPos) * mColumnsPerPage) + (mRowsPerPage / 2 * mColumnsPerPage) + mColumnsPerPage - 1;
mRollo.setHomeSelected(SELECTED_NONE);
}
handled=true;
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if (mLastSelection != SELECTION_HOME) {
if (!isPortrait && (currentPageCol == mColumnsPerPage - 1 || currentSelection == iconCount - 1)) {
newSelection=-1;
mRollo.setHomeSelected(SELECTED_FOCUSED);
}
 else if ((currentPageCol < mColumnsPerPage - 1) && (currentSelection < iconCount - 1)) {
newSelection=currentSelection + 1;
}
}
handled=true;
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection,SELECTED_FOCUSED);
mRollo.mState.save();
}
}
return handled;
}",0.8651026392961877
179801,"int chooseTappedIcon(int x,int y,float pos){
  y+=(pos - ((int)pos)) * (mTouchYBorders[1] - mTouchYBorders[0]);
  int col=-1;
  int row=-1;
  final int columnsCount=mAllApps.mColumnsPerPage;
  for (int i=0; i < columnsCount; i++) {
    if (x >= mTouchXBorders[i] && x < mTouchXBorders[i + 1]) {
      col=i;
      break;
    }
  }
  final int rowsCount=mAllApps.mRowsPerPage;
  for (int i=0; i < rowsCount; i++) {
    if (y >= mTouchYBorders[i] && y < mTouchYBorders[i + 1]) {
      row=i;
      break;
    }
  }
  if (row < 0 || col < 0) {
    return -1;
  }
  int index=(((int)pos) * columnsCount) + (row * columnsCount) + col;
  if (index >= mState.iconCount) {
    return -1;
  }
 else {
    return index;
  }
}","int chooseTappedIcon(int x,int y){
  float pos=mScrollPos;
  y+=(pos - ((int)pos)) * (mTouchYBorders[1] - mTouchYBorders[0]);
  int col=-1;
  int row=-1;
  final int columnsCount=mAllApps.mColumnsPerPage;
  for (int i=0; i < columnsCount; i++) {
    if (x >= mTouchXBorders[i] && x < mTouchXBorders[i + 1]) {
      col=i;
      break;
    }
  }
  final int rowsCount=mAllApps.mRowsPerPage;
  for (int i=0; i < rowsCount; i++) {
    if (y >= mTouchYBorders[i] && y < mTouchYBorders[i + 1]) {
      row=i;
      break;
    }
  }
  if (row < 0 || col < 0) {
    return -1;
  }
  int index=(((int)pos) * columnsCount) + (row * columnsCount) + col;
  if (index >= mState.iconCount) {
    return -1;
  }
 else {
    return index;
  }
}",0.9764542936288088
179802,"@Override public void onWindowFocusChanged(boolean hasWindowFocus){
  super.onWindowFocusChanged(hasWindowFocus);
  if (mSurrendered)   return;
  if (mArrowNavigation) {
    if (!hasWindowFocus) {
      mLastSelectedIcon=mRollo.mState.selectedIconIndex;
      mRollo.setHomeSelected(SELECTED_NONE);
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
    }
 else {
      if (mRollo.mState.iconCount > 0) {
        if (mLastSelection == SELECTION_ICONS) {
          int selection=mLastSelectedIcon;
          final int firstIcon=Math.round(mPosX) * mColumnsPerPage;
          if (selection < 0 || selection < firstIcon || selection >= mRollo.mState.iconCount || selection >= firstIcon + (mColumnsPerPage * mRowsPerPage)) {
            selection=firstIcon;
          }
          mRollo.selectIcon(selection,SELECTED_FOCUSED);
          mRollo.mState.save();
        }
 else         if (mLastSelection == SELECTION_HOME) {
          mRollo.setHomeSelected(SELECTED_FOCUSED);
          mRollo.mState.save();
        }
      }
    }
  }
}","@Override public void onWindowFocusChanged(boolean hasWindowFocus){
  super.onWindowFocusChanged(hasWindowFocus);
  if (mSurrendered)   return;
  if (mArrowNavigation) {
    if (!hasWindowFocus) {
      mLastSelectedIcon=mRollo.mState.selectedIconIndex;
      mRollo.setHomeSelected(SELECTED_NONE);
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
    }
 else {
      if (mRollo.mState.iconCount > 0) {
        if (mLastSelection == SELECTION_ICONS) {
          int selection=mLastSelectedIcon;
          final int firstIcon=Math.round(mRollo.mScrollPos) * mColumnsPerPage;
          if (selection < 0 || selection < firstIcon || selection >= mRollo.mState.iconCount || selection >= firstIcon + (mColumnsPerPage * mRowsPerPage)) {
            selection=firstIcon;
          }
          mRollo.selectIcon(selection,SELECTED_FOCUSED);
          mRollo.mState.save();
        }
 else         if (mLastSelection == SELECTION_HOME) {
          mRollo.setHomeSelected(SELECTED_FOCUSED);
          mRollo.mState.save();
        }
      }
    }
  }
}",0.9933269780743564
179803,"public void dumpState(){
  Log.d(TAG,""String_Node_Str"" + mRS);
  Log.d(TAG,""String_Node_Str"" + mRollo);
  ApplicationInfo.dumpApplicationInfoList(TAG,""String_Node_Str"",mAllAppsList);
  Log.d(TAG,""String_Node_Str"" + mArrowNavigation);
  Log.d(TAG,""String_Node_Str"" + mStartedScrolling);
  Log.d(TAG,""String_Node_Str"" + mLastSelection);
  Log.d(TAG,""String_Node_Str"" + mLastSelectedIcon);
  Log.d(TAG,""String_Node_Str"" + mVelocityTracker);
  Log.d(TAG,""String_Node_Str"" + mTouchTracking);
  Log.d(TAG,""String_Node_Str"" + mShouldGainFocus);
  Log.d(TAG,""String_Node_Str"" + mZoomDirty);
  Log.d(TAG,""String_Node_Str"" + mAnimateNextZoom);
  Log.d(TAG,""String_Node_Str"" + mZoom);
  Log.d(TAG,""String_Node_Str"" + mPosX);
  Log.d(TAG,""String_Node_Str"" + mVelocity);
  Log.d(TAG,""String_Node_Str"" + mMessageProc);
  if (mRollo != null) {
    mRollo.dumpState();
  }
  if (mRS != null) {
    mRS.contextDump(0);
  }
}","public void dumpState(){
  Log.d(TAG,""String_Node_Str"" + mRS);
  Log.d(TAG,""String_Node_Str"" + mRollo);
  ApplicationInfo.dumpApplicationInfoList(TAG,""String_Node_Str"",mAllAppsList);
  Log.d(TAG,""String_Node_Str"" + mArrowNavigation);
  Log.d(TAG,""String_Node_Str"" + mStartedScrolling);
  Log.d(TAG,""String_Node_Str"" + mLastSelection);
  Log.d(TAG,""String_Node_Str"" + mLastSelectedIcon);
  Log.d(TAG,""String_Node_Str"" + mVelocityTracker);
  Log.d(TAG,""String_Node_Str"" + mTouchTracking);
  Log.d(TAG,""String_Node_Str"" + mShouldGainFocus);
  Log.d(TAG,""String_Node_Str"" + mZoomDirty);
  Log.d(TAG,""String_Node_Str"" + mAnimateNextZoom);
  Log.d(TAG,""String_Node_Str"" + mZoom);
  Log.d(TAG,""String_Node_Str"" + mRollo.mScrollPos);
  Log.d(TAG,""String_Node_Str"" + mVelocity);
  Log.d(TAG,""String_Node_Str"" + mMessageProc);
  if (mRollo != null) {
    mRollo.dumpState();
  }
  if (mRS != null) {
    mRS.contextDump(0);
  }
}",0.9923329682365828
179804,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRS.mMessageCallback=null;
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRS.mMessageCallback=null;
  mZoomDirty=true;
  mHaveSurface=false;
}",0.8600682593856656
179805,"void dirtyCheck(){
  if (mZoomDirty) {
    setZoom(mZoom,mAnimateNextZoom);
  }
}","void dirtyCheck(){
  if (mZoomDirty) {
    setZoom(mNextZoom,mAnimateNextZoom);
  }
}",0.9759036144578314
179806,"@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  super.surfaceChanged(holder,format,w,h);
  if (mRollo == null) {
    mRollo=new RolloRS();
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
    }
    if (mShouldGainFocus) {
      gainFocus();
      mShouldGainFocus=false;
    }
  }
  mRollo.dirtyCheck();
  mRollo.resize(w,h);
  mRS.mMessageCallback=mMessageProc=new AAMessage();
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
}","@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  super.surfaceChanged(holder,format,w,h);
  mHaveSurface=true;
  if (mRollo == null) {
    mRollo=new RolloRS();
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
    }
    if (mShouldGainFocus) {
      gainFocus();
      mShouldGainFocus=false;
    }
  }
  mRollo.dirtyCheck();
  mRollo.resize(w,h);
  mRS.mMessageCallback=mMessageProc=new AAMessage();
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
}",0.9823380992430614
179807,"/** 
 * Zoom to the specifed level.
 * @param zoom [0..1] 0 is hidden, 1 is open
 */
public void zoom(float zoom,boolean animate){
  cancelLongPress();
  if (mRollo == null) {
    mZoomDirty=true;
    mZoom=zoom;
    mAnimateNextZoom=animate;
    return;
  }
 else {
    mRollo.setZoom(zoom,animate);
  }
}","/** 
 * Zoom to the specifed level.
 * @param zoom [0..1] 0 is hidden, 1 is open
 */
public void zoom(float zoom,boolean animate){
  cancelLongPress();
  mNextZoom=zoom;
  mAnimateNextZoom=animate;
  if (mRollo == null || !mHaveSurface) {
    mZoomDirty=true;
    mZoom=zoom;
    return;
  }
 else {
    mRollo.setZoom(zoom,animate);
  }
}",0.8558139534883721
179808,"@Override public void onReceive(Context context,Intent intent){
  closeSystemDialogs();
  String reason=intent.getStringExtra(""String_Node_Str"");
  if (!""String_Node_Str"".equals(reason)) {
    boolean animate=true;
    closeAllApps(animate);
  }
}","@Override public void onReceive(Context context,Intent intent){
  closeSystemDialogs();
  String reason=intent.getStringExtra(""String_Node_Str"");
  if (!""String_Node_Str"".equals(reason)) {
    boolean animate=true;
    if (mPaused || ""String_Node_Str"".equals(reason)) {
      animate=false;
    }
    closeAllApps(animate);
  }
}",0.8576388888888888
179809,"@Override protected void onPause(){
  super.onPause();
  dismissPreview(mPreviousView);
  dismissPreview(mNextView);
  mDragController.cancelDrag();
  unregisterReceiver(mCloseSystemDialogsReceiver);
}","@Override protected void onPause(){
  super.onPause();
  dismissPreview(mPreviousView);
  dismissPreview(mNextView);
  mDragController.cancelDrag();
}",0.8547008547008547
179810,"@Override public void onDestroy(){
  super.onDestroy();
  try {
    mAppWidgetHost.stopListening();
  }
 catch (  NullPointerException ex) {
    Log.w(TAG,""String_Node_Str"",ex);
  }
  TextKeyListener.getInstance().release();
  mModel.stopLoader();
  unbindDesktopItems();
  AppInfoCache.unbindDrawables();
  getContentResolver().unregisterContentObserver(mWidgetObserver);
  dismissPreview(mPreviousView);
  dismissPreview(mNextView);
}","@Override public void onDestroy(){
  super.onDestroy();
  try {
    mAppWidgetHost.stopListening();
  }
 catch (  NullPointerException ex) {
    Log.w(TAG,""String_Node_Str"",ex);
  }
  TextKeyListener.getInstance().release();
  mModel.stopLoader();
  unbindDesktopItems();
  AppInfoCache.unbindDrawables();
  getContentResolver().unregisterContentObserver(mWidgetObserver);
  dismissPreview(mPreviousView);
  dismissPreview(mNextView);
  unregisterReceiver(mCloseSystemDialogsReceiver);
}",0.9447453954496208
179811,"@Override protected void onResume(){
  super.onResume();
  IntentFilter filter=new IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  registerReceiver(mCloseSystemDialogsReceiver,filter);
  if (mRestoring) {
    mWorkspaceLoading=true;
    mModel.startLoader(this,true);
    mRestoring=false;
  }
}","@Override protected void onResume(){
  super.onResume();
  mPaused=false;
  if (mRestoring) {
    mWorkspaceLoading=true;
    mModel.startLoader(this,true);
    mRestoring=false;
  }
}",0.7370600414078675
179812,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mDragController=new DragController(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  registerContentObservers();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  mModel.setAllAppsDirty();
  mModel.setWorkspaceDirty();
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mDragController=new DragController(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  registerContentObservers();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  mModel.setAllAppsDirty();
  mModel.setWorkspaceDirty();
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
  IntentFilter filter=new IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  registerReceiver(mCloseSystemDialogsReceiver,filter);
}",0.9375
179813,"/** 
 * Things to test when changing this code. - Home from workspace - from center screen - from other screens - Home from all apps - Back from all apps - Launch app from workspace and quit - with back - with home - Launch app from all apps and quit - with back - with home - Go to a screen that's not the default, then all apps, and launch and app, and go back - with back -with home - On workspace, long press power and go back - with back - with home - On all apps, long press power and go back - with back - with home - On workspace, power off - On all apps, power off - Launch an app and turn off the screen while in that app - Go back with home key - Go back with back key - From all apps - From workspace
 */
void closeAllApps(boolean animated){
  if (mAllAppsGrid.isVisible()) {
    mAllAppsGrid.zoom(0.0f,animated);
    mAllAppsGrid.setFocusable(false);
    mWorkspace.getChildAt(mWorkspace.getCurrentScreen()).requestFocus();
  }
}","/** 
 * Things to test when changing this code. - Home from workspace - from center screen - from other screens - Home from all apps - from center screen - from other screens - Back from all apps - from center screen - from other screens - Launch app from workspace and quit - with back - with home - Launch app from all apps and quit - with back - with home - Go to a screen that's not the default, then all apps, and launch and app, and go back - with back -with home - On workspace, long press power and go back - with back - with home - On all apps, long press power and go back - with back - with home - On workspace, power off - On all apps, power off - Launch an app and turn off the screen while in that app - Go back with home key - Go back with back key  TODO: make this not go to workspace - From all apps - From workspace
 */
void closeAllApps(boolean animated){
  if (mAllAppsGrid.isVisible()) {
    mAllAppsGrid.zoom(0.0f,animated);
    mAllAppsGrid.setFocusable(false);
    mWorkspace.getChildAt(mWorkspace.getCurrentScreen()).requestFocus();
  }
}",0.9396508728179552
179814,"/** 
 * Handle the allocations for the removed app.  Make sure you call saveAppsList when done.
 */
private void removeApp(int index){
  final int count=mState.iconCount - index - 1;
  final int src=index + 1;
  System.arraycopy(mIcons,src,mIcons,index,count);
  System.arraycopy(mIconIds,src,mIconIds,index,count);
  System.arraycopy(mLabels,src,mLabels,index,count);
  System.arraycopy(mLabelIds,src,mLabelIds,index,count);
  mRollo.mState.iconCount--;
  final int last=mState.iconCount - 1;
  mIcons[last]=null;
  mIconIds[last]=0;
  mLabels[last]=null;
  mLabelIds[last]=0;
}","/** 
 * Handle the allocations for the removed app.  Make sure you call saveAppsList when done.
 */
private void removeApp(int index){
  final int count=mState.iconCount - index - 1;
  final int src=index + 1;
  System.arraycopy(mIcons,src,mIcons,index,count);
  System.arraycopy(mIconIds,src,mIconIds,index,count);
  System.arraycopy(mLabels,src,mLabels,index,count);
  System.arraycopy(mLabelIds,src,mLabelIds,index,count);
  mRollo.mState.iconCount--;
  final int last=mState.iconCount;
  mIcons[last]=null;
  mIconIds[last]=0;
  mLabels[last]=null;
  mLabelIds[last]=0;
}",0.9965337954939342
179815,"public void addApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.reallocAppsList(mRollo.mState.iconCount + N);
  }
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=Collections.binarySearch(mAllAppsList,item,LauncherModel.APP_NAME_COMPARATOR);
    if (index < 0) {
      index=-(index + 1);
    }
    mAllAppsList.add(index,item);
    if (mRollo != null && mRollo.mHasSurface) {
      mRollo.addApp(index,item);
      mRollo.mState.iconCount++;
    }
  }
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.saveAppsList();
  }
}","public void addApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  if (mRollo != null) {
    mRollo.reallocAppsList(mRollo.mState.iconCount + N);
  }
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=Collections.binarySearch(mAllAppsList,item,LauncherModel.APP_NAME_COMPARATOR);
    if (index < 0) {
      index=-(index + 1);
    }
    mAllAppsList.add(index,item);
    if (mRollo != null) {
      mRollo.addApp(index,item);
    }
  }
  if (mRollo != null) {
    mRollo.saveAppsList();
  }
}",0.9227166276346604
179816,"private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  mState.iconCount=count;
  uploadApps(list);
  saveAppsList();
}","private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  mState.iconCount=count;
  for (int i=0; i < mState.iconCount; i++) {
    createAppIconAllocations(i,list.get(i));
    uploadAppIcon(i,list.get(i));
  }
  saveAppsList();
}",0.8036529680365296
179817,"private void uploadAppIcon(int index,ApplicationInfo item){
  mIcons[index]=Allocation.createFromBitmap(mRS,item.iconBitmap,Element.RGBA_8888(mRS),true);
  frameBitmapAllocMips(mIcons[index],item.iconBitmap.getWidth(),item.iconBitmap.getHeight());
  mLabels[index]=Allocation.createFromBitmap(mRS,item.titleBitmap,Element.RGBA_8888(mRS),true);
  frameBitmapAllocMips(mLabels[index],item.titleBitmap.getWidth(),item.titleBitmap.getHeight());
  mIcons[index].uploadToTexture(0);
  mLabels[index].uploadToTexture(0);
  mIconIds[index]=mIcons[index].getID();
  mLabelIds[index]=mLabels[index].getID();
}","private void uploadAppIcon(int index,ApplicationInfo item){
  if (mIconIds[index] != mIcons[index].getID()) {
    throw new IllegalStateException(""String_Node_Str"" + index + ""String_Node_Str""+ mIcons[index].getID()+ ""String_Node_Str""+ mIconIds[index]+ ""String_Node_Str""+ item);
  }
  mIcons[index].uploadToTexture(0);
  mLabels[index].uploadToTexture(0);
}",0.1591623036649214
179818,"void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      uploadApps(mAllAppsList);
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}","void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      for (int i=0; i < mState.iconCount; i++) {
        uploadAppIcon(i,mAllAppsList.get(i));
      }
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}",0.8441814595660749
179819,"public void removeApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=findAppByComponent(mAllAppsList,item);
    if (index >= 0) {
      int ic=mRollo != null ? mRollo.mState.iconCount : 666;
      mAllAppsList.remove(index);
      if (mRollo != null && mRollo.mHasSurface) {
        mRollo.removeApp(index);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + item + ""String_Node_Str"");
    }
  }
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.saveAppsList();
  }
}","public void removeApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=findAppByComponent(mAllAppsList,item);
    if (index >= 0) {
      int ic=mRollo != null ? mRollo.mState.iconCount : 666;
      mAllAppsList.remove(index);
      if (mRollo != null) {
        mRollo.removeApp(index);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + item + ""String_Node_Str"");
    }
  }
  if (mRollo != null) {
    mRollo.saveAppsList();
  }
}",0.9523026315789472
179820,"/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
}","/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  createAppIconAllocations(index,item);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
  mRollo.mState.iconCount++;
}",0.9389920424403184
179821,"@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (mRollo != null && mRollo.mHasSurface) {
      gainFocus();
    }
 else {
      mShouldGainFocus=true;
    }
  }
 else {
    if (mRollo != null && mRollo.mHasSurface) {
      if (mArrowNavigation) {
        mRollo.clearSelectedIcon();
        mRollo.setHomeSelected(SELECTED_NONE);
        mRollo.mState.save();
        mArrowNavigation=false;
      }
    }
 else {
      mShouldGainFocus=false;
    }
  }
}","@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (mRollo != null && mRollo.mHasSurface) {
      gainFocus();
    }
 else {
      mShouldGainFocus=true;
    }
  }
 else {
    if (mRollo != null) {
      if (mArrowNavigation) {
        mRollo.clearSelectedIcon();
        mRollo.setHomeSelected(SELECTED_NONE);
        mRollo.mState.save();
        mArrowNavigation=false;
      }
    }
 else {
      mShouldGainFocus=false;
    }
  }
}",0.982484076433121
179822,"@Override public void onReceive(Context context,Intent intent){
  closeSystemDialogs();
  String reason=intent.getStringExtra(""String_Node_Str"");
  if (!""String_Node_Str"".equals(reason)) {
    boolean animate=true;
    closeAllApps(animate);
  }
}","@Override public void onReceive(Context context,Intent intent){
  closeSystemDialogs();
  String reason=intent.getStringExtra(""String_Node_Str"");
  if (!""String_Node_Str"".equals(reason)) {
    boolean animate=true;
    if (mPaused || ""String_Node_Str"".equals(reason)) {
      animate=false;
    }
    closeAllApps(animate);
  }
}",0.8576388888888888
179823,"@Override protected void onPause(){
  super.onPause();
  dismissPreview(mPreviousView);
  dismissPreview(mNextView);
  mDragController.cancelDrag();
  unregisterReceiver(mCloseSystemDialogsReceiver);
}","@Override protected void onPause(){
  super.onPause();
  dismissPreview(mPreviousView);
  dismissPreview(mNextView);
  mDragController.cancelDrag();
}",0.8547008547008547
179824,"@Override public void onDestroy(){
  super.onDestroy();
  try {
    mAppWidgetHost.stopListening();
  }
 catch (  NullPointerException ex) {
    Log.w(TAG,""String_Node_Str"",ex);
  }
  TextKeyListener.getInstance().release();
  mModel.stopLoader();
  unbindDesktopItems();
  AppInfoCache.unbindDrawables();
  getContentResolver().unregisterContentObserver(mWidgetObserver);
  dismissPreview(mPreviousView);
  dismissPreview(mNextView);
}","@Override public void onDestroy(){
  super.onDestroy();
  try {
    mAppWidgetHost.stopListening();
  }
 catch (  NullPointerException ex) {
    Log.w(TAG,""String_Node_Str"",ex);
  }
  TextKeyListener.getInstance().release();
  mModel.stopLoader();
  unbindDesktopItems();
  AppInfoCache.unbindDrawables();
  getContentResolver().unregisterContentObserver(mWidgetObserver);
  dismissPreview(mPreviousView);
  dismissPreview(mNextView);
  unregisterReceiver(mCloseSystemDialogsReceiver);
}",0.9447453954496208
179825,"@Override protected void onResume(){
  super.onResume();
  IntentFilter filter=new IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  registerReceiver(mCloseSystemDialogsReceiver,filter);
  if (mRestoring) {
    mWorkspaceLoading=true;
    mModel.startLoader(this,true);
    mRestoring=false;
  }
  if (mIsNewIntent) {
    mWorkspace.post(new Runnable(){
      public void run(){
        stopSearch();
      }
    }
);
  }
  mIsNewIntent=false;
}","@Override protected void onResume(){
  super.onResume();
  mPaused=false;
  if (mRestoring) {
    mWorkspaceLoading=true;
    mModel.startLoader(this,true);
    mRestoring=false;
  }
  if (mIsNewIntent) {
    mWorkspace.post(new Runnable(){
      public void run(){
        stopSearch();
      }
    }
);
  }
  mIsNewIntent=false;
}",0.8215661103979461
179826,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mDragController=new DragController(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  registerContentObservers();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  mModel.setAllAppsDirty();
  mModel.setWorkspaceDirty();
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mDragController=new DragController(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  registerContentObservers();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  mModel.setAllAppsDirty();
  mModel.setWorkspaceDirty();
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
  IntentFilter filter=new IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  registerReceiver(mCloseSystemDialogsReceiver,filter);
}",0.9375
179827,"/** 
 * Things to test when changing this code. - Home from workspace - from center screen - from other screens - Home from all apps - Back from all apps - Launch app from workspace and quit - with back - with home - Launch app from all apps and quit - with back - with home - Go to a screen that's not the default, then all apps, and launch and app, and go back - with back -with home - On workspace, long press power and go back - with back - with home - On all apps, long press power and go back - with back - with home - On workspace, power off - On all apps, power off - Launch an app and turn off the screen while in that app - Go back with home key - Go back with back key - From all apps - From workspace
 */
void closeAllApps(boolean animated){
  if (mAllAppsGrid.isVisible()) {
    mAllAppsGrid.zoom(0.0f,animated);
    mAllAppsGrid.setFocusable(false);
    mWorkspace.getChildAt(mWorkspace.getCurrentScreen()).requestFocus();
    mWorkspace.startFading(true);
  }
}","/** 
 * Things to test when changing this code. - Home from workspace - from center screen - from other screens - Home from all apps - from center screen - from other screens - Back from all apps - from center screen - from other screens - Launch app from workspace and quit - with back - with home - Launch app from all apps and quit - with back - with home - Go to a screen that's not the default, then all apps, and launch and app, and go back - with back -with home - On workspace, long press power and go back - with back - with home - On all apps, long press power and go back - with back - with home - On workspace, power off - On all apps, power off - Launch an app and turn off the screen while in that app - Go back with home key - Go back with back key  TODO: make this not go to workspace - From all apps - From workspace
 */
void closeAllApps(boolean animated){
  if (mAllAppsGrid.isVisible()) {
    mAllAppsGrid.zoom(0.0f,animated);
    mAllAppsGrid.setFocusable(false);
    mWorkspace.getChildAt(mWorkspace.getCurrentScreen()).requestFocus();
    mWorkspace.startFading(true);
  }
}",0.9416304872165944
179828,"/** 
 * Handle the allocations for the removed app.  Make sure you call saveAppsList when done.
 */
private void removeApp(int index){
  final int count=mState.iconCount - index - 1;
  final int src=index + 1;
  System.arraycopy(mIcons,src,mIcons,index,count);
  System.arraycopy(mIconIds,src,mIconIds,index,count);
  System.arraycopy(mLabels,src,mLabels,index,count);
  System.arraycopy(mLabelIds,src,mLabelIds,index,count);
  mRollo.mState.iconCount--;
  final int last=mState.iconCount - 1;
  mIcons[last]=null;
  mIconIds[last]=0;
  mLabels[last]=null;
  mLabelIds[last]=0;
}","/** 
 * Handle the allocations for the removed app.  Make sure you call saveAppsList when done.
 */
private void removeApp(int index){
  final int count=mState.iconCount - index - 1;
  final int src=index + 1;
  System.arraycopy(mIcons,src,mIcons,index,count);
  System.arraycopy(mIconIds,src,mIconIds,index,count);
  System.arraycopy(mLabels,src,mLabels,index,count);
  System.arraycopy(mLabelIds,src,mLabelIds,index,count);
  mRollo.mState.iconCount--;
  final int last=mState.iconCount;
  mIcons[last]=null;
  mIconIds[last]=0;
  mLabels[last]=null;
  mLabelIds[last]=0;
}",0.9965337954939342
179829,"public void addApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.reallocAppsList(mRollo.mState.iconCount + N);
  }
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=Collections.binarySearch(mAllAppsList,item,LauncherModel.APP_NAME_COMPARATOR);
    if (index < 0) {
      index=-(index + 1);
    }
    mAllAppsList.add(index,item);
    if (mRollo != null && mRollo.mHasSurface) {
      mRollo.addApp(index,item);
      mRollo.mState.iconCount++;
    }
  }
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.saveAppsList();
  }
}","public void addApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  if (mRollo != null) {
    mRollo.reallocAppsList(mRollo.mState.iconCount + N);
  }
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=Collections.binarySearch(mAllAppsList,item,LauncherModel.APP_NAME_COMPARATOR);
    if (index < 0) {
      index=-(index + 1);
    }
    mAllAppsList.add(index,item);
    if (mRollo != null) {
      mRollo.addApp(index,item);
    }
  }
  if (mRollo != null) {
    mRollo.saveAppsList();
  }
}",0.9227166276346604
179830,"private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  mState.iconCount=count;
  uploadApps(list);
  saveAppsList();
}","private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  mState.iconCount=count;
  for (int i=0; i < mState.iconCount; i++) {
    createAppIconAllocations(i,list.get(i));
    uploadAppIcon(i,list.get(i));
  }
  saveAppsList();
}",0.8036529680365296
179831,"private void uploadAppIcon(int index,ApplicationInfo item){
  mIcons[index]=Allocation.createFromBitmap(mRS,item.iconBitmap,Element.RGBA_8888(mRS),true);
  frameBitmapAllocMips(mIcons[index],item.iconBitmap.getWidth(),item.iconBitmap.getHeight());
  mLabels[index]=Allocation.createFromBitmap(mRS,item.titleBitmap,Element.RGBA_8888(mRS),true);
  frameBitmapAllocMips(mLabels[index],item.titleBitmap.getWidth(),item.titleBitmap.getHeight());
  mIcons[index].uploadToTexture(0);
  mLabels[index].uploadToTexture(0);
  mIconIds[index]=mIcons[index].getID();
  mLabelIds[index]=mLabels[index].getID();
}","private void uploadAppIcon(int index,ApplicationInfo item){
  if (mIconIds[index] != mIcons[index].getID()) {
    throw new IllegalStateException(""String_Node_Str"" + index + ""String_Node_Str""+ mIcons[index].getID()+ ""String_Node_Str""+ mIconIds[index]+ ""String_Node_Str""+ item);
  }
  mIcons[index].uploadToTexture(0);
  mLabels[index].uploadToTexture(0);
}",0.1591623036649214
179832,"void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      uploadApps(mAllAppsList);
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}","void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      for (int i=0; i < mState.iconCount; i++) {
        uploadAppIcon(i,mAllAppsList.get(i));
      }
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}",0.8441814595660749
179833,"public void removeApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=findAppByComponent(mAllAppsList,item);
    if (index >= 0) {
      int ic=mRollo != null ? mRollo.mState.iconCount : 666;
      mAllAppsList.remove(index);
      if (mRollo != null && mRollo.mHasSurface) {
        mRollo.removeApp(index);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + item + ""String_Node_Str"");
    }
  }
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.saveAppsList();
  }
}","public void removeApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=findAppByComponent(mAllAppsList,item);
    if (index >= 0) {
      int ic=mRollo != null ? mRollo.mState.iconCount : 666;
      mAllAppsList.remove(index);
      if (mRollo != null) {
        mRollo.removeApp(index);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + item + ""String_Node_Str"");
    }
  }
  if (mRollo != null) {
    mRollo.saveAppsList();
  }
}",0.9523026315789472
179834,"/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
}","/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  createAppIconAllocations(index,item);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
  mRollo.mState.iconCount++;
}",0.9389920424403184
179835,"@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (mRollo != null && mRollo.mHasSurface) {
      gainFocus();
    }
 else {
      mShouldGainFocus=true;
    }
  }
 else {
    if (mRollo != null && mRollo.mHasSurface) {
      if (mArrowNavigation) {
        mRollo.clearSelectedIcon();
        mRollo.setHomeSelected(SELECTED_NONE);
        mRollo.mState.save();
        mArrowNavigation=false;
      }
    }
 else {
      mShouldGainFocus=false;
    }
  }
}","@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (mRollo != null && mRollo.mHasSurface) {
      gainFocus();
    }
 else {
      mShouldGainFocus=true;
    }
  }
 else {
    if (mRollo != null) {
      if (mArrowNavigation) {
        mRollo.clearSelectedIcon();
        mRollo.setHomeSelected(SELECTED_NONE);
        mRollo.mState.save();
        mArrowNavigation=false;
      }
    }
 else {
      mShouldGainFocus=false;
    }
  }
}",0.982484076433121
179836,"void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      for (int i=0; i < mState.iconCount; i++) {
        uploadAppIcon(i,mAllAppsList.get(i));
      }
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}","void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty && mAllAppsList != null) {
      for (int i=0; i < mState.iconCount; i++) {
        uploadAppIcon(i,mAllAppsList.get(i));
      }
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}",0.9601328903654484
179837,"/** 
 * Handle the allocations for the removed app.  Make sure you call saveAppsList when done.
 */
private void removeApp(int index){
  final int count=mState.iconCount - index - 1;
  final int src=index + 1;
  System.arraycopy(mIcons,src,mIcons,index,count);
  System.arraycopy(mIconIds,src,mIconIds,index,count);
  System.arraycopy(mLabels,src,mLabels,index,count);
  System.arraycopy(mLabelIds,src,mLabelIds,index,count);
  mRollo.mState.iconCount--;
  final int last=mState.iconCount - 1;
  mIcons[last]=null;
  mIconIds[last]=0;
  mLabels[last]=null;
  mLabelIds[last]=0;
}","/** 
 * Handle the allocations for the removed app.  Make sure you call saveAppsList when done.
 */
private void removeApp(int index){
  final int count=mState.iconCount - index - 1;
  final int src=index + 1;
  System.arraycopy(mIcons,src,mIcons,index,count);
  System.arraycopy(mIconIds,src,mIconIds,index,count);
  System.arraycopy(mLabels,src,mLabels,index,count);
  System.arraycopy(mLabelIds,src,mLabelIds,index,count);
  mRollo.mState.iconCount--;
  final int last=mState.iconCount;
  mIcons[last]=null;
  mIconIds[last]=0;
  mLabels[last]=null;
  mLabelIds[last]=0;
}",0.9965337954939342
179838,"public void addApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.reallocAppsList(mRollo.mState.iconCount + N);
  }
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=Collections.binarySearch(mAllAppsList,item,LauncherModel.APP_NAME_COMPARATOR);
    if (index < 0) {
      index=-(index + 1);
    }
    mAllAppsList.add(index,item);
    if (mRollo != null && mRollo.mHasSurface) {
      mRollo.addApp(index,item);
      mRollo.mState.iconCount++;
    }
  }
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.saveAppsList();
  }
}","public void addApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  if (mRollo != null) {
    mRollo.reallocAppsList(mRollo.mState.iconCount + N);
  }
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=Collections.binarySearch(mAllAppsList,item,LauncherModel.APP_NAME_COMPARATOR);
    if (index < 0) {
      index=-(index + 1);
    }
    mAllAppsList.add(index,item);
    if (mRollo != null) {
      mRollo.addApp(index,item);
    }
  }
  if (mRollo != null) {
    mRollo.saveAppsList();
  }
}",0.9227166276346604
179839,"private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  mState.iconCount=count;
  uploadApps(list);
  saveAppsList();
}","private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  mState.iconCount=count;
  for (int i=0; i < mState.iconCount; i++) {
    createAppIconAllocations(i,list.get(i));
    uploadAppIcon(i,list.get(i));
  }
  saveAppsList();
}",0.8036529680365296
179840,"private void uploadAppIcon(int index,ApplicationInfo item){
  mIcons[index]=Allocation.createFromBitmap(mRS,item.iconBitmap,Element.RGBA_8888(mRS),true);
  frameBitmapAllocMips(mIcons[index],item.iconBitmap.getWidth(),item.iconBitmap.getHeight());
  mLabels[index]=Allocation.createFromBitmap(mRS,item.titleBitmap,Element.RGBA_8888(mRS),true);
  frameBitmapAllocMips(mLabels[index],item.titleBitmap.getWidth(),item.titleBitmap.getHeight());
  mIcons[index].uploadToTexture(0);
  mLabels[index].uploadToTexture(0);
  mIconIds[index]=mIcons[index].getID();
  mLabelIds[index]=mLabels[index].getID();
}","private void uploadAppIcon(int index,ApplicationInfo item){
  if (mIconIds[index] != mIcons[index].getID()) {
    throw new IllegalStateException(""String_Node_Str"" + index + ""String_Node_Str""+ mIcons[index].getID()+ ""String_Node_Str""+ mIconIds[index]+ ""String_Node_Str""+ item);
  }
  mIcons[index].uploadToTexture(0);
  mLabels[index].uploadToTexture(0);
}",0.1591623036649214
179841,"void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      uploadApps(mAllAppsList);
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}","void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      for (int i=0; i < mState.iconCount; i++) {
        uploadAppIcon(i,mAllAppsList.get(i));
      }
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}",0.8441814595660749
179842,"public void removeApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=findAppByComponent(mAllAppsList,item);
    if (index >= 0) {
      int ic=mRollo != null ? mRollo.mState.iconCount : 666;
      mAllAppsList.remove(index);
      if (mRollo != null && mRollo.mHasSurface) {
        mRollo.removeApp(index);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + item + ""String_Node_Str"");
    }
  }
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.saveAppsList();
  }
}","public void removeApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=findAppByComponent(mAllAppsList,item);
    if (index >= 0) {
      int ic=mRollo != null ? mRollo.mState.iconCount : 666;
      mAllAppsList.remove(index);
      if (mRollo != null) {
        mRollo.removeApp(index);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + item + ""String_Node_Str"");
    }
  }
  if (mRollo != null) {
    mRollo.saveAppsList();
  }
}",0.9523026315789472
179843,"/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
}","/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  createAppIconAllocations(index,item);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
  mRollo.mState.iconCount++;
}",0.9389920424403184
179844,"@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (mRollo != null && mRollo.mHasSurface) {
      gainFocus();
    }
 else {
      mShouldGainFocus=true;
    }
  }
 else {
    if (mRollo != null && mRollo.mHasSurface) {
      if (mArrowNavigation) {
        mRollo.clearSelectedIcon();
        mRollo.setHomeSelected(SELECTED_NONE);
        mRollo.mState.save();
        mArrowNavigation=false;
      }
    }
 else {
      mShouldGainFocus=false;
    }
  }
}","@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (mRollo != null && mRollo.mHasSurface) {
      gainFocus();
    }
 else {
      mShouldGainFocus=true;
    }
  }
 else {
    if (mRollo != null) {
      if (mArrowNavigation) {
        mRollo.clearSelectedIcon();
        mRollo.setHomeSelected(SELECTED_NONE);
        mRollo.mState.save();
        mArrowNavigation=false;
      }
    }
 else {
      mShouldGainFocus=false;
    }
  }
}",0.982484076433121
179845,"void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      for (int i=0; i < mState.iconCount; i++) {
        uploadAppIcon(i,mAllAppsList.get(i));
      }
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}","void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty && mAllAppsList != null) {
      for (int i=0; i < mState.iconCount; i++) {
        uploadAppIcon(i,mAllAppsList.get(i));
      }
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}",0.9601328903654484
179846,"/** 
 * Handle the allocations for the removed app.  Make sure you call saveAppsList when done.
 */
private void removeApp(int index){
  final int count=mState.iconCount - index - 1;
  final int src=index + 1;
  System.arraycopy(mIcons,src,mIcons,index,count);
  System.arraycopy(mIconIds,src,mIconIds,index,count);
  System.arraycopy(mLabels,src,mLabels,index,count);
  System.arraycopy(mLabelIds,src,mLabelIds,index,count);
  mRollo.mState.iconCount--;
  final int last=mState.iconCount - 1;
  mIcons[last]=null;
  mIconIds[last]=0;
  mLabels[last]=null;
  mLabelIds[last]=0;
}","/** 
 * Handle the allocations for the removed app.  Make sure you call saveAppsList when done.
 */
private void removeApp(int index){
  final int count=mState.iconCount - index - 1;
  final int src=index + 1;
  System.arraycopy(mIcons,src,mIcons,index,count);
  System.arraycopy(mIconIds,src,mIconIds,index,count);
  System.arraycopy(mLabels,src,mLabels,index,count);
  System.arraycopy(mLabelIds,src,mLabelIds,index,count);
  mRollo.mState.iconCount--;
  final int last=mState.iconCount;
  mIcons[last]=null;
  mIconIds[last]=0;
  mLabels[last]=null;
  mLabelIds[last]=0;
}",0.9965337954939342
179847,"public void addApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.reallocAppsList(mRollo.mState.iconCount + N);
  }
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=Collections.binarySearch(mAllAppsList,item,LauncherModel.APP_NAME_COMPARATOR);
    if (index < 0) {
      index=-(index + 1);
    }
    mAllAppsList.add(index,item);
    if (mRollo != null && mRollo.mHasSurface) {
      mRollo.addApp(index,item);
      mRollo.mState.iconCount++;
    }
  }
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.saveAppsList();
  }
}","public void addApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  if (mRollo != null) {
    mRollo.reallocAppsList(mRollo.mState.iconCount + N);
  }
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=Collections.binarySearch(mAllAppsList,item,LauncherModel.APP_NAME_COMPARATOR);
    if (index < 0) {
      index=-(index + 1);
    }
    mAllAppsList.add(index,item);
    if (mRollo != null) {
      mRollo.addApp(index,item);
    }
  }
  if (mRollo != null) {
    mRollo.saveAppsList();
  }
}",0.9227166276346604
179848,"private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  mState.iconCount=count;
  uploadApps(list);
  saveAppsList();
}","private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  mState.iconCount=count;
  for (int i=0; i < mState.iconCount; i++) {
    createAppIconAllocations(i,list.get(i));
    uploadAppIcon(i,list.get(i));
  }
  saveAppsList();
}",0.8036529680365296
179849,"private void uploadAppIcon(int index,ApplicationInfo item){
  mIcons[index]=Allocation.createFromBitmap(mRS,item.iconBitmap,Element.RGBA_8888(mRS),true);
  frameBitmapAllocMips(mIcons[index],item.iconBitmap.getWidth(),item.iconBitmap.getHeight());
  mLabels[index]=Allocation.createFromBitmap(mRS,item.titleBitmap,Element.RGBA_8888(mRS),true);
  frameBitmapAllocMips(mLabels[index],item.titleBitmap.getWidth(),item.titleBitmap.getHeight());
  mIcons[index].uploadToTexture(0);
  mLabels[index].uploadToTexture(0);
  mIconIds[index]=mIcons[index].getID();
  mLabelIds[index]=mLabels[index].getID();
}","private void uploadAppIcon(int index,ApplicationInfo item){
  if (mIconIds[index] != mIcons[index].getID()) {
    throw new IllegalStateException(""String_Node_Str"" + index + ""String_Node_Str""+ mIcons[index].getID()+ ""String_Node_Str""+ mIconIds[index]+ ""String_Node_Str""+ item);
  }
  mIcons[index].uploadToTexture(0);
  mLabels[index].uploadToTexture(0);
}",0.1591623036649214
179850,"void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      uploadApps(mAllAppsList);
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}","void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      for (int i=0; i < mState.iconCount; i++) {
        uploadAppIcon(i,mAllAppsList.get(i));
      }
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}",0.8441814595660749
179851,"public void removeApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=findAppByComponent(mAllAppsList,item);
    if (index >= 0) {
      int ic=mRollo != null ? mRollo.mState.iconCount : 666;
      mAllAppsList.remove(index);
      if (mRollo != null && mRollo.mHasSurface) {
        mRollo.removeApp(index);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + item + ""String_Node_Str"");
    }
  }
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.saveAppsList();
  }
}","public void removeApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=findAppByComponent(mAllAppsList,item);
    if (index >= 0) {
      int ic=mRollo != null ? mRollo.mState.iconCount : 666;
      mAllAppsList.remove(index);
      if (mRollo != null) {
        mRollo.removeApp(index);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + item + ""String_Node_Str"");
    }
  }
  if (mRollo != null) {
    mRollo.saveAppsList();
  }
}",0.9523026315789472
179852,"/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
}","/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  createAppIconAllocations(index,item);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
  mRollo.mState.iconCount++;
}",0.9389920424403184
179853,"@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (mRollo != null && mRollo.mHasSurface) {
      gainFocus();
    }
 else {
      mShouldGainFocus=true;
    }
  }
 else {
    if (mRollo != null && mRollo.mHasSurface) {
      if (mArrowNavigation) {
        mRollo.clearSelectedIcon();
        mRollo.setHomeSelected(SELECTED_NONE);
        mRollo.mState.save();
        mArrowNavigation=false;
      }
    }
 else {
      mShouldGainFocus=false;
    }
  }
}","@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (mRollo != null && mRollo.mHasSurface) {
      gainFocus();
    }
 else {
      mShouldGainFocus=true;
    }
  }
 else {
    if (mRollo != null) {
      if (mArrowNavigation) {
        mRollo.clearSelectedIcon();
        mRollo.setHomeSelected(SELECTED_NONE);
        mRollo.mState.save();
        mArrowNavigation=false;
      }
    }
 else {
      mShouldGainFocus=false;
    }
  }
}",0.982484076433121
179854,"/** 
 * Call from the handler for ACTION_PACKAGE_ADDED, ACTION_PACKAGE_REMOVED and ACTION_PACKAGE_CHANGED.
 */
public void onReceive(Context context,Intent intent){
  context=mApp;
  final String packageName=intent.getData().getSchemeSpecificPart();
  ArrayList<ApplicationInfo> added=null;
  ArrayList<ApplicationInfo> removed=null;
  ArrayList<ApplicationInfo> modified=null;
  boolean update=false;
  boolean remove=false;
synchronized (mLock) {
    if (mBeforeFirstLoad) {
      return;
    }
    final String action=intent.getAction();
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (packageName == null || packageName.length() == 0) {
      return;
    }
    if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
      mAllAppsList.updatePackage(context,packageName);
      update=true;
    }
 else     if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
      if (!replacing) {
        mAllAppsList.removePackage(packageName);
        remove=true;
      }
    }
 else {
      if (!replacing) {
        mAllAppsList.addPackage(context,packageName);
      }
 else {
        mAllAppsList.updatePackage(context,packageName);
        update=true;
      }
    }
    if (mAllAppsList.added.size() > 0) {
      added=mAllAppsList.added;
      mAllAppsList.added=new ArrayList<ApplicationInfo>();
    }
    if (mAllAppsList.removed.size() > 0) {
      removed=mAllAppsList.removed;
      mAllAppsList.removed=new ArrayList<ApplicationInfo>();
      for (      ApplicationInfo info : removed) {
        AppInfoCache.remove(info.intent.getComponent());
      }
    }
    if (mAllAppsList.modified.size() > 0) {
      modified=mAllAppsList.modified;
      mAllAppsList.modified=new ArrayList<ApplicationInfo>();
    }
    final Callbacks callbacks=mCallbacks != null ? mCallbacks.get() : null;
    if (callbacks == null) {
      Log.w(TAG,""String_Node_Str"");
      return;
    }
    if (added != null) {
      final ArrayList<ApplicationInfo> addedFinal=added;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageAdded(addedFinal);
        }
      }
);
    }
    if (update || modified != null) {
      final ArrayList<ApplicationInfo> modifiedFinal=modified;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageUpdated(packageName,modifiedFinal);
        }
      }
);
    }
    if (remove || removed != null) {
      final ArrayList<ApplicationInfo> removedFinal=removed;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageRemoved(packageName,removedFinal);
        }
      }
);
    }
  }
}","/** 
 * Call from the handler for ACTION_PACKAGE_ADDED, ACTION_PACKAGE_REMOVED and ACTION_PACKAGE_CHANGED.
 */
public void onReceive(Context context,Intent intent){
  context=mApp;
  final String packageName=intent.getData().getSchemeSpecificPart();
  ArrayList<ApplicationInfo> added=null;
  ArrayList<ApplicationInfo> removed=null;
  ArrayList<ApplicationInfo> modified=null;
synchronized (mLock) {
    if (mBeforeFirstLoad) {
      return;
    }
    final String action=intent.getAction();
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (packageName == null || packageName.length() == 0) {
      return;
    }
    if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
      mAllAppsList.updatePackage(context,packageName);
    }
 else     if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
      if (!replacing) {
        mAllAppsList.removePackage(packageName);
      }
    }
 else {
      if (!replacing) {
        mAllAppsList.addPackage(context,packageName);
      }
 else {
        mAllAppsList.updatePackage(context,packageName);
      }
    }
    if (mAllAppsList.added.size() > 0) {
      added=mAllAppsList.added;
      mAllAppsList.added=new ArrayList<ApplicationInfo>();
    }
    if (mAllAppsList.removed.size() > 0) {
      removed=mAllAppsList.removed;
      mAllAppsList.removed=new ArrayList<ApplicationInfo>();
      for (      ApplicationInfo info : removed) {
        AppInfoCache.remove(info.intent.getComponent());
      }
    }
    if (mAllAppsList.modified.size() > 0) {
      modified=mAllAppsList.modified;
      mAllAppsList.modified=new ArrayList<ApplicationInfo>();
    }
    final Callbacks callbacks=mCallbacks != null ? mCallbacks.get() : null;
    if (callbacks == null) {
      Log.w(TAG,""String_Node_Str"");
      return;
    }
    if (added != null) {
      final ArrayList<ApplicationInfo> addedFinal=added;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageAdded(addedFinal);
        }
      }
);
    }
    if (modified != null) {
      final ArrayList<ApplicationInfo> modifiedFinal=modified;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageUpdated(packageName,modifiedFinal);
        }
      }
);
    }
    if (removed != null) {
      final ArrayList<ApplicationInfo> removedFinal=removed;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageRemoved(packageName,removedFinal);
        }
      }
);
    }
  }
}",0.9750820938767626
179855,"/** 
 * Call from the handler for ACTION_PACKAGE_ADDED, ACTION_PACKAGE_REMOVED and ACTION_PACKAGE_CHANGED.
 */
public void onReceive(Context context,Intent intent){
  context=mApp;
  final String packageName=intent.getData().getSchemeSpecificPart();
  ArrayList<ApplicationInfo> added=null;
  ArrayList<ApplicationInfo> removed=null;
  ArrayList<ApplicationInfo> modified=null;
  boolean update=false;
  boolean remove=false;
synchronized (mLock) {
    if (mBeforeFirstLoad) {
      return;
    }
    final String action=intent.getAction();
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (packageName == null || packageName.length() == 0) {
      return;
    }
    if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
      mAllAppsList.updatePackage(context,packageName);
      update=true;
    }
 else     if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
      if (!replacing) {
        mAllAppsList.removePackage(packageName);
        remove=true;
      }
    }
 else {
      if (!replacing) {
        mAllAppsList.addPackage(context,packageName);
      }
 else {
        mAllAppsList.updatePackage(context,packageName);
        update=true;
      }
    }
    if (mAllAppsList.added.size() > 0) {
      added=mAllAppsList.added;
      mAllAppsList.added=new ArrayList<ApplicationInfo>();
    }
    if (mAllAppsList.removed.size() > 0) {
      removed=mAllAppsList.removed;
      mAllAppsList.removed=new ArrayList<ApplicationInfo>();
      for (      ApplicationInfo info : removed) {
        AppInfoCache.remove(info.intent.getComponent());
      }
    }
    if (mAllAppsList.modified.size() > 0) {
      modified=mAllAppsList.modified;
      mAllAppsList.modified=new ArrayList<ApplicationInfo>();
    }
    final Callbacks callbacks=mCallbacks != null ? mCallbacks.get() : null;
    if (callbacks == null) {
      Log.w(TAG,""String_Node_Str"");
      return;
    }
    if (added != null) {
      final ArrayList<ApplicationInfo> addedFinal=added;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageAdded(addedFinal);
        }
      }
);
    }
    if (update || modified != null) {
      final ArrayList<ApplicationInfo> modifiedFinal=modified;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageUpdated(packageName,modifiedFinal);
        }
      }
);
    }
    if (remove || removed != null) {
      final ArrayList<ApplicationInfo> removedFinal=removed;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageRemoved(packageName,removedFinal);
        }
      }
);
    }
  }
}","/** 
 * Call from the handler for ACTION_PACKAGE_ADDED, ACTION_PACKAGE_REMOVED and ACTION_PACKAGE_CHANGED.
 */
public void onReceive(Context context,Intent intent){
  context=mApp;
  final String packageName=intent.getData().getSchemeSpecificPart();
  ArrayList<ApplicationInfo> added=null;
  ArrayList<ApplicationInfo> removed=null;
  ArrayList<ApplicationInfo> modified=null;
synchronized (mLock) {
    if (mBeforeFirstLoad) {
      return;
    }
    final String action=intent.getAction();
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (packageName == null || packageName.length() == 0) {
      return;
    }
    if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
      mAllAppsList.updatePackage(context,packageName);
    }
 else     if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
      if (!replacing) {
        mAllAppsList.removePackage(packageName);
      }
    }
 else {
      if (!replacing) {
        mAllAppsList.addPackage(context,packageName);
      }
 else {
        mAllAppsList.updatePackage(context,packageName);
      }
    }
    if (mAllAppsList.added.size() > 0) {
      added=mAllAppsList.added;
      mAllAppsList.added=new ArrayList<ApplicationInfo>();
    }
    if (mAllAppsList.removed.size() > 0) {
      removed=mAllAppsList.removed;
      mAllAppsList.removed=new ArrayList<ApplicationInfo>();
      for (      ApplicationInfo info : removed) {
        AppInfoCache.remove(info.intent.getComponent());
      }
    }
    if (mAllAppsList.modified.size() > 0) {
      modified=mAllAppsList.modified;
      mAllAppsList.modified=new ArrayList<ApplicationInfo>();
    }
    final Callbacks callbacks=mCallbacks != null ? mCallbacks.get() : null;
    if (callbacks == null) {
      Log.w(TAG,""String_Node_Str"");
      return;
    }
    if (added != null) {
      final ArrayList<ApplicationInfo> addedFinal=added;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageAdded(addedFinal);
        }
      }
);
    }
    if (modified != null) {
      final ArrayList<ApplicationInfo> modifiedFinal=modified;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageUpdated(packageName,modifiedFinal);
        }
      }
);
    }
    if (removed != null) {
      final ArrayList<ApplicationInfo> removedFinal=removed;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageRemoved(packageName,removedFinal);
        }
      }
);
    }
  }
}",0.9750820938767626
179856,"/** 
 * Call from the handler for ACTION_PACKAGE_ADDED, ACTION_PACKAGE_REMOVED and ACTION_PACKAGE_CHANGED.
 */
public void onReceive(Context context,Intent intent){
  context=mApp;
  final String packageName=intent.getData().getSchemeSpecificPart();
  ArrayList<ApplicationInfo> added=null;
  ArrayList<ApplicationInfo> removed=null;
  ArrayList<ApplicationInfo> modified=null;
  boolean update=false;
  boolean remove=false;
synchronized (mLock) {
    if (mBeforeFirstLoad) {
      return;
    }
    final String action=intent.getAction();
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (packageName == null || packageName.length() == 0) {
      return;
    }
    if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
      mAllAppsList.updatePackage(context,packageName);
      update=true;
    }
 else     if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
      if (!replacing) {
        mAllAppsList.removePackage(packageName);
        remove=true;
      }
    }
 else {
      if (!replacing) {
        mAllAppsList.addPackage(context,packageName);
      }
 else {
        mAllAppsList.updatePackage(context,packageName);
        update=true;
      }
    }
    if (mAllAppsList.added.size() > 0) {
      added=mAllAppsList.added;
      mAllAppsList.added=new ArrayList<ApplicationInfo>();
    }
    if (mAllAppsList.removed.size() > 0) {
      removed=mAllAppsList.removed;
      mAllAppsList.removed=new ArrayList<ApplicationInfo>();
      for (      ApplicationInfo info : removed) {
        AppInfoCache.remove(info.intent.getComponent());
      }
    }
    if (mAllAppsList.modified.size() > 0) {
      modified=mAllAppsList.modified;
      mAllAppsList.modified=new ArrayList<ApplicationInfo>();
    }
    final Callbacks callbacks=mCallbacks != null ? mCallbacks.get() : null;
    if (callbacks == null) {
      Log.w(TAG,""String_Node_Str"");
      return;
    }
    if (added != null) {
      final ArrayList<ApplicationInfo> addedFinal=added;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageAdded(addedFinal);
        }
      }
);
    }
    if (update || modified != null) {
      final ArrayList<ApplicationInfo> modifiedFinal=modified;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageUpdated(packageName,modifiedFinal);
        }
      }
);
    }
    if (remove || removed != null) {
      final ArrayList<ApplicationInfo> removedFinal=removed;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageRemoved(packageName,removedFinal);
        }
      }
);
    }
  }
}","/** 
 * Call from the handler for ACTION_PACKAGE_ADDED, ACTION_PACKAGE_REMOVED and ACTION_PACKAGE_CHANGED.
 */
public void onReceive(Context context,Intent intent){
  context=mApp;
  final String packageName=intent.getData().getSchemeSpecificPart();
  ArrayList<ApplicationInfo> added=null;
  ArrayList<ApplicationInfo> removed=null;
  ArrayList<ApplicationInfo> modified=null;
synchronized (mLock) {
    if (mBeforeFirstLoad) {
      return;
    }
    final String action=intent.getAction();
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (packageName == null || packageName.length() == 0) {
      return;
    }
    if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
      mAllAppsList.updatePackage(context,packageName);
    }
 else     if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
      if (!replacing) {
        mAllAppsList.removePackage(packageName);
      }
    }
 else {
      if (!replacing) {
        mAllAppsList.addPackage(context,packageName);
      }
 else {
        mAllAppsList.updatePackage(context,packageName);
      }
    }
    if (mAllAppsList.added.size() > 0) {
      added=mAllAppsList.added;
      mAllAppsList.added=new ArrayList<ApplicationInfo>();
    }
    if (mAllAppsList.removed.size() > 0) {
      removed=mAllAppsList.removed;
      mAllAppsList.removed=new ArrayList<ApplicationInfo>();
      for (      ApplicationInfo info : removed) {
        AppInfoCache.remove(info.intent.getComponent());
      }
    }
    if (mAllAppsList.modified.size() > 0) {
      modified=mAllAppsList.modified;
      mAllAppsList.modified=new ArrayList<ApplicationInfo>();
    }
    final Callbacks callbacks=mCallbacks != null ? mCallbacks.get() : null;
    if (callbacks == null) {
      Log.w(TAG,""String_Node_Str"");
      return;
    }
    if (added != null) {
      final ArrayList<ApplicationInfo> addedFinal=added;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageAdded(addedFinal);
        }
      }
);
    }
    if (modified != null) {
      final ArrayList<ApplicationInfo> modifiedFinal=modified;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageUpdated(packageName,modifiedFinal);
        }
      }
);
    }
    if (removed != null) {
      final ArrayList<ApplicationInfo> removedFinal=removed;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageRemoved(packageName,removedFinal);
        }
      }
);
    }
  }
}",0.9750820938767626
179857,"/** 
 * Call from the handler for ACTION_PACKAGE_ADDED, ACTION_PACKAGE_REMOVED and ACTION_PACKAGE_CHANGED.
 */
public void onReceive(Context context,Intent intent){
  context=mApp;
  final String packageName=intent.getData().getSchemeSpecificPart();
  ArrayList<ApplicationInfo> added=null;
  ArrayList<ApplicationInfo> removed=null;
  ArrayList<ApplicationInfo> modified=null;
  boolean update=false;
  boolean remove=false;
synchronized (mLock) {
    if (mBeforeFirstLoad) {
      return;
    }
    final String action=intent.getAction();
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (packageName == null || packageName.length() == 0) {
      return;
    }
    if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
      mAllAppsList.updatePackage(context,packageName);
      update=true;
    }
 else     if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
      if (!replacing) {
        mAllAppsList.removePackage(packageName);
        remove=true;
      }
    }
 else {
      if (!replacing) {
        mAllAppsList.addPackage(context,packageName);
      }
 else {
        mAllAppsList.updatePackage(context,packageName);
        update=true;
      }
    }
    if (mAllAppsList.added.size() > 0) {
      added=mAllAppsList.added;
      mAllAppsList.added=new ArrayList<ApplicationInfo>();
    }
    if (mAllAppsList.removed.size() > 0) {
      removed=mAllAppsList.removed;
      mAllAppsList.removed=new ArrayList<ApplicationInfo>();
      for (      ApplicationInfo info : removed) {
        AppInfoCache.remove(info.intent.getComponent());
      }
    }
    if (mAllAppsList.modified.size() > 0) {
      modified=mAllAppsList.modified;
      mAllAppsList.modified=new ArrayList<ApplicationInfo>();
    }
    final Callbacks callbacks=mCallbacks != null ? mCallbacks.get() : null;
    if (callbacks == null) {
      Log.w(TAG,""String_Node_Str"");
      return;
    }
    if (added != null) {
      final ArrayList<ApplicationInfo> addedFinal=added;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageAdded(addedFinal);
        }
      }
);
    }
    if (update || modified != null) {
      final ArrayList<ApplicationInfo> modifiedFinal=modified;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageUpdated(packageName,modifiedFinal);
        }
      }
);
    }
    if (remove || removed != null) {
      final ArrayList<ApplicationInfo> removedFinal=removed;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageRemoved(packageName,removedFinal);
        }
      }
);
    }
  }
}","/** 
 * Call from the handler for ACTION_PACKAGE_ADDED, ACTION_PACKAGE_REMOVED and ACTION_PACKAGE_CHANGED.
 */
public void onReceive(Context context,Intent intent){
  context=mApp;
  final String packageName=intent.getData().getSchemeSpecificPart();
  ArrayList<ApplicationInfo> added=null;
  ArrayList<ApplicationInfo> removed=null;
  ArrayList<ApplicationInfo> modified=null;
synchronized (mLock) {
    if (mBeforeFirstLoad) {
      return;
    }
    final String action=intent.getAction();
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (packageName == null || packageName.length() == 0) {
      return;
    }
    if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
      mAllAppsList.updatePackage(context,packageName);
    }
 else     if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
      if (!replacing) {
        mAllAppsList.removePackage(packageName);
      }
    }
 else {
      if (!replacing) {
        mAllAppsList.addPackage(context,packageName);
      }
 else {
        mAllAppsList.updatePackage(context,packageName);
      }
    }
    if (mAllAppsList.added.size() > 0) {
      added=mAllAppsList.added;
      mAllAppsList.added=new ArrayList<ApplicationInfo>();
    }
    if (mAllAppsList.removed.size() > 0) {
      removed=mAllAppsList.removed;
      mAllAppsList.removed=new ArrayList<ApplicationInfo>();
      for (      ApplicationInfo info : removed) {
        AppInfoCache.remove(info.intent.getComponent());
      }
    }
    if (mAllAppsList.modified.size() > 0) {
      modified=mAllAppsList.modified;
      mAllAppsList.modified=new ArrayList<ApplicationInfo>();
    }
    final Callbacks callbacks=mCallbacks != null ? mCallbacks.get() : null;
    if (callbacks == null) {
      Log.w(TAG,""String_Node_Str"");
      return;
    }
    if (added != null) {
      final ArrayList<ApplicationInfo> addedFinal=added;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageAdded(addedFinal);
        }
      }
);
    }
    if (modified != null) {
      final ArrayList<ApplicationInfo> modifiedFinal=modified;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageUpdated(packageName,modifiedFinal);
        }
      }
);
    }
    if (removed != null) {
      final ArrayList<ApplicationInfo> removedFinal=removed;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageRemoved(packageName,removedFinal);
        }
      }
);
    }
  }
}",0.9750820938767626
179858,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    boolean alreadyOnHome=((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT);
    boolean allAppsVisible=isAllAppsVisible();
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen(alreadyOnHome && !allAppsVisible);
    }
    closeAllApps(alreadyOnHome && allAppsVisible);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}",0.8203991130820399
179859,"void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}","void closeSystemDialogs(){
  closeAllApps(true);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}",0.9872958257713248
179860,"void moveToDefaultScreen(){
  snapToScreen(mDefaultScreen);
  getChildAt(mDefaultScreen).requestFocus();
}","void moveToDefaultScreen(boolean animate){
  snapToScreen(mDefaultScreen,animate);
  getChildAt(mDefaultScreen).requestFocus();
}",0.902127659574468
179861,"void snapToScreen(int whichScreen){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta * 300;
  awakenScrollBars(duration);
  mScroller.startScroll(mScrollX,0,delta,0,duration);
  invalidate();
}","void snapToScreen(int whichScreen,boolean animate){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta * 300;
  awakenScrollBars(duration);
  mScroller.startScroll(mScrollX,0,delta,0,animate ? duration : 1);
  invalidate();
}",0.9696169088507266
179862,"@Override public void onReceive(Context context,Intent intent){
  closeSystemDialogs();
}","@Override public void onReceive(Context context,Intent intent){
  closeSystemDialogs();
  String reason=intent.getStringExtra(""String_Node_Str"");
  if (!""String_Node_Str"".equals(reason)) {
    boolean animate=true;
    closeAllApps(animate);
  }
}",0.5297619047619048
179863,"void closeSystemDialogs(){
  closeAllApps(true);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}","void closeSystemDialogs(){
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}",0.9583333333333334
179864,"void closeAllApps(boolean animated){
  if (mAllAppsGrid.isVisible()) {
    mAllAppsGrid.zoom(0.0f,animated);
    mAllAppsGrid.setFocusable(false);
    mWorkspace.getChildAt(mWorkspace.getCurrentScreen()).requestFocus();
    mWorkspace.startFading(true);
  }
}","/** 
 * Things to test when changing this code: - Home from workspace - from center screen - from other screens - Home from all apps - Back from all apps - Launch app from workspace and quit - with back - with home - Launch app from all apps and quit - with back - with home - On workspace, long press power and go back - with back - with home - On all apps, long press power and go back - with back - with home - On workspace, power off - On all apps, power off
 */
void closeAllApps(boolean animated){
  if (mAllAppsGrid.isVisible()) {
    mAllAppsGrid.zoom(0.0f,animated);
    mAllAppsGrid.setFocusable(false);
    mWorkspace.getChildAt(mWorkspace.getCurrentScreen()).requestFocus();
    mWorkspace.startFading(true);
  }
}",0.5258883248730964
179865,"@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
      return true;
case KeyEvent.KEYCODE_HOME:
    return true;
case KeyEvent.KEYCODE_VOLUME_DOWN:
  if (SystemProperties.getInt(""String_Node_Str"",0) != 0) {
    dumpState();
    return true;
  }
break;
}
}
 else if (event.getAction() == KeyEvent.ACTION_UP) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
if (!event.isCanceled()) {
mWorkspace.dispatchKeyEvent(event);
if (isAllAppsVisible()) {
  closeAllApps(true);
}
 else {
  closeFolder();
}
dismissPreview(mPreviousView);
dismissPreview(mNextView);
}
return true;
case KeyEvent.KEYCODE_HOME:
return true;
}
}
return super.dispatchKeyEvent(event);
}","@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
      return true;
case KeyEvent.KEYCODE_HOME:
    return true;
case KeyEvent.KEYCODE_VOLUME_DOWN:
  if (SystemProperties.getInt(""String_Node_Str"",0) != 0) {
    dumpState();
    return true;
  }
break;
}
}
 else if (event.getAction() == KeyEvent.ACTION_UP) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
if (event.isTracking() && !event.isCanceled()) {
mWorkspace.dispatchKeyEvent(event);
if (isAllAppsVisible()) {
  closeAllApps(true);
}
 else {
  closeFolder();
}
dismissPreview(mPreviousView);
dismissPreview(mNextView);
}
return true;
case KeyEvent.KEYCODE_HOME:
return true;
}
}
return super.dispatchKeyEvent(event);
}",0.986146095717884
179866,"private void bindAllApps(){
synchronized (mLock) {
    final ArrayList<ApplicationInfo> results=mAllAppsList.added;
    mAllAppsList.added=new ArrayList<ApplicationInfo>();
    mHandler.post(new Runnable(){
      public void run(){
        final long t=SystemClock.uptimeMillis();
        final int count=results.size();
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindAllApplications(results);
        }
        if (DEBUG_LOADERS) {
          Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ (SystemClock.uptimeMillis() - t)+ ""String_Node_Str"");
        }
      }
    }
);
  }
}","private void bindAllApps(){
synchronized (mLock) {
    final ArrayList<ApplicationInfo> results=(ArrayList<ApplicationInfo>)mAllAppsList.data.clone();
    mAllAppsList.added=new ArrayList<ApplicationInfo>();
    mHandler.post(new Runnable(){
      public void run(){
        final long t=SystemClock.uptimeMillis();
        final int count=results.size();
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindAllApplications(results);
        }
        if (DEBUG_LOADERS) {
          Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ (SystemClock.uptimeMillis() - t)+ ""String_Node_Str"");
        }
      }
    }
);
  }
}",0.9462528387585164
179867,"private void bindAllApps(){
synchronized (mLock) {
    final ArrayList<ApplicationInfo> results=mAllAppsList.added;
    mAllAppsList.added=new ArrayList<ApplicationInfo>();
    mHandler.post(new Runnable(){
      public void run(){
        final long t=SystemClock.uptimeMillis();
        final int count=results.size();
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindAllApplications(results);
        }
        if (DEBUG_LOADERS) {
          Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ (SystemClock.uptimeMillis() - t)+ ""String_Node_Str"");
        }
      }
    }
);
  }
}","private void bindAllApps(){
synchronized (mLock) {
    final ArrayList<ApplicationInfo> results=(ArrayList<ApplicationInfo>)mAllAppsList.data.clone();
    mAllAppsList.added=new ArrayList<ApplicationInfo>();
    mHandler.post(new Runnable(){
      public void run(){
        final long t=SystemClock.uptimeMillis();
        final int count=results.size();
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindAllApplications(results);
        }
        if (DEBUG_LOADERS) {
          Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ (SystemClock.uptimeMillis() - t)+ ""String_Node_Str"");
        }
      }
    }
);
  }
}",0.9462528387585164
179868,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mWaitingForResult=false;
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}",0.974716652136007
179869,"void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
}","void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}",0.9447619047619048
179870,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mWaitingForResult=false;
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}",0.974716652136007
179871,"void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
}","void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}",0.9447619047619048
179872,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mWaitingForResult=false;
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}",0.974716652136007
179873,"void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
}","void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}",0.9447619047619048
179874,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mWaitingForResult=false;
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}",0.974716652136007
179875,"void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
}","void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}",0.9447619047619048
179876,"@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
      return true;
case KeyEvent.KEYCODE_HOME:
    return true;
case KeyEvent.KEYCODE_VOLUME_DOWN:
  if (SystemProperties.getInt(""String_Node_Str"",0) != 0) {
    dumpState();
    return true;
  }
break;
}
}
 else if (event.getAction() == KeyEvent.ACTION_UP) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
if (!event.isCanceled()) {
mWorkspace.dispatchKeyEvent(event);
if (isAllAppsVisible()) {
  closeAllApps(true);
}
 else {
  closeFolder();
}
dismissPreview(mPreviousView);
dismissPreview(mNextView);
}
return true;
case KeyEvent.KEYCODE_HOME:
return true;
}
}
return super.dispatchKeyEvent(event);
}","@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
      return true;
case KeyEvent.KEYCODE_HOME:
    return true;
case KeyEvent.KEYCODE_VOLUME_DOWN:
  if (SystemProperties.getInt(""String_Node_Str"",0) != 0) {
    dumpState();
    return true;
  }
break;
}
}
 else if (event.getAction() == KeyEvent.ACTION_UP) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
if (event.isTracking() && !event.isCanceled()) {
mWorkspace.dispatchKeyEvent(event);
if (isAllAppsVisible()) {
  closeAllApps(true);
}
 else {
  closeFolder();
}
dismissPreview(mPreviousView);
dismissPreview(mNextView);
}
return true;
case KeyEvent.KEYCODE_HOME:
return true;
}
}
return super.dispatchKeyEvent(event);
}",0.986146095717884
179877,"private void bindAllApps(){
synchronized (mLock) {
    final ArrayList<ApplicationInfo> results=mAllAppsList.added;
    mAllAppsList.added=new ArrayList<ApplicationInfo>();
    mHandler.post(new Runnable(){
      public void run(){
        final long t=SystemClock.uptimeMillis();
        final int count=results.size();
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindAllApplications(results);
        }
        if (DEBUG_LOADERS) {
          Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ (SystemClock.uptimeMillis() - t)+ ""String_Node_Str"");
        }
      }
    }
);
  }
}","private void bindAllApps(){
synchronized (mLock) {
    final ArrayList<ApplicationInfo> results=(ArrayList<ApplicationInfo>)mAllAppsList.data.clone();
    mAllAppsList.added=new ArrayList<ApplicationInfo>();
    mHandler.post(new Runnable(){
      public void run(){
        final long t=SystemClock.uptimeMillis();
        final int count=results.size();
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindAllApplications(results);
        }
        if (DEBUG_LOADERS) {
          Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ (SystemClock.uptimeMillis() - t)+ ""String_Node_Str"");
        }
      }
    }
);
  }
}",0.9462528387585164
179878,"private void bindAllApps(){
synchronized (mLock) {
    final ArrayList<ApplicationInfo> results=mAllAppsList.added;
    mAllAppsList.added=new ArrayList<ApplicationInfo>();
    mHandler.post(new Runnable(){
      public void run(){
        final long t=SystemClock.uptimeMillis();
        final int count=results.size();
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindAllApplications(results);
        }
        if (DEBUG_LOADERS) {
          Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ (SystemClock.uptimeMillis() - t)+ ""String_Node_Str"");
        }
      }
    }
);
  }
}","private void bindAllApps(){
synchronized (mLock) {
    final ArrayList<ApplicationInfo> results=(ArrayList<ApplicationInfo>)mAllAppsList.data.clone();
    mAllAppsList.added=new ArrayList<ApplicationInfo>();
    mHandler.post(new Runnable(){
      public void run(){
        final long t=SystemClock.uptimeMillis();
        final int count=results.size();
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindAllApplications(results);
        }
        if (DEBUG_LOADERS) {
          Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ (SystemClock.uptimeMillis() - t)+ ""String_Node_Str"");
        }
      }
    }
);
  }
}",0.9462528387585164
179879,"@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
      return true;
case KeyEvent.KEYCODE_HOME:
    return true;
case KeyEvent.KEYCODE_VOLUME_DOWN:
  if (SystemProperties.getInt(""String_Node_Str"",0) != 0) {
    dumpState();
    return true;
  }
break;
}
}
 else if (event.getAction() == KeyEvent.ACTION_UP) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
if (!event.isCanceled()) {
mWorkspace.dispatchKeyEvent(event);
if (isAllAppsVisible()) {
  closeAllApps(true);
}
 else {
  closeFolder();
}
dismissPreview(mPreviousView);
dismissPreview(mNextView);
}
return true;
case KeyEvent.KEYCODE_HOME:
return true;
}
}
return super.dispatchKeyEvent(event);
}","@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
      return true;
case KeyEvent.KEYCODE_HOME:
    return true;
case KeyEvent.KEYCODE_VOLUME_DOWN:
  if (SystemProperties.getInt(""String_Node_Str"",0) != 0) {
    dumpState();
    return true;
  }
break;
}
}
 else if (event.getAction() == KeyEvent.ACTION_UP) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
if (event.isTracking() && !event.isCanceled()) {
mWorkspace.dispatchKeyEvent(event);
if (isAllAppsVisible()) {
  closeAllApps(true);
}
 else {
  closeFolder();
}
dismissPreview(mPreviousView);
dismissPreview(mNextView);
}
return true;
case KeyEvent.KEYCODE_HOME:
return true;
}
}
return super.dispatchKeyEvent(event);
}",0.986146095717884
179880,"@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
      return true;
case KeyEvent.KEYCODE_HOME:
    return true;
case KeyEvent.KEYCODE_VOLUME_DOWN:
  if (SystemProperties.getInt(""String_Node_Str"",0) != 0) {
    dumpState();
    return true;
  }
break;
}
}
 else if (event.getAction() == KeyEvent.ACTION_UP) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
if (!event.isCanceled()) {
mWorkspace.dispatchKeyEvent(event);
if (isAllAppsVisible()) {
  closeAllApps(true);
}
 else {
  closeFolder();
}
dismissPreview(mPreviousView);
dismissPreview(mNextView);
}
return true;
case KeyEvent.KEYCODE_HOME:
return true;
}
}
return super.dispatchKeyEvent(event);
}","@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
      return true;
case KeyEvent.KEYCODE_HOME:
    return true;
case KeyEvent.KEYCODE_VOLUME_DOWN:
  if (SystemProperties.getInt(""String_Node_Str"",0) != 0) {
    dumpState();
    return true;
  }
break;
}
}
 else if (event.getAction() == KeyEvent.ACTION_UP) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
if (event.isTracking() && !event.isCanceled()) {
mWorkspace.dispatchKeyEvent(event);
if (isAllAppsVisible()) {
  closeAllApps(true);
}
 else {
  closeFolder();
}
dismissPreview(mPreviousView);
dismissPreview(mNextView);
}
return true;
case KeyEvent.KEYCODE_HOME:
return true;
}
}
return super.dispatchKeyEvent(event);
}",0.986146095717884
179881,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    boolean alreadyOnHome=((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT);
    boolean allAppsVisible=isAllAppsVisible();
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen(alreadyOnHome && !allAppsVisible);
    }
    closeAllApps(alreadyOnHome && allAppsVisible);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}",0.8203991130820399
179882,"void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}","void closeSystemDialogs(){
  closeAllApps(true);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}",0.9872958257713248
179883,"void moveToDefaultScreen(){
  snapToScreen(mDefaultScreen);
  getChildAt(mDefaultScreen).requestFocus();
}","void moveToDefaultScreen(boolean animate){
  snapToScreen(mDefaultScreen,animate);
  getChildAt(mDefaultScreen).requestFocus();
}",0.902127659574468
179884,"void snapToScreen(int whichScreen){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta * 300;
  awakenScrollBars(duration);
  mScroller.startScroll(mScrollX,0,delta,0,duration);
  invalidate();
}","void snapToScreen(int whichScreen,boolean animate){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta * 300;
  awakenScrollBars(duration);
  mScroller.startScroll(mScrollX,0,delta,0,animate ? duration : 1);
  invalidate();
}",0.9696169088507266
179885,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    boolean alreadyOnHome=((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT);
    boolean allAppsVisible=isAllAppsVisible();
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen(alreadyOnHome && !allAppsVisible);
    }
    closeAllApps(alreadyOnHome && allAppsVisible);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}",0.8203991130820399
179886,"void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}","void closeSystemDialogs(){
  closeAllApps(true);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}",0.9872958257713248
179887,"void moveToDefaultScreen(){
  snapToScreen(mDefaultScreen);
  getChildAt(mDefaultScreen).requestFocus();
}","void moveToDefaultScreen(boolean animate){
  snapToScreen(mDefaultScreen,animate);
  getChildAt(mDefaultScreen).requestFocus();
}",0.902127659574468
179888,"void snapToScreen(int whichScreen){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta * 300;
  awakenScrollBars(duration);
  mScroller.startScroll(mScrollX,0,delta,0,duration);
  invalidate();
}","void snapToScreen(int whichScreen,boolean animate){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta * 300;
  awakenScrollBars(duration);
  mScroller.startScroll(mScrollX,0,delta,0,animate ? duration : 1);
  invalidate();
}",0.9696169088507266
179889,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    boolean alreadyOnHome=((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT);
    boolean allAppsVisible=isAllAppsVisible();
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen(alreadyOnHome && !allAppsVisible);
    }
    closeAllApps(alreadyOnHome && allAppsVisible);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}",0.8203991130820399
179890,"void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}","void closeSystemDialogs(){
  closeAllApps(true);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}",0.9872958257713248
179891,"void moveToDefaultScreen(){
  snapToScreen(mDefaultScreen);
  getChildAt(mDefaultScreen).requestFocus();
}","void moveToDefaultScreen(boolean animate){
  snapToScreen(mDefaultScreen,animate);
  getChildAt(mDefaultScreen).requestFocus();
}",0.902127659574468
179892,"void snapToScreen(int whichScreen){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta * 300;
  awakenScrollBars(duration);
  mScroller.startScroll(mScrollX,0,delta,0,duration);
  invalidate();
}","void snapToScreen(int whichScreen,boolean animate){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta * 300;
  awakenScrollBars(duration);
  mScroller.startScroll(mScrollX,0,delta,0,animate ? duration : 1);
  invalidate();
}",0.9696169088507266
179893,"public boolean onLongClick(View v){
switch (v.getId()) {
case R.id.previous_screen:
    showPreviousPreview(v);
  return true;
case R.id.next_screen:
showNextPreview(v);
return true;
}
if (isWorkspaceLocked()) {
return false;
}
if (!(v instanceof CellLayout)) {
v=(View)v.getParent();
}
CellLayout.CellInfo cellInfo=(CellLayout.CellInfo)v.getTag();
if (cellInfo == null) {
return true;
}
if (mWorkspace.allowLongPress()) {
if (cellInfo.cell == null) {
if (cellInfo.valid) {
mWorkspace.setAllowLongPress(false);
showAddDialog(cellInfo);
}
}
 else {
if (!(cellInfo.cell instanceof Folder)) {
mWorkspace.startDrag(cellInfo);
}
}
}
return true;
}","public boolean onLongClick(View v){
switch (v.getId()) {
case R.id.previous_screen:
    if (!isAllAppsVisible()) {
      mWorkspace.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);
      showPreviousPreview(v);
    }
  return true;
case R.id.next_screen:
if (!isAllAppsVisible()) {
  mWorkspace.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);
  showNextPreview(v);
}
return true;
}
if (isWorkspaceLocked()) {
return false;
}
if (!(v instanceof CellLayout)) {
v=(View)v.getParent();
}
CellLayout.CellInfo cellInfo=(CellLayout.CellInfo)v.getTag();
if (cellInfo == null) {
return true;
}
if (mWorkspace.allowLongPress()) {
if (cellInfo.cell == null) {
if (cellInfo.valid) {
mWorkspace.setAllowLongPress(false);
showAddDialog(cellInfo);
}
}
 else {
if (!(cellInfo.cell instanceof Folder)) {
mWorkspace.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);
mWorkspace.startDrag(cellInfo);
}
}
}
return true;
}",0.7469458987783595
179894,"/** 
 * Finds all the views we need and configure them properly.
 */
private void setupViews(){
  DragController dragController=mDragController;
  DragLayer dragLayer=(DragLayer)findViewById(R.id.drag_layer);
  dragLayer.setDragController(dragController);
  mAllAppsGrid=(AllAppsView)dragLayer.findViewById(R.id.all_apps_view);
  mAllAppsGrid.setLauncher(this);
  mAllAppsGrid.setDragController(dragController);
  mAllAppsGrid.setWillNotDraw(false);
  mAllAppsGrid.setFocusable(false);
  mWorkspace=(Workspace)dragLayer.findViewById(R.id.workspace);
  final Workspace workspace=mWorkspace;
  DeleteZone deleteZone=(DeleteZone)dragLayer.findViewById(R.id.delete_zone);
  mDeleteZone=deleteZone;
  mHandleView=(HandleView)findViewById(R.id.all_apps_button);
  mHandleView.setLauncher(this);
  mHandleView.setOnClickListener(this);
  mPreviousView=(ImageView)dragLayer.findViewById(R.id.previous_screen);
  mNextView=(ImageView)dragLayer.findViewById(R.id.next_screen);
  Drawable previous=mPreviousView.getDrawable();
  Drawable next=mNextView.getDrawable();
  mWorkspace.setIndicators(previous,next);
  mPreviousView.setOnLongClickListener(this);
  mNextView.setOnLongClickListener(this);
  workspace.setOnLongClickListener(this);
  workspace.setDragController(dragController);
  workspace.setLauncher(this);
  deleteZone.setLauncher(this);
  deleteZone.setDragController(dragController);
  deleteZone.setHandle(mHandleView);
  dragController.setDragScoller(workspace);
  dragController.setDragListener(deleteZone);
  dragController.setScrollView(dragLayer);
  dragController.addDropTarget(workspace);
  dragController.addDropTarget(deleteZone);
}","/** 
 * Finds all the views we need and configure them properly.
 */
private void setupViews(){
  DragController dragController=mDragController;
  DragLayer dragLayer=(DragLayer)findViewById(R.id.drag_layer);
  dragLayer.setDragController(dragController);
  mAllAppsGrid=(AllAppsView)dragLayer.findViewById(R.id.all_apps_view);
  mAllAppsGrid.setLauncher(this);
  mAllAppsGrid.setDragController(dragController);
  mAllAppsGrid.setWillNotDraw(false);
  mAllAppsGrid.setFocusable(false);
  mWorkspace=(Workspace)dragLayer.findViewById(R.id.workspace);
  final Workspace workspace=mWorkspace;
  DeleteZone deleteZone=(DeleteZone)dragLayer.findViewById(R.id.delete_zone);
  mDeleteZone=deleteZone;
  mHandleView=(HandleView)findViewById(R.id.all_apps_button);
  mHandleView.setLauncher(this);
  mHandleView.setOnClickListener(this);
  mPreviousView=(ImageView)dragLayer.findViewById(R.id.previous_screen);
  mNextView=(ImageView)dragLayer.findViewById(R.id.next_screen);
  Drawable previous=mPreviousView.getDrawable();
  Drawable next=mNextView.getDrawable();
  mWorkspace.setIndicators(previous,next);
  mPreviousView.setHapticFeedbackEnabled(false);
  mPreviousView.setOnLongClickListener(this);
  mNextView.setHapticFeedbackEnabled(false);
  mNextView.setOnLongClickListener(this);
  workspace.setOnLongClickListener(this);
  workspace.setDragController(dragController);
  workspace.setLauncher(this);
  deleteZone.setLauncher(this);
  deleteZone.setDragController(dragController);
  deleteZone.setHandle(mHandleView);
  dragController.setDragScoller(workspace);
  dragController.setDragListener(deleteZone);
  dragController.setScrollView(dragLayer);
  dragController.addDropTarget(workspace);
  dragController.addDropTarget(deleteZone);
}",0.9722386296515062
179895,"/** 
 * Adds the specified child in the specified screen. The position and dimension of the child are defined by x, y, spanX and spanY.
 * @param child The child to add in one of the workspace's screens.
 * @param screen The screen in which to add the child.
 * @param spanX The number of cells spanned horizontally by the child.
 * @param spanY The number of cells spanned vertically by the child.
 */
void fitInScreen(View child,int screen,int spanX,int spanY){
  if (screen < 0 || screen >= getChildCount()) {
    throw new IllegalStateException(""String_Node_Str"" + getChildCount());
  }
  final CellLayout group=(CellLayout)getChildAt(screen);
  boolean vacant=group.getVacantCell(mTempCell,spanX,spanY);
  if (vacant) {
    group.addView(child,new CellLayout.LayoutParams(mTempCell[0],mTempCell[1],spanX,spanY));
    child.setOnLongClickListener(mLongClickListener);
    if (!(child instanceof Folder)) {
      child.setOnLongClickListener(mLongClickListener);
    }
    if (child instanceof DropTarget) {
      mDragController.addDropTarget((DropTarget)child);
    }
  }
}","/** 
 * Adds the specified child in the specified screen. The position and dimension of the child are defined by x, y, spanX and spanY.
 * @param child The child to add in one of the workspace's screens.
 * @param screen The screen in which to add the child.
 * @param spanX The number of cells spanned horizontally by the child.
 * @param spanY The number of cells spanned vertically by the child.
 */
void fitInScreen(View child,int screen,int spanX,int spanY){
  if (screen < 0 || screen >= getChildCount()) {
    throw new IllegalStateException(""String_Node_Str"" + getChildCount());
  }
  final CellLayout group=(CellLayout)getChildAt(screen);
  boolean vacant=group.getVacantCell(mTempCell,spanX,spanY);
  if (vacant) {
    group.addView(child,new CellLayout.LayoutParams(mTempCell[0],mTempCell[1],spanX,spanY));
    child.setHapticFeedbackEnabled(false);
    child.setOnLongClickListener(mLongClickListener);
    if (child instanceof DropTarget) {
      mDragController.addDropTarget((DropTarget)child);
    }
  }
}",0.8613625535969509
179896,"/** 
 * Adds the specified child in the specified screen. The position and dimension of the child are defined by x, y, spanX and spanY.
 * @param child The child to add in one of the workspace's screens.
 * @param screen The screen in which to add the child.
 * @param x The X position of the child in the screen's grid.
 * @param y The Y position of the child in the screen's grid.
 * @param spanX The number of cells spanned horizontally by the child.
 * @param spanY The number of cells spanned vertically by the child.
 * @param insert When true, the child is inserted at the beginning of the children list.
 */
void addInScreen(View child,int screen,int x,int y,int spanX,int spanY,boolean insert){
  if (screen < 0 || screen >= getChildCount()) {
    throw new IllegalStateException(""String_Node_Str"" + getChildCount());
  }
  clearVacantCache();
  final CellLayout group=(CellLayout)getChildAt(screen);
  CellLayout.LayoutParams lp=(CellLayout.LayoutParams)child.getLayoutParams();
  if (lp == null) {
    lp=new CellLayout.LayoutParams(x,y,spanX,spanY);
  }
 else {
    lp.cellX=x;
    lp.cellY=y;
    lp.cellHSpan=spanX;
    lp.cellVSpan=spanY;
  }
  group.addView(child,insert ? 0 : -1,lp);
  if (!(child instanceof Folder)) {
    child.setOnLongClickListener(mLongClickListener);
  }
  if (child instanceof DropTarget) {
    mDragController.addDropTarget((DropTarget)child);
  }
}","/** 
 * Adds the specified child in the specified screen. The position and dimension of the child are defined by x, y, spanX and spanY.
 * @param child The child to add in one of the workspace's screens.
 * @param screen The screen in which to add the child.
 * @param x The X position of the child in the screen's grid.
 * @param y The Y position of the child in the screen's grid.
 * @param spanX The number of cells spanned horizontally by the child.
 * @param spanY The number of cells spanned vertically by the child.
 * @param insert When true, the child is inserted at the beginning of the children list.
 */
void addInScreen(View child,int screen,int x,int y,int spanX,int spanY,boolean insert){
  if (screen < 0 || screen >= getChildCount()) {
    throw new IllegalStateException(""String_Node_Str"" + getChildCount());
  }
  clearVacantCache();
  final CellLayout group=(CellLayout)getChildAt(screen);
  CellLayout.LayoutParams lp=(CellLayout.LayoutParams)child.getLayoutParams();
  if (lp == null) {
    lp=new CellLayout.LayoutParams(x,y,spanX,spanY);
  }
 else {
    lp.cellX=x;
    lp.cellY=y;
    lp.cellHSpan=spanX;
    lp.cellVSpan=spanY;
  }
  group.addView(child,insert ? 0 : -1,lp);
  if (!(child instanceof Folder)) {
    child.setHapticFeedbackEnabled(false);
    child.setOnLongClickListener(mLongClickListener);
  }
  if (child instanceof DropTarget) {
    mDragController.addDropTarget((DropTarget)child);
  }
}",0.984778761061947
179897,"private void onDropExternal(int x,int y,Object dragInfo,CellLayout cellLayout,boolean insertAtFirst){
  ItemInfo info=(ItemInfo)dragInfo;
  View view;
switch (info.itemType) {
case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
    if (info.container == NO_ID) {
      info=new ApplicationInfo((ApplicationInfo)info);
    }
  view=mLauncher.createShortcut(R.layout.application,cellLayout,(ApplicationInfo)info);
break;
case LauncherSettings.Favorites.ITEM_TYPE_USER_FOLDER:
view=FolderIcon.fromXml(R.layout.folder_icon,mLauncher,(ViewGroup)getChildAt(mCurrentScreen),((UserFolderInfo)info));
break;
default :
throw new IllegalStateException(""String_Node_Str"" + info.itemType);
}
cellLayout.addView(view,insertAtFirst ? 0 : -1);
view.setOnLongClickListener(mLongClickListener);
if (view instanceof DropTarget) {
mDragController.addDropTarget((DropTarget)view);
}
mTargetCell=estimateDropCell(x,y,1,1,view,cellLayout,mTargetCell);
cellLayout.onDropChild(view,mTargetCell);
CellLayout.LayoutParams lp=(CellLayout.LayoutParams)view.getLayoutParams();
LauncherModel.addOrMoveItemInDatabase(mLauncher,info,LauncherSettings.Favorites.CONTAINER_DESKTOP,mCurrentScreen,lp.cellX,lp.cellY);
}","private void onDropExternal(int x,int y,Object dragInfo,CellLayout cellLayout,boolean insertAtFirst){
  ItemInfo info=(ItemInfo)dragInfo;
  View view;
switch (info.itemType) {
case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
    if (info.container == NO_ID) {
      info=new ApplicationInfo((ApplicationInfo)info);
    }
  view=mLauncher.createShortcut(R.layout.application,cellLayout,(ApplicationInfo)info);
break;
case LauncherSettings.Favorites.ITEM_TYPE_USER_FOLDER:
view=FolderIcon.fromXml(R.layout.folder_icon,mLauncher,(ViewGroup)getChildAt(mCurrentScreen),((UserFolderInfo)info));
break;
default :
throw new IllegalStateException(""String_Node_Str"" + info.itemType);
}
cellLayout.addView(view,insertAtFirst ? 0 : -1);
view.setHapticFeedbackEnabled(false);
view.setOnLongClickListener(mLongClickListener);
if (view instanceof DropTarget) {
mDragController.addDropTarget((DropTarget)view);
}
mTargetCell=estimateDropCell(x,y,1,1,view,cellLayout,mTargetCell);
cellLayout.onDropChild(view,mTargetCell);
CellLayout.LayoutParams lp=(CellLayout.LayoutParams)view.getLayoutParams();
LauncherModel.addOrMoveItemInDatabase(mLauncher,info,LauncherSettings.Favorites.CONTAINER_DESKTOP,mCurrentScreen,lp.cellX,lp.cellY);
}",0.9848605577689244
179898,"/** 
 * Used to inflate the Workspace from XML.
 * @param context The application's context.
 * @param attrs The attribtues set containing the Workspace's customization values.
 * @param defStyle Unused.
 */
public Workspace(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  mWallpaperManager=WallpaperManager.getInstance(context);
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.Workspace,defStyle,0);
  mDefaultScreen=a.getInt(R.styleable.Workspace_defaultScreen,1);
  a.recycle();
  initWorkspace();
}","/** 
 * Used to inflate the Workspace from XML.
 * @param context The application's context.
 * @param attrs The attribtues set containing the Workspace's customization values.
 * @param defStyle Unused.
 */
public Workspace(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  mWallpaperManager=WallpaperManager.getInstance(context);
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.Workspace,defStyle,0);
  mDefaultScreen=a.getInt(R.styleable.Workspace_defaultScreen,1);
  a.recycle();
  setHapticFeedbackEnabled(false);
  initWorkspace();
}",0.9694323144104804
179899,"public boolean isOpaque(){
  if (mZoomDirty) {
    return mNextZoom > 0.999f;
  }
 else {
    if (mRollo == null) {
      return false;
    }
 else {
      return mRollo.mMessageProc.mZoom > 0.999f;
    }
  }
}","public boolean isOpaque(){
  if (mZoomDirty) {
    return mNextZoom > 0.999f;
  }
 else {
    if (mMessageProc == null) {
      return false;
    }
 else {
      return mMessageProc.mZoom > 0.999f;
    }
  }
}",0.9451073985680192
179900,"public void run(){
  mPosX=((float)mData[0]) / (1 << 16);
  mVelocity=((float)mData[1]) / (1 << 16);
  mZoom=((float)mData[2]) / (1 << 16);
}","public void run(){
  mPosX=((float)mData[0]) / (1 << 16);
  mVelocity=((float)mData[1]) / (1 << 16);
  mZoom=((float)mData[2]) / (1 << 16);
  mZoomDirty=false;
}",0.933774834437086
179901,"private void gainFocus(){
  if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE,SELECTED_FOCUSED);
    mRollo.mState.save();
  }
}","private void gainFocus(){
  if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    mRollo.selectIcon(Math.round(mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE,SELECTED_FOCUSED);
    mRollo.mState.save();
  }
}",0.985685071574642
179902,"private void initRs(){
  ScriptC.Builder sb=new ScriptC.Builder(mRS);
  sb.setScript(mRes,R.raw.rollo3);
  sb.setRoot(true);
  sb.addDefines(mDefines);
  sb.setType(mParams.mType,""String_Node_Str"",Defines.ALLOC_PARAMS);
  sb.setType(mState.mType,""String_Node_Str"",Defines.ALLOC_STATE);
  mInvokeMove=sb.addInvokable(""String_Node_Str"");
  mInvokeFling=sb.addInvokable(""String_Node_Str"");
  mInvokeMoveTo=sb.addInvokable(""String_Node_Str"");
  mInvokeResetWAR=sb.addInvokable(""String_Node_Str"");
  mInvokeSetZoom=sb.addInvokable(""String_Node_Str"");
  mScript=sb.create();
  mScript.setClearColor(0.0f,0.0f,0.0f,0.0f);
  mScript.bindAllocation(mParams.mAlloc,Defines.ALLOC_PARAMS);
  mScript.bindAllocation(mState.mAlloc,Defines.ALLOC_STATE);
  mScript.bindAllocation(mAllocIconIds,Defines.ALLOC_ICON_IDS);
  mScript.bindAllocation(mAllocLabelIds,Defines.ALLOC_LABEL_IDS);
  mMessageProc=new AAMessage();
  mRS.mMessageCallback=mMessageProc;
  mRS.contextBindRootScript(mScript);
}","private void initRs(){
  ScriptC.Builder sb=new ScriptC.Builder(mRS);
  sb.setScript(mRes,R.raw.rollo3);
  sb.setRoot(true);
  sb.addDefines(mDefines);
  sb.setType(mParams.mType,""String_Node_Str"",Defines.ALLOC_PARAMS);
  sb.setType(mState.mType,""String_Node_Str"",Defines.ALLOC_STATE);
  mInvokeMove=sb.addInvokable(""String_Node_Str"");
  mInvokeFling=sb.addInvokable(""String_Node_Str"");
  mInvokeMoveTo=sb.addInvokable(""String_Node_Str"");
  mInvokeResetWAR=sb.addInvokable(""String_Node_Str"");
  mInvokeSetZoom=sb.addInvokable(""String_Node_Str"");
  mScript=sb.create();
  mScript.setClearColor(0.0f,0.0f,0.0f,0.0f);
  mScript.bindAllocation(mParams.mAlloc,Defines.ALLOC_PARAMS);
  mScript.bindAllocation(mState.mAlloc,Defines.ALLOC_STATE);
  mScript.bindAllocation(mAllocIconIds,Defines.ALLOC_ICON_IDS);
  mScript.bindAllocation(mAllocLabelIds,Defines.ALLOC_LABEL_IDS);
  mRS.contextBindRootScript(mScript);
}",0.963395225464191
179903,"@Override public boolean onTouchEvent(MotionEvent ev){
  mArrowNavigation=false;
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
      mTouchTracking=TRACKING_HOME;
      mRollo.setHomeSelected(SELECTED_PRESSED);
      mRollo.mState.save();
      mCurrentIconIndex=-1;
    }
 else {
      mTouchTracking=TRACKING_FLING;
      mMotionDownRawX=(int)ev.getRawX();
      mMotionDownRawY=(int)ev.getRawY();
      mRollo.mState.newPositionX=ev.getRawY() / getHeight();
      mRollo.mState.newTouchDown=1;
      if (!mRollo.checkClickOK()) {
        mRollo.clearSelectedIcon();
      }
 else {
        mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX,SELECTED_PRESSED);
        if (mDownIconIndex < 0) {
          cancelLongPress();
        }
      }
      mRollo.mState.save();
      mRollo.move();
      mVelocity=VelocityTracker.obtain();
      mVelocity.addMovement(ev);
      mStartedScrolling=false;
    }
  break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
  mRollo.setHomeSelected(y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1] ? SELECTED_PRESSED : SELECTED_NONE);
  mRollo.mState.save();
}
 else if (mTouchTracking == TRACKING_FLING) {
  int rawX=(int)ev.getRawX();
  int rawY=(int)ev.getRawY();
  int slop;
  slop=Math.abs(rawY - mMotionDownRawY);
  if (!mStartedScrolling && slop < mSlop) {
    mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
    if (mDownIconIndex != mCurrentIconIndex) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
  }
 else {
    if (!mStartedScrolling) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
    mRollo.mState.newPositionX=ev.getRawY() / getHeight();
    mRollo.mState.newTouchDown=1;
    mRollo.move();
    mStartedScrolling=true;
    mRollo.clearSelectedIcon();
    mVelocity.addMovement(ev);
    mRollo.mState.save();
  }
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
  reallyPlaySoundEffect(SoundEffectConstants.CLICK);
  mLauncher.closeAllApps(true);
}
mRollo.setHomeSelected(SELECTED_NONE);
mRollo.mState.save();
}
mCurrentIconIndex=-1;
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawY() / getHeight();
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
mRollo.mState.flingVelocity=mVelocity.getYVelocity() / getHeight();
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  mArrowNavigation=false;
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
      mTouchTracking=TRACKING_HOME;
      mRollo.setHomeSelected(SELECTED_PRESSED);
      mRollo.mState.save();
      mCurrentIconIndex=-1;
    }
 else {
      mTouchTracking=TRACKING_FLING;
      mMotionDownRawX=(int)ev.getRawX();
      mMotionDownRawY=(int)ev.getRawY();
      mRollo.mState.newPositionX=ev.getRawY() / getHeight();
      mRollo.mState.newTouchDown=1;
      if (!mRollo.checkClickOK()) {
        mRollo.clearSelectedIcon();
      }
 else {
        mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mMessageProc.mPosX,SELECTED_PRESSED);
        if (mDownIconIndex < 0) {
          cancelLongPress();
        }
      }
      mRollo.mState.save();
      mRollo.move();
      mVelocity=VelocityTracker.obtain();
      mVelocity.addMovement(ev);
      mStartedScrolling=false;
    }
  break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
  mRollo.setHomeSelected(y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1] ? SELECTED_PRESSED : SELECTED_NONE);
  mRollo.mState.save();
}
 else if (mTouchTracking == TRACKING_FLING) {
  int rawX=(int)ev.getRawX();
  int rawY=(int)ev.getRawY();
  int slop;
  slop=Math.abs(rawY - mMotionDownRawY);
  if (!mStartedScrolling && slop < mSlop) {
    mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mMessageProc.mPosX);
    if (mDownIconIndex != mCurrentIconIndex) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
  }
 else {
    if (!mStartedScrolling) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
    mRollo.mState.newPositionX=ev.getRawY() / getHeight();
    mRollo.mState.newTouchDown=1;
    mRollo.move();
    mStartedScrolling=true;
    mRollo.clearSelectedIcon();
    mVelocity.addMovement(ev);
    mRollo.mState.save();
  }
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
  reallyPlaySoundEffect(SoundEffectConstants.CLICK);
  mLauncher.closeAllApps(true);
}
mRollo.setHomeSelected(SELECTED_NONE);
mRollo.mState.save();
}
mCurrentIconIndex=-1;
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawY() / getHeight();
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
mRollo.mState.flingVelocity=mVelocity.getYVelocity() / getHeight();
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}",0.9976658886295432
179904,"public boolean isVisible(){
  if (mZoomDirty) {
    return mNextZoom > 0.001f;
  }
 else {
    if (mRollo == null) {
      return false;
    }
 else {
      return mRollo.mMessageProc.mZoom > 0.001f;
    }
  }
}","public boolean isVisible(){
  if (mZoomDirty) {
    return mNextZoom > 0.001f;
  }
 else {
    if (mMessageProc == null) {
      return false;
    }
 else {
      return mMessageProc.mZoom > 0.001f;
    }
  }
}",0.9453681710213776
179905,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  boolean handled=false;
  if (!isVisible()) {
    return false;
  }
  final int iconCount=mRollo.mState.iconCount;
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      if (mLastSelection == SELECTION_HOME) {
        reallyPlaySoundEffect(SoundEffectConstants.CLICK);
        mLauncher.closeAllApps(true);
      }
 else {
        int whichApp=mRollo.mState.selectedIconIndex;
        if (whichApp >= 0) {
          ApplicationInfo app=mAllAppsList.get(whichApp);
          mLauncher.startActivitySafely(app.intent);
          handled=true;
        }
      }
    }
  }
  if (mArrowNavigation && iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=Math.round(mRollo.mMessageProc.mPosX);
    final int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    final int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (mLastSelection == SELECTION_HOME) {
        mRollo.setHomeSelected(SELECTED_NONE);
        int lastRowCount=iconCount % Defines.COLUMNS_PER_PAGE;
        if (lastRowCount == 0) {
          lastRowCount=Defines.COLUMNS_PER_PAGE;
        }
        newSelection=iconCount - lastRowCount + (Defines.COLUMNS_PER_PAGE / 2);
        if (newSelection >= iconCount) {
          newSelection=iconCount - 1;
        }
        int target=(newSelection / Defines.COLUMNS_PER_PAGE) - (Defines.ROWS_PER_PAGE - 1);
        if (target < 0) {
          target=0;
        }
        if (currentTopRow != target) {
          mRollo.moveTo(target);
        }
      }
 else {
        if (currentPageRow > 0) {
          newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
        }
 else         if (currentTopRow > 0) {
          newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
          mRollo.moveTo(newSelection / Defines.COLUMNS_PER_PAGE);
        }
      }
    handled=true;
  break;
case KeyEvent.KEYCODE_DPAD_DOWN:
{
  final int rowCount=iconCount / Defines.COLUMNS_PER_PAGE + (iconCount % Defines.COLUMNS_PER_PAGE == 0 ? 0 : 1);
  final int currentRow=currentSelection / Defines.COLUMNS_PER_PAGE;
  if (mLastSelection != SELECTION_HOME) {
    if (currentRow < rowCount - 1) {
      mRollo.setHomeSelected(SELECTED_NONE);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
      if (newSelection >= iconCount) {
        newSelection=iconCount - 1;
      }
      if (currentPageRow >= Defines.ROWS_PER_PAGE - 1) {
        mRollo.moveTo((newSelection / Defines.COLUMNS_PER_PAGE) - Defines.ROWS_PER_PAGE + 1);
      }
    }
 else {
      newSelection=-1;
      mRollo.setHomeSelected(SELECTED_FOCUSED);
    }
  }
  handled=true;
  break;
}
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
handled=true;
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < iconCount - 1)) {
newSelection=currentSelection + 1;
}
handled=true;
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection,SELECTED_FOCUSED);
mRollo.mState.save();
}
}
return handled;
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  boolean handled=false;
  if (!isVisible()) {
    return false;
  }
  final int iconCount=mRollo.mState.iconCount;
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      if (mLastSelection == SELECTION_HOME) {
        reallyPlaySoundEffect(SoundEffectConstants.CLICK);
        mLauncher.closeAllApps(true);
      }
 else {
        int whichApp=mRollo.mState.selectedIconIndex;
        if (whichApp >= 0) {
          ApplicationInfo app=mAllAppsList.get(whichApp);
          mLauncher.startActivitySafely(app.intent);
          handled=true;
        }
      }
    }
  }
  if (mArrowNavigation && iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=Math.round(mMessageProc.mPosX);
    final int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    final int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (mLastSelection == SELECTION_HOME) {
        mRollo.setHomeSelected(SELECTED_NONE);
        int lastRowCount=iconCount % Defines.COLUMNS_PER_PAGE;
        if (lastRowCount == 0) {
          lastRowCount=Defines.COLUMNS_PER_PAGE;
        }
        newSelection=iconCount - lastRowCount + (Defines.COLUMNS_PER_PAGE / 2);
        if (newSelection >= iconCount) {
          newSelection=iconCount - 1;
        }
        int target=(newSelection / Defines.COLUMNS_PER_PAGE) - (Defines.ROWS_PER_PAGE - 1);
        if (target < 0) {
          target=0;
        }
        if (currentTopRow != target) {
          mRollo.moveTo(target);
        }
      }
 else {
        if (currentPageRow > 0) {
          newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
        }
 else         if (currentTopRow > 0) {
          newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
          mRollo.moveTo(newSelection / Defines.COLUMNS_PER_PAGE);
        }
      }
    handled=true;
  break;
case KeyEvent.KEYCODE_DPAD_DOWN:
{
  final int rowCount=iconCount / Defines.COLUMNS_PER_PAGE + (iconCount % Defines.COLUMNS_PER_PAGE == 0 ? 0 : 1);
  final int currentRow=currentSelection / Defines.COLUMNS_PER_PAGE;
  if (mLastSelection != SELECTION_HOME) {
    if (currentRow < rowCount - 1) {
      mRollo.setHomeSelected(SELECTED_NONE);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
      if (newSelection >= iconCount) {
        newSelection=iconCount - 1;
      }
      if (currentPageRow >= Defines.ROWS_PER_PAGE - 1) {
        mRollo.moveTo((newSelection / Defines.COLUMNS_PER_PAGE) - Defines.ROWS_PER_PAGE + 1);
      }
    }
 else {
      newSelection=-1;
      mRollo.setHomeSelected(SELECTED_FOCUSED);
    }
  }
  handled=true;
  break;
}
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
handled=true;
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < iconCount - 1)) {
newSelection=currentSelection + 1;
}
handled=true;
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection,SELECTED_FOCUSED);
mRollo.mState.save();
}
}
return handled;
}",0.9989594172736732
179906,"void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      uploadApps(mAllAppsList);
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mNextZoom,mNextAnimate);
      mZoomDirty=false;
    }
  }
}","void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      uploadApps(mAllAppsList);
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mNextZoom,mNextAnimate);
    }
  }
}",0.917391304347826
179907,"@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.mHasSurface=true;
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
    }
    if (mShouldGainFocus) {
      gainFocus();
      mShouldGainFocus=false;
    }
    mRollo.dirtyCheck();
  }
 else {
    mRollo.mHasSurface=true;
    mRollo.dirtyCheck();
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
}","@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.mHasSurface=true;
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
    }
    if (mShouldGainFocus) {
      gainFocus();
      mShouldGainFocus=false;
    }
    mRollo.dirtyCheck();
  }
 else {
    mRollo.mHasSurface=true;
    mRollo.dirtyCheck();
  }
  mRS.mMessageCallback=mMessageProc=new AAMessage();
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
}",0.960060286360211
179908,"@Override public void onWindowFocusChanged(boolean hasWindowFocus){
  super.onWindowFocusChanged(hasWindowFocus);
  if (mArrowNavigation) {
    if (!hasWindowFocus) {
      mLastSelectedIcon=mRollo.mState.selectedIconIndex;
      mRollo.setHomeSelected(SELECTED_NONE);
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
    }
 else     if (hasWindowFocus) {
      if (mRollo.mState.iconCount > 0) {
        if (mLastSelection == SELECTION_ICONS) {
          int selection=mLastSelectedIcon;
          final int firstIcon=Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE;
          if (selection < 0 || selection < firstIcon || selection >= mRollo.mState.iconCount || selection >= firstIcon + (Defines.COLUMNS_PER_PAGE * Defines.ROWS_PER_PAGE)) {
            selection=firstIcon;
          }
          mRollo.selectIcon(selection,SELECTED_FOCUSED);
          mRollo.mState.save();
        }
 else         if (mLastSelection == SELECTION_HOME) {
          mRollo.setHomeSelected(SELECTED_FOCUSED);
          mRollo.mState.save();
        }
      }
    }
  }
}","@Override public void onWindowFocusChanged(boolean hasWindowFocus){
  super.onWindowFocusChanged(hasWindowFocus);
  if (mArrowNavigation) {
    if (!hasWindowFocus) {
      mLastSelectedIcon=mRollo.mState.selectedIconIndex;
      mRollo.setHomeSelected(SELECTED_NONE);
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
    }
 else     if (hasWindowFocus) {
      if (mRollo.mState.iconCount > 0) {
        if (mLastSelection == SELECTION_ICONS) {
          int selection=mLastSelectedIcon;
          final int firstIcon=Math.round(mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE;
          if (selection < 0 || selection < firstIcon || selection >= mRollo.mState.iconCount || selection >= firstIcon + (Defines.COLUMNS_PER_PAGE * Defines.ROWS_PER_PAGE)) {
            selection=firstIcon;
          }
          mRollo.selectIcon(selection,SELECTED_FOCUSED);
          mRollo.mState.save();
        }
 else         if (mLastSelection == SELECTION_HOME) {
          mRollo.setHomeSelected(SELECTED_FOCUSED);
          mRollo.mState.save();
        }
      }
    }
  }
}",0.996760758907913
179909,"public boolean isOpaque(){
  if (mZoomDirty) {
    return mNextZoom > 0.999f;
  }
 else {
    if (mRollo == null) {
      return false;
    }
 else {
      return mRollo.mMessageProc.mZoom > 0.999f;
    }
  }
}","public boolean isOpaque(){
  if (mZoomDirty) {
    return mNextZoom > 0.999f;
  }
 else {
    if (mMessageProc == null) {
      return false;
    }
 else {
      return mMessageProc.mZoom > 0.999f;
    }
  }
}",0.9451073985680192
179910,"public void run(){
  mPosX=((float)mData[0]) / (1 << 16);
  mVelocity=((float)mData[1]) / (1 << 16);
  mZoom=((float)mData[2]) / (1 << 16);
}","public void run(){
  mPosX=((float)mData[0]) / (1 << 16);
  mVelocity=((float)mData[1]) / (1 << 16);
  mZoom=((float)mData[2]) / (1 << 16);
  mZoomDirty=false;
}",0.933774834437086
179911,"private void gainFocus(){
  if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE,SELECTED_FOCUSED);
    mRollo.mState.save();
  }
}","private void gainFocus(){
  if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    mRollo.selectIcon(Math.round(mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE,SELECTED_FOCUSED);
    mRollo.mState.save();
  }
}",0.985685071574642
179912,"private void initRs(){
  ScriptC.Builder sb=new ScriptC.Builder(mRS);
  sb.setScript(mRes,R.raw.rollo3);
  sb.setRoot(true);
  sb.addDefines(mDefines);
  sb.setType(mParams.mType,""String_Node_Str"",Defines.ALLOC_PARAMS);
  sb.setType(mState.mType,""String_Node_Str"",Defines.ALLOC_STATE);
  mInvokeMove=sb.addInvokable(""String_Node_Str"");
  mInvokeFling=sb.addInvokable(""String_Node_Str"");
  mInvokeMoveTo=sb.addInvokable(""String_Node_Str"");
  mInvokeResetWAR=sb.addInvokable(""String_Node_Str"");
  mInvokeSetZoom=sb.addInvokable(""String_Node_Str"");
  mScript=sb.create();
  mScript.setClearColor(0.0f,0.0f,0.0f,0.0f);
  mScript.bindAllocation(mParams.mAlloc,Defines.ALLOC_PARAMS);
  mScript.bindAllocation(mState.mAlloc,Defines.ALLOC_STATE);
  mScript.bindAllocation(mAllocIconIds,Defines.ALLOC_ICON_IDS);
  mScript.bindAllocation(mAllocLabelIds,Defines.ALLOC_LABEL_IDS);
  mMessageProc=new AAMessage();
  mRS.mMessageCallback=mMessageProc;
  mRS.contextBindRootScript(mScript);
}","private void initRs(){
  ScriptC.Builder sb=new ScriptC.Builder(mRS);
  sb.setScript(mRes,R.raw.rollo3);
  sb.setRoot(true);
  sb.addDefines(mDefines);
  sb.setType(mParams.mType,""String_Node_Str"",Defines.ALLOC_PARAMS);
  sb.setType(mState.mType,""String_Node_Str"",Defines.ALLOC_STATE);
  mInvokeMove=sb.addInvokable(""String_Node_Str"");
  mInvokeFling=sb.addInvokable(""String_Node_Str"");
  mInvokeMoveTo=sb.addInvokable(""String_Node_Str"");
  mInvokeResetWAR=sb.addInvokable(""String_Node_Str"");
  mInvokeSetZoom=sb.addInvokable(""String_Node_Str"");
  mScript=sb.create();
  mScript.setClearColor(0.0f,0.0f,0.0f,0.0f);
  mScript.bindAllocation(mParams.mAlloc,Defines.ALLOC_PARAMS);
  mScript.bindAllocation(mState.mAlloc,Defines.ALLOC_STATE);
  mScript.bindAllocation(mAllocIconIds,Defines.ALLOC_ICON_IDS);
  mScript.bindAllocation(mAllocLabelIds,Defines.ALLOC_LABEL_IDS);
  mRS.contextBindRootScript(mScript);
}",0.963395225464191
179913,"@Override public boolean onTouchEvent(MotionEvent ev){
  mArrowNavigation=false;
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
      mTouchTracking=TRACKING_HOME;
      mRollo.setHomeSelected(SELECTED_PRESSED);
      mRollo.mState.save();
      mCurrentIconIndex=-1;
    }
 else {
      mTouchTracking=TRACKING_FLING;
      mMotionDownRawX=(int)ev.getRawX();
      mMotionDownRawY=(int)ev.getRawY();
      mRollo.mState.newPositionX=ev.getRawY() / getHeight();
      mRollo.mState.newTouchDown=1;
      if (!mRollo.checkClickOK()) {
        mRollo.clearSelectedIcon();
      }
 else {
        mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX,SELECTED_PRESSED);
        if (mDownIconIndex < 0) {
          cancelLongPress();
        }
      }
      mRollo.mState.save();
      mRollo.move();
      mVelocity=VelocityTracker.obtain();
      mVelocity.addMovement(ev);
      mStartedScrolling=false;
    }
  break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
  mRollo.setHomeSelected(y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1] ? SELECTED_PRESSED : SELECTED_NONE);
  mRollo.mState.save();
}
 else if (mTouchTracking == TRACKING_FLING) {
  int rawX=(int)ev.getRawX();
  int rawY=(int)ev.getRawY();
  int slop;
  slop=Math.abs(rawY - mMotionDownRawY);
  if (!mStartedScrolling && slop < mSlop) {
    mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
    if (mDownIconIndex != mCurrentIconIndex) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
  }
 else {
    if (!mStartedScrolling) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
    mRollo.mState.newPositionX=ev.getRawY() / getHeight();
    mRollo.mState.newTouchDown=1;
    mRollo.move();
    mStartedScrolling=true;
    mRollo.clearSelectedIcon();
    mVelocity.addMovement(ev);
    mRollo.mState.save();
  }
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
  reallyPlaySoundEffect(SoundEffectConstants.CLICK);
  mLauncher.closeAllApps(true);
}
mRollo.setHomeSelected(SELECTED_NONE);
mRollo.mState.save();
}
mCurrentIconIndex=-1;
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawY() / getHeight();
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
mRollo.mState.flingVelocity=mVelocity.getYVelocity() / getHeight();
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  mArrowNavigation=false;
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
      mTouchTracking=TRACKING_HOME;
      mRollo.setHomeSelected(SELECTED_PRESSED);
      mRollo.mState.save();
      mCurrentIconIndex=-1;
    }
 else {
      mTouchTracking=TRACKING_FLING;
      mMotionDownRawX=(int)ev.getRawX();
      mMotionDownRawY=(int)ev.getRawY();
      mRollo.mState.newPositionX=ev.getRawY() / getHeight();
      mRollo.mState.newTouchDown=1;
      if (!mRollo.checkClickOK()) {
        mRollo.clearSelectedIcon();
      }
 else {
        mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mMessageProc.mPosX,SELECTED_PRESSED);
        if (mDownIconIndex < 0) {
          cancelLongPress();
        }
      }
      mRollo.mState.save();
      mRollo.move();
      mVelocity=VelocityTracker.obtain();
      mVelocity.addMovement(ev);
      mStartedScrolling=false;
    }
  break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
  mRollo.setHomeSelected(y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1] ? SELECTED_PRESSED : SELECTED_NONE);
  mRollo.mState.save();
}
 else if (mTouchTracking == TRACKING_FLING) {
  int rawX=(int)ev.getRawX();
  int rawY=(int)ev.getRawY();
  int slop;
  slop=Math.abs(rawY - mMotionDownRawY);
  if (!mStartedScrolling && slop < mSlop) {
    mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mMessageProc.mPosX);
    if (mDownIconIndex != mCurrentIconIndex) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
  }
 else {
    if (!mStartedScrolling) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
    mRollo.mState.newPositionX=ev.getRawY() / getHeight();
    mRollo.mState.newTouchDown=1;
    mRollo.move();
    mStartedScrolling=true;
    mRollo.clearSelectedIcon();
    mVelocity.addMovement(ev);
    mRollo.mState.save();
  }
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
  reallyPlaySoundEffect(SoundEffectConstants.CLICK);
  mLauncher.closeAllApps(true);
}
mRollo.setHomeSelected(SELECTED_NONE);
mRollo.mState.save();
}
mCurrentIconIndex=-1;
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawY() / getHeight();
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
mRollo.mState.flingVelocity=mVelocity.getYVelocity() / getHeight();
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}",0.9976658886295432
179914,"public boolean isVisible(){
  if (mZoomDirty) {
    return mNextZoom > 0.001f;
  }
 else {
    if (mRollo == null) {
      return false;
    }
 else {
      return mRollo.mMessageProc.mZoom > 0.001f;
    }
  }
}","public boolean isVisible(){
  if (mZoomDirty) {
    return mNextZoom > 0.001f;
  }
 else {
    if (mMessageProc == null) {
      return false;
    }
 else {
      return mMessageProc.mZoom > 0.001f;
    }
  }
}",0.9453681710213776
179915,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  boolean handled=false;
  if (!isVisible()) {
    return false;
  }
  final int iconCount=mRollo.mState.iconCount;
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      if (mLastSelection == SELECTION_HOME) {
        reallyPlaySoundEffect(SoundEffectConstants.CLICK);
        mLauncher.closeAllApps(true);
      }
 else {
        int whichApp=mRollo.mState.selectedIconIndex;
        if (whichApp >= 0) {
          ApplicationInfo app=mAllAppsList.get(whichApp);
          mLauncher.startActivitySafely(app.intent);
          handled=true;
        }
      }
    }
  }
  if (mArrowNavigation && iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=Math.round(mRollo.mMessageProc.mPosX);
    final int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    final int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (mLastSelection == SELECTION_HOME) {
        mRollo.setHomeSelected(SELECTED_NONE);
        int lastRowCount=iconCount % Defines.COLUMNS_PER_PAGE;
        if (lastRowCount == 0) {
          lastRowCount=Defines.COLUMNS_PER_PAGE;
        }
        newSelection=iconCount - lastRowCount + (Defines.COLUMNS_PER_PAGE / 2);
        if (newSelection >= iconCount) {
          newSelection=iconCount - 1;
        }
        int target=(newSelection / Defines.COLUMNS_PER_PAGE) - (Defines.ROWS_PER_PAGE - 1);
        if (target < 0) {
          target=0;
        }
        if (currentTopRow != target) {
          mRollo.moveTo(target);
        }
      }
 else {
        if (currentPageRow > 0) {
          newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
        }
 else         if (currentTopRow > 0) {
          newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
          mRollo.moveTo(newSelection / Defines.COLUMNS_PER_PAGE);
        }
      }
    handled=true;
  break;
case KeyEvent.KEYCODE_DPAD_DOWN:
{
  final int rowCount=iconCount / Defines.COLUMNS_PER_PAGE + (iconCount % Defines.COLUMNS_PER_PAGE == 0 ? 0 : 1);
  final int currentRow=currentSelection / Defines.COLUMNS_PER_PAGE;
  if (mLastSelection != SELECTION_HOME) {
    if (currentRow < rowCount - 1) {
      mRollo.setHomeSelected(SELECTED_NONE);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
      if (newSelection >= iconCount) {
        newSelection=iconCount - 1;
      }
      if (currentPageRow >= Defines.ROWS_PER_PAGE - 1) {
        mRollo.moveTo((newSelection / Defines.COLUMNS_PER_PAGE) - Defines.ROWS_PER_PAGE + 1);
      }
    }
 else {
      newSelection=-1;
      mRollo.setHomeSelected(SELECTED_FOCUSED);
    }
  }
  handled=true;
  break;
}
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
handled=true;
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < iconCount - 1)) {
newSelection=currentSelection + 1;
}
handled=true;
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection,SELECTED_FOCUSED);
mRollo.mState.save();
}
}
return handled;
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  boolean handled=false;
  if (!isVisible()) {
    return false;
  }
  final int iconCount=mRollo.mState.iconCount;
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      if (mLastSelection == SELECTION_HOME) {
        reallyPlaySoundEffect(SoundEffectConstants.CLICK);
        mLauncher.closeAllApps(true);
      }
 else {
        int whichApp=mRollo.mState.selectedIconIndex;
        if (whichApp >= 0) {
          ApplicationInfo app=mAllAppsList.get(whichApp);
          mLauncher.startActivitySafely(app.intent);
          handled=true;
        }
      }
    }
  }
  if (mArrowNavigation && iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=Math.round(mMessageProc.mPosX);
    final int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    final int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (mLastSelection == SELECTION_HOME) {
        mRollo.setHomeSelected(SELECTED_NONE);
        int lastRowCount=iconCount % Defines.COLUMNS_PER_PAGE;
        if (lastRowCount == 0) {
          lastRowCount=Defines.COLUMNS_PER_PAGE;
        }
        newSelection=iconCount - lastRowCount + (Defines.COLUMNS_PER_PAGE / 2);
        if (newSelection >= iconCount) {
          newSelection=iconCount - 1;
        }
        int target=(newSelection / Defines.COLUMNS_PER_PAGE) - (Defines.ROWS_PER_PAGE - 1);
        if (target < 0) {
          target=0;
        }
        if (currentTopRow != target) {
          mRollo.moveTo(target);
        }
      }
 else {
        if (currentPageRow > 0) {
          newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
        }
 else         if (currentTopRow > 0) {
          newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
          mRollo.moveTo(newSelection / Defines.COLUMNS_PER_PAGE);
        }
      }
    handled=true;
  break;
case KeyEvent.KEYCODE_DPAD_DOWN:
{
  final int rowCount=iconCount / Defines.COLUMNS_PER_PAGE + (iconCount % Defines.COLUMNS_PER_PAGE == 0 ? 0 : 1);
  final int currentRow=currentSelection / Defines.COLUMNS_PER_PAGE;
  if (mLastSelection != SELECTION_HOME) {
    if (currentRow < rowCount - 1) {
      mRollo.setHomeSelected(SELECTED_NONE);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
      if (newSelection >= iconCount) {
        newSelection=iconCount - 1;
      }
      if (currentPageRow >= Defines.ROWS_PER_PAGE - 1) {
        mRollo.moveTo((newSelection / Defines.COLUMNS_PER_PAGE) - Defines.ROWS_PER_PAGE + 1);
      }
    }
 else {
      newSelection=-1;
      mRollo.setHomeSelected(SELECTED_FOCUSED);
    }
  }
  handled=true;
  break;
}
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
handled=true;
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < iconCount - 1)) {
newSelection=currentSelection + 1;
}
handled=true;
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection,SELECTED_FOCUSED);
mRollo.mState.save();
}
}
return handled;
}",0.9989594172736732
179916,"void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      uploadApps(mAllAppsList);
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mNextZoom,mNextAnimate);
      mZoomDirty=false;
    }
  }
}","void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      uploadApps(mAllAppsList);
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mNextZoom,mNextAnimate);
    }
  }
}",0.917391304347826
179917,"@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.mHasSurface=true;
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
    }
    if (mShouldGainFocus) {
      gainFocus();
      mShouldGainFocus=false;
    }
    mRollo.dirtyCheck();
  }
 else {
    mRollo.mHasSurface=true;
    mRollo.dirtyCheck();
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
}","@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.mHasSurface=true;
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
    }
    if (mShouldGainFocus) {
      gainFocus();
      mShouldGainFocus=false;
    }
    mRollo.dirtyCheck();
  }
 else {
    mRollo.mHasSurface=true;
    mRollo.dirtyCheck();
  }
  mRS.mMessageCallback=mMessageProc=new AAMessage();
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
}",0.960060286360211
179918,"@Override public void onWindowFocusChanged(boolean hasWindowFocus){
  super.onWindowFocusChanged(hasWindowFocus);
  if (mArrowNavigation) {
    if (!hasWindowFocus) {
      mLastSelectedIcon=mRollo.mState.selectedIconIndex;
      mRollo.setHomeSelected(SELECTED_NONE);
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
    }
 else     if (hasWindowFocus) {
      if (mRollo.mState.iconCount > 0) {
        if (mLastSelection == SELECTION_ICONS) {
          int selection=mLastSelectedIcon;
          final int firstIcon=Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE;
          if (selection < 0 || selection < firstIcon || selection >= mRollo.mState.iconCount || selection >= firstIcon + (Defines.COLUMNS_PER_PAGE * Defines.ROWS_PER_PAGE)) {
            selection=firstIcon;
          }
          mRollo.selectIcon(selection,SELECTED_FOCUSED);
          mRollo.mState.save();
        }
 else         if (mLastSelection == SELECTION_HOME) {
          mRollo.setHomeSelected(SELECTED_FOCUSED);
          mRollo.mState.save();
        }
      }
    }
  }
}","@Override public void onWindowFocusChanged(boolean hasWindowFocus){
  super.onWindowFocusChanged(hasWindowFocus);
  if (mArrowNavigation) {
    if (!hasWindowFocus) {
      mLastSelectedIcon=mRollo.mState.selectedIconIndex;
      mRollo.setHomeSelected(SELECTED_NONE);
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
    }
 else     if (hasWindowFocus) {
      if (mRollo.mState.iconCount > 0) {
        if (mLastSelection == SELECTION_ICONS) {
          int selection=mLastSelectedIcon;
          final int firstIcon=Math.round(mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE;
          if (selection < 0 || selection < firstIcon || selection >= mRollo.mState.iconCount || selection >= firstIcon + (Defines.COLUMNS_PER_PAGE * Defines.ROWS_PER_PAGE)) {
            selection=firstIcon;
          }
          mRollo.selectIcon(selection,SELECTED_FOCUSED);
          mRollo.mState.save();
        }
 else         if (mLastSelection == SELECTION_HOME) {
          mRollo.setHomeSelected(SELECTED_FOCUSED);
          mRollo.mState.save();
        }
      }
    }
  }
}",0.996760758907913
179919,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
  mRS.mMessageCallback=null;
}",0.8960573476702509
179920,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
  mRS.mMessageCallback=null;
}",0.8960573476702509
179921,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
  mRS.mMessageCallback=null;
}",0.8960573476702509
179922,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
  mRS.mMessageCallback=null;
}",0.8960573476702509
179923,"private void startWallpaper(){
  final Intent pickWallpaper=new Intent(Intent.ACTION_SET_WALLPAPER);
  Intent chooser=Intent.createChooser(pickWallpaper,getText(R.string.chooser_wallpaper));
  WallpaperManager wm=(WallpaperManager)getSystemService(Context.WALLPAPER_SERVICE);
  WallpaperInfo wi=wm.getWallpaperInfo();
  if (wi != null && wi.getSettingsActivity() != null) {
    LabeledIntent li=new LabeledIntent(getPackageName(),R.string.configure_wallpaper,0);
    li.setClassName(wi.getPackageName(),wi.getSettingsActivity());
    chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{li});
  }
  startActivityForResult(chooser,REQUEST_PICK_WALLPAPER);
}","private void startWallpaper(){
  closeAllApps(true);
  final Intent pickWallpaper=new Intent(Intent.ACTION_SET_WALLPAPER);
  Intent chooser=Intent.createChooser(pickWallpaper,getText(R.string.chooser_wallpaper));
  WallpaperManager wm=(WallpaperManager)getSystemService(Context.WALLPAPER_SERVICE);
  WallpaperInfo wi=wm.getWallpaperInfo();
  if (wi != null && wi.getSettingsActivity() != null) {
    LabeledIntent li=new LabeledIntent(getPackageName(),R.string.configure_wallpaper,0);
    li.setClassName(wi.getPackageName(),wi.getSettingsActivity());
    chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{li});
  }
  startActivityForResult(chooser,REQUEST_PICK_WALLPAPER);
}",0.9836552748885586
179924,"private void addItems(){
  showAddDialog(mMenuAddInfo);
}","private void addItems(){
  closeAllApps(true);
  showAddDialog(mMenuAddInfo);
}",0.8382352941176471
179925,"private void startWallpaper(){
  final Intent pickWallpaper=new Intent(Intent.ACTION_SET_WALLPAPER);
  Intent chooser=Intent.createChooser(pickWallpaper,getText(R.string.chooser_wallpaper));
  WallpaperManager wm=(WallpaperManager)getSystemService(Context.WALLPAPER_SERVICE);
  WallpaperInfo wi=wm.getWallpaperInfo();
  if (wi != null && wi.getSettingsActivity() != null) {
    LabeledIntent li=new LabeledIntent(getPackageName(),R.string.configure_wallpaper,0);
    li.setClassName(wi.getPackageName(),wi.getSettingsActivity());
    chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{li});
  }
  startActivityForResult(chooser,REQUEST_PICK_WALLPAPER);
}","private void startWallpaper(){
  closeAllApps(true);
  final Intent pickWallpaper=new Intent(Intent.ACTION_SET_WALLPAPER);
  Intent chooser=Intent.createChooser(pickWallpaper,getText(R.string.chooser_wallpaper));
  WallpaperManager wm=(WallpaperManager)getSystemService(Context.WALLPAPER_SERVICE);
  WallpaperInfo wi=wm.getWallpaperInfo();
  if (wi != null && wi.getSettingsActivity() != null) {
    LabeledIntent li=new LabeledIntent(getPackageName(),R.string.configure_wallpaper,0);
    li.setClassName(wi.getPackageName(),wi.getSettingsActivity());
    chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{li});
  }
  startActivityForResult(chooser,REQUEST_PICK_WALLPAPER);
}",0.9836552748885586
179926,"private void addItems(){
  showAddDialog(mMenuAddInfo);
}","private void addItems(){
  closeAllApps(true);
  showAddDialog(mMenuAddInfo);
}",0.8382352941176471
179927,"private void startWallpaper(){
  final Intent pickWallpaper=new Intent(Intent.ACTION_SET_WALLPAPER);
  Intent chooser=Intent.createChooser(pickWallpaper,getText(R.string.chooser_wallpaper));
  WallpaperManager wm=(WallpaperManager)getSystemService(Context.WALLPAPER_SERVICE);
  WallpaperInfo wi=wm.getWallpaperInfo();
  if (wi != null && wi.getSettingsActivity() != null) {
    LabeledIntent li=new LabeledIntent(getPackageName(),R.string.configure_wallpaper,0);
    li.setClassName(wi.getPackageName(),wi.getSettingsActivity());
    chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{li});
  }
  startActivityForResult(chooser,REQUEST_PICK_WALLPAPER);
}","private void startWallpaper(){
  closeAllApps(true);
  final Intent pickWallpaper=new Intent(Intent.ACTION_SET_WALLPAPER);
  Intent chooser=Intent.createChooser(pickWallpaper,getText(R.string.chooser_wallpaper));
  WallpaperManager wm=(WallpaperManager)getSystemService(Context.WALLPAPER_SERVICE);
  WallpaperInfo wi=wm.getWallpaperInfo();
  if (wi != null && wi.getSettingsActivity() != null) {
    LabeledIntent li=new LabeledIntent(getPackageName(),R.string.configure_wallpaper,0);
    li.setClassName(wi.getPackageName(),wi.getSettingsActivity());
    chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{li});
  }
  startActivityForResult(chooser,REQUEST_PICK_WALLPAPER);
}",0.9836552748885586
179928,"private void addItems(){
  showAddDialog(mMenuAddInfo);
}","private void addItems(){
  closeAllApps(true);
  showAddDialog(mMenuAddInfo);
}",0.8382352941176471
179929,"private void startWallpaper(){
  final Intent pickWallpaper=new Intent(Intent.ACTION_SET_WALLPAPER);
  Intent chooser=Intent.createChooser(pickWallpaper,getText(R.string.chooser_wallpaper));
  WallpaperManager wm=(WallpaperManager)getSystemService(Context.WALLPAPER_SERVICE);
  WallpaperInfo wi=wm.getWallpaperInfo();
  if (wi != null && wi.getSettingsActivity() != null) {
    LabeledIntent li=new LabeledIntent(getPackageName(),R.string.configure_wallpaper,0);
    li.setClassName(wi.getPackageName(),wi.getSettingsActivity());
    chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{li});
  }
  startActivityForResult(chooser,REQUEST_PICK_WALLPAPER);
}","private void startWallpaper(){
  closeAllApps(true);
  final Intent pickWallpaper=new Intent(Intent.ACTION_SET_WALLPAPER);
  Intent chooser=Intent.createChooser(pickWallpaper,getText(R.string.chooser_wallpaper));
  WallpaperManager wm=(WallpaperManager)getSystemService(Context.WALLPAPER_SERVICE);
  WallpaperInfo wi=wm.getWallpaperInfo();
  if (wi != null && wi.getSettingsActivity() != null) {
    LabeledIntent li=new LabeledIntent(getPackageName(),R.string.configure_wallpaper,0);
    li.setClassName(wi.getPackageName(),wi.getSettingsActivity());
    chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{li});
  }
  startActivityForResult(chooser,REQUEST_PICK_WALLPAPER);
}",0.9836552748885586
179930,"private void addItems(){
  showAddDialog(mMenuAddInfo);
}","private void addItems(){
  closeAllApps(true);
  showAddDialog(mMenuAddInfo);
}",0.8382352941176471
179931,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
}",0.8738738738738738
179932,"private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  for (int i=0; i < count; i++) {
    uploadAppIcon(i,list.get(i));
  }
  mState.iconCount=count;
  saveAppsList();
}","private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  mState.iconCount=count;
  uploadApps(list);
  saveAppsList();
}",0.8674698795180723
179933,"@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  Log.d(TAG,""String_Node_Str"");
  long startTime=SystemClock.uptimeMillis();
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
      Log.d(TAG,""String_Node_Str"");
    }
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
  long endTime=SystemClock.uptimeMillis();
  Log.d(TAG,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
}","@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  Log.d(TAG,""String_Node_Str"");
  long startTime=SystemClock.uptimeMillis();
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.mHasSurface=true;
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
      Log.d(TAG,""String_Node_Str"");
    }
  }
 else {
    mRollo.mHasSurface=true;
    mRollo.dirtyCheck();
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
  long endTime=SystemClock.uptimeMillis();
  Log.d(TAG,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
}",0.933426769446391
179934,"/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  uploadAppIcon(index,item);
}","/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
}",0.940119760479042
179935,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
}",0.8738738738738738
179936,"private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  for (int i=0; i < count; i++) {
    uploadAppIcon(i,list.get(i));
  }
  mState.iconCount=count;
  saveAppsList();
}","private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  mState.iconCount=count;
  uploadApps(list);
  saveAppsList();
}",0.8674698795180723
179937,"@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  Log.d(TAG,""String_Node_Str"");
  long startTime=SystemClock.uptimeMillis();
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
      Log.d(TAG,""String_Node_Str"");
    }
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
  long endTime=SystemClock.uptimeMillis();
  Log.d(TAG,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
}","@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  Log.d(TAG,""String_Node_Str"");
  long startTime=SystemClock.uptimeMillis();
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.mHasSurface=true;
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
      Log.d(TAG,""String_Node_Str"");
    }
  }
 else {
    mRollo.mHasSurface=true;
    mRollo.dirtyCheck();
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
  long endTime=SystemClock.uptimeMillis();
  Log.d(TAG,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
}",0.933426769446391
179938,"/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  uploadAppIcon(index,item);
}","/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
}",0.940119760479042
179939,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
}",0.8738738738738738
179940,"private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  for (int i=0; i < count; i++) {
    uploadAppIcon(i,list.get(i));
  }
  mState.iconCount=count;
  saveAppsList();
}","private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  mState.iconCount=count;
  uploadApps(list);
  saveAppsList();
}",0.8674698795180723
179941,"@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  Log.d(TAG,""String_Node_Str"");
  long startTime=SystemClock.uptimeMillis();
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
      Log.d(TAG,""String_Node_Str"");
    }
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
  long endTime=SystemClock.uptimeMillis();
  Log.d(TAG,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
}","@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  Log.d(TAG,""String_Node_Str"");
  long startTime=SystemClock.uptimeMillis();
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.mHasSurface=true;
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
      Log.d(TAG,""String_Node_Str"");
    }
  }
 else {
    mRollo.mHasSurface=true;
    mRollo.dirtyCheck();
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
  long endTime=SystemClock.uptimeMillis();
  Log.d(TAG,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
}",0.933426769446391
179942,"/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  uploadAppIcon(index,item);
}","/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
}",0.940119760479042
179943,"/** 
 * Implementation of the method from LauncherModel.Callbacks.
 */
void bindFolders(HashMap<Long,FolderInfo> folders){
  mFolders.putAll(folders);
}","/** 
 * Implementation of the method from LauncherModel.Callbacks.
 */
public void bindFolders(HashMap<Long,FolderInfo> folders){
  mFolders.clear();
  mFolders.putAll(folders);
}",0.918429003021148
179944,"/** 
 * Read everything out of our database.
 */
private void bindWorkspace(){
  final long t=SystemClock.uptimeMillis();
  Callbacks callbacks=mCallbacks.get();
  if (callbacks == null) {
    Log.w(TAG,""String_Node_Str"");
    return;
  }
  int N;
  mHandler.post(new Runnable(){
    public void run(){
      Callbacks callbacks=tryGetCallbacks();
      if (callbacks != null) {
        callbacks.startBinding();
      }
    }
  }
);
  N=mItems.size();
  for (int i=0; i < N; i+=ITEMS_CHUNK) {
    final int start=i;
    final int chunkSize=(i + ITEMS_CHUNK <= N) ? ITEMS_CHUNK : (N - i);
    mHandler.post(new Runnable(){
      public void run(){
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindItems(mItems,start,start + chunkSize);
        }
      }
    }
);
  }
  mHandler.postIdle(new Runnable(){
    public void run(){
      Log.d(TAG,""String_Node_Str"");
    }
  }
);
  final int currentScreen=callbacks.getCurrentWorkspaceScreen();
  N=mAppWidgets.size();
  for (int i=0; i < N; i++) {
    final LauncherAppWidgetInfo widget=mAppWidgets.get(i);
    if (widget.screen == currentScreen) {
      mHandler.post(new Runnable(){
        public void run(){
          Callbacks callbacks=tryGetCallbacks();
          if (callbacks != null) {
            callbacks.bindAppWidget(widget);
          }
        }
      }
);
    }
  }
  for (int i=0; i < N; i++) {
    final LauncherAppWidgetInfo widget=mAppWidgets.get(i);
    if (widget.screen != currentScreen) {
      mHandler.post(new Runnable(){
        public void run(){
          Callbacks callbacks=tryGetCallbacks();
          if (callbacks != null) {
            callbacks.bindAppWidget(widget);
          }
        }
      }
);
    }
  }
  mHandler.post(new Runnable(){
    public void run(){
      Callbacks callbacks=tryGetCallbacks();
      if (callbacks != null) {
        callbacks.finishBindingItems();
      }
    }
  }
);
  mHandler.post(new Runnable(){
    public void run(){
      Log.d(TAG,""String_Node_Str"" + (SystemClock.uptimeMillis() - t) + ""String_Node_Str"");
      if (Launcher.PROFILE_ROTATE) {
        android.os.Debug.stopMethodTracing();
      }
    }
  }
);
}","/** 
 * Read everything out of our database.
 */
private void bindWorkspace(){
  final long t=SystemClock.uptimeMillis();
  Callbacks callbacks=mCallbacks.get();
  if (callbacks == null) {
    Log.w(TAG,""String_Node_Str"");
    return;
  }
  int N;
  mHandler.post(new Runnable(){
    public void run(){
      Callbacks callbacks=tryGetCallbacks();
      if (callbacks != null) {
        callbacks.startBinding();
      }
    }
  }
);
  N=mItems.size();
  for (int i=0; i < N; i+=ITEMS_CHUNK) {
    final int start=i;
    final int chunkSize=(i + ITEMS_CHUNK <= N) ? ITEMS_CHUNK : (N - i);
    mHandler.post(new Runnable(){
      public void run(){
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindItems(mItems,start,start + chunkSize);
        }
      }
    }
);
  }
  mHandler.post(new Runnable(){
    public void run(){
      Callbacks callbacks=tryGetCallbacks();
      if (callbacks != null) {
        callbacks.bindFolders(mFolders);
      }
    }
  }
);
  mHandler.postIdle(new Runnable(){
    public void run(){
      Log.d(TAG,""String_Node_Str"");
    }
  }
);
  final int currentScreen=callbacks.getCurrentWorkspaceScreen();
  N=mAppWidgets.size();
  for (int i=0; i < N; i++) {
    final LauncherAppWidgetInfo widget=mAppWidgets.get(i);
    if (widget.screen == currentScreen) {
      mHandler.post(new Runnable(){
        public void run(){
          Callbacks callbacks=tryGetCallbacks();
          if (callbacks != null) {
            callbacks.bindAppWidget(widget);
          }
        }
      }
);
    }
  }
  for (int i=0; i < N; i++) {
    final LauncherAppWidgetInfo widget=mAppWidgets.get(i);
    if (widget.screen != currentScreen) {
      mHandler.post(new Runnable(){
        public void run(){
          Callbacks callbacks=tryGetCallbacks();
          if (callbacks != null) {
            callbacks.bindAppWidget(widget);
          }
        }
      }
);
    }
  }
  mHandler.post(new Runnable(){
    public void run(){
      Callbacks callbacks=tryGetCallbacks();
      if (callbacks != null) {
        callbacks.finishBindingItems();
      }
    }
  }
);
  mHandler.post(new Runnable(){
    public void run(){
      Log.d(TAG,""String_Node_Str"" + (SystemClock.uptimeMillis() - t) + ""String_Node_Str"");
      if (Launcher.PROFILE_ROTATE) {
        android.os.Debug.stopMethodTracing();
      }
    }
  }
);
}",0.9578694608164156
179945,"private void loadWorkspace(){
  long t=SystemClock.uptimeMillis();
  final Context context=mContext;
  final ContentResolver contentResolver=context.getContentResolver();
  final PackageManager manager=context.getPackageManager();
  mItems.clear();
  final Cursor c=contentResolver.query(LauncherSettings.Favorites.CONTENT_URI,null,null,null,null);
  try {
    final int idIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites._ID);
    final int intentIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.INTENT);
    final int titleIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.TITLE);
    final int iconTypeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_TYPE);
    final int iconIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON);
    final int iconPackageIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_PACKAGE);
    final int iconResourceIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_RESOURCE);
    final int containerIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CONTAINER);
    final int itemTypeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ITEM_TYPE);
    final int appWidgetIdIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.APPWIDGET_ID);
    final int screenIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SCREEN);
    final int cellXIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CELLX);
    final int cellYIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CELLY);
    final int spanXIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SPANX);
    final int spanYIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SPANY);
    final int uriIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.URI);
    final int displayModeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.DISPLAY_MODE);
    ApplicationInfo info;
    String intentDescription;
    Widget widgetInfo;
    LauncherAppWidgetInfo appWidgetInfo;
    int container;
    long id;
    Intent intent;
    while (!mStopped && c.moveToNext()) {
      try {
        int itemType=c.getInt(itemTypeIndex);
switch (itemType) {
case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
          intentDescription=c.getString(intentIndex);
        try {
          intent=Intent.parseUri(intentDescription,0);
        }
 catch (        URISyntaxException e) {
          continue;
        }
      if (itemType == LauncherSettings.Favorites.ITEM_TYPE_APPLICATION) {
        info=getApplicationInfo(manager,intent,context);
      }
 else {
        info=getApplicationInfoShortcut(c,context,iconTypeIndex,iconPackageIndex,iconResourceIndex,iconIndex);
      }
    if (info == null) {
      info=new ApplicationInfo();
      info.icon=manager.getDefaultActivityIcon();
    }
  if (info != null) {
    info.title=c.getString(titleIndex);
    info.intent=intent;
    info.id=c.getLong(idIndex);
    container=c.getInt(containerIndex);
    info.container=container;
    info.screen=c.getInt(screenIndex);
    info.cellX=c.getInt(cellXIndex);
    info.cellY=c.getInt(cellYIndex);
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
      mItems.add(info);
    break;
default :
  UserFolderInfo folderInfo=findOrMakeUserFolder(folders,container);
folderInfo.add(info);
break;
}
}
break;
case LauncherSettings.Favorites.ITEM_TYPE_USER_FOLDER:
id=c.getLong(idIndex);
UserFolderInfo folderInfo=findOrMakeUserFolder(folders,id);
folderInfo.title=c.getString(titleIndex);
folderInfo.id=id;
container=c.getInt(containerIndex);
folderInfo.container=container;
folderInfo.screen=c.getInt(screenIndex);
folderInfo.cellX=c.getInt(cellXIndex);
folderInfo.cellY=c.getInt(cellYIndex);
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
mItems.add(folderInfo);
break;
}
break;
case LauncherSettings.Favorites.ITEM_TYPE_LIVE_FOLDER:
id=c.getLong(idIndex);
LiveFolderInfo liveFolderInfo=findOrMakeLiveFolder(folders,id);
intentDescription=c.getString(intentIndex);
intent=null;
if (intentDescription != null) {
try {
intent=Intent.parseUri(intentDescription,0);
}
 catch (URISyntaxException e) {
}
}
liveFolderInfo.title=c.getString(titleIndex);
liveFolderInfo.id=id;
container=c.getInt(containerIndex);
liveFolderInfo.container=container;
liveFolderInfo.screen=c.getInt(screenIndex);
liveFolderInfo.cellX=c.getInt(cellXIndex);
liveFolderInfo.cellY=c.getInt(cellYIndex);
liveFolderInfo.uri=Uri.parse(c.getString(uriIndex));
liveFolderInfo.baseIntent=intent;
liveFolderInfo.displayMode=c.getInt(displayModeIndex);
loadLiveFolderIcon(context,c,iconTypeIndex,iconPackageIndex,iconResourceIndex,liveFolderInfo);
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
mItems.add(liveFolderInfo);
break;
}
break;
case LauncherSettings.Favorites.ITEM_TYPE_WIDGET_SEARCH:
widgetInfo=Widget.makeSearch();
container=c.getInt(containerIndex);
if (container != LauncherSettings.Favorites.CONTAINER_DESKTOP) {
Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"");
continue;
}
widgetInfo.id=c.getLong(idIndex);
widgetInfo.screen=c.getInt(screenIndex);
widgetInfo.container=container;
widgetInfo.cellX=c.getInt(cellXIndex);
widgetInfo.cellY=c.getInt(cellYIndex);
mItems.add(widgetInfo);
break;
case LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET:
int appWidgetId=c.getInt(appWidgetIdIndex);
appWidgetInfo=new LauncherAppWidgetInfo(appWidgetId);
appWidgetInfo.id=c.getLong(idIndex);
appWidgetInfo.screen=c.getInt(screenIndex);
appWidgetInfo.cellX=c.getInt(cellXIndex);
appWidgetInfo.cellY=c.getInt(cellYIndex);
appWidgetInfo.spanX=c.getInt(spanXIndex);
appWidgetInfo.spanY=c.getInt(spanYIndex);
container=c.getInt(containerIndex);
if (container != LauncherSettings.Favorites.CONTAINER_DESKTOP) {
Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"");
continue;
}
appWidgetInfo.container=c.getInt(containerIndex);
mAppWidgets.add(appWidgetInfo);
break;
}
}
 catch (Exception e) {
Log.w(TAG,""String_Node_Str"",e);
}
}
}
  finally {
c.close();
}
Log.d(TAG,""String_Node_Str"" + (SystemClock.uptimeMillis() - t) + ""String_Node_Str"");
}","private void loadWorkspace(){
  long t=SystemClock.uptimeMillis();
  final Context context=mContext;
  final ContentResolver contentResolver=context.getContentResolver();
  final PackageManager manager=context.getPackageManager();
  mItems.clear();
  final Cursor c=contentResolver.query(LauncherSettings.Favorites.CONTENT_URI,null,null,null,null);
  try {
    final int idIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites._ID);
    final int intentIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.INTENT);
    final int titleIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.TITLE);
    final int iconTypeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_TYPE);
    final int iconIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON);
    final int iconPackageIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_PACKAGE);
    final int iconResourceIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_RESOURCE);
    final int containerIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CONTAINER);
    final int itemTypeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ITEM_TYPE);
    final int appWidgetIdIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.APPWIDGET_ID);
    final int screenIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SCREEN);
    final int cellXIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CELLX);
    final int cellYIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CELLY);
    final int spanXIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SPANX);
    final int spanYIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SPANY);
    final int uriIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.URI);
    final int displayModeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.DISPLAY_MODE);
    ApplicationInfo info;
    String intentDescription;
    Widget widgetInfo;
    LauncherAppWidgetInfo appWidgetInfo;
    int container;
    long id;
    Intent intent;
    while (!mStopped && c.moveToNext()) {
      try {
        int itemType=c.getInt(itemTypeIndex);
switch (itemType) {
case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
          intentDescription=c.getString(intentIndex);
        try {
          intent=Intent.parseUri(intentDescription,0);
        }
 catch (        URISyntaxException e) {
          continue;
        }
      if (itemType == LauncherSettings.Favorites.ITEM_TYPE_APPLICATION) {
        info=getApplicationInfo(manager,intent,context);
      }
 else {
        info=getApplicationInfoShortcut(c,context,iconTypeIndex,iconPackageIndex,iconResourceIndex,iconIndex);
      }
    if (info == null) {
      info=new ApplicationInfo();
      info.icon=manager.getDefaultActivityIcon();
    }
  if (info != null) {
    info.title=c.getString(titleIndex);
    info.intent=intent;
    info.id=c.getLong(idIndex);
    container=c.getInt(containerIndex);
    info.container=container;
    info.screen=c.getInt(screenIndex);
    info.cellX=c.getInt(cellXIndex);
    info.cellY=c.getInt(cellYIndex);
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
      mItems.add(info);
    break;
default :
  UserFolderInfo folderInfo=findOrMakeUserFolder(mFolders,container);
folderInfo.add(info);
break;
}
}
break;
case LauncherSettings.Favorites.ITEM_TYPE_USER_FOLDER:
id=c.getLong(idIndex);
UserFolderInfo folderInfo=findOrMakeUserFolder(mFolders,id);
folderInfo.title=c.getString(titleIndex);
folderInfo.id=id;
container=c.getInt(containerIndex);
folderInfo.container=container;
folderInfo.screen=c.getInt(screenIndex);
folderInfo.cellX=c.getInt(cellXIndex);
folderInfo.cellY=c.getInt(cellYIndex);
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
mItems.add(folderInfo);
break;
}
mFolders.put(folderInfo.id,folderInfo);
break;
case LauncherSettings.Favorites.ITEM_TYPE_LIVE_FOLDER:
id=c.getLong(idIndex);
LiveFolderInfo liveFolderInfo=findOrMakeLiveFolder(mFolders,id);
intentDescription=c.getString(intentIndex);
intent=null;
if (intentDescription != null) {
try {
intent=Intent.parseUri(intentDescription,0);
}
 catch (URISyntaxException e) {
}
}
liveFolderInfo.title=c.getString(titleIndex);
liveFolderInfo.id=id;
container=c.getInt(containerIndex);
liveFolderInfo.container=container;
liveFolderInfo.screen=c.getInt(screenIndex);
liveFolderInfo.cellX=c.getInt(cellXIndex);
liveFolderInfo.cellY=c.getInt(cellYIndex);
liveFolderInfo.uri=Uri.parse(c.getString(uriIndex));
liveFolderInfo.baseIntent=intent;
liveFolderInfo.displayMode=c.getInt(displayModeIndex);
loadLiveFolderIcon(context,c,iconTypeIndex,iconPackageIndex,iconResourceIndex,liveFolderInfo);
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
mItems.add(liveFolderInfo);
break;
}
mFolders.put(liveFolderInfo.id,liveFolderInfo);
break;
case LauncherSettings.Favorites.ITEM_TYPE_WIDGET_SEARCH:
widgetInfo=Widget.makeSearch();
container=c.getInt(containerIndex);
if (container != LauncherSettings.Favorites.CONTAINER_DESKTOP) {
Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"");
continue;
}
widgetInfo.id=c.getLong(idIndex);
widgetInfo.screen=c.getInt(screenIndex);
widgetInfo.container=container;
widgetInfo.cellX=c.getInt(cellXIndex);
widgetInfo.cellY=c.getInt(cellYIndex);
mItems.add(widgetInfo);
break;
case LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET:
int appWidgetId=c.getInt(appWidgetIdIndex);
appWidgetInfo=new LauncherAppWidgetInfo(appWidgetId);
appWidgetInfo.id=c.getLong(idIndex);
appWidgetInfo.screen=c.getInt(screenIndex);
appWidgetInfo.cellX=c.getInt(cellXIndex);
appWidgetInfo.cellY=c.getInt(cellYIndex);
appWidgetInfo.spanX=c.getInt(spanXIndex);
appWidgetInfo.spanY=c.getInt(spanYIndex);
container=c.getInt(containerIndex);
if (container != LauncherSettings.Favorites.CONTAINER_DESKTOP) {
Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"");
continue;
}
appWidgetInfo.container=c.getInt(containerIndex);
mAppWidgets.add(appWidgetInfo);
break;
}
}
 catch (Exception e) {
Log.w(TAG,""String_Node_Str"",e);
}
}
}
  finally {
c.close();
}
Log.d(TAG,""String_Node_Str"" + (SystemClock.uptimeMillis() - t) + ""String_Node_Str"");
}",0.9921080465381172
179946,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int widthSize=resolveSize(mBitmap.getWidth(),widthMeasureSpec);
  int heightSize=resolveSize(mBitmap.getHeight(),heightMeasureSpec);
  setMeasuredDimension(widthSize,heightSize);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  setMeasuredDimension(mBitmap.getWidth(),mBitmap.getHeight());
}",0.5798525798525799
179947,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int widthSize=resolveSize(mBitmap.getWidth(),widthMeasureSpec);
  int heightSize=resolveSize(mBitmap.getHeight(),heightMeasureSpec);
  setMeasuredDimension(widthSize,heightSize);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  setMeasuredDimension(mBitmap.getWidth(),mBitmap.getHeight());
}",0.5798525798525799
179948,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int widthSize=resolveSize(mBitmap.getWidth(),widthMeasureSpec);
  int heightSize=resolveSize(mBitmap.getHeight(),heightMeasureSpec);
  setMeasuredDimension(widthSize,heightSize);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  setMeasuredDimension(mBitmap.getWidth(),mBitmap.getHeight());
}",0.5798525798525799
179949,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int widthSize=resolveSize(mBitmap.getWidth(),widthMeasureSpec);
  int heightSize=resolveSize(mBitmap.getHeight(),heightMeasureSpec);
  setMeasuredDimension(widthSize,heightSize);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  setMeasuredDimension(mBitmap.getWidth(),mBitmap.getHeight());
}",0.5798525798525799
179950,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
}",0.8738738738738738
179951,"private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  for (int i=0; i < count; i++) {
    uploadAppIcon(i,list.get(i));
  }
  mState.iconCount=count;
  saveAppsList();
}","private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  mState.iconCount=count;
  uploadApps(list);
  saveAppsList();
}",0.8674698795180723
179952,"@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  Log.d(TAG,""String_Node_Str"");
  long startTime=SystemClock.uptimeMillis();
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
      Log.d(TAG,""String_Node_Str"");
    }
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
  long endTime=SystemClock.uptimeMillis();
  Log.d(TAG,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
}","@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  Log.d(TAG,""String_Node_Str"");
  long startTime=SystemClock.uptimeMillis();
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.mHasSurface=true;
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
      Log.d(TAG,""String_Node_Str"");
    }
  }
 else {
    mRollo.mHasSurface=true;
    mRollo.dirtyCheck();
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
  long endTime=SystemClock.uptimeMillis();
  Log.d(TAG,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
}",0.933426769446391
179953,"/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  uploadAppIcon(index,item);
}","/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
}",0.940119760479042
179954,"/** 
 * Update the title and icon.  Don't keep a reference to the context!
 */
private static void updateTitleAndIcon(ResolveInfo info,ApplicationInfo application,Context context,Utilities.BubbleText bubble){
  final PackageManager packageManager=context.getPackageManager();
  application.title=info.loadLabel(packageManager);
  if (application.title == null) {
    application.title=info.activityInfo.name;
  }
  application.iconBitmap=Utilities.createAllAppsBitmap(info.activityInfo.loadIcon(packageManager),context);
  application.filtered=true;
  application.titleBitmap=bubble.createTextBitmap(application.title.toString());
}","/** 
 * Update the title and icon.  Don't keep a reference to the context!
 */
private static void updateTitleAndIcon(ResolveInfo info,ApplicationInfo application,Context context,Utilities.BubbleText bubble){
  final PackageManager packageManager=context.getPackageManager();
  application.title=info.loadLabel(packageManager);
  if (application.title == null) {
    application.title=info.activityInfo.name;
  }
  application.iconBitmap=Utilities.createAllAppsBitmap(info.activityInfo.loadIcon(packageManager),context);
  application.titleBitmap=bubble.createTextBitmap(application.title.toString());
}",0.8744939271255061
179955,"public ApplicationsAdapter(Context context,ArrayList<ApplicationInfo> apps){
  super(context,0,apps);
  mInflater=LayoutInflater.from(context);
}","public ApplicationsAdapter(Context context,ArrayList<ApplicationInfo> apps){
  super(context,0,apps);
  mPackageManager=context.getPackageManager();
  mInflater=LayoutInflater.from(context);
}",0.8605341246290801
179956,"@Override public View getView(int position,View convertView,ViewGroup parent){
  final ApplicationInfo info=getItem(position);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.application_boxed,parent,false);
  }
  if (!info.filtered) {
    info.icon=Utilities.createIconThumbnail(info.icon,getContext());
    info.filtered=true;
  }
  final TextView textView=(TextView)convertView;
  textView.setCompoundDrawablesWithIntrinsicBounds(null,info.icon,null,null);
  textView.setText(info.title);
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  final ApplicationInfo info=getItem(position);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.application_boxed,parent,false);
  }
  if (info.icon == null) {
    info.icon=AppInfoCache.getIconDrawable(mPackageManager,info);
  }
  if (!info.filtered) {
    info.icon=Utilities.createIconThumbnail(info.icon,getContext());
    info.filtered=true;
  }
  final TextView textView=(TextView)convertView;
  textView.setCompoundDrawablesWithIntrinsicBounds(null,info.icon,null,null);
  textView.setText(info.title);
  return convertView;
}",0.9174468085106384
179957,"/** 
 * Update the title and icon.  Don't keep a reference to the context!
 */
private static void updateTitleAndIcon(ResolveInfo info,ApplicationInfo application,Context context,Utilities.BubbleText bubble){
  final PackageManager packageManager=context.getPackageManager();
  application.title=info.loadLabel(packageManager);
  if (application.title == null) {
    application.title=info.activityInfo.name;
  }
  application.iconBitmap=Utilities.createAllAppsBitmap(info.activityInfo.loadIcon(packageManager),context);
  application.filtered=true;
  application.titleBitmap=bubble.createTextBitmap(application.title.toString());
}","/** 
 * Update the title and icon.  Don't keep a reference to the context!
 */
private static void updateTitleAndIcon(ResolveInfo info,ApplicationInfo application,Context context,Utilities.BubbleText bubble){
  final PackageManager packageManager=context.getPackageManager();
  application.title=info.loadLabel(packageManager);
  if (application.title == null) {
    application.title=info.activityInfo.name;
  }
  application.iconBitmap=Utilities.createAllAppsBitmap(info.activityInfo.loadIcon(packageManager),context);
  application.titleBitmap=bubble.createTextBitmap(application.title.toString());
}",0.8744939271255061
179958,"public ApplicationsAdapter(Context context,ArrayList<ApplicationInfo> apps){
  super(context,0,apps);
  mInflater=LayoutInflater.from(context);
}","public ApplicationsAdapter(Context context,ArrayList<ApplicationInfo> apps){
  super(context,0,apps);
  mPackageManager=context.getPackageManager();
  mInflater=LayoutInflater.from(context);
}",0.8605341246290801
179959,"@Override public View getView(int position,View convertView,ViewGroup parent){
  final ApplicationInfo info=getItem(position);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.application_boxed,parent,false);
  }
  if (!info.filtered) {
    info.icon=Utilities.createIconThumbnail(info.icon,getContext());
    info.filtered=true;
  }
  final TextView textView=(TextView)convertView;
  textView.setCompoundDrawablesWithIntrinsicBounds(null,info.icon,null,null);
  textView.setText(info.title);
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  final ApplicationInfo info=getItem(position);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.application_boxed,parent,false);
  }
  if (info.icon == null) {
    info.icon=AppInfoCache.getIconDrawable(mPackageManager,info);
  }
  if (!info.filtered) {
    info.icon=Utilities.createIconThumbnail(info.icon,getContext());
    info.filtered=true;
  }
  final TextView textView=(TextView)convertView;
  textView.setCompoundDrawablesWithIntrinsicBounds(null,info.icon,null,null);
  textView.setText(info.title);
  return convertView;
}",0.9174468085106384
179960,"/** 
 * Update the title and icon.  Don't keep a reference to the context!
 */
private static void updateTitleAndIcon(ResolveInfo info,ApplicationInfo application,Context context,Utilities.BubbleText bubble){
  final PackageManager packageManager=context.getPackageManager();
  application.title=info.loadLabel(packageManager);
  if (application.title == null) {
    application.title=info.activityInfo.name;
  }
  application.iconBitmap=Utilities.createAllAppsBitmap(info.activityInfo.loadIcon(packageManager),context);
  application.filtered=true;
  application.titleBitmap=bubble.createTextBitmap(application.title.toString());
}","/** 
 * Update the title and icon.  Don't keep a reference to the context!
 */
private static void updateTitleAndIcon(ResolveInfo info,ApplicationInfo application,Context context,Utilities.BubbleText bubble){
  final PackageManager packageManager=context.getPackageManager();
  application.title=info.loadLabel(packageManager);
  if (application.title == null) {
    application.title=info.activityInfo.name;
  }
  application.iconBitmap=Utilities.createAllAppsBitmap(info.activityInfo.loadIcon(packageManager),context);
  application.titleBitmap=bubble.createTextBitmap(application.title.toString());
}",0.8744939271255061
179961,"public ApplicationsAdapter(Context context,ArrayList<ApplicationInfo> apps){
  super(context,0,apps);
  mInflater=LayoutInflater.from(context);
}","public ApplicationsAdapter(Context context,ArrayList<ApplicationInfo> apps){
  super(context,0,apps);
  mPackageManager=context.getPackageManager();
  mInflater=LayoutInflater.from(context);
}",0.8605341246290801
179962,"@Override public View getView(int position,View convertView,ViewGroup parent){
  final ApplicationInfo info=getItem(position);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.application_boxed,parent,false);
  }
  if (!info.filtered) {
    info.icon=Utilities.createIconThumbnail(info.icon,getContext());
    info.filtered=true;
  }
  final TextView textView=(TextView)convertView;
  textView.setCompoundDrawablesWithIntrinsicBounds(null,info.icon,null,null);
  textView.setText(info.title);
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  final ApplicationInfo info=getItem(position);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.application_boxed,parent,false);
  }
  if (info.icon == null) {
    info.icon=AppInfoCache.getIconDrawable(mPackageManager,info);
  }
  if (!info.filtered) {
    info.icon=Utilities.createIconThumbnail(info.icon,getContext());
    info.filtered=true;
  }
  final TextView textView=(TextView)convertView;
  textView.setCompoundDrawablesWithIntrinsicBounds(null,info.icon,null,null);
  textView.setText(info.title);
  return convertView;
}",0.9174468085106384
179963,"/** 
 * Update the title and icon.  Don't keep a reference to the context!
 */
private static void updateTitleAndIcon(ResolveInfo info,ApplicationInfo application,Context context,Utilities.BubbleText bubble){
  final PackageManager packageManager=context.getPackageManager();
  application.title=info.loadLabel(packageManager);
  if (application.title == null) {
    application.title=info.activityInfo.name;
  }
  application.iconBitmap=Utilities.createAllAppsBitmap(info.activityInfo.loadIcon(packageManager),context);
  application.filtered=true;
  application.titleBitmap=bubble.createTextBitmap(application.title.toString());
}","/** 
 * Update the title and icon.  Don't keep a reference to the context!
 */
private static void updateTitleAndIcon(ResolveInfo info,ApplicationInfo application,Context context,Utilities.BubbleText bubble){
  final PackageManager packageManager=context.getPackageManager();
  application.title=info.loadLabel(packageManager);
  if (application.title == null) {
    application.title=info.activityInfo.name;
  }
  application.iconBitmap=Utilities.createAllAppsBitmap(info.activityInfo.loadIcon(packageManager),context);
  application.titleBitmap=bubble.createTextBitmap(application.title.toString());
}",0.8744939271255061
179964,"public ApplicationsAdapter(Context context,ArrayList<ApplicationInfo> apps){
  super(context,0,apps);
  mInflater=LayoutInflater.from(context);
}","public ApplicationsAdapter(Context context,ArrayList<ApplicationInfo> apps){
  super(context,0,apps);
  mPackageManager=context.getPackageManager();
  mInflater=LayoutInflater.from(context);
}",0.8605341246290801
179965,"@Override public View getView(int position,View convertView,ViewGroup parent){
  final ApplicationInfo info=getItem(position);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.application_boxed,parent,false);
  }
  if (!info.filtered) {
    info.icon=Utilities.createIconThumbnail(info.icon,getContext());
    info.filtered=true;
  }
  final TextView textView=(TextView)convertView;
  textView.setCompoundDrawablesWithIntrinsicBounds(null,info.icon,null,null);
  textView.setText(info.title);
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  final ApplicationInfo info=getItem(position);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.application_boxed,parent,false);
  }
  if (info.icon == null) {
    info.icon=AppInfoCache.getIconDrawable(mPackageManager,info);
  }
  if (!info.filtered) {
    info.icon=Utilities.createIconThumbnail(info.icon,getContext());
    info.filtered=true;
  }
  final TextView textView=(TextView)convertView;
  textView.setCompoundDrawablesWithIntrinsicBounds(null,info.icon,null,null);
  textView.setText(info.title);
  return convertView;
}",0.9174468085106384
179966,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      int whichApp=mRollo.mState.selectedIconIndex;
      if (whichApp >= 0) {
        ApplicationInfo app=mAllAppsList.get(whichApp);
        mLauncher.startActivitySafely(app.intent);
      }
    }
  }
  if (mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=(int)mRollo.mMessageProc.mPosX;
    int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (currentPageRow > 0) {
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
 else       if (currentTopRow > 0) {
        mRollo.moveTo(currentTopRow - 1);
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (currentSelection < mRollo.mState.iconCount - Defines.COLUMNS_PER_PAGE) {
    if (currentPageRow < Defines.ROWS_PER_PAGE - 1) {
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
 else {
      mRollo.moveTo(currentTopRow + 1);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < mRollo.mState.iconCount - 1)) {
newSelection=currentSelection + 1;
}
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection);
mRollo.mState.save();
}
}
return true;
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (!isVisible()) {
    return false;
  }
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      int whichApp=mRollo.mState.selectedIconIndex;
      if (whichApp >= 0) {
        ApplicationInfo app=mAllAppsList.get(whichApp);
        mLauncher.startActivitySafely(app.intent);
      }
    }
  }
  if (mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=(int)mRollo.mMessageProc.mPosX;
    int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (currentPageRow > 0) {
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
 else       if (currentTopRow > 0) {
        mRollo.moveTo(currentTopRow - 1);
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (currentSelection < mRollo.mState.iconCount - Defines.COLUMNS_PER_PAGE) {
    if (currentPageRow < Defines.ROWS_PER_PAGE - 1) {
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
 else {
      mRollo.moveTo(currentTopRow + 1);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < mRollo.mState.iconCount - 1)) {
newSelection=currentSelection + 1;
}
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection);
mRollo.mState.save();
}
}
return true;
}",0.988463555322496
179967,"@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (gainFocus) {
    if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
      mArrowNavigation=true;
      mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE);
      mRollo.mState.save();
    }
  }
 else {
    if (mArrowNavigation) {
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
      mArrowNavigation=false;
    }
  }
}","@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
      mArrowNavigation=true;
      mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE);
      mRollo.mState.save();
    }
  }
 else {
    if (mArrowNavigation) {
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
      mArrowNavigation=false;
    }
  }
}",0.966252220248668
179968,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      int whichApp=mRollo.mState.selectedIconIndex;
      if (whichApp >= 0) {
        ApplicationInfo app=mAllAppsList.get(whichApp);
        mLauncher.startActivitySafely(app.intent);
      }
    }
  }
  if (mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=(int)mRollo.mMessageProc.mPosX;
    int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (currentPageRow > 0) {
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
 else       if (currentTopRow > 0) {
        mRollo.moveTo(currentTopRow - 1);
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (currentSelection < mRollo.mState.iconCount - Defines.COLUMNS_PER_PAGE) {
    if (currentPageRow < Defines.ROWS_PER_PAGE - 1) {
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
 else {
      mRollo.moveTo(currentTopRow + 1);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < mRollo.mState.iconCount - 1)) {
newSelection=currentSelection + 1;
}
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection);
mRollo.mState.save();
}
}
return true;
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (!isVisible()) {
    return false;
  }
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      int whichApp=mRollo.mState.selectedIconIndex;
      if (whichApp >= 0) {
        ApplicationInfo app=mAllAppsList.get(whichApp);
        mLauncher.startActivitySafely(app.intent);
      }
    }
  }
  if (mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=(int)mRollo.mMessageProc.mPosX;
    int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (currentPageRow > 0) {
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
 else       if (currentTopRow > 0) {
        mRollo.moveTo(currentTopRow - 1);
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (currentSelection < mRollo.mState.iconCount - Defines.COLUMNS_PER_PAGE) {
    if (currentPageRow < Defines.ROWS_PER_PAGE - 1) {
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
 else {
      mRollo.moveTo(currentTopRow + 1);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < mRollo.mState.iconCount - 1)) {
newSelection=currentSelection + 1;
}
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection);
mRollo.mState.save();
}
}
return true;
}",0.988463555322496
179969,"@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (gainFocus) {
    if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
      mArrowNavigation=true;
      mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE);
      mRollo.mState.save();
    }
  }
 else {
    if (mArrowNavigation) {
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
      mArrowNavigation=false;
    }
  }
}","@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
      mArrowNavigation=true;
      mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE);
      mRollo.mState.save();
    }
  }
 else {
    if (mArrowNavigation) {
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
      mArrowNavigation=false;
    }
  }
}",0.966252220248668
179970,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      int whichApp=mRollo.mState.selectedIconIndex;
      if (whichApp >= 0) {
        ApplicationInfo app=mAllAppsList.get(whichApp);
        mLauncher.startActivitySafely(app.intent);
      }
    }
  }
  if (mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=(int)mRollo.mMessageProc.mPosX;
    int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (currentPageRow > 0) {
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
 else       if (currentTopRow > 0) {
        mRollo.moveTo(currentTopRow - 1);
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (currentSelection < mRollo.mState.iconCount - Defines.COLUMNS_PER_PAGE) {
    if (currentPageRow < Defines.ROWS_PER_PAGE - 1) {
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
 else {
      mRollo.moveTo(currentTopRow + 1);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < mRollo.mState.iconCount - 1)) {
newSelection=currentSelection + 1;
}
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection);
mRollo.mState.save();
}
}
return true;
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (!isVisible()) {
    return false;
  }
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      int whichApp=mRollo.mState.selectedIconIndex;
      if (whichApp >= 0) {
        ApplicationInfo app=mAllAppsList.get(whichApp);
        mLauncher.startActivitySafely(app.intent);
      }
    }
  }
  if (mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=(int)mRollo.mMessageProc.mPosX;
    int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (currentPageRow > 0) {
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
 else       if (currentTopRow > 0) {
        mRollo.moveTo(currentTopRow - 1);
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (currentSelection < mRollo.mState.iconCount - Defines.COLUMNS_PER_PAGE) {
    if (currentPageRow < Defines.ROWS_PER_PAGE - 1) {
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
 else {
      mRollo.moveTo(currentTopRow + 1);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < mRollo.mState.iconCount - 1)) {
newSelection=currentSelection + 1;
}
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection);
mRollo.mState.save();
}
}
return true;
}",0.988463555322496
179971,"@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (gainFocus) {
    if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
      mArrowNavigation=true;
      mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE);
      mRollo.mState.save();
    }
  }
 else {
    if (mArrowNavigation) {
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
      mArrowNavigation=false;
    }
  }
}","@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
      mArrowNavigation=true;
      mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE);
      mRollo.mState.save();
    }
  }
 else {
    if (mArrowNavigation) {
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
      mArrowNavigation=false;
    }
  }
}",0.966252220248668
179972,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      int whichApp=mRollo.mState.selectedIconIndex;
      if (whichApp >= 0) {
        ApplicationInfo app=mAllAppsList.get(whichApp);
        mLauncher.startActivitySafely(app.intent);
      }
    }
  }
  if (mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=(int)mRollo.mMessageProc.mPosX;
    int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (currentPageRow > 0) {
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
 else       if (currentTopRow > 0) {
        mRollo.moveTo(currentTopRow - 1);
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (currentSelection < mRollo.mState.iconCount - Defines.COLUMNS_PER_PAGE) {
    if (currentPageRow < Defines.ROWS_PER_PAGE - 1) {
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
 else {
      mRollo.moveTo(currentTopRow + 1);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < mRollo.mState.iconCount - 1)) {
newSelection=currentSelection + 1;
}
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection);
mRollo.mState.save();
}
}
return true;
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (!isVisible()) {
    return false;
  }
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      int whichApp=mRollo.mState.selectedIconIndex;
      if (whichApp >= 0) {
        ApplicationInfo app=mAllAppsList.get(whichApp);
        mLauncher.startActivitySafely(app.intent);
      }
    }
  }
  if (mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=(int)mRollo.mMessageProc.mPosX;
    int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (currentPageRow > 0) {
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
 else       if (currentTopRow > 0) {
        mRollo.moveTo(currentTopRow - 1);
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (currentSelection < mRollo.mState.iconCount - Defines.COLUMNS_PER_PAGE) {
    if (currentPageRow < Defines.ROWS_PER_PAGE - 1) {
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
 else {
      mRollo.moveTo(currentTopRow + 1);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < mRollo.mState.iconCount - 1)) {
newSelection=currentSelection + 1;
}
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection);
mRollo.mState.save();
}
}
return true;
}",0.988463555322496
179973,"@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (gainFocus) {
    if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
      mArrowNavigation=true;
      mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE);
      mRollo.mState.save();
    }
  }
 else {
    if (mArrowNavigation) {
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
      mArrowNavigation=false;
    }
  }
}","@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
      mArrowNavigation=true;
      mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE);
      mRollo.mState.save();
    }
  }
 else {
    if (mArrowNavigation) {
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
      mArrowNavigation=false;
    }
  }
}",0.966252220248668
179974,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else if (mTouchTracking == TRACKING_FLING) {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}",0.977587343441002
179975,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  mModel.setAllAppsDirty();
  mModel.setWorkspaceDirty();
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}",0.9673055242390078
179976,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  mModel.setAllAppsDirty();
  mModel.setWorkspaceDirty();
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}",0.9673055242390078
179977,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  mModel.setAllAppsDirty();
  mModel.setWorkspaceDirty();
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}",0.9673055242390078
179978,"public void onClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return;
  }
  int index=mRollo.mState.selectedIconIndex;
  if (mRollo.checkClickOK() && index >= 0 && index < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(index);
    mLauncher.startActivitySafely(app.intent);
  }
}","public void onClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return;
  }
  if (mRollo.checkClickOK() && mCurrentIconIndex == mDownIconIndex && mCurrentIconIndex >= 0 && mCurrentIconIndex < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(mCurrentIconIndex);
    mLauncher.startActivitySafely(app.intent);
  }
}",0.8025078369905956
179979,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    mLastMotionX=x;
    mLastMotionY=y;
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int slopX;
if (mRotateMove) {
  slopX=Math.abs(y - mLastMotionY);
}
 else {
  slopX=Math.abs(x - mLastMotionX);
}
if (!mStartedScrolling && slopX < mSlopX) {
}
 else {
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
  mLastMotionX=x;
  mLastMotionY=y;
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
mLastMotionX=-10000;
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}",0.86651302960468
179980,"void selectIcon(int index){
  int iconCount=mAllAppsList.size();
  if (index < 0 || index >= iconCount) {
    mState.selectedIconIndex=-1;
    return;
  }
 else {
    mState.selectedIconIndex=index;
    Bitmap selectionBitmap=mSelectionBitmap;
    Utilities.drawSelectedAllAppsBitmap(mSelectionCanvas,selectionBitmap.getWidth(),selectionBitmap.getHeight(),mAllAppsList.get(index).iconBitmap);
    mSelectedIcon=Allocation.createFromBitmap(mRS,selectionBitmap,Element.RGBA_8888(mRS),false);
    mSelectedIcon.uploadToTexture(0);
    mState.selectedIconTexture=mSelectedIcon.getID();
  }
}","void selectIcon(int index){
  if (index < 0) {
    mState.selectedIconIndex=-1;
  }
 else {
    mState.selectedIconIndex=index;
    Bitmap selectionBitmap=mSelectionBitmap;
    Utilities.drawSelectedAllAppsBitmap(mSelectionCanvas,selectionBitmap.getWidth(),selectionBitmap.getHeight(),mAllAppsList.get(index).iconBitmap);
    mSelectedIcon=Allocation.createFromBitmap(mRS,selectionBitmap,Element.RGBA_8888(mRS),false);
    mSelectedIcon.uploadToTexture(0);
    mState.selectedIconTexture=mSelectedIcon.getID();
  }
}",0.9356300997280144
179981,"public boolean onLongClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return true;
  }
  int index=mRollo.mState.selectedIconIndex;
  if (mRollo.checkClickOK() && index >= 0 && index < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(index);
    int screenX=mMotionDownRawX - (mDefines.ICON_WIDTH_PX / 2);
    int screenY=mMotionDownRawY - mDefines.ICON_HEIGHT_PX;
    int left=(mDefines.ICON_TEXTURE_WIDTH_PX - mDefines.ICON_WIDTH_PX) / 2;
    int top=(mDefines.ICON_TEXTURE_HEIGHT_PX - mDefines.ICON_HEIGHT_PX) / 2;
    mDragController.startDrag(app.iconBitmap,screenX,screenY,left,top,mDefines.ICON_WIDTH_PX,mDefines.ICON_HEIGHT_PX,this,app,DragController.DRAG_ACTION_COPY);
    mLauncher.closeAllApps(true);
  }
  return true;
}","public boolean onLongClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return true;
  }
  if (mRollo.checkClickOK() && mCurrentIconIndex == mDownIconIndex && mCurrentIconIndex >= 0 && mCurrentIconIndex < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(mCurrentIconIndex);
    int screenX=mMotionDownRawX - (mDefines.ICON_WIDTH_PX / 2);
    int screenY=mMotionDownRawY - mDefines.ICON_HEIGHT_PX;
    int left=(mDefines.ICON_TEXTURE_WIDTH_PX - mDefines.ICON_WIDTH_PX) / 2;
    int top=(mDefines.ICON_TEXTURE_HEIGHT_PX - mDefines.ICON_HEIGHT_PX) / 2;
    mDragController.startDrag(app.iconBitmap,screenX,screenY,left,top,mDefines.ICON_WIDTH_PX,mDefines.ICON_HEIGHT_PX,this,app,DragController.DRAG_ACTION_COPY);
    mLauncher.closeAllApps(true);
  }
  return true;
}",0.9128738621586476
179982,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  mModel.setAllAppsDirty();
  mModel.setWorkspaceDirty();
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}",0.9673055242390078
179983,"public void onClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return;
  }
  int index=mRollo.mState.selectedIconIndex;
  if (mRollo.checkClickOK() && index >= 0 && index < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(index);
    mLauncher.startActivitySafely(app.intent);
  }
}","public void onClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return;
  }
  if (mRollo.checkClickOK() && mCurrentIconIndex == mDownIconIndex && mCurrentIconIndex >= 0 && mCurrentIconIndex < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(mCurrentIconIndex);
    mLauncher.startActivitySafely(app.intent);
  }
}",0.8025078369905956
179984,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    mLastMotionX=x;
    mLastMotionY=y;
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int slopX;
if (mRotateMove) {
  slopX=Math.abs(y - mLastMotionY);
}
 else {
  slopX=Math.abs(x - mLastMotionX);
}
if (!mStartedScrolling && slopX < mSlopX) {
}
 else {
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
  mLastMotionX=x;
  mLastMotionY=y;
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
mLastMotionX=-10000;
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}",0.86651302960468
179985,"void selectIcon(int index){
  int iconCount=mAllAppsList.size();
  if (index < 0 || index >= iconCount) {
    mState.selectedIconIndex=-1;
    return;
  }
 else {
    mState.selectedIconIndex=index;
    Bitmap selectionBitmap=mSelectionBitmap;
    Utilities.drawSelectedAllAppsBitmap(mSelectionCanvas,selectionBitmap.getWidth(),selectionBitmap.getHeight(),mAllAppsList.get(index).iconBitmap);
    mSelectedIcon=Allocation.createFromBitmap(mRS,selectionBitmap,Element.RGBA_8888(mRS),false);
    mSelectedIcon.uploadToTexture(0);
    mState.selectedIconTexture=mSelectedIcon.getID();
  }
}","void selectIcon(int index){
  if (index < 0) {
    mState.selectedIconIndex=-1;
  }
 else {
    mState.selectedIconIndex=index;
    Bitmap selectionBitmap=mSelectionBitmap;
    Utilities.drawSelectedAllAppsBitmap(mSelectionCanvas,selectionBitmap.getWidth(),selectionBitmap.getHeight(),mAllAppsList.get(index).iconBitmap);
    mSelectedIcon=Allocation.createFromBitmap(mRS,selectionBitmap,Element.RGBA_8888(mRS),false);
    mSelectedIcon.uploadToTexture(0);
    mState.selectedIconTexture=mSelectedIcon.getID();
  }
}",0.9356300997280144
179986,"public boolean onLongClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return true;
  }
  int index=mRollo.mState.selectedIconIndex;
  if (mRollo.checkClickOK() && index >= 0 && index < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(index);
    int screenX=mMotionDownRawX - (mDefines.ICON_WIDTH_PX / 2);
    int screenY=mMotionDownRawY - mDefines.ICON_HEIGHT_PX;
    int left=(mDefines.ICON_TEXTURE_WIDTH_PX - mDefines.ICON_WIDTH_PX) / 2;
    int top=(mDefines.ICON_TEXTURE_HEIGHT_PX - mDefines.ICON_HEIGHT_PX) / 2;
    mDragController.startDrag(app.iconBitmap,screenX,screenY,left,top,mDefines.ICON_WIDTH_PX,mDefines.ICON_HEIGHT_PX,this,app,DragController.DRAG_ACTION_COPY);
    mLauncher.closeAllApps(true);
  }
  return true;
}","public boolean onLongClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return true;
  }
  if (mRollo.checkClickOK() && mCurrentIconIndex == mDownIconIndex && mCurrentIconIndex >= 0 && mCurrentIconIndex < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(mCurrentIconIndex);
    int screenX=mMotionDownRawX - (mDefines.ICON_WIDTH_PX / 2);
    int screenY=mMotionDownRawY - mDefines.ICON_HEIGHT_PX;
    int left=(mDefines.ICON_TEXTURE_WIDTH_PX - mDefines.ICON_WIDTH_PX) / 2;
    int top=(mDefines.ICON_TEXTURE_HEIGHT_PX - mDefines.ICON_HEIGHT_PX) / 2;
    mDragController.startDrag(app.iconBitmap,screenX,screenY,left,top,mDefines.ICON_WIDTH_PX,mDefines.ICON_HEIGHT_PX,this,app,DragController.DRAG_ACTION_COPY);
    mLauncher.closeAllApps(true);
  }
  return true;
}",0.9128738621586476
179987,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else if (mTouchTracking == TRACKING_FLING) {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}",0.977587343441002
179988,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else if (mTouchTracking == TRACKING_FLING) {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}",0.977587343441002
179989,"public void onClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return;
  }
  int index=mRollo.mState.selectedIconIndex;
  if (mRollo.checkClickOK() && index >= 0 && index < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(index);
    mLauncher.startActivitySafely(app.intent);
  }
}","public void onClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return;
  }
  if (mRollo.checkClickOK() && mCurrentIconIndex == mDownIconIndex && mCurrentIconIndex >= 0 && mCurrentIconIndex < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(mCurrentIconIndex);
    mLauncher.startActivitySafely(app.intent);
  }
}",0.8025078369905956
179990,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    mLastMotionX=x;
    mLastMotionY=y;
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int slopX;
if (mRotateMove) {
  slopX=Math.abs(y - mLastMotionY);
}
 else {
  slopX=Math.abs(x - mLastMotionX);
}
if (!mStartedScrolling && slopX < mSlopX) {
}
 else {
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
  mLastMotionX=x;
  mLastMotionY=y;
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
mLastMotionX=-10000;
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}",0.86651302960468
179991,"void selectIcon(int index){
  int iconCount=mAllAppsList.size();
  if (index < 0 || index >= iconCount) {
    mState.selectedIconIndex=-1;
    return;
  }
 else {
    mState.selectedIconIndex=index;
    Bitmap selectionBitmap=mSelectionBitmap;
    Utilities.drawSelectedAllAppsBitmap(mSelectionCanvas,selectionBitmap.getWidth(),selectionBitmap.getHeight(),mAllAppsList.get(index).iconBitmap);
    mSelectedIcon=Allocation.createFromBitmap(mRS,selectionBitmap,Element.RGBA_8888(mRS),false);
    mSelectedIcon.uploadToTexture(0);
    mState.selectedIconTexture=mSelectedIcon.getID();
  }
}","void selectIcon(int index){
  if (index < 0) {
    mState.selectedIconIndex=-1;
  }
 else {
    mState.selectedIconIndex=index;
    Bitmap selectionBitmap=mSelectionBitmap;
    Utilities.drawSelectedAllAppsBitmap(mSelectionCanvas,selectionBitmap.getWidth(),selectionBitmap.getHeight(),mAllAppsList.get(index).iconBitmap);
    mSelectedIcon=Allocation.createFromBitmap(mRS,selectionBitmap,Element.RGBA_8888(mRS),false);
    mSelectedIcon.uploadToTexture(0);
    mState.selectedIconTexture=mSelectedIcon.getID();
  }
}",0.9356300997280144
179992,"public boolean onLongClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return true;
  }
  int index=mRollo.mState.selectedIconIndex;
  if (mRollo.checkClickOK() && index >= 0 && index < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(index);
    int screenX=mMotionDownRawX - (mDefines.ICON_WIDTH_PX / 2);
    int screenY=mMotionDownRawY - mDefines.ICON_HEIGHT_PX;
    int left=(mDefines.ICON_TEXTURE_WIDTH_PX - mDefines.ICON_WIDTH_PX) / 2;
    int top=(mDefines.ICON_TEXTURE_HEIGHT_PX - mDefines.ICON_HEIGHT_PX) / 2;
    mDragController.startDrag(app.iconBitmap,screenX,screenY,left,top,mDefines.ICON_WIDTH_PX,mDefines.ICON_HEIGHT_PX,this,app,DragController.DRAG_ACTION_COPY);
    mLauncher.closeAllApps(true);
  }
  return true;
}","public boolean onLongClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return true;
  }
  if (mRollo.checkClickOK() && mCurrentIconIndex == mDownIconIndex && mCurrentIconIndex >= 0 && mCurrentIconIndex < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(mCurrentIconIndex);
    int screenX=mMotionDownRawX - (mDefines.ICON_WIDTH_PX / 2);
    int screenY=mMotionDownRawY - mDefines.ICON_HEIGHT_PX;
    int left=(mDefines.ICON_TEXTURE_WIDTH_PX - mDefines.ICON_WIDTH_PX) / 2;
    int top=(mDefines.ICON_TEXTURE_HEIGHT_PX - mDefines.ICON_HEIGHT_PX) / 2;
    mDragController.startDrag(app.iconBitmap,screenX,screenY,left,top,mDefines.ICON_WIDTH_PX,mDefines.ICON_HEIGHT_PX,this,app,DragController.DRAG_ACTION_COPY);
    mLauncher.closeAllApps(true);
  }
  return true;
}",0.9128738621586476
179993,"public void onClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return;
  }
  int index=mRollo.mState.selectedIconIndex;
  if (mRollo.checkClickOK() && index >= 0 && index < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(index);
    mLauncher.startActivitySafely(app.intent);
  }
}","public void onClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return;
  }
  if (mRollo.checkClickOK() && mCurrentIconIndex == mDownIconIndex && mCurrentIconIndex >= 0 && mCurrentIconIndex < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(mCurrentIconIndex);
    mLauncher.startActivitySafely(app.intent);
  }
}",0.8025078369905956
179994,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    mLastMotionX=x;
    mLastMotionY=y;
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int slopX;
if (mRotateMove) {
  slopX=Math.abs(y - mLastMotionY);
}
 else {
  slopX=Math.abs(x - mLastMotionX);
}
if (!mStartedScrolling && slopX < mSlopX) {
}
 else {
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
  mLastMotionX=x;
  mLastMotionY=y;
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
mLastMotionX=-10000;
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}",0.86651302960468
179995,"void selectIcon(int index){
  int iconCount=mAllAppsList.size();
  if (index < 0 || index >= iconCount) {
    mState.selectedIconIndex=-1;
    return;
  }
 else {
    mState.selectedIconIndex=index;
    Bitmap selectionBitmap=mSelectionBitmap;
    Utilities.drawSelectedAllAppsBitmap(mSelectionCanvas,selectionBitmap.getWidth(),selectionBitmap.getHeight(),mAllAppsList.get(index).iconBitmap);
    mSelectedIcon=Allocation.createFromBitmap(mRS,selectionBitmap,Element.RGBA_8888(mRS),false);
    mSelectedIcon.uploadToTexture(0);
    mState.selectedIconTexture=mSelectedIcon.getID();
  }
}","void selectIcon(int index){
  if (index < 0) {
    mState.selectedIconIndex=-1;
  }
 else {
    mState.selectedIconIndex=index;
    Bitmap selectionBitmap=mSelectionBitmap;
    Utilities.drawSelectedAllAppsBitmap(mSelectionCanvas,selectionBitmap.getWidth(),selectionBitmap.getHeight(),mAllAppsList.get(index).iconBitmap);
    mSelectedIcon=Allocation.createFromBitmap(mRS,selectionBitmap,Element.RGBA_8888(mRS),false);
    mSelectedIcon.uploadToTexture(0);
    mState.selectedIconTexture=mSelectedIcon.getID();
  }
}",0.9356300997280144
179996,"public boolean onLongClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return true;
  }
  int index=mRollo.mState.selectedIconIndex;
  if (mRollo.checkClickOK() && index >= 0 && index < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(index);
    int screenX=mMotionDownRawX - (mDefines.ICON_WIDTH_PX / 2);
    int screenY=mMotionDownRawY - mDefines.ICON_HEIGHT_PX;
    int left=(mDefines.ICON_TEXTURE_WIDTH_PX - mDefines.ICON_WIDTH_PX) / 2;
    int top=(mDefines.ICON_TEXTURE_HEIGHT_PX - mDefines.ICON_HEIGHT_PX) / 2;
    mDragController.startDrag(app.iconBitmap,screenX,screenY,left,top,mDefines.ICON_WIDTH_PX,mDefines.ICON_HEIGHT_PX,this,app,DragController.DRAG_ACTION_COPY);
    mLauncher.closeAllApps(true);
  }
  return true;
}","public boolean onLongClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return true;
  }
  if (mRollo.checkClickOK() && mCurrentIconIndex == mDownIconIndex && mCurrentIconIndex >= 0 && mCurrentIconIndex < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(mCurrentIconIndex);
    int screenX=mMotionDownRawX - (mDefines.ICON_WIDTH_PX / 2);
    int screenY=mMotionDownRawY - mDefines.ICON_HEIGHT_PX;
    int left=(mDefines.ICON_TEXTURE_WIDTH_PX - mDefines.ICON_WIDTH_PX) / 2;
    int top=(mDefines.ICON_TEXTURE_HEIGHT_PX - mDefines.ICON_HEIGHT_PX) / 2;
    mDragController.startDrag(app.iconBitmap,screenX,screenY,left,top,mDefines.ICON_WIDTH_PX,mDefines.ICON_HEIGHT_PX,this,app,DragController.DRAG_ACTION_COPY);
    mLauncher.closeAllApps(true);
  }
  return true;
}",0.9128738621586476
179997,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else if (mTouchTracking == TRACKING_FLING) {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}",0.977587343441002
179998,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (mLauncher.isWorkspaceLocked() || mLauncher.isAllAppsVisible()) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
  final float x=ev.getX();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
  mLastMotionX=x;
break;
case MotionEvent.ACTION_MOVE:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final int deltaX=(int)(mLastMotionX - x);
mLastMotionX=x;
if (deltaX < 0) {
  if (mScrollX > 0) {
    scrollBy(Math.max(-mScrollX,deltaX),0);
    updateWallpaperOffset();
  }
}
 else if (deltaX > 0) {
  final int availableToScroll=getChildAt(getChildCount() - 1).getRight() - mScrollX - getWidth();
  if (availableToScroll > 0) {
    scrollBy(Math.min(availableToScroll,deltaX),0);
    updateWallpaperOffset();
  }
}
}
break;
case MotionEvent.ACTION_UP:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int velocityX=(int)velocityTracker.getXVelocity();
if (velocityX > SNAP_VELOCITY && mCurrentScreen > 0) {
snapToScreen(mCurrentScreen - 1);
}
 else if (velocityX < -SNAP_VELOCITY && mCurrentScreen < getChildCount() - 1) {
snapToScreen(mCurrentScreen + 1);
}
 else {
snapToDestination();
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
}
mTouchState=TOUCH_STATE_REST;
break;
case MotionEvent.ACTION_CANCEL:
mTouchState=TOUCH_STATE_REST;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (mLauncher.isWorkspaceLocked()) {
    return false;
  }
  if (mLauncher.isAllAppsVisible()) {
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
    snapToScreen(mCurrentScreen);
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
  final float x=ev.getX();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
  mLastMotionX=x;
break;
case MotionEvent.ACTION_MOVE:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final int deltaX=(int)(mLastMotionX - x);
mLastMotionX=x;
if (deltaX < 0) {
  if (mScrollX > 0) {
    scrollBy(Math.max(-mScrollX,deltaX),0);
    updateWallpaperOffset();
  }
}
 else if (deltaX > 0) {
  final int availableToScroll=getChildAt(getChildCount() - 1).getRight() - mScrollX - getWidth();
  if (availableToScroll > 0) {
    scrollBy(Math.min(availableToScroll,deltaX),0);
    updateWallpaperOffset();
  }
}
}
break;
case MotionEvent.ACTION_UP:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int velocityX=(int)velocityTracker.getXVelocity();
if (velocityX > SNAP_VELOCITY && mCurrentScreen > 0) {
snapToScreen(mCurrentScreen - 1);
}
 else if (velocityX < -SNAP_VELOCITY && mCurrentScreen < getChildCount() - 1) {
snapToScreen(mCurrentScreen + 1);
}
 else {
snapToDestination();
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
}
mTouchState=TOUCH_STATE_REST;
break;
case MotionEvent.ACTION_CANCEL:
mTouchState=TOUCH_STATE_REST;
}
return true;
}",0.9580803700491471
179999,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int deltaX;
switch (ev.getAction()) {
case MotionEvent.ACTION_DOWN:
    mMotionDownRawX=(int)ev.getRawX();
  mMotionDownRawY=(int)ev.getRawY();
mLastMotionX=x;
mRollo.mReadback.read();
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
mRollo.mState.newTouchDown=1;
if (!mRollo.checkClickOK()) {
mRollo.clearSelectedIcon();
}
 else {
mRollo.selectIcon(x,(int)ev.getY(),mRollo.mReadback.posX);
}
mRollo.mState.save();
mRollo.mInvokeMove.execute();
mVelocity=VelocityTracker.obtain();
mVelocity.addMovement(ev);
mStartedScrolling=false;
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
int slop=Math.abs(x - mLastMotionX);
if (!mStartedScrolling && slop < mConfig.getScaledTouchSlop()) {
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
mRollo.mState.newTouchDown=1;
mRollo.mInvokeMove.execute();
mStartedScrolling=true;
mRollo.clearSelectedIcon();
deltaX=x - mLastMotionX;
mVelocity.addMovement(ev);
mRollo.mState.save();
mLastMotionX=x;
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
if (!mZoomSwipeInProgress) {
mVelocity.computeCurrentVelocity(1000,mConfig.getScaledMaximumFlingVelocity());
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / Defines.SCREEN_WIDTH_PX;
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.mInvokeFling.execute();
}
 else {
mRollo.mState.save();
mRollo.mInvokeMove.execute();
}
mLastMotionX=-10000;
mVelocity.recycle();
mVelocity=null;
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int deltaX;
switch (ev.getAction()) {
case MotionEvent.ACTION_DOWN:
    mMotionDownRawX=(int)ev.getRawX();
  mMotionDownRawY=(int)ev.getRawY();
mLastMotionX=x;
mRollo.mReadback.read();
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
mRollo.mState.newTouchDown=1;
if (!mRollo.checkClickOK()) {
mRollo.clearSelectedIcon();
}
 else {
mRollo.selectIcon(x,(int)ev.getY(),mRollo.mReadback.posX);
}
mRollo.mState.save();
mRollo.mInvokeMove.execute();
mVelocity=VelocityTracker.obtain();
mVelocity.addMovement(ev);
mStartedScrolling=false;
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
int slopX=Math.abs(x - mLastMotionX);
if (!mStartedScrolling && slopX < mSlopX) {
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
mRollo.mState.newTouchDown=1;
mRollo.mInvokeMove.execute();
mStartedScrolling=true;
mRollo.clearSelectedIcon();
deltaX=x - mLastMotionX;
mVelocity.addMovement(ev);
mRollo.mState.save();
mLastMotionX=x;
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
if (!mZoomSwipeInProgress) {
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / Defines.SCREEN_WIDTH_PX;
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.mInvokeFling.execute();
}
 else {
mRollo.mState.save();
mRollo.mInvokeMove.execute();
}
mLastMotionX=-10000;
mVelocity.recycle();
mVelocity=null;
break;
}
return true;
}",0.9863247863247864
180000,"public boolean onTouchEvent(MotionEvent ev){
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int screenX=(int)ev.getRawX();
  final int screenY=(int)ev.getRawY();
  final int deltaX=screenX - mDownX;
  final int deltaY=screenY - mDownY;
  final int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    mCanceled=false;
  mTracking=false;
mDownX=screenX;
mDownY=screenY;
mAllAppsView.setZoomSwipeInProgress(true,true);
break;
case MotionEvent.ACTION_MOVE:
if (!mCanceled && !mTracking) {
if (Math.abs(deltaX) > mSlop) {
mCanceled=true;
mTracking=false;
mAllAppsView.setZoomSwipeInProgress(false,true);
}
if (Math.abs(deltaY) > mSlop) {
mTracking=true;
}
}
if (mTracking && !mCanceled) {
track(screenY);
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mTracking && !mCanceled) {
fling(screenY);
mAllAppsView.setZoomSwipeInProgress(false,false);
}
mVelocityTracker.recycle();
mVelocityTracker=null;
break;
}
return mTracking || mCanceled;
}","public boolean onTouchEvent(MotionEvent ev){
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int screenX=(int)ev.getRawX();
  final int screenY=(int)ev.getRawY();
  final int deltaX=screenX - mDownX;
  final int deltaY=screenY - mDownY;
  final int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    mCanceled=false;
  mTracking=false;
mDownX=screenX;
mDownY=screenY;
mAllAppsView.setZoomSwipeInProgress(true,true);
break;
case MotionEvent.ACTION_MOVE:
if (!mCanceled && !mTracking) {
if (Math.abs(deltaX) > mSlopX) {
mCanceled=true;
mTracking=false;
mAllAppsView.setZoomSwipeInProgress(false,true);
}
 else if (Math.abs(deltaY) > mSlopY) {
mTracking=true;
}
}
if (mTracking && !mCanceled) {
track(screenY);
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mTracking && !mCanceled) {
fling(screenY);
mAllAppsView.setZoomSwipeInProgress(false,false);
}
mVelocityTracker.recycle();
mVelocityTracker=null;
break;
}
return mTracking || mCanceled;
}",0.9962581852198316
