record_number,buggy_code,fixed_code,code_similarity
86001,"/** 
 * @return the number of blocks to get, based on our chain height and the peer reported height
 */
private int getPeerBlocksToGet(){
  int chainHeight=(int)conn.getVersionMessage().bestHeight;
  if (chainHeight <= 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  int blocksToGet=chainHeight - blockChain.getChainHead().getHeight();
  return blocksToGet;
}","/** 
 * @return the number of blocks to get, based on our chain height and the peer reported height
 */
private int getPeerBlocksToGet(){
  int chainHeight=(int)conn.getVersionMessage().bestHeight;
  if (chainHeight <= 0) {
    return -1;
  }
  int blocksToGet=chainHeight - blockChain.getChainHead().getHeight();
  return blocksToGet;
}",0.6619718309859155
86002,"/** 
 * Connects to the peer.
 */
public void connect(){
  try {
    conn=new NetworkConnection(address,params,bestHeight,60000);
  }
 catch (  IOException ex) {
    throw new RuntimeException(ex);
  }
catch (  ProtocolException ex) {
    throw new RuntimeException(ex);
  }
}","/** 
 * Connects to the peer.
 * @throws PeerException when there is a temporary problem with the peer and we should retry later
 */
public void connect() throws PeerException {
  try {
    conn=new NetworkConnection(address,params,bestHeight,60000);
  }
 catch (  IOException ex) {
    throw new PeerException(ex);
  }
catch (  ProtocolException ex) {
    throw new PeerException(ex);
  }
}",0.7856071964017991
86003,"public void run(){
  try {
    log.info(""String_Node_Str"" + peer);
    peer.connect();
    peers.add(peer);
    handleNewPeer(peer);
    log.info(""String_Node_Str"" + peer);
    peer.run();
  }
 catch (  RuntimeException ex) {
    log.error(""String_Node_Str"",ex);
  }
 finally {
    try {
      peer.disconnect();
    }
 catch (    RuntimeException ex) {
    }
    inactives.add(address);
    if (peers.remove(peer))     handlePeerDeath(peer);
  }
}","public void run(){
  try {
    log.info(""String_Node_Str"" + peer);
    peer.connect();
    peers.add(peer);
    handleNewPeer(peer);
    log.info(""String_Node_Str"" + peer);
    peer.run();
  }
 catch (  PeerException ex) {
    log.error(""String_Node_Str"",ex);
  }
 finally {
    peer.disconnect();
    inactives.add(address);
    if (peers.remove(peer))     handlePeerDeath(peer);
  }
}",0.6714628297362111
86004,"private void tryNextPeer() throws InterruptedException {
  final PeerAddress address=inactives.take();
  while (true) {
    try {
      final Peer peer=new Peer(params,address,blockStore.getChainHead().getHeight(),chain);
      Runnable command=new Runnable(){
        public void run(){
          try {
            log.info(""String_Node_Str"" + peer);
            peer.connect();
            peers.add(peer);
            handleNewPeer(peer);
            log.info(""String_Node_Str"" + peer);
            peer.run();
          }
 catch (          RuntimeException ex) {
            log.error(""String_Node_Str"",ex);
          }
 finally {
            try {
              peer.disconnect();
            }
 catch (            RuntimeException ex) {
            }
            inactives.add(address);
            if (peers.remove(peer))             handlePeerDeath(peer);
          }
        }
      }
;
      peerPool.execute(command);
      break;
    }
 catch (    RejectedExecutionException e) {
    }
catch (    BlockStoreException e) {
      log.error(""String_Node_Str"",e);
      running=false;
      break;
    }
    Thread.sleep(CONNECTION_DELAY_MILLIS);
  }
}","private void tryNextPeer() throws InterruptedException {
  final PeerAddress address=inactives.take();
  while (true) {
    try {
      final Peer peer=new Peer(params,address,blockStore.getChainHead().getHeight(),chain);
      Runnable command=new Runnable(){
        public void run(){
          try {
            log.info(""String_Node_Str"" + peer);
            peer.connect();
            peers.add(peer);
            handleNewPeer(peer);
            log.info(""String_Node_Str"" + peer);
            peer.run();
          }
 catch (          PeerException ex) {
            log.error(""String_Node_Str"",ex);
          }
 finally {
            peer.disconnect();
            inactives.add(address);
            if (peers.remove(peer))             handlePeerDeath(peer);
          }
        }
      }
;
      peerPool.execute(command);
      break;
    }
 catch (    RejectedExecutionException e) {
    }
catch (    BlockStoreException e) {
      log.error(""String_Node_Str"",e);
      running=false;
      throw new IOError(e);
    }
    Thread.sleep(CONNECTION_DELAY_MILLIS);
  }
}",0.7157518964747881
86005,"public static void main(String[] args) throws Exception {
  System.out.println(""String_Node_Str"");
  final NetworkParameters params=NetworkParameters.prodNet();
  BlockStore blockStore=new MemoryBlockStore(params);
  BlockChain chain=new BlockChain(params,blockStore);
  final Peer peer=new Peer(params,new PeerAddress(InetAddress.getLocalHost()),chain);
  peer.connect();
  new Thread(new Runnable(){
    public void run(){
      peer.run();
    }
  }
).start();
  Sha256Hash blockHash=new Sha256Hash(args[0]);
  Future<Block> future=peer.getBlock(blockHash);
  System.out.println(""String_Node_Str"" + blockHash);
  Block block=future.get();
  System.out.println(block);
  peer.disconnect();
}","public static void main(String[] args) throws Exception {
  System.out.println(""String_Node_Str"");
  final NetworkParameters params=NetworkParameters.prodNet();
  BlockStore blockStore=new MemoryBlockStore(params);
  BlockChain chain=new BlockChain(params,blockStore);
  final Peer peer=new Peer(params,new PeerAddress(InetAddress.getLocalHost()),chain);
  peer.connect();
  new Thread(new Runnable(){
    public void run(){
      try {
        peer.run();
      }
 catch (      PeerException e) {
        throw new RuntimeException(e);
      }
    }
  }
).start();
  Sha256Hash blockHash=new Sha256Hash(args[0]);
  Future<Block> future=peer.getBlock(blockHash);
  System.out.println(""String_Node_Str"" + blockHash);
  Block block=future.get();
  System.out.println(block);
  peer.disconnect();
}",0.9166666666666666
86006,"public void run(){
  peer.run();
}","public void run(){
  try {
    peer.run();
  }
 catch (  PeerException e) {
    throw new RuntimeException(e);
  }
}",0.4533333333333333
86007,"/** 
 * Adds a coinbase transaction to the block. This exists for unit tests. 
 */
void addCoinbaseTransaction(Address to){
  transactions=new ArrayList<Transaction>();
  Transaction coinbase=new Transaction(params);
  coinbase.inputs.add(new TransactionInput(params,coinbase,new byte[]{(byte)coinbaseCounter++}));
  coinbase.outputs.add(new TransactionOutput(params,coinbase,Utils.toNanoCoins(50,0),to));
  transactions.add(coinbase);
}","/** 
 * Adds a coinbase transaction to the block. This exists for unit tests. 
 */
void addCoinbaseTransaction(byte[] pubKeyTo){
  transactions=new ArrayList<Transaction>();
  Transaction coinbase=new Transaction(params);
  coinbase.inputs.add(new TransactionInput(params,coinbase,new byte[]{(byte)txCounter++}));
  coinbase.outputs.add(new TransactionOutput(params,coinbase,Script.createOutputScript(pubKeyTo)));
  transactions.add(coinbase);
}",0.8934240362811792
86008,"/** 
 * For the transactions in the given block, update the txToWalletMap such that each wallet maps to a list of transactions for which it is relevant.
 */
private void scanTransactions(Block block,HashMap<Wallet,List<Transaction>> walletToTxMap) throws VerificationException {
  for (  Transaction tx : block.transactions) {
    try {
      for (      Wallet wallet : wallets) {
        boolean shouldReceive=false;
        for (        TransactionOutput output : tx.outputs) {
          if (output.getScriptPubKey().isSentToIP())           return;
          if (output.isMine(wallet)) {
            shouldReceive=true;
          }
        }
        if (!shouldReceive && !tx.isCoinBase()) {
          for (          TransactionInput i : tx.inputs) {
            byte[] pubkey=i.getScriptSig().getPubKey();
            if (wallet.isPubKeyMine(pubkey)) {
              shouldReceive=true;
            }
          }
        }
        if (!shouldReceive)         continue;
        List<Transaction> txList=walletToTxMap.get(wallet);
        if (txList == null) {
          txList=new LinkedList<Transaction>();
          walletToTxMap.put(wallet,txList);
        }
        txList.add(tx);
      }
    }
 catch (    ScriptException e) {
      log.warn(""String_Node_Str"" + e.toString());
    }
  }
}","/** 
 * For the transactions in the given block, update the txToWalletMap such that each wallet maps to a list of transactions for which it is relevant.
 */
private void scanTransactions(Block block,HashMap<Wallet,List<Transaction>> walletToTxMap) throws VerificationException {
  for (  Transaction tx : block.transactions) {
    try {
      for (      Wallet wallet : wallets) {
        boolean shouldReceive=false;
        for (        TransactionOutput output : tx.outputs) {
          if (output.getScriptPubKey().isSentToIP())           continue;
          if (output.isMine(wallet)) {
            shouldReceive=true;
            break;
          }
        }
        if (!shouldReceive && !tx.isCoinBase()) {
          for (          TransactionInput i : tx.inputs) {
            byte[] pubkey=i.getScriptSig().getPubKey();
            if (wallet.isPubKeyMine(pubkey)) {
              shouldReceive=true;
            }
          }
        }
        if (!shouldReceive)         continue;
        List<Transaction> txList=walletToTxMap.get(wallet);
        if (txList == null) {
          txList=new LinkedList<Transaction>();
          walletToTxMap.put(wallet,txList);
        }
        txList.add(tx);
      }
    }
 catch (    ScriptException e) {
      log.warn(""String_Node_Str"" + e.toString());
    }
  }
}",0.9873708381171068
86009,"private void connectBlock(StoredBlock newStoredBlock,StoredBlock storedPrev,HashMap<Wallet,List<Transaction>> newTransactions) throws BlockStoreException, VerificationException {
  if (storedPrev.equals(chainHead)) {
    setChainHead(newStoredBlock);
    log.trace(""String_Node_Str"",chainHead.getHeight());
    if (newTransactions != null)     sendTransactionsToWallet(newStoredBlock,NewBlockType.BEST_CHAIN,newTransactions);
  }
 else {
    boolean haveNewBestChain=newStoredBlock.moreWorkThan(chainHead);
    if (haveNewBestChain) {
      log.info(""String_Node_Str"");
    }
 else {
      StoredBlock splitPoint=findSplit(newStoredBlock,chainHead);
      String splitPointHash=splitPoint != null ? splitPoint.getHeader().getHashAsString() : ""String_Node_Str"";
      log.info(""String_Node_Str"",splitPointHash,newStoredBlock);
    }
    if (newTransactions != null) {
      sendTransactionsToWallet(newStoredBlock,NewBlockType.SIDE_CHAIN,newTransactions);
    }
    if (haveNewBestChain)     handleNewBestChain(newStoredBlock);
  }
}","private void connectBlock(StoredBlock newStoredBlock,StoredBlock storedPrev,HashMap<Wallet,List<Transaction>> newTransactions) throws BlockStoreException, VerificationException {
  if (storedPrev.equals(chainHead)) {
    setChainHead(newStoredBlock);
    log.info(""String_Node_Str"",chainHead.getHeight());
    if (newTransactions != null)     sendTransactionsToWallet(newStoredBlock,NewBlockType.BEST_CHAIN,newTransactions);
  }
 else {
    boolean haveNewBestChain=newStoredBlock.moreWorkThan(chainHead);
    if (haveNewBestChain) {
      log.info(""String_Node_Str"");
    }
 else {
      StoredBlock splitPoint=findSplit(newStoredBlock,chainHead);
      String splitPointHash=splitPoint != null ? splitPoint.getHeader().getHashAsString() : ""String_Node_Str"";
      log.info(""String_Node_Str"",splitPointHash,newStoredBlock);
    }
    if (newTransactions != null) {
      sendTransactionsToWallet(newStoredBlock,NewBlockType.SIDE_CHAIN,newTransactions);
    }
    if (haveNewBestChain)     handleNewBestChain(newStoredBlock);
  }
}",0.9956374212312168
86010,"private static Block createGenesis(NetworkParameters n){
  Block genesisBlock=new Block(n);
  Transaction t=new Transaction(n);
  try {
    byte[] bytes=Hex.decode(""String_Node_Str"");
    t.inputs.add(new TransactionInput(n,t,bytes));
    ByteArrayOutputStream scriptPubKeyBytes=new ByteArrayOutputStream();
    Script.writeBytes(scriptPubKeyBytes,Hex.decode(""String_Node_Str""));
    scriptPubKeyBytes.write(Script.OP_CHECKSIG);
    t.outputs.add(new TransactionOutput(n,scriptPubKeyBytes.toByteArray()));
  }
 catch (  Exception e) {
  }
  genesisBlock.addTransaction(t);
  return genesisBlock;
}","private static Block createGenesis(NetworkParameters n){
  Block genesisBlock=new Block(n);
  Transaction t=new Transaction(n);
  try {
    byte[] bytes=Hex.decode(""String_Node_Str"");
    t.inputs.add(new TransactionInput(n,t,bytes));
    ByteArrayOutputStream scriptPubKeyBytes=new ByteArrayOutputStream();
    Script.writeBytes(scriptPubKeyBytes,Hex.decode(""String_Node_Str""));
    scriptPubKeyBytes.write(Script.OP_CHECKSIG);
    t.outputs.add(new TransactionOutput(n,t,scriptPubKeyBytes.toByteArray()));
  }
 catch (  Exception e) {
  }
  genesisBlock.addTransaction(t);
  return genesisBlock;
}",0.9983277591973244
86011,"static byte[] createOutputScript(Address to){
  try {
    ByteArrayOutputStream bits=new ByteArrayOutputStream();
    bits.write(OP_DUP);
    bits.write(OP_HASH160);
    writeBytes(bits,to.getHash160());
    bits.write(OP_EQUALVERIFY);
    bits.write(OP_CHECKSIG);
    return bits.toByteArray();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Create a script that sends coins directly to the given public key (eg in a coinbase transaction). 
 */
static byte[] createOutputScript(byte[] pubkey){
  try {
    ByteArrayOutputStream bits=new ByteArrayOutputStream();
    writeBytes(bits,pubkey);
    bits.write(OP_CHECKSIG);
    return bits.toByteArray();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.5324503311258278
86012,"/** 
 * Adds an input to this transaction that imports value from the given output. Note that this input is NOT complete and after every input is added with addInput() and every output is added with addOutput(), signInputs() must be called to finalize the transaction and finish the inputs off. Otherwise it won't be accepted by the network.
 */
public void addInput(TransactionOutput from){
  inputs.add(new TransactionInput(params,this,from));
}","/** 
 * Adds an input directly, with no checking that it's valid. 
 */
public void addInput(TransactionInput input){
  inputs.add(input);
}",0.3754266211604095
86013,"/** 
 * Returns a human readable debug string. 
 */
public String toString(){
  if (isCoinBase())   return ""String_Node_Str"";
  try {
    return ""String_Node_Str"" + Utils.bytesToHexString(getScriptSig().getPubKey()) + ""String_Node_Str""+ getScriptSig().toString();
  }
 catch (  ScriptException e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Returns a human readable debug string. 
 */
public String toString(){
  if (isCoinBase())   return ""String_Node_Str"";
  try {
    return ""String_Node_Str"" + outpoint + ""String_Node_Str""+ Utils.bytesToHexString(getScriptSig().getPubKey())+ ""String_Node_Str""+ getScriptSig().toString();
  }
 catch (  ScriptException e) {
    throw new RuntimeException(e);
  }
}",0.9561527581329562
86014,"/** 
 * Used only in creation of the genesis blocks and in unit tests. 
 */
TransactionOutput(NetworkParameters params,byte[] scriptBytes){
  super(params);
  this.scriptBytes=scriptBytes;
  this.value=Utils.toNanoCoins(50,0);
  availableForSpending=true;
}","/** 
 * Used only in creation of the genesis blocks and in unit tests. 
 */
TransactionOutput(NetworkParameters params,Transaction parent,byte[] scriptBytes){
  super(params);
  this.scriptBytes=scriptBytes;
  this.value=Utils.toNanoCoins(50,0);
  parentTransaction=parent;
  availableForSpending=true;
}",0.9162210338680928
86015,"/** 
 * Construct a peer that handles the given network connection and reads/writes from the given block chain. Note that communication won't occur until you call connect().
 * @param bestHeight our current best chain height, to facilitate downloading
 */
public Peer(NetworkParameters params,PeerAddress address,int bestHeight,BlockChain blockChain){
  this.params=params;
  this.address=address;
  this.bestHeight=bestHeight;
  this.blockChain=blockChain;
  this.pendingGetBlockFutures=new ArrayList<GetDataFuture<Block>>();
  this.eventListeners=new ArrayList<PeerEventListener>();
}","/** 
 * Construct a peer that handles the given network connection and reads/writes from the given block chain. Note that communication won't occur until you call connect().
 */
public Peer(NetworkParameters params,PeerAddress address,BlockChain blockChain){
  this(params,address,0,blockChain);
}",0.6115515288788222
86016,"public static void main(String[] args) throws Exception {
  System.out.println(""String_Node_Str"");
  final NetworkParameters params=NetworkParameters.prodNet();
  NetworkConnection conn=new NetworkConnection(InetAddress.getLocalHost(),params,0,60000);
  BlockStore blockStore=new MemoryBlockStore(params);
  BlockChain chain=new BlockChain(params,blockStore);
  Peer peer=new Peer(params,conn,chain);
  peer.start();
  Sha256Hash blockHash=new Sha256Hash(args[0]);
  Future<Block> future=peer.getBlock(blockHash);
  System.out.println(""String_Node_Str"" + blockHash);
  Block block=future.get();
  System.out.println(block);
  peer.disconnect();
}","public static void main(String[] args) throws Exception {
  System.out.println(""String_Node_Str"");
  final NetworkParameters params=NetworkParameters.testNet();
  BlockStore blockStore=new MemoryBlockStore(params);
  BlockChain chain=new BlockChain(params,blockStore);
  final Peer peer=new Peer(params,new PeerAddress(InetAddress.getLocalHost()),chain);
  peer.connect();
  new Thread(new Runnable(){
    @Override public void run(){
      peer.run();
    }
  }
).start();
  Sha256Hash blockHash=new Sha256Hash(args[0]);
  Future<Block> future=peer.getBlock(blockHash);
  System.out.println(""String_Node_Str"" + blockHash);
  Block block=future.get();
  System.out.println(block);
  peer.disconnect();
}",0.8109710896960711
86017,"/** 
 * Starts an asynchronous download of the block chain. The chain download is deemed to be complete once we've downloaded the same number of blocks that the peer advertised having in its version handshake message.
 */
public void startBlockChainDownload() throws IOException {
  for (  PeerEventListener listener : eventListeners) {
synchronized (listener) {
      listener.onChainDownloadStarted(this,getPeerBlocksToGet());
    }
  }
  if (getPeerBlocksToGet() > 0) {
    blockChainDownload(Sha256Hash.ZERO_HASH);
  }
}","/** 
 * Starts an asynchronous download of the block chain. The chain download is deemed to be complete once we've downloaded the same number of blocks that the peer advertised having in its version handshake message.
 */
public void startBlockChainDownload() throws IOException {
  if (getPeerBlocksToGet() > 0) {
    for (    PeerEventListener listener : eventListeners) {
synchronized (listener) {
        listener.onChainDownloadStarted(this,getPeerBlocksToGet());
      }
    }
    blockChainDownload(Sha256Hash.ZERO_HASH);
  }
}",0.9149338374291116
86018,"public PeerAddress(InetAddress addr,int port,int protocolVersion){
  this.addr=addr;
  this.port=port;
  this.protocolVersion=protocolVersion;
}","public PeerAddress(InetAddress addr,int port,int protocolVersion){
  this.addr=addr;
  this.port=port;
  this.protocolVersion=protocolVersion;
  this.services=BigInteger.ZERO;
}",0.897196261682243
86019,"@Test public void testParseUserList() throws UnknownHostException {
  String[] userList=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  ArrayList<InetSocketAddress> addresses=IrcDiscovery.parseUserList(userList);
  assertEquals(""String_Node_Str"",2,addresses.size());
  String[] ips=new String[]{""String_Node_Str"",""String_Node_Str""};
  InetSocketAddress[] decoded=addresses.toArray(new InetSocketAddress[]{});
  for (int i=0; i < decoded.length; i++) {
    String formattedIP=decoded[0].getAddress().getHostAddress() + ""String_Node_Str"" + ((Integer)decoded[i].getPort()).toString();
    assertEquals(""String_Node_Str"",ips[0],formattedIP);
  }
}","@Test public void testParseUserList() throws UnknownHostException {
  String[] userList=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  ArrayList<InetSocketAddress> addresses=IrcDiscovery.parseUserList(userList);
  assertEquals(""String_Node_Str"",2,addresses.size());
  String[] ips=new String[]{""String_Node_Str"",""String_Node_Str""};
  InetSocketAddress[] decoded=addresses.toArray(new InetSocketAddress[]{});
  for (int i=0; i < decoded.length; i++) {
    String formattedIP=decoded[i].getAddress().getHostAddress() + ""String_Node_Str"" + ((Integer)decoded[i].getPort()).toString();
    assertEquals(""String_Node_Str"",ips[i],formattedIP);
  }
}",0.996996996996997
86020,"/** 
 * Updates the wallet by checking if this TX spends any of our outputs. This is not used normally because when we receive our own spends, we've already marked the outputs as spent previously (during tx creation) so there's no need to go through and do it again.
 */
private void updateForSpends(Transaction tx) throws VerificationException {
  for (  TransactionInput input : tx.inputs) {
    TransactionInput.ConnectionResult result=input.connect(unspent,false);
    if (result == TransactionInput.ConnectionResult.NO_SUCH_TX) {
      continue;
    }
 else     if (result == TransactionInput.ConnectionResult.ALREADY_SPENT) {
      Transaction doubleSpent=input.outpoint.fromTx;
      Transaction connected=doubleSpent.outputs.get((int)input.outpoint.index).getSpentBy().parentTransaction;
      if (pending.containsKey(connected.getHash())) {
        log.info(""String_Node_Str"",connected.getHashAsString());
        log.info(""String_Node_Str"");
        pending.remove(connected.getHash());
        dead.put(connected.getHash(),connected);
        input.connect(unspent,true);
        for (        WalletEventListener listener : eventListeners) {
synchronized (listener) {
            listener.onDeadTransaction(connected,tx);
          }
        }
      }
    }
 else     if (result == TransactionInput.ConnectionResult.SUCCESS) {
      Transaction connected=input.outpoint.fromTx;
      if (connected.getValueSentToMe(this,false).equals(BigInteger.ZERO)) {
        if (unspent.remove(connected.getHash()) != null) {
          log.info(""String_Node_Str"");
          log.info(""String_Node_Str"");
          spent.put(connected.getHash(),connected);
        }
      }
    }
  }
}","/** 
 * Updates the wallet by checking if this TX spends any of our outputs. This is not used normally because when we receive our own spends, we've already marked the outputs as spent previously (during tx creation) so there's no need to go through and do it again.
 */
private void updateForSpends(Transaction tx) throws VerificationException {
  for (  TransactionInput input : tx.inputs) {
    TransactionInput.ConnectionResult result=input.connect(unspent,false);
    if (result == TransactionInput.ConnectionResult.NO_SUCH_TX) {
      continue;
    }
 else     if (result == TransactionInput.ConnectionResult.ALREADY_SPENT) {
      Transaction doubleSpent=input.outpoint.fromTx;
      int index=(int)input.outpoint.index;
      TransactionOutput output=doubleSpent.outputs.get(index);
      TransactionInput spentBy=output.getSpentBy();
      Transaction connected=spentBy.parentTransaction;
      if (pending.containsKey(connected.getHash())) {
        log.info(""String_Node_Str"",connected.getHashAsString());
        log.info(""String_Node_Str"");
        pending.remove(connected.getHash());
        dead.put(connected.getHash(),connected);
        input.connect(unspent,true);
        for (        WalletEventListener listener : eventListeners) {
synchronized (listener) {
            listener.onDeadTransaction(connected,tx);
          }
        }
      }
    }
 else     if (result == TransactionInput.ConnectionResult.SUCCESS) {
      Transaction connected=input.outpoint.fromTx;
      if (connected.getValueSentToMe(this,false).equals(BigInteger.ZERO)) {
        if (unspent.remove(connected.getHash()) != null) {
          log.info(""String_Node_Str"");
          log.info(""String_Node_Str"");
          spent.put(connected.getHash(),connected);
        }
      }
    }
  }
}",0.9429065743944636
86021,"public static byte[] decode(String input) throws AddressFormatException {
  return decodeToBigInteger(input).toByteArray();
}","public static byte[] decode(String input) throws AddressFormatException {
  byte[] bytes=decodeToBigInteger(input).toByteArray();
  if ((bytes.length > 1) && (bytes[0] == 0) && (bytes[1] < 0)) {
    byte[] tmp=new byte[bytes.length - 1];
    System.arraycopy(bytes,1,tmp,0,bytes.length - 1);
    bytes=tmp;
  }
  return bytes;
}",0.3664459161147902
86022,"public void testDecode() throws Exception {
  byte[] testbytes=""String_Node_Str"".getBytes();
  byte[] actualbytes=Base58.decode(""String_Node_Str"");
  assertTrue(new String(actualbytes),Arrays.equals(testbytes,actualbytes));
  try {
    Base58.decode(""String_Node_Str"");
    fail();
  }
 catch (  AddressFormatException e) {
  }
  Base58.decodeChecked(""String_Node_Str"");
}","public void testDecode() throws Exception {
  byte[] testbytes=""String_Node_Str"".getBytes();
  byte[] actualbytes=Base58.decode(""String_Node_Str"");
  assertTrue(new String(actualbytes),Arrays.equals(testbytes,actualbytes));
  try {
    Base58.decode(""String_Node_Str"");
    fail();
  }
 catch (  AddressFormatException e) {
  }
  Base58.decodeChecked(""String_Node_Str"");
  Base58.decodeChecked(""String_Node_Str"");
}",0.9453621346886912
86023,"/** 
 * Construct an address from parameters and the standard ""human readable"" form. Example:<p> <pre>new Address(NetworkParameters.prodNet(), ""17kzeh4N8g49GFvdDzSf8PjaPfyoD1MndL"");</pre>
 */
public Address(NetworkParameters params,String address) throws AddressFormatException {
  this.params=params;
  this.hash160=strToHash160(address);
}","/** 
 * Construct an address from parameters and the standard ""human readable"" form. Example:<p> <pre>new Address(NetworkParameters.prodNet(), ""17kzeh4N8g49GFvdDzSf8PjaPfyoD1MndL"");</pre>
 */
public Address(NetworkParameters params,String address) throws AddressFormatException {
  super(address);
  if (version != params.addressHeader)   throw new AddressFormatException(""String_Node_Str"" + version + ""String_Node_Str""+ params.addressHeader);
}",0.7353689567430025
86024,"/** 
 * The (big endian) 20 byte hash that is the core of a BitCoin address. 
 */
public byte[] getHash160(){
}","/** 
 * The (big endian) 20 byte hash that is the core of a BitCoin address. 
 */
public byte[] getHash160(){
  return bytes;
}",0.9327731092436976
86025,"public static byte[] decode(String input) throws AddressFormatException {
  byte[] bytes=decodeToBigInteger(input).toByteArray();
  if ((bytes.length > 1) && (bytes[0] == 0) && (bytes[1] < 0)) {
    byte[] tmp=new byte[bytes.length - 1];
    System.arraycopy(bytes,1,tmp,0,bytes.length - 1);
    bytes=tmp;
  }
  return bytes;
}","public static byte[] decode(String input) throws AddressFormatException {
  byte[] bytes=decodeToBigInteger(input).toByteArray();
  boolean stripSignByte=bytes.length > 1 && bytes[0] == 0 && bytes[1] < 0;
  int leadingZeros=0;
  for (int i=0; input.charAt(i) == ALPHABET.charAt(0); i++) {
    leadingZeros++;
  }
  byte[] tmp=new byte[bytes.length - (stripSignByte ? 1 : 0) + leadingZeros];
  System.arraycopy(bytes,stripSignByte ? 1 : 0,tmp,leadingZeros,tmp.length - leadingZeros);
  return tmp;
}",0.6174334140435835
86026,"public static void main(String[] args) throws Exception {
  NetworkParameters params=NetworkParameters.prodNet();
  try {
    BigInteger privKey=Base58.decodeToBigInteger(args[0]);
    ECKey key=new ECKey(privKey);
    System.out.println(""String_Node_Str"" + key.toAddress(params).toString());
    Address destination=new Address(params,args[1]);
    Wallet wallet=new Wallet(params);
    wallet.addKey(key);
    NetworkConnection conn=new NetworkConnection(InetAddress.getLocalHost(),params,0,60000);
    BlockChain chain=new BlockChain(params,wallet,new MemoryBlockStore(params));
    Peer peer=new Peer(params,conn,chain);
    peer.start();
    peer.startBlockChainDownload().await();
    System.out.println(""String_Node_Str"" + Utils.bitcoinValueToFriendlyString(wallet.getBalance()) + ""String_Node_Str"");
    wallet.sendCoins(peer,destination,wallet.getBalance());
    Thread.sleep(5000);
    peer.disconnect();
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    System.out.println(""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
}","public static void main(String[] args) throws Exception {
  NetworkParameters params=NetworkParameters.prodNet();
  try {
    ECKey key;
    if (args[0].length() == 51) {
      DumpedPrivateKey dumpedPrivateKey=new DumpedPrivateKey(params,args[0]);
      key=dumpedPrivateKey.getKey();
    }
 else {
      BigInteger privKey=Base58.decodeToBigInteger(args[0]);
      key=new ECKey(privKey);
    }
    System.out.println(""String_Node_Str"" + key.toAddress(params).toString());
    Address destination=new Address(params,args[1]);
    Wallet wallet=new Wallet(params);
    wallet.addKey(key);
    NetworkConnection conn=new NetworkConnection(InetAddress.getLocalHost(),params,0,60000);
    BlockChain chain=new BlockChain(params,wallet,new MemoryBlockStore(params));
    Peer peer=new Peer(params,conn,chain);
    peer.start();
    peer.startBlockChainDownload().await();
    System.out.println(""String_Node_Str"" + Utils.bitcoinValueToFriendlyString(wallet.getBalance()) + ""String_Node_Str"");
    wallet.sendCoins(peer,destination,wallet.getBalance());
    Thread.sleep(5000);
    peer.disconnect();
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    System.out.println(""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
}",0.8661971830985915
86027,"private void load(File file) throws IOException, BlockStoreException {
  LOG(""String_Node_Str"" + file.getAbsolutePath());
  FileInputStream input=new FileInputStream(file);
  int version=input.read();
  if (version == -1) {
    throw new FileNotFoundException(file.getName() + ""String_Node_Str"");
  }
  if (version != 1) {
    throw new BlockStoreException(""String_Node_Str"" + version);
  }
  byte[] chainHeadHash=new byte[32];
  input.read(chainHeadHash);
  this.chainHead=new Sha256Hash(chainHeadHash);
  LOG(""String_Node_Str"" + this.chainHead);
  long now=System.currentTimeMillis();
  byte[] headerBytes=new byte[Block.HEADER_SIZE];
  try {
    while (true) {
      if (input.read(headerBytes) < 80) {
        break;
      }
      Block b=new Block(params,headerBytes);
      StoredBlock prev=get(b.getPrevBlockHash());
      StoredBlock s;
      if (prev == null) {
        if (b.equals(params.genesisBlock)) {
          s=new StoredBlock(params.genesisBlock.cloneAsHeader(),params.genesisBlock.getWork(),0);
        }
 else {
          throw new BlockStoreException(""String_Node_Str"" + Utils.bytesToHexString(b.getHash()) + ""String_Node_Str""+ Utils.bytesToHexString(b.getPrevBlockHash()));
        }
      }
 else {
        b.verify();
        s=prev.build(b);
      }
      blockMap.put(new Sha256Hash(b.getHash()),s);
    }
  }
 catch (  ProtocolException e) {
    throw new BlockStoreException(e);
  }
catch (  VerificationException e) {
    throw new BlockStoreException(e);
  }
  long elapsed=System.currentTimeMillis() - now;
  LOG(""String_Node_Str"" + elapsed + ""String_Node_Str"");
}","private void load(File file) throws IOException, BlockStoreException {
  LOG(""String_Node_Str"" + file.getAbsolutePath());
  InputStream input=new BufferedInputStream(new FileInputStream(file));
  int version=input.read();
  if (version == -1) {
    throw new FileNotFoundException(file.getName() + ""String_Node_Str"");
  }
  if (version != 1) {
    throw new BlockStoreException(""String_Node_Str"" + version);
  }
  byte[] chainHeadHash=new byte[32];
  input.read(chainHeadHash);
  this.chainHead=new Sha256Hash(chainHeadHash);
  LOG(""String_Node_Str"" + this.chainHead);
  long now=System.currentTimeMillis();
  byte[] headerBytes=new byte[Block.HEADER_SIZE];
  try {
    while (true) {
      if (input.read(headerBytes) < 80) {
        break;
      }
      Block b=new Block(params,headerBytes);
      StoredBlock prev=get(b.getPrevBlockHash());
      StoredBlock s;
      if (prev == null) {
        if (b.equals(params.genesisBlock)) {
          s=new StoredBlock(params.genesisBlock.cloneAsHeader(),params.genesisBlock.getWork(),0);
        }
 else {
          throw new BlockStoreException(""String_Node_Str"" + Utils.bytesToHexString(b.getHash()) + ""String_Node_Str""+ Utils.bytesToHexString(b.getPrevBlockHash()));
        }
      }
 else {
        b.verify();
        s=prev.build(b);
      }
      blockMap.put(new Sha256Hash(b.getHash()),s);
    }
  }
 catch (  ProtocolException e) {
    throw new BlockStoreException(e);
  }
catch (  VerificationException e) {
    throw new BlockStoreException(e);
  }
  long elapsed=System.currentTimeMillis() - now;
  LOG(""String_Node_Str"" + elapsed + ""String_Node_Str"");
}",0.9772656493304268
86028,"public int getSizeInBytes(){
  if (value < 253)   return 1;
 else   if (value <= 65536)   return 3;
 else   if (value <= 4294967295L)   return 5;
 else   return 9;
}","public int getSizeInBytes(){
  if (isLessThanUnsigned(value,253))   return 1;
 else   if (isLessThanUnsigned(value,65536))   return 3;
 else   if (isLessThanUnsigned(value,4294967296L))   return 5;
 else   return 9;
}",0.7958115183246073
86029,"public byte[] encodeBE(){
  if (Utils.isLessThanUnsigned(value,253)) {
    return new byte[]{(byte)value};
  }
 else   if (Utils.isLessThanUnsigned(value,65536)) {
    return new byte[]{(byte)253,(byte)(value),(byte)(value >> 8)};
  }
 else   if (Utils.isLessThanUnsigned(value,4294967295L)) {
    byte[] bytes=new byte[5];
    bytes[0]=(byte)254;
    Utils.uint32ToByteArrayLE(value,bytes,1);
    return bytes;
  }
 else {
    byte[] bytes=new byte[9];
    bytes[0]=(byte)255;
    Utils.uint32ToByteArrayLE(value & 0xFFFFFFFF,bytes,1);
    Utils.uint32ToByteArrayLE(value >> 32,bytes,5);
    return bytes;
  }
}","public byte[] encodeBE(){
  if (isLessThanUnsigned(value,253)) {
    return new byte[]{(byte)value};
  }
 else   if (isLessThanUnsigned(value,65536)) {
    return new byte[]{(byte)253,(byte)(value),(byte)(value >> 8)};
  }
 else   if (isLessThanUnsigned(value,4294967295L)) {
    byte[] bytes=new byte[5];
    bytes[0]=(byte)254;
    Utils.uint32ToByteArrayLE(value,bytes,1);
    return bytes;
  }
 else {
    byte[] bytes=new byte[9];
    bytes[0]=(byte)255;
    Utils.uint32ToByteArrayLE(value,bytes,1);
    Utils.uint32ToByteArrayLE(value >>> 32,bytes,5);
    return bytes;
  }
}",0.9112227805695142
86030,"public static void main(final String[] args) throws InterruptedException, IOException {
  final Options options=new Options();
  options.addOption(""String_Node_Str"",true,""String_Node_Str"" + rateDefault + ""String_Node_Str"");
  options.addOption(""String_Node_Str"",true,""String_Node_Str"" + durationDefault + ""String_Node_Str"");
  options.addOption(""String_Node_Str"",true,""String_Node_Str"" + maxConnectionsDefault + ""String_Node_Str"");
  options.addOption(""String_Node_Str"",true,""String_Node_Str"" + timeoutDefault + ""String_Node_Str"");
  options.addOption(""String_Node_Str"",true,""String_Node_Str"" + printCycleDefault + ""String_Node_Str"");
  options.addOption(""String_Node_Str"",true,""String_Node_Str"" + checkCycleDefault + ""String_Node_Str"");
  options.addOption(""String_Node_Str"",false,""String_Node_Str"");
  options.addOption(""String_Node_Str"",false,""String_Node_Str"");
  options.addOption(""String_Node_Str"",true,""String_Node_Str"" + testNameDefault + ""String_Node_Str"");
  options.addOption(""String_Node_Str"",false,""String_Node_Str"");
  try {
    final CommandLine cmd=new BasicParser().parse(options,args);
    final String[] ar=cmd.getArgs();
    if (cmd.hasOption(""String_Node_Str"") || ar.length != 1)     printUsageAndExit(options);
    final String url=ar[0];
    final int timeout=Integer.parseInt(cmd.getOptionValue(""String_Node_Str"",timeoutDefault));
    final int maxConnections=Integer.parseInt(cmd.getOptionValue(""String_Node_Str"",maxConnectionsDefault));
    final int duration=Integer.parseInt(cmd.getOptionValue(""String_Node_Str"",durationDefault));
    final int printCycle=Integer.parseInt(cmd.getOptionValue(""String_Node_Str"",printCycleDefault));
    final int checkCycle=Integer.parseInt(cmd.getOptionValue(""String_Node_Str"",checkCycleDefault));
    final String testName=cmd.getOptionValue(""String_Node_Str"",testNameDefault);
    final int rate=Integer.parseInt(cmd.getOptionValue(""String_Node_Str"",rateDefault));
    final MetricRegistry metrics=new MetricRegistry();
    final Meter requestMeter=metrics.meter(""String_Node_Str"");
    final Meter responseMeter=metrics.meter(""String_Node_Str"");
    final Meter errorsMeter=metrics.meter(""String_Node_Str"");
    final Logger log=LoggerFactory.getLogger(Photon.class);
    final ConcurrentHashMap<String,AtomicInteger> errors=new ConcurrentHashMap<>();
    final HttpGet request=new HttpGet(url);
    final StripedTimeSeries<Long> sts=new StripedTimeSeries<>(30000,false);
    final StripedHistogram sh=new StripedHistogram(60000,5);
    log.info(""String_Node_Str"" + testName + ""String_Node_Str""+ url+ ""String_Node_Str""+ rate+ ""String_Node_Str""+ duration+ ""String_Node_Str""+ maxConnections+ ""String_Node_Str""+ ""String_Node_Str""+ timeout);
    final DefaultConnectingIOReactor ioreactor=new DefaultConnectingIOReactor(IOReactorConfig.custom().setConnectTimeout(timeout).setIoThreadCount(10).setSoTimeout(timeout).build());
    Runtime.getRuntime().addShutdownHook(new Thread(() -> {
      final List<ExceptionEvent> events=ioreactor.getAuditLog();
      for (      ExceptionEvent event : events) {
        System.err.println(""String_Node_Str"" + event.getTimestamp());
        if (event.getCause() != null)         event.getCause().printStackTrace();
      }
      if (cmd.hasOption(""String_Node_Str""))       printFinishStatistics(errorsMeter,sts,sh,testName);
      if (!errors.keySet().isEmpty())       errors.entrySet().stream().forEach(p -> log.info(testName + ""String_Node_Str"" + p.getKey()+ ""String_Node_Str""+ p.getValue()+ ""String_Node_Str""));
      System.out.println(testName + ""String_Node_Str"" + sh.getHistogramData().getValueAtPercentile(90)+ ""String_Node_Str"");
      if (cmd.hasOption(""String_Node_Str"")) {
        final HistogramData hd=sh.getHistogramData();
        System.out.format(""String_Node_Str"",testName,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
        System.out.format(""String_Node_Str"",testName,hd.getMinValue(),hd.getMean(),hd.getStdDeviation(),hd.getMaxValue());
      }
    }
));
    final PoolingNHttpClientConnectionManager mngr=new PoolingNHttpClientConnectionManager(ioreactor);
    mngr.setDefaultMaxPerRoute(maxConnections);
    mngr.setMaxTotal(maxConnections);
    final CloseableHttpAsyncClient ahc=HttpAsyncClientBuilder.create().setConnectionManager(mngr).setDefaultRequestConfig(RequestConfig.custom().setLocalAddress(null).build()).build();
    try (final CloseableHttpClient client=new FiberHttpClient(ahc)){
      final int num=duration * rate;
      final CountDownLatch cdl=new CountDownLatch(num);
      final Semaphore sem=new Semaphore(maxConnections);
      final RateLimiter rl=RateLimiter.create(rate);
      spawnStatisticsThread(printCycle,cdl,log,requestMeter,responseMeter,errorsMeter,testName);
      for (int i=0; i < num; i++) {
        rl.acquire();
        if (sem.availablePermits() == 0)         System.out.println(new Date() + ""String_Node_Str"");
        sem.acquireUninterruptibly();
        new Fiber<Void>(() -> {
          requestMeter.mark();
          final long start=System.nanoTime();
          try {
            try (final CloseableHttpResponse ignored=client.execute(request)){
              responseMeter.mark();
            }
 catch (            final Throwable t) {
              markError(errorsMeter,errors,t);
            }
          }
 catch (          final Throwable t) {
            markError(errorsMeter,errors,t);
          }
 finally {
            final long now=System.nanoTime();
            final long millis=TimeUnit.NANOSECONDS.toMillis(now - start);
            sts.record(start,millis);
            sh.recordValue(millis);
            sem.release();
            cdl.countDown();
          }
        }
).start();
      }
      spawnProgressCheckThread(log,duration,checkCycle,cdl);
      cdl.await();
    }
   }
 catch (  final ParseException ex) {
    System.err.println(""String_Node_Str"" + ex.getMessage());
  }
}","public static void main(final String[] args) throws InterruptedException, IOException {
  final Options options=new Options();
  options.addOption(""String_Node_Str"",true,""String_Node_Str"" + rateDefault + ""String_Node_Str"");
  options.addOption(""String_Node_Str"",true,""String_Node_Str"" + durationDefault + ""String_Node_Str"");
  options.addOption(""String_Node_Str"",true,""String_Node_Str"" + maxConnectionsDefault + ""String_Node_Str"");
  options.addOption(""String_Node_Str"",true,""String_Node_Str"" + timeoutDefault + ""String_Node_Str"");
  options.addOption(""String_Node_Str"",true,""String_Node_Str"" + printCycleDefault + ""String_Node_Str"");
  options.addOption(""String_Node_Str"",true,""String_Node_Str"" + checkCycleDefault + ""String_Node_Str"");
  options.addOption(""String_Node_Str"",false,""String_Node_Str"");
  options.addOption(""String_Node_Str"",false,""String_Node_Str"");
  options.addOption(""String_Node_Str"",true,""String_Node_Str"" + testNameDefault + ""String_Node_Str"");
  options.addOption(""String_Node_Str"",false,""String_Node_Str"");
  try {
    final CommandLine cmd=new BasicParser().parse(options,args);
    final String[] ar=cmd.getArgs();
    if (cmd.hasOption(""String_Node_Str"") || ar.length != 1)     printUsageAndExit(options);
    final String url=ar[0];
    final int timeout=Integer.parseInt(cmd.getOptionValue(""String_Node_Str"",timeoutDefault));
    final int maxConnections=Integer.parseInt(cmd.getOptionValue(""String_Node_Str"",maxConnectionsDefault));
    final int duration=Integer.parseInt(cmd.getOptionValue(""String_Node_Str"",durationDefault));
    final int printCycle=Integer.parseInt(cmd.getOptionValue(""String_Node_Str"",printCycleDefault));
    final int checkCycle=Integer.parseInt(cmd.getOptionValue(""String_Node_Str"",checkCycleDefault));
    final String testName=cmd.getOptionValue(""String_Node_Str"",testNameDefault);
    final int rate=Integer.parseInt(cmd.getOptionValue(""String_Node_Str"",rateDefault));
    final MetricRegistry metrics=new MetricRegistry();
    final Meter requestMeter=metrics.meter(""String_Node_Str"");
    final Meter responseMeter=metrics.meter(""String_Node_Str"");
    final Meter errorsMeter=metrics.meter(""String_Node_Str"");
    final Logger log=LoggerFactory.getLogger(Photon.class);
    final ConcurrentHashMap<String,AtomicInteger> errors=new ConcurrentHashMap<>();
    final HttpGet request=new HttpGet(url);
    final StripedTimeSeries<Long> sts=new StripedTimeSeries<>(30000,false);
    final StripedHistogram sh=new StripedHistogram(60000,5);
    log.info(""String_Node_Str"" + testName + ""String_Node_Str""+ url+ ""String_Node_Str""+ rate+ ""String_Node_Str""+ duration+ ""String_Node_Str""+ maxConnections+ ""String_Node_Str""+ ""String_Node_Str""+ timeout);
    final DefaultConnectingIOReactor ioreactor=new DefaultConnectingIOReactor(IOReactorConfig.custom().setConnectTimeout(timeout).setIoThreadCount(10).setSoTimeout(timeout).build());
    Runtime.getRuntime().addShutdownHook(new Thread(() -> {
      final List<ExceptionEvent> events=ioreactor.getAuditLog();
      if (events != null)       events.stream().filter(event -> event != null).forEach(event -> {
        System.err.println(""String_Node_Str"" + event.getTimestamp());
        if (event.getCause() != null)         event.getCause().printStackTrace();
      }
);
      if (cmd.hasOption(""String_Node_Str""))       printFinishStatistics(errorsMeter,sts,sh,testName);
      if (!errors.keySet().isEmpty())       errors.entrySet().stream().forEach(p -> log.info(testName + ""String_Node_Str"" + p.getKey()+ ""String_Node_Str""+ p.getValue()+ ""String_Node_Str""));
      System.out.println(testName + ""String_Node_Str"" + sh.getHistogramData().getValueAtPercentile(90)+ ""String_Node_Str"");
      if (cmd.hasOption(""String_Node_Str"")) {
        final HistogramData hd=sh.getHistogramData();
        System.out.format(""String_Node_Str"",testName,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
        System.out.format(""String_Node_Str"",testName,hd.getMinValue(),hd.getMean(),hd.getStdDeviation(),hd.getMaxValue());
      }
    }
));
    final PoolingNHttpClientConnectionManager mngr=new PoolingNHttpClientConnectionManager(ioreactor);
    mngr.setDefaultMaxPerRoute(maxConnections);
    mngr.setMaxTotal(maxConnections);
    final CloseableHttpAsyncClient ahc=HttpAsyncClientBuilder.create().setConnectionManager(mngr).setDefaultRequestConfig(RequestConfig.custom().setLocalAddress(null).build()).build();
    try (final CloseableHttpClient client=new FiberHttpClient(ahc)){
      final int num=duration * rate;
      final CountDownLatch cdl=new CountDownLatch(num);
      final Semaphore sem=new Semaphore(maxConnections);
      final RateLimiter rl=RateLimiter.create(rate);
      spawnStatisticsThread(printCycle,cdl,log,requestMeter,responseMeter,errorsMeter,testName);
      for (int i=0; i < num; i++) {
        rl.acquire();
        if (sem.availablePermits() == 0)         System.out.println(new Date() + ""String_Node_Str"");
        sem.acquireUninterruptibly();
        new Fiber<Void>(() -> {
          requestMeter.mark();
          final long start=System.nanoTime();
          try {
            try (final CloseableHttpResponse ignored=client.execute(request)){
              responseMeter.mark();
            }
 catch (            final Throwable t) {
              markError(errorsMeter,errors,t);
            }
          }
 catch (          final Throwable t) {
            markError(errorsMeter,errors,t);
          }
 finally {
            final long now=System.nanoTime();
            final long millis=TimeUnit.NANOSECONDS.toMillis(now - start);
            sts.record(start,millis);
            sh.recordValue(millis);
            sem.release();
            cdl.countDown();
          }
        }
).start();
      }
      spawnProgressCheckThread(log,duration,checkCycle,cdl);
      cdl.await();
    }
   }
 catch (  final ParseException ex) {
    System.err.println(""String_Node_Str"" + ex.getMessage());
  }
}",0.9724260055653934
86031,"private static void printFinishStatistics(Meter errors,StripedTimeSeries<Long> sts,StripedHistogram sh,String testName){
  File file=new File(testName + ""String_Node_Str"");
  try (PrintWriter out=new PrintWriter(file)){
    out.println(""String_Node_Str"" + errors.getCount());
    long millisTime=new Date().getTime();
    long nanoTime=System.nanoTime();
    sts.getRecords().forEach(rec -> out.println(df.format(new Date(TimeUnit.NANOSECONDS.toMillis(nanoTime - rec.timestamp) + millisTime)) + ""String_Node_Str"" + testName+ ""String_Node_Str""+ rec.value+ ""String_Node_Str""));
    out.println(""String_Node_Str"");
    for (int i=0; i <= 100; i++)     out.println(testName + ""String_Node_Str"" + i+ ""String_Node_Str""+ sh.getHistogramData().getValueAtPercentile(i));
    System.out.println(""String_Node_Str"" + file.getAbsolutePath());
  }
 catch (  FileNotFoundException ex) {
    System.err.println(ex);
  }
}","private static void printFinishStatistics(Meter errors,StripedTimeSeries<Long> sts,StripedHistogram sh,String testName){
  File file=new File(testName + ""String_Node_Str"");
  try (PrintWriter out=new PrintWriter(file)){
    out.println(""String_Node_Str"" + errors.getCount());
    long millisTime=new Date().getTime();
    long nanoTime=System.nanoTime();
    sts.getRecords().forEach(rec -> out.println(df.format(new Date(millisTime - TimeUnit.NANOSECONDS.toMillis(nanoTime - rec.timestamp))) + ""String_Node_Str"" + testName+ ""String_Node_Str""+ rec.value+ ""String_Node_Str""));
    out.println(""String_Node_Str"");
    for (int i=0; i <= 100; i++)     out.println(testName + ""String_Node_Str"" + i+ ""String_Node_Str""+ sh.getHistogramData().getValueAtPercentile(i));
    System.out.println(""String_Node_Str"" + file.getAbsolutePath());
  }
 catch (  FileNotFoundException ex) {
    System.err.println(ex);
  }
}",0.985635359116022
86032,"public void leavePlayerRaw(final String playername,final boolean fullLeave){
  if (!this.containsPlayer(playername)) {
    return;
  }
  final Player p=Bukkit.getPlayer(playername);
  final ArenaPlayer ap=ArenaPlayer.getPlayerInstance(playername);
  if (p == null) {
    return;
  }
  if (p.isDead()) {
    System.out.println(p.getName() + ""String_Node_Str"");
    Effects.playRespawn(p,plugin);
    Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
      public void run(){
        leavePlayerRaw(playername,fullLeave);
      }
    }
,10L);
    return;
  }
  this.players.remove(playername);
  if (pli.containsGlobalPlayer(playername)) {
    pli.global_players.remove(playername);
  }
  if (fullLeave) {
    plugin.getConfig().set(""String_Node_Str"" + playername + ""String_Node_Str"",playername);
    plugin.getConfig().set(""String_Node_Str"" + playername + ""String_Node_Str"",plugin.getName());
    if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
      for (      ItemStack i : ap.getInventory()) {
        if (i != null) {
          plugin.getConfig().set(""String_Node_Str"" + playername + ""String_Node_Str""+ Integer.toString((int)Math.round(Math.random() * 10000))+ i.getType().toString(),i);
        }
      }
    }
    plugin.saveConfig();
    try {
      if (pli.global_lost.containsKey(playername)) {
        pli.getSpectatorManager().showSpectator(p);
        pli.global_lost.remove(playername);
      }
 else {
        pli.getSpectatorManager().showSpectators(p);
      }
      if (pli.global_arcade_spectator.containsKey(playername)) {
        pli.global_arcade_spectator.remove(playername);
      }
      if (p != null) {
        p.removePotionEffect(PotionEffectType.JUMP);
        Util.teleportPlayerFixed(p,this.mainlobby);
        p.setFireTicks(0);
        p.setFlying(false);
        if (!p.isOp()) {
          p.setAllowFlight(false);
        }
        p.setGameMode(ap.getOriginalGamemode());
        p.setLevel(ap.getOriginalXplvl());
        p.getInventory().setContents(ap.getInventory());
        p.getInventory().setArmorContents(ap.getArmorInventory());
        p.updateInventory();
        p.setWalkSpeed(0.2F);
        p.setFoodLevel(20);
        p.setHealth(20D);
        p.removePotionEffect(PotionEffectType.JUMP);
        pli.getSpectatorManager().setSpectate(p,false);
        pli.getStatsInstance().updateSQLKillsDeathsAfter(p,this);
      }
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + e.getMessage());
    }
    return;
  }
  Util.clearInv(p);
  p.setWalkSpeed(0.2F);
  p.setFoodLevel(20);
  p.setHealth(20D);
  p.setFireTicks(0);
  p.removePotionEffect(PotionEffectType.JUMP);
  pli.getSpectatorManager().setSpectate(p,false);
  Bukkit.getServer().getPluginManager().callEvent(new PlayerLeaveArenaEvent(p,plugin,this));
  for (  PotionEffect effect : p.getActivePotionEffects()) {
    if (effect != null) {
      p.removePotionEffect(effect.getType());
    }
  }
  for (  Entity e : p.getNearbyEntities(50D,50D,50D)) {
    if (e.getType() == EntityType.DROPPED_ITEM || e.getType() == EntityType.SLIME || e.getType() == EntityType.ZOMBIE || e.getType() == EntityType.SKELETON || e.getType() == EntityType.SPIDER || e.getType() == EntityType.CREEPER) {
      e.remove();
    }
  }
  if (pli.global_arcade_spectator.containsKey(playername)) {
    pli.global_arcade_spectator.remove(playername);
  }
  if (pli.getPClasses().containsKey(playername)) {
    pli.getPClasses().remove(playername);
  }
  Util.updateSign(plugin,this);
  final String arenaname=this.getInternalName();
  final Arena a=this;
  final boolean started_=started;
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      if (p != null) {
        if (ai == null || a.isArcadeMain()) {
          if (a.mainlobby != null) {
            Util.teleportPlayerFixed(p,a.mainlobby);
          }
 else           if (a.waitinglobby != null) {
            Util.teleportPlayerFixed(p,a.waitinglobby);
          }
        }
        p.setFireTicks(0);
        p.setFlying(false);
        if (!p.isOp()) {
          p.setAllowFlight(false);
        }
        p.setGameMode(ap.getOriginalGamemode());
        p.setLevel(ap.getOriginalXplvl());
        p.getInventory().setContents(ap.getInventory());
        p.getInventory().setArmorContents(ap.getArmorInventory());
        p.updateInventory();
        p.updateInventory();
        if (started_) {
          pli.getStatsInstance().updateSQLKillsDeathsAfter(p,a);
          if (!ap.isNoReward()) {
            pli.getRewardsInstance().giveWinReward(playername,a,temp_players,global_coin_multiplier);
          }
 else {
            ap.setNoReward(false);
          }
        }
        if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
          Util.sendStatsMessage(pli,p);
        }
        if (pli.global_lost.containsKey(playername)) {
          pli.getSpectatorManager().showSpectator(p);
          pli.global_lost.remove(playername);
        }
 else {
          pli.getSpectatorManager().showSpectators(p);
        }
        try {
          pli.scoreboardManager.removeScoreboard(arenaname,p);
        }
 catch (        Exception e) {
        }
      }
    }
  }
,5L);
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    final String server=plugin.getConfig().getString(""String_Node_Str"");
    Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
      public void run(){
        BungeeUtil.connectToServer(MinigamesAPI.getAPI(),p.getName(),server);
      }
    }
,30L);
    return;
  }
}","public void leavePlayerRaw(final String playername,final boolean fullLeave){
  if (!this.containsPlayer(playername)) {
    return;
  }
  final Player p=Bukkit.getPlayer(playername);
  final ArenaPlayer ap=ArenaPlayer.getPlayerInstance(playername);
  if (p == null) {
    return;
  }
  if (p.isDead()) {
    System.out.println(p.getName() + ""String_Node_Str"");
    Effects.playRespawn(p,plugin);
    Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
      public void run(){
        leavePlayerRaw(playername,fullLeave);
      }
    }
,10L);
    return;
  }
  this.players.remove(playername);
  if (pli.containsGlobalPlayer(playername)) {
    pli.global_players.remove(playername);
  }
  if (fullLeave) {
    plugin.getConfig().set(""String_Node_Str"" + playername + ""String_Node_Str"",playername);
    plugin.getConfig().set(""String_Node_Str"" + playername + ""String_Node_Str"",plugin.getName());
    if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
      for (      ItemStack i : ap.getInventory()) {
        if (i != null) {
          plugin.getConfig().set(""String_Node_Str"" + playername + ""String_Node_Str""+ Integer.toString((int)Math.round(Math.random() * 10000))+ i.getType().toString(),i);
        }
      }
    }
    plugin.saveConfig();
    try {
      if (pli.global_lost.containsKey(playername)) {
        pli.getSpectatorManager().showSpectator(p);
        pli.global_lost.remove(playername);
      }
 else {
        pli.getSpectatorManager().showSpectators(p);
      }
      if (pli.global_arcade_spectator.containsKey(playername)) {
        pli.global_arcade_spectator.remove(playername);
      }
      if (p != null) {
        p.removePotionEffect(PotionEffectType.JUMP);
        Util.teleportPlayerFixed(p,this.mainlobby);
        p.setFireTicks(0);
        p.setFlying(false);
        if (!p.isOp()) {
          p.setAllowFlight(false);
        }
        p.setGameMode(ap.getOriginalGamemode());
        p.setLevel(ap.getOriginalXplvl());
        p.getInventory().setContents(ap.getInventory());
        p.getInventory().setArmorContents(ap.getArmorInventory());
        p.updateInventory();
        p.setWalkSpeed(0.2F);
        p.setFoodLevel(20);
        p.setHealth(20D);
        p.removePotionEffect(PotionEffectType.JUMP);
        pli.getSpectatorManager().setSpectate(p,false);
        pli.getStatsInstance().updateSQLKillsDeathsAfter(p,this);
      }
      if (pli.getClassesHandler().lasticonm.containsKey(p.getName())) {
        IconMenu iconm=pli.getClassesHandler().lasticonm.get(p.getName());
        iconm.destroy();
        pli.getClassesHandler().lasticonm.remove(p.getName());
      }
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + e.getMessage());
    }
    return;
  }
  Util.clearInv(p);
  p.setWalkSpeed(0.2F);
  p.setFoodLevel(20);
  p.setHealth(20D);
  p.setFireTicks(0);
  p.removePotionEffect(PotionEffectType.JUMP);
  pli.getSpectatorManager().setSpectate(p,false);
  Bukkit.getServer().getPluginManager().callEvent(new PlayerLeaveArenaEvent(p,plugin,this));
  for (  PotionEffect effect : p.getActivePotionEffects()) {
    if (effect != null) {
      p.removePotionEffect(effect.getType());
    }
  }
  for (  Entity e : p.getNearbyEntities(50D,50D,50D)) {
    if (e.getType() == EntityType.DROPPED_ITEM || e.getType() == EntityType.SLIME || e.getType() == EntityType.ZOMBIE || e.getType() == EntityType.SKELETON || e.getType() == EntityType.SPIDER || e.getType() == EntityType.CREEPER) {
      e.remove();
    }
  }
  if (pli.global_arcade_spectator.containsKey(playername)) {
    pli.global_arcade_spectator.remove(playername);
  }
  if (pli.getPClasses().containsKey(playername)) {
    pli.getPClasses().remove(playername);
  }
  Util.updateSign(plugin,this);
  if (pli.getClassesHandler().lasticonm.containsKey(p.getName())) {
    IconMenu iconm=pli.getClassesHandler().lasticonm.get(p.getName());
    iconm.destroy();
    pli.getClassesHandler().lasticonm.remove(p.getName());
  }
  final String arenaname=this.getInternalName();
  final Arena a=this;
  final boolean started_=started;
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      if (p != null) {
        if (ai == null || a.isArcadeMain()) {
          if (a.mainlobby != null) {
            Util.teleportPlayerFixed(p,a.mainlobby);
          }
 else           if (a.waitinglobby != null) {
            Util.teleportPlayerFixed(p,a.waitinglobby);
          }
        }
        p.setFireTicks(0);
        p.setFlying(false);
        if (!p.isOp()) {
          p.setAllowFlight(false);
        }
        p.setGameMode(ap.getOriginalGamemode());
        p.setLevel(ap.getOriginalXplvl());
        p.getInventory().setContents(ap.getInventory());
        p.getInventory().setArmorContents(ap.getArmorInventory());
        p.updateInventory();
        p.updateInventory();
        if (started_) {
          pli.getStatsInstance().updateSQLKillsDeathsAfter(p,a);
          if (!ap.isNoReward()) {
            pli.getRewardsInstance().giveWinReward(playername,a,temp_players,global_coin_multiplier);
          }
 else {
            ap.setNoReward(false);
          }
        }
        if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
          Util.sendStatsMessage(pli,p);
        }
        if (pli.global_lost.containsKey(playername)) {
          pli.getSpectatorManager().showSpectator(p);
          pli.global_lost.remove(playername);
        }
 else {
          pli.getSpectatorManager().showSpectators(p);
        }
        try {
          pli.scoreboardManager.removeScoreboard(arenaname,p);
        }
 catch (        Exception e) {
        }
      }
    }
  }
,5L);
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    final String server=plugin.getConfig().getString(""String_Node_Str"");
    Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
      public void run(){
        BungeeUtil.connectToServer(MinigamesAPI.getAPI(),p.getName(),server);
      }
    }
,30L);
    return;
  }
}",0.9595486111111112
86033,"public void openGUI(final String p){
  final Classes cl=this;
  IconMenu iconm;
  int mincount=pli.getAClasses().keySet().size();
  if (lasticonm.containsKey(p)) {
    iconm=lasticonm.get(p);
  }
 else {
    iconm=new IconMenu(pli.getMessagesConfig().classes_item,(9 * plugin.getConfig().getInt(""String_Node_Str"") > mincount - 1) ? 9 * plugin.getConfig().getInt(""String_Node_Str"") : Math.round(mincount / 9) * 9 + 9,new IconMenu.OptionClickEventHandler(){
      @Override public void onOptionClick(      IconMenu.OptionClickEvent event){
        if (event.getPlayer().getName().equalsIgnoreCase(p)) {
          if (pli.global_players.containsKey(p)) {
            if (pli.getArenas().contains(pli.global_players.get(p))) {
              String d=event.getName();
              Player p=event.getPlayer();
              if (pli.getAClasses().containsKey(d)) {
                cl.setClass(pli.getClassesHandler().getInternalNameByName(d),p.getName(),true);
              }
            }
          }
        }
        event.setWillClose(true);
      }
    }
,plugin);
  }
  int c=0;
  for (  String ac : pli.getAClasses().keySet()) {
    AClass ac_=pli.getAClasses().get(ac);
    if (ac_.isEnabled()) {
      int slot=c;
      if (pli.getClassesConfig().getConfig().isSet(""String_Node_Str"" + ac_.getInternalName() + ""String_Node_Str"")) {
        slot=pli.getClassesConfig().getConfig().getInt(""String_Node_Str"" + ac_.getInternalName() + ""String_Node_Str"");
        if (slot < 0 || slot > iconm.getSize() - 1) {
          slot=c;
        }
      }
      iconm.setOption(slot,ac_.getIcon().clone(),ac_.getName(),pli.getClassesConfig().getConfig().getString(""String_Node_Str"" + ac_.getInternalName() + ""String_Node_Str"").split(""String_Node_Str""));
      c++;
    }
  }
  iconm.open(Bukkit.getPlayerExact(p));
  lasticonm.put(p,iconm);
}","public void openGUI(final String p){
  final Classes cl=this;
  IconMenu iconm;
  int mincount=pli.getAClasses().keySet().size();
  if (lasticonm.containsKey(p)) {
    iconm=lasticonm.get(p);
  }
 else {
    iconm=new IconMenu(pli.getMessagesConfig().classes_item,(9 * plugin.getConfig().getInt(""String_Node_Str"") > mincount - 1) ? 9 * plugin.getConfig().getInt(""String_Node_Str"") : Math.round(mincount / 9) * 9 + 9,new IconMenu.OptionClickEventHandler(){
      @Override public void onOptionClick(      IconMenu.OptionClickEvent event){
        if (event.getPlayer().getName().equalsIgnoreCase(p)) {
          if (pli.global_players.containsKey(p)) {
            if (pli.getArenas().contains(pli.global_players.get(p))) {
              String d=event.getName();
              Player p=event.getPlayer();
              if (pli.getAClasses().containsKey(d)) {
                cl.setClass(pli.getClassesHandler().getInternalNameByName(d),p.getName(),true);
              }
            }
          }
        }
        event.setWillClose(true);
      }
    }
,plugin);
    int c=0;
    for (    String ac : pli.getAClasses().keySet()) {
      AClass ac_=pli.getAClasses().get(ac);
      if (ac_.isEnabled()) {
        int slot=c;
        if (pli.getClassesConfig().getConfig().isSet(""String_Node_Str"" + ac_.getInternalName() + ""String_Node_Str"")) {
          slot=pli.getClassesConfig().getConfig().getInt(""String_Node_Str"" + ac_.getInternalName() + ""String_Node_Str"");
          if (slot < 0 || slot > iconm.getSize() - 1) {
            slot=c;
          }
        }
        iconm.setOption(slot,ac_.getIcon().clone(),ac_.getName(),pli.getClassesConfig().getConfig().getString(""String_Node_Str"" + ac_.getInternalName() + ""String_Node_Str"").split(""String_Node_Str""));
        c++;
      }
    }
  }
  iconm.open(Bukkit.getPlayerExact(p));
  lasticonm.put(p,iconm);
}",0.9875406283856988
86034,"public boolean stopArena(PluginInstance pli,CommandSender sender,String[] args,String uber_permission,String cmd,String action,JavaPlugin plugin,Player p){
  if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
    sender.sendMessage(pli.getMessagesConfig().no_perm);
    return true;
  }
  if (args.length > 1) {
    Arena temp=pli.getArenaByName(args[1]);
    if (temp != null) {
      temp.stop();
      sender.sendMessage(pli.getMessagesConfig().arena_action.replaceAll(""String_Node_Str"",args[1]).replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
    }
  }
 else {
    sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
  return true;
}","public boolean stopArena(PluginInstance pli,CommandSender sender,String[] args,String uber_permission,String cmd,String action,JavaPlugin plugin,Player p){
  if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
    sender.sendMessage(pli.getMessagesConfig().no_perm);
    return true;
  }
  if (args.length > 1) {
    Arena temp=pli.getArenaByName(args[1]);
    if (temp != null) {
      temp.stop();
      sender.sendMessage(pli.getMessagesConfig().arena_action.replaceAll(""String_Node_Str"",args[1]).replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
    }
  }
 else {
    if (pli.containsGlobalPlayer(p.getName())) {
      Arena a=pli.global_players.get(p.getName());
      a.stop();
      sender.sendMessage(pli.getMessagesConfig().arena_action.replaceAll(""String_Node_Str"",args[1]).replaceAll(""String_Node_Str"",""String_Node_Str""));
      return true;
    }
    sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
  return true;
}",0.8508457201435161
86035,"public static void sendStatsMessage(PluginInstance pli,Player p){
  if (pli.getMessagesConfig().getConfig().isSet(""String_Node_Str"")) {
    int kills_=pli.getStatsInstance().getKills(p.getName());
    int deaths_=pli.getStatsInstance().getDeaths(p.getName());
    int money_=(int)MinigamesAPI.econ.getBalance(p.getName());
    String wins=Integer.toString(pli.getStatsInstance().getWins(p.getName()));
    String loses=Integer.toString(pli.getStatsInstance().getLoses(p.getName()));
    String kills=Integer.toString(kills_);
    String deaths=Integer.toString(deaths_);
    String money=Integer.toString(money_);
    String points=Integer.toString(pli.getStatsInstance().getPoints(p.getName()));
    String kdr=Integer.toString(Math.max(kills_,1) / Math.max(deaths_,1));
    for (    String key : pli.getMessagesConfig().getConfig().getConfigurationSection(""String_Node_Str"").getKeys(false)) {
      String msg=pli.getMessagesConfig().getConfig().getString(""String_Node_Str"" + key).replaceAll(""String_Node_Str"",wins).replaceAll(""String_Node_Str"",loses).replaceAll(""String_Node_Str"",kills).replaceAll(""String_Node_Str"",deaths).replaceAll(""String_Node_Str"",points).replaceAll(""String_Node_Str"",kdr).replaceAll(""String_Node_Str"",money);
      Util.sendMessage(pli.getPlugin(),p,ChatColor.translateAlternateColorCodes('&',msg));
    }
  }
}","public static void sendStatsMessage(PluginInstance pli,Player p){
  if (pli.getMessagesConfig().getConfig().isSet(""String_Node_Str"")) {
    int kills_=pli.getStatsInstance().getKills(p.getName());
    int deaths_=pli.getStatsInstance().getDeaths(p.getName());
    int money_=0;
    if (MinigamesAPI.economy) {
      money_=(int)MinigamesAPI.econ.getBalance(p.getName());
    }
    String wins=Integer.toString(pli.getStatsInstance().getWins(p.getName()));
    String loses=Integer.toString(pli.getStatsInstance().getLoses(p.getName()));
    String kills=Integer.toString(kills_);
    String deaths=Integer.toString(deaths_);
    String money=Integer.toString(money_);
    String points=Integer.toString(pli.getStatsInstance().getPoints(p.getName()));
    String kdr=Integer.toString(Math.max(kills_,1) / Math.max(deaths_,1));
    for (    String key : pli.getMessagesConfig().getConfig().getConfigurationSection(""String_Node_Str"").getKeys(false)) {
      String msg=pli.getMessagesConfig().getConfig().getString(""String_Node_Str"" + key).replaceAll(""String_Node_Str"",wins).replaceAll(""String_Node_Str"",loses).replaceAll(""String_Node_Str"",kills).replaceAll(""String_Node_Str"",deaths).replaceAll(""String_Node_Str"",points).replaceAll(""String_Node_Str"",kdr).replaceAll(""String_Node_Str"",money);
      Util.sendMessage(pli.getPlugin(),p,ChatColor.translateAlternateColorCodes('&',msg));
    }
  }
}",0.9765395894428152
86036,"public void startRaw(final Arena a){
  currentarena.getArena().setArenaState(ArenaState.INGAME);
  startedIngameCountdown=false;
  Util.updateSign(plugin,a);
  Bukkit.getServer().getPluginManager().callEvent(new ArenaStartEvent(plugin,this));
  boolean send_game_started_msg=plugin.getConfig().getBoolean(""String_Node_Str"");
  for (  String p_ : a.getAllPlayers()) {
    try {
      if (!pli.global_lost.containsKey(p_)) {
        Player p=Bukkit.getPlayer(p_);
        if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
          if (!pli.getClassesHandler().hasClass(p_)) {
            pli.getClassesHandler().setClass(""String_Node_Str"",p_,false);
          }
          pli.getClassesHandler().getClass(p_);
        }
 else {
          Util.clearInv(Bukkit.getPlayer(p_));
          pli.getClassesHandler().getClass(p_);
        }
        if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
          pli.getShopHandler().giveShopItems(p);
        }
        p.setFlying(false);
        p.setAllowFlight(false);
      }
    }
 catch (    Exception e) {
      if (MinigamesAPI.debug) {
        e.printStackTrace();
      }
      System.out.println(""String_Node_Str"" + e.getMessage() + ""String_Node_Str""+ e.getStackTrace()[1].getLineNumber()+ ""String_Node_Str""+ e.getStackTrace()[0].getLineNumber());
    }
    Player p=Bukkit.getPlayer(p_);
    p.setWalkSpeed(0.2F);
    p.setFoodLevel(20);
    p.removePotionEffect(PotionEffectType.JUMP);
    if (send_game_started_msg) {
      p.sendMessage(pli.getMessagesConfig().game_started);
    }
  }
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    Bukkit.setWhitelist(true);
  }
  spectator_task=Bukkit.getScheduler().runTaskTimer(plugin,new Runnable(){
    public void run(){
      try {
        for (        String p_ : a.getAllPlayers()) {
          if (!pli.global_lost.containsKey(p_)) {
            continue;
          }
          Player p=Bukkit.getPlayer(p_);
          if (p != null) {
            for (            String p__ : a.getAllPlayers()) {
              if (p_ != p__) {
                Player p2=Bukkit.getPlayer(p__);
                if ((Math.abs(p.getLocation().getBlockX() - p2.getLocation().getBlockX()) < 4) && (Math.abs(p.getLocation().getBlockZ() - p2.getLocation().getBlockZ()) < 4) && (Math.abs(p.getLocation().getBlockY() - p2.getLocation().getBlockY()) < 4)) {
                  Vector direction=p2.getLocation().add(0D,-0.5D,0D).toVector().subtract(p.getLocation().toVector()).normalize().multiply(-1.15D);
                  p.setVelocity(direction);
                  if (p.isInsideVehicle()) {
                    p.getVehicle().setVelocity(direction.multiply(2D));
                  }
                  break;
                }
              }
            }
          }
        }
      }
 catch (      Exception e) {
        if (spectator_task != null) {
          spectator_task.cancel();
        }
      }
    }
  }
,10L,10L);
  started=true;
  Bukkit.getServer().getPluginManager().callEvent(new ArenaStartedEvent(plugin,this));
  started();
  try {
    Bukkit.getScheduler().cancelTask(currenttaskid);
  }
 catch (  Exception e) {
  }
  maximum_game_time=Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      for (      String p_ : a.getAllPlayers()) {
        if (Validator.isPlayerValid(plugin,p_,a)) {
          Bukkit.getPlayer(p_).sendMessage(pli.getMessagesConfig().stop_cause_maximum_game_time);
        }
      }
      Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
        public void run(){
          a.stop();
        }
      }
,5 * 20L);
    }
  }
,20L * 60L * (long)plugin.getConfig().getDouble(""String_Node_Str"") - 5 * 20L);
}","public void startRaw(final Arena a){
  currentarena.getArena().setArenaState(ArenaState.INGAME);
  startedIngameCountdown=false;
  Util.updateSign(plugin,a);
  Bukkit.getServer().getPluginManager().callEvent(new ArenaStartEvent(plugin,this));
  boolean send_game_started_msg=plugin.getConfig().getBoolean(""String_Node_Str"");
  for (  String p_ : a.getAllPlayers()) {
    try {
      if (!pli.global_lost.containsKey(p_)) {
        Player p=Bukkit.getPlayer(p_);
        if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
          if (!pli.getClassesHandler().hasClass(p_)) {
            pli.getClassesHandler().setClass(""String_Node_Str"",p_,false);
          }
          pli.getClassesHandler().getClass(p_);
        }
 else {
          Util.clearInv(Bukkit.getPlayer(p_));
          pli.getClassesHandler().getClass(p_);
        }
        if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
          pli.getShopHandler().giveShopItems(p);
        }
        p.setFlying(false);
        p.setAllowFlight(false);
      }
    }
 catch (    Exception e) {
      if (MinigamesAPI.debug) {
        e.printStackTrace();
      }
      System.out.println(""String_Node_Str"" + e.getMessage() + ""String_Node_Str""+ e.getStackTrace()[1].getLineNumber()+ ""String_Node_Str""+ e.getStackTrace()[0].getLineNumber());
    }
    Player p=Bukkit.getPlayer(p_);
    p.setWalkSpeed(0.2F);
    p.setFoodLevel(20);
    p.removePotionEffect(PotionEffectType.JUMP);
    if (send_game_started_msg) {
      p.sendMessage(pli.getMessagesConfig().game_started);
    }
  }
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    Bukkit.setWhitelist(true);
  }
  spectator_task=Bukkit.getScheduler().runTaskTimer(plugin,new Runnable(){
    public void run(){
      if (pli.spectator_mode_1_8) {
        return;
      }
      try {
        for (        String p_ : a.getAllPlayers()) {
          if (!pli.global_lost.containsKey(p_)) {
            continue;
          }
          Player p=Bukkit.getPlayer(p_);
          if (p != null) {
            for (            String p__ : a.getAllPlayers()) {
              if (p_ != p__) {
                Player p2=Bukkit.getPlayer(p__);
                if ((Math.abs(p.getLocation().getBlockX() - p2.getLocation().getBlockX()) < 4) && (Math.abs(p.getLocation().getBlockZ() - p2.getLocation().getBlockZ()) < 4) && (Math.abs(p.getLocation().getBlockY() - p2.getLocation().getBlockY()) < 4)) {
                  Vector direction=p2.getLocation().add(0D,-0.5D,0D).toVector().subtract(p.getLocation().toVector()).normalize().multiply(-1.15D);
                  p.setVelocity(direction);
                  if (p.isInsideVehicle()) {
                    p.getVehicle().setVelocity(direction.multiply(2D));
                  }
                  break;
                }
              }
            }
          }
        }
      }
 catch (      Exception e) {
        if (spectator_task != null) {
          spectator_task.cancel();
        }
      }
    }
  }
,10L,10L);
  started=true;
  Bukkit.getServer().getPluginManager().callEvent(new ArenaStartedEvent(plugin,this));
  started();
  try {
    Bukkit.getScheduler().cancelTask(currenttaskid);
  }
 catch (  Exception e) {
  }
  maximum_game_time=Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      for (      String p_ : a.getAllPlayers()) {
        if (Validator.isPlayerValid(plugin,p_,a)) {
          Bukkit.getPlayer(p_).sendMessage(pli.getMessagesConfig().stop_cause_maximum_game_time);
        }
      }
      Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
        public void run(){
          a.stop();
        }
      }
,5 * 20L);
    }
  }
,20L * 60L * (long)plugin.getConfig().getDouble(""String_Node_Str"") - 5 * 20L);
}",0.9919311457772996
86037,"@EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void onPlayerTeleport(PlayerTeleportEvent event){
  final Player player=event.getPlayer();
  if (pli.containsGlobalPlayer(player.getName())) {
    final int visibleDistance=16;
    Bukkit.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
      @Override public void run(){
        final List<Player> nearby=getPlayersWithin(player,visibleDistance);
        updateEntities(nearby,false);
        Bukkit.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          @Override public void run(){
            updateEntities(nearby,true);
          }
        }
,1);
      }
    }
,5L);
  }
}","@EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void onPlayerTeleport(PlayerTeleportEvent event){
  if (event.getCause().equals(TeleportCause.UNKNOWN) && pli.spectator_mode_1_8) {
    return;
  }
  final Player player=event.getPlayer();
  if (pli.containsGlobalPlayer(player.getName())) {
    final int visibleDistance=16;
    Bukkit.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
      @Override public void run(){
        final List<Player> nearby=getPlayersWithin(player,visibleDistance);
        updateEntities(nearby,false);
        Bukkit.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
          @Override public void run(){
            updateEntities(nearby,true);
          }
        }
,1);
      }
    }
,5L);
  }
}",0.9350993377483444
86038,"public void resetSmartResetBlock(SmartArenaBlock ablock){
  final Block b_=ablock.getBlock().getWorld().getBlockAt(ablock.getBlock().getLocation());
  if (b_.getType() == Material.FURNACE) {
    ((Furnace)b_.getState()).getInventory().clear();
    ((Furnace)b_.getState()).update();
  }
  if (b_.getType() == Material.CHEST) {
    ((Chest)b_.getState()).getBlockInventory().clear();
    ((Chest)b_.getState()).update();
  }
  if (!b_.getType().toString().equalsIgnoreCase(ablock.getMaterial().toString()) || b_.getData() != ablock.getData()) {
    b_.setType(ablock.getMaterial());
    b_.setData(ablock.getData());
  }
  if (b_.getType() == Material.CHEST) {
    if (ablock.isDoubleChest()) {
      DoubleChest dc=ablock.getDoubleChest();
      HashMap<Integer,ItemStack> chestinv=ablock.getNewInventory();
      for (      Integer i : chestinv.keySet()) {
        ItemStack item=chestinv.get(i);
        if (item != null) {
          dc.getInventory().setItem(i,item);
        }
      }
      ((Chest)b_.getState()).update();
      return;
    }
    ((Chest)b_.getState()).getBlockInventory().clear();
    ((Chest)b_.getState()).update();
    HashMap<Integer,ItemStack> chestinv=ablock.getNewInventory();
    for (    Integer i : chestinv.keySet()) {
      ItemStack item=chestinv.get(i);
      if (item != null) {
        ((Chest)b_.getState()).getBlockInventory().setItem(i,item);
      }
    }
    ((Chest)b_.getState()).update();
  }
  if (b_.getType() == Material.WALL_SIGN || b_.getType() == Material.SIGN_POST) {
    Sign sign=(Sign)b_.getState();
    if (sign != null) {
      int i=0;
      for (      String line : ablock.getSignLines()) {
        sign.setLine(i,line);
        i++;
        if (i > 3) {
          break;
        }
      }
      sign.update();
    }
  }
}","public void resetSmartResetBlock(SmartArenaBlock ablock){
  final Block b_=ablock.getBlock().getWorld().getBlockAt(ablock.getBlock().getLocation());
  if (b_.getType() == Material.FURNACE) {
    ((Furnace)b_.getState()).getInventory().clear();
    ((Furnace)b_.getState()).update();
  }
  if (b_.getType() == Material.CHEST) {
    ((Chest)b_.getState()).getBlockInventory().clear();
    ((Chest)b_.getState()).update();
  }
  if (!b_.getType().toString().equalsIgnoreCase(ablock.getMaterial().toString()) || b_.getData() != ablock.getData()) {
    b_.setType(ablock.getMaterial());
    b_.setData(ablock.getData());
  }
  if (b_.getType() == Material.CHEST) {
    if (ablock.isDoubleChest()) {
      DoubleChest dc=ablock.getDoubleChest();
      HashMap<Integer,ItemStack> chestinv=ablock.getNewInventory();
      for (      Integer i : chestinv.keySet()) {
        ItemStack item=chestinv.get(i);
        if (item != null) {
          dc.getInventory().setItem(i,item);
        }
      }
      ((Chest)b_.getState()).update();
      return;
    }
    ((Chest)b_.getState()).getBlockInventory().clear();
    ((Chest)b_.getState()).update();
    HashMap<Integer,ItemStack> chestinv=ablock.getNewInventory();
    for (    Integer i : chestinv.keySet()) {
      ItemStack item=chestinv.get(i);
      if (item != null) {
        if (i < 27) {
          ((Chest)b_.getState()).getBlockInventory().setItem(i,item);
        }
      }
    }
    ((Chest)b_.getState()).update();
  }
  if (b_.getType() == Material.WALL_SIGN || b_.getType() == Material.SIGN_POST) {
    Sign sign=(Sign)b_.getState();
    if (sign != null) {
      int i=0;
      for (      String line : ablock.getSignLines()) {
        sign.setLine(i,line);
        i++;
        if (i > 3) {
          break;
        }
      }
      sign.update();
    }
  }
}",0.9905555555555556
86039,"@EventHandler public void onBlockPhysics(BlockPhysicsEvent event){
  for (  Arena a : pli.getArenas()) {
    if (Validator.isArenaValid(plugin,a) && a.getArenaType() == ArenaType.REGENERATION) {
      Cuboid c=a.getBoundaries();
      if (c != null) {
        if (a.getArenaState() == ArenaState.INGAME) {
          if (c.containsLocWithoutY(event.getBlock().getLocation())) {
            if (event.getChangedType() == Material.CARPET || event.getChangedType() == Material.BED_BLOCK) {
              return;
            }
            a.getSmartReset().addChanged(event.getBlock(),event.getBlock().getType().equals(Material.CHEST),ChangeCause.PHYSICS);
          }
        }
 else         if (a.getArenaState() == ArenaState.RESTARTING) {
          event.setCancelled(true);
        }
      }
    }
  }
}","@EventHandler public void onBlockPhysics(BlockPhysicsEvent event){
  for (  Arena a : pli.getArenas()) {
    if (a.getArenaType() == ArenaType.REGENERATION) {
      Cuboid c=a.getBoundaries();
      if (c != null) {
        if (a.getArenaState() == ArenaState.INGAME) {
          if (c.containsLocWithoutY(event.getBlock().getLocation())) {
            if (event.getChangedType() == Material.CARPET || event.getChangedType() == Material.BED_BLOCK) {
              return;
            }
            a.getSmartReset().addChanged(event.getBlock(),event.getBlock().getType().equals(Material.CHEST),ChangeCause.PHYSICS);
          }
        }
 else         if (a.getArenaState() == ArenaState.RESTARTING) {
          event.setCancelled(true);
        }
      }
    }
  }
}",0.9770700636942676
86040,"@EventHandler public void onBlockSpread(BlockSpreadEvent event){
  for (  Arena a : pli.getArenas()) {
    if (Validator.isArenaValid(plugin,a) && a.getArenaType() == ArenaType.REGENERATION) {
      Cuboid c=a.getBoundaries();
      if (c != null) {
        if (a.getArenaState() == ArenaState.INGAME) {
          a.getSmartReset().addChanged(event.getBlock().getLocation());
        }
 else         if (a.getArenaState() == ArenaState.RESTARTING) {
          event.setCancelled(true);
        }
      }
    }
  }
}","@EventHandler public void onBlockSpread(BlockSpreadEvent event){
  for (  Arena a : pli.getArenas()) {
    if (a.getArenaType() == ArenaType.REGENERATION) {
      Cuboid c=a.getBoundaries();
      if (c != null) {
        if (a.getArenaState() == ArenaState.INGAME) {
          a.getSmartReset().addChanged(event.getBlock().getLocation());
        }
 else         if (a.getArenaState() == ArenaState.RESTARTING) {
          event.setCancelled(true);
        }
      }
    }
  }
}",0.9637826961770624
86041,"@EventHandler public void onEntityChangeBlock(EntityChangeBlockEvent event){
  if (event.getEntity() instanceof Enderman) {
    for (    Arena a : pli.getArenas()) {
      if (Validator.isArenaValid(plugin,a) && a.getArenaType() == ArenaType.REGENERATION) {
        Cuboid c=a.getBoundaries();
        if (c != null) {
          if (c.containsLocWithoutY(event.getEntity().getLocation())) {
            a.getSmartReset().addChanged(event.getBlock(),event.getBlock().getType().equals(Material.CHEST),ChangeCause.ENTITY_CHANGE);
          }
        }
      }
    }
  }
}","@EventHandler public void onEntityChangeBlock(EntityChangeBlockEvent event){
  if (event.getEntity() instanceof Enderman) {
    for (    Arena a : pli.getArenas()) {
      if (a.getArenaType() == ArenaType.REGENERATION) {
        Cuboid c=a.getBoundaries();
        if (c != null) {
          if (c.containsLocWithoutY(event.getEntity().getLocation())) {
            a.getSmartReset().addChanged(event.getBlock(),event.getBlock().getType().equals(Material.CHEST),ChangeCause.ENTITY_CHANGE);
          }
        }
      }
    }
  }
}",0.9672727272727272
86042,"@EventHandler public void onExplode(EntityExplodeEvent event){
  for (  Arena a : pli.getArenas()) {
    if (Validator.isArenaValid(plugin,a) && a.getArenaType() == ArenaType.REGENERATION) {
      Cuboid c=a.getBoundaries();
      if (c != null) {
        if (event.getEntity() != null) {
          if (c.containsLocWithoutY(event.getEntity().getLocation())) {
            for (            Block b : event.blockList()) {
              a.getSmartReset().addChanged(b,b.getType().equals(Material.CHEST));
            }
          }
        }
      }
    }
  }
}","@EventHandler public void onExplode(EntityExplodeEvent event){
  for (  Arena a : pli.getArenas()) {
    if (a.getArenaType() == ArenaType.REGENERATION) {
      Cuboid c=a.getBoundaries();
      if (c != null) {
        if (event.getEntity() != null) {
          if (c.containsLocWithoutY(event.getEntity().getLocation())) {
            for (            Block b : event.blockList()) {
              a.getSmartReset().addChanged(b,b.getType().equals(Material.CHEST));
            }
          }
        }
      }
    }
  }
}",0.9666666666666668
86043,"@EventHandler public void onLeavesDecay(LeavesDecayEvent event){
  for (  Arena a : pli.getArenas()) {
    if (Validator.isArenaValid(plugin,a) && a.getArenaType() == ArenaType.REGENERATION && a.getArenaState() == ArenaState.INGAME) {
      Cuboid c=a.getBoundaries();
      if (c != null) {
        if (c.containsLocWithoutY(event.getBlock().getLocation())) {
          a.getSmartReset().addChanged(event.getBlock(),event.getBlock().getType().equals(Material.CHEST));
        }
      }
    }
  }
}","@EventHandler public void onLeavesDecay(LeavesDecayEvent event){
  for (  Arena a : pli.getArenas()) {
    if (a.getArenaType() == ArenaType.REGENERATION && a.getArenaState() == ArenaState.INGAME) {
      Cuboid c=a.getBoundaries();
      if (c != null) {
        if (c.containsLocWithoutY(event.getBlock().getLocation())) {
          a.getSmartReset().addChanged(event.getBlock(),event.getBlock().getType().equals(Material.CHEST));
        }
      }
    }
  }
}",0.9625
86044,"@EventHandler public void onBlockFromTo(BlockFromToEvent event){
  for (  Arena a : pli.getArenas()) {
    if (Validator.isArenaValid(plugin,a) && a.getArenaType() == ArenaType.REGENERATION) {
      Cuboid c=a.getBoundaries();
      if (c != null) {
        if (c.containsLocWithoutY(event.getBlock().getLocation())) {
          if (a.getArenaState() == ArenaState.INGAME) {
            a.getSmartReset().addChanged(event.getToBlock(),event.getToBlock().getType().equals(Material.CHEST),ChangeCause.FROM_TO);
          }
 else           if (a.getArenaState() == ArenaState.RESTARTING) {
            event.setCancelled(true);
          }
        }
      }
    }
  }
}","@EventHandler public void onBlockFromTo(BlockFromToEvent event){
  for (  Arena a : pli.getArenas()) {
    if (a.getArenaType() == ArenaType.REGENERATION) {
      Cuboid c=a.getBoundaries();
      if (c != null) {
        if (c.containsLocWithoutY(event.getBlock().getLocation())) {
          if (a.getArenaState() == ArenaState.INGAME) {
            a.getSmartReset().addChanged(event.getToBlock(),event.getToBlock().getType().equals(Material.CHEST),ChangeCause.FROM_TO);
          }
 else           if (a.getArenaState() == ArenaState.RESTARTING) {
            event.setCancelled(true);
          }
        }
      }
    }
  }
}",0.9722222222222222
86045,"@EventHandler public void onBlockFade(BlockFadeEvent event){
  for (  Arena a : pli.getArenas()) {
    if (Validator.isArenaValid(plugin,a) && a.getArenaType() == ArenaType.REGENERATION && a.getArenaState() == ArenaState.INGAME) {
      Cuboid c=a.getBoundaries();
      if (c != null) {
        if (c.containsLocWithoutY(event.getBlock().getLocation())) {
          a.getSmartReset().addChanged(event.getBlock(),event.getBlock().getType().equals(Material.CHEST),ChangeCause.FADE);
        }
      }
    }
  }
}","@EventHandler public void onBlockFade(BlockFadeEvent event){
  for (  Arena a : pli.getArenas()) {
    if (a.getArenaType() == ArenaType.REGENERATION && a.getArenaState() == ArenaState.INGAME) {
      Cuboid c=a.getBoundaries();
      if (c != null) {
        if (c.containsLocWithoutY(event.getBlock().getLocation())) {
          a.getSmartReset().addChanged(event.getBlock(),event.getBlock().getType().equals(Material.CHEST),ChangeCause.FADE);
        }
      }
    }
  }
}",0.9634888438133874
86046,"public void getClass(String player){
  AClass c=pli.getPClasses().get(player);
  final Player p=Bukkit.getServer().getPlayer(player);
  Util.clearInv(p);
  ArrayList<ItemStack> items=new ArrayList<ItemStack>(Arrays.asList(c.getItems()));
  ArrayList<ItemStack> temp=new ArrayList<ItemStack>(Arrays.asList(c.getItems()));
  ArrayList<String> tempguns=new ArrayList<String>();
  final ArrayList<PotionEffectType> temppotions=new ArrayList<PotionEffectType>();
  final ArrayList<Integer> temppotions_lv=new ArrayList<Integer>();
  final ArrayList<Integer> temppotions_duration=new ArrayList<Integer>();
  for (  ItemStack item : temp) {
    if (item != null) {
      if (item.hasItemMeta()) {
        if (item.getItemMeta().hasDisplayName()) {
          if (item.getItemMeta().getDisplayName().startsWith(""String_Node_Str"")) {
            items.remove(item);
            tempguns.add(item.getItemMeta().getDisplayName().split(""String_Node_Str"")[1]);
          }
 else           if (item.getItemMeta().getDisplayName().startsWith(""String_Node_Str"")) {
            items.remove(item);
            String potioneffect=item.getItemMeta().getDisplayName().split(""String_Node_Str"")[1];
            String data=item.getItemMeta().getDisplayName().split(""String_Node_Str"")[2];
            Integer time=Integer.parseInt(data.substring(0,data.indexOf(""String_Node_Str"")));
            Integer lv=Integer.parseInt(data.split(""String_Node_Str"")[1]);
            if (PotionEffectType.getByName(potioneffect) != null) {
              temppotions.add(PotionEffectType.getByName(potioneffect));
              temppotions_lv.add(lv);
              temppotions_duration.add(time);
            }
          }
        }
      }
    }
  }
  for (  ItemStack item : items) {
    if (item != null) {
      Color c_=null;
      if (item.hasItemMeta()) {
        if (item.getItemMeta().hasDisplayName()) {
          if (item.getItemMeta().getDisplayName().startsWith(""String_Node_Str"") && item.getItemMeta().getDisplayName().length() == 7) {
            c_=Util.hexToRgb(item.getItemMeta().getDisplayName());
          }
        }
      }
      if (item.getTypeId() == 298 || item.getTypeId() == 302 || item.getTypeId() == 306 || item.getTypeId() == 310 || item.getTypeId() == 314) {
        if (item.getTypeId() == 298) {
          LeatherArmorMeta lam=(LeatherArmorMeta)item.getItemMeta();
          if (c_ != null) {
            lam.setColor(c_);
          }
          item.setItemMeta(lam);
        }
        p.getInventory().setHelmet(item);
        continue;
      }
      if (item.getTypeId() == 299 || item.getTypeId() == 303 || item.getTypeId() == 307 || item.getTypeId() == 311 || item.getTypeId() == 315) {
        if (item.getTypeId() == 299) {
          LeatherArmorMeta lam=(LeatherArmorMeta)item.getItemMeta();
          if (c_ != null) {
            lam.setColor(c_);
          }
          item.setItemMeta(lam);
        }
        p.getInventory().setChestplate(item);
        continue;
      }
      if (item.getTypeId() == 300 || item.getTypeId() == 304 || item.getTypeId() == 308 || item.getTypeId() == 312 || item.getTypeId() == 316) {
        if (item.getTypeId() == 300) {
          LeatherArmorMeta lam=(LeatherArmorMeta)item.getItemMeta();
          if (c_ != null) {
            lam.setColor(c_);
          }
          item.setItemMeta(lam);
        }
        p.getInventory().setLeggings(item);
        continue;
      }
      if (item.getTypeId() == 301 || item.getTypeId() == 305 || item.getTypeId() == 309 || item.getTypeId() == 313 || item.getTypeId() == 317) {
        if (item.getTypeId() == 301) {
          LeatherArmorMeta lam=(LeatherArmorMeta)item.getItemMeta();
          if (c_ != null) {
            lam.setColor(c_);
          }
          item.setItemMeta(lam);
        }
        p.getInventory().setBoots(item);
        continue;
      }
      if (item.getType() != Material.AIR) {
        p.getInventory().addItem(item);
      }
    }
  }
  p.updateInventory();
  if (MinigamesAPI.getAPI().crackshot) {
    for (    String t : tempguns) {
      CSUtility cs=new CSUtility();
      cs.giveWeapon(p,t,1);
    }
  }
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      if (p != null) {
        int index=0;
        for (        PotionEffectType t : temppotions) {
          p.addPotionEffect(new PotionEffect(t,temppotions_duration.get(index),temppotions_lv.get(index)));
          index++;
        }
      }
    }
  }
,10L);
}","public void getClass(String player){
  if (!pli.getPClasses().containsKey(player)) {
    if (MinigamesAPI.debug) {
      ArenaLogger.debug(player + ""String_Node_Str"");
    }
    return;
  }
  AClass c=pli.getPClasses().get(player);
  final Player p=Bukkit.getServer().getPlayer(player);
  Util.clearInv(p);
  ArrayList<ItemStack> items=new ArrayList<ItemStack>(Arrays.asList(c.getItems()));
  ArrayList<ItemStack> temp=new ArrayList<ItemStack>(Arrays.asList(c.getItems()));
  ArrayList<String> tempguns=new ArrayList<String>();
  final ArrayList<PotionEffectType> temppotions=new ArrayList<PotionEffectType>();
  final ArrayList<Integer> temppotions_lv=new ArrayList<Integer>();
  final ArrayList<Integer> temppotions_duration=new ArrayList<Integer>();
  for (  ItemStack item : temp) {
    if (item != null) {
      if (item.hasItemMeta()) {
        if (item.getItemMeta().hasDisplayName()) {
          if (item.getItemMeta().getDisplayName().startsWith(""String_Node_Str"")) {
            items.remove(item);
            tempguns.add(item.getItemMeta().getDisplayName().split(""String_Node_Str"")[1]);
          }
 else           if (item.getItemMeta().getDisplayName().startsWith(""String_Node_Str"")) {
            items.remove(item);
            String potioneffect=item.getItemMeta().getDisplayName().split(""String_Node_Str"")[1];
            String data=item.getItemMeta().getDisplayName().split(""String_Node_Str"")[2];
            Integer time=Integer.parseInt(data.substring(0,data.indexOf(""String_Node_Str"")));
            Integer lv=Integer.parseInt(data.split(""String_Node_Str"")[1]);
            if (PotionEffectType.getByName(potioneffect) != null) {
              temppotions.add(PotionEffectType.getByName(potioneffect));
              temppotions_lv.add(lv);
              temppotions_duration.add(time);
            }
          }
        }
      }
    }
  }
  for (  ItemStack item : items) {
    if (item != null) {
      Color c_=null;
      if (item.hasItemMeta()) {
        if (item.getItemMeta().hasDisplayName()) {
          if (item.getItemMeta().getDisplayName().startsWith(""String_Node_Str"") && item.getItemMeta().getDisplayName().length() == 7) {
            c_=Util.hexToRgb(item.getItemMeta().getDisplayName());
          }
        }
      }
      if (item.getTypeId() == 298 || item.getTypeId() == 302 || item.getTypeId() == 306 || item.getTypeId() == 310 || item.getTypeId() == 314) {
        if (item.getTypeId() == 298) {
          LeatherArmorMeta lam=(LeatherArmorMeta)item.getItemMeta();
          if (c_ != null) {
            lam.setColor(c_);
          }
          item.setItemMeta(lam);
        }
        p.getInventory().setHelmet(item);
        continue;
      }
      if (item.getTypeId() == 299 || item.getTypeId() == 303 || item.getTypeId() == 307 || item.getTypeId() == 311 || item.getTypeId() == 315) {
        if (item.getTypeId() == 299) {
          LeatherArmorMeta lam=(LeatherArmorMeta)item.getItemMeta();
          if (c_ != null) {
            lam.setColor(c_);
          }
          item.setItemMeta(lam);
        }
        p.getInventory().setChestplate(item);
        continue;
      }
      if (item.getTypeId() == 300 || item.getTypeId() == 304 || item.getTypeId() == 308 || item.getTypeId() == 312 || item.getTypeId() == 316) {
        if (item.getTypeId() == 300) {
          LeatherArmorMeta lam=(LeatherArmorMeta)item.getItemMeta();
          if (c_ != null) {
            lam.setColor(c_);
          }
          item.setItemMeta(lam);
        }
        p.getInventory().setLeggings(item);
        continue;
      }
      if (item.getTypeId() == 301 || item.getTypeId() == 305 || item.getTypeId() == 309 || item.getTypeId() == 313 || item.getTypeId() == 317) {
        if (item.getTypeId() == 301) {
          LeatherArmorMeta lam=(LeatherArmorMeta)item.getItemMeta();
          if (c_ != null) {
            lam.setColor(c_);
          }
          item.setItemMeta(lam);
        }
        p.getInventory().setBoots(item);
        continue;
      }
      if (item.getType() != Material.AIR) {
        p.getInventory().addItem(item);
      }
    }
  }
  p.updateInventory();
  if (MinigamesAPI.getAPI().crackshot) {
    for (    String t : tempguns) {
      CSUtility cs=new CSUtility();
      cs.giveWeapon(p,t,1);
    }
  }
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      if (p != null) {
        int index=0;
        for (        PotionEffectType t : temppotions) {
          p.addPotionEffect(new PotionEffect(t,temppotions_duration.get(index),temppotions_lv.get(index)));
          index++;
        }
      }
    }
  }
,10L);
}",0.9831886605867488
86047,"public void resetSmartResetBlock(SmartArenaBlock ablock){
  final Block b_=ablock.getBlock().getWorld().getBlockAt(ablock.getBlock().getLocation());
  if (b_.getType() == Material.FURNACE) {
    ((Furnace)b_.getState()).getInventory().clear();
    ((Furnace)b_.getState()).update();
  }
  if (b_.getType() == Material.CHEST) {
    ((Chest)b_.getState()).getBlockInventory().clear();
    ((Chest)b_.getState()).update();
  }
  if (!b_.getType().toString().equalsIgnoreCase(ablock.getMaterial().toString())) {
    b_.setType(ablock.getMaterial());
    b_.setData(ablock.getData());
  }
  if (b_.getType() == Material.CHEST) {
    ((Chest)b_.getState()).getBlockInventory().clear();
    ((Chest)b_.getState()).update();
    HashMap<Integer,ItemStack> chestinv=ablock.getNewInventory();
    for (    Integer i : chestinv.keySet()) {
      ItemStack item=chestinv.get(i);
      if (item != null) {
        ((Chest)b_.getState()).getBlockInventory().setItem(i,item);
      }
    }
    ((Chest)b_.getState()).update();
  }
}","public void resetSmartResetBlock(SmartArenaBlock ablock){
  final Block b_=ablock.getBlock().getWorld().getBlockAt(ablock.getBlock().getLocation());
  if (b_.getType() == Material.FURNACE) {
    ((Furnace)b_.getState()).getInventory().clear();
    ((Furnace)b_.getState()).update();
  }
  if (b_.getType() == Material.CHEST) {
    ((Chest)b_.getState()).getBlockInventory().clear();
    ((Chest)b_.getState()).update();
  }
  if (!b_.getType().toString().equalsIgnoreCase(ablock.getMaterial().toString()) || b_.getData() != ablock.getData()) {
    b_.setType(ablock.getMaterial());
    b_.setData(ablock.getData());
  }
  if (b_.getType() == Material.CHEST) {
    if (ablock.isDoubleChest()) {
      DoubleChest dc=ablock.getDoubleChest();
      System.out.println(dc.getLocation());
      HashMap<Integer,ItemStack> chestinv=ablock.getNewInventory();
      for (      Integer i : chestinv.keySet()) {
        ItemStack item=chestinv.get(i);
        if (item != null) {
          dc.getInventory().setItem(i,item);
        }
      }
      ((Chest)b_.getState()).update();
      return;
    }
    ((Chest)b_.getState()).getBlockInventory().clear();
    ((Chest)b_.getState()).update();
    HashMap<Integer,ItemStack> chestinv=ablock.getNewInventory();
    for (    Integer i : chestinv.keySet()) {
      ItemStack item=chestinv.get(i);
      if (item != null) {
        ((Chest)b_.getState()).getBlockInventory().setItem(i,item);
      }
    }
    ((Chest)b_.getState()).update();
  }
  if (b_.getType() == Material.WALL_SIGN || b_.getType() == Material.SIGN_POST) {
    Sign sign=(Sign)b_.getState();
    if (sign != null) {
      int i=0;
      for (      String line : ablock.getSignLines()) {
        sign.setLine(i,line);
        i++;
        if (i > 3) {
          break;
        }
      }
      sign.update();
    }
  }
}",0.5450070323488045
86048,"public void reset(){
  System.out.println(changed.size() + ""String_Node_Str"");
  final ArrayList<SmartArenaBlock> failedblocks=new ArrayList<SmartArenaBlock>();
  Bukkit.getScheduler().runTask(a.plugin,new Runnable(){
    public void run(){
      int failcount=0;
      for (      final SmartArenaBlock ablock : changed.values()) {
        try {
          final Block b_=ablock.getBlock().getWorld().getBlockAt(ablock.getBlock().getLocation());
          if (b_.getType() == Material.FURNACE) {
            ((Furnace)b_.getState()).getInventory().clear();
            ((Furnace)b_.getState()).update();
          }
          if (b_.getType() == Material.CHEST) {
            ((Chest)b_.getState()).getBlockInventory().clear();
            ((Chest)b_.getState()).update();
          }
          if (!b_.getType().toString().equalsIgnoreCase(ablock.getMaterial().toString()) || b_.getData() != ablock.getData()) {
            b_.setType(ablock.getMaterial());
            b_.setData(ablock.getData());
          }
          if (b_.getType() == Material.CHEST) {
            ((Chest)b_.getState()).getBlockInventory().clear();
            ((Chest)b_.getState()).update();
            HashMap<Integer,ItemStack> chestinv=ablock.getNewInventory();
            for (            Integer i : chestinv.keySet()) {
              ItemStack item=chestinv.get(i);
              if (item != null) {
                ((Chest)b_.getState()).getBlockInventory().setItem(i,item);
              }
            }
            ((Chest)b_.getState()).update();
          }
          if (b_.getType() == Material.WALL_SIGN || b_.getType() == Material.SIGN_POST) {
            Sign sign=(Sign)b_.getState();
            if (sign != null) {
              int i=0;
              for (              String line : ablock.getSignLines()) {
                sign.setLine(i,line);
                i++;
                if (i > 3) {
                  break;
                }
              }
              sign.update();
            }
          }
        }
 catch (        IllegalStateException e) {
          failcount+=1;
          failedblocks.add(ablock);
        }
      }
      changed.clear();
      a.setArenaState(ArenaState.JOIN);
      Bukkit.getScheduler().runTask(a.plugin,new Runnable(){
        public void run(){
          a.setArenaState(ArenaState.JOIN);
          Util.updateSign(a.plugin,a);
        }
      }
);
      System.out.println(failcount + ""String_Node_Str"");
      Bukkit.getServer().getScheduler().scheduleSyncDelayedTask(MinigamesAPI.getAPI(),new Runnable(){
        public void run(){
          changed.clear();
          for (          SmartArenaBlock ablock : failedblocks) {
            Block b_=ablock.getBlock().getWorld().getBlockAt(ablock.getBlock().getLocation());
            if (!b_.getType().toString().equalsIgnoreCase(ablock.getMaterial().toString())) {
              b_.setType(ablock.getMaterial());
              b_.setData(ablock.getData());
            }
            if (b_.getType() == Material.CHEST) {
              b_.setType(ablock.getMaterial());
              b_.setData(ablock.getData());
              ((Chest)b_.getState()).getInventory().setContents(ablock.getInventory());
              ((Chest)b_.getState()).update();
            }
          }
        }
      }
,40L);
      System.out.println(""String_Node_Str"");
    }
  }
);
}","public void reset(){
  System.out.println(changed.size() + ""String_Node_Str"");
  final ArrayList<SmartArenaBlock> failedblocks=new ArrayList<SmartArenaBlock>();
  Bukkit.getScheduler().runTask(a.plugin,new Runnable(){
    public void run(){
      int failcount=0;
      for (      final SmartArenaBlock ablock : changed.values()) {
        try {
          resetSmartResetBlock(ablock);
        }
 catch (        IllegalStateException e) {
          failcount+=1;
          failedblocks.add(ablock);
        }
      }
      changed.clear();
      a.setArenaState(ArenaState.JOIN);
      Bukkit.getScheduler().runTask(a.plugin,new Runnable(){
        public void run(){
          a.setArenaState(ArenaState.JOIN);
          Util.updateSign(a.plugin,a);
        }
      }
);
      System.out.println(failcount + ""String_Node_Str"");
      Bukkit.getServer().getScheduler().scheduleSyncDelayedTask(MinigamesAPI.getAPI(),new Runnable(){
        public void run(){
          changed.clear();
          for (          SmartArenaBlock ablock : failedblocks) {
            Block b_=ablock.getBlock().getWorld().getBlockAt(ablock.getBlock().getLocation());
            if (!b_.getType().toString().equalsIgnoreCase(ablock.getMaterial().toString())) {
              b_.setType(ablock.getMaterial());
              b_.setData(ablock.getData());
            }
            if (b_.getType() == Material.CHEST) {
              b_.setType(ablock.getMaterial());
              b_.setData(ablock.getData());
              ((Chest)b_.getState()).getInventory().setContents(ablock.getInventory());
              ((Chest)b_.getState()).update();
            }
          }
        }
      }
,40L);
      System.out.println(""String_Node_Str"");
    }
  }
);
}",0.6715127701375245
86049,"public Stats(JavaPlugin plugin){
  this.plugin=plugin;
  this.stats_kill_points=plugin.getConfig().getInt(""String_Node_Str"");
  this.stats_win_points=plugin.getConfig().getInt(""String_Node_Str"");
}","public Stats(JavaPlugin plugin){
  this.plugin=plugin;
  reloadVariables();
}",0.4890510948905109
86050,"/** 
 * Handles the default commands needed for arena management.
 * @param uber_permission Main setup permission. Example: Skywars.setup
 * @param cmd The command. Example: /sw
 * @param sender
 * @param args
 * @return
 */
public boolean handleArgs(JavaPlugin plugin,String uber_permission,String cmd,CommandSender sender,String args[]){
  if (args.length > 0) {
    if (!(sender instanceof Player)) {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
    Player p=(Player)sender;
    PluginInstance pli=MinigamesAPI.getAPI().getPluginInstance(plugin);
    String action=args[0];
    if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setSpawn(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setSpecSpawn(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setLobby(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setMainLobby(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setBounds(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setLobbyBounds(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setSpecBounds(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"") || action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.saveArena(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setMaxPlayers(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setMinPlayers(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"") || action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setArenaVIP(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.joinArena(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.leaveArena(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.startArena(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.stopArena(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.stopAllArenas(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.removeArena(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.removeSpawn(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setSkull(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setEnabled(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setShowScoreboard(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.resetArena(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setAuthor(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setDescription(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setArenaDisplayName(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setKit(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.spectate(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.openShop(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"") || action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.getLeaderboards(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.getStats(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      sendHelp(cmd,sender);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str"");
      for (      Arena a : pli.getArenas()) {
        if (args.length > 1) {
          sender.sendMessage(ChatColor.GREEN + a.getInternalName() + ""String_Node_Str""+ a.getClass().getSimpleName().toString()+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(ChatColor.GREEN + a.getInternalName());
        }
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      plugin.reloadConfig();
      pli.getMessagesConfig().reloadConfig();
      pli.getArenasConfig().reloadConfig();
      pli.getClassesConfig().reloadConfig();
      pli.getAchievementsConfig().reloadConfig();
      pli.getStatsConfig().reloadConfig();
      pli.getShopConfig().reloadConfig();
      pli.getMessagesConfig().init();
      pli.reloadVariables();
      pli.getRewardsInstance().reloadVariables();
      try {
        pli.reloadAllArenas();
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"" + e.getMessage());
      }
      sender.sendMessage(pli.getMessagesConfig().successfully_reloaded);
    }
 else {
      boolean cont=false;
      ArrayList<String> cmds=new ArrayList<String>();
      for (      String cmd_ : cmddesc.keySet()) {
        if (cmd_.toLowerCase().contains(action.toLowerCase())) {
          cmds.add(cmd_);
          cont=true;
        }
      }
      if (cont) {
        sendHelp(cmd,sender);
        for (        String cmd_ : cmds) {
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_RED+ cmd+ ""String_Node_Str""+ cmd_+ ChatColor.RED+ ""String_Node_Str"");
        }
      }
    }
  }
 else {
    sendHelp(cmd,sender);
  }
  return true;
}","/** 
 * Handles the default commands needed for arena management.
 * @param uber_permission Main setup permission. Example: Skywars.setup
 * @param cmd The command. Example: /sw
 * @param sender
 * @param args
 * @return
 */
public boolean handleArgs(JavaPlugin plugin,String uber_permission,String cmd,CommandSender sender,String args[]){
  if (args.length > 0) {
    if (!(sender instanceof Player)) {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
    Player p=(Player)sender;
    PluginInstance pli=MinigamesAPI.getAPI().getPluginInstance(plugin);
    String action=args[0];
    if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setSpawn(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setSpecSpawn(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setLobby(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setMainLobby(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setBounds(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setLobbyBounds(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setSpecBounds(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"") || action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.saveArena(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setMaxPlayers(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setMinPlayers(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"") || action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setArenaVIP(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.joinArena(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.leaveArena(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.startArena(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.stopArena(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.stopAllArenas(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.removeArena(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.removeSpawn(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setSkull(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setEnabled(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setShowScoreboard(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.resetArena(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setAuthor(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setDescription(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setArenaDisplayName(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.setKit(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.spectate(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.openShop(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"") || action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.getLeaderboards(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      return this.getStats(pli,sender,args,uber_permission,cmd,action,plugin,p);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      sendHelp(cmd,sender);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str"");
      for (      Arena a : pli.getArenas()) {
        if (args.length > 1) {
          sender.sendMessage(ChatColor.GREEN + a.getInternalName() + ""String_Node_Str""+ a.getClass().getSimpleName().toString()+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(ChatColor.GREEN + a.getInternalName());
        }
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      plugin.reloadConfig();
      pli.getMessagesConfig().reloadConfig();
      pli.getArenasConfig().reloadConfig();
      pli.getClassesConfig().reloadConfig();
      pli.getAchievementsConfig().reloadConfig();
      pli.getStatsConfig().reloadConfig();
      pli.getShopConfig().reloadConfig();
      pli.getMessagesConfig().init();
      pli.reloadVariables();
      pli.getRewardsInstance().reloadVariables();
      pli.getStatsInstance().reloadVariables();
      try {
        pli.reloadAllArenas();
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"" + e.getMessage());
      }
      sender.sendMessage(pli.getMessagesConfig().successfully_reloaded);
    }
 else {
      boolean cont=false;
      ArrayList<String> cmds=new ArrayList<String>();
      for (      String cmd_ : cmddesc.keySet()) {
        if (cmd_.toLowerCase().contains(action.toLowerCase())) {
          cmds.add(cmd_);
          cont=true;
        }
      }
      if (cont) {
        sendHelp(cmd,sender);
        for (        String cmd_ : cmds) {
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_RED+ cmd+ ""String_Node_Str""+ cmd_+ ChatColor.RED+ ""String_Node_Str"");
        }
      }
    }
  }
 else {
    sendHelp(cmd,sender);
  }
  return true;
}",0.996661101836394
86051,"public boolean setKit(PluginInstance pli,CommandSender sender,String[] args,String uber_permission,String cmd,String action,final JavaPlugin plugin,Player p){
  if (args.length > 1) {
    if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
      return true;
    }
    if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
      if (pli.global_players.containsKey(p.getName())) {
        Arena a=pli.global_players.get(p.getName());
        if (a.getArenaState() == ArenaState.INGAME) {
          return true;
        }
      }
 else {
        sender.sendMessage(pli.getMessagesConfig().not_in_arena);
        return true;
      }
    }
    String kit=args[1];
    AClass ac=pli.getClassesHandler().getClassByInternalname(kit);
    if (ac != null) {
      if (pli.getAClasses().containsKey(ac.getName())) {
        if (ac.isEnabled()) {
          pli.getClassesHandler().setClass(kit,p.getName(),true);
          return true;
        }
      }
    }
    String all=""String_Node_Str"";
    for (    AClass k : pli.getAClasses().values()) {
      if (k.isEnabled()) {
        all+=k.getInternalName() + ""String_Node_Str"";
      }
    }
    if (all.length() < 2) {
      all=""String_Node_Str"";
    }
    all=all.substring(0,all.length() - 2);
    sender.sendMessage(pli.getMessagesConfig().possible_kits + all);
  }
 else {
    sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
    if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
      return true;
    }
    if (pli.global_players.containsKey(p.getName())) {
      pli.getClassesHandler().openGUI(p.getName());
    }
 else {
      sender.sendMessage(pli.getMessagesConfig().not_in_arena);
    }
  }
  return true;
}","public boolean setKit(PluginInstance pli,CommandSender sender,String[] args,String uber_permission,String cmd,String action,final JavaPlugin plugin,Player p){
  if (args.length > 1) {
    if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
      return true;
    }
    if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
      if (pli.global_players.containsKey(p.getName())) {
        Arena a=pli.global_players.get(p.getName());
        if (a.getArenaState() == ArenaState.INGAME) {
          return true;
        }
      }
 else {
        sender.sendMessage(pli.getMessagesConfig().not_in_arena);
        return true;
      }
    }
    String kit=args[1];
    AClass ac=pli.getClassesHandler().getClassByInternalname(kit);
    if (ac != null) {
      if (pli.getAClasses().containsKey(ac.getName())) {
        if (ac.isEnabled()) {
          pli.getClassesHandler().setClass(kit,p.getName(),MinigamesAPI.economy);
          return true;
        }
      }
    }
    String all=""String_Node_Str"";
    for (    AClass k : pli.getAClasses().values()) {
      if (k.isEnabled()) {
        all+=k.getInternalName() + ""String_Node_Str"";
      }
    }
    if (all.length() < 2) {
      all=""String_Node_Str"";
    }
    all=all.substring(0,all.length() - 2);
    sender.sendMessage(pli.getMessagesConfig().possible_kits + all);
  }
 else {
    sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
    if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
      return true;
    }
    if (pli.global_players.containsKey(p.getName())) {
      pli.getClassesHandler().openGUI(p.getName());
    }
 else {
      sender.sendMessage(pli.getMessagesConfig().not_in_arena);
    }
  }
  return true;
}",0.9935449166218396
86052,"public void leavePlayerRaw(final String playername,boolean fullLeave){
  if (!this.containsPlayer(playername)) {
    return;
  }
  this.players.remove(playername);
  pli.global_players.remove(playername);
  if (fullLeave) {
    plugin.getConfig().set(""String_Node_Str"" + playername + ""String_Node_Str"",playername);
    plugin.getConfig().set(""String_Node_Str"" + playername + ""String_Node_Str"",plugin.getName());
    for (    ItemStack i : pinv.get(playername)) {
      if (i != null) {
        plugin.getConfig().set(""String_Node_Str"" + playername + ""String_Node_Str""+ Integer.toString((int)Math.round(Math.random() * 10000))+ i.getType().toString(),i);
      }
    }
    plugin.saveConfig();
    try {
      Player p=Bukkit.getPlayer(playername);
      if (pli.global_players.containsKey(playername)) {
        pli.global_players.remove(playername);
      }
      if (pli.global_lost.containsKey(playername)) {
        pli.global_lost.remove(playername);
      }
      if (pli.global_arcade_spectator.containsKey(playername)) {
        pli.global_arcade_spectator.remove(playername);
      }
      if (p != null) {
        p.removePotionEffect(PotionEffectType.JUMP);
        Util.teleportPlayerFixed(p,this.mainlobby);
        p.setFireTicks(0);
        p.setFlying(false);
        if (!p.isOp()) {
          p.setAllowFlight(false);
        }
        if (pgamemode.containsKey(p.getName())) {
          p.setGameMode(pgamemode.get(p.getName()));
        }
        if (pxplvl.containsKey(p.getName())) {
          p.setLevel(0);
          p.setLevel(pxplvl.get(p.getName()));
        }
        p.getInventory().setContents(pinv.get(playername));
        p.getInventory().setArmorContents(pinv_armor.get(playername));
        p.updateInventory();
        p.setWalkSpeed(0.2F);
        p.setFoodLevel(20);
        p.setHealth(20D);
        p.removePotionEffect(PotionEffectType.JUMP);
        pli.getSpectatorManager().setSpectate(p,false);
      }
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + e.getMessage());
    }
    return;
  }
  final Player p=Bukkit.getPlayer(playername);
  Util.clearInv(p);
  p.setWalkSpeed(0.2F);
  p.setFoodLevel(20);
  p.setHealth(20D);
  p.setFireTicks(0);
  p.removePotionEffect(PotionEffectType.JUMP);
  pli.getSpectatorManager().setSpectate(p,false);
  Bukkit.getServer().getPluginManager().callEvent(new PlayerLeaveArenaEvent(p,plugin,this));
  for (  PotionEffect effect : p.getActivePotionEffects()) {
    if (effect != null) {
      p.removePotionEffect(effect.getType());
    }
  }
  for (  Entity e : p.getNearbyEntities(50D,50D,50D)) {
    if (e.getType() == EntityType.DROPPED_ITEM || e.getType() == EntityType.SLIME || e.getType() == EntityType.ZOMBIE || e.getType() == EntityType.SKELETON || e.getType() == EntityType.SPIDER || e.getType() == EntityType.CREEPER) {
      e.remove();
    }
  }
  pli.global_players.remove(playername);
  if (pli.global_arcade_spectator.containsKey(playername)) {
    pli.global_arcade_spectator.remove(playername);
  }
  Util.updateSign(plugin,this);
  final String arenaname=this.getInternalName();
  final Arena a=this;
  final boolean started_=started;
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      if (p != null) {
        if (ai == null || a.isArcadeMain()) {
          if (a.mainlobby != null) {
            Util.teleportPlayerFixed(p,a.mainlobby);
          }
 else           if (a.waitinglobby != null) {
            Util.teleportPlayerFixed(p,a.waitinglobby);
          }
        }
        p.setFireTicks(0);
        p.setFlying(false);
        if (!p.isOp()) {
          p.setAllowFlight(false);
        }
        if (pgamemode.containsKey(p.getName())) {
          p.setGameMode(pgamemode.get(p.getName()));
        }
        if (pxplvl.containsKey(p.getName())) {
          p.setLevel(0);
          p.setLevel(pxplvl.get(p.getName()));
        }
        p.getInventory().setContents(pinv.get(playername));
        p.getInventory().setArmorContents(pinv_armor.get(playername));
        p.updateInventory();
        if (started_) {
          if (!pnoreward.contains(playername)) {
            pli.getRewardsInstance().giveWinReward(playername,a,global_coin_multiplier);
          }
 else {
            pnoreward.remove(playername);
          }
        }
        if (pli.global_lost.containsKey(playername)) {
          pli.global_lost.remove(playername);
        }
        try {
          pli.scoreboardManager.removeScoreboard(arenaname,p);
        }
 catch (        Exception e) {
        }
      }
    }
  }
,5L);
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    final String server=plugin.getConfig().getString(""String_Node_Str"");
    Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
      public void run(){
        BungeeUtil.connectToServer(MinigamesAPI.getAPI(),p.getName(),server);
      }
    }
,30L);
    return;
  }
}","public void leavePlayerRaw(final String playername,boolean fullLeave){
  if (!this.containsPlayer(playername)) {
    return;
  }
  this.players.remove(playername);
  pli.global_players.remove(playername);
  if (fullLeave) {
    plugin.getConfig().set(""String_Node_Str"" + playername + ""String_Node_Str"",playername);
    plugin.getConfig().set(""String_Node_Str"" + playername + ""String_Node_Str"",plugin.getName());
    for (    ItemStack i : pinv.get(playername)) {
      if (i != null) {
        plugin.getConfig().set(""String_Node_Str"" + playername + ""String_Node_Str""+ Integer.toString((int)Math.round(Math.random() * 10000))+ i.getType().toString(),i);
      }
    }
    plugin.saveConfig();
    try {
      Player p=Bukkit.getPlayer(playername);
      if (pli.global_players.containsKey(playername)) {
        pli.global_players.remove(playername);
      }
      if (pli.global_lost.containsKey(playername)) {
        pli.global_lost.remove(playername);
      }
      if (pli.global_arcade_spectator.containsKey(playername)) {
        pli.global_arcade_spectator.remove(playername);
      }
      if (p != null) {
        p.removePotionEffect(PotionEffectType.JUMP);
        Util.teleportPlayerFixed(p,this.mainlobby);
        p.setFireTicks(0);
        p.setFlying(false);
        if (!p.isOp()) {
          p.setAllowFlight(false);
        }
        if (pgamemode.containsKey(p.getName())) {
          p.setGameMode(pgamemode.get(p.getName()));
        }
        if (pxplvl.containsKey(p.getName())) {
          p.setLevel(0);
          p.setLevel(pxplvl.get(p.getName()));
        }
        p.getInventory().setContents(pinv.get(playername));
        p.getInventory().setArmorContents(pinv_armor.get(playername));
        p.updateInventory();
        p.setWalkSpeed(0.2F);
        p.setFoodLevel(20);
        p.setHealth(20D);
        p.removePotionEffect(PotionEffectType.JUMP);
        pli.getSpectatorManager().setSpectate(p,false);
      }
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + e.getMessage());
    }
    return;
  }
  final Player p=Bukkit.getPlayer(playername);
  if (p.isDead()) {
    System.out.println(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getHealth()+ ""String_Node_Str"");
  }
  Util.clearInv(p);
  p.setWalkSpeed(0.2F);
  p.setFoodLevel(20);
  p.setHealth(20D);
  p.setFireTicks(0);
  p.removePotionEffect(PotionEffectType.JUMP);
  pli.getSpectatorManager().setSpectate(p,false);
  Bukkit.getServer().getPluginManager().callEvent(new PlayerLeaveArenaEvent(p,plugin,this));
  for (  PotionEffect effect : p.getActivePotionEffects()) {
    if (effect != null) {
      p.removePotionEffect(effect.getType());
    }
  }
  for (  Entity e : p.getNearbyEntities(50D,50D,50D)) {
    if (e.getType() == EntityType.DROPPED_ITEM || e.getType() == EntityType.SLIME || e.getType() == EntityType.ZOMBIE || e.getType() == EntityType.SKELETON || e.getType() == EntityType.SPIDER || e.getType() == EntityType.CREEPER) {
      e.remove();
    }
  }
  pli.global_players.remove(playername);
  if (pli.global_arcade_spectator.containsKey(playername)) {
    pli.global_arcade_spectator.remove(playername);
  }
  Util.updateSign(plugin,this);
  final String arenaname=this.getInternalName();
  final Arena a=this;
  final boolean started_=started;
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      if (p != null) {
        if (ai == null || a.isArcadeMain()) {
          if (a.mainlobby != null) {
            Util.teleportPlayerFixed(p,a.mainlobby);
          }
 else           if (a.waitinglobby != null) {
            Util.teleportPlayerFixed(p,a.waitinglobby);
          }
        }
        p.setFireTicks(0);
        p.setFlying(false);
        if (!p.isOp()) {
          p.setAllowFlight(false);
        }
        if (pgamemode.containsKey(p.getName())) {
          p.setGameMode(pgamemode.get(p.getName()));
        }
        if (pxplvl.containsKey(p.getName())) {
          p.setLevel(0);
          p.setLevel(pxplvl.get(p.getName()));
        }
        p.getInventory().setContents(pinv.get(playername));
        p.getInventory().setArmorContents(pinv_armor.get(playername));
        p.updateInventory();
        if (started_) {
          if (!pnoreward.contains(playername)) {
            pli.getRewardsInstance().giveWinReward(playername,a,global_coin_multiplier);
          }
 else {
            pnoreward.remove(playername);
          }
        }
        if (pli.global_lost.containsKey(playername)) {
          pli.global_lost.remove(playername);
        }
        try {
          pli.scoreboardManager.removeScoreboard(arenaname,p);
        }
 catch (        Exception e) {
        }
      }
    }
  }
,5L);
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    final String server=plugin.getConfig().getString(""String_Node_Str"");
    Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
      public void run(){
        BungeeUtil.connectToServer(MinigamesAPI.getAPI(),p.getName(),server);
      }
    }
,30L);
    return;
  }
}",0.986444422130736
86053,"@EventHandler public void onPlayerDeath(PlayerDeathEvent event){
  if (pli.global_players.containsKey(event.getEntity().getName())) {
    event.setDeathMessage(null);
    event.getEntity().setHealth(20D);
    final Player p=event.getEntity();
    final Arena arena=pli.global_players.get(p.getName());
    if (arena.getArenaState() == ArenaState.JOIN || (arena.getArenaState() == ArenaState.STARTING && !arena.startedIngameCountdown)) {
      Util.teleportPlayerFixed(p,arena.getWaitingLobbyTemp());
      return;
    }
    arena.global_drops.addAll(event.getDrops());
    arena.spectate(p.getName());
    pli.global_lost.put(p.getName(),pli.global_players.get(p.getName()));
    int count=0;
    for (    String p_ : pli.global_players.keySet()) {
      if (Validator.isPlayerOnline(p_)) {
        if (pli.global_players.get(p_).getInternalName().equalsIgnoreCase(arena.getInternalName())) {
          if (!pli.global_lost.containsKey(p_)) {
            count++;
          }
        }
      }
    }
    final int count_=count;
    Bukkit.getScheduler().runTaskLater(MinigamesAPI.getAPI(),new Runnable(){
      public void run(){
        try {
          if (pli.global_players.containsKey(p.getName()) && count_ > 1) {
            pli.global_players.get(p.getName()).spectate(p.getName());
          }
          for (          String p_ : arena.getAllPlayers()) {
            if (Validator.isPlayerOnline(p_)) {
              Player p__=Bukkit.getPlayer(p_);
              Util.sendMessage(plugin,p__,pli.getMessagesConfig().broadcast_players_left.replaceAll(""String_Node_Str"",arena.getPlayerCount()));
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
,5);
    if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
      if (count < 2) {
        arena.stop();
      }
    }
  }
}","@EventHandler(priority=EventPriority.HIGH) public void onPlayerDeath(PlayerDeathEvent event){
  if (pli.global_players.containsKey(event.getEntity().getName())) {
    event.setDeathMessage(null);
    event.getEntity().setHealth(20D);
    final Player p=event.getEntity();
    final Arena arena=pli.global_players.get(p.getName());
    if (arena.getArenaState() == ArenaState.JOIN || (arena.getArenaState() == ArenaState.STARTING && !arena.startedIngameCountdown)) {
      Util.teleportPlayerFixed(p,arena.getWaitingLobbyTemp());
      return;
    }
    arena.global_drops.addAll(event.getDrops());
    arena.spectate(p.getName());
    pli.global_lost.put(p.getName(),pli.global_players.get(p.getName()));
    int count=0;
    for (    String p_ : pli.global_players.keySet()) {
      if (Validator.isPlayerOnline(p_)) {
        if (pli.global_players.get(p_).getInternalName().equalsIgnoreCase(arena.getInternalName())) {
          if (!pli.global_lost.containsKey(p_)) {
            count++;
          }
        }
      }
    }
    final int count_=count;
    Bukkit.getScheduler().runTaskLater(MinigamesAPI.getAPI(),new Runnable(){
      public void run(){
        try {
          if (pli.global_players.containsKey(p.getName()) && count_ > 1) {
            pli.global_players.get(p.getName()).spectate(p.getName());
          }
          for (          String p_ : arena.getAllPlayers()) {
            if (Validator.isPlayerOnline(p_)) {
              Player p__=Bukkit.getPlayer(p_);
              Util.sendMessage(plugin,p__,pli.getMessagesConfig().broadcast_players_left.replaceAll(""String_Node_Str"",arena.getPlayerCount()));
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
,5);
    if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
      if (count < 2) {
        arena.stop();
      }
    }
  }
}",0.9922397645169924
86054,"@Override public void onPluginMessageReceived(String channel,Player player,byte[] message){
  if (!channel.equals(""String_Node_Str"")) {
    return;
  }
  ByteArrayDataInput in=ByteStreams.newDataInput(message);
  String subchannel=in.readUTF();
  System.out.println(subchannel);
  if (subchannel.equals(""String_Node_Str"")) {
    short len=in.readShort();
    byte[] msgbytes=new byte[len];
    in.readFully(msgbytes);
    DataInputStream msgin=new DataInputStream(new ByteArrayInputStream(msgbytes));
    try {
      final String playerData=msgin.readUTF();
      final String plugin_=playerData.split(""String_Node_Str"")[0];
      final String arena=playerData.split(""String_Node_Str"")[1];
      final String playername=playerData.split(""String_Node_Str"")[2];
      System.out.println(plugin_ + ""String_Node_Str"" + arena);
      JavaPlugin plugin=null;
      for (      JavaPlugin pl : this.pinstances.keySet()) {
        if (pl.getName().contains(plugin_)) {
          plugin=pl;
          break;
        }
      }
      if (plugin != null) {
        final Arena a=pinstances.get(plugin).getArenaByName(arena);
        if (a.getArenaState() != ArenaState.INGAME && a.getArenaState() != ArenaState.RESTARTING && !a.containsPlayer(playername)) {
          Bukkit.getScheduler().runTaskLater(this,new Runnable(){
            public void run(){
              if (!a.containsPlayer(playername)) {
                a.joinPlayerLobby(playername);
              }
            }
          }
,20L);
        }
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","@Override public void onPluginMessageReceived(String channel,Player player,byte[] message){
  if (!channel.equals(""String_Node_Str"")) {
    return;
  }
  ByteArrayDataInput in=ByteStreams.newDataInput(message);
  String subchannel=in.readUTF();
  System.out.println(subchannel);
  if (subchannel.equals(""String_Node_Str"")) {
    short len=in.readShort();
    byte[] msgbytes=new byte[len];
    in.readFully(msgbytes);
    DataInputStream msgin=new DataInputStream(new ByteArrayInputStream(msgbytes));
    try {
      final String playerData=msgin.readUTF();
      final String plugin_=playerData.split(""String_Node_Str"")[0];
      final String arena=playerData.split(""String_Node_Str"")[1];
      final String playername=playerData.split(""String_Node_Str"")[2];
      System.out.println(plugin_ + ""String_Node_Str"" + arena);
      JavaPlugin plugin=null;
      for (      JavaPlugin pl : this.pinstances.keySet()) {
        if (pl.getName().contains(plugin_)) {
          plugin=pl;
          break;
        }
      }
      if (plugin != null) {
        final Arena a=pinstances.get(plugin).getArenaByName(arena);
        if (a.getArenaState() != ArenaState.INGAME && a.getArenaState() != ArenaState.RESTARTING && !a.containsPlayer(playername)) {
          Bukkit.getScheduler().runTaskLater(this,new Runnable(){
            public void run(){
              if (!a.containsPlayer(playername)) {
                a.joinPlayerLobby(playername);
              }
            }
          }
,20L);
        }
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else   if (subchannel.equals(""String_Node_Str"")) {
    short len=in.readShort();
    byte[] msgbytes=new byte[len];
    in.readFully(msgbytes);
    DataInputStream msgin=new DataInputStream(new ByteArrayInputStream(msgbytes));
    try {
      final String requestData=msgin.readUTF();
      final String plugin_=requestData.split(""String_Node_Str"")[0];
      final String arena=requestData.split(""String_Node_Str"")[1];
      System.out.println(plugin_ + ""String_Node_Str"" + arena);
      for (      JavaPlugin pl : this.pinstances.keySet()) {
        if (pl.getName().contains(plugin_)) {
          Arena a=pinstances.get(pl).getArenaByName(arena);
          if (a != null) {
            BungeeUtil.sendSignUpdateRequest(pl,pl.getName(),a);
          }
          break;
        }
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}",0.7858741606565531
86055,"@EventHandler(priority=EventPriority.MONITOR) public void onPlayerDeath(PlayerDeathEvent event){
  if (pli.containsGlobalPlayer(event.getEntity().getName())) {
    event.setDeathMessage(null);
    event.getEntity().setHealth(20D);
    final Player p=event.getEntity();
    final Arena arena=pli.global_players.get(p.getName());
    if (arena.getArenaState() == ArenaState.JOIN || (arena.getArenaState() == ArenaState.STARTING && !arena.startedIngameCountdown)) {
      Util.teleportPlayerFixed(p,arena.getWaitingLobbyTemp());
      return;
    }
    arena.global_drops.addAll(event.getDrops());
    arena.spectate(p.getName());
    pli.global_lost.put(p.getName(),arena);
    int count=0;
    for (    String p_ : pli.global_players.keySet()) {
      if (Validator.isPlayerOnline(p_)) {
        if (pli.global_players.get(p_).getInternalName().equalsIgnoreCase(arena.getInternalName())) {
          if (!pli.containsGlobalLost(p_)) {
            count++;
          }
        }
      }
    }
    final int count_=count;
    Bukkit.getScheduler().runTaskLater(MinigamesAPI.getAPI(),new Runnable(){
      public void run(){
        try {
          if (pli.containsGlobalPlayer(p.getName()) && count_ > 1) {
            arena.spectate(p.getName());
          }
          for (          String p_ : arena.getAllPlayers()) {
            if (Validator.isPlayerOnline(p_)) {
              Player p__=Bukkit.getPlayer(p_);
              Util.sendMessage(plugin,p__,pli.getMessagesConfig().broadcast_players_left.replaceAll(""String_Node_Str"",arena.getPlayerCount()));
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
,5);
    if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
      if (count < 2) {
        arena.stop();
      }
    }
  }
}","@EventHandler(priority=EventPriority.MONITOR) public void onPlayerDeath(PlayerDeathEvent event){
  if (pli.containsGlobalPlayer(event.getEntity().getName())) {
    event.setDeathMessage(null);
    event.getEntity().setHealth(20D);
    final Player p=event.getEntity();
    final Arena arena=pli.global_players.get(p.getName());
    if (arena.getArenaState() == ArenaState.JOIN || (arena.getArenaState() == ArenaState.STARTING && !arena.startedIngameCountdown)) {
      if (arena.isArcadeMain()) {
        Util.teleportPlayerFixed(p,arena.getWaitingLobbyTemp());
      }
      return;
    }
    arena.global_drops.addAll(event.getDrops());
    arena.spectate(p.getName());
    pli.global_lost.put(p.getName(),arena);
    int count=0;
    for (    String p_ : pli.global_players.keySet()) {
      if (Validator.isPlayerOnline(p_)) {
        if (pli.global_players.get(p_).getInternalName().equalsIgnoreCase(arena.getInternalName())) {
          if (!pli.containsGlobalLost(p_)) {
            count++;
          }
        }
      }
    }
    final int count_=count;
    Bukkit.getScheduler().runTaskLater(MinigamesAPI.getAPI(),new Runnable(){
      public void run(){
        try {
          if (pli.containsGlobalPlayer(p.getName()) && count_ > 1) {
            arena.spectate(p.getName());
          }
          for (          String p_ : arena.getAllPlayers()) {
            if (Validator.isPlayerOnline(p_)) {
              Player p__=Bukkit.getPlayer(p_);
              Util.sendMessage(plugin,p__,pli.getMessagesConfig().broadcast_players_left.replaceAll(""String_Node_Str"",arena.getPlayerCount()));
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
,5);
    if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
      if (count < 2) {
        arena.stop();
      }
    }
  }
}",0.98798470780994
86056,"@EventHandler public void onBlockBreak(BlockBreakEvent event){
  Player p=event.getPlayer();
  if (pli.global_players.containsKey(p.getName())) {
    Arena a=pli.global_players.get(p.getName());
    if (a.getArenaState() != ArenaState.INGAME || pli.global_lost.containsKey(p.getName())) {
      event.setCancelled(true);
      return;
    }
    if (pli.getSpectatorManager().isSpectating(p)) {
      event.setCancelled(true);
      return;
    }
    a.getSmartReset().addChanged(event.getBlock(),event.getBlock().getType().equals(Material.CHEST));
    if (event.getBlock().getType() == Material.DOUBLE_PLANT) {
      a.getSmartReset().addChanged(event.getBlock().getLocation().clone().add(0D,-1D,0D).getBlock(),event.getBlock().getType().equals(Material.CHEST));
      a.getSmartReset().addChanged(event.getBlock().getLocation().clone().add(0D,+1D,0D).getBlock(),event.getBlock().getType().equals(Material.CHEST));
    }
    if (event.getBlock().getType() == Material.CARPET) {
      a.getSmartReset().addChanged(event.getBlock().getLocation().clone().add(0D,+3D,0D).getBlock(),event.getBlock().getType().equals(Material.CHEST));
      a.getSmartReset().addChanged(event.getBlock().getLocation().clone().add(0D,+2D,0D).getBlock(),event.getBlock().getType().equals(Material.CHEST));
      a.getSmartReset().addChanged(event.getBlock().getLocation().clone().add(0D,+1D,0D).getBlock(),event.getBlock().getType().equals(Material.CHEST));
    }
    if (event.getBlock().getType() == Material.CACTUS) {
      a.getSmartReset().addChanged(event.getBlock().getLocation().clone().add(0D,+4D,0D).getBlock(),event.getBlock().getType().equals(Material.CHEST));
      a.getSmartReset().addChanged(event.getBlock().getLocation().clone().add(0D,+3D,0D).getBlock(),event.getBlock().getType().equals(Material.CHEST));
      a.getSmartReset().addChanged(event.getBlock().getLocation().clone().add(0D,+2D,0D).getBlock(),event.getBlock().getType().equals(Material.CHEST));
      a.getSmartReset().addChanged(event.getBlock().getLocation().clone().add(0D,+1D,0D).getBlock(),event.getBlock().getType().equals(Material.CHEST));
    }
  }
  if (event.getBlock().getType() == Material.SIGN_POST || event.getBlock().getType() == Material.WALL_SIGN) {
    Arena arena=Util.getArenaBySignLocation(plugin,event.getBlock().getLocation());
    if (arena != null) {
      pli.getArenasConfig().getConfig().set(""String_Node_Str"" + arena.getInternalName() + ""String_Node_Str"",null);
      pli.getArenasConfig().saveConfig();
    }
  }
}","@EventHandler public void onBlockBreak(BlockBreakEvent event){
  Player p=event.getPlayer();
  if (pli.global_players.containsKey(p.getName())) {
    Arena a=pli.global_players.get(p.getName());
    if (a.getArenaState() != ArenaState.INGAME || pli.global_lost.containsKey(p.getName())) {
      event.setCancelled(true);
      return;
    }
    if (pli.getSpectatorManager().isSpectating(p)) {
      event.setCancelled(true);
      return;
    }
    a.getSmartReset().addChanged(event.getBlock(),event.getBlock().getType().equals(Material.CHEST));
    if (event.getBlock().getType() == Material.DOUBLE_PLANT) {
      a.getSmartReset().addChanged(event.getBlock().getLocation().clone().add(0D,-1D,0D).getBlock(),event.getBlock().getType().equals(Material.CHEST));
      a.getSmartReset().addChanged(event.getBlock().getLocation().clone().add(0D,+1D,0D).getBlock(),event.getBlock().getType().equals(Material.CHEST));
    }
    if (event.getBlock().getType() == Material.SNOW || event.getBlock().getType() == Material.SNOW_BLOCK) {
      a.getSmartReset().addChanged(event.getBlock().getLocation().clone().add(0D,+3D,0D).getBlock(),event.getBlock().getType().equals(Material.CHEST));
      a.getSmartReset().addChanged(event.getBlock().getLocation().clone().add(0D,+2D,0D).getBlock(),event.getBlock().getType().equals(Material.CHEST));
      a.getSmartReset().addChanged(event.getBlock().getLocation().clone().add(0D,+1D,0D).getBlock(),event.getBlock().getType().equals(Material.CHEST));
    }
    if (event.getBlock().getType() == Material.CARPET) {
      a.getSmartReset().addChanged(event.getBlock().getLocation().clone().add(0D,+3D,0D).getBlock(),event.getBlock().getType().equals(Material.CHEST));
      a.getSmartReset().addChanged(event.getBlock().getLocation().clone().add(0D,+2D,0D).getBlock(),event.getBlock().getType().equals(Material.CHEST));
      a.getSmartReset().addChanged(event.getBlock().getLocation().clone().add(0D,+1D,0D).getBlock(),event.getBlock().getType().equals(Material.CHEST));
    }
    if (event.getBlock().getType() == Material.CACTUS) {
      a.getSmartReset().addChanged(event.getBlock().getLocation().clone().add(0D,+4D,0D).getBlock(),event.getBlock().getType().equals(Material.CHEST));
      a.getSmartReset().addChanged(event.getBlock().getLocation().clone().add(0D,+3D,0D).getBlock(),event.getBlock().getType().equals(Material.CHEST));
      a.getSmartReset().addChanged(event.getBlock().getLocation().clone().add(0D,+2D,0D).getBlock(),event.getBlock().getType().equals(Material.CHEST));
      a.getSmartReset().addChanged(event.getBlock().getLocation().clone().add(0D,+1D,0D).getBlock(),event.getBlock().getType().equals(Material.CHEST));
    }
  }
  if (event.getBlock().getType() == Material.SIGN_POST || event.getBlock().getType() == Material.WALL_SIGN) {
    Arena arena=Util.getArenaBySignLocation(plugin,event.getBlock().getLocation());
    if (arena != null) {
      pli.getArenasConfig().getConfig().set(""String_Node_Str"" + arena.getInternalName() + ""String_Node_Str"",null);
      pli.getArenasConfig().saveConfig();
    }
  }
}",0.8977395048439182
86057,"public void leavePlayerRaw(final String playername,boolean fullLeave){
  if (!this.containsPlayer(playername)) {
    return;
  }
  this.players.remove(playername);
  pli.global_players.remove(playername);
  if (fullLeave) {
    plugin.getConfig().set(""String_Node_Str"" + playername + ""String_Node_Str"",playername);
    plugin.getConfig().set(""String_Node_Str"" + playername + ""String_Node_Str"",plugin.getName());
    for (    ItemStack i : pinv.get(playername)) {
      if (i != null) {
        plugin.getConfig().set(""String_Node_Str"" + playername + ""String_Node_Str""+ Integer.toString((int)Math.round(Math.random() * 10000))+ i.getType().toString(),i);
      }
    }
    plugin.saveConfig();
    try {
      Player p=Bukkit.getPlayer(playername);
      if (pli.global_players.containsKey(playername)) {
        pli.global_players.remove(playername);
      }
      if (pli.global_lost.containsKey(playername)) {
        pli.global_lost.remove(playername);
      }
      if (pli.global_arcade_spectator.containsKey(playername)) {
        pli.global_arcade_spectator.remove(playername);
      }
      if (p != null) {
        p.removePotionEffect(PotionEffectType.JUMP);
        Util.teleportPlayerFixed(p,this.mainlobby);
        p.setFireTicks(0);
        p.setFlying(false);
        if (!p.isOp()) {
          p.setAllowFlight(false);
        }
        if (pgamemode.containsKey(p.getName())) {
          p.setGameMode(pgamemode.get(p.getName()));
        }
        if (pxplvl.containsKey(p.getName())) {
          p.setLevel(0);
          p.setLevel(pxplvl.get(p.getName()));
        }
        p.getInventory().setContents(pinv.get(playername));
        p.getInventory().setArmorContents(pinv_armor.get(playername));
        p.updateInventory();
        p.setWalkSpeed(0.2F);
        p.setFoodLevel(20);
        p.setHealth(20D);
        p.removePotionEffect(PotionEffectType.JUMP);
        pli.getSpectatorManager().setSpectate(p,false);
      }
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + e.getMessage());
    }
    return;
  }
  final Player p=Bukkit.getPlayer(playername);
  Util.clearInv(p);
  p.setWalkSpeed(0.2F);
  p.setFoodLevel(20);
  p.setHealth(20D);
  p.setFireTicks(0);
  p.removePotionEffect(PotionEffectType.JUMP);
  pli.getSpectatorManager().setSpectate(p,false);
  for (  PotionEffect effect : p.getActivePotionEffects()) {
    if (effect != null) {
      p.removePotionEffect(effect.getType());
    }
  }
  for (  Entity e : p.getNearbyEntities(50D,50D,50D)) {
    if (e.getType() == EntityType.DROPPED_ITEM || e.getType() == EntityType.SLIME || e.getType() == EntityType.ZOMBIE || e.getType() == EntityType.SKELETON || e.getType() == EntityType.SPIDER || e.getType() == EntityType.CREEPER) {
      e.remove();
    }
  }
  pli.global_players.remove(playername);
  if (pli.global_lost.containsKey(playername)) {
    pli.global_lost.remove(playername);
  }
  if (pli.global_arcade_spectator.containsKey(playername)) {
    pli.global_arcade_spectator.remove(playername);
  }
  Util.updateSign(plugin,this);
  final String arenaname=this.getInternalName();
  final Arena a=this;
  final boolean started_=started;
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      if (p != null) {
        if (ai == null || a.isArcadeMain()) {
          if (a.mainlobby != null) {
            Util.teleportPlayerFixed(p,a.mainlobby);
          }
 else           if (a.waitinglobby != null) {
            Util.teleportPlayerFixed(p,a.waitinglobby);
          }
        }
        p.setFireTicks(0);
        p.setFlying(false);
        if (!p.isOp()) {
          p.setAllowFlight(false);
        }
        if (pgamemode.containsKey(p.getName())) {
          p.setGameMode(pgamemode.get(p.getName()));
        }
        if (pxplvl.containsKey(p.getName())) {
          p.setLevel(0);
          p.setLevel(pxplvl.get(p.getName()));
        }
        p.getInventory().setContents(pinv.get(playername));
        p.getInventory().setArmorContents(pinv_armor.get(playername));
        p.updateInventory();
        if (started_) {
          if (!pnoreward.contains(playername)) {
            pli.getRewardsInstance().giveWinReward(playername,a,global_coin_multiplier);
          }
 else {
            pnoreward.remove(playername);
          }
        }
        try {
          pli.scoreboardManager.removeScoreboard(arenaname,p);
        }
 catch (        Exception e) {
        }
      }
    }
  }
,5L);
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    final String server=plugin.getConfig().getString(""String_Node_Str"");
    Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
      public void run(){
        BungeeUtil.connectToServer(MinigamesAPI.getAPI(),p.getName(),server);
      }
    }
,30L);
    return;
  }
}","public void leavePlayerRaw(final String playername,boolean fullLeave){
  if (!this.containsPlayer(playername)) {
    return;
  }
  this.players.remove(playername);
  pli.global_players.remove(playername);
  if (fullLeave) {
    plugin.getConfig().set(""String_Node_Str"" + playername + ""String_Node_Str"",playername);
    plugin.getConfig().set(""String_Node_Str"" + playername + ""String_Node_Str"",plugin.getName());
    for (    ItemStack i : pinv.get(playername)) {
      if (i != null) {
        plugin.getConfig().set(""String_Node_Str"" + playername + ""String_Node_Str""+ Integer.toString((int)Math.round(Math.random() * 10000))+ i.getType().toString(),i);
      }
    }
    plugin.saveConfig();
    try {
      Player p=Bukkit.getPlayer(playername);
      if (pli.global_players.containsKey(playername)) {
        pli.global_players.remove(playername);
      }
      if (pli.global_lost.containsKey(playername)) {
        pli.global_lost.remove(playername);
      }
      if (pli.global_arcade_spectator.containsKey(playername)) {
        pli.global_arcade_spectator.remove(playername);
      }
      if (p != null) {
        p.removePotionEffect(PotionEffectType.JUMP);
        Util.teleportPlayerFixed(p,this.mainlobby);
        p.setFireTicks(0);
        p.setFlying(false);
        if (!p.isOp()) {
          p.setAllowFlight(false);
        }
        if (pgamemode.containsKey(p.getName())) {
          p.setGameMode(pgamemode.get(p.getName()));
        }
        if (pxplvl.containsKey(p.getName())) {
          p.setLevel(0);
          p.setLevel(pxplvl.get(p.getName()));
        }
        p.getInventory().setContents(pinv.get(playername));
        p.getInventory().setArmorContents(pinv_armor.get(playername));
        p.updateInventory();
        p.setWalkSpeed(0.2F);
        p.setFoodLevel(20);
        p.setHealth(20D);
        p.removePotionEffect(PotionEffectType.JUMP);
        pli.getSpectatorManager().setSpectate(p,false);
      }
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + e.getMessage());
    }
    return;
  }
  final Player p=Bukkit.getPlayer(playername);
  Util.clearInv(p);
  p.setWalkSpeed(0.2F);
  p.setFoodLevel(20);
  p.setHealth(20D);
  p.setFireTicks(0);
  p.removePotionEffect(PotionEffectType.JUMP);
  pli.getSpectatorManager().setSpectate(p,false);
  for (  PotionEffect effect : p.getActivePotionEffects()) {
    if (effect != null) {
      p.removePotionEffect(effect.getType());
    }
  }
  for (  Entity e : p.getNearbyEntities(50D,50D,50D)) {
    if (e.getType() == EntityType.DROPPED_ITEM || e.getType() == EntityType.SLIME || e.getType() == EntityType.ZOMBIE || e.getType() == EntityType.SKELETON || e.getType() == EntityType.SPIDER || e.getType() == EntityType.CREEPER) {
      e.remove();
    }
  }
  pli.global_players.remove(playername);
  if (pli.global_arcade_spectator.containsKey(playername)) {
    pli.global_arcade_spectator.remove(playername);
  }
  Util.updateSign(plugin,this);
  final String arenaname=this.getInternalName();
  final Arena a=this;
  final boolean started_=started;
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      if (p != null) {
        if (ai == null || a.isArcadeMain()) {
          if (a.mainlobby != null) {
            Util.teleportPlayerFixed(p,a.mainlobby);
          }
 else           if (a.waitinglobby != null) {
            Util.teleportPlayerFixed(p,a.waitinglobby);
          }
        }
        p.setFireTicks(0);
        p.setFlying(false);
        if (!p.isOp()) {
          p.setAllowFlight(false);
        }
        if (pgamemode.containsKey(p.getName())) {
          p.setGameMode(pgamemode.get(p.getName()));
        }
        if (pxplvl.containsKey(p.getName())) {
          p.setLevel(0);
          p.setLevel(pxplvl.get(p.getName()));
        }
        p.getInventory().setContents(pinv.get(playername));
        p.getInventory().setArmorContents(pinv_armor.get(playername));
        p.updateInventory();
        if (started_) {
          if (!pnoreward.contains(playername)) {
            pli.getRewardsInstance().giveWinReward(playername,a,global_coin_multiplier);
          }
 else {
            pnoreward.remove(playername);
          }
        }
        if (pli.global_lost.containsKey(playername)) {
          pli.global_lost.remove(playername);
        }
        try {
          pli.scoreboardManager.removeScoreboard(arenaname,p);
        }
 catch (        Exception e) {
        }
      }
    }
  }
,5L);
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    final String server=plugin.getConfig().getString(""String_Node_Str"");
    Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
      public void run(){
        BungeeUtil.connectToServer(MinigamesAPI.getAPI(),p.getName(),server);
      }
    }
,30L);
    return;
  }
}",0.9787941787941788
86058,"@EventHandler(priority=EventPriority.HIGHEST) public void onMove(PlayerMoveEvent event){
  try {
    final Player p=event.getPlayer();
    if (pli.global_players.containsKey(p.getName())) {
      final Arena a=pli.global_players.get(p.getName());
      if (!pli.global_lost.containsKey(p.getName()) && !pli.global_arcade_spectator.containsKey(p.getName())) {
        if (a.getArenaState() == ArenaState.INGAME) {
          if (p.getLocation().getBlockY() + loseY < a.getSpawns().get(0).getBlockY()) {
            if (a.getArenaType() == ArenaType.JUMPNRUN) {
              Util.teleportPlayerFixed(p,a.getSpawns().get(0));
            }
 else {
              a.spectate(p.getName());
            }
            return;
          }
          if (a.getBoundaries() != null) {
            if (!a.getBoundaries().containsLocWithoutY(p.getLocation())) {
              Vector direction=a.getSpawns().get(0).toVector().subtract(p.getLocation().toVector()).normalize();
              p.setVelocity(direction);
              if (p.isInsideVehicle()) {
                p.getVehicle().setVelocity(direction.multiply(2D));
              }
              p.playEffect(p.getLocation(),Effect.POTION_BREAK,5);
            }
          }
        }
 else         if (a.getArenaState() == ArenaState.STARTING || a.getArenaState() == ArenaState.JOIN) {
          if (!a.startedIngameCountdown) {
            if (p.getLocation().getBlockY() < 0) {
              try {
                Util.teleportPlayerFixed(p,a.getWaitingLobbyTemp());
              }
 catch (              Exception e) {
                System.out.println(""String_Node_Str"" + a.getInternalName() + ""String_Node_Str""+ e.getMessage());
              }
            }
            if (a.getLobbyBoundaries() != null) {
              if (!a.getLobbyBoundaries().containsLocWithoutY(p.getLocation())) {
                Vector direction=a.getWaitingLobbyTemp().toVector().subtract(p.getLocation().toVector()).normalize();
                p.setVelocity(direction);
                if (p.isInsideVehicle()) {
                  p.getVehicle().setVelocity(direction.multiply(2D));
                }
                p.playEffect(p.getLocation(),Effect.POTION_BREAK,5);
              }
            }
          }
        }
      }
 else {
        if (a.getArenaState() == ArenaState.INGAME) {
          if (pli.spectator_move_y_lock && event.getPlayer().getLocation().getBlockY() < (a.getSpawns().get(0).getBlockY() + 30D) || event.getPlayer().getLocation().getBlockY() > (a.getSpawns().get(0).getBlockY() + 30D)) {
            final float b=p.getLocation().getYaw();
            final float c=p.getLocation().getPitch();
            Bukkit.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
              @Override public void run(){
                p.setAllowFlight(true);
                p.setFlying(true);
                if (p.isInsideVehicle()) {
                  Entity ent=p.getVehicle();
                  p.leaveVehicle();
                  ent.eject();
                }
                p.teleport(new Location(p.getWorld(),p.getLocation().getBlockX(),(a.getSpawns().get(0).getBlockY() + 30D),p.getLocation().getBlockZ(),b,c));
              }
            }
,1);
            return;
          }
          if (a.getSpecBoundaries() != null) {
            if (!a.getSpecBoundaries().containsLocWithoutY(p.getLocation())) {
              Vector direction=a.getSpawns().get(0).clone().add(0D,30D,0D).toVector().subtract(p.getLocation().toVector()).normalize();
              p.setVelocity(direction);
              if (p.isInsideVehicle()) {
                p.getVehicle().setVelocity(direction.multiply(2D));
              }
              p.playEffect(p.getLocation(),Effect.POTION_BREAK,5);
            }
            return;
          }
          if (a.getBoundaries() != null) {
            if (!a.getBoundaries().containsLocWithoutY(p.getLocation())) {
              Vector direction=a.getSpawns().get(0).clone().add(0D,30D,0D).toVector().subtract(p.getLocation().toVector()).normalize();
              p.setVelocity(direction);
              if (p.isInsideVehicle()) {
                p.getVehicle().setVelocity(direction.multiply(2D));
              }
              p.playEffect(p.getLocation(),Effect.POTION_BREAK,5);
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    for (    StackTraceElement et : e.getStackTrace()) {
      System.out.println(et);
    }
  }
}","@EventHandler(priority=EventPriority.HIGHEST) public void onMove(PlayerMoveEvent event){
  try {
    final Player p=event.getPlayer();
    if (pli.global_players.containsKey(p.getName())) {
      final Arena a=pli.global_players.get(p.getName());
      if (!pli.global_lost.containsKey(p.getName()) && !pli.global_arcade_spectator.containsKey(p.getName())) {
        if (a.getArenaState() == ArenaState.INGAME) {
          if (p.getLocation().getBlockY() + loseY < a.getSpawns().get(0).getBlockY()) {
            if (a.getArenaType() == ArenaType.JUMPNRUN) {
              Util.teleportPlayerFixed(p,a.getSpawns().get(0));
            }
 else {
              a.spectate(p.getName());
              for (              String p_ : a.getAllPlayers()) {
                if (Validator.isPlayerOnline(p_)) {
                  Bukkit.getPlayer(p_).sendMessage(pli.getMessagesConfig().player_died.replaceAll(""String_Node_Str"",p.getName()));
                }
              }
            }
            return;
          }
          if (a.getBoundaries() != null) {
            if (!a.getBoundaries().containsLocWithoutY(p.getLocation())) {
              Vector direction=a.getSpawns().get(0).toVector().subtract(p.getLocation().toVector()).normalize();
              p.setVelocity(direction);
              if (p.isInsideVehicle()) {
                p.getVehicle().setVelocity(direction.multiply(2D));
              }
              p.playEffect(p.getLocation(),Effect.POTION_BREAK,5);
            }
          }
        }
 else         if (a.getArenaState() == ArenaState.STARTING || a.getArenaState() == ArenaState.JOIN) {
          if (!a.startedIngameCountdown) {
            if (p.getLocation().getBlockY() < 0) {
              try {
                Util.teleportPlayerFixed(p,a.getWaitingLobbyTemp());
              }
 catch (              Exception e) {
                System.out.println(""String_Node_Str"" + a.getInternalName() + ""String_Node_Str""+ e.getMessage());
              }
            }
            if (a.getLobbyBoundaries() != null) {
              if (!a.getLobbyBoundaries().containsLocWithoutY(p.getLocation())) {
                Vector direction=a.getWaitingLobbyTemp().toVector().subtract(p.getLocation().toVector()).normalize();
                p.setVelocity(direction);
                if (p.isInsideVehicle()) {
                  p.getVehicle().setVelocity(direction.multiply(2D));
                }
                p.playEffect(p.getLocation(),Effect.POTION_BREAK,5);
              }
            }
          }
        }
      }
 else {
        if (a.getArenaState() == ArenaState.INGAME) {
          if (pli.spectator_move_y_lock && event.getPlayer().getLocation().getBlockY() < (a.getSpawns().get(0).getBlockY() + 30D) || event.getPlayer().getLocation().getBlockY() > (a.getSpawns().get(0).getBlockY() + 30D)) {
            final float b=p.getLocation().getYaw();
            final float c=p.getLocation().getPitch();
            Bukkit.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new Runnable(){
              @Override public void run(){
                p.setAllowFlight(true);
                p.setFlying(true);
                if (p.isInsideVehicle()) {
                  Entity ent=p.getVehicle();
                  p.leaveVehicle();
                  ent.eject();
                }
                p.teleport(new Location(p.getWorld(),p.getLocation().getBlockX(),(a.getSpawns().get(0).getBlockY() + 30D),p.getLocation().getBlockZ(),b,c));
              }
            }
,1);
            return;
          }
          if (a.getSpecBoundaries() != null) {
            if (!a.getSpecBoundaries().containsLocWithoutY(p.getLocation())) {
              Vector direction=a.getSpawns().get(0).clone().add(0D,30D,0D).toVector().subtract(p.getLocation().toVector()).normalize();
              p.setVelocity(direction);
              if (p.isInsideVehicle()) {
                p.getVehicle().setVelocity(direction.multiply(2D));
              }
              p.playEffect(p.getLocation(),Effect.POTION_BREAK,5);
            }
            return;
          }
          if (a.getBoundaries() != null) {
            if (!a.getBoundaries().containsLocWithoutY(p.getLocation())) {
              Vector direction=a.getSpawns().get(0).clone().add(0D,30D,0D).toVector().subtract(p.getLocation().toVector()).normalize();
              p.setVelocity(direction);
              if (p.isInsideVehicle()) {
                p.getVehicle().setVelocity(direction.multiply(2D));
              }
              p.playEffect(p.getLocation(),Effect.POTION_BREAK,5);
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    for (    StackTraceElement et : e.getStackTrace()) {
      System.out.println(et);
    }
  }
}",0.9692758658126154
86059,"public boolean kitTakeMoney(Player p,String kit){
  if (!MinigamesAPI.getAPI().economy) {
    plugin.getLogger().warning(""String_Node_Str"");
    return false;
  }
  if (MinigamesAPI.economy) {
    if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
      ClassesConfig cl=pli.getClassesConfig();
      if (!cl.getConfig().isSet(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ kit)) {
        int money=pli.getClassesConfig().getConfig().getInt(""String_Node_Str"" + kit + ""String_Node_Str"");
        if (MinigamesAPI.getAPI().econ.getBalance(p.getName()) >= money) {
          EconomyResponse r=MinigamesAPI.getAPI().econ.withdrawPlayer(p.getName(),money);
          if (!r.transactionSuccess()) {
            p.sendMessage(String.format(""String_Node_Str"",r.errorMessage));
            return false;
          }
          cl.getConfig().set(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ kit,true);
          cl.saveConfig();
          p.sendMessage(pli.getMessagesConfig().successfully_bought_kit.replaceAll(""String_Node_Str"",getInternalNameByName(kit)).replaceAll(""String_Node_Str"",Integer.toString(money)));
        }
 else {
          p.sendMessage(pli.getMessagesConfig().not_enough_money);
          return false;
        }
      }
 else {
        return true;
      }
    }
 else {
      if (hasClass(p.getName())) {
        if (getSelectedClass(p.getName()).equalsIgnoreCase(kit)) {
          return false;
        }
      }
      ClassesConfig config=pli.getClassesConfig();
      int money=config.getConfig().getInt(""String_Node_Str"" + kit + ""String_Node_Str"");
      if (MinigamesAPI.getAPI().econ.getBalance(p.getName()) >= money) {
        EconomyResponse r=MinigamesAPI.getAPI().econ.withdrawPlayer(p.getName(),money);
        if (!r.transactionSuccess()) {
          p.sendMessage(String.format(""String_Node_Str"",r.errorMessage));
          return false;
        }
        p.sendMessage(pli.getMessagesConfig().successfully_bought_kit.replaceAll(""String_Node_Str"",kit).replaceAll(""String_Node_Str"",Integer.toString(money)));
      }
 else {
        p.sendMessage(pli.getMessagesConfig().not_enough_money);
        return false;
      }
    }
    return true;
  }
 else {
    return false;
  }
}","public boolean kitTakeMoney(Player p,String kit){
  if (!MinigamesAPI.getAPI().economy) {
    plugin.getLogger().warning(""String_Node_Str"");
    return false;
  }
  if (MinigamesAPI.economy) {
    if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
      ClassesConfig cl=pli.getClassesConfig();
      if (!cl.getConfig().isSet(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ kit)) {
        int money=pli.getClassesConfig().getConfig().getInt(""String_Node_Str"" + kit + ""String_Node_Str"");
        if (MinigamesAPI.getAPI().econ.getBalance(p.getName()) >= money) {
          EconomyResponse r=MinigamesAPI.getAPI().econ.withdrawPlayer(p.getName(),money);
          if (!r.transactionSuccess()) {
            p.sendMessage(String.format(""String_Node_Str"",r.errorMessage));
            return false;
          }
          cl.getConfig().set(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ kit,true);
          cl.saveConfig();
          p.sendMessage(pli.getMessagesConfig().successfully_bought_kit.replaceAll(""String_Node_Str"",ChatColor.translateAlternateColorCodes('&',getClassByInternalname(kit).getName())).replaceAll(""String_Node_Str"",Integer.toString(money)));
        }
 else {
          p.sendMessage(pli.getMessagesConfig().not_enough_money);
          return false;
        }
      }
 else {
        return true;
      }
    }
 else {
      if (hasClass(p.getName())) {
        if (getSelectedClass(p.getName()).equalsIgnoreCase(kit)) {
          return false;
        }
      }
      ClassesConfig config=pli.getClassesConfig();
      int money=config.getConfig().getInt(""String_Node_Str"" + kit + ""String_Node_Str"");
      if (MinigamesAPI.getAPI().econ.getBalance(p.getName()) >= money) {
        EconomyResponse r=MinigamesAPI.getAPI().econ.withdrawPlayer(p.getName(),money);
        if (!r.transactionSuccess()) {
          p.sendMessage(String.format(""String_Node_Str"",r.errorMessage));
          return false;
        }
        p.sendMessage(pli.getMessagesConfig().successfully_bought_kit.replaceAll(""String_Node_Str"",ChatColor.translateAlternateColorCodes('&',getClassByInternalname(kit).getName())).replaceAll(""String_Node_Str"",Integer.toString(money)));
      }
 else {
        p.sendMessage(pli.getMessagesConfig().not_enough_money);
        return false;
      }
    }
    return true;
  }
 else {
    return false;
  }
}",0.9639501857111644
86060,"public void startRaw(final Arena a){
  currentarena.getArena().setArenaState(ArenaState.INGAME);
  startedIngameCountdown=false;
  Util.updateSign(plugin,a);
  boolean send_game_started_msg=plugin.getConfig().getBoolean(""String_Node_Str"");
  for (  String p_ : a.getAllPlayers()) {
    try {
      if (!pli.global_lost.containsKey(p_)) {
        if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
          if (!pli.getClassesHandler().hasClass(p_)) {
            pli.getClassesHandler().setClass(""String_Node_Str"",p_,false);
          }
          pli.getClassesHandler().getClass(p_);
        }
 else {
          Util.clearInv(Bukkit.getPlayer(p_));
          pli.getClassesHandler().getClass(p_);
        }
        Bukkit.getPlayer(p_).setFlying(false);
        Bukkit.getPlayer(p_).setAllowFlight(false);
      }
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + e.getMessage());
    }
    Player p=Bukkit.getPlayer(p_);
    p.setWalkSpeed(0.2F);
    p.setFoodLevel(20);
    p.removePotionEffect(PotionEffectType.JUMP);
    if (send_game_started_msg) {
      p.sendMessage(pli.getMessagesConfig().game_started);
    }
  }
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    Bukkit.setWhitelist(true);
  }
  started=true;
  started();
  try {
    Bukkit.getScheduler().cancelTask(currenttaskid);
  }
 catch (  Exception e) {
  }
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      a.stop();
    }
  }
,20L * 60L * (long)plugin.getConfig().getDouble(""String_Node_Str""));
}","public void startRaw(final Arena a){
  currentarena.getArena().setArenaState(ArenaState.INGAME);
  startedIngameCountdown=false;
  Util.updateSign(plugin,a);
  boolean send_game_started_msg=plugin.getConfig().getBoolean(""String_Node_Str"");
  for (  String p_ : a.getAllPlayers()) {
    try {
      if (!pli.global_lost.containsKey(p_)) {
        if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
          if (!pli.getClassesHandler().hasClass(p_)) {
            pli.getClassesHandler().setClass(""String_Node_Str"",p_,false);
          }
          pli.getClassesHandler().getClass(p_);
        }
 else {
          Util.clearInv(Bukkit.getPlayer(p_));
          pli.getClassesHandler().getClass(p_);
        }
        Bukkit.getPlayer(p_).setFlying(false);
        Bukkit.getPlayer(p_).setAllowFlight(false);
      }
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + e.getMessage());
    }
    Player p=Bukkit.getPlayer(p_);
    p.setWalkSpeed(0.2F);
    p.setFoodLevel(20);
    p.removePotionEffect(PotionEffectType.JUMP);
    if (send_game_started_msg) {
      p.sendMessage(pli.getMessagesConfig().game_started);
    }
  }
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    Bukkit.setWhitelist(true);
  }
  spectator_task=Bukkit.getScheduler().runTaskTimer(plugin,new Runnable(){
    public void run(){
      try {
        for (        String p_ : a.getAllPlayers()) {
          if (!pli.global_lost.containsKey(p_)) {
            continue;
          }
          Player p=Bukkit.getPlayer(p_);
          if (p != null) {
            for (            String p__ : a.getAllPlayers()) {
              if (p_ != p__) {
                Player p2=Bukkit.getPlayer(p__);
                if ((p.getLocation().getBlockX() - p2.getLocation().getBlockX() < 5) && p.getLocation().getBlockZ() - p2.getLocation().getBlockZ() < 5 && p.getLocation().getBlockY() - p2.getLocation().getBlockY() < 5) {
                  Vector direction=p2.getLocation().add(0D,-0.5D,0D).toVector().subtract(p.getLocation().toVector()).normalize().multiply(-1.5D);
                  p.setVelocity(direction);
                  if (p.isInsideVehicle()) {
                    p.getVehicle().setVelocity(direction.multiply(2D));
                  }
                  break;
                }
              }
            }
          }
        }
      }
 catch (      Exception e) {
        if (spectator_task != null) {
          spectator_task.cancel();
        }
      }
    }
  }
,20L,20L);
  started=true;
  started();
  try {
    Bukkit.getScheduler().cancelTask(currenttaskid);
  }
 catch (  Exception e) {
  }
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      a.stop();
    }
  }
,20L * 60L * (long)plugin.getConfig().getDouble(""String_Node_Str""));
}",0.640495867768595
86061,"/** 
 * Stops the arena and teleports all players to the mainlobby
 */
public void stop(){
  final Arena a=this;
  if (!temp_delay_stopped) {
    if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
      Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
        public void run(){
          temp_delay_stopped=true;
          a.stop();
        }
      }
,plugin.getConfig().getInt(""String_Node_Str"") * 20L);
      this.setArenaState(ArenaState.RESTARTING);
      Util.updateSign(plugin,this);
      if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
        if (this.getAllPlayers().size() > 0) {
          Util.spawnFirework(Bukkit.getPlayer(this.getAllPlayers().get(0)));
        }
      }
      return;
    }
  }
  temp_delay_stopped=false;
  try {
    Bukkit.getScheduler().cancelTask(currenttaskid);
  }
 catch (  Exception e) {
  }
  this.setArenaState(ArenaState.RESTARTING);
  final ArrayList<String> temp=new ArrayList<String>(this.getAllPlayers());
  for (  final String p_ : temp) {
    try {
      Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
        public void run(){
          if (Validator.isPlayerOnline(p_)) {
            for (            Entity e : Bukkit.getPlayer(p_).getNearbyEntities(50,50,50)) {
              if (e.getType() == EntityType.DROPPED_ITEM || e.getType() == EntityType.SLIME || e.getType() == EntityType.ZOMBIE || e.getType() == EntityType.SKELETON || e.getType() == EntityType.SPIDER || e.getType() == EntityType.CREEPER) {
                e.remove();
              }
            }
          }
        }
      }
,10L);
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
    }
    leavePlayer(p_,false,true);
  }
  if (a.getArenaType() == ArenaType.REGENERATION) {
    reset();
  }
 else {
    a.setArenaState(ArenaState.JOIN);
    Util.updateSign(plugin,a);
  }
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      players.clear();
      pinv.clear();
      pinv_armor.clear();
      pnoreward.clear();
      for (      IconMenu im : pli.getClassesHandler().lasticonm.values()) {
        im.destroy();
      }
      pli.getClassesHandler().lasticonm.clear();
    }
  }
,10L);
  started=false;
  startedIngameCountdown=false;
  temp_countdown=true;
  skip_join_lobby=false;
  currentspawn=0;
  pli.scoreboardManager.clearScoreboard(this.getName());
  pli.scoreboardLobbyManager.clearScoreboard(this.getName());
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    String[] cmds=plugin.getConfig().getString(""String_Node_Str"").split(""String_Node_Str"");
    for (    String cmd : cmds) {
      Bukkit.dispatchCommand(Bukkit.getConsoleSender(),cmd);
    }
  }
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    final String server=plugin.getConfig().getString(""String_Node_Str"");
    Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
      public void run(){
        for (        Player p : Bukkit.getOnlinePlayers()) {
          BungeeUtil.connectToServer(MinigamesAPI.getAPI(),p.getName(),server);
        }
      }
    }
,30L);
    return;
  }
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    Bukkit.setWhitelist(false);
  }
  if (ai != null) {
    Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
      public void run(){
        if (ai != null) {
          ai.nextMinigame();
          ai=null;
        }
      }
    }
,10L);
  }
 else {
    if (temp.size() < 2) {
      return;
    }
    if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
      Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
        public void run(){
          a.nextArenaOnMapRotation(temp);
        }
      }
,35L);
    }
  }
}","/** 
 * Stops the arena and teleports all players to the mainlobby
 */
public void stop(){
  final Arena a=this;
  if (spectator_task != null) {
    spectator_task.cancel();
  }
  if (!temp_delay_stopped) {
    if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
      Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
        public void run(){
          temp_delay_stopped=true;
          a.stop();
        }
      }
,plugin.getConfig().getInt(""String_Node_Str"") * 20L);
      this.setArenaState(ArenaState.RESTARTING);
      Util.updateSign(plugin,this);
      if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
        if (this.getAllPlayers().size() > 0) {
          Util.spawnFirework(Bukkit.getPlayer(this.getAllPlayers().get(0)));
        }
      }
      return;
    }
  }
  temp_delay_stopped=false;
  try {
    Bukkit.getScheduler().cancelTask(currenttaskid);
  }
 catch (  Exception e) {
  }
  this.setArenaState(ArenaState.RESTARTING);
  final ArrayList<String> temp=new ArrayList<String>(this.getAllPlayers());
  for (  final String p_ : temp) {
    try {
      Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
        public void run(){
          if (Validator.isPlayerOnline(p_)) {
            for (            Entity e : Bukkit.getPlayer(p_).getNearbyEntities(50,50,50)) {
              if (e.getType() == EntityType.DROPPED_ITEM || e.getType() == EntityType.SLIME || e.getType() == EntityType.ZOMBIE || e.getType() == EntityType.SKELETON || e.getType() == EntityType.SPIDER || e.getType() == EntityType.CREEPER) {
                e.remove();
              }
            }
          }
        }
      }
,10L);
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
    }
    leavePlayer(p_,false,true);
  }
  if (a.getArenaType() == ArenaType.REGENERATION) {
    reset();
  }
 else {
    a.setArenaState(ArenaState.JOIN);
    Util.updateSign(plugin,a);
  }
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      players.clear();
      pinv.clear();
      pinv_armor.clear();
      pnoreward.clear();
      for (      IconMenu im : pli.getClassesHandler().lasticonm.values()) {
        im.destroy();
      }
      pli.getClassesHandler().lasticonm.clear();
    }
  }
,10L);
  started=false;
  startedIngameCountdown=false;
  temp_countdown=true;
  skip_join_lobby=false;
  currentspawn=0;
  pli.scoreboardManager.clearScoreboard(this.getName());
  pli.scoreboardLobbyManager.clearScoreboard(this.getName());
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    String[] cmds=plugin.getConfig().getString(""String_Node_Str"").split(""String_Node_Str"");
    for (    String cmd : cmds) {
      Bukkit.dispatchCommand(Bukkit.getConsoleSender(),cmd);
    }
  }
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    final String server=plugin.getConfig().getString(""String_Node_Str"");
    Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
      public void run(){
        for (        Player p : Bukkit.getOnlinePlayers()) {
          BungeeUtil.connectToServer(MinigamesAPI.getAPI(),p.getName(),server);
        }
      }
    }
,30L);
    return;
  }
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    Bukkit.setWhitelist(false);
  }
  if (ai != null) {
    Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
      public void run(){
        if (ai != null) {
          ai.nextMinigame();
          ai=null;
        }
      }
    }
,10L);
  }
 else {
    if (temp.size() < 2) {
      return;
    }
    if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
      Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
        public void run(){
          a.nextArenaOnMapRotation(temp);
        }
      }
,35L);
    }
  }
}",0.991283357918734
86062,"/** 
 * Spectates the game
 * @param playername the playername
 */
public void spectate(String playername){
  if (Validator.isPlayerValid(plugin,playername,this)) {
    this.onEliminated(playername);
    final Player p=Bukkit.getPlayer(playername);
    try {
      if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
        final Arena a=this;
        Effects.playFakeBed(a,p);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    pli.getSpectatorManager().setSpectate(p,true);
    if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
      pli.global_lost.put(playername,this);
      this.leavePlayer(playername,false,false);
      pli.scoreboardManager.updateScoreboard(plugin,this);
      return;
    }
    Util.clearInv(p);
    Util.giveSpectatorItems(plugin,p);
    pli.global_lost.put(playername,this);
    p.setAllowFlight(true);
    p.setFlying(true);
    pli.scoreboardManager.updateScoreboard(plugin,this);
    if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
      if (this.getPlayerAlive() < 1) {
        final Arena a=this;
        Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
          public void run(){
            a.stop();
          }
        }
,20L);
      }
 else {
        Location temp=this.spawns.get(0);
        Util.teleportPlayerFixed(p,temp.clone().add(0D,30D,0D));
      }
    }
 else {
      if (this.getPlayerAlive() < 2) {
        final Arena a=this;
        Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
          public void run(){
            a.stop();
          }
        }
,20L);
      }
 else {
        Location temp=this.spawns.get(0);
        Util.teleportPlayerFixed(p,temp.clone().add(0D,30D,0D));
      }
    }
  }
}","/** 
 * Spectates the game
 * @param playername the playername
 */
public void spectate(String playername){
  if (Validator.isPlayerValid(plugin,playername,this)) {
    this.onEliminated(playername);
    final Player p=Bukkit.getPlayer(playername);
    pli.global_lost.put(playername,this);
    final Location deathLocation=p.getLocation();
    if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
      final Arena a=this;
      try {
        Effects.playFakeBed(a,p,deathLocation.getBlockX(),deathLocation.getBlockY(),deathLocation.getBlockZ());
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
        public void run(){
        }
      }
,10L);
    }
    pli.getSpectatorManager().setSpectate(p,true);
    if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
      this.leavePlayer(playername,false,false);
      pli.scoreboardManager.updateScoreboard(plugin,this);
      return;
    }
    Util.clearInv(p);
    p.setAllowFlight(true);
    p.setFlying(true);
    pli.scoreboardManager.updateScoreboard(plugin,this);
    if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
      if (this.getPlayerAlive() < 1) {
        final Arena a=this;
        Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
          public void run(){
            a.stop();
          }
        }
,20L);
      }
 else {
        Location temp=this.spawns.get(0);
        Util.teleportPlayerFixed(p,temp.clone().add(0D,30D,0D));
      }
    }
 else {
      if (this.getPlayerAlive() < 2) {
        final Arena a=this;
        Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
          public void run(){
            a.stop();
          }
        }
,20L);
      }
 else {
        Location temp=this.spawns.get(0);
        Util.teleportPlayerFixed(p,temp.clone().add(0D,30D,0D));
      }
    }
    Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
      public void run(){
        Util.clearInv(p);
        Util.giveSpectatorItems(plugin,p);
      }
    }
,1L);
  }
}",0.7596940121340016
86063,"@EventHandler public void onPlayerDeath(PlayerDeathEvent event){
  if (pli.global_players.containsKey(event.getEntity().getName())) {
    event.setDeathMessage(null);
    event.getEntity().setHealth(20D);
    final Player p=event.getEntity();
    final Arena arena=pli.global_players.get(p.getName());
    if (arena.getArenaState() == ArenaState.JOIN) {
      Util.teleportPlayerFixed(p,arena.getWaitingLobbyTemp());
      return;
    }
    arena.onEliminated(p.getName());
    pli.global_lost.put(p.getName(),pli.global_players.get(p.getName()));
    int count=0;
    for (    String p_ : pli.global_players.keySet()) {
      if (Validator.isPlayerOnline(p_)) {
        if (pli.global_players.get(p_).getName().equalsIgnoreCase(arena.getName())) {
          if (!pli.global_lost.containsKey(p_)) {
            count++;
          }
        }
      }
    }
    final int count_=count;
    Bukkit.getScheduler().runTaskLater(MinigamesAPI.getAPI(),new Runnable(){
      public void run(){
        try {
          if (pli.global_players.containsKey(p.getName()) && count_ > 1) {
            pli.global_players.get(p.getName()).spectate(p.getName());
          }
          for (          String p_ : arena.getAllPlayers()) {
            if (Validator.isPlayerOnline(p_)) {
              Player p__=Bukkit.getPlayer(p_);
              Util.sendMessage(plugin,p__,pli.getMessagesConfig().broadcast_players_left.replaceAll(""String_Node_Str"",arena.getPlayerCount()));
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
,5);
    if (count < 2) {
      arena.stop();
    }
  }
}","@EventHandler public void onPlayerDeath(PlayerDeathEvent event){
  if (pli.global_players.containsKey(event.getEntity().getName())) {
    event.setDeathMessage(null);
    event.getEntity().setHealth(20D);
    final Player p=event.getEntity();
    final Arena arena=pli.global_players.get(p.getName());
    if (arena.getArenaState() == ArenaState.JOIN) {
      Util.teleportPlayerFixed(p,arena.getWaitingLobbyTemp());
      return;
    }
    arena.onEliminated(p.getName());
    pli.global_lost.put(p.getName(),pli.global_players.get(p.getName()));
    int count=0;
    for (    String p_ : pli.global_players.keySet()) {
      if (Validator.isPlayerOnline(p_)) {
        if (pli.global_players.get(p_).getName().equalsIgnoreCase(arena.getName())) {
          if (!pli.global_lost.containsKey(p_)) {
            count++;
          }
        }
      }
    }
    final int count_=count;
    Bukkit.getScheduler().runTaskLater(MinigamesAPI.getAPI(),new Runnable(){
      public void run(){
        try {
          if (pli.global_players.containsKey(p.getName()) && count_ > 1) {
            pli.global_players.get(p.getName()).spectate(p.getName());
          }
          for (          String p_ : arena.getAllPlayers()) {
            if (Validator.isPlayerOnline(p_)) {
              Player p__=Bukkit.getPlayer(p_);
              Util.sendMessage(plugin,p__,pli.getMessagesConfig().broadcast_players_left.replaceAll(""String_Node_Str"",arena.getPlayerCount()));
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
,5);
    if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
      if (count < 2) {
        arena.stop();
      }
    }
  }
}",0.978494623655914
86064,"@EventHandler public void onPlayerPickupItem(PlayerPickupItemEvent event){
  if (pli.global_lost.containsKey(event.getPlayer().getName()) || pli.getSpectatorManager().isSpectating(event.getPlayer())) {
    Arena a=pli.global_lost.get(event.getPlayer().getName());
    if (a != null) {
      if (a.getArenaState() != ArenaState.INGAME && a.getArcadeInstance() != null) {
        event.setCancelled(true);
      }
    }
  }
}","@EventHandler public void onPlayerPickupItem(PlayerPickupItemEvent event){
  if (pli.global_lost.containsKey(event.getPlayer().getName()) || pli.getSpectatorManager().isSpectating(event.getPlayer())) {
    Arena a=pli.global_lost.get(event.getPlayer().getName());
    if (a != null) {
      if (a.getArenaState() == ArenaState.INGAME && a.getArcadeInstance() == null) {
        event.setCancelled(true);
      }
    }
  }
}",0.9952718676122932
86065,"@Override public void onOptionClick(IconMenu.OptionClickEvent event){
  if (event.getPlayer().getName().equalsIgnoreCase(p.getName())) {
    String d=event.getName();
    Player p=event.getPlayer();
    Player p_=Bukkit.getPlayer(d);
    if (p_ != null && p != null) {
      Util.teleportPlayerFixed(p,p_.getLocation());
    }
  }
  event.setWillClose(true);
}","@Override public void onOptionClick(IconMenu.OptionClickEvent event){
  if (event.getPlayer().getName().equalsIgnoreCase(p.getName())) {
    String d=event.getName();
    Player p=event.getPlayer();
    Player p_=Bukkit.getPlayer(d);
    if (p_ != null && p != null) {
      Util.teleportPlayerFixed(p,p_.getLocation().add(0D,0.5D,0D));
    }
  }
  event.setWillClose(true);
}",0.9782608695652174
86066,"public void openSpectatorGUI(final Player p,Arena a){
  IconMenu iconm;
  int mincount=a.getAllPlayers().size();
  if (lasticonm.containsKey(p.getName())) {
    iconm=lasticonm.get(p.getName());
  }
 else {
    iconm=new IconMenu(MinigamesAPI.getAPI().getPluginInstance(plugin).getMessagesConfig().spectator_item,(9 > mincount - 1) ? 9 : Math.round(mincount / 9) * 9 + 9,new IconMenu.OptionClickEventHandler(){
      @Override public void onOptionClick(      IconMenu.OptionClickEvent event){
        if (event.getPlayer().getName().equalsIgnoreCase(p.getName())) {
          String d=event.getName();
          Player p=event.getPlayer();
          Player p_=Bukkit.getPlayer(d);
          if (p_ != null && p != null) {
            Util.teleportPlayerFixed(p,p_.getLocation());
          }
        }
        event.setWillClose(true);
      }
    }
,plugin);
  }
  PluginInstance pli=MinigamesAPI.getAPI().getPluginInstance(plugin);
  int c=0;
  for (  String p__ : a.getAllPlayers()) {
    Player p_=Bukkit.getPlayer(p__);
    if (p_ != null) {
      if (pli.global_players.containsKey(p__) && !pli.global_lost.containsKey(p__)) {
        if (a.getName().equalsIgnoreCase(pli.global_players.get(p__).getName())) {
          iconm.setOption(c,Util.getCustomHead(p__),p__,""String_Node_Str"");
          c++;
        }
      }
    }
  }
  iconm.open(p);
  lasticonm.put(p.getName(),iconm);
}","public void openSpectatorGUI(final Player p,Arena a){
  IconMenu iconm;
  int mincount=a.getAllPlayers().size();
  if (lasticonm.containsKey(p.getName())) {
    iconm=lasticonm.get(p.getName());
  }
 else {
    iconm=new IconMenu(MinigamesAPI.getAPI().getPluginInstance(plugin).getMessagesConfig().spectator_item,(9 > mincount - 1) ? 9 : Math.round(mincount / 9) * 9 + 9,new IconMenu.OptionClickEventHandler(){
      @Override public void onOptionClick(      IconMenu.OptionClickEvent event){
        if (event.getPlayer().getName().equalsIgnoreCase(p.getName())) {
          String d=event.getName();
          Player p=event.getPlayer();
          Player p_=Bukkit.getPlayer(d);
          if (p_ != null && p != null) {
            Util.teleportPlayerFixed(p,p_.getLocation().add(0D,0.5D,0D));
          }
        }
        event.setWillClose(true);
      }
    }
,plugin);
  }
  PluginInstance pli=MinigamesAPI.getAPI().getPluginInstance(plugin);
  int c=0;
  for (  String p__ : a.getAllPlayers()) {
    Player p_=Bukkit.getPlayer(p__);
    if (p_ != null) {
      if (pli.global_players.containsKey(p__) && !pli.global_lost.containsKey(p__)) {
        if (a.getName().equalsIgnoreCase(pli.global_players.get(p__).getName())) {
          iconm.setOption(c,Util.getCustomHead(p__),p__,""String_Node_Str"");
          c++;
        }
      }
    }
  }
  iconm.open(p);
  lasticonm.put(p.getName(),iconm);
}",0.9942734430923408
86067,"public static void giveLobbyItems(JavaPlugin plugin,Player p){
  PluginInstance pli=MinigamesAPI.getAPI().getPluginInstance(plugin);
  ItemStack classes_item=new ItemStack(plugin.getConfig().getInt(""String_Node_Str""));
  if (classes_item.getType() != Material.AIR) {
    ItemMeta cimeta=classes_item.getItemMeta();
    cimeta.setDisplayName(pli.getMessagesConfig().classes_item);
    classes_item.setItemMeta(cimeta);
  }
  if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
    ItemStack exit_item=new ItemStack(plugin.getConfig().getInt(""String_Node_Str""));
    if (exit_item.getType() != Material.AIR) {
      ItemMeta exitimeta=exit_item.getItemMeta();
      exitimeta.setDisplayName(pli.getMessagesConfig().exit_item);
      exit_item.setItemMeta(exitimeta);
    }
    p.getInventory().setItem(8,exit_item);
    p.updateInventory();
  }
  ItemStack achievement_item=new ItemStack(plugin.getConfig().getInt(""String_Node_Str""));
  if (achievement_item.getType() != Material.AIR) {
    ItemMeta achievement_itemmeta=achievement_item.getItemMeta();
    achievement_itemmeta.setDisplayName(pli.getMessagesConfig().achievement_item);
    achievement_item.setItemMeta(achievement_itemmeta);
  }
  ItemStack shop_item=new ItemStack(plugin.getConfig().getInt(""String_Node_Str""));
  if (shop_item.getType() != Material.AIR) {
    ItemMeta shop_itemmeta=achievement_item.getItemMeta();
    shop_itemmeta.setDisplayName(pli.getMessagesConfig().shop_item);
    shop_item.setItemMeta(shop_itemmeta);
  }
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    p.getInventory().addItem(classes_item);
  }
  if (pli.isAchievementGuiEnabled()) {
    p.getInventory().addItem(achievement_item);
  }
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    p.getInventory().addItem(shop_item);
  }
  p.updateInventory();
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    ItemStack custom_item0=new ItemStack(plugin.getConfig().getInt(""String_Node_Str""));
    if (custom_item0.getType() != Material.AIR) {
      ItemMeta custom_item0meta=custom_item0.getItemMeta();
      custom_item0meta.setDisplayName(plugin.getConfig().getString(""String_Node_Str""));
      custom_item0.setItemMeta(custom_item0meta);
    }
    p.getInventory().addItem(custom_item0);
    p.updateInventory();
  }
}","public static void giveLobbyItems(JavaPlugin plugin,Player p){
  PluginInstance pli=MinigamesAPI.getAPI().getPluginInstance(plugin);
  ItemStack classes_item=new ItemStack(plugin.getConfig().getInt(""String_Node_Str""));
  if (classes_item.getType() != Material.AIR) {
    ItemMeta cimeta=classes_item.getItemMeta();
    cimeta.setDisplayName(pli.getMessagesConfig().classes_item);
    classes_item.setItemMeta(cimeta);
  }
  if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
    ItemStack exit_item=new ItemStack(plugin.getConfig().getInt(""String_Node_Str""));
    if (exit_item.getType() != Material.AIR) {
      ItemMeta exitimeta=exit_item.getItemMeta();
      exitimeta.setDisplayName(pli.getMessagesConfig().exit_item);
      exit_item.setItemMeta(exitimeta);
    }
    p.getInventory().setItem(8,exit_item);
    p.updateInventory();
  }
  ItemStack achievement_item=new ItemStack(plugin.getConfig().getInt(""String_Node_Str""));
  if (achievement_item.getType() != Material.AIR) {
    ItemMeta achievement_itemmeta=achievement_item.getItemMeta();
    achievement_itemmeta.setDisplayName(pli.getMessagesConfig().achievement_item);
    achievement_item.setItemMeta(achievement_itemmeta);
  }
  ItemStack shop_item=new ItemStack(plugin.getConfig().getInt(""String_Node_Str""));
  if (shop_item.getType() != Material.AIR) {
    ItemMeta shop_itemmeta=shop_item.getItemMeta();
    shop_itemmeta.setDisplayName(pli.getMessagesConfig().shop_item);
    shop_item.setItemMeta(shop_itemmeta);
  }
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    p.getInventory().addItem(classes_item);
  }
  if (pli.isAchievementGuiEnabled()) {
    p.getInventory().addItem(achievement_item);
  }
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    p.getInventory().addItem(shop_item);
  }
  p.updateInventory();
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    ItemStack custom_item0=new ItemStack(plugin.getConfig().getInt(""String_Node_Str""));
    if (custom_item0.getType() != Material.AIR) {
      ItemMeta custom_item0meta=custom_item0.getItemMeta();
      custom_item0meta.setDisplayName(plugin.getConfig().getString(""String_Node_Str""));
      custom_item0.setItemMeta(custom_item0meta);
    }
    p.getInventory().addItem(custom_item0);
    p.updateInventory();
  }
}",0.9971671388101984
86068,"public boolean kitTakeMoney(Player p,String kit){
  if (!MinigamesAPI.getAPI().economy) {
    plugin.getLogger().warning(""String_Node_Str"");
    return false;
  }
  if (MinigamesAPI.economy) {
    if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
      ClassesConfig cl=MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig();
      if (!cl.getConfig().isSet(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ kit)) {
        cl.getConfig().set(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ kit,true);
        cl.saveConfig();
        int money=MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig().getConfig().getInt(""String_Node_Str"" + kit + ""String_Node_Str"");
        if (MinigamesAPI.getAPI().econ.getBalance(p.getName()) >= money) {
          EconomyResponse r=MinigamesAPI.getAPI().econ.withdrawPlayer(p.getName(),money);
          if (!r.transactionSuccess()) {
            p.sendMessage(String.format(""String_Node_Str"",r.errorMessage));
            return false;
          }
          p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_bought_kit.replaceAll(""String_Node_Str"",kit).replaceAll(""String_Node_Str"",Integer.toString(money)));
        }
 else {
          p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().not_enough_money);
          return false;
        }
      }
 else {
        return true;
      }
    }
 else {
      ClassesConfig config=MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig();
      int money=config.getConfig().getInt(""String_Node_Str"" + kit + ""String_Node_Str"");
      if (MinigamesAPI.getAPI().econ.getBalance(p.getName()) >= money) {
        EconomyResponse r=MinigamesAPI.getAPI().econ.withdrawPlayer(p.getName(),money);
        if (!r.transactionSuccess()) {
          p.sendMessage(String.format(""String_Node_Str"",r.errorMessage));
          return false;
        }
        p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_bought_kit.replaceAll(""String_Node_Str"",kit).replaceAll(""String_Node_Str"",Integer.toString(money)));
      }
 else {
        p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().not_enough_money);
        return false;
      }
    }
    return true;
  }
 else {
    return false;
  }
}","public boolean kitTakeMoney(Player p,String kit){
  if (!MinigamesAPI.getAPI().economy) {
    plugin.getLogger().warning(""String_Node_Str"");
    return false;
  }
  if (MinigamesAPI.economy) {
    if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
      ClassesConfig cl=MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig();
      if (!cl.getConfig().isSet(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ kit)) {
        int money=MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig().getConfig().getInt(""String_Node_Str"" + kit + ""String_Node_Str"");
        if (MinigamesAPI.getAPI().econ.getBalance(p.getName()) >= money) {
          EconomyResponse r=MinigamesAPI.getAPI().econ.withdrawPlayer(p.getName(),money);
          if (!r.transactionSuccess()) {
            p.sendMessage(String.format(""String_Node_Str"",r.errorMessage));
            return false;
          }
          cl.getConfig().set(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ kit,true);
          cl.saveConfig();
          p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_bought_kit.replaceAll(""String_Node_Str"",kit).replaceAll(""String_Node_Str"",Integer.toString(money)));
        }
 else {
          p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().not_enough_money);
          return false;
        }
      }
 else {
        return true;
      }
    }
 else {
      ClassesConfig config=MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig();
      int money=config.getConfig().getInt(""String_Node_Str"" + kit + ""String_Node_Str"");
      if (MinigamesAPI.getAPI().econ.getBalance(p.getName()) >= money) {
        EconomyResponse r=MinigamesAPI.getAPI().econ.withdrawPlayer(p.getName(),money);
        if (!r.transactionSuccess()) {
          p.sendMessage(String.format(""String_Node_Str"",r.errorMessage));
          return false;
        }
        p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_bought_kit.replaceAll(""String_Node_Str"",kit).replaceAll(""String_Node_Str"",Integer.toString(money)));
      }
 else {
        p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().not_enough_money);
        return false;
      }
    }
    return true;
  }
 else {
    return false;
  }
}",0.9495726495726496
86069,"@EventHandler public void onSignUse(PlayerInteractEvent event){
  if (event.hasBlock()) {
    if (event.getClickedBlock().getType() == Material.SIGN_POST || event.getClickedBlock().getType() == Material.WALL_SIGN) {
      if (event.getAction() != Action.RIGHT_CLICK_BLOCK) {
        return;
      }
      final Sign s=(Sign)event.getClickedBlock().getState();
      Arena arena=Util.getArenaBySignLocation(plugin,event.getClickedBlock().getLocation());
      if (arena != null) {
        Player p=event.getPlayer();
        if (!arena.containsPlayer(p.getName())) {
          arena.joinPlayerLobby(p.getName());
        }
 else {
          Util.sendMessage(plugin,p,pli.getMessagesConfig().you_already_are_in_arena.replaceAll(""String_Node_Str"",arena.getName()));
        }
      }
 else {
        Location l=Util.getComponentForArenaRaw(plugin,""String_Node_Str"",""String_Node_Str"");
        if (l != null) {
          if (l.getWorld() != null) {
            if (l.distance(s.getLocation()) < 1) {
              for (              Arena a : pli.getArenas()) {
                if (a.getArenaState() == ArenaState.JOIN || a.getArenaState() == ArenaState.STARTING) {
                  if (!a.containsPlayer(event.getPlayer().getName())) {
                    a.joinPlayerLobby(event.getPlayer().getName());
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
 else     if (event.getClickedBlock().getType() == Material.CHEST) {
      Player p=event.getPlayer();
      if (pli.global_players.containsKey(p.getName())) {
        Arena a=pli.global_players.get(p.getName());
        if (a.getArenaState() == ArenaState.INGAME) {
          a.getSmartReset().addChanged(event.getClickedBlock(),event.getClickedBlock().getType().equals(Material.CHEST));
        }
      }
    }
 else     if (event.getClickedBlock().getType() == Material.TNT) {
      Player p=event.getPlayer();
      if (pli.global_players.containsKey(p.getName())) {
        Arena a=pli.global_players.get(p.getName());
        if (a.getArenaState() == ArenaState.INGAME) {
          a.getSmartReset().addChanged(event.getClickedBlock(),false);
        }
      }
    }
 else     if (event.getPlayer().getItemInHand().getType() == Material.WATER_BUCKET || event.getPlayer().getItemInHand().getType() == Material.WATER || event.getPlayer().getItemInHand().getType() == Material.LAVA_BUCKET || event.getPlayer().getItemInHand().getType() == Material.LAVA) {
      Player p=event.getPlayer();
      if (pli.global_players.containsKey(p.getName())) {
        Arena a=pli.global_players.get(p.getName());
        if (a.getArenaState() == ArenaState.INGAME) {
          a.getSmartReset().addChanged(event.getClickedBlock(),event.getClickedBlock().getType().equals(Material.CHEST));
        }
      }
    }
  }
  if (pli.global_lost.containsKey(event.getPlayer().getName()) || pli.getSpectatorManager().isSpectating(event.getPlayer())) {
    event.setCancelled(true);
  }
  if (event.hasItem()) {
    final Player p=event.getPlayer();
    if (!pli.global_players.containsKey(p.getName())) {
      return;
    }
    if (event.getItem().getTypeId() == plugin.getConfig().getInt(""String_Node_Str"")) {
      pli.getClassesHandler().openGUI(p.getName());
      event.setCancelled(true);
    }
 else     if (event.getItem().getTypeId() == plugin.getConfig().getInt(""String_Node_Str"")) {
      if (pli.global_players.get(p.getName()).getArenaState() != ArenaState.INGAME) {
        pli.global_players.get(p.getName()).leavePlayer(p.getName(),false,false);
        event.setCancelled(true);
      }
 else {
        if (pli.global_lost.containsKey(p.getName())) {
          pli.global_players.get(p.getName()).leavePlayer(p.getName(),false,false);
          event.setCancelled(true);
        }
      }
    }
 else     if (event.getItem().getTypeId() == plugin.getConfig().getInt(""String_Node_Str"")) {
      if (pli.global_lost.containsKey(p.getName())) {
        pli.getSpectatorManager().openSpectatorGUI(p,pli.global_players.get(p.getName()));
        event.setCancelled(true);
      }
    }
 else     if (event.getItem().getTypeId() == plugin.getConfig().getInt(""String_Node_Str"")) {
      if (pli.isAchievementGuiEnabled()) {
        pli.getArenaAchievements().openGUI(p.getName(),false);
        event.setCancelled(true);
      }
    }
 else     if (event.getItem().getTypeId() == plugin.getConfig().getInt(""String_Node_Str"")) {
      if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
        Bukkit.dispatchCommand(Bukkit.getConsoleSender(),plugin.getConfig().getString(""String_Node_Str""));
      }
    }
  }
}","@EventHandler public void onSignUse(PlayerInteractEvent event){
  if (event.hasBlock()) {
    if (event.getClickedBlock().getType() == Material.SIGN_POST || event.getClickedBlock().getType() == Material.WALL_SIGN) {
      if (event.getAction() != Action.RIGHT_CLICK_BLOCK) {
        return;
      }
      final Sign s=(Sign)event.getClickedBlock().getState();
      Arena arena=Util.getArenaBySignLocation(plugin,event.getClickedBlock().getLocation());
      if (arena != null) {
        Player p=event.getPlayer();
        if (!arena.containsPlayer(p.getName())) {
          arena.joinPlayerLobby(p.getName());
        }
 else {
          Util.sendMessage(plugin,p,pli.getMessagesConfig().you_already_are_in_arena.replaceAll(""String_Node_Str"",arena.getName()));
        }
      }
 else {
        Location l=Util.getComponentForArenaRaw(plugin,""String_Node_Str"",""String_Node_Str"");
        if (l != null) {
          if (l.getWorld() != null) {
            if (l.distance(s.getLocation()) < 1) {
              for (              Arena a : pli.getArenas()) {
                if (a.getArenaState() == ArenaState.JOIN || a.getArenaState() == ArenaState.STARTING) {
                  if (!a.containsPlayer(event.getPlayer().getName())) {
                    a.joinPlayerLobby(event.getPlayer().getName());
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
 else     if (event.getClickedBlock().getType() == Material.CHEST) {
      Player p=event.getPlayer();
      if (pli.global_players.containsKey(p.getName())) {
        Arena a=pli.global_players.get(p.getName());
        if (a.getArenaState() == ArenaState.INGAME) {
          a.getSmartReset().addChanged(event.getClickedBlock(),event.getClickedBlock().getType().equals(Material.CHEST));
        }
      }
    }
 else     if (event.getClickedBlock().getType() == Material.TNT) {
      Player p=event.getPlayer();
      if (pli.global_players.containsKey(p.getName())) {
        Arena a=pli.global_players.get(p.getName());
        if (a.getArenaState() == ArenaState.INGAME) {
          a.getSmartReset().addChanged(event.getClickedBlock(),false);
        }
      }
    }
 else     if (event.getPlayer().getItemInHand().getType() == Material.WATER_BUCKET || event.getPlayer().getItemInHand().getType() == Material.WATER || event.getPlayer().getItemInHand().getType() == Material.LAVA_BUCKET || event.getPlayer().getItemInHand().getType() == Material.LAVA) {
      Player p=event.getPlayer();
      if (pli.global_players.containsKey(p.getName())) {
        Arena a=pli.global_players.get(p.getName());
        if (a.getArenaState() == ArenaState.INGAME) {
          a.getSmartReset().addChanged(event.getClickedBlock(),event.getClickedBlock().getType().equals(Material.CHEST));
        }
      }
    }
  }
  if (pli.global_lost.containsKey(event.getPlayer().getName()) || pli.getSpectatorManager().isSpectating(event.getPlayer())) {
    event.setCancelled(true);
  }
  if (event.hasItem()) {
    final Player p=event.getPlayer();
    if (!pli.global_players.containsKey(p.getName())) {
      return;
    }
    if (event.getItem().getTypeId() == plugin.getConfig().getInt(""String_Node_Str"")) {
      pli.getClassesHandler().openGUI(p.getName());
      event.setCancelled(true);
    }
 else     if (event.getItem().getTypeId() == plugin.getConfig().getInt(""String_Node_Str"")) {
      if (pli.global_players.get(p.getName()).getArenaState() != ArenaState.INGAME) {
        pli.global_players.get(p.getName()).leavePlayer(p.getName(),false,false);
        event.setCancelled(true);
      }
 else {
        if (pli.global_lost.containsKey(p.getName())) {
          pli.global_players.get(p.getName()).leavePlayer(p.getName(),false,false);
          event.setCancelled(true);
        }
      }
    }
 else     if (event.getItem().getTypeId() == plugin.getConfig().getInt(""String_Node_Str"")) {
      if (pli.global_lost.containsKey(p.getName())) {
        pli.getSpectatorManager().openSpectatorGUI(p,pli.global_players.get(p.getName()));
        event.setCancelled(true);
      }
    }
 else     if (event.getItem().getTypeId() == plugin.getConfig().getInt(""String_Node_Str"")) {
      if (pli.isAchievementGuiEnabled()) {
        pli.getArenaAchievements().openGUI(p.getName(),false);
        event.setCancelled(true);
      }
    }
 else     if (event.getItem().getTypeId() == plugin.getConfig().getInt(""String_Node_Str"")) {
      pli.getShopHandler().openGUI(p.getName());
      event.setCancelled(true);
    }
 else     if (event.getItem().getTypeId() == plugin.getConfig().getInt(""String_Node_Str"")) {
      if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
        Bukkit.dispatchCommand(Bukkit.getConsoleSender(),plugin.getConfig().getString(""String_Node_Str""));
      }
    }
  }
}",0.9809805579036348
86070,"public void openGUI(final String p){
  IconMenu iconm;
  int mincount=pli.getAClasses().keySet().size();
  if (lasticonm.containsKey(p)) {
    iconm=lasticonm.get(p);
  }
 else {
    iconm=new IconMenu(pli.getMessagesConfig().classes_item,(9 * plugin.getConfig().getInt(""String_Node_Str"") > mincount - 1) ? 9 * plugin.getConfig().getInt(""String_Node_Str"") : Math.round(mincount / 9) * 9 + 9,new IconMenu.OptionClickEventHandler(){
      @Override public void onOptionClick(      IconMenu.OptionClickEvent event){
        if (event.getPlayer().getName().equalsIgnoreCase(p)) {
          if (pli.global_players.containsKey(p)) {
            if (pli.getArenas().contains(pli.global_players.get(p))) {
              String d=event.getName();
              Player p=event.getPlayer();
            }
          }
        }
        event.setWillClose(true);
      }
    }
,plugin);
  }
  int c=0;
  for (  String ac : shopitems.keySet()) {
    ShopItem ac_=shopitems.get(ac);
    if (ac_.isEnabled()) {
      int slot=c;
      if (pli.getShopConfig().getConfig().isSet(""String_Node_Str"" + ac_.getInternalName() + ""String_Node_Str"")) {
        slot=pli.getShopConfig().getConfig().getInt(""String_Node_Str"" + ac_.getInternalName() + ""String_Node_Str"");
        if (slot < 0 || slot > iconm.getSize() - 1) {
          slot=c;
        }
      }
      iconm.setOption(slot,ac_.getIcon().clone(),ac_.getName(),pli.getShopConfig().getConfig().getString(""String_Node_Str"" + ac_.getInternalName() + ""String_Node_Str"").split(""String_Node_Str""));
      c++;
    }
  }
  iconm.open(Bukkit.getPlayerExact(p));
  lasticonm.put(p,iconm);
}","public void openGUI(final String p){
  IconMenu iconm;
  int mincount=pli.getAClasses().keySet().size();
  if (lasticonm.containsKey(p)) {
    iconm=lasticonm.get(p);
  }
 else {
    iconm=new IconMenu(pli.getMessagesConfig().shop_item,(9 * plugin.getConfig().getInt(""String_Node_Str"") > mincount - 1) ? 9 * plugin.getConfig().getInt(""String_Node_Str"") : Math.round(mincount / 9) * 9 + 9,new IconMenu.OptionClickEventHandler(){
      @Override public void onOptionClick(      IconMenu.OptionClickEvent event){
        if (event.getPlayer().getName().equalsIgnoreCase(p)) {
          if (pli.global_players.containsKey(p)) {
            if (pli.getArenas().contains(pli.global_players.get(p))) {
              String d=event.getName();
              Player p=event.getPlayer();
            }
          }
        }
        event.setWillClose(true);
      }
    }
,plugin);
  }
  int c=0;
  for (  String ac : shopitems.keySet()) {
    ShopItem ac_=shopitems.get(ac);
    if (ac_.isEnabled()) {
      int slot=c;
      if (pli.getShopConfig().getConfig().isSet(""String_Node_Str"" + ac_.getInternalName() + ""String_Node_Str"")) {
        slot=pli.getShopConfig().getConfig().getInt(""String_Node_Str"" + ac_.getInternalName() + ""String_Node_Str"");
        if (slot < 0 || slot > iconm.getSize() - 1) {
          slot=c;
        }
      }
      iconm.setOption(slot,ac_.getIcon().clone(),ac_.getName(),pli.getShopConfig().getConfig().getString(""String_Node_Str"" + ac_.getInternalName() + ""String_Node_Str"").split(""String_Node_Str""));
      c++;
    }
  }
  iconm.open(Bukkit.getPlayerExact(p));
  lasticonm.put(p,iconm);
}",0.9965933725611644
86071,"public static void init(JavaPlugin plugin,boolean custom){
  FileConfiguration config=plugin.getConfig();
  config.options().header(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  if (!custom) {
    config.addDefault(""String_Node_Str"",399);
    config.addDefault(""String_Node_Str"",152);
    config.addDefault(""String_Node_Str"",160);
    config.addDefault(""String_Node_Str"",345);
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",4);
    config.addDefault(""String_Node_Str"",2);
    config.addDefault(""String_Node_Str"",30);
    config.addDefault(""String_Node_Str"",30);
    config.addDefault(""String_Node_Str"",10);
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",10);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",5);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",1);
    config.addDefault(""String_Node_Str"",16);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",20);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",10);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",3);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",5);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",9);
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
  }
  config.options().copyDefaults(true);
  plugin.saveConfig();
}","public static void init(JavaPlugin plugin,boolean custom){
  FileConfiguration config=plugin.getConfig();
  config.options().header(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  if (!custom) {
    config.addDefault(""String_Node_Str"",399);
    config.addDefault(""String_Node_Str"",152);
    config.addDefault(""String_Node_Str"",160);
    config.addDefault(""String_Node_Str"",345);
    config.addDefault(""String_Node_Str"",388);
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",4);
    config.addDefault(""String_Node_Str"",2);
    config.addDefault(""String_Node_Str"",30);
    config.addDefault(""String_Node_Str"",30);
    config.addDefault(""String_Node_Str"",10);
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",10);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",5);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",1);
    config.addDefault(""String_Node_Str"",16);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",20);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",10);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",3);
    config.addDefault(""String_Node_Str"",3);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",5);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",true);
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",9);
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",false);
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
    config.addDefault(""String_Node_Str"",""String_Node_Str"");
  }
  config.options().copyDefaults(true);
  plugin.saveConfig();
}",0.987001733102253
86072,"public void init(){
  this.getConfig().options().header(""String_Node_Str"");
  HashMap<String,String> namecol=ArenaState.getAllStateNameColors();
  for (  String state : namecol.keySet()) {
    String color=namecol.get(state);
    this.getConfig().addDefault(""String_Node_Str"" + state.toLowerCase() + ""String_Node_Str"",color + ""String_Node_Str"");
    this.getConfig().addDefault(""String_Node_Str"" + state.toLowerCase() + ""String_Node_Str"",color + ""String_Node_Str"");
    this.getConfig().addDefault(""String_Node_Str"" + state.toLowerCase() + ""String_Node_Str"",color + ""String_Node_Str"");
    this.getConfig().addDefault(""String_Node_Str"" + state.toLowerCase() + ""String_Node_Str"",color + ""String_Node_Str"");
  }
  this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
  this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
  this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
  this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
  this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
  this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
  this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
  this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
  this.getConfig().addDefault(""String_Node_Str"",no_perm);
  this.getConfig().addDefault(""String_Node_Str"",successfully_reloaded);
  this.getConfig().addDefault(""String_Node_Str"",successfully_set);
  this.getConfig().addDefault(""String_Node_Str"",successfully_saved_arena);
  this.getConfig().addDefault(""String_Node_Str"",arena_invalid);
  this.getConfig().addDefault(""String_Node_Str"",failed_saving_arena);
  this.getConfig().addDefault(""String_Node_Str"",broadcast_players_left);
  this.getConfig().addDefault(""String_Node_Str"",broadcast_player_joined);
  this.getConfig().addDefault(""String_Node_Str"",player_died);
  this.getConfig().addDefault(""String_Node_Str"",arena_action);
  this.getConfig().addDefault(""String_Node_Str"",you_already_are_in_arena);
  this.getConfig().addDefault(""String_Node_Str"",you_joined_arena);
  this.getConfig().addDefault(""String_Node_Str"",not_in_arena);
  this.getConfig().addDefault(""String_Node_Str"",teleporting_to_arena_in);
  this.getConfig().addDefault(""String_Node_Str"",starting_in);
  this.getConfig().addDefault(""String_Node_Str"",failed_removing_arena);
  this.getConfig().addDefault(""String_Node_Str"",successfully_removed);
  this.getConfig().addDefault(""String_Node_Str"",failed_removing_component);
  this.getConfig().addDefault(""String_Node_Str"",joined_arena);
  this.getConfig().addDefault(""String_Node_Str"",you_won);
  this.getConfig().addDefault(""String_Node_Str"",you_lost);
  this.getConfig().addDefault(""String_Node_Str"",you_got_a_kill);
  this.getConfig().addDefault(""String_Node_Str"",player_was_killed_by);
  this.getConfig().addDefault(""String_Node_Str"",arena_not_initialized);
  this.getConfig().addDefault(""String_Node_Str"",attributelevel_increased);
  this.getConfig().addDefault(""String_Node_Str"",not_enough_credits);
  this.getConfig().addDefault(""String_Node_Str"",too_many_main_guns);
  this.getConfig().addDefault(""String_Node_Str"",successfully_set_main_gun);
  this.getConfig().addDefault(""String_Node_Str"",all_guns);
  this.getConfig().addDefault(""String_Node_Str"",arcade_next_minigame);
  this.getConfig().addDefault(""String_Node_Str"",arcade_joined_waiting);
  this.getConfig().addDefault(""String_Node_Str"",arcade_joined_spectator);
  this.getConfig().addDefault(""String_Node_Str"",arcade_new_round);
  this.getConfig().addDefault(""String_Node_Str"",arena_disabled);
  this.getConfig().addDefault(""String_Node_Str"",you_can_leave_with);
  this.getConfig().addDefault(""String_Node_Str"",no_perm_to_join_arena);
  this.getConfig().addDefault(""String_Node_Str"",set_kit);
  this.getConfig().addDefault(""String_Node_Str"",classes_item);
  this.getConfig().addDefault(""String_Node_Str"",achievement_item);
  this.getConfig().addDefault(""String_Node_Str"",spectator_item);
  this.getConfig().addDefault(""String_Node_Str"",server_broadcast_winner);
  this.getConfig().addDefault(""String_Node_Str"",exit_item);
  this.getConfig().addDefault(""String_Node_Str"",successfully_bought_kit);
  this.getConfig().addDefault(""String_Node_Str"",scoreboard_title);
  this.getConfig().addDefault(""String_Node_Str"",scoreboard_lobby_title);
  this.getConfig().addDefault(""String_Node_Str"",you_got_kicked_because_vip_joined);
  this.getConfig().addDefault(""String_Node_Str"",powerup_spawned);
  if (!this.getConfig().isSet(""String_Node_Str"")) {
    this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
    this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
    this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
    this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
    this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
    this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
    this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
    this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
    this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
  }
  this.getConfig().addDefault(""String_Node_Str"",you_got_the_achievement);
  this.getConfig().addDefault(""String_Node_Str"",game_started);
  this.getConfig().addDefault(""String_Node_Str"",author_of_the_map);
  this.getConfig().addDefault(""String_Node_Str"",description_of_the_map);
  this.getConfig().addDefault(""String_Node_Str"",not_enough_money);
  this.getConfig().addDefault(""String_Node_Str"",possible_kits);
  this.getConfig().addDefault(""String_Node_Str"",cancelled_starting);
  this.getConfig().addDefault(""String_Node_Str"",minigame_description);
  this.getConfig().options().copyDefaults(true);
  this.saveConfig();
  this.no_perm=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.successfully_reloaded=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.successfully_set=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.successfully_saved_arena=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.failed_saving_arena=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.arena_invalid=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.player_died=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.broadcast_players_left=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.broadcast_player_joined=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.arena_action=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.you_already_are_in_arena=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.you_joined_arena=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.not_in_arena=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.teleporting_to_arena_in=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.starting_in=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.failed_removing_arena=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.successfully_removed=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.failed_removing_component=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.joined_arena=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.you_won=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.you_lost=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.you_got_a_kill=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.player_was_killed_by=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.arena_not_initialized=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.arcade_next_minigame=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.arcade_new_round=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.arena_disabled=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.you_can_leave_with=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.arcade_joined_waiting=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.arcade_joined_spectator=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.no_perm_to_join_arena=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.set_kit=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.classes_item=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.achievement_item=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.spectator_item=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.server_broadcast_winner=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.exit_item=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.successfully_bought_kit=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.scoreboard_title=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.scoreboard_lobby_title=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.you_got_kicked_because_vip_joined=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.powerup_spawned=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.you_got_the_achievement=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.game_started=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.author_of_the_map=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.description_of_the_map=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.not_enough_money=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.possible_kits=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.cancelled_starting=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.minigame_description=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.attributelevel_increased=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.not_enough_credits=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.too_many_main_guns=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.successfully_set_main_gun=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.all_guns=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.getConfig().set(""String_Node_Str"",true);
  this.saveConfig();
}","public void init(){
  this.getConfig().options().header(""String_Node_Str"");
  HashMap<String,String> namecol=ArenaState.getAllStateNameColors();
  for (  String state : namecol.keySet()) {
    String color=namecol.get(state);
    this.getConfig().addDefault(""String_Node_Str"" + state.toLowerCase() + ""String_Node_Str"",color + ""String_Node_Str"");
    this.getConfig().addDefault(""String_Node_Str"" + state.toLowerCase() + ""String_Node_Str"",color + ""String_Node_Str"");
    this.getConfig().addDefault(""String_Node_Str"" + state.toLowerCase() + ""String_Node_Str"",color + ""String_Node_Str"");
    this.getConfig().addDefault(""String_Node_Str"" + state.toLowerCase() + ""String_Node_Str"",color + ""String_Node_Str"");
  }
  this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
  this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
  this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
  this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
  this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
  this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
  this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
  this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
  this.getConfig().addDefault(""String_Node_Str"",no_perm);
  this.getConfig().addDefault(""String_Node_Str"",successfully_reloaded);
  this.getConfig().addDefault(""String_Node_Str"",successfully_set);
  this.getConfig().addDefault(""String_Node_Str"",successfully_saved_arena);
  this.getConfig().addDefault(""String_Node_Str"",arena_invalid);
  this.getConfig().addDefault(""String_Node_Str"",failed_saving_arena);
  this.getConfig().addDefault(""String_Node_Str"",broadcast_players_left);
  this.getConfig().addDefault(""String_Node_Str"",broadcast_player_joined);
  this.getConfig().addDefault(""String_Node_Str"",player_died);
  this.getConfig().addDefault(""String_Node_Str"",arena_action);
  this.getConfig().addDefault(""String_Node_Str"",you_already_are_in_arena);
  this.getConfig().addDefault(""String_Node_Str"",you_joined_arena);
  this.getConfig().addDefault(""String_Node_Str"",not_in_arena);
  this.getConfig().addDefault(""String_Node_Str"",teleporting_to_arena_in);
  this.getConfig().addDefault(""String_Node_Str"",starting_in);
  this.getConfig().addDefault(""String_Node_Str"",failed_removing_arena);
  this.getConfig().addDefault(""String_Node_Str"",successfully_removed);
  this.getConfig().addDefault(""String_Node_Str"",failed_removing_component);
  this.getConfig().addDefault(""String_Node_Str"",joined_arena);
  this.getConfig().addDefault(""String_Node_Str"",you_won);
  this.getConfig().addDefault(""String_Node_Str"",you_lost);
  this.getConfig().addDefault(""String_Node_Str"",you_got_a_kill);
  this.getConfig().addDefault(""String_Node_Str"",player_was_killed_by);
  this.getConfig().addDefault(""String_Node_Str"",arena_not_initialized);
  this.getConfig().addDefault(""String_Node_Str"",attributelevel_increased);
  this.getConfig().addDefault(""String_Node_Str"",not_enough_credits);
  this.getConfig().addDefault(""String_Node_Str"",too_many_main_guns);
  this.getConfig().addDefault(""String_Node_Str"",successfully_set_main_gun);
  this.getConfig().addDefault(""String_Node_Str"",all_guns);
  this.getConfig().addDefault(""String_Node_Str"",arcade_next_minigame);
  this.getConfig().addDefault(""String_Node_Str"",arcade_joined_waiting);
  this.getConfig().addDefault(""String_Node_Str"",arcade_joined_spectator);
  this.getConfig().addDefault(""String_Node_Str"",arcade_new_round);
  this.getConfig().addDefault(""String_Node_Str"",arena_disabled);
  this.getConfig().addDefault(""String_Node_Str"",you_can_leave_with);
  this.getConfig().addDefault(""String_Node_Str"",no_perm_to_join_arena);
  this.getConfig().addDefault(""String_Node_Str"",set_kit);
  this.getConfig().addDefault(""String_Node_Str"",classes_item);
  this.getConfig().addDefault(""String_Node_Str"",achievement_item);
  this.getConfig().addDefault(""String_Node_Str"",shop_item);
  this.getConfig().addDefault(""String_Node_Str"",spectator_item);
  this.getConfig().addDefault(""String_Node_Str"",server_broadcast_winner);
  this.getConfig().addDefault(""String_Node_Str"",exit_item);
  this.getConfig().addDefault(""String_Node_Str"",successfully_bought_kit);
  this.getConfig().addDefault(""String_Node_Str"",scoreboard_title);
  this.getConfig().addDefault(""String_Node_Str"",scoreboard_lobby_title);
  this.getConfig().addDefault(""String_Node_Str"",you_got_kicked_because_vip_joined);
  this.getConfig().addDefault(""String_Node_Str"",powerup_spawned);
  if (!this.getConfig().isSet(""String_Node_Str"")) {
    this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
    this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
    this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
    this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
    this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
    this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
    this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
    this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
    this.getConfig().addDefault(""String_Node_Str"",""String_Node_Str"");
  }
  this.getConfig().addDefault(""String_Node_Str"",you_got_the_achievement);
  this.getConfig().addDefault(""String_Node_Str"",game_started);
  this.getConfig().addDefault(""String_Node_Str"",author_of_the_map);
  this.getConfig().addDefault(""String_Node_Str"",description_of_the_map);
  this.getConfig().addDefault(""String_Node_Str"",not_enough_money);
  this.getConfig().addDefault(""String_Node_Str"",possible_kits);
  this.getConfig().addDefault(""String_Node_Str"",cancelled_starting);
  this.getConfig().addDefault(""String_Node_Str"",minigame_description);
  this.getConfig().options().copyDefaults(true);
  this.saveConfig();
  this.no_perm=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.successfully_reloaded=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.successfully_set=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.successfully_saved_arena=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.failed_saving_arena=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.arena_invalid=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.player_died=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.broadcast_players_left=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.broadcast_player_joined=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.arena_action=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.you_already_are_in_arena=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.you_joined_arena=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.not_in_arena=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.teleporting_to_arena_in=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.starting_in=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.failed_removing_arena=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.successfully_removed=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.failed_removing_component=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.joined_arena=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.you_won=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.you_lost=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.you_got_a_kill=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.player_was_killed_by=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.arena_not_initialized=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.arcade_next_minigame=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.arcade_new_round=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.arena_disabled=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.you_can_leave_with=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.arcade_joined_waiting=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.arcade_joined_spectator=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.no_perm_to_join_arena=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.set_kit=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.classes_item=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.achievement_item=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.shop_item=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.spectator_item=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.server_broadcast_winner=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.exit_item=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.successfully_bought_kit=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.scoreboard_title=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.scoreboard_lobby_title=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.you_got_kicked_because_vip_joined=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.powerup_spawned=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.you_got_the_achievement=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.game_started=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.author_of_the_map=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.description_of_the_map=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.not_enough_money=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.possible_kits=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.cancelled_starting=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.minigame_description=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.attributelevel_increased=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.not_enough_credits=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.too_many_main_guns=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.successfully_set_main_gun=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.all_guns=ChatColor.translateAlternateColorCodes('&',getConfig().getString(""String_Node_Str""));
  this.getConfig().set(""String_Node_Str"",true);
  this.saveConfig();
}",0.9872661661620142
86073,"@SuppressWarnings(""String_Node_Str"") public static ArrayList<ItemStack> parseItems(String rawitems){
  ArrayList<ItemStack> ret=new ArrayList<ItemStack>();
  try {
    String[] a=rawitems.split(""String_Node_Str"");
    for (    String b : a) {
      if (b.startsWith(""String_Node_Str"")) {
        String[] guntype=b.split(""String_Node_Str"");
        if (guntype.length > 1) {
          if (guntype[1].length() > 1) {
            ItemStack gun=new ItemStack(Material.WOOD_HOE);
            ItemMeta gunmeta=gun.getItemMeta();
            gunmeta.setDisplayName(b);
            gun.setItemMeta(gunmeta);
            ret.add(gun);
          }
        }
        continue;
      }
      int nameindex=b.indexOf(""String_Node_Str"");
      String[] c=b.split(""String_Node_Str"");
      String itemid=c[0];
      String itemdata=""String_Node_Str"";
      String[] enchantments_=itemid.split(""String_Node_Str"");
      String[] enchantments=new String[enchantments_.length - 1];
      if (enchantments_.length > 1) {
        for (int i=1; i < enchantments_.length; i++) {
          enchantments[i - 1]=enchantments_[i];
        }
      }
      itemid=enchantments_[0];
      String[] d=itemid.split(""String_Node_Str"");
      if (d.length > 1) {
        itemid=d[0];
        itemdata=d[1];
      }
      String itemamount=c[1];
      if (nameindex > -1) {
        itemamount=c[1].substring(0,c[1].indexOf(""String_Node_Str""));
      }
      ItemStack nitem=new ItemStack(Integer.parseInt(itemid),Integer.parseInt(itemamount),(short)Integer.parseInt(itemdata));
      ItemMeta m=nitem.getItemMeta();
      for (      String enchant : enchantments) {
        String[] e=enchant.split(""String_Node_Str"");
        String ench=e[0];
        String lv=""String_Node_Str"";
        if (e.length > 1) {
          lv=e[1];
        }
        if (Enchantment.getByName(ench) != null) {
          m.addEnchant(Enchantment.getByName(ench),Integer.parseInt(lv),true);
        }
      }
      if (nameindex > -1) {
        String namelore=b.substring(nameindex + 1);
        String name=""String_Node_Str"";
        String lore=""String_Node_Str"";
        int i=namelore.indexOf(""String_Node_Str"");
        if (i > -1) {
          name=namelore.substring(0,i);
          lore=namelore.substring(i + 1);
        }
 else {
          name=namelore;
        }
        m.setDisplayName(name);
        m.setLore(Arrays.asList(lore));
      }
      nitem.setItemMeta(m);
      ret.add(nitem);
    }
    if (ret == null) {
      MinigamesAPI.getAPI().getLogger().severe(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    ret.add(new ItemStack(Material.STAINED_GLASS_PANE));
    System.out.println(""String_Node_Str"" + e.getMessage() + ""String_Node_Str""+ e.getStackTrace()[1].getLineNumber()+ ""String_Node_Str""+ e.getStackTrace()[0].getLineNumber());
    ItemStack rose=new ItemStack(Material.RED_ROSE);
    ItemMeta im=rose.getItemMeta();
    im.setDisplayName(ChatColor.RED + ""String_Node_Str"");
    rose.setItemMeta(im);
    ret.add(rose);
  }
  return ret;
}","public static ArrayList<ItemStack> parseItems(String rawitems){
  ArrayList<ItemStack> ret=new ArrayList<ItemStack>();
  try {
    String[] a=rawitems.split(""String_Node_Str"");
    for (    String b : a) {
      if (b.startsWith(""String_Node_Str"")) {
        String[] guntype=b.split(""String_Node_Str"");
        if (guntype.length > 1) {
          if (guntype[1].length() > 1) {
            ItemStack gun=new ItemStack(Material.WOOD_HOE);
            ItemMeta gunmeta=gun.getItemMeta();
            gunmeta.setDisplayName(b);
            gun.setItemMeta(gunmeta);
            ret.add(gun);
          }
        }
        continue;
      }
      int nameindex=b.indexOf(""String_Node_Str"");
      String[] c=b.split(""String_Node_Str"");
      String itemid=c[0];
      String itemdata=""String_Node_Str"";
      String[] enchantments_=itemid.split(""String_Node_Str"");
      String[] enchantments=new String[enchantments_.length - 1];
      if (enchantments_.length > 1) {
        for (int i=1; i < enchantments_.length; i++) {
          enchantments[i - 1]=enchantments_[i];
        }
      }
      itemid=enchantments_[0];
      String[] d=itemid.split(""String_Node_Str"");
      if (d.length > 1) {
        itemid=d[0];
        itemdata=d[1];
      }
      String itemamount=c[1];
      if (nameindex > -1) {
        itemamount=c[1].substring(0,c[1].indexOf(""String_Node_Str""));
      }
      if (Integer.parseInt(itemid) < 1) {
        System.out.println(""String_Node_Str"" + itemid);
        continue;
      }
      ItemStack nitem=new ItemStack(Integer.parseInt(itemid),Integer.parseInt(itemamount),(short)Integer.parseInt(itemdata));
      ItemMeta m=nitem.getItemMeta();
      for (      String enchant : enchantments) {
        String[] e=enchant.split(""String_Node_Str"");
        String ench=e[0];
        String lv=""String_Node_Str"";
        if (e.length > 1) {
          lv=e[1];
        }
        if (Enchantment.getByName(ench) != null) {
          m.addEnchant(Enchantment.getByName(ench),Integer.parseInt(lv),true);
        }
      }
      if (nameindex > -1) {
        String namelore=b.substring(nameindex + 1);
        String name=""String_Node_Str"";
        String lore=""String_Node_Str"";
        int i=namelore.indexOf(""String_Node_Str"");
        if (i > -1) {
          name=namelore.substring(0,i);
          lore=namelore.substring(i + 1);
        }
 else {
          name=namelore;
        }
        m.setDisplayName(name);
        m.setLore(Arrays.asList(lore));
      }
      nitem.setItemMeta(m);
      ret.add(nitem);
    }
    if (ret == null || ret.size() < 1) {
      MinigamesAPI.getAPI().getLogger().severe(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    ret.add(new ItemStack(Material.STAINED_GLASS_PANE));
    System.out.println(""String_Node_Str"" + e.getMessage() + ""String_Node_Str""+ e.getStackTrace()[1].getLineNumber()+ ""String_Node_Str""+ e.getStackTrace()[0].getLineNumber());
    ItemStack rose=new ItemStack(Material.RED_ROSE);
    ItemMeta im=rose.getItemMeta();
    im.setDisplayName(ChatColor.RED + ""String_Node_Str"");
    rose.setItemMeta(im);
    ret.add(rose);
  }
  return ret;
}",0.9709084999187388
86074,"public static void giveLobbyItems(JavaPlugin plugin,Player p){
  PluginInstance pli=MinigamesAPI.getAPI().getPluginInstance(plugin);
  ItemStack classes_item=new ItemStack(plugin.getConfig().getInt(""String_Node_Str""));
  if (classes_item.getType() != Material.AIR) {
    ItemMeta cimeta=classes_item.getItemMeta();
    cimeta.setDisplayName(pli.getMessagesConfig().classes_item);
    classes_item.setItemMeta(cimeta);
  }
  if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
    ItemStack exit_item=new ItemStack(plugin.getConfig().getInt(""String_Node_Str""));
    if (exit_item.getType() != Material.AIR) {
      ItemMeta exitimeta=exit_item.getItemMeta();
      exitimeta.setDisplayName(pli.getMessagesConfig().exit_item);
      exit_item.setItemMeta(exitimeta);
    }
    p.getInventory().setItem(8,exit_item);
    p.updateInventory();
  }
  ItemStack achievement_item=new ItemStack(plugin.getConfig().getInt(""String_Node_Str""));
  if (achievement_item.getType() != Material.AIR) {
    ItemMeta achievement_itemmeta=achievement_item.getItemMeta();
    achievement_itemmeta.setDisplayName(pli.getMessagesConfig().achievement_item);
    achievement_item.setItemMeta(achievement_itemmeta);
  }
  p.getInventory().addItem(classes_item);
  if (pli.isAchievementGuiEnabled()) {
    p.getInventory().addItem(achievement_item);
  }
  p.updateInventory();
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    ItemStack custom_item0=new ItemStack(plugin.getConfig().getInt(""String_Node_Str""));
    if (custom_item0.getType() != Material.AIR) {
      ItemMeta custom_item0meta=custom_item0.getItemMeta();
      custom_item0meta.setDisplayName(plugin.getConfig().getString(""String_Node_Str""));
      custom_item0.setItemMeta(custom_item0meta);
    }
    p.getInventory().addItem(custom_item0);
    p.updateInventory();
  }
}","public static void giveLobbyItems(JavaPlugin plugin,Player p){
  PluginInstance pli=MinigamesAPI.getAPI().getPluginInstance(plugin);
  ItemStack classes_item=new ItemStack(plugin.getConfig().getInt(""String_Node_Str""));
  if (classes_item.getType() != Material.AIR) {
    ItemMeta cimeta=classes_item.getItemMeta();
    cimeta.setDisplayName(pli.getMessagesConfig().classes_item);
    classes_item.setItemMeta(cimeta);
  }
  if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
    ItemStack exit_item=new ItemStack(plugin.getConfig().getInt(""String_Node_Str""));
    if (exit_item.getType() != Material.AIR) {
      ItemMeta exitimeta=exit_item.getItemMeta();
      exitimeta.setDisplayName(pli.getMessagesConfig().exit_item);
      exit_item.setItemMeta(exitimeta);
    }
    p.getInventory().setItem(8,exit_item);
    p.updateInventory();
  }
  ItemStack achievement_item=new ItemStack(plugin.getConfig().getInt(""String_Node_Str""));
  if (achievement_item.getType() != Material.AIR) {
    ItemMeta achievement_itemmeta=achievement_item.getItemMeta();
    achievement_itemmeta.setDisplayName(pli.getMessagesConfig().achievement_item);
    achievement_item.setItemMeta(achievement_itemmeta);
  }
  ItemStack shop_item=new ItemStack(plugin.getConfig().getInt(""String_Node_Str""));
  if (shop_item.getType() != Material.AIR) {
    ItemMeta shop_itemmeta=achievement_item.getItemMeta();
    shop_itemmeta.setDisplayName(pli.getMessagesConfig().shop_item);
    shop_item.setItemMeta(shop_itemmeta);
  }
  p.getInventory().addItem(classes_item);
  if (pli.isAchievementGuiEnabled()) {
    p.getInventory().addItem(achievement_item);
  }
  p.getInventory().addItem(shop_item);
  p.updateInventory();
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    ItemStack custom_item0=new ItemStack(plugin.getConfig().getInt(""String_Node_Str""));
    if (custom_item0.getType() != Material.AIR) {
      ItemMeta custom_item0meta=custom_item0.getItemMeta();
      custom_item0meta.setDisplayName(plugin.getConfig().getString(""String_Node_Str""));
      custom_item0.setItemMeta(custom_item0meta);
    }
    p.getInventory().addItem(custom_item0);
    p.updateInventory();
  }
}",0.9147286821705426
86075,"@EventHandler public void onBlockBreak(BlockBreakEvent event){
  Player p=event.getPlayer();
  if (pli.global_players.containsKey(p.getName())) {
    Arena a=pli.global_players.get(p.getName());
    if (a.getArenaState() != ArenaState.INGAME || pli.global_lost.containsKey(p.getName())) {
      event.setCancelled(true);
      return;
    }
    a.getSmartReset().addChanged(event.getBlock(),event.getBlock().getType().equals(Material.CHEST));
    if (event.getBlock().getType() == Material.DOUBLE_PLANT) {
      a.getSmartReset().addChanged(event.getBlock().getLocation().clone().add(0D,-1D,0D).getBlock(),event.getBlock().getType().equals(Material.CHEST));
      a.getSmartReset().addChanged(event.getBlock().getLocation().clone().add(0D,+1D,0D).getBlock(),event.getBlock().getType().equals(Material.CHEST));
    }
  }
  if (event.getBlock().getType() == Material.SIGN_POST || event.getBlock().getType() == Material.WALL_SIGN) {
    Arena arena=Util.getArenaBySignLocation(plugin,event.getBlock().getLocation());
    if (arena != null) {
      pli.getArenasConfig().getConfig().set(""String_Node_Str"" + arena.getName() + ""String_Node_Str"",null);
      pli.getArenasConfig().saveConfig();
    }
  }
}","@EventHandler public void onBlockBreak(BlockBreakEvent event){
  Player p=event.getPlayer();
  if (pli.global_players.containsKey(p.getName())) {
    Arena a=pli.global_players.get(p.getName());
    if (a.getArenaState() != ArenaState.INGAME || pli.global_lost.containsKey(p.getName())) {
      event.setCancelled(true);
      return;
    }
    if (pli.getSpectatorManager().isSpectating(p)) {
      event.setCancelled(true);
      return;
    }
    a.getSmartReset().addChanged(event.getBlock(),event.getBlock().getType().equals(Material.CHEST));
    if (event.getBlock().getType() == Material.DOUBLE_PLANT) {
      a.getSmartReset().addChanged(event.getBlock().getLocation().clone().add(0D,-1D,0D).getBlock(),event.getBlock().getType().equals(Material.CHEST));
      a.getSmartReset().addChanged(event.getBlock().getLocation().clone().add(0D,+1D,0D).getBlock(),event.getBlock().getType().equals(Material.CHEST));
    }
  }
  if (event.getBlock().getType() == Material.SIGN_POST || event.getBlock().getType() == Material.WALL_SIGN) {
    Arena arena=Util.getArenaBySignLocation(plugin,event.getBlock().getLocation());
    if (arena != null) {
      pli.getArenasConfig().getConfig().set(""String_Node_Str"" + arena.getName() + ""String_Node_Str"",null);
      pli.getArenasConfig().saveConfig();
    }
  }
}",0.958050339592489
86076,"@EventHandler public void onEntityDamageByEntity(EntityDamageByEntityEvent event){
  if (event.getEntity() instanceof Player) {
    Player p=(Player)event.getEntity();
    Player attacker=null;
    if (event.getDamager() instanceof Projectile) {
      Projectile projectile=(Projectile)event.getDamager();
      if (projectile.getShooter() instanceof Player) {
        attacker=(Player)projectile.getShooter();
      }
    }
 else     if (event.getDamager() instanceof Player) {
      attacker=(Player)event.getDamager();
    }
 else {
      return;
    }
    if (p != null && attacker != null) {
      if (pli.global_players.containsKey(p.getName()) && pli.global_players.containsKey(attacker.getName())) {
        if (pli.global_lost.containsKey(attacker.getName())) {
          event.setCancelled(true);
          return;
        }
        Arena a=(Arena)pli.global_players.get(p.getName());
        if (a.getArenaState() == ArenaState.INGAME) {
          a.lastdamager.put(p.getName(),attacker.getName());
        }
      }
    }
  }
}","@EventHandler public void onEntityDamageByEntity(EntityDamageByEntityEvent event){
  if (event.getEntity() instanceof Player) {
    Player p=(Player)event.getEntity();
    Player attacker=null;
    if (event.getDamager() instanceof Projectile) {
      Projectile projectile=(Projectile)event.getDamager();
      if (projectile.getShooter() instanceof Player) {
        attacker=(Player)projectile.getShooter();
      }
    }
 else     if (event.getDamager() instanceof Player) {
      attacker=(Player)event.getDamager();
    }
 else {
      return;
    }
    if (p != null && attacker != null) {
      if (pli.global_players.containsKey(p.getName()) && pli.global_players.containsKey(attacker.getName())) {
        if (pli.global_lost.containsKey(attacker.getName()) || pli.getSpectatorManager().isSpectating(p)) {
          event.setCancelled(true);
          return;
        }
        Arena a=(Arena)pli.global_players.get(p.getName());
        if (a.getArenaState() == ArenaState.INGAME) {
          a.lastdamager.put(p.getName(),attacker.getName());
        }
      }
    }
  }
}",0.9788035798398492
86077,"@EventHandler public void onBlockPlace(BlockPlaceEvent event){
  Player p=event.getPlayer();
  if (pli.global_players.containsKey(p.getName())) {
    Arena a=pli.global_players.get(p.getName());
    if (a.getArenaState() != ArenaState.INGAME) {
      event.setCancelled(true);
      return;
    }
    a.getSmartReset().addChanged(event.getBlock().getLocation());
  }
  if (pli.getStatsInstance().skullsetup.contains(p.getName())) {
    if (event.getBlock().getType() == Material.SKULL_ITEM || event.getBlock().getType() == Material.SKULL) {
      if (event.getItemInHand().hasItemMeta()) {
        pli.getStatsInstance().saveSkull(event.getBlock().getLocation(),Integer.parseInt(event.getItemInHand().getItemMeta().getDisplayName()));
        pli.getStatsInstance().skullsetup.remove(p.getName());
      }
    }
  }
}","@EventHandler public void onBlockPlace(BlockPlaceEvent event){
  Player p=event.getPlayer();
  if (pli.global_players.containsKey(p.getName())) {
    Arena a=pli.global_players.get(p.getName());
    if (a.getArenaState() != ArenaState.INGAME || pli.global_lost.containsKey(p.getName()) || pli.getSpectatorManager().isSpectating(p)) {
      event.setCancelled(true);
      return;
    }
    a.getSmartReset().addChanged(event.getBlock().getLocation());
  }
  if (pli.getStatsInstance().skullsetup.contains(p.getName())) {
    if (event.getBlock().getType() == Material.SKULL_ITEM || event.getBlock().getType() == Material.SKULL) {
      if (event.getItemInHand().hasItemMeta()) {
        pli.getStatsInstance().saveSkull(event.getBlock().getLocation(),Integer.parseInt(event.getItemInHand().getItemMeta().getDisplayName()));
        pli.getStatsInstance().skullsetup.remove(p.getName());
      }
    }
  }
}",0.9483459082994776
86078,"@EventHandler public void onInventoryClick(InventoryClickEvent event){
  if (event.getWhoClicked() instanceof Player) {
    Player p=(Player)event.getWhoClicked();
    if (pli.global_players.containsKey(p.getName())) {
      Arena a=pli.global_players.get(p.getName());
      if (a.getArenaState() == ArenaState.STARTING && a.getArcadeInstance() != null) {
        event.setCancelled(true);
      }
    }
  }
}","@EventHandler public void onInventoryClick(InventoryClickEvent event){
  if (event.getWhoClicked() instanceof Player) {
    Player p=(Player)event.getWhoClicked();
    if (pli.global_players.containsKey(p.getName())) {
      Arena a=pli.global_players.get(p.getName());
      if (a != null) {
        if (a.getArenaState() == ArenaState.STARTING && a.getArcadeInstance() != null) {
          event.setCancelled(true);
        }
      }
    }
  }
}",0.9568261376896148
86079,"@EventHandler public void onEntityDamage(EntityDamageEvent event){
  if (event.getEntity() instanceof Player) {
    Player p=(Player)event.getEntity();
    if (event.getCause().equals(DamageCause.ENTITY_ATTACK)) {
      if (pli.global_players.containsKey(p.getName())) {
        Arena a=pli.global_players.get(p.getName());
        if (a.getArenaState() != ArenaState.INGAME && a.getArcadeInstance() != null && !a.getAlwaysPvP()) {
          event.setCancelled(true);
        }
 else {
          if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
            Effects.playBloodEffect(p);
          }
        }
      }
      if (pli.global_lost.containsKey(p.getName())) {
        event.setCancelled(true);
      }
    }
 else     if (event.getCause().equals(DamageCause.FALL)) {
      if (pli.global_players.containsKey(p.getName())) {
        Arena a=pli.global_players.get(p.getName());
        if (a.getArenaState() != ArenaState.INGAME && a.getArcadeInstance() != null) {
          event.setCancelled(true);
        }
      }
    }
  }
}","@EventHandler public void onEntityDamage(EntityDamageEvent event){
  if (event.getEntity() instanceof Player) {
    Player p=(Player)event.getEntity();
    if (event.getCause().equals(DamageCause.ENTITY_ATTACK)) {
      if (pli.global_players.containsKey(p.getName())) {
        Arena a=pli.global_players.get(p.getName());
        if (a.getArenaState() != ArenaState.INGAME && a.getArcadeInstance() != null && !a.getAlwaysPvP()) {
          event.setCancelled(true);
        }
 else {
          if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
            Effects.playBloodEffect(p);
          }
        }
      }
      if (pli.global_lost.containsKey(p.getName()) || pli.getSpectatorManager().isSpectating(p)) {
        event.setCancelled(true);
      }
    }
 else     if (event.getCause().equals(DamageCause.FALL)) {
      if (pli.global_players.containsKey(p.getName())) {
        Arena a=pli.global_players.get(p.getName());
        if (a.getArenaState() != ArenaState.INGAME && a.getArcadeInstance() != null) {
          event.setCancelled(true);
        }
      }
    }
  }
}",0.9789227166276346
86080,"@EventHandler public void onPlayerDrop(PlayerDropItemEvent event){
  if (pli.global_players.containsKey(event.getPlayer().getName())) {
    Arena a=pli.global_players.get(event.getPlayer().getName());
    if (a.getArenaState() != ArenaState.INGAME && a.getArcadeInstance() != null) {
      event.setCancelled(true);
    }
  }
}","@EventHandler public void onPlayerDrop(PlayerDropItemEvent event){
  if (pli.global_players.containsKey(event.getPlayer().getName())) {
    Arena a=pli.global_players.get(event.getPlayer().getName());
    if (a != null) {
      if (a.getArenaState() != ArenaState.INGAME && a.getArcadeInstance() != null) {
        event.setCancelled(true);
      }
    }
  }
}",0.9519650655021834
86081,"@EventHandler public void onPlayerPickupItem(PlayerPickupItemEvent event){
  if (pli.global_lost.containsKey(event.getPlayer().getName())) {
    Arena a=pli.global_lost.get(event.getPlayer().getName());
    if (a.getArenaState() != ArenaState.INGAME && a.getArcadeInstance() != null) {
      event.setCancelled(true);
    }
  }
}","@EventHandler public void onPlayerPickupItem(PlayerPickupItemEvent event){
  if (pli.global_lost.containsKey(event.getPlayer().getName()) || pli.getSpectatorManager().isSpectating(event.getPlayer())) {
    Arena a=pli.global_lost.get(event.getPlayer().getName());
    if (a != null) {
      if (a.getArenaState() != ArenaState.INGAME && a.getArcadeInstance() != null) {
        event.setCancelled(true);
      }
    }
  }
}",0.875
86082,"public void leaveArcade(final String playername){
  if (players.contains(playername)) {
    players.remove(playername);
  }
  if (arena.containsPlayer(playername)) {
    arena.removePlayer(playername);
  }
  if (minigames.get(currentindex).getArenas().size() > 0) {
    if (minigames.get(currentindex).getArenas().get(0).containsPlayer(playername)) {
      minigames.get(currentindex).getArenas().get(0).leavePlayer(playername,false,false);
    }
  }
  Bukkit.getScheduler().runTaskLater(MinigamesAPI.getAPI(),new Runnable(){
    public void run(){
      Player p=Bukkit.getPlayer(playername);
      if (p != null) {
        Util.teleportPlayerFixed(p,arena.getMainLobbyTemp());
        MinigamesAPI.getAPI().pinstances.get(plugin).getSpectatorManager().setSpectate(p,false);
        if (!p.isOp()) {
          p.setFlying(false);
          p.setAllowFlight(false);
        }
      }
    }
  }
,20L);
  clean();
  if (players.size() < 2) {
    stopArcade(false);
  }
}","public void leaveArcade(final String playername,boolean endOfGame){
  final PluginInstance pli=MinigamesAPI.getAPI().pinstances.get(plugin);
  if (players.contains(playername)) {
    players.remove(playername);
  }
  if (arena.containsPlayer(playername)) {
    arena.removePlayer(playername);
  }
  if (minigames.get(currentindex).getArenas().size() > 0) {
    if (minigames.get(currentindex).getArenas().get(0).containsPlayer(playername)) {
      minigames.get(currentindex).getArenas().get(0).leavePlayer(playername,false,false);
    }
  }
  Bukkit.getScheduler().runTaskLater(MinigamesAPI.getAPI(),new Runnable(){
    public void run(){
      Player p=Bukkit.getPlayer(playername);
      if (p != null) {
        Util.teleportPlayerFixed(p,arena.getMainLobbyTemp());
        pli.getSpectatorManager().setSpectate(p,false);
        if (!p.isOp()) {
          p.setFlying(false);
          p.setAllowFlight(false);
        }
      }
    }
  }
,20L);
  clean();
  if (pli.global_players.containsKey(playername)) {
    pli.global_players.remove(playername);
  }
  if (pli.global_lost.containsKey(playername)) {
    pli.global_lost.remove(playername);
  }
  if (currentarena != null) {
    PluginInstance pli_=MinigamesAPI.getAPI().pinstances.get(currentarena.getPlugin());
    if (pli_ != null) {
      if (pli_.global_players.containsKey(playername)) {
        pli_.global_players.remove(playername);
      }
      if (pli_.global_lost.containsKey(playername)) {
        pli_.global_lost.remove(playername);
      }
    }
  }
  if (endOfGame) {
    if (players.size() < 2) {
      stopArcade(false);
    }
  }
}",0.2690965490500194
86083,"public void joinArcade(String playername){
  PluginInstance pli=MinigamesAPI.getAPI().pinstances.get(plugin);
  if (!players.contains(playername)) {
    players.add(playername);
    arena.addPlayer(playername);
  }
  if (players.size() >= plugin.getConfig().getInt(""String_Node_Str"")) {
    boolean msg=true;
    if (!started) {
      startArcade();
    }
 else {
      if (currentindex < minigames.size()) {
        if (in_a_game) {
          if (currentarena != null) {
            Player p=Bukkit.getPlayer(playername);
            if (p != null) {
              PluginInstance pli_=minigames.get(currentindex);
              System.out.println(pli_.getPlugin().getName() + ""String_Node_Str"" + currentarena.getName()+ ""String_Node_Str""+ p.getName());
              if (currentarena.getArenaState() != ArenaState.INGAME) {
                currentarena.joinPlayerLobby(playername,this,false,true);
              }
 else {
                msg=false;
                currentarena.spectateArcade(playername);
              }
              pli_.scoreboardManager.updateScoreboard(pli_.getPlugin(),currentarena);
            }
          }
        }
      }
    }
    if (msg) {
      Bukkit.getPlayer(playername).sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().arcade_joined_waiting.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      Bukkit.getPlayer(playername).sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().arcade_joined_spectator);
    }
  }
 else {
    Bukkit.getPlayer(playername).sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().arcade_joined_waiting.replaceAll(""String_Node_Str"",Integer.toString(plugin.getConfig().getInt(""String_Node_Str"") - players.size())));
  }
}","public void joinArcade(String playername){
  PluginInstance pli=MinigamesAPI.getAPI().pinstances.get(plugin);
  if (!players.contains(playername)) {
    players.add(playername);
    arena.addPlayer(playername);
  }
  if (players.size() >= plugin.getConfig().getInt(""String_Node_Str"")) {
    boolean msg=true;
    if (!started) {
      startArcade();
    }
 else {
      if (currentindex < minigames.size()) {
        if (in_a_game) {
          if (currentarena != null) {
            Player p=Bukkit.getPlayer(playername);
            if (p != null) {
              PluginInstance pli_=minigames.get(currentindex);
              System.out.println(pli_.getPlugin().getName() + ""String_Node_Str"" + currentarena.getName()+ ""String_Node_Str""+ p.getName());
              if (currentarena.getArenaState() != ArenaState.INGAME && currentarena.getArenaState() != ArenaState.RESTARTING) {
                currentarena.joinPlayerLobby(playername,this,false,true);
              }
 else {
                msg=false;
                currentarena.spectateArcade(playername);
              }
              pli_.scoreboardManager.updateScoreboard(pli_.getPlugin(),currentarena);
            }
          }
        }
      }
    }
    if (msg) {
      Bukkit.getPlayer(playername).sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().arcade_joined_waiting.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      Bukkit.getPlayer(playername).sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().arcade_joined_spectator);
    }
  }
 else {
    Bukkit.getPlayer(playername).sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().arcade_joined_waiting.replaceAll(""String_Node_Str"",Integer.toString(plugin.getConfig().getInt(""String_Node_Str"") - players.size())));
  }
}",0.9842148989199668
86084,"public void nextMinigame(long delay){
  in_a_game=false;
  if (currentindex < minigames.size() - 1) {
    currentindex++;
  }
 else {
    System.out.println(arena.getName());
    arena.stop();
    return;
  }
  final ArcadeInstance ai=this;
  Bukkit.getScheduler().runTaskLater(MinigamesAPI.getAPI(),new Runnable(){
    public void run(){
      ArrayList<String> temp=new ArrayList<String>(players);
      PluginInstance mg=minigames.get(currentindex);
      if (mg.getPlugin().getConfig().getBoolean(""String_Node_Str"")) {
        Arena a=null;
        if (mg.getPlugin().getConfig().getBoolean(""String_Node_Str"")) {
          String arenaname=mg.getPlugin().getConfig().getString(""String_Node_Str"");
          a=mg.getArenaByName(arenaname);
          if (a == null) {
            for (            Arena a_ : mg.getArenas()) {
              if (a_.getArenaState() == ArenaState.JOIN || a_.getArenaState() == ArenaState.STARTING) {
                a=a_;
                break;
              }
            }
          }
        }
 else {
          for (          Arena a_ : mg.getArenas()) {
            if (a_.getArenaState() == ArenaState.JOIN || a_.getArenaState() == ArenaState.STARTING) {
              a=a_;
              break;
            }
          }
        }
        if (a != null) {
          in_a_game=true;
          currentarena=a;
          PluginInstance pli=MinigamesAPI.getAPI().pinstances.get(plugin);
          for (          String p_ : temp) {
            String minigame=mg.getArenaListener().getName();
            Bukkit.getPlayer(p_).sendMessage(mg.getMessagesConfig().arcade_next_minigame.replaceAll(""String_Node_Str"",Character.toUpperCase(minigame.charAt(0)) + minigame.substring(1)));
            a.joinPlayerLobby(p_,ai,plugin.getConfig().getBoolean(""String_Node_Str""),false);
            pli.getSpectatorManager().setSpectate(Bukkit.getPlayer(p_),false);
          }
        }
 else {
          nextMinigame(5L);
        }
      }
 else {
        nextMinigame(5L);
      }
    }
  }
,delay);
}","public void nextMinigame(long delay){
  in_a_game=false;
  if (currentindex < minigames.size() - 1) {
    currentindex++;
  }
 else {
    System.out.println(arena.getName());
    arena.stop();
    return;
  }
  final ArcadeInstance ai=this;
  Bukkit.getScheduler().runTaskLater(MinigamesAPI.getAPI(),new Runnable(){
    public void run(){
      ArrayList<String> temp=new ArrayList<String>(players);
      PluginInstance mg=minigames.get(currentindex);
      if (mg.getPlugin().getConfig().getBoolean(""String_Node_Str"")) {
        Arena a=null;
        if (mg.getPlugin().getConfig().getBoolean(""String_Node_Str"")) {
          String arenaname=mg.getPlugin().getConfig().getString(""String_Node_Str"");
          a=mg.getArenaByName(arenaname);
          if (a == null) {
            for (            Arena a_ : mg.getArenas()) {
              if (a_.getArenaState() == ArenaState.JOIN || a_.getArenaState() == ArenaState.STARTING) {
                a=a_;
                break;
              }
            }
          }
        }
 else {
          for (          Arena a_ : mg.getArenas()) {
            if (a_.getArenaState() == ArenaState.JOIN || a_.getArenaState() == ArenaState.STARTING) {
              a=a_;
              break;
            }
          }
        }
        if (a != null) {
          in_a_game=true;
          currentarena=a;
          PluginInstance pli=MinigamesAPI.getAPI().pinstances.get(plugin);
          for (          String p_ : temp) {
            String minigame=mg.getArenaListener().getName();
            if (!a.containsPlayer(p_)) {
              Bukkit.getPlayer(p_).sendMessage(mg.getMessagesConfig().arcade_next_minigame.replaceAll(""String_Node_Str"",Character.toUpperCase(minigame.charAt(0)) + minigame.substring(1)));
              a.joinPlayerLobby(p_,ai,plugin.getConfig().getBoolean(""String_Node_Str""),false);
            }
            pli.getSpectatorManager().setSpectate(Bukkit.getPlayer(p_),false);
          }
        }
 else {
          nextMinigame(5L);
        }
      }
 else {
        nextMinigame(5L);
      }
    }
  }
,delay);
}",0.9856412752494524
86085,"public void run(){
  ArrayList<String> temp=new ArrayList<String>(players);
  PluginInstance mg=minigames.get(currentindex);
  if (mg.getPlugin().getConfig().getBoolean(""String_Node_Str"")) {
    Arena a=null;
    if (mg.getPlugin().getConfig().getBoolean(""String_Node_Str"")) {
      String arenaname=mg.getPlugin().getConfig().getString(""String_Node_Str"");
      a=mg.getArenaByName(arenaname);
      if (a == null) {
        for (        Arena a_ : mg.getArenas()) {
          if (a_.getArenaState() == ArenaState.JOIN || a_.getArenaState() == ArenaState.STARTING) {
            a=a_;
            break;
          }
        }
      }
    }
 else {
      for (      Arena a_ : mg.getArenas()) {
        if (a_.getArenaState() == ArenaState.JOIN || a_.getArenaState() == ArenaState.STARTING) {
          a=a_;
          break;
        }
      }
    }
    if (a != null) {
      in_a_game=true;
      currentarena=a;
      PluginInstance pli=MinigamesAPI.getAPI().pinstances.get(plugin);
      for (      String p_ : temp) {
        String minigame=mg.getArenaListener().getName();
        Bukkit.getPlayer(p_).sendMessage(mg.getMessagesConfig().arcade_next_minigame.replaceAll(""String_Node_Str"",Character.toUpperCase(minigame.charAt(0)) + minigame.substring(1)));
        a.joinPlayerLobby(p_,ai,plugin.getConfig().getBoolean(""String_Node_Str""),false);
        pli.getSpectatorManager().setSpectate(Bukkit.getPlayer(p_),false);
      }
    }
 else {
      nextMinigame(5L);
    }
  }
 else {
    nextMinigame(5L);
  }
}","public void run(){
  ArrayList<String> temp=new ArrayList<String>(players);
  PluginInstance mg=minigames.get(currentindex);
  if (mg.getPlugin().getConfig().getBoolean(""String_Node_Str"")) {
    Arena a=null;
    if (mg.getPlugin().getConfig().getBoolean(""String_Node_Str"")) {
      String arenaname=mg.getPlugin().getConfig().getString(""String_Node_Str"");
      a=mg.getArenaByName(arenaname);
      if (a == null) {
        for (        Arena a_ : mg.getArenas()) {
          if (a_.getArenaState() == ArenaState.JOIN || a_.getArenaState() == ArenaState.STARTING) {
            a=a_;
            break;
          }
        }
      }
    }
 else {
      for (      Arena a_ : mg.getArenas()) {
        if (a_.getArenaState() == ArenaState.JOIN || a_.getArenaState() == ArenaState.STARTING) {
          a=a_;
          break;
        }
      }
    }
    if (a != null) {
      in_a_game=true;
      currentarena=a;
      PluginInstance pli=MinigamesAPI.getAPI().pinstances.get(plugin);
      for (      String p_ : temp) {
        String minigame=mg.getArenaListener().getName();
        if (!a.containsPlayer(p_)) {
          Bukkit.getPlayer(p_).sendMessage(mg.getMessagesConfig().arcade_next_minigame.replaceAll(""String_Node_Str"",Character.toUpperCase(minigame.charAt(0)) + minigame.substring(1)));
          a.joinPlayerLobby(p_,ai,plugin.getConfig().getBoolean(""String_Node_Str""),false);
        }
        pli.getSpectatorManager().setSpectate(Bukkit.getPlayer(p_),false);
      }
    }
 else {
      nextMinigame(5L);
    }
  }
 else {
    nextMinigame(5L);
  }
}",0.9834791059280856
86086,"public boolean leaveArena(PluginInstance pli,CommandSender sender,String[] args,String uber_permission,String cmd,String action,JavaPlugin plugin,Player p){
  if (pli.global_players.containsKey(p.getName())) {
    Arena a=pli.global_players.get(p.getName());
    if (a.getArcadeInstance() != null) {
      a.getArcadeInstance().leaveArcade(p.getName());
    }
    a.leavePlayer(p.getName(),false,false);
  }
 else {
    sender.sendMessage(pli.getMessagesConfig().not_in_arena);
  }
  return true;
}","public boolean leaveArena(PluginInstance pli,CommandSender sender,String[] args,String uber_permission,String cmd,String action,JavaPlugin plugin,Player p){
  if (pli.global_players.containsKey(p.getName())) {
    Arena a=pli.global_players.get(p.getName());
    if (a.getArcadeInstance() != null) {
      a.getArcadeInstance().leaveArcade(p.getName(),true);
    }
    a.leavePlayer(p.getName(),false,false);
  }
 else {
    sender.sendMessage(pli.getMessagesConfig().not_in_arena);
  }
  return true;
}",0.995004995004995
86087,"public boolean kitTakeMoney(Player p,String kit){
  if (!MinigamesAPI.getAPI().economy) {
    plugin.getLogger().warning(""String_Node_Str"");
    return false;
  }
  if (MinigamesAPI.economy) {
    if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
      ClassesConfig cl=MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig();
      if (!cl.getConfig().isSet(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ kit)) {
        cl.getConfig().set(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ kit,true);
        cl.saveConfig();
        int money=MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig().getConfig().getInt(""String_Node_Str"" + kit + ""String_Node_Str"");
        if (MinigamesAPI.getAPI().econ.getBalance(p.getName()) >= money) {
          EconomyResponse r=MinigamesAPI.getAPI().econ.withdrawPlayer(p.getName(),money);
          if (!r.transactionSuccess()) {
            p.sendMessage(String.format(""String_Node_Str"",r.errorMessage));
            return false;
          }
          p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_bought_kit.replaceAll(""String_Node_Str"",kit).replaceAll(""String_Node_Str"",Integer.toString(money)));
        }
 else {
          p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().not_enough_money);
          return false;
        }
      }
 else {
        return true;
      }
    }
 else {
      int money=MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig().getConfig().getInt(""String_Node_Str"" + kit + ""String_Node_Str"");
      if (MinigamesAPI.getAPI().econ.getBalance(p.getName()) >= money) {
        EconomyResponse r=MinigamesAPI.getAPI().econ.withdrawPlayer(p.getName(),money);
        if (!r.transactionSuccess()) {
          p.sendMessage(String.format(""String_Node_Str"",r.errorMessage));
          return false;
        }
        p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_bought_kit.replaceAll(""String_Node_Str"",kit).replaceAll(""String_Node_Str"",Integer.toString(money)));
      }
 else {
        p.sendMessage(""String_Node_Str"");
        return false;
      }
    }
    return true;
  }
 else {
    return false;
  }
}","public boolean kitTakeMoney(Player p,String kit){
  if (!MinigamesAPI.getAPI().economy) {
    plugin.getLogger().warning(""String_Node_Str"");
    return false;
  }
  if (MinigamesAPI.economy) {
    if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
      ClassesConfig cl=MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig();
      if (!cl.getConfig().isSet(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ kit)) {
        cl.getConfig().set(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ kit,true);
        cl.saveConfig();
        int money=MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig().getConfig().getInt(""String_Node_Str"" + kit + ""String_Node_Str"");
        if (MinigamesAPI.getAPI().econ.getBalance(p.getName()) >= money) {
          EconomyResponse r=MinigamesAPI.getAPI().econ.withdrawPlayer(p.getName(),money);
          if (!r.transactionSuccess()) {
            p.sendMessage(String.format(""String_Node_Str"",r.errorMessage));
            return false;
          }
          p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_bought_kit.replaceAll(""String_Node_Str"",kit).replaceAll(""String_Node_Str"",Integer.toString(money)));
        }
 else {
          p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().not_enough_money);
          return false;
        }
      }
 else {
        return true;
      }
    }
 else {
      ClassesConfig config=MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig();
      int money=config.getConfig().getInt(""String_Node_Str"" + kit + ""String_Node_Str"");
      if (MinigamesAPI.getAPI().econ.getBalance(p.getName()) >= money) {
        EconomyResponse r=MinigamesAPI.getAPI().econ.withdrawPlayer(p.getName(),money);
        if (!r.transactionSuccess()) {
          p.sendMessage(String.format(""String_Node_Str"",r.errorMessage));
          return false;
        }
        p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_bought_kit.replaceAll(""String_Node_Str"",kit).replaceAll(""String_Node_Str"",Integer.toString(money)));
      }
 else {
        p.sendMessage(""String_Node_Str"");
        return false;
      }
    }
    return true;
  }
 else {
    return false;
  }
}",0.9643252825171726
86088,"/** 
 * Sets the current class of a player
 * @param classname the INTERNAL classname
 * @param player
 */
public void setClass(String internalname,String player){
  if (!kitPlayerHasPermission(internalname,Bukkit.getPlayer(player))) {
    Bukkit.getPlayer(player).sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
    return;
  }
  boolean continue_=true;
  if (kitRequiresMoney(internalname)) {
    continue_=kitTakeMoney(Bukkit.getPlayer(player),internalname.toLowerCase());
  }
  if (continue_) {
    MinigamesAPI.getAPI().pinstances.get(plugin).setPClass(player,this.getClassByInternalname(internalname));
    Bukkit.getPlayer(player).sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().set_kit.replaceAll(""String_Node_Str"",ChatColor.translateAlternateColorCodes('&',getClassByInternalname(internalname).getName())));
  }
}","/** 
 * Sets the current class of a player
 * @param classname the INTERNAL classname
 * @param player
 */
public void setClass(String internalname,String player){
  if (!kitPlayerHasPermission(internalname,Bukkit.getPlayer(player))) {
    Bukkit.getPlayer(player).sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
    return;
  }
  boolean continue_=true;
  if (kitRequiresMoney(internalname)) {
    continue_=kitTakeMoney(Bukkit.getPlayer(player),internalname);
  }
  if (continue_) {
    MinigamesAPI.getAPI().pinstances.get(plugin).setPClass(player,this.getClassByInternalname(internalname));
    Bukkit.getPlayer(player).sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().set_kit.replaceAll(""String_Node_Str"",ChatColor.translateAlternateColorCodes('&',getClassByInternalname(internalname).getName())));
  }
}",0.9920724801812004
86089,"public void leavePlayerRaw(final String playername,boolean fullLeave){
  if (!this.containsPlayer(playername)) {
    return;
  }
  this.players.remove(playername);
  pli.global_players.remove(playername);
  if (fullLeave) {
    plugin.getConfig().set(""String_Node_Str"" + playername + ""String_Node_Str"",playername);
    plugin.getConfig().set(""String_Node_Str"" + playername + ""String_Node_Str"",plugin.getName());
    for (    ItemStack i : pinv.get(playername)) {
      if (i != null) {
        plugin.getConfig().set(""String_Node_Str"" + playername + ""String_Node_Str""+ Integer.toString((int)Math.round(Math.random() * 10000))+ i.getType().toString(),i);
      }
    }
    plugin.saveConfig();
    return;
  }
  final Player p=Bukkit.getPlayer(playername);
  Util.clearInv(p);
  p.setWalkSpeed(0.2F);
  p.setFoodLevel(20);
  p.setHealth(20D);
  p.setFireTicks(0);
  p.removePotionEffect(PotionEffectType.JUMP);
  pli.getSpectatorManager().setSpectate(p,false);
  for (  PotionEffect effect : p.getActivePotionEffects()) {
    if (effect != null) {
      p.removePotionEffect(effect.getType());
    }
  }
  for (  Entity e : p.getNearbyEntities(50D,50D,50D)) {
    if (e.getType() == EntityType.DROPPED_ITEM || e.getType() == EntityType.SLIME || e.getType() == EntityType.ZOMBIE || e.getType() == EntityType.SKELETON || e.getType() == EntityType.SPIDER || e.getType() == EntityType.CREEPER) {
      e.remove();
    }
  }
  if (started) {
    if (!pnoreward.contains(playername)) {
      pli.getRewardsInstance().giveWinReward(playername,this);
    }
 else {
      pnoreward.remove(playername);
    }
  }
  pli.global_players.remove(playername);
  if (pli.global_lost.containsKey(playername)) {
    pli.global_lost.remove(playername);
  }
  if (pli.global_arcade_spectator.containsKey(playername)) {
    pli.global_arcade_spectator.remove(playername);
  }
  Util.updateSign(plugin,this);
  final String arenaname=this.getName();
  final Arena a=this;
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      if (p != null) {
        Util.teleportPlayerFixed(p,a.mainlobby);
        p.setFireTicks(0);
        p.setFlying(false);
        if (!p.isOp()) {
          p.setAllowFlight(false);
        }
        if (pgamemode.containsKey(p.getName())) {
          p.setGameMode(pgamemode.get(p.getName()));
        }
        p.getInventory().setContents(pinv.get(playername));
        p.getInventory().setArmorContents(pinv_armor.get(playername));
        p.updateInventory();
        try {
          pli.scoreboardManager.removeScoreboard(arenaname,p);
        }
 catch (        Exception e) {
        }
      }
    }
  }
,5L);
}","public void leavePlayerRaw(final String playername,boolean fullLeave){
  if (!this.containsPlayer(playername)) {
    return;
  }
  this.players.remove(playername);
  pli.global_players.remove(playername);
  if (fullLeave) {
    plugin.getConfig().set(""String_Node_Str"" + playername + ""String_Node_Str"",playername);
    plugin.getConfig().set(""String_Node_Str"" + playername + ""String_Node_Str"",plugin.getName());
    for (    ItemStack i : pinv.get(playername)) {
      if (i != null) {
        plugin.getConfig().set(""String_Node_Str"" + playername + ""String_Node_Str""+ Integer.toString((int)Math.round(Math.random() * 10000))+ i.getType().toString(),i);
      }
    }
    plugin.saveConfig();
    try {
      Player p=Bukkit.getPlayer(playername);
      if (p != null) {
        Util.teleportPlayerFixed(p,this.mainlobby);
        p.setFireTicks(0);
        p.setFlying(false);
        if (!p.isOp()) {
          p.setAllowFlight(false);
        }
        if (pgamemode.containsKey(p.getName())) {
          p.setGameMode(pgamemode.get(p.getName()));
        }
        p.getInventory().setContents(pinv.get(playername));
        p.getInventory().setArmorContents(pinv_armor.get(playername));
        p.updateInventory();
        p.setWalkSpeed(0.2F);
        p.setFoodLevel(20);
        p.setHealth(20D);
        p.removePotionEffect(PotionEffectType.JUMP);
        pli.getSpectatorManager().setSpectate(p,false);
      }
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + e.getMessage());
    }
    return;
  }
  final Player p=Bukkit.getPlayer(playername);
  Util.clearInv(p);
  p.setWalkSpeed(0.2F);
  p.setFoodLevel(20);
  p.setHealth(20D);
  p.setFireTicks(0);
  p.removePotionEffect(PotionEffectType.JUMP);
  pli.getSpectatorManager().setSpectate(p,false);
  for (  PotionEffect effect : p.getActivePotionEffects()) {
    if (effect != null) {
      p.removePotionEffect(effect.getType());
    }
  }
  for (  Entity e : p.getNearbyEntities(50D,50D,50D)) {
    if (e.getType() == EntityType.DROPPED_ITEM || e.getType() == EntityType.SLIME || e.getType() == EntityType.ZOMBIE || e.getType() == EntityType.SKELETON || e.getType() == EntityType.SPIDER || e.getType() == EntityType.CREEPER) {
      e.remove();
    }
  }
  if (started) {
    if (!pnoreward.contains(playername)) {
      pli.getRewardsInstance().giveWinReward(playername,this);
    }
 else {
      pnoreward.remove(playername);
    }
  }
  pli.global_players.remove(playername);
  if (pli.global_lost.containsKey(playername)) {
    pli.global_lost.remove(playername);
  }
  if (pli.global_arcade_spectator.containsKey(playername)) {
    pli.global_arcade_spectator.remove(playername);
  }
  Util.updateSign(plugin,this);
  final String arenaname=this.getName();
  final Arena a=this;
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      if (p != null) {
        Util.teleportPlayerFixed(p,a.mainlobby);
        p.setFireTicks(0);
        p.setFlying(false);
        if (!p.isOp()) {
          p.setAllowFlight(false);
        }
        if (pgamemode.containsKey(p.getName())) {
          p.setGameMode(pgamemode.get(p.getName()));
        }
        p.getInventory().setContents(pinv.get(playername));
        p.getInventory().setArmorContents(pinv_armor.get(playername));
        p.updateInventory();
        try {
          pli.scoreboardManager.removeScoreboard(arenaname,p);
        }
 catch (        Exception e) {
        }
      }
    }
  }
,5L);
}",0.8647768002606713
86090,"public void onDisable(){
  for (  PluginInstance pli : this.pinstances.values()) {
    for (    Arena a : pli.getArenas()) {
      ArrayList<String> temp=new ArrayList<String>(a.getAllPlayers());
      for (      String p_ : temp) {
        a.leavePlayer(p_,true);
      }
    }
  }
}","public void onDisable(){
  for (  PluginInstance pli : this.pinstances.values()) {
    for (    Arena a : pli.getArenas()) {
      ArrayList<String> temp=new ArrayList<String>(a.getAllPlayers());
      for (      String p_ : temp) {
        a.leavePlayer(p_,true);
      }
      try {
        a.getSmartReset().resetRaw();
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"" + e.getMessage());
      }
    }
  }
}",0.7620357634112792
86091,"public ArrayList<ItemStack> getNewInventory(){
  int c=0;
  ArrayList<ItemStack> ret=new ArrayList<ItemStack>();
  for (int i=0; i < item_mats.size(); i++) {
    ItemStack item=new ItemStack(item_mats.get(i),item_amounts.get(i),item_data.get(i));
    ItemMeta im=item.getItemMeta();
    im.setDisplayName(item_displaynames.get(i));
    item.setItemMeta(im);
    if (item.getType() == Material.POTION) {
      Potion potion=Potion.fromDamage(item.getDurability() & 0x3F);
      potion.setSplash(item_splash.get(i));
      item=potion.toItemStack(item_amounts.get(i));
    }
    ret.add(item);
  }
  return ret;
}","public ArrayList<ItemStack> getNewInventory(){
  int c=0;
  ArrayList<ItemStack> ret=new ArrayList<ItemStack>();
  for (int i=0; i < item_mats.size(); i++) {
    ItemStack item=new ItemStack(item_mats.get(i),item_amounts.get(i),item_data.get(i));
    ItemMeta im=item.getItemMeta();
    im.setDisplayName(item_displaynames.get(i));
    item.setItemMeta(im);
    if (item.getType() == Material.POTION && item.getDurability() > 0) {
      Potion potion=Potion.fromDamage(item.getDurability() & 0x3F);
      potion.setSplash(item_splash.get(i));
      item=potion.toItemStack(item_amounts.get(i));
    }
    ret.add(item);
  }
  return ret;
}",0.9776
86092,"public ArrayList<ItemStack> getNewInventory(){
  ArrayList<ItemStack> ret=new ArrayList<ItemStack>();
  for (int i=0; i < item_mats.size(); i++) {
    ItemStack item=new ItemStack(item_mats.get(i),item_amounts.get(i),item_data.get(i));
    item.setDurability(item_durability.get(i));
    ItemMeta im=item.getItemMeta();
    im.setDisplayName(item_displaynames.get(i));
    if (item_enchid.get(i) != null) {
      int c=0;
      for (      Integer ench : item_enchid.get(i)) {
        im.addEnchant(Enchantment.getById(ench),item_enchid_lv.get(i).get(c),true);
        c++;
      }
    }
    item.setItemMeta(im);
    if (item.getType() == Material.POTION) {
      Potion potion=Potion.fromDamage(item.getDurability() & 0x3F);
      potion.setSplash(item_splash.get(i));
    }
 else     if (item.getType() == Material.ENCHANTED_BOOK) {
      ItemStack neww=new ItemStack(Material.ENCHANTED_BOOK);
      EnchantmentStorageMeta meta=(EnchantmentStorageMeta)neww.getItemMeta();
      int c_=0;
      for (      Integer ench : enchbook_id.get(i)) {
        meta.addStoredEnchant(Enchantment.getById(ench),enchbook_id_lv.get(i).get(c_),true);
        c_++;
      }
      neww.setItemMeta(meta);
      item=neww;
    }
    ret.add(item);
  }
  return ret;
}","public ArrayList<ItemStack> getNewInventory(){
  ArrayList<ItemStack> ret=new ArrayList<ItemStack>();
  for (int i=0; i < item_mats.size(); i++) {
    ItemStack item=new ItemStack(item_mats.get(i),item_amounts.get(i),item_data.get(i));
    item.setDurability(item_durability.get(i));
    ItemMeta im=item.getItemMeta();
    im.setDisplayName(item_displaynames.get(i));
    if (item_enchid.get(i) != null) {
      int c=0;
      for (      Integer ench : item_enchid.get(i)) {
        im.addEnchant(Enchantment.getById(ench),item_enchid_lv.get(i).get(c),true);
        c++;
      }
    }
    item.setItemMeta(im);
    if (item.getType() == Material.POTION && item.getDurability() > 0) {
      Potion potion=Potion.fromDamage(item.getDurability() & 0x3F);
      potion.setSplash(item_splash.get(i));
    }
 else     if (item.getType() == Material.ENCHANTED_BOOK) {
      ItemStack neww=new ItemStack(Material.ENCHANTED_BOOK);
      EnchantmentStorageMeta meta=(EnchantmentStorageMeta)neww.getItemMeta();
      int c_=0;
      for (      Integer ench : enchbook_id.get(i)) {
        meta.addStoredEnchant(Enchantment.getById(ench),enchbook_id_lv.get(i).get(c_),true);
        c_++;
      }
      neww.setItemMeta(meta);
      item=neww;
    }
    ret.add(item);
  }
  return ret;
}",0.9889240506329114
86093,"public ArenaListener(JavaPlugin plugin,PluginInstance pinstance,String minigame,ArrayList<String> cmds){
  this.plugin=plugin;
  this.pli=pinstance;
  this.setName(minigame);
  this.cmds=cmds;
  this.leave_cmd=plugin.getConfig().getString(""String_Node_Str"");
}","public ArenaListener(JavaPlugin plugin,PluginInstance pinstance,String minigame,ArrayList<String> cmds){
  this(plugin,pinstance,minigame);
  this.cmds=cmds;
}",0.7446300715990454
86094,"public void stopArcade(boolean stopOfGame){
  final ArrayList<String> temp=new ArrayList<String>(players);
  for (  String p_ : temp) {
    this.leaveArcade(p_);
  }
  players.clear();
  started=false;
  in_a_game=false;
  currentarena=null;
  this.currentindex=0;
  HashSet hs=new HashSet();
  hs.addAll(temp);
  temp.clear();
  temp.addAll(hs);
  final ArcadeInstance ai=this;
  if (stopOfGame && plugin.getConfig().getBoolean(""String_Node_Str"")) {
    for (    String p_ : temp) {
      Util.sendMessage(Bukkit.getPlayer(p_),MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().arcade_new_round.replaceAll(""String_Node_Str"",Integer.toString(plugin.getConfig().getInt(""String_Node_Str""))));
    }
    Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
      public void run(){
        for (        String p_ : temp) {
          if (!players.contains(p_)) {
            players.add(p_);
          }
        }
        ai.startArcade();
      }
    }
,Math.max(40L,20L * plugin.getConfig().getInt(""String_Node_Str"")));
  }
}","public void stopArcade(){
  this.stopArcade(false);
}",0.0876712328767123
86095,"@SuppressWarnings(""String_Node_Str"") public static Sign getSignFromArena(JavaPlugin plugin,String arena){
  PluginInstance pli=MinigamesAPI.getAPI().pinstances.get(plugin);
  if (!pli.getArenasConfig().getConfig().isSet(""String_Node_Str"" + arena + ""String_Node_Str"")) {
    return null;
  }
  Location b_=new Location(Bukkit.getServer().getWorld(pli.getArenasConfig().getConfig().getString(""String_Node_Str"" + arena + ""String_Node_Str"")),pli.getArenasConfig().getConfig().getInt(""String_Node_Str"" + arena + ""String_Node_Str""),pli.getArenasConfig().getConfig().getInt(""String_Node_Str"" + arena + ""String_Node_Str""),pli.getArenasConfig().getConfig().getInt(""String_Node_Str"" + arena + ""String_Node_Str""));
  if (b_ != null) {
    BlockState bs=b_.getBlock().getState();
    Sign s_=null;
    if (bs instanceof Sign) {
      s_=(Sign)bs;
    }
    return s_;
  }
  return null;
}","public static Sign getSignFromArena(JavaPlugin plugin,String arena){
  PluginInstance pli=MinigamesAPI.getAPI().pinstances.get(plugin);
  if (!pli.getArenasConfig().getConfig().isSet(""String_Node_Str"" + arena + ""String_Node_Str"")) {
    return null;
  }
  Location b_=new Location(Bukkit.getServer().getWorld(pli.getArenasConfig().getConfig().getString(""String_Node_Str"" + arena + ""String_Node_Str"")),pli.getArenasConfig().getConfig().getInt(""String_Node_Str"" + arena + ""String_Node_Str""),pli.getArenasConfig().getConfig().getInt(""String_Node_Str"" + arena + ""String_Node_Str""),pli.getArenasConfig().getConfig().getInt(""String_Node_Str"" + arena + ""String_Node_Str""));
  if (b_ != null) {
    if (b_.getWorld() != null) {
      if (b_.getBlock().getState() != null) {
        BlockState bs=b_.getBlock().getState();
        Sign s_=null;
        if (bs instanceof Sign) {
          s_=(Sign)bs;
        }
        return s_;
      }
    }
  }
  return null;
}",0.915938864628821
86096,"@EventHandler public void onEntityDamageByEntity(EntityDamageByEntityEvent event){
  if (event.getEntity() instanceof Player) {
    Player p=(Player)event.getEntity();
    Player attacker;
    if (event.getDamager() instanceof Projectile) {
      Projectile projectile=(Projectile)event.getDamager();
      attacker=(Player)projectile.getShooter();
    }
 else     if (event.getDamager() instanceof Player) {
      attacker=(Player)event.getDamager();
    }
 else {
      return;
    }
    if (p != null && attacker != null) {
      if (pli.global_players.containsKey(p.getName()) && pli.global_players.containsKey(attacker.getName())) {
        Arena a=(Arena)pli.global_players.get(p.getName());
        if (a.getArenaState() == ArenaState.INGAME) {
          a.lastdamager.put(p.getName(),attacker.getName());
        }
      }
    }
  }
}","@EventHandler public void onEntityDamageByEntity(EntityDamageByEntityEvent event){
  if (event.getEntity() instanceof Player) {
    Player p=(Player)event.getEntity();
    Player attacker=null;
    if (event.getDamager() instanceof Projectile) {
      Projectile projectile=(Projectile)event.getDamager();
      if (projectile.getShooter() instanceof Player) {
        attacker=(Player)projectile.getShooter();
      }
    }
 else     if (event.getDamager() instanceof Player) {
      attacker=(Player)event.getDamager();
    }
 else {
      return;
    }
    if (p != null && attacker != null) {
      if (pli.global_players.containsKey(p.getName()) && pli.global_players.containsKey(attacker.getName())) {
        Arena a=(Arena)pli.global_players.get(p.getName());
        if (a.getArenaState() == ArenaState.INGAME) {
          a.lastdamager.put(p.getName(),attacker.getName());
        }
      }
    }
  }
}",0.9407069555302168
86097,"public ArrayList<ItemStack> getNewInventory(){
  ArrayList<ItemStack> ret=new ArrayList<ItemStack>();
  for (int i=0; i < item_mats.size(); i++) {
    ItemStack item=new ItemStack(item_mats.get(i),item_amounts.get(i),item_data.get(i));
    ItemMeta im=item.getItemMeta();
    im.setDisplayName(item_displaynames.get(i));
    if (item_enchid.get(i) > -1) {
      im.addEnchant(Enchantment.getById(item_enchid.get(i)),item_enchid_lv.get(i),true);
      item.addEnchantment(Enchantment.getById(item_enchid.get(i)),item_enchid_lv.get(i));
      item.addUnsafeEnchantment(Enchantment.getById(item_enchid.get(i)),item_enchid_lv.get(i));
    }
    item.setItemMeta(im);
    if (item.getType() == Material.POTION) {
      Potion potion=Potion.fromDamage(item.getDurability() & 0x3F);
      potion.setSplash(item_splash.get(i));
      item=potion.toItemStack(item_amounts.get(i));
    }
    System.out.println(item);
    ret.add(item);
  }
  return ret;
}","public ArrayList<ItemStack> getNewInventory(){
  ArrayList<ItemStack> ret=new ArrayList<ItemStack>();
  for (int i=0; i < item_mats.size(); i++) {
    ItemStack item=new ItemStack(item_mats.get(i),item_amounts.get(i),item_data.get(i));
    item.setDurability(item_durability.get(i));
    ItemMeta im=item.getItemMeta();
    im.setDisplayName(item_displaynames.get(i));
    if (item_enchid.get(i) != null) {
      int c=0;
      for (      Integer ench : item_enchid.get(i)) {
        im.addEnchant(Enchantment.getById(ench),item_enchid_lv.get(i).get(c),true);
        c++;
      }
    }
    item.setItemMeta(im);
    if (item.getType() == Material.POTION) {
      Potion potion=Potion.fromDamage(item.getDurability() & 0x3F);
      System.out.println(""String_Node_Str"" + item_splash.get(i));
      potion.setSplash(item_splash.get(i));
    }
 else     if (item.getType() == Material.ENCHANTED_BOOK) {
      ItemStack neww=new ItemStack(Material.ENCHANTED_BOOK);
      EnchantmentStorageMeta meta=(EnchantmentStorageMeta)neww.getItemMeta();
      int c_=0;
      for (      Integer ench : enchbook_id.get(i)) {
        meta.addStoredEnchant(Enchantment.getById(ench),enchbook_id_lv.get(i).get(c_),true);
        c_++;
      }
      neww.setItemMeta(meta);
      item=neww;
    }
    System.out.println(item);
    ret.add(item);
  }
  return ret;
}",0.587260034904014
86098,"public void spectateArcade(String playername){
  Player p=Bukkit.getPlayer(playername);
  pli.global_players.put(playername,currentarena);
  pli.global_arcade_spectator.put(playername,currentarena);
  Util.teleportPlayerFixed(p,currentarena.getSpawns().get(0).clone().add(0D,30D,0D));
  p.setAllowFlight(true);
  p.setFlying(true);
}","public void spectateArcade(String playername){
  Player p=Bukkit.getPlayer(playername);
  pli.global_players.put(playername,currentarena);
  pli.global_arcade_spectator.put(playername,currentarena);
  Util.teleportPlayerFixed(p,currentarena.getSpawns().get(0).clone().add(0D,30D,0D));
  p.setAllowFlight(true);
  p.setFlying(true);
  SpectatorManager.setSpectate(p,true);
}",0.943342776203966
86099,"@EventHandler public void onPlayerJoin(PlayerJoinEvent event){
  final Player p=event.getPlayer();
  pli.getStatsInstance().update(p.getName());
  if (plugin.getConfig().isSet(""String_Node_Str"" + p.getName())) {
    Bukkit.getScheduler().runTaskLater(MinigamesAPI.getAPI(),new Runnable(){
      public void run(){
        Util.teleportPlayerFixed(p,Util.getMainLobby(plugin));
        p.setFlying(false);
        try {
          p.getInventory().clear();
          p.updateInventory();
          if (plugin.getConfig().isSet(""String_Node_Str"" + p.getName() + ""String_Node_Str"")) {
            for (            String key : plugin.getConfig().getConfigurationSection(""String_Node_Str"" + p.getName() + ""String_Node_Str"").getKeys(false)) {
              p.getInventory().addItem(plugin.getConfig().getItemStack(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ key));
            }
          }
          p.updateInventory();
          p.setWalkSpeed(0.2F);
          p.removePotionEffect(PotionEffectType.JUMP);
        }
 catch (        Exception e) {
          e.printStackTrace();
          Util.sendMessage(p,ChatColor.RED + ""String_Node_Str"");
        }
        plugin.getConfig().set(""String_Node_Str"" + p.getName(),null);
        plugin.saveConfig();
      }
    }
,5);
  }
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    int c=0;
    final List<String> arenas=new ArrayList<String>();
    for (    String arena : pli.getArenasConfig().getConfig().getKeys(false)) {
      if (!arena.equalsIgnoreCase(""String_Node_Str"") && !arena.equalsIgnoreCase(""String_Node_Str"") && !arena.equalsIgnoreCase(""String_Node_Str"")) {
        c++;
        arenas.add(arena);
      }
    }
    if (c < 1) {
      MinigamesAPI.getAPI().getLogger().severe(""String_Node_Str"");
      return;
    }
    Bukkit.getScheduler().runTaskLater(MinigamesAPI.getAPI(),new Runnable(){
      public void run(){
        if (p != null) {
          pli.getArenas().get(0).joinPlayerLobby(p.getName());
        }
      }
    }
,30L);
  }
}","@EventHandler public void onPlayerJoin(PlayerJoinEvent event){
  final Player p=event.getPlayer();
  pli.getStatsInstance().update(p.getName());
  if (plugin.getConfig().isSet(""String_Node_Str"" + p.getName())) {
    Bukkit.getScheduler().runTaskLater(MinigamesAPI.getAPI(),new Runnable(){
      public void run(){
        Util.teleportPlayerFixed(p,Util.getMainLobby(plugin));
        p.setFlying(false);
        try {
          p.getInventory().clear();
          p.updateInventory();
          if (plugin.getConfig().isSet(""String_Node_Str"" + p.getName() + ""String_Node_Str"")) {
            for (            String key : plugin.getConfig().getConfigurationSection(""String_Node_Str"" + p.getName() + ""String_Node_Str"").getKeys(false)) {
              p.getInventory().addItem(plugin.getConfig().getItemStack(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ key));
            }
          }
          p.updateInventory();
          p.setWalkSpeed(0.2F);
          p.removePotionEffect(PotionEffectType.JUMP);
          SpectatorManager.setSpectate(p,false);
        }
 catch (        Exception e) {
          e.printStackTrace();
          Util.sendMessage(p,ChatColor.RED + ""String_Node_Str"");
        }
        plugin.getConfig().set(""String_Node_Str"" + p.getName(),null);
        plugin.saveConfig();
      }
    }
,5);
  }
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    int c=0;
    final List<String> arenas=new ArrayList<String>();
    for (    String arena : pli.getArenasConfig().getConfig().getKeys(false)) {
      if (!arena.equalsIgnoreCase(""String_Node_Str"") && !arena.equalsIgnoreCase(""String_Node_Str"") && !arena.equalsIgnoreCase(""String_Node_Str"")) {
        c++;
        arenas.add(arena);
      }
    }
    if (c < 1) {
      MinigamesAPI.getAPI().getLogger().severe(""String_Node_Str"");
      return;
    }
    Bukkit.getScheduler().runTaskLater(MinigamesAPI.getAPI(),new Runnable(){
      public void run(){
        if (p != null) {
          pli.getArenas().get(0).joinPlayerLobby(p.getName());
        }
      }
    }
,30L);
  }
}",0.9880107658429166
86100,"public static void setup(){
  if (Bukkit.getScoreboardManager().getMainScoreboard().getTeam(""String_Node_Str"") == null) {
    Bukkit.getScoreboardManager().getMainScoreboard().registerNewTeam(""String_Node_Str"");
  }
  Bukkit.getScoreboardManager().getMainScoreboard().getTeam(""String_Node_Str"").setCanSeeFriendlyInvisibles(true);
}","public static void setup(){
  if (Bukkit.getScoreboardManager().getMainScoreboard().getTeam(""String_Node_Str"") == null) {
    Bukkit.getScoreboardManager().getMainScoreboard().registerNewTeam(""String_Node_Str"");
  }
  Bukkit.getScoreboardManager().getMainScoreboard().getTeam(""String_Node_Str"").setCanSeeFriendlyInvisibles(true);
  clear();
}",0.9836552748885586
86101,"public void leaveArcade(final String playername){
  if (players.contains(playername)) {
    players.remove(playername);
  }
  if (minigames.get(currentindex).getArenas().size() > 0) {
    if (minigames.get(currentindex).getArenas().get(0).containsPlayer(playername)) {
      minigames.get(currentindex).getArenas().get(0).leavePlayer(playername,false,false);
    }
  }
  Bukkit.getScheduler().runTaskLater(MinigamesAPI.getAPI(),new Runnable(){
    public void run(){
      Player p=Bukkit.getPlayer(playername);
      if (p != null) {
        Util.teleportPlayerFixed(p,arena.getMainLobbyTemp());
      }
    }
  }
,20L);
  clean();
  if (players.size() < 2) {
    stopArcade();
  }
}","public void leaveArcade(final String playername){
  if (players.contains(playername)) {
    players.remove(playername);
  }
  if (minigames.get(currentindex).getArenas().size() > 0) {
    if (minigames.get(currentindex).getArenas().get(0).containsPlayer(playername)) {
      minigames.get(currentindex).getArenas().get(0).leavePlayer(playername,false,false);
    }
  }
  Bukkit.getScheduler().runTaskLater(MinigamesAPI.getAPI(),new Runnable(){
    public void run(){
      Player p=Bukkit.getPlayer(playername);
      if (p != null) {
        Util.teleportPlayerFixed(p,arena.getMainLobbyTemp());
        SpectatorManager.setSpectate(p,false);
        if (!p.isOp()) {
          p.setFlying(false);
          p.setAllowFlight(false);
        }
      }
    }
  }
,20L);
  clean();
  if (players.size() < 2) {
    stopArcade();
  }
}",0.902970297029703
86102,"public void nextMinigame(long delay){
  in_a_game=false;
  if (currentindex < minigames.size() - 1) {
    currentindex++;
  }
 else {
    System.out.println(arena.getName());
    arena.stop();
    return;
  }
  final ArcadeInstance ai=this;
  Bukkit.getScheduler().runTaskLater(MinigamesAPI.getAPI(),new Runnable(){
    public void run(){
      ArrayList<String> temp=new ArrayList<String>(players);
      PluginInstance mg=minigames.get(currentindex);
      if (mg.getPlugin().getConfig().getBoolean(""String_Node_Str"")) {
        Arena a=null;
        if (mg.getPlugin().getConfig().getBoolean(""String_Node_Str"")) {
          String arenaname=mg.getPlugin().getConfig().getString(""String_Node_Str"");
          a=mg.getArenaByName(arenaname);
          if (a == null) {
            for (            Arena a_ : mg.getArenas()) {
              if (a_.getArenaState() == ArenaState.JOIN || a_.getArenaState() == ArenaState.STARTING) {
                a=a_;
                break;
              }
            }
          }
        }
 else {
          for (          Arena a_ : mg.getArenas()) {
            if (a_.getArenaState() == ArenaState.JOIN || a_.getArenaState() == ArenaState.STARTING) {
              a=a_;
              break;
            }
          }
        }
        if (a != null) {
          in_a_game=true;
          currentarena=a;
          for (          String p_ : temp) {
            Bukkit.getPlayer(p_).sendMessage(mg.getMessagesConfig().arcade_next_minigame.replaceAll(""String_Node_Str"",mg.getArenaListener().getName()));
            a.joinPlayerLobby(p_,ai,plugin.getConfig().getBoolean(""String_Node_Str""),false);
          }
        }
 else {
          nextMinigame(5L);
        }
      }
 else {
        nextMinigame(5L);
      }
    }
  }
,delay);
}","public void nextMinigame(long delay){
  in_a_game=false;
  if (currentindex < minigames.size() - 1) {
    currentindex++;
  }
 else {
    System.out.println(arena.getName());
    arena.stop();
    return;
  }
  final ArcadeInstance ai=this;
  Bukkit.getScheduler().runTaskLater(MinigamesAPI.getAPI(),new Runnable(){
    public void run(){
      ArrayList<String> temp=new ArrayList<String>(players);
      PluginInstance mg=minigames.get(currentindex);
      if (mg.getPlugin().getConfig().getBoolean(""String_Node_Str"")) {
        Arena a=null;
        if (mg.getPlugin().getConfig().getBoolean(""String_Node_Str"")) {
          String arenaname=mg.getPlugin().getConfig().getString(""String_Node_Str"");
          a=mg.getArenaByName(arenaname);
          if (a == null) {
            for (            Arena a_ : mg.getArenas()) {
              if (a_.getArenaState() == ArenaState.JOIN || a_.getArenaState() == ArenaState.STARTING) {
                a=a_;
                break;
              }
            }
          }
        }
 else {
          for (          Arena a_ : mg.getArenas()) {
            if (a_.getArenaState() == ArenaState.JOIN || a_.getArenaState() == ArenaState.STARTING) {
              a=a_;
              break;
            }
          }
        }
        if (a != null) {
          in_a_game=true;
          currentarena=a;
          for (          String p_ : temp) {
            Bukkit.getPlayer(p_).sendMessage(mg.getMessagesConfig().arcade_next_minigame.replaceAll(""String_Node_Str"",mg.getArenaListener().getName()));
            a.joinPlayerLobby(p_,ai,plugin.getConfig().getBoolean(""String_Node_Str""),false);
            SpectatorManager.setSpectate(Bukkit.getPlayer(p_),false);
          }
        }
 else {
          nextMinigame(5L);
        }
      }
 else {
        nextMinigame(5L);
      }
    }
  }
,delay);
}",0.9806736609607952
86103,"public void run(){
  ArrayList<String> temp=new ArrayList<String>(players);
  PluginInstance mg=minigames.get(currentindex);
  if (mg.getPlugin().getConfig().getBoolean(""String_Node_Str"")) {
    Arena a=null;
    if (mg.getPlugin().getConfig().getBoolean(""String_Node_Str"")) {
      String arenaname=mg.getPlugin().getConfig().getString(""String_Node_Str"");
      a=mg.getArenaByName(arenaname);
      if (a == null) {
        for (        Arena a_ : mg.getArenas()) {
          if (a_.getArenaState() == ArenaState.JOIN || a_.getArenaState() == ArenaState.STARTING) {
            a=a_;
            break;
          }
        }
      }
    }
 else {
      for (      Arena a_ : mg.getArenas()) {
        if (a_.getArenaState() == ArenaState.JOIN || a_.getArenaState() == ArenaState.STARTING) {
          a=a_;
          break;
        }
      }
    }
    if (a != null) {
      in_a_game=true;
      currentarena=a;
      for (      String p_ : temp) {
        Bukkit.getPlayer(p_).sendMessage(mg.getMessagesConfig().arcade_next_minigame.replaceAll(""String_Node_Str"",mg.getArenaListener().getName()));
        a.joinPlayerLobby(p_,ai,plugin.getConfig().getBoolean(""String_Node_Str""),false);
      }
    }
 else {
      nextMinigame(5L);
    }
  }
 else {
    nextMinigame(5L);
  }
}","public void run(){
  ArrayList<String> temp=new ArrayList<String>(players);
  PluginInstance mg=minigames.get(currentindex);
  if (mg.getPlugin().getConfig().getBoolean(""String_Node_Str"")) {
    Arena a=null;
    if (mg.getPlugin().getConfig().getBoolean(""String_Node_Str"")) {
      String arenaname=mg.getPlugin().getConfig().getString(""String_Node_Str"");
      a=mg.getArenaByName(arenaname);
      if (a == null) {
        for (        Arena a_ : mg.getArenas()) {
          if (a_.getArenaState() == ArenaState.JOIN || a_.getArenaState() == ArenaState.STARTING) {
            a=a_;
            break;
          }
        }
      }
    }
 else {
      for (      Arena a_ : mg.getArenas()) {
        if (a_.getArenaState() == ArenaState.JOIN || a_.getArenaState() == ArenaState.STARTING) {
          a=a_;
          break;
        }
      }
    }
    if (a != null) {
      in_a_game=true;
      currentarena=a;
      for (      String p_ : temp) {
        Bukkit.getPlayer(p_).sendMessage(mg.getMessagesConfig().arcade_next_minigame.replaceAll(""String_Node_Str"",mg.getArenaListener().getName()));
        a.joinPlayerLobby(p_,ai,plugin.getConfig().getBoolean(""String_Node_Str""),false);
        SpectatorManager.setSpectate(Bukkit.getPlayer(p_),false);
      }
    }
 else {
      nextMinigame(5L);
    }
  }
 else {
    nextMinigame(5L);
  }
}",0.9748858447488584
86104,"public void createTables(){
  if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
    return;
  }
  if (!mysql) {
  }
  Connection c=MySQL.open();
  try {
    c.createStatement().execute(""String_Node_Str"" + plugin.getConfig().getString(""String_Node_Str""));
    c.createStatement().execute(""String_Node_Str"" + plugin.getName() + ""String_Node_Str"");
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}","public void createTables(){
  if (!plugin.getConfig().getBoolean(""String_Node_Str"")) {
    return;
  }
  if (!mysql) {
  }
  Connection c=MySQL.open();
  try {
    c.createStatement().execute(""String_Node_Str"" + plugin.getConfig().getString(""String_Node_Str"") + ""String_Node_Str"");
    c.createStatement().execute(""String_Node_Str"" + plugin.getName() + ""String_Node_Str"");
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}",0.976470588235294
86105,"/** 
 * Will shuffle all arenas and join the next available arena
 * @param players
 */
public void nextArenaOnMapRotation(ArrayList<String> players){
  ArrayList<Arena> arenas=pli.getArenas();
  Collections.shuffle(arenas);
  for (  Arena a : arenas) {
    if (a.getArenaState() == ArenaState.JOIN && a != this) {
      System.out.println(plugin.getName() + ""String_Node_Str"" + a.getName());
      for (      String p_ : players) {
        a.joinPlayerLobby(p_,false);
      }
    }
  }
}","/** 
 * Will shuffle all arenas and join the next available arena
 * @param players
 */
public void nextArenaOnMapRotation(ArrayList<String> players){
  ArrayList<Arena> arenas=pli.getArenas();
  Collections.shuffle(arenas);
  for (  Arena a : arenas) {
    if (a.getArenaState() == ArenaState.JOIN && a != this) {
      System.out.println(plugin.getName() + ""String_Node_Str"" + a.getName());
      for (      String p_ : players) {
        if (!a.containsPlayer(p_)) {
          a.joinPlayerLobby(p_,false);
        }
      }
    }
  }
}",0.952288218111003
86106,"/** 
 * Leaves the current arena, won't do anything if not present in any arena
 * @param playername
 * @param fullLeave Determines if player left only minigame or the server
 */
public void leavePlayer(final String playername,boolean fullLeave){
  if (!this.containsPlayer(playername)) {
    return;
  }
  this.players.remove(playername);
  pli.global_players.remove(playername);
  if (fullLeave) {
    plugin.getConfig().set(""String_Node_Str"" + playername,playername);
    plugin.saveConfig();
    return;
  }
  final Player p=Bukkit.getPlayer(playername);
  Util.clearInv(p);
  p.getInventory().setContents(pinv.get(playername));
  p.getInventory().setArmorContents(pinv_armor.get(playername));
  p.updateInventory();
  p.setWalkSpeed(0.2F);
  p.removePotionEffect(PotionEffectType.JUMP);
  if (started) {
    pli.getRewardsInstance().giveWinReward(playername);
  }
  pli.global_players.remove(playername);
  if (pli.global_lost.containsKey(playername)) {
    pli.global_lost.remove(playername);
  }
  Util.updateSign(plugin,this);
  final String arenaname=this.getName();
  final Arena a=this;
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      Util.teleportPlayerFixed(p,a.mainlobby);
      p.setFlying(false);
      if (!p.isOp()) {
        p.setAllowFlight(false);
      }
      if (pgamemode.containsKey(p.getName())) {
        p.setGameMode(pgamemode.get(p.getName()));
      }
      try {
        pli.scoreboardManager.removeScoreboard(arenaname,p);
      }
 catch (      Exception e) {
      }
    }
  }
,5L);
  if (this.getAllPlayers().size() < 2) {
    this.stop();
  }
}","/** 
 * Leaves the current arena, won't do anything if not present in any arena
 * @param playername
 * @param fullLeave Determines if player left only minigame or the server
 */
public void leavePlayer(final String playername,boolean fullLeave){
  this.leavePlayerRaw(playername,fullLeave);
  if (this.getAllPlayers().size() < 2) {
    this.stop();
  }
}",0.278199291856348
86107,"/** 
 * Leaves the current arena, won't do anything if not present in any arena
 * @param playername
 * @param fullLeave Determines if player left only minigame or the server
 */
public void leavePlayer(final String playername,boolean fullLeave){
  this.leavePlayerRaw(playername,fullLeave);
  if (this.getAllPlayers().size() < 2) {
    this.stop();
  }
}","public void leavePlayer(final String playername,boolean fullLeave,boolean endofGame){
  this.leavePlayerRaw(playername,fullLeave);
}",0.4681724845995893
86108,"/** 
 * Stops the arena and teleports all players to the mainlobby
 */
public void stop(){
  final Arena a=this;
  try {
    Bukkit.getScheduler().cancelTask(currenttaskid);
  }
 catch (  Exception e) {
  }
  this.setArenaState(ArenaState.RESTARTING);
  ArrayList<String> temp=new ArrayList<String>(this.getAllPlayers());
  for (  String p_ : temp) {
    leavePlayer(p_,false);
  }
  if (a.getArenaType() == ArenaType.REGENERATION) {
    reset();
  }
 else {
    a.setArenaState(ArenaState.JOIN);
    Util.updateSign(plugin,a);
  }
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      players.clear();
      pinv.clear();
      pinv_armor.clear();
    }
  }
,10L);
  started=false;
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    String[] cmds=plugin.getConfig().getString(""String_Node_Str"").split(""String_Node_Str"");
    for (    String cmd : cmds) {
      Bukkit.dispatchCommand(Bukkit.getConsoleSender(),cmd);
    }
  }
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    final String server=plugin.getConfig().getString(""String_Node_Str"");
    Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
      public void run(){
        for (        Player p : Bukkit.getOnlinePlayers()) {
          BungeeUtil.connectToServer(MinigamesAPI.getAPI(),p.getName(),server);
        }
      }
    }
,30L);
    return;
  }
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      if (ai != null) {
        ai.nextMinigame();
        ai=null;
      }
    }
  }
,10L);
}","/** 
 * Stops the arena and teleports all players to the mainlobby
 */
public void stop(){
  final Arena a=this;
  try {
    Bukkit.getScheduler().cancelTask(currenttaskid);
  }
 catch (  Exception e) {
  }
  this.setArenaState(ArenaState.RESTARTING);
  ArrayList<String> temp=new ArrayList<String>(this.getAllPlayers());
  for (  String p_ : temp) {
    leavePlayer(p_,false,true);
  }
  if (a.getArenaType() == ArenaType.REGENERATION) {
    reset();
  }
 else {
    a.setArenaState(ArenaState.JOIN);
    Util.updateSign(plugin,a);
  }
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      players.clear();
      pinv.clear();
      pinv_armor.clear();
    }
  }
,10L);
  started=false;
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    String[] cmds=plugin.getConfig().getString(""String_Node_Str"").split(""String_Node_Str"");
    for (    String cmd : cmds) {
      Bukkit.dispatchCommand(Bukkit.getConsoleSender(),cmd);
    }
  }
  if (plugin.getConfig().getBoolean(""String_Node_Str"")) {
    final String server=plugin.getConfig().getString(""String_Node_Str"");
    Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
      public void run(){
        for (        Player p : Bukkit.getOnlinePlayers()) {
          BungeeUtil.connectToServer(MinigamesAPI.getAPI(),p.getName(),server);
        }
      }
    }
,30L);
    return;
  }
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      if (ai != null) {
        ai.nextMinigame();
        ai=null;
      }
    }
  }
,10L);
}",0.9983958934873276
86109,"@EventHandler public void onPlayerDeath(PlayerDeathEvent event){
  if (pli.global_players.containsKey(event.getEntity().getName())) {
    event.getEntity().setHealth(20D);
    final Player p=event.getEntity();
    pli.global_lost.put(p.getName(),pli.global_players.get(p.getName()));
    final Arena arena=pli.global_players.get(p.getName());
    Bukkit.getScheduler().runTaskLater(MinigamesAPI.getAPI(),new Runnable(){
      public void run(){
        try {
          pli.global_players.get(p.getName()).spectate(p.getName());
          for (          String p_ : arena.getAllPlayers()) {
            if (Validator.isPlayerOnline(p_)) {
              Player p__=Bukkit.getPlayer(p_);
              p__.sendMessage(pli.getMessagesConfig().broadcast_players_left.replaceAll(""String_Node_Str"",arena.getPlayerCount()));
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
,5);
    int count=0;
    for (    String p_ : pli.global_players.keySet()) {
      if (Validator.isPlayerOnline(p_)) {
        if (pli.global_players.get(p_).getName().equalsIgnoreCase(arena.getName())) {
          if (!pli.global_lost.containsKey(p_)) {
            count++;
          }
        }
      }
    }
    if (count < 2) {
      arena.stop();
    }
  }
}","@EventHandler public void onPlayerDeath(PlayerDeathEvent event){
  if (pli.global_players.containsKey(event.getEntity().getName())) {
    event.getEntity().setHealth(20D);
    final Player p=event.getEntity();
    pli.global_lost.put(p.getName(),pli.global_players.get(p.getName()));
    final Arena arena=pli.global_players.get(p.getName());
    Bukkit.getScheduler().runTaskLater(MinigamesAPI.getAPI(),new Runnable(){
      public void run(){
        try {
          if (pli.global_players.containsKey(p.getName())) {
            pli.global_players.get(p.getName()).spectate(p.getName());
          }
          for (          String p_ : arena.getAllPlayers()) {
            if (Validator.isPlayerOnline(p_)) {
              Player p__=Bukkit.getPlayer(p_);
              p__.sendMessage(pli.getMessagesConfig().broadcast_players_left.replaceAll(""String_Node_Str"",arena.getPlayerCount()));
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
,5);
    int count=0;
    for (    String p_ : pli.global_players.keySet()) {
      if (Validator.isPlayerOnline(p_)) {
        if (pli.global_players.get(p_).getName().equalsIgnoreCase(arena.getName())) {
          if (!pli.global_lost.containsKey(p_)) {
            count++;
          }
        }
      }
    }
    if (count < 2) {
      arena.stop();
    }
  }
}",0.9631010063361908
86110,"public boolean startArena(PluginInstance pli,CommandSender sender,String[] args,String uber_permission,String cmd,String action,JavaPlugin plugin,Player p){
  if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
    sender.sendMessage(pli.getMessagesConfig().no_perm);
    return true;
  }
  if (args.length > 1) {
    Arena temp=pli.getArenaByName(args[1]);
    if (temp != null) {
      temp.start(true);
      sender.sendMessage(pli.getMessagesConfig().arena_action.replaceAll(""String_Node_Str"",args[1]).replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
    }
  }
 else {
    sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
  }
  return true;
}","public boolean startArena(PluginInstance pli,CommandSender sender,String[] args,String uber_permission,String cmd,String action,JavaPlugin plugin,Player p){
  if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
    sender.sendMessage(pli.getMessagesConfig().no_perm);
    return true;
  }
  if (args.length > 1) {
    Arena temp=pli.getArenaByName(args[1]);
    if (temp != null) {
      temp.start(true);
      sender.sendMessage(pli.getMessagesConfig().arena_action.replaceAll(""String_Node_Str"",args[1]).replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
    }
  }
 else {
    sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
  return true;
}",0.9855595667870036
86111,"public boolean joinArena(PluginInstance pli,CommandSender sender,String[] args,String uber_permission,String cmd,String action,JavaPlugin plugin,Player p){
  if (args.length > 1) {
    Arena temp=pli.getArenaByName(args[1]);
    if (temp != null) {
      if (!temp.containsPlayer(p.getName())) {
        temp.joinPlayerLobby(p.getName());
      }
 else {
        p.sendMessage(pli.getMessagesConfig().arena_action.replaceAll(""String_Node_Str"",temp.getName()).replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
    }
 else {
      sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
    }
  }
 else {
    sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
  }
  return true;
}","public boolean joinArena(PluginInstance pli,CommandSender sender,String[] args,String uber_permission,String cmd,String action,JavaPlugin plugin,Player p){
  if (args.length > 1) {
    Arena temp=pli.getArenaByName(args[1]);
    if (temp != null) {
      if (!temp.containsPlayer(p.getName())) {
        temp.joinPlayerLobby(p.getName());
      }
 else {
        p.sendMessage(pli.getMessagesConfig().arena_action.replaceAll(""String_Node_Str"",temp.getName()).replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
    }
 else {
      sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
    }
  }
 else {
    sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
  return true;
}",0.9845758354755784
86112,"public boolean leaveArena(PluginInstance pli,CommandSender sender,String[] args,String uber_permission,String cmd,String action,JavaPlugin plugin,Player p){
  if (pli.global_players.containsKey(p.getName())) {
    Arena a=pli.global_players.get(p.getName());
    a.leavePlayer(p.getName(),false);
    if (a.getArcadeInstance() != null) {
      a.getArcadeInstance().leaveArcade(p.getName());
    }
  }
 else {
    sender.sendMessage(pli.getMessagesConfig().not_in_arena);
  }
  return true;
}","public boolean leaveArena(PluginInstance pli,CommandSender sender,String[] args,String uber_permission,String cmd,String action,JavaPlugin plugin,Player p){
  if (pli.global_players.containsKey(p.getName())) {
    Arena a=pli.global_players.get(p.getName());
    if (a.getArcadeInstance() != null) {
      a.getArcadeInstance().leaveArcade(p.getName());
    }
    a.leavePlayer(p.getName(),false);
  }
 else {
    sender.sendMessage(pli.getMessagesConfig().not_in_arena);
  }
  return true;
}",0.9227642276422764
86113,"public void setWins(String playername,int count){
  String uuid=Bukkit.getPlayer(playername).getUniqueId().toString();
  MinigamesAPI.getAPI().pinstances.get(plugin).getStatsConfig().getConfig().set(""String_Node_Str"" + uuid + ""String_Node_Str"",count);
}","public void setWins(String playername,int count){
  String uuid=Bukkit.getPlayer(playername).getUniqueId().toString();
  MinigamesAPI.getAPI().pinstances.get(plugin).getStatsConfig().getConfig().set(""String_Node_Str"" + uuid + ""String_Node_Str"",count);
  MinigamesAPI.getAPI().pinstances.get(plugin).getStatsConfig().saveConfig();
}",0.8664383561643836
86114,"public void setPoints(String playername,int count){
  String uuid=Bukkit.getPlayer(playername).getUniqueId().toString();
  MinigamesAPI.getAPI().pinstances.get(plugin).getStatsConfig().getConfig().set(""String_Node_Str"" + uuid + ""String_Node_Str"",count);
}","public void setPoints(String playername,int count){
  String uuid=Bukkit.getPlayer(playername).getUniqueId().toString();
  MinigamesAPI.getAPI().pinstances.get(plugin).getStatsConfig().getConfig().set(""String_Node_Str"" + uuid + ""String_Node_Str"",count);
  MinigamesAPI.getAPI().pinstances.get(plugin).getStatsConfig().saveConfig();
}",0.8673469387755102
86115,"public static void openGunMainEditGUI(final JavaPlugin plugin,String p,final String g){
  IconMenu iconm=new IconMenu(""String_Node_Str"",9,new IconMenu.OptionClickEventHandler(){
    @Override public void onOptionClick(    IconMenu.OptionClickEvent event){
      String d=event.getName();
      Player p=event.getPlayer();
      if (d.startsWith(""String_Node_Str"")) {
        setPlayerGunMain(plugin,p.getName(),g,true);
      }
 else       if (d.startsWith(""String_Node_Str"")) {
        setPlayerGunMain(plugin,p.getName(),g,false);
      }
      event.setWillClose(false);
      openGUI(plugin,p.getName());
    }
  }
,plugin);
  iconm.setOption(0,new ItemStack(Material.WOOL,1,(short)5),""String_Node_Str"" + g + ""String_Node_Str"",""String_Node_Str"");
  iconm.setOption(8,new ItemStack(Material.WOOL,1,(short)14),""String_Node_Str"" + g + ""String_Node_Str"",""String_Node_Str"");
  iconm.open(Bukkit.getPlayerExact(p));
}","public static void openGunMainEditGUI(final JavaPlugin plugin,String p,final String g){
  IconMenu iconm;
  if (lastmainediticonm.containsKey(p)) {
    iconm=lastmainediticonm.get(p);
  }
 else {
    iconm=new IconMenu(""String_Node_Str"",9,new IconMenu.OptionClickEventHandler(){
      @Override public void onOptionClick(      IconMenu.OptionClickEvent event){
        String d=event.getName();
        Player p=event.getPlayer();
        if (d.startsWith(""String_Node_Str"")) {
          setPlayerGunMain(plugin,p.getName(),g,true);
        }
 else         if (d.startsWith(""String_Node_Str"")) {
          setPlayerGunMain(plugin,p.getName(),g,false);
        }
        openGUI(plugin,p.getName());
        event.setWillClose(false);
        event.setWillDestroy(true);
      }
    }
,plugin);
  }
  iconm.setOption(0,new ItemStack(Material.WOOL,1,(short)5),""String_Node_Str"" + g + ""String_Node_Str"",""String_Node_Str"");
  iconm.setOption(8,new ItemStack(Material.WOOL,1,(short)14),""String_Node_Str"" + g + ""String_Node_Str"",""String_Node_Str"");
  iconm.open(Bukkit.getPlayerExact(p));
}",0.8844422211105553
86116,"public static void setPlayerGunMain(JavaPlugin plugin,String p,String g,boolean val){
  FileConfiguration config=MinigamesAPI.getAPI().pinstances.get(plugin).getGunsConfig().getConfig();
  String path=""String_Node_Str"" + p + ""String_Node_Str""+ g+ ""String_Node_Str"";
  if (getPlayerAllMainGunsCount(plugin,p) > 1) {
    Bukkit.getPlayer(p).sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().too_many_main_guns);
    return;
  }
  config.set(path,val);
  MinigamesAPI.getAPI().pinstances.get(plugin).getGunsConfig().saveConfig();
}","public static void setPlayerGunMain(JavaPlugin plugin,String p,String g,boolean val){
  FileConfiguration config=MinigamesAPI.getAPI().pinstances.get(plugin).getGunsConfig().getConfig();
  String path=""String_Node_Str"" + p + ""String_Node_Str""+ g+ ""String_Node_Str"";
  if (getPlayerAllMainGunsCount(plugin,p) > 1 && val) {
    Bukkit.getPlayer(p).sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().too_many_main_guns);
    return;
  }
  config.set(path,val);
  MinigamesAPI.getAPI().pinstances.get(plugin).getGunsConfig().saveConfig();
}",0.9937332139659804
86117,"public static void openGUI(final JavaPlugin plugin,String p){
  final int credits=MinigamesAPI.getAPI().pinstances.get(plugin).getStatsInstance().getPoints(p);
  IconMenu iconm=new IconMenu(""String_Node_Str"" + credits + ""String_Node_Str"",36,new IconMenu.OptionClickEventHandler(){
    @Override public void onOptionClick(    IconMenu.OptionClickEvent event){
      String d=event.getName();
      Player p=event.getPlayer();
      if (MinigamesAPI.getAPI().pinstances.get(plugin).getAllGuns().containsKey(d)) {
        openGunMainEditGUI(plugin,p.getName(),d);
      }
 else {
        String raw=event.getItem().getItemMeta().getLore().get(0);
        String gun=raw.substring(0,raw.indexOf(""String_Node_Str""));
        Gun g=MinigamesAPI.getAPI().pinstances.get(plugin).getAllGuns().get(gun);
        if (g != null) {
          int[] pattributes=getPlayerGunAttributeLevels(plugin,p.getName(),g);
          boolean done=false;
          double cost=0.0D;
          if (d.startsWith(""String_Node_Str"")) {
            int i=pattributes[0];
            cost=Math.pow(level_multiplier,i) * speed_cost;
            if (i < 3 && credits >= cost) {
              openUpgradeGUI(plugin,p.getName(),gun,""String_Node_Str"",pattributes[0] + 1,cost);
              done=true;
            }
          }
 else           if (d.startsWith(""String_Node_Str"")) {
            int i=pattributes[1];
            cost=Math.pow(level_multiplier,i) * durability_cost;
            if (i < 3 && credits >= cost) {
              openUpgradeGUI(plugin,p.getName(),gun,""String_Node_Str"",pattributes[1] + 1,cost);
              done=true;
            }
          }
 else           if (d.startsWith(""String_Node_Str"")) {
            int i=pattributes[2];
            cost=Math.pow(level_multiplier,i) * shoot_amount_cost;
            if (i < 3 && credits >= cost) {
              openUpgradeGUI(plugin,p.getName(),gun,""String_Node_Str"",pattributes[2] + 1,cost);
              done=true;
            }
          }
 else           if (d.startsWith(""String_Node_Str"")) {
            int i=pattributes[3];
            cost=Math.pow(level_multiplier,i) * knockback_multiplier_cost;
            if (i < 3 && credits >= cost) {
              openUpgradeGUI(plugin,p.getName(),gun,""String_Node_Str"",pattributes[3] + 1,cost);
              done=true;
            }
          }
          if (!done) {
            p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().not_enough_credits.replaceAll(""String_Node_Str"",Double.toString(cost)));
          }
        }
      }
      event.setWillClose(false);
    }
  }
,plugin);
  int c=0;
  for (  String ac : MinigamesAPI.getAPI().pinstances.get(plugin).getAllGuns().keySet()) {
    Gun ac_=MinigamesAPI.getAPI().pinstances.get(plugin).getAllGuns().get(ac);
    int[] pattributes=getPlayerGunAttributeLevels(plugin,p,ac_);
    iconm.setOption(c,ac_.icon.get(0),ac,MinigamesAPI.getAPI().pinstances.get(plugin).getGunsConfig().getConfig().getString(""String_Node_Str"" + ac + ""String_Node_Str""));
    iconm.setOption(c + 2,new ItemStack(Material.SUGAR),""String_Node_Str"" + ChatColor.DARK_RED + pattributes[0],ac + ""String_Node_Str"");
    iconm.setOption(c + 3,new ItemStack(Material.DIAMOND),""String_Node_Str"" + ChatColor.DARK_RED + pattributes[1],ac + ""String_Node_Str"");
    iconm.setOption(c + 4,new ItemStack(Material.EGG),""String_Node_Str"" + ChatColor.DARK_RED + pattributes[2],ac + ""String_Node_Str"");
    iconm.setOption(c + 5,new ItemStack(Material.STICK),""String_Node_Str"" + ChatColor.DARK_RED + pattributes[3],ac + ""String_Node_Str"");
    c+=9;
  }
  iconm.open(Bukkit.getPlayerExact(p));
}","public static void openGUI(final JavaPlugin plugin,String p){
  final int credits=MinigamesAPI.getAPI().pinstances.get(plugin).getStatsInstance().getPoints(p);
  IconMenu iconm;
  if (lastmainiconm.containsKey(p)) {
    iconm=lastmainiconm.get(p);
  }
 else {
    iconm=new IconMenu(""String_Node_Str"" + credits + ""String_Node_Str"",36,new IconMenu.OptionClickEventHandler(){
      @Override public void onOptionClick(      IconMenu.OptionClickEvent event){
        String d=event.getName();
        Player p=event.getPlayer();
        if (MinigamesAPI.getAPI().pinstances.get(plugin).getAllGuns().containsKey(d)) {
          openGunMainEditGUI(plugin,p.getName(),d);
        }
 else {
          String raw=event.getItem().getItemMeta().getLore().get(0);
          String gun=raw.substring(0,raw.indexOf(""String_Node_Str""));
          Gun g=MinigamesAPI.getAPI().pinstances.get(plugin).getAllGuns().get(gun);
          if (g != null) {
            int[] pattributes=getPlayerGunAttributeLevels(plugin,p.getName(),g);
            boolean done=false;
            double cost=0.0D;
            if (d.startsWith(""String_Node_Str"")) {
              int i=pattributes[0];
              cost=Math.pow(level_multiplier,i) * speed_cost;
              if (i < 3 && credits >= cost) {
                openUpgradeGUI(plugin,p.getName(),gun,""String_Node_Str"",pattributes[0] + 1,cost);
                done=true;
              }
            }
 else             if (d.startsWith(""String_Node_Str"")) {
              int i=pattributes[1];
              cost=Math.pow(level_multiplier,i) * durability_cost;
              if (i < 3 && credits >= cost) {
                openUpgradeGUI(plugin,p.getName(),gun,""String_Node_Str"",pattributes[1] + 1,cost);
                done=true;
              }
            }
 else             if (d.startsWith(""String_Node_Str"")) {
              int i=pattributes[2];
              cost=Math.pow(level_multiplier,i) * shoot_amount_cost;
              if (i < 3 && credits >= cost) {
                openUpgradeGUI(plugin,p.getName(),gun,""String_Node_Str"",pattributes[2] + 1,cost);
                done=true;
              }
            }
 else             if (d.startsWith(""String_Node_Str"")) {
              int i=pattributes[3];
              cost=Math.pow(level_multiplier,i) * knockback_multiplier_cost;
              if (i < 3 && credits >= cost) {
                openUpgradeGUI(plugin,p.getName(),gun,""String_Node_Str"",pattributes[3] + 1,cost);
                done=true;
              }
            }
            if (!done) {
              p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().not_enough_credits.replaceAll(""String_Node_Str"",Double.toString(cost)));
            }
          }
        }
        event.setWillClose(false);
      }
    }
,plugin);
    lastmainiconm.put(p,iconm);
  }
  int c=0;
  for (  String ac : MinigamesAPI.getAPI().pinstances.get(plugin).getAllGuns().keySet()) {
    Gun ac_=MinigamesAPI.getAPI().pinstances.get(plugin).getAllGuns().get(ac);
    int[] pattributes=getPlayerGunAttributeLevels(plugin,p,ac_);
    iconm.setOption(c,ac_.icon.get(0),ac,MinigamesAPI.getAPI().pinstances.get(plugin).getGunsConfig().getConfig().getString(""String_Node_Str"" + ac + ""String_Node_Str""));
    iconm.setOption(c + 2,new ItemStack(Material.SUGAR),""String_Node_Str"" + ChatColor.DARK_RED + pattributes[0],ac + ""String_Node_Str"");
    iconm.setOption(c + 3,new ItemStack(Material.DIAMOND),""String_Node_Str"" + ChatColor.DARK_RED + pattributes[1],ac + ""String_Node_Str"");
    iconm.setOption(c + 4,new ItemStack(Material.EGG),""String_Node_Str"" + ChatColor.DARK_RED + pattributes[2],ac + ""String_Node_Str"");
    iconm.setOption(c + 5,new ItemStack(Material.STICK),""String_Node_Str"" + ChatColor.DARK_RED + pattributes[3],ac + ""String_Node_Str"");
    c+=9;
  }
  iconm.open(Bukkit.getPlayerExact(p));
}",0.968353585258379
86118,"@Override public void onOptionClick(IconMenu.OptionClickEvent event){
  String d=event.getName();
  Player p=event.getPlayer();
  if (d.startsWith(""String_Node_Str"")) {
    setPlayerGunLevel(plugin,p.getName(),g,attribute,level,cost);
    p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().attributelevel_increased.replaceAll(""String_Node_Str"",attribute));
  }
  event.setWillClose(false);
  openGUI(plugin,p.getName());
}","@Override public void onOptionClick(IconMenu.OptionClickEvent event){
  String d=event.getName();
  Player p=event.getPlayer();
  if (d.startsWith(""String_Node_Str"")) {
    setPlayerGunLevel(plugin,p.getName(),g,attribute,level,cost);
    p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().attributelevel_increased.replaceAll(""String_Node_Str"",attribute));
  }
  openGUI(plugin,p.getName());
  event.setWillClose(false);
  event.setWillDestroy(true);
}",0.9053763440860216
86119,"public static void openUpgradeGUI(final JavaPlugin plugin,String p,final String g,final String attribute,final int level,final double cost){
  IconMenu iconm=new IconMenu(""String_Node_Str"",9,new IconMenu.OptionClickEventHandler(){
    @Override public void onOptionClick(    IconMenu.OptionClickEvent event){
      String d=event.getName();
      Player p=event.getPlayer();
      if (d.startsWith(""String_Node_Str"")) {
        setPlayerGunLevel(plugin,p.getName(),g,attribute,level,cost);
        p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().attributelevel_increased.replaceAll(""String_Node_Str"",attribute));
      }
      event.setWillClose(false);
      openGUI(plugin,p.getName());
    }
  }
,plugin);
  iconm.setOption(0,new ItemStack(Material.WOOL,1,(short)5),""String_Node_Str"" + attribute + ""String_Node_Str"",""String_Node_Str"");
  iconm.setOption(8,new ItemStack(Material.WOOL,1,(short)14),""String_Node_Str"" + attribute + ""String_Node_Str"",""String_Node_Str"");
  iconm.open(Bukkit.getPlayerExact(p));
}","public static void openUpgradeGUI(final JavaPlugin plugin,String p,final String g,final String attribute,final int level,final double cost){
  IconMenu iconm;
  if (lastupgradeiconm.containsKey(p)) {
    iconm=lastupgradeiconm.get(p);
  }
 else {
    iconm=new IconMenu(""String_Node_Str"",9,new IconMenu.OptionClickEventHandler(){
      @Override public void onOptionClick(      IconMenu.OptionClickEvent event){
        String d=event.getName();
        Player p=event.getPlayer();
        if (d.startsWith(""String_Node_Str"")) {
          setPlayerGunLevel(plugin,p.getName(),g,attribute,level,cost);
          p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().attributelevel_increased.replaceAll(""String_Node_Str"",attribute));
        }
        openGUI(plugin,p.getName());
        event.setWillClose(false);
        event.setWillDestroy(true);
      }
    }
,plugin);
  }
  iconm.setOption(0,new ItemStack(Material.WOOL,1,(short)5),""String_Node_Str"" + attribute + ""String_Node_Str"",""String_Node_Str"");
  iconm.setOption(8,new ItemStack(Material.WOOL,1,(short)14),""String_Node_Str"" + attribute + ""String_Node_Str"",""String_Node_Str"");
  iconm.open(Bukkit.getPlayerExact(p));
}",0.8998664886515354
86120,"public static void setPlayerGunLevel(JavaPlugin plugin,String p,String g,String attribute,int level,double cost){
  int credits=MinigamesAPI.getAPI().pinstances.get(plugin).getStatsInstance().getPoints(p);
  FileConfiguration config=MinigamesAPI.getAPI().pinstances.get(plugin).getGunsConfig().getConfig();
  String path=""String_Node_Str"" + p + ""String_Node_Str""+ g+ ""String_Node_Str"";
  config.set(path + attribute,level);
  MinigamesAPI.getAPI().pinstances.get(plugin).getGunsConfig().saveConfig();
  MinigamesAPI.getAPI().pinstances.get(plugin).getStatsInstance().setPoints(p,(int)(cost - credits));
}","public static void setPlayerGunLevel(JavaPlugin plugin,String p,String g,String attribute,int level,double cost){
  int credits=MinigamesAPI.getAPI().pinstances.get(plugin).getStatsInstance().getPoints(p);
  FileConfiguration config=MinigamesAPI.getAPI().pinstances.get(plugin).getGunsConfig().getConfig();
  String path=""String_Node_Str"" + p + ""String_Node_Str""+ g+ ""String_Node_Str"";
  config.set(path + attribute,level);
  MinigamesAPI.getAPI().pinstances.get(plugin).getGunsConfig().saveConfig();
  MinigamesAPI.getAPI().pinstances.get(plugin).getStatsInstance().setPoints(p,(int)(credits - cost));
}",0.9850993377483444
86121,"public boolean stopArena(PluginInstance pli,CommandSender sender,String[] args,String uber_permission,String cmd,String action,JavaPlugin plugin,Player p){
  if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
    sender.sendMessage(pli.getMessagesConfig().no_perm);
    return true;
  }
  if (args.length > 1) {
    Arena temp=pli.getArenaByName(args[1]);
    if (temp != null) {
      temp.stop();
      sender.sendMessage(pli.getMessagesConfig().arena_action.replaceAll(""String_Node_Str"",args[1]).replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
    }
  }
 else {
    sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
  }
  return true;
}","public boolean stopArena(PluginInstance pli,CommandSender sender,String[] args,String uber_permission,String cmd,String action,JavaPlugin plugin,Player p){
  if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
    sender.sendMessage(pli.getMessagesConfig().no_perm);
    return true;
  }
  if (args.length > 1) {
    Arena temp=pli.getArenaByName(args[1]);
    if (temp != null) {
      temp.stop();
      sender.sendMessage(pli.getMessagesConfig().arena_action.replaceAll(""String_Node_Str"",args[1]).replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
    }
  }
 else {
    sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
  return true;
}",0.9854545454545456
86122,"/** 
 * Leaves the current arena, won't do anything if not present in any arena
 * @param playername
 * @param fullLeave Determines if player left only minigame or the server
 */
public void leavePlayer(String playername,boolean fullLeave){
  if (!this.containsPlayer(playername)) {
    return;
  }
  this.players.remove(playername);
  MinigamesAPI.global_players.remove(playername);
  if (fullLeave) {
    return;
  }
  final Player p=Bukkit.getPlayer(playername);
  Util.clearInv(p);
  p.getInventory().setContents(pinv.get(playername));
  p.getInventory().setArmorContents(pinv_armor.get(playername));
  p.updateInventory();
  MinigamesAPI.getAPI().pinstances.get(plugin).getRewardsInstance().giveReward(playername);
  MinigamesAPI.global_players.remove(playername);
  final String arenaname=this.getName();
  Util.teleportPlayerFixed(p,this.mainlobby);
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      p.setFlying(false);
      if (!p.isOp()) {
        p.setAllowFlight(false);
      }
      if (pgamemode.containsKey(p.getName())) {
        p.setGameMode(pgamemode.get(p.getName()));
      }
      try {
        MinigamesAPI.getAPI().pinstances.get(plugin).scoreboardManager.removeScoreboard(arenaname,p);
      }
 catch (      Exception e) {
      }
    }
  }
,5L);
  if (this.getAllPlayers().size() < 1) {
    this.stop();
  }
}","/** 
 * Leaves the current arena, won't do anything if not present in any arena
 * @param playername
 * @param fullLeave Determines if player left only minigame or the server
 */
public void leavePlayer(String playername,boolean fullLeave){
  if (!this.containsPlayer(playername)) {
    return;
  }
  this.players.remove(playername);
  MinigamesAPI.global_players.remove(playername);
  if (fullLeave) {
    return;
  }
  final Player p=Bukkit.getPlayer(playername);
  Util.clearInv(p);
  p.getInventory().setContents(pinv.get(playername));
  p.getInventory().setArmorContents(pinv_armor.get(playername));
  p.updateInventory();
  p.setWalkSpeed(0.2F);
  MinigamesAPI.getAPI().pinstances.get(plugin).getRewardsInstance().giveReward(playername);
  MinigamesAPI.global_players.remove(playername);
  final String arenaname=this.getName();
  Util.teleportPlayerFixed(p,this.mainlobby);
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      p.setFlying(false);
      if (!p.isOp()) {
        p.setAllowFlight(false);
      }
      if (pgamemode.containsKey(p.getName())) {
        p.setGameMode(pgamemode.get(p.getName()));
      }
      try {
        MinigamesAPI.getAPI().pinstances.get(plugin).scoreboardManager.removeScoreboard(arenaname,p);
      }
 catch (      Exception e) {
      }
    }
  }
,5L);
  if (this.getAllPlayers().size() < 1) {
    this.stop();
  }
}",0.9913482335976928
86123,"/** 
 * Saves a given arena if it was set up properly.
 * @return Arena or null if setup failed
 */
public Arena saveArena(JavaPlugin plugin,String arenaname){
  if (!Validator.isArenaValid(plugin,arenaname)) {
    Bukkit.getConsoleSender().sendMessage(ChatColor.RED + ""String_Node_Str"" + arenaname+ ""String_Node_Str"");
    return null;
  }
  PluginInstance pli=MinigamesAPI.getAPI().pinstances.get(plugin);
  if (pli.getArenaByName(arenaname) != null) {
    pli.removeArenaByName(arenaname);
  }
  Arena a=Util.initArena(plugin,arenaname);
  this.setArenaVIP(plugin,arenaname,false);
  pli.addArena(a);
  return a;
}","/** 
 * Saves a given arena if it was set up properly.
 * @return Arena or null if setup failed
 */
public Arena saveArena(JavaPlugin plugin,String arenaname){
  if (!Validator.isArenaValid(plugin,arenaname)) {
    Bukkit.getConsoleSender().sendMessage(ChatColor.RED + ""String_Node_Str"" + arenaname+ ""String_Node_Str"");
    return null;
  }
  PluginInstance pli=MinigamesAPI.getAPI().pinstances.get(plugin);
  if (pli.getArenaByName(arenaname) != null) {
    pli.removeArenaByName(arenaname);
  }
  Arena a=Util.initArena(plugin,arenaname);
  if (a.getArenaType() == ArenaType.REGENERATION) {
    if (Util.isComponentForArenaValid(plugin,arenaname,""String_Node_Str"")) {
      Util.saveArenaToFile(plugin,arenaname);
    }
 else {
      Bukkit.getConsoleSender().sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  this.setArenaVIP(plugin,arenaname,false);
  pli.addArena(a);
  return a;
}",0.8155981493721084
86124,"public static void saveArenaToFile(JavaPlugin plugin,String arena){
  File f=new File(plugin.getDataFolder() + ""String_Node_Str"" + arena);
  Cuboid c=new Cuboid(Util.getComponentForArena(plugin,arena,""String_Node_Str"",""String_Node_Str""),Util.getComponentForArena(plugin,arena,""String_Node_Str"",""String_Node_Str""));
  Location start=c.getLowLoc();
  Location end=c.getHighLoc();
  int width=end.getBlockX() - start.getBlockX();
  int length=end.getBlockZ() - start.getBlockZ();
  int height=end.getBlockY() - start.getBlockY();
  MinigamesAPI.getAPI().getLogger().info(""String_Node_Str"" + Integer.toString(width) + ""String_Node_Str""+ Integer.toString(height)+ ""String_Node_Str""+ Integer.toString(length));
  MinigamesAPI.getAPI().getLogger().info(""String_Node_Str"" + Integer.toString(width * height * length));
  FileOutputStream fos;
  ObjectOutputStream oos=null;
  try {
    fos=new FileOutputStream(f);
    oos=new BukkitObjectOutputStream(fos);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  for (int i=0; i <= width; i++) {
    for (int j=0; j <= height; j++) {
      for (int k=0; k <= length; k++) {
        Block change=c.getWorld().getBlockAt(start.getBlockX() + i,start.getBlockY() + j,start.getBlockZ() + k);
        ArenaBlock bl=new ArenaBlock(change);
        try {
          oos.writeObject(bl);
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
  }
  try {
    oos.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  MinigamesAPI.getAPI().getLogger().info(""String_Node_Str"");
}","public static void saveArenaToFile(JavaPlugin plugin,String arena){
  File f=new File(plugin.getDataFolder() + ""String_Node_Str"" + arena);
  Cuboid c=new Cuboid(Util.getComponentForArena(plugin,arena,""String_Node_Str""),Util.getComponentForArena(plugin,arena,""String_Node_Str""));
  Location start=c.getLowLoc();
  Location end=c.getHighLoc();
  int width=end.getBlockX() - start.getBlockX();
  int length=end.getBlockZ() - start.getBlockZ();
  int height=end.getBlockY() - start.getBlockY();
  MinigamesAPI.getAPI().getLogger().info(""String_Node_Str"" + Integer.toString(width) + ""String_Node_Str""+ Integer.toString(height)+ ""String_Node_Str""+ Integer.toString(length));
  MinigamesAPI.getAPI().getLogger().info(""String_Node_Str"" + Integer.toString(width * height * length));
  FileOutputStream fos;
  ObjectOutputStream oos=null;
  try {
    fos=new FileOutputStream(f);
    oos=new BukkitObjectOutputStream(fos);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  for (int i=0; i <= width; i++) {
    for (int j=0; j <= height; j++) {
      for (int k=0; k <= length; k++) {
        Block change=c.getWorld().getBlockAt(start.getBlockX() + i,start.getBlockY() + j,start.getBlockZ() + k);
        ArenaBlock bl=new ArenaBlock(change);
        try {
          oos.writeObject(bl);
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
  }
  try {
    oos.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  MinigamesAPI.getAPI().getLogger().info(""String_Node_Str"");
}",0.9884393063583816
86125,"/** 
 * Leaves the current arena, won't do anything if not present in any arena
 * @param playername
 * @param fullLeave Determines if player left only minigame or the server
 */
public void leavePlayer(String playername,boolean fullLeave){
  if (!this.containsPlayer(playername)) {
    return;
  }
  this.players.remove(playername);
  MinigamesAPI.getAPI().pinstances.get(plugin).global_players.remove(playername);
  if (fullLeave) {
    return;
  }
  final Player p=Bukkit.getPlayer(playername);
  Util.clearInv(p);
  p.getInventory().setContents(pinv.get(playername));
  p.getInventory().setArmorContents(pinv_armor.get(playername));
  p.updateInventory();
  p.setWalkSpeed(0.2F);
  MinigamesAPI.getAPI().pinstances.get(plugin).getRewardsInstance().giveReward(playername);
  MinigamesAPI.getAPI().pinstances.get(plugin).global_players.remove(playername);
  if (MinigamesAPI.getAPI().pinstances.get(plugin).global_lost.containsKey(playername)) {
    MinigamesAPI.getAPI().pinstances.get(plugin).global_lost.remove(playername);
  }
  final String arenaname=this.getName();
  Util.teleportPlayerFixed(p,this.mainlobby);
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      p.setFlying(false);
      if (!p.isOp()) {
        p.setAllowFlight(false);
      }
      if (pgamemode.containsKey(p.getName())) {
        p.setGameMode(pgamemode.get(p.getName()));
      }
      try {
        MinigamesAPI.getAPI().pinstances.get(plugin).scoreboardManager.removeScoreboard(arenaname,p);
      }
 catch (      Exception e) {
      }
    }
  }
,5L);
  if (this.getAllPlayers().size() < 2) {
    this.stop();
  }
}","/** 
 * Leaves the current arena, won't do anything if not present in any arena
 * @param playername
 * @param fullLeave Determines if player left only minigame or the server
 */
public void leavePlayer(String playername,boolean fullLeave){
  if (!this.containsPlayer(playername)) {
    return;
  }
  this.players.remove(playername);
  MinigamesAPI.getAPI().pinstances.get(plugin).global_players.remove(playername);
  if (fullLeave) {
    return;
  }
  final Player p=Bukkit.getPlayer(playername);
  Util.clearInv(p);
  p.getInventory().setContents(pinv.get(playername));
  p.getInventory().setArmorContents(pinv_armor.get(playername));
  p.updateInventory();
  p.setWalkSpeed(0.2F);
  p.removePotionEffect(PotionEffectType.JUMP);
  MinigamesAPI.getAPI().pinstances.get(plugin).getRewardsInstance().giveReward(playername);
  MinigamesAPI.getAPI().pinstances.get(plugin).global_players.remove(playername);
  if (MinigamesAPI.getAPI().pinstances.get(plugin).global_lost.containsKey(playername)) {
    MinigamesAPI.getAPI().pinstances.get(plugin).global_lost.remove(playername);
  }
  final String arenaname=this.getName();
  Util.teleportPlayerFixed(p,this.mainlobby);
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      p.setFlying(false);
      if (!p.isOp()) {
        p.setAllowFlight(false);
      }
      if (pgamemode.containsKey(p.getName())) {
        p.setGameMode(pgamemode.get(p.getName()));
      }
      try {
        MinigamesAPI.getAPI().pinstances.get(plugin).scoreboardManager.removeScoreboard(arenaname,p);
      }
 catch (      Exception e) {
      }
    }
  }
,5L);
  if (this.getAllPlayers().size() < 2) {
    this.stop();
  }
}",0.9858561540776408
86126,"/** 
 * Leaves the current arena, won't do anything if not present in any arena
 * @param playername
 * @param fullLeave Determines if player left only minigame or the server
 */
public void leavePlayer(String playername,boolean fullLeave){
  if (!this.containsPlayer(playername)) {
    return;
  }
  this.players.remove(playername);
  MinigamesAPI.global_players.remove(playername);
  if (fullLeave) {
    return;
  }
  final Player p=Bukkit.getPlayer(playername);
  Util.clearInv(p);
  p.getInventory().setContents(pinv.get(playername));
  p.getInventory().setArmorContents(pinv_armor.get(playername));
  p.updateInventory();
  p.setWalkSpeed(0.2F);
  MinigamesAPI.getAPI().pinstances.get(plugin).getRewardsInstance().giveReward(playername);
  MinigamesAPI.global_players.remove(playername);
  final String arenaname=this.getName();
  Util.teleportPlayerFixed(p,this.mainlobby);
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      p.setFlying(false);
      if (!p.isOp()) {
        p.setAllowFlight(false);
      }
      if (pgamemode.containsKey(p.getName())) {
        p.setGameMode(pgamemode.get(p.getName()));
      }
      try {
        MinigamesAPI.getAPI().pinstances.get(plugin).scoreboardManager.removeScoreboard(arenaname,p);
      }
 catch (      Exception e) {
      }
    }
  }
,5L);
  if (this.getAllPlayers().size() < 1) {
    this.stop();
  }
}","/** 
 * Leaves the current arena, won't do anything if not present in any arena
 * @param playername
 * @param fullLeave Determines if player left only minigame or the server
 */
public void leavePlayer(String playername,boolean fullLeave){
  if (!this.containsPlayer(playername)) {
    return;
  }
  this.players.remove(playername);
  MinigamesAPI.global_players.remove(playername);
  if (fullLeave) {
    return;
  }
  final Player p=Bukkit.getPlayer(playername);
  Util.clearInv(p);
  p.getInventory().setContents(pinv.get(playername));
  p.getInventory().setArmorContents(pinv_armor.get(playername));
  p.updateInventory();
  p.setWalkSpeed(0.2F);
  MinigamesAPI.getAPI().pinstances.get(plugin).getRewardsInstance().giveReward(playername);
  MinigamesAPI.global_players.remove(playername);
  if (MinigamesAPI.getAPI().global_lost.containsKey(playername)) {
    MinigamesAPI.getAPI().global_lost.remove(playername);
  }
  final String arenaname=this.getName();
  Util.teleportPlayerFixed(p,this.mainlobby);
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      p.setFlying(false);
      if (!p.isOp()) {
        p.setAllowFlight(false);
      }
      if (pgamemode.containsKey(p.getName())) {
        p.setGameMode(pgamemode.get(p.getName()));
      }
      try {
        MinigamesAPI.getAPI().pinstances.get(plugin).scoreboardManager.removeScoreboard(arenaname,p);
      }
 catch (      Exception e) {
      }
    }
  }
,5L);
  if (this.getAllPlayers().size() < 1) {
    this.stop();
  }
}",0.955927570891698
86127,"/** 
 * Starts the lobby countdown and the arena afterwards You can insta-start an arena by using Arena.start();
 */
public void startLobby(){
  if (currentstate != ArenaState.JOIN) {
    return;
  }
  this.setArenaState(ArenaState.STARTING);
  currentlobbycount=MinigamesAPI.getAPI().lobby_countdown;
  final Arena a=this;
  currenttaskid=Bukkit.getScheduler().runTaskTimer(MinigamesAPI.getAPI(),new Runnable(){
    public void run(){
      currentlobbycount--;
      if (currentlobbycount == 60 || currentlobbycount == 30 || currentlobbycount == 15 || currentlobbycount == 10 || currentlobbycount < 6) {
        for (        String p_ : a.getAllPlayers()) {
          if (Validator.isPlayerOnline(p_)) {
            Player p=Bukkit.getPlayer(p_);
            p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().teleporting_to_arena_in.replaceAll(""String_Node_Str"",Integer.toString(currentlobbycount)));
          }
        }
      }
      if (currentlobbycount < 0) {
        Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
          public void run(){
            currentarena.getArena().start();
          }
        }
,10L);
        try {
          Bukkit.getScheduler().cancelTask(currenttaskid);
        }
 catch (        Exception e) {
        }
      }
    }
  }
,5L,20).getTaskId();
}","/** 
 * Starts the lobby countdown and the arena afterwards You can insta-start an arena by using Arena.start();
 */
public void startLobby(){
  if (currentstate != ArenaState.JOIN) {
    return;
  }
  this.setArenaState(ArenaState.STARTING);
  currentlobbycount=MinigamesAPI.getAPI().lobby_countdown;
  final Arena a=this;
  currenttaskid=Bukkit.getScheduler().runTaskTimer(MinigamesAPI.getAPI(),new Runnable(){
    public void run(){
      currentlobbycount--;
      if (currentlobbycount == 60 || currentlobbycount == 30 || currentlobbycount == 15 || currentlobbycount == 10 || currentlobbycount < 6) {
        for (        String p_ : a.getAllPlayers()) {
          if (Validator.isPlayerOnline(p_)) {
            Player p=Bukkit.getPlayer(p_);
            p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().teleporting_to_arena_in.replaceAll(""String_Node_Str"",Integer.toString(currentlobbycount)));
          }
        }
      }
      if (currentlobbycount < 1) {
        Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
          public void run(){
            currentarena.getArena().start();
          }
        }
,10L);
        try {
          Bukkit.getScheduler().cancelTask(currenttaskid);
        }
 catch (        Exception e) {
        }
      }
    }
  }
,5L,20).getTaskId();
}",0.9992481203007518
86128,"@EventHandler public void onSignChange(SignChangeEvent event){
  Player p=event.getPlayer();
  if (event.getLine(0).toLowerCase().equalsIgnoreCase(""String_Node_Str"")) {
    if (event.getPlayer().hasPermission(""String_Node_Str"") || event.getPlayer().isOp()) {
      if (!event.getLine(1).equalsIgnoreCase(""String_Node_Str"")) {
        String arena=event.getLine(1);
        PluginInstance pli=MinigamesAPI.getAPI().pinstances.get(plugin);
        if (Validator.isArenaValid(plugin,arena)) {
          pli.getArenasConfig().getConfig().set(""String_Node_Str"" + arena + ""String_Node_Str"",p.getWorld().getName());
          pli.getArenasConfig().getConfig().set(""String_Node_Str"" + arena + ""String_Node_Str"",event.getBlock().getLocation().getBlockX());
          pli.getArenasConfig().getConfig().set(""String_Node_Str"" + arena + ""String_Node_Str"",event.getBlock().getLocation().getBlockY());
          pli.getArenasConfig().getConfig().set(""String_Node_Str"" + arena + ""String_Node_Str"",event.getBlock().getLocation().getBlockZ());
          pli.getArenasConfig().saveConfig();
          p.sendMessage(pli.getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          p.sendMessage(pli.getMessagesConfig().arena_invalid);
          event.getBlock().breakNaturally();
        }
        Arena a=pli.getArenaByName(arena);
        if (a != null) {
          a.setSignLocation(event.getBlock().getLocation());
          Util.updateSign(plugin,a,event);
        }
 else {
        }
      }
    }
  }
}","@EventHandler public void onSignChange(SignChangeEvent event){
  Player p=event.getPlayer();
  if (event.getLine(0).toLowerCase().equalsIgnoreCase(""String_Node_Str"")) {
    if (event.getPlayer().hasPermission(""String_Node_Str"") || event.getPlayer().isOp()) {
      if (!event.getLine(1).equalsIgnoreCase(""String_Node_Str"")) {
        String arena=event.getLine(1);
        PluginInstance pli=MinigamesAPI.getAPI().pinstances.get(plugin);
        if (Validator.isArenaValid(plugin,arena)) {
          pli.getArenasConfig().getConfig().set(""String_Node_Str"" + arena + ""String_Node_Str"",p.getWorld().getName());
          pli.getArenasConfig().getConfig().set(""String_Node_Str"" + arena + ""String_Node_Str"",event.getBlock().getLocation().getBlockX());
          pli.getArenasConfig().getConfig().set(""String_Node_Str"" + arena + ""String_Node_Str"",event.getBlock().getLocation().getBlockY());
          pli.getArenasConfig().getConfig().set(""String_Node_Str"" + arena + ""String_Node_Str"",event.getBlock().getLocation().getBlockZ());
          pli.getArenasConfig().saveConfig();
          p.sendMessage(pli.getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          p.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",arena));
          event.getBlock().breakNaturally();
        }
        Arena a=pli.getArenaByName(arena);
        if (a != null) {
          a.setSignLocation(event.getBlock().getLocation());
          Util.updateSign(plugin,a,event);
        }
 else {
        }
      }
    }
  }
}",0.988468930172966
86129,"/** 
 * Sets a new spawn for a multi-spawn arena without the need of a given index
 * @param plugin
 * @param arenaname
 * @param l Location of the spawn
 */
public void autoSetSpawn(JavaPlugin plugin,String arenaname,Location l){
  int count=Util.getAllSpawns(plugin,arenaname).size();
  Util.saveComponentForArena(plugin,arenaname,""String_Node_Str"" + Integer.toString(count),l);
}","/** 
 * Sets a new spawn for a multi-spawn arena without the need of a given index
 * @param plugin
 * @param arenaname
 * @param l Location of the spawn
 * @return the automatically used index
 */
public int autoSetSpawn(JavaPlugin plugin,String arenaname,Location l){
  int count=Util.getAllSpawns(plugin,arenaname).size();
  Util.saveComponentForArena(plugin,arenaname,""String_Node_Str"" + Integer.toString(count),l);
  return count;
}",0.9230769230769232
86130,"public static void teleportAllPlayers(ArrayList<String> players,ArrayList<Location> locs){
  Util.teleportAllPlayers(players,locs.get(0));
}","public static void teleportAllPlayers(ArrayList<String> players,ArrayList<Location> locs){
  int currentid=0;
  int locslength=locs.size();
  for (  String p_ : players) {
    Player p=Bukkit.getPlayer(p_);
    Util.teleportPlayerFixed(p,locs.get(currentid));
    currentid++;
    if (currentid > locslength - 1) {
      currentid=0;
    }
  }
}",0.511340206185567
86131,"/** 
 * Joins the waiting lobby of an arena
 * @param playername
 */
public void joinPlayerLobby(String playername){
  if (this.getArenaState() != ArenaState.JOIN && this.getArenaState() != ArenaState.STARTING) {
    return;
  }
  if (this.getAllPlayers().size() > this.max_players - 1) {
    return;
  }
  if (this.getAllPlayers().size() == this.max_players - 1) {
    if (currentlobbycount > 16) {
      currentlobbycount=16;
    }
  }
  MinigamesAPI.getAPI().global_players.put(playername,this);
  this.players.add(playername);
  if (Validator.isPlayerValid(playername,this)) {
    final Player p=Bukkit.getPlayer(playername);
    if (shouldClearInventoryOnJoin) {
      pinv.put(playername,p.getInventory().getContents());
      pinv_armor.put(playername,p.getInventory().getArmorContents());
      if (this.getArenaType() == ArenaType.JUMPNRUN) {
        Util.teleportPlayerFixed(p,this.spawns.get(0));
      }
 else {
        Util.teleportPlayerFixed(p,this.waitinglobby);
      }
      Bukkit.getScheduler().runTaskLater(MinigamesAPI.getAPI(),new Runnable(){
        public void run(){
          Util.clearInv(p);
          p.getInventory().addItem(new ItemStack(plugin.getConfig().getInt(""String_Node_Str"")));
          p.updateInventory();
          pgamemode.put(p.getName(),p.getGameMode());
          p.setGameMode(GameMode.SURVIVAL);
        }
      }
,10L);
      if (this.getAllPlayers().size() > this.min_players - 1) {
        this.startLobby();
      }
    }
  }
}","/** 
 * Joins the waiting lobby of an arena
 * @param playername
 */
public void joinPlayerLobby(String playername){
  if (this.getArenaState() != ArenaState.JOIN && this.getArenaState() != ArenaState.STARTING) {
    return;
  }
  if (this.getAllPlayers().size() > this.max_players - 1) {
    return;
  }
  if (this.getAllPlayers().size() == this.max_players - 1) {
    if (currentlobbycount > 16 && this.getArenaState() == ArenaState.STARTING) {
      currentlobbycount=16;
    }
  }
  MinigamesAPI.getAPI().global_players.put(playername,this);
  this.players.add(playername);
  if (Validator.isPlayerValid(playername,this)) {
    final Player p=Bukkit.getPlayer(playername);
    if (shouldClearInventoryOnJoin) {
      pinv.put(playername,p.getInventory().getContents());
      pinv_armor.put(playername,p.getInventory().getArmorContents());
      if (this.getArenaType() == ArenaType.JUMPNRUN) {
        Util.teleportPlayerFixed(p,this.spawns.get(0));
      }
 else {
        Util.teleportPlayerFixed(p,this.waitinglobby);
      }
      Bukkit.getScheduler().runTaskLater(MinigamesAPI.getAPI(),new Runnable(){
        public void run(){
          Util.clearInv(p);
          p.getInventory().addItem(new ItemStack(plugin.getConfig().getInt(""String_Node_Str"")));
          p.updateInventory();
          pgamemode.put(p.getName(),p.getGameMode());
          p.setGameMode(GameMode.SURVIVAL);
        }
      }
,10L);
      if (this.getAllPlayers().size() > this.min_players - 1) {
        this.startLobby();
      }
    }
  }
}",0.9843905679176354
86132,"/** 
 * Leaves the current arena, won't do anything if not present in any arena
 * @param playername
 * @param fullLeave Determines if player left only minigame or the server
 */
public void leavePlayer(String playername,boolean fullLeave){
  if (!this.containsPlayer(playername)) {
    return;
  }
  this.players.remove(playername);
  MinigamesAPI.global_players.remove(playername);
  if (fullLeave) {
    return;
  }
  final Player p=Bukkit.getPlayer(playername);
  Util.clearInv(p);
  p.getInventory().setContents(pinv.get(playername));
  p.getInventory().setArmorContents(pinv_armor.get(playername));
  p.updateInventory();
  MinigamesAPI.getAPI().pinstances.get(plugin).getRewardsInstance().giveReward(playername);
  MinigamesAPI.global_players.remove(playername);
  final String arenaname=this.getName();
  Util.teleportPlayerFixed(p,this.mainlobby);
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      p.setFlying(false);
      if (!p.isOp()) {
        p.setAllowFlight(false);
      }
      if (pgamemode.containsKey(p.getName())) {
        p.setGameMode(pgamemode.get(p.getName()));
      }
      try {
        MinigamesAPI.getAPI().pinstances.get(plugin).scoreboardManager.removeScoreboard(arenaname,p);
      }
 catch (      Exception e) {
      }
    }
  }
,5L);
}","/** 
 * Leaves the current arena, won't do anything if not present in any arena
 * @param playername
 * @param fullLeave Determines if player left only minigame or the server
 */
public void leavePlayer(String playername,boolean fullLeave){
  if (!this.containsPlayer(playername)) {
    return;
  }
  this.players.remove(playername);
  MinigamesAPI.global_players.remove(playername);
  if (fullLeave) {
    return;
  }
  final Player p=Bukkit.getPlayer(playername);
  Util.clearInv(p);
  p.getInventory().setContents(pinv.get(playername));
  p.getInventory().setArmorContents(pinv_armor.get(playername));
  p.updateInventory();
  MinigamesAPI.getAPI().pinstances.get(plugin).getRewardsInstance().giveReward(playername);
  MinigamesAPI.global_players.remove(playername);
  final String arenaname=this.getName();
  Util.teleportPlayerFixed(p,this.mainlobby);
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      p.setFlying(false);
      if (!p.isOp()) {
        p.setAllowFlight(false);
      }
      if (pgamemode.containsKey(p.getName())) {
        p.setGameMode(pgamemode.get(p.getName()));
      }
      try {
        MinigamesAPI.getAPI().pinstances.get(plugin).scoreboardManager.removeScoreboard(arenaname,p);
      }
 catch (      Exception e) {
      }
    }
  }
,5L);
  if (this.getAllPlayers().size() < 1) {
    this.stop();
  }
}",0.9769345238095238
86133,"/** 
 * Instantly starts the arena, teleports players and udpates the arena
 */
public void start(){
  currentingamecount=MinigamesAPI.getAPI().ingame_countdown;
  Util.teleportAllPlayers(currentarena.getArena().getAllPlayers(),currentarena.getArena().spawns);
  final Arena a=this;
  MinigamesAPI.getAPI().pinstances.get(plugin).scoreboardManager.updateScoreboard(a);
  currenttaskid=Bukkit.getScheduler().runTaskTimer(MinigamesAPI.getAPI(),new Runnable(){
    public void run(){
      currentingamecount--;
      if (currentingamecount == 60 || currentingamecount == 30 || currentingamecount == 15 || currentingamecount == 10 || currentingamecount < 6) {
        for (        String p_ : a.getAllPlayers()) {
          if (Validator.isPlayerOnline(p_)) {
            Player p=Bukkit.getPlayer(p_);
            p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().starting_in.replaceAll(""String_Node_Str"",Integer.toString(currentingamecount)));
          }
        }
      }
      if (currentingamecount < 1) {
        currentarena.getArena().setArenaState(ArenaState.INGAME);
        for (        String p_ : a.getAllPlayers()) {
          if (!Classes.hasClass(plugin,p_)) {
            Classes.setClass(plugin,""String_Node_Str"",p_);
          }
          Classes.getClass(plugin,p_);
        }
        try {
          Bukkit.getScheduler().cancelTask(currenttaskid);
        }
 catch (        Exception e) {
        }
      }
    }
  }
,5L,20).getTaskId();
}","/** 
 * Instantly starts the arena, teleports players and udpates the arena
 */
public void start(){
  try {
    Bukkit.getScheduler().cancelTask(currenttaskid);
  }
 catch (  Exception e) {
  }
  currentingamecount=MinigamesAPI.getAPI().ingame_countdown;
  for (  String p_ : currentarena.getArena().getAllPlayers()) {
    Player p=Bukkit.getPlayer(p_);
    p.setWalkSpeed(0.0F);
  }
  Util.teleportAllPlayers(currentarena.getArena().getAllPlayers(),currentarena.getArena().spawns);
  final Arena a=this;
  MinigamesAPI.getAPI().pinstances.get(plugin).scoreboardManager.updateScoreboard(a);
  currenttaskid=Bukkit.getScheduler().runTaskTimer(MinigamesAPI.getAPI(),new Runnable(){
    public void run(){
      currentingamecount--;
      if (currentingamecount == 60 || currentingamecount == 30 || currentingamecount == 15 || currentingamecount == 10 || currentingamecount < 6) {
        for (        String p_ : a.getAllPlayers()) {
          if (Validator.isPlayerOnline(p_)) {
            Player p=Bukkit.getPlayer(p_);
            p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().starting_in.replaceAll(""String_Node_Str"",Integer.toString(currentingamecount)));
          }
        }
      }
      if (currentingamecount < 1) {
        currentarena.getArena().setArenaState(ArenaState.INGAME);
        for (        String p_ : a.getAllPlayers()) {
          if (!Classes.hasClass(plugin,p_)) {
            Classes.setClass(plugin,""String_Node_Str"",p_);
          }
          Classes.getClass(plugin,p_);
          Player p=Bukkit.getPlayer(p_);
          p.setWalkSpeed(0.2F);
        }
        try {
          Bukkit.getScheduler().cancelTask(currenttaskid);
        }
 catch (        Exception e) {
        }
      }
    }
  }
,5L,20).getTaskId();
}",0.9095354523227384
86134,"/** 
 * Stops the arena and teleports all players to the mainlobby
 */
public void stop(){
  this.setArenaState(ArenaState.RESTARTING);
  ArrayList<String> temp=new ArrayList<String>(this.getAllPlayers());
  for (  String p_ : temp) {
    leavePlayer(p_,false);
  }
  if (this.getArenaType() == ArenaType.REGENERATION) {
    reset();
  }
 else {
    this.setArenaState(ArenaState.JOIN);
  }
  players.clear();
  pinv.clear();
  pinv_armor.clear();
}","/** 
 * Stops the arena and teleports all players to the mainlobby
 */
public void stop(){
  try {
    Bukkit.getScheduler().cancelTask(currenttaskid);
  }
 catch (  Exception e) {
  }
  this.setArenaState(ArenaState.RESTARTING);
  ArrayList<String> temp=new ArrayList<String>(this.getAllPlayers());
  for (  String p_ : temp) {
    leavePlayer(p_,false);
  }
  if (this.getArenaType() == ArenaType.REGENERATION) {
    reset();
  }
 else {
    this.setArenaState(ArenaState.JOIN);
  }
  players.clear();
  pinv.clear();
  pinv_armor.clear();
}",0.905241935483871
86135,"/** 
 * Starts the lobby countdown and the arena afterwards You can insta-start an arena by using Arena.start();
 */
public void startLobby(){
  if (currentstate != ArenaState.JOIN) {
    return;
  }
  this.setArenaState(ArenaState.STARTING);
  final Arena a=this;
  currenttaskid=Bukkit.getScheduler().runTaskTimer(MinigamesAPI.getAPI(),new Runnable(){
    public void run(){
      currentlobbycount++;
      if (currentlobbycount == 60 || currentlobbycount == 30 || currentlobbycount == 15 || currentlobbycount == 10 || currentlobbycount < 6) {
        for (        String p_ : a.getAllPlayers()) {
          if (Validator.isPlayerOnline(p_)) {
            Player p=Bukkit.getPlayer(p_);
            p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().teleporting_to_arena_in.replaceAll(""String_Node_Str"",Integer.toString(currentlobbycount)));
          }
        }
      }
      if (currentlobbycount > MinigamesAPI.getAPI().lobby_countdown) {
        currentarena.getArena().start();
        try {
          Bukkit.getScheduler().cancelTask(currenttaskid);
        }
 catch (        Exception e) {
        }
      }
    }
  }
,5L,20).getTaskId();
}","/** 
 * Starts the lobby countdown and the arena afterwards You can insta-start an arena by using Arena.start();
 */
public void startLobby(){
  if (currentstate != ArenaState.JOIN) {
    return;
  }
  this.setArenaState(ArenaState.STARTING);
  currentlobbycount=MinigamesAPI.getAPI().lobby_countdown;
  final Arena a=this;
  currenttaskid=Bukkit.getScheduler().runTaskTimer(MinigamesAPI.getAPI(),new Runnable(){
    public void run(){
      currentlobbycount--;
      if (currentlobbycount == 60 || currentlobbycount == 30 || currentlobbycount == 15 || currentlobbycount == 10 || currentlobbycount < 6) {
        for (        String p_ : a.getAllPlayers()) {
          if (Validator.isPlayerOnline(p_)) {
            Player p=Bukkit.getPlayer(p_);
            p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().teleporting_to_arena_in.replaceAll(""String_Node_Str"",Integer.toString(currentlobbycount)));
          }
        }
      }
      if (currentlobbycount < 0) {
        Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
          public void run(){
            currentarena.getArena().start();
          }
        }
,10L);
        try {
          Bukkit.getScheduler().cancelTask(currenttaskid);
        }
 catch (        Exception e) {
        }
      }
    }
  }
,5L,20).getTaskId();
}",0.8824232762056596
86136,"/** 
 * Saves a given arena if it was set up properly.
 * @return Arena or null if setup failed
 */
public Arena saveArena(JavaPlugin plugin,String arenaname){
  if (!Validator.isArenaValid(plugin,arenaname)) {
    Bukkit.getConsoleSender().sendMessage(ChatColor.RED + ""String_Node_Str"" + arenaname+ ""String_Node_Str"");
    return null;
  }
  Arena a=Util.initArena(plugin,arenaname);
  this.setArenaVIP(plugin,arenaname,false);
  MinigamesAPI.getAPI().pinstances.get(plugin).addArena(a);
  return a;
}","/** 
 * Saves a given arena if it was set up properly.
 * @return Arena or null if setup failed
 */
public Arena saveArena(JavaPlugin plugin,String arenaname){
  if (!Validator.isArenaValid(plugin,arenaname)) {
    Bukkit.getConsoleSender().sendMessage(ChatColor.RED + ""String_Node_Str"" + arenaname+ ""String_Node_Str"");
    return null;
  }
  PluginInstance pli=MinigamesAPI.getAPI().pinstances.get(plugin);
  if (pli.getArenaByName(arenaname) != null) {
    pli.removeArenaByName(arenaname);
  }
  Arena a=Util.initArena(plugin,arenaname);
  this.setArenaVIP(plugin,arenaname,false);
  pli.addArena(a);
  return a;
}",0.8185880250223414
86137,"/** 
 * Handles the default commands needed for arena management.
 * @param uber_permission Main setup permission. Example: Skywars.setup
 * @param cmd The command. Example: /sw
 * @param sender
 * @param args
 * @return
 */
public static boolean handleArgs(JavaPlugin plugin,String uber_permission,String cmd,CommandSender sender,String args[]){
  if (args.length > 0) {
    if (!(sender instanceof Player)) {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
    Player p=(Player)sender;
    PluginInstance pli=MinigamesAPI.getAPI().pinstances.get(plugin);
    String action=args[0];
    if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(pli.getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        pli.arenaSetup.setSpawn(plugin,args[1],p.getLocation());
        sender.sendMessage(pli.getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(pli.getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        pli.arenaSetup.setLobby(plugin,args[1],p.getLocation());
        sender.sendMessage(pli.getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(pli.getMessagesConfig().no_perm);
        return true;
      }
      pli.arenaSetup.setMainLobby(plugin,p.getLocation());
      sender.sendMessage(pli.getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(pli.getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 2) {
        if (args[2].equalsIgnoreCase(""String_Node_Str"")) {
          pli.arenaSetup.setBoundaries(plugin,args[1],p.getLocation(),true);
        }
 else         if (args[2].equalsIgnoreCase(""String_Node_Str"")) {
          pli.arenaSetup.setBoundaries(plugin,args[1],p.getLocation(),false);
        }
 else {
          sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
          return true;
        }
        sender.sendMessage(pli.getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(pli.getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        Arena temp=pli.arenaSetup.saveArena(plugin,args[1]);
        if (temp != null) {
          sender.sendMessage(pli.getMessagesConfig().successfully_saved_arena.replaceAll(""String_Node_Str"",args[1]));
        }
 else {
          sender.sendMessage(pli.getMessagesConfig().failed_saving_arena.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(pli.getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 2) {
        if (!Util.isNumeric(args[2])) {
          return true;
        }
        pli.arenaSetup.setPlayerCount(plugin,args[1],Integer.parseInt(args[2]),true);
        sender.sendMessage(pli.getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(pli.getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 2) {
        if (!Util.isNumeric(args[2])) {
          return true;
        }
        pli.arenaSetup.setPlayerCount(plugin,args[1],Integer.parseInt(args[2]),false);
        sender.sendMessage(pli.getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(pli.getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 2) {
        if (!args[2].equalsIgnoreCase(""String_Node_Str"") || !args[2].equalsIgnoreCase(""String_Node_Str"")) {
          return true;
        }
        pli.arenaSetup.setArenaVIP(plugin,args[1],Boolean.parseBoolean(args[2]));
        sender.sendMessage(pli.getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length > 1) {
        Arena temp=pli.getArenaByName(args[1]);
        if (temp != null) {
          temp.joinPlayerLobby(p.getName());
          sender.sendMessage(pli.getMessagesConfig().arena_action.replaceAll(""String_Node_Str"",args[1]).replaceAll(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
        sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (MinigamesAPI.getAPI().global_players.containsKey(p.getName())) {
        MinigamesAPI.getAPI().global_players.get(p.getName()).leavePlayer(p.getName(),false);
      }
 else {
        sender.sendMessage(pli.getMessagesConfig().not_in_arena);
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(pli.getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        Arena temp=pli.getArenaByName(args[1]);
        if (temp != null) {
          temp.start();
          sender.sendMessage(pli.getMessagesConfig().arena_action.replaceAll(""String_Node_Str"",args[1]).replaceAll(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
        sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(pli.getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        Arena temp=pli.getArenaByName(args[1]);
        if (temp != null) {
          temp.stop();
          sender.sendMessage(pli.getMessagesConfig().arena_action.replaceAll(""String_Node_Str"",args[1]).replaceAll(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
        sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(pli.getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        pli.getArenasConfig().getConfig().set(""String_Node_Str"" + args[1],null);
        pli.getArenasConfig().saveConfig();
        if (pli.removeArena(pli.getArenaByName(args[1]))) {
          sender.sendMessage(pli.getMessagesConfig().arena_action.replaceAll(""String_Node_Str"",args[1]).replaceAll(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          sender.sendMessage(pli.getMessagesConfig().failed_removing_arena.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      sendHelp(cmd,sender);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str"");
      for (      Arena a : pli.getArenas()) {
        if (args.length > 1) {
          sender.sendMessage(ChatColor.GREEN + a.getName() + ""String_Node_Str""+ a.getClass().getSimpleName().toString()+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(ChatColor.GREEN + a.getName());
        }
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      plugin.reloadConfig();
      pli.getMessagesConfig().reloadConfig();
      pli.getArenasConfig().reloadConfig();
      sender.sendMessage(pli.getMessagesConfig().successfully_reloaded);
    }
  }
 else {
    sendHelp(cmd,sender);
  }
  return true;
}","/** 
 * Handles the default commands needed for arena management.
 * @param uber_permission Main setup permission. Example: Skywars.setup
 * @param cmd The command. Example: /sw
 * @param sender
 * @param args
 * @return
 */
public static boolean handleArgs(JavaPlugin plugin,String uber_permission,String cmd,CommandSender sender,String args[]){
  if (args.length > 0) {
    if (!(sender instanceof Player)) {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
    Player p=(Player)sender;
    PluginInstance pli=MinigamesAPI.getAPI().pinstances.get(plugin);
    String action=args[0];
    if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(pli.getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        pli.arenaSetup.setSpawn(plugin,args[1],p.getLocation());
        sender.sendMessage(pli.getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(pli.getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        pli.arenaSetup.setLobby(plugin,args[1],p.getLocation());
        sender.sendMessage(pli.getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(pli.getMessagesConfig().no_perm);
        return true;
      }
      pli.arenaSetup.setMainLobby(plugin,p.getLocation());
      sender.sendMessage(pli.getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(pli.getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 2) {
        if (args[2].equalsIgnoreCase(""String_Node_Str"")) {
          pli.arenaSetup.setBoundaries(plugin,args[1],p.getLocation(),true);
        }
 else         if (args[2].equalsIgnoreCase(""String_Node_Str"")) {
          pli.arenaSetup.setBoundaries(plugin,args[1],p.getLocation(),false);
        }
 else {
          sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
          return true;
        }
        sender.sendMessage(pli.getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(pli.getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        Arena temp=pli.arenaSetup.saveArena(plugin,args[1]);
        if (temp != null) {
          sender.sendMessage(pli.getMessagesConfig().successfully_saved_arena.replaceAll(""String_Node_Str"",args[1]));
        }
 else {
          sender.sendMessage(pli.getMessagesConfig().failed_saving_arena.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(pli.getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 2) {
        if (!Util.isNumeric(args[2])) {
          return true;
        }
        pli.arenaSetup.setPlayerCount(plugin,args[1],Integer.parseInt(args[2]),true);
        if (pli.getArenaByName(args[1]) != null) {
          pli.getArenaByName(args[1]).setMaxPlayers(Integer.parseInt(args[2]));
        }
        sender.sendMessage(pli.getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(pli.getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 2) {
        if (!Util.isNumeric(args[2])) {
          return true;
        }
        pli.arenaSetup.setPlayerCount(plugin,args[1],Integer.parseInt(args[2]),false);
        if (pli.getArenaByName(args[1]) != null) {
          pli.getArenaByName(args[1]).setMinPlayers(Integer.parseInt(args[2]));
        }
        sender.sendMessage(pli.getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(pli.getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 2) {
        if (!args[2].equalsIgnoreCase(""String_Node_Str"") || !args[2].equalsIgnoreCase(""String_Node_Str"")) {
          return true;
        }
        pli.arenaSetup.setArenaVIP(plugin,args[1],Boolean.parseBoolean(args[2]));
        if (pli.getArenaByName(args[1]) != null) {
          pli.getArenaByName(args[1]).setVIPArena(Boolean.parseBoolean(args[2]));
        }
        sender.sendMessage(pli.getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length > 1) {
        Arena temp=pli.getArenaByName(args[1]);
        if (temp != null) {
          temp.joinPlayerLobby(p.getName());
          sender.sendMessage(pli.getMessagesConfig().arena_action.replaceAll(""String_Node_Str"",args[1]).replaceAll(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
        sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (MinigamesAPI.getAPI().global_players.containsKey(p.getName())) {
        MinigamesAPI.getAPI().global_players.get(p.getName()).leavePlayer(p.getName(),false);
      }
 else {
        sender.sendMessage(pli.getMessagesConfig().not_in_arena);
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(pli.getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        Arena temp=pli.getArenaByName(args[1]);
        if (temp != null) {
          temp.start();
          sender.sendMessage(pli.getMessagesConfig().arena_action.replaceAll(""String_Node_Str"",args[1]).replaceAll(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
        sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(pli.getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        Arena temp=pli.getArenaByName(args[1]);
        if (temp != null) {
          temp.stop();
          sender.sendMessage(pli.getMessagesConfig().arena_action.replaceAll(""String_Node_Str"",args[1]).replaceAll(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
        sender.sendMessage(pli.getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(pli.getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        pli.getArenasConfig().getConfig().set(""String_Node_Str"" + args[1],null);
        pli.getArenasConfig().saveConfig();
        if (pli.removeArena(pli.getArenaByName(args[1]))) {
          sender.sendMessage(pli.getMessagesConfig().arena_action.replaceAll(""String_Node_Str"",args[1]).replaceAll(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          sender.sendMessage(pli.getMessagesConfig().failed_removing_arena.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      sendHelp(cmd,sender);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str"");
      for (      Arena a : pli.getArenas()) {
        if (args.length > 1) {
          sender.sendMessage(ChatColor.GREEN + a.getName() + ""String_Node_Str""+ a.getClass().getSimpleName().toString()+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(ChatColor.GREEN + a.getName());
        }
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      plugin.reloadConfig();
      pli.getMessagesConfig().reloadConfig();
      pli.getArenasConfig().reloadConfig();
      sender.sendMessage(pli.getMessagesConfig().successfully_reloaded);
    }
  }
 else {
    sendHelp(cmd,sender);
  }
  return true;
}",0.9815658208631534
86138,"public static void loadArenaFromFileSYNC(final JavaPlugin plugin,final Arena arena){
  int failcount=0;
  final ArrayList<ArenaBlock> failedblocks=new ArrayList<ArenaBlock>();
  File f=new File(plugin.getDataFolder() + ""String_Node_Str"" + arena.getName());
  FileInputStream fis=null;
  BukkitObjectInputStream ois=null;
  try {
    fis=new FileInputStream(f);
    ois=new BukkitObjectInputStream(fis);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  try {
    while (true) {
      Object b=null;
      try {
        b=ois.readObject();
      }
 catch (      EOFException e) {
        MinigamesAPI.getAPI().getLogger().info(""String_Node_Str"" + arena.getName() + ""String_Node_Str"");
        arena.setArenaState(ArenaState.JOIN);
        Bukkit.getScheduler().runTask(plugin,new Runnable(){
          public void run(){
            Util.updateSign(plugin,arena);
          }
        }
);
      }
      if (b != null) {
        ArenaBlock ablock=(ArenaBlock)b;
        try {
          if (!ablock.getBlock().getWorld().getBlockAt(ablock.getBlock().getLocation()).getType().toString().equalsIgnoreCase(ablock.getMaterial().toString())) {
            ablock.getBlock().getWorld().getBlockAt(ablock.getBlock().getLocation()).setType(ablock.getMaterial());
          }
        }
 catch (        IllegalStateException e) {
          failcount+=1;
          failedblocks.add(ablock);
        }
      }
 else {
        break;
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
  try {
    ois.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  Bukkit.getServer().getScheduler().scheduleSyncDelayedTask(MinigamesAPI.getAPI(),new Runnable(){
    public void run(){
      for (      ArenaBlock ablock : failedblocks) {
        Bukkit.getServer().getWorld(ablock.world).getBlockAt(new Location(Bukkit.getServer().getWorld(ablock.world),ablock.x,ablock.y,ablock.z)).setType(Material.WOOL);
        Bukkit.getServer().getWorld(ablock.world).getBlockAt(new Location(Bukkit.getServer().getWorld(ablock.world),ablock.x,ablock.y,ablock.z)).getTypeId();
        Bukkit.getServer().getWorld(ablock.world).getBlockAt(new Location(Bukkit.getServer().getWorld(ablock.world),ablock.x,ablock.y,ablock.z)).setType(ablock.getMaterial());
      }
    }
  }
,40L);
  MinigamesAPI.getAPI().getLogger().info(""String_Node_Str"");
  return;
}","public static void loadArenaFromFileSYNC(final JavaPlugin plugin,final Arena arena){
  int failcount=0;
  final ArrayList<ArenaBlock> failedblocks=new ArrayList<ArenaBlock>();
  File f=new File(plugin.getDataFolder() + ""String_Node_Str"" + arena.getName());
  if (!f.exists()) {
    plugin.getLogger().warning(""String_Node_Str"" + arena.getName());
    arena.setArenaState(ArenaState.JOIN);
    Bukkit.getScheduler().runTask(plugin,new Runnable(){
      public void run(){
        Util.updateSign(plugin,arena);
      }
    }
);
    return;
  }
  FileInputStream fis=null;
  BukkitObjectInputStream ois=null;
  try {
    fis=new FileInputStream(f);
    ois=new BukkitObjectInputStream(fis);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  try {
    while (true) {
      Object b=null;
      try {
        b=ois.readObject();
      }
 catch (      EOFException e) {
        MinigamesAPI.getAPI().getLogger().info(""String_Node_Str"" + arena.getName() + ""String_Node_Str"");
        arena.setArenaState(ArenaState.JOIN);
        Bukkit.getScheduler().runTask(plugin,new Runnable(){
          public void run(){
            Util.updateSign(plugin,arena);
          }
        }
);
      }
      if (b != null) {
        ArenaBlock ablock=(ArenaBlock)b;
        try {
          if (!ablock.getBlock().getWorld().getBlockAt(ablock.getBlock().getLocation()).getType().toString().equalsIgnoreCase(ablock.getMaterial().toString())) {
            ablock.getBlock().getWorld().getBlockAt(ablock.getBlock().getLocation()).setType(ablock.getMaterial());
          }
        }
 catch (        IllegalStateException e) {
          failcount+=1;
          failedblocks.add(ablock);
        }
      }
 else {
        break;
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
  try {
    ois.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  Bukkit.getServer().getScheduler().scheduleSyncDelayedTask(MinigamesAPI.getAPI(),new Runnable(){
    public void run(){
      for (      ArenaBlock ablock : failedblocks) {
        Bukkit.getServer().getWorld(ablock.world).getBlockAt(new Location(Bukkit.getServer().getWorld(ablock.world),ablock.x,ablock.y,ablock.z)).setType(Material.WOOL);
        Bukkit.getServer().getWorld(ablock.world).getBlockAt(new Location(Bukkit.getServer().getWorld(ablock.world),ablock.x,ablock.y,ablock.z)).getTypeId();
        Bukkit.getServer().getWorld(ablock.world).getBlockAt(new Location(Bukkit.getServer().getWorld(ablock.world),ablock.x,ablock.y,ablock.z)).setType(ablock.getMaterial());
      }
    }
  }
,40L);
  MinigamesAPI.getAPI().getLogger().info(""String_Node_Str"");
  return;
}",0.9444012441679628
86139,"public static void loadClasses(JavaPlugin plugin){
  if (MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig().getConfig().isSet(""String_Node_Str"")) {
    for (    String aclass : MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig().getConfig().getConfigurationSection(""String_Node_Str"").getKeys(false)) {
      AClass n=new AClass(plugin,aclass,Util.parseItems(MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig().getConfig().getString(""String_Node_Str"" + aclass + ""String_Node_Str"")));
      MinigamesAPI.getAPI().pinstances.get(plugin).aclasses.put(aclass,n);
      if (!MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig().getConfig().isSet(""String_Node_Str"" + aclass + ""String_Node_Str"") || !MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig().getConfig().isSet(""String_Node_Str"" + aclass + ""String_Node_Str"")) {
        plugin.getLogger().warning(""String_Node_Str"" + aclass + ""String_Node_Str"");
      }
    }
  }
}","public static void loadClasses(JavaPlugin plugin){
  if (MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig().getConfig().isSet(""String_Node_Str"")) {
    for (    String aclass : MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig().getConfig().getConfigurationSection(""String_Node_Str"").getKeys(false)) {
      AClass n=new AClass(plugin,aclass,Util.parseItems(MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig().getConfig().getString(""String_Node_Str"" + aclass + ""String_Node_Str"")));
      MinigamesAPI.getAPI().pinstances.get(plugin).addAClass(aclass,n);
      if (!MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig().getConfig().isSet(""String_Node_Str"" + aclass + ""String_Node_Str"") || !MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig().getConfig().isSet(""String_Node_Str"" + aclass + ""String_Node_Str"")) {
        plugin.getLogger().warning(""String_Node_Str"" + aclass + ""String_Node_Str"");
      }
    }
  }
}",0.9902514109799896
86140,"public static void getClass(JavaPlugin plugin,String player){
  AClass c=MinigamesAPI.getAPI().pinstances.get(plugin).pclass.get(player);
  Player p=Bukkit.getServer().getPlayer(player);
  p.getInventory().clear();
  p.getInventory().setHelmet(null);
  p.getInventory().setChestplate(null);
  p.getInventory().setLeggings(null);
  p.getInventory().setBoots(null);
  p.updateInventory();
  p.getInventory().setContents(c.getItems());
  p.updateInventory();
}","public static void getClass(JavaPlugin plugin,String player){
  AClass c=MinigamesAPI.getAPI().pinstances.get(plugin).getPClasses().get(player);
  Player p=Bukkit.getServer().getPlayer(player);
  p.getInventory().clear();
  p.getInventory().setHelmet(null);
  p.getInventory().setChestplate(null);
  p.getInventory().setLeggings(null);
  p.getInventory().setBoots(null);
  p.updateInventory();
  p.getInventory().setContents(c.getItems());
  p.updateInventory();
}",0.979370249728556
86141,"public static void openGUI(final JavaPlugin plugin,String p){
  IconMenu iconm=new IconMenu(""String_Node_Str"",27,new IconMenu.OptionClickEventHandler(){
    @Override public void onOptionClick(    IconMenu.OptionClickEvent event){
      String d=event.getName();
      Player p=event.getPlayer();
      if (MinigamesAPI.getAPI().pinstances.get(plugin).aclasses.containsKey(d)) {
        Classes.setClass(plugin,d,p.getName());
      }
      event.setWillClose(true);
    }
  }
,plugin);
  int c=0;
  for (  String ac : MinigamesAPI.getAPI().pinstances.get(plugin).aclasses.keySet()) {
    iconm.setOption(c,new ItemStack(Material.SLIME_BALL),ac,MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig().getConfig().getString(""String_Node_Str"" + ac + ""String_Node_Str""));
    c++;
  }
  iconm.open(Bukkit.getPlayerExact(p));
}","public static void openGUI(final JavaPlugin plugin,String p){
  IconMenu iconm=new IconMenu(""String_Node_Str"",27,new IconMenu.OptionClickEventHandler(){
    @Override public void onOptionClick(    IconMenu.OptionClickEvent event){
      String d=event.getName();
      Player p=event.getPlayer();
      if (MinigamesAPI.getAPI().pinstances.get(plugin).getAClasses().containsKey(d)) {
        Classes.setClass(plugin,d,p.getName());
      }
      event.setWillClose(true);
    }
  }
,plugin);
  int c=0;
  for (  String ac : MinigamesAPI.getAPI().pinstances.get(plugin).getAClasses().keySet()) {
    iconm.setOption(c,new ItemStack(Material.SLIME_BALL),ac,MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig().getConfig().getString(""String_Node_Str"" + ac + ""String_Node_Str""));
    c++;
  }
  iconm.open(Bukkit.getPlayerExact(p));
}",0.9748803827751196
86142,"@Override public void onOptionClick(IconMenu.OptionClickEvent event){
  String d=event.getName();
  Player p=event.getPlayer();
  if (MinigamesAPI.getAPI().pinstances.get(plugin).aclasses.containsKey(d)) {
    Classes.setClass(plugin,d,p.getName());
  }
  event.setWillClose(true);
}","@Override public void onOptionClick(IconMenu.OptionClickEvent event){
  String d=event.getName();
  Player p=event.getPlayer();
  if (MinigamesAPI.getAPI().pinstances.get(plugin).getAClasses().containsKey(d)) {
    Classes.setClass(plugin,d,p.getName());
  }
  event.setWillClose(true);
}",0.9632224168126094
86143,"public static void setClass(JavaPlugin plugin,String classname,String player){
  if (!kitPlayerHasPermission(plugin,classname,Bukkit.getPlayer(player))) {
    Bukkit.getPlayer(player).sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig().getConfig().getString(""String_Node_Str""));
    return;
  }
  if (kitRequiresMoney(plugin,classname)) {
    kitTakeMoney(plugin,Bukkit.getPlayer(player),classname.toLowerCase());
  }
  MinigamesAPI.getAPI().pinstances.get(plugin).pclass.put(player,MinigamesAPI.getAPI().pinstances.get(plugin).aclasses.get(classname));
}","public static void setClass(JavaPlugin plugin,String classname,String player){
  if (!kitPlayerHasPermission(plugin,classname,Bukkit.getPlayer(player))) {
    Bukkit.getPlayer(player).sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getClassesConfig().getConfig().getString(""String_Node_Str""));
    return;
  }
  if (kitRequiresMoney(plugin,classname)) {
    kitTakeMoney(plugin,Bukkit.getPlayer(player),classname.toLowerCase());
  }
  MinigamesAPI.getAPI().pinstances.get(plugin).setPClass(player,MinigamesAPI.getAPI().pinstances.get(plugin).getAClasses().get(classname));
}",0.965576592082616
86144,"public static boolean hasClass(JavaPlugin plugin,String player){
  return MinigamesAPI.getAPI().pinstances.get(plugin).pclass.containsKey(player);
}","public static boolean hasClass(JavaPlugin plugin,String player){
  return MinigamesAPI.getAPI().pinstances.get(plugin).getPClasses().containsKey(player);
}",0.9636963696369636
86145,"public void spectate(String playername){
  if (Validator.isPlayerValid(playername,this)) {
    Player p=Bukkit.getPlayer(playername);
    MinigamesAPI.getAPI().global_lost.put(playername,this);
    p.setAllowFlight(true);
    p.setFlying(true);
    Util.teleportPlayerFixed(p,this.spawns.get(0).add(0D,30D,0D));
    MinigamesAPI.getAPI().pinstances.get(plugin).scoreboardManager.updateScoreboard(this);
  }
}","public void spectate(String playername){
  if (Validator.isPlayerValid(playername,this)) {
    Player p=Bukkit.getPlayer(playername);
    MinigamesAPI.getAPI().global_lost.put(playername,this);
    p.setAllowFlight(true);
    p.setFlying(true);
    Location temp=this.spawns.get(0);
    Util.teleportPlayerFixed(p,temp.clone().add(0D,30D,0D));
    MinigamesAPI.getAPI().pinstances.get(plugin).scoreboardManager.updateScoreboard(this);
  }
}",0.9245283018867924
86146,"/** 
 * Leaves the current arena, won't do anything if not present in any arena
 * @param playername
 * @param fullLeave Determines if player left only minigame or the server
 */
public void leavePlayer(String playername,boolean fullLeave){
  if (!this.containsPlayer(playername)) {
    return;
  }
  this.players.remove(playername);
  MinigamesAPI.global_players.remove(playername);
  if (fullLeave) {
    return;
  }
  final Player p=Bukkit.getPlayer(playername);
  Util.clearInv(p);
  p.getInventory().setContents(pinv.get(playername));
  p.getInventory().setArmorContents(pinv_armor.get(playername));
  p.updateInventory();
  Util.teleportPlayerFixed(p,this.waitinglobby);
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      p.setFlying(false);
      if (!p.isOp()) {
        p.setAllowFlight(false);
      }
    }
  }
,5L);
}","/** 
 * Leaves the current arena, won't do anything if not present in any arena
 * @param playername
 * @param fullLeave Determines if player left only minigame or the server
 */
public void leavePlayer(String playername,boolean fullLeave){
  if (!this.containsPlayer(playername)) {
    return;
  }
  this.players.remove(playername);
  MinigamesAPI.global_players.remove(playername);
  if (fullLeave) {
    return;
  }
  final Player p=Bukkit.getPlayer(playername);
  Util.clearInv(p);
  p.getInventory().setContents(pinv.get(playername));
  p.getInventory().setArmorContents(pinv_armor.get(playername));
  p.updateInventory();
  Util.teleportPlayerFixed(p,this.mainlobby);
  Bukkit.getScheduler().runTaskLater(plugin,new Runnable(){
    public void run(){
      p.setFlying(false);
      if (!p.isOp()) {
        p.setAllowFlight(false);
      }
    }
  }
,5L);
}",0.9936452917388792
86147,"@EventHandler public void onSignChange(SignChangeEvent event){
  Player p=event.getPlayer();
  if (event.getLine(0).toLowerCase().equalsIgnoreCase(""String_Node_Str"")) {
    if (event.getPlayer().hasPermission(""String_Node_Str"") || event.getPlayer().isOp()) {
      if (!event.getLine(1).equalsIgnoreCase(""String_Node_Str"")) {
        String arena=event.getLine(1);
        if (Validator.isArenaValid(plugin,arena)) {
          MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().getConfig().set(""String_Node_Str"" + arena + ""String_Node_Str"",p.getWorld().getName());
          MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().getConfig().set(""String_Node_Str"" + arena + ""String_Node_Str"",event.getBlock().getLocation().getBlockX());
          MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().getConfig().set(""String_Node_Str"" + arena + ""String_Node_Str"",event.getBlock().getLocation().getBlockY());
          MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().getConfig().set(""String_Node_Str"" + arena + ""String_Node_Str"",event.getBlock().getLocation().getBlockZ());
          MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().saveConfig();
          p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().arena_invalid);
          event.getBlock().breakNaturally();
        }
        Arena a=MinigamesAPI.getAPI().pinstances.get(plugin).getArenaByName(arena);
        if (a != null) {
          Util.updateSign(plugin,a);
        }
 else {
        }
      }
    }
  }
}","@EventHandler public void onSignChange(SignChangeEvent event){
  Player p=event.getPlayer();
  if (event.getLine(0).toLowerCase().equalsIgnoreCase(""String_Node_Str"")) {
    if (event.getPlayer().hasPermission(""String_Node_Str"") || event.getPlayer().isOp()) {
      if (!event.getLine(1).equalsIgnoreCase(""String_Node_Str"")) {
        String arena=event.getLine(1);
        if (Validator.isArenaValid(plugin,arena)) {
          MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().getConfig().set(""String_Node_Str"" + arena + ""String_Node_Str"",p.getWorld().getName());
          MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().getConfig().set(""String_Node_Str"" + arena + ""String_Node_Str"",event.getBlock().getLocation().getBlockX());
          MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().getConfig().set(""String_Node_Str"" + arena + ""String_Node_Str"",event.getBlock().getLocation().getBlockY());
          MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().getConfig().set(""String_Node_Str"" + arena + ""String_Node_Str"",event.getBlock().getLocation().getBlockZ());
          MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().saveConfig();
          p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          p.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().arena_invalid);
          event.getBlock().breakNaturally();
        }
        Arena a=MinigamesAPI.getAPI().pinstances.get(plugin).getArenaByName(arena);
        if (a != null) {
          Util.updateSign(plugin,a,event);
        }
 else {
        }
      }
    }
  }
}",0.9982698961937716
86148,"@EventHandler public void onSignUse(PlayerInteractEvent event){
  if (event.hasBlock()) {
    if (event.getClickedBlock().getType() == Material.SIGN_POST || event.getClickedBlock().getType() == Material.WALL_SIGN) {
      final Sign s=(Sign)event.getClickedBlock().getState();
      Arena arena=Util.getArenaBySignLocation(plugin,event.getClickedBlock().getLocation());
      if (arena != null) {
        arena.joinPlayerLobby(event.getPlayer().getName());
      }
    }
  }
  if (event.hasItem()) {
    final Player p=event.getPlayer();
    if (!MinigamesAPI.global_players.containsKey(p.getName())) {
      return;
    }
    if (event.getItem().getTypeId() == plugin.getConfig().getInt(""String_Node_Str"")) {
      Classes.openGUI(plugin,p.getName());
    }
  }
}","@EventHandler public void onSignUse(PlayerInteractEvent event){
  if (event.hasBlock()) {
    if (event.getClickedBlock().getType() == Material.SIGN_POST || event.getClickedBlock().getType() == Material.WALL_SIGN) {
      if (event.getAction() != Action.RIGHT_CLICK_BLOCK) {
        return;
      }
      final Sign s=(Sign)event.getClickedBlock().getState();
      Arena arena=Util.getArenaBySignLocation(plugin,event.getClickedBlock().getLocation());
      if (arena != null) {
        arena.joinPlayerLobby(event.getPlayer().getName());
      }
    }
  }
  if (event.hasItem()) {
    final Player p=event.getPlayer();
    if (!MinigamesAPI.global_players.containsKey(p.getName())) {
      return;
    }
    if (event.getItem().getTypeId() == plugin.getConfig().getInt(""String_Node_Str"")) {
      Classes.openGUI(plugin,p.getName());
    }
  }
}",0.9484792054624456
86149,"/** 
 * Sets up the API, stuff won't work without that
 * @param plugin_
 * @return
 */
public static MinigamesAPI setupAPI(JavaPlugin plugin_){
  ArenasConfig arenasconfig=new ArenasConfig(plugin_);
  MessagesConfig messagesconfig=new MessagesConfig(plugin_);
  ClassesConfig classesconfig=new ClassesConfig(plugin_);
  DefaultConfig.init(plugin_);
  pinstances.put(plugin_,new PluginInstance(plugin_,arenasconfig,messagesconfig,classesconfig,Util.loadArenas(plugin_,arenasconfig)));
  Bukkit.getPluginManager().registerEvents(new ArenaListener(plugin_),plugin_);
  return instance;
}","/** 
 * Sets up the API, stuff won't work without that
 * @param plugin_
 * @return
 */
public static MinigamesAPI setupAPI(JavaPlugin plugin_){
  ArenasConfig arenasconfig=new ArenasConfig(plugin_);
  MessagesConfig messagesconfig=new MessagesConfig(plugin_);
  ClassesConfig classesconfig=new ClassesConfig(plugin_);
  DefaultConfig.init(plugin_);
  pinstances.put(plugin_,new PluginInstance(plugin_,arenasconfig,messagesconfig,classesconfig));
  pinstances.get(plugin_).addLoadedArenas(Util.loadArenas(plugin_,arenasconfig));
  Bukkit.getPluginManager().registerEvents(new ArenaListener(plugin_),plugin_);
  return instance;
}",0.9028006589785832
86150,"public PluginInstance(JavaPlugin plugin,ArenasConfig arenasconfig,MessagesConfig messagesconfig,ClassesConfig classesconfig,ArrayList<Arena> arenas){
  this.arenasconfig=arenasconfig;
  this.messagesconfig=messagesconfig;
  this.classesconfig=classesconfig;
  this.arenas=arenas;
  this.plugin=plugin;
}","public PluginInstance(JavaPlugin plugin,ArenasConfig arenasconfig,MessagesConfig messagesconfig,ClassesConfig classesconfig){
  this.arenasconfig=arenasconfig;
  this.messagesconfig=messagesconfig;
  this.classesconfig=classesconfig;
  this.arenas=new ArrayList<Arena>();
  this.plugin=plugin;
}",0.5518394648829431
86151,"/** 
 * Handles the default commands needed for arena management.
 * @param uber_permission Main setup permission. Example: Skywars.setup
 * @param cmd The command. Example: /sw
 * @param sender
 * @param args
 * @return
 */
public static boolean handleArgs(JavaPlugin plugin,String uber_permission,String cmd,CommandSender sender,String args[]){
  if (args.length > 0) {
    if (!(sender instanceof Player)) {
      return true;
    }
    Player p=(Player)sender;
    String action=args[0];
    if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        ArenaSetup.setSpawn(plugin,args[1],p.getLocation());
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        ArenaSetup.setLobby(plugin,args[1],p.getLocation());
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      ArenaSetup.setMainLobby(plugin,p.getLocation());
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 2) {
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        Arena temp=ArenaSetup.saveArena(plugin,args[1]);
        if (temp != null) {
          sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_saved_arena.replaceAll(""String_Node_Str"",args[1]));
        }
 else {
          sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().failed_saving_arena.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 2) {
        if (!Util.isNumeric(args[2])) {
          return true;
        }
        ArenaSetup.setPlayerCount(plugin,args[1],Integer.parseInt(args[2]),true);
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 2) {
        if (!Util.isNumeric(args[2])) {
          return true;
        }
        ArenaSetup.setPlayerCount(plugin,args[1],Integer.parseInt(args[2]),false);
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 2) {
        if (!args[2].equalsIgnoreCase(""String_Node_Str"") || !args[2].equalsIgnoreCase(""String_Node_Str"")) {
          return true;
        }
        ArenaSetup.setArenaVIP(plugin,args[1],Boolean.parseBoolean(args[2]));
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length > 1) {
        Arena temp=MinigamesAPI.getAPI().pinstances.get(plugin).getArenaByName(args[1]);
        if (temp != null) {
          temp.joinPlayerLobby(p.getName());
        }
 else {
          sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (MinigamesAPI.getAPI().global_players.containsKey(p.getName())) {
        MinigamesAPI.getAPI().global_players.get(p.getName()).leavePlayer(p.getName(),false);
      }
 else {
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        Arena temp=MinigamesAPI.getAPI().pinstances.get(plugin).getArenaByName(args[1]);
        if (temp != null) {
          temp.start();
        }
 else {
          sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        Arena temp=MinigamesAPI.getAPI().pinstances.get(plugin).getArenaByName(args[1]);
        if (temp != null) {
          temp.stop();
        }
 else {
          sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().getConfig().set(""String_Node_Str"" + args[1],null);
        MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().saveConfig();
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      sendHelp(cmd,sender);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str"");
      for (      Arena a : MinigamesAPI.getAPI().pinstances.get(plugin).getArenas()) {
        sender.sendMessage(ChatColor.GREEN + a.getName());
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      plugin.reloadConfig();
      MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().reloadConfig();
      MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().reloadConfig();
      sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_reloaded);
    }
  }
 else {
    sendHelp(cmd,sender);
  }
  return true;
}","/** 
 * Handles the default commands needed for arena management.
 * @param uber_permission Main setup permission. Example: Skywars.setup
 * @param cmd The command. Example: /sw
 * @param sender
 * @param args
 * @return
 */
public static boolean handleArgs(JavaPlugin plugin,String uber_permission,String cmd,CommandSender sender,String args[]){
  if (args.length > 0) {
    if (!(sender instanceof Player)) {
      return true;
    }
    Player p=(Player)sender;
    String action=args[0];
    if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        ArenaSetup.setSpawn(plugin,args[1],p.getLocation());
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        ArenaSetup.setLobby(plugin,args[1],p.getLocation());
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      ArenaSetup.setMainLobby(plugin,p.getLocation());
      sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 2) {
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        Arena temp=ArenaSetup.saveArena(plugin,args[1]);
        if (temp != null) {
          sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_saved_arena.replaceAll(""String_Node_Str"",args[1]));
        }
 else {
          sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().failed_saving_arena.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 2) {
        if (!Util.isNumeric(args[2])) {
          return true;
        }
        ArenaSetup.setPlayerCount(plugin,args[1],Integer.parseInt(args[2]),true);
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 2) {
        if (!Util.isNumeric(args[2])) {
          return true;
        }
        ArenaSetup.setPlayerCount(plugin,args[1],Integer.parseInt(args[2]),false);
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 2) {
        if (!args[2].equalsIgnoreCase(""String_Node_Str"") || !args[2].equalsIgnoreCase(""String_Node_Str"")) {
          return true;
        }
        ArenaSetup.setArenaVIP(plugin,args[1],Boolean.parseBoolean(args[2]));
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length > 1) {
        Arena temp=MinigamesAPI.getAPI().pinstances.get(plugin).getArenaByName(args[1]);
        if (temp != null) {
          temp.joinPlayerLobby(p.getName());
        }
 else {
          sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (MinigamesAPI.getAPI().global_players.containsKey(p.getName())) {
        MinigamesAPI.getAPI().global_players.get(p.getName()).leavePlayer(p.getName(),false);
      }
 else {
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        Arena temp=MinigamesAPI.getAPI().pinstances.get(plugin).getArenaByName(args[1]);
        if (temp != null) {
          temp.start();
        }
 else {
          sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        Arena temp=MinigamesAPI.getAPI().pinstances.get(plugin).getArenaByName(args[1]);
        if (temp != null) {
          temp.stop();
        }
 else {
          sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().getConfig().set(""String_Node_Str"" + args[1],null);
        MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().saveConfig();
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      sendHelp(cmd,sender);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str"");
      for (      Arena a : MinigamesAPI.getAPI().pinstances.get(plugin).getArenas()) {
        sender.sendMessage(ChatColor.GREEN + a.getName());
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      plugin.reloadConfig();
      MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().reloadConfig();
      MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().reloadConfig();
      sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_reloaded);
    }
  }
 else {
    sendHelp(cmd,sender);
  }
  return true;
}",0.9765188590637204
86152,"public static void init(JavaPlugin plugin){
  FileConfiguration config=plugin.getConfig();
  config.addDefault(""String_Node_Str"",399);
  config.addDefault(""String_Node_Str"",4);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",30);
  config.addDefault(""String_Node_Str"",10);
  config.options().copyDefaults(false);
  plugin.saveConfig();
}","public static void init(JavaPlugin plugin){
  FileConfiguration config=plugin.getConfig();
  config.addDefault(""String_Node_Str"",399);
  config.addDefault(""String_Node_Str"",4);
  config.addDefault(""String_Node_Str"",2);
  config.addDefault(""String_Node_Str"",30);
  config.addDefault(""String_Node_Str"",10);
  config.options().copyDefaults(true);
  plugin.saveConfig();
}",0.9552238805970148
86153,"public static Sign getSignFromArena(JavaPlugin plugin,String arena){
  Location b_=new Location(Bukkit.getServer().getWorld(MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().getConfig().getString(""String_Node_Str"" + arena + ""String_Node_Str"")),MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().getConfig().getInt(""String_Node_Str"" + arena + ""String_Node_Str""),MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().getConfig().getInt(""String_Node_Str"" + arena + ""String_Node_Str""),MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().getConfig().getInt(""String_Node_Str"" + arena + ""String_Node_Str""));
  BlockState bs=b_.getBlock().getState();
  Sign s_=null;
  if (bs instanceof Sign) {
    s_=(Sign)bs;
  }
 else {
  }
  return s_;
}","public static Sign getSignFromArena(JavaPlugin plugin,String arena){
  if (!MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().getConfig().isSet(""String_Node_Str"" + arena + ""String_Node_Str"")) {
    return null;
  }
  Location b_=new Location(Bukkit.getServer().getWorld(MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().getConfig().getString(""String_Node_Str"" + arena + ""String_Node_Str"")),MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().getConfig().getInt(""String_Node_Str"" + arena + ""String_Node_Str""),MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().getConfig().getInt(""String_Node_Str"" + arena + ""String_Node_Str""),MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().getConfig().getInt(""String_Node_Str"" + arena + ""String_Node_Str""));
  System.out.println(b_);
  BlockState bs=b_.getBlock().getState();
  Sign s_=null;
  if (bs instanceof Sign) {
    s_=(Sign)bs;
  }
 else {
  }
  return s_;
}",0.8938611589213998
86154,"public static Arena getArenaBySignLocation(JavaPlugin plugin,Location sign){
  for (  Arena arena : MinigamesAPI.getAPI().pinstances.get(plugin).getArenas()) {
    if (sign.distance(arena.getArena().getSignLocation()) < 2) {
      return arena;
    }
  }
  return null;
}","public static Arena getArenaBySignLocation(JavaPlugin plugin,Location sign){
  for (  Arena arena : MinigamesAPI.getAPI().pinstances.get(plugin).getArenas()) {
    if (sign != null && arena.getArena().getSignLocation() != null) {
      if (sign.distance(arena.getArena().getSignLocation()) < 2) {
        return arena;
      }
    }
  }
  return null;
}",0.8685897435897436
86155,"public static ArrayList<Location> getAllSpawns(JavaPlugin plugin,String arena){
  FileConfiguration config=MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().getConfig();
  ArrayList<Location> ret=new ArrayList<Location>();
  if (!config.isSet(""String_Node_Str"" + arena + ""String_Node_Str"")) {
    return ret;
  }
  for (  String spawn : config.getConfigurationSection(""String_Node_Str"" + arena + ""String_Node_Str"").getKeys(false)) {
    ret.add(getComponentForArena(plugin,arena,spawn));
  }
  return ret;
}","public static ArrayList<Location> getAllSpawns(JavaPlugin plugin,String arena){
  FileConfiguration config=MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().getConfig();
  ArrayList<Location> ret=new ArrayList<Location>();
  if (!config.isSet(""String_Node_Str"" + arena + ""String_Node_Str"")) {
    return ret;
  }
  for (  String spawn : config.getConfigurationSection(""String_Node_Str"" + arena + ""String_Node_Str"").getKeys(false)) {
    ret.add(getComponentForArena(plugin,arena,""String_Node_Str"" + spawn));
  }
  return ret;
}",0.981132075471698
86156,"public static ArrayList<Arena> loadArenas(JavaPlugin plugin,ArenasConfig cf){
  ArrayList<Arena> ret=new ArrayList<Arena>();
  FileConfiguration config=cf.getConfig();
  if (!config.isSet(""String_Node_Str"")) {
    return ret;
  }
  for (  String arena : config.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
    ret.add(initArena(plugin,arena));
  }
  return ret;
}","public static ArrayList<Arena> loadArenas(JavaPlugin plugin,ArenasConfig cf){
  ArrayList<Arena> ret=new ArrayList<Arena>();
  FileConfiguration config=cf.getConfig();
  if (!config.isSet(""String_Node_Str"")) {
    return ret;
  }
  for (  String arena : config.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
    if (Validator.isArenaValid(plugin,arena,cf.getConfig())) {
      ret.add(initArena(plugin,arena));
    }
  }
  return ret;
}",0.873341375150784
86157,"public static void updateSign(JavaPlugin plugin,Arena arena){
  Sign s=getSignFromArena(plugin,arena.getName());
  int count=arena.getAllPlayers().size();
  int maxcount=arena.getMaxPlayers();
  if (s != null) {
    s.setLine(0,MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().getConfig().getString(""String_Node_Str"" + arena.getArenaState().toString() + ""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",Integer.toString(count)).replace(""String_Node_Str"",Integer.toString(maxcount)).replace(""String_Node_Str"",arena.getName()));
    s.setLine(1,MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().getConfig().getString(""String_Node_Str"" + arena.getArenaState().toString() + ""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",Integer.toString(count)).replace(""String_Node_Str"",Integer.toString(maxcount)).replace(""String_Node_Str"",arena.getName()));
    s.setLine(2,MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().getConfig().getString(""String_Node_Str"" + arena.getArenaState().toString() + ""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",Integer.toString(count)).replace(""String_Node_Str"",Integer.toString(maxcount)).replace(""String_Node_Str"",arena.getName()));
    s.setLine(3,MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().getConfig().getString(""String_Node_Str"" + arena.getArenaState().toString() + ""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",Integer.toString(count)).replace(""String_Node_Str"",Integer.toString(maxcount)).replace(""String_Node_Str"",arena.getName()));
    s.update();
  }
}","public static void updateSign(JavaPlugin plugin,Arena arena,SignChangeEvent event){
  int count=arena.getAllPlayers().size();
  int maxcount=arena.getMaxPlayers();
  event.setLine(0,MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().getConfig().getString(""String_Node_Str"" + arena.getArenaState().toString().toLowerCase() + ""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",Integer.toString(count)).replace(""String_Node_Str"",Integer.toString(maxcount)).replace(""String_Node_Str"",arena.getName()));
  event.setLine(1,MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().getConfig().getString(""String_Node_Str"" + arena.getArenaState().toString().toLowerCase() + ""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",Integer.toString(count)).replace(""String_Node_Str"",Integer.toString(maxcount)).replace(""String_Node_Str"",arena.getName()));
  event.setLine(2,MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().getConfig().getString(""String_Node_Str"" + arena.getArenaState().toString().toLowerCase() + ""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",Integer.toString(count)).replace(""String_Node_Str"",Integer.toString(maxcount)).replace(""String_Node_Str"",arena.getName()));
  event.setLine(3,MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().getConfig().getString(""String_Node_Str"" + arena.getArenaState().toString().toLowerCase() + ""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",Integer.toString(count)).replace(""String_Node_Str"",Integer.toString(maxcount)).replace(""String_Node_Str"",arena.getName()));
}",0.9185441941074524
86158,"/** 
 * returns true if given arena was set up correctly
 * @param arena
 * @return
 */
public static boolean isArenaValid(JavaPlugin plugin,String arena){
  FileConfiguration config=MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().getConfig();
  if (!config.isSet(""String_Node_Str"" + arena + ""String_Node_Str"") || !config.isSet(""String_Node_Str"" + arena + ""String_Node_Str"")) {
    return false;
  }
  return true;
}","/** 
 * returns true if given arena was set up correctly
 * @param arena
 * @return
 */
public static boolean isArenaValid(JavaPlugin plugin,String arena,FileConfiguration cf){
  FileConfiguration config=cf;
  if (!config.isSet(""String_Node_Str"" + arena + ""String_Node_Str"") || !config.isSet(""String_Node_Str"" + arena + ""String_Node_Str"")) {
    return false;
  }
  return true;
}",0.8803945745992602
86159,"/** 
 * Sets up the API, stuff won't work without that
 * @param plugin_
 * @return
 */
public static MinigamesAPI setupAPI(JavaPlugin plugin_){
  ArenasConfig arenasconfig=new ArenasConfig(plugin_);
  MessagesConfig messagesconfig=new MessagesConfig(plugin_);
  ClassesConfig classesconfig=new ClassesConfig(plugin_);
  pinstances.put(plugin_,new PluginInstance(plugin_,arenasconfig,messagesconfig,classesconfig,Util.loadArenas(plugin_)));
  Bukkit.getPluginManager().registerEvents(new ArenaListener(plugin_),plugin_);
  return instance;
}","/** 
 * Sets up the API, stuff won't work without that
 * @param plugin_
 * @return
 */
public static MinigamesAPI setupAPI(JavaPlugin plugin_){
  ArenasConfig arenasconfig=new ArenasConfig(plugin_);
  MessagesConfig messagesconfig=new MessagesConfig(plugin_);
  ClassesConfig classesconfig=new ClassesConfig(plugin_);
  pinstances.put(plugin_,new PluginInstance(plugin_,arenasconfig,messagesconfig,classesconfig,Util.loadArenas(plugin_,arenasconfig)));
  Bukkit.getPluginManager().registerEvents(new ArenaListener(plugin_),plugin_);
  return instance;
}",0.9881278538812786
86160,"/** 
 * Handles the default commands needed for arena management.
 * @param uber_permission Main setup permission. Example: Skywars.setup
 * @param cmd The command. Example: /sw
 * @param sender
 * @param args
 * @return
 */
public static boolean handleArgs(JavaPlugin plugin,String uber_permission,String cmd,CommandSender sender,String args[]){
  if (args.length > 0) {
    if (!(sender instanceof Player)) {
      return true;
    }
    Player p=(Player)sender;
    String action=args[0];
    if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        ArenaSetup.setSpawn(plugin,args[1],p.getLocation());
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        ArenaSetup.setLobby(plugin,args[1],p.getLocation());
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      ArenaSetup.setMainLobby(plugin,p.getLocation());
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 2) {
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        Arena temp=ArenaSetup.saveArena(plugin,args[1]);
        if (temp != null) {
          sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_saved_arena.replaceAll(""String_Node_Str"",args[1]));
        }
 else {
          sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().failed_saving_arena.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (!Util.isNumeric(args[2])) {
        return true;
      }
      if (args.length > 2) {
        ArenaSetup.setPlayerCount(plugin,args[1],Integer.parseInt(args[2]),true);
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (!Util.isNumeric(args[2])) {
        return true;
      }
      if (args.length > 2) {
        ArenaSetup.setPlayerCount(plugin,args[1],Integer.parseInt(args[2]),false);
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (!args[2].equalsIgnoreCase(""String_Node_Str"") || !args[2].equalsIgnoreCase(""String_Node_Str"")) {
        return true;
      }
      if (args.length > 2) {
        ArenaSetup.setArenaVIP(plugin,args[1],Boolean.parseBoolean(args[2]));
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length > 1) {
        Arena temp=MinigamesAPI.getAPI().pinstances.get(plugin).getArenaByName(args[1]);
        if (temp != null) {
          temp.joinPlayerLobby(p.getName());
        }
 else {
          sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (MinigamesAPI.getAPI().global_players.containsKey(p.getName())) {
        MinigamesAPI.getAPI().global_players.get(p.getName()).leavePlayer(p.getName(),false);
      }
 else {
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        Arena temp=MinigamesAPI.getAPI().pinstances.get(plugin).getArenaByName(args[1]);
        if (temp != null) {
          temp.start();
        }
 else {
          sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        Arena temp=MinigamesAPI.getAPI().pinstances.get(plugin).getArenaByName(args[1]);
        if (temp != null) {
          temp.stop();
        }
 else {
          sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().getConfig().set(""String_Node_Str"" + args[1],null);
        MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().saveConfig();
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      sendHelp(cmd,sender);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str"");
      for (      Arena a : MinigamesAPI.getAPI().pinstances.get(plugin).getArenas()) {
        sender.sendMessage(ChatColor.GREEN + a.getName());
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      plugin.reloadConfig();
      MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().reloadConfig();
      MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().reloadConfig();
      sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_reloaded);
    }
  }
 else {
    sendHelp(cmd,sender);
  }
  return true;
}","/** 
 * Handles the default commands needed for arena management.
 * @param uber_permission Main setup permission. Example: Skywars.setup
 * @param cmd The command. Example: /sw
 * @param sender
 * @param args
 * @return
 */
public static boolean handleArgs(JavaPlugin plugin,String uber_permission,String cmd,CommandSender sender,String args[]){
  if (args.length > 0) {
    if (!(sender instanceof Player)) {
      return true;
    }
    Player p=(Player)sender;
    String action=args[0];
    if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        ArenaSetup.setSpawn(plugin,args[1],p.getLocation());
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        ArenaSetup.setLobby(plugin,args[1],p.getLocation());
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      ArenaSetup.setMainLobby(plugin,p.getLocation());
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 2) {
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        Arena temp=ArenaSetup.saveArena(plugin,args[1]);
        if (temp != null) {
          sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_saved_arena.replaceAll(""String_Node_Str"",args[1]));
        }
 else {
          sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().failed_saving_arena.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 2) {
        if (!Util.isNumeric(args[2])) {
          return true;
        }
        ArenaSetup.setPlayerCount(plugin,args[1],Integer.parseInt(args[2]),true);
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 2) {
        if (!Util.isNumeric(args[2])) {
          return true;
        }
        ArenaSetup.setPlayerCount(plugin,args[1],Integer.parseInt(args[2]),false);
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 2) {
        if (!args[2].equalsIgnoreCase(""String_Node_Str"") || !args[2].equalsIgnoreCase(""String_Node_Str"")) {
          return true;
        }
        ArenaSetup.setArenaVIP(plugin,args[1],Boolean.parseBoolean(args[2]));
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_set.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length > 1) {
        Arena temp=MinigamesAPI.getAPI().pinstances.get(plugin).getArenaByName(args[1]);
        if (temp != null) {
          temp.joinPlayerLobby(p.getName());
        }
 else {
          sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (MinigamesAPI.getAPI().global_players.containsKey(p.getName())) {
        MinigamesAPI.getAPI().global_players.get(p.getName()).leavePlayer(p.getName(),false);
      }
 else {
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        Arena temp=MinigamesAPI.getAPI().pinstances.get(plugin).getArenaByName(args[1]);
        if (temp != null) {
          temp.start();
        }
 else {
          sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        Arena temp=MinigamesAPI.getAPI().pinstances.get(plugin).getArenaByName(args[1]);
        if (temp != null) {
          temp.stop();
        }
 else {
          sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().arena_invalid.replaceAll(""String_Node_Str"",args[1]));
        }
      }
 else {
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      if (!sender.hasPermission(uber_permission + ""String_Node_Str"")) {
        sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().no_perm);
        return true;
      }
      if (args.length > 1) {
        MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().getConfig().set(""String_Node_Str"" + args[1],null);
        MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().saveConfig();
      }
 else {
        sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ cmd+ ""String_Node_Str""+ action+ ""String_Node_Str"");
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      sendHelp(cmd,sender);
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      sender.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str""+ ChatColor.DARK_GRAY+ ""String_Node_Str"");
      for (      Arena a : MinigamesAPI.getAPI().pinstances.get(plugin).getArenas()) {
        sender.sendMessage(ChatColor.GREEN + a.getName());
      }
    }
 else     if (action.equalsIgnoreCase(""String_Node_Str"")) {
      plugin.reloadConfig();
      MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().reloadConfig();
      MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().reloadConfig();
      sender.sendMessage(MinigamesAPI.getAPI().pinstances.get(plugin).getMessagesConfig().successfully_reloaded);
    }
  }
 else {
    sendHelp(cmd,sender);
  }
  return true;
}",0.9902715849209568
86161,"public ArenasConfig(JavaPlugin plugin){
  this.plugin=plugin;
}","public ArenasConfig(JavaPlugin plugin){
  this.plugin=plugin;
  this.getConfig().options().copyDefaults(true);
  this.saveConfig();
}",0.6428571428571429
86162,"public static ArrayList<Arena> loadArenas(JavaPlugin plugin){
  ArrayList<Arena> ret=new ArrayList<Arena>();
  FileConfiguration config=MinigamesAPI.getAPI().pinstances.get(plugin).getArenasConfig().getConfig();
  if (!config.isSet(""String_Node_Str"")) {
    return ret;
  }
  for (  String arena : config.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
    ret.add(initArena(plugin,arena));
  }
  return ret;
}","public static ArrayList<Arena> loadArenas(JavaPlugin plugin,ArenasConfig cf){
  ArrayList<Arena> ret=new ArrayList<Arena>();
  FileConfiguration config=cf.getConfig();
  if (!config.isSet(""String_Node_Str"")) {
    return ret;
  }
  for (  String arena : config.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
    ret.add(initArena(plugin,arena));
  }
  return ret;
}",0.9002493765586035
86163,"public View getView(final int position,View convertView,ViewGroup parent){
  Model model=mData.get(position);
  if (model instanceof ScheduleItem) {
    final ScheduleItem scheduleItem=(ScheduleItem)model;
    if (convertView == null || convertView.getId() != R.id.schedule_list_item) {
      LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
      convertView=inflater.inflate(mResource,parent,false);
    }
    final Intent intent=getIntent(position);
    final Context context=convertView.getContext();
    convertView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        Resources res=context.getResources();
        String title=res.getString(R.string.calendar_dialog_title);
        String message=String.format(res.getString(R.string.calendar_dialog_message),scheduleItem.name);
        String yes=res.getString(R.string.dialog_button_yes);
        String cancel=res.getString(R.string.dialog_button_cancel);
        ConfirmDialogFragment dialog=ConfirmDialogFragment.getInstance(title,message,yes,cancel);
        dialog.setTargetFragment(mFragment,0);
        Bundle args=dialog.getArguments();
        args.putInt(CONFIRM_DIALOG_POSITION_KEY,position);
        dialog.setArguments(args);
        dialog.show(mFragment.getFragmentManager(),CONFIRM_DIALOG_TAG);
      }
    }
);
    convertView.findViewById(R.id.schedule_item_type).setBackgroundDrawable(getIndicator(scheduleItem.type));
    ((TextView)convertView.findViewById(R.id.schedule_item_name)).setText(scheduleItem.name);
    ((TextView)convertView.findViewById(R.id.schedule_item_speaker)).setText(scheduleItem.speaker);
    TextView locationText=(TextView)convertView.findViewById(R.id.schedule_item_location);
    if (TextUtils.isEmpty(scheduleItem.location)) {
      locationText.setVisibility(View.GONE);
    }
 else {
      locationText.setVisibility(View.VISIBLE);
      locationText.setText(scheduleItem.location);
    }
    ArrayList<String> times=new ArrayList<String>();
    times.add(scheduleItem.start_time);
    times.add(scheduleItem.end_time);
    ((TextView)convertView.findViewById(R.id.schedule_item_time)).setText(DateFormatter.getTimespanString(times));
    TextView descriptionText=(TextView)convertView.findViewById(R.id.schedule_item_description);
    if (TextUtils.isEmpty(scheduleItem.description)) {
      descriptionText.setVisibility(View.GONE);
    }
 else {
      descriptionText.setVisibility(View.VISIBLE);
      descriptionText.setText(scheduleItem.description);
    }
    Resources res=context.getResources();
    TextView speakerText=(TextView)convertView.findViewById(R.id.schedule_item_speaker);
    if (TextUtils.isEmpty(scheduleItem.speaker)) {
      speakerText.setVisibility(View.GONE);
    }
 else {
      speakerText.setVisibility(View.VISIBLE);
      speakerText.setText(scheduleItem.speaker);
    }
    if (speakerText.getVisibility() != View.VISIBLE && descriptionText.getVisibility() != View.VISIBLE) {
      convertView.findViewById(R.id.schedule_item_description_holder).setVisibility(View.GONE);
    }
  }
 else   if (model instanceof Instruction) {
    final Instruction instruction=(Instruction)model;
    if (convertView == null || convertView.getId() != R.id.instruction_list_item) {
      LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
      convertView=inflater.inflate(R.layout.instruction_list_item,parent,false);
    }
  }
  return convertView;
}","public View getView(final int position,View convertView,ViewGroup parent){
  Model model=mData.get(position);
  if (model instanceof ScheduleItem) {
    final ScheduleItem scheduleItem=(ScheduleItem)model;
    if (convertView == null || convertView.getId() != R.id.schedule_list_item) {
      LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
      convertView=inflater.inflate(mResource,parent,false);
    }
    final Intent intent=getIntent(position);
    final Context context=convertView.getContext();
    convertView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        Resources res=context.getResources();
        String title=res.getString(R.string.calendar_dialog_title);
        String message=String.format(res.getString(R.string.calendar_dialog_message),scheduleItem.name);
        String yes=res.getString(R.string.dialog_button_yes);
        String cancel=res.getString(R.string.dialog_button_cancel);
        ConfirmDialogFragment dialog=ConfirmDialogFragment.getInstance(title,message,yes,cancel);
        dialog.setTargetFragment(mFragment,0);
        Bundle args=dialog.getArguments();
        args.putInt(CONFIRM_DIALOG_POSITION_KEY,position);
        dialog.setArguments(args);
        dialog.show(mFragment.getFragmentManager(),CONFIRM_DIALOG_TAG);
      }
    }
);
    convertView.findViewById(R.id.schedule_item_type).setBackgroundDrawable(getIndicator(scheduleItem.type));
    ((TextView)convertView.findViewById(R.id.schedule_item_name)).setText(scheduleItem.name);
    ((TextView)convertView.findViewById(R.id.schedule_item_speaker)).setText(scheduleItem.speaker);
    TextView locationText=(TextView)convertView.findViewById(R.id.schedule_item_location);
    if (TextUtils.isEmpty(scheduleItem.location)) {
      locationText.setVisibility(View.GONE);
    }
 else {
      locationText.setVisibility(View.VISIBLE);
      locationText.setText(scheduleItem.location);
    }
    ArrayList<String> times=new ArrayList<String>();
    times.add(scheduleItem.start_time);
    times.add(scheduleItem.end_time);
    ((TextView)convertView.findViewById(R.id.schedule_item_time)).setText(DateFormatter.getTimespanString(times));
    TextView descriptionText=(TextView)convertView.findViewById(R.id.schedule_item_description);
    if (TextUtils.isEmpty(scheduleItem.description)) {
      descriptionText.setVisibility(View.GONE);
    }
 else {
      descriptionText.setVisibility(View.VISIBLE);
      descriptionText.setText(scheduleItem.description);
    }
    Resources res=context.getResources();
    TextView speakerText=(TextView)convertView.findViewById(R.id.schedule_item_speaker);
    if (TextUtils.isEmpty(scheduleItem.speaker)) {
      speakerText.setVisibility(View.GONE);
    }
 else {
      speakerText.setVisibility(View.VISIBLE);
      speakerText.setText(scheduleItem.speaker);
    }
    if (speakerText.getVisibility() != View.VISIBLE && descriptionText.getVisibility() != View.VISIBLE) {
      convertView.findViewById(R.id.schedule_item_description_holder).setVisibility(View.GONE);
    }
 else {
      convertView.findViewById(R.id.schedule_item_description_holder).setVisibility(View.VISIBLE);
    }
  }
 else   if (model instanceof Instruction) {
    final Instruction instruction=(Instruction)model;
    if (convertView == null || convertView.getId() != R.id.instruction_list_item) {
      LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
      convertView=inflater.inflate(R.layout.instruction_list_item,parent,false);
    }
  }
  return convertView;
}",0.984299013477838
86164,"/** 
 * @param path The path of the Firebase data to GET. Note: do not include '.json' at the end of this path!
 * @param context Application context for broadcasting the intent
 * @param action The action string which should be passed in the intent to be broadcast
 */
public static void GET(final String path,final Context context,final String action){
  String url=String.format(""String_Node_Str"",FIREBASE_URL,path);
  StringRequest request=new StringRequest(Request.Method.GET,url,new Response.Listener<String>(){
    @Override public void onResponse(    String response){
      Intent intent=new Intent(action);
      intent.putExtra(action,response);
      LocalBroadcastManager manager=LocalBroadcastManager.getInstance(context);
      manager.sendBroadcast(intent);
    }
  }
,new Response.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      Log.e(TAG,error.toString());
    }
  }
);
  NetworkManager.getRequestQueue().add(request);
}","/** 
 * @param path The path of the Firebase data to GET. Note: do not include '.json' at the end of this path!
 * @param context Application context for broadcasting the intent
 * @param action The action string which should be passed in the intent to be broadcast
 */
public static void GET(final String path,final Context context,final String action){
  final String cachedResponse=getCachedResponse(context,path);
  if (cachedResponse != null) {
    Intent intent=new Intent(action);
    intent.putExtra(action,cachedResponse);
    LocalBroadcastManager manager=LocalBroadcastManager.getInstance(context);
    manager.sendBroadcast(intent);
  }
  String url=String.format(""String_Node_Str"",FIREBASE_URL,path);
  StringRequest request=new StringRequest(Request.Method.GET,url,new Response.Listener<String>(){
    @Override public void onResponse(    String response){
      if (cachedResponse == null || !cachedResponse.equals(response)) {
        Intent intent=new Intent(action);
        intent.putExtra(action,response);
        LocalBroadcastManager manager=LocalBroadcastManager.getInstance(context);
        manager.sendBroadcast(intent);
        cacheResponse(context,path,response);
      }
    }
  }
,new Response.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      Log.e(TAG,error.toString());
    }
  }
);
  NetworkManager.getRequestQueue().add(request);
}",0.8206202849958089
86165,"@Override public ArrayList<String> getTokens(){
  ArrayList<String> result=new ArrayList<String>(skills);
  result.add(organization);
  result.addAll(Arrays.asList(name.split(""String_Node_Str"")));
  return result;
}","@Override public ArrayList<String> getTokens(){
  ArrayList<String> result=new ArrayList<String>();
  if (skills != null) {
    result.addAll(skills);
  }
  result.add(organization);
  result.addAll(Arrays.asList(name.split(""String_Node_Str"")));
  return result;
}",0.8893528183716075
86166,"/** 
 * Sorts the list passed in the constructor.
 * @param queriesString
 */
public void query(String queriesString){
  String[] queries=queriesString.split(""String_Node_Str"");
  ArrayList<HashMap<String,Double>> tokenCostsList=new ArrayList<HashMap<String,Double>>(queries.length);
  for (  String query : queries) {
    HashMap<String,Double> tokenCosts=getTokenCosts(query);
    tokenCostsList.add(tokenCosts);
  }
  HashMap<T,Double> objectCosts=new HashMap<T,Double>(mObjects.size());
  for (  T object : mObjects) {
    objectCosts.put(object,0d);
  }
  for (  Map.Entry<String,HashSet<T>> entry : mTokensMap.entrySet()) {
    for (    T object : entry.getValue()) {
      double cost=objectCosts.get(object);
      for (      HashMap<String,Double> tokenCosts : tokenCostsList) {
        cost+=tokenCosts.get(entry.getKey());
      }
      objectCosts.put(object,cost);
    }
  }
  final HashMap<T,Double> costs=objectCosts;
  Collections.sort(mObjects,new Comparator<T>(){
    @Override public int compare(    T lhs,    T rhs){
      double ls=costs.get(lhs);
      double rs=costs.get(rhs);
      return ls == rs ? 0 : (ls < rs ? 1 : -1);
    }
  }
);
}","/** 
 * Sorts the list passed in the constructor.
 * @param queriesString
 */
public void query(String queriesString){
  String[] queries;
  if (""String_Node_Str"".equals(queriesString)) {
    queries=new String[0];
  }
 else {
    queries=queriesString.split(""String_Node_Str"");
  }
  String print=""String_Node_Str"";
  for (  String query : queries) {
    print+=query + ""String_Node_Str"";
  }
  Log.i(TAG,""String_Node_Str"" + print);
  if (queries.length == 0) {
    Collections.sort(mObjects);
  }
 else {
    ArrayList<HashMap<String,Double>> tokenCostsList=new ArrayList<HashMap<String,Double>>(queries.length);
    for (    String query : queries) {
      HashMap<String,Double> tokenCosts=getTokenCosts(query);
      tokenCostsList.add(tokenCosts);
    }
    HashMap<T,Double> objectCosts=new HashMap<T,Double>(mObjects.size());
    for (    T object : mObjects) {
      objectCosts.put(object,0d);
    }
    for (    Map.Entry<String,HashSet<T>> entry : mTokensMap.entrySet()) {
      for (      T object : entry.getValue()) {
        double cost=objectCosts.get(object);
        for (        HashMap<String,Double> tokenCosts : tokenCostsList) {
          cost+=tokenCosts.get(entry.getKey());
        }
        objectCosts.put(object,cost);
      }
    }
    final HashMap<T,Double> costs=objectCosts;
    Collections.sort(mObjects,new Comparator<T>(){
      @Override public int compare(      T lhs,      T rhs){
        double ls=costs.get(lhs);
        double rs=costs.get(rhs);
        return ls == rs ? 0 : (ls < rs ? 1 : -1);
      }
    }
);
  }
}",0.8366972477064221
86167,"@Override public void onScrollStateChanged(AbsListView view,int scrollState){
  if (searchable(mViewPager.getCurrentItem())) {
    startSearchBarAction(ACTION_DISAPPEAR);
  }
}","@Override public void onScrollStateChanged(AbsListView view,int scrollState){
  if (searchable(mViewPager.getCurrentItem())) {
    InputMethodManager imm=(InputMethodManager)getSystemService(Service.INPUT_METHOD_SERVICE);
    imm.hideSoftInputFromWindow(mSearchBox.getWindowToken(),0);
  }
}",0.6295503211991434
86168,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.mentors_fragment,container,false);
  mListView=(ListView)view.findViewById(android.R.id.list);
  mListView.setAdapter(mAdapter);
  mListView.setFastScrollEnabled(true);
  mSearchListView=(ListView)view.findViewById(R.id.searchList);
  mSearchListView.setAdapter(mAdapter);
  if (getActivity() instanceof AbsListView.OnScrollListener) {
    AbsListView.OnScrollListener l=(AbsListView.OnScrollListener)getActivity();
    mListView.setOnScrollListener(l);
  }
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.mentors_fragment,container,false);
  mListView=(ListView)view.findViewById(android.R.id.list);
  mListView.setAdapter(mAdapter);
  mListView.setFastScrollEnabled(true);
  mSearchListView=(ListView)view.findViewById(R.id.searchList);
  mSearchListView.setAdapter(mAdapter);
  if (getActivity() instanceof AbsListView.OnScrollListener) {
    AbsListView.OnScrollListener l=(AbsListView.OnScrollListener)getActivity();
    mSearchListView.setOnScrollListener(l);
  }
  return view;
}",0.995176848874598
86169,protected abstract void handleJSONUpdateInBackground(String json);,"protected abstract void handleJSONUpdateInBackground(String json,String action);",0.9041095890410958
86170,"@Override public void onReceive(Context context,Intent intent){
  if (action != null && action.equals(intent.getAction())) {
    String key=intent.getAction();
    String json=intent.getStringExtra(key);
    handleJSONUpdateInBackground(json);
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (action != null && action.equals(intent.getAction())) {
    String key=intent.getAction();
    String json=intent.getStringExtra(key);
    handleJSONUpdateInBackground(json,action);
  }
}",0.986138613861386
86171,"/** 
 * Creates a BroadcastReceiver that is listening to broadcasts of the type action.
 * @param context Used to set up the LocalBroadcastReceiver. Must be non-null.
 * @param action The action to listen to in the broadcast receiver.
 * @param adapter The adapter to pass to handleJSONInBackground in onReceive of theBroadcastReceiver.
 */
protected void registerForSync(Context context,final String action,final ArrayAdapter adapter){
  BroadcastReceiver receiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      if (action != null && action.equals(intent.getAction())) {
        String key=intent.getAction();
        String json=intent.getStringExtra(key);
        handleJSONUpdateInBackground(json);
      }
    }
  }
;
  IntentFilter filter=new IntentFilter();
  filter.addAction(action);
  LocalBroadcastManager manager=LocalBroadcastManager.getInstance(context);
  manager.registerReceiver(receiver,filter);
}","/** 
 * Given an action string, the handleJSONUpdateInBackground method will be called whenever there is an update.
 * @param context The current Fragment context.
 * @param action The action to sync to. This is the same action string you would pass toHTTPFirebase.GET().
 */
protected void registerForSync(Context context,final String action){
  final String className=getClass().getSimpleName();
  final String TAG=className;
  if (mReceiver == null) {
    mContext=context;
    mReceiver=new BroadcastReceiver(){
      @Override public void onReceive(      Context context,      Intent intent){
        if (action != null && action.equals(intent.getAction())) {
          String key=intent.getAction();
          String json=intent.getStringExtra(key);
          handleJSONUpdateInBackground(json,action);
        }
      }
    }
;
    IntentFilter filter=new IntentFilter();
    filter.addAction(action);
    LocalBroadcastManager manager=LocalBroadcastManager.getInstance(mContext);
    manager.registerReceiver(mReceiver,filter);
  }
}",0.2579365079365079
86172,"@Override protected void handleJSONUpdateInBackground(final String json){
  final Activity activity=getActivity();
  new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... nothing){
      final ArrayList<Mentor> newData=Mentor.loadMentorArrayFromJSON(json);
      if (activity != null && mAdapter != null) {
        activity.runOnUiThread(new Runnable(){
          @Override public void run(){
            mData.clear();
            mData.addAll(newData);
            mAdapter.notifyDataSetChanged();
          }
        }
);
      }
      return null;
    }
  }
.execute();
}","@Override protected void handleJSONUpdateInBackground(final String json,String action){
  final Activity activity=getActivity();
  new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... nothing){
      final ArrayList<Mentor> newData=Mentor.loadMentorArrayFromJSON(json);
      if (activity != null && mAdapter != null) {
        activity.runOnUiThread(new Runnable(){
          @Override public void run(){
            mData.clear();
            mData.addAll(newData);
            mAdapter.notifyDataSetChanged();
          }
        }
);
      }
      return null;
    }
  }
.execute();
}",0.9886547811993516
86173,"@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  String key=ViewPagerAdapter.MENTORS_TAG;
  Object thing=getCachedObject(key);
  if (thing != null) {
    mData=(ArrayList<Mentor>)thing;
  }
 else {
    setCachedObject(key,mData);
  }
  mAdapter=new MentorListAdapter(activity,R.layout.mentor_list_item,mData);
  registerForSync(activity,HackTheNorthApplication.Actions.SYNC_MENTORS,mAdapter);
  HTTPFirebase.GET(""String_Node_Str"",activity,HackTheNorthApplication.Actions.SYNC_MENTORS);
}","@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  String key=ViewPagerAdapter.MENTORS_TAG;
  Object thing=getCachedObject(key);
  if (thing != null) {
    mData=(ArrayList<Mentor>)thing;
  }
 else {
    setCachedObject(key,mData);
  }
  mAdapter=new MentorListAdapter(activity,R.layout.mentor_list_item,mData);
  registerForSync(activity,HackTheNorthApplication.Actions.SYNC_MENTORS);
  HTTPFirebase.GET(""String_Node_Str"",activity,HackTheNorthApplication.Actions.SYNC_MENTORS);
}",0.9912536443148688
86174,"@Override protected void handleJSONUpdateInBackground(final String json){
  final Activity activity=getActivity();
  new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... nothing){
      final ArrayList<Prize> newData=Prize.loadPrizesFromJSON(json);
      if (activity != null && mAdapter != null) {
        activity.runOnUiThread(new Runnable(){
          @Override public void run(){
            mData.clear();
            mData.addAll(newData);
            mAdapter.notifyDataSetChanged();
          }
        }
);
      }
      return null;
    }
  }
.execute();
}","@Override protected void handleJSONUpdateInBackground(final String json,String action){
  final Activity activity=getActivity();
  new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... nothing){
      final ArrayList<Prize> newData=Prize.loadPrizesFromJSON(json);
      if (activity != null && mAdapter != null) {
        activity.runOnUiThread(new Runnable(){
          @Override public void run(){
            mData.clear();
            mData.addAll(newData);
            mAdapter.notifyDataSetChanged();
          }
        }
);
      }
      return null;
    }
  }
.execute();
}",0.9885245901639343
86175,"@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  String key=ViewPagerAdapter.PRIZES_TAG;
  Object thing=getCachedObject(key);
  if (thing != null) {
    mData=(ArrayList<Prize>)thing;
  }
 else {
    setCachedObject(key,mData);
  }
  mAdapter=new PrizesFragmentAdapter(activity,R.layout.prizes_list_item,mData);
  mAdapter.setFragment(this);
  registerForSync(activity,HackTheNorthApplication.Actions.SYNC_PRIZES,mAdapter);
  HTTPFirebase.GET(""String_Node_Str"",activity,HackTheNorthApplication.Actions.SYNC_PRIZES);
}","@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  String key=ViewPagerAdapter.PRIZES_TAG;
  Object thing=getCachedObject(key);
  if (thing != null) {
    mData=(ArrayList<Prize>)thing;
  }
 else {
    setCachedObject(key,mData);
  }
  mAdapter=new PrizesFragmentAdapter(activity,R.layout.prizes_list_item,mData);
  mAdapter.setFragment(this);
  registerForSync(activity,HackTheNorthApplication.Actions.SYNC_PRIZES);
  HTTPFirebase.GET(""String_Node_Str"",activity,HackTheNorthApplication.Actions.SYNC_PRIZES);
}",0.9917355371900828
86176,"@Override protected void handleJSONUpdateInBackground(final String json){
  final Activity activity=getActivity();
  new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... nothing){
      final ArrayList<ScheduleItem> newData=ScheduleItem.loadScheduleFromJSON(json);
      if (activity != null && mAdapter != null) {
        activity.runOnUiThread(new Runnable(){
          @Override public void run(){
            mData.clear();
            mData.addAll(newData);
            mAdapter.notifyDataSetChanged();
          }
        }
);
      }
      return null;
    }
  }
.execute();
}","@Override protected void handleJSONUpdateInBackground(final String json,String actio){
  final Activity activity=getActivity();
  new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... nothing){
      final ArrayList<ScheduleItem> newData=ScheduleItem.loadScheduleFromJSON(json);
      if (activity != null && mAdapter != null) {
        activity.runOnUiThread(new Runnable(){
          @Override public void run(){
            mData.clear();
            mData.addAll(newData);
            mAdapter.notifyDataSetChanged();
          }
        }
);
      }
      return null;
    }
  }
.execute();
}",0.9896083133493204
86177,"@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  String key=ViewPagerAdapter.SCHEDULE_TAG;
  Object thing=getCachedObject(key);
  if (thing != null) {
    mData=(ArrayList<Model>)thing;
  }
 else {
    setCachedObject(key,mData);
  }
  mAdapter=new ScheduleFragmentAdapter(activity,R.layout.schedule_list_item,mData);
  mAdapter.setFragment(this);
  registerForSync(activity,HackTheNorthApplication.Actions.SYNC_SCHEDULE,mAdapter);
  HTTPFirebase.GET(""String_Node_Str"",activity,HackTheNorthApplication.Actions.SYNC_SCHEDULE);
}","@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  String key=ViewPagerAdapter.SCHEDULE_TAG;
  Object thing=getCachedObject(key);
  if (thing != null) {
    mData=(ArrayList<Model>)thing;
  }
 else {
    setCachedObject(key,mData);
  }
  mAdapter=new ScheduleFragmentAdapter(activity,R.layout.schedule_list_item,mData);
  mAdapter.setFragment(this);
  registerForSync(activity,HackTheNorthApplication.Actions.SYNC_SCHEDULE);
  HTTPFirebase.GET(""String_Node_Str"",activity,HackTheNorthApplication.Actions.SYNC_SCHEDULE);
}",0.9918845807033364
86178,"@Override protected void handleJSONUpdateInBackground(final String json){
  final Activity activity=getActivity();
  new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... nothing){
      final ArrayList<TeamMember> newData=TeamMember.loadTeamMemberArrayFromJSON(json);
      if (activity != null && mAdapter != null) {
        activity.runOnUiThread(new Runnable(){
          @Override public void run(){
            mData.clear();
            mData.addAll(newData);
            mAdapter.notifyDataSetChanged();
          }
        }
);
      }
      return null;
    }
  }
.execute();
}","@Override protected void handleJSONUpdateInBackground(final String json,String action){
  final Activity activity=getActivity();
  new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... nothing){
      final ArrayList<TeamMember> newData=TeamMember.loadTeamMemberArrayFromJSON(json);
      if (activity != null && mAdapter != null) {
        activity.runOnUiThread(new Runnable(){
          @Override public void run(){
            mData.clear();
            mData.addAll(newData);
            mAdapter.notifyDataSetChanged();
          }
        }
);
      }
      return null;
    }
  }
.execute();
}",0.9888712241653418
86179,"@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  String key=ViewPagerAdapter.TEAM_TAG;
  Object thing=getCachedObject(key);
  if (thing != null) {
    mData=(ArrayList<TeamMember>)thing;
  }
 else {
    setCachedObject(key,mData);
  }
  mAdapter=new TeamFragmentAdapter(activity,R.layout.team_list_item,mData);
  registerForSync(activity,HackTheNorthApplication.Actions.SYNC_TEAM,mAdapter);
  HTTPFirebase.GET(""String_Node_Str"",activity,HackTheNorthApplication.Actions.SYNC_TEAM);
}","@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  String key=ViewPagerAdapter.TEAM_TAG;
  Object thing=getCachedObject(key);
  if (thing != null) {
    mData=(ArrayList<TeamMember>)thing;
  }
 else {
    setCachedObject(key,mData);
  }
  mAdapter=new TeamFragmentAdapter(activity,R.layout.team_list_item,mData);
  registerForSync(activity,HackTheNorthApplication.Actions.SYNC_TEAM);
  HTTPFirebase.GET(""String_Node_Str"",activity,HackTheNorthApplication.Actions.SYNC_TEAM);
}",0.9911678115799804
86180,"@Override protected void handleJSONUpdateInBackground(final String json){
  final Activity activity=getActivity();
  new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... nothing){
      final ArrayList<Update> newData=Update.loadUpdateArrayFromJSON(json);
      if (activity != null && mAdapter != null) {
        activity.runOnUiThread(new Runnable(){
          @Override public void run(){
            if (newData.size() > mData.size()) {
              int delta=newData.size() - mData.size();
              for (int i=0; i < delta; i++) {
                mData.add(null);
              }
              for (int i=0; i < newData.size(); i++) {
                mData.set(i,newData.get(i));
              }
              mAdapter.notifyDataSetChanged();
            }
          }
        }
);
      }
      return null;
    }
  }
.execute();
}","@Override protected void handleJSONUpdateInBackground(final String json,String action){
  final Activity activity=getActivity();
  new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... nothing){
      final ArrayList<Update> newData=Update.loadUpdateArrayFromJSON(json);
      if (activity != null && mAdapter != null) {
        activity.runOnUiThread(new Runnable(){
          @Override public void run(){
            if (newData.size() > mData.size()) {
              int delta=newData.size() - mData.size();
              for (int i=0; i < delta; i++) {
                mData.add(null);
              }
              for (int i=0; i < newData.size(); i++) {
                mData.set(i,newData.get(i));
              }
              mAdapter.notifyDataSetChanged();
            }
          }
        }
);
      }
      return null;
    }
  }
.execute();
}",0.9920993227990972
86181,"@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  String key=ViewPagerAdapter.UPDATES_TAG;
  Object thing=getCachedObject(key);
  if (thing != null) {
    mData=(ArrayList<Update>)thing;
  }
 else {
    setCachedObject(key,mData);
  }
  mAdapter=new UpdatesFragmentAdapter(activity,R.layout.update_list_item,mData);
  registerForSync(activity,HackTheNorthApplication.Actions.SYNC_UPDATES,mAdapter);
  HTTPFirebase.GET(""String_Node_Str"",activity,HackTheNorthApplication.Actions.SYNC_UPDATES);
}","@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  String key=ViewPagerAdapter.UPDATES_TAG;
  Object thing=getCachedObject(key);
  if (thing != null) {
    mData=(ArrayList<Update>)thing;
  }
 else {
    setCachedObject(key,mData);
  }
  mAdapter=new UpdatesFragmentAdapter(activity,R.layout.update_list_item,mData);
  registerForSync(activity,HackTheNorthApplication.Actions.SYNC_UPDATES);
  HTTPFirebase.GET(""String_Node_Str"",activity,HackTheNorthApplication.Actions.SYNC_UPDATES);
}",0.9913378248315688
86182,"@Override protected void handleJSONUpdateInBackground(final String json){
  final Activity activity=getActivity();
  new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... nothing){
      final ArrayList<Update> newData=Update.loadUpdateArrayFromJSON(json);
      if (activity != null && mAdapter != null) {
        activity.runOnUiThread(new Runnable(){
          @Override public void run(){
            if (newData.size() > mData.size()) {
              int delta=newData.size() - mData.size();
              for (int i=0; i < delta; i++) {
                mData.add(null);
              }
              for (int i=0; i < newData.size(); i++) {
                mData.set(i,newData.get(i));
              }
            }
          }
        }
);
      }
      return null;
    }
  }
.execute();
}","@Override protected void handleJSONUpdateInBackground(final String json){
  final Activity activity=getActivity();
  new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... nothing){
      final ArrayList<Update> newData=Update.loadUpdateArrayFromJSON(json);
      if (activity != null && mAdapter != null) {
        activity.runOnUiThread(new Runnable(){
          @Override public void run(){
            if (newData.size() > mData.size()) {
              int delta=newData.size() - mData.size();
              for (int i=0; i < delta; i++) {
                mData.add(null);
              }
              for (int i=0; i < newData.size(); i++) {
                mData.set(i,newData.get(i));
              }
              mAdapter.notifyDataSetChanged();
            }
          }
        }
);
      }
      return null;
    }
  }
.execute();
}",0.972530683810637
86183,"@Override protected Void doInBackground(Void... nothing){
  final ArrayList<Update> newData=Update.loadUpdateArrayFromJSON(json);
  if (activity != null && mAdapter != null) {
    activity.runOnUiThread(new Runnable(){
      @Override public void run(){
        if (newData.size() > mData.size()) {
          int delta=newData.size() - mData.size();
          for (int i=0; i < delta; i++) {
            mData.add(null);
          }
          for (int i=0; i < newData.size(); i++) {
            mData.set(i,newData.get(i));
          }
        }
      }
    }
);
  }
  return null;
}","@Override protected Void doInBackground(Void... nothing){
  final ArrayList<Update> newData=Update.loadUpdateArrayFromJSON(json);
  if (activity != null && mAdapter != null) {
    activity.runOnUiThread(new Runnable(){
      @Override public void run(){
        if (newData.size() > mData.size()) {
          int delta=newData.size() - mData.size();
          for (int i=0; i < delta; i++) {
            mData.add(null);
          }
          for (int i=0; i < newData.size(); i++) {
            mData.set(i,newData.get(i));
          }
          mAdapter.notifyDataSetChanged();
        }
      }
    }
);
  }
  return null;
}",0.9644921552436004
86184,"@Override public void run(){
  if (newData.size() > mData.size()) {
    int delta=newData.size() - mData.size();
    for (int i=0; i < delta; i++) {
      mData.add(null);
    }
    for (int i=0; i < newData.size(); i++) {
      mData.set(i,newData.get(i));
    }
  }
}","@Override public void run(){
  if (newData.size() > mData.size()) {
    int delta=newData.size() - mData.size();
    for (int i=0; i < delta; i++) {
      mData.add(null);
    }
    for (int i=0; i < newData.size(); i++) {
      mData.set(i,newData.get(i));
    }
    mAdapter.notifyDataSetChanged();
  }
}",0.9356521739130436
86185,"@Override public void onSizeChanged(int w,int h,int oldWidth,int oldHeight){
  double radius=Units.dpToPx(getContext(),50);
  double smallRadius=Math.sqrt(radius * radius * 3.0d / 4.0d);
  boolean stagger=false;
  double vadjust=Units.dpToPx(getContext(),0.0d);
  double hadjust=(radius * radius) / (250.0d * 250.0d);
  for (double i=0; i < h + radius; i+=smallRadius + vadjust) {
    double j=0.0d;
    if (stagger) {
      j=(int)(2 * smallRadius * Math.cos(11 * Math.PI / 6));
    }
    for (; j < w + radius; j+=3 * radius) {
      if (stagger) {
        j+=hadjust;
      }
      mHexagons.add(new RegularHexagon(j,i,radius));
    }
    stagger=!stagger;
  }
}","@Override public void onSizeChanged(int w,int h,int oldWidth,int oldHeight){
  initializeHexagons(w,h,oldWidth,oldHeight);
}",0.2661596958174905
86186,"@Override public boolean onTouchEvent(@NonNull final MotionEvent event){
  if (event.getActionMasked() == MotionEvent.ACTION_DOWN) {
    eventDown=System.currentTimeMillis();
  }
 else   if (event.getActionMasked() == MotionEvent.ACTION_UP || event.getActionMasked() == MotionEvent.ACTION_CANCEL) {
    eventUp=System.currentTimeMillis();
    long touchDuration=eventUp - eventDown;
    touchDuration=touchDuration < 250 ? 250 : (touchDuration > 2000 ? 2000 : touchDuration);
    long longTouch=2000;
    float ratio=(float)Math.sqrt((float)longTouch / (float)touchDuration);
    int endRadius=(int)getEndRadius(event.getX(),event.getY());
    final Animator animator=new Animator(this,event.getX(),event.getY(),endRadius);
    int totalDuration=endRadius / 2;
    final ObjectAnimator fadeInAnimator=ObjectAnimator.ofInt(animator,""String_Node_Str"",0,25);
    fadeInAnimator.setInterpolator(new AccelerateInterpolator());
    fadeInAnimator.setDuration(100);
    final ObjectAnimator circleAnimator=ObjectAnimator.ofFloat(animator,""String_Node_Str"",0,endRadius);
    circleAnimator.setInterpolator(new DecelerateInterpolator());
    circleAnimator.setDuration(totalDuration);
    final ObjectAnimator fadeOutAnimator=ObjectAnimator.ofInt(animator,""String_Node_Str"",25,0);
    fadeOutAnimator.setInterpolator(new LinearInterpolator());
    fadeOutAnimator.setStartDelay(totalDuration / 2);
    fadeOutAnimator.setDuration(totalDuration / 2);
    animatorSet.add(animator);
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        animatorSet.remove(animator);
      }
    }
,totalDuration);
    fadeInAnimator.start();
    circleAnimator.start();
    fadeOutAnimator.start();
  }
  return true;
}","@Override public boolean onTouchEvent(@NonNull final MotionEvent event){
  if (event.getActionMasked() == MotionEvent.ACTION_DOWN) {
    eventDown=System.currentTimeMillis();
  }
 else   if (event.getActionMasked() == MotionEvent.ACTION_UP) {
    eventUp=System.currentTimeMillis();
    long touchDuration=eventUp - eventDown;
    touchDuration=touchDuration < 250 ? 250 : (touchDuration > 2000 ? 2000 : touchDuration);
    long longTouch=2000;
    float ratio=(float)Math.sqrt((float)longTouch / (float)touchDuration);
    int endRadius=(int)getEndRadius(event.getX(),event.getY());
    final Animator animator=new Animator(this,event.getX(),event.getY(),endRadius);
    int totalDuration=endRadius / 2;
    final ObjectAnimator fadeInAnimator=ObjectAnimator.ofInt(animator,""String_Node_Str"",0,25);
    fadeInAnimator.setInterpolator(new AccelerateInterpolator());
    fadeInAnimator.setDuration(100);
    final ObjectAnimator circleAnimator=ObjectAnimator.ofFloat(animator,""String_Node_Str"",0,endRadius);
    circleAnimator.setInterpolator(new DecelerateInterpolator());
    circleAnimator.setDuration(totalDuration);
    final ObjectAnimator fadeOutAnimator=ObjectAnimator.ofInt(animator,""String_Node_Str"",25,0);
    fadeOutAnimator.setInterpolator(new LinearInterpolator());
    fadeOutAnimator.setStartDelay(totalDuration / 2);
    fadeOutAnimator.setDuration(totalDuration / 2);
    animatorSet.add(animator);
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        animatorSet.remove(animator);
      }
    }
,totalDuration);
    fadeInAnimator.start();
    circleAnimator.start();
    fadeOutAnimator.start();
  }
  return true;
}",0.9835197174808712
86187,"@Override public boolean onTouchEvent(@NonNull final MotionEvent event){
  if (event.getActionMasked() == MotionEvent.ACTION_UP) {
    mDownX=event.getX();
    mDownY=event.getY();
    int endRadius=Units.dpToPx(getContext(),128);
    final ObjectAnimator fadeInAnimator=ObjectAnimator.ofInt(this,""String_Node_Str"",0,25);
    fadeInAnimator.setInterpolator(new AccelerateInterpolator());
    fadeInAnimator.setDuration(100);
    final ObjectAnimator circleAnimator=ObjectAnimator.ofFloat(this,""String_Node_Str"",0,endRadius);
    circleAnimator.setInterpolator(new DecelerateInterpolator());
    circleAnimator.setDuration(200);
    final ObjectAnimator fadeOutAnimator=ObjectAnimator.ofInt(this,""String_Node_Str"",25,0);
    fadeOutAnimator.setInterpolator(new LinearInterpolator());
    fadeOutAnimator.setStartDelay(150);
    fadeOutAnimator.setDuration(300);
    new Runnable(){
      @Override public void run(){
        fadeInAnimator.start();
        circleAnimator.start();
        fadeOutAnimator.start();
      }
    }
.run();
  }
  super.onTouchEvent(event);
  return true;
}","@Override public boolean onTouchEvent(@NonNull final MotionEvent event){
  if (event.getActionMasked() == MotionEvent.ACTION_UP) {
    mDownX=event.getX();
    mDownY=event.getY();
    int endRadius=Units.dpToPx(getContext(),128);
    final ObjectAnimator fadeInAnimator=ObjectAnimator.ofInt(this,""String_Node_Str"",0,25);
    fadeInAnimator.setInterpolator(new AccelerateInterpolator());
    fadeInAnimator.setDuration(100);
    final ObjectAnimator circleAnimator=ObjectAnimator.ofFloat(this,""String_Node_Str"",0,endRadius * 2);
    circleAnimator.setInterpolator(new DecelerateInterpolator());
    circleAnimator.setDuration(400);
    final ObjectAnimator fadeOutAnimator=ObjectAnimator.ofInt(this,""String_Node_Str"",25,0);
    fadeOutAnimator.setInterpolator(new LinearInterpolator());
    fadeOutAnimator.setStartDelay(150);
    fadeOutAnimator.setDuration(300);
    new Runnable(){
      @Override public void run(){
        fadeInAnimator.start();
        circleAnimator.start();
        fadeOutAnimator.start();
      }
    }
.run();
  }
  super.onTouchEvent(event);
  return true;
}",0.9972375690607734
86188,"private String getSkillsString(ArrayList<String> skillsList){
  String skills=""String_Node_Str"";
  for (  String skill : skillsList) {
    if (skillsList.indexOf(skill) != 0) {
      skills+=""String_Node_Str"";
    }
    skills+=skill;
  }
  return skills;
}","private String getSkillsString(ArrayList<String> skillsList){
  if (skillsList == null || skillsList.size() == 0) {
    return null;
  }
  String skills=skillsList.get(0);
  for (int i=1; i < skillsList.size(); i++) {
    skills+=""String_Node_Str"" + skillsList.get(i);
  }
  return skills;
}",0.3248175182481752
86189,"private String getAvailabilityString(ArrayList<ArrayList<String>> timeslots){
  String availability=""String_Node_Str"";
  if (timeslots == null) {
    return null;
  }
  for (  ArrayList<String> timeslotTimes : timeslots) {
    if (timeslotTimes.size() != 2) {
      Log.e(TAG,""String_Node_Str"");
      return null;
    }
    Timeslot start=buildTimeslot(timeslotTimes.get(0));
    Timeslot end=buildTimeslot(timeslotTimes.get(1));
    if (start.day.equals(end.day)) {
      availability+=start.day + ""String_Node_Str"";
      if (start.period.equals(end.period)) {
        availability+=start.hour + ""String_Node_Str"" + start.minute+ ""String_Node_Str""+ end.hour+ ""String_Node_Str""+ end.minute+ end.period;
      }
 else {
        availability+=start.hour + ""String_Node_Str"" + start.minute+ start.period+ ""String_Node_Str""+ end.hour+ ""String_Node_Str""+ end.minute+ end.period;
      }
    }
 else {
      availability+=start.day + ""String_Node_Str"" + start.hour+ ""String_Node_Str""+ start.minute+ start.period+ ""String_Node_Str""+ end.day+ ""String_Node_Str""+ end.hour+ ""String_Node_Str""+ end.minute+ end.period;
    }
    if (timeslots.indexOf(timeslotTimes) != timeslots.size() - 1) {
      availability+=""String_Node_Str"";
    }
  }
  return availability;
}","private String getAvailabilityString(ArrayList<ArrayList<String>> timeslots){
  if (timeslots == null || timeslots.size() == 0) {
    return null;
  }
  String availability=""String_Node_Str"";
  for (int i=0; i < timeslots.size(); i++) {
    ArrayList<String> timeslotTimes=timeslots.get(i);
    if (timeslotTimes.size() != 2) {
      Log.e(TAG,""String_Node_Str"");
      return null;
    }
    Timeslot start=buildTimeslot(timeslotTimes.get(0));
    Timeslot end=buildTimeslot(timeslotTimes.get(1));
    if (start.day.equals(end.day)) {
      availability+=start.day + ""String_Node_Str"";
      if (start.period.equals(end.period)) {
        availability+=start.hour + ""String_Node_Str"" + start.minute+ ""String_Node_Str""+ end.hour+ ""String_Node_Str""+ end.minute+ end.period;
      }
 else {
        availability+=start.hour + ""String_Node_Str"" + start.minute+ start.period+ ""String_Node_Str""+ end.hour+ ""String_Node_Str""+ end.minute+ end.period;
      }
    }
 else {
      availability+=start.day + ""String_Node_Str"" + start.hour+ ""String_Node_Str""+ start.minute+ start.period+ ""String_Node_Str""+ end.day+ ""String_Node_Str""+ end.hour+ ""String_Node_Str""+ end.minute+ end.period;
    }
    if (i != timeslots.size() - 1) {
      availability+=""String_Node_Str"";
    }
  }
  return availability;
}",0.912514711651628
86190,"public void onUpdate(String json){
  if (mData == null) {
    mData=Mentor.loadMentorArrayFromJSON(json);
    setupAdapterIfReady();
  }
 else {
    ArrayList<Mentor> newData=Mentor.loadMentorArrayFromJSON(json);
    mData.clear();
    mData.addAll(newData);
  }
}","public void onUpdate(String json){
  if (mData == null) {
    mData=Mentor.loadMentorArrayFromJSON(json);
    setupAdapterIfReady();
  }
 else {
    ArrayList<Mentor> newData=Mentor.loadMentorArrayFromJSON(json);
    mData.clear();
    mData.addAll(newData);
    mAdapter.notifyDataSetChanged();
  }
}",0.9345132743362832
86191,"public View getView(int position,View convertView,ViewGroup parent){
  if (convertView == null) {
    LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    convertView=inflater.inflate(mResource,parent,false);
  }
  Mentor mentor=mData.get(position);
  NetworkImageView networkImageView=(NetworkImageView)convertView.findViewById(R.id.mentor_image);
  networkImageView.setDefaultImageResId(R.drawable.ic_launcher);
  ImageLoader loader=NetworkManager.getImageLoader();
  if (!""String_Node_Str"".equals(mentor.image)) {
    networkImageView.setVisibility(View.VISIBLE);
    networkImageView.setImageUrl(mentor.image,loader);
  }
 else {
    networkImageView.setVisibility(View.GONE);
  }
  ((TextView)convertView.findViewById(R.id.mentor_name)).setText(mentor.name);
  ((TextView)convertView.findViewById(R.id.mentor_organization)).setText(mentor.organization);
  ((TextView)convertView.findViewById(R.id.mentor_availability)).setText(getAvailabilityString(mentor.availability));
  ((TextView)convertView.findViewById(R.id.mentor_skills)).setText(getSkillsString(mentor.skills));
  return convertView;
}","public View getView(int position,View convertView,ViewGroup parent){
  if (convertView == null) {
    LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    convertView=inflater.inflate(mResource,parent,false);
  }
  Mentor mentor=mData.get(position);
  NetworkImageView networkImageView=(NetworkImageView)convertView.findViewById(R.id.mentor_image);
  networkImageView.setDefaultImageResId(R.drawable.ic_launcher);
  ImageLoader loader=NetworkManager.getImageLoader();
  if (!TextUtils.isEmpty(mentor.image)) {
    networkImageView.setVisibility(View.VISIBLE);
    networkImageView.setImageUrl(mentor.image,loader);
  }
 else {
    networkImageView.setVisibility(View.GONE);
  }
  ((TextView)convertView.findViewById(R.id.mentor_name)).setText(mentor.name);
  ((TextView)convertView.findViewById(R.id.mentor_organization)).setText(mentor.organization);
  ((TextView)convertView.findViewById(R.id.mentor_availability)).setText(getAvailabilityString(mentor.availability));
  ((TextView)convertView.findViewById(R.id.mentor_skills)).setText(getSkillsString(mentor.skills));
  return convertView;
}",0.982197134172818
86192,"@Override public Collection<Callable<?>> getExternalMappings(){
  Collection<Callable<?>> callbacks=new ArrayList<Callable<?>>();
  for (  MappingType mapping : externalMappings) {
    if (outputMappings.containsKey(mapping))     callbacks.add((Callable<?>)getAs(mapping));
  }
  return callbacks;
}","@Override public Collection<Callable<?>> getExternalMappings(){
  if (this.events != null)   return getAllCallablesInInterval(getCurrentInterval());
  Collection<Callable<?>> callbacks=new ArrayList<Callable<?>>();
  for (  MappingType mapping : externalMappings) {
    if (outputMappings.containsKey(mapping))     callbacks.add((Callable<?>)getAs(mapping));
  }
  return callbacks;
}",0.8755490483162518
86193,"@Override public double getValueFor(Interval now){
  double value=defaultValue;
  if (this.function != null) {
    try {
      value=function.call(now);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (this.events != null) {
    Collection<Event> activeEvents=this.events.getForInterval(now);
    for (    Event e : activeEvents) {
      value=e.getValue();
    }
  }
  value*=valueScale;
  value+=valueOffset;
  value=MathOps.modInterval(value);
  return value;
}","@Override public double getValueFor(Interval now){
  double value=defaultValue;
  if (this.function != null) {
    try {
      value=function.call(now);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (this.events != null) {
    Collection<Event> activeEvents=this.events.getForInterval(now);
    for (    Event e : activeEvents) {
      value=e.getValue();
    }
  }
  value=transformValue(value);
  return value;
}",0.864693446088795
86194,"public Void call() throws Exception {
  int priorValue=lastValue.getAndSet(index);
  if (priorValue < index) {
    inner.call();
  }
  return null;
}","@Override public Void call() throws Exception {
  int priorValue=lastValue.getAndSet(index);
  if (priorValue != index) {
    inner.call();
  }
  return null;
}",0.9579288025889968
86195,"public String toString(){
  return ""String_Node_Str"" + inner.toString() + ""String_Node_Str""+ ""String_Node_Str""+ Integer.toHexString(hashCode());
}","@Override public String toString(){
  return ""String_Node_Str"" + inner.toString() + ""String_Node_Str""+ ""String_Node_Str""+ Integer.toHexString(hashCode());
}",0.9668874172185432
86196,"@SuppressWarnings(""String_Node_Str"") @Test public void noteOnAndOff(){
  final AtomicInteger noteOffs=new AtomicInteger();
  final AtomicInteger noteOns=new AtomicInteger();
  Callable<Void> noteOffInc=new Callable<Void>(){
    @Override public Void call(){
      noteOffs.getAndIncrement();
      return null;
    }
  }
;
  Callable<Void> noteOnInc=new Callable<Void>(){
    @Override public Void call(){
      noteOns.getAndIncrement();
      return null;
    }
  }
;
  pattern.extend(""String_Node_Str"");
  ConcretePattern trigger=ConcretePattern.forEach(pattern.getConcretePattern());
  trigger.asStatefulCallable(CallableOnChange.fromCallables(noteOffInc,noteOnInc));
  pattern.addChild(trigger);
  scheduler.setElapsedMillis(501);
  assertThat(noteOffs.get(),is(equalTo(2)));
  assertThat(noteOns.get(),is(equalTo(3)));
  scheduler.setElapsedMillis(1000);
  assertThat(noteOffs.get(),is(equalTo(4)));
  assertThat(noteOns.get(),is(equalTo(4)));
}","@SuppressWarnings(""String_Node_Str"") @Test public void noteOnAndOff(){
  final AtomicInteger noteOffs=new AtomicInteger();
  final AtomicInteger noteOns=new AtomicInteger();
  Callable<Void> noteOffInc=new Callable<Void>(){
    @Override public Void call(){
      noteOffs.getAndIncrement();
      return null;
    }
  }
;
  Callable<Void> noteOnInc=new Callable<Void>(){
    @Override public Void call(){
      noteOns.getAndIncrement();
      return null;
    }
  }
;
  pattern.extend(""String_Node_Str"");
  ConcretePattern trigger=ConcretePattern.forEach(pattern.getConcretePattern());
  trigger.asStatefulCallable(CallableOnChange.fromCallables(noteOffInc,noteOnInc));
  pattern.addChild(trigger);
  scheduler.setElapsedMillis(501);
  assertThat(noteOns.get(),is(equalTo(3)));
  assertThat(noteOffs.get(),is(equalTo(2)));
  scheduler.setElapsedMillis(1000);
  assertThat(noteOns.get(),is(equalTo(4)));
  assertThat(noteOffs.get(),is(equalTo(4)));
}",0.9915878023133544
86197,"public Void call(){
  count2.incrementAndGet();
  return null;
}","@Override public Void call(){
  count2.incrementAndGet();
  return null;
}",0.927536231884058
86198,"@Test public void onlyOnceWithTwoCallables() throws Exception {
  final AtomicInteger count1=new AtomicInteger();
  final AtomicInteger count2=new AtomicInteger();
  Callable<Void> one=new Callable<Void>(){
    public Void call(){
      count1.incrementAndGet();
      return null;
    }
  }
;
  Callable<Void> two=new Callable<Void>(){
    public Void call(){
      count2.incrementAndGet();
      return null;
    }
  }
;
  StatefulCallable[] callables=CallableOnChange.fromCallables(one,two);
  callables[1].call();
  callables[1].call();
  assertThat(count1.get(),is(equalTo(1)));
  assertThat(count2.get(),is(equalTo(0)));
  callables[2].call();
  callables[1].call();
  assertThat(count1.get(),is(equalTo(1)));
  assertThat(count2.get(),is(equalTo(1)));
  callables[0].call();
  callables[2].call();
  assertThat(count1.get(),is(equalTo(1)));
  assertThat(count2.get(),is(equalTo(2)));
}","@Test public void onlyOnceWithTwoCallables() throws Exception {
  final AtomicInteger count1=new AtomicInteger();
  final AtomicInteger count2=new AtomicInteger();
  Callable<Void> one=new Callable<Void>(){
    @Override public Void call(){
      count1.incrementAndGet();
      return null;
    }
  }
;
  Callable<Void> two=new Callable<Void>(){
    @Override public Void call(){
      count2.incrementAndGet();
      return null;
    }
  }
;
  StatefulCallable[] callables=CallableOnChange.fromCallables(one,two);
  callables[1].call();
  callables[1].call();
  assertThat(count1.get(),is(equalTo(1)));
  assertThat(count2.get(),is(equalTo(0)));
  callables[1].call();
  callables[2].call();
  assertThat(count1.get(),is(equalTo(1)));
  assertThat(count2.get(),is(equalTo(1)));
  callables[0].call();
  callables[2].call();
  assertThat(count1.get(),is(equalTo(1)));
  assertThat(count2.get(),is(equalTo(2)));
}",0.9634551495016612
86199,"@Test public void onlyOnce() throws Exception {
  final AtomicInteger totalCount=new AtomicInteger();
  StatefulCallable[] callables=CallableOnChange.fromCallables(new Callable<Void>(){
    public Void call(){
      totalCount.incrementAndGet();
      return null;
    }
  }
);
  StatefulCallable one=callables[0];
  StatefulCallable add=callables[1];
  one.call();
  add.call();
  add.call();
  assertThat(totalCount.get(),is(equalTo(1)));
  one.call();
  add.call();
  add.call();
  add.call();
  assertThat(totalCount.get(),is(equalTo(2)));
}","@Test public void onlyOnce() throws Exception {
  final AtomicInteger totalCount=new AtomicInteger();
  StatefulCallable[] callables=CallableOnChange.fromCallables(new Callable<Void>(){
    @Override public Void call(){
      totalCount.incrementAndGet();
      return null;
    }
  }
);
  StatefulCallable one=callables[0];
  StatefulCallable add=callables[1];
  one.call();
  add.call();
  add.call();
  assertThat(totalCount.get(),is(equalTo(1)));
  one.call();
  add.call();
  add.call();
  add.call();
  assertThat(totalCount.get(),is(equalTo(2)));
}",0.990909090909091
86200,"public DrawCommand[] getDrawCommands(){
  DrawCommand[] commands=new DrawCommand[alphabet.length()];
  for (int i=0; i < commands.length; i++) {
    DrawCommand command=drawCommands.get(alphabet.charAt(i));
    commands[i]=command != null ? command : Draw.NOOP;
  }
  return commands;
}","public DrawCommand[] getDrawCommands(){
  DrawCommand[] commands=new DrawCommand[alphabet.length()];
  for (int i=0; i < commands.length; i++) {
    DrawCommand command=drawCommands.get(alphabet.substring(i,i + 1));
    commands[i]=command != null ? command : Draw.NOOP;
  }
  return commands;
}",0.9569707401032702
86201,"public Interval getCurrentInterval(){
  BigFraction now=getNow();
  return new Interval(now.subtract(minimumResolution),now);
}","public Interval getCurrentInterval(){
  BigFraction now=getNow();
  return new Interval(now.subtract(halfMinimum),now.add(halfMinimum));
}",0.8754716981132076
86202,"private void archiveOldLogFiles() throws IOException {
  if (config.getDeleteOldFiles()) {
    final File archiveDir=new File(getLogDirectory(),""String_Node_Str"");
    archiveDir.mkdir();
    long index=commitIndex - (config.getEntriesPerSnapshot() * 4);
    while (index >= 0) {
      logger.info(""String_Node_Str"",Long.toHexString(index));
      File file=getFile(index,true);
      if (file.exists()) {
        logger.info(""String_Node_Str"",file);
        file.renameTo(new File(archiveDir,file.getName()));
      }
 else {
        break;
      }
      index-=config.getEntriesPerFile();
    }
    final Pattern p=Pattern.compile(""String_Node_Str"");
    for (    File file : getLogDirectory().listFiles()) {
      Matcher m=p.matcher(file.getName());
      if (m.matches()) {
        final long snapIndex=Long.parseLong(m.group(1),16);
        logger.info(""String_Node_Str"",Long.toHexString(index),file,Long.toHexString(snapIndex));
        if (snapIndex < index) {
          if (index % (config.getEntriesPerSnapshot() * 16) == 0) {
            logger.info(""String_Node_Str"",file);
            file.renameTo(new File(archiveDir,file.getName()));
          }
 else {
            logger.info(""String_Node_Str"",file);
            file.delete();
          }
        }
      }
    }
  }
}","private void archiveOldLogFiles() throws IOException {
  if (config.getDeleteOldFiles()) {
    final File archiveDir=new File(getLogDirectory(),""String_Node_Str"");
    archiveDir.mkdir();
    long index=commitIndex - (config.getEntriesPerSnapshot() * 4);
    while (index >= 0) {
      logger.info(""String_Node_Str"",Long.toHexString(index));
      File file=getFile(index,true);
      if (file.exists()) {
        logger.info(""String_Node_Str"",file);
        file.renameTo(new File(archiveDir,file.getName()));
      }
 else {
        break;
      }
      index-=config.getEntriesPerFile();
    }
    final Pattern p=Pattern.compile(""String_Node_Str"");
    for (    File file : getLogDirectory().listFiles()) {
      Matcher m=p.matcher(file.getName());
      if (m.matches()) {
        final long snapIndex=Long.parseLong(m.group(1),16);
        logger.info(""String_Node_Str"",Long.toHexString(index),file,Long.toHexString(snapIndex));
        if (snapIndex < index) {
          if (snapIndex % (config.getEntriesPerSnapshot() * 16) == 0) {
            logger.info(""String_Node_Str"",file);
            file.renameTo(new File(archiveDir,file.getName()));
          }
 else {
            logger.info(""String_Node_Str"",file);
            file.delete();
          }
        }
      }
    }
  }
}",0.9976726144297904
86203,"/** 
 * Writes this entry to an output stream
 */
public void write(DataOutputStream out) throws IOException {
  out.writeLong(term);
  out.writeLong(index);
  out.writeInt(command.getCommandType());
  command.write(out);
}","/** 
 * Writes this entry to an output stream
 */
public void write(DataOutputStream out) throws IOException {
}",0.6686567164179105
86204,"@Override public void loadState(DataInputStream in,int snapshotVersion) throws IOException {
  int fileVersion=snapshotVersion >= 3 ? in.readInt() : 0;
  items.clear();
  copyOnWrite.clear();
  int numItems=in.readInt();
  while (numItems-- > 0) {
    StorageItem item=new StorageItem(in,fileVersion);
    items.put(item.key,item);
  }
}","@Override public void loadState(DataInputStream in,int snapshotVersion) throws IOException {
  items.clear();
  copyOnWrite.clear();
  int fileVersion=snapshotVersion >= 3 ? in.readInt() : 0;
  int numItems=in.readInt();
  while (numItems-- > 0) {
    StorageItem item=new StorageItem(in,fileVersion);
    items.put(item.key,item);
  }
}",0.8813056379821959
86205,"@Override public void saveState(DataOutputStream out) throws IOException {
  final Map<String,StorageItem> modified=new HashMap<>();
  out.write(STORAGE_STATE_FILE_VERSION);
  long writeIndex;
  List<StorageItem> list;
synchronized (copyOnWrite) {
    writeIndex=getIndex();
    copyOnWrite.put(writeIndex,modified);
    list=new ArrayList<StorageItem>(items.values());
  }
  out.writeInt(list.size());
  for (  StorageItem item : list) {
synchronized (copyOnWrite) {
      StorageItem modItem=modified.get(item.key);
      if (modItem != null) {
        modItem.write(out);
      }
 else {
        item.write(out);
      }
    }
  }
synchronized (copyOnWrite) {
    copyOnWrite.remove(writeIndex);
  }
  modified.clear();
}","@Override public void saveState(DataOutputStream out) throws IOException {
  final Map<String,StorageItem> modified=new HashMap<>();
  out.writeInt(STORAGE_STATE_FILE_VERSION);
  long writeIndex;
  List<StorageItem> list;
synchronized (copyOnWrite) {
    writeIndex=getIndex();
    copyOnWrite.put(writeIndex,modified);
    list=new ArrayList<StorageItem>(items.values());
  }
  out.writeInt(list.size());
  for (  StorageItem item : list) {
synchronized (copyOnWrite) {
      StorageItem modItem=modified.get(item.key);
      if (modItem != null) {
        modItem.write(out);
      }
 else {
        item.write(out);
      }
    }
  }
synchronized (copyOnWrite) {
    copyOnWrite.remove(writeIndex);
  }
  modified.clear();
}",0.9979324603721572
86206,"private void archiveOldLogFiles() throws IOException {
  if (config.getDeleteOldFiles()) {
    long index=commitIndex - (config.getEntriesPerSnapshot() * 4);
    while (index > 0) {
      File file=getFile(index,true);
      if (file.exists()) {
        logger.info(""String_Node_Str"",file);
        File newFile=new File(""String_Node_Str"",file.getName());
        newFile.mkdirs();
        file.renameTo(newFile);
      }
 else {
        break;
      }
      index-=config.getEntriesPerFile();
    }
  }
}","private void archiveOldLogFiles() throws IOException {
  if (config.getDeleteOldFiles()) {
    long index=commitIndex - (config.getEntriesPerSnapshot() * 4);
    while (index > 0) {
      File file=getFile(index,true);
      if (file.exists()) {
        logger.info(""String_Node_Str"",file);
        File archiveDir=new File(getLogDirectory(),""String_Node_Str"");
        archiveDir.mkdir();
        File newFile=new File(archiveDir,file.getName());
        file.renameTo(newFile);
      }
 else {
        break;
      }
      index-=config.getEntriesPerFile();
    }
  }
}",0.8475836431226765
86207,"/** 
 * Applies log entries to our state machine until it is at the given index
 */
private synchronized void updateStateMachine(){
  try {
synchronized (stateMachine) {
      while (commitIndex > stateMachine.getIndex()) {
        final Entry<T> e=getEntry(stateMachine.getIndex() + 1);
        assert(e != null);
        stateMachine.apply(e);
        ensureCorrectLogFile(e.index);
        e.write(out);
        if ((e.index % config.getEntriesPerSnapshot()) == 0) {
          saveSnapshot();
        }
      }
    }
  }
 catch (  IOException e) {
    logger.error(e.getMessage(),e);
    running=false;
  }
}","/** 
 * Applies log entries to our state machine until it is at the given index
 */
private synchronized void updateStateMachine(){
  try {
synchronized (stateMachine) {
      while (commitIndex > stateMachine.getIndex()) {
        final Entry<T> e=getEntry(stateMachine.getIndex() + 1);
        assert(e != null);
        assert(e.index == stateMachine.getIndex() + 1);
        stateMachine.apply(e);
        ensureCorrectLogFile(e.index);
        e.write(out);
        if ((e.index % config.getEntriesPerSnapshot()) == 0) {
          saveSnapshot();
        }
      }
    }
  }
 catch (  IOException e) {
    logger.error(e.getMessage(),e);
    running=false;
  }
}",0.9561815336463224
86208,"/** 
 * Discards entries from our buffer that we no longer need to store in memory
 */
private synchronized void compact(){
  if (entries.size() > config.getEntriesPerFile() * 2) {
    logger.info(""String_Node_Str"",entries.size());
    List<Entry<T>> entriesToKeep=new ArrayList<>();
    for (    Entry<T> e : entries) {
      if (e.index > commitIndex || e.index > stateMachine.getIndex() || e.index > lastIndex - config.getEntriesPerFile()) {
        entriesToKeep.add(e);
      }
    }
    entries.clear();
    entries.addAll(entriesToKeep);
    Entry<T> first=entries.get(0);
    firstIndex=first.index;
    firstTerm=first.term;
    logger.info(""String_Node_Str"",entries.size());
  }
  if (config.getDeleteOldFiles()) {
    long index=commitIndex - (config.getEntriesPerSnapshot() * 2);
    while (index > 0) {
      File file=getFile(index);
      if (file.exists()) {
        logger.info(""String_Node_Str"",file);
        file.delete();
      }
 else {
        break;
      }
      index-=config.getEntriesPerFile();
    }
  }
}","/** 
 * Discards entries from our buffer that we no longer need to store in memory
 */
private synchronized void compact(){
  if (entries.size() > config.getEntriesPerFile() * 2) {
    if (firstIndex > commitIndex || firstIndex > stateMachine.getIndex() || firstIndex > lastIndex - config.getEntriesPerFile()) {
      return;
    }
    logger.info(""String_Node_Str"",entries.size());
    List<Entry<T>> entriesToKeep=new ArrayList<>();
    for (    Entry<T> e : entries) {
      if (e.index > commitIndex || e.index > stateMachine.getIndex() || e.index > lastIndex - config.getEntriesPerFile()) {
        entriesToKeep.add(e);
      }
    }
    entries.clear();
    entries.addAll(entriesToKeep);
    Entry<T> first=entries.get(0);
    firstIndex=first.index;
    firstTerm=first.term;
    logger.info(""String_Node_Str"",entries.size(),firstIndex);
  }
  if (config.getDeleteOldFiles()) {
    long index=commitIndex - (config.getEntriesPerSnapshot() * 2);
    while (index > 0) {
      File file=getFile(index);
      if (file.exists()) {
        logger.info(""String_Node_Str"",file);
        file.delete();
      }
 else {
        break;
      }
      index-=config.getEntriesPerFile();
    }
  }
}",0.927354260089686
86209,"/** 
 * Read and apply all available entries in the log from disk
 * @throws FileNotFoundException
 */
private synchronized void replayLogs() throws IOException {
  Entry<T> entry=null;
  do {
    entry=getEntryFromDisk(stateMachine.getIndex() + 1);
    if (entry != null) {
      stateMachine.apply(entry);
    }
  }
 while (entry != null);
  final List<Entry<T>> list=loadLogFile(getFile(stateMachine.getIndex()));
  if (list != null && list.size() > 0) {
    assert(entries.size() == 0);
    entries.addAll(list);
    firstIndex=entries.get(0).index;
    firstTerm=entries.get(0).term;
    lastIndex=entries.get(entries.size() - 1).index;
    lastTerm=entries.get(entries.size() - 1).term;
    out=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(getFile(firstIndex))));
    out.writeInt(LOG_FILE_VERSION);
    for (    Entry<T> e : list) {
      e.write(out);
    }
  }
}","/** 
 * Read and apply all available entries in the log from disk
 * @throws FileNotFoundException
 */
private synchronized void replayLogs() throws IOException {
  Entry<T> entry=null;
  do {
    entry=getEntryFromDisk(stateMachine.getIndex() + 1);
    if (entry != null) {
      stateMachine.apply(entry);
    }
  }
 while (entry != null);
  final List<Entry<T>> list=loadLogFile(getFile(stateMachine.getIndex()));
  if (list != null && list.size() > 0) {
    assert(entries.size() == 0);
    entries.addAll(list);
    firstIndex=entries.get(0).index;
    firstTerm=entries.get(0).term;
    lastIndex=entries.get(entries.size() - 1).index;
    lastTerm=entries.get(entries.size() - 1).term;
    out=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(getFile(firstIndex))));
    out.writeInt(LOG_FILE_VERSION);
    for (    Entry<T> e : list) {
      e.write(out);
    }
    logger.info(""String_Node_Str"",firstIndex,entries.get(0).index);
  }
}",0.9633225458468176
86210,"public List<Entry<T>> loadLogFile(File file){
synchronized (entryFileCache) {
    List<Entry<T>> list=entryFileCache.get(file.getName());
    if (list == null) {
      list=new ArrayList<>();
      if (file.exists()) {
        try (DataInputStream in=new DataInputStream(new BufferedInputStream(new FileInputStream(file)))){
          final int version=in.readInt();
          assert(version <= LOG_FILE_VERSION);
          while (true) {
            list.add(new Entry<T>(in,stateMachine));
          }
        }
 catch (        EOFException t) {
          logger.debug(""String_Node_Str"",list.size(),file);
        }
catch (        Throwable t) {
          logger.error(t.getMessage(),t);
        }
      }
      entryFileCache.put(file.getName(),list);
    }
    return list;
  }
}","public List<Entry<T>> loadLogFile(File file) throws IOException {
}",0.148235294117647
86211,"public long getTerm(long index){
  if (index == 0) {
    return 0;
  }
  if (index == stateMachine.getPrevIndex()) {
    return stateMachine.getPrevTerm();
  }
  if (index == stateMachine.getIndex()) {
    return stateMachine.getTerm();
  }
  return getEntry(index).term;
}","public long getTerm(long index){
  if (index == 0) {
    return 0;
  }
  if (index == stateMachine.getPrevIndex()) {
    return stateMachine.getPrevTerm();
  }
  if (index == stateMachine.getIndex()) {
    return stateMachine.getTerm();
  }
  final Entry<T> e=getEntry(index);
  if (e == null) {
    logger.error(""String_Node_Str"",index);
  }
  return e.term;
}",0.807570977917981
86212,"protected synchronized void loadSnapshot() throws IOException {
  File file=new File(getLogDirectory(),""String_Node_Str"");
  if (file.exists()) {
    logger.info(""String_Node_Str"",file);
    stateMachine.readSnapshot(file);
    logger.info(""String_Node_Str"",stateMachine.getTerm(),stateMachine.getIndex());
    lastIndex=stateMachine.getIndex();
    lastTerm=stateMachine.getTerm();
  }
}","protected synchronized void loadSnapshot() throws IOException {
  File file=new File(getLogDirectory(),""String_Node_Str"");
  if (file.exists()) {
    logger.info(""String_Node_Str"",file);
    stateMachine.readSnapshot(file);
    logger.info(""String_Node_Str"",stateMachine.getTerm(),stateMachine.getIndex());
    lastIndex=stateMachine.getIndex();
    lastTerm=stateMachine.getTerm();
    firstIndex=0;
    firstTerm=0;
    entries.clear();
    entryFileCache.clear();
  }
}",0.9023255813953488
86213,"public HealthCheckCommand(){
}","public HealthCheckCommand(){
  val=random.nextLong();
}",0.7058823529411765
86214,"@Override public void applyTo(T state){
}","@Override public void applyTo(T state){
  state.applyHealthCheck(val);
}",0.7256637168141593
86215,"@Override public void read(DataInputStream in) throws IOException {
}","@Override public void read(DataInputStream in) throws IOException {
  this.val=in.readLong();
}",0.8414634146341463
86216,"@Override public void write(DataOutputStream out) throws IOException {
}","@Override public void write(DataOutputStream out) throws IOException {
  out.writeLong(val);
}",0.8674698795180723
86217,"private synchronized void wipeConflictedEntries(long index){
  while (lastIndex >= index) {
    entries.remove((int)(lastIndex-- - firstIndex));
  }
  if (lastIndex > 0) {
    lastTerm=getTerm(lastIndex);
  }
 else {
    lastTerm=0;
  }
}","private synchronized void wipeConflictedEntries(long index){
}",0.4133333333333333
86218,"/** 
 * See if our log is consistent with the purported leader
 * @return false if log doesn't contain an entry at index whose term matches
 */
public boolean isConsistentWith(final long index,final long term){
  if (index == 0 && term == 0 || index > lastIndex) {
    return true;
  }
  final Entry<T> entry=getEntry(index);
  if (entry == null) {
    if (index == stateMachine.getPrevIndex()) {
      return term == stateMachine.getPrevTerm();
    }
  }
  return (entry != null && entry.term == term);
}","/** 
 * See if our log is consistent with the purported leader
 * @return false if log doesn't contain an entry at index whose term matches
 */
public boolean isConsistentWith(final long index,final long term){
  if (index == 0 && term == 0 || index > lastIndex) {
    return true;
  }
  if (index == snapshotIndex && term == snapshotTerm) {
    return true;
  }
  final Entry<T> entry=getEntry(index);
  if (entry == null) {
    if (index == stateMachine.getPrevIndex()) {
      return term == stateMachine.getPrevTerm();
    }
  }
  return (entry != null && entry.term == term);
}",0.9291628334866604
86219,"/** 
 * Read and apply all available entries in the log from disk
 * @throws FileNotFoundException
 */
private synchronized void replayLogs() throws IOException {
  Entry<T> entry=null;
  do {
    entry=getEntryFromDisk(stateMachine.getIndex() + 1);
    if (entry != null) {
      stateMachine.apply(entry);
    }
  }
 while (entry != null);
  final List<Entry<T>> list=loadLogFile(getFile(stateMachine.getIndex()));
  if (list != null && list.size() > 0) {
    assert(entries.size() == 0);
    entries.addAll(list);
    firstIndex=entries.get(0).index;
    firstTerm=entries.get(0).term;
    lastIndex=entries.get(entries.size() - 1).index;
    lastTerm=entries.get(entries.size() - 1).term;
    out=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(getFile(firstIndex))));
    out.writeInt(LOG_FILE_VERSION);
    for (    Entry<T> e : list) {
      e.write(out);
    }
    logger.info(""String_Node_Str"",firstIndex,entries.get(0).index);
  }
}","/** 
 * Read and apply all available entries in the log from disk
 * @throws FileNotFoundException
 */
private synchronized void replayLogs() throws IOException {
  Entry<T> entry=null;
  do {
    entry=getEntryFromDisk(stateMachine.getIndex() + 1);
    if (entry != null) {
      stateMachine.apply(entry);
    }
  }
 while (entry != null);
  final List<Entry<T>> list=loadLogFile(getFile(stateMachine.getIndex()));
  if (list != null && list.size() > 0) {
    assert(entries.size() == 0);
    entries.addAll(list);
    firstIndex=entries.get(0).index;
    firstTerm=entries.get(0).term;
    lastIndex=entries.get(entries.size() - 1).index;
    lastTerm=entries.get(entries.size() - 1).term;
    out=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(getFile(firstIndex),false)));
    out.writeInt(LOG_FILE_VERSION);
    for (    Entry<T> e : list) {
      e.write(out);
    }
    out.flush();
    commitIndex=lastIndex;
    logger.info(""String_Node_Str"",firstIndex,lastIndex);
  }
}",0.9637939826619072
86220,"public long getTerm(long index){
  if (index == 0) {
    return 0;
  }
  if (index == stateMachine.getPrevIndex()) {
    return stateMachine.getPrevTerm();
  }
  if (index == stateMachine.getIndex()) {
    return stateMachine.getTerm();
  }
  final Entry<T> e=getEntry(index);
  if (e == null) {
    logger.error(""String_Node_Str"",index);
  }
  return e.term;
}","public long getTerm(long index){
  if (index == 0) {
    return 0;
  }
  if (index == stateMachine.getPrevIndex()) {
    return stateMachine.getPrevTerm();
  }
  if (index == stateMachine.getIndex()) {
    return stateMachine.getTerm();
  }
  if (index == snapshotIndex) {
    return snapshotTerm;
  }
  final Entry<T> e=getEntry(index);
  if (e == null) {
    logger.error(""String_Node_Str"",index);
  }
  return e.term;
}",0.9220945083014048
86221,"protected synchronized void loadSnapshot() throws IOException {
  File file=new File(getLogDirectory(),""String_Node_Str"");
  if (file.exists()) {
    logger.info(""String_Node_Str"",file);
    stateMachine.readSnapshot(file);
    logger.info(""String_Node_Str"",stateMachine.getTerm(),stateMachine.getIndex());
    lastIndex=stateMachine.getIndex();
    lastTerm=stateMachine.getTerm();
    firstIndex=0;
    firstTerm=0;
    entries.clear();
    entryFileCache.clear();
  }
}","protected synchronized void loadSnapshot() throws IOException {
  File file=new File(getLogDirectory(),""String_Node_Str"");
  if (file.exists()) {
    logger.info(""String_Node_Str"",file);
    stateMachine.readSnapshot(file);
    logger.info(""String_Node_Str"",stateMachine.getTerm(),stateMachine.getIndex());
    commitIndex=snapshotIndex=lastIndex=stateMachine.getIndex();
    snapshotTerm=lastTerm=stateMachine.getTerm();
    firstIndex=0;
    firstTerm=0;
    entries.clear();
    entryFileCache.clear();
  }
}",0.960325534079349
86222,"private synchronized void installSnapshot(final Peer peer,final int part){
  if (peer.snapshotTransfer != null) {
    logger.info(""String_Node_Str"",peer,part);
    final long snapshotIndex=StateMachine.getSnapshotIndex(peer.snapshotTransfer);
    if (snapshotIndex > 0) {
      final int partSize=config.getSnapshotPartSize();
      final long len=peer.snapshotTransfer.length();
      final byte data[]=RaftUtil.getFilePart(peer.snapshotTransfer,part * partSize,(int)Math.min(partSize,len - part * partSize));
      rpc.sendInstallSnapshot(peer.peerId,currentTerm,myPeerId,len,partSize,part,data,new InstallSnapshotResponseHandler(){
        @Override public void handleResponse(        boolean success){
synchronized (RaftEngine.this) {
            if (success) {
              if ((part + 1) * partSize < len) {
                installSnapshot(peer,part + 1);
              }
 else {
                logger.info(""String_Node_Str"",peer.nextIndex);
                peer.snapshotTransfer=null;
                peer.nextIndex=snapshotIndex;
              }
            }
 else {
              logger.error(""String_Node_Str"",this,peer);
            }
          }
        }
      }
);
    }
  }
}","private synchronized void installSnapshot(final Peer peer,final int part){
  if (peer.snapshotTransfer != null) {
    logger.info(""String_Node_Str"",peer,part);
    final long snapshotIndex=StateMachine.getSnapshotIndex(peer.snapshotTransfer);
    if (snapshotIndex > 0) {
      final int partSize=config.getSnapshotPartSize();
      final long len=peer.snapshotTransfer.length();
      final byte data[]=RaftUtil.getFilePart(peer.snapshotTransfer,part * partSize,(int)Math.min(partSize,len - part * partSize));
      rpc.sendInstallSnapshot(peer.peerId,currentTerm,myPeerId,len,partSize,part,data,new InstallSnapshotResponseHandler(){
        @Override public void handleResponse(        boolean success){
synchronized (RaftEngine.this) {
            if (success) {
              if ((part + 1) * partSize < len) {
                installSnapshot(peer,part + 1);
              }
 else {
                logger.info(""String_Node_Str"",peer.nextIndex);
                peer.snapshotTransfer=null;
                peer.nextIndex=snapshotIndex + 1;
              }
            }
 else {
              logger.error(""String_Node_Str"",this,peer);
            }
          }
        }
      }
);
    }
  }
}",0.998326359832636
86223,"@Override public void handleResponse(boolean success){
synchronized (RaftEngine.this) {
    if (success) {
      if ((part + 1) * partSize < len) {
        installSnapshot(peer,part + 1);
      }
 else {
        logger.info(""String_Node_Str"",peer.nextIndex);
        peer.snapshotTransfer=null;
        peer.nextIndex=snapshotIndex;
      }
    }
 else {
      logger.error(""String_Node_Str"",this,peer);
    }
  }
}","@Override public void handleResponse(boolean success){
synchronized (RaftEngine.this) {
    if (success) {
      if ((part + 1) * partSize < len) {
        installSnapshot(peer,part + 1);
      }
 else {
        logger.info(""String_Node_Str"",peer.nextIndex);
        peer.snapshotTransfer=null;
        peer.nextIndex=snapshotIndex + 1;
      }
    }
 else {
      logger.error(""String_Node_Str"",this,peer);
    }
  }
}",0.9952038369304556
86224,"public void readSnapshot(File file) throws IOException {
  try (DataInputStream in=new DataInputStream(new GZIPInputStream(new BufferedInputStream(new FileInputStream(file))))){
    int version=in.readInt();
    assert(version <= SNAPSHOT_FILE_VERSION);
    term=in.readLong();
    index=in.readLong();
    prevIndex=index - 1;
    prevTerm=in.readLong();
    final int numPeers=in.readInt();
    for (int i=0; i < numPeers; i++) {
      Peer p=new Peer(in);
      peers.put(p.peerId,p);
    }
    loadState(in);
  }
 }","public void readSnapshot(File file) throws IOException {
  try (DataInputStream in=new DataInputStream(new GZIPInputStream(new BufferedInputStream(new FileInputStream(file))))){
    int version=in.readInt();
    assert(version <= SNAPSHOT_FILE_VERSION);
    term=in.readLong();
    index=in.readLong();
    prevIndex=index - 1;
    prevTerm=in.readLong();
    if (version >= 2) {
      count=in.readLong();
      checksum=in.readLong();
    }
    peers.clear();
    final int numPeers=in.readInt();
    for (int i=0; i < numPeers; i++) {
      Peer p=new Peer(in);
      peers.put(p.peerId,p);
    }
    loadState(in);
  }
 }",0.9073426573426572
86225,"public void writeSnapshot(File file,long prevTerm) throws IOException {
  try (DataOutputStream out=new DataOutputStream(new BufferedOutputStream(new GZIPOutputStream(new FileOutputStream(file))))){
    out.writeInt(SNAPSHOT_FILE_VERSION);
    out.writeLong(term);
    out.writeLong(index);
    out.writeLong(prevTerm);
    out.writeInt(peers.size());
    for (    Peer peer : peers.values()) {
      peer.write(out);
    }
    saveState(out);
  }
 }","public void writeSnapshot(File file,long prevTerm) throws IOException {
  try (DataOutputStream out=new DataOutputStream(new BufferedOutputStream(new GZIPOutputStream(new FileOutputStream(file))))){
    out.writeInt(SNAPSHOT_FILE_VERSION);
    out.writeLong(term);
    out.writeLong(index);
    out.writeLong(prevTerm);
    if (SNAPSHOT_FILE_VERSION >= 2) {
      out.writeLong(count);
      out.writeLong(checksum);
    }
    out.writeInt(peers.size());
    for (    Peer peer : peers.values()) {
      peer.write(out);
    }
    saveState(out);
  }
 }",0.8973080757726819
86226,"@Override public void loadState(DataInputStream in) throws IOException {
  int numItems=in.readInt();
  while (numItems-- > 0) {
    StorageItem item=new StorageItem(in);
    items.put(item.key,item);
  }
}","@Override public void loadState(DataInputStream in) throws IOException {
  items.clear();
  copyOnWrite.clear();
  int numItems=in.readInt();
  while (numItems-- > 0) {
    StorageItem item=new StorageItem(in);
    items.put(item.key,item);
  }
}",0.911504424778761
86227,"private synchronized void becomeLeader(){
  logger.info(""String_Node_Str"",this,currentTerm);
  role=Role.Leader;
  for (  Peer peer : peers.values()) {
    peer.matchIndex=0;
  }
  updatePeers();
}","private synchronized void becomeLeader(){
  logger.info(""String_Node_Str"",this,currentTerm);
  role=Role.Leader;
  leaderId=myPeerId;
  for (  Peer peer : peers.values()) {
    peer.matchIndex=0;
    peer.nextIndex=log.getLastIndex() + 1;
    peer.appendPending=false;
  }
  updatePeers();
}",0.8073770491803278
86228,"@SuppressWarnings(""String_Node_Str"") @Override public synchronized AppendEntriesResponse handleAppendEntries(long term,int leaderId,long prevLogIndex,long prevLogTerm,Entry<?>[] entries,long leaderCommit){
  logger.trace(""String_Node_Str"",this,leaderId);
  if (term >= currentTerm) {
    if (term > currentTerm) {
      stepDown(term);
    }
    scheduleElection();
    if (log.isConsistentWith(prevLogIndex,prevLogTerm)) {
      if (entries != null) {
        for (        Entry<?> e : entries) {
          if (!log.append((Entry<T>)e)) {
            logger.warn(""String_Node_Str"",this,leaderId);
            return new AppendEntriesResponse(currentTerm,false);
          }
        }
      }
      log.setCommitIndex(Math.min(leaderCommit,log.getLastIndex()));
      logger.trace(""String_Node_Str"",this,leaderId);
      return new AppendEntriesResponse(currentTerm,true);
    }
  }
  logger.trace(""String_Node_Str"",this,leaderId);
  return new AppendEntriesResponse(currentTerm,false);
}","@SuppressWarnings(""String_Node_Str"") @Override public synchronized AppendEntriesResponse handleAppendEntries(long term,int leaderId,long prevLogIndex,long prevLogTerm,Entry<?>[] entries,long leaderCommit){
  if (DEBUG) {
  }
  if (term >= currentTerm) {
    if (term > currentTerm) {
      stepDown(term);
    }
    scheduleElection();
    if (this.leaderId != leaderId) {
      this.leaderId=leaderId;
      logger.info(""String_Node_Str"",this,leaderId);
      logger.debug(String.format(""String_Node_Str"",this,leaderId,prevLogTerm,prevLogIndex));
    }
    if (log.isConsistentWith(prevLogIndex,prevLogTerm)) {
      if (entries != null) {
        for (        Entry<?> e : entries) {
          if (!log.append((Entry<T>)e)) {
            logger.warn(String.format(""String_Node_Str"",this,leaderId,e));
            return new AppendEntriesResponse(currentTerm,false,log.getLastIndex());
          }
        }
      }
      log.setCommitIndex(Math.min(leaderCommit,log.getLastIndex()));
      logger.trace(""String_Node_Str"",this,leaderId);
      return new AppendEntriesResponse(currentTerm,true,log.getLastIndex());
    }
  }
  logger.trace(""String_Node_Str"",this,leaderId);
  return new AppendEntriesResponse(currentTerm,false,log.getLastIndex());
}",0.7882037533512064
86229,"private synchronized void stepDown(long term){
  currentTerm=term;
  votedFor=0;
  if (role == Role.Candidate || role == Role.Leader) {
    logger.info(""String_Node_Str"",this,currentTerm);
    role=Role.Follower;
  }
  scheduleElection();
}","private synchronized boolean stepDown(long term){
  if (term > currentTerm) {
    currentTerm=term;
    votedFor=0;
    if (role == Role.Candidate || role == Role.Leader) {
      logger.info(""String_Node_Str"",this,currentTerm);
      role=Role.Follower;
      if (stateMachine.getIndex() > log.getCommitIndex()) {
        stateMachine.reset();
        updateStateMachine(log.getCommitIndex());
      }
    }
    scheduleElection();
    return true;
  }
  return false;
}",0.6450704225352113
86230,"@Override public synchronized RequestVoteResponse handleRequestVote(long term,int candidateId,long lastLogIndex,long lastLogTerm){
  if (term > currentTerm) {
    stepDown(term);
  }
  if (term >= currentTerm && votedFor == 0 || votedFor == candidateId && lastLogIndex >= log.getLastIndex() && lastLogTerm >= log.getLastTerm()) {
    votedFor=candidateId;
    scheduleElection();
    return new RequestVoteResponse(currentTerm,true);
  }
  return new RequestVoteResponse(currentTerm,false);
}","@Override public synchronized RequestVoteResponse handleRequestVote(long term,int candidateId,long lastLogIndex,long lastLogTerm){
  if (term > currentTerm) {
    stepDown(term);
  }
  if (term >= currentTerm && (votedFor == 0 || votedFor == candidateId) && lastLogIndex >= log.getLastIndex() && lastLogTerm >= log.getLastTerm()) {
    votedFor=candidateId;
    scheduleElection();
    logger.info(String.format(""String_Node_Str"",this,candidateId,currentTerm,lastLogIndex,log.getLastIndex()));
    return new RequestVoteResponse(currentTerm,true);
  }
  return new RequestVoteResponse(currentTerm,false);
}",0.8961748633879781
86231,"public StateMachine<T> getStateMachine(){
  return stateMachine;
}","public T getStateMachine(){
  return stateMachine;
}",0.8813559322033898
86232,"private synchronized void callElection(){
  final int votesNeeded=1 + (peers.size() / 2);
  final Value<Integer> votes=new Value<>(1);
  role=Role.Candidate;
  ++currentTerm;
  votedFor=myPeerId;
  logger.info(""String_Node_Str"",this,currentTerm);
  for (  Peer peer : peers.values()) {
    peer.nextIndex=1;
    peer.matchIndex=0;
    rpc.sendRequestVote(peer.peerId,currentTerm,myPeerId,log.getLastIndex(),log.getLastTerm(),new RaftRPC.RequestVoteResponseHandler(){
      @Override public void handleResponse(      long term,      boolean voteGranted){
synchronized (RaftEngine.this) {
          if (term == currentTerm && role == Role.Candidate) {
            if (voteGranted) {
              votes.val++;
            }
            if (votes.val >= votesNeeded) {
              becomeLeader();
            }
          }
        }
      }
    }
);
  }
  scheduleElection();
}","private synchronized void callElection(){
  final int votesNeeded=1 + (peers.size() / 2);
  final Value<Integer> votes=new Value<>(1);
  role=Role.Candidate;
  ++currentTerm;
  votedFor=myPeerId;
  logger.info(""String_Node_Str"",this,currentTerm);
  for (  Peer peer : peers.values()) {
    peer.nextIndex=1;
    peer.matchIndex=0;
    rpc.sendRequestVote(peer.peerId,currentTerm,myPeerId,log.getLastIndex(),log.getLastTerm(),new RaftRPC.RequestVoteResponseHandler(){
      @Override public void handleResponse(      long term,      boolean voteGranted){
synchronized (RaftEngine.this) {
          if (!stepDown(term)) {
            if (term == currentTerm && role == Role.Candidate) {
              if (voteGranted) {
                votes.val++;
              }
              if (votes.val >= votesNeeded) {
                becomeLeader();
              }
            }
          }
        }
      }
    }
);
  }
  scheduleElection();
}",0.9630446773303916
86233,"private synchronized void updateCommitIndex(){
  assert(role == Role.Leader);
  long index=log.getLastIndex();
  for (  Peer peer : peers.values()) {
    index=Math.min(index,peer.matchIndex);
  }
  while (index < log.getLastIndex() && isCommittable(index)) {
    log.setCommitIndex(index);
    index++;
  }
}","private synchronized void updateCommitIndex(){
  assert(role == Role.Leader);
  long index=log.getLastIndex();
  for (  Peer peer : peers.values()) {
    index=Math.min(index,peer.matchIndex);
  }
  index=Math.max(index,log.getCommitIndex());
  while (index <= log.getLastIndex() && isCommittable(index)) {
    log.setCommitIndex(index);
    index++;
  }
}",0.9293233082706768
86234,"@Override public void handleResponse(long term,boolean voteGranted){
synchronized (RaftEngine.this) {
    if (term == currentTerm && role == Role.Candidate) {
      if (voteGranted) {
        votes.val++;
      }
      if (votes.val >= votesNeeded) {
        becomeLeader();
      }
    }
  }
}","@Override public void handleResponse(long term,boolean voteGranted){
synchronized (RaftEngine.this) {
    if (!stepDown(term)) {
      if (term == currentTerm && role == Role.Candidate) {
        if (voteGranted) {
          votes.val++;
        }
        if (votes.val >= votesNeeded) {
          becomeLeader();
        }
      }
    }
  }
}",0.8759811616954474
86235,"public AppendEntriesResponse(long term,boolean success){
  this.term=term;
  this.success=success;
}","public AppendEntriesResponse(long term,boolean success,long lastLogIndex){
  this.term=term;
  this.success=success;
  this.lastLogIndex=lastLogIndex;
}",0.7936507936507936
86236,"public void handleResponse(long term,boolean success);","public void handleResponse(long term,boolean success,long lastLogIndex);",0.8571428571428571
86237,"private byte[] readInputStream(InputStream in) throws IOException {
  ByteArrayOutputStream opt=new ByteArrayOutputStream();
  byte[] buf=new byte[1024];
  int len=0;
  while ((len=in.read(buf)) != -1) {
    opt.write(buf,0,len);
  }
  in.close();
  return opt.toByteArray();
}","private byte[] readInputStream(InputStream in) throws IOException {
  ByteArrayOutputStream opt=new ByteArrayOutputStream();
  byte[] buf=new byte[1024];
  int len=0;
  while ((len=in.read(buf)) != -1) {
    opt.write(buf,0,len);
  }
  in.close();
  byte[] ret;
  try {
    ret=opt.toByteArray();
  }
 catch (  OutOfMemoryError e) {
    ret=null;
  }
  opt.close();
  return ret;
}",0.8206686930091185
86238,"public Object getLargePic(MessageModel msg,int id){
  String url=null;
  if (msg.hasMultiplePictures()) {
    url=msg.pic_urls.get(id).getLarge();
  }
 else   if (id == 0) {
    url=msg.original_pic;
  }
 else {
    return null;
  }
  if (url == null) {
    return null;
  }
  String cacheName=url.substring(url.lastIndexOf(""String_Node_Str"") + 1,url.length());
  byte[] cache;
  try {
    cache=mManager.getCache(Constants.FILE_CACHE_PICS_LARGE,cacheName);
  }
 catch (  Exception e) {
    cache=null;
  }
  if (cache == null || cache.length <= 1000) {
    try {
      cache=mManager.createCacheFromNetwork(Constants.FILE_CACHE_PICS_LARGE,cacheName,url);
    }
 catch (    Exception e) {
      cache=null;
    }
  }
  if (cache == null) {
    return null;
  }
  if (cacheName.endsWith(""String_Node_Str"")) {
    Movie movie=Movie.decodeByteArray(cache,0,cache.length);
    if (movie.duration() > 0) {
      return movie;
    }
  }
  try {
    return BitmapFactory.decodeByteArray(cache,0,cache.length);
  }
 catch (  OutOfMemoryError e) {
    BitmapFactory.Options opt=new BitmapFactory.Options();
    opt.inJustDecodeBounds=true;
    BitmapFactory.decodeByteArray(cache,0,cache.length,opt);
    opt.inSampleSize=Utility.computeSampleSize(opt,-1,4 * 1024 * 1024);
    opt.inJustDecodeBounds=false;
    return BitmapFactory.decodeByteArray(cache,0,cache.length,opt);
  }
}","public Object getLargePic(MessageModel msg,int id){
  String url=null;
  if (msg.hasMultiplePictures()) {
    url=msg.pic_urls.get(id).getLarge();
  }
 else   if (id == 0) {
    url=msg.original_pic;
  }
 else {
    return null;
  }
  if (url == null) {
    return null;
  }
  String cacheName=url.substring(url.lastIndexOf(""String_Node_Str"") + 1,url.length());
  byte[] cache;
  try {
    cache=mManager.getCache(Constants.FILE_CACHE_PICS_LARGE,cacheName);
  }
 catch (  Exception e) {
    cache=null;
  }
  if (cache == null || cache.length <= 1000) {
    try {
      cache=mManager.createCacheFromNetwork(Constants.FILE_CACHE_PICS_LARGE,cacheName,url);
    }
 catch (    Exception e) {
      cache=null;
    }
  }
  if (cache == null) {
    return null;
  }
  if (cacheName.endsWith(""String_Node_Str"")) {
    Movie movie=Movie.decodeByteArray(cache,0,cache.length);
    if (movie.duration() > 0) {
      return movie;
    }
  }
  try {
    return BitmapFactory.decodeByteArray(cache,0,cache.length);
  }
 catch (  OutOfMemoryError e) {
    BitmapFactory.Options opt=new BitmapFactory.Options();
    opt.inJustDecodeBounds=true;
    BitmapFactory.decodeByteArray(cache,0,cache.length,opt);
    opt.inSampleSize=Utility.computeSampleSize(opt,512,1024 * 1024);
    opt.inJustDecodeBounds=false;
    return BitmapFactory.decodeByteArray(cache,0,cache.length,opt);
  }
}",0.9967141292442496
86239,"@Override public boolean onTouchEvent(MotionEvent event){
  mIsDown=false;
  boolean returningToStart=false;
  MotionEvent downEvent=null;
  try {
    Field f=SwipeRefreshLayout.class.getDeclaredField(""String_Node_Str"");
    f.setAccessible(true);
    returningToStart=f.get(this);
    f=SwipeRefreshLayout.class.getDeclaredField(""String_Node_Str"");
    f.setAccessible(true);
    downEvent=(MotionEvent)f.get(this);
  }
 catch (  Exception e) {
  }
  boolean ret;
  if (event.getAction() == MotionEvent.ACTION_MOVE && downEvent != null && !returningToStart && !canChildScrollDown()) {
    mIsDown=true;
    downEvent.setLocation(downEvent.getX(),-downEvent.getY());
    event.setLocation(event.getX(),-event.getY());
    ret=super.onTouchEvent(event);
    downEvent.setLocation(downEvent.getX(),-downEvent.getY());
    event.setLocation(event.getX(),-event.getY());
  }
 else {
    ret=super.onTouchEvent(event);
  }
  try {
    Method m=SwipeRefreshLayout.class.getDeclaredMethod(""String_Node_Str"",int.class);
    m.setAccessible(true);
    m.invoke(this,0);
  }
 catch (  Exception e) {
  }
  return ret;
}","@Override public boolean onTouchEvent(MotionEvent event){
  boolean returningToStart=false;
  MotionEvent downEvent=null;
  try {
    Field f=SwipeRefreshLayout.class.getDeclaredField(""String_Node_Str"");
    f.setAccessible(true);
    returningToStart=f.get(this);
    f=SwipeRefreshLayout.class.getDeclaredField(""String_Node_Str"");
    f.setAccessible(true);
    downEvent=(MotionEvent)f.get(this);
  }
 catch (  Exception e) {
  }
  boolean ret;
  if (event.getAction() == MotionEvent.ACTION_MOVE && downEvent != null && !returningToStart && !canChildScrollDown()) {
    downEvent.setLocation(downEvent.getX(),-downEvent.getY());
    event.setLocation(event.getX(),-event.getY());
    ret=super.onTouchEvent(event);
    downEvent.setLocation(downEvent.getX(),-downEvent.getY());
    event.setLocation(event.getX(),-event.getY());
  }
 else {
    ret=super.onTouchEvent(event);
  }
  try {
    Method m=SwipeRefreshLayout.class.getDeclaredMethod(""String_Node_Str"",int.class);
    m.setAccessible(true);
    m.invoke(this,0);
  }
 catch (  Exception e) {
  }
  if (!canChildScrollDown()) {
    mIsDown=true;
  }
 else   if (!canChildScrollUp()) {
    mIsDown=false;
  }
  return ret;
}",0.5213600697471665
86240,"public static void handleExportTable(TopsoilDataTable table){
  TopsoilDataTable t=table;
  String[] titles=t.getColumnNames();
  List<Double[]> data=t.getFormattedDataAsArrays();
  File file=TopsoilFileChooser.getExportTableFileChooser().showSaveDialog(StageHelper.getStages().get(0));
  String location=file.toString();
  String type=location.substring(location.length() - 3);
  String delim;
switch (type) {
case ""String_Node_Str"":
    delim=""String_Node_Str"";
  break;
case ""String_Node_Str"":
delim=""String_Node_Str"";
break;
default :
delim=""String_Node_Str"";
break;
}
PrintWriter writer;
try {
writer=new PrintWriter(location);
for (int i=0; i < titles.length; i++) {
writer.print(titles[i]);
if (i < titles.length - 1) writer.print(delim);
}
writer.print('\n');
for (int i=0; i < data.size(); i++) {
for (int j=0; j < data.get(i).length; j++) {
writer.print(data.get(i)[j]);
if (j < data.get(i).length - 1) writer.print(delim);
}
writer.print('\n');
}
writer.close();
}
 catch (FileNotFoundException ex) {
Logger.getLogger(MenuItemEventHandler.class.getName()).log(Level.SEVERE,null,ex);
}
}","public static void handleExportTable(TopsoilDataTable table){
  PrintWriter writer=null;
  try {
    TopsoilDataTable t=table;
    String[] titles=t.getColumnNames();
    List<Double[]> data=t.getFormattedDataAsArrays();
    File file=TopsoilFileChooser.getExportTableFileChooser().showSaveDialog(StageHelper.getStages().get(0));
    String location=file.toString();
    String type=location.substring(location.length() - 3);
    String delim;
switch (type) {
case ""String_Node_Str"":
      delim=""String_Node_Str"";
    break;
case ""String_Node_Str"":
  delim=""String_Node_Str"";
break;
case ""String_Node_Str"":
FileParser fileParser=new FileParser();
delim=requestDelimiter();
break;
default :
delim=""String_Node_Str"";
break;
}
writer=new PrintWriter(location,""String_Node_Str"");
for (int i=0; i < titles.length; i++) {
writer.print(titles[i]);
if (i < titles.length - 1) writer.print(delim);
}
writer.print('\n');
for (int i=0; i < data.size(); i++) {
for (int j=0; j < data.get(i).length; j++) {
writer.print(data.get(i)[j]);
if (j < data.get(i).length - 1) writer.print(delim);
}
writer.print('\n');
}
writer.close();
}
 catch (FileNotFoundException ex) {
Logger.getLogger(MenuItemEventHandler.class.getName()).log(Level.SEVERE,null,ex);
}
catch (UnsupportedEncodingException ex) {
Logger.getLogger(MenuItemEventHandler.class.getName()).log(Level.SEVERE,null,ex);
}
 finally {
writer.close();
}
}",0.8303249097472925
86241,"/** 
 * Generates a   {@code Plot}.
 * @param tableController   the TopsoilTableController for the table
 * @param plotType  the TopsoilPlotType of the plot
 */
private static void generatePlot(TopsoilTableController tableController,TopsoilPlotType plotType,PlotContext plotContext){
  List<Map<String,Object>> data=plotContext.getData();
  PlotPropertiesPanelController propertiesPanel=tableController.getTabContent().getPlotPropertiesPanelController();
  Map<String,Object> plotProperties=propertiesPanel.getProperties();
  Plot plot;
switch (plotType) {
case BASE_PLOT:
    plot=new BasePlot();
  break;
case SCATTER_PLOT:
plot=new ScatterPlot();
break;
case UNCERTAINTY_ELLIPSE_PLOT:
plot=new UncertaintyEllipsePlot();
break;
case EVOLUTION_PLOT:
plot=new EvolutionPlot();
break;
default :
plot=plotType.getPlot();
break;
}
plot.setData(data);
plot.setProperties(plotProperties);
propertiesPanel.setPlot(plot);
Parent plotWindow=new PlotWindow(plot);
Scene scene=new Scene(plotWindow,800,600);
Stage plotStage=new Stage();
plotStage.setScene(scene);
plotStage.setResizable(false);
plotStage.setTitle(plotType.getName() + ""String_Node_Str"" + propertiesPanel.getTitle());
propertiesPanel.titleProperty().addListener(c -> {
if (propertiesPanel.getTitle().length() > 0) {
plotStage.setTitle(plotType.getName() + ""String_Node_Str"" + propertiesPanel.getTitle());
}
 else {
plotStage.setTitle(plotType.getName());
}
}
);
plotStage.setOnCloseRequest(closeEvent -> {
tableController.getTable().removeOpenPlot(plotType);
propertiesPanel.removePlot();
}
);
plotStage.show();
PlotInformation plotInfo=new PlotInformation(plot,plotType,propertiesPanel.getProperties(),plotContext,plotStage);
plotInfo.setVariableBindings(plotContext.getBindings());
tableController.getTable().addOpenPlot(plotInfo);
propertiesPanel.uncertaintyProperty().addListener(c -> {
PlotContext newContext=generatePlotContext(tableController);
List<Map<String,Object>> newData=newContext.getData();
plot.setData(newData);
}
);
}","/** 
 * Generates a   {@code Plot}.
 * @param tableController   the TopsoilTableController for the table
 * @param plotType  the TopsoilPlotType of the plot
 */
private static void generatePlot(TopsoilTableController tableController,TopsoilPlotType plotType,PlotContext plotContext){
  List<Map<String,Object>> data=plotContext.getData();
  PlotPropertiesPanelController propertiesPanel=tableController.getTabContent().getPlotPropertiesPanelController();
  Map<String,Object> plotProperties=propertiesPanel.getProperties();
  Plot plot=plotType.getPlot();
  plot.setData(data);
  plot.setProperties(plotProperties);
  propertiesPanel.setPlot(plot);
  Parent plotWindow=new PlotWindow(plot);
  Scene scene=new Scene(plotWindow,800,600);
  Stage plotStage=new Stage();
  plotStage.setScene(scene);
  plotStage.setResizable(false);
  plotStage.setTitle(plotType.getName() + ""String_Node_Str"" + propertiesPanel.getTitle());
  propertiesPanel.titleProperty().addListener(c -> {
    if (propertiesPanel.getTitle().length() > 0) {
      plotStage.setTitle(plotType.getName() + ""String_Node_Str"" + propertiesPanel.getTitle());
    }
 else {
      plotStage.setTitle(plotType.getName());
    }
  }
);
  plotStage.setOnCloseRequest(closeEvent -> {
    tableController.getTable().removeOpenPlot(plotType);
    propertiesPanel.removePlot();
  }
);
  plotStage.show();
  PlotInformation plotInfo=new PlotInformation(plot,plotType,propertiesPanel.getProperties(),plotContext,plotStage);
  plotInfo.setVariableBindings(plotContext.getBindings());
  tableController.getTable().addOpenPlot(plotInfo);
  propertiesPanel.uncertaintyProperty().addListener(c -> {
    PlotContext newContext=generatePlotContext(tableController);
    List<Map<String,Object>> newData=newContext.getData();
    plot.setData(newData);
  }
);
}",0.8545071164997364
86242,"/** 
 * Initializes this   {@link JavaScriptPlot}'s   {@link WebView} and relatedobjects if it has not already been done.
 */
private void initializeWebView(){
  runOnFxApplicationThread(() -> {
    webView=new WebView();
    webView.setContextMenuEnabled(false);
    WebEngine webEngine=webView.getEngine();
    webEngine.setJavaScriptEnabled(true);
    webEngine.setOnAlert(event -> {
      LOGGER.info(event.getData());
    }
);
    webEngine.getLoadWorker().stateProperty().addListener((observable,oldValue,newValue) -> {
      if (newValue == SUCCEEDED) {
        if (new IsBlankImage().test(screenCapture())) {
          webEngine.loadContent(buildContent());
        }
        topsoil=(JSObject)webEngine.executeScript(""String_Node_Str"");
        topsoil.setMember(""String_Node_Str"",new Bridge());
        if (getProperties() != null) {
          topsoil.call(""String_Node_Str"",getProperties());
        }
        if (getData() != null) {
          topsoil.call(""String_Node_Str"",getData());
        }
        loadFuture.complete(null);
      }
    }
);
    webEngine.loadContent(buildContent());
  }
);
}","/** 
 * Initializes this   {@link JavaScriptPlot}'s   {@link WebView} and relatedobjects if it has not already been done.
 */
private void initializeWebView(){
  runOnFxApplicationThread(() -> {
    webView=new WebView();
    webView.setContextMenuEnabled(false);
    WebEngine webEngine=webView.getEngine();
    webEngine.setJavaScriptEnabled(true);
    webEngine.setOnAlert(event -> {
      LOGGER.info(event.getData());
    }
);
    webEngine.getLoadWorker().stateProperty().addListener((observable,oldValue,newValue) -> {
      if (newValue == SUCCEEDED) {
        if (new IsBlankImage().test(screenCapture())) {
          webEngine.loadContent(buildContent());
        }
        topsoil=(JSObject)webEngine.executeScript(""String_Node_Str"");
        topsoil.setMember(""String_Node_Str"",bridge);
        if (getProperties() != null) {
          topsoil.call(""String_Node_Str"",getProperties());
        }
        if (getData() != null) {
          topsoil.call(""String_Node_Str"",getData());
        }
        loadFuture.complete(null);
      }
    }
);
    webEngine.loadContent(buildContent());
  }
);
}",0.9918845807033364
86243,"public List<Map<String,Object>> getData(){
  List<Map<String,Object>> data=new ArrayList<>();
  dataset.getEntries().forEach(entry -> {
    Map<String,Object> d=new HashMap<>();
    for (    VariableBinding binding : bindings) {
      d.put(binding.getVariable().getName(),getValue(binding.getVariable(),(Entry)entry).get());
    }
    d.put(""String_Node_Str"",true);
    ((Entry)entry).get(Fields.SELECTED).ifPresent(selected -> {
      d.put(""String_Node_Str"",selected);
    }
);
    data.add(d);
  }
);
  return data;
}","@Override public List<Map<String,Object>> getData(){
  List<Map<String,Object>> data=new ArrayList<>();
  dataset.getEntries().forEach(entry -> {
    Map<String,Object> d=new HashMap<>();
    for (    VariableBinding binding : bindings) {
      d.put(binding.getVariable().getName(),getValue(binding.getVariable(),(Entry)entry).get());
    }
    d.put(""String_Node_Str"",true);
    ((Entry)entry).get(Fields.SELECTED).ifPresent(selected -> {
      d.put(""String_Node_Str"",selected);
    }
);
    data.add(d);
  }
);
  return data;
}",0.9904942965779469
86244,"/** 
 * Creates a new .topsoil file for the current tabs and plots.
 * @param tabs  the TopsoilTabPane from which to save tables
 */
public static void handleSaveAsProjectFile(TopsoilTabPane tabs){
  FileChooser fileChooser=TopsoilFileChooser.getTopsoilSaveFileChooser();
  File file=fileChooser.showSaveDialog(StageHelper.getStages().get(0));
  saveProjectFile(file,tabs);
  TopsoilSerializer.setCurrentProjectFile(file);
}","/** 
 * Creates a new .topsoil file for the current tabs and plots.
 * @param tabs  the TopsoilTabPane from which to save tables
 */
public static void handleSaveAsProjectFile(TopsoilTabPane tabs){
  FileChooser fileChooser=TopsoilFileChooser.getTopsoilSaveFileChooser();
  File file=fileChooser.showSaveDialog(StageHelper.getStages().get(0));
  if (file != null) {
    saveProjectFile(file,tabs);
    TopsoilSerializer.setCurrentProjectFile(file);
  }
}",0.9658314350797268
86245,"/** 
 * Saves an open .topsoil project.
 * @param file  the open .topsoil project File
 * @param tabs  the active TopsoilTabPane
 */
private static void saveProjectFile(File file,TopsoilTabPane tabs){
  if (file != null) {
    String fileName=file.getName();
    String extension=fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1,fileName.length());
    System.out.println(file);
    if (!extension.equals(""String_Node_Str"")) {
      ErrorAlerter error=new ErrorAlerter();
      error.alert(""String_Node_Str"");
    }
 else {
      TopsoilSerializer.serialize(file,tabs);
    }
  }
}","/** 
 * Saves an open .topsoil project.
 * @param file  the open .topsoil project File
 * @param tabs  the active TopsoilTabPane
 */
private static void saveProjectFile(File file,TopsoilTabPane tabs){
  if (file != null) {
    String fileName=file.getName();
    String extension=fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1,fileName.length());
    if (!extension.equals(""String_Node_Str"")) {
      ErrorAlerter error=new ErrorAlerter();
      error.alert(""String_Node_Str"");
    }
 else {
      TopsoilSerializer.serialize(file,tabs);
    }
  }
}",0.9741379310344828
86246,"private static void generateNewPlot(TopsoilPlotType plotType,TopsoilTableController tableController,TopsoilTabPane tabs){
  NumberDataset dataset=tableController.getDataset();
  SimplePlotContext plotContext=new SimplePlotContext(dataset);
  Variable<Number> variable;
  VariableFormat<Number> format;
  for (int i=0; i < dataset.getFields().size(); i++) {
    variable=Variables.VARIABLE_LIST.get(i);
    if (variable == Variables.SIGMA_X) {
      format=tabs.getSelectedTab().getTabContent().getXUncertainty();
    }
 else     if (variable == Variables.SIGMA_Y) {
      format=tabs.getSelectedTab().getTabContent().getYUncertainty();
    }
 else {
      format=variable.getFormats().size() > 0 ? variable.getFormats().get(0) : null;
    }
    System.out.println(""String_Node_Str"" + variable.getName());
    System.out.println(""String_Node_Str"" + dataset.getFields().get(i).getName());
    System.out.println(""String_Node_Str"" + format.getName() + ""String_Node_Str"");
    plotContext.addBinding(variable,dataset.getFields().get(i),format);
  }
  List<Map<String,Object>> data=plotContext.getData();
  Plot plot=plotType.getPlot();
  plot.setData(data);
  Parent plotWindow=new PlotWindow(plot,plotType.getPropertiesPanel());
  Scene scene=new Scene(plotWindow,1200,800);
  Stage plotStage=new Stage();
  plotStage.setTitle(plotType.getName() + ""String_Node_Str"" + dataset.getName());
  plotStage.setOnCloseRequest(closeEvent -> tableController.getTable().removeOpenPlot(plotType));
  plotStage.setScene(scene);
  plotStage.show();
  PlotInformation plotInfo=new PlotInformation(plot,plotType);
  plotInfo.setVariableBindings(plotContext.getBindings());
  plotInfo.setStage(plotStage);
  tableController.getTable().addOpenPlot(plotInfo);
}","private static void generateNewPlot(TopsoilPlotType plotType,TopsoilTableController tableController,TopsoilTabPane tabs){
  NumberDataset dataset=tableController.getDataset();
  SimplePlotContext plotContext=new SimplePlotContext(dataset);
  Variable<Number> variable;
  VariableFormat<Number> format;
  for (int i=0; i < dataset.getFields().size(); i++) {
    variable=Variables.VARIABLE_LIST.get(i);
    if (variable == Variables.SIGMA_X) {
      format=tabs.getSelectedTab().getTabContent().getXUncertainty();
    }
 else     if (variable == Variables.SIGMA_Y) {
      format=tabs.getSelectedTab().getTabContent().getYUncertainty();
    }
 else {
      format=variable.getFormats().size() > 0 ? variable.getFormats().get(0) : null;
    }
    plotContext.addBinding(variable,dataset.getFields().get(i),format);
  }
  List<Map<String,Object>> data=plotContext.getData();
  Plot plot=plotType.getPlot();
  plot.setData(data);
  Parent plotWindow=new PlotWindow(plot,plotType.getPropertiesPanel());
  Scene scene=new Scene(plotWindow,1200,800);
  Stage plotStage=new Stage();
  plotStage.setTitle(plotType.getName() + ""String_Node_Str"" + dataset.getName());
  plotStage.setOnCloseRequest(closeEvent -> tableController.getTable().removeOpenPlot(plotType));
  plotStage.setScene(scene);
  plotStage.show();
  PlotInformation plotInfo=new PlotInformation(plot,plotType,plot.getProperties(),plotContext,plotStage);
  plotInfo.setVariableBindings(plotContext.getBindings());
  plotInfo.setStage(plotStage);
  tableController.getTable().addOpenPlot(plotInfo);
}",0.9177042210750076
86247,"/** 
 * Open default web browser and create a new GitHub issue with user specifications already supplied
 */
public static void handleReportIssue(){
  System.out.println(""String_Node_Str"");
  IssueCreator issueCreator=new StandardGitHubIssueCreator(new TopsoilMetadata(),System.getProperties(),new DesktopWebBrowser(Desktop.getDesktop(),new ErrorAlerter()),new StringBuilder());
  issueCreator.create();
}","/** 
 * Open default web browser and create a new GitHub issue with user specifications already supplied
 */
public static void handleReportIssue(){
  IssueCreator issueCreator=new StandardGitHubIssueCreator(new TopsoilMetadata(),System.getProperties(),new DesktopWebBrowser(Desktop.getDesktop(),new ErrorAlerter()),new StringBuilder());
  issueCreator.create();
}",0.9466840052015604
86248,"/** 
 * Generates a plot for the selected <tt>TopsoilTab</tt>.
 * @param tabs  the active TopsoilTabPane
 */
public static void handlePlotGenerationForSelectedTab(TopsoilTabPane tabs){
  TopsoilTableController tableController=tabs.getSelectedTab().getTableController();
  TopsoilPlotType plotType=new PlotChoiceDialog(tableController.getTable().getIsotopeType()).select();
  if (plotType != null) {
    List<Stage> stages=StageHelper.getStages();
    if (stages.size() > 1) {
      Stage stage=stages.get(1);
      Alert plotOverwrite=new Alert(Alert.AlertType.CONFIRMATION,""String_Node_Str"" + ""String_Node_Str"",ButtonType.CANCEL,ButtonType.YES);
      plotOverwrite.showAndWait().ifPresent(response -> {
        if (response == ButtonType.YES) {
          Collection<PlotInformation> plots=tabs.getSelectedTab().getTopsoilTable().getOpenPlots();
          TopsoilTable topsoilTable=tabs.getSelectedTab().getTopsoilTable();
          for (          PlotInformation plotInfo : plots) {
            topsoilTable.removeOpenPlot(plotInfo.getTopsoilPlotType());
          }
          stage.close();
          generateNewPlot(plotType,tableController,tabs);
        }
      }
);
    }
 else {
      generateNewPlot(plotType,tableController,tabs);
    }
  }
}","/** 
 * Generates a plot for the selected <tt>TopsoilTab</tt>.
 * @param tabs  the active TopsoilTabPane
 */
public static void handlePlotGenerationForSelectedTab(TopsoilTabPane tabs){
  TopsoilTableController tableController=tabs.getSelectedTab().getTableController();
  TopsoilPlotType plotType=new PlotChoiceDialog(tableController.getTable().getIsotopeType()).select();
  if (plotType != null) {
    List<Stage> stages=StageHelper.getStages();
    if (stages.size() > 1) {
      Alert plotOverwrite=new Alert(Alert.AlertType.CONFIRMATION,""String_Node_Str"" + ""String_Node_Str"",ButtonType.CANCEL,ButtonType.YES);
      plotOverwrite.showAndWait().ifPresent(response -> {
        if (response == ButtonType.YES) {
          for (          TopsoilTab tab : tabs.getTopsoilTabs()) {
            for (            PlotInformation plotInfo : tab.getTopsoilTable().getOpenPlots()) {
              tab.getTopsoilTable().removeOpenPlot(plotInfo.getTopsoilPlotType());
              plotInfo.getStage().close();
            }
          }
          generateNewPlot(plotType,tableController,tabs);
        }
      }
);
    }
 else {
      generateNewPlot(plotType,tableController,tabs);
    }
  }
}",0.7478474784747847
86249,"public VariableFormat<Number> getXUncertainty(){
  return stringVariableFormatMap.get(xUncertaintyChoiceBox.getValue());
}","public VariableFormat<Number> getXUncertainty(){
  return STRING_TO_VARIABLE_FORMAT_MAP.get(xUncertaintyChoiceBox.getValue());
}",0.816
86250,"public VariableFormat<Number> getYUncertainty(){
  return stringVariableFormatMap.get(yUncertaintyChoiceBox.getValue());
}","public VariableFormat<Number> getYUncertainty(){
  return STRING_TO_VARIABLE_FORMAT_MAP.get(yUncertaintyChoiceBox.getValue());
}",0.816
86251,"/** 
 * Remove trailing zeroes before setting the cell text value
 * @param cellValue The text value to be checked and set in the cell
 */
private void alignText(String cellValue){
  if (cellValue.contains(""String_Node_Str"")) {
    String[] decimalPart=cellValue.split(""String_Node_Str"");
    for (int i=decimalPart[1].length(); i <= this.df.getMaximumFractionDigits(); i++) {
      cellValue+=""String_Node_Str"";
    }
  }
  setText(cellValue);
}","/** 
 * Remove trailing zeroes before setting the cell text value
 * @param cellValue The text value to be checked and set in the cell
 */
private String alignText(String cellValue){
  if (cellValue.contains(""String_Node_Str"")) {
    String[] decimalPart=cellValue.split(""String_Node_Str"");
    if (decimalPart[1].length() <= 9) {
      for (int i=decimalPart[1].length(); i < this.df.getMaximumFractionDigits(); i++) {
        cellValue+=""String_Node_Str"";
      }
    }
 else {
      cellValue=decimalPart[0] + ""String_Node_Str"" + decimalPart[1].substring(0,9);
    }
  }
  return cellValue;
}",0.7896253602305475
86252,"/** 
 * {@inheritDoc} 
 */
@Override public void updateItem(Double item,boolean isEmpty){
  super.updateItem(item,isEmpty);
  if (isEmpty) {
    setText(null);
    setGraphic(null);
  }
 else {
    if (isEditing()) {
      if (textField != null) {
        textField.setText(this.getItem().toString());
      }
      setText(null);
      setGraphic(this.textField);
    }
 else {
      alignText(getItem().toString());
      setGraphic(null);
    }
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void updateItem(Double item,boolean isEmpty){
  super.updateItem(item,isEmpty);
  if (isEmpty) {
    setText(null);
    setGraphic(null);
  }
 else {
    if (isEditing()) {
      if (textField != null) {
        textField.setText(this.getItem().toString());
      }
      setText(null);
      setGraphic(this.textField);
    }
 else {
      setText(alignText(getItem().toString()));
      setGraphic(null);
    }
  }
}",0.9792349726775956
86253,"/** 
 * {@inheritDoc} 
 */
@Override public void cancelEdit(){
  super.cancelEdit();
  this.alignText(getItem().toString());
  this.setGraphic(null);
}","/** 
 * {@inheritDoc} 
 */
@Override public void cancelEdit(){
  super.cancelEdit();
  this.setText(alignText(getItem().toString()));
  this.setGraphic(null);
}",0.9710610932475884
86254,"@Override public RawData read(InputStream source) throws IOException {
  Reader reader=new InputStreamReader(source,Charset.forName(""String_Node_Str""));
  CSVReader dsvReader=new CSVReader(reader,delimiter);
  List<String[]> lines=dsvReader.readAll();
  validate(lines);
  if (lines.isEmpty()) {
    return new RawData(emptyList(),emptyList());
  }
  int headerCount=lines.get(0).length;
  List<Field<?>> fields=new ArrayList<>(headerCount);
  for (int i=0; i < headerCount; i++) {
    final String fieldName=expectingHeaders ? lines.get(0)[i] : ""String_Node_Str"" + i;
    if (fieldType(lines,i) == NumberField.class) {
      fields.add(new NumberField(fieldName));
    }
 else     if (fieldType(lines,i) == TextField.class) {
      fields.add(new TextField(fieldName));
    }
  }
  List<Entry> entries=new ArrayList<>(lines.size() - indexOfFirstEntry());
  for (int i=indexOfFirstEntry(); i < lines.size(); i++) {
    Entry entry=new SimpleEntry();
    for (int j=0; j < fields.size(); j++) {
      Field currentField=fields.get(j);
      entry.set(currentField,currentField.getStringConverter().fromString(lines.get(i)[j]));
    }
    entries.add(entry);
  }
  return new RawData(fields,entries);
}","@Override public RawData read(InputStream source) throws IOException {
  Reader reader=new InputStreamReader(source,Charset.forName(""String_Node_Str""));
  CSVReader dsvReader=new CSVReader(reader,delimiter);
  List<String[]> lines=dsvReader.readAll().stream().filter(line -> line.length != 1 || !line[0].equals(""String_Node_Str"")).collect(Collectors.toList());
  validate(lines);
  if (lines.isEmpty()) {
    return new RawData(emptyList(),emptyList());
  }
  int headerCount=lines.get(0).length;
  List<Field<?>> fields=new ArrayList<>(headerCount);
  for (int i=0; i < headerCount; i++) {
    final String fieldName=expectingHeaders ? lines.get(0)[i] : ""String_Node_Str"" + i;
    if (fieldType(lines,i) == NumberField.class) {
      fields.add(new NumberField(fieldName));
    }
 else     if (fieldType(lines,i) == TextField.class) {
      fields.add(new TextField(fieldName));
    }
  }
  List<Entry> entries=new ArrayList<>(lines.size() - indexOfFirstEntry());
  for (int i=indexOfFirstEntry(); i < lines.size(); i++) {
    Entry entry=new SimpleEntry();
    for (int j=0; j < fields.size(); j++) {
      Field currentField=fields.get(j);
      entry.set(currentField,currentField.getStringConverter().fromString(lines.get(i)[j]));
    }
    entries.add(entry);
  }
  return new RawData(fields,entries);
}",0.9565563969709048
86255,"private void initializeControl(Variable<T> variable){
  int index=getChildren().size();
  VariableBindingControl control=new VariableBindingControl(variable,fields);
  Field field=fields.get(index);
  control.setFieldSelection(field);
  variable.getFormats().stream().min(comparing(variableFormat -> {
    return new LevenshteinDistance(variableFormat.getName(),field.getName()).compute();
  }
)).ifPresent(control::setVariableFormatSelection);
  getChildren().add(control);
}","private void initializeControl(Variable<T> variable){
  VariableBindingControl control=new VariableBindingControl(variable,fields);
  int defaultFieldIndex=min(controlIndex(),fields.size() - 1);
  Field field=fields.get(defaultFieldIndex);
  control.setFieldSelection(field);
  variable.getFormats().stream().min(comparing(variableFormat -> {
    return new LevenshteinDistance(variableFormat.getName(),field.getName()).compute();
  }
)).ifPresent(control::setVariableFormatSelection);
  getChildren().add(control);
}",0.1530715005035246
86256,"@Test public void testInitialization(){
}","@Test public void testInitialization(){
  testVariableBindingView(oneVariable,oneField);
}",0.6259541984732825
86257,"@Override public void start(Stage stage) throws Exception {
  Scene scene=new Scene(new VariableBindingView(variables,fields));
  stage.setScene(scene);
  stage.show();
}","@Override public void start(Stage stage) throws Exception {
  parent=new Pane();
  Scene scene=new Scene(parent);
  stage.setScene(scene);
  stage.show();
}",0.8159509202453987
86258,"private void initializeAndShow(JavaScriptChart javaScriptChart){
  getCurrentTable().map(dataTableToSet::get).ifPresent(dataset -> {
    initializeAndShow(javaScriptChart,dataset);
  }
);
}","private void initializeAndShow(JavaScriptChart javaScriptChart){
  getCurrentTable().map(TSVTable::getDataset).ifPresent(dataset -> {
    initializeAndShow(javaScriptChart,dataset);
  }
);
}",0.949868073878628
86259,"void loadDataSet(Dataset dataset,Tab tab){
  Node content=tab.getContent();
  if (content instanceof TSVTable) {
    TSVTable table=(TSVTable)content;
    table.setDataset(dataset);
    dataTableToSet.put(table,dataset);
    datasetManager.open(dataset);
    dataset.getName().ifPresent(name -> {
      tab.setText(name);
    }
);
  }
}","void loadDataSet(Dataset dataset,Tab tab){
  Node content=tab.getContent();
  if (content instanceof TSVTable) {
    TSVTable table=(TSVTable)content;
    table.setDataset(dataset);
    datasetManager.open(dataset);
    dataset.getName().ifPresent(name -> {
      tab.setText(name);
    }
);
  }
}",0.9383886255924172
86260,"Tab createTab(){
  Tab dataTableTab=new Tab(""String_Node_Str"");
  dataTableTab.setOnClosed(event -> {
    if (dataTableTab.getContent() instanceof TSVTable) {
      TSVTable table=(TSVTable)dataTableTab.getContent();
      if (dataTableToSet.containsKey(table)) {
        datasetManager.close(dataTableToSet.get(table));
      }
    }
  }
);
  TSVTable dataTable=new TSVTable();
  dataTable.setPlaceholder(new EmptyTablePlaceholder(dataTable));
  dataTableTab.setContent(dataTable);
  dataTableTabPane.getTabs().add(dataTableTab);
  return dataTableTab;
}","Tab createTab(){
  Tab dataTableTab=new Tab(""String_Node_Str"");
  dataTableTab.setOnClosed(event -> {
    if (dataTableTab.getContent() instanceof TSVTable) {
      TSVTable table=(TSVTable)dataTableTab.getContent();
    }
  }
);
  TSVTable dataTable=new TSVTable();
  dataTable.setPlaceholder(new EmptyTablePlaceholder(dataTable));
  dataTableTab.setContent(dataTable);
  dataTableTabPane.getTabs().add(dataTableTab);
  return dataTableTab;
}",0.8877755511022044
86261,"@FXML void loadCustomScripts(){
  chartsMenu.getItems().retainAll(chartsMenu.getItems().subList(0,2));
  Path topsoilScripts=new GetDocumentsDirectoryOperation().perform(""String_Node_Str"");
  if (Files.exists(topsoilScripts)) {
    try {
      Files.walk(topsoilScripts).forEach(filePath -> {
        String fileName=filePath.getFileName().toString();
        if (fileName.matches(""String_Node_Str"")) {
          MenuItem chartItem=new MenuItem(fileName.replace(""String_Node_Str"",""String_Node_Str""));
          chartItem.setOnAction(event -> {
            initializeAndShow(new JavaScriptChart(filePath),getCurrentTable().map(dataTableToSet::get).get());
          }
);
          chartsMenu.getItems().add(chartItem);
        }
      }
);
    }
 catch (    IOException ex) {
      LOGGER.log(Level.SEVERE,null,ex);
    }
  }
}","@FXML void loadCustomScripts(){
  chartsMenu.getItems().retainAll(chartsMenu.getItems().subList(0,2));
  Path topsoilScripts=new GetDocumentsDirectoryOperation().perform(""String_Node_Str"");
  if (Files.exists(topsoilScripts)) {
    try {
      Files.walk(topsoilScripts).forEach(filePath -> {
        String fileName=filePath.getFileName().toString();
        if (fileName.matches(""String_Node_Str"")) {
          MenuItem chartItem=new MenuItem(fileName.replace(""String_Node_Str"",""String_Node_Str""));
          chartItem.setOnAction(event -> {
            initializeAndShow(new JavaScriptChart(filePath),getCurrentTable().map(TSVTable::getDataset).get());
          }
);
          chartsMenu.getItems().add(chartItem);
        }
      }
);
    }
 catch (    IOException ex) {
      LOGGER.log(Level.SEVERE,null,ex);
    }
  }
}",0.9885057471264368
86262,"/** 
 * Initializes the controller class.
 * @param url
 * @param resources
 */
@Override public void initialize(URL url,ResourceBundle resources){
  dataTableToSet=new HashMap<>();
  datasetManager=new TSVDatasetManager(DATA_SETS_DIRECTORY);
  datasetManager.getDatasets().stream().filter(datasetManager::isOpen).forEach(this::loadDataSet);
  loadCustomScripts();
  reloadDatasetMenu();
  String applicationName=resources.getString(""String_Node_Str"");
  String applicationVersion=resources.getString(""String_Node_Str"");
  setWindowTitle(String.format(""String_Node_Str"",applicationName,applicationVersion));
}","/** 
 * Initializes the controller class.
 * @param url
 * @param resources
 */
@Override public void initialize(URL url,ResourceBundle resources){
  datasetManager=new TSVDatasetManager(DATA_SETS_DIRECTORY);
  datasetManager.getDatasets().stream().filter(datasetManager::isOpen).forEach(this::loadDataSet);
  loadCustomScripts();
  reloadDatasetMenu();
  String applicationName=resources.getString(""String_Node_Str"");
  String applicationVersion=resources.getString(""String_Node_Str"");
  setWindowTitle(String.format(""String_Node_Str"",applicationName,applicationVersion));
}",0.9712837837837838
86263,"@Override public boolean isOpen(Dataset dataset){
  return datasetToPath.get(dataset).getParent().equals(getOpenPath());
}","@Override public boolean isOpen(Dataset dataset){
  return Optional.of(dataset).map(datasetToPath::get).map(Path::getParent).map(parent -> parent.equals(getOpenPath())).orElse(false);
}",0.7296416938110749
86264,"@Override public void close(Dataset dataset){
  if (datasetToPath.get(dataset).getParent().equals(getClosedPath())) {
    return;
  }
  try {
    Path datasetPath=datasetToPath.get(dataset);
    Files.move(datasetPath,getClosedPath().resolve(datasetPath.getFileName()));
  }
 catch (  IOException ex) {
    LOGGER.log(Level.SEVERE,null,ex);
  }
}","@Override public void close(Dataset dataset){
  if (isClosed(dataset)) {
    return;
  }
  try {
    Path datasetPath=datasetToPath.get(dataset);
    Files.move(datasetPath,getClosedPath().resolve(datasetPath.getFileName()));
  }
 catch (  IOException ex) {
    LOGGER.log(Level.SEVERE,null,ex);
  }
}",0.8995363214837713
86265,"@Override public void open(Dataset dataset){
  if (datasetToPath.get(dataset).getParent().equals(getOpenPath())) {
    return;
  }
  try {
    Path datasetPath=datasetToPath.get(dataset);
    Files.move(datasetPath,getOpenPath().resolve(datasetPath.getFileName()));
  }
 catch (  IOException ex) {
    LOGGER.log(Level.SEVERE,null,ex);
  }
}","@Override public void open(Dataset dataset){
  if (isOpen(dataset)) {
    return;
  }
  try {
    Path datasetPath=datasetToPath.get(dataset);
    Files.move(datasetPath,getOpenPath().resolve(datasetPath.getFileName()));
  }
 catch (  IOException ex) {
    LOGGER.log(Level.SEVERE,null,ex);
  }
}",0.8854003139717426
86266,"/** 
 * Test of normalizeAbsolute method, of class UncertaintyVariableFormat.
 */
@Test public void testNormalizeAbsolute(){
  assertEquals(3.14,oneSigmaAbsolute.normalizeAbsolute(3.14),10e-10);
  assertEquals(3.14,twoSigmaAbsolute.normalizeAbsolute(6.28),10e-10);
}","/** 
 * Test of normalizeAbsolute method, of class UncertaintyVariableFormat.
 */
@Test public void testNormalizeAbsolute(){
  assertEquals(3.24,oneSigmaAbsolute.normalizeAbsolute(3.24),10e-10);
  assertEquals(3.24,twoSigmaAbsolute.normalizeAbsolute(6.48),10e-10);
}",0.9849624060150376
86267,"@Override public void write(Dataset dataset,OutputStream destination) throws IOException {
  Writer outputStreamWriter=new OutputStreamWriter(destination,Charset.forName(""String_Node_Str""));
  try (CSVWriter tsvWriter=new CSVWriter(outputStreamWriter,'\t')){
    int actualColumnCount=Math.max(requiredColumnCount,dataset.getFields().size());
    String[] line=new String[actualColumnCount];
    for (int i=0; i < dataset.getFields().size(); i++) {
      line[i]=dataset.getFields().get(i).getName();
    }
    for (int i=dataset.getFields().size(); i < actualColumnCount; i++) {
      line[i]=""String_Node_Str"" + (i - dataset.getFields().size() + 1);
    }
    tsvWriter.writeNext(line);
    for (    Entry entry : dataset.getEntries()) {
      for (int i=0; i < dataset.getFields().size() + 1; i++) {
        Field field=dataset.getFields().get(i);
        line[i]=entry.get(field).get().toString();
      }
      for (int i=dataset.getFields().size(); i < actualColumnCount; i++) {
        line[i]=""String_Node_Str"";
      }
      tsvWriter.writeNext(line);
    }
  }
 }","@Override public void write(Dataset dataset,OutputStream destination) throws IOException {
  Writer outputStreamWriter=new OutputStreamWriter(destination,Charset.forName(""String_Node_Str""));
  try (CSVWriter tsvWriter=new CSVWriter(outputStreamWriter,'\t')){
    int actualColumnCount=Math.max(requiredColumnCount,dataset.getFields().size());
    String[] line=new String[actualColumnCount];
    for (int i=0; i < dataset.getFields().size(); i++) {
      line[i]=dataset.getFields().get(i).getName();
    }
    for (int i=dataset.getFields().size(); i < actualColumnCount; i++) {
      line[i]=""String_Node_Str"" + (i - dataset.getFields().size() + 1);
    }
    tsvWriter.writeNext(line);
    for (    Entry entry : dataset.getEntries()) {
      for (int i=0; i < dataset.getFields().size(); i++) {
        Field field=dataset.getFields().get(i);
        line[i]=entry.get(field).get().toString();
      }
      for (int i=dataset.getFields().size(); i < actualColumnCount; i++) {
        line[i]=""String_Node_Str"";
      }
      tsvWriter.writeNext(line);
    }
  }
 }",0.9981325863678804
86268,"public ColumnSelectorDialog(TableView<Record> tableToReadArg){
  super(null,null);
  setContent(new ColumnSelectorView(tableToReadArg));
  getActions().addAll(new ColumnSelectorAction(tableToReadArg),Dialog.ACTION_CANCEL);
  setResizable(false);
  setMasthead(MASTHEAD_TEXT);
}","public ColumnSelectorDialog(TableView<Record> tableToReadArg){
  super(null,null);
  setContent(new ColumnSelectorView(tableToReadArg,this));
  getActions().addAll(new ColumnSelectorAction(tableToReadArg,this),Dialog.ACTION_CANCEL);
  setResizable(false);
  setMasthead(MASTHEAD_TEXT);
}",0.9822695035460992
86269,"@FXML private void exportToSVG(){
  SVGExportDialog exportpanel=new SVGExportDialog(this,chart);
  exportpanel.show();
}","@FXML private void exportToSVG(){
  NodeToSVGConverter converter=new NodeToSVGConverter();
  FileChooser fileChooser=new FileChooser();
  fileChooser.setTitle(""String_Node_Str"");
  fileChooser.setInitialDirectory(new File(System.getProperty(""String_Node_Str"")));
  fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str""));
  File file=fileChooser.showSaveDialog(getScene().getWindow());
  if (file != null) {
    converter.convert(chart,file);
  }
}",0.1838709677419354
86270,"@Override protected Path performOnWindows(String... params){
  if (params.length != 1 || params[0] == null || params[0].equals(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return Paths.get(System.getProperty(""String_Node_Str""),params[0]);
}","@Override protected Path performOnWindows(String... params){
  if (params.length != 1 || params[0] == null || params[0].equals(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return Paths.get(System.getenv(""String_Node_Str""),params[0]);
}",0.9803220035778176
86271,"@Override public void start(Stage primaryStage) throws Exception {
  Files.createDirectory(TOPSOIL_PATH);
  if (Files.exists(OLD_LAST_TABLE_PATH)) {
    Files.move(OLD_LAST_TABLE_PATH,LAST_TABLE_PATH);
  }
  Files.deleteIfExists(OLD_TOPSOIL_PATH);
  ResourceBundle bundle=ResourceBundle.getBundle(""String_Node_Str"");
  Pane root=(Pane)FXMLLoader.load(getClass().getResource(""String_Node_Str""),bundle);
  primaryStage.setScene(new Scene(root));
  primaryStage.setTitle(String.format(""String_Node_Str"",bundle.getString(""String_Node_Str""),bundle.getString(""String_Node_Str"")));
  primaryStage.show();
}","@Override public void start(Stage primaryStage) throws Exception {
  Files.createDirectories(TOPSOIL_PATH);
  if (Files.exists(OLD_LAST_TABLE_PATH)) {
    Files.move(OLD_LAST_TABLE_PATH,LAST_TABLE_PATH);
  }
  Files.deleteIfExists(OLD_TOPSOIL_PATH);
  ResourceBundle bundle=ResourceBundle.getBundle(""String_Node_Str"");
  Pane root=(Pane)FXMLLoader.load(getClass().getResource(""String_Node_Str""),bundle);
  primaryStage.setScene(new Scene(root));
  primaryStage.setTitle(String.format(""String_Node_Str"",bundle.getString(""String_Node_Str""),bundle.getString(""String_Node_Str"")));
  primaryStage.show();
}",0.9966666666666668
86272,"@Override public ErrorEllipse convert(XYChart.Data data){
  Map<Object,Double> ellipse_data=(Map<Object,Double>)data.getExtraValue();
  double x=ellipse_data.get(key_x);
  double y=ellipse_data.get(key_y);
  double sigmax=ellipse_data.get(key_sigmax);
  double sigmay=ellipse_data.get(key_sigmay);
  double rho=ellipse_data.get(key_rho);
  return new ErrorEllipse(x,y,sigmay,sigmay,rho);
}","@Override public ErrorEllipse convert(XYChart.Data data){
  Map<Object,Double> ellipse_data=(Map<Object,Double>)data.getExtraValue();
  double x=ellipse_data.get(key_x);
  double y=ellipse_data.get(key_y);
  double sigmax=ellipse_data.get(key_sigmax);
  double sigmay=ellipse_data.get(key_sigmay);
  double rho=ellipse_data.get(key_rho);
  return new ErrorEllipse(x,y,sigmax,sigmay,rho);
}",0.9974293059125964
86273,"public StreamManager(@NonNull UsbDeviceConnection connection,@NonNull VideoStreamingInterface streamingInterface){
  this.connection=connection;
  this.streamingInterface=streamingInterface;
}","public StreamManager(@NonNull UsbDeviceConnection connection,@NonNull VideoControlInterface controlInterface,@NonNull VideoStreamingInterface streamingInterface){
  this.connection=connection;
  this.controlInterface=controlInterface;
  this.streamingInterface=streamingInterface;
}",0.7341772151898734
86274,"public void establishStreaming(@Nullable VideoFormat format,@Nullable VideoFrame frame){
  final ProbeControl current=ProbeControl.getCurrentProbe(streamingInterface);
  int retval=connection.controlTransfer(current.getRequestType(),current.getRequest(),current.getValue(),current.getIndex(),current.getData(),current.getLength(),500);
  Timber.d(""String_Node_Str"",(retval > 0 ? retval : LibusbError.fromNative(retval)));
  Timber.d(""String_Node_Str"",Hexdump.dumpHexString(current.getData()));
  final ProbeControl request=ProbeControl.setCurrentProbe(streamingInterface);
  request.setFormatIndex(2);
  request.setFrameIndex(2);
  request.setFrameInterval(333333);
  request.setMaxVideoFrameSize(1843200);
  request.setMaxPayloadTransferSize(3072);
  final ProbeControl commit=request.getCommit();
  retval=connection.controlTransfer(commit.getRequestType(),commit.getRequest(),commit.getValue(),commit.getIndex(),commit.getData(),commit.getLength(),500);
  Timber.d(""String_Node_Str"",(retval > 0 ? retval : LibusbError.fromNative(retval)));
  initiateStream();
}","public void establishStreaming(@Nullable VideoFormat format,@Nullable VideoFrame frame){
  final ProbeControl current=ProbeControl.getCurrentProbe(streamingInterface);
  int retval=connection.controlTransfer(current.getRequestType(),current.getRequest(),current.getValue(),current.getIndex(),current.getData(),current.getLength(),500);
  Timber.d(""String_Node_Str"",(retval > 0 ? retval : LibusbError.fromNative(retval)));
  Timber.d(""String_Node_Str"",Hexdump.dumpHexString(current.getData()));
  final ProbeControl request=ProbeControl.setCurrentProbe(streamingInterface);
  request.setFormatIndex(2);
  request.setFrameIndex(2);
  request.setFrameInterval(333333);
  request.setMaxVideoFrameSize(1843200);
  request.setMaxPayloadTransferSize(3072);
  final ProbeControl commit=request.getCommit();
  retval=connection.controlTransfer(commit.getRequestType(),commit.getRequest(),commit.getValue(),commit.getIndex(),commit.getData(),commit.getLength(),500);
  Timber.d(""String_Node_Str"",(retval > 0 ? retval : LibusbError.fromNative(retval)));
  final RequestErrorCode requestErrorCode=RequestErrorCode.getCurrentErrorCode(controlInterface);
  retval=connection.controlTransfer(requestErrorCode.getRequestType(),requestErrorCode.getRequest(),requestErrorCode.getValue(),requestErrorCode.getIndex(),requestErrorCode.getData(),requestErrorCode.getLength(),500);
  Timber.d(""String_Node_Str"",Hexdump.toHexString(requestErrorCode.getData()[0]));
  initiateStream();
}",0.836104513064133
86275,"public void initiateStream(){
  streamingInterface.selectAlternateSetting(connection,6);
  ByteBuffer buffer=ByteBuffer.allocateDirect(4096);
  Endpoint endpoint=streamingInterface.getCurrentEndpoints()[0];
  UsbEndpoint usbEndpoint=streamingInterface.getUsbInterface().getEndpoint(0);
  streamingInterface.printEndpoints();
  try {
    IsochronousAsyncTransfer transfer=new IsochronousAsyncTransfer(this,usbEndpoint,connection,buffer,20);
    int result=connection.isochronousTransfer(this,transfer,usbEndpoint,buffer,500);
    Timber.d(""String_Node_Str"",result > 0 ? result : LibusbError.fromNative(result));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void initiateStream(){
  streamingInterface.selectAlternateSetting(connection,6);
  ByteBuffer buffer=ByteBuffer.allocateDirect(4096);
  Endpoint endpoint=streamingInterface.getCurrentEndpoints()[0];
  try {
    IsochronousAsyncTransfer transfer=new IsochronousAsyncTransfer(this,endpoint.getEndpoint(),connection,buffer,20);
    transfer.submit(buffer,500);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.5808219178082191
86276,"WebcamConnection(@NonNull Context context,@NonNull android.hardware.usb.UsbDevice usbDevice) throws UnknownDeviceException, DevicePermissionDenied {
  this.usbManager=new UsbManager(context);
  if (usbDevice.getInterfaceCount() < 2) {
    throw new UnknownDeviceException();
  }
  Timber.d(""String_Node_Str"");
  usbDeviceConnection=usbManager.registerDevice(usbDevice);
  parseAssiociationDescriptors();
  VideoStreamingInterface streamingInterface=(VideoStreamingInterface)activeIAD.getInterface(1);
  Timber.d(""String_Node_Str"");
  streamManager=new StreamManager(usbDeviceConnection,streamingInterface);
  streamManager.establishStreaming(null,null);
}","WebcamConnection(@NonNull Context context,@NonNull android.hardware.usb.UsbDevice usbDevice) throws UnknownDeviceException, DevicePermissionDenied {
  this.usbManager=new UsbManager(context);
  if (usbDevice.getInterfaceCount() < 2) {
    throw new UnknownDeviceException();
  }
  Timber.d(""String_Node_Str"");
  usbDeviceConnection=usbManager.registerDevice(usbDevice);
  parseAssiociationDescriptors();
  VideoControlInterface controlInterface=(VideoControlInterface)activeIAD.getInterface(0);
  VideoStreamingInterface streamingInterface=(VideoStreamingInterface)activeIAD.getInterface(1);
  Timber.d(""String_Node_Str"");
  streamManager=new StreamManager(usbDeviceConnection,controlInterface,streamingInterface);
  streamManager.establishStreaming(null,null);
}",0.923836389280677
86277,"public static List<InterfaceAssociationDescriptor> parseDescriptors(UsbDeviceConnection connection,byte[] rawDescriptor){
  int length;
  byte[] desc;
  Type type;
  int i=0;
  State state=null;
  InterfaceAssociationDescriptor iad=null;
  ArrayList<InterfaceAssociationDescriptor> iads=new ArrayList<>();
  UvcInterface uvcInterface=null;
  Endpoint aEndpoint=null;
  int endpointIndex=1;
  while (i < rawDescriptor.length) {
    length=rawDescriptor[i];
    desc=new byte[length];
    System.arraycopy(rawDescriptor,i,desc,0,length);
    type=Type.getType(desc);
switch (type) {
case INTERFACE_ASSOCIATION:
      if (state == State.STANDARD_ENDPOINT) {
        i=rawDescriptor.length;
        break;
      }
    if (state != null) {
      throw new IllegalStateException(""String_Node_Str"" + state);
    }
  state=State.IAD;
iad=InterfaceAssociationDescriptor.parseIAD(desc);
iads.add(iad);
Timber.d(""String_Node_Str"",iad);
break;
case INTERFACE:
if (state != State.IAD && state != State.CLASS_INTERFACE && state != State.STANDARD_ENDPOINT && state != State.CLASS_ENDPOINT) {
throw new IllegalStateException(""String_Node_Str"" + state);
}
state=State.STANDARD_INTERFACE;
endpointIndex=1;
uvcInterface=UvcInterface.parseDescriptor(connection,desc);
if (iad != null && uvcInterface != null) {
final UvcInterface existing=iad.getInterface(uvcInterface.getInterfaceNumber());
if (existing != null) {
existing.parseAlternateFunction(connection,desc);
}
 else {
iad.addInterface(uvcInterface);
}
}
break;
case CS_INTERFACE:
if (uvcInterface == null) {
throw new IllegalStateException(""String_Node_Str"");
}
if (state != State.STANDARD_INTERFACE && state != State.CLASS_INTERFACE) {
throw new IllegalStateException(""String_Node_Str"" + state);
}
state=State.CLASS_INTERFACE;
uvcInterface.parseClassDescriptor(desc);
break;
case ENDPOINT:
if (uvcInterface == null) {
throw new IllegalStateException(""String_Node_Str"");
}
if (state != State.STANDARD_INTERFACE && state != State.CLASS_INTERFACE) {
throw new IllegalStateException(""String_Node_Str"" + state);
}
state=State.STANDARD_ENDPOINT;
aEndpoint=Endpoint.parseDescriptor(uvcInterface.getUsbInterface(),desc);
uvcInterface.addEndpoint(endpointIndex,aEndpoint);
++endpointIndex;
break;
case CS_ENDPOINT:
if (aEndpoint == null) {
throw new IllegalStateException(""String_Node_Str"");
}
if (state != State.STANDARD_ENDPOINT) {
throw new IllegalStateException(""String_Node_Str"" + state);
}
state=State.CLASS_ENDPOINT;
aEndpoint.parseClassDescriptor(desc);
break;
case DEVICE:
case DEVICE_QUALIFIER:
case CONFIGURATION:
break;
default :
Timber.d(""String_Node_Str"",Hexdump.dumpHexString(desc));
}
i+=length;
}
return iads;
}","public static List<InterfaceAssociationDescriptor> parseDescriptors(UsbDeviceConnection connection,byte[] rawDescriptor){
  int length;
  byte[] desc;
  Type type;
  int i=0;
  State state=null;
  InterfaceAssociationDescriptor iad=null;
  ArrayList<InterfaceAssociationDescriptor> iads=new ArrayList<>();
  UvcInterface uvcInterface=null;
  Endpoint aEndpoint=null;
  int endpointIndex=1;
  while (i < rawDescriptor.length) {
    length=rawDescriptor[i];
    desc=new byte[length];
    System.arraycopy(rawDescriptor,i,desc,0,length);
    type=Type.getType(desc);
switch (type) {
case INTERFACE_ASSOCIATION:
      if (state == State.STANDARD_ENDPOINT) {
        i=rawDescriptor.length;
        break;
      }
    if (state != null) {
      throw new IllegalStateException(""String_Node_Str"" + state);
    }
  state=State.IAD;
iad=InterfaceAssociationDescriptor.parseIAD(desc);
iads.add(iad);
break;
case INTERFACE:
if (state != State.IAD && state != State.CLASS_INTERFACE && state != State.STANDARD_ENDPOINT && state != State.CLASS_ENDPOINT) {
throw new IllegalStateException(""String_Node_Str"" + state);
}
state=State.STANDARD_INTERFACE;
endpointIndex=1;
uvcInterface=UvcInterface.parseDescriptor(connection,desc);
if (iad != null && uvcInterface != null) {
final UvcInterface existing=iad.getInterface(uvcInterface.getInterfaceNumber());
if (existing != null) {
uvcInterface=existing;
existing.parseAlternateFunction(connection,desc);
}
 else {
iad.addInterface(uvcInterface);
}
}
break;
case CS_INTERFACE:
if (uvcInterface == null) {
throw new IllegalStateException(""String_Node_Str"");
}
if (state != State.STANDARD_INTERFACE && state != State.CLASS_INTERFACE) {
throw new IllegalStateException(""String_Node_Str"" + state);
}
state=State.CLASS_INTERFACE;
uvcInterface.parseClassDescriptor(desc);
break;
case ENDPOINT:
if (uvcInterface == null) {
throw new IllegalStateException(""String_Node_Str"");
}
if (state != State.STANDARD_INTERFACE && state != State.CLASS_INTERFACE) {
throw new IllegalStateException(""String_Node_Str"" + state);
}
state=State.STANDARD_ENDPOINT;
aEndpoint=Endpoint.parseDescriptor(uvcInterface.getUsbInterface(),desc);
uvcInterface.addEndpoint(endpointIndex,aEndpoint);
++endpointIndex;
break;
case CS_ENDPOINT:
if (aEndpoint == null) {
throw new IllegalStateException(""String_Node_Str"");
}
if (state != State.STANDARD_ENDPOINT) {
throw new IllegalStateException(""String_Node_Str"" + state);
}
state=State.CLASS_ENDPOINT;
aEndpoint.parseClassDescriptor(desc);
break;
case DEVICE:
case DEVICE_QUALIFIER:
case CONFIGURATION:
break;
default :
Timber.d(""String_Node_Str"",Hexdump.dumpHexString(desc));
}
i+=length;
}
return iads;
}",0.817188088955899
86278,"public void addEndpoint(int index,@NonNull Endpoint endpoint){
  Timber.d(""String_Node_Str"",currentSetting,index,endpoint);
  Endpoint[] array=endpoints.get(currentSetting);
  Timber.v(""String_Node_Str"",array,array.length);
  array[index - 1]=endpoint;
  Timber.w(""String_Node_Str"",Arrays.toString(array));
  endpoints.put(currentSetting,array);
}","public void addEndpoint(int index,@NonNull Endpoint endpoint){
  endpoints.get(currentSetting)[index - 1]=endpoint;
}",0.5043103448275862
86279,"public void selectAlternateSetting(@NonNull UsbDeviceConnection connection,int alternateSetting) throws UnsupportedOperationException {
  currentSetting=alternateSetting;
  final UsbInterface usbInterface=getUsbInterface();
  if (usbInterface == null) {
    throw new UnsupportedOperationException(""String_Node_Str"" + alternateSetting);
  }
  connection.claimInterface(usbInterface,true);
  final LibusbError result=connection.setInterface(usbInterface);
  Timber.d(""String_Node_Str"",result);
  Timber.d(""String_Node_Str"",Arrays.toString(getCurrentEndpoints()));
}","public LibusbError selectAlternateSetting(@NonNull UsbDeviceConnection connection,int alternateSetting) throws UnsupportedOperationException {
  currentSetting=alternateSetting;
  final UsbInterface usbInterface=getUsbInterface();
  if (usbInterface == null) {
    throw new UnsupportedOperationException(""String_Node_Str"" + alternateSetting);
  }
  connection.claimInterface(usbInterface,true);
  return connection.setInterface(usbInterface);
}",0.846382556987116
86280,"public static UvcInterface parseDescriptor(UsbDeviceConnection connection,byte[] descriptor) throws IllegalArgumentException {
  if (descriptor.length < LENGTH_STANDARD_DESCRIPTOR) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (descriptor[bInterfaceClass] == Descriptor.VIDEO_CLASS_CODE) {
    if (descriptor[bInterfaceProtocol] != Protocol.PC_PROTOCOL_15.protocol) {
switch (VideoSubclass.getVideoSubclass(descriptor[bInterfaceSubClass])) {
case SC_VIDEOCONTROL:
        return VideoControlInterface.parseVideoControlInterface(connection,descriptor);
case SC_VIDEOSTREAMING:
      return VideoStreamingInterface.parseVideoStreamingInterface(connection,descriptor);
default :
    throw new IllegalArgumentException(""String_Node_Str"");
}
}
 else {
throw new IllegalArgumentException(""String_Node_Str"" + descriptor[bInterfaceProtocol]);
}
}
 else if (descriptor[bInterfaceClass] == Descriptor.AUDIO_CLASS_CODE) {
return null;
}
 else {
throw new IllegalArgumentException(""String_Node_Str"" + descriptor[bInterfaceClass]);
}
}","public static UvcInterface parseDescriptor(UsbDeviceConnection connection,byte[] descriptor) throws IllegalArgumentException {
  if (descriptor.length < LENGTH_STANDARD_DESCRIPTOR) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (descriptor[bInterfaceClass] == Descriptor.VIDEO_CLASS_CODE) {
    if (descriptor[bInterfaceProtocol] != Protocol.PC_PROTOCOL_15.protocol) {
switch (VideoSubclass.getVideoSubclass(descriptor[bInterfaceSubClass])) {
case SC_VIDEOCONTROL:
        Timber.i(""String_Node_Str"");
      return VideoControlInterface.parseVideoControlInterface(connection,descriptor);
case SC_VIDEOSTREAMING:
    Timber.i(""String_Node_Str"");
  return VideoStreamingInterface.parseVideoStreamingInterface(connection,descriptor);
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}
 else {
throw new IllegalArgumentException(""String_Node_Str"" + descriptor[bInterfaceProtocol]);
}
}
 else if (descriptor[bInterfaceClass] == Descriptor.AUDIO_CLASS_CODE) {
return null;
}
 else {
throw new IllegalArgumentException(""String_Node_Str"" + descriptor[bInterfaceClass]);
}
}",0.9684014869888476
86281,"@Override public void parseAlternateFunction(@NonNull UsbDeviceConnection connection,byte[] descriptor){
  currentSetting=0xFF & descriptor[bAlternateSetting];
  Timber.d(""String_Node_Str"",currentSetting);
  usbInterfaces.put(currentSetting,getUsbInterface(connection,descriptor));
  final int endpointCount=(0xFF & descriptor[bNumEndpoints]);
  endpoints.put(currentSetting,new Endpoint[endpointCount]);
  printEndpoints();
}","@Override public void parseAlternateFunction(@NonNull UsbDeviceConnection connection,byte[] descriptor){
  currentSetting=0xFF & descriptor[bAlternateSetting];
  usbInterfaces.put(currentSetting,getUsbInterface(connection,descriptor));
  final int endpointCount=(0xFF & descriptor[bNumEndpoints]);
  endpoints.put(currentSetting,new Endpoint[endpointCount]);
}",0.916030534351145
86282,"private void VS_INTERFACE_SUBTYPE(int code){
  this.code=(byte)(0xFF & code);
}","void VS_INTERFACE_SUBTYPE(int code){
  this.code=(byte)(0xFF & code);
}",0.9466666666666668
86283,"@Override public void onMessage(String chan,String message){
  Core.logDebug(chan + ""String_Node_Str"" + message+ ""String_Node_Str"");
  try {
    lock.lock();
switch (chan) {
case REAPCHANNEL:
{
        NetworkServer server=getServer0(message);
        if (server == null)         return;
        removeServer0(server);
        break;
      }
case LINK_CHANNEL:
{
      if (message.equals(""String_Node_Str"")) {
        linkServer0();
        return;
      }
      String[] split=message.split(""String_Node_Str"");
      if (split.length == 1)       return;
      String cmd=split[0];
      if (cmd.equals(""String_Node_Str"")) {
        if (split.length < 2)         return;
        NetworkServer server=getServer0(split[1]);
        if (server == null)         return;
        removeServer0(server);
      }
      break;
    }
case HEARTBEAT_CHAN:
{
    String[] split=message.split(""String_Node_Str"");
    if (split.length != 3)     return;
    String name=split[0];
    if (name.equals(thisServer.getName()))     return;
    String uuids=split[1];
    Integer maxPlayers=Integer.parseInt(split[2]);
    BungeeCordServer server=(BungeeCordServer)getServer0(name);
    if (server == null) {
      server=new BungeeCordServer(name,maxPlayers,BungeeCordNetworkManager.this);
      addServer0(server);
    }
    server.getUuids().clear();
    if (!uuids.equals(""String_Node_Str"")) {
      for (      String s : uuids.split(""String_Node_Str"")) {
        server.getUuids().add(UUID.fromString(s));
      }
    }
    server.setLastPing(new Date());
    break;
  }
case NET_COMMAND_CHANNEL:
{
  try {
    JSONObject parse=(JSONObject)JSONValue.parse(message);
    if (!parse.get(""String_Node_Str"").equals(getThisServer().getName()))     return;
    String sender=(String)parse.get(""String_Node_Str"");
    NetworkServer server=getServer0(sender);
    if (server == null)     return;
    JSONObject jsonObject=(JSONObject)parse.get(""String_Node_Str"");
    NetCommand netCommand=NetworkUtils.decodeNetCommand(jsonObject);
    for (    NetCommandHandler netCommandHandler : netCommandHandlers.get(netCommand.getClass())) {
      netCommandHandler.handleNetCommand(server,netCommand);
    }
  }
 catch (  Exception e) {
    Core.logDebug(""String_Node_Str"" + message);
    if (Core.DEBUG)     e.printStackTrace();
  }
}
}
}
  finally {
lock.unlock();
}
}","@Override public void onMessage(String chan,String message){
}",0.0516666666666666
86284,"private <T extends Punishment>void registerPunishmentManager(Class<T> punishmentClass,PunishmentManager<T> punishmentManager){
  punishmentManagers.put(punishmentClass,punishmentManager);
  if (TimedPunishment.class.isAssignableFrom(punishmentClass))   registerCommand(new TemporaryPunishCommand<>((Class<? extends TimedPunishment>)punishmentClass));
 else   registerCommand(new PermanentPunishCommand<>(punishmentClass));
  registerCommand(new UnPunishCommand<>(punishmentClass));
}","private <T extends Punishment>void registerPunishmentManager(Class<T> punishmentClass,PunishmentManager<T> punishmentManager){
  punishmentManagers.put(punishmentClass,punishmentManager);
  if (!getConfig().getBoolean(""String_Node_Str"",true))   return;
  if (TimedPunishment.class.isAssignableFrom(punishmentClass))   registerCommand(new TemporaryPunishCommand<>((Class<? extends TimedPunishment>)punishmentClass));
 else   registerCommand(new PermanentPunishCommand<>(punishmentClass));
  registerCommand(new UnPunishCommand<>(punishmentClass));
}",0.9369544131910766
86285,"@Override public T punish(COfflinePlayer target,String reason,COfflinePlayer issuer) throws PunishmentException {
  if (getActivePunishmentFor(target) != null)   throw new PunishmentException(""String_Node_Str"");
  if (!(target instanceof CPlayer) && punishmentClazz.isAnnotationPresent(TargetOnlinesOnly.class))   throw new PunishmentException(""String_Node_Str"");
  T newPunishment=createNewPunishment(target,reason,issuer);
  DBObject dbObject=convertToDBObject(newPunishment);
  newPunishment.setMongoId((ObjectId)dbObject.get(""String_Node_Str""));
  collection.save(dbObject);
  if (target instanceof CPlayer)   onPunish((CPlayer)target,newPunishment);
  return newPunishment;
}","@Override public T punish(COfflinePlayer target,String reason,COfflinePlayer issuer) throws PunishmentException {
  if (getActivePunishmentFor(target) != null)   throw new PunishmentException(""String_Node_Str"");
  if (!(target instanceof CPlayer) && punishmentClazz.isAnnotationPresent(TargetOnlinesOnly.class))   throw new PunishmentException(""String_Node_Str"");
  T newPunishment=createNewPunishment(target,reason,issuer);
  PunishEvent punishEvent=new PunishEvent(target,issuer,newPunishment);
  Bukkit.getPluginManager().callEvent(punishEvent);
  if (punishEvent.isCancelled())   throw new PunishmentException(""String_Node_Str"");
  DBObject dbObject=convertToDBObject(newPunishment);
  newPunishment.setMongoId((ObjectId)dbObject.get(""String_Node_Str""));
  collection.save(dbObject);
  if (target instanceof CPlayer)   onPunish((CPlayer)target,newPunishment);
  return newPunishment;
}",0.8667941363926067
86286,"public String get(){
  if (formatString == null)   return ""String_Node_Str"";
  String s=ChatColor.translateAlternateColorCodes('&',formatString);
  for (  Map.Entry<String,String> stringStringEntry : modifiers.entrySet()) {
    String value=stringStringEntry.getValue();
    if (coloredInputs)     value=ChatColor.translateAlternateColorCodes('&',value);
    s=s.replaceAll(String.format(""String_Node_Str"",stringStringEntry.getKey()),value);
    s=s.replaceAll(""String_Node_Str"" + stringStringEntry.getKey() + ""String_Node_Str"",value);
  }
  if (prefix && loadedPrefix != null)   return loadedPrefix + s;
  return s;
}","public String get(){
  if (formatString == null)   return ""String_Node_Str"";
  String s=ChatColor.translateAlternateColorCodes('&',formatString);
  for (  Map.Entry<String,String> stringStringEntry : modifiers.entrySet()) {
    String value=stringStringEntry.getValue();
    if (coloredInputs)     value=ChatColor.translateAlternateColorCodes('&',value);
    s=s.replaceAll(""String_Node_Str"" + stringStringEntry.getKey() + ""String_Node_Str"",value);
    s=s.replaceAll(""String_Node_Str"" + stringStringEntry.getKey() + ""String_Node_Str"",value);
  }
  if (prefix && loadedPrefix != null)   return loadedPrefix + s;
  return s;
}",0.9686242960579244
86287,"@Override public void onMessage(String chan,String message){
  Core.logDebug(chan + ""String_Node_Str"" + message+ ""String_Node_Str"");
switch (chan) {
case REAPCHANNEL:
{
      NetworkServer server=getServer(message);
      if (server == null)       return;
      removeServer(server);
      break;
    }
case LINK_CHANNEL:
{
    if (message.equals(""String_Node_Str"")) {
      linkServer();
      return;
    }
    String[] split=message.split(""String_Node_Str"");
    if (split.length == 1)     return;
    String cmd=split[0];
    if (cmd.equals(""String_Node_Str"")) {
      if (split.length < 2)       return;
      NetworkServer server=getServer(split[1]);
      if (server == null)       return;
      removeServer(server);
    }
    break;
  }
case HEARTBEAT_CHAN:
{
  String[] split=message.split(""String_Node_Str"");
  if (split.length != 3)   return;
  String name=split[0];
  if (name.equals(thisServer.getName()))   return;
  String uuids=split[1];
  Integer maxPlayers=Integer.parseInt(split[2]);
  BungeeCordServer server=(BungeeCordServer)getServer(name);
  if (server == null) {
    server=new BungeeCordServer(name,maxPlayers,BungeeCordNetworkManager.this);
    addServer(server);
  }
  server.getUuids().clear();
  if (!uuids.equals(""String_Node_Str"")) {
    for (    String s : uuids.split(""String_Node_Str"")) {
      server.getUuids().add(UUID.fromString(s));
    }
  }
  server.setLastPing(new Date());
  break;
}
case NET_COMMAND_CHANNEL:
{
try {
  JSONObject parse=(JSONObject)JSONValue.parse(message);
  String sender=(String)parse.get(""String_Node_Str"");
  NetworkServer server=getServer(sender);
  if (server == null)   return;
  JSONObject jsonObject=(JSONObject)parse.get(""String_Node_Str"");
  NetCommand netCommand=NetworkUtils.decodeNetCommand(jsonObject);
  for (  NetCommandHandler netCommandHandler : netCommandHandlers.get(netCommand.getClass())) {
    netCommandHandler.handleNetCommand(server,netCommand);
  }
}
 catch (Exception e) {
  Core.logDebug(""String_Node_Str"" + message);
  if (Core.DEBUG)   e.printStackTrace();
}
}
}
}","@Override public void onMessage(String chan,String message){
  Core.logDebug(chan + ""String_Node_Str"" + message+ ""String_Node_Str"");
switch (chan) {
case REAPCHANNEL:
{
      NetworkServer server=getServer(message);
      if (server == null)       return;
      removeServer(server);
      break;
    }
case LINK_CHANNEL:
{
    if (message.equals(""String_Node_Str"")) {
      linkServer();
      return;
    }
    String[] split=message.split(""String_Node_Str"");
    if (split.length == 1)     return;
    String cmd=split[0];
    if (cmd.equals(""String_Node_Str"")) {
      if (split.length < 2)       return;
      NetworkServer server=getServer(split[1]);
      if (server == null)       return;
      removeServer(server);
    }
    break;
  }
case HEARTBEAT_CHAN:
{
  String[] split=message.split(""String_Node_Str"");
  if (split.length != 3)   return;
  String name=split[0];
  if (name.equals(thisServer.getName()))   return;
  String uuids=split[1];
  Integer maxPlayers=Integer.parseInt(split[2]);
  BungeeCordServer server=(BungeeCordServer)getServer(name);
  if (server == null) {
    server=new BungeeCordServer(name,maxPlayers,BungeeCordNetworkManager.this);
    addServer(server);
  }
  server.getUuids().clear();
  if (!uuids.equals(""String_Node_Str"")) {
    for (    String s : uuids.split(""String_Node_Str"")) {
      server.getUuids().add(UUID.fromString(s));
    }
  }
  server.setLastPing(new Date());
  break;
}
case NET_COMMAND_CHANNEL:
{
try {
  JSONObject parse=(JSONObject)JSONValue.parse(message);
  if (!parse.get(""String_Node_Str"").equals(getThisServer().getName()))   return;
  String sender=(String)parse.get(""String_Node_Str"");
  NetworkServer server=getServer(sender);
  if (server == null)   return;
  JSONObject jsonObject=(JSONObject)parse.get(""String_Node_Str"");
  NetCommand netCommand=NetworkUtils.decodeNetCommand(jsonObject);
  for (  NetCommandHandler netCommandHandler : netCommandHandlers.get(netCommand.getClass())) {
    netCommandHandler.handleNetCommand(server,netCommand);
  }
}
 catch (Exception e) {
  Core.logDebug(""String_Node_Str"" + message);
  if (Core.DEBUG)   e.printStackTrace();
}
}
}
}",0.9807096927839962
86288,"@Override @SneakyThrows public void sendNetCommand(NetCommand command){
  JSONObject jsonObject=NetworkUtils.encodeNetCommand(command);
  final JSONObject sendObject=new JSONObject();
  sendObject.put(""String_Node_Str"",networkManager.getThisServer().getName());
  sendObject.put(""String_Node_Str"",jsonObject);
  Bukkit.getScheduler().runTaskAsynchronously(Core.getInstance(),new Runnable(){
    @Override public void run(){
      Jedis resource=networkManager.getJedisPool().getResource();
      resource.publish(BungeeCordNetworkManager.NET_COMMAND_CHANNEL,sendObject.toJSONString());
      networkManager.getJedisPool().returnResource(resource);
    }
  }
);
}","@Override @SneakyThrows public void sendNetCommand(NetCommand command){
  JSONObject jsonObject=NetworkUtils.encodeNetCommand(command);
  final JSONObject sendObject=new JSONObject();
  sendObject.put(""String_Node_Str"",networkManager.getThisServer().getName());
  sendObject.put(""String_Node_Str"",jsonObject);
  sendObject.put(""String_Node_Str"",name);
  Bukkit.getScheduler().runTaskAsynchronously(Core.getInstance(),new Runnable(){
    @Override public void run(){
      Jedis resource=networkManager.getJedisPool().getResource();
      resource.publish(BungeeCordNetworkManager.NET_COMMAND_CHANNEL,sendObject.toJSONString());
      networkManager.getJedisPool().returnResource(resource);
    }
  }
);
}",0.9692532942898976
86289,"@Override public List<NetworkServer> getServers(){
  ArrayList<NetworkServer> bungeeCordServers=new ArrayList<>();
  bungeeCordServers.addAll(servers.values());
  bungeeCordServers.add(thisServer);
  return ImmutableList.copyOf(bungeeCordServers);
}","@Override public List<NetworkServer> getServers(){
  ArrayList<NetworkServer> bungeeCordServers=new ArrayList<>();
  try {
    lock.lock();
    bungeeCordServers.addAll(servers.values());
  }
  finally {
    lock.unlock();
  }
  bungeeCordServers.add(thisServer);
  return ImmutableList.copyOf(bungeeCordServers);
}",0.8829787234042553
86290,"@Override public NetworkServer getServer(String name){
  if (thisServer.getName().equals(name))   return thisServer;
  return servers.get(name);
}","@Override public NetworkServer getServer(String name){
  try {
    lock.lock();
    return getServer0(name);
  }
  finally {
    lock.unlock();
  }
}",0.5898305084745763
86291,"public BungeeCordNetworkManager(YAMLConfigurationFile config) throws SocketException {
  bungeeYAML=config.getConfig();
  JedisPoolConfig jedisPoolConfig=new JedisPoolConfig();
  jedisPoolConfig.setMinIdle(10);
  jedisPoolConfig.setMaxTotal(50);
  jedisPoolConfig.setMaxWaitMillis(100);
  jedisPoolConfig.setBlockWhenExhausted(false);
  jedisPoolConfig.setTestOnBorrow(true);
  jedisPoolConfig.setTestOnReturn(true);
  this.jedisPool=new JedisPool(jedisPoolConfig,bungeeYAML.getString(""String_Node_Str""),bungeeYAML.getInt(""String_Node_Str""));
  this.thisServer=new BungeeCordServer(bungeeYAML.getString(""String_Node_Str""),Bukkit.getMaxPlayers(),this);
  updateThisServer();
  new Thread(new JedisListener()).start();
  scheduleHeartbeat(5l,TimeUnit.SECONDS);
  Enumeration<InetAddress> inetAddresses=NetworkInterface.getByName(bungeeYAML.getString(""String_Node_Str"")).getInetAddresses();
  InetAddress address=null;
  while (inetAddresses.hasMoreElements() && !(address=inetAddresses.nextElement()).getHostAddress().matches(""String_Node_Str"")) {
  }
  if (address == null)   throw new IllegalStateException(""String_Node_Str"");
  ip=address.getHostAddress();
  linkServer();
  Bukkit.getServer().getMessenger().registerOutgoingPluginChannel(Core.getInstance(),""String_Node_Str"");
}","public BungeeCordNetworkManager(YAMLConfigurationFile config) throws SocketException {
  bungeeYAML=config.getConfig();
  JedisPoolConfig jedisPoolConfig=new JedisPoolConfig();
  jedisPoolConfig.setMinIdle(10);
  jedisPoolConfig.setMaxTotal(50);
  jedisPoolConfig.setMaxWaitMillis(100);
  jedisPoolConfig.setBlockWhenExhausted(false);
  jedisPoolConfig.setTestOnBorrow(true);
  jedisPoolConfig.setTestOnReturn(true);
  this.jedisPool=new JedisPool(jedisPoolConfig,bungeeYAML.getString(""String_Node_Str""),bungeeYAML.getInt(""String_Node_Str""));
  this.thisServer=new BungeeCordServer(bungeeYAML.getString(""String_Node_Str""),Bukkit.getMaxPlayers(),this);
  updateThisServer();
  new Thread(new JedisListener()).start();
  scheduleHeartbeat(5l,TimeUnit.SECONDS);
  Enumeration<InetAddress> inetAddresses=NetworkInterface.getByName(bungeeYAML.getString(""String_Node_Str"")).getInetAddresses();
  InetAddress address=null;
  while (inetAddresses.hasMoreElements() && !(address=inetAddresses.nextElement()).getHostAddress().matches(""String_Node_Str"")) {
  }
  if (address == null)   throw new IllegalStateException(""String_Node_Str"");
  ip=address.getHostAddress();
  linkServer0();
}",0.9560260586319218
86292,"@Override @Synchronized public void updateHeartbeat(){
  Iterator<BungeeCordServer> iterator=servers.values().iterator();
  Long time=System.currentTimeMillis();
  while (iterator.hasNext()) {
    BungeeCordServer next=iterator.next();
    if (time - next.getLastPing().getTime() > 10000) {
      for (      NetworkServerDiscoverObserver discoverObserver : discoverObservers) {
        discoverObserver.onNetworkServerRemove(next);
      }
      iterator.remove();
    }
  }
  updateThisServer();
  String[] heartbeat=new String[3];
  heartbeat[0]=getThisServer().getName();
  heartbeat[1]=getThisServer().getPlayers().size() == 0 ? ""String_Node_Str"" : Joiner.on(',').join(getThisServer().getPlayers());
  heartbeat[2]=String.valueOf(getThisServer().getMaximumPlayers());
  final String join=Joiner.on(';').join(heartbeat);
  Bukkit.getScheduler().runTaskAsynchronously(Core.getInstance(),new Runnable(){
    @Override public void run(){
      Jedis resource=jedisPool.getResource();
      resource.publish(HEARTBEAT_CHAN,join);
      jedisPool.returnResource(resource);
    }
  }
);
  linkServer();
  resetHeartbeat(5L,TimeUnit.SECONDS);
}","@Override public void updateHeartbeat(){
  try {
    lock.lock();
    Iterator<BungeeCordServer> iterator=servers.values().iterator();
    Long time=System.currentTimeMillis();
    while (iterator.hasNext()) {
      BungeeCordServer next=iterator.next();
      if (time - next.getLastPing().getTime() > 10000) {
        for (        NetworkServerDiscoverObserver discoverObserver : discoverObservers) {
          discoverObserver.onNetworkServerRemove(next);
        }
        iterator.remove();
      }
    }
    updateThisServer();
    String[] heartbeat=new String[3];
    heartbeat[0]=getThisServer().getName();
    heartbeat[1]=getThisServer().getPlayers().size() == 0 ? ""String_Node_Str"" : Joiner.on(',').join(getThisServer().getPlayers());
    heartbeat[2]=String.valueOf(getThisServer().getMaximumPlayers());
    final String join=Joiner.on(';').join(heartbeat);
    Bukkit.getScheduler().runTaskAsynchronously(Core.getInstance(),new Runnable(){
      @Override public void run(){
        Jedis resource=jedisPool.getResource();
        resource.publish(HEARTBEAT_CHAN,join);
        jedisPool.returnResource(resource);
      }
    }
);
    linkServer0();
    resetHeartbeat(5L,TimeUnit.SECONDS);
  }
  finally {
    lock.unlock();
  }
}",0.9174004192872116
86293,"@Override public void onMessage(String chan,String message){
  Core.logDebug(chan + ""String_Node_Str"" + message+ ""String_Node_Str"");
switch (chan) {
case REAPCHANNEL:
{
      NetworkServer server=getServer(message);
      if (server == null)       return;
      removeServer(server);
      break;
    }
case LINK_CHANNEL:
{
    if (message.equals(""String_Node_Str"")) {
      linkServer();
      return;
    }
    String[] split=message.split(""String_Node_Str"");
    if (split.length == 1)     return;
    String cmd=split[0];
    if (cmd.equals(""String_Node_Str"")) {
      if (split.length < 2)       return;
      NetworkServer server=getServer(split[1]);
      if (server == null)       return;
      removeServer(server);
    }
    break;
  }
case HEARTBEAT_CHAN:
{
  String[] split=message.split(""String_Node_Str"");
  if (split.length != 3)   return;
  String name=split[0];
  if (name.equals(thisServer.getName()))   return;
  String uuids=split[1];
  Integer maxPlayers=Integer.parseInt(split[2]);
  BungeeCordServer server=(BungeeCordServer)getServer(name);
  if (server == null) {
    server=new BungeeCordServer(name,maxPlayers,BungeeCordNetworkManager.this);
    addServer(server);
  }
  server.getUuids().clear();
  if (!uuids.equals(""String_Node_Str"")) {
    for (    String s : uuids.split(""String_Node_Str"")) {
      server.getUuids().add(UUID.fromString(s));
    }
  }
  server.setLastPing(new Date());
  break;
}
case NET_COMMAND_CHANNEL:
{
try {
  JSONObject parse=(JSONObject)JSONValue.parse(message);
  if (!parse.get(""String_Node_Str"").equals(getThisServer().getName()))   return;
  String sender=(String)parse.get(""String_Node_Str"");
  NetworkServer server=getServer(sender);
  if (server == null)   return;
  JSONObject jsonObject=(JSONObject)parse.get(""String_Node_Str"");
  NetCommand netCommand=NetworkUtils.decodeNetCommand(jsonObject);
  for (  NetCommandHandler netCommandHandler : netCommandHandlers.get(netCommand.getClass())) {
    netCommandHandler.handleNetCommand(server,netCommand);
  }
}
 catch (Exception e) {
  Core.logDebug(""String_Node_Str"" + message);
  if (Core.DEBUG)   e.printStackTrace();
}
}
}
}","@Override public void onMessage(String chan,String message){
  Core.logDebug(chan + ""String_Node_Str"" + message+ ""String_Node_Str"");
  try {
    lock.lock();
switch (chan) {
case REAPCHANNEL:
{
        NetworkServer server=getServer0(message);
        if (server == null)         return;
        removeServer0(server);
        break;
      }
case LINK_CHANNEL:
{
      if (message.equals(""String_Node_Str"")) {
        linkServer0();
        return;
      }
      String[] split=message.split(""String_Node_Str"");
      if (split.length == 1)       return;
      String cmd=split[0];
      if (cmd.equals(""String_Node_Str"")) {
        if (split.length < 2)         return;
        NetworkServer server=getServer0(split[1]);
        if (server == null)         return;
        removeServer0(server);
      }
      break;
    }
case HEARTBEAT_CHAN:
{
    String[] split=message.split(""String_Node_Str"");
    if (split.length != 3)     return;
    String name=split[0];
    if (name.equals(thisServer.getName()))     return;
    String uuids=split[1];
    Integer maxPlayers=Integer.parseInt(split[2]);
    BungeeCordServer server=(BungeeCordServer)getServer0(name);
    if (server == null) {
      server=new BungeeCordServer(name,maxPlayers,BungeeCordNetworkManager.this);
      addServer0(server);
    }
    server.getUuids().clear();
    if (!uuids.equals(""String_Node_Str"")) {
      for (      String s : uuids.split(""String_Node_Str"")) {
        server.getUuids().add(UUID.fromString(s));
      }
    }
    server.setLastPing(new Date());
    break;
  }
case NET_COMMAND_CHANNEL:
{
  try {
    JSONObject parse=(JSONObject)JSONValue.parse(message);
    if (!parse.get(""String_Node_Str"").equals(getThisServer().getName()))     return;
    String sender=(String)parse.get(""String_Node_Str"");
    NetworkServer server=getServer0(sender);
    if (server == null)     return;
    JSONObject jsonObject=(JSONObject)parse.get(""String_Node_Str"");
    NetCommand netCommand=NetworkUtils.decodeNetCommand(jsonObject);
    for (    NetCommandHandler netCommandHandler : netCommandHandlers.get(netCommand.getClass())) {
      netCommandHandler.handleNetCommand(server,netCommand);
    }
  }
 catch (  Exception e) {
    Core.logDebug(""String_Node_Str"" + message);
    if (Core.DEBUG)     e.printStackTrace();
  }
}
}
}
  finally {
lock.unlock();
}
}",0.8727110317105851
86294,"@Override @SneakyThrows public void sendNetCommand(NetCommand command){
  JSONObject jsonObject=NetworkUtils.encodeNetCommand(command);
  final JSONObject sendObject=new JSONObject();
  sendObject.put(""String_Node_Str"",networkManager.getThisServer().getName());
  sendObject.put(""String_Node_Str"",jsonObject);
  sendObject.put(""String_Node_Str"",name);
  Bukkit.getScheduler().runTaskAsynchronously(Core.getInstance(),new Runnable(){
    @Override public void run(){
      Jedis resource=networkManager.getJedisPool().getResource();
      resource.publish(BungeeCordNetworkManager.NET_COMMAND_CHANNEL,sendObject.toJSONString());
      networkManager.getJedisPool().returnResource(resource);
    }
  }
);
}","@Override @SneakyThrows @Synchronized public void sendNetCommand(NetCommand command){
  JSONObject jsonObject=NetworkUtils.encodeNetCommand(command);
  final JSONObject sendObject=new JSONObject();
  sendObject.put(""String_Node_Str"",networkManager.getThisServer().getName());
  sendObject.put(""String_Node_Str"",jsonObject);
  sendObject.put(""String_Node_Str"",name);
  Bukkit.getScheduler().runTaskAsynchronously(Core.getInstance(),new Runnable(){
    @Override public void run(){
      Jedis resource=networkManager.getJedisPool().getResource();
      resource.publish(BungeeCordNetworkManager.NET_COMMAND_CHANNEL,sendObject.toJSONString());
      networkManager.getJedisPool().returnResource(resource);
    }
  }
);
}",0.9901547116736992
86295,"@Override public Integer getOnlineCount(){
  return uuids.size();
}","@Override @Synchronized public Integer getOnlineCount(){
  return uuids.size();
}",0.9054054054054054
86296,"@Override public void sendPlayerToServer(final CPlayer player){
  Bukkit.getScheduler().runTaskAsynchronously(Core.getInstance(),new Runnable(){
    @Override public void run(){
      Jedis resource=networkManager.getJedisPool().getResource();
      resource.publish(BungeeCordNetworkManager.TELEPORT,player.getUniqueIdentifier() + ""String_Node_Str"" + name);
      resource.close();
    }
  }
);
}","@Override @Synchronized public void sendPlayerToServer(final CPlayer player){
  Bukkit.getScheduler().runTaskAsynchronously(Core.getInstance(),new Runnable(){
    @Override public void run(){
      Jedis resource=networkManager.getJedisPool().getResource();
      resource.publish(BungeeCordNetworkManager.TELEPORT,player.getUniqueIdentifier() + ""String_Node_Str"" + name);
      resource.close();
    }
  }
);
}",0.9826732673267328
86297,"@Override public List<UUID> getPlayers(){
  return ImmutableList.copyOf(uuids);
}","@Override @Synchronized public List<UUID> getPlayers(){
  return ImmutableList.copyOf(uuids);
}",0.9204545454545454
86298,"public String get(){
  if (formatString == null)   return ""String_Node_Str"";
  String s=ChatColor.translateAlternateColorCodes('&',formatString);
  for (  Map.Entry<String,String> stringStringEntry : modifiers.entrySet()) {
    String value=stringStringEntry.getValue();
    if (coloredInputs)     value=ChatColor.translateAlternateColorCodes('&',value);
    s=s.replaceAll(String.format(""String_Node_Str"",stringStringEntry.getKey()),value).replaceAll(""String_Node_Str"" + stringStringEntry.getKey() + ""String_Node_Str"",stringStringEntry.getValue());
  }
  if (prefix && loadedPrefix != null)   return loadedPrefix + s;
  return s;
}","public String get(){
  if (formatString == null)   return ""String_Node_Str"";
  String s=ChatColor.translateAlternateColorCodes('&',formatString);
  for (  Map.Entry<String,String> stringStringEntry : modifiers.entrySet()) {
    String value=stringStringEntry.getValue();
    if (coloredInputs)     value=ChatColor.translateAlternateColorCodes('&',value);
    s=s.replaceAll(String.format(""String_Node_Str"",stringStringEntry.getKey()),value);
    s=s.replaceAll(""String_Node_Str"" + stringStringEntry.getKey() + ""String_Node_Str"",value);
  }
  if (prefix && loadedPrefix != null)   return loadedPrefix + s;
  return s;
}",0.9664
86299,"@Override public boolean kickViaNetworkManager(String message,CPlayer player){
  Jedis resource=jedisPool.getResource();
  resource.publish(KICK,player.getUniqueIdentifier().toString() + ""String_Node_Str"" + message);
  jedisPool.returnResource(resource);
  return true;
}","@Override public boolean kickViaNetworkManager(String message,CPlayer player){
  Jedis resource=jedisPool.getResource();
  resource.publish(KICK,player.getUniqueIdentifier().toString() + message);
  jedisPool.returnResource(resource);
  return true;
}",0.9616858237547892
86300,"@Override public void onMessage(String chan,String message){
  String[] split=message.split(""String_Node_Str"");
  if (split.length != 2)   return;
  ProxiedPlayer player=ProxyServer.getInstance().getPlayer(UUID.fromString(split[0]));
  if (player == null)   return;
  player.disconnect(split[1]);
}","@Override public void onMessage(String chan,String message){
  String[] split=new String[]{message.substring(0,36),message.substring(36)};
  if (split.length != 2)   return;
  ProxiedPlayer player=ProxyServer.getInstance().getPlayer(UUID.fromString(split[0]));
  if (player == null)   return;
  player.disconnect(split[1]);
}",0.8828250401284109
86301,"public String get(){
  if (formatString == null)   return ""String_Node_Str"";
  String s=ChatColor.translateAlternateColorCodes('&',formatString);
  for (  Map.Entry<String,String> stringStringEntry : modifiers.entrySet()) {
    String value=stringStringEntry.getValue();
    if (coloredInputs)     value=ChatColor.translateAlternateColorCodes('&',value);
    s=s.replaceAll(""String_Node_Str"" + stringStringEntry.getKey() + ""String_Node_Str"",value);
    s=s.replaceAll(stringStringEntry.getKey(),value);
  }
  if (prefix && loadedPrefix != null)   return loadedPrefix + s;
  return s;
}","public String get(){
  if (formatString == null)   return ""String_Node_Str"";
  String s=ChatColor.translateAlternateColorCodes('&',formatString);
  for (  Map.Entry<String,String> stringStringEntry : modifiers.entrySet()) {
    String value=stringStringEntry.getValue();
    if (coloredInputs)     value=ChatColor.translateAlternateColorCodes('&',value);
    s=s.replaceAll(""String_Node_Str"" + stringStringEntry.getKey() + ""String_Node_Str"",value);
    if (stringStringEntry.getKey().matches(""String_Node_Str""))     s=s.replaceAll(stringStringEntry.getKey(),value);
  }
  if (prefix && loadedPrefix != null)   return loadedPrefix + s;
  return s;
}",0.948905109489051
86302,"public String get(){
  if (formatString == null)   return ""String_Node_Str"";
  String s=ChatColor.translateAlternateColorCodes('&',formatString);
  for (  Map.Entry<String,String> stringStringEntry : modifiers.entrySet()) {
    String value=stringStringEntry.getValue();
    if (coloredInputs)     value=ChatColor.translateAlternateColorCodes('&',value);
    s=s.replaceAll(String.format(""String_Node_Str"",stringStringEntry.getKey()),value).replaceAll(String.format(""String_Node_Str"",stringStringEntry.getKey()),stringStringEntry.getValue());
  }
  if (prefix && loadedPrefix != null)   return loadedPrefix + s;
  return s;
}","public String get(){
  if (formatString == null)   return ""String_Node_Str"";
  String s=ChatColor.translateAlternateColorCodes('&',formatString);
  for (  Map.Entry<String,String> stringStringEntry : modifiers.entrySet()) {
    String value=stringStringEntry.getValue();
    if (coloredInputs)     value=ChatColor.translateAlternateColorCodes('&',value);
    s=s.replaceAll(String.format(""String_Node_Str"",stringStringEntry.getKey()),value).replaceAll(""String_Node_Str"" + stringStringEntry.getKey() + ""String_Node_Str"",stringStringEntry.getValue());
  }
  if (prefix && loadedPrefix != null)   return loadedPrefix + s;
  return s;
}",0.9689737470167064
86303,"/** 
 * @param slot
 */
public void clearSlot(Integer slot){
  inventoryButtons.remove(slot);
  markForUpdate(slot);
}","/** 
 * @param slot
 */
public void clearSlot(Integer slot){
  if (!inventoryButtons.containsKey(slot))   return;
  inventoryButtons.remove(slot);
  markForUpdate(slot);
}",0.8166089965397924
86304,"public String get(){
  if (formatString == null)   return ""String_Node_Str"";
  String s=ChatColor.translateAlternateColorCodes('&',formatString);
  for (  Map.Entry<String,String> stringStringEntry : modifiers.entrySet()) {
    String value=stringStringEntry.getValue();
    if (coloredInputs)     value=ChatColor.translateAlternateColorCodes('&',value);
    s=s.replaceAll(""String_Node_Str"" + stringStringEntry.getKey() + ""String_Node_Str"",value);
    s=s.replaceAll(""String_Node_Str"" + stringStringEntry.getKey() + ""String_Node_Str"",value);
  }
  if (prefix && loadedPrefix != null)   return loadedPrefix + s;
  return s;
}","public String get(){
  if (formatString == null)   return ""String_Node_Str"";
  String s=ChatColor.translateAlternateColorCodes('&',formatString);
  for (  Map.Entry<String,String> stringStringEntry : modifiers.entrySet()) {
    String value=stringStringEntry.getValue();
    if (coloredInputs)     value=ChatColor.translateAlternateColorCodes('&',value);
    s=s.replaceAll(""String_Node_Str"" + stringStringEntry.getKey() + ""String_Node_Str"",value);
    s=s.replaceAll(stringStringEntry.getKey(),value);
  }
  if (prefix && loadedPrefix != null)   return loadedPrefix + s;
  return s;
}",0.9669421487603306
86305,"@EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void onPlayerChangeWorld(PlayerChangedWorldEvent event){
  CPlayer player=Core.getOnlinePlayer(event.getPlayer());
  MobNPCWither wither=manager.witherBar.get(player);
  if (wither != null) {
    wither.despawn();
  }
}","@EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void onPlayerChangeWorld(PlayerChangedWorldEvent event){
  CPlayer player=Core.getOnlinePlayer(event.getPlayer());
  MobNPCWither wither=manager.witherBar.get(player);
  if (wither != null) {
    wither.despawn();
    manager.witherBar.remove(player);
  }
}",0.939102564102564
86306,"protected final Player[] getTargets(){
  CPlayer[] cPlayers=(this.viewers.size() == 0 ? Core.getPlayerManager().getOnlinePlayers() : this.viewers).toArray(new CPlayer[this.viewers.size()]);
  Player[] players=new Player[cPlayers.length];
  for (int x=0; x < cPlayers.length; x++) {
    Player bukkitPlayer=cPlayers[x].getBukkitPlayer();
    if (this.world != null && !bukkitPlayer.getWorld().equals(world))     continue;
    players[x]=bukkitPlayer;
  }
  return players;
}","protected final Player[] getTargets(){
  CPlayer[] cPlayers=(this.viewers.size() == 0 ? Core.getPlayerManager().getOnlinePlayers() : this.viewers).toArray(new CPlayer[this.viewers.size()]);
  Player[] players=new Player[cPlayers.length];
  int x=0;
  for (int i=0; i < cPlayers.length; i++) {
    Player bukkitPlayer=cPlayers[x].getBukkitPlayer();
    UUID uid=bukkitPlayer.getWorld().getUID();
    UUID uid1=this.world != null ? world.getUID() : null;
    if (this.world != null && !uid.equals(uid1))     continue;
    players[x]=bukkitPlayer;
    x++;
  }
  return x == 0 ? new Player[]{} : Arrays.copyOfRange(players,0,x);
}",0.4709090909090909
86307,"protected final void setItemStackUsing(Material material,Integer quantity,String title,String lore){
  stack=new ItemStack(material,quantity);
  ItemMeta meta=stack.getItemMeta();
  meta.setDisplayName(title);
  meta.setLore(wrapLoreText(lore));
}","protected final void setItemStackUsing(Material material,Integer quantity,String title,String lore){
  stack=new ItemStack(material,quantity);
  ItemMeta meta=stack.getItemMeta();
  meta.setDisplayName(title);
  meta.setLore(wrapLoreText(lore));
  stack.setItemMeta(meta);
}",0.9481765834932822
86308,"protected void updateFromDBObject(@NonNull DBObject player){
  this.lastKnownUsername=getValueFrom(player,MongoKey.LAST_USERNAME_KEY,String.class);
  this.uniqueIdentifier=UUID.fromString(getValueFrom(player,MongoKey.UUID_KEY,String.class));
  this.displayName=getValueFrom(player,MongoKey.DISPLAY_NAME,String.class);
  if (this.displayName != null)   this.displayName=ColorSupplements.translateAlternateColorCodes('&',this.displayName);
  this.firstTimeOnline=getValueFrom(player,MongoKey.FIRST_JOIN_KEY,Date.class);
  this.lastTimeOnline=getValueFrom(player,MongoKey.LAST_SEEN_KEY,Date.class);
  Long time_online=getValueFrom(player,MongoKey.TIME_ONLINE_KEY,Long.class);
  this.millisecondsOnline=time_online == null ? 0 : time_online;
  List<String> ips=getListFor(getValueFrom(player,MongoKey.IPS_KEY,BasicDBList.class),String.class);
  this.knownIPAddresses=ips == null ? new ArrayList<String>() : ips;
  List<String> usernames=getListFor(getValueFrom(player,MongoKey.USERNAMES_KEY,BasicDBList.class),String.class);
  this.knownUsernames=usernames == null ? new ArrayList<String>() : usernames;
  @SuppressWarnings(""String_Node_Str"") Map<String,Object> settings1=getValueFrom(player,MongoKey.SETTINGS_KEY,HashMap.class);
  this.settings=settings1 == null ? new HashMap<String,Object>() : settings1;
  this.assets=new ArrayList<>();
  List<DBObject> assets1=getListFor(getValueFrom(player,MongoKey.ASSETS_KEY,BasicDBList.class),DBObject.class);
  for (  DBObject assetObject : assets1) {
    String fqcn=getValueFrom(assetObject,MongoKey.FULLY_QUALIFIED_CLASS_NAME_KEY,String.class);
    Class<?> assetClass;
    try {
      assetClass=Class.forName(fqcn);
      if (!Asset.class.isAssignableFrom(assetClass))       throw new ClassNotFoundException(""String_Node_Str"");
      Map<String,Object> meta=getMapFor(getValueFrom(assetObject,MongoKey.META_KEY,DBObject.class));
      Asset asset=(Asset)assetClass.getConstructor(COfflinePlayer.class,Map.class).newInstance(this,meta);
      this.assets.add(asset);
    }
 catch (    InvocationTargetException|NoSuchMethodException|InstantiationException|IllegalAccessException|ClassNotFoundException e) {
      log.severe(""String_Node_Str"" + this.lastKnownUsername + ""String_Node_Str""+ fqcn+ ""String_Node_Str""+ e.getMessage());
    }
  }
  CPermissible permissibleDataFor=getPermissibileDataFor(player);
  this.chatColor=permissibleDataFor.getChatColor();
  this.chatPrefix=permissibleDataFor.getChatPrefix();
  this.chatSuffix=permissibleDataFor.getChatSuffix();
  this.tablistColor=permissibleDataFor.getTablistColor();
  this.declaredPermissions=permissibleDataFor.getDeclaredPermissions();
  if (this.declaredPermissions == null)   this.declaredPermissions=new HashMap<>();
  groupIds=getListFor(getValueFrom(player,MongoKey.USER_GROUPS_KEY,BasicDBList.class),ObjectId.class);
}","protected void updateFromDBObject(@NonNull DBObject player){
  this.lastKnownUsername=getValueFrom(player,MongoKey.LAST_USERNAME_KEY,String.class);
  this.uniqueIdentifier=UUID.fromString(getValueFrom(player,MongoKey.UUID_KEY,String.class));
  this.displayName=getValueFrom(player,MongoKey.DISPLAY_NAME,String.class);
  if (this.displayName != null)   this.displayName=ColorSupplements.translateAlternateColorCodes('&',this.displayName);
  this.firstTimeOnline=getValueFrom(player,MongoKey.FIRST_JOIN_KEY,Date.class);
  this.lastTimeOnline=getValueFrom(player,MongoKey.LAST_SEEN_KEY,Date.class);
  Long time_online=getValueFrom(player,MongoKey.TIME_ONLINE_KEY,Long.class);
  this.millisecondsOnline=time_online == null ? 0 : time_online;
  List<String> ips=getListFor(getValueFrom(player,MongoKey.IPS_KEY,BasicDBList.class),String.class);
  this.knownIPAddresses=ips == null ? new ArrayList<String>() : ips;
  List<String> usernames=getListFor(getValueFrom(player,MongoKey.USERNAMES_KEY,BasicDBList.class),String.class);
  this.knownUsernames=usernames == null ? new ArrayList<String>() : usernames;
  @SuppressWarnings(""String_Node_Str"") Map<String,Object> settings1=getMapFor(getValueFrom(player,MongoKey.SETTINGS_KEY,BasicDBObject.class));
  this.settings=settings1 == null ? new HashMap<String,Object>() : settings1;
  this.assets=new ArrayList<>();
  List<DBObject> assets1=getListFor(getValueFrom(player,MongoKey.ASSETS_KEY,BasicDBList.class),DBObject.class);
  for (  DBObject assetObject : assets1) {
    String fqcn=getValueFrom(assetObject,MongoKey.FULLY_QUALIFIED_CLASS_NAME_KEY,String.class);
    Class<?> assetClass;
    try {
      assetClass=Class.forName(fqcn);
      if (!Asset.class.isAssignableFrom(assetClass))       throw new ClassNotFoundException(""String_Node_Str"");
      Map<String,Object> meta=getMapFor(getValueFrom(assetObject,MongoKey.META_KEY,DBObject.class));
      Asset asset=(Asset)assetClass.getConstructor(COfflinePlayer.class,Map.class).newInstance(this,meta);
      this.assets.add(asset);
    }
 catch (    InvocationTargetException|NoSuchMethodException|InstantiationException|IllegalAccessException|ClassNotFoundException e) {
      log.severe(""String_Node_Str"" + this.lastKnownUsername + ""String_Node_Str""+ fqcn+ ""String_Node_Str""+ e.getMessage());
    }
  }
  CPermissible permissibleDataFor=getPermissibileDataFor(player);
  this.chatColor=permissibleDataFor.getChatColor();
  this.chatPrefix=permissibleDataFor.getChatPrefix();
  this.chatSuffix=permissibleDataFor.getChatSuffix();
  this.tablistColor=permissibleDataFor.getTablistColor();
  this.declaredPermissions=permissibleDataFor.getDeclaredPermissions();
  if (this.declaredPermissions == null)   this.declaredPermissions=new HashMap<>();
  groupIds=getListFor(getValueFrom(player,MongoKey.USER_GROUPS_KEY,BasicDBList.class),ObjectId.class);
}",0.9924202362065926
86309,"public void update(){
  if (!spawned)   spawn();
  updateDataWatcher();
  WrapperPlayServerEntityMetadata packet=new WrapperPlayServerEntityMetadata();
  List<WrappedWatchableObject> watchableObjects=dataWatcher.getWatchableObjects();
  List<WrappedWatchableObject> toBeSent=new ArrayList<>();
  for (  WrappedWatchableObject watchableObject : watchableObjects) {
    if (!lastDataWatcher.getObject(watchableObject.getIndex()).equals(watchableObject.getValue()))     toBeSent.add(watchableObject);
  }
  packet.setEntityMetadata(toBeSent);
  packet.setEntityId(id);
  for (  Player player : getTargets()) {
    packet.sendPacket(player);
  }
  lastDataWatcher=dataWatcher.deepClone();
  onUpdate();
}","public void update(){
  if (!spawned)   spawn();
  updateDataWatcher();
  WrapperPlayServerEntityMetadata packet=new WrapperPlayServerEntityMetadata();
  List<WrappedWatchableObject> watchableObjects=dataWatcher.getWatchableObjects();
  List<WrappedWatchableObject> toBeSent=new ArrayList<>();
  if (lastDataWatcher == null)   toBeSent.addAll(dataWatcher.getWatchableObjects());
 else {
    for (    WrappedWatchableObject watchableObject : watchableObjects) {
      Object object=lastDataWatcher.getObject(watchableObject.getIndex());
      if (object == null || !object.equals(watchableObject.getValue()))       toBeSent.add(watchableObject);
    }
  }
  packet.setEntityMetadata(toBeSent);
  packet.setEntityId(id);
  for (  Player player : getTargets()) {
    packet.sendPacket(player);
  }
  lastDataWatcher=dataWatcher.deepClone();
  onUpdate();
}",0.8280746941403735
86310,"public AbstractMobNPC(@NonNull Point location,World world,Set<CPlayer> observers,@NonNull String title){
  this.location=location;
  this.world=world;
  this.viewers=new HashSet<>();
  if (observers != null)   this.viewers.addAll(observers);
  this.dataWatcher=new WrappedDataWatcher();
  this.observers=new HashSet<>();
  this.spawned=false;
  this.customName=title;
  this.id=CustomEntityIDManager.getNextId();
  updateDataWatcher();
}","public AbstractMobNPC(@NonNull Point location,World world,Set<CPlayer> observers,@NonNull String title){
  this.location=location;
  this.world=world;
  this.viewers=new HashSet<>();
  if (observers != null)   this.viewers.addAll(observers);
  this.dataWatcher=new WrappedDataWatcher();
  this.observers=new HashSet<>();
  this.spawned=false;
  this.customName=title;
  this.id=CustomEntityIDManager.getNextId();
}",0.972972972972973
86311,"@Override protected void onDataWatcherUpdate(){
  super.onDataWatcherUpdate();
  int bools=0;
  if (isTame())   bools|=0x02;
  if (saddled)   bools|=0x04;
  if (chest)   bools|=0x08;
  if (bred)   bools|=0x10;
  if (eating)   bools|=0x20;
  if (rearing)   bools|=0x40;
  if (mouthOpen)   bools|=0x80;
  dataWatcher.setObject(16,bools);
  dataWatcher.setObject(19,(byte)variant.ordinal());
  dataWatcher.setObject(20,color.ordinal() & 0xFF | style.ordinal() << 8);
  dataWatcher.setObject(21,getOwnerName());
  dataWatcher.setObject(22,armorType.ordinal());
}","@Override protected void onDataWatcherUpdate(){
  super.onDataWatcherUpdate();
  int bools=0;
  if (isTame())   bools|=0x02;
  if (saddled)   bools|=0x04;
  if (chest)   bools|=0x08;
  if (bred)   bools|=0x10;
  if (eating)   bools|=0x20;
  if (rearing)   bools|=0x40;
  if (mouthOpen)   bools|=0x80;
  dataWatcher.setObject(16,bools);
  dataWatcher.setObject(19,(byte)variant.ordinal());
  dataWatcher.setObject(20,color.ordinal() & 0xFF | style.ordinal() << 8);
  dataWatcher.removeObject(17);
  dataWatcher.setObject(21,getOwnerName());
  dataWatcher.setObject(22,armorType.ordinal());
}",0.9721254355400696
86312,"@EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void onPlayerMove(PlayerMoveEvent event){
  CPlayer onlinePlayer=Core.getOnlinePlayer(event.getPlayer());
  EnderBar enderBarFor=manager.getEnderBarFor(onlinePlayer);
  if (enderBarFor != null && enderBarFor.isSpawned() && event.getTo().distanceSquared(enderBarFor.getCurrentLocation()) > 25)   enderBarFor.updateLocation();
}","@EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void onPlayerMove(PlayerMoveEvent event){
  CPlayer onlinePlayer=Core.getOnlinePlayer(event.getPlayer());
  MobNPCEnderDragon enderBarFor=manager.enderBars.get(onlinePlayer);
  Point current=Point.of(event.getTo());
  current.setY(-300D);
  if (enderBarFor != null && enderBarFor.isSpawned() && current.distanceSquared(enderBarFor.getLocation()) > 9) {
    enderBarFor.move(Point.of(event.getTo().getX(),-300d,event.getTo().getZ(),0F,0F));
  }
}",0.7377584330794341
86313,"@EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void onPlayerChangeWorld(PlayerChangedWorldEvent event){
  CPlayer player=Core.getOnlinePlayer(event.getPlayer());
  EnderBar enderBarFor=manager.getEnderBarFor(player);
  if (enderBarFor != null)   enderBarFor.newWorld();
}","@EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void onPlayerChangeWorld(PlayerChangedWorldEvent event){
  CPlayer player=Core.getOnlinePlayer(event.getPlayer());
  MobNPCEnderDragon enderBarFor=manager.enderBars.get(player);
  if (enderBarFor != null) {
    enderBarFor.despawn();
  }
}",0.7397708674304418
86314,"/** 
 * Creates an Ender Dragon for the player if it does not exist, then updates the text for the dragon.
 * @param player The {@link net.cogzmc.core.player.CPlayer} to set ender bar text for.
 * @param text The text to set the bar to.
 */
public void setTextFor(CPlayer player,String text){
  createIfDoesNotExist(player);
  enderBars.get(player).setText(text);
}","/** 
 * Creates an Ender Dragon for the player if it does not exist, then updates the text for the dragon.
 * @param player The {@link net.cogzmc.core.player.CPlayer} to set ender bar text for.
 * @param text The text to set the bar to.
 */
public void setTextFor(CPlayer player,String text){
  createIfDoesNotExist(player);
  MobNPCEnderDragon mobNPCEnderDragon=enderBars.get(player);
  mobNPCEnderDragon.setCustomName(text);
  mobNPCEnderDragon.update();
}",0.8529769137302552
86315,"private boolean createIfDoesNotExist(CPlayer player){
  if (enderBars.containsKey(player))   return false;
  EnderBar enderBar=new EnderBar(player,getNextId());
  enderBar.spawn();
  enderBars.put(player,enderBar);
  return true;
}","private boolean createIfDoesNotExist(CPlayer player){
  if (enderBars.containsKey(player))   return false;
  Player bukkitPlayer=player.getBukkitPlayer();
  HashSet<CPlayer> cPlayers=new HashSet<>();
  cPlayers.add(player);
  Point of=Point.of(bukkitPlayer.getLocation());
  of.setY(-300D);
  MobNPCEnderDragon enderDragon=new MobNPCEnderDragon(of,bukkitPlayer.getWorld(),cPlayers,""String_Node_Str"");
  enderBars.put(player,enderDragon);
  enderDragon.spawn();
  return true;
}",0.3870056497175141
86316,"/** 
 * Creates an Ender Dragon for the player if it does not exist, then updates the health percentage for that dragon.
 * @param player The {@link net.cogzmc.core.player.CPlayer} to set ender bar health for.
 * @param health The health to set the ender dragon's bar to.
 */
public void setHealthPercentageFor(CPlayer player,Float health){
  createIfDoesNotExist(player);
  enderBars.get(player).setHealth(health);
}","/** 
 * Creates an Ender Dragon for the player if it does not exist, then updates the health percentage for that dragon.
 * @param player The {@link net.cogzmc.core.player.CPlayer} to set ender bar health for.
 * @param health The health to set the ender dragon's bar to.
 */
public void setHealthPercentageFor(CPlayer player,Float health){
  createIfDoesNotExist(player);
  MobNPCEnderDragon mobNPCEnderDragon=enderBars.get(player);
  mobNPCEnderDragon.setHealth(health * 200F);
  mobNPCEnderDragon.update();
}",0.8599137931034483
86317,"/** 
 * Hides the bar for the specified player if it is currently visible.
 * @param player The {@link net.cogzmc.core.player.CPlayer} to hide the bar for.
 */
public void hideBarFor(CPlayer player){
  if (!enderBars.containsKey(player))   return;
  EnderBar enderBar=enderBars.get(player);
  if (enderBar.isSpawned())   enderBar.remove();
}","/** 
 * Hides the bar for the specified player if it is currently visible.
 * @param player The {@link net.cogzmc.core.player.CPlayer} to hide the bar for.
 */
public void hideBarFor(CPlayer player){
  if (!enderBars.containsKey(player))   return;
  MobNPCEnderDragon enderBar=enderBars.get(player);
  if (enderBar.isSpawned())   enderBar.despawn();
}",0.9595375722543352
86318,"/** 
 * Creates an ender dragon if the player does not already have one, and then shows it if it is hidden.
 * @param player The {@link net.cogzmc.core.player.CPlayer} to show the ender bar for.
 */
public void showBarFor(CPlayer player){
  EnderBar enderBar=enderBars.get(player);
  if (!createIfDoesNotExist(player) && !enderBar.isSpawned())   enderBar.spawn();
}","/** 
 * Creates an ender dragon if the player does not already have one, and then shows it if it is hidden.
 * @param player The {@link net.cogzmc.core.player.CPlayer} to show the ender bar for.
 */
public void showBarFor(CPlayer player){
  MobNPCEnderDragon enderBar=enderBars.get(player);
  if (!createIfDoesNotExist(player) && !enderBar.isSpawned())   enderBar.spawn();
}",0.979702300405954
86319,"public void update(){
  if (!spawned)   spawn();
  updateDataWatcher();
  WrapperPlayServerEntityMetadata packet=new WrapperPlayServerEntityMetadata();
  List<WrappedWatchableObject> watchableObjects=new ArrayList<>();
  if (lastDataWatcher == null)   watchableObjects.addAll(dataWatcher.getWatchableObjects());
 else {
    for (    WrappedWatchableObject watchableObject : dataWatcher.getWatchableObjects()) {
      Object object=lastDataWatcher.getObject(watchableObject.getIndex());
      if (object == null || !object.equals(watchableObject.getValue()))       watchableObjects.add(watchableObject);
    }
  }
  packet.setEntityMetadata(watchableObjects);
  packet.setEntityId(id);
  for (  Player player : getTargets()) {
    packet.sendPacket(player);
  }
  lastDataWatcher=dataWatcher.deepClone();
  onUpdate();
}","public void update(){
  if (!spawned)   spawn();
  updateDataWatcher();
  WrapperPlayServerEntityMetadata packet=new WrapperPlayServerEntityMetadata();
  List<WrappedWatchableObject> watchableObjects=new ArrayList<>();
  if (lastDataWatcher == null)   watchableObjects.addAll(dataWatcher.getWatchableObjects());
 else {
    for (    WrappedWatchableObject watchableObject : dataWatcher.getWatchableObjects()) {
      Object object=lastDataWatcher.getObject(watchableObject.getIndex());
      if (object == null || !object.equals(watchableObject.getValue()))       watchableObjects.add(watchableObject);
    }
  }
  if (Core.DEBUG) {
    for (    WrappedWatchableObject watchableObject : watchableObjects) {
      log.info(""String_Node_Str"" + watchableObject.getIndex() + ""String_Node_Str""+ id+ ""String_Node_Str""+ getClass().getSimpleName()+ ""String_Node_Str""+ watchableObject.getValue()+ ""String_Node_Str""+ watchableObject.getType().getName()+ ""String_Node_Str"");
    }
  }
  packet.setEntityMetadata(watchableObjects);
  packet.setEntityId(id);
  for (  Player player : getTargets()) {
    packet.sendPacket(player);
  }
  lastDataWatcher=dataWatcher.deepClone();
  onUpdate();
}",0.8194097048524263
86320,"public void despawn(){
  if (!spawned)   throw new IllegalStateException(""String_Node_Str"");
  WrapperPlayServerEntityDestroy packet=getDespawnPacket();
  for (  Player player : getTargets()) {
    packet.sendPacket(player);
  }
  ProtocolLibrary.getProtocolManager().removePacketListener(listener);
  listener=null;
  spawned=false;
}","public void despawn(){
  if (!spawned)   throw new IllegalStateException(""String_Node_Str"");
  WrapperPlayServerEntityDestroy packet=getDespawnPacket();
  for (  Player player : getTargets()) {
    packet.sendPacket(player);
  }
  ProtocolLibrary.getProtocolManager().removePacketListener(listener);
  listener=null;
  spawned=false;
  log.info(""String_Node_Str"" + id + ""String_Node_Str""+ getClass().getSimpleName());
}",0.8885941644562334
86321,"protected void updateDataWatcher(){
  dataWatcher.setObject(6,getHealth());
  if (showingNametag)   dataWatcher.setObject(11,(byte)1);
 else   if (dataWatcher.getObject(11) != null)   dataWatcher.removeObject(11);
  if (customName != null)   dataWatcher.setObject(10,customName.substring(0,Math.min(customName.length(),64)));
 else   if (dataWatcher.getObject(10) != null)   dataWatcher.removeObject(10);
  onDataWatcherUpdate();
}","protected void updateDataWatcher(){
  if (Core.DEBUG)   log.info(""String_Node_Str"" + getClass().getSimpleName() + ""String_Node_Str""+ id+ ""String_Node_Str"");
  dataWatcher.setObject(6,getHealth());
  if (showingNametag)   dataWatcher.setObject(11,(byte)1);
 else   if (dataWatcher.getObject(11) != null)   dataWatcher.removeObject(11);
  if (customName != null)   dataWatcher.setObject(10,customName.substring(0,Math.min(customName.length(),64)));
 else   if (dataWatcher.getObject(10) != null)   dataWatcher.removeObject(10);
  byte zeroByte=0;
  if (onFire)   zeroByte|=0x01;
  if (crouched)   zeroByte|=0x02;
  if (sprinting)   zeroByte|=0x08;
  if (blocking)   zeroByte|=0x10;
  if (invisible)   zeroByte|=0x20;
  dataWatcher.setObject(0,zeroByte);
  onDataWatcherUpdate();
}",0.7129859387923904
86322,"protected Player[] getTargets(){
  CPlayer[] cPlayers=(this.viewers.size() == 0 ? Core.getPlayerManager().getOnlinePlayers() : this.viewers).toArray(new CPlayer[this.viewers.size()]);
  Player[] players=new Player[cPlayers.length];
  for (int x=0; x < cPlayers.length; x++) {
    Player bukkitPlayer=cPlayers[x].getBukkitPlayer();
    if (!bukkitPlayer.getWorld().equals(world))     continue;
    players[x]=bukkitPlayer;
  }
  return players;
}","protected Player[] getTargets(){
  CPlayer[] cPlayers=(this.viewers.size() == 0 ? Core.getPlayerManager().getOnlinePlayers() : this.viewers).toArray(new CPlayer[this.viewers.size()]);
  Player[] players=new Player[cPlayers.length];
  for (int x=0; x < cPlayers.length; x++) {
    Player bukkitPlayer=cPlayers[x].getBukkitPlayer();
    if (this.world != null && !bukkitPlayer.getWorld().equals(world))     continue;
    players[x]=bukkitPlayer;
  }
  return players;
}",0.975877192982456
86323,"public void move(Point point){
  if (!spawned)   throw new IllegalStateException(""String_Node_Str"");
  final Point location1=this.location;
  this.location=point;
  AbstractPacket packet;
  if (location1.distanceSquared(point) > 16) {
    WrapperPlayServerEntityMoveLook packet1=new WrapperPlayServerEntityMoveLook();
    packet1.setEntityID(id);
    packet1.setDx(location1.getX() - point.getX());
    packet1.setDy(location1.getY() - point.getY());
    packet1.setDz(location1.getZ() - point.getZ());
    packet1.setPitch(point.getPitch());
    packet1.setYaw(point.getYaw());
    packet=packet1;
  }
 else {
    WrapperPlayServerEntityTeleport packet1=new WrapperPlayServerEntityTeleport();
    packet1.setEntityID(id);
    packet1.setX(point.getX());
    packet1.setY(point.getY());
    packet1.setZ(point.getZ());
    packet1.setPitch(point.getPitch());
    packet1.setYaw(point.getYaw());
    packet=packet1;
  }
  for (  Player player : getTargets()) {
    packet.sendPacket(player);
  }
}","public void move(Point point){
  if (!spawned)   throw new IllegalStateException(""String_Node_Str"");
  final Point location1=this.location;
  this.location=point;
  AbstractPacket packet;
  if (Core.DEBUG)   log.info(""String_Node_Str"" + location1.toString() + ""String_Node_Str""+ point.toString()+ ""String_Node_Str""+ location1.distance(point));
  if (location1.distanceSquared(point) <= 16) {
    if (Core.DEBUG)     log.info(""String_Node_Str"" + id + ""String_Node_Str""+ getClass().getSimpleName());
    WrapperPlayServerEntityMoveLook packet1=new WrapperPlayServerEntityMoveLook();
    packet1.setEntityID(id);
    packet1.setDx(location1.getX() - point.getX());
    packet1.setDy(location1.getY() - point.getY());
    packet1.setDz(location1.getZ() - point.getZ());
    packet1.setPitch(point.getPitch());
    packet1.setYaw(point.getYaw());
    packet=packet1;
  }
 else {
    if (Core.DEBUG)     log.info(""String_Node_Str"" + id + ""String_Node_Str""+ getClass().getSimpleName());
    WrapperPlayServerEntityTeleport packet1=new WrapperPlayServerEntityTeleport();
    packet1.setEntityID(id);
    packet1.setX(point.getX());
    packet1.setY(point.getY());
    packet1.setZ(point.getZ());
    packet1.setPitch(point.getPitch());
    packet1.setYaw(point.getYaw());
    packet=packet1;
  }
  for (  Player player : getTargets()) {
    packet.sendPacket(player);
  }
}",0.84286319356205
86324,"public void spawn(){
  if (spawned)   throw new IllegalStateException(""String_Node_Str"");
  ProtocolLibrary.getProtocolManager().addPacketListener(createNewInteractWatcher());
  WrapperPlayServerSpawnEntityLiving packet=getSpawnPacket();
  for (  Player player : getTargets()) {
    packet.sendPacket(player);
  }
  spawned=true;
  log.info(""String_Node_Str"" + packet.getType() + ""String_Node_Str""+ id);
}","public void spawn(){
  if (spawned)   throw new IllegalStateException(""String_Node_Str"");
  ProtocolLibrary.getProtocolManager().addPacketListener(createNewInteractWatcher());
  WrapperPlayServerSpawnEntityLiving packet=getSpawnPacket();
  for (  Player player : getTargets()) {
    packet.sendPacket(player);
  }
  spawned=true;
  if (Core.DEBUG)   log.info(""String_Node_Str"" + getClass().getSimpleName() + ""String_Node_Str""+ id);
}",0.9212410501193318
86325,"protected List<String> handleTabComplete(CommandSender sender,Command command,String alias,String[] args){
  List<String> ss=new ArrayList<>();
  String arg=args.length > 0 ? args[args.length - 1] : ""String_Node_Str"";
  for (  Player player : Bukkit.getOnlinePlayers()) {
    String name1=player.getName();
    if (name1.startsWith(arg))     ss.add(name1);
  }
  return ss;
}","protected List<String> handleTabComplete(CommandSender sender,Command command,String alias,String[] args){
  List<String> ss=new ArrayList<>();
  String arg=args.length > 0 ? args[args.length - 1].toLowerCase() : ""String_Node_Str"";
  for (  Player player : Bukkit.getOnlinePlayers()) {
    String name1=player.getName();
    if (name1.toLowerCase().startsWith(arg))     ss.add(name1);
  }
  return ss;
}",0.9640102827763496
86326,"@Override public void reloadPermissions(){
  save();
  reloadGroups();
  Iterator<WeakReference<GroupReloadObserver>> iterator=groupReloadObservers.iterator();
  while (iterator.hasNext()) {
    GroupReloadObserver observer=iterator.next().get();
    if (observer == null) {
      iterator.remove();
      continue;
    }
    observer.onReloadPermissions(this);
  }
}","@Override public void reloadPermissions(){
  reloadGroups();
  Iterator<WeakReference<GroupReloadObserver>> iterator=groupReloadObservers.iterator();
  while (iterator.hasNext()) {
    GroupReloadObserver observer=iterator.next().get();
    if (observer == null) {
      iterator.remove();
      continue;
    }
    observer.onReloadPermissions(this);
  }
}",0.9861878453038674
86327,"@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onPlayerInteractBlock(PlayerInteractEvent event){
  if (shouldIgnoreLimitation(event))   return;
switch (event.getAction()) {
case LEFT_CLICK_BLOCK:
case RIGHT_CLICK_BLOCK:
    break;
default :
  return;
}
switch (event.getClickedBlock().getType()) {
case TRAP_DOOR:
case TRAPPED_CHEST:
case CHEST:
case IRON_DOOR:
case WOOD_DOOR:
case ANVIL:
case BED:
case BED_BLOCK:
case BEACON:
case BREWING_STAND:
case REDSTONE_COMPARATOR_OFF:
case REDSTONE_COMPARATOR_ON:
case LEVER:
case DIODE_BLOCK_OFF:
case DIODE_BLOCK_ON:
case STONE_BUTTON:
case WOOD_BUTTON:
case BURNING_FURNACE:
case FURNACE:
case WORKBENCH:
case CAULDRON:
case ENCHANTMENT_TABLE:
case NOTE_BLOCK:
case JUKEBOX:
case CAKE_BLOCK:
case ENDER_PORTAL_FRAME:
break;
default :
return;
}
event.setCancelled(true);
}","@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onPlayerInteractBlock(PlayerInteractEvent event){
  if (shouldIgnoreLimitation(event))   return;
switch (event.getAction()) {
case LEFT_CLICK_BLOCK:
case RIGHT_CLICK_BLOCK:
    break;
default :
  return;
}
switch (event.getClickedBlock().getType()) {
case TRAP_DOOR:
case TRAPPED_CHEST:
case CHEST:
case IRON_DOOR:
case WOOD_DOOR:
case ANVIL:
case BED:
case BED_BLOCK:
case BEACON:
case BREWING_STAND:
case REDSTONE_COMPARATOR_OFF:
case REDSTONE_COMPARATOR_ON:
case LEVER:
case DIODE_BLOCK_OFF:
case DIODE_BLOCK_ON:
case STONE_BUTTON:
case WOOD_BUTTON:
case BURNING_FURNACE:
case FURNACE:
case WORKBENCH:
case CAULDRON:
case ENCHANTMENT_TABLE:
case NOTE_BLOCK:
case JUKEBOX:
case CAKE_BLOCK:
case ENDER_PORTAL_FRAME:
case WOODEN_DOOR:
case ENDER_CHEST:
case DISPENSER:
case DROPPER:
break;
default :
return;
}
event.setCancelled(true);
}",0.9625
86328,"@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onPlayerMove(PlayerMoveEvent event){
  if (event.getTo().getY() > 0)   return;
  if (shouldIgnoreLimitation(event))   return;
  event.setCancelled(true);
  Player player=event.getPlayer();
  player.teleport(Hub.getInstance().getSpawnHandler().getSpawn());
  player.setFallDistance(0f);
  Core.getOnlinePlayer(player).playSoundForPlayer(Sound.CHICKEN_EGG_POP);
}","@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onPlayerMove(PlayerMoveEvent event){
  if (event.getTo().getY() > 1)   return;
  if (shouldIgnoreLimitation(event))   return;
  event.setCancelled(true);
  Player player=event.getPlayer();
  player.teleport(Hub.getInstance().getSpawnHandler().getSpawn());
  player.setFallDistance(0f);
  Core.getOnlinePlayer(player).playSoundForPlayer(Sound.CHICKEN_EGG_POP);
}",0.9977116704805492
86329,"@Override protected void handleCommand(CPlayer sender,String[] args) throws CommandException {
  Punishments module=Core.getModule(Punishments.class);
  String name=clazz.getSimpleName().toLowerCase();
  super.handleCommand(sender,args);
  if (args.length < 2)   throw new ArgumentRequirementException(""String_Node_Str"" + name + ""String_Node_Str"");
  String target=args[0];
  String reason=Joiner.on(""String_Node_Str"").join(Arrays.copyOfRange(args,1,args.length));
  COfflinePlayer targetPlayer=getTargetByArg(target);
  if (targetPlayer == null)   throw new ArgumentRequirementException(""String_Node_Str"");
  try {
    punishmentManager.punish(targetPlayer,reason,sender);
  }
 catch (  PunishmentException e) {
    sender.sendMessage(module.getFormat(""String_Node_Str"",new String[]{""String_Node_Str"",e.getMessage()}));
  }
  sender.sendMessage(module.getFormat(""String_Node_Str"",new String[]{""String_Node_Str"",name},new String[]{""String_Node_Str"",targetPlayer.getName()},new String[]{""String_Node_Str"",reason}));
}","@Override protected void handleCommand(CPlayer sender,String[] args) throws CommandException {
  Punishments module=Core.getModule(Punishments.class);
  String name=clazz.getSimpleName().toLowerCase();
  super.handleCommand(sender,args);
  if (args.length < 2)   throw new ArgumentRequirementException(""String_Node_Str"" + name + ""String_Node_Str"");
  String target=args[0];
  String reason=Joiner.on(""String_Node_Str"").join(Arrays.copyOfRange(args,1,args.length));
  COfflinePlayer targetPlayer=getTargetByArg(target);
  if (targetPlayer == null)   throw new ArgumentRequirementException(""String_Node_Str"");
  try {
    punishmentManager.punish(targetPlayer,reason,sender);
  }
 catch (  PunishmentException e) {
    sender.sendMessage(module.getFormat(""String_Node_Str"",new String[]{""String_Node_Str"",e.getMessage()}));
    return;
  }
  sender.sendMessage(module.getFormat(""String_Node_Str"",new String[]{""String_Node_Str"",name},new String[]{""String_Node_Str"",targetPlayer.getName()},new String[]{""String_Node_Str"",reason}));
}",0.99412915851272
86330,"@Override void onPunish(CPlayer player,Ban activePunishmentFor){
  player.getBukkitPlayer().kickPlayer(Core.getModule(Punishments.class).getFormat(""String_Node_Str"",false,new String[]{""String_Node_Str"",activePunishmentFor.getClass().getSimpleName()},new String[]{""String_Node_Str"",activePunishmentFor.getMessage()},new String[]{""String_Node_Str"",activePunishmentFor.getIssuer().getName()},new String[]{""String_Node_Str"",PRETTY_TIME_FORMATTER.format(activePunishmentFor.getDateIssued())}));
}","@Override void onPunish(CPlayer player,Ban activePunishmentFor){
  player.getBukkitPlayer().kickPlayer(Core.getModule(Punishments.class).getFormat(""String_Node_Str"",false,new String[]{""String_Node_Str"",activePunishmentFor.getClass().getSimpleName()},new String[]{""String_Node_Str"",activePunishmentFor.getMessage()},new String[]{""String_Node_Str"",activePunishmentFor.getIssuer().getName()},new String[]{""String_Node_Str"",PRETTY_TIME_FORMATTER.format(activePunishmentFor.getDateIssued())},new String[]{""String_Node_Str"",""String_Node_Str""}));
}",0.9515503875968992
86331,"@Override public T getActivePunishmentFor(COfflinePlayer target){
  if (target instanceof CPlayer)   return activePunishments.get(target);
  for (  T t : getPunishmentsFor(target)) {
    if (t.isActive())     return t;
  }
  return null;
}","@Override public T getActivePunishmentFor(COfflinePlayer target){
  if (target instanceof CPlayer && activePunishments.containsKey(target))   return activePunishments.get(target);
  for (  T t : getPunishmentsFor(target)) {
    if (t.isActive())     return t;
  }
  return null;
}",0.882466281310212
86332,"@Override void onPunish(CPlayer player,TemporaryBan activePunishmentFor){
  player.getBukkitPlayer().kickPlayer(Core.getModule(Punishments.class).getFormat(""String_Node_Str"",false,new String[]{""String_Node_Str"",activePunishmentFor.getClass().getSimpleName()},new String[]{""String_Node_Str"",activePunishmentFor.getMessage()},new String[]{""String_Node_Str"",activePunishmentFor.getIssuer().getName()},new String[]{""String_Node_Str"",PRETTY_TIME_FORMATTER.format(activePunishmentFor.getDateIssued())}));
}","@Override void onPunish(CPlayer player,TemporaryBan activePunishmentFor){
  player.getBukkitPlayer().kickPlayer(Core.getModule(Punishments.class).getFormat(""String_Node_Str"",false,new String[]{""String_Node_Str"",activePunishmentFor.getClass().getSimpleName()},new String[]{""String_Node_Str"",activePunishmentFor.getMessage()},new String[]{""String_Node_Str"",activePunishmentFor.getIssuer().getName()},new String[]{""String_Node_Str"",PRETTY_TIME_FORMATTER.format(activePunishmentFor.getDateIssued())},new String[]{""String_Node_Str"",""String_Node_Str"" + PRETTY_TIME_FORMATTER.format(new Date(activePunishmentFor.getDateIssued().getTime() + (activePunishmentFor.getLengthInSeconds() * 1000)))}));
}",0.8403361344537815
86333,"@Override protected void handleCommand(CPlayer sender,String[] args) throws CommandException {
}","@Override protected void handleCommand(CPlayer sender,String[] args) throws CommandException {
  String name=clazz.getSimpleName().toLowerCase();
  if (!sender.hasPermission(""String_Node_Str"" + name))   throw new PermissionException(""String_Node_Str"" + name + ""String_Node_Str"");
}",0.5092838196286472
86334,"static void handleCrossServer(COfflinePlayer sender,String message,Channel channel) throws ChannelException {
  IChannelManager cManager=CoreChat.getInstance().getChannelManager();
  String formatMessage=channel.formatMessage(sender,message);
  String s=channel.formatMessage(sender,message);
  for (  CPlayer cPlayer : cManager.getListeners(channel)) {
    cPlayer.sendMessage(s);
  }
  for (  ChatterObserver chatterObserver : cManager.getChatterObservers()) {
    chatterObserver.onMessageSent(sender,channel,message);
  }
}","static void handleCrossServer(COfflinePlayer sender,String message,Channel channel) throws ChannelException {
  IChannelManager cManager=CoreChat.getInstance().getChannelManager();
  String s=channel.formatMessage(sender,message);
  for (  CPlayer cPlayer : cManager.getListeners(channel)) {
    cPlayer.sendMessage(s);
  }
  for (  ChatterObserver chatterObserver : cManager.getChatterObservers()) {
    chatterObserver.onMessageSent(sender,channel,message);
  }
}",0.5020161290322581
86335,"/** 
 * Registers sub commands with the command and re-creates the help command.
 * @param subCommands The sub-commands you wish to register.
 */
public final void registerSubCommand(ModuleCommand... subCommands){
  for (  ModuleCommand subCommand : subCommands) {
    this.subCommands.put(subCommand.getName(),subCommand);
    subCommand.setSuperCommand(this);
  }
  final Map<String,ModuleCommand> subCommandsLV=this.subCommands;
  final ModuleCommand superHelpCommand=this;
  this.subCommands.put(""String_Node_Str"",new ModuleCommand(""String_Node_Str""){
    @Override public void handleCommandUnspecific(    CommandSender sender,    String[] args){
      StringBuilder builder=new StringBuilder();
      for (      Map.Entry<String,ModuleCommand> stringModuleCommandEntry : subCommandsLV.entrySet()) {
        builder.append(stringModuleCommandEntry.getKey()).append(""String_Node_Str"");
      }
      String s=builder.toString();
      sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ superHelpCommand.getFormattedName()+ ChatColor.YELLOW+ ""String_Node_Str""+ s.substring(0,s.length() - 1)+ ""String_Node_Str"");
    }
  }
);
}","/** 
 * Registers sub commands with the command and re-creates the help command.
 * @param subCommands The sub-commands you wish to register.
 */
public final void registerSubCommand(ModuleCommand... subCommands){
  for (  ModuleCommand subCommand : subCommands) {
    this.subCommands.put(subCommand.getName(),subCommand);
    subCommand.setSuperCommand(this);
  }
  regenerateHelpCommand();
}",0.479328165374677
86336,"@SuppressWarnings(""String_Node_Str"") @Override @Synchronized public void updateHeartbeat(){
  long time=new Date().getTime();
  Iterator<NetworkServer> iterator=servers.iterator();
  while (iterator.hasNext())   if (time - iterator.next().getLastPing().getTime() > 10000)   iterator.remove();
  JSONObject object=new JSONObject();
  JSONArray uuids=new JSONArray();
  for (  CPlayer onlinePlayer : Core.getOnlinePlayers()) {
    uuids.add(onlinePlayer.getUniqueIdentifier().toString());
  }
  object.put(HEARTBEAT_PLAYERS_KEY,uuids);
  MessageRequest messageRequest;
  try {
    messageRequest=new MessageRequest(Collections.EMPTY_LIST,NETWORK_MANAGER_CHANNEL,object.toJSONString());
  }
 catch (  UnsupportedEncodingException e) {
    return;
  }
  boolean completedHeartbeat=false;
  int attempts=0;
  while (attempts < HEARTBEAT_ATTEMPTS_MAX) {
    attempts++;
    try {
      connect.request(messageRequest);
    }
 catch (    RequestException e) {
      e.printStackTrace();
      continue;
    }
    completedHeartbeat=true;
    break;
  }
  updateThisServer();
  if (!completedHeartbeat)   throw new RuntimeException(""String_Node_Str"");
  resetHeartbeat(4L,TimeUnit.SECONDS);
}","@SuppressWarnings(""String_Node_Str"") @Override @Synchronized public void updateHeartbeat(){
  long time=new Date().getTime();
  Iterator<NetworkServer> iterator=servers.iterator();
  while (iterator.hasNext()) {
    NetworkServer next=iterator.next();
    if (next.getName().equals(connect.getSettings().getUsername()))     continue;
    if (time - next.getLastPing().getTime() > 10000) {
      iterator.remove();
      for (      NetworkServerDiscoverObserver discoverObserver : discoverObservers) {
        discoverObserver.onNetworkServerRemove(next);
      }
    }
  }
  JSONObject object=new JSONObject();
  JSONArray uuids=new JSONArray();
  for (  CPlayer onlinePlayer : Core.getOnlinePlayers()) {
    uuids.add(onlinePlayer.getUniqueIdentifier().toString());
  }
  object.put(HEARTBEAT_PLAYERS_KEY,uuids);
  MessageRequest messageRequest;
  try {
    messageRequest=new MessageRequest(Collections.EMPTY_LIST,NETWORK_MANAGER_CHANNEL,object.toJSONString());
  }
 catch (  UnsupportedEncodingException e) {
    return;
  }
  boolean completedHeartbeat=false;
  int attempts=0;
  while (attempts < HEARTBEAT_ATTEMPTS_MAX) {
    attempts++;
    try {
      connect.request(messageRequest);
    }
 catch (    RequestException e) {
      e.printStackTrace();
      continue;
    }
    completedHeartbeat=true;
    break;
  }
  updateThisServer();
  if (!completedHeartbeat)   throw new RuntimeException(""String_Node_Str"");
  resetHeartbeat(4L,TimeUnit.SECONDS);
}",0.870845921450151
86337,"private void receivedUpdate(String server,List<UUID> uuids){
  LilyPadServer s;
  boolean shouldAdd=false;
  if ((s=(LilyPadServer)getServer(server)) == null) {
    s=new LilyPadServer(server,this);
    shouldAdd=true;
  }
  s.setLastPing(new Date());
  List<COfflinePlayer> players=s.getPlayers();
  Iterator<COfflinePlayer> playerIterator=players.iterator();
  List<UUID> uuidsWeHave=new ArrayList<>();
  while (playerIterator.hasNext()) {
    COfflinePlayer offlinePlayer=playerIterator.next();
    UUID uniqueIdentifier=offlinePlayer.getUniqueIdentifier();
    if (!uuids.contains(uniqueIdentifier))     playerIterator.remove();
 else     uuidsWeHave.add(uniqueIdentifier);
  }
  for (  UUID uuid : uuids) {
    if (uuidsWeHave.contains(uuid))     continue;
    players.add(Core.getOfflinePlayerByUUID(uuid));
  }
  if (shouldAdd)   this.servers.add(s);
}","private void receivedUpdate(String server,List<UUID> uuids){
  LilyPadServer s;
  boolean shouldAdd=false;
  if ((s=(LilyPadServer)getServer(server)) == null) {
    s=new LilyPadServer(server,this);
    shouldAdd=true;
  }
  s.setLastPing(new Date());
  List<COfflinePlayer> players=s.getPlayers();
  Iterator<COfflinePlayer> playerIterator=players.iterator();
  List<UUID> uuidsWeHave=new ArrayList<>();
  while (playerIterator.hasNext()) {
    COfflinePlayer offlinePlayer=playerIterator.next();
    UUID uniqueIdentifier=offlinePlayer.getUniqueIdentifier();
    if (!uuids.contains(uniqueIdentifier))     playerIterator.remove();
 else     uuidsWeHave.add(uniqueIdentifier);
  }
  for (  UUID uuid : uuids) {
    if (uuidsWeHave.contains(uuid))     continue;
    players.add(Core.getOfflinePlayerByUUID(uuid));
  }
  if (shouldAdd) {
    this.servers.add(s);
    Core.logInfo(""String_Node_Str"" + s.getName() + ""String_Node_Str"");
    for (    NetworkServerDiscoverObserver discoverObserver : discoverObservers) {
      discoverObserver.onNetworkServerDiscover(s);
    }
  }
}",0.8869385647909138
86338,"public LilyPadNetworkManager(){
  connect=Core.getInstance().getServer().getServicesManager().getRegistration(Connect.class).getProvider();
  if (connect == null)   throw new IllegalStateException(""String_Node_Str"");
  connect.registerEvents(this);
  LilyPadServer thisServer=new LilyPadServer(connect.getSettings().getUsername(),this);
  servers.add(thisServer);
  updateThisServer();
}","public LilyPadNetworkManager(){
  connect=Core.getInstance().getServer().getServicesManager().getRegistration(Connect.class).getProvider();
  if (connect == null)   throw new IllegalStateException(""String_Node_Str"");
  connect.registerEvents(this);
  LilyPadServer thisServer=new LilyPadServer(connect.getSettings().getUsername(),this);
  servers.add(thisServer);
  updateThisServer();
  scheduleHeartbeat(5l,TimeUnit.SECONDS);
}",0.9485294117647058
86339,"private void scheduleHeartbeat(Long time,TimeUnit unit){
  long ticks=unit.convert(time,TimeUnit.SECONDS) * 20;
  this.heartbeatScheduled=Bukkit.getScheduler().runTaskTimerAsynchronously(Core.getInstance(),new CPlayerManagerSaveTask(Core.getPlayerManager()),ticks,ticks);
}","private void scheduleHeartbeat(Long time,TimeUnit unit){
  long ticks=unit.convert(time,TimeUnit.SECONDS) * 20;
  this.heartbeatScheduled=Bukkit.getScheduler().runTaskTimerAsynchronously(Core.getInstance(),new NetworkUpdaterTask(this),ticks,ticks);
}",0.8680688336520076
86340,"@Override protected void onModuleEnable(){
  registerCommand(new PluginsCommand());
  registerCommand(new NickNameCommand());
  tabColorManager=new TabColorManager();
  Core.getPermissionsManager().registerObserver(tabColorManager);
  registerListener(tabColorManager);
}","@Override protected void onModuleEnable(){
  registerCommand(new PluginsCommand());
  registerCommand(new NickNameCommand());
  registerCommand(new LagInfoCommand());
  if (Core.getNetworkManager() != null)   registerCommand(new ServerCommand());
  tabColorManager=new TabColorManager();
  Core.getPermissionsManager().registerObserver(tabColorManager);
  registerListener(tabColorManager);
}",0.7722473604826546
86341,"@Override protected void handleCommandUnspecific(CommandSender sender,String[] args) throws CommandException {
}","@Override protected void handleCommandUnspecific(CommandSender sender,String[] args) throws CommandException {
  long memoryAv=Runtime.getRuntime().maxMemory();
  long usedMemory=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
  long freeMemory=memoryAv - usedMemory;
  sender.sendMessage(formatStat(""String_Node_Str"",ByteLevels.formatBytes(memoryAv)));
  sender.sendMessage(formatStat(""String_Node_Str"",ByteLevels.formatBytes(usedMemory)));
  sender.sendMessage(formatStat(""String_Node_Str"",ByteLevels.formatBytes(freeMemory)));
  sender.sendMessage(formatStat(""String_Node_Str"",String.valueOf(Core.getPlayerManager().getOnlinePlayers().size())));
}",0.2849872773536895
86342,"@Override protected void handleCommandUnspecific(CommandSender sender,String[] args) throws CommandException {
  char[] plating=new char[52];
  Arrays.fill(plating,' ');
  String boilerPlate=ChatColor.YELLOW + ChatColor.STRIKETHROUGH.toString() + new String(plating);
  StringBuilder moduleList=new StringBuilder();
  StringBuilder thirdParty=new StringBuilder();
  for (  Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
    if (plugin instanceof ModularPlugin) {
      ModularPlugin modularPlugin=(ModularPlugin)plugin;
      moduleList.append(modularPlugin.isEnabled() ? ChatColor.GREEN : ChatColor.RED).append(modularPlugin.getMeta().name()).append(ChatColor.YELLOW).append(""String_Node_Str"");
    }
 else     if (!(plugin instanceof Core)) {
      List<String> authors=plugin.getDescription().getAuthors();
      StringBuilder author=new StringBuilder();
      for (      String s : authors) {
        author.append(s).append(""String_Node_Str"");
      }
      String authorsString=author.toString();
      authorsString=authorsString.substring(0,Math.max(0,authorsString.length() - 2));
      thirdParty.append(plugin.isEnabled() ? ChatColor.GREEN : ChatColor.RED).append(plugin.getName());
      if (authorsString.length() > 0)       thirdParty.append(""String_Node_Str"").append(authorsString);
      thirdParty.append(ChatColor.RED).append(""String_Node_Str"");
    }
  }
  String modules=moduleList.toString();
  modules=modules.substring(0,modules.length() - 2);
  String plugins=thirdParty.toString();
  plugins=plugins.substring(0,plugins.length() - 2);
  CoreEssentials moduleProvider=Core.getInstance().getModuleProvider(CoreEssentials.class);
  sender.sendMessage(boilerPlate);
  sender.sendMessage(moduleProvider.getFormat(""String_Node_Str"",false,new String[]{""String_Node_Str"",Core.getInstance().getDescription().getVersion()}));
  sender.sendMessage(""String_Node_Str"");
  sender.sendMessage(moduleProvider.getFormat(""String_Node_Str"",false,new String[]{""String_Node_Str"",modules}));
  sender.sendMessage(""String_Node_Str"");
  sender.sendMessage(moduleProvider.getFormat(""String_Node_Str"",false,new String[]{""String_Node_Str"",plugins}));
  sender.sendMessage(boilerPlate);
}","@Override protected void handleCommandUnspecific(CommandSender sender,String[] args) throws CommandException {
  char[] plating=new char[52];
  Arrays.fill(plating,' ');
  String boilerPlate=ChatColor.YELLOW + ChatColor.STRIKETHROUGH.toString() + new String(plating);
  StringBuilder moduleList=new StringBuilder();
  StringBuilder thirdParty=new StringBuilder();
  for (  Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
    if (plugin instanceof ModularPlugin) {
      ModularPlugin modularPlugin=(ModularPlugin)plugin;
      moduleList.append(modularPlugin.isEnabled() ? ChatColor.GREEN : ChatColor.RED).append(modularPlugin.getMeta().name()).append(ChatColor.YELLOW).append(""String_Node_Str"");
    }
 else     if (!(plugin instanceof Core)) {
      List<String> authors=plugin.getDescription().getAuthors();
      StringBuilder author=new StringBuilder();
      for (      String s : authors) {
        author.append(s).append(""String_Node_Str"");
      }
      String authorsString=author.toString();
      authorsString=authorsString.substring(0,Math.max(0,authorsString.length() - 2));
      thirdParty.append(plugin.isEnabled() ? ChatColor.GREEN : ChatColor.RED).append(plugin.getName());
      if (authorsString.length() > 0)       thirdParty.append(""String_Node_Str"").append(authorsString);
      thirdParty.append(ChatColor.RED).append(""String_Node_Str"");
    }
  }
  String modules=moduleList.toString();
  modules=modules.substring(0,Math.max(0,modules.length() - 2));
  String plugins=thirdParty.toString();
  plugins=plugins.substring(0,Math.max(0,plugins.length() - 2));
  CoreEssentials moduleProvider=Core.getInstance().getModuleProvider(CoreEssentials.class);
  sender.sendMessage(boilerPlate);
  sender.sendMessage(moduleProvider.getFormat(""String_Node_Str"",false,new String[]{""String_Node_Str"",Core.getInstance().getDescription().getVersion()}));
  sender.sendMessage(""String_Node_Str"");
  sender.sendMessage(moduleProvider.getFormat(""String_Node_Str"",false,new String[]{""String_Node_Str"",modules}));
  sender.sendMessage(""String_Node_Str"");
  sender.sendMessage(moduleProvider.getFormat(""String_Node_Str"",false,new String[]{""String_Node_Str"",plugins}));
  sender.sendMessage(boilerPlate);
}",0.9510869565217392
86343,"@Override @SneakyThrows public T deserialize(Object object,Class<T> modelClass){
  T t=modelClass.newInstance();
  DBObject dbObject=(DBObject)object;
  for (  String key : dbObject.keySet()) {
    Field declaredField=modelClass.getDeclaredField(key);
    if (declaredField == null)     continue;
    declaredField.setAccessible(true);
    declaredField.set(t,applyTypeFiltersFromDB(dbObject.get(key),declaredField.getType()));
  }
  return t;
}","@Override @SneakyThrows public T deserialize(Object object,Class<T> modelClass){
  T t=modelClass.newInstance();
  DBObject dbObject=(DBObject)object;
  for (  String key : dbObject.keySet()) {
    Field declaredField;
    try {
      declaredField=modelClass.getDeclaredField(key);
    }
 catch (    NoSuchFieldException e) {
      continue;
    }
    declaredField.setAccessible(true);
    declaredField.set(t,applyTypeFiltersFromDB(dbObject.get(key),declaredField.getType()));
  }
  return t;
}",0.89171974522293
86344,"@Override public final void onEnable(){
  instance=this;
  try {
    saveDefaultConfig();
    for (    Player player : Bukkit.getOnlinePlayers()) {
      player.kickPlayer(""String_Node_Str"");
    }
    databaseConfiguration=new YAMLConfigurationFile(this,""String_Node_Str"");
    databaseConfiguration.reloadConfig();
    databaseConfiguration.saveDefaultConfig();
    try {
      provider=(Provider)Class.forName(getConfig().getString(""String_Node_Str"")).newInstance();
    }
 catch (    Exception e) {
      provider=new DefaultProvider();
    }
    this.playerManager=provider.getNewPlayerManager(this);
    this.networkManager=provider.getNewNetworkManager(this);
    this.permissionsManager=provider.getNewPermissionsManager(this,this.playerManager.getDatabase(),this.playerManager);
    this.netFileManager=provider.getNewNetFileManager(this);
    this.modelManager=provider.getNewModelManager(this.playerManager.getDatabase());
  }
 catch (  Throwable t) {
    t.printStackTrace();
    Bukkit.getPluginManager().disablePlugin(this);
  }
}","@Override public final void onEnable(){
  instance=this;
  try {
    saveDefaultConfig();
    for (    Player player : Bukkit.getOnlinePlayers()) {
      player.kickPlayer(""String_Node_Str"");
    }
    databaseConfiguration=new YAMLConfigurationFile(this,""String_Node_Str"");
    databaseConfiguration.reloadConfig();
    databaseConfiguration.saveDefaultConfig();
    try {
      provider=(Provider)Class.forName(getConfig().getString(""String_Node_Str"")).newInstance();
    }
 catch (    Exception e) {
      provider=new DefaultProvider();
    }
    this.cDatabase=provider.getNewDatabase(this);
    this.cDatabase.connect();
    this.playerManager=provider.getNewPlayerManager(this);
    this.networkManager=provider.getNewNetworkManager(this);
    this.permissionsManager=provider.getNewPermissionsManager(this,this.playerManager);
    this.netFileManager=provider.getNewNetFileManager(this);
    this.modelManager=provider.getNewModelManager(this);
  }
 catch (  Throwable t) {
    t.printStackTrace();
    Bukkit.getPluginManager().disablePlugin(this);
  }
}",0.9330802088277173
86345,"@Override public final void onDisable(){
  try {
    this.playerManager.onDisable();
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
  instance=null;
}","@Override public final void onDisable(){
  try {
    if (this.playerManager != null)     this.playerManager.onDisable();
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
  instance=null;
}",0.8994413407821229
86346,"@Override public ModelManager getNewModelManager(CDatabase database){
  return new MongoModelManager((CMongoDatabase)database);
}","@Override public ModelManager getNewModelManager(Core core){
  return new MongoModelManager((CMongoDatabase)core.getCDatabase());
}",0.8769230769230769
86347,"@Override public CPermissionsManager getNewPermissionsManager(Core core,CDatabase database,CPlayerManager playerManager){
  return new CMongoPermissionsManager((CMongoDatabase)database,playerManager);
}","@Override public CPermissionsManager getNewPermissionsManager(Core core,CPlayerManager playerManager){
  return new CMongoPermissionsManager((CMongoDatabase)Core.getInstance().getCDatabase(),playerManager);
}",0.8878048780487805
86348,"@Override public CPlayerManager getNewPlayerManager(Core core) throws DatabaseConnectException {
  FileConfiguration config=core.getDatabaseConfiguration().getConfig();
  CMongoDatabase mongoDatabase=new CMongoDatabase(config.getString(""String_Node_Str"",""String_Node_Str""),config.getInt(""String_Node_Str"",28017),config.getString(""String_Node_Str"",""String_Node_Str""),config.getString(""String_Node_Str"",null),config.getString(""String_Node_Str"",null),config.getString(""String_Node_Str""));
  return new CMongoPlayerManager(mongoDatabase);
}","@Override public CPlayerManager getNewPlayerManager(Core core){
  return new CMongoPlayerManager((CMongoDatabase)Core.getInstance().getCDatabase());
}",0.3294460641399417
86349,ModelManager getNewModelManager(CDatabase database);,ModelManager getNewModelManager(Core core);,0.8
86350,"CPermissionsManager getNewPermissionsManager(Core core,CDatabase database,CPlayerManager playerManager);","CPermissionsManager getNewPermissionsManager(Core core,CPlayerManager playerManager);",0.8994708994708994
86351,CPlayerManager getNewPlayerManager(Core core) throws DatabaseConnectException ;,CPlayerManager getNewPlayerManager(Core core);,0.736
86352,"public final void logMessage(String message){
  getServer().getConsoleSender().sendMessage(ChatColor.translateAlternateColorCodes('&',message));
}","public final void logMessage(String message){
  getServer().getConsoleSender().sendMessage(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + getMeta().name() + ""String_Node_Str""+ message));
}",0.8342857142857143
86353,"@Override public final void onEnable(){
  try {
    if (!Core.getInstance().isEnabled()) {
      onFailureToEnable();
      return;
    }
    meta=getClass().getAnnotation(ModuleMeta.class);
    saveDefaultConfig();
    this.formatsFile=new YAMLConfigurationFile(this,""String_Node_Str"");
    this.formatsFile.saveDefaultConfig();
    onModuleEnable();
  }
 catch (  Exception e) {
    e.printStackTrace();
    onFailureToEnable();
    getServer().getPluginManager().disablePlugin(this);
  }
  logMessage(""String_Node_Str"" + meta.name() + ""String_Node_Str"");
}","@Override public final void onEnable(){
  try {
    if (!Core.getInstance().isEnabled()) {
      onFailureToEnable();
      return;
    }
    Core.getInstance().onModulePreEnable(this);
    meta=getClass().getAnnotation(ModuleMeta.class);
    saveDefaultConfig();
    this.formatsFile=new YAMLConfigurationFile(this,""String_Node_Str"");
    this.formatsFile.saveDefaultConfig();
    this.commandMap=new ModuleCommandMap(this);
    onModuleEnable();
  }
 catch (  Exception e) {
    e.printStackTrace();
    onFailureToEnable();
    getServer().getPluginManager().disablePlugin(this);
  }
  logMessage(""String_Node_Str"" + meta.name() + ""String_Node_Str"");
}",0.9209225700164744
86354,"@Override public final void onDisable(){
  try {
    onModuleDisable();
  }
 catch (  Exception e) {
    onFailureToDisable();
    e.printStackTrace();
  }
  logMessage(""String_Node_Str"" + meta.name() + ""String_Node_Str"");
}","@Override public final void onDisable(){
  try {
    onModuleDisable();
    Core.getInstance().onModulePreDisable(this);
  }
 catch (  Exception e) {
    onFailureToDisable();
    e.printStackTrace();
  }
  logMessage(""String_Node_Str"" + meta.name() + ""String_Node_Str"");
}",0.9014084507042254
86355,"public final String getFormatRaw(String key,String[]... formatters){
  FileConfiguration config=formatsFile.getConfig();
  if (!config.contains(key))   return null;
  String unFormattedString=config.getString(key);
  for (  String[] formatter : formatters) {
    if (formatter.length < 2)     continue;
    unFormattedString=unFormattedString.replace(formatter[0],formatter[1]);
  }
  return unFormattedString;
}","public final String getFormatRaw(String key,String[]... formatters){
  FileConfiguration config=formatsFile.getConfig();
  if (!config.contains(key))   return null;
  String unFormattedString=ChatColor.translateAlternateColorCodes('&',config.getString(key));
  for (  String[] formatter : formatters) {
    if (formatter.length < 2)     continue;
    unFormattedString=unFormattedString.replace(formatter[0],formatter[1]);
  }
  return unFormattedString;
}",0.9493087557603688
86356,"/** 
 * Main constructor with sub-commands.
 * @param name The name of the command.
 * @param subCommands The sub-commands you wish to register.
 */
protected ModuleCommand(final String name,ModuleCommand... subCommands){
  this.name=name;
  for (  ModuleCommand subCommand : subCommands) {
    this.subCommands.put(subCommand.getName(),subCommand);
  }
  final Map<String,ModuleCommand> subCommandsLV=this.subCommands;
  this.subCommands.put(""String_Node_Str"",new ModuleCommand(""String_Node_Str""){
    @Override public void handleCommandUnspecific(    CommandSender sender,    String[] args){
      StringBuilder builder=new StringBuilder();
      for (      Map.Entry<String,ModuleCommand> stringModuleCommandEntry : subCommandsLV.entrySet()) {
        builder.append(stringModuleCommandEntry.getKey()).append(""String_Node_Str"");
      }
      String s=builder.toString();
      sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ name+ ChatColor.YELLOW+ ""String_Node_Str""+ s.substring(0,s.length() - 2)+ ""String_Node_Str"");
    }
  }
);
}","/** 
 * Main constructor with sub-commands.
 * @param name The name of the command.
 * @param subCommands The sub-commands you wish to register.
 */
protected ModuleCommand(final String name,ModuleCommand... subCommands){
  this.name=name;
  for (  ModuleCommand subCommand : subCommands) {
    this.subCommands.put(subCommand.getName(),subCommand);
    subCommand.setSuperCommand(this);
  }
  final Map<String,ModuleCommand> subCommandsLV=this.subCommands;
  final ModuleCommand superHelpCommand=this;
  this.subCommands.put(""String_Node_Str"",new ModuleCommand(""String_Node_Str""){
    @Override public void handleCommandUnspecific(    CommandSender sender,    String[] args){
      StringBuilder builder=new StringBuilder();
      for (      Map.Entry<String,ModuleCommand> stringModuleCommandEntry : subCommandsLV.entrySet()) {
        builder.append(stringModuleCommandEntry.getKey()).append(""String_Node_Str"");
      }
      String s=builder.toString();
      sender.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ superHelpCommand.getFormattedName()+ ChatColor.YELLOW+ ""String_Node_Str""+ s.substring(0,s.length() - 1)+ ""String_Node_Str"");
    }
  }
);
}",0.9447907390917186
86357,"@SuppressWarnings(""String_Node_Str"") protected List<String> handleTabComplete(CommandSender sender,Command command,String alias,String[] args){
  List<String> ss=new ArrayList<>();
  String arg=args[args.length - 1];
  for (  Player player : Bukkit.getOnlinePlayers()) {
    String name1=player.getName();
    if (name1.startsWith(arg))     ss.add(name1);
  }
  return ss;
}","@SuppressWarnings(""String_Node_Str"") protected List<String> handleTabComplete(CommandSender sender,Command command,String alias,String[] args){
  List<String> ss=new ArrayList<>();
  String arg=args.length > 0 ? args[args.length - 1] : ""String_Node_Str"";
  for (  Player player : Bukkit.getOnlinePlayers()) {
    String name1=player.getName();
    if (name1.startsWith(arg))     ss.add(name1);
  }
  return ss;
}",0.9516539440203562
86358,"@Override public final List<String> onTabComplete(CommandSender sender,Command command,String alias,String[] args){
  if (args.length > 1) {
    ModuleCommand possibleHigherLevelSubCommand;
    if ((possibleHigherLevelSubCommand=getSubCommandFor(args[0])) != null)     return possibleHigherLevelSubCommand.onTabComplete(sender,command,alias,Arrays.copyOfRange(args,1,args.length - 1));
  }
 else   if (args.length == 1) {
    List<ModuleCommand> subCommandsForPartial=getSubCommandsForPartial(args[0]);
    if (subCommandsForPartial.size() != 0) {
      List<String> strings=new ArrayList<>();
      for (      ModuleCommand moduleCommand : subCommandsForPartial) {
        strings.add(moduleCommand.getName());
      }
      return strings;
    }
  }
  return handleTabComplete(sender,command,alias,args);
}","@Override public final List<String> onTabComplete(CommandSender sender,Command command,String alias,String[] args){
  if (args.length > 1) {
    ModuleCommand possibleHigherLevelSubCommand;
    if ((possibleHigherLevelSubCommand=getSubCommandFor(args[0])) != null)     return possibleHigherLevelSubCommand.onTabComplete(sender,command,alias,Arrays.copyOfRange(args,1,args.length));
  }
 else   if (args.length == 1) {
    List<ModuleCommand> subCommandsForPartial=getSubCommandsForPartial(args[0]);
    if (subCommandsForPartial.size() != 0) {
      List<String> strings=new ArrayList<>();
      for (      ModuleCommand moduleCommand : subCommandsForPartial) {
        strings.add(moduleCommand.getName());
      }
      return strings;
    }
  }
  return handleTabComplete(sender,command,alias,args);
}",0.9975186104218362
86359,"/** 
 * This method <b>should</b> be overridden by any sub-classes as the functionality it provides is limited. The goal of this method should always be conveying an error message to a user in a friendly manner. The   {@link net.cogzmc.core.modular.command.CommandException} can be extended by your {@link net.cogzmc.core.modular.ModularPlugin} to provide extended functionality.The  {@code args} are the same args that would be passed to your handlers. Meaning, if this is a sub-command they will be cut to fit that sub-command, and if this is a root level command they will be all of the arguments.
 * @param ex The exception used to hold the error message and any other details about the failure. If there was an exception during the handling of the command this will be an {@link net.cogzmc.core.modular.command.UnhandledCommandExceptionException}.
 * @param args The arguments passed to the command.
 * @param sender The sender of the command, cannot be directly cast to {@link net.cogzmc.core.player.CPlayer}.
 */
@SuppressWarnings(""String_Node_Str"") protected void handleCommandException(CommandException ex,String[] args,CommandSender sender){
  if (ex instanceof FriendlyException)   sender.sendMessage(((FriendlyException)ex).getFriendlyMessage(this));
 else   sender.sendMessage(ChatColor.RED + ex.getClass().getSimpleName() + ""String_Node_Str""+ ex.getMessage()+ ""String_Node_Str"");
}","/** 
 * This method <b>should</b> be overridden by any sub-classes as the functionality it provides is limited. The goal of this method should always be conveying an error message to a user in a friendly manner. The   {@link net.cogzmc.core.modular.command.CommandException} can be extended by your {@link net.cogzmc.core.modular.ModularPlugin} to provide extended functionality.The  {@code args} are the same args that would be passed to your handlers. Meaning, if this is a sub-command they will be cut to fit that sub-command, and if this is a root level command they will be all of the arguments.
 * @param ex The exception used to hold the error message and any other details about the failure. If there was an exception during the handling of the command this will be an {@link net.cogzmc.core.modular.command.UnhandledCommandExceptionException}.
 * @param args The arguments passed to the command.
 * @param sender The sender of the command, cannot be directly cast to {@link net.cogzmc.core.player.CPlayer}.
 */
@SuppressWarnings(""String_Node_Str"") protected void handleCommandException(CommandException ex,String[] args,CommandSender sender){
  if (ex instanceof FriendlyException)   sender.sendMessage(((FriendlyException)ex).getFriendlyMessage(this));
 else   sender.sendMessage(ChatColor.RED + ex.getClass().getSimpleName() + ""String_Node_Str""+ ex.getMessage()+ ""String_Node_Str"");
  if (ex instanceof UnhandledCommandExceptionException)   ((UnhandledCommandExceptionException)ex).getCausingException().printStackTrace();
}",0.9522184300341296
86360,"/** 
 * Registers a command for handling.
 * @param command The command to register.
 */
public void registerCommand(ModuleCommand command){
  if (topLevelCommands.containsKey(command.getName()))   return;
  PluginCommand command1=getCommand(command.getName(),module);
  command1.setExecutor(command);
  command1.setTabCompleter(command);
  CommandMeta annotation=command.getClass().getAnnotation(CommandMeta.class);
  if (annotation != null) {
    command1.setAliases(Arrays.asList(annotation.aliases()));
    command1.setDescription(annotation.description());
    command1.setUsage(annotation.usage());
  }
  getCommandMap().register(module.getDescription().getName(),command1);
  this.topLevelCommands.put(command.getName(),command);
}","/** 
 * Registers a command for handling.
 * @param command The command to register.
 */
public void registerCommand(ModuleCommand command){
  if (topLevelCommands.containsKey(command.getName()))   return;
  PluginCommand command1=getCommand(command.getName(),module);
  command1.setExecutor(command);
  command1.setTabCompleter(command);
  CommandMeta annotation=command.getClass().getAnnotation(CommandMeta.class);
  if (annotation != null) {
    command1.setAliases(Arrays.asList(annotation.aliases()));
    command1.setDescription(annotation.description());
    command1.setUsage(annotation.usage());
  }
  getCommandMap().register(module.getDescription().getName(),command1);
  Core.logInfo(""String_Node_Str"" + command.toString());
  this.topLevelCommands.put(command.getName(),command);
}",0.9634464751958224
86361,"@Override public synchronized NetworkServer getServer(String name){
  for (  NetworkServer server : this.servers) {
    if (server.getName().equals(name))     return server;
  }
  return null;
}","@Override @Synchronized public NetworkServer getServer(String name){
  for (  NetworkServer server : this.servers) {
    if (server.getName().equals(name))     return server;
  }
  return null;
}",0.9562982005141388
86362,"@SuppressWarnings(""String_Node_Str"") @Override public synchronized void updateHeartbeat(){
  long time=new Date().getTime();
  Iterator<NetworkServer> iterator=servers.iterator();
  while (iterator.hasNext())   if (time - iterator.next().getLastPing().getTime() > 10000)   iterator.remove();
  JSONObject object=new JSONObject();
  JSONArray uuids=new JSONArray();
  for (  CPlayer onlinePlayer : Core.getOnlinePlayers()) {
    uuids.add(onlinePlayer.getUniqueIdentifier().toString());
  }
  object.put(HEARTBEAT_PLAYERS_KEY,uuids);
  MessageRequest messageRequest;
  try {
    messageRequest=new MessageRequest(Collections.EMPTY_LIST,NETWORK_MANAGER_CHANNEL,object.toJSONString());
  }
 catch (  UnsupportedEncodingException e) {
    return;
  }
  boolean completedHeartbeat=false;
  int attempts=0;
  while (attempts < HEARTBEAT_ATTEMPTS_MAX) {
    attempts++;
    try {
      connect.request(messageRequest);
    }
 catch (    RequestException e) {
      e.printStackTrace();
      continue;
    }
    completedHeartbeat=true;
    break;
  }
  updateThisServer();
  if (!completedHeartbeat)   throw new RuntimeException(""String_Node_Str"");
  resetHeartbeat(4L,TimeUnit.SECONDS);
}","@SuppressWarnings(""String_Node_Str"") @Override @Synchronized public void updateHeartbeat(){
  long time=new Date().getTime();
  Iterator<NetworkServer> iterator=servers.iterator();
  while (iterator.hasNext())   if (time - iterator.next().getLastPing().getTime() > 10000)   iterator.remove();
  JSONObject object=new JSONObject();
  JSONArray uuids=new JSONArray();
  for (  CPlayer onlinePlayer : Core.getOnlinePlayers()) {
    uuids.add(onlinePlayer.getUniqueIdentifier().toString());
  }
  object.put(HEARTBEAT_PLAYERS_KEY,uuids);
  MessageRequest messageRequest;
  try {
    messageRequest=new MessageRequest(Collections.EMPTY_LIST,NETWORK_MANAGER_CHANNEL,object.toJSONString());
  }
 catch (  UnsupportedEncodingException e) {
    return;
  }
  boolean completedHeartbeat=false;
  int attempts=0;
  while (attempts < HEARTBEAT_ATTEMPTS_MAX) {
    attempts++;
    try {
      connect.request(messageRequest);
    }
 catch (    RequestException e) {
      e.printStackTrace();
      continue;
    }
    completedHeartbeat=true;
    break;
  }
  updateThisServer();
  if (!completedHeartbeat)   throw new RuntimeException(""String_Node_Str"");
  resetHeartbeat(4L,TimeUnit.SECONDS);
}",0.9928179129700042
86363,"@EventListener public synchronized void onMessage(MessageEvent event){
  if (event.getChannel().equals(NETWORK_MANAGER_CHANNEL)) {
    handleHeartbeatMessageEvent(event);
    return;
  }
  if (event.getChannel().equals(NET_COMMAND_CHANNEL)) {
    handleNetCommandMessageEvent(event);
  }
}","@EventListener @Synchronized public void onMessage(MessageEvent event){
  if (event.getChannel().equals(NETWORK_MANAGER_CHANNEL)) {
    handleHeartbeatMessageEvent(event);
    return;
  }
  if (event.getChannel().equals(NET_COMMAND_CHANNEL)) {
    handleNetCommandMessageEvent(event);
  }
}",0.9533678756476685
86364,"@Override public synchronized List<NetworkServer> getServersMatchingRegex(String regex){
  return getServersMatchingRegex(Pattern.compile(regex));
}","@Override @Synchronized public List<NetworkServer> getServersMatchingRegex(String regex){
  return getServersMatchingRegex(Pattern.compile(regex));
}",0.9427609427609428
86365,"@Override public final void onPlayerJoin(CPlayer cPlayer,InetAddress address) throws CPlayerJoinException {
  Player player=cPlayer.getBukkitPlayer();
  for (  HubItem item : this.hubItems) {
    if (!item.shouldAdd(player))     continue;
    ItemStack itemStack=item.getItemStack();
    if (item.getMeta().slot() == -1) {
      player.getInventory().addItem(itemStack);
      player.updateInventory();
      continue;
    }
    player.getInventory().setItem(item.getMeta().slot(),itemStack);
    player.updateInventory();
  }
}","@Override public final void onPlayerJoin(CPlayer cPlayer,InetAddress address) throws CPlayerJoinException {
  Player player=cPlayer.getBukkitPlayer();
  for (  HubItem item : this.hubItems) {
    if (!item.shouldAdd(player))     continue;
    ItemStack itemStack=item.getItemStacks().get(0);
    if (item.getMeta().slot() == -1) {
      player.getInventory().addItem(itemStack);
      player.updateInventory();
      continue;
    }
    player.getInventory().setItem(item.getMeta().slot(),itemStack);
    player.updateInventory();
  }
}",0.9906015037593984
86366,String getName();,"/** 
 * @return
 */
String getName();",0.6296296296296297
86367,"DBObject getDBObject(){
  BasicDBObjectBuilder builder=new BasicDBObjectBuilder();
  builder.add(MongoKey.GROUPS_NAME_KEY.toString(),name);
  if (objectId != null)   builder.add(MongoKey.ID_KEY.toString(),objectId);
  combineObjectBuilders(builder,getObjectForPermissible(this));
  BasicDBList parentList=new BasicDBList();
  for (  CGroup parent : parents) {
    CMongoGroup parent1=(CMongoGroup)parent;
    parentList.add(parent1.getObjectId());
  }
  builder.add(MongoKey.GROUPS_PARENTS_KEY.toString(),parentList);
  builder.add(MongoKey.GROUPS_PRIORITY_KEY.toString(),priority);
  return builder.get();
}","DBObject getDBObject(){
  BasicDBObjectBuilder builder=new BasicDBObjectBuilder();
  builder.add(MongoKey.GROUPS_NAME_KEY.toString(),name);
  if (objectId != null)   builder.add(MongoKey.ID_KEY.toString(),objectId);
  combineObjectBuilders(builder,getObjectForPermissible(this));
  BasicDBList parentList=new BasicDBList();
  for (  CGroup parent : parents) {
    CMongoGroup parent1=(CMongoGroup)parent;
    parentList.add(parent1.getObjectId());
  }
  builder.add(MongoKey.GROUPS_PARENTS_KEY.toString(),parentList);
  builder.add(MongoKey.GROUPS_PRIORITY_KEY.toString(),priority);
  builder.add(MongoKey.GROUPS_CHAT_SUFFIX_KEY.toString(),chatSuffix);
  return builder.get();
}",0.9455676516329704
86368,"@Override public CGroup createNewGroup(String name){
  if (getGroup(name) != null)   throw new IllegalStateException(""String_Node_Str"");
  @SuppressWarnings(""String_Node_Str"") CMongoGroup group=new CMongoGroup(name,Collections.EMPTY_MAP,Collections.EMPTY_LIST,ChatColor.WHITE,ChatColor.WHITE,name,name);
  saveGroup(group);
  if (this.getDefaultGroup() == null)   setDefaultGroup(group);
  reloadPermissions();
  return group;
}","@Override public CGroup createNewGroup(String name){
  if (getGroup(name) != null)   throw new IllegalStateException(""String_Node_Str"");
  @SuppressWarnings(""String_Node_Str"") CMongoGroup group=new CMongoGroup(name,Collections.EMPTY_MAP,Collections.EMPTY_LIST,ChatColor.WHITE,ChatColor.WHITE,name,""String_Node_Str"");
  saveGroup(group);
  if (this.getDefaultGroup() == null)   setDefaultGroup(group);
  reloadPermissions();
  return group;
}",0.9758342922899884
86369,"private void updateFromDBObject(@NonNull DBObject player){
  this.lastKnownUsername=getValueFrom(player,MongoKey.LAST_USERNAME_KEY,String.class);
  this.uniqueIdentifier=UUID.fromString(getValueFrom(player,MongoKey.UUID_KEY,String.class));
  this.firstTimeOnline=getValueFrom(player,MongoKey.FIRST_JOIN_KEY,Date.class);
  this.lastTimeOnline=getValueFrom(player,MongoKey.LAST_SEEN_KEY,Date.class);
  Long time_online=getValueFrom(player,MongoKey.TIME_ONLINE_KEY,Long.class);
  this.millisecondsOnline=time_online == null ? 0 : time_online;
  List<String> ips=getListFor(getValueFrom(player,MongoKey.IPS_KEY,BasicDBList.class),String.class);
  this.knownIPAddresses=ips == null ? new ArrayList<String>() : ips;
  List<String> usernames=getListFor(getValueFrom(player,MongoKey.USERNAMES_KEY,BasicDBList.class),String.class);
  this.knownUsernames=usernames == null ? new ArrayList<String>() : usernames;
  @SuppressWarnings(""String_Node_Str"") Map<String,Object> settings1=getValueFrom(player,MongoKey.SETTINGS_KEY,HashMap.class);
  this.settings=settings1 == null ? new HashMap<String,Object>() : settings1;
  this.assets=new ArrayList<>();
  List<DBObject> assets1=getListFor(getValueFrom(player,MongoKey.ASSETS_KEY,BasicDBList.class),DBObject.class);
  for (  DBObject assetObject : assets1) {
    String fqcn=getValueFrom(assetObject,MongoKey.FULLY_QUALIFIED_CLASS_NAME_KEY,String.class);
    Class<?> assetClass;
    try {
      assetClass=Class.forName(fqcn);
      if (!Asset.class.isAssignableFrom(assetClass))       throw new IllegalClassException(""String_Node_Str"");
      Map<String,Object> meta=getMapFor(getValueFrom(assetObject,MongoKey.META_KEY,DBObject.class));
      Asset asset=(Asset)assetClass.getConstructor(COfflinePlayer.class,Map.class).newInstance(this,meta);
      this.assets.add(asset);
    }
 catch (    InvocationTargetException|NoSuchMethodException|InstantiationException|IllegalAccessException|ClassNotFoundException|IllegalClassException e) {
      Core.getInstance().getLogger().severe(""String_Node_Str"" + this.lastKnownUsername + ""String_Node_Str""+ fqcn+ ""String_Node_Str""+ e.getMessage());
    }
  }
  CPermissible permissibleDataFor=getPermissibileDataFor(player);
  this.chatColor=permissibleDataFor.getChatColor();
  this.chatPrefix=permissibleDataFor.getChatPrefix();
  this.tablistColor=permissibleDataFor.getTablistColor();
  this.declaredPermissions=permissibleDataFor.getDeclaredPermissions();
  if (this.declaredPermissions == null)   this.declaredPermissions=new HashMap<>();
  groupIds=getListFor(getValueFrom(player,MongoKey.USER_GROUPS_KEY,BasicDBList.class),ObjectId.class);
  reloadPermissions0();
}","private void updateFromDBObject(@NonNull DBObject player){
  this.lastKnownUsername=getValueFrom(player,MongoKey.LAST_USERNAME_KEY,String.class);
  this.uniqueIdentifier=UUID.fromString(getValueFrom(player,MongoKey.UUID_KEY,String.class));
  this.firstTimeOnline=getValueFrom(player,MongoKey.FIRST_JOIN_KEY,Date.class);
  this.lastTimeOnline=getValueFrom(player,MongoKey.LAST_SEEN_KEY,Date.class);
  Long time_online=getValueFrom(player,MongoKey.TIME_ONLINE_KEY,Long.class);
  this.millisecondsOnline=time_online == null ? 0 : time_online;
  List<String> ips=getListFor(getValueFrom(player,MongoKey.IPS_KEY,BasicDBList.class),String.class);
  this.knownIPAddresses=ips == null ? new ArrayList<String>() : ips;
  List<String> usernames=getListFor(getValueFrom(player,MongoKey.USERNAMES_KEY,BasicDBList.class),String.class);
  this.knownUsernames=usernames == null ? new ArrayList<String>() : usernames;
  @SuppressWarnings(""String_Node_Str"") Map<String,Object> settings1=getValueFrom(player,MongoKey.SETTINGS_KEY,HashMap.class);
  this.settings=settings1 == null ? new HashMap<String,Object>() : settings1;
  this.assets=new ArrayList<>();
  List<DBObject> assets1=getListFor(getValueFrom(player,MongoKey.ASSETS_KEY,BasicDBList.class),DBObject.class);
  for (  DBObject assetObject : assets1) {
    String fqcn=getValueFrom(assetObject,MongoKey.FULLY_QUALIFIED_CLASS_NAME_KEY,String.class);
    Class<?> assetClass;
    try {
      assetClass=Class.forName(fqcn);
      if (!Asset.class.isAssignableFrom(assetClass))       throw new IllegalClassException(""String_Node_Str"");
      Map<String,Object> meta=getMapFor(getValueFrom(assetObject,MongoKey.META_KEY,DBObject.class));
      Asset asset=(Asset)assetClass.getConstructor(COfflinePlayer.class,Map.class).newInstance(this,meta);
      this.assets.add(asset);
    }
 catch (    InvocationTargetException|NoSuchMethodException|InstantiationException|IllegalAccessException|ClassNotFoundException|IllegalClassException e) {
      Core.getInstance().getLogger().severe(""String_Node_Str"" + this.lastKnownUsername + ""String_Node_Str""+ fqcn+ ""String_Node_Str""+ e.getMessage());
    }
  }
  CPermissible permissibleDataFor=getPermissibileDataFor(player);
  this.chatColor=permissibleDataFor.getChatColor();
  this.chatPrefix=permissibleDataFor.getChatPrefix();
  this.chatSuffix=permissibleDataFor.getChatSuffix();
  this.tablistColor=permissibleDataFor.getTablistColor();
  this.declaredPermissions=permissibleDataFor.getDeclaredPermissions();
  if (this.declaredPermissions == null)   this.declaredPermissions=new HashMap<>();
  groupIds=getListFor(getValueFrom(player,MongoKey.USER_GROUPS_KEY,BasicDBList.class),ObjectId.class);
  reloadPermissions0();
}",0.9899065420560748
86370,"public static BasicDBObjectBuilder getObjectForPermissible(CPermissible permissible){
  BasicDBObjectBuilder builder=new BasicDBObjectBuilder();
  if (permissible.getTablistColor() != null)   builder.add(MongoKey.GROUPS_TABLIST_COLOR_KEY.toString(),permissible.getTablistColor().name());
  if (permissible.getChatColor() != null)   builder.add(MongoKey.GROUPS_CHAT_COLOR_KEY.toString(),permissible.getChatColor().name());
  if (permissible.getChatPrefix() != null)   builder.add(MongoKey.GROUPS_CHAT_PREFIX_KEY.toString(),permissible.getChatPrefix());
  if (permissible.getDeclaredPermissions().size() > 0)   builder.add(MongoKey.GROUPS_PERMISSIONS_KEY.toString(),getDBObjectFor(permissible.getDeclaredPermissions()));
  return builder;
}","public static BasicDBObjectBuilder getObjectForPermissible(CPermissible permissible){
  BasicDBObjectBuilder builder=new BasicDBObjectBuilder();
  if (permissible.getTablistColor() != null)   builder.add(MongoKey.GROUPS_TABLIST_COLOR_KEY.toString(),permissible.getTablistColor().name());
  if (permissible.getChatColor() != null)   builder.add(MongoKey.GROUPS_CHAT_COLOR_KEY.toString(),permissible.getChatColor().name());
  if (permissible.getChatPrefix() != null)   builder.add(MongoKey.GROUPS_CHAT_PREFIX_KEY.toString(),permissible.getChatPrefix());
  if (permissible.getChatSuffix() != null)   builder.add(MongoKey.GROUPS_CHAT_SUFFIX_KEY.toString(),permissible.getChatSuffix());
  if (permissible.getDeclaredPermissions().size() > 0)   builder.add(MongoKey.GROUPS_PERMISSIONS_KEY.toString(),getDBObjectFor(permissible.getDeclaredPermissions()));
  return builder;
}",0.9190535491905356
86371,"public static CPermissible getPermissibileDataFor(DBObject object){
  final Map<String,Boolean> declaredPermissions=getMapFor(getValueFrom(object,MongoKey.GROUPS_PERMISSIONS_KEY,BasicDBObject.class),Boolean.class);
  String cColor=getValueFrom(object,MongoKey.GROUPS_CHAT_COLOR_KEY,String.class);
  final ChatColor chatColor=cColor == null ? null : ChatColor.valueOf(cColor);
  String tColor=getValueFrom(object,MongoKey.GROUPS_TABLIST_COLOR_KEY,String.class);
  final ChatColor tablistColor=tColor == null ? null : ChatColor.valueOf(tColor);
  final String chatPrefix=getValueFrom(object,MongoKey.GROUPS_CHAT_PREFIX_KEY,String.class);
  return new CPermissible(){
    @Override public ChatColor getChatColor(){
      return chatColor;
    }
    @Override public ChatColor getTablistColor(){
      return tablistColor;
    }
    @Override public String getChatPrefix(){
      return chatPrefix;
    }
    @Override public void setChatColor(    ChatColor color){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    @Override public void setTablistColor(    ChatColor color){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    @Override public void setChatPrefix(    String prefix){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    @Override public void setPermission(    String permission,    Boolean value){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    @Override public void unsetPermission(    String permission){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    @Override public boolean hasPermission(    String permission){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    @Override public Map<String,Boolean> getDeclaredPermissions(){
      return declaredPermissions;
    }
    @Override public void reloadPermissions(){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    @Override public String getName(){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
  }
;
}","public static CPermissible getPermissibileDataFor(DBObject object){
  final Map<String,Boolean> declaredPermissions=getMapFor(getValueFrom(object,MongoKey.GROUPS_PERMISSIONS_KEY,BasicDBObject.class),Boolean.class);
  String cColor=getValueFrom(object,MongoKey.GROUPS_CHAT_COLOR_KEY,String.class);
  final ChatColor chatColor=cColor == null ? null : ChatColor.valueOf(cColor);
  String tColor=getValueFrom(object,MongoKey.GROUPS_TABLIST_COLOR_KEY,String.class);
  final ChatColor tablistColor=tColor == null ? null : ChatColor.valueOf(tColor);
  final String chatPrefix=getValueFrom(object,MongoKey.GROUPS_CHAT_PREFIX_KEY,String.class);
  final String chatSuffix=getValueFrom(object,MongoKey.GROUPS_CHAT_SUFFIX_KEY,String.class);
  return new CPermissible(){
    @Override public ChatColor getChatColor(){
      return chatColor;
    }
    @Override public ChatColor getTablistColor(){
      return tablistColor;
    }
    @Override public String getChatPrefix(){
      return chatPrefix;
    }
    @Override public String getChatSuffix(){
      return chatSuffix;
    }
    @Override public void setChatColor(    ChatColor color){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    @Override public void setTablistColor(    ChatColor color){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    @Override public void setChatPrefix(    String prefix){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    @Override public void setChatSuffix(    String suffix){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    @Override public void setPermission(    String permission,    Boolean value){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    @Override public void unsetPermission(    String permission){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    @Override public boolean hasPermission(    String permission){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    @Override public boolean isSet(    String permission){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    @Override public Map<String,Boolean> getDeclaredPermissions(){
      return declaredPermissions;
    }
    @Override public void reloadPermissions(){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    @Override public String getName(){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
  }
;
}",0.8783253379851723
86372,"@Override public IQ.IQChildElementXmlStringBuilder getIQChildElementBuilder(IQ.IQChildElementXmlStringBuilder xml){
  xml.append(""String_Node_Str"" + ROOM_ATTR_NAME + ""String_Node_Str""+ serverInfo.getRoomURL()+ ""String_Node_Str"");
  xml.append(""String_Node_Str"" + MACHINE_UID_ATTR_NAME + ""String_Node_Str""+ machineUID+ ""String_Node_Str"");
  if (this.conferenceProperties.isEmpty()) {
    xml.append(""String_Node_Str"");
  }
 else {
    xml.append(""String_Node_Str"");
    for (    ConferencePropertyPacketExtension cppe : conferenceProperties) {
      xml.append(cppe.toXML());
    }
  }
  return xml;
}","@Override public IQ.IQChildElementXmlStringBuilder getIQChildElementBuilder(IQ.IQChildElementXmlStringBuilder xml){
  if (serverInfo != null) {
    xml.attribute(ROOM_ATTR_NAME,serverInfo.getRoomURL());
  }
  xml.attribute(MACHINE_UID_ATTR_NAME,machineUID.toString());
  xml.rightAngleBracket();
{
    for (    ConferencePropertyPacketExtension cppe : conferenceProperties) {
      xml.element(cppe);
    }
  }
  return xml;
}",0.6237816764132553
86373,"/** 
 * Construct this <tt>ConferencePropertyPacketExtension</tt> using given property name and value
 * @param propertyName the property name
 * @param propertyValue the property value
 */
public ConferencePropertyPacketExtension(String propertyName,String propertyValue){
  super(null,ELEMENT_NAME);
  setPropertyName(propertyName);
  setPropertyValue(propertyValue);
}","/** 
 * Construct this <tt>ConferencePropertyPacketExtension</tt> using given property name and value
 * @param propertyName the property name
 * @param propertyValue the property value
 */
public ConferencePropertyPacketExtension(String propertyName,String propertyValue){
  super(ELEMENT_NAME,null);
  setPropertyName(propertyName);
  setPropertyValue(propertyValue);
}",0.9865229110512128
86374,"@Override public NewJingleIQ parse(XmlPullParser parser,int initialDepth) throws XmlPullParserException, IOException {
  NewJingleIQ jingleIQ=new NewJingleIQ();
  JingleAction action=JingleAction.parseString(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
  String initiator=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  String responder=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  String sid=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  jingleIQ.setAction(action);
  jingleIQ.setInitiator(initiator);
  jingleIQ.setResponder(responder);
  jingleIQ.setSID(sid);
  boolean done=false;
  try {
    while (!done) {
      int eventType=parser.next();
      String elementName=parser.getName();
      String namespace=parser.getNamespace();
      if (eventType == 2) {
        ExtensionElementProvider provider=ProviderManager.getExtensionProvider(elementName,namespace);
        if (provider != null) {
          Element child=null;
          try {
            child=provider.parse(parser);
          }
 catch (          Exception e) {
            System.out.println(""String_Node_Str"" + e.toString());
          }
          if (child instanceof NewContentPacketExtension) {
            System.out.println(""String_Node_Str"");
            jingleIQ.addContent((NewContentPacketExtension)child);
          }
          System.out.println(""String_Node_Str"");
        }
      }
      if (eventType == 3 && parser.getName().equals(""String_Node_Str"")) {
        done=true;
      }
    }
  }
 catch (  Exception e) {
  }
  return jingleIQ;
}","@Override public NewJingleIQ parse(XmlPullParser parser,int initialDepth) throws XmlPullParserException, IOException {
  NewJingleIQ jingleIQ=new NewJingleIQ();
  NewJingleAction action=NewJingleAction.parseString(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
  String initiator=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  String responder=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  String sid=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  jingleIQ.setAction(action);
  jingleIQ.setInitiator(initiator);
  jingleIQ.setResponder(responder);
  jingleIQ.setSID(sid);
  boolean done=false;
  try {
    while (!done) {
      int eventType=parser.next();
      String elementName=parser.getName();
      String namespace=parser.getNamespace();
      if (eventType == 2) {
        ExtensionElementProvider provider=ProviderManager.getExtensionProvider(elementName,namespace);
        if (provider != null) {
          Element child=null;
          try {
            child=provider.parse(parser);
          }
 catch (          Exception e) {
            System.out.println(""String_Node_Str"" + e.toString());
          }
          if (child instanceof NewContentPacketExtension) {
            jingleIQ.addContent((NewContentPacketExtension)child);
          }
 else {
            System.out.println(""String_Node_Str"" + elementName + ""String_Node_Str""+ namespace);
          }
        }
 else {
          System.out.println(""String_Node_Str"" + elementName + ""String_Node_Str""+ namespace);
        }
      }
      if (eventType == 3 && parser.getName().equals(""String_Node_Str"")) {
        done=true;
      }
    }
  }
 catch (  Exception e) {
  }
  return jingleIQ;
}",0.9293413173652696
86375,"/** 
 * Returns this packet's first direct child extension that matches the specified <tt>type</tt>.
 * @param < T > the specific type of <tt>PacketExtension</tt> to be returned
 * @param type the <tt>Class</tt> of the extension we are looking for.
 * @return this packet's first direct child extension that matches specified<tt>type</tt> or <tt>null</tt> if no such child extension was found.
 */
public <T extends NewAbstractExtensionElement>T getFirstChildOfType(Class<T> type){
  List<? extends Element> childExtensions=getChildExtensions();
synchronized (childExtensions) {
    for (    Element extension : childExtensions) {
      if (type.isInstance(extension)) {
        @SuppressWarnings(""String_Node_Str"") T extensionAsType=(T)extension;
        return extensionAsType;
      }
    }
  }
  return null;
}","/** 
 * Returns this packet's first direct child extension that matches the specified <tt>type</tt>.
 * @param < T > the specific type of <tt>PacketExtension</tt> to be returned
 * @param type the <tt>Class</tt> of the extension we are looking for.
 * @return this packet's first direct child extension that matches specified<tt>type</tt> or <tt>null</tt> if no such child extension was found.
 */
public <T extends NewAbstractExtensionElement>T getFirstChildOfType(Class<T> type){
synchronized (childExtensions) {
    return getChildExtensions().stream().filter(element -> type.isInstance(element)).map(element -> (T)element).findFirst().get();
  }
}",0.6948805460750853
86376,"/** 
 * Returns this packet's direct child extensions that match the specified <tt>type</tt>.
 * @param < T > the specific <tt>PacketExtension</tt> type of child extensionsto be returned
 * @param type the <tt>Class</tt> of the extension we are looking for.
 * @return a (possibly empty) list containing all of this packet's directchild extensions that match the specified <tt>type</tt>
 */
public <T extends NewAbstractExtensionElement>List<T> getChildExtensionsOfType(Class<T> type){
  return getChildExtensions().stream().filter(element -> type.isInstance(element)).map(element -> (T)element).collect(Collectors.toList());
}","/** 
 * Returns this packet's direct child extensions that match the specified <tt>type</tt>.
 * @param < T > the specific <tt>PacketExtension</tt> type of child extensionsto be returned
 * @param type the <tt>Class</tt> of the extension we are looking for.
 * @return a (possibly empty) list containing all of this packet's directchild extensions that match the specified <tt>type</tt>
 */
public <T extends NewAbstractExtensionElement>List<T> getChildExtensionsOfType(Class<T> type){
synchronized (childExtensions) {
    return getChildExtensions().stream().filter(element -> type.isInstance(element)).map(element -> (T)element).collect(Collectors.toList());
  }
}",0.9698375870069604
86377,"/** 
 * Parse an extension sub-packet and create a <tt>C</tt> instance. At the beginning of the method call, the xml parser will be positioned on the opening element of the packet extension and at the end of the method call it will be on the closing element of the packet extension.
 * @param parser an XML parser positioned at the packet's starting element.
 * @return a new packet extension instance.
 * @throws java.lang.Exception if an error occurs parsing the XML.
 */
public C parse(XmlPullParser parser,int initialDepth) throws Exception {
  C packetExtension=packetClass.newInstance();
  int attrCount=parser.getAttributeCount();
  for (int i=0; i < attrCount; i++) {
    packetExtension.setAttribute(parser.getAttributeName(i),parser.getAttributeValue(i));
  }
  boolean done=false;
  int eventType;
  String elementName;
  String namespace;
  while (!done) {
    eventType=parser.next();
    elementName=parser.getName();
    namespace=parser.getNamespace();
{
      logger.info(""String_Node_Str"" + elementName + ""String_Node_Str""+ namespace+ ""String_Node_Str""+ packetExtension.getClass().getSimpleName());
    }
    if (eventType == XmlPullParser.START_TAG) {
      ExtensionElementProvider provider;
      provider=ProviderManager.getExtensionProvider(elementName,namespace);
      ProviderManager.getExtensionProviders();
      if (provider == null) {
        logger.info(""String_Node_Str"" + elementName + ""String_Node_Str""+ namespace);
      }
 else {
        Element childExtension=provider.parse(parser);
        packetExtension.addChildExtension(childExtension);
      }
    }
    if (eventType == XmlPullParser.END_TAG) {
      if (parser.getName().equals(packetExtension.getElementName())) {
        done=true;
      }
    }
    if (eventType == XmlPullParser.TEXT) {
      String text=parser.getText();
      packetExtension.setText(text);
    }
{
      logger.info(""String_Node_Str"" + elementName);
    }
  }
  return packetExtension;
}","/** 
 * Parse an extension sub-packet and create a <tt>C</tt> instance. At the beginning of the method call, the xml parser will be positioned on the opening element of the packet extension and at the end of the method call it will be on the closing element of the packet extension.
 * @param parser an XML parser positioned at the packet's starting element.
 * @return a new packet extension instance.
 * @throws java.lang.Exception if an error occurs parsing the XML.
 */
public C parse(XmlPullParser parser,int initialDepth) throws Exception {
  C packetExtension=packetClass.newInstance();
  int attrCount=parser.getAttributeCount();
  for (int i=0; i < attrCount; i++) {
    packetExtension.setAttribute(parser.getAttributeName(i),parser.getAttributeValue(i));
  }
  boolean done=false;
  int eventType;
  String elementName;
  String namespace;
  while (!done) {
    eventType=parser.next();
    elementName=parser.getName();
    namespace=parser.getNamespace();
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + elementName + ""String_Node_Str""+ namespace+ ""String_Node_Str""+ packetExtension.getClass().getSimpleName()+ ""String_Node_Str""+ parser.getDepth());
    }
    if (eventType == XmlPullParser.START_TAG) {
      ExtensionElementProvider provider;
      provider=ProviderManager.getExtensionProvider(elementName,namespace);
      ProviderManager.getExtensionProviders();
      if (provider == null) {
        logger.info(""String_Node_Str"" + elementName + ""String_Node_Str""+ namespace);
      }
 else {
        Element childExtension=provider.parse(parser);
        packetExtension.addChildExtension(childExtension);
      }
    }
    if (eventType == XmlPullParser.END_TAG) {
      if (parser.getName().equals(packetExtension.getElementName())) {
        done=true;
      }
    }
    if (eventType == XmlPullParser.TEXT) {
      String text=parser.getText();
      packetExtension.setText(text);
    }
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + elementName + ""String_Node_Str""+ namespace+ ""String_Node_Str""+ packetExtension.getClass().getSimpleName()+ ""String_Node_Str""+ parser.getDepth());
    }
  }
  return packetExtension;
}",0.9375300336376742
86378,"/** 
 * Instantiates a <tt>FakeUser</tt> with a specified <tt>nickname</tt> that will connect to the XMPP server contained in <tt>hostInfo</tt>.
 * @param hammer the <tt>Hammer</tt> instance to which this <tt>FakeUser</tt> belongs
 * @param mdc The <tt>MediaDeviceChooser</tt> that will be used by this<tt>FakeUser</tt> to choose the <tt>MediaDevice</tt> for each of its <tt>MediaStream</tt>s.
 * @param nickname the nickname used by this <tt>FakeUser</tt> in theconnection.
 * @param smackDebug the boolean activating or not the debug screen of smack
 */
public FakeUser(Hammer hammer,MediaDeviceChooser mdc,String nickname,boolean smackDebug,boolean statisticsEnabled){
  this.hammer=hammer;
  this.serverInfo=hammer.getServerInfo();
  this.mediaDeviceChooser=mdc;
  this.nickname=(nickname == null) ? ""String_Node_Str"" : nickname;
  this.conferenceInfo=hammer.getConferenceInfo();
  fakeUserStats=statisticsEnabled ? new FakeUserStats(nickname) : null;
  try {
    config=BOSHConfiguration.builder().setUseHttps(serverInfo.getUseHTTPS()).setHost(serverInfo.getBOSHhostname()).setFile(serverInfo.getBOSHpath()).setPort(serverInfo.getPort()).setXmppDomain(serverInfo.getXMPPDomain()).setDebuggerEnabled(true).performSaslAnonymousAuthentication().build();
  }
 catch (  XmppStringprepException e) {
    logger.fatal(""String_Node_Str"" + e.toString());
    System.exit(1);
  }
  ProviderManager.addIQProvider(NewJingleIQ.ELEMENT_NAME,NewJingleIQ.NAMESPACE,new JingleProvider());
  ProviderManager.addIQProvider(ConferenceInitiationIQ.ELEMENT_NAME,ConferenceInitiationIQ.NAMESPACE,new ConferenceInitiationIQProvider());
  ProviderManager.addExtensionProvider(NewContentPacketExtension.ELEMENT_NAME,NewContentPacketExtension.NAMESPACE,new NewAbstractExtensionElementProvider<>(NewContentPacketExtension.class));
  ProviderManager.addExtensionProvider(RtpDescriptionPacketExtension.ELEMENT_NAME,RtpDescriptionPacketExtension.NAMESPACE,new NewAbstractExtensionElementProvider<>(NewRtpDescriptionPacketExtension.class));
  ProviderManager.addExtensionProvider(NewPayloadTypePacketExtension.ELEMENT_NAME,NewPayloadTypePacketExtension.NAMESPACE,new NewAbstractExtensionElementProvider<>(NewPayloadTypePacketExtension.class));
  ProviderManager.addExtensionProvider(NewParameterPacketExtension.ELEMENT_NAME,""String_Node_Str"",new NewAbstractExtensionElementProvider<>(NewParameterPacketExtension.class));
  ProviderManager.addExtensionProvider(NewParameterPacketExtension.ELEMENT_NAME,""String_Node_Str"",new NewAbstractExtensionElementProvider<>(NewParameterPacketExtension.class));
  ProviderManager.addExtensionProvider(NewRtcpFbPacketExtension.ELEMENT_NAME,NewRtcpFbPacketExtension.NAMESPACE,new NewAbstractExtensionElementProvider<>(NewRtcpFbPacketExtension.class));
  ProviderManager.addExtensionProvider(NewRTPHdrExtPacketExtension.ELEMENT_NAME,NewRTPHdrExtPacketExtension.NAMESPACE,new NewAbstractExtensionElementProvider<>(NewRTPHdrExtPacketExtension.class));
  ProviderManager.addExtensionProvider(NewSourcePacketExtension.ELEMENT_NAME,NewSourcePacketExtension.NAMESPACE,new NewAbstractExtensionElementProvider<>(NewSourcePacketExtension.class));
  ProviderManager.addExtensionProvider(NewSSRCInfoPacketExtension.ELEMENT_NAME,NewSSRCInfoPacketExtension.NAMESPACE,new NewAbstractExtensionElementProvider<>(NewSSRCInfoPacketExtension.class));
  ProviderManager.addExtensionProvider(NewIceUdpTransportPacketExtension.ELEMENT_NAME,NewIceUdpTransportPacketExtension.NAMESPACE,new NewAbstractExtensionElementProvider<>(NewIceUdpTransportPacketExtension.class));
  ProviderManager.addExtensionProvider(NewDtlsFingerprintPacketExtension.ELEMENT_NAME,NewDtlsFingerprintPacketExtension.NAMESPACE,new NewAbstractExtensionElementProvider<>(NewDtlsFingerprintPacketExtension.class));
  ProviderManager.addExtensionProvider(NewCandidatePacketExtension.ELEMENT_NAME,""String_Node_Str"",new NewAbstractExtensionElementProvider<>(NewCandidatePacketExtension.class));
  ProviderManager.addExtensionProvider(NewCandidatePacketExtension.ELEMENT_NAME,""String_Node_Str"",new NewAbstractExtensionElementProvider<>(NewCandidatePacketExtension.class));
  ProviderManager.addExtensionProvider(NewSourceGroupPacketExtension.ELEMENT_NAME,NewSourceGroupPacketExtension.NAMESPACE,new NewAbstractExtensionElementProvider<>(NewSourceGroupPacketExtension.class));
  connection=new XMPPBOSHConnection(config);
  connection.addSyncStanzaListener(this,(  Stanza packet) -> packet instanceof NewJingleIQ);
  mediaStreamMap=HammerUtils.createMediaStreams();
  if (fakeUserStats != null) {
    fakeUserStats.setMediaStreamStats(mediaStreamMap.get(MediaType.AUDIO.toString()));
    fakeUserStats.setMediaStreamStats(mediaStreamMap.get(MediaType.VIDEO.toString()));
  }
  ServiceDiscoveryManager discoManager=ServiceDiscoveryManager.getInstanceFor(connection);
  discoManager.addFeature(JingleIQ.NAMESPACE);
  discoManager.addFeature(RtpDescriptionPacketExtension.NAMESPACE);
  discoManager.addFeature(RawUdpTransportPacketExtension.NAMESPACE);
  discoManager.addFeature(IceUdpTransportPacketExtension.NAMESPACE);
  discoManager.addFeature(DtlsFingerprintPacketExtension.NAMESPACE);
  discoManager.addFeature(RTPHdrExtPacketExtension.NAMESPACE);
  discoManager.addFeature(""String_Node_Str"");
  discoManager.addFeature(""String_Node_Str"");
  org.jivesoftware.smackx.ping.PingManager.getInstanceFor(connection).setPingInterval(15);
}","/** 
 * Instantiates a <tt>FakeUser</tt> with a specified <tt>nickname</tt> that will connect to the XMPP server contained in <tt>hostInfo</tt>.
 * @param hammer the <tt>Hammer</tt> instance to which this <tt>FakeUser</tt> belongs
 * @param mdc The <tt>MediaDeviceChooser</tt> that will be used by this<tt>FakeUser</tt> to choose the <tt>MediaDevice</tt> for each of its <tt>MediaStream</tt>s.
 * @param nickname the nickname used by this <tt>FakeUser</tt> in theconnection.
 * @param smackDebug the boolean activating or not the debug screen of smack
 */
public FakeUser(Hammer hammer,MediaDeviceChooser mdc,String nickname,boolean smackDebug,boolean statisticsEnabled){
  this.hammer=hammer;
  this.serverInfo=hammer.getServerInfo();
  this.mediaDeviceChooser=mdc;
  this.nickname=(nickname == null) ? ""String_Node_Str"" : nickname;
  this.conferenceInfo=hammer.getConferenceInfo();
  fakeUserStats=statisticsEnabled ? new FakeUserStats(nickname) : null;
  try {
    config=BOSHConfiguration.builder().setUseHttps(serverInfo.getUseHTTPS()).setHost(serverInfo.getBOSHhostname()).setFile(serverInfo.getBOSHpath()).setPort(serverInfo.getPort()).setXmppDomain(serverInfo.getXMPPDomain()).setDebuggerEnabled(true).performSaslAnonymousAuthentication().build();
  }
 catch (  XmppStringprepException e) {
    logger.fatal(""String_Node_Str"" + e.toString());
    System.exit(1);
  }
  ProviderManager.addIQProvider(NewJingleIQ.ELEMENT_NAME,NewJingleIQ.NAMESPACE,new JingleProvider());
  ProviderManager.addIQProvider(ConferenceInitiationIQ.ELEMENT_NAME,ConferenceInitiationIQ.NAMESPACE,new ConferenceInitiationIQProvider());
  ProviderManager.addExtensionProvider(NewContentPacketExtension.ELEMENT_NAME,NewContentPacketExtension.NAMESPACE,new NewAbstractExtensionElementProvider<>(NewContentPacketExtension.class));
  ProviderManager.addExtensionProvider(RtpDescriptionPacketExtension.ELEMENT_NAME,RtpDescriptionPacketExtension.NAMESPACE,new NewAbstractExtensionElementProvider<>(NewRtpDescriptionPacketExtension.class));
  ProviderManager.addExtensionProvider(NewPayloadTypePacketExtension.ELEMENT_NAME,NewPayloadTypePacketExtension.NAMESPACE,new NewAbstractExtensionElementProvider<>(NewPayloadTypePacketExtension.class));
  ProviderManager.addExtensionProvider(NewParameterPacketExtension.ELEMENT_NAME,""String_Node_Str"",new NewAbstractExtensionElementProvider<>(NewParameterPacketExtension.class));
  ProviderManager.addExtensionProvider(NewParameterPacketExtension.ELEMENT_NAME,""String_Node_Str"",new NewAbstractExtensionElementProvider<>(NewParameterPacketExtension.class));
  ProviderManager.addExtensionProvider(NewRtcpFbPacketExtension.ELEMENT_NAME,NewRtcpFbPacketExtension.NAMESPACE,new NewAbstractExtensionElementProvider<>(NewRtcpFbPacketExtension.class));
  ProviderManager.addExtensionProvider(NewRTPHdrExtPacketExtension.ELEMENT_NAME,NewRTPHdrExtPacketExtension.NAMESPACE,new NewAbstractExtensionElementProvider<>(NewRTPHdrExtPacketExtension.class));
  ProviderManager.addExtensionProvider(NewSourcePacketExtension.ELEMENT_NAME,NewSourcePacketExtension.NAMESPACE,new NewAbstractExtensionElementProvider<>(NewSourcePacketExtension.class));
  ProviderManager.addExtensionProvider(NewSSRCInfoPacketExtension.ELEMENT_NAME,NewSSRCInfoPacketExtension.NAMESPACE,new NewAbstractExtensionElementProvider<>(NewSSRCInfoPacketExtension.class));
  ProviderManager.addExtensionProvider(NewIceUdpTransportPacketExtension.ELEMENT_NAME,NewIceUdpTransportPacketExtension.NAMESPACE,new NewAbstractExtensionElementProvider<>(NewIceUdpTransportPacketExtension.class));
  ProviderManager.addExtensionProvider(NewDtlsFingerprintPacketExtension.ELEMENT_NAME,NewDtlsFingerprintPacketExtension.NAMESPACE,new NewAbstractExtensionElementProvider<>(NewDtlsFingerprintPacketExtension.class));
  ProviderManager.addExtensionProvider(NewCandidatePacketExtension.ELEMENT_NAME,""String_Node_Str"",new NewAbstractExtensionElementProvider<>(NewCandidatePacketExtension.class));
  ProviderManager.addExtensionProvider(NewCandidatePacketExtension.ELEMENT_NAME,""String_Node_Str"",new NewAbstractExtensionElementProvider<>(NewCandidatePacketExtension.class));
  ProviderManager.addExtensionProvider(NewSourceGroupPacketExtension.ELEMENT_NAME,NewSourceGroupPacketExtension.NAMESPACE,new NewAbstractExtensionElementProvider<>(NewSourceGroupPacketExtension.class));
  connection=new XMPPBOSHConnection(config);
  connection.registerIQRequestHandler(new AbstractIqRequestHandler(NewJingleIQ.ELEMENT_NAME,NewJingleIQ.NAMESPACE,IQ.Type.set,IQRequestHandler.Mode.sync){
    @Override public IQ handleIQRequest(    IQ iq){
      NewJingleIQ jiq=(NewJingleIQ)iq;
      System.out.println(""String_Node_Str"" + jiq.toXML());
      IQ result=IQ.createResultIQ(iq);
switch (jiq.getAction()) {
case SESSION_INITIATE:
        logger.info(""String_Node_Str"");
      sessionInitiate=jiq;
    acceptJingleSession();
}
return result;
}
}
);
mediaStreamMap=HammerUtils.createMediaStreams();
if (fakeUserStats != null) {
fakeUserStats.setMediaStreamStats(mediaStreamMap.get(MediaType.AUDIO.toString()));
fakeUserStats.setMediaStreamStats(mediaStreamMap.get(MediaType.VIDEO.toString()));
}
ServiceDiscoveryManager discoManager=ServiceDiscoveryManager.getInstanceFor(connection);
discoManager.addFeature(JingleIQ.NAMESPACE);
discoManager.addFeature(RtpDescriptionPacketExtension.NAMESPACE);
discoManager.addFeature(RawUdpTransportPacketExtension.NAMESPACE);
discoManager.addFeature(IceUdpTransportPacketExtension.NAMESPACE);
discoManager.addFeature(DtlsFingerprintPacketExtension.NAMESPACE);
discoManager.addFeature(RTPHdrExtPacketExtension.NAMESPACE);
discoManager.addFeature(""String_Node_Str"");
discoManager.addFeature(""String_Node_Str"");
org.jivesoftware.smackx.ping.PingManager.getInstanceFor(connection).setPingInterval(15);
}",0.9461034884763698
86379,"/** 
 * acceptJingleSession create a accept-session Jingle message and send it to the initiator of the session. The initiator is taken from the From attribute of the initiate-session message.
 */
private void acceptJingleSession(){
  Map<String,NewContentPacketExtension> contentMap=new HashMap<>();
  Map<String,MediaFormat> selectedFormats=new HashMap<String,MediaFormat>();
  Map<String,List<RTPExtension>> selectedRtpExtensions=new HashMap<String,List<RTPExtension>>();
  DynamicPayloadTypeRegistry ptRegistry=new DynamicPayloadTypeRegistry();
  DynamicRTPExtensionsRegistry rtpExtRegistry=new DynamicRTPExtensionsRegistry();
  for (  NewContentPacketExtension cpe : sessionInitiate.getContentList()) {
    NewContentPacketExtension localContent;
    if (cpe.getName().equalsIgnoreCase(""String_Node_Str"")) {
      localContent=HammerUtils.createDescriptionForDataContent(NewContentPacketExtension.CreatorEnum.responder,NewContentPacketExtension.SendersEnum.both);
    }
 else {
      NewRtpDescriptionPacketExtension description=cpe.getFirstChildOfType(NewRtpDescriptionPacketExtension.class);
      if (description == null) {
        continue;
      }
      List<MediaFormat> mediaFormats=HammerJingleUtils.extractFormats(description,ptRegistry);
      List<RTPExtension> remoteRtpExtensions=HammerJingleUtils.extractRTPExtensions(description,rtpExtRegistry);
      List<RTPExtension> supportedRtpExtension=getExtensionsForType(MediaType.parseString(cpe.getName()));
      List<RTPExtension> rtpExtensionIntersection=intersectRTPExtensions(remoteRtpExtensions,supportedRtpExtension);
      selectedRtpExtensions.put(cpe.getName(),rtpExtensionIntersection);
      localContent=HammerJingleUtils.createDescription(NewContentPacketExtension.CreatorEnum.responder,cpe.getName(),NewContentPacketExtension.SendersEnum.both,mediaFormats,rtpExtensionIntersection,ptRegistry,rtpExtRegistry);
    }
    contentMap.put(cpe.getName(),localContent);
  }
  contentMap.remove(""String_Node_Str"");
  IceMediaStreamGenerator iceMediaStreamGenerator=IceMediaStreamGenerator.getInstance();
  try {
    iceMediaStreamGenerator.generateIceMediaStream(agent,contentMap.keySet(),null,null);
  }
 catch (  IOException e) {
    logger.fatal(this.nickname + ""String_Node_Str"" + ""String_Node_Str"",e);
  }
  HammerUtils.addRemoteCandidateToAgent(agent,sessionInitiate.getContentList());
  HammerUtils.addLocalCandidateToContentList(agent,contentMap.values());
  HammerUtils.configureMediaStream(mediaStreamMap,selectedFormats,selectedRtpExtensions,mediaDeviceChooser,ptRegistry,rtpExtRegistry);
  HammerUtils.addSSRCToContent(contentMap,mediaStreamMap);
  Stanza presencePacketWithSSRC=new Presence(Presence.Type.available);
  Jid recipient=null;
  try {
    recipient=JidCreate.entityFullFrom(serverInfo.getRoomName() + ""String_Node_Str"" + serverInfo.getMUCDomain()+ ""String_Node_Str""+ nickname);
  }
 catch (  XmppStringprepException e) {
    logger.error(""String_Node_Str"" + e.toString());
  }
  presencePacketWithSSRC.setTo(recipient);
  presencePacketWithSSRC.addExtension(new Nick(this.nickname));
  MediaPacketExtension mediaPacket=new MediaPacketExtension();
  for (  String key : contentMap.keySet()) {
    String str=String.valueOf(mediaStreamMap.get(key).getLocalSourceID());
    mediaPacket.addSource(key,str,MediaDirection.SENDRECV.toString());
  }
  presencePacketWithSSRC.addExtension(mediaPacket);
  try {
    System.out.println(""String_Node_Str"" + presencePacketWithSSRC.toXML());
    connection.sendStanza(presencePacketWithSSRC);
    sessionAccept=new NewJingleIQ();
    sessionAccept.setTo(sessionInitiate.getFrom());
    sessionAccept.setFrom(sessionInitiate.getTo());
    sessionAccept.setResponder(sessionInitiate.getTo().toString());
    sessionAccept.setType(IQ.Type.set);
    sessionAccept.setSID(sessionInitiate.getSID());
    sessionAccept.setAction(NewJingleAction.SESSION_ACCEPT);
    for (    NewContentPacketExtension cpe : contentMap.values()) {
      sessionAccept.addContent(cpe);
    }
    sessionAccept.setInitiator(sessionInitiate.getFrom().toString());
    HammerUtils.setDtlsEncryptionOnTransport(mediaStreamMap,sessionAccept.getContentList(),sessionInitiate.getContentList());
    System.out.println(""String_Node_Str"" + sessionAccept.toXML());
    connection.sendStanza(sessionAccept);
    logger.info(this.nickname + ""String_Node_Str"");
  }
 catch (  SmackException.NotConnectedException e) {
    logger.fatal(""String_Node_Str"");
    System.exit(1);
  }
catch (  InterruptedException e) {
    logger.fatal(""String_Node_Str"" + e.toString());
    System.exit(1);
  }
  final Object syncRoot=new Object();
  PropertyChangeListener propertyChangeListener=new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent ev){
      Object newValue=ev.getNewValue();
      if (IceProcessingState.COMPLETED.equals(newValue) || IceProcessingState.FAILED.equals(newValue) || IceProcessingState.TERMINATED.equals(newValue)) {
        Agent iceAgent=(Agent)ev.getSource();
        iceAgent.removeStateChangeListener(this);
        if (iceAgent == FakeUser.this.agent) {
synchronized (syncRoot) {
            syncRoot.notify();
          }
        }
      }
    }
  }
;
  agent.addStateChangeListener(propertyChangeListener);
  agent.startConnectivityEstablishment();
synchronized (syncRoot) {
    long startWait=System.currentTimeMillis();
    do {
      IceProcessingState iceState=agent.getState();
      if (IceProcessingState.COMPLETED.equals(iceState) || IceProcessingState.TERMINATED.equals(iceState) || IceProcessingState.FAILED.equals(iceState))       break;
      if (System.currentTimeMillis() - startWait > 10000)       break;
      try {
        syncRoot.wait(1000);
      }
 catch (      InterruptedException ie) {
        logger.fatal(""String_Node_Str"" + ie);
        break;
      }
    }
 while (true);
  }
  agent.removeStateChangeListener(propertyChangeListener);
  IceProcessingState iceState=agent.getState();
  if (!IceProcessingState.COMPLETED.equals(iceState) && !IceProcessingState.TERMINATED.equals(iceState)) {
    logger.fatal(""String_Node_Str"" + nickname + ""String_Node_Str""+ iceState);
    return;
  }
  HammerUtils.addSocketToMediaStream(agent,mediaStreamMap,fakeUserStats == null);
  for (  String key : contentMap.keySet()) {
    MediaStream stream=mediaStreamMap.get(key);
    SrtpControl control=stream.getSrtpControl();
    MediaType type=stream.getFormat().getMediaType();
    control.start(type);
  }
  for (  String key : contentMap.keySet()) {
    MediaStream stream=mediaStreamMap.get(key);
    stream.start();
  }
}","/** 
 * acceptJingleSession create a accept-session Jingle message and send it to the initiator of the session. The initiator is taken from the From attribute of the initiate-session message.
 */
private void acceptJingleSession(){
  Map<String,NewContentPacketExtension> contentMap=new HashMap<>();
  Map<String,MediaFormat> selectedFormats=new HashMap<String,MediaFormat>();
  Map<String,List<RTPExtension>> selectedRtpExtensions=new HashMap<String,List<RTPExtension>>();
  DynamicPayloadTypeRegistry ptRegistry=new DynamicPayloadTypeRegistry();
  DynamicRTPExtensionsRegistry rtpExtRegistry=new DynamicRTPExtensionsRegistry();
  for (  NewContentPacketExtension cpe : sessionInitiate.getContentList()) {
    NewContentPacketExtension localContent;
    if (cpe.getName().equalsIgnoreCase(""String_Node_Str"")) {
      localContent=HammerUtils.createDescriptionForDataContent(NewContentPacketExtension.CreatorEnum.responder,NewContentPacketExtension.SendersEnum.both);
    }
 else {
      NewRtpDescriptionPacketExtension description=cpe.getFirstChildOfType(NewRtpDescriptionPacketExtension.class);
      if (description == null) {
        continue;
      }
      List<MediaFormat> mediaFormats=HammerJingleUtils.extractFormats(description,ptRegistry);
      List<RTPExtension> remoteRtpExtensions=HammerJingleUtils.extractRTPExtensions(description,rtpExtRegistry);
      List<RTPExtension> supportedRtpExtension=getExtensionsForType(MediaType.parseString(cpe.getName()));
      List<RTPExtension> rtpExtensionIntersection=intersectRTPExtensions(remoteRtpExtensions,supportedRtpExtension);
      selectedRtpExtensions.put(cpe.getName(),rtpExtensionIntersection);
      selectedFormats.put(cpe.getName(),HammerUtils.selectFormat(cpe.getName(),mediaFormats));
      localContent=HammerJingleUtils.createDescription(NewContentPacketExtension.CreatorEnum.responder,cpe.getName(),NewContentPacketExtension.SendersEnum.both,mediaFormats,rtpExtensionIntersection,ptRegistry,rtpExtRegistry);
    }
    contentMap.put(cpe.getName(),localContent);
  }
  contentMap.remove(""String_Node_Str"");
  IceMediaStreamGenerator iceMediaStreamGenerator=IceMediaStreamGenerator.getInstance();
  try {
    iceMediaStreamGenerator.generateIceMediaStream(agent,contentMap.keySet(),null,null);
  }
 catch (  IOException e) {
    logger.fatal(this.nickname + ""String_Node_Str"" + ""String_Node_Str"",e);
  }
  HammerUtils.addRemoteCandidateToAgent(agent,sessionInitiate.getContentList());
  HammerUtils.addLocalCandidateToContentList(agent,contentMap.values());
  HammerUtils.configureMediaStream(mediaStreamMap,selectedFormats,selectedRtpExtensions,mediaDeviceChooser,ptRegistry,rtpExtRegistry);
  HammerUtils.addSSRCToContent(contentMap,mediaStreamMap);
  Stanza presencePacketWithSSRC=new Presence(Presence.Type.available);
  Jid recipient=null;
  try {
    recipient=JidCreate.entityFullFrom(serverInfo.getRoomName() + ""String_Node_Str"" + serverInfo.getMUCDomain()+ ""String_Node_Str""+ nickname);
  }
 catch (  XmppStringprepException e) {
    logger.error(""String_Node_Str"" + e.toString());
  }
  presencePacketWithSSRC.setTo(recipient);
  presencePacketWithSSRC.addExtension(new Nick(this.nickname));
  MediaPacketExtension mediaPacket=new MediaPacketExtension();
  for (  String key : contentMap.keySet()) {
    String str=String.valueOf(mediaStreamMap.get(key).getLocalSourceID());
    mediaPacket.addSource(key,str,MediaDirection.SENDRECV.toString());
  }
  presencePacketWithSSRC.addExtension(mediaPacket);
  try {
    System.out.println(""String_Node_Str"" + presencePacketWithSSRC.toXML());
    connection.sendStanza(presencePacketWithSSRC);
    sessionAccept=new NewJingleIQ();
    sessionAccept.setTo(sessionInitiate.getFrom());
    sessionAccept.setFrom(sessionInitiate.getTo());
    sessionAccept.setResponder(sessionInitiate.getTo().toString());
    sessionAccept.setType(IQ.Type.set);
    sessionAccept.setSID(sessionInitiate.getSID());
    sessionAccept.setAction(NewJingleAction.SESSION_ACCEPT);
    for (    NewContentPacketExtension cpe : contentMap.values()) {
      sessionAccept.addContent(cpe);
    }
    sessionAccept.setInitiator(sessionInitiate.getFrom().toString());
    HammerUtils.setDtlsEncryptionOnTransport(mediaStreamMap,sessionAccept.getContentList(),sessionInitiate.getContentList());
    System.out.println(""String_Node_Str"" + sessionAccept.toXML());
    connection.sendStanza(sessionAccept);
    logger.info(this.nickname + ""String_Node_Str"");
  }
 catch (  SmackException.NotConnectedException e) {
    logger.fatal(""String_Node_Str"");
    System.exit(1);
  }
catch (  InterruptedException e) {
    logger.fatal(""String_Node_Str"" + e.toString());
    System.exit(1);
  }
  final Object syncRoot=new Object();
  PropertyChangeListener propertyChangeListener=new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent ev){
      Object newValue=ev.getNewValue();
      if (IceProcessingState.COMPLETED.equals(newValue) || IceProcessingState.FAILED.equals(newValue) || IceProcessingState.TERMINATED.equals(newValue)) {
        Agent iceAgent=(Agent)ev.getSource();
        iceAgent.removeStateChangeListener(this);
        if (iceAgent == FakeUser.this.agent) {
synchronized (syncRoot) {
            syncRoot.notify();
          }
        }
      }
    }
  }
;
  agent.addStateChangeListener(propertyChangeListener);
  agent.startConnectivityEstablishment();
synchronized (syncRoot) {
    long startWait=System.currentTimeMillis();
    do {
      IceProcessingState iceState=agent.getState();
      if (IceProcessingState.COMPLETED.equals(iceState) || IceProcessingState.TERMINATED.equals(iceState) || IceProcessingState.FAILED.equals(iceState))       break;
      if (System.currentTimeMillis() - startWait > 10000)       break;
      try {
        syncRoot.wait(1000);
      }
 catch (      InterruptedException ie) {
        logger.fatal(""String_Node_Str"" + ie);
        break;
      }
    }
 while (true);
  }
  agent.removeStateChangeListener(propertyChangeListener);
  IceProcessingState iceState=agent.getState();
  if (!IceProcessingState.COMPLETED.equals(iceState) && !IceProcessingState.TERMINATED.equals(iceState)) {
    logger.fatal(""String_Node_Str"" + nickname + ""String_Node_Str""+ iceState);
    return;
  }
  HammerUtils.addSocketToMediaStream(agent,mediaStreamMap,fakeUserStats == null);
  for (  String key : contentMap.keySet()) {
    MediaStream stream=mediaStreamMap.get(key);
    SrtpControl control=stream.getSrtpControl();
    MediaType type=stream.getFormat().getMediaType();
    control.start(type);
  }
  for (  String key : contentMap.keySet()) {
    MediaStream stream=mediaStreamMap.get(key);
    stream.start();
  }
}",0.9928458468258152
86380,"/** 
 * Stop the streams of all the fake users created, and disconnect them from the MUC and the XMPP server. Also stop the <tt>HammerStats</tt> thread.
 */
public void stop(){
  for (  FakeUser user : fakeUsers) {
    user.stop();
  }
  hammerStats.stop();
}","/** 
 * Stop the streams of all the fake users created, and disconnect them from the MUC and the XMPP server. Also stop the <tt>HammerStats</tt> thread.
 */
public void stop(){
  java.util.logging.Logger l=java.util.logging.Logger.getLogger(""String_Node_Str"");
  java.util.logging.Level level=l.getLevel();
  l.setLevel(java.util.logging.Level.OFF);
  for (  FakeUser user : fakeUsers) {
    user.stop();
  }
  l.setLevel(level);
  hammerStats.stop();
  try {
    hammerStatsThread.join();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}",0.5836385836385837
86381,"public static void main(String[] args) throws InterruptedException {
  String version=System.getProperty(""String_Node_Str"");
  String vmVendor=System.getProperty(""String_Node_Str"");
  String osName=System.getProperty(""String_Node_Str"");
  setSystemProperties(osName);
  setScHomeDir(osName);
  File f=new File(System.getProperty(PNAME_SC_HOME_DIR_LOCATION),System.getProperty(PNAME_SC_HOME_DIR_NAME) + File.separator + ""String_Node_Str"");
  if (f.exists()) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
  if (version.startsWith(""String_Node_Str"") || vmVendor.startsWith(""String_Node_Str"") || vmVendor.startsWith(""String_Node_Str"")) {
    String os=""String_Node_Str"";
    if (osName.startsWith(""String_Node_Str""))     os=ChangeJVMFrame.MAC_OSX;
 else     if (osName.startsWith(""String_Node_Str""))     os=ChangeJVMFrame.LINUX;
 else     if (osName.startsWith(""String_Node_Str""))     os=ChangeJVMFrame.WINDOWS;
    ChangeJVMFrame changeJVMFrame=new ChangeJVMFrame(os);
    Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
    changeJVMFrame.setLocation(screenSize.width / 2 - changeJVMFrame.getWidth() / 2,screenSize.height / 2 - changeJVMFrame.getHeight() / 2);
    changeJVMFrame.setVisible(true);
    return;
  }
  CmdLineArguments infoCLI=new CmdLineArguments();
  CmdLineParser parser=new CmdLineParser(infoCLI);
  try {
    parser.parseArgument(args);
  }
 catch (  CmdLineException e) {
    if (infoCLI.getHelpOption()) {
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
    }
 else {
      System.out.println(e.getMessage() + '\n');
    }
    System.out.println(""String_Node_Str"");
    parser.printUsage(System.out);
    System.exit(1);
  }
  if (infoCLI.getHelpOption()) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    parser.printUsage(System.out);
    System.exit(1);
  }
  Hammer.init();
  HostInfo hostInfo=infoCLI.getHostInfoFromArguments();
  MediaDeviceChooser mdc=infoCLI.getMediaDeviceChooser();
  int numberOfFakeUsers=infoCLI.getNumberOfFakeUsers();
  List<Credential> credentials=infoCLI.getCredentialsList();
  if (credentials.size() > 0)   numberOfFakeUsers=credentials.size();
  final Hammer hammer=new Hammer(hostInfo,mdc,""String_Node_Str"",numberOfFakeUsers);
  Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
    public void run(){
      System.out.println(""String_Node_Str"");
      java.util.logging.Logger l=java.util.logging.Logger.getLogger(""String_Node_Str"");
      java.util.logging.Level level=l.getLevel();
      l.setLevel(java.util.logging.Level.OFF);
      hammer.stop();
      l.setLevel(level);
      System.out.println(""String_Node_Str"");
    }
  }
));
  if (credentials.size() > 0) {
    hammer.start(2000,credentials,infoCLI.getOverallStats(),infoCLI.getAllStats(),infoCLI.getSummaryStats(),infoCLI.getStatsPolling());
  }
 else {
    hammer.start(2000,infoCLI.getOverallStats(),infoCLI.getAllStats(),infoCLI.getSummaryStats(),infoCLI.getStatsPolling());
  }
  if (infoCLI.getRunLength() > 0) {
    Thread.sleep(infoCLI.getRunLength() * 1000);
  }
 else {
    while (true)     Thread.sleep(3600000);
  }
  System.exit(0);
}","public static void main(String[] args) throws InterruptedException {
  String version=System.getProperty(""String_Node_Str"");
  String vmVendor=System.getProperty(""String_Node_Str"");
  String osName=System.getProperty(""String_Node_Str"");
  setSystemProperties(osName);
  setScHomeDir(osName);
  File f=new File(System.getProperty(PNAME_SC_HOME_DIR_LOCATION),System.getProperty(PNAME_SC_HOME_DIR_NAME) + File.separator + ""String_Node_Str"");
  if (f.exists()) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
  if (version.startsWith(""String_Node_Str"") || vmVendor.startsWith(""String_Node_Str"") || vmVendor.startsWith(""String_Node_Str"")) {
    String os=""String_Node_Str"";
    if (osName.startsWith(""String_Node_Str""))     os=ChangeJVMFrame.MAC_OSX;
 else     if (osName.startsWith(""String_Node_Str""))     os=ChangeJVMFrame.LINUX;
 else     if (osName.startsWith(""String_Node_Str""))     os=ChangeJVMFrame.WINDOWS;
    ChangeJVMFrame changeJVMFrame=new ChangeJVMFrame(os);
    Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
    changeJVMFrame.setLocation(screenSize.width / 2 - changeJVMFrame.getWidth() / 2,screenSize.height / 2 - changeJVMFrame.getHeight() / 2);
    changeJVMFrame.setVisible(true);
    return;
  }
  CmdLineArguments infoCLI=new CmdLineArguments();
  CmdLineParser parser=new CmdLineParser(infoCLI);
  try {
    parser.parseArgument(args);
  }
 catch (  CmdLineException e) {
    if (infoCLI.getHelpOption()) {
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
    }
 else {
      System.out.println(e.getMessage() + '\n');
    }
    System.out.println(""String_Node_Str"");
    parser.printUsage(System.out);
    System.exit(1);
  }
  if (infoCLI.getHelpOption()) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    parser.printUsage(System.out);
    System.exit(1);
  }
  Hammer.init();
  HostInfo hostInfo=infoCLI.getHostInfoFromArguments();
  MediaDeviceChooser mdc=infoCLI.getMediaDeviceChooser();
  int numberOfFakeUsers=infoCLI.getNumberOfFakeUsers();
  List<Credential> credentials=infoCLI.getCredentialsList();
  if (credentials.size() > 0)   numberOfFakeUsers=credentials.size();
  final Hammer hammer=new Hammer(hostInfo,mdc,""String_Node_Str"",numberOfFakeUsers);
  Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
    public void run(){
      System.out.println(""String_Node_Str"");
      hammer.stop();
      System.out.println(""String_Node_Str"");
    }
  }
));
  if (credentials.size() > 0) {
    hammer.start(2000,credentials,infoCLI.getOverallStats(),infoCLI.getAllStats(),infoCLI.getSummaryStats(),infoCLI.getStatsPolling());
  }
 else {
    hammer.start(2000,infoCLI.getOverallStats(),infoCLI.getAllStats(),infoCLI.getSummaryStats(),infoCLI.getStatsPolling());
  }
  if (infoCLI.getRunLength() > 0) {
    Thread.sleep(infoCLI.getRunLength() * 1000);
  }
 else {
    while (true)     Thread.sleep(3600000);
  }
}",0.9597444089456868
86382,"public void run(){
  System.out.println(""String_Node_Str"");
  java.util.logging.Logger l=java.util.logging.Logger.getLogger(""String_Node_Str"");
  java.util.logging.Level level=l.getLevel();
  l.setLevel(java.util.logging.Level.OFF);
  hammer.stop();
  l.setLevel(level);
  System.out.println(""String_Node_Str"");
}","public void run(){
  System.out.println(""String_Node_Str"");
  hammer.stop();
  System.out.println(""String_Node_Str"");
}",0.5509259259259259
86383,"/** 
 * Stop the streams of all the fake users created, and disconnect them from the MUC and the XMPP server. Also stop the <tt>HammerStats</tt> thread.
 */
public void stop(){
  java.util.logging.Logger l=java.util.logging.Logger.getLogger(""String_Node_Str"");
  java.util.logging.Level level=l.getLevel();
  l.setLevel(java.util.logging.Level.OFF);
  for (  FakeUser user : fakeUsers) {
    user.stop();
  }
  l.setLevel(level);
  hammerStats.stop();
  try {
    hammerStatsThread.join();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}","/** 
 * Stop the streams of all the fake users created, and disconnect them from the MUC and the XMPP server. Also stop the <tt>HammerStats</tt> thread.
 */
public void stop(){
  for (  FakeUser user : fakeUsers) {
    user.stop();
  }
  hammerStats.stop();
  try {
    hammerStatsThread.join();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}",0.6825053995680346
86384,"public static void main(String[] args) throws InterruptedException {
  String version=System.getProperty(""String_Node_Str"");
  String vmVendor=System.getProperty(""String_Node_Str"");
  String osName=System.getProperty(""String_Node_Str"");
  setSystemProperties(osName);
  setScHomeDir(osName);
  File f=new File(System.getProperty(PNAME_SC_HOME_DIR_LOCATION),System.getProperty(PNAME_SC_HOME_DIR_NAME) + File.separator + ""String_Node_Str"");
  if (f.exists()) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
  if (version.startsWith(""String_Node_Str"") || vmVendor.startsWith(""String_Node_Str"") || vmVendor.startsWith(""String_Node_Str"")) {
    String os=""String_Node_Str"";
    if (osName.startsWith(""String_Node_Str""))     os=ChangeJVMFrame.MAC_OSX;
 else     if (osName.startsWith(""String_Node_Str""))     os=ChangeJVMFrame.LINUX;
 else     if (osName.startsWith(""String_Node_Str""))     os=ChangeJVMFrame.WINDOWS;
    ChangeJVMFrame changeJVMFrame=new ChangeJVMFrame(os);
    Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
    changeJVMFrame.setLocation(screenSize.width / 2 - changeJVMFrame.getWidth() / 2,screenSize.height / 2 - changeJVMFrame.getHeight() / 2);
    changeJVMFrame.setVisible(true);
    return;
  }
  CmdLineArguments infoCLI=new CmdLineArguments();
  CmdLineParser parser=new CmdLineParser(infoCLI);
  try {
    parser.parseArgument(args);
  }
 catch (  CmdLineException e) {
    if (infoCLI.getHelpOption()) {
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
    }
 else {
      System.out.println(e.getMessage() + '\n');
    }
    System.out.println(""String_Node_Str"");
    parser.printUsage(System.out);
    System.exit(1);
  }
  if (infoCLI.getHelpOption()) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    parser.printUsage(System.out);
    System.exit(1);
  }
  Hammer.init();
  HostInfo hostInfo=infoCLI.getHostInfoFromArguments();
  MediaDeviceChooser mdc=infoCLI.getMediaDeviceChooser();
  int numberOfFakeUsers=infoCLI.getNumberOfFakeUsers();
  List<Credential> credentials=infoCLI.getCredentialsList();
  if (credentials.size() > 0)   numberOfFakeUsers=credentials.size();
  final Hammer hammer=new Hammer(hostInfo,mdc,""String_Node_Str"",numberOfFakeUsers);
  Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
    public void run(){
      System.out.println(""String_Node_Str"");
      hammer.stop();
      System.out.println(""String_Node_Str"");
    }
  }
));
  if (credentials.size() > 0) {
    hammer.start(2000,credentials,infoCLI.getOverallStats(),infoCLI.getAllStats(),infoCLI.getSummaryStats(),infoCLI.getStatsPolling());
  }
 else {
    hammer.start(2000,infoCLI.getOverallStats(),infoCLI.getAllStats(),infoCLI.getSummaryStats(),infoCLI.getStatsPolling());
  }
  if (infoCLI.getRunLength() > 0) {
    Thread.sleep(infoCLI.getRunLength() * 1000);
  }
 else {
    while (true)     Thread.sleep(3600000);
  }
}","public static void main(String[] args) throws InterruptedException {
  String version=System.getProperty(""String_Node_Str"");
  String vmVendor=System.getProperty(""String_Node_Str"");
  String osName=System.getProperty(""String_Node_Str"");
  setSystemProperties(osName);
  setScHomeDir(osName);
  File f=new File(System.getProperty(PNAME_SC_HOME_DIR_LOCATION),System.getProperty(PNAME_SC_HOME_DIR_NAME) + File.separator + ""String_Node_Str"");
  if (f.exists()) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
  if (version.startsWith(""String_Node_Str"") || vmVendor.startsWith(""String_Node_Str"") || vmVendor.startsWith(""String_Node_Str"")) {
    String os=""String_Node_Str"";
    if (osName.startsWith(""String_Node_Str""))     os=ChangeJVMFrame.MAC_OSX;
 else     if (osName.startsWith(""String_Node_Str""))     os=ChangeJVMFrame.LINUX;
 else     if (osName.startsWith(""String_Node_Str""))     os=ChangeJVMFrame.WINDOWS;
    ChangeJVMFrame changeJVMFrame=new ChangeJVMFrame(os);
    Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
    changeJVMFrame.setLocation(screenSize.width / 2 - changeJVMFrame.getWidth() / 2,screenSize.height / 2 - changeJVMFrame.getHeight() / 2);
    changeJVMFrame.setVisible(true);
    return;
  }
  CmdLineArguments infoCLI=new CmdLineArguments();
  CmdLineParser parser=new CmdLineParser(infoCLI);
  try {
    parser.parseArgument(args);
  }
 catch (  CmdLineException e) {
    if (infoCLI.getHelpOption()) {
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
    }
 else {
      System.out.println(e.getMessage() + '\n');
    }
    System.out.println(""String_Node_Str"");
    parser.printUsage(System.out);
    System.exit(1);
  }
  if (infoCLI.getHelpOption()) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    parser.printUsage(System.out);
    System.exit(1);
  }
  Hammer.init();
  HostInfo hostInfo=infoCLI.getHostInfoFromArguments();
  MediaDeviceChooser mdc=infoCLI.getMediaDeviceChooser();
  int numberOfFakeUsers=infoCLI.getNumberOfFakeUsers();
  List<Credential> credentials=infoCLI.getCredentialsList();
  if (credentials.size() > 0)   numberOfFakeUsers=credentials.size();
  final Hammer hammer=new Hammer(hostInfo,mdc,""String_Node_Str"",numberOfFakeUsers);
  Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
    public void run(){
      System.out.println(""String_Node_Str"");
      hammer.stop();
      System.out.println(""String_Node_Str"");
    }
  }
));
  if (credentials.size() > 0) {
    hammer.start(2000,credentials,infoCLI.getOverallStats(),infoCLI.getAllStats(),infoCLI.getSummaryStats(),infoCLI.getStatsPolling());
  }
 else {
    hammer.start(2000,infoCLI.getOverallStats(),infoCLI.getAllStats(),infoCLI.getSummaryStats(),infoCLI.getStatsPolling());
  }
  if (infoCLI.getRunLength() > 0) {
    Thread.sleep(infoCLI.getRunLength() * 1000);
  }
 else {
    while (true)     Thread.sleep(3600000);
  }
  System.exit(0);
}",0.9970247933884298
86385,"/** 
 * Get the boolean of the allStats option : if true, all the stats collected during the run will be saved in file during the run.
 * @return the boolean of the allStats option
 */
public boolean getAllStats(){
  return overallStats;
}","/** 
 * Get the boolean of the allStats option : if true, all the stats collected during the run will be saved in file during the run.
 * @return the boolean of the allStats option
 */
public boolean getAllStats(){
  return allStats;
}",0.9915611814345991
86386,"/** 
 * Get The path of a rtpdump file containing recorded Opus RTP packets that will be read for the audio stream if it was given as option to the program, or null if not.
 * @return The path of a rtpdump file containing recorded Opus RTP packetsthat will be read for the audio stream if it was given as option to the program, or null if not.
 */
public String getAudioRtpdumpFile(){
  return videoRtpdumpFile;
}","/** 
 * Get The path of a rtpdump file containing recorded Opus RTP packets that will be read for the audio stream if it was given as option to the program, or null if not.
 * @return The path of a rtpdump file containing recorded Opus RTP packetsthat will be read for the audio stream if it was given as option to the program, or null if not.
 */
public String getAudioRtpdumpFile(){
  return audioRtpdumpFile;
}",0.9903147699757868
86387,"/** 
 * Reads available media data from this instance into a specific <tt>Buffer</tt>.
 * @param buffer the <tt>Buffer</tt> to write the available media datainto
 * @throws IOException if an I/O error has prevented the reading ofavailable media data from this instance into the specified <tt>buffer</tt>
 */
@Override protected void doRead(Buffer buffer) throws IOException {
  long millis=0;
  long timestamp=0;
  VideoFormat format;
  format=(VideoFormat)buffer.getFormat();
  if (format == null) {
    format=(VideoFormat)getFormat();
    if (format != null)     buffer.setFormat(format);
  }
  RTPPacket rtpPacket=ivfFileReader.getNextPacket(true);
  byte[] data=rtpPacket.getPayload();
  buffer.setData(data);
  buffer.setOffset(0);
  buffer.setLength(data.length);
  buffer.setFlags(Buffer.FLAG_SYSTEM_TIME | Buffer.FLAG_LIVE_DATA);
  if (lastReadWasMarked == true) {
    rtpTimestamp=System.nanoTime();
  }
  if ((lastReadWasMarked=rtpPacket.hasMarker()) == true) {
    buffer.setFlags(buffer.getFlags() | Buffer.FLAG_RTP_MARKER);
  }
  buffer.setTimeStamp(rtpTimestamp);
  millis=rtpPacket.getRtpdumpTimestamp() - this.timeLastRead;
  if (millis > 0) {
    try {
      Thread.sleep(millis);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  this.timeLastRead=rtpPacket.getRtpdumpTimestamp();
}","/** 
 * Reads available media data from this instance into a specific <tt>Buffer</tt>.
 * @param buffer the <tt>Buffer</tt> to write the available media datainto
 * @throws IOException if an I/O error has prevented the reading ofavailable media data from this instance into the specified <tt>buffer</tt>
 */
@Override protected void doRead(Buffer buffer) throws IOException {
  long millis=0;
  Format format;
  format=buffer.getFormat();
  if (format == null) {
    format=getFormat();
    if (format != null)     buffer.setFormat(format);
  }
  RTPPacket rtpPacket=ivfFileReader.getNextPacket(true);
  byte[] data=rtpPacket.getPayload();
  buffer.setData(data);
  buffer.setOffset(0);
  buffer.setLength(data.length);
  buffer.setFlags(Buffer.FLAG_SYSTEM_TIME | Buffer.FLAG_LIVE_DATA);
  if (lastReadWasMarked == true) {
    rtpTimestamp=System.nanoTime();
  }
  if ((lastReadWasMarked=rtpPacket.hasMarker()) == true) {
    buffer.setFlags(buffer.getFlags() | Buffer.FLAG_RTP_MARKER);
  }
  buffer.setTimeStamp(rtpTimestamp);
  millis=rtpPacket.getRtpdumpTimestamp() - this.timeLastRead;
  if (millis > 0) {
    try {
      Thread.sleep(millis);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  this.timeLastRead=rtpPacket.getRtpdumpTimestamp();
}",0.972869698127627
86388,"/** 
 * Connect to the XMPP server then to the MUC chatroom.
 * @throws XMPPException if the connection to the XMPP server goes wrong
 */
public void start() throws XMPPException {
  connection.connect();
  connection.loginAnonymously();
  String roomURL=serverInfo.getRoomName() + ""String_Node_Str"" + serverInfo.getMUCDomain();
  muc=new MultiUserChat(connection,roomURL);
  while (true) {
    try {
      muc.join(username);
    }
 catch (    XMPPException e) {
      if (e.getXMPPError().getCode() == 409) {
        username=username + '_';
        continue;
      }
 else       throw e;
    }
    break;
  }
  muc.sendMessage(""String_Node_Str"");
  Packet presencePacket=new Presence(Presence.Type.available);
  presencePacket.setTo(roomURL);
  presencePacket.addExtension(new Nick(username));
  connection.sendPacket(presencePacket);
}","/** 
 * Connect to the XMPP server then to the MUC chatroom.
 * @throws XMPPException if the connection to the XMPP server goes wrong
 */
public void start() throws XMPPException {
  connection.connect();
  connection.loginAnonymously();
  String roomURL=serverInfo.getRoomName() + ""String_Node_Str"" + serverInfo.getMUCDomain();
  muc=new MultiUserChat(connection,roomURL);
  while (true) {
    try {
      muc.join(username);
    }
 catch (    XMPPException e) {
      if (e.getXMPPError().getCode() == 409) {
        username=username + '_';
        continue;
      }
 else       throw e;
    }
    break;
  }
  muc.sendMessage(""String_Node_Str"");
  Packet presencePacket=new Presence(Presence.Type.available);
  presencePacket.setTo(roomURL + ""String_Node_Str"" + username);
  presencePacket.addExtension(new Nick(username));
  connection.sendPacket(presencePacket);
}",0.9818607372732592
86389,"/** 
 * acceptJingleSession create a accept-session Jingle message and send it to the initiator of the session. The initiator is taken from the From attribute  of the initiate-session message.
 */
private void acceptJingleSession(){
  IceMediaStreamGenerator iceMediaStreamGenerator=null;
  List<MediaFormat> listFormat=null;
  Map<String,ContentPacketExtension> contentMap=new HashMap<String,ContentPacketExtension>();
  ContentPacketExtension content=null;
  for (  ContentPacketExtension cpe : sessionInitiate.getContentList()) {
    if (cpe.getName().equalsIgnoreCase(""String_Node_Str"")) {
      content=HammerUtils.createDescriptionForDataContent(CreatorEnum.responder,SendersEnum.responder);
    }
 else {
      listFormat=JingleUtils.extractFormats(cpe.getFirstChildOfType(RtpDescriptionPacketExtension.class),ptRegistry);
      possibleFormatMap.put(cpe.getName(),listFormat);
      selectedFormat.put(cpe.getName(),HammerUtils.selectFormat(cpe.getName(),listFormat));
      content=JingleUtils.createDescription(CreatorEnum.responder,cpe.getName(),SendersEnum.responder,listFormat,null,ptRegistry,null);
    }
    contentMap.put(cpe.getName(),content);
  }
  contentMap.remove(""String_Node_Str"");
  iceMediaStreamGenerator=IceMediaStreamGenerator.getInstance();
  try {
    agent=iceMediaStreamGenerator.generateIceMediaStream(contentMap.keySet(),null,null);
  }
 catch (  IOException e) {
    System.err.println(e);
  }
  HammerUtils.addRemoteCandidateToAgent(agent,sessionInitiate.getContentList());
  HammerUtils.addLocalCandidateToContentList(agent,contentMap.values());
  mediaStreamMap=HammerUtils.generateMediaStream(selectedFormat,ptRegistry);
  Packet presencePacket=new Presence(Presence.Type.available);
  String recipient=serverInfo.getRoomName() + ""String_Node_Str"" + serverInfo.getMUCDomain();
  presencePacket.setTo(recipient);
  MediaPacketExtension mediaPacket=new MediaPacketExtension();
  for (  String key : mediaStreamMap.keySet()) {
    String str=String.valueOf(mediaStreamMap.get(key).getLocalSourceID());
    mediaPacket.addSource(key,str,MediaDirection.SENDONLY.toString());
  }
  presencePacket.addExtension(mediaPacket);
  connection.sendPacket(presencePacket);
  sessionAccept=JinglePacketFactory.createSessionAccept(sessionInitiate.getTo(),sessionInitiate.getFrom(),sessionInitiate.getSID(),contentMap.values());
  sessionAccept.setInitiator(sessionInitiate.getFrom());
  HammerUtils.addSSRCToContent(contentMap,mediaStreamMap);
  HammerUtils.setDtlsEncryptionOnTransport(mediaStreamMap,sessionAccept.getContentList(),sessionInitiate.getContentList());
  connection.sendPacket(sessionAccept);
  System.out.println(""String_Node_Str"");
  agent.startConnectivityEstablishment();
  while (IceProcessingState.TERMINATED != agent.getState()) {
    System.out.println(""String_Node_Str"");
    try {
      Thread.sleep(1500);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  HammerUtils.addSocketToMediaStream(agent,mediaStreamMap);
  for (  MediaStream stream : mediaStreamMap.values()) {
    SrtpControl control=stream.getSrtpControl();
    MediaType type=stream.getFormat().getMediaType();
    control.start(type);
  }
  for (  MediaStream stream : mediaStreamMap.values()) {
    stream.start();
  }
}","/** 
 * acceptJingleSession create a accept-session Jingle message and send it to the initiator of the session. The initiator is taken from the From attribute  of the initiate-session message.
 */
private void acceptJingleSession(){
  IceMediaStreamGenerator iceMediaStreamGenerator=null;
  List<MediaFormat> listFormat=null;
  Map<String,ContentPacketExtension> contentMap=new HashMap<String,ContentPacketExtension>();
  ContentPacketExtension content=null;
  for (  ContentPacketExtension cpe : sessionInitiate.getContentList()) {
    if (cpe.getName().equalsIgnoreCase(""String_Node_Str"")) {
      content=HammerUtils.createDescriptionForDataContent(CreatorEnum.responder,SendersEnum.both);
    }
 else {
      listFormat=JingleUtils.extractFormats(cpe.getFirstChildOfType(RtpDescriptionPacketExtension.class),ptRegistry);
      possibleFormatMap.put(cpe.getName(),listFormat);
      selectedFormat.put(cpe.getName(),HammerUtils.selectFormat(cpe.getName(),listFormat));
      content=JingleUtils.createDescription(CreatorEnum.responder,cpe.getName(),SendersEnum.both,listFormat,null,ptRegistry,null);
    }
    contentMap.put(cpe.getName(),content);
  }
  contentMap.remove(""String_Node_Str"");
  iceMediaStreamGenerator=IceMediaStreamGenerator.getInstance();
  try {
    agent=iceMediaStreamGenerator.generateIceMediaStream(contentMap.keySet(),null,null);
  }
 catch (  IOException e) {
    System.err.println(e);
  }
  HammerUtils.addRemoteCandidateToAgent(agent,sessionInitiate.getContentList());
  HammerUtils.addLocalCandidateToContentList(agent,contentMap.values());
  mediaStreamMap=HammerUtils.generateMediaStream(selectedFormat,ptRegistry);
  presencePacketWithSSRC=new Presence(Presence.Type.available);
  String recipient=serverInfo.getRoomName() + ""String_Node_Str"" + serverInfo.getMUCDomain()+ ""String_Node_Str""+ username;
  presencePacketWithSSRC.setTo(recipient);
  presencePacketWithSSRC.addExtension(new Nick(username));
  MediaPacketExtension mediaPacket=new MediaPacketExtension();
  for (  String key : mediaStreamMap.keySet()) {
    String str=String.valueOf(mediaStreamMap.get(key).getLocalSourceID());
    mediaPacket.addSource(key,str,MediaDirection.SENDRECV.toString());
  }
  presencePacketWithSSRC.addExtension(mediaPacket);
  sessionAccept=JinglePacketFactory.createSessionAccept(sessionInitiate.getTo(),sessionInitiate.getFrom(),sessionInitiate.getSID(),contentMap.values());
  sessionAccept.setInitiator(sessionInitiate.getFrom());
  HammerUtils.addSSRCToContent(contentMap,mediaStreamMap);
  HammerUtils.setDtlsEncryptionOnTransport(mediaStreamMap,sessionAccept.getContentList(),sessionInitiate.getContentList());
  connection.sendPacket(sessionAccept);
  System.out.println(""String_Node_Str"");
  agent.startConnectivityEstablishment();
  while (IceProcessingState.TERMINATED != agent.getState()) {
    System.out.println(""String_Node_Str"");
    try {
      Thread.sleep(1500);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  HammerUtils.addSocketToMediaStream(agent,mediaStreamMap);
  for (  MediaStream stream : mediaStreamMap.values()) {
    SrtpControl control=stream.getSrtpControl();
    MediaType type=stream.getFormat().getMediaType();
    control.start(type);
  }
  for (  MediaStream stream : mediaStreamMap.values()) {
    stream.start();
  }
}",0.968026796589525
86390,"/** 
 * Callback function used when a JingleIQ is received by the XMPP connector.
 * @param packet the packet received by the <tt>JingleSession</tt> 
 */
public void processPacket(Packet packet){
  JingleIQ jiq=(JingleIQ)packet;
  System.out.println(""String_Node_Str"");
  ackJingleIQ(jiq);
switch (jiq.getAction()) {
case SESSION_INITIATE:
    sessionInitiate=jiq;
  acceptJingleSession();
break;
default :
System.out.println(""String_Node_Str"");
break;
}
}","/** 
 * Callback function used when a JingleIQ is received by the XMPP connector.
 * @param packet the packet received by the <tt>JingleSession</tt> 
 */
public void processPacket(Packet packet){
  JingleIQ jiq=(JingleIQ)packet;
  System.out.println(""String_Node_Str"");
  ackJingleIQ(jiq);
switch (jiq.getAction()) {
case SESSION_INITIATE:
    sessionInitiate=jiq;
  acceptJingleSession();
break;
case ADDSOURCE:
break;
case REMOVESOURCE:
break;
default :
System.out.println(""String_Node_Str"");
break;
}
}",0.9490114464099896
86391,"/** 
 * Adds a <tt>SourcePacketExtension</tt> as a child element of <tt>description</tt>. See XEP-0339.
 * @param description the <tt>RtpDescriptionPacketExtension</tt> to whicha child element will be added.
 * @param ssrc the SSRC for the <tt>SourcePacketExtension</tt> to use.
 */
public static void addSourceExtension(RtpDescriptionPacketExtension description,long ssrc){
  MediaType type=MediaType.parseString(description.getMedia());
  MediaService mediaService=LibJitsi.getMediaService();
  String msLabel=UUID.randomUUID().toString();
  SourcePacketExtension sourcePacketExtension=new SourcePacketExtension();
  SsrcPacketExtension ssrcPacketExtension=new SsrcPacketExtension();
  sourcePacketExtension.setSSRC(ssrc);
  sourcePacketExtension.addChildExtension(new ParameterPacketExtension(""String_Node_Str"",LibJitsi.getMediaService().getRtpCname()));
  sourcePacketExtension.addChildExtension(new ParameterPacketExtension(""String_Node_Str"",msLabel + ""String_Node_Str"" + type.toString()));
  sourcePacketExtension.addChildExtension(new ParameterPacketExtension(""String_Node_Str"",msLabel));
  sourcePacketExtension.addChildExtension(new ParameterPacketExtension(""String_Node_Str"",type.toString()));
  description.addChildExtension(sourcePacketExtension);
  ssrcPacketExtension.setSsrc(""String_Node_Str"" + ssrc);
  ssrcPacketExtension.setCname(mediaService.getRtpCname());
  ssrcPacketExtension.setMsid(msLabel + ""String_Node_Str"" + type.toString());
  ssrcPacketExtension.setMslabel(msLabel);
  ssrcPacketExtension.setLabel(type.toString());
  description.addChildExtension(ssrcPacketExtension);
}","/** 
 * Adds a <tt>SourcePacketExtension</tt> as a child element of <tt>description</tt>. See XEP-0339.
 * @param description the <tt>RtpDescriptionPacketExtension</tt> to whicha child element will be added.
 * @param ssrc the SSRC for the <tt>SourcePacketExtension</tt> to use.
 */
public static void addSourceExtension(RtpDescriptionPacketExtension description,long ssrc){
  MediaService mediaService=LibJitsi.getMediaService();
  String msLabel=UUID.randomUUID().toString();
  String label=UUID.randomUUID().toString();
  SourcePacketExtension sourcePacketExtension=new SourcePacketExtension();
  SsrcPacketExtension ssrcPacketExtension=new SsrcPacketExtension();
  sourcePacketExtension.setSSRC(ssrc);
  sourcePacketExtension.addChildExtension(new ParameterPacketExtension(""String_Node_Str"",mediaService.getRtpCname()));
  sourcePacketExtension.addChildExtension(new ParameterPacketExtension(""String_Node_Str"",msLabel + ""String_Node_Str"" + label));
  sourcePacketExtension.addChildExtension(new ParameterPacketExtension(""String_Node_Str"",msLabel));
  sourcePacketExtension.addChildExtension(new ParameterPacketExtension(""String_Node_Str"",label));
  description.addChildExtension(sourcePacketExtension);
  ssrcPacketExtension.setSsrc(String.valueOf(ssrc));
  ssrcPacketExtension.setCname(mediaService.getRtpCname());
  ssrcPacketExtension.setMsid(msLabel + ""String_Node_Str"" + label);
  ssrcPacketExtension.setMslabel(msLabel);
  ssrcPacketExtension.setLabel(label);
  description.addChildExtension(ssrcPacketExtension);
}",0.8353054045410937
86392,"/** 
 * {@inheritDoc}Overrides the super implementation to initialize a <tt>CaptureDevice</tt> without asking FMJ to initialize one for a <tt>CaptureDeviceInfo</tt>.
 */
@Override protected CaptureDevice createCaptureDevice(){
  return new DataSource(getCaptureDeviceInfo());
}","/** 
 * {@inheritDoc}Overrides the super implementation to initialize a <tt>CaptureDevice</tt> without asking FMJ to initialize one for a <tt>CaptureDeviceInfo</tt>.
 */
@Override protected CaptureDevice createCaptureDevice(){
  DataSource captureDevice=new DataSource();
  captureDevice.setLocator(getCaptureDeviceInfo().getLocator());
  try {
    captureDevice.connect();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  if (captureDevice instanceof AbstractPullBufferCaptureDevice) {
    ((AbstractPullBufferCaptureDevice)captureDevice).setCaptureDeviceInfo(getCaptureDeviceInfo());
  }
  return captureDevice;
}",0.5966850828729282
86393,"public IVFMediaDevice(String filename){
  super(new CaptureDeviceInfo(""String_Node_Str"",new MediaLocator(""String_Node_Str"" + filename),IVFMediaDevice.SUPPORTED_FORMATS),MediaType.VIDEO);
}","public IVFMediaDevice(String filename){
  super(new CaptureDeviceInfo(filename,new MediaLocator(""String_Node_Str"" + filename),IVFMediaDevice.SUPPORTED_FORMATS),MediaType.VIDEO);
}",0.9482288828337876
86394,"/** 
 * Initializes a new <tt>ImageStream</tt> instance which is to have a specific <tt>FormatControl</tt>
 * @param dataSource the <tt>DataSource</tt> which is creating the newinstance so that it becomes one of its <tt>streams</tt>
 * @param formatControl the <tt>FormatControl</tt> of the new instance whichis to specify the format in which it is to provide its media data
 */
IVFStream(DataSource dataSource,FormatControl formatControl){
  super(dataSource,formatControl);
  this.ivfFileReader=new IVFFileReader(dataSource.getCaptureDeviceInfo().getLocator().getRemainder());
  this.FRAMERATE=((VideoFormat)getFormat()).getFrameRate();
}","/** 
 * Initializes a new <tt>ImageStream</tt> instance which is to have a specific <tt>FormatControl</tt>
 * @param dataSource the <tt>DataSource</tt> which is creating the newinstance so that it becomes one of its <tt>streams</tt>
 * @param formatControl the <tt>FormatControl</tt> of the new instance whichis to specify the format in which it is to provide its media data
 */
IVFStream(DataSource dataSource,FormatControl formatControl){
  super(dataSource,formatControl);
  this.ivfFileReader=new IVFFileReader(dataSource.getLocator().getRemainder());
  this.FRAMERATE=((VideoFormat)getFormat()).getFrameRate();
}",0.9817024661893397
86395,"/** 
 * Instantiates a <tt>JingleSession</tt> with a specified <tt>username</tt> that will connect to the XMPP server contained in <tt>hostInfo</tt>.
 * @param hostInfo the XMPP server informations needed for the connection.
 * @param username the username used by this <tt>JingleSession</tt> in theconnection.
 */
public JingleSession(HostInfo hostInfo,String username){
  this.serverInfo=hostInfo;
  this.username=(username == null) ? ""String_Node_Str"" : username;
  ProviderManager manager=ProviderManager.getInstance();
  manager.addExtensionProvider(MediaProvider.ELEMENT_NAME,MediaProvider.NAMESPACE,new MediaProvider());
  manager.addExtensionProvider(SsrcProvider.ELEMENT_NAME,SsrcProvider.NAMESPACE,new SsrcProvider());
  manager.addIQProvider(JingleIQ.ELEMENT_NAME,JingleIQ.NAMESPACE,new JingleIQProvider());
  config=new ConnectionConfiguration(serverInfo.getXMPPHostname(),serverInfo.getPort(),serverInfo.getXMPPDomain());
  connection=new XMPPConnection(config);
  connection.addPacketListener(this,new PacketFilter(){
    public boolean accept(    Packet packet){
      return (packet instanceof JingleIQ);
    }
  }
);
  config.setDebuggerEnabled(true);
}","/** 
 * Instantiates a <tt>JingleSession</tt> with a specified <tt>username</tt> that will connect to the XMPP server contained in <tt>hostInfo</tt>.
 * @param hostInfo the XMPP server informations needed for the connection.
 * @param username the username used by this <tt>JingleSession</tt> in theconnection.
 */
public JingleSession(HostInfo hostInfo,String username){
  this.serverInfo=hostInfo;
  this.username=(username == null) ? ""String_Node_Str"" : username;
  ProviderManager manager=ProviderManager.getInstance();
  manager.addExtensionProvider(MediaProvider.ELEMENT_NAME,MediaProvider.NAMESPACE,new MediaProvider());
  manager.addExtensionProvider(SsrcProvider.ELEMENT_NAME,SsrcProvider.NAMESPACE,new SsrcProvider());
  manager.addIQProvider(JingleIQ.ELEMENT_NAME,JingleIQ.NAMESPACE,new JingleIQProvider());
  config=new ConnectionConfiguration(serverInfo.getXMPPHostname(),serverInfo.getPort(),serverInfo.getXMPPDomain());
  connection=new XMPPConnection(config);
  connection.addPacketListener(this,new PacketFilter(){
    public boolean accept(    Packet packet){
      return (packet instanceof JingleIQ);
    }
  }
);
}",0.9848156182212582
86396,"public byte[] getNextFrame(boolean loopFile) throws IOException {
  if ((loopFile == true) && (frameNo >= header.getNumberOfFramesInFile())) {
    stream.seek(header.getHeaderLengh());
    frameNo=0;
  }
  byte[] data;
  int frameSizeInBytes;
  frameSizeInBytes=changeEndianness(stream.readInt());
  stream.skipBytes(8);
  data=new byte[frameSizeInBytes];
  stream.read(data);
  return data;
}","public byte[] getNextFrame(boolean loopFile) throws IOException {
  if ((loopFile == true) && (frameNo >= header.getNumberOfFramesInFile())) {
    stream.seek(header.getHeaderLengh());
    frameNo=0;
  }
  byte[] data;
  int frameSizeInBytes;
  frameSizeInBytes=changeEndianness(stream.readInt());
  stream.skipBytes(8);
  data=new byte[frameSizeInBytes];
  stream.read(data);
  frameNo++;
  return data;
}",0.983729662077597
86397,"/** 
 * Instantiates a <tt>JingleSession</tt> with a specified <tt>username</tt> that will connect to the XMPP server contained in <tt>hostInfo</tt>.
 * @param hostInfo the XMPP server informations needed for the connection.
 * @param username the username used by this <tt>JingleSession</tt> in theconnection.
 */
public JingleSession(HostInfo hostInfo,String username){
  this.serverInfo=hostInfo;
  this.username=(username == null) ? ""String_Node_Str"" : username;
  config=new ConnectionConfiguration(serverInfo.getXMPPHostname(),serverInfo.getPort(),serverInfo.getXMPPDomain());
  connection=new XMPPConnection(config);
  connection.addPacketListener(this,new PacketFilter(){
    public boolean accept(    Packet packet){
      return (packet instanceof JingleIQ);
    }
  }
);
}","/** 
 * Instantiates a <tt>JingleSession</tt> with a specified <tt>username</tt> that will connect to the XMPP server contained in <tt>hostInfo</tt>.
 * @param hostInfo the XMPP server informations needed for the connection.
 * @param username the username used by this <tt>JingleSession</tt> in theconnection.
 */
public JingleSession(HostInfo hostInfo,String username){
  this.serverInfo=hostInfo;
  this.username=(username == null) ? ""String_Node_Str"" : username;
  config=new ConnectionConfiguration(serverInfo.getXMPPHostname(),serverInfo.getPort(),serverInfo.getXMPPDomain());
  connection=new XMPPConnection(config);
  connection.addPacketListener(this,new PacketFilter(){
    public boolean accept(    Packet packet){
      return (packet instanceof JingleIQ);
    }
  }
);
  config.setDebuggerEnabled(true);
}",0.9781386633354152
86398,"/** 
 * acceptJingleSession create a accept-session Jingle message and send it to the initiator of the session. The initiator is taken from the From attribute  of the initiate-session message.
 */
private void acceptJingleSession(){
  IceMediaStreamGenerator iceMediaStreamGenerator=null;
  List<MediaFormat> listFormat=null;
  Map<String,ContentPacketExtension> contentMap=new HashMap<String,ContentPacketExtension>();
  ContentPacketExtension content=null;
  for (  ContentPacketExtension cpe : sessionInitiate.getContentList()) {
    if (cpe.getName().equalsIgnoreCase(""String_Node_Str"")) {
      content=HammerUtils.createDescriptionForDataContent(CreatorEnum.responder,SendersEnum.both);
    }
 else {
      listFormat=JingleUtils.extractFormats(cpe.getFirstChildOfType(RtpDescriptionPacketExtension.class),ptRegistry);
      possibleFormatMap.put(cpe.getName(),listFormat);
      selectedFormat.put(cpe.getName(),HammerUtils.selectFormat(cpe.getName(),listFormat));
      content=JingleUtils.createDescription(CreatorEnum.responder,cpe.getName(),SendersEnum.both,listFormat,null,ptRegistry,null);
    }
    contentMap.put(cpe.getName(),content);
  }
  contentMap.remove(""String_Node_Str"");
  iceMediaStreamGenerator=IceMediaStreamGenerator.getInstance();
  try {
    agent=iceMediaStreamGenerator.generateIceMediaStream(contentMap.keySet(),null,null);
  }
 catch (  IOException e) {
    System.err.println(e);
  }
  HammerUtils.addRemoteCandidateToAgent(agent,sessionInitiate.getContentList());
  HammerUtils.addLocalCandidateToContentList(agent,contentMap.values());
  mediaStreamMap=HammerUtils.generateMediaStream(selectedFormat,ptRegistry);
  Packet presencePacket=new Presence(Presence.Type.available);
  String recipient=serverInfo.getRoomName() + ""String_Node_Str"" + serverInfo.getMUCDomain();
  presencePacket.setTo(recipient);
  MediaPacketExtension mediaPacket=new MediaPacketExtension();
  for (  String key : mediaStreamMap.keySet()) {
    String str=String.valueOf(mediaStreamMap.get(key).getLocalSourceID());
    mediaPacket.addSource(key,str,MediaDirection.SENDRECV.toString());
  }
  presencePacket.addExtension(mediaPacket);
  connection.sendPacket(presencePacket);
  sessionAccept=JinglePacketFactory.createSessionAccept(sessionInitiate.getTo(),sessionInitiate.getFrom(),sessionInitiate.getSID(),contentMap.values());
  sessionAccept.setInitiator(sessionInitiate.getFrom());
  HammerUtils.addSSRCToContent(contentMap,mediaStreamMap);
  HammerUtils.setDtlsEncryptionOnTransport(mediaStreamMap,sessionAccept.getContentList(),sessionInitiate.getContentList());
  connection.sendPacket(sessionAccept);
  System.out.println(""String_Node_Str"");
  agent.startConnectivityEstablishment();
  while (IceProcessingState.TERMINATED != agent.getState()) {
    System.out.println(""String_Node_Str"");
    try {
      Thread.sleep(1500);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  HammerUtils.addSocketToMediaStream(agent,mediaStreamMap);
  for (  MediaStream stream : mediaStreamMap.values()) {
    stream.start();
  }
}","/** 
 * acceptJingleSession create a accept-session Jingle message and send it to the initiator of the session. The initiator is taken from the From attribute  of the initiate-session message.
 */
private void acceptJingleSession(){
  IceMediaStreamGenerator iceMediaStreamGenerator=null;
  List<MediaFormat> listFormat=null;
  Map<String,ContentPacketExtension> contentMap=new HashMap<String,ContentPacketExtension>();
  ContentPacketExtension content=null;
  for (  ContentPacketExtension cpe : sessionInitiate.getContentList()) {
    if (cpe.getName().equalsIgnoreCase(""String_Node_Str"")) {
      content=HammerUtils.createDescriptionForDataContent(CreatorEnum.responder,SendersEnum.responder);
    }
 else {
      listFormat=JingleUtils.extractFormats(cpe.getFirstChildOfType(RtpDescriptionPacketExtension.class),ptRegistry);
      possibleFormatMap.put(cpe.getName(),listFormat);
      selectedFormat.put(cpe.getName(),HammerUtils.selectFormat(cpe.getName(),listFormat));
      content=JingleUtils.createDescription(CreatorEnum.responder,cpe.getName(),SendersEnum.responder,listFormat,null,ptRegistry,null);
    }
    contentMap.put(cpe.getName(),content);
  }
  contentMap.remove(""String_Node_Str"");
  iceMediaStreamGenerator=IceMediaStreamGenerator.getInstance();
  try {
    agent=iceMediaStreamGenerator.generateIceMediaStream(contentMap.keySet(),null,null);
  }
 catch (  IOException e) {
    System.err.println(e);
  }
  HammerUtils.addRemoteCandidateToAgent(agent,sessionInitiate.getContentList());
  HammerUtils.addLocalCandidateToContentList(agent,contentMap.values());
  mediaStreamMap=HammerUtils.generateMediaStream(selectedFormat,ptRegistry);
  Packet presencePacket=new Presence(Presence.Type.available);
  String recipient=serverInfo.getRoomName() + ""String_Node_Str"" + serverInfo.getMUCDomain();
  presencePacket.setTo(recipient);
  MediaPacketExtension mediaPacket=new MediaPacketExtension();
  for (  String key : mediaStreamMap.keySet()) {
    String str=String.valueOf(mediaStreamMap.get(key).getLocalSourceID());
    mediaPacket.addSource(key,str,MediaDirection.SENDONLY.toString());
  }
  presencePacket.addExtension(mediaPacket);
  connection.sendPacket(presencePacket);
  sessionAccept=JinglePacketFactory.createSessionAccept(sessionInitiate.getTo(),sessionInitiate.getFrom(),sessionInitiate.getSID(),contentMap.values());
  sessionAccept.setInitiator(sessionInitiate.getFrom());
  HammerUtils.addSSRCToContent(contentMap,mediaStreamMap);
  HammerUtils.setDtlsEncryptionOnTransport(mediaStreamMap,sessionAccept.getContentList(),sessionInitiate.getContentList());
  connection.sendPacket(sessionAccept);
  System.out.println(""String_Node_Str"");
  agent.startConnectivityEstablishment();
  while (IceProcessingState.TERMINATED != agent.getState()) {
    System.out.println(""String_Node_Str"");
    try {
      Thread.sleep(1500);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  HammerUtils.addSocketToMediaStream(agent,mediaStreamMap);
  for (  MediaStream stream : mediaStreamMap.values()) {
    stream.start();
  }
}",0.9944498857329416
86399,"public static Map<String,MediaStream> generateMediaStream(Map<String,MediaFormat> mediaFormatMap,DynamicPayloadTypeRegistry ptRegistry){
  MediaStream stream=null;
  MediaFormat format=null;
  MediaDevice device=null;
  Map<String,MediaStream> mediaStreamMap=new HashMap<String,MediaStream>();
  MediaService mediaService=LibJitsi.getMediaService();
  for (  String mediaName : mediaFormatMap.keySet()) {
    format=mediaFormatMap.get(mediaName);
    if (format == null)     continue;
    stream=mediaService.createMediaStream(null,format.getMediaType(),mediaService.createSrtpControl(SrtpControlType.DTLS_SRTP));
    device=selectMediaDevice(format.getMediaType().toString());
    if (device != null)     stream.setDevice(device);
    stream.setFormat(format);
    stream.setName(mediaName);
    stream.setRTPTranslator(mediaService.createRTPTranslator());
    if (format.getRTPPayloadType() == MediaFormat.RTP_PAYLOAD_TYPE_UNKNOWN) {
      stream.addDynamicRTPPayloadType(ptRegistry.getPayloadType(format),format);
    }
    if (format.getMediaType() == MediaType.VIDEO)     stream.addDynamicRTPPayloadType((byte)116,format);
    mediaStreamMap.put(mediaName,stream);
  }
  return mediaStreamMap;
}","public static Map<String,MediaStream> generateMediaStream(Map<String,MediaFormat> mediaFormatMap,DynamicPayloadTypeRegistry ptRegistry){
  MediaStream stream=null;
  MediaFormat format=null;
  MediaDevice device=null;
  Map<String,MediaStream> mediaStreamMap=new HashMap<String,MediaStream>();
  MediaService mediaService=LibJitsi.getMediaService();
  for (  String mediaName : mediaFormatMap.keySet()) {
    format=mediaFormatMap.get(mediaName);
    if (format == null)     continue;
    stream=mediaService.createMediaStream(null,format.getMediaType(),mediaService.createSrtpControl(SrtpControlType.DTLS_SRTP));
    device=selectMediaDevice(format.getMediaType().toString());
    if (device != null)     stream.setDevice(device);
    stream.setFormat(format);
    stream.setName(mediaName);
    stream.setRTPTranslator(mediaService.createRTPTranslator());
    stream.setDirection(MediaDirection.SENDONLY);
    if (format.getRTPPayloadType() == MediaFormat.RTP_PAYLOAD_TYPE_UNKNOWN) {
      stream.addDynamicRTPPayloadType(ptRegistry.getPayloadType(format),format);
    }
    if (format.getMediaType() == MediaType.VIDEO)     stream.addDynamicRTPPayloadType((byte)116,format);
    mediaStreamMap.put(mediaName,stream);
  }
  return mediaStreamMap;
}",0.979591836734694
86400,"/** 
 * Initializes a new <tt>ImageStream</tt> instance which is to have a specific <tt>FormatControl</tt>
 * @param dataSource the <tt>DataSource</tt> which is creating the newinstance so that it becomes one of its <tt>streams</tt>
 * @param formatControl the <tt>FormatControl</tt> of the new instance whichis to specify the format in which it is to provide its media data
 */
RtpdumpStream(DataSource dataSource,FormatControl formatControl){
  super(dataSource,formatControl);
  this.ivfFileReader=new RtpdumpFileReader(dataSource.getLocator().getRemainder());
}","/** 
 * Initializes a new <tt>ImageStream</tt> instance which is to have a specific <tt>FormatControl</tt>
 * @param dataSource the <tt>DataSource</tt> which is creating the newinstance so that it becomes one of its <tt>streams</tt>
 * @param formatControl the <tt>FormatControl</tt> of the new instance whichis to specify the format in which it is to provide its media data
 */
RtpdumpStream(DataSource dataSource,FormatControl formatControl){
  super(dataSource,formatControl);
  String rtpdumpFilePath=dataSource.getLocator().getRemainder();
  this.ivfFileReader=new RtpdumpFileReader(rtpdumpFilePath);
}",0.9027303754266212
86401,"/** 
 * Reads available media data from this instance into a specific <tt>Buffer</tt>.
 * @param buffer the <tt>Buffer</tt> to write the available media datainto
 * @throws IOException if an I/O error has prevented the reading ofavailable media data from this instance into the specified <tt>buffer</tt>
 */
@Override protected void doRead(Buffer buffer) throws IOException {
  long millis=0;
  VideoFormat format;
  format=(VideoFormat)buffer.getFormat();
  if (format == null) {
    format=(VideoFormat)getFormat();
    if (format != null)     buffer.setFormat(format);
  }
  RTPPacket rtpPacket=ivfFileReader.getNextPacket(true);
  byte[] data=rtpPacket.getPayload();
  buffer.setData(data);
  buffer.setOffset(0);
  buffer.setLength(data.length);
  buffer.setTimeStamp(System.nanoTime());
  buffer.setFlags(Buffer.FLAG_SYSTEM_TIME | Buffer.FLAG_LIVE_DATA);
  millis=System.currentTimeMillis() - this.timeLastRead;
  millis=(long)(1000.0 / 1) - millis;
  if (millis > 0) {
    try {
      Thread.sleep(millis);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  this.timeLastRead=System.currentTimeMillis();
}","/** 
 * Reads available media data from this instance into a specific <tt>Buffer</tt>.
 * @param buffer the <tt>Buffer</tt> to write the available media datainto
 * @throws IOException if an I/O error has prevented the reading ofavailable media data from this instance into the specified <tt>buffer</tt>
 */
@Override protected void doRead(Buffer buffer) throws IOException {
  long millis=0;
  long timestamp=0;
  VideoFormat format;
  format=(VideoFormat)buffer.getFormat();
  if (format == null) {
    format=(VideoFormat)getFormat();
    if (format != null)     buffer.setFormat(format);
  }
  RTPPacket rtpPacket=ivfFileReader.getNextPacket(true);
  byte[] data=rtpPacket.getPayload();
  buffer.setData(data);
  buffer.setOffset(0);
  buffer.setLength(data.length);
  buffer.setFlags(Buffer.FLAG_SYSTEM_TIME | Buffer.FLAG_LIVE_DATA);
  if (lastReadWasMarked == true) {
    rtpTimestamp=System.nanoTime();
  }
  if ((lastReadWasMarked=rtpPacket.hasMarker()) == true) {
    buffer.setFlags(buffer.getFlags() | Buffer.FLAG_RTP_MARKER);
  }
  buffer.setTimeStamp(rtpTimestamp);
  millis=rtpPacket.getRtpdumpTimestamp() - this.timeLastRead;
  if (millis > 0) {
    try {
      Thread.sleep(millis);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  this.timeLastRead=rtpPacket.getRtpdumpTimestamp();
}",0.8280871670702179
86402,"public SPARQLQuery(SailRepository rep){
  super(rep);
  queryResultVariants=Variant.mediaTypes(MediaType.valueOf(RDFMediaType.SPARQL_RESULTS_JSON),MediaType.valueOf(RDFMediaType.SPARQL_RESULTS_XML),MediaType.valueOf(RDFMediaType.SPARQL_RESULTS_CSV),MediaType.valueOf(RDFMediaType.SPARQL_RESULTS_TSV)).add().build();
  this.registry=RDFWriterRegistry.getInstance();
  this.qwfactory=QueryRewriterFactory.getInstance(rep);
  String sout=SPARQLExtensionProps.getProperty(""String_Node_Str"");
  this.timeout=Integer.parseInt(sout);
}","public SPARQLQuery(SailRepository rep){
  super(rep);
  queryResultVariants=Variant.mediaTypes(MediaType.valueOf(RDFMediaType.SPARQL_RESULTS_JSON),MediaType.valueOf(RDFMediaType.SPARQL_RESULTS_XML),MediaType.valueOf(RDFMediaType.SPARQL_RESULTS_CSV),MediaType.valueOf(RDFMediaType.SPARQL_RESULTS_TSV)).add().build();
  booleanResultVariants=Variant.mediaTypes(MediaType.valueOf(RDFMediaType.SPARQL_RESULTS_JSON),MediaType.valueOf(RDFMediaType.SPARQL_RESULTS_XML),MediaType.valueOf(MediaType.TEXT_PLAIN)).add().build();
  this.registry=RDFWriterRegistry.getInstance();
  this.qwfactory=QueryRewriterFactory.getInstance(rep);
  String sout=SPARQLExtensionProps.getProperty(""String_Node_Str"");
  this.timeout=Integer.parseInt(sout);
}",0.8394276629570747
86403,"private Response handleQuery(Request req,UriInfo uriInfo,String queryString,List<String> defgraphs,List<String> namedgraphs,String inference){
  SailRepositoryConnection conn=null;
  try {
    if (queryString == null) {
      throw new MalformedQueryException(""String_Node_Str"");
    }
    conn=getConnection();
    final Query query;
    if (inference != null && inference.equals(""String_Node_Str"")) {
      QueryRewriter qw=qwfactory.getRewriter(conn);
      query=qw.rewrite(QueryLanguage.SPARQL,queryString,uriInfo.getAbsolutePath().toASCIIString());
    }
 else {
      query=conn.prepareQuery(QueryLanguage.SPARQL,queryString,uriInfo.getAbsolutePath().toASCIIString());
    }
    query.setMaxQueryTime(timeout);
    final List<Variant> acceptable;
    boolean isGraphQuery=false;
    if (query instanceof GraphQuery) {
      acceptable=rdfResultVariants;
      isGraphQuery=true;
    }
 else {
      acceptable=queryResultVariants;
    }
    final Variant variant=req.selectVariant(acceptable);
    if (variant == null) {
      return Response.notAcceptable(acceptable).build();
    }
    final MediaType mt=variant.getMediaType();
    final String mtstr=mt.getType() + ""String_Node_Str"" + mt.getSubtype();
    StreamingOutput stream;
    RDFWriterFactory factory=registry.get(getRDFFormat(mtstr));
    if (isGraphQuery) {
      GraphQuery gq=(GraphQuery)query;
      stream=new SPARQLGraphStreamingOutput(gq,factory,conn);
    }
 else {
      TupleQuery tq=(TupleQuery)query;
      stream=new SPARQLResultStreamingOutput(tq,getResultWriterFactory(mtstr),conn);
    }
    return Response.ok(stream).type(mt).build();
  }
 catch (  MalformedQueryException ex) {
    close(conn,ex);
    String str=ex.getMessage();
    return Response.status(Response.Status.BAD_REQUEST).entity(str.getBytes(Charset.forName(""String_Node_Str""))).build();
  }
catch (  RepositoryException ex) {
    close(conn,ex);
    throw new WebApplicationException(ex);
  }
}","private Response handleQuery(Request req,UriInfo uriInfo,String queryString,List<String> defgraphs,List<String> namedgraphs,String inference){
  SailRepositoryConnection conn=null;
  try {
    if (queryString == null) {
      throw new MalformedQueryException(""String_Node_Str"");
    }
    conn=getConnection();
    final Query query;
    if (inference != null && inference.equals(""String_Node_Str"")) {
      QueryRewriter qw=qwfactory.getRewriter(conn);
      query=qw.rewrite(QueryLanguage.SPARQL,queryString,uriInfo.getAbsolutePath().toASCIIString());
    }
 else {
      query=conn.prepareQuery(QueryLanguage.SPARQL,queryString,uriInfo.getAbsolutePath().toASCIIString());
    }
    query.setMaxQueryTime(timeout);
    final List<Variant> acceptable;
    boolean isGraphQuery=false;
    boolean isBooleanQuery=false;
    if (query instanceof GraphQuery) {
      isGraphQuery=true;
    }
 else     if (query instanceof BooleanQuery) {
      isBooleanQuery=true;
    }
    if (isGraphQuery) {
      acceptable=rdfResultVariants;
    }
 else     if (isBooleanQuery) {
      acceptable=booleanResultVariants;
    }
 else {
      acceptable=queryResultVariants;
    }
    final Variant variant=req.selectVariant(acceptable);
    if (variant == null) {
      return Response.notAcceptable(acceptable).build();
    }
    final MediaType mt=variant.getMediaType();
    final String mtstr=mt.getType() + ""String_Node_Str"" + mt.getSubtype();
    StreamingOutput stream;
    RDFWriterFactory factory=registry.get(getRDFFormat(mtstr));
    if (isGraphQuery) {
      GraphQuery gq=(GraphQuery)query;
      stream=new SPARQLGraphStreamingOutput(gq,factory,conn);
    }
 else     if (isBooleanQuery) {
      BooleanQuery bq=(BooleanQuery)query;
      stream=new SPARQLBooleanStreamingOutput(bq,getBooleanWriterFactory(mtstr),conn);
    }
 else {
      TupleQuery tq=(TupleQuery)query;
      stream=new SPARQLTupleStreamingOutput(tq,getTupleWriterFactory(mtstr),conn);
    }
    return Response.ok(stream).type(mt).build();
  }
 catch (  MalformedQueryException ex) {
    close(conn,ex);
    String str=ex.getMessage();
    return Response.status(Response.Status.BAD_REQUEST).entity(str.getBytes(Charset.forName(""String_Node_Str""))).build();
  }
catch (  RepositoryException ex) {
    close(conn,ex);
    throw new WebApplicationException(ex);
  }
}",0.8860877684407096
86404,"public Query rewrite(QueryLanguage ql,String query,String baseuri) throws MalformedQueryException, RepositoryException, RuntimeException {
  QueryParserFactory f=QueryParserRegistry.getInstance().get(ql);
  QueryParser parser=f.getParser();
  ParsedQuery parsed=parser.parseQuery(query,baseuri);
  TupleExpr expr=parsed.getTupleExpr();
  RuleTransformationVisitor visitor=new RuleTransformationVisitor(vf,rules);
  expr.visit(visitor);
  return new SailTupleExprQuery(new ParsedTupleQuery(expr),conn);
}","public Query rewrite(QueryLanguage ql,String query,String baseuri) throws MalformedQueryException, RepositoryException, RuntimeException {
  QueryParserFactory f=QueryParserRegistry.getInstance().get(ql);
  QueryParser parser=f.getParser();
  ParsedQuery parsed=parser.parseQuery(query,baseuri);
  TupleExpr expr=parsed.getTupleExpr();
  RuleTransformationVisitor visitor=new RuleTransformationVisitor(vf,rules);
  expr.visit(visitor);
  return getExprQuery(parsed,expr);
}",0.930327868852459
86405,"@Nullable private Url previewUrl(OpenInBrowserRequest request,VirtualFile virtualFile,GaugeSettingsModel settings) throws IOException, InterruptedException {
  ProcessBuilder builder=new ProcessBuilder(settings.getGaugePath(),Constants.DOCS,Spectacle.NAME,virtualFile.getPath());
  String projectName=request.getProject().getName();
  builder.environment().put(""String_Node_Str"",createOrGetTempDirectory(projectName).getPath() + ""String_Node_Str"");
  builder.directory(GaugeUtil.moduleDir(GaugeUtil.moduleForPsiElement(request.getFile())));
  GaugeUtil.setGaugeEnvironmentsTo(builder,settings);
  Process docsProcess=builder.start();
  int exitCode=docsProcess.waitFor();
  if (exitCode != 0) {
    String docsOutput=String.format(""String_Node_Str"",GaugeUtil.getOutput(docsProcess.getInputStream(),""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
    Notifications.Bus.notify(new Notification(""String_Node_Str"",""String_Node_Str"",docsOutput,NotificationType.ERROR));
    return null;
  }
  return new UrlImpl(FileUtil.join(createOrGetTempDirectory(projectName).getPath(),""String_Node_Str"" + virtualFile.getNameWithoutExtension() + ""String_Node_Str""));
}","@Nullable private Url previewUrl(OpenInBrowserRequest request,VirtualFile virtualFile,GaugeSettingsModel settings) throws IOException, InterruptedException {
  ProcessBuilder builder=new ProcessBuilder(settings.getGaugePath(),Constants.DOCS,Spectacle.NAME,virtualFile.getPath());
  String projectName=request.getProject().getName();
  builder.environment().put(""String_Node_Str"",FileUtil.join(createOrGetTempDirectory(projectName).getPath(),""String_Node_Str""));
  File gaugeModuleDir=GaugeUtil.moduleDir(GaugeUtil.moduleForPsiElement(request.getFile()));
  builder.directory(gaugeModuleDir);
  GaugeUtil.setGaugeEnvironmentsTo(builder,settings);
  Process docsProcess=builder.start();
  int exitCode=docsProcess.waitFor();
  if (exitCode != 0) {
    String docsOutput=String.format(""String_Node_Str"",GaugeUtil.getOutput(docsProcess.getInputStream(),""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
    Notifications.Bus.notify(new Notification(""String_Node_Str"",""String_Node_Str"",docsOutput,NotificationType.ERROR));
    return null;
  }
  String relativePath=FileUtil.getRelativePath(gaugeModuleDir,new File(virtualFile.getParent().getPath()));
  return new UrlImpl(FileUtil.join(createOrGetTempDirectory(projectName).getPath(),""String_Node_Str"",""String_Node_Str"",relativePath,virtualFile.getNameWithoutExtension() + ""String_Node_Str""));
}",0.863914373088685
86406,"private void processElements(final ReferencesSearch.SearchParameters searchParameters,final Processor<PsiReference> processor){
  ApplicationManager.getApplication().runReadAction(() -> {
    StepCollector collector=helper.getStepCollector(searchParameters.getElementToSearch());
    collector.collect();
    final List<PsiElement> elements=helper.getPsiElements(collector,searchParameters.getElementToSearch());
    for (    PsiElement element : elements)     processor.process(element.getReference());
  }
);
}","private void processElements(final ReferencesSearch.SearchParameters searchParameters,final Processor<? super PsiReference> processor){
  ApplicationManager.getApplication().runReadAction(() -> {
    StepCollector collector=helper.getStepCollector(searchParameters.getElementToSearch());
    collector.collect();
    final List<PsiElement> elements=helper.getPsiElements(collector,searchParameters.getElementToSearch());
    for (    PsiElement element : elements)     processor.process(element.getReference());
  }
);
}",0.992248062015504
86407,"@Override public void processQuery(@NotNull final ReferencesSearch.SearchParameters searchParameters,@NotNull final Processor<PsiReference> processor){
  ApplicationManager.getApplication().runReadAction(() -> {
    if (!helper.shouldFindReferences(searchParameters,searchParameters.getElementToSearch()))     return;
    if (EventQueue.isDispatchThread())     ProgressManager.getInstance().runProcessWithProgressSynchronously(() -> processElements(searchParameters,processor),""String_Node_Str"",true,searchParameters.getElementToSearch().getProject());
 else     processElements(searchParameters,processor);
  }
);
}","@Override public void processQuery(@NotNull ReferencesSearch.SearchParameters searchParameters,@NotNull Processor<? super PsiReference> processor){
  ApplicationManager.getApplication().runReadAction(() -> {
    if (!helper.shouldFindReferences(searchParameters,searchParameters.getElementToSearch()))     return;
    if (EventQueue.isDispatchThread())     ProgressManager.getInstance().runProcessWithProgressSynchronously(() -> processElements(searchParameters,processor),""String_Node_Str"",true,searchParameters.getElementToSearch().getProject());
 else     processElements(searchParameters,processor);
  }
);
}",0.98371335504886
86408,"public boolean isImplicitUsage(PsiElement element){
  if (element instanceof PsiClassImpl) {
    for (    PsiMethod psiMethod : ((PsiClassImpl)element).getMethods())     if (StepUtil.getGaugeStepAnnotationValues(psiMethod).size() > 0)     return true;
    return false;
  }
  boolean isGaugeElement=GaugeUtil.isGaugeElement(element);
  if (!isGaugeElement)   return false;
  StepCollector collector=new StepCollector(element.getProject());
  collector.collect();
  return ReferenceSearch.getPsiElements(collector,element).size() > 0;
}","public boolean isImplicitUsage(PsiElement element){
  Module module=GaugeUtil.moduleForPsiElement(element);
  if (module == null || !GaugeUtil.isGaugeModule(module))   return false;
  if (element instanceof PsiClassImpl) {
    for (    PsiMethod psiMethod : ((PsiClassImpl)element).getMethods())     if (StepUtil.getGaugeStepAnnotationValues(psiMethod).size() > 0)     return true;
    return false;
  }
  boolean isGaugeElement=GaugeUtil.isGaugeElement(element);
  if (!isGaugeElement)   return false;
  StepCollector collector=new StepCollector(element.getProject());
  collector.collect();
  return ReferenceSearch.getPsiElements(collector,element).size() > 0;
}",0.8533333333333334
86409,"private void processElements(final ReferencesSearch.SearchParameters searchParameters,final Processor<PsiReference> processor){
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    @Override public void run(){
      if (!shouldFindUsages(searchParameters,searchParameters.getElementToSearch()))       return;
      StepCollector collector=new StepCollector(searchParameters.getElementToSearch().getProject());
      collector.collect();
      final List<PsiElement> elements=getPsiElements(collector,searchParameters.getElementToSearch());
      for (      PsiElement element : elements)       processor.process(element.getReference());
    }
  }
);
}","private void processElements(final ReferencesSearch.SearchParameters searchParameters,final Processor<PsiReference> processor){
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    @Override public void run(){
      StepCollector collector=new StepCollector(searchParameters.getElementToSearch().getProject());
      collector.collect();
      final List<PsiElement> elements=getPsiElements(collector,searchParameters.getElementToSearch());
      for (      PsiElement element : elements)       processor.process(element.getReference());
    }
  }
);
}",0.4867042707493956
86410,"@Override public void processQuery(@NotNull final ReferencesSearch.SearchParameters searchParameters,@NotNull final Processor<PsiReference> processor){
  if (EventQueue.isDispatchThread())   ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    @Override public void run(){
      processElements(searchParameters,processor);
    }
  }
,""String_Node_Str"",true,searchParameters.getElementToSearch().getProject());
 else   processElements(searchParameters,processor);
}","@Override public void processQuery(@NotNull final ReferencesSearch.SearchParameters searchParameters,@NotNull final Processor<PsiReference> processor){
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    @Override public void run(){
      if (!shouldFindUsages(searchParameters,searchParameters.getElementToSearch()))       return;
      if (EventQueue.isDispatchThread())       ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
        @Override public void run(){
          processElements(searchParameters,processor);
        }
      }
,""String_Node_Str"",true,searchParameters.getElementToSearch().getProject());
 else       processElements(searchParameters,processor);
    }
  }
);
}",0.6467259498787389
86411,"@Override public void run(){
  if (!shouldFindUsages(searchParameters,searchParameters.getElementToSearch()))   return;
  StepCollector collector=new StepCollector(searchParameters.getElementToSearch().getProject());
  collector.collect();
  final List<PsiElement> elements=getPsiElements(collector,searchParameters.getElementToSearch());
  for (  PsiElement element : elements)   processor.process(element.getReference());
}","@Override public void run(){
  StepCollector collector=new StepCollector(searchParameters.getElementToSearch().getProject());
  collector.collect();
  final List<PsiElement> elements=getPsiElements(collector,searchParameters.getElementToSearch());
  for (  PsiElement element : elements)   processor.process(element.getReference());
}",0.1264822134387351
86412,"private boolean shouldFindUsages(@NotNull ReferencesSearch.SearchParameters searchParameters,PsiElement element){
  return !searchParameters.getScope().getDisplayName().equals(""String_Node_Str"") && GaugeUtil.isGaugeElement(element);
}","private boolean shouldFindUsages(@NotNull ReferencesSearch.SearchParameters searchParameters,PsiElement element){
  Module module=GaugeUtil.moduleForPsiElement(element);
  return module != null && GaugeUtil.isGaugeModule(module) && !searchParameters.getScope().getDisplayName().equals(""String_Node_Str"") && GaugeUtil.isGaugeElement(element);
}",0.7902946273830156
86413,"@Override public PopupStep onChosen(final PsiFile selectedValue,boolean finalChoice){
  return doFinalStep(new Runnable(){
    public void run(){
      if (selectedValue == NEW_FILE_HOLDER) {
        createFileAndAddImpl(editor);
      }
 else {
        addImpl(project,selectedValue.getVirtualFile());
      }
    }
  }
);
}","@Override public PopupStep onChosen(final PsiFile selectedValue,boolean finalChoice){
  return doFinalStep(() -> {
    if (selectedValue == NEW_FILE_HOLDER) {
      createFileAndAddImpl(editor);
    }
 else {
      addImpl(project,selectedValue.getVirtualFile());
    }
  }
);
}",0.8623548922056384
86414,"@Override public void invoke(@NotNull final Project project,final Editor editor,final PsiFile file) throws IncorrectOperationException {
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      List<PsiFile> javaFiles=FileManager.getAllJavaFiles(GaugeUtil.moduleForPsiElement(file));
      javaFiles.add(0,NEW_FILE_HOLDER);
      ListPopup stepImplChooser=JBPopupFactory.getInstance().createListPopup(new BaseListPopupStep<PsiFile>(""String_Node_Str"",javaFiles){
        @Override public boolean isSpeedSearchEnabled(){
          return true;
        }
        @Override public PopupStep onChosen(        final PsiFile selectedValue,        boolean finalChoice){
          return doFinalStep(new Runnable(){
            public void run(){
              if (selectedValue == NEW_FILE_HOLDER) {
                createFileAndAddImpl(editor);
              }
 else {
                addImpl(project,selectedValue.getVirtualFile());
              }
            }
          }
);
        }
        @Override public Icon getIconFor(        PsiFile aValue){
          return aValue == null ? AllIcons.Actions.CreateFromUsage : aValue.getIcon(0);
        }
        @NotNull @Override public String getTextFor(        PsiFile value){
          if (value == null) {
            return ""String_Node_Str"";
          }
 else {
            return getJavaFileName(value);
          }
        }
      }
);
      stepImplChooser.showCenteredInCurrentWindow(step.getProject());
    }
    private String getJavaFileName(    PsiFile value){
      PsiJavaFile javaFile=(PsiJavaFile)value;
      if (!javaFile.getPackageName().equals(""String_Node_Str"")) {
        return javaFile.getPackageName() + ""String_Node_Str"" + javaFile.getName();
      }
      return javaFile.getName();
    }
  }
);
}","@Override public void invoke(@NotNull final Project project,final Editor editor,final PsiFile file) throws IncorrectOperationException {
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      List<PsiFile> javaFiles=FileManager.getAllJavaFiles(GaugeUtil.moduleForPsiElement(file));
      javaFiles.add(0,NEW_FILE_HOLDER);
      ListPopup stepImplChooser=JBPopupFactory.getInstance().createListPopup(new BaseListPopupStep<PsiFile>(""String_Node_Str"",javaFiles){
        @Override public boolean isSpeedSearchEnabled(){
          return true;
        }
        @Override public PopupStep onChosen(        final PsiFile selectedValue,        boolean finalChoice){
          return doFinalStep(() -> {
            if (selectedValue == NEW_FILE_HOLDER) {
              createFileAndAddImpl(editor);
            }
 else {
              addImpl(project,selectedValue.getVirtualFile());
            }
          }
);
        }
        @Override public Icon getIconFor(        PsiFile aValue){
          return aValue == null ? AllIcons.Actions.CreateFromUsage : aValue.getIcon(0);
        }
        @NotNull @Override public String getTextFor(        PsiFile value){
          if (value == null) {
            return ""String_Node_Str"";
          }
 else {
            return getJavaFileName(value);
          }
        }
      }
);
      stepImplChooser.showCenteredInCurrentWindow(step.getProject());
    }
    private String getJavaFileName(    PsiFile value){
      PsiJavaFile javaFile=(PsiJavaFile)value;
      if (!javaFile.getPackageName().equals(""String_Node_Str"")) {
        return javaFile.getPackageName() + ""String_Node_Str"" + javaFile.getName();
      }
      return javaFile.getName();
    }
  }
);
}",0.9789974796975636
86415,"public static List<PsiFile> getAllConceptFiles(Project project){
  Collection<VirtualFile> virtualFiles=FileBasedIndex.getInstance().getContainingFiles(FileTypeIndex.NAME,ConceptFileType.INSTANCE,GlobalSearchScope.projectScope(project));
  List<PsiFile> files=new ArrayList<PsiFile>();
  for (  VirtualFile ConceptVFile : virtualFiles) {
    PsiFile file=PsiManager.getInstance(project).findFile(ConceptVFile);
    if (file != null) {
      files.add(file);
    }
  }
  Collections.sort(files,new Comparator<PsiFile>(){
    @Override public int compare(    PsiFile o1,    PsiFile o2){
      return o1.getName().compareToIgnoreCase(o2.getName());
    }
  }
);
  return files;
}","public static List<PsiFile> getAllConceptFiles(Project project){
  Collection<VirtualFile> virtualFiles=FileBasedIndex.getInstance().getContainingFiles(FileTypeIndex.NAME,ConceptFileType.INSTANCE,GlobalSearchScope.projectScope(project));
  List<PsiFile> files=new ArrayList<>();
  for (  VirtualFile ConceptVFile : virtualFiles) {
    PsiFile file=PsiManager.getInstance(project).findFile(ConceptVFile);
    if (file != null) {
      files.add(file);
    }
  }
  Collections.sort(files,(o1,o2) -> o1.getName().compareToIgnoreCase(o2.getName()));
  return files;
}",0.8781275221953188
86416,"public static List<VirtualFile> getConceptFiles(Project project){
  Collection<VirtualFile> virtualFiles=FileBasedIndex.getInstance().getContainingFiles(FileTypeIndex.NAME,ConceptFileType.INSTANCE,GlobalSearchScope.projectScope(project));
  return new ArrayList<VirtualFile>(virtualFiles);
}","public static List<VirtualFile> getConceptFiles(Project project){
  Collection<VirtualFile> virtualFiles=FileBasedIndex.getInstance().getContainingFiles(FileTypeIndex.NAME,ConceptFileType.INSTANCE,GlobalSearchScope.projectScope(project));
  return new ArrayList<>(virtualFiles);
}",0.9807355516637478
86417,"public static List<String> getDirNamesUnderSpecs(Project project){
  File dir=new File(project.getBasePath() + File.separator + Constants.SPECS_DIR);
  File[] files=dir.listFiles();
  List<String> dirs=new ArrayList<String>();
  dirs.add(String.format(""String_Node_Str"",File.separator,Constants.SPECS_DIR,File.separator));
  if (files != null)   getDirectories(files,dirs,project.getBasePath());
  return dirs;
}","public static List<String> getDirNamesUnderSpecs(Project project){
  File dir=new File(project.getBasePath() + File.separator + Constants.SPECS_DIR);
  File[] files=dir.listFiles();
  List<String> dirs=new ArrayList<>();
  dirs.add(String.format(""String_Node_Str"",File.separator,Constants.SPECS_DIR,File.separator));
  if (files != null)   getDirectories(files,dirs,project.getBasePath());
  return dirs;
}",0.9926650366748166
86418,"public static List<VirtualFile> getAllSpecFiles(Project project){
  Collection<VirtualFile> virtualFiles=FileBasedIndex.getInstance().getContainingFiles(FileTypeIndex.NAME,SpecFileType.INSTANCE,GlobalSearchScope.projectScope(project));
  return new ArrayList<VirtualFile>(virtualFiles);
}","public static List<VirtualFile> getAllSpecFiles(Project project){
  Collection<VirtualFile> virtualFiles=FileBasedIndex.getInstance().getContainingFiles(FileTypeIndex.NAME,SpecFileType.INSTANCE,GlobalSearchScope.projectScope(project));
  return new ArrayList<>(virtualFiles);
}",0.9805309734513274
86419,"public static List<PsiFile> getAllJavaFiles(Module module){
  Collection<VirtualFile> javaVirtualFiles=FileBasedIndex.getInstance().getContainingFiles(FileTypeIndex.NAME,JavaFileType.INSTANCE,moduleScope(module));
  List<PsiFile> javaFiles=new ArrayList<PsiFile>();
  for (  VirtualFile javaVFile : javaVirtualFiles) {
    PsiFile file=PsiManager.getInstance(module.getProject()).findFile(javaVFile);
    if (file != null) {
      javaFiles.add(file);
    }
  }
  Collections.sort(javaFiles,new Comparator<PsiFile>(){
    @Override public int compare(    PsiFile o1,    PsiFile o2){
      return FileManager.getJavaFileName(o1).compareToIgnoreCase(FileManager.getJavaFileName(o2));
    }
  }
);
  return javaFiles;
}","public static List<PsiFile> getAllJavaFiles(Module module){
  Collection<VirtualFile> javaVirtualFiles=FileBasedIndex.getInstance().getContainingFiles(FileTypeIndex.NAME,JavaFileType.INSTANCE,moduleScope(module));
  List<PsiFile> javaFiles=new ArrayList<>();
  for (  VirtualFile javaVFile : javaVirtualFiles) {
    PsiFile file=PsiManager.getInstance(module.getProject()).findFile(javaVFile);
    if (file != null) {
      javaFiles.add(file);
    }
  }
  Collections.sort(javaFiles,(o1,o2) -> FileManager.getJavaFileName(o1).compareToIgnoreCase(FileManager.getJavaFileName(o2)));
  return javaFiles;
}",0.7581501137225171
86420,"@Override public PsiDirectory[] getDirectories(){
  List<PsiDirectory> psiDirectories=new ArrayList<PsiDirectory>();
  PsiManager psiManager=PsiManager.getInstance(project);
  for (  VirtualFile root : ProjectRootManager.getInstance(psiManager.getProject()).getContentSourceRoots()) {
    PsiDirectory directory=psiManager.findDirectory(root);
    if (directory != null) {
      psiDirectories.add(directory);
    }
  }
  return psiDirectories.toArray(new PsiDirectory[]{});
}","@Override public PsiDirectory[] getDirectories(){
  List<PsiDirectory> psiDirectories=new ArrayList<>();
  PsiManager psiManager=PsiManager.getInstance(project);
  for (  VirtualFile root : ProjectRootManager.getInstance(psiManager.getProject()).getContentSourceRoots()) {
    PsiDirectory directory=psiManager.findDirectory(root);
    if (directory != null) {
      psiDirectories.add(directory);
    }
  }
  return psiDirectories.toArray(new PsiDirectory[]{});
}",0.9872340425531916
86421,"private Set<String> getArgsFromSteps(List<SpecStep> steps){
  Set<String> staticArgs=new HashSet<String>();
  for (  SpecStep step : steps) {
    List<SpecStaticArg> args=step.getStaticArgList();
    for (    SpecStaticArg arg : args) {
      if (arg.getText() != null)       staticArgs.add(arg.getText());
    }
  }
  return staticArgs;
}","private Set<String> getArgsFromSteps(List<SpecStep> steps){
  Set<String> staticArgs=new HashSet<>();
  for (  SpecStep step : steps) {
    List<SpecStaticArg> args=step.getStaticArgList();
    args.stream().filter(arg -> arg.getText() != null).forEach((arg) -> staticArgs.add(arg.getText()));
  }
  return staticArgs;
}",0.7769347496206374
86422,"@Override protected void addCompletions(@NotNull CompletionParameters parameters,ProcessingContext context,@NotNull CompletionResultSet resultSet){
  String prefix=getPrefix(parameters);
  resultSet=resultSet.withPrefixMatcher(new PlainPrefixMatcher(prefix));
  PsiFile specFile=parameters.getOriginalFile();
  SpecDetail specDetail=PsiTreeUtil.getChildOfType(specFile,SpecDetail.class);
  List<SpecStep> stepsInFile=new ArrayList<SpecStep>();
  addContextSteps(specDetail,stepsInFile);
  addStepsInScenarios(specFile,stepsInFile);
  Set<String> staticArgs=getArgsFromSteps(stepsInFile);
  for (  String arg : staticArgs) {
    if (arg != null) {
      LookupElementBuilder item=LookupElementBuilder.create(arg);
      resultSet.addElement(item);
    }
  }
}","@Override protected void addCompletions(@NotNull CompletionParameters parameters,ProcessingContext context,@NotNull CompletionResultSet resultSet){
  String prefix=getPrefix(parameters);
  resultSet=resultSet.withPrefixMatcher(new PlainPrefixMatcher(prefix));
  PsiFile specFile=parameters.getOriginalFile();
  SpecDetail specDetail=PsiTreeUtil.getChildOfType(specFile,SpecDetail.class);
  List<SpecStep> stepsInFile=new ArrayList<>();
  addContextSteps(specDetail,stepsInFile);
  addStepsInScenarios(specFile,stepsInFile);
  Set<String> staticArgs=getArgsFromSteps(stepsInFile);
  for (  String arg : staticArgs) {
    if (arg != null) {
      LookupElementBuilder item=LookupElementBuilder.create(arg);
      resultSet.addElement(item);
    }
  }
}",0.9946949602122016
86423,"@Override public void addCompletions(@NotNull final CompletionParameters parameters,ProcessingContext context,@NotNull CompletionResultSet resultSet){
  resultSet.stopHere();
  final String prefix=getPrefix(parameters);
  resultSet=resultSet.withPrefixMatcher(new GaugePrefixMatcher(prefix));
  Module moduleForPsiElement=GaugeUtil.moduleForPsiElement(parameters.getPosition());
  if (moduleForPsiElement == null) {
    return;
  }
  for (  Type item : getStepsInModule(moduleForPsiElement)) {
    LookupElementBuilder element=LookupElementBuilder.create(item.getText()).withTypeText(item.getType(),true);
    element=element.withInsertHandler(new InsertHandler<LookupElement>(){
      @Override public void handleInsert(      InsertionContext context,      LookupElement item){
        if (context.getCompletionChar() == '\t') {
          context.getDocument().insertString(context.getEditor().getCaretModel().getOffset(),""String_Node_Str"");
          PsiDocumentManager.getInstance(context.getProject()).commitDocument(context.getDocument());
        }
        PsiElement stepElement=context.getFile().findElementAt(context.getStartOffset()).getParent();
        TemplateBuilder templateBuilder=getTemplateBuilder(stepElement,prefix);
        templateBuilder.run(context.getEditor(),false);
      }
    }
);
    resultSet.addElement(element);
  }
}","@Override public void addCompletions(@NotNull final CompletionParameters parameters,ProcessingContext context,@NotNull CompletionResultSet resultSet){
  resultSet.stopHere();
  final String prefix=getPrefix(parameters);
  resultSet=resultSet.withPrefixMatcher(new GaugePrefixMatcher(prefix));
  Module moduleForPsiElement=GaugeUtil.moduleForPsiElement(parameters.getPosition());
  if (moduleForPsiElement == null) {
    return;
  }
  for (  Type item : getStepsInModule(moduleForPsiElement)) {
    LookupElementBuilder element=LookupElementBuilder.create(item.getText()).withTypeText(item.getType(),true);
    element=element.withInsertHandler((context1,item1) -> {
      if (context1.getCompletionChar() == '\t') {
        context1.getDocument().insertString(context1.getEditor().getCaretModel().getOffset(),""String_Node_Str"");
        PsiDocumentManager.getInstance(context1.getProject()).commitDocument(context1.getDocument());
      }
      PsiElement stepElement=context1.getFile().findElementAt(context1.getStartOffset()).getParent();
      TemplateBuilder templateBuilder=getTemplateBuilder(stepElement,prefix);
      templateBuilder.run(context1.getEditor(),false);
    }
);
    resultSet.addElement(element);
  }
}",0.8861251457442674
86424,"private List<String> getFilledParams(String prefix){
  Pattern filledParamPattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=filledParamPattern.matcher(prefix);
  List<String> filledParams=new ArrayList<String>();
  while (matcher.find()) {
    filledParams.add(matcher.group());
  }
  return filledParams;
}","private List<String> getFilledParams(String prefix){
  Pattern filledParamPattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=filledParamPattern.matcher(prefix);
  List<String> filledParams=new ArrayList<>();
  while (matcher.find()) {
    filledParams.add(matcher.group());
  }
  return filledParams;
}",0.990506329113924
86425,"private List<Type> getStepsInModule(Module module){
  List<Type> steps=new ArrayList<Type>();
  try {
    GaugeService gaugeService=Gauge.getGaugeService(module,true);
    if (gaugeService == null)     return steps;
    GaugeConnection gaugeConnection=gaugeService.getGaugeConnection();
    if (gaugeConnection != null) {
      for (      StepValue stepValue : gaugeConnection.fetchAllSteps())       addStep(steps,stepValue);
      for (      ConceptInfo conceptInfo : gaugeConnection.fetchAllConcepts())       addStep(steps,conceptInfo.getStepValue());
      return steps;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return steps;
}","private List<Type> getStepsInModule(Module module){
  List<Type> steps=new ArrayList<>();
  try {
    GaugeService gaugeService=Gauge.getGaugeService(module,true);
    if (gaugeService == null)     return steps;
    GaugeConnection gaugeConnection=gaugeService.getGaugeConnection();
    if (gaugeConnection != null) {
      for (      StepValue stepValue : gaugeConnection.fetchAllSteps())       addStep(steps,stepValue);
      for (      ConceptInfo conceptInfo : gaugeConnection.fetchAllConcepts())       addStep(steps,conceptInfo.getStepValue());
      return steps;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return steps;
}",0.9969465648854962
86426,"public static HashSet<Module> getSubModules(Module module){
  String value=getProjectGroupValue(module);
  HashSet<Module> modules=linkedModulesMap.get(value);
  if (modules != null)   return modules;
  modules=new HashSet<Module>();
  for (  Module m : ModuleManager.getInstance(module.getProject()).getModules())   if (getProjectGroupValue(m).equals(value)) {
    modules.add(m);
    addToModulesMap(m,value);
  }
  return modules;
}","public static HashSet<Module> getSubModules(Module module){
  String value=getProjectGroupValue(module);
  HashSet<Module> modules=linkedModulesMap.get(value);
  if (modules != null)   return modules;
  modules=new HashSet<>();
  for (  Module m : ModuleManager.getInstance(module.getProject()).getModules())   if (getProjectGroupValue(m).equals(value)) {
    modules.add(m);
    addToModulesMap(m,value);
  }
  return modules;
}",0.9930555555555556
86427,"private static void addToModulesMap(Module module,String name){
  if (!linkedModulesMap.containsKey(name))   linkedModulesMap.put(name,new HashSet<Module>());
  linkedModulesMap.get(name).add(module);
}","private static void addToModulesMap(Module module,String name){
  if (!linkedModulesMap.containsKey(name))   linkedModulesMap.put(name,new HashSet<>());
  linkedModulesMap.get(name).add(module);
}",0.984924623115578
86428,"@Override public boolean isConfigurationFromContext(RunConfiguration configuration,ConfigurationContext context){
  if (configuration.getType() != getConfigurationType())   return false;
  final Location location=context.getLocation();
  if (location == null || location.getVirtualFile() == null) {
    return false;
  }
  final String specsToExecute=((GaugeRunConfiguration)configuration).getSpecsToExecute();
  if (specsToExecute == null) {
    return false;
  }
  return (specsToExecute.contains(location.getVirtualFile().getName()));
}","@Override public boolean isConfigurationFromContext(RunConfiguration configuration,ConfigurationContext context){
  if (configuration.getType() != getConfigurationType())   return false;
  final Location location=context.getLocation();
  if (location == null || location.getVirtualFile() == null) {
    return false;
  }
  final String specsToExecute=((GaugeRunConfiguration)configuration).getSpecsToExecute();
  return specsToExecute != null && (specsToExecute.contains(location.getVirtualFile().getName()));
}",0.820952380952381
86429,"@Override public void readExternal(Element element) throws InvalidDataException {
  super.readExternal(element);
  environment=JDOMExternalizer.readString(element,""String_Node_Str"");
  specsToExecute=JDOMExternalizer.readString(element,""String_Node_Str"");
  tags=JDOMExternalizer.readString(element,""String_Node_Str"");
  parallelNodes=JDOMExternalizer.readString(element,""String_Node_Str"");
  execInParallel=JDOMExternalizer.readBoolean(element,""String_Node_Str"");
  programParameters.setProgramParameters(JDOMExternalizer.readString(element,""String_Node_Str""));
  programParameters.setWorkingDirectory(JDOMExternalizer.readString(element,""String_Node_Str""));
  this.moduleName=JDOMExternalizer.readString(element,""String_Node_Str"");
  HashMap<String,String> envMap=new HashMap<String,String>();
  JDOMExternalizer.readMap(element,envMap,""String_Node_Str"",""String_Node_Str"");
  programParameters.setEnvs(envMap);
  rowsRange=JDOMExternalizer.readString(element,""String_Node_Str"");
}","@Override public void readExternal(Element element) throws InvalidDataException {
  super.readExternal(element);
  environment=JDOMExternalizer.readString(element,""String_Node_Str"");
  specsToExecute=JDOMExternalizer.readString(element,""String_Node_Str"");
  tags=JDOMExternalizer.readString(element,""String_Node_Str"");
  parallelNodes=JDOMExternalizer.readString(element,""String_Node_Str"");
  execInParallel=JDOMExternalizer.readBoolean(element,""String_Node_Str"");
  programParameters.setProgramParameters(JDOMExternalizer.readString(element,""String_Node_Str""));
  programParameters.setWorkingDirectory(JDOMExternalizer.readString(element,""String_Node_Str""));
  this.moduleName=JDOMExternalizer.readString(element,""String_Node_Str"");
  HashMap<String,String> envMap=new HashMap<>();
  JDOMExternalizer.readMap(element,envMap,""String_Node_Str"",""String_Node_Str"");
  programParameters.setEnvs(envMap);
  rowsRange=JDOMExternalizer.readString(element,""String_Node_Str"");
}",0.9933367503844184
86430,"private static void launchDebugger(final Project project,final GaugeRunConfiguration.DebugInfo debugInfo){
  Runnable runnable=new Runnable(){
    @Override public void run(){
      final long startTime=System.currentTimeMillis();
      GenericDebuggerRunner basicProgramRunner=new GenericDebuggerRunner();
      ProjectPropertiesComponentImpl propertiesComponent=new ProjectPropertiesComponentImpl();
      RunManagerImpl manager=new RunManagerImpl(project,propertiesComponent);
      ConfigurationFactory configFactory=RemoteConfigurationType.getInstance().getConfigurationFactories()[0];
      RemoteConfiguration remoteConfig=new RemoteConfiguration(project,configFactory);
      remoteConfig.PORT=debugInfo.getPort();
      remoteConfig.HOST=debugInfo.getHost();
      remoteConfig.USE_SOCKET_TRANSPORT=true;
      remoteConfig.SERVER_MODE=false;
      RunnerAndConfigurationSettingsImpl configuration=new RunnerAndConfigurationSettingsImpl(manager,remoteConfig,false);
      ExecutionEnvironment environment=new ExecutionEnvironment(new DefaultDebugExecutor(),basicProgramRunner,configuration,project);
      boolean debuggerConnected=false;
      while (!debuggerConnected && ((System.currentTimeMillis() - startTime) < 25000)) {
        try {
          Thread.sleep(5000);
          basicProgramRunner.execute(environment);
          debuggerConnected=true;
        }
 catch (        Exception e) {
          System.err.println(""String_Node_Str"" + e.getMessage());
          continue;
        }
      }
    }
  }
;
  ApplicationManager.getApplication().invokeAndWait(runnable,ModalityState.any());
}","private static void launchDebugger(final Project project,final GaugeRunConfiguration.DebugInfo debugInfo){
  Runnable runnable=() -> {
    final long startTime=System.currentTimeMillis();
    GenericDebuggerRunner basicProgramRunner=new GenericDebuggerRunner();
    ProjectPropertiesComponentImpl propertiesComponent=new ProjectPropertiesComponentImpl();
    RunManagerImpl manager=new RunManagerImpl(project,propertiesComponent);
    ConfigurationFactory configFactory=RemoteConfigurationType.getInstance().getConfigurationFactories()[0];
    RemoteConfiguration remoteConfig=new RemoteConfiguration(project,configFactory);
    remoteConfig.PORT=debugInfo.getPort();
    remoteConfig.HOST=debugInfo.getHost();
    remoteConfig.USE_SOCKET_TRANSPORT=true;
    remoteConfig.SERVER_MODE=false;
    RunnerAndConfigurationSettingsImpl configuration=new RunnerAndConfigurationSettingsImpl(manager,remoteConfig,false);
    ExecutionEnvironment environment=new ExecutionEnvironment(new DefaultDebugExecutor(),basicProgramRunner,configuration,project);
    boolean debuggerConnected=false;
    while (!debuggerConnected && ((System.currentTimeMillis() - startTime) < 25000)) {
      try {
        Thread.sleep(5000);
        basicProgramRunner.execute(environment);
        debuggerConnected=true;
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"" + e.getMessage());
      }
    }
  }
;
  ApplicationManager.getApplication().invokeAndWait(runnable,ModalityState.any());
}",0.9596904224443727
86431,"@Override protected boolean setupConfigurationFromContext(RunConfiguration configuration,ConfigurationContext configurationContext,Ref ref){
  VirtualFile[] selectedFiles=CommonDataKeys.VIRTUAL_FILE_ARRAY.getData(configurationContext.getDataContext());
  Module module=configurationContext.getModule();
  if (selectedFiles == null || module == null)   return false;
  if (selectedFiles.length == 1) {
    if (!selectedFiles[0].isDirectory()) {
      return false;
    }
 else     if (selectedFiles[0].equals(configurationContext.getProject().getBaseDir())) {
      configuration.setName(DEFAULT_CONFIGURATION_NAME);
      ((GaugeRunConfiguration)configuration).setModule(module);
      ((GaugeRunConfiguration)configuration).setSpecsToExecute(projectSpecsDirectory(configurationContext.getProject()));
      return true;
    }
  }
  ArrayList<String> specsToExecute=new ArrayList<String>();
  for (  VirtualFile selectedFile : selectedFiles) {
    if (isSpecFile(selectedFile)) {
      specsToExecute.add(selectedFile.getPath());
    }
 else     if (selectedFile.isDirectory() && shouldAddDirToExecute(selectedFile)) {
      specsToExecute.add(selectedFile.getPath());
    }
  }
  if (specsToExecute.size() == 0) {
    return false;
  }
  configuration.setName(DEFAULT_CONFIGURATION_NAME);
  ((GaugeRunConfiguration)configuration).setModule(module);
  ((GaugeRunConfiguration)configuration).setSpecsArrayToExecute(specsToExecute);
  return true;
}","@Override protected boolean setupConfigurationFromContext(RunConfiguration configuration,ConfigurationContext configurationContext,Ref ref){
  VirtualFile[] selectedFiles=CommonDataKeys.VIRTUAL_FILE_ARRAY.getData(configurationContext.getDataContext());
  Module module=configurationContext.getModule();
  if (selectedFiles == null || module == null)   return false;
  if (selectedFiles.length == 1) {
    if (!selectedFiles[0].isDirectory()) {
      return false;
    }
 else     if (selectedFiles[0].equals(configurationContext.getProject().getBaseDir())) {
      configuration.setName(DEFAULT_CONFIGURATION_NAME);
      ((GaugeRunConfiguration)configuration).setModule(module);
      ((GaugeRunConfiguration)configuration).setSpecsToExecute(projectSpecsDirectory(configurationContext.getProject()));
      return true;
    }
  }
  ArrayList<String> specsToExecute=new ArrayList<>();
  for (  VirtualFile selectedFile : selectedFiles) {
    if (isSpecFile(selectedFile)) {
      specsToExecute.add(selectedFile.getPath());
    }
 else     if (selectedFile.isDirectory() && shouldAddDirToExecute(selectedFile)) {
      specsToExecute.add(selectedFile.getPath());
    }
  }
  if (specsToExecute.size() == 0) {
    return false;
  }
  configuration.setName(DEFAULT_CONFIGURATION_NAME);
  ((GaugeRunConfiguration)configuration).setModule(module);
  ((GaugeRunConfiguration)configuration).setSpecsArrayToExecute(specsToExecute);
  return true;
}",0.9979224376731302
86432,"@Override public void run(){
  Collection<ConceptStepImpl> conceptSteps=getConceptSteps(searchParameters.getElementToSearch());
  Collection<SpecStep> specSteps=getSpecSteps(searchParameters.getElementToSearch());
  Class<? extends PsiElement> elementClass=searchParameters.getElementToSearch().getClass();
  if (elementClass.equals(ConceptStepImpl.class))   handleConceptStep(conceptSteps,specSteps,searchParameters,processor);
 else   if (elementClass.equals(PsiAnnotationImpl.class) || elementClass.equals(PsiMethodImpl.class))   handleAnnotation(conceptSteps,specSteps,searchParameters,processor);
 else   if (elementClass.equals(SpecStepImpl.class))   handleSpecStep(conceptSteps,specSteps,searchParameters,processor);
}","@Override public void run(){
  Collection<ConceptStepImpl> conceptSteps=getConceptSteps(searchParameters.getElementToSearch(),searchParameters.getScopeDeterminedByUser().getDisplayName());
  Collection<SpecStep> specSteps=getSpecSteps(searchParameters.getElementToSearch(),searchParameters.getScopeDeterminedByUser().getDisplayName());
  Class<? extends PsiElement> elementClass=searchParameters.getElementToSearch().getClass();
  if (elementClass.equals(ConceptStepImpl.class))   handleConceptStep(conceptSteps,specSteps,searchParameters,processor);
 else   if (elementClass.equals(PsiAnnotationImpl.class) || elementClass.equals(PsiMethodImpl.class))   handleAnnotation(conceptSteps,specSteps,searchParameters,processor);
 else   if (elementClass.equals(SpecStepImpl.class))   handleSpecStep(conceptSteps,specSteps,searchParameters,processor);
}",0.9223918575063612
86433,"private Collection<ConceptStepImpl> getConceptSteps(PsiElement element){
  return PsiTreeUtil.collectElementsOfType(getPsiDirectory(element,element.getContainingFile().getContainingDirectory()),ConceptStepImpl.class);
}","private Collection<ConceptStepImpl> getConceptSteps(PsiElement element,String displayName){
  PsiElement psiDirectory=getDirectorySearchScope(element,displayName);
  return PsiTreeUtil.collectElementsOfType(psiDirectory,ConceptStepImpl.class);
}",0.6594827586206896
86434,"private Collection<SpecStep> getSpecSteps(PsiElement element){
  return PsiTreeUtil.collectElementsOfType(getPsiDirectory(element,element.getContainingFile().getContainingDirectory()),SpecStep.class);
}","private Collection<SpecStep> getSpecSteps(PsiElement element,String displayName){
  PsiElement psiDirectory=getDirectorySearchScope(element,displayName);
  return PsiTreeUtil.collectElementsOfType(psiDirectory,SpecStep.class);
}",0.6325581395348837
86435,"@Override public void processQuery(@NotNull final ReferencesSearch.SearchParameters searchParameters,@NotNull final Processor<PsiReference> processor){
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    @Override public void run(){
      Collection<ConceptStepImpl> conceptSteps=getConceptSteps(searchParameters.getElementToSearch());
      Collection<SpecStep> specSteps=getSpecSteps(searchParameters.getElementToSearch());
      Class<? extends PsiElement> elementClass=searchParameters.getElementToSearch().getClass();
      if (elementClass.equals(ConceptStepImpl.class))       handleConceptStep(conceptSteps,specSteps,searchParameters,processor);
 else       if (elementClass.equals(PsiAnnotationImpl.class) || elementClass.equals(PsiMethodImpl.class))       handleAnnotation(conceptSteps,specSteps,searchParameters,processor);
 else       if (elementClass.equals(SpecStepImpl.class))       handleSpecStep(conceptSteps,specSteps,searchParameters,processor);
    }
  }
);
}","@Override public void processQuery(@NotNull final ReferencesSearch.SearchParameters searchParameters,@NotNull final Processor<PsiReference> processor){
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    @Override public void run(){
      Collection<ConceptStepImpl> conceptSteps=getConceptSteps(searchParameters.getElementToSearch(),searchParameters.getScopeDeterminedByUser().getDisplayName());
      Collection<SpecStep> specSteps=getSpecSteps(searchParameters.getElementToSearch(),searchParameters.getScopeDeterminedByUser().getDisplayName());
      Class<? extends PsiElement> elementClass=searchParameters.getElementToSearch().getClass();
      if (elementClass.equals(ConceptStepImpl.class))       handleConceptStep(conceptSteps,specSteps,searchParameters,processor);
 else       if (elementClass.equals(PsiAnnotationImpl.class) || elementClass.equals(PsiMethodImpl.class))       handleAnnotation(conceptSteps,specSteps,searchParameters,processor);
 else       if (elementClass.equals(SpecStepImpl.class))       handleSpecStep(conceptSteps,specSteps,searchParameters,processor);
    }
  }
);
}",0.9423984891406988
86436,"@Override public void run(){
  Collection<ConceptStepImpl> conceptSteps=getConceptSteps(searchParameters.getElementToSearch(),searchParameters.getScopeDeterminedByUser().getDisplayName());
  Collection<SpecStep> specSteps=getSpecSteps(searchParameters.getElementToSearch(),searchParameters.getScopeDeterminedByUser().getDisplayName());
  Class<? extends PsiElement> elementClass=searchParameters.getElementToSearch().getClass();
  if (elementClass.equals(ConceptStepImpl.class))   handleConceptStep(conceptSteps,specSteps,searchParameters,processor);
 else   if (elementClass.equals(PsiAnnotationImpl.class) || elementClass.equals(PsiMethodImpl.class))   handleAnnotation(conceptSteps,specSteps,searchParameters,processor);
 else   if (elementClass.equals(SpecStepImpl.class))   handleSpecStep(conceptSteps,specSteps,searchParameters,processor);
}","@Override public void run(){
  Collection<ConceptStepImpl> conceptSteps=getConceptSteps(searchParameters.getElementToSearch());
  Collection<SpecStep> specSteps=getSpecSteps(searchParameters.getElementToSearch());
  Class<? extends PsiElement> elementClass=searchParameters.getElementToSearch().getClass();
  if (elementClass.equals(ConceptStepImpl.class))   handleConceptStep(conceptSteps,specSteps,processor,(ConceptStepImpl)searchParameters.getElementToSearch());
 else   if (elementClass.equals(PsiAnnotationImpl.class) || elementClass.equals(PsiMethodImpl.class))   handleAnnotation(conceptSteps,specSteps,processor,searchParameters.getElementToSearch());
 else   if (elementClass.equals(SpecStepImpl.class))   handleSpecStep(conceptSteps,specSteps,processor,(SpecStepImpl)searchParameters.getElementToSearch());
}",0.8343337334933973
86437,"private Collection<ConceptStepImpl> getConceptSteps(PsiElement element,String displayName){
  PsiElement psiDirectory=getDirectorySearchScope(element,displayName);
  return PsiTreeUtil.collectElementsOfType(psiDirectory,ConceptStepImpl.class);
}","private Collection<ConceptStepImpl> getConceptSteps(PsiElement element){
  return PsiTreeUtil.collectElementsOfType(getPsiDirectory(element,element.getContainingFile().getContainingDirectory()),ConceptStepImpl.class);
}",0.6594827586206896
86438,"private Collection<SpecStep> getSpecSteps(PsiElement element,String displayName){
  PsiElement psiDirectory=getDirectorySearchScope(element,displayName);
  return PsiTreeUtil.collectElementsOfType(psiDirectory,SpecStep.class);
}","private Collection<SpecStep> getSpecSteps(PsiElement element){
  return PsiTreeUtil.collectElementsOfType(getPsiDirectory(element,element.getContainingFile().getContainingDirectory()),SpecStep.class);
}",0.6325581395348837
86439,"@Override public void processQuery(@NotNull final ReferencesSearch.SearchParameters searchParameters,@NotNull final Processor<PsiReference> processor){
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    @Override public void run(){
      Collection<ConceptStepImpl> conceptSteps=getConceptSteps(searchParameters.getElementToSearch(),searchParameters.getScopeDeterminedByUser().getDisplayName());
      Collection<SpecStep> specSteps=getSpecSteps(searchParameters.getElementToSearch(),searchParameters.getScopeDeterminedByUser().getDisplayName());
      Class<? extends PsiElement> elementClass=searchParameters.getElementToSearch().getClass();
      if (elementClass.equals(ConceptStepImpl.class))       handleConceptStep(conceptSteps,specSteps,searchParameters,processor);
 else       if (elementClass.equals(PsiAnnotationImpl.class) || elementClass.equals(PsiMethodImpl.class))       handleAnnotation(conceptSteps,specSteps,searchParameters,processor);
 else       if (elementClass.equals(SpecStepImpl.class))       handleSpecStep(conceptSteps,specSteps,searchParameters,processor);
    }
  }
);
}","@Override public void processQuery(@NotNull final ReferencesSearch.SearchParameters searchParameters,@NotNull final Processor<PsiReference> processor){
  if (searchParameters.getScopeDeterminedByUser().getDisplayName().equals(""String_Node_Str""))   return;
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    @Override public void run(){
      Collection<ConceptStepImpl> conceptSteps=getConceptSteps(searchParameters.getElementToSearch());
      Collection<SpecStep> specSteps=getSpecSteps(searchParameters.getElementToSearch());
      Class<? extends PsiElement> elementClass=searchParameters.getElementToSearch().getClass();
      if (elementClass.equals(ConceptStepImpl.class))       handleConceptStep(conceptSteps,specSteps,processor,(ConceptStepImpl)searchParameters.getElementToSearch());
 else       if (elementClass.equals(PsiAnnotationImpl.class) || elementClass.equals(PsiMethodImpl.class))       handleAnnotation(conceptSteps,specSteps,processor,searchParameters.getElementToSearch());
 else       if (elementClass.equals(SpecStepImpl.class))       handleSpecStep(conceptSteps,specSteps,processor,(SpecStepImpl)searchParameters.getElementToSearch());
    }
  }
);
}",0.6640759930915371
86440,"private void handleConceptStep(Collection<ConceptStepImpl> conceptSteps,Collection<SpecStep> specSteps,ReferencesSearch.SearchParameters searchParameters,Processor<PsiReference> processor){
  String conceptStepText=getConceptStepText((ConceptStepImpl)searchParameters.getElementToSearch());
  for (  ConceptStepImpl conceptStep : conceptSteps)   process(processor,conceptStep,replaceParamValues(conceptStepText).equals(replaceParamValues(getConceptStepText(conceptStep))));
  for (  final SpecStep specStep : specSteps)   process(processor,specStep,replaceParamValues(conceptStepText).equals(getStepAnnotationText(specStep)));
}","private void handleConceptStep(Collection<ConceptStepImpl> conceptSteps,Collection<SpecStep> specSteps,Processor<PsiReference> processor,ConceptStepImpl elementToSearch){
  String conceptStepText=getConceptStepText(elementToSearch);
  for (  ConceptStepImpl conceptStep : conceptSteps)   process(processor,conceptStep,replaceParamValues(conceptStepText).equals(replaceParamValues(getConceptStepText(conceptStep))));
  for (  final SpecStep specStep : specSteps)   process(processor,specStep,replaceParamValues(conceptStepText).equals(getStepAnnotationText(specStep)));
}",0.8814691151919867
86441,"private void handleSpecStep(Collection<ConceptStepImpl> conceptSteps,Collection<SpecStep> specSteps,ReferencesSearch.SearchParameters searchParameters,Processor<PsiReference> processor){
  String text=getStepAnnotationText(((SpecStepImpl)searchParameters.getElementToSearch()));
  for (  ConceptStepImpl conceptStep : conceptSteps)   process(processor,conceptStep,text.equals(getConceptStepText(conceptStep)));
  text=((SpecStepImpl)searchParameters.getElementToSearch()).getName();
  for (  final SpecStep specStep : specSteps)   process(processor,specStep,text != null && specStep.getName() != null && specStep.getName().trim().equals(text.trim()));
}","private void handleSpecStep(Collection<ConceptStepImpl> conceptSteps,Collection<SpecStep> specSteps,Processor<PsiReference> processor,SpecStepImpl elementToSearch){
  String text=getStepAnnotationText(elementToSearch);
  for (  ConceptStepImpl conceptStep : conceptSteps)   process(processor,conceptStep,text.equals(getConceptStepText(conceptStep)));
  text=elementToSearch.getName();
  for (  final SpecStep specStep : specSteps)   process(processor,specStep,text != null && specStep.getName() != null && specStep.getName().trim().equals(text.trim()));
}",0.8377483443708609
86442,"public void addCompletions(@NotNull CompletionParameters parameters,ProcessingContext context,@NotNull CompletionResultSet resultSet){
  resultSet=resultSet.withPrefixMatcher(new PlainPrefixMatcher(""String_Node_Str""));
  SpecDetail specDetail=PsiTreeUtil.getChildOfType(parameters.getOriginalFile(),SpecDetail.class);
  SpecTable table=specDetail.getDataTable();
  if (table != null) {
    List<String> headers=table.getTableHeader().getHeaders();
    for (    String header : headers) {
      LookupElementBuilder item=LookupElementBuilder.create(header);
      resultSet.addElement(item);
    }
  }
}","public void addCompletions(@NotNull CompletionParameters parameters,ProcessingContext context,@NotNull CompletionResultSet resultSet){
  String prefix=getPrefix(parameters);
  resultSet=resultSet.withPrefixMatcher(new PlainPrefixMatcher(prefix));
  SpecDetail specDetail=PsiTreeUtil.getChildOfType(parameters.getOriginalFile(),SpecDetail.class);
  SpecTable table=specDetail.getDataTable();
  if (table != null) {
    List<String> headers=table.getTableHeader().getHeaders();
    for (    String header : headers) {
      LookupElementBuilder item=LookupElementBuilder.create(header);
      resultSet.addElement(item);
    }
  }
}",0.9496753246753248
86443,"@Override protected void addCompletions(@NotNull CompletionParameters parameters,ProcessingContext context,@NotNull CompletionResultSet resultSet){
  resultSet=resultSet.withPrefixMatcher(new PlainPrefixMatcher(""String_Node_Str""));
  PsiFile specFile=parameters.getOriginalFile();
  SpecDetail specDetail=PsiTreeUtil.getChildOfType(specFile,SpecDetail.class);
  List<SpecStep> stepsInFile=new ArrayList<SpecStep>();
  addContextSteps(specDetail,stepsInFile);
  addStepsInScenarios(specFile,stepsInFile);
  Set<String> staticArgs=getArgsFromSteps(stepsInFile);
  for (  String arg : staticArgs) {
    if (arg != null) {
      LookupElementBuilder item=LookupElementBuilder.create(arg);
      resultSet.addElement(item);
    }
  }
}","@Override protected void addCompletions(@NotNull CompletionParameters parameters,ProcessingContext context,@NotNull CompletionResultSet resultSet){
  String prefix=getPrefix(parameters);
  resultSet=resultSet.withPrefixMatcher(new PlainPrefixMatcher(prefix));
  PsiFile specFile=parameters.getOriginalFile();
  SpecDetail specDetail=PsiTreeUtil.getChildOfType(specFile,SpecDetail.class);
  List<SpecStep> stepsInFile=new ArrayList<SpecStep>();
  addContextSteps(specDetail,stepsInFile);
  addStepsInScenarios(specFile,stepsInFile);
  Set<String> staticArgs=getArgsFromSteps(stepsInFile);
  for (  String arg : staticArgs) {
    if (arg != null) {
      LookupElementBuilder item=LookupElementBuilder.create(arg);
      resultSet.addElement(item);
    }
  }
}",0.9583333333333334
86444,"public void addCompletions(@NotNull CompletionParameters parameters,ProcessingContext context,@NotNull CompletionResultSet resultSet){
  resultSet.stopHere();
  String prefix=parameters.getPosition().getText().replace(""String_Node_Str"",""String_Node_Str"").trim();
  resultSet=resultSet.withPrefixMatcher(new PlainPrefixMatcher(prefix));
  Module moduleForPsiElement=ModuleUtil.findModuleForPsiElement(parameters.getPosition());
  if (moduleForPsiElement == null) {
    return;
  }
  for (  String step : getStepsInModule(moduleForPsiElement)) {
    LookupElementBuilder element=LookupElementBuilder.create(step);
    element=element.withInsertHandler(new InsertHandler<LookupElement>(){
      @Override public void handleInsert(      InsertionContext context,      LookupElement item){
        PsiElement stepElement=context.getFile().findElementAt(context.getStartOffset()).getParent();
        final TemplateBuilder builder=TemplateBuilderFactory.getInstance().createTemplateBuilder(stepElement);
        List<SpecArg> args=PsiTreeUtil.getChildrenOfTypeAsList(stepElement,SpecArg.class);
        for (        SpecArg arg : args) {
          builder.replaceRange(getRangeWithinElement(arg),arg.getText());
        }
        builder.run(context.getEditor(),false);
      }
    }
);
    resultSet.addElement(element);
  }
}","public void addCompletions(@NotNull CompletionParameters parameters,ProcessingContext context,@NotNull CompletionResultSet resultSet){
  resultSet.stopHere();
  String prefix=getPrefix(parameters);
  resultSet=resultSet.withPrefixMatcher(new PlainPrefixMatcher(prefix));
  Module moduleForPsiElement=ModuleUtil.findModuleForPsiElement(parameters.getPosition());
  if (moduleForPsiElement == null) {
    return;
  }
  for (  String step : getStepsInModule(moduleForPsiElement)) {
    LookupElementBuilder element=LookupElementBuilder.create(step);
    element=element.withInsertHandler(new InsertHandler<LookupElement>(){
      @Override public void handleInsert(      InsertionContext context,      LookupElement item){
        PsiElement stepElement=context.getFile().findElementAt(context.getStartOffset()).getParent();
        final TemplateBuilder builder=TemplateBuilderFactory.getInstance().createTemplateBuilder(stepElement);
        List<SpecArg> args=PsiTreeUtil.getChildrenOfTypeAsList(stepElement,SpecArg.class);
        for (        SpecArg arg : args) {
          builder.replaceRange(getRangeWithinElement(arg),arg.getText());
        }
        builder.run(context.getEditor(),false);
      }
    }
);
    resultSet.addElement(element);
  }
}",0.9600310438494374
86445,"@NotNull @Override protected ProcessHandler startProcess() throws ExecutionException {
  GeneralCommandLine commandLine=new GeneralCommandLine();
  commandLine.setExePath(GAUGE);
  commandLine.addParameter(SIMPLE_CONSOLE_FLAG);
  commandLine.setWorkDirectory(getProject().getBaseDir().getPath());
  if (!Strings.isBlank(environment)) {
    commandLine.addParameters(ENV_FLAG,environment);
  }
  commandLine.addParameter(specsToExecute);
  if (DefaultDebugExecutor.EXECUTOR_ID.equals(env.getExecutor().getId())) {
    commandLine.getEnvironment().put(GAUGE_DEBUG_OPTS_ENV,JAVA_DEBUG_PORT);
  }
  return GaugeRunProcessHandler.runCommandLine(commandLine);
}","@NotNull @Override protected ProcessHandler startProcess() throws ExecutionException {
  GeneralCommandLine commandLine=new GeneralCommandLine();
  commandLine.setExePath(GaugeUtil.getGaugeExecPath());
  commandLine.addParameter(SIMPLE_CONSOLE_FLAG);
  commandLine.setWorkDirectory(getProject().getBaseDir().getPath());
  if (!Strings.isBlank(environment)) {
    commandLine.addParameters(ENV_FLAG,environment);
  }
  commandLine.addParameter(specsToExecute);
  if (DefaultDebugExecutor.EXECUTOR_ID.equals(env.getExecutor().getId())) {
    commandLine.getEnvironment().put(GAUGE_DEBUG_OPTS_ENV,JAVA_DEBUG_PORT);
  }
  return GaugeRunProcessHandler.runCommandLine(commandLine);
}",0.978244561140285
86446,"@Nullable @Override public RunProfileState getState(@NotNull Executor executor,@NotNull final ExecutionEnvironment env) throws ExecutionException {
  return new CommandLineState(env){
    @NotNull @Override protected ProcessHandler startProcess() throws ExecutionException {
      GeneralCommandLine commandLine=new GeneralCommandLine();
      commandLine.setExePath(GAUGE);
      commandLine.addParameter(SIMPLE_CONSOLE_FLAG);
      commandLine.setWorkDirectory(getProject().getBaseDir().getPath());
      if (!Strings.isBlank(environment)) {
        commandLine.addParameters(ENV_FLAG,environment);
      }
      commandLine.addParameter(specsToExecute);
      if (DefaultDebugExecutor.EXECUTOR_ID.equals(env.getExecutor().getId())) {
        commandLine.getEnvironment().put(GAUGE_DEBUG_OPTS_ENV,JAVA_DEBUG_PORT);
      }
      return GaugeRunProcessHandler.runCommandLine(commandLine);
    }
  }
;
}","@Nullable @Override public RunProfileState getState(@NotNull Executor executor,@NotNull final ExecutionEnvironment env) throws ExecutionException {
  return new CommandLineState(env){
    @NotNull @Override protected ProcessHandler startProcess() throws ExecutionException {
      GeneralCommandLine commandLine=new GeneralCommandLine();
      commandLine.setExePath(GaugeUtil.getGaugeExecPath());
      commandLine.addParameter(SIMPLE_CONSOLE_FLAG);
      commandLine.setWorkDirectory(getProject().getBaseDir().getPath());
      if (!Strings.isBlank(environment)) {
        commandLine.addParameters(ENV_FLAG,environment);
      }
      commandLine.addParameter(specsToExecute);
      if (DefaultDebugExecutor.EXECUTOR_ID.equals(env.getExecutor().getId())) {
        commandLine.getEnvironment().put(GAUGE_DEBUG_OPTS_ENV,JAVA_DEBUG_PORT);
      }
      return GaugeRunProcessHandler.runCommandLine(commandLine);
    }
  }
;
}",0.9841443411700382
86447,ItemStack[] getAcceptableFlowers(String flowerType);,List<IFlower> getAcceptableFlowers(String flowerType);,0.8113207547169812
86448,"ItemStack getRandomPlantableFlower(String flowerType,Random rand);","IFlower getRandomPlantableFlower(String flowerType,Random rand);",0.9076923076923076
86449,"/** 
 * Registers a plantable flower. The distribution is based on its own weight and the total number of plants for this flowerType.
 * @param weight Weight for the Flower (Vanilla = 1.0, Modded flowers < 1.0)
 * @param flowerTypes See {@link forestry.api.apiculture.FlowerManager}.FlowerTypeXXX
 */
void registerPlantableFlower(ItemStack flower,double weight,String... flowerTypes);","/** 
 * Registers a plantable flower. The distribution is based on its own weight and the total number of plants for this flowerType.
 * @param weight Weight for the Flower (Vanilla = 1.0, Modded flowers < 1.0)
 * @param flowerTypes See {@link forestry.api.apiculture.FlowerManager}.FlowerTypeXXX
 */
void registerPlantableFlower(Block flowerBlock,int flowerMeta,double weight,String... flowerTypes);",0.9617346938775512
86450,"/** 
 * Registers a non-plantable flower, but bees accept them.
 * @param flowerTypes See {@link forestry.api.apiculture.FlowerManager}.FlowerTypeXXX
 */
void registerAcceptableFlower(ItemStack flower,String... flowerTypes);","/** 
 * Registers a non-plantable flower, but bees accept them.
 * @param flowerTypes See {@link forestry.api.apiculture.FlowerManager}.FlowerTypeXXX
 */
void registerAcceptableFlower(Block flowerBlock,int flowerMeta,String... flowerTypes);",0.9353448275862069
86451,"public static void configurePackage(String env,File configFile) throws Exception {
  Logger logger=LoggerFactory.getLogger(PackageConfigurer.class);
  TransformerFactory transformerFactory=TransformerFactory.newInstance();
  Transformer transformer=transformerFactory.newTransformer();
  XMLFileListUtil listFileUtil=new XMLFileListUtil();
  List<File> fileList=listFileUtil.getProxyFiles(configFile);
  FileReader fileutil=new FileReader();
  ConfigTokens conf=fileutil.getBundleConfigs(configFile);
  for (int i=0; i < fileList.size(); i++) {
    Document xmlDoc=fileutil.getXMLDocument(fileList.get(i));
    try {
      Policy configTokens=conf.getConfigbyEnv(env).getProxyFileNameMatch(fileList.get(i).getName());
      if (configTokens != null) {
        logger.info(""String_Node_Str"",env,fileList.get(i).getName());
        xmlDoc=replaceTokens(xmlDoc,configTokens);
        DOMSource source=new DOMSource(xmlDoc);
        StreamResult result=new StreamResult(fileList.get(i));
        transformer.transform(source,result);
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",env,fileList.get(i).getName());
      throw e;
    }
  }
  fileList=listFileUtil.getPolicyFiles(configFile);
  for (int i=0; i < fileList.size(); i++) {
    Document xmlDoc=fileutil.getXMLDocument(fileList.get(i));
    try {
      Policy configTokens=conf.getConfigbyEnv(env).getPolicyFileNameMatch(fileList.get(i).getName());
      if (configTokens != null) {
        logger.info(""String_Node_Str"",env,fileList.get(i).getName());
        xmlDoc=replaceTokens(xmlDoc,configTokens);
        DOMSource source=new DOMSource(xmlDoc);
        StreamResult result=new StreamResult(fileList.get(i));
        transformer.transform(source,result);
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",env,fileList.get(i).getName());
      throw e;
    }
  }
  fileList=listFileUtil.getTargetFiles(configFile);
  for (int i=0; i < fileList.size(); i++) {
    Document xmlDoc=fileutil.getXMLDocument(fileList.get(i));
    try {
      Policy configTokens=conf.getConfigbyEnv(env).getTargetFileNameMatch(fileList.get(i).getName());
      if (configTokens != null) {
        logger.info(""String_Node_Str"",env,fileList.get(i).getName());
        xmlDoc=replaceTokens(xmlDoc,configTokens);
        DOMSource source=new DOMSource(xmlDoc);
        StreamResult result=new StreamResult(fileList.get(i));
        transformer.transform(source,result);
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",env,fileList.get(i).getName());
      throw e;
    }
  }
  fileList=listFileUtil.getAPIProxyFiles(configFile);
  Document xmlDoc=fileutil.getXMLDocument(fileList.get(0));
  javax.xml.xpath.XPathFactory factory=javax.xml.xpath.XPathFactory.newInstance();
  javax.xml.xpath.XPath xpath=factory.newXPath();
  javax.xml.xpath.XPathExpression expression=xpath.compile(""String_Node_Str"");
  Node node=(Node)expression.evaluate(xmlDoc,XPathConstants.NODE);
  if (node == null) {
    Element root=xmlDoc.getDocumentElement();
    node=xmlDoc.createElement(""String_Node_Str"");
    root.appendChild(node);
  }
  if (node.hasChildNodes()) {
    node.setTextContent(expression.evaluate(xmlDoc));
  }
 else {
    node.setTextContent(getComment(fileList.get(0)));
  }
  DOMSource source=new DOMSource(xmlDoc);
  StreamResult result=new StreamResult(fileList.get(0));
  transformer.transform(source,result);
}","public static void configurePackage(String env,File configFile) throws Exception {
  Logger logger=LoggerFactory.getLogger(PackageConfigurer.class);
  TransformerFactory transformerFactory=TransformerFactory.newInstance();
  Transformer transformer=transformerFactory.newTransformer();
  XMLFileListUtil listFileUtil=new XMLFileListUtil();
  List<File> fileList=listFileUtil.getProxyFiles(configFile);
  FileReader fileutil=new FileReader();
  ConfigTokens conf=fileutil.getBundleConfigs(configFile);
  for (int i=0; i < fileList.size(); i++) {
    Document xmlDoc=fileutil.getXMLDocument(fileList.get(i));
    try {
      Policy configTokens=conf.getConfigbyEnv(env).getProxyFileNameMatch(fileList.get(i).getName());
      if (configTokens != null) {
        logger.info(""String_Node_Str"",env,fileList.get(i).getName());
        xmlDoc=replaceTokens(xmlDoc,configTokens);
        DOMSource source=new DOMSource(xmlDoc);
        StreamResult result=new StreamResult(fileList.get(i));
        result.setSystemId(fileList.get(i).getAbsolutePath());
        transformer.transform(source,result);
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",env,fileList.get(i).getName());
      throw e;
    }
  }
  fileList=listFileUtil.getPolicyFiles(configFile);
  for (int i=0; i < fileList.size(); i++) {
    Document xmlDoc=fileutil.getXMLDocument(fileList.get(i));
    try {
      Policy configTokens=conf.getConfigbyEnv(env).getPolicyFileNameMatch(fileList.get(i).getName());
      if (configTokens != null) {
        logger.info(""String_Node_Str"",env,fileList.get(i).getName());
        xmlDoc=replaceTokens(xmlDoc,configTokens);
        DOMSource source=new DOMSource(xmlDoc);
        StreamResult result=new StreamResult(fileList.get(i));
        result.setSystemId(fileList.get(i).getAbsolutePath());
        transformer.transform(source,result);
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",env,fileList.get(i).getName());
      throw e;
    }
  }
  fileList=listFileUtil.getTargetFiles(configFile);
  for (int i=0; i < fileList.size(); i++) {
    Document xmlDoc=fileutil.getXMLDocument(fileList.get(i));
    try {
      Policy configTokens=conf.getConfigbyEnv(env).getTargetFileNameMatch(fileList.get(i).getName());
      if (configTokens != null) {
        logger.info(""String_Node_Str"",env,fileList.get(i).getName());
        xmlDoc=replaceTokens(xmlDoc,configTokens);
        DOMSource source=new DOMSource(xmlDoc);
        StreamResult result=new StreamResult(fileList.get(i));
        result.setSystemId(fileList.get(i).getAbsolutePath());
        transformer.transform(source,result);
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",env,fileList.get(i).getName());
      throw e;
    }
  }
  fileList=listFileUtil.getAPIProxyFiles(configFile);
  Document xmlDoc=fileutil.getXMLDocument(fileList.get(0));
  javax.xml.xpath.XPathFactory factory=javax.xml.xpath.XPathFactory.newInstance();
  javax.xml.xpath.XPath xpath=factory.newXPath();
  javax.xml.xpath.XPathExpression expression=xpath.compile(""String_Node_Str"");
  Node node=(Node)expression.evaluate(xmlDoc,XPathConstants.NODE);
  if (node == null) {
    Element root=xmlDoc.getDocumentElement();
    node=xmlDoc.createElement(""String_Node_Str"");
    root.appendChild(node);
  }
  if (node.hasChildNodes()) {
    node.setTextContent(expression.evaluate(xmlDoc));
  }
 else {
    node.setTextContent(getComment(fileList.get(0)));
  }
  DOMSource source=new DOMSource(xmlDoc);
  StreamResult result=new StreamResult(fileList.get(0));
  result.setSystemId(fileList.get(0).getAbsolutePath());
  transformer.transform(source,result);
}",0.9654397302613094
86452,"public static String getDeployedRevision(ServerProfile profile) throws IOException {
  BundleDeploymentConfig deployment1=null;
  try {
    HttpRequest restRequest=REQUEST_FACTORY.buildGetRequest(new GenericUrl(profile.getHostUrl() + ""String_Node_Str"" + profile.getApi_version()+ ""String_Node_Str""+ profile.getOrg()+ ""String_Node_Str""+ profile.getApplication()+ ""String_Node_Str""));
    restRequest.setReadTimeout(0);
    HttpHeaders headers=new HttpHeaders();
    headers.setAccept(""String_Node_Str"");
    headers.setBasicAuthentication(profile.getCredential_user(),profile.getCredential_pwd());
    restRequest.setHeaders(headers);
    logger.debug(PrintUtil.formatRequest(restRequest));
    HttpResponse response=restRequest.execute();
    deployment1=response.parseAs(BundleDeploymentConfig.class);
    logger.debug(PrintUtil.formatResponse(response,gson.toJson(deployment1).toString()));
    if (deployment1 != null) {
      for (      Environment env : deployment1.environment) {
        if (env.name.equalsIgnoreCase(profile.getEnvironment()))         return env.revision.get(0).name;
      }
    }
  }
 catch (  HttpResponseException e) {
    logger.error(e.getMessage());
  }
catch (  Exception e) {
    logger.error(e.getMessage());
  }
  return ""String_Node_Str"";
}","public static String getDeployedRevision(ServerProfile profile) throws IOException {
  BundleDeploymentConfig deployment1=null;
  try {
    HttpRequest restRequest=REQUEST_FACTORY.buildGetRequest(new GenericUrl(profile.getHostUrl() + ""String_Node_Str"" + profile.getApi_version()+ ""String_Node_Str""+ profile.getOrg()+ ""String_Node_Str""+ profile.getApplication()+ ""String_Node_Str""));
    restRequest.setReadTimeout(0);
    HttpHeaders headers=new HttpHeaders();
    headers.setAccept(""String_Node_Str"");
    headers.setBasicAuthentication(profile.getCredential_user(),profile.getCredential_pwd());
    restRequest.setHeaders(headers);
    logger.debug(PrintUtil.formatRequest(restRequest));
    HttpResponse response=restRequest.execute();
    deployment1=response.parseAs(BundleDeploymentConfig.class);
    logger.debug(PrintUtil.formatResponse(response,gson.toJson(deployment1).toString()));
    if (deployment1 != null) {
      for (      Environment env : deployment1.environment) {
        if (env.name.equalsIgnoreCase(profile.getEnvironment())) {
          List<Revision> revisionList=env.revision;
          if (revisionList != null && revisionList.size() > 0) {
            List<String> revisions=new ArrayList<String>();
            for (            Revision revision : revisionList) {
              revisions.add(revision.name);
            }
            Collections.sort(revisions,new StringToIntComparator());
            return revisions.get(0);
          }
        }
      }
    }
  }
 catch (  HttpResponseException e) {
    logger.error(e.getMessage());
  }
catch (  Exception e) {
    logger.error(e.getMessage());
  }
  return ""String_Node_Str"";
}",0.8452907174430466
86453,"public static String activateBundleRevision(ServerProfile profile,String revision) throws IOException {
  String state=""String_Node_Str"";
  BundleActivationConfig deployment2=new BundleActivationConfig();
  try {
    UrlEncodedContent urlEncodedContent=null;
    HttpHeaders headers=new HttpHeaders();
    headers.setAccept(""String_Node_Str"");
    headers.setBasicAuthentication(profile.getCredential_user(),profile.getCredential_pwd());
    String deployCmd=profile.getHostUrl() + ""String_Node_Str"" + profile.getApi_version()+ ""String_Node_Str""+ profile.getOrg()+ ""String_Node_Str""+ profile.getEnvironment()+ ""String_Node_Str""+ profile.getApplication()+ ""String_Node_Str""+ revision+ ""String_Node_Str"";
    if (Options.override) {
      deployCmd=deployCmd + ""String_Node_Str"";
      if (Options.override_delay != 0) {
        deployCmd=deployCmd + ""String_Node_Str"" + Options.override_delay;
      }
    }
    HttpRequest deployRestRequest=REQUEST_FACTORY.buildPostRequest(new GenericUrl(deployCmd),urlEncodedContent);
    deployRestRequest.setReadTimeout(0);
    deployRestRequest.setHeaders(headers);
    HttpResponse response=null;
    logger.info(PrintUtil.formatRequest(deployRestRequest));
    response=deployRestRequest.execute();
    if (Options.override) {
      SeamLessDeploymentStatus deployment3=response.parseAs(SeamLessDeploymentStatus.class);
      Iterator<BundleActivationConfig> iter=deployment3.environment.iterator();
      while (iter.hasNext()) {
        BundleActivationConfig config=iter.next();
        if (config.environment.equalsIgnoreCase(profile.getEnvironment())) {
          if (!config.state.equalsIgnoreCase(""String_Node_Str"")) {
            logger.info(""String_Node_Str"");
            Thread.sleep(10);
            if (getDeployedRevision(profile).equalsIgnoreCase(revision)) {
              logger.info(""String_Node_Str"" + getVersionRevision());
              return ""String_Node_Str"";
            }
 else             logger.error(""String_Node_Str"");
            throw new MojoExecutionException(""String_Node_Str"");
          }
 else {
            logger.info(PrintUtil.formatResponse(response,gson.toJson(deployment3).toString()));
          }
        }
      }
    }
    deployment2=response.parseAs(BundleActivationConfig.class);
    logger.info(PrintUtil.formatResponse(response,gson.toJson(deployment2).toString()));
    logger.info(""String_Node_Str"" + getVersionRevision());
    if (Options.delay != 0) {
      try {
        logger.debug(""String_Node_Str"" + Options.delay + ""String_Node_Str"");
        Thread.sleep(Options.delay);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 catch (  Exception e) {
    logger.error(e.getMessage());
    throw new IOException(e);
  }
  return deployment2.state;
}","public static String activateBundleRevision(ServerProfile profile,String revision) throws IOException {
  String state=""String_Node_Str"";
  BundleActivationConfig deployment2=new BundleActivationConfig();
  try {
    UrlEncodedContent urlEncodedContent=null;
    HttpHeaders headers=new HttpHeaders();
    headers.setAccept(""String_Node_Str"");
    headers.setBasicAuthentication(profile.getCredential_user(),profile.getCredential_pwd());
    String deployCmd=profile.getHostUrl() + ""String_Node_Str"" + profile.getApi_version()+ ""String_Node_Str""+ profile.getOrg()+ ""String_Node_Str""+ profile.getEnvironment()+ ""String_Node_Str""+ profile.getApplication()+ ""String_Node_Str""+ revision+ ""String_Node_Str"";
    if (Options.override) {
      GenericData data=new GenericData();
      data.set(""String_Node_Str"",""String_Node_Str"");
      if (Options.override_delay != 0) {
        data.set(""String_Node_Str"",Options.override_delay);
      }
      urlEncodedContent=new UrlEncodedContent(data);
    }
    HttpRequest deployRestRequest=REQUEST_FACTORY.buildPostRequest(new GenericUrl(deployCmd),urlEncodedContent);
    deployRestRequest.setReadTimeout(0);
    deployRestRequest.setHeaders(headers);
    HttpResponse response=null;
    logger.info(PrintUtil.formatRequest(deployRestRequest));
    response=deployRestRequest.execute();
    if (Options.override) {
      SeamLessDeploymentStatus deployment3=response.parseAs(SeamLessDeploymentStatus.class);
      Iterator<BundleActivationConfig> iter=deployment3.environment.iterator();
      while (iter.hasNext()) {
        BundleActivationConfig config=iter.next();
        if (config.environment.equalsIgnoreCase(profile.getEnvironment())) {
          if (!config.state.equalsIgnoreCase(""String_Node_Str"")) {
            logger.info(""String_Node_Str"");
            Thread.sleep(10);
            if (getDeployedRevision(profile).equalsIgnoreCase(revision)) {
              logger.info(""String_Node_Str"" + getVersionRevision());
              return ""String_Node_Str"";
            }
 else             logger.error(""String_Node_Str"");
            throw new MojoExecutionException(""String_Node_Str"");
          }
 else {
            logger.info(PrintUtil.formatResponse(response,gson.toJson(deployment3).toString()));
          }
        }
      }
    }
    deployment2=response.parseAs(BundleActivationConfig.class);
    logger.info(PrintUtil.formatResponse(response,gson.toJson(deployment2).toString()));
    logger.info(""String_Node_Str"" + getVersionRevision());
    if (Options.delay != 0) {
      try {
        logger.debug(""String_Node_Str"" + Options.delay + ""String_Node_Str"");
        Thread.sleep(Options.delay);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
 catch (  Exception e) {
    logger.error(e.getMessage());
    throw new IOException(e);
  }
  return deployment2.state;
}",0.9532710280373832
86454,"/** 
 * Entry point for the mojo.
 */
public void execute() throws MojoExecutionException, MojoFailureException {
  try {
    fixOSXNonProxyHosts();
    init();
switch (buildOption) {
case NULL:
      if (Options.override) {
        activeRevision=RestUtil.getDeployedRevision(this.getProfile());
        if (activeRevision.length() > 0) {
          doImport();
          doActivateBundle();
        }
 else {
          Options.override=false;
          doImport();
          doActivateBundle();
        }
      }
 else       if (Options.update) {
        String latestRev=""String_Node_Str"";
        if (revisionInArg.length() > 0) {
          logger.info(""String_Node_Str"" + revisionInArg);
          doUpdate(revisionInArg);
          break;
        }
        activeRevision=RestUtil.getDeployedRevision(this.getProfile());
        if (activeRevision.length() > 0) {
          logger.info(""String_Node_Str"" + activeRevision);
          logger.info(""String_Node_Str"" + activeRevision);
          doUpdate(activeRevision);
          break;
        }
        latestRev=RestUtil.getLatestRevision(this.getProfile());
        if (latestRev.length() > 0) {
          logger.info(""String_Node_Str"" + latestRev);
          logger.info(""String_Node_Str"" + latestRev);
          doUpdate(latestRev);
          break;
        }
 else {
          doImport();
          doActivateBundle();
        }
      }
 else       if (Options.clean) {
        activeRevision=RestUtil.getDeployedRevision(this.getProfile());
        if (this.activeRevision.length() > 0) {
          doDelete(this.activeRevision);
        }
 else {
          logger.info(""String_Node_Str"" + this.getProfile().getEnvironment() + ""String_Node_Str"");
        }
      }
 else {
        doImport();
        if (!Options.inactive)         doRefreshBundle();
      }
    break;
case deployinactive:
  logger.warn(""String_Node_Str"");
doImport();
break;
case undeploy:
logger.warn(""String_Node_Str"");
doDeactivae();
break;
case delete:
activeRevision=RestUtil.getDeployedRevision(this.getProfile());
doDelete(activeRevision);
break;
default :
break;
}
state=State.COMPLETE;
}
 catch (MojoFailureException e) {
processHelpfulErrorMessage(e);
}
catch (RuntimeException e) {
processHelpfulErrorMessage(e);
}
catch (Exception e) {
processHelpfulErrorMessage(e);
}
 finally {
}
}","/** 
 * Entry point for the mojo.
 */
public void execute() throws MojoExecutionException, MojoFailureException {
  try {
    fixOSXNonProxyHosts();
    init();
switch (buildOption) {
case NULL:
      if (Options.override) {
        activeRevision=RestUtil.getDeployedRevision(this.getProfile());
        if (activeRevision.length() > 0) {
          doImport();
          doActivateBundle();
        }
 else {
          Options.override=false;
          doImport();
          doActivateBundle();
        }
      }
 else       if (Options.update) {
        String latestRev=""String_Node_Str"";
        if (revisionInArg.length() > 0) {
          logger.info(""String_Node_Str"" + revisionInArg);
          doUpdate(revisionInArg);
          break;
        }
        activeRevision=RestUtil.getDeployedRevision(this.getProfile());
        if (activeRevision.length() > 0) {
          logger.info(""String_Node_Str"" + activeRevision);
          logger.info(""String_Node_Str"" + activeRevision);
          doUpdate(activeRevision);
          break;
        }
 else {
          doImport();
          doActivateBundle();
        }
      }
 else       if (Options.clean) {
        activeRevision=RestUtil.getDeployedRevision(this.getProfile());
        if (this.activeRevision.length() > 0) {
          doDelete(this.activeRevision);
        }
 else {
          logger.info(""String_Node_Str"" + this.getProfile().getEnvironment() + ""String_Node_Str"");
        }
      }
 else {
        doImport();
        if (!Options.inactive)         doRefreshBundle();
      }
    break;
case deployinactive:
  logger.warn(""String_Node_Str"");
doImport();
break;
case undeploy:
logger.warn(""String_Node_Str"");
doDeactivae();
break;
case delete:
activeRevision=RestUtil.getDeployedRevision(this.getProfile());
doDelete(activeRevision);
break;
default :
break;
}
state=State.COMPLETE;
}
 catch (MojoFailureException e) {
processHelpfulErrorMessage(e);
}
catch (RuntimeException e) {
processHelpfulErrorMessage(e);
}
catch (Exception e) {
processHelpfulErrorMessage(e);
}
 finally {
}
}",0.938598493494636
86455,"public static Document replaceTokens(Document doc,Policy configTokens) throws XPathExpressionException, TransformerConfigurationException {
  Logger logger=LoggerFactory.getLogger(PackageConfigurer.class);
  javax.xml.xpath.XPathFactory factory=javax.xml.xpath.XPathFactory.newInstance();
  javax.xml.xpath.XPath xpath=factory.newXPath();
  Gson gson=new GsonBuilder().setPrettyPrinting().create();
  String json=gson.toJson(configTokens);
  logger.info(""String_Node_Str"",json);
  try {
    for (int i=0; i < configTokens.tokens.size(); i++) {
      logger.debug(""String_Node_Str"",configTokens.tokens.get(i).xpath);
      javax.xml.xpath.XPathExpression expression=xpath.compile(configTokens.tokens.get(i).xpath);
      NodeList nodes=(NodeList)expression.evaluate(doc,XPathConstants.NODESET);
      for (int j=0; j < nodes.getLength(); j++) {
        if (nodes.item(j).hasChildNodes()) {
          logger.debug(""String_Node_Str"",nodes.item(j).getTextContent(),configTokens.tokens.get(i).value);
          nodes.item(j).setTextContent(configTokens.tokens.get(i).value);
        }
      }
    }
    return doc;
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e.getMessage());
    throw (XPathExpressionException)e;
  }
}","public static Document replaceTokens(Document doc,Policy configTokens) throws XPathExpressionException, TransformerConfigurationException {
  Logger logger=LoggerFactory.getLogger(PackageConfigurer.class);
  javax.xml.xpath.XPathFactory factory=javax.xml.xpath.XPathFactory.newInstance();
  javax.xml.xpath.XPath xpath=factory.newXPath();
  Gson gson=new GsonBuilder().setPrettyPrinting().create();
  String json=gson.toJson(configTokens);
  logger.info(""String_Node_Str"",json);
  try {
    for (int i=0; i < configTokens.tokens.size(); i++) {
      logger.debug(""String_Node_Str"",configTokens.tokens.get(i).xpath);
      javax.xml.xpath.XPathExpression expression=xpath.compile(configTokens.tokens.get(i).xpath);
      NodeList nodes=(NodeList)expression.evaluate(doc,XPathConstants.NODESET);
      for (int j=0; j < nodes.getLength(); j++) {
        if (nodes.item(j).getNodeName() != null && !nodes.item(j).getNodeName().equals(""String_Node_Str"")) {
          logger.debug(""String_Node_Str"",nodes.item(j).getTextContent(),configTokens.tokens.get(i).value);
          nodes.item(j).setTextContent(configTokens.tokens.get(i).value);
        }
      }
    }
    return doc;
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e.getMessage());
    throw (XPathExpressionException)e;
  }
}",0.7734806629834254
86456,"public static void configurePackage(String env,File configFile) throws Exception {
  Logger logger=LoggerFactory.getLogger(PackageConfigurer.class);
  TransformerFactory transformerFactory=TransformerFactory.newInstance();
  Transformer transformer=transformerFactory.newTransformer();
  XMLFileListUtil listFileUtil=new XMLFileListUtil();
  List<File> fileList=listFileUtil.getProxyFiles(configFile);
  FileReader fileutil=new FileReader();
  ConfigTokens conf=fileutil.getBundleConfigs(configFile);
  for (int i=0; i < fileList.size(); i++) {
    Document xmlDoc=fileutil.getXMLDocument(fileList.get(i));
    try {
      Policy configTokens=conf.getConfigbyEnv(env).getProxyFileNameMatch(fileList.get(i).getName());
      if (configTokens != null) {
        logger.info(""String_Node_Str"",env,fileList.get(i).getName());
        xmlDoc=replaceTokens(xmlDoc,configTokens);
        DOMSource source=new DOMSource(xmlDoc);
        StreamResult result=new StreamResult(fileList.get(i));
        transformer.transform(source,result);
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",env,fileList.get(i).getName());
      throw e;
    }
  }
  fileList=listFileUtil.getPolicyFiles(configFile);
  for (int i=0; i < fileList.size(); i++) {
    Document xmlDoc=fileutil.getXMLDocument(fileList.get(i));
    try {
      Policy configTokens=conf.getConfigbyEnv(env).getPolicyFileNameMatch(fileList.get(i).getName());
      if (configTokens != null) {
        logger.info(""String_Node_Str"",env,fileList.get(i).getName());
        xmlDoc=replaceTokens(xmlDoc,configTokens);
        DOMSource source=new DOMSource(xmlDoc);
        StreamResult result=new StreamResult(fileList.get(i));
        transformer.transform(source,result);
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",env,fileList.get(i).getName());
      throw e;
    }
  }
  fileList=listFileUtil.getTargetFiles(configFile);
  for (int i=0; i < fileList.size(); i++) {
    Document xmlDoc=fileutil.getXMLDocument(fileList.get(i));
    try {
      Policy configTokens=conf.getConfigbyEnv(env).getTargetFileNameMatch(fileList.get(i).getName());
      if (configTokens != null) {
        logger.info(""String_Node_Str"",env,fileList.get(i).getName());
        xmlDoc=replaceTokens(xmlDoc,configTokens);
        DOMSource source=new DOMSource(xmlDoc);
        StreamResult result=new StreamResult(fileList.get(i));
        transformer.transform(source,result);
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",env,fileList.get(i).getName());
      throw e;
    }
  }
  fileList=listFileUtil.getAPIProxyFiles(configFile);
  Document xmlDoc=fileutil.getXMLDocument(fileList.get(0));
  javax.xml.xpath.XPathFactory factory=javax.xml.xpath.XPathFactory.newInstance();
  javax.xml.xpath.XPath xpath=factory.newXPath();
  javax.xml.xpath.XPathExpression expression=xpath.compile(""String_Node_Str"");
  NodeList nodes=(NodeList)expression.evaluate(xmlDoc,XPathConstants.NODESET);
  if (nodes.item(0).hasChildNodes()) {
    String orginialText=""String_Node_Str"";
    orginialText=nodes.item(0).getTextContent();
    nodes.item(0).setTextContent(getComment(fileList.get(0)) + ""String_Node_Str"" + orginialText);
  }
 else {
    nodes.item(0).setTextContent(getComment(fileList.get(0)));
  }
  DOMSource source=new DOMSource(xmlDoc);
  StreamResult result=new StreamResult(fileList.get(0));
  transformer.transform(source,result);
}","public static void configurePackage(String env,File configFile) throws Exception {
  Logger logger=LoggerFactory.getLogger(PackageConfigurer.class);
  TransformerFactory transformerFactory=TransformerFactory.newInstance();
  Transformer transformer=transformerFactory.newTransformer();
  XMLFileListUtil listFileUtil=new XMLFileListUtil();
  List<File> fileList=listFileUtil.getProxyFiles(configFile);
  FileReader fileutil=new FileReader();
  ConfigTokens conf=fileutil.getBundleConfigs(configFile);
  for (int i=0; i < fileList.size(); i++) {
    Document xmlDoc=fileutil.getXMLDocument(fileList.get(i));
    try {
      Policy configTokens=conf.getConfigbyEnv(env).getProxyFileNameMatch(fileList.get(i).getName());
      if (configTokens != null) {
        logger.info(""String_Node_Str"",env,fileList.get(i).getName());
        xmlDoc=replaceTokens(xmlDoc,configTokens);
        DOMSource source=new DOMSource(xmlDoc);
        StreamResult result=new StreamResult(fileList.get(i));
        transformer.transform(source,result);
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",env,fileList.get(i).getName());
      throw e;
    }
  }
  fileList=listFileUtil.getPolicyFiles(configFile);
  for (int i=0; i < fileList.size(); i++) {
    Document xmlDoc=fileutil.getXMLDocument(fileList.get(i));
    try {
      Policy configTokens=conf.getConfigbyEnv(env).getPolicyFileNameMatch(fileList.get(i).getName());
      if (configTokens != null) {
        logger.info(""String_Node_Str"",env,fileList.get(i).getName());
        xmlDoc=replaceTokens(xmlDoc,configTokens);
        DOMSource source=new DOMSource(xmlDoc);
        StreamResult result=new StreamResult(fileList.get(i));
        transformer.transform(source,result);
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",env,fileList.get(i).getName());
      throw e;
    }
  }
  fileList=listFileUtil.getTargetFiles(configFile);
  for (int i=0; i < fileList.size(); i++) {
    Document xmlDoc=fileutil.getXMLDocument(fileList.get(i));
    try {
      Policy configTokens=conf.getConfigbyEnv(env).getTargetFileNameMatch(fileList.get(i).getName());
      if (configTokens != null) {
        logger.info(""String_Node_Str"",env,fileList.get(i).getName());
        xmlDoc=replaceTokens(xmlDoc,configTokens);
        DOMSource source=new DOMSource(xmlDoc);
        StreamResult result=new StreamResult(fileList.get(i));
        transformer.transform(source,result);
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",env,fileList.get(i).getName());
      throw e;
    }
  }
  fileList=listFileUtil.getAPIProxyFiles(configFile);
  Document xmlDoc=fileutil.getXMLDocument(fileList.get(0));
  javax.xml.xpath.XPathFactory factory=javax.xml.xpath.XPathFactory.newInstance();
  javax.xml.xpath.XPath xpath=factory.newXPath();
  javax.xml.xpath.XPathExpression expression=xpath.compile(""String_Node_Str"");
  NodeList nodes=(NodeList)expression.evaluate(xmlDoc,XPathConstants.NODESET);
  if (nodes.item(0).hasChildNodes()) {
    nodes.item(0).setTextContent(expression.evaluate(xmlDoc));
  }
 else {
    nodes.item(0).setTextContent(getComment(fileList.get(0)));
  }
  DOMSource source=new DOMSource(xmlDoc);
  StreamResult result=new StreamResult(fileList.get(0));
  transformer.transform(source,result);
}",0.9682750479563228
86457,"@Override public boolean onPrepareOptionsMenu(Menu menu){
  menu.findItem(R.id.action_settings).setEnabled(menuBool);
  return true;
}","@Override public boolean onPrepareOptionsMenu(Menu menu){
  menu.findItem(R.id.action_settings).setVisible(false);
  return true;
}",0.9283018867924528
86458,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  DataHandler.getInstance().addObserver(this);
  mBluetoothAdapter=BluetoothAdapter.getDefaultAdapter();
  if (!mBluetoothAdapter.isEnabled()) {
    new AlertDialog.Builder(this).setTitle(R.string.bluetooth).setMessage(R.string.bluetoothOff).setPositiveButton(android.R.string.yes,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int which){
        mBluetoothAdapter.enable();
        try {
          Thread.sleep(2000);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        listBT();
      }
    }
).setNegativeButton(android.R.string.no,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int which){
        searchBt=false;
      }
    }
).show();
  }
 else {
    listBT();
  }
  t=GoogleAnalytics.getInstance(this).newTracker(""String_Node_Str"");
  t.setScreenName(""String_Node_Str"");
  t.send(new HitBuilders.AppViewBuilder().build());
  plot=(XYPlot)findViewById(R.id.dynamicPlot);
  if (plot.getSeriesSet().size() == 0) {
    Number[] series1Numbers={};
    series1=new SimpleXYSeries(Arrays.asList(series1Numbers),SimpleXYSeries.ArrayFormat.Y_VALS_ONLY,""String_Node_Str"");
    LineAndPointFormatter series1Format=new LineAndPointFormatter(Color.rgb(0,0,255),Color.rgb(200,200,200),null,null);
    series1Format.setPointLabelFormatter(new PointLabelFormatter());
    plot.addSeries(series1,series1Format);
    plot.setTicksPerRangeLabel(3);
    plot.getGraphWidget().setDomainLabelOrientation(-45);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  DataHandler.getInstance().addObserver(this);
  mBluetoothAdapter=BluetoothAdapter.getDefaultAdapter();
  if (DataHandler.getInstance().newValue) {
    mBluetoothAdapter=BluetoothAdapter.getDefaultAdapter();
    if (!mBluetoothAdapter.isEnabled()) {
      new AlertDialog.Builder(this).setTitle(R.string.bluetooth).setMessage(R.string.bluetoothOff).setPositiveButton(android.R.string.yes,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          mBluetoothAdapter.enable();
          try {
            Thread.sleep(2000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          listBT();
        }
      }
).setNegativeButton(android.R.string.no,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          searchBt=false;
        }
      }
).show();
    }
 else {
      listBT();
    }
    plot=(XYPlot)findViewById(R.id.dynamicPlot);
    if (plot.getSeriesSet().size() == 0) {
      Number[] series1Numbers={};
      DataHandler.getInstance().setSeries1(new SimpleXYSeries(Arrays.asList(series1Numbers),SimpleXYSeries.ArrayFormat.Y_VALS_ONLY,""String_Node_Str""));
    }
    DataHandler.getInstance().setNewValue(false);
  }
 else {
    listBT();
    plot=(XYPlot)findViewById(R.id.dynamicPlot);
  }
  LineAndPointFormatter series1Format=new LineAndPointFormatter(Color.rgb(0,0,255),Color.rgb(200,200,200),null,null);
  series1Format.setPointLabelFormatter(new PointLabelFormatter());
  plot.addSeries(DataHandler.getInstance().getSeries1(),series1Format);
  plot.setTicksPerRangeLabel(3);
  plot.getGraphWidget().setDomainLabelOrientation(-45);
  t=GoogleAnalytics.getInstance(this).newTracker(""String_Node_Str"");
  t.setScreenName(""String_Node_Str"");
  t.send(new HitBuilders.AppViewBuilder().build());
}",0.8149732620320855
86459,"@Override protected void onDestroy(){
  super.onDestroy();
}","@Override protected void onDestroy(){
  super.onDestroy();
  DataHandler.getInstance().deleteObserver(this);
}",0.7058823529411765
86460,"/** 
 * Called when bluetooth connection failed
 */
public void connectionError(){
  menuBool=false;
  runOnUiThread(new Runnable(){
    public void run(){
      Toast.makeText(getBaseContext(),getString(R.string.couldnotconnect),Toast.LENGTH_SHORT).show();
      TextView rpm=(TextView)findViewById(R.id.rpm);
      rpm.setText(""String_Node_Str"");
      Spinner spinner1=(Spinner)findViewById(R.id.spinner1);
      spinner1.setSelection(0);
    }
  }
);
}","/** 
 * Called when bluetooth connection failed
 */
public void connectionError(){
  menuBool=false;
  runOnUiThread(new Runnable(){
    public void run(){
      Toast.makeText(getBaseContext(),getString(R.string.couldnotconnect),Toast.LENGTH_SHORT).show();
      TextView rpm=(TextView)findViewById(R.id.rpm);
      rpm.setText(""String_Node_Str"");
      Spinner spinner1=(Spinner)findViewById(R.id.spinner1);
      spinner1.setSelection(DataHandler.getInstance().getID());
    }
  }
);
}",0.9639830508474576
86461,"public void run(){
  menuBool=true;
  TextView rpm=(TextView)findViewById(R.id.rpm);
  rpm.setText(DataHandler.getInstance().getLastValue() + ""String_Node_Str"");
  if (DataHandler.getInstance().getLastValue() != 0) {
    series1.addLast(0,DataHandler.getInstance().getLastValue());
    plot.redraw();
  }
  TextView min=(TextView)findViewById(R.id.min);
  min.setText(""String_Node_Str"" + DataHandler.getInstance().getMin() + ""String_Node_Str"");
  TextView max=(TextView)findViewById(R.id.max);
  max.setText(""String_Node_Str"" + DataHandler.getInstance().getMax() + ""String_Node_Str"");
}","public void run(){
  menuBool=true;
  TextView rpm=(TextView)findViewById(R.id.rpm);
  rpm.setText(DataHandler.getInstance().getLastValue() + ""String_Node_Str"");
  if (DataHandler.getInstance().getLastValue() != 0) {
    DataHandler.getInstance().getSeries1().addLast(0,DataHandler.getInstance().getLastValue());
    plot.redraw();
  }
  TextView min=(TextView)findViewById(R.id.min);
  min.setText(""String_Node_Str"" + DataHandler.getInstance().getMin() + ""String_Node_Str"");
  TextView max=(TextView)findViewById(R.id.max);
  max.setText(""String_Node_Str"" + DataHandler.getInstance().getMax() + ""String_Node_Str"");
}",0.972568578553616
86462,"/** 
 * When menu button are pressed
 */
public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == R.id.action_settings) {
    reader.cancel();
    System.out.println(""String_Node_Str"");
    menuBool=false;
    return true;
  }
 else   if (id == R.id.about) {
    Intent intent=new Intent(this,AboutActivity.class);
    startActivity(intent);
  }
  return super.onOptionsItemSelected(item);
}","/** 
 * When menu button are pressed
 */
public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == R.id.action_settings) {
    DataHandler.getInstance().getReader().cancel();
    System.out.println(""String_Node_Str"");
    menuBool=false;
    return true;
  }
 else   if (id == R.id.about) {
    Intent intent=new Intent(this,AboutActivity.class);
    startActivity(intent);
  }
  return super.onOptionsItemSelected(item);
}",0.9513023782559455
86463,"@Override public void onItemSelected(AdapterView<?> arg0,View arg1,int arg2,long arg3){
  if (arg2 != 0) {
    t.setScreenName(""String_Node_Str"");
    t.send(new HitBuilders.AppViewBuilder().build());
    reader=new ConnectThread((BluetoothDevice)pairedDevices.toArray()[arg2 - 1],this);
    reader.start();
    menuBool=true;
  }
}","@Override public void onItemSelected(AdapterView<?> arg0,View arg1,int arg2,long arg3){
  if (arg2 != 0) {
    DataHandler.getInstance().setID(arg2);
    DataHandler.getInstance().setReader(new ConnectThread((BluetoothDevice)pairedDevices.toArray()[arg2 - 1],this));
    DataHandler.getInstance().getReader().start();
    menuBool=true;
  }
}",0.6913946587537092
86464,"/** 
 * Update Gui with new value from receiver
 */
public void receiveData(){
  runOnUiThread(new Runnable(){
    public void run(){
      menuBool=true;
      TextView rpm=(TextView)findViewById(R.id.rpm);
      rpm.setText(DataHandler.getInstance().getLastValue() + ""String_Node_Str"");
      if (DataHandler.getInstance().getLastValue() != 0) {
        series1.addLast(0,DataHandler.getInstance().getLastValue());
        plot.redraw();
      }
      TextView min=(TextView)findViewById(R.id.min);
      min.setText(""String_Node_Str"" + DataHandler.getInstance().getMin() + ""String_Node_Str"");
      TextView max=(TextView)findViewById(R.id.max);
      max.setText(""String_Node_Str"" + DataHandler.getInstance().getMax() + ""String_Node_Str"");
    }
  }
);
}","/** 
 * Update Gui with new value from receiver
 */
public void receiveData(){
  t.setScreenName(""String_Node_Str"");
  t.send(new HitBuilders.AppViewBuilder().build());
  runOnUiThread(new Runnable(){
    public void run(){
      menuBool=true;
      TextView rpm=(TextView)findViewById(R.id.rpm);
      rpm.setText(DataHandler.getInstance().getLastValue() + ""String_Node_Str"");
      if (DataHandler.getInstance().getLastValue() != 0) {
        DataHandler.getInstance().getSeries1().addLast(0,DataHandler.getInstance().getLastValue());
        plot.redraw();
      }
      TextView min=(TextView)findViewById(R.id.min);
      min.setText(""String_Node_Str"" + DataHandler.getInstance().getMin() + ""String_Node_Str"");
      TextView max=(TextView)findViewById(R.id.max);
      max.setText(""String_Node_Str"" + DataHandler.getInstance().getMax() + ""String_Node_Str"");
    }
  }
);
}",0.9248625534514356
86465,"/** 
 * Run on startup to list bluetooth paired device
 */
public void listBT(){
  if (searchBt) {
    List<String> list=new ArrayList<String>();
    list.add(""String_Node_Str"");
    pairedDevices=mBluetoothAdapter.getBondedDevices();
    if (pairedDevices.size() > 0) {
      for (      BluetoothDevice device : pairedDevices) {
        list.add(device.getName() + ""String_Node_Str"" + device.getAddress());
      }
    }
    Spinner spinner1=(Spinner)findViewById(R.id.spinner1);
    ArrayAdapter<String> dataAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,list);
    dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    spinner1.setOnItemSelectedListener(this);
    spinner1.setAdapter(dataAdapter);
  }
}","/** 
 * Run on startup to list bluetooth paired device
 */
public void listBT(){
  if (searchBt) {
    List<String> list=new ArrayList<String>();
    list.add(""String_Node_Str"");
    pairedDevices=mBluetoothAdapter.getBondedDevices();
    if (pairedDevices.size() > 0) {
      for (      BluetoothDevice device : pairedDevices) {
        list.add(device.getName() + ""String_Node_Str"" + device.getAddress());
      }
    }
    Spinner spinner1=(Spinner)findViewById(R.id.spinner1);
    ArrayAdapter<String> dataAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,list);
    dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    spinner1.setOnItemSelectedListener(this);
    spinner1.setAdapter(dataAdapter);
    if (DataHandler.getInstance().getID() != 0)     spinner1.setSelection(DataHandler.getInstance().getID());
  }
}",0.933252427184466
86466,"public void run(){
  try {
    if (mmSocket.isConnected())     mmSocket.close();
    mmSocket.connect();
  }
 catch (  IOException connectException) {
    ac.connectionError();
    Log.d(""String_Node_Str"",connectException.toString());
    try {
      mmSocket.close();
    }
 catch (    IOException closeException) {
    }
    return;
  }
  while (true) {
    try {
      DataHandler.getInstance().acqui(mmSocket.getInputStream().read());
    }
 catch (    IOException e) {
      ac.connectionError();
      Log.d(""String_Node_Str"",e.toString());
      try {
        mmSocket.getInputStream().close();
        mmSocket.close();
      }
 catch (      IOException closeException) {
      }
      return;
    }
  }
}","public void run(){
  int ok=0;
  while (ok < 2)   try {
    if (mmSocket.isConnected())     mmSocket.close();
    mmSocket.connect();
    ok=5;
  }
 catch (  IOException connectException) {
    if (ok == 0)     ok++;
 else {
      ac.connectionError();
      Log.d(""String_Node_Str"",connectException.toString());
      try {
        mmSocket.close();
      }
 catch (      IOException closeException) {
      }
      return;
    }
  }
  while (true) {
    try {
      DataHandler.getInstance().acqui(mmSocket.getInputStream().read());
    }
 catch (    IOException e) {
      ac.connectionError();
      Log.d(""String_Node_Str"",e.toString());
      try {
        mmSocket.getInputStream().close();
        mmSocket.close();
      }
 catch (      IOException closeException) {
      }
      return;
    }
  }
}",0.9053876478318004
86467,"@Play(""String_Node_Str"") @Test public void testCreate(){
  Order createdOrder=api.create(new OrderRequest().ownId(""String_Node_Str"").addItem(""String_Node_Str"",1,""String_Node_Str"",100).customer(new CustomerRequest().ownId(""String_Node_Str"").fullname(""String_Node_Str"").email(""String_Node_Str"")));
  SimpleDateFormat simpleDateFormat=new SimpleDateFormat(""String_Node_Str"");
  assertEquals(""String_Node_Str"",createdOrder.getId());
  assertEquals(""String_Node_Str"",createdOrder.getOwnId());
  assertEquals(OrderStatus.CREATED,createdOrder.getStatus());
  assertEquals(""String_Node_Str"",createdOrder.getPlatform());
  assertEquals(""String_Node_Str"",createdOrder.getCreatedAt());
  assertEquals(""String_Node_Str"",createdOrder.getUpdatedAt());
  assertEquals(0,createdOrder.getAmount().getPaid().intValue());
  assertEquals(11000,createdOrder.getAmount().getTotal().intValue());
  assertEquals(0,createdOrder.getAmount().getFees().intValue());
  assertEquals(0,createdOrder.getAmount().getRefunds().intValue());
  assertEquals(0,createdOrder.getAmount().getLiquid().intValue());
  assertEquals(0,createdOrder.getAmount().getOtherReceivers().intValue());
  assertEquals(""String_Node_Str"",createdOrder.getAmount().getCurrency());
  assertEquals(1500,createdOrder.getAmount().getSubtotals().getShipping().intValue());
  assertEquals(0,createdOrder.getAmount().getSubtotals().getAddition().intValue());
  assertEquals(0,createdOrder.getAmount().getSubtotals().getDiscount().intValue());
  assertEquals(9500,createdOrder.getAmount().getSubtotals().getItems().intValue());
  assertEquals(""String_Node_Str"",createdOrder.getItems().get(0).getProduct());
  assertEquals(9500,createdOrder.getItems().get(0).getPrice().intValue());
  assertEquals(1,createdOrder.getItems().get(0).getQuantity().intValue());
  assertEquals(""String_Node_Str"",createdOrder.getItems().get(0).getDetail());
  assertEquals(""String_Node_Str"",createdOrder.getItems().get(0).getCategory());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getStreetNumber());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getStreet());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getCity());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getComplement());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getDistrict());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getZipCode());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getState());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getType());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getCountry());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getId());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getOwnId());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFullname());
  assertEquals(""String_Node_Str"",simpleDateFormat.format(createdOrder.getCustomer().getBirthDate()));
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getEmail());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstrument().getCreditCard().getId());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstrument().getCreditCard().getBrand());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstrument().getCreditCard().getFirst6());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstrument().getCreditCard().getLast4());
  assertTrue(createdOrder.getCustomer().getFundingInstrument().getCreditCard().getStore());
  assertEquals(FundingInstrument.Method.CREDIT_CARD,createdOrder.getCustomer().getFundingInstrument().getMethod());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getPhone().getAreaCode());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getPhone().getNumber());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getStreetNumber());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getStreet());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getCity());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getComplement());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getDistrict());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getZipCode());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getState());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getType());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getCountry());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getZipCode());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getStreet());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getStreetNumber());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getComplement());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getCity());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getDistrict());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getState());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getCountry());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getMoipAccountId());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getLinks().getSelfHref());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getLinks().getHostedAccountHref());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstruments().get(0).getCreditCard().getId());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstruments().get(0).getCreditCard().getBrand());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstruments().get(0).getCreditCard().getFirst6());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstruments().get(0).getCreditCard().getLast4());
  assertTrue(createdOrder.getCustomer().getFundingInstruments().get(0).getCreditCard().getStore());
  assertEquals(FundingInstrument.Method.CREDIT_CARD,createdOrder.getCustomer().getFundingInstruments().get(0).getMethod());
  assertEquals(""String_Node_Str"",createdOrder.getEvents().get(0).getType());
  assertEquals(""String_Node_Str"",createdOrder.getEvents().get(0).getCreatedAt());
  assertEquals(""String_Node_Str"",createdOrder.getEvents().get(0).getDescription());
  assertEquals(""String_Node_Str"",createdOrder.getReceivers().get(0).getMoipAccount().getId());
  assertEquals(""String_Node_Str"",createdOrder.getReceivers().get(0).getMoipAccount().getLogin());
  assertEquals(""String_Node_Str"",createdOrder.getReceivers().get(0).getMoipAccount().getFullname());
  assertEquals(Receiver.Type.PRIMARY,createdOrder.getReceivers().get(0).getType());
  assertEquals(0,createdOrder.getReceivers().get(0).getAmount().getTotal().intValue());
  assertEquals(""String_Node_Str"",createdOrder.getReceivers().get(0).getAmount().getCurrency());
  assertEquals(0,createdOrder.getReceivers().get(0).getAmount().getFees().intValue());
  assertEquals(0,createdOrder.getReceivers().get(0).getAmount().getRefunds().intValue());
  assertTrue(createdOrder.getReceivers().get(0).getFeePayor());
  assertEquals(""String_Node_Str"",createdOrder.getLinks().getSelf());
  assertEquals(""String_Node_Str"",createdOrder.getLinks().payCheckout());
  assertEquals(""String_Node_Str"",createdOrder.getLinks().payCreditCard());
  assertEquals(""String_Node_Str"",createdOrder.getLinks().payBoleto());
  assertEquals(""String_Node_Str"",createdOrder.getLinks().payOnlineBankDebitItau());
}","@Play(""String_Node_Str"") @Test public void testCreate(){
  Order createdOrder=api.create(new OrderRequest().ownId(""String_Node_Str"").addItem(""String_Node_Str"",1,""String_Node_Str"",100).customer(new CustomerRequest().ownId(""String_Node_Str"").fullname(""String_Node_Str"").email(""String_Node_Str"")));
  SimpleDateFormat simpleDateFormat=new SimpleDateFormat(""String_Node_Str"");
  assertEquals(""String_Node_Str"",createdOrder.getId());
  assertEquals(""String_Node_Str"",createdOrder.getOwnId());
  assertEquals(OrderStatus.CREATED,createdOrder.getStatus());
  assertEquals(""String_Node_Str"",createdOrder.getPlatform());
  assertEquals(""String_Node_Str"",createdOrder.getCreatedAt());
  assertEquals(""String_Node_Str"",createdOrder.getUpdatedAt());
  assertEquals(0,createdOrder.getAmount().getPaid().intValue());
  assertEquals(11000,createdOrder.getAmount().getTotal().intValue());
  assertEquals(0,createdOrder.getAmount().getFees().intValue());
  assertEquals(0,createdOrder.getAmount().getRefunds().intValue());
  assertEquals(0,createdOrder.getAmount().getLiquid().intValue());
  assertEquals(0,createdOrder.getAmount().getOtherReceivers().intValue());
  assertEquals(""String_Node_Str"",createdOrder.getAmount().getCurrency());
  assertEquals(1500,createdOrder.getAmount().getSubtotals().getShipping().intValue());
  assertEquals(0,createdOrder.getAmount().getSubtotals().getAddition().intValue());
  assertEquals(0,createdOrder.getAmount().getSubtotals().getDiscount().intValue());
  assertEquals(9500,createdOrder.getAmount().getSubtotals().getItems().intValue());
  assertEquals(""String_Node_Str"",createdOrder.getItems().get(0).getProduct());
  assertEquals(9500,createdOrder.getItems().get(0).getPrice().intValue());
  assertEquals(1,createdOrder.getItems().get(0).getQuantity().intValue());
  assertEquals(""String_Node_Str"",createdOrder.getItems().get(0).getDetail());
  assertEquals(""String_Node_Str"",createdOrder.getItems().get(0).getCategory());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getStreetNumber());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getStreet());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getCity());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getComplement());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getDistrict());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getZipCode());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getState());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getType());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getCountry());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getId());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getOwnId());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFullname());
  assertEquals(""String_Node_Str"",simpleDateFormat.format(createdOrder.getCustomer().getBirthDate()));
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getBirthDate());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getEmail());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstrument().getCreditCard().getId());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstrument().getCreditCard().getBrand());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstrument().getCreditCard().getFirst6());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstrument().getCreditCard().getLast4());
  assertTrue(createdOrder.getCustomer().getFundingInstrument().getCreditCard().getStore());
  assertEquals(FundingInstrument.Method.CREDIT_CARD,createdOrder.getCustomer().getFundingInstrument().getMethod());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstrument().getMethod());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getPhone().getAreaCode());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getPhone().getNumber());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getStreetNumber());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getStreet());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getCity());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getComplement());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getDistrict());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getZipCode());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getState());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getType());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getCountry());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getZipCode());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getStreet());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getStreetNumber());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getComplement());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getCity());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getDistrict());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getState());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getCountry());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getMoipAccountId());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getLinks().getSelfHref());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getLinks().getHostedAccountHref());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstruments().get(0).getCreditCard().getId());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstruments().get(0).getCreditCard().getBrand());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstruments().get(0).getCreditCard().getFirst6());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstruments().get(0).getCreditCard().getLast4());
  assertTrue(createdOrder.getCustomer().getFundingInstruments().get(0).getCreditCard().getStore());
  assertEquals(FundingInstrument.Method.CREDIT_CARD,createdOrder.getCustomer().getFundingInstruments().get(0).getMethod());
  assertEquals(""String_Node_Str"",createdOrder.getEvents().get(0).getType());
  assertEquals(""String_Node_Str"",createdOrder.getEvents().get(0).getCreatedAt());
  assertEquals(""String_Node_Str"",createdOrder.getEvents().get(0).getDescription());
  assertEquals(""String_Node_Str"",createdOrder.getReceivers().get(0).getMoipAccount().getId());
  assertEquals(""String_Node_Str"",createdOrder.getReceivers().get(0).getMoipAccount().getLogin());
  assertEquals(""String_Node_Str"",createdOrder.getReceivers().get(0).getMoipAccount().getFullname());
  assertEquals(Receiver.Type.PRIMARY,createdOrder.getReceivers().get(0).getType());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstruments().get(0).getMethod());
  assertNull(createdOrder.getPayments());
  assertNull(createdOrder.getEscrows());
  assertNull(createdOrder.getRefunds());
  assertNull(createdOrder.getEntries());
  assertEquals(""String_Node_Str"",createdOrder.getEvents().get(0).getType());
  assertEquals(""String_Node_Str"",createdOrder.getEvents().get(0).getCreatedAt());
  assertNull(createdOrder.getEvents().get(0).getDescription());
  assertEquals(""String_Node_Str"",createdOrder.getReceivers().get(0).getMoipAccount().getId());
  assertEquals(""String_Node_Str"",createdOrder.getReceivers().get(0).getMoipAccount().getEmail());
  assertEquals(""String_Node_Str"",createdOrder.getReceivers().get(0).getMoipAccount().getFullname());
  assertEquals(""String_Node_Str"",createdOrder.getReceivers().get(0).getType());
  assertEquals(0,createdOrder.getReceivers().get(0).getAmount().getTotal().intValue());
  assertEquals(""String_Node_Str"",createdOrder.getReceivers().get(0).getAmount().getCurrency());
  assertEquals(0,createdOrder.getReceivers().get(0).getAmount().getFees().intValue());
  assertEquals(0,createdOrder.getReceivers().get(0).getAmount().getRefunds().intValue());
  assertTrue(createdOrder.getReceivers().get(0).getFeePayor());
  assertEquals(""String_Node_Str"",createdOrder.getLinks().getSelf());
  assertEquals(""String_Node_Str"",createdOrder.getLinks().payCheckout());
  assertEquals(""String_Node_Str"",createdOrder.getLinks().payCreditCard());
  assertEquals(""String_Node_Str"",createdOrder.getLinks().payBoleto());
  assertEquals(""String_Node_Str"",createdOrder.getLinks().payOnlineBankDebitItau());
}",0.938507885876307
86468,"public Date getCreatedAt(){
  return createdAt;
}","public String getCreatedAt(){
  return createdAt;
}",0.92
86469,"@Override public String toString(){
  return new StringBuilder().append('{').append(""String_Node_Str"").append(selfHref).append(""String_Node_Str"").append(""String_Node_Str"").append(hostedAccountHref).append(""String_Node_Str"").append('}').toString();
}","@Override public String toString(){
  return new StringBuilder().append('{').append(""String_Node_Str"").append(self).append(""String_Node_Str"").append(""String_Node_Str"").append(hostedAccount).append(""String_Node_Str"").append('}').toString();
}",0.9836734693877552
86470,"public String getHostedAccountHref(){
  return hostedAccountHref.redirectHref;
}","public String getHostedAccountHref(){
  return hostedAccount.getRedirectHref();
}",0.9316770186335404
86471,"public String getSelfHref(){
  return selfHref.href;
}","public String getSelfHref(){
  return self.getHref();
}",0.8990825688073395
86472,"@Play(""String_Node_Str"") @Test public void testCreate(){
  Order createdOrder=api.create(new OrderRequest().ownId(""String_Node_Str"").addItem(""String_Node_Str"",1,""String_Node_Str"",100).customer(new CustomerRequest().ownId(""String_Node_Str"").fullname(""String_Node_Str"").email(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",createdOrder.getId());
  assertEquals(""String_Node_Str"",createdOrder.getOwnId());
  assertEquals(OrderStatus.CREATED,createdOrder.getStatus());
  assertEquals(""String_Node_Str"",createdOrder.getPlatform());
  assertEquals(""String_Node_Str"",createdOrder.getCreatedAt());
  assertEquals(""String_Node_Str"",createdOrder.getUpdatedAt());
  assertEquals(0,createdOrder.getAmount().getPaid().intValue());
  assertEquals(11000,createdOrder.getAmount().getTotal().intValue());
  assertEquals(0,createdOrder.getAmount().getFees().intValue());
  assertEquals(0,createdOrder.getAmount().getRefunds().intValue());
  assertEquals(0,createdOrder.getAmount().getLiquid().intValue());
  assertEquals(0,createdOrder.getAmount().getOtherReceivers().intValue());
  assertEquals(""String_Node_Str"",createdOrder.getAmount().getCurrency());
  assertEquals(1500,createdOrder.getAmount().getSubtotals().getShipping().intValue());
  assertEquals(0,createdOrder.getAmount().getSubtotals().getAddition().intValue());
  assertEquals(0,createdOrder.getAmount().getSubtotals().getDiscount().intValue());
  assertEquals(9500,createdOrder.getAmount().getSubtotals().getItems().intValue());
  assertEquals(""String_Node_Str"",createdOrder.getItems().get(0).getProduct());
  assertEquals(9500,createdOrder.getItems().get(0).getPrice().intValue());
  assertEquals(1,createdOrder.getItems().get(0).getQuantity().intValue());
  assertEquals(""String_Node_Str"",createdOrder.getItems().get(0).getDetail());
  assertEquals(""String_Node_Str"",createdOrder.getItems().get(0).getCategory());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getStreetNumber());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getStreet());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getCity());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getComplement());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getDistrict());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getZipCode());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getState());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getType());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getCountry());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getId());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getOwnId());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFullname());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getBirthDate());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getEmail());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstrument().getCreditCard().getId());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstrument().getCreditCard().getBrand());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstrument().getCreditCard().getFirst6());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstrument().getCreditCard().getLast4());
  assertTrue(createdOrder.getCustomer().getFundingInstrument().getCreditCard().getStore());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstrument().getMethod());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getPhone().getAreaCode());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getPhone().getNumber());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getStreetNumber());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getStreet());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getCity());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getComplement());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getDistrict());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getZipCode());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getState());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getType());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getCountry());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getZipCode());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getStreet());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getStreetNumber());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getComplement());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getCity());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getDistrict());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getState());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getCountry());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getMoipAccountId());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getLinks().getSelfHref());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getLinks().getHostedAccountHref());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstruments().get(0).getCreditCard().getId());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstruments().get(0).getCreditCard().getBrand());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstruments().get(0).getCreditCard().getFirst6());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstruments().get(0).getCreditCard().getLast4());
  assertTrue(createdOrder.getCustomer().getFundingInstruments().get(0).getCreditCard().getStore());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstruments().get(0).getMethod());
  assertNull(createdOrder.getPayments());
  assertNull(createdOrder.getEscrows());
  assertNull(createdOrder.getRefunds());
  assertNull(createdOrder.getEntries());
  assertEquals(""String_Node_Str"",createdOrder.getEvents().get(0).getType());
  assertEquals(""String_Node_Str"",createdOrder.getEvents().get(0).getCreatedAt());
  assertNull(createdOrder.getEvents().get(0).getDescription());
  assertEquals(""String_Node_Str"",createdOrder.getReceivers().get(0).getMoipAccount().getId());
  assertEquals(""String_Node_Str"",createdOrder.getReceivers().get(0).getMoipAccount().getEmail());
  assertEquals(""String_Node_Str"",createdOrder.getReceivers().get(0).getMoipAccount().getFullname());
  assertEquals(""String_Node_Str"",createdOrder.getReceivers().get(0).getType());
  assertEquals(0,createdOrder.getReceivers().get(0).getAmount().getTotal().intValue());
  assertEquals(""String_Node_Str"",createdOrder.getReceivers().get(0).getAmount().getCurrency());
  assertEquals(0,createdOrder.getReceivers().get(0).getAmount().getFees().intValue());
  assertEquals(0,createdOrder.getReceivers().get(0).getAmount().getRefunds().intValue());
  assertTrue(createdOrder.getReceivers().get(0).getFeePayor());
  assertEquals(""String_Node_Str"",createdOrder.getLinks().getSelf());
  assertEquals(""String_Node_Str"",createdOrder.getLinks().payCheckout());
  assertEquals(""String_Node_Str"",createdOrder.getLinks().payCreditCard());
  assertEquals(""String_Node_Str"",createdOrder.getLinks().payBoleto());
  assertEquals(""String_Node_Str"",createdOrder.getLinks().payOnlineBankDebitItau());
}","@Play(""String_Node_Str"") @Test public void testCreate(){
  Order createdOrder=api.create(new OrderRequest().ownId(""String_Node_Str"").addItem(""String_Node_Str"",1,""String_Node_Str"",100).customer(new CustomerRequest().ownId(""String_Node_Str"").fullname(""String_Node_Str"").email(""String_Node_Str"")));
  SimpleDateFormat simpleDateFormat=new SimpleDateFormat(""String_Node_Str"");
  assertEquals(""String_Node_Str"",createdOrder.getId());
  assertEquals(""String_Node_Str"",createdOrder.getOwnId());
  assertEquals(OrderStatus.CREATED,createdOrder.getStatus());
  assertEquals(""String_Node_Str"",createdOrder.getPlatform());
  assertEquals(""String_Node_Str"",createdOrder.getCreatedAt());
  assertEquals(""String_Node_Str"",createdOrder.getUpdatedAt());
  assertEquals(0,createdOrder.getAmount().getPaid().intValue());
  assertEquals(11000,createdOrder.getAmount().getTotal().intValue());
  assertEquals(0,createdOrder.getAmount().getFees().intValue());
  assertEquals(0,createdOrder.getAmount().getRefunds().intValue());
  assertEquals(0,createdOrder.getAmount().getLiquid().intValue());
  assertEquals(0,createdOrder.getAmount().getOtherReceivers().intValue());
  assertEquals(""String_Node_Str"",createdOrder.getAmount().getCurrency());
  assertEquals(1500,createdOrder.getAmount().getSubtotals().getShipping().intValue());
  assertEquals(0,createdOrder.getAmount().getSubtotals().getAddition().intValue());
  assertEquals(0,createdOrder.getAmount().getSubtotals().getDiscount().intValue());
  assertEquals(9500,createdOrder.getAmount().getSubtotals().getItems().intValue());
  assertEquals(""String_Node_Str"",createdOrder.getItems().get(0).getProduct());
  assertEquals(9500,createdOrder.getItems().get(0).getPrice().intValue());
  assertEquals(1,createdOrder.getItems().get(0).getQuantity().intValue());
  assertEquals(""String_Node_Str"",createdOrder.getItems().get(0).getDetail());
  assertEquals(""String_Node_Str"",createdOrder.getItems().get(0).getCategory());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getStreetNumber());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getStreet());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getCity());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getComplement());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getDistrict());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getZipCode());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getState());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getType());
  assertEquals(""String_Node_Str"",createdOrder.getAddresses().get(0).getCountry());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getId());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getOwnId());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFullname());
  assertEquals(""String_Node_Str"",simpleDateFormat.format(createdOrder.getCustomer().getBirthDate()));
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getEmail());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstrument().getCreditCard().getId());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstrument().getCreditCard().getBrand());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstrument().getCreditCard().getFirst6());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstrument().getCreditCard().getLast4());
  assertTrue(createdOrder.getCustomer().getFundingInstrument().getCreditCard().getStore());
  assertEquals(FundingInstrument.Method.CREDIT_CARD,createdOrder.getCustomer().getFundingInstrument().getMethod());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getPhone().getAreaCode());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getPhone().getNumber());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getStreetNumber());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getStreet());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getCity());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getComplement());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getDistrict());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getZipCode());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getState());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getType());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getAddresses().get(0).getCountry());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getZipCode());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getStreet());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getStreetNumber());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getComplement());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getCity());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getDistrict());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getState());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getShippingAddress().getCountry());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getMoipAccountId());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getLinks().getSelfHref());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getLinks().getHostedAccountHref());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstruments().get(0).getCreditCard().getId());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstruments().get(0).getCreditCard().getBrand());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstruments().get(0).getCreditCard().getFirst6());
  assertEquals(""String_Node_Str"",createdOrder.getCustomer().getFundingInstruments().get(0).getCreditCard().getLast4());
  assertTrue(createdOrder.getCustomer().getFundingInstruments().get(0).getCreditCard().getStore());
  assertEquals(FundingInstrument.Method.CREDIT_CARD,createdOrder.getCustomer().getFundingInstruments().get(0).getMethod());
  assertEquals(""String_Node_Str"",createdOrder.getEvents().get(0).getType());
  assertEquals(""String_Node_Str"",createdOrder.getEvents().get(0).getCreatedAt());
  assertEquals(""String_Node_Str"",createdOrder.getEvents().get(0).getDescription());
  assertEquals(""String_Node_Str"",createdOrder.getReceivers().get(0).getMoipAccount().getId());
  assertEquals(""String_Node_Str"",createdOrder.getReceivers().get(0).getMoipAccount().getLogin());
  assertEquals(""String_Node_Str"",createdOrder.getReceivers().get(0).getMoipAccount().getFullname());
  assertEquals(Receiver.Type.PRIMARY,createdOrder.getReceivers().get(0).getType());
  assertEquals(0,createdOrder.getReceivers().get(0).getAmount().getTotal().intValue());
  assertEquals(""String_Node_Str"",createdOrder.getReceivers().get(0).getAmount().getCurrency());
  assertEquals(0,createdOrder.getReceivers().get(0).getAmount().getFees().intValue());
  assertEquals(0,createdOrder.getReceivers().get(0).getAmount().getRefunds().intValue());
  assertTrue(createdOrder.getReceivers().get(0).getFeePayor());
  assertEquals(""String_Node_Str"",createdOrder.getLinks().getSelf());
  assertEquals(""String_Node_Str"",createdOrder.getLinks().payCheckout());
  assertEquals(""String_Node_Str"",createdOrder.getLinks().payCreditCard());
  assertEquals(""String_Node_Str"",createdOrder.getLinks().payBoleto());
  assertEquals(""String_Node_Str"",createdOrder.getLinks().payOnlineBankDebitItau());
}",0.9639373151236704
86473,"public String getAuthorizeUrl(String clientId,String redirectUri,ScopePermissionList scope){
  try {
    URIBuilder b=new URIBuilder(Client.CONNECT_SANDBOX + ""String_Node_Str"");
    b.addParameter(""String_Node_Str"",""String_Node_Str"");
    b.addParameter(""String_Node_Str"",clientId);
    b.addParameter(""String_Node_Str"",redirectUri);
    b.addParameter(""String_Node_Str"",scope.toString());
    URL url=b.build().toURL();
    return url.toString();
  }
 catch (  URISyntaxException e) {
    throw new MoipException(""String_Node_Str"" + e.getMessage());
  }
catch (  MalformedURLException e) {
    throw new MoipException(""String_Node_Str"" + e.getMessage());
  }
}","public String getAuthorizeUrl(String clientId,String redirectUri,ScopePermissionList scope){
  try {
    URIBuilder b=new URIBuilder(client.getEndpoint() + ""String_Node_Str"");
    b.addParameter(""String_Node_Str"",""String_Node_Str"");
    b.addParameter(""String_Node_Str"",clientId);
    b.addParameter(""String_Node_Str"",redirectUri);
    b.addParameter(""String_Node_Str"",scope.toString());
    URL url=b.build().toURL();
    return url.toString();
  }
 catch (  URISyntaxException e) {
    throw new MoipException(""String_Node_Str"" + e.getMessage());
  }
catch (  MalformedURLException e) {
    throw new MoipException(""String_Node_Str"" + e.getMessage());
  }
}",0.9696969696969696
86474,"@Test public void testGetAuthURL(){
  String authURL=api.getAuthorizeUrl(""String_Node_Str"",""String_Node_Str"",new ScopePermissionList(ScopePermission.DEFINE_PREFERENCES,ScopePermission.MANAGE_ACCOUNT_INFO,ScopePermission.RECEIVE_FUNDS,ScopePermission.REFUND,ScopePermission.RETRIEVE_FINANCIAL_INFO,ScopePermission.TRANSFER_FUNDS));
  assertEquals(""String_Node_Str"",authURL);
}","@Test public void testGetAuthURL(){
  api=new ConnectAPI(new ClientFactory().client(Client.CONNECT_SANDBOX));
  String authURL=api.getAuthorizeUrl(""String_Node_Str"",""String_Node_Str"",new ScopePermissionList(ScopePermission.DEFINE_PREFERENCES,ScopePermission.MANAGE_ACCOUNT_INFO,ScopePermission.RECEIVE_FUNDS,ScopePermission.REFUND,ScopePermission.RETRIEVE_FINANCIAL_INFO,ScopePermission.TRANSFER_FUNDS));
  assertEquals(""String_Node_Str"",authURL);
}",0.9101941747572816
86475,"public Invoice get(final String id){
  Invoice invoice=client.get(""String_Node_Str"" + id,Invoice.class);
  return invoice;
}","public Invoice get(final String id){
  return client.get(""String_Node_Str"" + id,Invoice.class);
}",0.832579185520362
86476,"public Invoice create(final InvoiceRequest invoice){
  Invoice createdInvoice=client.post(""String_Node_Str"",invoice,Invoice.class);
  return createdInvoice;
}","public Invoice create(final InvoiceRequest invoice){
  return client.post(""String_Node_Str"",invoice,Invoice.class);
}",0.8290909090909091
86477,"public Invoice list(){
  Invoice createdInvoice=client.get(""String_Node_Str"",Invoice.class);
  return createdInvoice;
}","public List<Invoice> list(){
  return client.get(""String_Node_Str"",new ArrayList<Invoice>().getClass());
}",0.6577777777777778
86478,"@Override public String toString(){
  final StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(method);
  sb.append(""String_Node_Str"").append(creditCard);
  sb.append('}');
  return sb.toString();
}","@Override public String toString(){
  final StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(method);
  sb.append(""String_Node_Str"").append(creditCard);
  sb.append(""String_Node_Str"").append(boleto);
  sb.append('}');
  return sb.toString();
}",0.9108159392789372
86479,"public <T>T post(final String path,final Object object,final Class<T> type){
  try {
    URL url=new URL(endpoint + path);
    HttpURLConnection conn=(HttpURLConnection)url.openConnection();
    conn.setRequestMethod(""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",USER_AGENT);
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    if (conn instanceof HttpsURLConnection) {
      ((HttpsURLConnection)conn).setSSLSocketFactory(new SSLSupport());
    }
    if (authentication != null) {
      authentication.authenticate(conn);
    }
    conn.setDoOutput(true);
    LOGGER.debug(""String_Node_Str"",url.toString());
    logHeaders(conn.getRequestProperties().entrySet());
    DataOutputStream wr=new DataOutputStream(conn.getOutputStream());
    wr.writeBytes(gson.toJson(object));
    wr.flush();
    wr.close();
    LOGGER.debug(""String_Node_Str"");
    int responseCode=conn.getResponseCode();
    LOGGER.debug(""String_Node_Str"",responseCode,conn.getResponseMessage());
    logHeaders(conn.getHeaderFields().entrySet());
    StringBuilder responseBody=new StringBuilder();
    if (responseCode >= 200 && responseCode < 299) {
      responseBody=readBody(conn.getInputStream());
    }
    if (responseCode >= 400 && responseCode < 499) {
      responseBody=readBody(conn.getErrorStream());
      Errors errors=gson.fromJson(responseBody.toString(),Errors.class);
      throw new ValidationException(responseCode,conn.getResponseMessage(),errors);
    }
    if (responseCode >= 500) {
      throw new UnexpectecException();
    }
    LOGGER.debug(""String_Node_Str"");
    LOGGER.debug(""String_Node_Str"",responseBody.toString());
    LOGGER.debug(""String_Node_Str"",conn.getContentLength());
    return gson.fromJson(responseBody.toString(),type);
  }
 catch (  java.io.IOException e) {
    throw new MoipException(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  NoSuchAlgorithmException e) {
    throw new MoipException(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  KeyManagementException e) {
    throw new MoipException(""String_Node_Str"" + e.getMessage(),e);
  }
}","public <T>T post(final String path,final Object object,final Class<T> type){
  try {
    URL url=new URL(endpoint + path);
    HttpURLConnection conn=(HttpURLConnection)url.openConnection();
    conn.setRequestMethod(""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",USER_AGENT);
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    if (conn instanceof HttpsURLConnection) {
      ((HttpsURLConnection)conn).setSSLSocketFactory(new SSLSupport());
    }
    if (authentication != null) {
      authentication.authenticate(conn);
    }
    conn.setDoOutput(true);
    LOGGER.debug(""String_Node_Str"",url.toString());
    logHeaders(conn.getRequestProperties().entrySet());
    DataOutputStream wr=new DataOutputStream(conn.getOutputStream());
    wr.writeBytes(gson.toJson(object));
    wr.flush();
    wr.close();
    LOGGER.debug(""String_Node_Str"");
    int responseCode=conn.getResponseCode();
    LOGGER.debug(""String_Node_Str"",responseCode,conn.getResponseMessage());
    logHeaders(conn.getHeaderFields().entrySet());
    StringBuilder responseBody=new StringBuilder();
    if (responseCode >= 200 && responseCode < 299) {
      responseBody=readBody(conn.getInputStream());
    }
    if (responseCode >= 400 && responseCode < 499) {
      responseBody=readBody(conn.getErrorStream());
      Errors errors=gson.fromJson(responseBody.toString(),Errors.class);
      throw new ValidationException(responseCode,conn.getResponseMessage(),errors);
    }
    if (responseCode >= 500) {
      throw new UnexpectecException();
    }
    LOGGER.debug(""String_Node_Str"");
    LOGGER.debug(""String_Node_Str"",responseBody.toString());
    LOGGER.debug(""String_Node_Str"",conn.getContentLength());
    return gson.fromJson(responseBody.toString(),type);
  }
 catch (  IOException e) {
    throw new MoipException(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  NoSuchAlgorithmException e) {
    throw new MoipException(""String_Node_Str"" + e.getMessage(),e);
  }
catch (  KeyManagementException e) {
    throw new MoipException(""String_Node_Str"" + e.getMessage(),e);
  }
}",0.9980961446930032
86480,"/** 
 * Use of this method assumes the path given matches this Route.
 */
public String[] splat(String path){
  List<SplatParameterElement> splatParams=getSplatParameterElements();
  String[] pathTokens=RouteHelper.getPathElements(path);
  String[] splat=new String[splatParams.size()];
  for (int i=0; i < splatParams.size(); i++) {
    SplatParameterElement splatParam=splatParams.get(i);
    splat[i]=urlDecodeForPathParams(pathTokens[splatParam.index()]);
    if (i + 1 == splatParams.size() && endsWithSplat()) {
      for (int j=splatParam.index() + 1; j < pathTokens.length; j++) {
        splat[i]=splat[i] + PATH_ELEMENT_SEPARATOR + urlDecodeForPathParams(pathTokens[j]);
      }
    }
  }
  return splat;
}","/** 
 * Use of this method assumes the path given matches this Route.
 */
public String[] splat(String path){
  List<SplatParameterElement> splatParams=getSplatParameterElements();
  String[] pathTokens=RouteHelper.getPathElements(path,false);
  String[] splat=new String[splatParams.size()];
  for (int i=0; i < splatParams.size(); i++) {
    SplatParameterElement splatParam=splatParams.get(i);
    splat[i]=urlDecodeForPathParams(pathTokens[splatParam.index()]);
    if (i + 1 == splatParams.size() && endsWithSplat()) {
      for (int j=splatParam.index() + 1; j < pathTokens.length; j++) {
        splat[i]=splat[i] + PATH_ELEMENT_SEPARATOR + urlDecodeForPathParams(pathTokens[j]);
      }
    }
  }
  return splat;
}",0.995827538247566
86481,"public static String[] getPathElements(String path){
  if (path == null)   throw new IllegalArgumentException(""String_Node_Str"");
  path=path.trim();
  if (path.length() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  path=path.startsWith(PATH_ELEMENT_SEPARATOR) ? path.substring(1) : path;
  return path.split(PATH_ELEMENT_SEPARATOR);
}","public static String[] getPathElements(String path,boolean ignoreTrailingSeparator){
  if (path == null)   throw new IllegalArgumentException(""String_Node_Str"");
  path=path.trim();
  if (path.length() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  path=path.startsWith(PATH_ELEMENT_SEPARATOR) ? path.substring(1) : path;
  return path.split(PATH_ELEMENT_SEPARATOR,ignoreTrailingSeparator ? 0 : -1);
}",0.9159120310478654
86482,"private void sendPacket(byte opCode,Closure closure) throws IOException {
  socketWait.addAndGet(1);
synchronized (socketOut) {
    sendByte(opCode);
    closure.run();
  }
  if (socketWait.addAndGet(-1) == 0) {
    socketOut.flush();
  }
}","private void sendPacket(byte opCode,Closure closure) throws IOException {
  socketWait.incrementAndGet();
synchronized (socketOut) {
    sendByte(opCode);
    closure.run();
  }
  if (socketWait.decrementAndGet() == 0) {
    socketOut.flush();
  }
}",0.9447852760736196
86483,"public RelayProtocol(final int port,final String cluster) throws IOException {
  socket=new Socket(InetAddress.getLoopbackAddress(),port);
  socketIn=new DataInputStream(new BufferedInputStream(socket.getInputStream()));
  socketOut=new DataOutputStream(new BufferedOutputStream(socket.getOutputStream()));
  socketWait=new AtomicInteger();
  sendInit(cluster);
  processInit();
}","public RelayProtocol(final int port,final String cluster) throws IOException {
  socket=new Socket(InetAddress.getLoopbackAddress(),port);
  socket.setTcpNoDelay(true);
  socketIn=new DataInputStream(new BufferedInputStream(socket.getInputStream()));
  socketOut=new DataOutputStream(new BufferedOutputStream(socket.getOutputStream()));
  socketWait=new AtomicInteger();
  sendInit(cluster);
  processInit();
}",0.9620253164556962
86484,"public byte[] receive(final long timeout) throws InterruptedException, TimeoutException {
synchronized (itoaBuffer) {
    if (itoaBuffer.isEmpty()) {
      if (timeout > 0) {
        itoaBuffer.wait(timeout);
      }
 else {
        itoaBuffer.wait();
      }
      if (itoaBuffer.isEmpty()) {
        throw new TimeoutException(""String_Node_Str"");
      }
    }
    final byte[] message=itoaBuffer.remove();
    throttler.execute(() -> {
      try {
        protocol.sendTunnelAllowance(id,message.length);
      }
 catch (      IOException ignored) {
      }
    }
);
    return message;
  }
}","public byte[] receive(final long timeout) throws InterruptedException, TimeoutException {
synchronized (itoaBuffer) {
    if (itoaBuffer.isEmpty()) {
      if (timeout > 0) {
        itoaBuffer.wait(timeout);
      }
 else {
        itoaBuffer.wait();
      }
      if (itoaBuffer.isEmpty()) {
        throw new TimeoutException(""String_Node_Str"");
      }
    }
    final byte[] message=itoaBuffer.remove();
    throttler.submit(() -> {
      try {
        protocol.sendTunnelAllowance(id,message.length);
      }
 catch (      IOException ignored) {
      }
    }
);
    return message;
  }
}",0.9890664423885618
86485,"public void handleTransfer(final int size,final byte[] chunk){
  if (size != 0) {
    if (chunkBuffer != null) {
      logger.loadContext();
      logger.warn(""String_Node_Str"",""String_Node_Str"",String.valueOf(chunkCapacity),""String_Node_Str"",String.valueOf(chunkBuffer.size()));
      logger.unloadContext();
      final int allowance=chunkBuffer.size();
      throttler.execute(() -> {
        try {
          protocol.sendTunnelAllowance(id,allowance);
        }
 catch (        IOException ignored) {
        }
      }
);
    }
    chunkCapacity=size;
    chunkBuffer=new ByteArrayOutputStream(chunkCapacity);
  }
  try {
    chunkBuffer.write(chunk);
  }
 catch (  IOException ignored) {
  }
  if (chunkBuffer.size() == chunkCapacity) {
synchronized (itoaBuffer) {
      itoaBuffer.add(chunkBuffer.toByteArray());
      chunkBuffer=null;
      chunkCapacity=0;
      itoaBuffer.notify();
    }
  }
}","public void handleTransfer(final int size,final byte[] chunk){
  if (size != 0) {
    if (chunkBuffer != null) {
      logger.loadContext();
      logger.warn(""String_Node_Str"",""String_Node_Str"",String.valueOf(chunkCapacity),""String_Node_Str"",String.valueOf(chunkBuffer.size()));
      logger.unloadContext();
      final int allowance=chunkBuffer.size();
      throttler.submit(() -> {
        try {
          protocol.sendTunnelAllowance(id,allowance);
        }
 catch (        IOException ignored) {
        }
      }
);
    }
    chunkCapacity=size;
    chunkBuffer=new ByteArrayOutputStream(chunkCapacity);
  }
  try {
    chunkBuffer.write(chunk);
  }
 catch (  IOException ignored) {
  }
  if (chunkBuffer.size() == chunkCapacity) {
synchronized (itoaBuffer) {
      itoaBuffer.add(chunkBuffer.toByteArray());
      chunkBuffer=null;
      chunkCapacity=0;
      itoaBuffer.notify();
    }
  }
}",0.9928057553956836
86486,"Connection(int port,@NotNull String cluster,@Nullable ServiceHandler handler,@Nullable ServiceLimits limits) throws IOException {
  Validators.validateClusterName(cluster);
  if (limits == null) {
    limits=new ServiceLimits();
  }
  protocol=new RelayProtocol(port,cluster);
  broadcaster=new BroadcastScheme(protocol,handler,limits);
  requester=new RequestScheme(protocol,handler,limits);
  subscriber=new PublishScheme(protocol);
  tunneler=new TunnelScheme(protocol,handler);
  runner=new Thread(() -> protocol.process(handler,broadcaster,requester,subscriber,tunneler));
  runner.start();
}","Connection(final int port,final String cluster,final ServiceHandler handler,final ServiceLimits limits,final ContextualLogger logger) throws IOException {
  Validators.validateClusterName(cluster);
  this.logger=logger;
  protocol=new RelayProtocol(port,cluster);
  broadcaster=new BroadcastScheme(protocol,handler,limits,logger);
  requester=new RequestScheme(protocol,handler,limits,logger);
  subscriber=new PublishScheme(protocol,logger);
  tunneler=new TunnelScheme(protocol,handler,logger);
  runner=new Thread(() -> protocol.process(handler,broadcaster,requester,subscriber,tunneler));
  runner.start();
}",0.8387096774193549
86487,"@Override public void close() throws IOException, InterruptedException {
  protocol.sendClose();
  runner.join();
  tunneler.close();
  subscriber.close();
  requester.close();
  broadcaster.close();
}","@Override public void close() throws IOException, InterruptedException {
  logger.loadContext();
  try {
    logger.info(""String_Node_Str"");
    protocol.sendClose();
    runner.join();
    tunneler.close();
    subscriber.close();
    requester.close();
    broadcaster.close();
  }
  finally {
    logger.unloadContext();
  }
}",0.6150943396226415
86488,"public static Connection connect(final int port) throws IOException {
  return new Connection(port,""String_Node_Str"",null,null);
}","public static Connection connect(final int port) throws IOException {
  final ContextualLogger logger=new ContextualLogger(LoggerFactory.getLogger(Iris.class.getPackage().getName()),""String_Node_Str"",String.valueOf(nextConnId.incrementAndGet()));
  try {
    logger.loadContext();
    logger.info(""String_Node_Str"",""String_Node_Str"",String.valueOf(port));
    final Connection conn=new Connection(port,""String_Node_Str"",null,null,logger);
    logger.info(""String_Node_Str"");
    return conn;
  }
 catch (  IOException e) {
    logger.warn(""String_Node_Str"",""String_Node_Str"",e.getMessage());
    throw e;
  }
 finally {
    logger.unloadContext();
  }
}",0.2171136653895274
86489,"public static Service register(final int port,@NotNull final String cluster,@NotNull final ServiceHandler handler,@NotNull final ServiceLimits limits) throws IOException, InterruptedException {
  return new Service(port,cluster,handler,limits);
}","public static Service register(final int port,@NotNull final String cluster,@NotNull final ServiceHandler handler,@NotNull final ServiceLimits limits) throws IOException, InterruptedException, InitializationException {
  return new Service(port,cluster,handler,limits);
}",0.9516441005802708
86490,"Service(final int port,@NotNull final String cluster,@NotNull final ServiceHandler handler,@Nullable final ServiceLimits limits) throws IOException, InterruptedException {
  connection=new Connection(port,cluster,handler,limits);
  try {
    handler.init(connection);
  }
 catch (  Exception e) {
    connection.close();
  }
}","Service(final int port,@NotNull final String cluster,@NotNull final ServiceHandler handler,@NotNull final ServiceLimits limits) throws IOException, InterruptedException, InitializationException {
  final ContextualLogger logger=new ContextualLogger(LoggerFactory.getLogger(Iris.class.getPackage().getName()),""String_Node_Str"",String.valueOf(nextServId.incrementAndGet()));
  try {
    logger.loadContext();
    logger.info(""String_Node_Str"",""String_Node_Str"",String.valueOf(port),""String_Node_Str"",cluster,""String_Node_Str"",String.format(""String_Node_Str"",limits.broadcastThreads,limits.broadcastMemory),""String_Node_Str"",String.format(""String_Node_Str"",limits.requestThreads,limits.requestMemory));
    connection=new Connection(port,cluster,handler,limits,logger);
    try {
      handler.init(connection);
      logger.info(""String_Node_Str"");
    }
 catch (    InitializationException e) {
      logger.warn(""String_Node_Str"",""String_Node_Str"",e.getMessage());
      connection.close();
      throw e;
    }
  }
 catch (  IOException|InterruptedException e) {
    logger.warn(""String_Node_Str"",""String_Node_Str"",e.getMessage());
    throw e;
  }
 finally {
    logger.unloadContext();
  }
}",0.2421052631578947
86491,"default void init(@NotNull final Connection connection){
}","default void init(@NotNull final Connection connection) throws InitializationException {
}",0.7837837837837838
86492,"public boolean schedule(Runnable task,int size,int timeout){
}","public boolean schedule(Runnable task,int size){
  if (!capacity.tryAcquire(size)) {
    return false;
  }
  workers.submit(() -> {
    capacity.release(size);
    task.run();
  }
);
  return true;
}",0.3831417624521073
86493,"public byte[] request(final String cluster,byte[] request,long timeoutMillis) throws IOException, InterruptedException, RemoteException, TimeoutException {
  final Long id=nextId.addAndGet(1);
  final Result result=new Result();
  pending.put(id,result);
  try {
    protocol.send(OpCode.REQUEST,() -> {
      protocol.sendVarint(id);
      protocol.sendString(cluster);
      protocol.sendBinary(request);
      protocol.sendVarint(timeoutMillis);
    }
);
    result.wait();
    if (result.timeout) {
      throw new TimeoutException(""String_Node_Str"");
    }
 else     if (result.error != null) {
      throw new RemoteException(result.error);
    }
 else {
      return result.reply;
    }
  }
  finally {
    pending.remove(id);
  }
}","public byte[] request(final String cluster,byte[] request,long timeoutMillis) throws IOException, InterruptedException, RemoteException, TimeoutException {
  final Long id=nextId.addAndGet(1);
  final Result result=new Result();
  pending.put(id,result);
  try {
    protocol.send(OpCode.REQUEST,() -> {
      protocol.sendVarint(id);
      protocol.sendString(cluster);
      protocol.sendBinary(request);
      protocol.sendVarint(timeoutMillis);
    }
);
synchronized (result) {
      result.wait();
    }
    if (result.timeout) {
      throw new TimeoutException(""String_Node_Str"");
    }
 else     if (result.error != null) {
      throw new RemoteException(result.error);
    }
 else {
      return result.reply;
    }
  }
  finally {
    pending.remove(id);
  }
}",0.9788079470198676
86494,"public void handleReply() throws IOException {
  final long id=protocol.receiveVarint();
  final Result result=pending.get(id);
  if (result == null) {
    return;
  }
  result.timeout=protocol.receiveBoolean();
  if (!result.timeout) {
    final boolean success=protocol.receiveBoolean();
    if (success) {
      result.reply=protocol.receiveBinary();
    }
 else {
      result.error=protocol.receiveString();
    }
  }
  result.notify();
}","public void handleReply() throws IOException {
  final long id=protocol.receiveVarint();
  final Result result=pending.get(id);
  if (result == null) {
    return;
  }
  result.timeout=protocol.receiveBoolean();
  if (!result.timeout) {
    final boolean success=protocol.receiveBoolean();
    if (success) {
      result.reply=protocol.receiveBinary();
    }
 else {
      result.error=protocol.receiveString();
    }
  }
synchronized (result) {
    result.notify();
  }
}",0.925764192139738
86495,"public void reply(final long requestId,final byte[] response,final String error) throws IOException {
  protocol.send(OpCode.REPLY,() -> {
    protocol.sendVarint(requestId);
    protocol.sendBoolean(error == null);
    if (error == null) {
      protocol.sendBinary(response);
    }
 else {
      protocol.sendString(error);
    }
  }
);
}","public void reply(final long id,final byte[] response,final String error) throws IOException {
  protocol.send(OpCode.REPLY,() -> {
    protocol.sendVarint(id);
    protocol.sendBoolean(error == null);
    if (error == null) {
      protocol.sendBinary(response);
    }
 else {
      protocol.sendString(error);
    }
  }
);
}",0.972972972972973
86496,"public Connection(final int relayPort){
}","Connection(int port,@NotNull String clusterName,ServiceHandler handler) throws IOException {
  socket=new Socket(InetAddress.getLoopbackAddress(),port);
  protocol=new ProtocolBase(socket.getInputStream(),socket.getOutputStream());
  callbacks=new CallbackHandlerRegistry();
  broadcastTransfer=new BroadcastTransfer(protocol,callbacks);
  requestTransfer=new RequestTransfer(protocol,callbacks);
  replyTransfer=new ReplyTransfer(protocol,callbacks);
  publishTransfer=new PublishTransfer(protocol,callbacks);
  subscribeTransfer=new SubscribeTransfer(protocol,callbacks);
  tunnelTransfer=new TunnelTransfer(protocol,callbacks);
  init(clusterName);
  handleInit();
}",0.0422535211267605
86497,"private static void testConnection(TestConsumer testConsumer) throws Exception {
  try (final Connection connection=new Connection(IRIS_PORT,CLUSTER_NAME)){
    final Semaphore semaphore=new Semaphore(1);
    semaphore.acquire();
    testConsumer.accept(connection,semaphore);
    Assert.assertTrue(""String_Node_Str"",semaphore.tryAcquire(TIMEOUT_MILLIS,TimeUnit.MILLISECONDS));
  }
 catch (  IOException e) {
    Assert.fail(e.getMessage());
  }
}","private static void testConnection(TestConsumer testConsumer) throws Exception {
  try (final Connection connection=new Connection(IRIS_PORT)){
    final Semaphore semaphore=new Semaphore(1);
    semaphore.acquire();
    testConsumer.accept(connection,semaphore);
    Assert.assertTrue(""String_Node_Str"",semaphore.tryAcquire(TIMEOUT_MILLIS,TimeUnit.MILLISECONDS));
  }
 catch (  IOException e) {
    Assert.fail(e.getMessage());
  }
}",0.985244040862656
86498,"@Test public void handshakeIsWorking() throws Exception {
  try (final Connection ignored=new Connection(IRIS_PORT,CLUSTER_NAME)){
  }
 catch (  IOException e) {
    Assert.fail(e.getMessage());
  }
}","@Test public void handshakeIsWorking() throws Exception {
  try (final Connection ignored=new Connection(IRIS_PORT)){
  }
 catch (  IOException e) {
    Assert.fail(e.getMessage());
  }
}",0.96640826873385
86499,"/** 
 * 展开slideable view
 * @param mSlideOffset 定义展开slideable view到上面位置 值范围是0-1
 * @return
 */
public boolean expandPane(float mSlideOffset){
  if (!isPaneVisible()) {
    showPane();
  }
  return expandPane(mSlideableView,0,mSlideOffset);
}","/** 
 * 展开slideable view
 * @param mSlideOffset 定义展开slideable view到上面位置 值范围是0-1
 * @return
 */
public boolean expandPane(float mSlideOffset){
  if (mSlideState == SlideState.EXPANDED)   return false;
  mSlideableView.setVisibility(View.VISIBLE);
  if (!isPaneVisible()) {
    showPane();
  }
  return expandPane(mSlideableView,0,mSlideOffset);
}",0.8225255972696246
86500,"@Override protected boolean drawChild(Canvas canvas,View child,long drawingTime){
  final LayoutParams lp=(LayoutParams)child.getLayoutParams();
  boolean result;
  final int save=canvas.save(Canvas.CLIP_SAVE_FLAG);
  boolean drawScrim=false;
  if (mCanSlide && !lp.slideable && mSlideableView != null) {
    if (!mOverlayContent) {
      canvas.getClipBounds(mTmpRect);
      if (mIsSlidingUp) {
        mTmpRect.bottom=Math.min(mTmpRect.bottom,mSlideableView.getTop());
      }
 else {
        mTmpRect.top=Math.max(mTmpRect.top,mSlideableView.getBottom());
      }
      canvas.clipRect(mTmpRect);
    }
    if (mSlideOffset < 1) {
      drawScrim=true;
    }
  }
  result=super.drawChild(canvas,child,drawingTime);
  canvas.restoreToCount(save);
  if (drawScrim) {
    final int baseAlpha=(mCoveredFadeColor & 0xff000000) >>> 24;
    final int imag=(int)(baseAlpha * (1 - mSlideOffset));
    final int color=imag << 24 | (mCoveredFadeColor & 0xffffff);
    mCoveredFadePaint.setColor(color);
    canvas.drawRect(mTmpRect,mCoveredFadePaint);
  }
  return result;
}","@Override protected boolean drawChild(Canvas canvas,View child,long drawingTime){
  final LayoutParams lp=(LayoutParams)child.getLayoutParams();
  boolean result;
  final int save=canvas.save(Canvas.CLIP_SAVE_FLAG);
  boolean drawScrim=false;
  if (mCanSlide && !lp.slideable && mSlideableView != null) {
    if (!mOverlayContent) {
      canvas.getClipBounds(mTmpRect);
      if (mIsSlidingUp) {
        mTmpRect.bottom=Math.min(mTmpRect.bottom,mSlideableView.getTop());
      }
 else {
        mTmpRect.top=Math.max(mTmpRect.top,mSlideableView.getBottom());
      }
      canvas.clipRect(mTmpRect);
    }
    if (mSlideOffset < 1) {
      drawScrim=true;
    }
  }
  result=super.drawChild(canvas,child,drawingTime);
  canvas.restoreToCount(save);
  if (drawScrim && mCoveredFadeColor != 0) {
    final int baseAlpha=(mCoveredFadeColor & 0xff000000) >>> 24;
    final int imag=(int)(baseAlpha * (1 - mSlideOffset));
    final int color=imag << 24 | (mCoveredFadeColor & 0xffffff);
    mCoveredFadePaint.setColor(color);
    canvas.drawRect(mTmpRect,mCoveredFadePaint);
  }
  return result;
}",0.9879629629629628
86501,"private void launch(){
  SharedPreferences settings;
  settings=getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
  xbmcActivity=settings.getString(""String_Node_Str"",getString(R.string.xbmc_activity_default));
  Intent activityIntent;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
    activityIntent=Intent.makeMainActivity(ComponentName.unflattenFromString(xbmcActivity));
  }
 else {
    activityIntent=new Intent(Intent.ACTION_MAIN);
    activityIntent.setComponent(ComponentName.unflattenFromString(xbmcActivity));
    activityIntent.addCategory(Intent.CATEGORY_LAUNCHER);
  }
  try {
    startActivity(activityIntent);
    return;
  }
 catch (  ActivityNotFoundException e) {
    Log.d(TAG,""String_Node_Str"" + xbmcActivity + ""String_Node_Str"");
    Intent launchSettings=new Intent(this,LauncherSettingsActivity.class);
    startActivity(launchSettings);
  }
}","private void launch(){
  SharedPreferences settings;
  settings=getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
  xbmcActivity=settings.getString(""String_Node_Str"",getString(R.string.xbmc_activity_default));
  Intent activityIntent;
  activityIntent=new Intent(Intent.ACTION_MAIN);
  activityIntent.setComponent(ComponentName.unflattenFromString(xbmcActivity));
  activityIntent.addCategory(Intent.CATEGORY_HOME);
  try {
    startActivity(activityIntent);
    return;
  }
 catch (  ActivityNotFoundException e) {
    Log.d(TAG,""String_Node_Str"" + xbmcActivity + ""String_Node_Str"");
    Intent launchSettings=new Intent(this,LauncherSettingsActivity.class);
    startActivity(launchSettings);
  }
}",0.7952706907280647
86502,"public NeoProfile run(NeoProfiler parent){
  NodesProfile p=new NodesProfile();
  List<Object> labels=runQueryMultipleResult(parent,""String_Node_Str"",""String_Node_Str"");
  for (  Object l : labels) {
    parent.schedule(new LabelProfiler(""String_Node_Str"" + l));
  }
  p.addObservation(""String_Node_Str"",labels);
  p.addObservation(""String_Node_Str"",runQuerySingleResult(parent,""String_Node_Str"",""String_Node_Str""));
  return p;
}","public NeoProfile run(NeoProfiler parent){
  NodesProfile p=new NodesProfile();
  List<Object> labels=runQueryMultipleResult(parent,""String_Node_Str"",""String_Node_Str"");
  for (  Object l : labels) {
    String labelTxt=""String_Node_Str"" + l;
    if (labelTxt != null && !""String_Node_Str"".equals(labelTxt) && !""String_Node_Str"".equals(labelTxt))     parent.schedule(new LabelProfiler(""String_Node_Str"" + l));
  }
  p.addObservation(""String_Node_Str"",labels);
  p.addObservation(NeoProfile.OB_COUNT,runQuerySingleResult(parent,""String_Node_Str"",""String_Node_Str""));
  return p;
}",0.8186323092170465
86503,"/** 
 * This method will scan the dependencies in this project and return a fully resolved list. Note that while updating the   {@link Dependency} reference returned will be reflected in the Model as it is thesame object, if you wish to remove or add items to the Model then you must use  {@link #getModel()}
 * @param session MavenSessionHandler, used by {@link PropertyResolver}
 * @return a list of fully resolved {@link ProjectVersionRef} to the original {@link Dependency}
 * @throws ManipulationException if an error occurs
 */
public HashMap<ProjectVersionRef,Dependency> getResolvedDependencies(MavenSessionHandler session) throws ManipulationException {
  if (resolvedDependencies == null) {
    resolvedDependencies=new HashMap<>();
    resolveDeps(session,getModel().getDependencies(),resolvedDependencies);
  }
  return resolvedDependencies;
}","/** 
 * This method will scan the dependencies in this project and return a fully resolved list. Note that while updating the   {@link Dependency} reference returned will be reflected in the Model as it is thesame object, if you wish to remove or add items to the Model then you must use  {@link #getModel()}
 * @param session MavenSessionHandler, used by {@link PropertyResolver}
 * @return a list of fully resolved {@link ArtifactRef} to the original {@link Dependency}
 * @throws ManipulationException if an error occurs
 */
public HashMap<ArtifactRef,Dependency> getResolvedDependencies(MavenSessionHandler session) throws ManipulationException {
  if (resolvedDependencies == null) {
    resolvedDependencies=new HashMap<>();
    resolveDeps(session,getModel().getDependencies(),resolvedDependencies);
  }
  return resolvedDependencies;
}",0.9740871613663132
86504,"/** 
 * This method will scan the dependencies in the dependencyManagement section of the potentially active Profiles in this project and return a fully resolved list. Note that while updating the   {@link Dependency}reference returned will be reflected in the Model as it is the same object, if you wish to remove or add items to the Model then you must use   {@link #getModel()}
 * @param session MavenSessionHandler, used by {@link PropertyResolver}
 * @return a list of fully resolved {@link ProjectVersionRef} to the original {@link Dependency} (that were within DependencyManagement)
 * @throws ManipulationException if an error occurs
 */
public HashMap<Profile,HashMap<ProjectVersionRef,Dependency>> getResolvedProfileManagedDependencies(MavenSessionHandler session) throws ManipulationException {
  if (resolvedProfileManagedDependencies == null) {
    resolvedProfileManagedDependencies=new HashMap<>();
    for (    final Profile profile : ProfileUtils.getProfiles(session,model)) {
      HashMap<ProjectVersionRef,Dependency> profileDeps=new HashMap<>();
      final DependencyManagement dm=profile.getDependencyManagement();
      if (!(dm == null || dm.getDependencies() == null)) {
        resolveDeps(session,dm.getDependencies(),profileDeps);
        resolvedProfileManagedDependencies.put(profile,profileDeps);
      }
    }
  }
  return resolvedProfileManagedDependencies;
}","/** 
 * This method will scan the dependencies in the dependencyManagement section of the potentially active Profiles in this project and return a fully resolved list. Note that while updating the   {@link Dependency}reference returned will be reflected in the Model as it is the same object, if you wish to remove or add items to the Model then you must use   {@link #getModel()}
 * @param session MavenSessionHandler, used by {@link PropertyResolver}
 * @return a list of fully resolved {@link ArtifactRef} to the original {@link Dependency} (that were within DependencyManagement)
 * @throws ManipulationException if an error occurs
 */
public HashMap<Profile,HashMap<ArtifactRef,Dependency>> getResolvedProfileManagedDependencies(MavenSessionHandler session) throws ManipulationException {
  if (resolvedProfileManagedDependencies == null) {
    resolvedProfileManagedDependencies=new HashMap<>();
    for (    final Profile profile : ProfileUtils.getProfiles(session,model)) {
      HashMap<ArtifactRef,Dependency> profileDeps=new HashMap<>();
      final DependencyManagement dm=profile.getDependencyManagement();
      if (!(dm == null || dm.getDependencies() == null)) {
        resolveDeps(session,dm.getDependencies(),profileDeps);
        resolvedProfileManagedDependencies.put(profile,profileDeps);
      }
    }
  }
  return resolvedProfileManagedDependencies;
}",0.976156069364162
86505,"private void resolveDeps(MavenSessionHandler session,List<Dependency> deps,HashMap<ProjectVersionRef,Dependency> resolvedDependencies) throws ManipulationException {
  for (  Dependency d : deps) {
    String g=PropertyResolver.resolveInheritedProperties(session,this,""String_Node_Str"".equals(d.getGroupId()) ? getGroupId() : d.getGroupId());
    String a=PropertyResolver.resolveInheritedProperties(session,this,""String_Node_Str"".equals(d.getArtifactId()) ? getArtifactId() : d.getArtifactId());
    String v=PropertyResolver.resolveInheritedProperties(session,this,""String_Node_Str"".equals(d.getVersion()) ? d.getVersion() : d.getVersion());
    if (isNotEmpty(g) && isNotEmpty(a) && isNotEmpty(v)) {
      resolvedDependencies.put(new SimpleProjectVersionRef(g,a,v),d);
    }
  }
}","private void resolveDeps(MavenSessionHandler session,List<Dependency> deps,HashMap<ArtifactRef,Dependency> resolvedDependencies) throws ManipulationException {
  for (  Dependency d : deps) {
    String g=PropertyResolver.resolveInheritedProperties(session,this,""String_Node_Str"".equals(d.getGroupId()) ? getGroupId() : d.getGroupId());
    String a=PropertyResolver.resolveInheritedProperties(session,this,""String_Node_Str"".equals(d.getArtifactId()) ? getArtifactId() : d.getArtifactId());
    String v=PropertyResolver.resolveInheritedProperties(session,this,""String_Node_Str"".equals(d.getVersion()) ? d.getVersion() : d.getVersion());
    if (isNotEmpty(g) && isNotEmpty(a) && isNotEmpty(v)) {
      Dependency old=resolvedDependencies.put(new SimpleArtifactRef(g,a,v,d.getType(),d.getClassifier()),d);
      if (old != null) {
        logger.error(""String_Node_Str"",old.toString());
      }
    }
  }
}",0.8852071005917159
86506,"/** 
 * This method will scan the dependencies in the potentially active Profiles in this project and return a fully resolved list. Note that while updating the   {@link Dependency} reference returnedwill be reflected in the Model as it is the same object, if you wish to remove or add items to the Model then you must use  {@link #getModel()}
 * @param session MavenSessionHandler, used by {@link PropertyResolver}
 * @return a list of fully resolved {@link ProjectVersionRef} to the original {@link Dependency}
 * @throws ManipulationException if an error occurs
 */
public HashMap<Profile,HashMap<ProjectVersionRef,Dependency>> getResolvedProfileDependencies(MavenSessionHandler session) throws ManipulationException {
  if (resolvedProfileDependencies == null) {
    resolvedProfileDependencies=new HashMap<>();
    for (    final Profile profile : ProfileUtils.getProfiles(session,model)) {
      HashMap<ProjectVersionRef,Dependency> profileDeps=new HashMap<>();
      resolveDeps(session,profile.getDependencies(),profileDeps);
      resolvedProfileDependencies.put(profile,profileDeps);
    }
  }
  return resolvedProfileDependencies;
}","/** 
 * This method will scan the dependencies in the potentially active Profiles in this project and return a fully resolved list. Note that while updating the   {@link Dependency} reference returnedwill be reflected in the Model as it is the same object, if you wish to remove or add items to the Model then you must use  {@link #getModel()}
 * @param session MavenSessionHandler, used by {@link PropertyResolver}
 * @return a list of fully resolved {@link ArtifactRef} to the original {@link Dependency}
 * @throws ManipulationException if an error occurs
 */
public HashMap<Profile,HashMap<ArtifactRef,Dependency>> getResolvedProfileDependencies(MavenSessionHandler session) throws ManipulationException {
  if (resolvedProfileDependencies == null) {
    resolvedProfileDependencies=new HashMap<>();
    for (    final Profile profile : ProfileUtils.getProfiles(session,model)) {
      HashMap<ArtifactRef,Dependency> profileDeps=new HashMap<>();
      resolveDeps(session,profile.getDependencies(),profileDeps);
      resolvedProfileDependencies.put(profile,profileDeps);
    }
  }
  return resolvedProfileDependencies;
}",0.9709251101321584
86507,"/** 
 * This method will scan the dependencies in the dependencyManagement section of this project and return a fully resolved list. Note that while updating the   {@link Dependency} reference returned will be reflectedin the Model as it is the same object, if you wish to remove or add items to the Model then you must use  {@link #getModel()}
 * @param session MavenSessionHandler, used by {@link PropertyResolver}
 * @return a list of fully resolved {@link ProjectVersionRef} to the original {@link Dependency} (that were within DependencyManagement)
 * @throws ManipulationException if an error occurs
 */
public HashMap<ProjectVersionRef,Dependency> getResolvedManagedDependencies(MavenSessionHandler session) throws ManipulationException {
  if (resolvedManagedDependencies == null) {
    resolvedManagedDependencies=new HashMap<>();
    final DependencyManagement dm=getModel().getDependencyManagement();
    if (!(dm == null || dm.getDependencies() == null)) {
      resolveDeps(session,dm.getDependencies(),resolvedManagedDependencies);
    }
  }
  return resolvedManagedDependencies;
}","/** 
 * This method will scan the dependencies in the dependencyManagement section of this project and return a fully resolved list. Note that while updating the   {@link Dependency} reference returned will be reflectedin the Model as it is the same object, if you wish to remove or add items to the Model then you must use  {@link #getModel()}
 * @param session MavenSessionHandler, used by {@link PropertyResolver}
 * @return a list of fully resolved {@link ArtifactRef} to the original {@link Dependency} (that were within DependencyManagement)
 * @throws ManipulationException if an error occurs
 */
public HashMap<ArtifactRef,Dependency> getResolvedManagedDependencies(MavenSessionHandler session) throws ManipulationException {
  if (resolvedManagedDependencies == null) {
    resolvedManagedDependencies=new HashMap<>();
    final DependencyManagement dm=getModel().getDependencyManagement();
    if (!(dm == null || dm.getDependencies() == null)) {
      resolveDeps(session,dm.getDependencies(),resolvedManagedDependencies);
    }
  }
  return resolvedManagedDependencies;
}",0.9797979797979798
86508,"private void resolvePlugins(MavenSessionHandler session,List<Plugin> plugins,HashMap<ProjectVersionRef,Plugin> resolvedPlugins) throws ManipulationException {
  for (  Plugin p : plugins) {
    String g=PropertyResolver.resolveInheritedProperties(session,this,""String_Node_Str"".equals(p.getGroupId()) ? getGroupId() : p.getGroupId());
    String a=PropertyResolver.resolveInheritedProperties(session,this,""String_Node_Str"".equals(p.getArtifactId()) ? getArtifactId() : p.getArtifactId());
    String v=PropertyResolver.resolveInheritedProperties(session,this,""String_Node_Str"".equals(p.getVersion()) ? p.getVersion() : p.getVersion());
    if (isEmpty(g)) {
      g=PLUGIN_DEFAULTS.getDefaultGroupId(a);
    }
    if (isNotEmpty(g) && isNotEmpty(a) && isNotEmpty(v)) {
      resolvedPlugins.put(new SimpleProjectVersionRef(g,a,v),p);
    }
  }
}","private void resolvePlugins(MavenSessionHandler session,List<Plugin> plugins,HashMap<ProjectVersionRef,Plugin> resolvedPlugins) throws ManipulationException {
  for (  Plugin p : plugins) {
    String g=PropertyResolver.resolveInheritedProperties(session,this,""String_Node_Str"".equals(p.getGroupId()) ? getGroupId() : p.getGroupId());
    String a=PropertyResolver.resolveInheritedProperties(session,this,""String_Node_Str"".equals(p.getArtifactId()) ? getArtifactId() : p.getArtifactId());
    String v=PropertyResolver.resolveInheritedProperties(session,this,""String_Node_Str"".equals(p.getVersion()) ? p.getVersion() : p.getVersion());
    if (isEmpty(g)) {
      g=PLUGIN_DEFAULTS.getDefaultGroupId(a);
    }
    if (isNotEmpty(g) && isNotEmpty(a) && isNotEmpty(v)) {
      Plugin old=resolvedPlugins.put(new SimpleProjectVersionRef(g,a,v),p);
      if (old != null) {
        logger.error(""String_Node_Str"",old.toString());
      }
    }
  }
}",0.9441340782122905
86509,"/** 
 * Applies dependency overrides to the project.
 */
private void apply(final Project project,final Model model,final Map<ArtifactRef,String> overrides) throws ManipulationException {
  final WildcardMap<String> explicitOverrides=new WildcardMap<>();
  final String projectGA=ga(project);
  final DependencyState dependencyState=session.getState(DependencyState.class);
  final CommonState commonState=session.getState(CommonState.class);
  logger.info(""String_Node_Str"",projectGA);
  Map<ArtifactRef,String> moduleOverrides=new LinkedHashMap<>(overrides);
  moduleOverrides=removeReactorGAs(moduleOverrides);
  try {
    moduleOverrides=applyModuleVersionOverrides(projectGA,dependencyState.getDependencyExclusions(),moduleOverrides,explicitOverrides);
    logger.debug(""String_Node_Str"",moduleOverrides);
    logger.debug(""String_Node_Str"",explicitOverrides);
  }
 catch (  InvalidRefException e) {
    logger.error(""String_Node_Str"",moduleOverrides,explicitOverrides);
    throw e;
  }
  if (project.isInheritanceRoot()) {
    if (project.getModelParent() != null) {
      for (      Map.Entry<ArtifactRef,String> entry : moduleOverrides.entrySet()) {
        String oldValue=project.getModelParent().getVersion();
        String newValue=entry.getValue();
        if (entry.getKey().asProjectRef().equals(SimpleProjectRef.parse(ga(project.getModelParent())))) {
          if (commonState.getStrict()) {
            if (!PropertiesUtils.checkStrictValue(session,oldValue,newValue)) {
              if (commonState.getFailOnStrictViolation()) {
                throw new ManipulationException(""String_Node_Str"",ga(project.getModelParent()),newValue,oldValue);
              }
 else {
                logger.warn(""String_Node_Str"",ga(project.getModelParent()),newValue,oldValue);
                continue;
              }
            }
          }
          logger.debug(""String_Node_Str"",model.getParent().getVersion(),newValue,ga(project.getModelParent()));
          model.getParent().setVersion(newValue);
          break;
        }
      }
      HashMap<ProjectVersionRef,Dependency> pDepMap=new HashMap<>();
      Dependency d=new Dependency();
      d.setGroupId(project.getModelParent().getGroupId());
      d.setArtifactId(project.getModelParent().getArtifactId());
      d.setVersion(project.getModelParent().getVersion());
      pDepMap.put(SimpleProjectVersionRef.parse(d.getManagementKey()),d);
      applyExplicitOverrides(project,pDepMap,explicitOverrides,commonState,explicitVersionPropertyUpdateMap);
      project.getModelParent().setVersion(d.getVersion());
    }
    if (session.getState(DependencyState.class).getOverrideDependencies()) {
      logger.debug(""String_Node_Str"",projectGA);
      final Map<ArtifactRef,String> nonMatchingVersionOverrides=applyOverrides(project,project.getResolvedManagedDependencies(session),explicitOverrides,moduleOverrides);
      final Map<ArtifactRef,String> matchedOverrides=new LinkedHashMap<>(moduleOverrides);
      matchedOverrides.keySet().removeAll(nonMatchingVersionOverrides.keySet());
      applyExplicitOverrides(project,project.getResolvedManagedDependencies(session),explicitOverrides,commonState,explicitVersionPropertyUpdateMap);
      if (commonState.getOverrideTransitive()) {
        final List<Dependency> extraDeps=new ArrayList<>();
        for (        final ArtifactRef var : overrides.keySet()) {
          if (!nonMatchingVersionOverrides.containsKey(var)) {
            continue;
          }
          final Dependency newDependency=new Dependency();
          newDependency.setGroupId(var.getGroupId());
          newDependency.setArtifactId(var.getArtifactId());
          newDependency.setType(var.getType());
          newDependency.setClassifier(var.getClassifier());
          final String artifactVersion=moduleOverrides.get(var);
          newDependency.setVersion(artifactVersion);
          extraDeps.add(newDependency);
          logger.debug(""String_Node_Str"",var,artifactVersion);
        }
        DependencyManagement dependencyManagement=model.getDependencyManagement();
        if (extraDeps.size() > 0) {
          if (dependencyManagement == null) {
            dependencyManagement=new DependencyManagement();
            model.setDependencyManagement(dependencyManagement);
            logger.debug(""String_Node_Str"");
          }
          dependencyManagement.getDependencies().addAll(0,extraDeps);
        }
      }
 else {
        logger.debug(""String_Node_Str"");
      }
    }
 else {
      logger.debug(""String_Node_Str"",projectGA);
    }
  }
 else {
    if (session.getState(DependencyState.class).getOverrideDependencies()) {
      logger.debug(""String_Node_Str"",projectGA);
      applyOverrides(project,project.getResolvedManagedDependencies(session),explicitOverrides,moduleOverrides);
      applyExplicitOverrides(project,project.getResolvedManagedDependencies(session),explicitOverrides,commonState,explicitVersionPropertyUpdateMap);
    }
 else {
      logger.debug(""String_Node_Str"",projectGA);
    }
  }
  if (session.getState(DependencyState.class).getOverrideDependencies()) {
    logger.debug(""String_Node_Str"",projectGA);
    applyOverrides(project,project.getResolvedDependencies(session),explicitOverrides,moduleOverrides);
    applyExplicitOverrides(project,project.getResolvedDependencies(session),explicitOverrides,commonState,explicitVersionPropertyUpdateMap);
    final HashMap<Profile,HashMap<ProjectVersionRef,Dependency>> pd=project.getResolvedProfileDependencies(session);
    final HashMap<Profile,HashMap<ProjectVersionRef,Dependency>> pmd=project.getResolvedProfileManagedDependencies(session);
    for (    Profile p : pd.keySet()) {
      applyOverrides(project,pd.get(p),explicitOverrides,moduleOverrides);
      applyExplicitOverrides(project,pd.get(p),explicitOverrides,commonState,explicitVersionPropertyUpdateMap);
    }
    for (    Profile p : pmd.keySet()) {
      applyOverrides(project,pmd.get(p),explicitOverrides,moduleOverrides);
      applyExplicitOverrides(project,pmd.get(p),explicitOverrides,commonState,explicitVersionPropertyUpdateMap);
    }
  }
 else {
    logger.debug(""String_Node_Str"",projectGA);
  }
}","/** 
 * Applies dependency overrides to the project.
 */
private void apply(final Project project,final Model model,final Map<ArtifactRef,String> overrides) throws ManipulationException {
  final WildcardMap<String> explicitOverrides=new WildcardMap<>();
  final String projectGA=ga(project);
  final DependencyState dependencyState=session.getState(DependencyState.class);
  final CommonState commonState=session.getState(CommonState.class);
  logger.info(""String_Node_Str"",projectGA);
  Map<ArtifactRef,String> moduleOverrides=new LinkedHashMap<>(overrides);
  moduleOverrides=removeReactorGAs(moduleOverrides);
  try {
    moduleOverrides=applyModuleVersionOverrides(projectGA,dependencyState.getDependencyExclusions(),moduleOverrides,explicitOverrides);
    logger.debug(""String_Node_Str"",moduleOverrides);
    logger.debug(""String_Node_Str"",explicitOverrides);
  }
 catch (  InvalidRefException e) {
    logger.error(""String_Node_Str"",moduleOverrides,explicitOverrides);
    throw e;
  }
  if (project.isInheritanceRoot()) {
    if (project.getModelParent() != null) {
      for (      Map.Entry<ArtifactRef,String> entry : moduleOverrides.entrySet()) {
        String oldValue=project.getModelParent().getVersion();
        String newValue=entry.getValue();
        if (entry.getKey().asProjectRef().equals(SimpleProjectRef.parse(ga(project.getModelParent())))) {
          if (commonState.getStrict()) {
            if (!PropertiesUtils.checkStrictValue(session,oldValue,newValue)) {
              if (commonState.getFailOnStrictViolation()) {
                throw new ManipulationException(""String_Node_Str"",ga(project.getModelParent()),newValue,oldValue);
              }
 else {
                logger.warn(""String_Node_Str"",ga(project.getModelParent()),newValue,oldValue);
                continue;
              }
            }
          }
          logger.debug(""String_Node_Str"",model.getParent().getVersion(),newValue,ga(project.getModelParent()));
          model.getParent().setVersion(newValue);
          break;
        }
      }
      HashMap<ArtifactRef,Dependency> pDepMap=new HashMap<>();
      Dependency d=new Dependency();
      d.setGroupId(project.getModelParent().getGroupId());
      d.setArtifactId(project.getModelParent().getArtifactId());
      d.setVersion(project.getModelParent().getVersion());
      pDepMap.put(SimpleArtifactRef.parse(d.getManagementKey()),d);
      applyExplicitOverrides(project,pDepMap,explicitOverrides,commonState,explicitVersionPropertyUpdateMap);
      project.getModelParent().setVersion(d.getVersion());
    }
    if (session.getState(DependencyState.class).getOverrideDependencies()) {
      logger.debug(""String_Node_Str"",projectGA);
      final Map<ArtifactRef,String> nonMatchingVersionOverrides=applyOverrides(project,project.getResolvedManagedDependencies(session),explicitOverrides,moduleOverrides);
      final Map<ArtifactRef,String> matchedOverrides=new LinkedHashMap<>(moduleOverrides);
      matchedOverrides.keySet().removeAll(nonMatchingVersionOverrides.keySet());
      applyExplicitOverrides(project,project.getResolvedManagedDependencies(session),explicitOverrides,commonState,explicitVersionPropertyUpdateMap);
      if (commonState.getOverrideTransitive()) {
        final List<Dependency> extraDeps=new ArrayList<>();
        for (        final ArtifactRef var : overrides.keySet()) {
          if (!nonMatchingVersionOverrides.containsKey(var)) {
            continue;
          }
          final Dependency newDependency=new Dependency();
          newDependency.setGroupId(var.getGroupId());
          newDependency.setArtifactId(var.getArtifactId());
          newDependency.setType(var.getType());
          newDependency.setClassifier(var.getClassifier());
          final String artifactVersion=moduleOverrides.get(var);
          newDependency.setVersion(artifactVersion);
          extraDeps.add(newDependency);
          logger.debug(""String_Node_Str"",var,artifactVersion);
        }
        DependencyManagement dependencyManagement=model.getDependencyManagement();
        if (extraDeps.size() > 0) {
          if (dependencyManagement == null) {
            dependencyManagement=new DependencyManagement();
            model.setDependencyManagement(dependencyManagement);
            logger.debug(""String_Node_Str"");
          }
          dependencyManagement.getDependencies().addAll(0,extraDeps);
        }
      }
 else {
        logger.debug(""String_Node_Str"");
      }
    }
 else {
      logger.debug(""String_Node_Str"",projectGA);
    }
  }
 else {
    if (session.getState(DependencyState.class).getOverrideDependencies()) {
      logger.debug(""String_Node_Str"",projectGA);
      applyOverrides(project,project.getResolvedManagedDependencies(session),explicitOverrides,moduleOverrides);
      applyExplicitOverrides(project,project.getResolvedManagedDependencies(session),explicitOverrides,commonState,explicitVersionPropertyUpdateMap);
    }
 else {
      logger.debug(""String_Node_Str"",projectGA);
    }
  }
  if (session.getState(DependencyState.class).getOverrideDependencies()) {
    logger.debug(""String_Node_Str"",projectGA);
    applyOverrides(project,project.getResolvedDependencies(session),explicitOverrides,moduleOverrides);
    applyExplicitOverrides(project,project.getResolvedDependencies(session),explicitOverrides,commonState,explicitVersionPropertyUpdateMap);
    final HashMap<Profile,HashMap<ArtifactRef,Dependency>> pd=project.getResolvedProfileDependencies(session);
    final HashMap<Profile,HashMap<ArtifactRef,Dependency>> pmd=project.getResolvedProfileManagedDependencies(session);
    for (    Profile p : pd.keySet()) {
      applyOverrides(project,pd.get(p),explicitOverrides,moduleOverrides);
      applyExplicitOverrides(project,pd.get(p),explicitOverrides,commonState,explicitVersionPropertyUpdateMap);
    }
    for (    Profile p : pmd.keySet()) {
      applyOverrides(project,pmd.get(p),explicitOverrides,moduleOverrides);
      applyExplicitOverrides(project,pmd.get(p),explicitOverrides,commonState,explicitVersionPropertyUpdateMap);
    }
  }
 else {
    logger.debug(""String_Node_Str"",projectGA);
  }
}",0.9928548229944788
86510,"/** 
 * Apply explicit overrides to a set of dependencies from a project. The explicit overrides come from dependencyExclusion. However they have to be separated out from standard overrides so we can easily ignore any property references (and overwrite them).
 * @param project the current Project
 * @param dependencies dependencies to check
 * @param explicitOverrides a custom map to handle wildcard overrides
 * @param state the CommonState, to retrieve Common Properties
 * @param versionPropertyUpdateMap properties to update
 * @throws ManipulationException if an error occurs
 */
private void applyExplicitOverrides(final Project project,final HashMap<ProjectVersionRef,Dependency> dependencies,final WildcardMap<String> explicitOverrides,final CommonState state,final Map<Project,Map<String,String>> versionPropertyUpdateMap) throws ManipulationException {
  for (  final ProjectVersionRef dependency : dependencies.keySet()) {
    final ProjectRef groupIdArtifactId=new SimpleProjectRef(dependency.getGroupId(),dependency.getArtifactId());
    if (explicitOverrides.containsKey(groupIdArtifactId)) {
      final String overrideVersion=explicitOverrides.get(groupIdArtifactId);
      final String oldVersion=dependencies.get(dependency).getVersion();
      if (isEmpty(overrideVersion) || isEmpty(oldVersion)) {
        if (isEmpty(oldVersion)) {
          logger.debug(""String_Node_Str"" + groupIdArtifactId + ""String_Node_Str"");
        }
 else {
          logger.warn(""String_Node_Str"" + groupIdArtifactId + ""String_Node_Str"");
        }
      }
 else {
        for (        String target : overrideVersion.split(""String_Node_Str"")) {
          if (target.startsWith(""String_Node_Str"")) {
            logger.info(""String_Node_Str"",target.substring(1),dependency);
            Exclusion e=new Exclusion();
            e.setGroupId(target.substring(1).split(""String_Node_Str"")[0]);
            e.setArtifactId(target.split(""String_Node_Str"")[1]);
            dependencies.get(dependency).addExclusion(e);
          }
 else {
            logger.info(""String_Node_Str"",groupIdArtifactId,target);
            if (!PropertiesUtils.cacheProperty(project,state,versionPropertyUpdateMap,oldVersion,target,dependency,true)) {
              if (oldVersion.contains(""String_Node_Str"")) {
                logger.warn(""String_Node_Str"",target,oldVersion);
              }
              dependencies.get(dependency).setVersion(target);
            }
          }
        }
      }
    }
  }
}","/** 
 * Apply explicit overrides to a set of dependencies from a project. The explicit overrides come from dependencyExclusion. However they have to be separated out from standard overrides so we can easily ignore any property references (and overwrite them).
 * @param project the current Project
 * @param dependencies dependencies to check
 * @param explicitOverrides a custom map to handle wildcard overrides
 * @param state the CommonState, to retrieve Common Properties
 * @param versionPropertyUpdateMap properties to update
 * @throws ManipulationException if an error occurs
 */
private void applyExplicitOverrides(final Project project,final HashMap<ArtifactRef,Dependency> dependencies,final WildcardMap<String> explicitOverrides,final CommonState state,final Map<Project,Map<String,String>> versionPropertyUpdateMap) throws ManipulationException {
  for (  final ProjectVersionRef dependency : dependencies.keySet()) {
    final ProjectRef groupIdArtifactId=new SimpleProjectRef(dependency.getGroupId(),dependency.getArtifactId());
    if (explicitOverrides.containsKey(groupIdArtifactId)) {
      final String overrideVersion=explicitOverrides.get(groupIdArtifactId);
      final String oldVersion=dependencies.get(dependency).getVersion();
      if (isEmpty(overrideVersion) || isEmpty(oldVersion)) {
        if (isEmpty(oldVersion)) {
          logger.debug(""String_Node_Str"" + groupIdArtifactId + ""String_Node_Str"");
        }
 else {
          logger.warn(""String_Node_Str"" + groupIdArtifactId + ""String_Node_Str"");
        }
      }
 else {
        for (        String target : overrideVersion.split(""String_Node_Str"")) {
          if (target.startsWith(""String_Node_Str"")) {
            logger.info(""String_Node_Str"",target.substring(1),dependency);
            Exclusion e=new Exclusion();
            e.setGroupId(target.substring(1).split(""String_Node_Str"")[0]);
            e.setArtifactId(target.split(""String_Node_Str"")[1]);
            dependencies.get(dependency).addExclusion(e);
          }
 else {
            logger.info(""String_Node_Str"",groupIdArtifactId,target);
            if (!PropertiesUtils.cacheProperty(project,state,versionPropertyUpdateMap,oldVersion,target,dependency,true)) {
              if (oldVersion.contains(""String_Node_Str"")) {
                logger.warn(""String_Node_Str"",target,oldVersion);
              }
              dependencies.get(dependency).setVersion(target);
            }
          }
        }
      }
    }
  }
}",0.9955716586151367
86511,"/** 
 * Apply a set of version overrides to a list of dependencies. Return a set of the overrides which were not applied.
 * @param project The current Project
 * @param dependencies The list of dependencies
 * @param explicitOverrides Any explicitOverrides to track for ignoring
 * @param overrides The map of dependency version overrides
 * @return The map of overrides that were not matched in the dependencies
 * @throws ManipulationException if an error occurs
 */
private Map<ArtifactRef,String> applyOverrides(final Project project,final HashMap<ProjectVersionRef,Dependency> dependencies,final WildcardMap<String> explicitOverrides,final Map<ArtifactRef,String> overrides) throws ManipulationException {
  final Map<ArtifactRef,String> unmatchedVersionOverrides=new LinkedHashMap<>();
  unmatchedVersionOverrides.putAll(overrides);
  if (dependencies == null || dependencies.size() == 0) {
    return unmatchedVersionOverrides;
  }
  final CommonState commonState=session.getState(CommonState.class);
  final boolean strict=commonState.getStrict();
  for (  final ProjectVersionRef dependency : dependencies.keySet()) {
    ProjectRef depPr=new SimpleProjectRef(dependency.getGroupId(),dependency.getArtifactId());
    for (    final Map.Entry<ArtifactRef,String> entry : overrides.entrySet()) {
      ProjectRef groupIdArtifactId=entry.getKey().asProjectRef();
      if (depPr.equals(groupIdArtifactId)) {
        final String oldVersion=dependencies.get(dependency).getVersion();
        final String overrideVersion=entry.getValue();
        final String resolvedValue=dependency.getVersionString();
        if (isEmpty(overrideVersion)) {
          logger.warn(""String_Node_Str"" + groupIdArtifactId + ""String_Node_Str"");
        }
 else         if (isEmpty(oldVersion)) {
          logger.debug(""String_Node_Str"" + groupIdArtifactId + ""String_Node_Str"");
        }
 else         if (explicitOverrides.containsKey(depPr)) {
          logger.debug(""String_Node_Str"",depPr);
          unmatchedVersionOverrides.remove(entry.getKey());
        }
 else         if (strict && oldVersion.contains(""String_Node_Str"") && !PropertiesUtils.checkStrictValue(session,resolvedValue,overrideVersion)) {
          logger.debug(""String_Node_Str"",resolvedValue,dependency,entry.getKey(),overrideVersion);
          if (commonState.getFailOnStrictViolation()) {
            throw new ManipulationException(""String_Node_Str"",depPr.toString(),dependencies.get(dependency).getVersion(),resolvedValue,entry.getKey().getVersionString(),entry.getKey().asProjectRef().toString());
          }
 else {
            logger.warn(""String_Node_Str"",resolvedValue,overrideVersion,dependencies.get(dependency).getVersion());
          }
        }
 else {
          if (!oldVersion.equals(""String_Node_Str"")) {
            logger.info(""String_Node_Str"",overrideVersion,dependency,project.getPom());
          }
          if (!PropertiesUtils.cacheProperty(project,commonState,versionPropertyUpdateMap,oldVersion,overrideVersion,entry.getKey(),false)) {
            if (oldVersion.equals(""String_Node_Str"")) {
              logger.debug(""String_Node_Str"",groupIdArtifactId,oldVersion,overrideVersion);
            }
 else             if (strict && !PropertiesUtils.checkStrictValue(session,resolvedValue,overrideVersion)) {
              if (commonState.getFailOnStrictViolation()) {
                throw new ManipulationException(""String_Node_Str"",oldVersion,groupIdArtifactId.toString(),overrideVersion);
              }
 else {
                logger.warn(""String_Node_Str"",oldVersion,groupIdArtifactId,overrideVersion);
              }
            }
 else {
              logger.debug(""String_Node_Str"",groupIdArtifactId,oldVersion,overrideVersion);
              if (oldVersion.contains(""String_Node_Str"")) {
                String suffix=PropertiesUtils.getSuffix(session);
                String replaceVersion;
                if (commonState.getStrictIgnoreSuffix() && oldVersion.contains(suffix)) {
                  replaceVersion=StringUtils.substringBefore(oldVersion,suffix);
                  replaceVersion+=suffix + StringUtils.substringAfter(overrideVersion,suffix);
                }
 else {
                  replaceVersion=oldVersion + StringUtils.removeStart(overrideVersion,resolvedValue);
                }
                logger.debug(""String_Node_Str"",resolvedValue,replaceVersion);
                dependencies.get(dependency).setVersion(replaceVersion);
              }
 else {
                dependencies.get(dependency).setVersion(overrideVersion);
              }
            }
          }
          unmatchedVersionOverrides.remove(entry.getKey());
        }
      }
    }
  }
  return unmatchedVersionOverrides;
}","/** 
 * Apply a set of version overrides to a list of dependencies. Return a set of the overrides which were not applied.
 * @param project The current Project
 * @param dependencies The list of dependencies
 * @param explicitOverrides Any explicitOverrides to track for ignoring
 * @param overrides The map of dependency version overrides
 * @return The map of overrides that were not matched in the dependencies
 * @throws ManipulationException if an error occurs
 */
private Map<ArtifactRef,String> applyOverrides(final Project project,final HashMap<ArtifactRef,Dependency> dependencies,final WildcardMap<String> explicitOverrides,final Map<ArtifactRef,String> overrides) throws ManipulationException {
  final Map<ArtifactRef,String> unmatchedVersionOverrides=new LinkedHashMap<>();
  unmatchedVersionOverrides.putAll(overrides);
  if (dependencies == null || dependencies.size() == 0) {
    return unmatchedVersionOverrides;
  }
  final CommonState commonState=session.getState(CommonState.class);
  final boolean strict=commonState.getStrict();
  for (  final ProjectVersionRef dependency : dependencies.keySet()) {
    ProjectRef depPr=new SimpleProjectRef(dependency.getGroupId(),dependency.getArtifactId());
    for (    final Map.Entry<ArtifactRef,String> entry : overrides.entrySet()) {
      ProjectRef groupIdArtifactId=entry.getKey().asProjectRef();
      if (depPr.equals(groupIdArtifactId)) {
        final String oldVersion=dependencies.get(dependency).getVersion();
        final String overrideVersion=entry.getValue();
        final String resolvedValue=dependency.getVersionString();
        if (isEmpty(overrideVersion)) {
          logger.warn(""String_Node_Str"" + groupIdArtifactId + ""String_Node_Str"");
        }
 else         if (isEmpty(oldVersion)) {
          logger.debug(""String_Node_Str"" + groupIdArtifactId + ""String_Node_Str"");
        }
 else         if (explicitOverrides.containsKey(depPr)) {
          logger.debug(""String_Node_Str"",depPr);
          unmatchedVersionOverrides.remove(entry.getKey());
        }
 else         if (strict && oldVersion.contains(""String_Node_Str"") && !PropertiesUtils.checkStrictValue(session,resolvedValue,overrideVersion)) {
          logger.debug(""String_Node_Str"",resolvedValue,dependency,entry.getKey(),overrideVersion);
          if (commonState.getFailOnStrictViolation()) {
            throw new ManipulationException(""String_Node_Str"",depPr.toString(),dependencies.get(dependency).getVersion(),resolvedValue,entry.getKey().getVersionString(),entry.getKey().asProjectRef().toString());
          }
 else {
            logger.warn(""String_Node_Str"",resolvedValue,overrideVersion,dependencies.get(dependency).getVersion());
          }
        }
 else {
          if (!oldVersion.equals(""String_Node_Str"")) {
            logger.info(""String_Node_Str"",overrideVersion,dependency,project.getPom());
          }
          if (!PropertiesUtils.cacheProperty(project,commonState,versionPropertyUpdateMap,oldVersion,overrideVersion,entry.getKey(),false)) {
            if (oldVersion.equals(""String_Node_Str"")) {
              logger.debug(""String_Node_Str"",groupIdArtifactId,oldVersion,overrideVersion);
            }
 else             if (strict && !PropertiesUtils.checkStrictValue(session,resolvedValue,overrideVersion)) {
              if (commonState.getFailOnStrictViolation()) {
                throw new ManipulationException(""String_Node_Str"",oldVersion,groupIdArtifactId.toString(),overrideVersion);
              }
 else {
                logger.warn(""String_Node_Str"",oldVersion,groupIdArtifactId,overrideVersion);
              }
            }
 else {
              logger.debug(""String_Node_Str"",groupIdArtifactId,oldVersion,overrideVersion);
              if (oldVersion.contains(""String_Node_Str"")) {
                String suffix=PropertiesUtils.getSuffix(session);
                String replaceVersion;
                if (commonState.getStrictIgnoreSuffix() && oldVersion.contains(suffix)) {
                  replaceVersion=StringUtils.substringBefore(oldVersion,suffix);
                  replaceVersion+=suffix + StringUtils.substringAfter(overrideVersion,suffix);
                }
 else {
                  replaceVersion=oldVersion + StringUtils.removeStart(overrideVersion,resolvedValue);
                }
                logger.debug(""String_Node_Str"",resolvedValue,replaceVersion);
                dependencies.get(dependency).setVersion(replaceVersion);
              }
 else {
                dependencies.get(dependency).setVersion(overrideVersion);
              }
            }
          }
          unmatchedVersionOverrides.remove(entry.getKey());
        }
      }
    }
  }
  return unmatchedVersionOverrides;
}",0.997669985172633
86512,"private boolean apply(final Project project,final Model model) throws ManipulationException {
  final DependencyRemovalState state=session.getState(DependencyRemovalState.class);
  logger.info(""String_Node_Str"" + ga(project));
  List<ProjectRef> dependenciesToRemove=state.getDependencyRemoval();
  boolean result=scanDependencies(project.getResolvedDependencies(session),dependenciesToRemove,model.getDependencies());
  if (model.getDependencyManagement() != null && scanDependencies(project.getResolvedManagedDependencies(session),dependenciesToRemove,model.getDependencyManagement().getDependencies())) {
    result=true;
  }
  final HashMap<Profile,HashMap<ProjectVersionRef,Dependency>> pd=project.getResolvedProfileDependencies(session);
  final HashMap<Profile,HashMap<ProjectVersionRef,Dependency>> pmd=project.getResolvedProfileManagedDependencies(session);
  for (  Profile profile : pd.keySet()) {
    int index=model.getProfiles().indexOf(profile);
    if (scanDependencies(pd.get(profile),dependenciesToRemove,model.getProfiles().get(index).getDependencies())) {
      result=true;
    }
  }
  for (  Profile profile : pmd.keySet()) {
    int index=model.getProfiles().indexOf(profile);
    DependencyManagement dm=model.getProfiles().get(index).getDependencyManagement();
    if (dm != null) {
      if (scanDependencies(pmd.get(profile),dependenciesToRemove,dm.getDependencies())) {
        result=true;
      }
    }
  }
  return result;
}","private boolean apply(final Project project,final Model model) throws ManipulationException {
  final DependencyRemovalState state=session.getState(DependencyRemovalState.class);
  logger.info(""String_Node_Str"" + ga(project));
  List<ProjectRef> dependenciesToRemove=state.getDependencyRemoval();
  boolean result=scanDependencies(project.getResolvedDependencies(session),dependenciesToRemove,model.getDependencies());
  if (model.getDependencyManagement() != null && scanDependencies(project.getResolvedManagedDependencies(session),dependenciesToRemove,model.getDependencyManagement().getDependencies())) {
    result=true;
  }
  final HashMap<Profile,HashMap<ArtifactRef,Dependency>> pd=project.getResolvedProfileDependencies(session);
  final HashMap<Profile,HashMap<ArtifactRef,Dependency>> pmd=project.getResolvedProfileManagedDependencies(session);
  for (  Profile profile : pd.keySet()) {
    int index=model.getProfiles().indexOf(profile);
    if (scanDependencies(pd.get(profile),dependenciesToRemove,model.getProfiles().get(index).getDependencies())) {
      result=true;
    }
  }
  for (  Profile profile : pmd.keySet()) {
    int index=model.getProfiles().indexOf(profile);
    DependencyManagement dm=model.getProfiles().get(index).getDependencyManagement();
    if (dm != null) {
      if (scanDependencies(pmd.get(profile),dependenciesToRemove,dm.getDependencies())) {
        result=true;
      }
    }
  }
  return result;
}",0.984817115251898
86513,"private boolean scanDependencies(HashMap<ProjectVersionRef,Dependency> resolvedDependencies,List<ProjectRef> dependenciesToRemove,List<Dependency> dependencies){
  boolean result=false;
  if (dependencies != null) {
    for (    ProjectVersionRef pvr : resolvedDependencies.keySet()) {
      if (dependenciesToRemove.contains(pvr.asProjectRef())) {
        logger.debug(""String_Node_Str"",resolvedDependencies.get(pvr));
        dependencies.remove(resolvedDependencies.get(pvr));
        result=true;
      }
    }
  }
  return result;
}","private boolean scanDependencies(HashMap<ArtifactRef,Dependency> resolvedDependencies,List<ProjectRef> dependenciesToRemove,List<Dependency> dependencies){
  boolean result=false;
  if (dependencies != null) {
    for (    ArtifactRef pvr : resolvedDependencies.keySet()) {
      if (dependenciesToRemove.contains(pvr.asProjectRef())) {
        logger.debug(""String_Node_Str"",resolvedDependencies.get(pvr));
        dependencies.remove(resolvedDependencies.get(pvr));
        result=true;
      }
    }
  }
  return result;
}",0.9585687382297552
86514,"/** 
 * Translate a given set of pvr:dependencies into ArtifactRefs.
 * @param session the ManipulationSession
 * @param project currently scanned project
 * @param deps Set of ArtifactRef to store the results in.
 * @param dependencies dependencies to examine
 */
private static void recordDependencies(ManipulationSession session,Project project,Set<ArtifactRef> deps,HashMap<ProjectVersionRef,Dependency> dependencies) throws ManipulationException {
  if (dependencies == null) {
    return;
  }
  for (  ProjectVersionRef pvr : dependencies.keySet()) {
    Dependency d=dependencies.get(pvr);
    deps.add(new SimpleScopedArtifactRef(pvr,new SimpleTypeAndClassifier(d.getType(),d.getClassifier()),isEmpty(d.getScope()) ? DependencyScope.compile.realName() : PropertyResolver.resolveInheritedProperties(session,project,d.getScope())));
  }
}","/** 
 * Translate a given set of pvr:dependencies into ArtifactRefs.
 * @param session the ManipulationSession
 * @param project currently scanned project
 * @param deps Set of ArtifactRef to store the results in.
 * @param dependencies dependencies to examine
 */
private static void recordDependencies(ManipulationSession session,Project project,Set<ArtifactRef> deps,HashMap<ArtifactRef,Dependency> dependencies) throws ManipulationException {
  if (dependencies == null) {
    return;
  }
  for (  ArtifactRef pvr : dependencies.keySet()) {
    Dependency d=dependencies.get(pvr);
    deps.add(new SimpleScopedArtifactRef(pvr,new SimpleTypeAndClassifier(d.getType(),d.getClassifier()),isEmpty(d.getScope()) ? DependencyScope.compile.realName() : PropertyResolver.resolveInheritedProperties(session,project,d.getScope())));
  }
}",0.973747016706444
86515,"private void printFinishTime(long start,boolean finished){
  long finish=System.nanoTime();
  long minutes=TimeUnit.NANOSECONDS.toMinutes(finish - start);
  long seconds=TimeUnit.NANOSECONDS.toSeconds(finish - start) - (minutes * 60);
  logger.info(""String_Node_Str"",(finished == true ? ""String_Node_Str"" : ""String_Node_Str""),minutes,seconds,(TimeUnit.NANOSECONDS.toMillis(finish - start) - (minutes * 60 * 1000) - (seconds * 1000)));
}","private void printFinishTime(long start,boolean finished){
  long finish=System.nanoTime();
  long minutes=TimeUnit.NANOSECONDS.toMinutes(finish - start);
  long seconds=TimeUnit.NANOSECONDS.toSeconds(finish - start) - (minutes * 60);
  logger.info(""String_Node_Str"",(finished ? ""String_Node_Str"" : ""String_Node_Str""),minutes,seconds,(TimeUnit.NANOSECONDS.toMillis(finish - start) - (minutes * 60 * 1000) - (seconds * 1000)));
}",0.9907407407407408
86516,"private boolean updateDependencies(WildcardMap<ProjectVersionRef> relocations,HashMap<ProjectVersionRef,Dependency> dependencies){
  boolean result=false;
  final HashMap<ProjectVersionRef,Dependency> postFixUp=new HashMap<>();
  for (int i=0; i < relocations.size(); i++) {
    Iterator<ProjectVersionRef> it=dependencies.keySet().iterator();
    while (it.hasNext()) {
      final ProjectVersionRef pvr=it.next();
      if (relocations.containsKey(pvr.asProjectRef())) {
        ProjectVersionRef relocation=relocations.get(pvr.asProjectRef());
        updateDependencyExclusion(pvr,relocation);
        logger.info(""String_Node_Str"",dependencies.get(pvr).getGroupId(),relocation.getGroupId(),dependencies.get(pvr).getArtifactId(),relocation.getArtifactId());
        if (!relocation.getArtifactId().equals(WildcardMap.WILDCARD)) {
          dependencies.get(pvr).setArtifactId(relocation.getArtifactId());
        }
        dependencies.get(pvr).setGroupId(relocation.getGroupId());
        postFixUp.put(SimpleProjectVersionRef.parse(dependencies.get(pvr).getManagementKey()),dependencies.get(pvr));
        it.remove();
        result=true;
      }
    }
    dependencies.putAll(postFixUp);
    postFixUp.clear();
  }
  return result;
}","private boolean updateDependencies(WildcardMap<ProjectVersionRef> relocations,HashMap<ArtifactRef,Dependency> dependencies){
  boolean result=false;
  final HashMap<ArtifactRef,Dependency> postFixUp=new HashMap<>();
  for (int i=0; i < relocations.size(); i++) {
    Iterator<ArtifactRef> it=dependencies.keySet().iterator();
    while (it.hasNext()) {
      final ArtifactRef pvr=it.next();
      if (relocations.containsKey(pvr.asProjectRef())) {
        ProjectVersionRef relocation=relocations.get(pvr.asProjectRef());
        updateDependencyExclusion(pvr,relocation);
        logger.info(""String_Node_Str"",dependencies.get(pvr).getGroupId(),relocation.getGroupId(),dependencies.get(pvr).getArtifactId(),relocation.getArtifactId());
        if (!relocation.getArtifactId().equals(WildcardMap.WILDCARD)) {
          dependencies.get(pvr).setArtifactId(relocation.getArtifactId());
        }
        dependencies.get(pvr).setGroupId(relocation.getGroupId());
        postFixUp.put(SimpleArtifactRef.parse(dependencies.get(pvr).getManagementKey()),dependencies.get(pvr));
        it.remove();
        result=true;
      }
    }
    dependencies.putAll(postFixUp);
    postFixUp.clear();
  }
  return result;
}",0.9551386623164764
86517,"@Test public void testResolveProjectDependencies() throws Exception {
  final Model model=TestUtils.resolveModelResource(RESOURCE_BASE,""String_Node_Str"");
  final Project project=new Project(model);
  HashMap<ProjectVersionRef,Dependency> deps=project.getResolvedManagedDependencies(new ManipulationSession());
  assertTrue(deps.size() == 66);
}","@Test public void testResolveProjectDependencies() throws Exception {
  final Model model=TestUtils.resolveModelResource(RESOURCE_BASE,""String_Node_Str"");
  final Project project=new Project(model);
  HashMap<ArtifactRef,Dependency> deps=project.getResolvedManagedDependencies(new ManipulationSession());
  assertTrue(deps.size() == 66);
}",0.9678362573099416
86518,"public List<Project> parseProject(final File pom) throws ManipulationException {
  final List<PomPeek> peeked=peekAtPomHierarchy(pom);
  return readModelsForManipulation(pom,peeked);
}","public List<Project> parseProject(final File pom) throws ManipulationException {
  final List<PomPeek> peeked=peekAtPomHierarchy(pom);
  return readModelsForManipulation(pom.getAbsoluteFile(),peeked);
}",0.9533678756476685
86519,"/** 
 * Apply the reporting and repository removal changes to the list of   {@link Project}'s given.
 */
@Override public Set<Project> applyChanges(final List<Project> projects,final ManipulationSession session) throws ManipulationException {
  final RepoReportingState state=session.getState(RepoReportingState.class);
  if (!session.isEnabled() || !state.isEnabled()) {
    logger.debug(getClass().getSimpleName() + ""String_Node_Str"");
    return Collections.emptySet();
  }
  final Set<Project> changed=new HashSet<>();
  Settings backupSettings=new Settings();
  Profile backupProfile=new Profile();
  backupProfile.setId(""String_Node_Str"");
  backupSettings.addActiveProfile(""String_Node_Str"");
  for (  final Project project : projects) {
    final String ga=ga(project);
    logger.info(""String_Node_Str"" + ga);
    final Model model=project.getModel();
    Iterator<Repository> it=model.getRepositories().iterator();
    while (it.hasNext()) {
      Repository repository=it.next();
      if (removeRepository(state,repository)) {
        backupProfile.addRepository(repository);
        it.remove();
        changed.add(project);
      }
    }
    it=model.getPluginRepositories().iterator();
    while (it.hasNext()) {
      Repository repository=it.next();
      if (removeRepository(state,repository)) {
        backupProfile.addPluginRepository(repository);
        it.remove();
        changed.add(project);
      }
    }
    if (model.getReporting() != null) {
      backupProfile.setReporting(model.getReporting());
      model.setReporting(null);
      changed.add(project);
    }
    final List<Profile> profiles=ProfileUtils.getProfiles(session,model);
    for (    final Profile profile : profiles) {
      Profile repoProfile=new Profile();
      repoProfile.setId(profile.getId());
      it=profile.getRepositories().iterator();
      while (it.hasNext()) {
        Repository repository=it.next();
        if (removeRepository(state,repository)) {
          repoProfile.addRepository(repository);
          it.remove();
          changed.add(project);
        }
      }
      it=profile.getPluginRepositories().iterator();
      while (it.hasNext()) {
        Repository repository=it.next();
        if (removeRepository(state,repository)) {
          repoProfile.addPluginRepository(repository);
          it.remove();
          changed.add(project);
        }
      }
      if (profile.getReporting() != null) {
        repoProfile.setReporting(profile.getReporting());
        profile.setReporting(null);
        changed.add(project);
      }
      if (!repoProfile.getRepositories().isEmpty() && !repoProfile.getPluginRepositories().isEmpty() && repoProfile.getReporting() != null) {
        backupSettings.addProfile(SettingsUtils.convertToSettingsProfile(repoProfile));
      }
    }
  }
  if (!backupProfile.getRepositories().isEmpty() && !backupProfile.getPluginRepositories().isEmpty() && backupProfile.getReporting() != null) {
    backupSettings.addProfile(SettingsUtils.convertToSettingsProfile(backupProfile));
  }
  File settingsFile=state.getRemovalBackupSettings();
  if (settingsFile == null) {
    String topDir=session.getTargetDir().getParentFile().getPath();
    settingsFile=new File(topDir,""String_Node_Str"");
  }
  settingsWriter.update(backupSettings,settingsFile);
  return changed;
}","/** 
 * Apply the reporting and repository removal changes to the list of   {@link Project}'s given.
 */
@Override public Set<Project> applyChanges(final List<Project> projects,final ManipulationSession session) throws ManipulationException {
  final RepoReportingState state=session.getState(RepoReportingState.class);
  if (!session.isEnabled() || !state.isEnabled()) {
    logger.debug(getClass().getSimpleName() + ""String_Node_Str"");
    return Collections.emptySet();
  }
  final Set<Project> changed=new HashSet<>();
  Settings backupSettings=new Settings();
  Profile backupProfile=new Profile();
  backupProfile.setId(""String_Node_Str"");
  backupSettings.addActiveProfile(""String_Node_Str"");
  for (  final Project project : projects) {
    final String ga=ga(project);
    logger.info(""String_Node_Str"" + ga);
    final Model model=project.getModel();
    Iterator<Repository> it=model.getRepositories().iterator();
    while (it.hasNext()) {
      Repository repository=it.next();
      if (removeRepository(state,repository)) {
        backupProfile.addRepository(repository);
        it.remove();
        changed.add(project);
      }
    }
    it=model.getPluginRepositories().iterator();
    while (it.hasNext()) {
      Repository repository=it.next();
      if (removeRepository(state,repository)) {
        backupProfile.addPluginRepository(repository);
        it.remove();
        changed.add(project);
      }
    }
    if (model.getReporting() != null) {
      backupProfile.setReporting(model.getReporting());
      model.setReporting(null);
      changed.add(project);
    }
    final List<Profile> profiles=ProfileUtils.getProfiles(session,model);
    for (    final Profile profile : profiles) {
      Profile repoProfile=new Profile();
      repoProfile.setId(profile.getId());
      it=profile.getRepositories().iterator();
      while (it.hasNext()) {
        Repository repository=it.next();
        if (removeRepository(state,repository)) {
          repoProfile.addRepository(repository);
          it.remove();
          changed.add(project);
        }
      }
      it=profile.getPluginRepositories().iterator();
      while (it.hasNext()) {
        Repository repository=it.next();
        if (removeRepository(state,repository)) {
          repoProfile.addPluginRepository(repository);
          it.remove();
          changed.add(project);
        }
      }
      if (profile.getReporting() != null) {
        repoProfile.setReporting(profile.getReporting());
        profile.setReporting(null);
        changed.add(project);
      }
      if (!repoProfile.getRepositories().isEmpty() || !repoProfile.getPluginRepositories().isEmpty() || repoProfile.getReporting() != null) {
        backupSettings.addProfile(SettingsUtils.convertToSettingsProfile(repoProfile));
      }
    }
  }
  if (!backupProfile.getRepositories().isEmpty() || !backupProfile.getPluginRepositories().isEmpty() || backupProfile.getReporting() != null) {
    backupSettings.addProfile(SettingsUtils.convertToSettingsProfile(backupProfile));
    String settingsFilePath=state.getRemovalBackupSettings();
    if (!isEmpty(settingsFilePath)) {
      File settingsFile;
      if (settingsFilePath.equals(""String_Node_Str"")) {
        String topDir=session.getTargetDir().getParentFile().getPath();
        settingsFile=new File(topDir,settingsFilePath);
      }
 else {
        settingsFile=new File(settingsFilePath);
      }
      settingsWriter.update(backupSettings,settingsFile);
    }
  }
  return changed;
}",0.9318347686469128
86520,"public File getRemovalBackupSettings(){
  return settingsFile;
}","public String getRemovalBackupSettings(){
  return settings;
}",0.9047619047619048
86521,"public RepoReportingState(final Properties userProps){
  removal=Boolean.parseBoolean(userProps.getProperty(RR_SUFFIX_SYSPROP));
  ignoreLocal=Boolean.parseBoolean(userProps.getProperty(RR_SUFFIX_SYSPROP));
  String settingsFilePath=userProps.getProperty(RR_SETTINGS_SFX_SYSPROP);
  if (settingsFilePath != null) {
    settingsFile=new File(settingsFilePath);
  }
 else {
    settingsFile=null;
  }
}","public RepoReportingState(final Properties userProps){
  removal=Boolean.parseBoolean(userProps.getProperty(RR_SUFFIX_SYSPROP));
  ignoreLocal=Boolean.parseBoolean(userProps.getProperty(RR_SUFFIX_SYSPROP_LOCAL));
  settings=userProps.getProperty(RR_SETTINGS_SFX_SYSPROP,""String_Node_Str"");
}",0.7496382054992764
86522,"/** 
 * Appends a build number to the qualifier. The build number should be a string of digits, or null if the build number should be removed.
 * @param buildNumber to append to the qualifier.
 */
public void setBuildNumber(String buildNumber){
  if (buildNumber == null || isNumeric(buildNumber)) {
    this.buildNumber=buildNumber;
  }
}","/** 
 * Appends a build number to the qualifier. The build number should be a string of digits, or null if the build number should be removed.
 * @param buildNumber to append to the qualifier.
 */
public void setBuildNumber(String buildNumber){
  if (buildNumberDelimiter == null) {
    buildNumberDelimiter=Character.toString(DEFAULT_QUALIFIER_DELIMITER);
  }
  if (buildNumber == null || isNumeric(buildNumber)) {
    this.buildNumber=buildNumber;
  }
}",0.853904282115869
86523,"/** 
 * Appends the given qualifier suffix.  Attempts to match the given qualifier suffix to the current suffix to avoid duplicates like ""1.0-beta-beta.  If the suffix matches the existing one, does nothing.
 * @param suffix The qualifier suffix to append. This can be a simple string like ""foo"", or it can optionallyinclude a build number, for example ""foo-1"", which will automatically be set as the build number for this version.
 */
public void appendQualifierSuffix(String suffix){
  logger.debug(""String_Node_Str"" + suffix + ""String_Node_Str""+ getVersionString());
  if (suffix == null) {
    return;
  }
  Matcher snapshotMatcher=snapshotPattern.matcher(suffix);
  snapshotMatcher.matches();
  final String suffixWithoutSnapshot=snapshotMatcher.group(1);
  final String suffixSnapshotDelimiter=snapshotMatcher.group(2);
  final String suffixSnapshot=snapshotMatcher.group(3);
  if (!isEmpty(suffixSnapshot)) {
    this.snapshotDelimiter=suffixSnapshotDelimiter;
    this.snapshot=suffixSnapshot;
  }
  Matcher suffixMatcher=qualifierPattern.matcher(suffixWithoutSnapshot);
  if (!suffixMatcher.matches()) {
    return;
  }
  String suffixBase=suffixMatcher.group(1);
  String suffixBuildNumberDelimiter=suffixMatcher.group(3);
  String suffixBuildNumber=suffixMatcher.group(4);
  String suffixBaseNoDelim=this.removeLastDelimiters(suffixBase);
  String suffixMatchRegex=""String_Node_Str"" + Pattern.quote(suffixBaseNoDelim) + ""String_Node_Str""+ DELIMITER_REGEX+ ""String_Node_Str"";
  String oldQualifierBase=getQualifierBase();
  String oldQualifierBaseAndNum=getQualifierBaseAndBuildNum();
  if (isEmpty(oldQualifierBaseAndNum)) {
    if (suffixBase.length() > 0 && versionStringDelimiters.contains(suffixBase.charAt(0))) {
      qualifierStartDelimiter=Character.toString(suffixBase.charAt(0));
      suffixBase=suffixBase.substring(1);
    }
    qualifierBase=suffixBase;
  }
 else   if (!Pattern.matches(suffixMatchRegex,oldQualifierBase)) {
    StringBuilder newQualifierBase=new StringBuilder(oldQualifierBaseAndNum);
    buildNumber=null;
    if (newQualifierBase.length() > 0 && !versionStringDelimiters.contains(newQualifierBase.charAt(newQualifierBase.length() - 1))) {
      newQualifierBase.append(DEFAULT_QUALIFIER_DELIMITER);
    }
    newQualifierBase.append(suffixBase);
    qualifierBase=newQualifierBase.toString();
  }
  if (!isEmpty(suffixBuildNumber)) {
    buildNumberDelimiter=suffixBuildNumberDelimiter;
    buildNumber=suffixBuildNumber;
  }
  logger.debug(""String_Node_Str"" + getVersionString());
}","/** 
 * Appends the given qualifier suffix.  Attempts to match the given qualifier suffix to the current suffix to avoid duplicates like ""1.0-beta-beta.  If the suffix matches the existing one, does nothing.
 * @param suffix The qualifier suffix to append. This can be a simple string like ""foo"", or it can optionallyinclude a build number, for example ""foo-1"", which will automatically be set as the build number for this version.
 */
public void appendQualifierSuffix(String suffix){
  logger.debug(""String_Node_Str"" + suffix + ""String_Node_Str""+ getVersionString());
  if (suffix == null) {
    return;
  }
  Matcher snapshotMatcher=snapshotPattern.matcher(suffix);
  snapshotMatcher.matches();
  final String suffixWithoutSnapshot=snapshotMatcher.group(1);
  final String suffixSnapshotDelimiter=snapshotMatcher.group(3);
  final String suffixSnapshot=snapshotMatcher.group(4);
  if (!isEmpty(suffixSnapshot)) {
    this.snapshotDelimiter=suffixSnapshotDelimiter;
    this.snapshot=suffixSnapshot;
  }
  Matcher suffixMatcher=qualifierPattern.matcher(suffixWithoutSnapshot);
  if (!suffixMatcher.matches()) {
    return;
  }
  String suffixBase=suffixMatcher.group(1);
  String suffixBuildNumberDelimiter=suffixMatcher.group(3);
  String suffixBuildNumber=suffixMatcher.group(4);
  String suffixBaseNoDelim=this.removeLastDelimiters(suffixBase);
  String suffixMatchRegex=""String_Node_Str"" + Pattern.quote(suffixBaseNoDelim) + ""String_Node_Str""+ DELIMITER_REGEX+ ""String_Node_Str"";
  String oldQualifierBase=getQualifierBase();
  String oldQualifierBaseAndNum=getQualifierBaseAndBuildNum();
  if (isEmpty(oldQualifierBaseAndNum)) {
    if (suffixBase.length() > 0 && versionStringDelimiters.contains(suffixBase.charAt(0))) {
      qualifierStartDelimiter=Character.toString(suffixBase.charAt(0));
      suffixBase=suffixBase.substring(1);
    }
    qualifierBase=suffixBase;
  }
 else   if (!Pattern.matches(suffixMatchRegex,oldQualifierBase)) {
    StringBuilder newQualifierBase=new StringBuilder(oldQualifierBaseAndNum);
    buildNumber=null;
    if (newQualifierBase.length() > 0 && !versionStringDelimiters.contains(newQualifierBase.charAt(newQualifierBase.length() - 1))) {
      newQualifierBase.append(DEFAULT_QUALIFIER_DELIMITER);
    }
    newQualifierBase.append(suffixBase);
    qualifierBase=newQualifierBase.toString();
    buildNumberDelimiter=suffixBuildNumberDelimiter;
  }
  if (!isEmpty(suffixBuildNumber)) {
    if (suffixBuildNumberDelimiter == null) {
      buildNumberDelimiter=""String_Node_Str"";
    }
 else {
      buildNumberDelimiter=suffixBuildNumberDelimiter;
    }
    buildNumber=suffixBuildNumber;
  }
  logger.debug(""String_Node_Str"" + getVersionString());
}",0.9423702852766608
86524,"/** 
 * Parse a version string into its component parts (major, minor, micro, qualifier). By default will split the String based on ""."", ""-"", and ""_"".
 * @param version
 * @return
 */
private void parseVersion(final String version){
  Matcher snapshotMatcher=snapshotPattern.matcher(version);
  snapshotMatcher.matches();
  final String versionWithoutSnapshot=snapshotMatcher.group(1);
  snapshotDelimiter=snapshotMatcher.group(2);
  snapshot=snapshotMatcher.group(3);
  Matcher versionMatcher=versionPattern.matcher(versionWithoutSnapshot);
  if (!versionMatcher.matches()) {
    return;
  }
  originalMMM=versionMatcher.group(1);
  qualifierStartDelimiter=versionMatcher.group(7);
  originalQualifier=versionMatcher.group(8);
  parseMMM(originalMMM);
  parseQualifier(originalQualifier);
}","/** 
 * Parse a version string into its component parts (major, minor, micro, qualifier). By default will split the String based on ""."", ""-"", and ""_"".
 * @param version
 * @return
 */
private void parseVersion(final String version){
  Matcher snapshotMatcher=snapshotPattern.matcher(version);
  snapshotMatcher.matches();
  final String versionWithoutSnapshot=snapshotMatcher.group(1);
  snapshotDelimiter=snapshotMatcher.group(3);
  snapshot=snapshotMatcher.group(4);
  Matcher versionMatcher=versionPattern.matcher(versionWithoutSnapshot);
  if (!versionMatcher.matches()) {
    return;
  }
  originalMMM=versionMatcher.group(1);
  qualifierStartDelimiter=versionMatcher.group(7);
  originalQualifier=versionMatcher.group(8);
  parseMMM(originalMMM);
  parseQualifier(originalQualifier);
}",0.9974715549936788
86525,"public DefaultVersionTranslator(String endpointUrl,int chunkSplitCount){
  this.endpointUrl=endpointUrl;
  this.chunkSplitCount=chunkSplitCount;
  Unirest.setObjectMapper(new ProjectVersionRefMapper());
  Unirest.setTimeouts(30000,600000);
}","public DefaultVersionTranslator(String endpointUrl){
  this.endpointUrl=endpointUrl;
  this.chunkSplitCount=4;
  Unirest.setObjectMapper(new ProjectVersionRefMapper());
  Unirest.setTimeouts(30000,600000);
}",0.7321428571428571
86526,"/** 
 * Translate the versions. There may be a lot of them, possibly causing timeouts or other issues. This is mitigated by splitting them into smaller chunks when an error occurs and retrying.
 */
public Map<ProjectVersionRef,String> translateVersions(List<ProjectVersionRef> projects){
  final Map<ProjectVersionRef,String> result=new HashMap<>();
  logger.debug(""String_Node_Str"" + projects);
  final Queue<Task> queue=new ArrayDeque<>();
  queue.add(new Task(projects,chunkSplitCount,endpointUrl));
  while (!queue.isEmpty()) {
    Task task=queue.remove();
    task.executeTranslate();
    if (task.isSuccess()) {
      result.putAll(task.getResult());
    }
 else {
      if (task.canSplit()) {
        logger.debug(""String_Node_Str"" + ""String_Node_Str"" + task.getChunkSize());
        queue.addAll(task.split());
      }
 else {
        if (task.getStatus() > 0)         throw new RestException(""String_Node_Str"" + task.getStatus());
 else         throw new RestException(""String_Node_Str"" + task.getException(),task.getException());
      }
    }
  }
  return result;
}","/** 
 * Translate the versions. There may be a lot of them, possibly causing timeouts or other issues. This is mitigated by splitting them into smaller chunks when an error occurs and retrying.
 */
public Map<ProjectVersionRef,String> translateVersions(List<ProjectVersionRef> projects){
  final Map<ProjectVersionRef,String> result=new HashMap<>();
  logger.debug(""String_Node_Str"" + projects);
  final Queue<Task> queue=new ArrayDeque<>();
  queue.add(new Task(projects,chunkSplitCount,endpointUrl));
  while (!queue.isEmpty()) {
    Task task=queue.remove();
    task.executeTranslate();
    if (task.isSuccess()) {
      result.putAll(task.getResult());
    }
 else {
      if (task.canSplit()) {
        List<Task> tasks=task.split();
        logger.debug(""String_Node_Str"" + ""String_Node_Str"" + task + ""String_Node_Str""+ tasks);
        queue.addAll(tasks);
      }
 else {
        if (task.getStatus() > 0)         throw new RestException(""String_Node_Str"" + task.getStatus());
 else         throw new RestException(""String_Node_Str"" + task.getException(),task.getException());
      }
    }
  }
  return result;
}",0.9590536851683348
86527,"private void run(String[] args){
  Options options=new Options();
  options.addOption(""String_Node_Str"",false,""String_Node_Str"");
  options.addOption(Option.builder(""String_Node_Str"").longOpt(""String_Node_Str"").desc(""String_Node_Str"").build());
  options.addOption(Option.builder(""String_Node_Str"").longOpt(""String_Node_Str"").desc(""String_Node_Str"").build());
  options.addOption(Option.builder(""String_Node_Str"").longOpt(""String_Node_Str"").hasArgs().numberOfArgs(1).desc(""String_Node_Str"").build());
  options.addOption(Option.builder(""String_Node_Str"").hasArgs().numberOfArgs(2).valueSeparator('=').desc(""String_Node_Str"").build());
  CommandLineParser parser=new DefaultParser();
  CommandLine cmd=null;
  try {
    cmd=parser.parse(options,args);
  }
 catch (  ParseException e) {
    logger.debug(""String_Node_Str"",e);
    System.err.println(e.getMessage());
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(""String_Node_Str"",options);
    System.exit(1);
  }
  if (cmd.hasOption('h')) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(""String_Node_Str"",options);
    System.exit(1);
  }
  if (cmd.hasOption('D')) {
    userProps=cmd.getOptionProperties(""String_Node_Str"");
  }
  if (cmd.hasOption('f')) {
    target=new File(cmd.getOptionValue('f'));
  }
  createSession(target);
  if (cmd.hasOption('d')) {
    final ch.qos.logback.classic.Logger root=(ch.qos.logback.classic.Logger)LoggerFactory.getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME);
    root.setLevel(Level.DEBUG);
  }
  if (!session.isEnabled()) {
    logger.info(""String_Node_Str"");
    return;
  }
  if (!target.exists()) {
    logger.info(""String_Node_Str"");
    return;
  }
 else   if (new File(target,ManipulationManager.MARKER_FILE).exists()) {
    logger.info(""String_Node_Str"");
    return;
  }
  try {
    manipulationManager.init(session);
    manipulationManager.scanAndApply(session);
  }
 catch (  ManipulationException e) {
    logger.error(""String_Node_Str"",e);
    System.exit(1);
  }
}","private void run(String[] args){
  Options options=new Options();
  options.addOption(""String_Node_Str"",false,""String_Node_Str"");
  options.addOption(Option.builder(""String_Node_Str"").longOpt(""String_Node_Str"").desc(""String_Node_Str"").build());
  options.addOption(Option.builder(""String_Node_Str"").longOpt(""String_Node_Str"").desc(""String_Node_Str"").build());
  options.addOption(Option.builder(""String_Node_Str"").longOpt(""String_Node_Str"").hasArgs().numberOfArgs(1).desc(""String_Node_Str"").build());
  options.addOption(Option.builder(""String_Node_Str"").longOpt(""String_Node_Str"").hasArgs().numberOfArgs(1).desc(""String_Node_Str"").build());
  options.addOption(Option.builder(""String_Node_Str"").hasArgs().numberOfArgs(2).valueSeparator('=').desc(""String_Node_Str"").build());
  CommandLineParser parser=new DefaultParser();
  CommandLine cmd=null;
  try {
    cmd=parser.parse(options,args);
  }
 catch (  ParseException e) {
    logger.debug(""String_Node_Str"",e);
    System.err.println(e.getMessage());
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(""String_Node_Str"",options);
    System.exit(1);
  }
  if (cmd.hasOption('h')) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(""String_Node_Str"",options);
    System.exit(1);
  }
  if (cmd.hasOption('D')) {
    userProps=cmd.getOptionProperties(""String_Node_Str"");
  }
  if (cmd.hasOption('f')) {
    target=new File(cmd.getOptionValue('f'));
  }
  if (cmd.hasOption('s')) {
    settings=new File(cmd.getOptionValue('s'));
  }
  createSession(target,settings);
  if (cmd.hasOption('d')) {
    final ch.qos.logback.classic.Logger root=(ch.qos.logback.classic.Logger)LoggerFactory.getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME);
    root.setLevel(Level.DEBUG);
  }
  if (!session.isEnabled()) {
    logger.info(""String_Node_Str"");
    return;
  }
  if (!target.exists()) {
    logger.info(""String_Node_Str"");
    return;
  }
 else   if (new File(target,ManipulationManager.MARKER_FILE).exists()) {
    logger.info(""String_Node_Str"");
    return;
  }
  try {
    manipulationManager.init(session);
    manipulationManager.scanAndApply(session);
  }
 catch (  ManipulationException e) {
    logger.error(""String_Node_Str"",e);
    System.exit(1);
  }
}",0.936738519212746
86528,"private void createSession(File target){
  try {
    PlexusContainer container=new DefaultPlexusContainer();
    final MavenExecutionRequest req=new DefaultMavenExecutionRequest().setUserProperties(System.getProperties()).setUserProperties(userProps).setRemoteRepositories(Collections.<ArtifactRepository>emptyList());
    final MavenSession mavenSession=new MavenSession(container,null,req,new DefaultMavenExecutionResult());
    mavenSession.getRequest().setPom(target);
    pomIO=container.lookup(PomIO.class);
    session=container.lookup(ManipulationSession.class);
    manipulationManager=container.lookup(ManipulationManager.class);
    session.setMavenSession(mavenSession);
  }
 catch (  ComponentLookupException e) {
    logger.debug(""String_Node_Str"",e);
    System.err.println(""String_Node_Str"");
    System.exit(1);
    e.printStackTrace();
  }
catch (  PlexusContainerException e) {
    logger.debug(""String_Node_Str"",e);
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
}","private void createSession(File target,File settings){
  try {
    PlexusContainer container=new DefaultPlexusContainer();
    final MavenExecutionRequest req=new DefaultMavenExecutionRequest().setUserProperties(System.getProperties()).setUserProperties(userProps).setRemoteRepositories(Collections.<ArtifactRepository>emptyList());
    if (settings != null) {
      req.setUserSettingsFile(settings);
      req.setGlobalSettingsFile(settings);
      MavenExecutionRequestPopulator executionRequestPopulator=container.lookup(MavenExecutionRequestPopulator.class);
      executionRequestPopulator.populateFromSettings(req,parseSettings(settings));
    }
    final MavenSession mavenSession=new MavenSession(container,null,req,new DefaultMavenExecutionResult());
    mavenSession.getRequest().setPom(target);
    pomIO=container.lookup(PomIO.class);
    session=container.lookup(ManipulationSession.class);
    manipulationManager=container.lookup(ManipulationManager.class);
    session.setMavenSession(mavenSession);
  }
 catch (  ComponentLookupException e) {
    logger.debug(""String_Node_Str"",e);
    System.err.println(""String_Node_Str"");
    System.exit(1);
    e.printStackTrace();
  }
catch (  PlexusContainerException e) {
    logger.debug(""String_Node_Str"",e);
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
catch (  SettingsBuildingException e) {
    logger.debug(""String_Node_Str"",e);
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
catch (  MavenExecutionRequestPopulationException e) {
    e.printStackTrace();
  }
}",0.7807153965785381
86529,"@Test public void checkTargetMatches() throws Exception {
  Cli c=new Cli();
  File pom1=new File(""String_Node_Str"");
  executeMethod(c,""String_Node_Str"",new Object[]{pom1});
  ManipulationSession session=(ManipulationSession)getField(c,""String_Node_Str"");
  assertTrue(""String_Node_Str"",pom1.equals(session.getPom()));
}","@Test public void checkTargetMatches() throws Exception {
  Cli c=new Cli();
  File pom1=new File(""String_Node_Str"");
  File settings1=new File(""String_Node_Str"");
  executeMethod(c,""String_Node_Str"",new Object[]{pom1,settings1});
  ManipulationSession session=(ManipulationSession)getField(c,""String_Node_Str"");
  assertTrue(""String_Node_Str"",pom1.equals(session.getPom()));
}",0.9197707736389684
86530,"@Override public Map<? extends ProjectRef,String> load(final State state,final ManipulationSession session) throws ManipulationException {
  for (  ArtifactRef p : localDeps) {
    restParam.add(p.asProjectVersionRef());
  }
  logger.debug(""String_Node_Str"" + restParam);
  final Map<ProjectVersionRef,String> result=restEndpoint.translateVersions(restParam);
  logger.debug(""String_Node_Str"" + result);
  return result;
}","@Override public Map<? extends ProjectRef,String> load(final State state,final ManipulationSession session) throws ManipulationException {
  for (  ArtifactRef p : localDeps) {
    restParam.add(p.asProjectVersionRef());
  }
  logger.debug(""String_Node_Str"",restParam);
  final Map<ProjectVersionRef,String> result=restEndpoint.translateVersions(restParam);
  logger.debug(""String_Node_Str"",result);
  return result;
}",0.9904761904761904
86531,"/** 
 * Prescans the Project to build up a list of Project GAs and also the various Dependencies.
 */
@Override public void scan(final List<Project> projects,final ManipulationSession session) throws ManipulationException {
  final DependencyRESTState state=session.getState(DependencyRESTState.class);
  if (!session.isEnabled() || !state.isEnabled()) {
    logger.debug(getClass().getSimpleName() + ""String_Node_Str"");
    return;
  }
  for (  final Project project : projects) {
    restParam.add(project.getKey());
    recordDependencies(projects,localDeps,project.getManagedDependencies());
    recordDependencies(projects,localDeps,project.getDependencies());
    List<Profile> profiles=project.getModel().getProfiles();
    if (profiles != null) {
      for (      Profile p : profiles) {
        if (p.getDependencyManagement() != null) {
          recordDependencies(projects,localDeps,p.getDependencyManagement().getDependencies());
        }
        recordDependencies(projects,localDeps,p.getDependencies());
      }
    }
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + localDeps);
  }
  restResult=(Map<ProjectVersionRef,String>)load(state,session);
  Map<ProjectRef,Set<String>> versionStates=new HashMap<ProjectRef,Set<String>>();
  for (  final Project p : projects) {
    if (restResult.containsKey(p.getKey())) {
      Set<String> versions=versionStates.get(p.getKey().asProjectRef());
      if (versions == null) {
        versions=new HashSet<String>();
        versionStates.put(p.getKey().asProjectRef(),versions);
      }
      versions.add(restResult.get(p.getKey()));
    }
  }
  logger.debug(""String_Node_Str"" + versionStates);
  final VersioningState vs=session.getState(VersioningState.class);
  vs.setRESTMetadata(versionStates);
  logger.debug(""String_Node_Str"" + restResult);
}","/** 
 * Prescans the Project to build up a list of Project GAs and also the various Dependencies.
 */
@Override public void scan(final List<Project> projects,final ManipulationSession session) throws ManipulationException {
  final DependencyRESTState state=session.getState(DependencyRESTState.class);
  if (!session.isEnabled() || !state.isEnabled()) {
    logger.debug(getClass().getSimpleName() + ""String_Node_Str"");
    return;
  }
  for (  final Project project : projects) {
    restParam.add(project.getKey());
    recordDependencies(projects,localDeps,project.getManagedDependencies());
    recordDependencies(projects,localDeps,project.getDependencies());
    List<Profile> profiles=project.getModel().getProfiles();
    if (profiles != null) {
      for (      Profile p : profiles) {
        if (p.getDependencyManagement() != null) {
          recordDependencies(projects,localDeps,p.getDependencyManagement().getDependencies());
        }
        recordDependencies(projects,localDeps,p.getDependencies());
      }
    }
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + localDeps);
  }
  restResult=(Map<ProjectVersionRef,String>)load(state,session);
  Map<ProjectRef,Set<String>> versionStates=new HashMap<ProjectRef,Set<String>>();
  for (  final Project p : projects) {
    if (restResult.containsKey(p.getKey())) {
      Set<String> versions=versionStates.get(p.getKey().asProjectRef());
      if (versions == null) {
        versions=new HashSet<String>();
        versionStates.put(p.getKey().asProjectRef(),versions);
      }
      versions.add(restResult.get(p.getKey()));
    }
  }
  logger.debug(""String_Node_Str"" + versionStates);
  final VersioningState vs=session.getState(VersioningState.class);
  vs.setRESTMetadata(versionStates);
}",0.9867476532302596
86532,"/** 
 * Apply any project versioning changes applicable for the given   {@link Model}, using accumulated version-change information stored in the  {@link VersioningState} instance, and produced during the {@link ProjectVersioningManipulator#scan(List,ManipulationSession)} invocation.These changes include the main POM version, but may also include the parent declaration and dependencies, if they reference other POMs in the current build. If the project is modified, then it is marked as changed in the  {@link ManipulationSession}, which triggers the associated POM to be rewritten.
 * @param project Project undergoing modification.
 * @return whether any changes have been applied.
 * @throws ManipulationException if an error occurs.
 */
protected boolean applyVersioningChanges(final Project project) throws ManipulationException {
  boolean changed=false;
  final Model model=project.getModel();
  if (versionsByGAV == null || versionsByGAV.isEmpty()) {
    return false;
  }
  if (model == null) {
    return false;
  }
  logger.info(""String_Node_Str"" + gav(model));
  logger.info(""String_Node_Str"" + versionsByGAV);
  String g=model.getGroupId();
  String v=model.getVersion();
  final Parent parent=model.getParent();
  if (g == null && parent != null) {
    g=parent.getGroupId();
  }
  if (v == null && parent != null) {
    v=parent.getVersion();
  }
  if (parent != null && parent.getVersion() != null) {
    final ProjectVersionRef parentGAV=new ProjectVersionRef(parent.getGroupId(),parent.getArtifactId(),parent.getVersion());
    logger.info(""String_Node_Str"" + parentGAV);
    if (versionsByGAV.containsKey(parentGAV)) {
      final String newVersion=versionsByGAV.get(parentGAV);
      logger.info(""String_Node_Str"" + newVersion + ""String_Node_Str""+ parent);
      parent.setVersion(newVersion);
      changed=true;
    }
  }
  ProjectVersionRef gav=new ProjectVersionRef(g,model.getArtifactId(),v);
  if (model.getVersion() != null) {
    final String newVersion=versionsByGAV.get(gav);
    logger.info(""String_Node_Str"" + gav + ""String_Node_Str""+ newVersion+ ""String_Node_Str"");
    if (newVersion != null && model.getVersion() != null) {
      model.setVersion(newVersion);
      logger.info(""String_Node_Str"" + gav(model));
      changed=true;
    }
  }
 else   if (changed == false && model.getVersion() == null && project.isInheritanceRoot()) {
    final String newVersion=versionsByGAV.get(gav);
    logger.info(""String_Node_Str"" + gav + ""String_Node_Str""+ newVersion+ ""String_Node_Str"");
    if (newVersion != null) {
      model.setVersion(newVersion);
      logger.info(""String_Node_Str"" + gav(model));
      changed=true;
    }
  }
  final Set<ModelBase> bases=new HashSet<ModelBase>();
  bases.add(model);
  final List<Profile> profiles=model.getProfiles();
  if (profiles != null) {
    bases.addAll(profiles);
  }
  final StringSearchInterpolator interp=new StringSearchInterpolator();
  if (model.getProperties() != null) {
    interp.addValueSource(new PropertiesBasedValueSource(model.getProperties()));
  }
  final List<String> prefixes=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  interp.addValueSource(new PrefixedObjectValueSource(prefixes,model,true));
  final RecursionInterceptor ri=new PrefixAwareRecursionInterceptor(prefixes,true);
  for (  final ModelBase base : bases) {
    final DependencyManagement dm=base.getDependencyManagement();
    if (dm != null && dm.getDependencies() != null) {
      for (      final Dependency d : dm.getDependencies()) {
        gav=new ProjectVersionRef(interpolate(d.getGroupId(),ri,interp),interpolate(d.getArtifactId(),ri,interp),interpolate(d.getVersion(),ri,interp));
        final String newVersion=versionsByGAV.get(gav);
        if (newVersion != null) {
          d.setVersion(newVersion);
          logger.info(""String_Node_Str"" + d + ""String_Node_Str""+ base);
          changed=true;
        }
      }
    }
    if (base.getDependencies() != null) {
      for (      final Dependency d : base.getDependencies()) {
        gav=new ProjectVersionRef(interpolate(d.getGroupId(),ri,interp),interpolate(d.getArtifactId(),ri,interp),interpolate(d.getVersion(),ri,interp));
        final String newVersion=versionsByGAV.get(gav);
        if (newVersion != null && d.getVersion() != null) {
          d.setVersion(newVersion);
          logger.info(""String_Node_Str"" + d + ""String_Node_Str""+ base);
          changed=true;
        }
      }
    }
  }
  if (changed) {
    logger.info(""String_Node_Str"" + gav(model));
  }
  return changed;
}","/** 
 * Apply any project versioning changes applicable for the given   {@link Model}, using accumulated version-change information stored in the  {@link VersioningState} instance, and produced during the {@link ProjectVersioningManipulator#scan(List,ManipulationSession)} invocation.These changes include the main POM version, but may also include the parent declaration and dependencies, if they reference other POMs in the current build. If the project is modified, then it is marked as changed in the  {@link ManipulationSession}, which triggers the associated POM to be rewritten.
 * @param project Project undergoing modification.
 * @return whether any changes have been applied.
 * @throws ManipulationException if an error occurs.
 */
protected boolean applyVersioningChanges(final Project project) throws ManipulationException {
  boolean changed=false;
  final Model model=project.getModel();
  if (versionsByGAV == null || versionsByGAV.isEmpty()) {
    return false;
  }
  if (model == null) {
    return false;
  }
  logger.info(""String_Node_Str"" + gav(model));
  String g=model.getGroupId();
  String v=model.getVersion();
  final Parent parent=model.getParent();
  if (g == null && parent != null) {
    g=parent.getGroupId();
  }
  if (v == null && parent != null) {
    v=parent.getVersion();
  }
  if (parent != null && parent.getVersion() != null) {
    final ProjectVersionRef parentGAV=new ProjectVersionRef(parent.getGroupId(),parent.getArtifactId(),parent.getVersion());
    logger.info(""String_Node_Str"" + parentGAV);
    if (versionsByGAV.containsKey(parentGAV)) {
      final String newVersion=versionsByGAV.get(parentGAV);
      logger.info(""String_Node_Str"" + newVersion + ""String_Node_Str""+ parent);
      parent.setVersion(newVersion);
      changed=true;
    }
  }
  ProjectVersionRef gav=new ProjectVersionRef(g,model.getArtifactId(),v);
  if (model.getVersion() != null) {
    final String newVersion=versionsByGAV.get(gav);
    logger.info(""String_Node_Str"" + gav + ""String_Node_Str""+ newVersion+ ""String_Node_Str"");
    if (newVersion != null && model.getVersion() != null) {
      model.setVersion(newVersion);
      logger.info(""String_Node_Str"" + gav(model));
      changed=true;
    }
  }
 else   if (changed == false && model.getVersion() == null && project.isInheritanceRoot()) {
    final String newVersion=versionsByGAV.get(gav);
    logger.info(""String_Node_Str"" + gav + ""String_Node_Str""+ newVersion+ ""String_Node_Str"");
    if (newVersion != null) {
      model.setVersion(newVersion);
      logger.info(""String_Node_Str"" + gav(model));
      changed=true;
    }
  }
  final Set<ModelBase> bases=new HashSet<ModelBase>();
  bases.add(model);
  final List<Profile> profiles=model.getProfiles();
  if (profiles != null) {
    bases.addAll(profiles);
  }
  final StringSearchInterpolator interp=new StringSearchInterpolator();
  if (model.getProperties() != null) {
    interp.addValueSource(new PropertiesBasedValueSource(model.getProperties()));
  }
  final List<String> prefixes=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  interp.addValueSource(new PrefixedObjectValueSource(prefixes,model,true));
  final RecursionInterceptor ri=new PrefixAwareRecursionInterceptor(prefixes,true);
  for (  final ModelBase base : bases) {
    final DependencyManagement dm=base.getDependencyManagement();
    if (dm != null && dm.getDependencies() != null) {
      for (      final Dependency d : dm.getDependencies()) {
        gav=new ProjectVersionRef(interpolate(d.getGroupId(),ri,interp),interpolate(d.getArtifactId(),ri,interp),interpolate(d.getVersion(),ri,interp));
        final String newVersion=versionsByGAV.get(gav);
        if (newVersion != null) {
          d.setVersion(newVersion);
          logger.info(""String_Node_Str"" + d + ""String_Node_Str""+ base);
          changed=true;
        }
      }
    }
    if (base.getDependencies() != null) {
      for (      final Dependency d : base.getDependencies()) {
        gav=new ProjectVersionRef(interpolate(d.getGroupId(),ri,interp),interpolate(d.getArtifactId(),ri,interp),interpolate(d.getVersion(),ri,interp));
        final String newVersion=versionsByGAV.get(gav);
        if (newVersion != null && d.getVersion() != null) {
          d.setVersion(newVersion);
          logger.info(""String_Node_Str"" + d + ""String_Node_Str""+ base);
          changed=true;
        }
      }
    }
  }
  if (changed) {
    logger.info(""String_Node_Str"" + gav(model));
  }
  return changed;
}",0.4733924611973392
86533,"public String getOSGiVersionString(){
  System.out.println(""String_Node_Str"" + isValidOSGi() + ""String_Node_Str""+ !hasQualifier());
  if (isValidOSGi() && !hasQualifier()) {
    return originalVersion;
  }
  System.out.println(""String_Node_Str"" + numericVersion);
  StringBuilder osgiVersion=new StringBuilder();
  if (numericVersion) {
    osgiVersion.append(getThreePartMMM());
  }
  if (!isEmpty(getQualifier())) {
    if (numericVersion) {
      osgiVersion.append(OSGI_VERSION_DELIMITER);
    }
    osgiVersion.append(getOSGiQualifier());
  }
  return osgiVersion.toString();
}","public String getOSGiVersionString(){
  if (isValidOSGi() && !hasQualifier()) {
    return originalVersion;
  }
  StringBuilder osgiVersion=new StringBuilder();
  if (numericVersion) {
    osgiVersion.append(getThreePartMMM());
  }
  if (!isEmpty(getQualifier())) {
    if (numericVersion) {
      osgiVersion.append(OSGI_VERSION_DELIMITER);
    }
    osgiVersion.append(getOSGiQualifier());
  }
  return osgiVersion.toString();
}",0.8379446640316206
86534,"/** 
 * Calculate the version modification for a given GAV.
 * @param groupId the groupId to search for
 * @param artifactId the artifactId to search for.
 * @param version the original version to search for.
 * @param session the container session.
 * @return a Version object allowing the modified version to be extracted.
 * @throws ManipulationException if an error occurs.
 */
protected Version calculate(final String groupId,final String artifactId,final String version,final ManipulationSession session) throws ManipulationException {
  final VersioningState state=session.getState(VersioningState.class);
  final String incrementalSuffix=state.getIncrementalSerialSuffix();
  final String staticSuffix=state.getSuffix();
  final String override=state.getOverride();
  logger.debug(""String_Node_Str"" + version);
  logger.debug(""String_Node_Str"" + staticSuffix + ""String_Node_Str""+ incrementalSuffix);
  logger.debug(""String_Node_Str"" + override);
  Version versionObj;
  if (override != null) {
    versionObj=new Version(override);
  }
 else {
    versionObj=new Version(version);
  }
  if (staticSuffix != null) {
    versionObj.appendQualifierSuffix(staticSuffix);
    if (!state.preserveSnapshot()) {
      versionObj.setSnapshot(false);
    }
  }
 else   if (incrementalSuffix != null) {
    final Set<String> versionCandidates=new HashSet<String>();
    Map<ProjectRef,Set<String>> rm=state.getRESTMetadata();
    if (rm != null) {
      logger.debug(""String_Node_Str"" + rm);
      if (rm.size() > 0) {
        logger.debug(""String_Node_Str"" + rm.get(new ProjectRef(groupId,artifactId)));
        versionCandidates.addAll(rm.get(new ProjectRef(groupId,artifactId)));
      }
    }
 else {
      versionCandidates.addAll(getMetadataVersions(groupId,artifactId));
    }
    logger.debug(""String_Node_Str"" + versionCandidates);
    versionObj.appendQualifierSuffix(incrementalSuffix);
    int highestRemoteBuildNum=versionObj.findHighestMatchingBuildNumber(versionObj,versionCandidates);
    ++highestRemoteBuildNum;
    if (highestRemoteBuildNum > versionObj.getIntegerBuildNumber()) {
      versionObj.setBuildNumber(Integer.toString(highestRemoteBuildNum));
    }
    if (!state.preserveSnapshot()) {
      versionObj.setSnapshot(false);
    }
  }
  return versionObj;
}","/** 
 * Calculate the version modification for a given GAV.
 * @param groupId the groupId to search for
 * @param artifactId the artifactId to search for.
 * @param version the original version to search for.
 * @param session the container session.
 * @return a Version object allowing the modified version to be extracted.
 * @throws ManipulationException if an error occurs.
 */
protected Version calculate(final String groupId,final String artifactId,final String version,final ManipulationSession session) throws ManipulationException {
  final VersioningState state=session.getState(VersioningState.class);
  final String incrementalSuffix=state.getIncrementalSerialSuffix();
  final String staticSuffix=state.getSuffix();
  final String override=state.getOverride();
  logger.debug(""String_Node_Str"" + version);
  logger.debug(""String_Node_Str"" + staticSuffix + ""String_Node_Str""+ incrementalSuffix);
  logger.debug(""String_Node_Str"" + override);
  Version versionObj;
  if (override != null) {
    versionObj=new Version(override);
  }
 else {
    versionObj=new Version(version);
  }
  if (staticSuffix != null) {
    versionObj.appendQualifierSuffix(staticSuffix);
    if (!state.preserveSnapshot()) {
      versionObj.setSnapshot(false);
    }
  }
 else   if (incrementalSuffix != null) {
    final Set<String> versionCandidates=new HashSet<String>();
    Map<ProjectRef,Set<String>> rm=state.getRESTMetadata();
    if (rm != null) {
      if (rm.size() > 0) {
        versionCandidates.addAll(rm.get(new ProjectRef(groupId,artifactId)));
      }
    }
 else {
      versionCandidates.addAll(getMetadataVersions(groupId,artifactId));
    }
    versionObj.appendQualifierSuffix(incrementalSuffix);
    int highestRemoteBuildNum=versionObj.findHighestMatchingBuildNumber(versionObj,versionCandidates);
    ++highestRemoteBuildNum;
    if (highestRemoteBuildNum > versionObj.getIntegerBuildNumber()) {
      versionObj.setBuildNumber(Integer.toString(highestRemoteBuildNum));
    }
    if (!state.preserveSnapshot()) {
      versionObj.setSnapshot(false);
    }
  }
  return versionObj;
}",0.9271523178807948
86535,"/** 
 * If enabled, grab the execution root pom (which will be the topmost POM in terms of directory structure). Check for the presence of the project-sources-maven-plugin in the base build (/project/build/plugins/). Inject a new plugin execution for creating project sources if this plugin has not already been declared in the base build section.
 */
@Override public Set<Project> applyChanges(final List<Project> projects,final ManipulationSession session) throws ManipulationException {
  final ProjectSourcesInjectingState state=session.getState(ProjectSourcesInjectingState.class);
  if (state.isEnabled() && session.anyStateEnabled(State.activeByDefault)) {
    for (    final Project project : projects) {
      if (project.isExecutionRoot()) {
        logger.info(""String_Node_Str"",project);
        final Model model=project.getModel();
        Build build=model.getBuild();
        if (build == null) {
          build=new Build();
          model.setBuild(build);
        }
        boolean changed=false;
        final Map<String,Plugin> pluginMap=build.getPluginsAsMap();
        if (!pluginMap.containsKey(PROJECT_SOURCES_COORD)) {
          final PluginExecution execution=new PluginExecution();
          execution.setId(PROJECT_SOURCES_EXEC_ID);
          execution.setPhase(INITIALIZE_PHASE);
          execution.setGoals(Collections.singletonList(PROJECT_SOURCES_GOAL));
          final Plugin plugin=new Plugin();
          plugin.setGroupId(PROJECT_SOURCES_GID);
          plugin.setArtifactId(PROJECT_SOURCES_AID);
          plugin.setVersion(state.getProjectSourcesPluginVersion());
          plugin.addExecution(execution);
          build.addPlugin(plugin);
          changed=true;
        }
        if (!pluginMap.containsKey(BMMP_COORD)) {
          final PluginExecution execution=new PluginExecution();
          execution.setId(BMMP_EXEC_ID);
          execution.setPhase(VALIDATE_PHASE);
          execution.setGoals(Collections.singletonList(BMMP_GOAL));
          final Xpp3Dom xml=new Xpp3Dom(""String_Node_Str"");
          final Map<String,Object> config=new HashMap<String,Object>();
          config.put(""String_Node_Str"",true);
          config.put(""String_Node_Str"",false);
          config.put(""String_Node_Str"",false);
          config.put(""String_Node_Str"",false);
          config.put(""String_Node_Str"",false);
          config.put(""String_Node_Str"",false);
          config.put(""String_Node_Str"",""String_Node_Str"");
          config.put(""String_Node_Str"",true);
          config.put(""String_Node_Str"",true);
          config.put(""String_Node_Str"",false);
          config.put(""String_Node_Str"",false);
          config.put(""String_Node_Str"",false);
          config.put(""String_Node_Str"",true);
          for (          final Map.Entry<String,Object> entry : config.entrySet()) {
            final Xpp3Dom child=new Xpp3Dom(entry.getKey());
            if (entry.getValue() != null) {
              child.setValue(entry.getValue().toString());
            }
            xml.addChild(child);
          }
          execution.setConfiguration(xml);
          final Plugin plugin=new Plugin();
          plugin.setGroupId(BMMP_GID);
          plugin.setArtifactId(BMMP_AID);
          plugin.setVersion(state.getBuildMetadataPluginVersion());
          plugin.addExecution(execution);
          plugin.setInherited(false);
          build.addPlugin(plugin);
          changed=true;
        }
        if (changed) {
          return Collections.singleton(project);
        }
      }
    }
  }
  return Collections.emptySet();
}","/** 
 * If enabled, grab the execution root pom (which will be the topmost POM in terms of directory structure). Check for the presence of the project-sources-maven-plugin in the base build (/project/build/plugins/). Inject a new plugin execution for creating project sources if this plugin has not already been declared in the base build section.
 */
@Override public Set<Project> applyChanges(final List<Project> projects,final ManipulationSession session) throws ManipulationException {
  final ProjectSourcesInjectingState state=session.getState(ProjectSourcesInjectingState.class);
  if (state.isEnabled() && session.anyStateEnabled(State.activeByDefault)) {
    for (    final Project project : projects) {
      if (project.isExecutionRoot()) {
        logger.info(""String_Node_Str"",project);
        final Model model=project.getModel();
        Build build=model.getBuild();
        if (build == null) {
          build=new Build();
          model.setBuild(build);
        }
        boolean changed=false;
        final Map<String,Plugin> pluginMap=build.getPluginsAsMap();
        if (state.isProjectSourcesPluginEnabled() && !pluginMap.containsKey(PROJECT_SOURCES_COORD)) {
          final PluginExecution execution=new PluginExecution();
          execution.setId(PROJECT_SOURCES_EXEC_ID);
          execution.setPhase(INITIALIZE_PHASE);
          execution.setGoals(Collections.singletonList(PROJECT_SOURCES_GOAL));
          final Plugin plugin=new Plugin();
          plugin.setGroupId(PROJECT_SOURCES_GID);
          plugin.setArtifactId(PROJECT_SOURCES_AID);
          plugin.setVersion(state.getProjectSourcesPluginVersion());
          plugin.addExecution(execution);
          build.addPlugin(plugin);
          changed=true;
        }
        if (state.isBuildMetadataPluginEnabled() && !pluginMap.containsKey(BMMP_COORD)) {
          final PluginExecution execution=new PluginExecution();
          execution.setId(BMMP_EXEC_ID);
          execution.setPhase(VALIDATE_PHASE);
          execution.setGoals(Collections.singletonList(BMMP_GOAL));
          final Xpp3Dom xml=new Xpp3Dom(""String_Node_Str"");
          final Map<String,Object> config=new HashMap<String,Object>();
          config.put(""String_Node_Str"",true);
          config.put(""String_Node_Str"",false);
          config.put(""String_Node_Str"",false);
          config.put(""String_Node_Str"",false);
          config.put(""String_Node_Str"",false);
          config.put(""String_Node_Str"",false);
          config.put(""String_Node_Str"",""String_Node_Str"");
          config.put(""String_Node_Str"",true);
          config.put(""String_Node_Str"",true);
          config.put(""String_Node_Str"",false);
          config.put(""String_Node_Str"",false);
          config.put(""String_Node_Str"",false);
          config.put(""String_Node_Str"",true);
          for (          final Map.Entry<String,Object> entry : config.entrySet()) {
            final Xpp3Dom child=new Xpp3Dom(entry.getKey());
            if (entry.getValue() != null) {
              child.setValue(entry.getValue().toString());
            }
            xml.addChild(child);
          }
          execution.setConfiguration(xml);
          final Plugin plugin=new Plugin();
          plugin.setGroupId(BMMP_GID);
          plugin.setArtifactId(BMMP_AID);
          plugin.setVersion(state.getBuildMetadataPluginVersion());
          plugin.addExecution(execution);
          plugin.setInherited(false);
          build.addPlugin(plugin);
          changed=true;
        }
        if (changed) {
          return Collections.singleton(project);
        }
      }
    }
  }
  return Collections.emptySet();
}",0.9887640449438202
86536,"/** 
 * @see ProjectSourcesInjectingState#BMMP_SKIP_PROPERTY
 * @return whether the BuildMetadata plugin is enabled.
 */
public boolean isBuildMetadataPluginEnabled(){
  return metadataEnabled;
}","/** 
 * @see ProjectSourcesInjectingState#BMMP_SKIP_PROPERTY
 * @return whether the BuildMetadata plugin is projectsourcesEnabled.
 */
public boolean isBuildMetadataPluginEnabled(){
  return metadataEnabled;
}",0.9603960396039604
86537,"/** 
 * @see ProjectSourcesInjectingState#PROJECT_SOURCES_SKIP_PROPERTY
 */
@Override public boolean isEnabled(){
  return enabled;
}","/** 
 * @see ProjectSourcesInjectingState#PROJECT_SOURCES_SKIP_PROPERTY
 * @return true if <b>either</b> of {@link #isProjectSourcesPluginEnabled()} or {@link #isBuildMetadataPluginEnabled()} is enabled.
 */
@Override public boolean isEnabled(){
  return isBuildMetadataPluginEnabled() || isProjectSourcesPluginEnabled();
}",0.5526315789473685
86538,"/** 
 * Detects the project.src.skip and project.src.version user properties. Sets the enabled flag and the plugin version accordingly.
 * @param userProperties the properties for the manipulator
 */
public ProjectSourcesInjectingState(final Properties userProperties){
  enabled=!Boolean.parseBoolean(userProperties.getProperty(PROJECT_SOURCES_SKIP_PROPERTY,""String_Node_Str""));
  metadataEnabled=!Boolean.parseBoolean(userProperties.getProperty(BMMP_SKIP_PROPERTY,""String_Node_Str""));
  projectSrcPluginVersion=userProperties.getProperty(PROJECT_SOURCES_PLUGIN_VERSION_PROPERTY,DEFAULT_PROJECT_SOURCES_PLUGIN_VERSION);
  bmmpVersion=userProperties.getProperty(BMMP_VERSION_PROPERTY,DEFAULT_BMMP_VERSION);
}","/** 
 * Detects the project.src.skip and project.src.version user properties. Sets the projectsourcesEnabled flag and the plugin version accordingly.
 * @param userProperties the properties for the manipulator
 */
public ProjectSourcesInjectingState(final Properties userProperties){
  projectsourcesEnabled=!Boolean.parseBoolean(userProperties.getProperty(PROJECT_SOURCES_SKIP_PROPERTY,""String_Node_Str""));
  metadataEnabled=!Boolean.parseBoolean(userProperties.getProperty(BMMP_SKIP_PROPERTY,""String_Node_Str""));
  projectSrcPluginVersion=userProperties.getProperty(PROJECT_SOURCES_PLUGIN_VERSION_PROPERTY,DEFAULT_PROJECT_SOURCES_PLUGIN_VERSION);
  bmmpVersion=userProperties.getProperty(BMMP_VERSION_PROPERTY,DEFAULT_BMMP_VERSION);
}",0.9778393351800554
86539,"/** 
 * Matches a version object to versions in a set by comparing the non build number portion of the string. Then find which of the matching versions has the highest build number and is therefore the latest version.
 * @param version
 * @param versionSet
 * @return The highest build number, or 0 if no matching build numbers are found.
 */
public int findHighestMatchingBuildNumber(Version version,Set<String> versionSet){
  int highestBuildNum=0;
  StringBuffer versionPatternBuf=new StringBuffer();
  versionPatternBuf.append(""String_Node_Str"");
  versionPatternBuf.append(Pattern.quote(getOriginalMMM()));
  versionPatternBuf.append(""String_Node_Str"");
  versionPatternBuf.append(DELIMITER_REGEX);
  if (version.getQualifierBase() != null) {
    versionPatternBuf.append(Pattern.quote(version.getQualifierBase()));
    versionPatternBuf.append(DELIMITER_REGEX);
  }
  versionPatternBuf.append(""String_Node_Str"");
  versionPatternBuf.append(""String_Node_Str"");
  versionPatternBuf.append(""String_Node_Str"");
  String candidatePatternStr=versionPatternBuf.toString();
  logger.debug(""String_Node_Str"",candidatePatternStr);
  final Pattern candidateSuffixPattern=Pattern.compile(candidatePatternStr);
  for (  final String compareVersion : versionSet) {
    final Matcher candidateSuffixMatcher=candidateSuffixPattern.matcher(compareVersion);
    if (candidateSuffixMatcher.matches()) {
      String buildNumberStr=candidateSuffixMatcher.group(2);
      int compareBuildNum=Integer.parseInt(buildNumberStr);
      if (compareBuildNum > highestBuildNum) {
        highestBuildNum=compareBuildNum;
      }
    }
  }
  return highestBuildNum;
}","/** 
 * Matches a version object to versions in a set by comparing the non build number portion of the string. Then find which of the matching versions has the highest build number and is therefore the latest version.
 * @param version
 * @param versionSet
 * @return The highest build number, or 0 if no matching build numbers are found.
 */
public int findHighestMatchingBuildNumber(Version version,Set<String> versionSet){
  int highestBuildNum=0;
  StringBuffer versionPatternBuf=new StringBuffer();
  versionPatternBuf.append(""String_Node_Str"");
  versionPatternBuf.append(Pattern.quote(getOriginalMMM()));
  versionPatternBuf.append(""String_Node_Str"" + DELIMITER_REGEX + ""String_Node_Str"");
  versionPatternBuf.append(""String_Node_Str"");
  versionPatternBuf.append(DELIMITER_REGEX);
  if (version.getQualifierBase() != null) {
    versionPatternBuf.append(Pattern.quote(version.getQualifierBase()));
    versionPatternBuf.append(DELIMITER_REGEX);
  }
  versionPatternBuf.append(""String_Node_Str"");
  String candidatePatternStr=versionPatternBuf.toString();
  logger.debug(""String_Node_Str"",candidatePatternStr);
  final Pattern candidateSuffixPattern=Pattern.compile(candidatePatternStr);
  for (  final String compareVersion : versionSet) {
    final Matcher candidateSuffixMatcher=candidateSuffixPattern.matcher(compareVersion);
    if (candidateSuffixMatcher.matches()) {
      String buildNumberStr=candidateSuffixMatcher.group(3);
      int compareBuildNum=Integer.parseInt(buildNumberStr);
      if (compareBuildNum > highestBuildNum) {
        highestBuildNum=compareBuildNum;
      }
    }
  }
  return highestBuildNum;
}",0.8087831655992681
86540,"@Test @Ignore(""String_Node_Str"") public void testZeroFill_FindHighestMatchingBuildNumber(){
  final Set<String> versionSet=new HashSet<String>();
  final Version version=new Version(""String_Node_Str"");
  versionSet.add(""String_Node_Str"");
  assertThat(version.findHighestMatchingBuildNumber(version,versionSet),equalTo(2));
  versionSet.clear();
}","@Test public void testZeroFill_FindHighestMatchingBuildNumber(){
  final Set<String> versionSet=new HashSet<String>();
  final Version majorOnlyVersion=new Version(""String_Node_Str"");
  majorOnlyVersion.appendQualifierSuffix(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + majorOnlyVersion.getOSGiVersionString());
  versionSet.add(""String_Node_Str"");
  assertThat(majorOnlyVersion.findHighestMatchingBuildNumber(majorOnlyVersion,versionSet),equalTo(2));
  versionSet.clear();
  final Version majorMinorVersion=new Version(""String_Node_Str"");
  majorMinorVersion.appendQualifierSuffix(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + majorMinorVersion.getOSGiVersionString());
  versionSet.add(""String_Node_Str"");
  assertThat(majorMinorVersion.findHighestMatchingBuildNumber(majorMinorVersion,versionSet),equalTo(2));
  versionSet.clear();
}",0.5222405271828665
86541,"public Map<String,Plugin> getPluginMap(final ModelBase base){
  if (base instanceof Model) {
    final Build build=((Model)base).getBuild();
    if (build == null) {
      return Collections.<String,Plugin>emptyMap();
    }
    final Map<String,Plugin> result=build.getPluginsAsMap();
    if (result == null) {
      return Collections.<String,Plugin>emptyMap();
    }
    return result;
  }
  return Collections.<String,Plugin>emptyMap();
}","public Map<String,Plugin> getPluginMap(final ModelBase base){
  final BuildBase build;
  if (base instanceof Model) {
    build=((Model)base).getBuild();
  }
 else {
    build=((Profile)base).getBuild();
  }
  if (build == null) {
    return Collections.<String,Plugin>emptyMap();
  }
  final Map<String,Plugin> result=build.getPluginsAsMap();
  if (result == null) {
    return Collections.<String,Plugin>emptyMap();
  }
  return result;
}",0.771850170261067
86542,"public List<Plugin> getManagedPlugins(final ModelBase base){
  if (base instanceof Model) {
    final Build build=((Model)base).getBuild();
    if (build == null) {
      return Collections.emptyList();
    }
    final PluginManagement pm=build.getPluginManagement();
    if (pm == null) {
      return Collections.emptyList();
    }
    final List<Plugin> result=pm.getPlugins();
    if (result == null) {
      return Collections.emptyList();
    }
    return result;
  }
  return Collections.emptyList();
}","public List<Plugin> getManagedPlugins(final ModelBase base){
  BuildBase build;
  if (base instanceof Model) {
    build=((Model)base).getBuild();
  }
 else {
    build=((Profile)base).getBuild();
  }
  if (build == null) {
    return Collections.emptyList();
  }
  final PluginManagement pm=build.getPluginManagement();
  if (pm == null) {
    return Collections.emptyList();
  }
  final List<Plugin> result=pm.getPlugins();
  if (result == null) {
    return Collections.emptyList();
  }
  return result;
}",0.8141592920353983
86543,"private void assertSkip(final Model model,final String profileId,final boolean managed,final boolean deploy,final boolean state){
  final Build build=model.getBuild();
  assertThat(build,notNullValue());
  final Plugin plugin=build.getPluginsAsMap().get(ga(MAVEN_PLUGIN_GROUPID,deploy ? MAVEN_DEPLOY_ARTIFACTID : MAVEN_INSTALL_ARTIFACTID));
  assertThat(plugin,notNullValue());
  assertThat(plugin.getConfiguration().toString().contains(""String_Node_Str"" + state + ""String_Node_Str""),equalTo(true));
}","private void assertSkip(final Model model,final String profileId,final boolean managed,final boolean deploy,final boolean state){
  BuildBase build=null;
  if (profileId != null) {
    final List<Profile> profiles=model.getProfiles();
    if (profiles != null) {
      for (      final Profile profile : profiles) {
        if (profileId.equals(profile.getId())) {
          build=profile.getBuild();
        }
      }
    }
  }
 else {
    build=model.getBuild();
  }
  assertThat(build,notNullValue());
  final Plugin plugin=build.getPluginsAsMap().get(ga(MAVEN_PLUGIN_GROUPID,deploy ? MAVEN_DEPLOY_ARTIFACTID : MAVEN_INSTALL_ARTIFACTID));
  assertThat(plugin,notNullValue());
  assertThat(plugin.getConfiguration().toString().contains(""String_Node_Str"" + state + ""String_Node_Str""),equalTo(true));
}",0.7597851112816577
86544,"@SuppressWarnings(""String_Node_Str"") @Override public void onEvent(final Object event) throws Exception {
  try {
    if (event instanceof ExecutionEvent) {
      final ExecutionEvent ee=(ExecutionEvent)event;
      final ExecutionEvent.Type type=ee.getType();
switch (type) {
case ProjectDiscoveryStarted:
{
          if (ee.getSession() != null) {
            manipulationManager.init(ee.getSession(),session);
          }
          if (!session.isEnabled()) {
            logger.info(""String_Node_Str"");
            super.onEvent(event);
            return;
          }
          final MavenExecutionRequest req=session.getRequest();
          manipulationManager.scan(req.getPom(),session);
          final List<Project> projects=session.getProjects();
          for (          final Project project : projects) {
            logger.debug(""String_Node_Str"" + project + ""String_Node_Str""+ project.getPom()+ ""String_Node_Str"");
          }
          manipulationManager.applyManipulations(projects,session);
          break;
        }
    }
    if (ee.getType() == Type.ProjectDiscoveryStarted) {
    }
  }
}
 catch (final ManipulationException e) {
  logger.error(""String_Node_Str"",e);
  session.setError(e);
}
super.onEvent(event);
}","@SuppressWarnings(""String_Node_Str"") @Override public void onEvent(final Object event) throws Exception {
  try {
    if (event instanceof ExecutionEvent) {
      final ExecutionEvent ee=(ExecutionEvent)event;
      final ExecutionEvent.Type type=ee.getType();
switch (type) {
case ProjectDiscoveryStarted:
{
          if (ee.getSession() != null) {
            manipulationManager.init(ee.getSession(),session);
            if (ee.getSession().getRequest().getLoggingLevel() == 0) {
              final ch.qos.logback.classic.Logger root=(ch.qos.logback.classic.Logger)LoggerFactory.getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME);
              root.setLevel(Level.DEBUG);
            }
          }
          if (!session.isEnabled()) {
            logger.info(""String_Node_Str"");
            super.onEvent(event);
            return;
          }
          final MavenExecutionRequest req=session.getRequest();
          manipulationManager.scan(req.getPom(),session);
          final List<Project> projects=session.getProjects();
          for (          final Project project : projects) {
            logger.debug(""String_Node_Str"" + project + ""String_Node_Str""+ project.getPom()+ ""String_Node_Str"");
          }
          manipulationManager.applyManipulations(projects,session);
          break;
        }
    }
    if (ee.getType() == Type.ProjectDiscoveryStarted) {
    }
  }
}
 catch (final ManipulationException e) {
  logger.error(""String_Node_Str"",e);
  session.setError(e);
}
super.onEvent(event);
}",0.8496541681834728
86545,"@SuppressWarnings(""String_Node_Str"") @Override public void onEvent(final Object event) throws Exception {
  try {
    if (event instanceof ExecutionEvent) {
      final ExecutionEvent ee=(ExecutionEvent)event;
      final ExecutionEvent.Type type=ee.getType();
switch (type) {
case ProjectDiscoveryStarted:
{
          if (ee.getSession() != null) {
            manipulationManager.init(ee.getSession(),session);
            if (ee.getSession().getRequest().getLoggingLevel() == 0) {
              final ch.qos.logback.classic.Logger root=(ch.qos.logback.classic.Logger)LoggerFactory.getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME);
              root.setLevel(Level.DEBUG);
            }
          }
          if (!session.isEnabled()) {
            logger.info(""String_Node_Str"");
            super.onEvent(event);
            return;
          }
          final MavenExecutionRequest req=session.getRequest();
          manipulationManager.scan(req.getPom(),session);
          final List<Project> projects=session.getProjects();
          for (          final Project project : projects) {
            logger.debug(""String_Node_Str"" + project + ""String_Node_Str""+ project.getPom()+ ""String_Node_Str"");
          }
          manipulationManager.applyManipulations(projects,session);
          break;
        }
    }
    if (ee.getType() == Type.ProjectDiscoveryStarted) {
    }
  }
}
 catch (final ManipulationException e) {
  logger.error(""String_Node_Str"",e);
  session.setError(e);
}
super.onEvent(event);
}","@SuppressWarnings(""String_Node_Str"") @Override public void onEvent(final Object event) throws Exception {
  try {
    if (event instanceof ExecutionEvent) {
      final ExecutionEvent ee=(ExecutionEvent)event;
      final ExecutionEvent.Type type=ee.getType();
switch (type) {
case ProjectDiscoveryStarted:
{
          if (ee.getSession() != null) {
            if (ee.getSession().getRequest().getLoggingLevel() == 0) {
              final ch.qos.logback.classic.Logger root=(ch.qos.logback.classic.Logger)LoggerFactory.getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME);
              root.setLevel(Level.DEBUG);
            }
            manipulationManager.init(ee.getSession(),session);
          }
          if (!session.isEnabled()) {
            logger.info(""String_Node_Str"");
            super.onEvent(event);
            return;
          }
          final MavenExecutionRequest req=session.getRequest();
          manipulationManager.scan(req.getPom(),session);
          final List<Project> projects=session.getProjects();
          for (          final Project project : projects) {
            logger.debug(""String_Node_Str"" + project + ""String_Node_Str""+ project.getPom()+ ""String_Node_Str"");
          }
          manipulationManager.applyManipulations(projects,session);
          break;
        }
    }
    if (ee.getType() == Type.ProjectDiscoveryStarted) {
    }
  }
}
 catch (final ManipulationException e) {
  logger.error(""String_Node_Str"",e);
  session.setError(e);
}
super.onEvent(event);
}",0.9582781456953644
86546,"/** 
 * Add properties to the build which match the version overrides. The property names are in the format
 * @param session
 */
private void addVersionOverrideProperties(final ManipulationSession session,final Map<String,String> overrides,final Properties props){
  final Properties properties=session.getUserProperties();
  VersionPropertyFormat result=VersionPropertyFormat.VG;
switch (VersionPropertyFormat.valueOf(properties.getProperty(""String_Node_Str"",VersionPropertyFormat.VG.toString()).toUpperCase())) {
case VG:
{
      result=VersionPropertyFormat.VG;
      break;
    }
case VGA:
{
    result=VersionPropertyFormat.VGA;
    break;
  }
case NONE:
{
  result=VersionPropertyFormat.NONE;
  return;
}
}
for (final String currentGA : overrides.keySet()) {
final String versionPropName=""String_Node_Str"" + (result == VersionPropertyFormat.VGA ? currentGA.replace(""String_Node_Str"",""String_Node_Str"") : currentGA.split(""String_Node_Str"")[0]);
props.setProperty(versionPropName,overrides.get(currentGA));
}
}","/** 
 * Add properties to the build which match the version overrides. The property names are in the format
 * @param session
 */
private void addVersionOverrideProperties(final ManipulationSession session,final Map<String,String> overrides,final Properties props){
  final Properties properties=session.getUserProperties();
  VersionPropertyFormat result=VersionPropertyFormat.VG;
switch (VersionPropertyFormat.valueOf(properties.getProperty(""String_Node_Str"",VersionPropertyFormat.VG.toString()).toUpperCase())) {
case VG:
{
      result=VersionPropertyFormat.VG;
      break;
    }
case VGA:
{
    result=VersionPropertyFormat.VGA;
    break;
  }
case NONE:
{
  result=VersionPropertyFormat.NONE;
  return;
}
}
for (final String currentGA : overrides.keySet()) {
logger.debug(""String_Node_Str"",currentGA,overrides.get(currentGA));
final String versionPropName=""String_Node_Str"" + (result == VersionPropertyFormat.VGA ? currentGA.replace(""String_Node_Str"",""String_Node_Str"") : currentGA.split(""String_Node_Str"")[0]);
props.setProperty(versionPropName,overrides.get(currentGA));
}
}",0.9675881792183032
86547,"public void setMavenSession(final MavenSession mavenSession){
  this.mavenSession=mavenSession;
}","public void setMavenSession(final MavenSession mavenSession){
  this.mavenSession=mavenSession;
  final File pom=mavenSession.getRequest().getPom();
  if (pom != null) {
    File dir=pom.getParentFile();
    if (dir == null) {
      dir=pom.getAbsoluteFile().getParentFile();
    }
    markerFile=new File(dir,""String_Node_Str"");
  }
 else {
    markerFile=new File(""String_Node_Str"");
  }
}",0.3975409836065574
86548,"/** 
 * True (enabled) by default, this is the master kill switch for all manipulations. Manipulator implementations MAY also be enabled/disabled  individually.
 * @see #MANIPULATIONS_DISABLED_PROP
 * @see VersioningState#isEnabled()
 */
public boolean isEnabled(){
  return Boolean.valueOf(getUserProperties().getProperty(MANIPULATIONS_DISABLED_PROP,""String_Node_Str""));
}","/** 
 * True (enabled) by default, this is the master kill switch for all manipulations. Manipulator implementations MAY also be enabled/disabled  individually.
 * @see #MANIPULATIONS_DISABLED_PROP
 * @see VersioningState#isEnabled()
 */
public boolean isEnabled(){
  return !Boolean.valueOf(getUserProperties().getProperty(MANIPULATIONS_DISABLED_PROP,""String_Node_Str""));
}",0.998661311914324
86549,"public VersioningState(final Properties userProps){
  suffix=userProps.getProperty(VERSION_SUFFIX_SYSPROP);
  incrementSerialSuffix=userProps.getProperty(INCREMENT_SERIAL_SUFFIX_SYSPROP);
  preserveSnapshot=Boolean.parseBoolean(userProps.getProperty(VERSION_SUFFIX_SNAPSHOT_SYSPROP));
}","public VersioningState(final Properties userProps){
  suffix=userProps.getProperty(VERSION_SUFFIX_SYSPROP);
  incrementSerialSuffix=userProps.getProperty(INCREMENT_SERIAL_SUFFIX_SYSPROP);
  preserveSnapshot=Boolean.parseBoolean(userProps.getProperty(VERSION_SUFFIX_SNAPSHOT_SYSPROP));
  Logger.getLogger(getClass().getName()).info(String.format(""String_Node_Str"",suffix,incrementSerialSuffix,preserveSnapshot));
}",0.8183118741058655
86550,"@Override public void doPost(final HttpServletRequest request,final HttpServletResponse response){
  final String path=request.getServletPath() + (request.getPathInfo() != null ? request.getPathInfo() : ""String_Node_Str"");
  if (""String_Node_Str"".equals(path)) {
    final String key=request.getParameter(""String_Node_Str"");
    final String value=request.getParameter(""String_Node_Str"");
    if (Boolean.valueOf(value.toLowerCase())) {
      favouredCamConfSettings.setProperty(key,Boolean.TRUE.toString());
    }
 else {
      favouredCamConfSettings.remove(key);
    }
    redirectSafely(response,request.getContextPath() + ""String_Node_Str"",logger);
  }
 else   if (""String_Node_Str"".equals(path)) {
    final String type=request.getParameter(""String_Node_Str"");
    final String key=request.getParameter(""String_Node_Str"");
    final String value=request.getParameter(""String_Node_Str"");
    final String page=request.getParameter(""String_Node_Str"");
    final AbstractGPhoto2Command command;
switch (CameraConfigEntryType.valueOf(type)) {
case RADIO:
case MENU:
      command=new GP2CmdSetSettingByIndex(key,Integer.parseInt(value),logger);
    break;
case TOGGLE:
case TEXT:
case DATE:
  command=new GP2CmdSetSetting(key,value,logger);
break;
default :
returnForbidden(request,response);
command=null;
break;
}
if (command != null) {
if (!processCommandFailure(gphoto2CommandService.executeCommand(command),makeVelocityContext(request,response),request,response,logger)) {
redirectSafely(response,request.getContextPath() + (page != null && ""String_Node_Str"".equals(page) ? ""String_Node_Str"" : ""String_Node_Str""),logger);
}
}
}
 else if (""String_Node_Str"".equals(path)) {
final Integer lastPreviewRetriesCount=(Integer)velocityContextService.getGlobalContext().get(""String_Node_Str"");
int previewRetriesCount=lastPreviewRetriesCount == null ? 0 : lastPreviewRetriesCount.intValue();
boolean success=false;
while (!success && previewRetriesCount < 15) {
final GP2CmdCapturePreview command=gphoto2CommandService.executeCommand(new GP2CmdCapturePreview(logger,""String_Node_Str"",true,previewRetriesCount));
if (command.isResultedWithPossibleTimingFailure()) {
previewRetriesCount++;
}
 else {
if (command.getRawErrorOutput() != null && command.getRawErrorOutput().trim().length() > 0) {
processCommandFailure(command,null,request,response,logger);
break;
}
 else {
success=true;
}
}
}
if (success) {
velocityContextService.getGlobalContext().put(""String_Node_Str"",previewRetriesCount);
redirectSafely(response,request.getContextPath() + ""String_Node_Str"",logger);
}
}
 else if (""String_Node_Str"".equals(path)) {
final int imgRefId=Integer.parseInt(request.getParameter(""String_Node_Str""));
if (!processCommandFailure(gphoto2CommandService.executeCommand(new GP2CmdGetThumbnail(request.getParameter(""String_Node_Str""),imgRefId,""String_Node_Str"",logger)),makeVelocityContext(request,response),request,response,logger)) {
redirectSafely(response,request.getContextPath() + ""String_Node_Str"",logger);
}
}
 else if (""String_Node_Str"".equals(path)) {
final int imgRefId=Integer.parseInt(request.getParameter(""String_Node_Str""));
if (!processCommandFailure(gphoto2CommandService.executeCommand(new GP2CmdDeleteFile(request.getParameter(""String_Node_Str""),imgRefId,logger)),makeVelocityContext(request,response),request,response,logger)) {
redirectSafely(response,request.getContextPath() + ""String_Node_Str"",logger);
}
}
 else if (""String_Node_Str"".equals(path)) {
if (!processCommandFailure(gphoto2CommandService.executeCommand(new GP2CmdCaptureImage(true,logger)),null,request,response,logger)) {
redirectSafely(response,request.getContextPath() + ""String_Node_Str"",logger);
}
}
 else if (""String_Node_Str"".equals(path)) {
final GP2CmdCaptureImageAndListFiles cmdCaptureAndList=new GP2CmdCaptureImageAndListFiles(null,logger);
if (!processCommandFailure(gphoto2CommandService.executeCommand(cmdCaptureAndList),null,request,response,logger)) {
final String newlyCapturedImagePath=cmdCaptureAndList.getResultFile();
boolean proceed=true;
if (newlyCapturedImagePath != null && cmdCaptureAndList.getFilesList() != null && cmdCaptureAndList.getFilesList().getByFolder() != null && cmdCaptureAndList.getFilesList().getByRefId() != null) {
final int indexOfLastSlash=newlyCapturedImagePath.lastIndexOf(""String_Node_Str"");
final String fileName=newlyCapturedImagePath.substring(indexOfLastSlash + 1);
final String folderPath=newlyCapturedImagePath.substring(0,indexOfLastSlash);
final Map<String,CameraFileRef> filesInFolder=cmdCaptureAndList.getFilesList().getByFolder().get(folderPath);
if (filesInFolder != null) {
final CameraFileRef resultFileRef=filesInFolder.get(fileName);
if (resultFileRef != null) {
if (processCommandFailure(gphoto2CommandService.executeCommand(new GP2CmdGetThumbnail(folderPath,resultFileRef.getRefId(),""String_Node_Str"",logger)),null,request,response,logger)) {
proceed=false;
}
}
}
}
if (proceed) {
redirectSafely(response,request.getContextPath() + ""String_Node_Str"",logger);
}
}
}
}","@Override public void doPost(final HttpServletRequest request,final HttpServletResponse response){
  final String path=request.getServletPath() + (request.getPathInfo() != null ? request.getPathInfo() : ""String_Node_Str"");
  if (""String_Node_Str"".equals(path)) {
    final String key=request.getParameter(""String_Node_Str"");
    final String value=request.getParameter(""String_Node_Str"");
    if (Boolean.valueOf(value.toLowerCase())) {
      favouredCamConfSettings.setProperty(key,Boolean.TRUE.toString());
    }
 else {
      favouredCamConfSettings.remove(key);
    }
    redirectLocalSafely(request,response,""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(path)) {
    final String type=request.getParameter(""String_Node_Str"");
    final String key=request.getParameter(""String_Node_Str"");
    final String value=request.getParameter(""String_Node_Str"");
    final String page=request.getParameter(""String_Node_Str"");
    final AbstractGPhoto2Command command;
switch (CameraConfigEntryType.valueOf(type)) {
case RADIO:
case MENU:
      command=new GP2CmdSetSettingByIndex(key,Integer.parseInt(value),logger);
    break;
case TOGGLE:
case TEXT:
case DATE:
  command=new GP2CmdSetSetting(key,value,logger);
break;
default :
returnForbidden(request,response);
command=null;
break;
}
if (command != null) {
if (!processCommandFailure(gphoto2CommandService.executeCommand(command),makeVelocityContext(request,response),request,response,logger)) {
if (page != null && ""String_Node_Str"".equals(page)) {
final GP2CmdGetAllCameraConfigurations cameraConfigsCommand=gphoto2CommandService.executeCommand(new GP2CmdGetAllCameraConfigurations(logger));
if (cameraConfigsCommand.getExitCode() == 0) {
velocityContextService.getGlobalContext().put(""String_Node_Str"",cameraConfigsCommand.getCameraConfig());
}
 else {
logger.warn(""String_Node_Str"" + cameraConfigsCommand.getRawErrorOutput());
}
redirectLocalSafely(request,response,""String_Node_Str"");
}
 else {
redirectLocalSafely(request,response,""String_Node_Str"");
}
}
}
}
 else if (""String_Node_Str"".equals(path)) {
final Integer lastPreviewRetriesCount=(Integer)velocityContextService.getGlobalContext().get(""String_Node_Str"");
int previewRetriesCount=lastPreviewRetriesCount == null ? 0 : lastPreviewRetriesCount.intValue();
boolean success=false;
while (!success && previewRetriesCount < 15) {
final GP2CmdCapturePreview command=gphoto2CommandService.executeCommand(new GP2CmdCapturePreview(logger,""String_Node_Str"",true,previewRetriesCount));
if (command.isResultedWithPossibleTimingFailure()) {
previewRetriesCount++;
}
 else {
if (command.getRawErrorOutput() != null && command.getRawErrorOutput().trim().length() > 0) {
processCommandFailure(command,null,request,response,logger);
break;
}
 else {
success=true;
}
}
}
if (success) {
velocityContextService.getGlobalContext().put(""String_Node_Str"",previewRetriesCount);
redirectLocalSafely(request,response,""String_Node_Str"");
}
}
 else if (""String_Node_Str"".equals(path)) {
final int imgRefId=Integer.parseInt(request.getParameter(""String_Node_Str""));
if (!processCommandFailure(gphoto2CommandService.executeCommand(new GP2CmdGetThumbnail(request.getParameter(""String_Node_Str""),imgRefId,""String_Node_Str"",logger)),makeVelocityContext(request,response),request,response,logger)) {
redirectLocalSafely(request,response,""String_Node_Str"");
}
}
 else if (""String_Node_Str"".equals(path)) {
final int imgRefId=Integer.parseInt(request.getParameter(""String_Node_Str""));
if (!processCommandFailure(gphoto2CommandService.executeCommand(new GP2CmdDeleteFile(request.getParameter(""String_Node_Str""),imgRefId,logger)),makeVelocityContext(request,response),request,response,logger)) {
redirectLocalSafely(request,response,""String_Node_Str"");
}
}
 else if (""String_Node_Str"".equals(path)) {
if (!processCommandFailure(gphoto2CommandService.executeCommand(new GP2CmdCaptureImage(true,logger)),null,request,response,logger)) {
redirectLocalSafely(request,response,""String_Node_Str"");
}
}
 else if (""String_Node_Str"".equals(path)) {
final GP2CmdCaptureImageAndListFiles cmdCaptureAndList=new GP2CmdCaptureImageAndListFiles(null,logger);
if (!processCommandFailure(gphoto2CommandService.executeCommand(cmdCaptureAndList),null,request,response,logger)) {
final String newlyCapturedImagePath=cmdCaptureAndList.getResultFile();
boolean proceed=true;
if (newlyCapturedImagePath != null && cmdCaptureAndList.getFilesList() != null && cmdCaptureAndList.getFilesList().getByFolder() != null && cmdCaptureAndList.getFilesList().getByRefId() != null) {
final int indexOfLastSlash=newlyCapturedImagePath.lastIndexOf(""String_Node_Str"");
final String fileName=newlyCapturedImagePath.substring(indexOfLastSlash + 1);
final String folderPath=newlyCapturedImagePath.substring(0,indexOfLastSlash);
final Map<String,CameraFileRef> filesInFolder=cmdCaptureAndList.getFilesList().getByFolder().get(folderPath);
if (filesInFolder != null) {
final CameraFileRef resultFileRef=filesInFolder.get(fileName);
if (resultFileRef != null) {
if (processCommandFailure(gphoto2CommandService.executeCommand(new GP2CmdGetThumbnail(folderPath,resultFileRef.getRefId(),""String_Node_Str"",logger)),null,request,response,logger)) {
proceed=false;
}
}
}
}
if (proceed) {
redirectLocalSafely(request,response,""String_Node_Str"");
}
}
}
}",0.843853175373859
86551,"public void applyFullGameState(NetGameState gs){
  clearGameState();
  applyGameStats(gs.stats);
  if (gs.entities != null) {
    int size=gs.entities.length;
    for (int i=0; i < size; i++) {
      NetEntity netEnt=gs.entities[i];
      if (netEnt != null) {
        createEntity(netEnt);
      }
    }
  }
  NetGameTypeInfo gameType=gs.gameType;
  if (gameType != null) {
    this.gameType=GameType.Type.fromNet(gameType.type);
    if (gameType.alliedTeam.isAttacker) {
      this.attackingTeam=ClientTeam.fromId(gameType.alliedTeam.id);
    }
 else {
      this.attackingTeam=ClientTeam.fromId(gameType.axisTeam.id);
    }
    if (gameType.alliedTeam.isDefender) {
      this.defendingTeam=ClientTeam.fromId(gameType.alliedTeam.id);
    }
 else {
      this.defendingTeam=ClientTeam.fromId(gameType.axisTeam.id);
    }
    if (this.gameType == GameType.Type.CMD) {
    }
 else     if (this.gameType == GameType.Type.CTF) {
      NetCtfGameTypeInfo ctfInfo=(NetCtfGameTypeInfo)gameType;
      this.gameEffects.addCtfInformation(ctfInfo);
    }
  }
  NetMapDestructables destructables=gs.mapDestructables;
  if (destructables != null) {
    this.map.removeDestructableTilesAt(destructables.tiles);
  }
}","public void applyFullGameState(NetGameState gs){
  clearGameState();
  applyGameStats(gs.stats);
  if (gs.entities != null) {
    int size=gs.entities.length;
    for (int i=0; i < size; i++) {
      NetEntity netEnt=gs.entities[i];
      if (netEnt != null) {
        createEntity(netEnt);
      }
    }
  }
  NetGameTypeInfo gameType=gs.gameType;
  if (gameType != null) {
    this.gameType=GameType.Type.fromNet(gameType.type);
    if (gameType.alliedTeam.isAttacker) {
      this.attackingTeam=ClientTeam.fromId(gameType.alliedTeam.id);
    }
 else {
      this.attackingTeam=ClientTeam.fromId(gameType.axisTeam.id);
    }
    if (gameType.alliedTeam.isDefender) {
      this.defendingTeam=ClientTeam.fromId(gameType.alliedTeam.id);
    }
 else {
      this.defendingTeam=ClientTeam.fromId(gameType.axisTeam.id);
    }
    if (this.gameType == GameType.Type.CMD) {
    }
 else     if (this.gameType == GameType.Type.CTF) {
      NetCtfGameTypeInfo ctfInfo=(NetCtfGameTypeInfo)gameType;
      this.gameEffects.addCtfInformation(ctfInfo);
    }
  }
  NetMapDestructables destructables=gs.mapDestructables;
  if (destructables != null) {
    this.map.removeDestructableTilesAt(destructables.tiles);
  }
  NetMapAdditions additions=gs.mapAdditions;
  if (additions != null && additions.tiles != null) {
    for (int i=0; i < additions.tiles.length; i++) {
      NetMapAddition addition=additions.tiles[i];
      addTile(addition);
    }
  }
}",0.910464676992822
86552,"@Override protected GameState doUpdate(Game game,TimeStep timeStep){
  this.startTimer.update(timeStep);
  if (this.startTimer.isOnFirstTime()) {
    this.availablePlayers.clear();
    initializeGame(game);
    for (    Player player : getAxisTeam().getPlayers()) {
      this.availablePlayers.add(player);
    }
    for (    Player player : getAlliedTeam().getPlayers()) {
      super.spawnPlayer(player,game);
    }
    getDispatcher().queueEvent(new RoundStartedEvent(this));
  }
  return this.currentGameState;
}","@Override protected GameState doUpdate(Game game,TimeStep timeStep){
  this.startTimer.update(timeStep);
  if (this.startTimer.isOnFirstTime()) {
    this.availablePlayers.clear();
    initializeGame(game);
    for (    Player player : getAxisTeam().getPlayers()) {
      this.availablePlayers.add(player);
    }
    for (    Player player : getAlliedTeam().getPlayers()) {
      super.spawnPlayer(player,game);
    }
    getDispatcher().queueEvent(new RoundStartedEvent(this));
  }
  checkSpectating(timeStep,game);
  return this.currentGameState;
}",0.9681050656660412
86553,"public boolean canAddTile(Vector2f tilePos){
  int tileX=(int)tilePos.x;
  int tileY=(int)tilePos.y;
  if (!map.hasWorldCollidableTile(tileX,tileY)) {
    Tile groundTile=map.getWorldTile(0,tileX,tileY);
    Rectangle bounds=groundTile.getBounds();
    for (int i=0; i < this.players.getMaxNumberOfPlayers(); i++) {
      ClientPlayer player=this.players.getPlayer(i);
      if (player != null && player.isAlive()) {
        ClientPlayerEntity ent=player.getEntity();
        if (ent.isRelativelyUpdated() && ent.getBounds().intersects(bounds)) {
          return false;
        }
      }
    }
    return true;
  }
  return false;
}","public boolean canAddTile(Vector2f tilePos){
  int tileX=(int)tilePos.x;
  int tileY=(int)tilePos.y;
  if (!map.hasWorldCollidableTile(tileX,tileY)) {
    Tile groundTile=map.getWorldTile(0,tileX,tileY);
    if (groundTile == null) {
      return false;
    }
    Rectangle bounds=groundTile.getBounds();
    for (int i=0; i < this.players.getMaxNumberOfPlayers(); i++) {
      ClientPlayer player=this.players.getPlayer(i);
      if (player != null && player.isAlive()) {
        ClientPlayerEntity ent=player.getEntity();
        if (ent.isRelativelyUpdated() && ent.getBounds().intersects(bounds)) {
          return false;
        }
      }
    }
    return true;
  }
  return false;
}",0.957639939485628
86554,"public DefaultMapObject(boolean loadAssets,MapObjectDefinition definition,MapObjectData data){
  super(data);
  this.loadAssets=loadAssets;
  this.pos.set(data.x,data.y);
  this.surfaceType=SurfaceType.fromString(definition.surfaceType);
  Rectangle rect=new Rectangle((int)data.width,(int)data.height);
  rect.setLocation(pos);
  if (definition.width != 0 && definition.height != 0) {
    rect.setSize((int)definition.width,(int)definition.height);
  }
  this.onTouched=definition.onTouched;
  this.onLoad=definition.onLoad;
  this.rotation=data.rotation;
  float rotRadians=(float)Math.toRadians(data.rotation);
  this.obb=new OBB(rect);
  this.obb.rotateAround(pos,rotRadians);
  if (definition.allowRotation) {
    int length=(int)this.obb.length();
    this.bounds.setSize(length,length);
    this.bounds.centerAround(this.obb.getCenter());
  }
 else {
    this.bounds.set(rect);
  }
  this.heightMask=definition.heightMask;
  this.isCollidable=definition.isCollidable;
  if (data.properties != null) {
    if (data.properties.containsKeyByString(""String_Node_Str"")) {
      String heightMask=data.properties.getString(""String_Node_Str"");
      this.heightMask=Integer.valueOf(heightMask);
    }
    if (data.properties.containsKeyByString(""String_Node_Str"")) {
      this.isCollidable=true;
    }
    if (data.properties.containsKeyByString(""String_Node_Str"")) {
      this.onTouched=LeoObject.valueOf(data.properties.getString(""String_Node_Str""));
    }
    if (data.properties.containsKeyByString(""String_Node_Str"")) {
      this.onLoad=LeoObject.valueOf(data.properties.getString(""String_Node_Str""));
    }
  }
  if (loadAssets && definition.image != null) {
    ImageData image=definition.image;
    TextureRegion texture=TextureUtil.loadImage(image.path);
    if (image.width > 0) {
      texture=TextureUtil.subImage(texture,image.x,image.y,image.width,image.height);
    }
    this.sprite=new Sprite(texture);
    this.sprite.setSize(rect.width,rect.height);
    this.sprite.setOrigin(0,0);
    this.sprite.setRotation(data.rotation);
  }
}","public DefaultMapObject(boolean loadAssets,MapObjectDefinition definition,MapObjectData data){
  super(data);
  this.loadAssets=loadAssets;
  this.pos.set(data.x,data.y);
  this.surfaceType=SurfaceType.fromString(definition.surfaceType);
  Rectangle rect=new Rectangle((int)data.width,(int)data.height);
  rect.setLocation(pos);
  if (definition.width != 0 && definition.height != 0) {
    rect.setSize((int)definition.width,(int)definition.height);
  }
  float imageWidth=rect.width;
  float imageHeight=rect.height;
  if (definition.imageWidth != 0) {
    imageWidth=definition.imageWidth;
  }
  if (definition.imageHeight != 0) {
    imageHeight=definition.imageHeight;
  }
  this.centerSprite=definition.centerSprite;
  this.onTouched=definition.onTouched;
  this.onLoad=definition.onLoad;
  this.rotation=data.rotation;
  float rotRadians=(float)Math.toRadians(data.rotation);
  this.obb=new OBB(rect);
  this.obb.rotateAround(pos,rotRadians);
  if (definition.allowRotation) {
    int length=(int)this.obb.length();
    this.bounds.setSize(length,length);
    this.bounds.centerAround(this.obb.getCenter());
  }
 else {
    this.bounds.set(rect);
  }
  this.heightMask=definition.heightMask;
  this.isCollidable=definition.isCollidable;
  this.isForeground=definition.isForeground;
  if (data.properties != null) {
    if (data.properties.containsKeyByString(""String_Node_Str"")) {
      String heightMask=data.properties.getString(""String_Node_Str"");
      this.heightMask=Integer.valueOf(heightMask);
    }
    if (data.properties.containsKeyByString(""String_Node_Str"")) {
      this.isCollidable=true;
    }
    if (data.properties.containsKeyByString(""String_Node_Str"")) {
      this.onTouched=LeoObject.valueOf(data.properties.getString(""String_Node_Str""));
    }
    if (data.properties.containsKeyByString(""String_Node_Str"")) {
      this.onLoad=LeoObject.valueOf(data.properties.getString(""String_Node_Str""));
    }
  }
  if (loadAssets && definition.image != null) {
    ImageData image=definition.image;
    TextureRegion texture=TextureUtil.loadImage(image.path);
    if (image.width > 0) {
      texture=TextureUtil.subImage(texture,image.x,image.y,image.width,image.height);
    }
    this.sprite=new Sprite(texture);
    this.sprite.setSize(imageWidth,imageHeight);
    this.sprite.setOrigin(0,0);
    this.sprite.setRotation(data.rotation);
  }
}",0.9237384023534736
86555,"@Override public void render(Canvas canvas,Camera camera,float alpha){
  if (this.loadAssets && this.sprite != null) {
    Vector2f cameraPos=camera.getRenderPosition(alpha);
    float x=this.pos.x - cameraPos.x;
    float y=this.pos.y - cameraPos.y;
    this.sprite.setPosition(x,y);
    canvas.drawRawSprite(this.sprite);
  }
}","@Override public void render(Canvas canvas,Camera camera,float alpha){
  if (this.loadAssets && this.sprite != null) {
    Vector2f cameraPos=camera.getRenderPosition(alpha);
    Vector2f pos=centerSprite ? getCenterPos() : this.pos;
    float x=pos.x - cameraPos.x;
    float y=pos.y - cameraPos.y;
    this.sprite.setPosition(x,y);
    canvas.drawRawSprite(this.sprite);
  }
}",0.9024045261669024
86556,"private void renderMapObjects(Canvas canvas,Camera camera,float alpha){
  Rectangle viewport=camera.getWorldViewPort();
  for (int i=0; i < this.mapObjects.size(); i++) {
    MapObject object=this.mapObjects.get(i);
    if (viewport.intersects(object.getBounds())) {
      object.render(canvas,camera,alpha);
    }
  }
}","private void renderMapObjects(Canvas canvas,Camera camera,float alpha,List<MapObject> mapObjects){
  Rectangle viewport=camera.getWorldViewPort();
  for (int i=0; i < mapObjects.size(); i++) {
    MapObject object=mapObjects.get(i);
    if (viewport.intersects(object.getBounds())) {
      object.render(canvas,camera,alpha);
    }
  }
}",0.6179604261796042
86557,"public void init(SceneDef info) throws Exception {
  destroy();
  List<Layer> collidableLayers=new ArrayList<Layer>();
  List<Layer> destructableLayers=new ArrayList<Layer>();
  int bgSize=info.getBackgroundLayers().length;
  this.backgroundLayers=new Layer[bgSize];
  for (int i=0; i < bgSize; i++) {
    this.backgroundLayers[i]=info.getBackgroundLayers()[i];
    if (this.backgroundLayers[i].collidable()) {
      collidableLayers.add(this.backgroundLayers[i]);
    }
    if (this.backgroundLayers[i].isDestructable()) {
      destructableLayers.add(this.backgroundLayers[i]);
    }
  }
  int fgSize=info.getForegroundLayers().length;
  this.foregroundLayers=new Layer[fgSize];
  for (int i=0; i < fgSize; i++) {
    this.foregroundLayers[i]=info.getForegroundLayers()[i];
    if (this.foregroundLayers[i].isDestructable()) {
      destructableLayers.add(this.foregroundLayers[i]);
    }
  }
  this.collidableLayers=new Layer[collidableLayers.size()];
  this.collidableLayers=collidableLayers.toArray(this.collidableLayers);
  this.destructableLayer=new Layer[destructableLayers.size()];
  this.destructableLayer=destructableLayers.toArray(this.destructableLayer);
  this.backgroundImage=info.getBackgroundImage();
  this.maxX=info.getDimensionX();
  this.maxY=info.getDimensionY();
  this.tileWidth=info.getTileWidth();
  this.tileHeight=info.getTileHeight();
  Vector2f worldCoordinates=tileToWorld(this.maxX,this.maxY);
  this.mapWidth=(int)worldCoordinates.x;
  this.mapHeight=(int)worldCoordinates.y;
  this.worldBounds=new Rectangle(0,0,this.mapWidth,this.mapHeight);
  this.atlas=info.getAtlas();
  this.mapObjects=info.getMapObjects();
  this.mapObjectsFactory=info.getMapObjectsFactory();
  for (int i=0; i < this.destructableLayer.length; i++) {
    Layer layer=this.destructableLayer[i];
    if (layer.collidable() && layer.isDestructable() && layer.getHeightMask() == 0) {
      this.collisionLayerToAddTiles=layer;
    }
  }
  this.surfaces=info.getSurfaces();
  if (this.shadeTilesLookup != null) {
    this.shadeTilesLookup=createShadeLookup(75);
  }
}","public void init(SceneDef info) throws Exception {
  destroy();
  List<Layer> collidableLayers=new ArrayList<Layer>();
  List<Layer> destructableLayers=new ArrayList<Layer>();
  int bgSize=info.getBackgroundLayers().length;
  this.backgroundLayers=new Layer[bgSize];
  for (int i=0; i < bgSize; i++) {
    this.backgroundLayers[i]=info.getBackgroundLayers()[i];
    if (this.backgroundLayers[i].collidable()) {
      collidableLayers.add(this.backgroundLayers[i]);
    }
    if (this.backgroundLayers[i].isDestructable()) {
      destructableLayers.add(this.backgroundLayers[i]);
    }
  }
  int fgSize=info.getForegroundLayers().length;
  this.foregroundLayers=new Layer[fgSize];
  for (int i=0; i < fgSize; i++) {
    this.foregroundLayers[i]=info.getForegroundLayers()[i];
    if (this.foregroundLayers[i].isDestructable()) {
      destructableLayers.add(this.foregroundLayers[i]);
    }
  }
  this.collidableLayers=new Layer[collidableLayers.size()];
  this.collidableLayers=collidableLayers.toArray(this.collidableLayers);
  this.destructableLayer=new Layer[destructableLayers.size()];
  this.destructableLayer=destructableLayers.toArray(this.destructableLayer);
  this.backgroundImage=info.getBackgroundImage();
  this.maxX=info.getDimensionX();
  this.maxY=info.getDimensionY();
  this.tileWidth=info.getTileWidth();
  this.tileHeight=info.getTileHeight();
  Vector2f worldCoordinates=tileToWorld(this.maxX,this.maxY);
  this.mapWidth=(int)worldCoordinates.x;
  this.mapHeight=(int)worldCoordinates.y;
  this.worldBounds=new Rectangle(0,0,this.mapWidth,this.mapHeight);
  this.atlas=info.getAtlas();
  this.mapObjects=info.getMapObjects();
  this.mapObjectsFactory=info.getMapObjectsFactory();
  for (int i=0; i < this.mapObjects.size(); i++) {
    MapObject object=this.mapObjects.get(i);
    if (object.isForeground()) {
      this.foregroundMapObjects.add(object);
    }
 else {
      this.backgroundMapObjects.add(object);
    }
  }
  for (int i=0; i < this.destructableLayer.length; i++) {
    Layer layer=this.destructableLayer[i];
    if (layer.collidable() && layer.isDestructable() && layer.getHeightMask() == 0) {
      this.collisionLayerToAddTiles=layer;
    }
  }
  this.surfaces=info.getSurfaces();
  if (this.shadeTilesLookup != null) {
    this.shadeTilesLookup=createShadeLookup(75);
  }
}",0.9336071184120466
86558,"public void destroy(){
  if (this.backgroundLayers != null) {
    for (int i=0; i < this.backgroundLayers.length; i++) {
      Layer layer=this.backgroundLayers[i];
      if (layer == null) {
        continue;
      }
      for (int j=0; j < this.backgroundLayers[i].numberOfRows(); j++) {
        this.backgroundLayers[i].destroy();
      }
      this.backgroundLayers[i]=null;
    }
  }
  this.backgroundLayers=null;
  if (this.foregroundLayers != null) {
    for (int i=0; i < this.foregroundLayers.length; i++) {
      Layer layer=this.foregroundLayers[i];
      if (layer == null) {
        continue;
      }
      for (int j=0; j < this.foregroundLayers[i].numberOfRows(); j++) {
        this.foregroundLayers[i].destroy();
      }
      this.foregroundLayers[i]=null;
    }
  }
  this.foregroundLayers=null;
  this.collidableLayers=null;
  this.surfaces=null;
  this.mapOffset=null;
  this.backgroundImage=null;
  this.mapHeight=0;
  this.mapWidth=0;
  this.maxX=0;
  this.maxY=0;
  this.tileHeight=0;
  this.tileWidth=0;
  this.destroyedTiles.clear();
  this.destructableLayer=null;
  if (this.backgroundImage != null) {
    this.backgroundImage.getTexture().dispose();
  }
  if (this.atlas != null) {
    this.atlas.destroy();
  }
  if (this.mapObjects != null) {
    for (    MapObject object : this.mapObjects) {
      object.destroy();
    }
    this.mapObjects.clear();
  }
}","public void destroy(){
  if (this.backgroundLayers != null) {
    for (int i=0; i < this.backgroundLayers.length; i++) {
      Layer layer=this.backgroundLayers[i];
      if (layer == null) {
        continue;
      }
      for (int j=0; j < this.backgroundLayers[i].numberOfRows(); j++) {
        this.backgroundLayers[i].destroy();
      }
      this.backgroundLayers[i]=null;
    }
  }
  this.backgroundLayers=null;
  if (this.foregroundLayers != null) {
    for (int i=0; i < this.foregroundLayers.length; i++) {
      Layer layer=this.foregroundLayers[i];
      if (layer == null) {
        continue;
      }
      for (int j=0; j < this.foregroundLayers[i].numberOfRows(); j++) {
        this.foregroundLayers[i].destroy();
      }
      this.foregroundLayers[i]=null;
    }
  }
  this.foregroundLayers=null;
  this.collidableLayers=null;
  this.surfaces=null;
  this.mapOffset=null;
  this.backgroundImage=null;
  this.mapHeight=0;
  this.mapWidth=0;
  this.maxX=0;
  this.maxY=0;
  this.tileHeight=0;
  this.tileWidth=0;
  this.destroyedTiles.clear();
  this.destructableLayer=null;
  if (this.backgroundImage != null) {
    this.backgroundImage.getTexture().dispose();
  }
  if (this.atlas != null) {
    this.atlas.destroy();
  }
  if (this.mapObjects != null) {
    for (    MapObject object : this.mapObjects) {
      object.destroy();
    }
    this.mapObjects.clear();
    this.foregroundMapObjects.clear();
    this.backgroundMapObjects.clear();
  }
}",0.9726699369306236
86559,"/** 
 * Constructs a new   {@link OrthoMap}.
 */
public OrthoMap(boolean loadAssets){
  this.currentFrameViewport=new Rectangle();
  this.destroyedTiles=new ArrayList<Tile>();
  this.addedTiles=new ArrayList<>();
  this.collisionTilePos=new Vector2f();
  if (loadAssets) {
    this.shadeTilesLookup=new HashMap<Integer,TextureRegion>();
  }
  destroy();
}","/** 
 * Constructs a new   {@link OrthoMap}.
 */
public OrthoMap(boolean loadAssets){
  this.currentFrameViewport=new Rectangle();
  this.destroyedTiles=new ArrayList<Tile>();
  this.addedTiles=new ArrayList<>();
  this.collisionTilePos=new Vector2f();
  this.backgroundMapObjects=new ArrayList<>();
  this.foregroundMapObjects=new ArrayList<>();
  if (loadAssets) {
    this.shadeTilesLookup=new HashMap<Integer,TextureRegion>();
  }
  destroy();
}",0.8830845771144279
86560,"public void render(Canvas canvas,Camera camera,float alpha){
  Vector2f camPos=camera.getRenderPosition(alpha);
  Rectangle viewport=camera.getViewPort();
  this.currentFrameViewport.setBounds(viewport);
  this.mapOffset=camPos;
  int vx=viewport.getX();
  int vy=viewport.getY();
  int pixelX=0;
  int pixelY=0;
  int indexX=0;
  int indexY=0;
  int toIndex_x=0, toIndex_y=0;
  int camPosX=(int)(camPos.x);
  int camPosY=(int)(camPos.y);
  int tileOffset_x=-(camPosX % this.tileWidth);
  toIndex_x=(tileOffset_x + camPosX) / this.tileWidth;
  int tileOffset_y=-(camPosY % this.tileHeight);
  toIndex_y=(tileOffset_y + camPosY) / this.tileHeight;
  renderBackground(canvas,camera);
  indexY=toIndex_y;
  for (pixelY=tileOffset_y; pixelY < viewport.getHeight() && indexY < this.maxY; pixelY+=this.tileHeight, indexY++) {
    for (pixelX=tileOffset_x, indexX=toIndex_x; pixelX < viewport.getWidth() && indexX < this.maxX; pixelX+=this.tileWidth, indexX++) {
      if ((indexY >= 0 && indexX >= 0) && (indexY < this.maxY && indexX < this.maxX)) {
        for (int i=0; i < this.backgroundLayers.length; i++) {
          Layer layer=this.backgroundLayers[i];
          if (layer == null) {
            continue;
          }
          if (layer.isPropertyLayer()) {
            continue;
          }
          Tile tile=layer.getRow(indexY)[indexX];
          if (tile != null) {
            tile.setRenderingPosition(pixelX + vx,pixelY + vy);
            tile.render(canvas,camera,alpha);
          }
        }
      }
    }
  }
  renderMapObjects(canvas,camera,alpha);
}","public void render(Canvas canvas,Camera camera,float alpha){
  Vector2f camPos=camera.getRenderPosition(alpha);
  Rectangle viewport=camera.getViewPort();
  this.currentFrameViewport.setBounds(viewport);
  this.mapOffset=camPos;
  int vx=viewport.getX();
  int vy=viewport.getY();
  int pixelX=0;
  int pixelY=0;
  int indexX=0;
  int indexY=0;
  int toIndex_x=0, toIndex_y=0;
  int camPosX=(int)(camPos.x);
  int camPosY=(int)(camPos.y);
  int tileOffset_x=-(camPosX % this.tileWidth);
  toIndex_x=(tileOffset_x + camPosX) / this.tileWidth;
  int tileOffset_y=-(camPosY % this.tileHeight);
  toIndex_y=(tileOffset_y + camPosY) / this.tileHeight;
  renderBackground(canvas,camera);
  indexY=toIndex_y;
  for (pixelY=tileOffset_y; pixelY < viewport.getHeight() && indexY < this.maxY; pixelY+=this.tileHeight, indexY++) {
    for (pixelX=tileOffset_x, indexX=toIndex_x; pixelX < viewport.getWidth() && indexX < this.maxX; pixelX+=this.tileWidth, indexX++) {
      if ((indexY >= 0 && indexX >= 0) && (indexY < this.maxY && indexX < this.maxX)) {
        for (int i=0; i < this.backgroundLayers.length; i++) {
          Layer layer=this.backgroundLayers[i];
          if (layer == null) {
            continue;
          }
          if (layer.isPropertyLayer()) {
            continue;
          }
          Tile tile=layer.getRow(indexY)[indexX];
          if (tile != null) {
            tile.setRenderingPosition(pixelX + vx,pixelY + vy);
            tile.render(canvas,camera,alpha);
          }
        }
      }
    }
  }
  renderMapObjects(canvas,camera,alpha,this.backgroundMapObjects);
}",0.991772151898734
86561,"public void renderForeground(Canvas canvas,Camera camera,float alpha){
  Vector2f camPos=camera.getRenderPosition(alpha);
  Rectangle viewport=camera.getViewPort();
  int vx=viewport.getX();
  int vy=viewport.getY();
  int pixelX=0;
  int pixelY=0;
  int indexX=0;
  int indexY=0;
  int toIndex_x=0, toIndex_y=0;
  int tileOffset_x=-((int)camPos.x % this.tileWidth);
  toIndex_x=(tileOffset_x + (int)camPos.x) / this.tileWidth;
  int tileOffset_y=-((int)camPos.y % this.tileHeight);
  toIndex_y=(tileOffset_y + (int)camPos.y) / this.tileHeight;
  indexY=toIndex_y;
  for (pixelY=tileOffset_y; pixelY < viewport.getHeight() && indexY < this.maxY; pixelY+=this.tileHeight, indexY++) {
    for (pixelX=tileOffset_x, indexX=toIndex_x; pixelX < viewport.getWidth() && indexX < this.maxX; pixelX+=this.tileWidth, indexX++) {
      if ((indexY >= 0 && indexX >= 0) && (indexY < this.maxY && indexX < this.maxX)) {
        for (int i=0; i < this.foregroundLayers.length; i++) {
          Layer layer=this.foregroundLayers[i];
          if (layer == null) {
            continue;
          }
          if (layer.isPropertyLayer()) {
            continue;
          }
          Tile tile=layer.getRow(indexY)[indexX];
          if (tile != null) {
            tile.setRenderingPosition(pixelX + vx,pixelY + vy);
            tile.render(canvas,camera,alpha);
          }
        }
      }
    }
  }
}","public void renderForeground(Canvas canvas,Camera camera,float alpha){
  Vector2f camPos=camera.getRenderPosition(alpha);
  Rectangle viewport=camera.getViewPort();
  int vx=viewport.getX();
  int vy=viewport.getY();
  int pixelX=0;
  int pixelY=0;
  int indexX=0;
  int indexY=0;
  int toIndex_x=0, toIndex_y=0;
  int tileOffset_x=-((int)camPos.x % this.tileWidth);
  toIndex_x=(tileOffset_x + (int)camPos.x) / this.tileWidth;
  int tileOffset_y=-((int)camPos.y % this.tileHeight);
  toIndex_y=(tileOffset_y + (int)camPos.y) / this.tileHeight;
  indexY=toIndex_y;
  for (pixelY=tileOffset_y; pixelY < viewport.getHeight() && indexY < this.maxY; pixelY+=this.tileHeight, indexY++) {
    for (pixelX=tileOffset_x, indexX=toIndex_x; pixelX < viewport.getWidth() && indexX < this.maxX; pixelX+=this.tileWidth, indexX++) {
      if ((indexY >= 0 && indexX >= 0) && (indexY < this.maxY && indexX < this.maxX)) {
        for (int i=0; i < this.foregroundLayers.length; i++) {
          Layer layer=this.foregroundLayers[i];
          if (layer == null) {
            continue;
          }
          if (layer.isPropertyLayer()) {
            continue;
          }
          Tile tile=layer.getRow(indexY)[indexX];
          if (tile != null) {
            tile.setRenderingPosition(pixelX + vx,pixelY + vy);
            tile.render(canvas,camera,alpha);
          }
        }
      }
    }
  }
  renderMapObjects(canvas,camera,alpha,this.foregroundMapObjects);
}",0.9764499121265378
86562,"/** 
 * @param game
 * @param owner
 */
public RocketLauncher(Game game,Entity owner){
  super(game,owner,Type.ROCKET_LAUNCHER);
  this.damage=120;
  this.reloadTime=0;
  this.clipSize=5;
  this.totalAmmo=0;
  this.bulletsInClip=this.clipSize;
  this.lineOfSight=WeaponConstants.RPG_LINE_OF_SIGHT;
  this.weaponWeight=WeaponConstants.RPG_WEIGHT;
  applyScriptAttributes(""String_Node_Str"");
}","/** 
 * @param game
 * @param owner
 */
public RocketLauncher(Game game,Entity owner){
  super(game,owner,Type.ROCKET_LAUNCHER);
  this.damage=120;
  this.reloadTime=0;
  this.clipSize=5;
  this.totalAmmo=0;
  this.bulletsInClip=this.clipSize;
  this.lineOfSight=WeaponConstants.RPG_LINE_OF_SIGHT;
  this.weaponWeight=WeaponConstants.RPG_WEIGHT;
  this.endFire=true;
  applyScriptAttributes(""String_Node_Str"");
}",0.9738480697384808
86563,"/** 
 * Loads any map scripts and/or special entities associated with the game map.  This should be invoked every time a new Round begins  
 */
private void loadMapScripts(){
  File propertiesFile=new File(gameMap.getMapFileName() + ""String_Node_Str"");
  if (propertiesFile.exists()) {
    try {
      this.eventRegistration.unregisterListeners();
      Leola runtime=Scripting.newSandboxedRuntime();
      runtime.loadStatics(SeventhScriptingCommonLibrary.class);
      GameServerLeolaLibrary gLib=new GameServerLeolaLibrary(this);
      runtime.loadLibrary(gLib,""String_Node_Str"");
      AILeolaLibrary aiLib=new AILeolaLibrary(this.aiSystem);
      runtime.loadLibrary(aiLib,""String_Node_Str"");
      runtime.put(""String_Node_Str"",this);
      runtime.eval(propertiesFile);
      this.collidableMapObjects.clear();
      List<MapObject> objects=map.getMapObjects();
      for (int i=0; i < objects.size(); i++) {
        MapObject mapObject=objects.get(i);
        mapObject.onLoad(this);
        if (mapObject.isCollidable()) {
          this.collidableMapObjects.add(mapObject);
        }
      }
    }
 catch (    Exception e) {
      Cons.println(""String_Node_Str"" + propertiesFile.getName() + ""String_Node_Str"");
      Cons.println(e);
    }
  }
}","/** 
 * Loads any map scripts and/or special entities associated with the game map.  This should be invoked every time a new Round begins  
 */
private void loadMapScripts(){
  this.eventRegistration.unregisterListeners();
  File propertiesFile=new File(gameMap.getMapFileName() + ""String_Node_Str"");
  if (propertiesFile.exists()) {
    try {
      Leola runtime=Scripting.newSandboxedRuntime();
      runtime.loadStatics(SeventhScriptingCommonLibrary.class);
      GameServerLeolaLibrary gLib=new GameServerLeolaLibrary(this);
      runtime.loadLibrary(gLib,""String_Node_Str"");
      AILeolaLibrary aiLib=new AILeolaLibrary(this.aiSystem);
      runtime.loadLibrary(aiLib,""String_Node_Str"");
      runtime.put(""String_Node_Str"",this);
      runtime.eval(propertiesFile);
    }
 catch (    Exception e) {
      Cons.println(""String_Node_Str"" + propertiesFile.getName() + ""String_Node_Str"");
      Cons.println(e);
    }
  }
  this.collidableMapObjects.clear();
  List<MapObject> objects=map.getMapObjects();
  for (int i=0; i < objects.size(); i++) {
    MapObject mapObject=objects.get(i);
    mapObject.onLoad(this);
    if (mapObject.isCollidable()) {
      this.collidableMapObjects.add(mapObject);
    }
  }
}",0.8226720647773279
86564,"@Override public void damage(Entity damager,int amount){
  if (damager instanceof Explosion) {
    amount=1;
  }
 else   if (damager instanceof Rocket) {
  }
 else   if (damager instanceof Bullet) {
    amount=0;
  }
 else {
    amount/=10;
  }
  armor-=amount;
  if (armor < 0) {
    super.damage(damager,amount);
  }
}","@Override public void damage(Entity damager,int amount){
  if (damager instanceof Explosion) {
    amount=1;
  }
 else   if (damager instanceof Rocket) {
  }
 else   if (damager instanceof Bullet) {
    amount=0;
  }
 else {
    amount/=10;
  }
  armor-=amount;
  if (armor < 0) {
    super.damage(damager,amount);
  }
 else {
    if (damager instanceof Bullet) {
      Bullet bullet=(Bullet)damager;
      bullet.kill(this);
      game.emitSound(bullet.getId(),SoundType.IMPACT_METAL,bullet.getCenterPos());
    }
  }
}",0.7595238095238095
86565,"@Override protected NetGameTypeInfo createNetGameTypeInfo(){
  this.netGameTypeInfo=new NetCommanderGameTypeInfo();
  return this.netGameTypeInfo;
}","@Override protected NetGameTypeInfo createNetGameTypeInfo(){
  this.netGameTypeInfo=new NetCommanderGameTypeInfo();
  this.netGameTypeInfo.alliedSquad=new NetSquad();
  this.netGameTypeInfo.axisSquad=new NetSquad();
  return this.netGameTypeInfo;
}",0.7474747474747475
86566,"/** 
 * Picks a semi-random weapon.  It may attempt to pick  a weapon based on the world (this is chosen randomly).
 * @param team
 * @return the weapon type
 */
private Type getRandomWeapon(Team team){
  int index=-1;
  if (team != null) {
    PlayerClass playerClass=this.brain.getPlayer().getPlayerClass();
    List<WeaponEntry> availableWeapons=playerClass.getAvailableWeapons();
    int max=availableWeapons.size();
    boolean pickSmart=random.nextBoolean();
    if (pickSmart) {
      index=pickThoughtfulWeapon(team,availableWeapons);
    }
 else {
      index=random.nextInt(max);
    }
    return availableWeapons.get(index).type;
  }
  return Type.UNKNOWN;
}","/** 
 * Picks a semi-random weapon.  It may attempt to pick  a weapon based on the world (this is chosen randomly).
 * @param team
 * @return the weapon type
 */
private Type getRandomWeapon(Team team){
  int index=-1;
  if (team != null) {
    PlayerClass playerClass=this.brain.getPlayer().getPlayerClass();
    List<WeaponEntry> availableWeapons=playerClass.getAvailableWeapons();
    int max=availableWeapons.size();
    if (max > 3) {
      if (random.nextInt(4) != 1) {
        max-=1;
      }
    }
    boolean pickSmart=random.nextBoolean();
    if (pickSmart) {
      index=pickThoughtfulWeapon(team,availableWeapons);
    }
 else {
      index=random.nextInt(max);
    }
    return availableWeapons.get(index).type.getTeamWeapon(team);
  }
  return Type.UNKNOWN;
}",0.9272349272349272
86567,"/** 
 * @param healthMultiplier
 * @param speedMultiplier
 * @param damageMultiplier
 * @param availableWeapons
 * @param defaultWeapons
 * @param defaultPrimaryWeapon
 */
public PlayerClass(int healthMultiplier,int speedMultiplier,int damageMultiplier,List<WeaponEntry> availableWeapons,List<WeaponEntry> defaultWeapons,Type defaultPrimaryWeapon){
  this.healthMultiplier=healthMultiplier;
  this.speedMultiplier=speedMultiplier;
  this.damageMultiplier=damageMultiplier;
  this.availableWeapons=availableWeapons;
  this.defaultWeapons=defaultWeapons;
  this.defaultPrimaryWeapon=defaultPrimaryWeapon;
}","/** 
 * @param healthMultiplier
 * @param speedMultiplier
 * @param damageMultiplier
 * @param availableWeapons
 * @param defaultWeapons
 * @param defaultPrimaryWeapon
 */
public void PlayerClass(int healthMultiplier,int speedMultiplier,int damageMultiplier,List<WeaponEntry> availableWeapons,List<WeaponEntry> defaultWeapons,WeaponClass defaultPrimaryWeapon){
  this.healthMultiplier=healthMultiplier;
  this.speedMultiplier=speedMultiplier;
  this.damageMultiplier=damageMultiplier;
  this.availableWeapons=availableWeapons;
  this.defaultWeapons=defaultWeapons;
  this.defaultPrimaryWeapon=defaultPrimaryWeapon;
}",0.9836065573770492
86568,"private static WeaponEntry entry(Type type){
  return entry(type,-1);
}","private static WeaponEntry entry(WeaponClass type){
  return entry(type,-1);
}",0.912751677852349
86569,"/** 
 * Get the   {@link WeaponEntry} for the supplied weapontype
 * @param weaponType
 * @return the {@link WeaponEntry} or null if not an option
 */
public WeaponEntry getAvailableWeaponEntry(Type weaponType){
  for (int i=0; i < availableWeapons.size(); i++) {
    WeaponEntry entry=availableWeapons.get(i);
    if (entry.type == weaponType) {
      return entry;
    }
  }
  return null;
}","/** 
 * Get the   {@link WeaponEntry} for the supplied weapontype
 * @param weaponType
 * @return the {@link WeaponEntry} or null if not an option
 */
public WeaponEntry getAvailableWeaponEntry(Type weaponType){
  for (int i=0; i < availableWeapons.size(); i++) {
    WeaponEntry entry=availableWeapons.get(i);
    if (entry.type.hasWeapon(weaponType)) {
      return entry;
    }
  }
  return null;
}",0.9798488664987406
86570,"public WeaponEntry(Type type,int ammoBag){
  this.type=type;
  this.ammoBag=ammoBag;
}","public WeaponEntry(WeaponClass type,int ammoBag){
  this.type=type;
  this.ammoBag=ammoBag;
}",0.9273743016759776
86571,"/** 
 * @return the defaultPrimaryWeapon
 */
public Type getDefaultPrimaryWeapon(){
  return defaultPrimaryWeapon;
}","/** 
 * @return the defaultPrimaryWeapon
 */
public WeaponClass getDefaultPrimaryWeapon(){
  return defaultPrimaryWeapon;
}",0.9456066945606696
86572,"/** 
 * Apply the player class
 * @param playerClass
 * @param activeWeapon
 * @return true if success, false otherwise
 */
public void setPlayerClass(PlayerClass playerClass,Type activeWeapon){
  if (!playerClass.isAvailableWeapon(activeWeapon)) {
    activeWeapon=playerClass.getDefaultPrimaryWeapon();
  }
  this.inventory.clear();
  WeaponEntry weaponEntry=playerClass.getAvailableWeaponEntry(activeWeapon);
  Weapon currentWeapon=createWeapon(weaponEntry);
  if (currentWeapon != null) {
    this.inventory.addItem(currentWeapon);
  }
  List<WeaponEntry> weapons=playerClass.getDefaultWeapons();
  for (int i=0; i < weapons.size(); i++) {
    WeaponEntry entry=weapons.get(i);
    Weapon weapon=createWeapon(entry);
    if (weapon != null) {
      this.inventory.addItem(weapon);
    }
  }
  checkLineOfSightChange();
}","/** 
 * Apply the player class
 * @param playerClass
 * @param activeWeapon
 * @return true if success, false otherwise
 */
public void setPlayerClass(PlayerClass playerClass,Type activeWeapon){
  if (!playerClass.isAvailableWeapon(activeWeapon)) {
    activeWeapon=playerClass.getDefaultPrimaryWeapon().getTeamWeapon(getTeam());
  }
  this.inventory.clear();
  WeaponEntry weaponEntry=playerClass.getAvailableWeaponEntry(activeWeapon);
  Weapon currentWeapon=createWeapon(weaponEntry);
  if (currentWeapon != null) {
    this.inventory.addItem(currentWeapon);
  }
  List<WeaponEntry> weapons=playerClass.getDefaultWeapons();
  for (int i=0; i < weapons.size(); i++) {
    WeaponEntry entry=weapons.get(i);
    Weapon weapon=createWeapon(entry);
    if (weapon != null) {
      this.inventory.addItem(weapon);
    }
  }
  checkLineOfSightChange();
}",0.985056784219964
86573,"private Weapon createWeapon(WeaponEntry entry){
  Weapon weapon=null;
switch (entry.type) {
case SPRINGFIELD:
case KAR98:
    weapon=isAlliedPlayer() ? new Springfield(game,this) : new Kar98(game,this);
  break;
case THOMPSON:
case MP40:
weapon=isAlliedPlayer() ? new Thompson(game,this) : new MP40(game,this);
break;
case M1_GARAND:
case MP44:
weapon=isAlliedPlayer() ? new M1Garand(game,this) : new MP44(game,this);
break;
case PISTOL:
weapon=new Pistol(game,this);
break;
case HAMMER:
weapon=new Hammer(game,this);
break;
case SHOTGUN:
weapon=new Shotgun(game,this);
break;
case RISKER:
weapon=new Risker(game,this);
break;
case ROCKET_LAUNCHER:
weapon=new RocketLauncher(game,this);
break;
case FLAME_THROWER:
weapon=new FlameThrower(game,this);
break;
case GRENADE:
weapon=GrenadeBelt.newFrag(game,this,entry.ammoBag);
break;
case SMOKE_GRENADE:
weapon=GrenadeBelt.newSmoke(game,this,entry.ammoBag);
break;
default :
}
if (weapon != null && entry.ammoBag > -1) {
weapon.setTotalAmmo(entry.ammoBag);
}
return weapon;
}","private Weapon createWeapon(WeaponEntry entry){
  Weapon weapon=null;
switch (entry.type.getTeamWeapon(getTeam())) {
case SPRINGFIELD:
case KAR98:
    weapon=isAlliedPlayer() ? new Springfield(game,this) : new Kar98(game,this);
  break;
case THOMPSON:
case MP40:
weapon=isAlliedPlayer() ? new Thompson(game,this) : new MP40(game,this);
break;
case M1_GARAND:
case MP44:
weapon=isAlliedPlayer() ? new M1Garand(game,this) : new MP44(game,this);
break;
case PISTOL:
weapon=new Pistol(game,this);
break;
case HAMMER:
weapon=new Hammer(game,this);
break;
case SHOTGUN:
weapon=new Shotgun(game,this);
break;
case RISKER:
weapon=new Risker(game,this);
break;
case ROCKET_LAUNCHER:
weapon=new RocketLauncher(game,this);
break;
case FLAME_THROWER:
weapon=new FlameThrower(game,this);
break;
case GRENADE:
weapon=GrenadeBelt.newFrag(game,this,entry.ammoBag);
break;
case SMOKE_GRENADE:
weapon=GrenadeBelt.newSmoke(game,this,entry.ammoBag);
break;
default :
}
if (weapon != null && entry.ammoBag > -1) {
weapon.setTotalAmmo(entry.ammoBag);
}
return weapon;
}",0.9879168680521992
86574,"public static double weaponStrengthScore(Weapon weapon){
  double score=0;
  if (weapon != null) {
switch (weapon.getType()) {
case PISTOL:
      score=0.2;
    break;
case ROCKET_LAUNCHER:
  score=0.5;
break;
case MP40:
score=0.7;
break;
case THOMPSON:
score=0.7;
break;
case KAR98:
score=0.8;
break;
case M1_GARAND:
score=0.8;
break;
case MP44:
score=0.8;
break;
case MG42:
score=0.8;
break;
case RISKER:
score=0.8;
break;
case SHOTGUN:
score=0.8;
break;
case SPRINGFIELD:
score=0.8;
break;
case FLAME_THROWER:
score=0.75;
break;
default :
break;
}
}
return score;
}","public static double weaponStrengthScore(Weapon weapon){
  double score=0;
  if (weapon != null) {
switch (weapon.getType()) {
case PISTOL:
      score=0.2;
    break;
case ROCKET_LAUNCHER:
  score=0.6;
break;
case MP40:
score=0.7;
break;
case THOMPSON:
score=0.7;
break;
case KAR98:
score=0.8;
break;
case M1_GARAND:
score=0.8;
break;
case MP44:
score=0.8;
break;
case MG42:
score=0.8;
break;
case RISKER:
score=0.8;
break;
case SHOTGUN:
score=0.8;
break;
case SPRINGFIELD:
score=0.8;
break;
case FLAME_THROWER:
score=0.75;
break;
default :
break;
}
}
return score;
}",0.9982394366197184
86575,"/** 
 * Current weapon score (only accounts for bullets in clip)
 * @param ent
 * @return
 */
public static double weaponAmmoScore(Weapon weapon){
  double score=0;
  if (weapon != null) {
    double clipSize=(double)weapon.getClipSize();
    if (clipSize != 0) {
      return (double)weapon.getBulletsInClip() / clipSize;
    }
  }
  return score;
}","/** 
 * Current weapon score (only accounts for bullets in clip)
 * @param ent
 * @return
 */
public static double weaponAmmoScore(Weapon weapon){
  double score=0;
  if (weapon != null) {
    double clipSize=(double)weapon.getClipSize();
    if (clipSize != 0) {
      return (double)weapon.getBulletsInClip() / clipSize;
    }
 else {
      if (weapon.getBulletsInClip() > 0) {
        score+=0.1;
      }
    }
  }
  return score;
}",0.89171974522293
86576,"@Override public double calculateDesirability(Brain brain){
  double desire=0.0;
  Inventory inventory=brain.getEntityOwner().getInventory();
  if (inventory.numberOfItems() > 1) {
    Weapon weapon=inventory.currentItem();
    if (weapon != null) {
      if (weapon.isReady()) {
        if (weapon.getTotalAmmo() <= 0) {
          desire=1;
        }
        Weapon bestWeapon=getBestScoreWeapon(inventory);
        if (bestWeapon != weapon) {
          desire+=brain.getRandomRange(0.1,0.4);
        }
      }
    }
 else {
      desire=1.0;
    }
    TargetingSystem system=brain.getTargetingSystem();
    if (desire < 1.0 && system.hasTarget()) {
      desire*=brain.getRandomRange(0.4,0.7);
    }
    desire*=getCharacterBias();
  }
  return desire;
}","@Override public double calculateDesirability(Brain brain){
  double desire=0.0;
  Inventory inventory=brain.getEntityOwner().getInventory();
  if (inventory.numberOfItems() > 1) {
    Weapon weapon=inventory.currentItem();
    if (weapon != null) {
      if (weapon.isReady()) {
        if (weapon.getTotalAmmo() <= 0 && weapon.getBulletsInClip() <= 0) {
          desire=1;
        }
        Weapon bestWeapon=getBestScoreWeapon(inventory);
        if (bestWeapon != weapon) {
          desire+=brain.getRandomRange(0.1,0.4);
        }
      }
    }
 else {
      desire=1.0;
    }
    TargetingSystem system=brain.getTargetingSystem();
    if (desire < 1.0 && system.hasTarget()) {
      desire*=brain.getRandomRange(0.4,0.7);
    }
    desire*=getCharacterBias();
  }
  return desire;
}",0.9780077619663649
86577,"/** 
 * @param dt
 * @return true if blocked
 */
public boolean update(TimeStep timeStep){
  boolean isBlocked=false;
  this.movementDir.zeroOut();
  if (this.isAlive && !this.vel.isZero()) {
    if (currentState != State.WALKING && currentState != State.SPRINTING) {
      currentState=State.RUNNING;
    }
    int movementSpeed=calculateMovementSpeed();
    float dt=(float)timeStep.asFraction();
    float deltaX=(vel.x * movementSpeed * dt);
    float deltaY=(vel.y * movementSpeed * dt);
    float newX=pos.x + deltaX;
    float newY=pos.y + deltaY;
    if (Math.abs(pos.x - newX) > 2.5) {
      this.movementDir.x=vel.x;
    }
    if (Math.abs(pos.y - newY) > 2.5) {
      this.movementDir.y=vel.y;
    }
    Map map=game.getMap();
    boolean isBlockedByEntity=false;
    bounds.x=(int)newX;
    if (map.rectCollides(bounds,collisionHeightMask,xCollisionTilePos)) {
      isBlocked=collideX((int)newX,bounds.x);
      if (isBlocked) {
        bounds.x=(int)pos.x;
        newX=pos.x;
      }
    }
 else     if (collidesAgainstEntity(bounds) || collidesAgainstMapObject(bounds)) {
      bounds.x=(int)pos.x;
      newX=pos.x;
      isBlocked=true;
      isBlockedByEntity=true;
    }
    bounds.y=(int)newY;
    if (map.rectCollides(bounds,collisionHeightMask,yCollisionTilePos)) {
      isBlocked=collideY((int)newY,bounds.y);
      if (isBlocked) {
        bounds.y=(int)pos.y;
        newY=pos.y;
      }
    }
 else     if (collidesAgainstEntity(bounds) || collidesAgainstMapObject(bounds)) {
      bounds.y=(int)pos.y;
      newY=pos.y;
      isBlocked=true;
      isBlockedByEntity=true;
    }
    if (isBlocked) {
      if (!continueIfBlock()) {
        bounds.setLocation(pos);
        newX=pos.x;
        newY=pos.y;
      }
 else       if (!isBlockedByEntity) {
        if (deltaX != 0 && deltaY == 0) {
          newY=adjustY(xCollisionTilePos,deltaX,(int)(pos.x + deltaX),bounds.y);
        }
 else         if (deltaX == 0 && deltaY != 0) {
          newX=adjustX(yCollisionTilePos,deltaY,bounds.x,(int)(pos.y + deltaY));
        }
      }
    }
    pos.x=newX;
    pos.y=newY;
    vel.zeroOut();
    this.walkingTime=WALK_TIME;
  }
 else {
    if (this.walkingTime <= 0 && currentState != State.CROUCHING) {
      currentState=State.IDLE;
    }
    this.walkingTime-=timeStep.getDeltaTime();
  }
  return isBlocked;
}","/** 
 * @param dt
 * @return true if blocked
 */
public boolean update(TimeStep timeStep){
  boolean isBlocked=false;
  this.movementDir.zeroOut();
  if (this.isAlive && !this.vel.isZero()) {
    if (currentState != State.WALKING && currentState != State.SPRINTING) {
      currentState=State.RUNNING;
    }
    int movementSpeed=calculateMovementSpeed();
    float dt=(float)timeStep.asFraction();
    float deltaX=(vel.x * movementSpeed * dt);
    float deltaY=(vel.y * movementSpeed * dt);
    float newX=pos.x + deltaX;
    float newY=pos.y + deltaY;
    if (Math.abs(pos.x - newX) > 2.5) {
      this.movementDir.x=vel.x;
    }
    if (Math.abs(pos.y - newY) > 2.5) {
      this.movementDir.y=vel.y;
    }
    Map map=game.getMap();
    boolean isBlockedByEntity=false;
    bounds.x=(int)newX;
    if (map.rectCollides(bounds,collisionHeightMask,xCollisionTilePos)) {
      isBlocked=collideX((int)newX,bounds.x);
      if (isBlocked) {
        bounds.x=(int)pos.x;
        newX=pos.x;
      }
    }
 else     if (collidesAgainstEntity(bounds) || collidesAgainstMapObject(bounds)) {
      bounds.x=(int)pos.x;
      newX=pos.x;
      isBlocked=true;
      isBlockedByEntity=true;
    }
    bounds.y=(int)newY;
    if (map.rectCollides(bounds,collisionHeightMask,yCollisionTilePos)) {
      isBlocked=collideY((int)newY,bounds.y);
      if (isBlocked) {
        bounds.y=(int)pos.y;
        newY=pos.y;
      }
    }
 else     if (collidesAgainstEntity(bounds) || collidesAgainstMapObject(bounds)) {
      bounds.y=(int)pos.y;
      newY=pos.y;
      isBlocked=true;
      isBlockedByEntity=true;
    }
    if (isBlocked) {
      if (!continueIfBlock()) {
        bounds.setLocation(pos);
        newX=pos.x;
        newY=pos.y;
      }
 else       if (!isBlockedByEntity) {
        if (deltaX != 0 && deltaY == 0) {
          newY=adjustY(xCollisionTilePos,deltaX,(int)(pos.x + deltaX),bounds.y);
          if (checkCollision((int)newX,(int)newY)) {
            newY=pos.y;
          }
        }
 else         if (deltaX == 0 && deltaY != 0) {
          newX=adjustX(yCollisionTilePos,deltaY,bounds.x,(int)(pos.y + deltaY));
          if (checkCollision((int)newX,(int)newY)) {
            newX=pos.x;
          }
        }
      }
    }
    pos.x=newX;
    pos.y=newY;
    vel.zeroOut();
    this.walkingTime=WALK_TIME;
  }
 else {
    if (this.walkingTime <= 0 && currentState != State.CROUCHING) {
      currentState=State.IDLE;
    }
    this.walkingTime-=timeStep.getDeltaTime();
  }
  return isBlocked;
}",0.9633140972794724
86578,"public double getDouble(int length){
  long value=0;
  for (int i=0; i < length; i++) {
    checkPosition();
    value|=(data.getBit(position++) ? 1 : 0) << (i % Double.SIZE);
  }
  return Double.doubleToLongBits(value);
}","public double getDouble(int length){
  long value=0;
  for (int i=0; i < length; i++) {
    checkPosition();
    value|=(data.getBit(position++) ? 1L : 0L) << (i % Double.SIZE);
  }
  return Double.longBitsToDouble(value);
}",0.9327354260089686
86579,"public long getLong(int length){
  long value=0;
  for (int i=0; i < length; i++) {
    checkPosition();
    value|=(data.getBit(position++) ? 1 : 0) << (i % Long.SIZE);
  }
  return value;
}","public long getLong(int length){
  long value=0;
  for (int i=0; i < length; i++) {
    checkPosition();
    value|=(data.getBit(position++) ? 1L : 0L) << (i % Long.SIZE);
  }
  return value;
}",0.9947916666666666
86580,"public static void writeBigString(IOBuffer buffer,String str){
  byte[] chars=str.getBytes();
  int len=chars.length;
  buffer.putShort((short)len);
  for (byte i=0; i < len; i++) {
    buffer.putByte(chars[i]);
  }
}","public static void writeBigString(IOBuffer buffer,String str){
  byte[] chars=str.getBytes();
  int len=chars.length;
  buffer.putShort((short)len);
  for (int i=0; i < len; i++) {
    buffer.putByte(chars[i]);
  }
}",0.9838337182448036
86581,"public static String readBigString(IOBuffer buffer){
  int len=buffer.getShort();
  byte[] chars=new byte[len];
  for (byte i=0; i < len; i++) {
    chars[i]=buffer.getByte();
  }
  return new String(chars);
}","public static String readBigString(IOBuffer buffer){
  int len=buffer.getShort();
  byte[] chars=new byte[len];
  for (int i=0; i < len; i++) {
    chars[i]=buffer.getByte();
  }
  return new String(chars);
}",0.9832134292565948
86582,"public static String readString(IOBuffer buffer){
  int len=buffer.getUnsignedByte();
  byte[] chars=new byte[len];
  for (byte i=0; i < len; i++) {
    chars[i]=buffer.getByte();
  }
  return new String(chars);
}","public static String readString(IOBuffer buffer){
  int len=buffer.getUnsignedByte();
  byte[] chars=new byte[len];
  for (int i=0; i < len; i++) {
    chars[i]=buffer.getByte();
  }
  return new String(chars);
}",0.983529411764706
86583,"public static void writeString(IOBuffer buffer,String str){
  byte[] chars=str.getBytes();
  int len=chars.length;
  buffer.putUnsignedByte(len);
  for (byte i=0; i < len; i++) {
    buffer.putByte(chars[i]);
  }
}","public static void writeString(IOBuffer buffer,String str){
  byte[] chars=str.getBytes();
  int len=chars.length;
  buffer.putUnsignedByte(len);
  for (int i=0; i < len; i++) {
    buffer.putByte(chars[i]);
  }
}",0.9836065573770492
86584,"@Override public void receiveRconMessage(Connection conn,RconMessage msg) throws IOException {
  RemoteClient client=this.clients.getClient(conn.getId());
  if (client != null) {
    String cmd=msg.getCommand();
    if (cmd != null) {
      if (cmd.startsWith(""String_Node_Str"")) {
        long token=this.serverContext.createToken();
        RconTokenMessage tokenMessage=new RconTokenMessage(token);
        client.setRconToken(token);
        sendRconTokenMessage(client.getId(),tokenMessage);
      }
 else       if (cmd.startsWith(""String_Node_Str"")) {
        client.setRconAuthenticated(false);
        client.setRconToken(ServerContext.INVALID_RCON_TOKEN);
        console.removeLogger(this.rconLoggers.get(client.getId()));
      }
 else       if (cmd.startsWith(""String_Node_Str"")) {
        if (!client.hasRconToken()) {
          RconMessage rconMsg=new RconMessage(""String_Node_Str"");
          sendRconMessage(client.getId(),rconMsg);
        }
 else {
          String password=cmd.replace(""String_Node_Str"",""String_Node_Str"");
          String serverPassword=this.serverContext.getRconPassword(client.getRconToken());
          if (serverPassword.equals(password)) {
            client.setRconAuthenticated(true);
            Logger logger=this.rconLoggers.put(client.getId(),new RconLogger(client.getId(),this));
            console.removeLogger(logger);
            console.addLogger(this.rconLoggers.get(client.getId()));
          }
 else {
            client.setRconAuthenticated(false);
            RconMessage rconMsg=new RconMessage(""String_Node_Str"");
            sendRconMessage(client.getId(),rconMsg);
          }
        }
      }
 else       if (client.isRconAuthenticated()) {
        console.execute(msg.getCommand());
      }
 else {
        RconMessage rconMsg=new RconMessage(""String_Node_Str"");
        sendRconMessage(client.getId(),rconMsg);
      }
    }
  }
}","@Override public void receiveRconMessage(Connection conn,RconMessage msg) throws IOException {
  RemoteClient client=this.clients.getClient(conn.getId());
  if (client != null) {
    String cmd=msg.getCommand();
    if (cmd != null) {
      if (cmd.startsWith(""String_Node_Str"")) {
        long token=this.serverContext.createToken();
        RconTokenMessage tokenMessage=new RconTokenMessage(token);
        client.setRconToken(token);
        sendRconTokenMessage(client.getId(),tokenMessage);
      }
 else       if (cmd.startsWith(""String_Node_Str"")) {
        client.setRconAuthenticated(false);
        client.setRconToken(ServerContext.INVALID_RCON_TOKEN);
        console.removeLogger(this.rconLoggers.get(client.getId()));
      }
 else       if (cmd.startsWith(""String_Node_Str"")) {
        if (!client.hasRconToken()) {
          RconMessage rconMsg=new RconMessage(""String_Node_Str"");
          sendRconMessage(client.getId(),rconMsg);
        }
 else {
          String password=cmd.replace(""String_Node_Str"",""String_Node_Str"");
          String serverPassword=this.serverContext.getRconPassword(client.getRconToken());
          if (serverPassword.equals(password)) {
            client.setRconAuthenticated(true);
            Logger logger=this.rconLoggers.put(client.getId(),new RconLogger(client.getId(),this));
            console.removeLogger(logger);
            if (!serverContext.getGameServer().isLocal()) {
              console.addLogger(this.rconLoggers.get(client.getId()));
            }
          }
 else {
            client.setRconAuthenticated(false);
            RconMessage rconMsg=new RconMessage(""String_Node_Str"");
            sendRconMessage(client.getId(),rconMsg);
          }
        }
      }
 else       if (client.isRconAuthenticated()) {
        console.execute(msg.getCommand());
      }
 else {
        RconMessage rconMsg=new RconMessage(""String_Node_Str"");
        sendRconMessage(client.getId(),rconMsg);
      }
    }
  }
}",0.9747031491997936
86585,"/** 
 * Finds a free location on the map, one in which the supplied   {@link PlayerEntity} will not collide with.
 * @param player
 * @return the {@link Vector2f} that is suitable for the {@link PlayerEntity}
 */
public Vector2f findFreeSpot(PlayerEntity player){
  Vector2f freeSpot=player.getPos();
  int safety=100000;
  while ((map.rectCollides(player.getBounds()) || map.hasWorldCollidableTile((int)player.getCenterPos().x,(int)player.getCenterPos().y)) && safety > 0) {
    int w=(player.getBounds().width + 5);
    int h=(player.getBounds().height + 5);
    int x=random.nextInt(map.getMapWidth() - w);
    int y=random.nextInt(map.getMapHeight() - h);
    if (x <= w) {
      x=w;
    }
    if (y <= h) {
      y=h;
    }
    freeSpot.set(x,y);
    player.moveTo(freeSpot);
    safety--;
  }
  return freeSpot;
}","/** 
 * Finds a free location on the map, one in which the supplied   {@link PlayerEntity} will not collide with.
 * @param player
 * @return the {@link Vector2f} that is suitable for the {@link PlayerEntity}
 */
public Vector2f findFreeSpot(PlayerEntity player){
  Vector2f freeSpot=player.getPos();
  int safety=100000;
  while ((map.rectCollides(player.getBounds()) || map.hasWorldCollidableTile((int)player.getCenterPos().x,(int)player.getCenterPos().y) || doesTouchOthers(player,false)|| doesTouchMapObject(player,false)) && safety > 0) {
    int w=(player.getBounds().width + 5);
    int h=(player.getBounds().height + 5);
    int x=random.nextInt(map.getMapWidth() - w);
    int y=random.nextInt(map.getMapHeight() - h);
    if (x <= w) {
      x=w;
    }
    if (y <= h) {
      y=h;
    }
    freeSpot.set(x,y);
    player.moveTo(freeSpot);
    safety--;
  }
  return freeSpot;
}",0.9601873536299764
86586,"public boolean doesTouchMapObject(Entity ent){
  List<MapObject> mapObjects=getMapObjects();
  for (int i=0; i < mapObjects.size(); i++) {
    MapObject object=mapObjects.get(i);
    if (object.isCollidable()) {
      if (object.isTouching(ent) && ent.onMapObjectTouch != null) {
        ent.onMapObjectTouch.onTouch(ent,object);
        return true;
      }
    }
  }
  return false;
}","public boolean doesTouchMapObject(Entity ent,boolean invokeTouch){
  List<MapObject> mapObjects=getMapObjects();
  for (int i=0; i < mapObjects.size(); i++) {
    MapObject object=mapObjects.get(i);
    if (object.isCollidable()) {
      if (object.isTouching(ent)) {
        if (!invokeTouch) {
          return true;
        }
        if (ent.onMapObjectTouch != null) {
          ent.onMapObjectTouch.onTouch(ent,object);
          return true;
        }
      }
    }
  }
  return false;
}",0.7599544937428896
86587,"@Override public boolean doesTouchOthers(Entity ent){
  for (int i=0; i < this.entities.length; i++) {
    Entity other=this.entities[i];
    if (other != null) {
      if (other != ent && ent.isTouching(other)) {
        if (ent.onTouch != null) {
          ent.onTouch.onTouch(ent,other);
          return true;
        }
      }
    }
  }
  return false;
}","@Override public boolean doesTouchOthers(Entity ent,boolean invokeTouch){
  for (int i=0; i < this.entities.length; i++) {
    Entity other=this.entities[i];
    if (other != null) {
      if (other != ent && ent.isTouching(other)) {
        if (!invokeTouch) {
          return true;
        }
        if (ent.onTouch != null) {
          ent.onTouch.onTouch(ent,other);
          return true;
        }
      }
    }
  }
  return false;
}",0.8986232790988736
86588,"/** 
 * Determines if the supplied entity touches another entity.  If the   {@link Entity#onTouch} listeneris implemented, it will invoke it.
 * @param ent
 * @return true if it does.
 */
public abstract boolean doesTouchOthers(Entity ent);","public abstract boolean doesTouchOthers(Entity ent,boolean invokeTouch);",0.3333333333333333
86589,"/** 
 * Spawns a new   {@link BombTarget}
 * @param position
 * @return the bomb target
 */
public BombTarget newBombTarget(Vector2f position){
  final BombTarget target=new BombTarget(position,this);
  target.onKill=new KilledListener(){
    @Override public void onKill(    Entity entity,    Entity killer){
      bombTargets.remove(target);
    }
  }
;
  this.bombTargets.add(target);
  addEntity(target);
  return target;
}","/** 
 * Spawns a new   {@link BombTarget}
 * @param position
 * @return the bomb target
 */
public BombTarget newBombTarget(Team owner,Vector2f position){
  final BombTarget target=new BombTarget(owner,position,this);
  target.onKill=new KilledListener(){
    @Override public void onKill(    Entity entity,    Entity killer){
      bombTargets.remove(target);
    }
  }
;
  this.bombTargets.add(target);
  addEntity(target);
  return target;
}",0.9804822043628014
86590,"/** 
 * @param position
 * @param game
 */
public BombTarget(Vector2f position,Game game){
  super(game.getNextPersistantId(),position,0,game,Type.BOMB_TARGET);
  this.bounds.width=64;
  this.bounds.height=32;
  this.bounds.setLocation(position);
  this.netBombTarget=new NetBombTarget();
  setNetEntity(netBombTarget);
}","/** 
 * @param position
 * @param game
 */
public BombTarget(Team owner,Vector2f position,Game game){
  super(game.getNextPersistantId(),position,0,game,Type.BOMB_TARGET);
  this.owner=owner;
  this.bounds.width=64;
  this.bounds.height=32;
  this.bounds.setLocation(position);
  this.netBombTarget=new NetBombTarget();
  setNetEntity(netBombTarget);
}",0.9539375928677564
86591,"/** 
 * Handles a   {@link BombTarget}, meaning this will either plant or disarm the   {@link BombTarget}.
 * @param target
 */
protected void handleBombTarget(BombTarget target){
  if (target != null) {
    if (target.bombActive()) {
      Bomb bomb=target.getBomb();
      bomb.disarm(this);
      game.emitSound(getId(),SoundType.BOMB_DISARM,getPos());
    }
 else {
      if (!target.isBombAttached()) {
        Bomb bomb=game.newBomb(target);
        bomb.plant(this,target);
        target.attachBomb(bomb);
        game.emitSound(getId(),SoundType.BOMB_PLANT,getPos());
      }
    }
  }
}","/** 
 * Handles a   {@link BombTarget}, meaning this will either plant or disarm the   {@link BombTarget}.
 * @param target
 */
protected void handleBombTarget(BombTarget target){
  if (target != null) {
    if (target.getOwner().equals(getTeam())) {
      if (target.bombActive()) {
        Bomb bomb=target.getBomb();
        bomb.disarm(this);
        game.emitSound(getId(),SoundType.BOMB_DISARM,getPos());
      }
    }
 else {
      if (!target.isBombAttached()) {
        Bomb bomb=game.newBomb(target);
        bomb.plant(this,target);
        target.attachBomb(bomb);
        game.emitSound(getId(),SoundType.BOMB_PLANT,getPos());
      }
    }
  }
}",0.949800796812749
86592,"@Override public void init(Game game){
  target=game.newBombTarget(position);
  if (rotated) {
    target.rotate90();
  }
}","@Override public void init(Game game){
  target=game.newBombTarget(game.getGameType().getDefender(),position);
  if (rotated) {
    target.rotate90();
  }
}",0.8817204301075269
86593,"/** 
 * @return the attacker
 */
public Team getAttacker(){
  return attacker;
}","/** 
 * @return the attacker
 */
@Override public Team getAttacker(){
  return attacker;
}",0.9411764705882352
86594,"/** 
 * @return the defender
 */
public Team getDefender(){
  return defender;
}","/** 
 * @return the defender
 */
@Override public Team getDefender(){
  return defender;
}",0.9411764705882352
86595,"/** 
 * @param position
 * @param speed
 * @param game
 */
public PlayerEntity(int id,Vector2f position,Game game){
  super(id,position,PLAYER_SPEED,game,Type.PLAYER);
  this.player=new NetPlayer();
  this.player.id=id;
  this.partialPlayer=new NetPlayerPartial();
  this.partialPlayer.id=id;
  this.bounds.set(position,PLAYER_WIDTH,PLAYER_HEIGHT);
  this.inputVel=new Vector2f();
  this.enemyDir=new Vector2f();
  this.headshot=new Rectangle(4,4);
  this.limbshot=new Rectangle(10,10);
  this.bulletDir=new Vector2f();
  this.inventory=new Inventory(MAX_PRIMARY_WEAPONS);
  this.hearingBounds=new Rectangle(PLAYER_HEARING_RADIUS,PLAYER_HEARING_RADIUS);
  this.stamina=MAX_STAMINA;
  this.visualBounds=new Rectangle(5000,5000);
  setLineOfSight(WeaponConstants.DEFAULT_LINE_OF_SIGHT);
  setHearingRadius(PLAYER_HEARING_RADIUS);
}","/** 
 * @param position
 * @param speed
 * @param game
 */
public PlayerEntity(int id,Vector2f position,Game game){
  super(id,position,PLAYER_SPEED,game,Type.PLAYER);
  this.player=new NetPlayer();
  this.player.id=id;
  this.partialPlayer=new NetPlayerPartial();
  this.partialPlayer.id=id;
  this.bounds.set(position,PLAYER_WIDTH,PLAYER_HEIGHT);
  this.inputVel=new Vector2f();
  this.enemyDir=new Vector2f();
  this.headshot=new Rectangle(4,4);
  this.limbshot=new Rectangle(10,10);
  this.bulletDir=new Vector2f();
  this.inventory=new Inventory(MAX_PRIMARY_WEAPONS);
  this.hearingBounds=new Rectangle(PLAYER_HEARING_RADIUS,PLAYER_HEARING_RADIUS);
  this.stamina=MAX_STAMINA;
  this.visualBounds=new Rectangle(2000,2000);
  setLineOfSight(WeaponConstants.DEFAULT_LINE_OF_SIGHT);
  setHearingRadius(PLAYER_HEARING_RADIUS);
}",0.9975874547647768
86596,"@Override public void render(Canvas canvas,Camera camera,float alpha){
  canvas.setFont(""String_Node_Str"",14);
  canvas.boldFont();
  int height=canvas.getHeight(""String_Node_Str"") + 5;
  int startX=canvas.getWidth() - 10;
  int y=startY;
  int size=logs.size();
  for (int i=0; i < size; i++) {
    Entry m=logs.get(i);
    int killedColor=m.killed.getTeam().getColor();
    int killerColor=killedColor;
    String message=m.killed.getName() + ""String_Node_Str"";
    if (m.killer != null) {
      killerColor=m.killer.getTeam().getColor();
      if (m.killed.getId() == m.killer.getId()) {
        message=m.killed.getName() + ""String_Node_Str"";
        int length=canvas.getWidth(message);
        RenderFont.drawShadedString(canvas,message,startX - length,y,killerColor);
      }
 else {
        int yOffset=(int)Art.smallAssaultRifleIcon.getHeight() / 2;
        int killedLength=canvas.getWidth(m.killed.getName()) + 10;
        int killerLength=canvas.getWidth(m.killer.getName()) + 10;
        int iconLength=(int)Art.smallAssaultRifleIcon.getWidth() + 10;
switch (m.mod) {
case EXPLOSION:
{
            RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
            canvas.drawImage(Art.fragGrenadeImage,startX - killedLength - iconLength + 10,y - 16,null);
            RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
            break;
          }
case NAPALM_GRENADE:
case GRENADE:
{
          RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
          canvas.drawImage(Art.fragGrenadeImage,startX - killedLength - iconLength,y - 10,null);
          RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
          break;
        }
case THOMPSON:
{
        RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
        canvas.drawSprite(Art.smallAssaultRifleIcon,startX - killedLength - iconLength,y - yOffset,null);
        RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
        break;
      }
case ROCKET:
{
      RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
      canvas.drawSprite(Art.smallRocketIcon,startX - killedLength - iconLength,y - yOffset - 5,null);
      RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
      break;
    }
case SHOTGUN:
{
    RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
    canvas.drawSprite(Art.smallShotgunIcon,startX - killedLength - iconLength,y - yOffset,null);
    RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
    break;
  }
case ROCKET_LAUNCHER:
{
  RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
  canvas.drawSprite(Art.smallRocketIcon,startX - killedLength - iconLength,y - yOffset,null);
  RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
  break;
}
case SPRINGFIELD:
{
RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
canvas.drawSprite(Art.smallSniperRifleIcon,startX - killedLength - iconLength,y - yOffset,null);
RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
break;
}
case M1_GARAND:
{
RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
canvas.drawSprite(Art.smallM1GarandIcon,startX - killedLength - iconLength,y - yOffset,null);
RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
break;
}
case KAR98:
{
RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
canvas.drawSprite(Art.smallkar98Icon,startX - killedLength - iconLength,y - yOffset,null);
RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
break;
}
case MP44:
{
RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
canvas.drawSprite(Art.smallmp44Icon,startX - killedLength - iconLength,y - yOffset,null);
RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
break;
}
case MP40:
{
RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
canvas.drawSprite(Art.smallmp40Icon,startX - killedLength - iconLength,y - yOffset,null);
RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
break;
}
case PISTOL:
{
RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
canvas.drawSprite(Art.smallPistolIcon,startX - killedLength - iconLength,y - yOffset,null);
RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
break;
}
case RISKER:
{
RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
canvas.drawSprite(Art.smallRiskerIcon,startX - killedLength - iconLength,y - yOffset,null);
RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
break;
}
case FIRE:
case FLAME_THROWER:
{
RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
canvas.drawSprite(Art.smallFlameThrowerIcon,startX - killedLength - iconLength,y - yOffset,null);
RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
break;
}
default :
{
message=m.killer.getName() + ""String_Node_Str"" + m.killed.getName();
int messageLength=canvas.getWidth(message) + 10;
RenderFont.drawShadedString(canvas,message,startX - messageLength,y,killerColor);
}
}
}
}
 else {
int messageLength=canvas.getWidth(message) + 10;
RenderFont.drawShadedString(canvas,message,startX - messageLength,y,killedColor);
}
y+=height;
}
}","@Override public void render(Canvas canvas,Camera camera,float alpha){
  canvas.setFont(""String_Node_Str"",12);
  canvas.boldFont();
  int height=canvas.getHeight(""String_Node_Str"") + 5;
  int startX=canvas.getWidth() - 10;
  int y=startY;
  int size=logs.size();
  for (int i=0; i < size; i++) {
    Entry m=logs.get(i);
    int killedColor=m.killed.getTeam().getColor();
    int killerColor=killedColor;
    String message=m.killed.getName() + ""String_Node_Str"";
    if (m.killer != null) {
      killerColor=m.killer.getTeam().getColor();
      if (m.killed.getId() == m.killer.getId()) {
        message=m.killed.getName() + ""String_Node_Str"";
        int length=canvas.getWidth(message);
        RenderFont.drawShadedString(canvas,message,startX - length,y,killerColor);
      }
 else {
        int yOffset=(int)Art.smallAssaultRifleIcon.getHeight() / 2;
        int killedLength=canvas.getWidth(m.killed.getName()) + 10;
        int killerLength=canvas.getWidth(m.killer.getName()) + 10;
        int iconLength=(int)Art.smallAssaultRifleIcon.getWidth() + 10;
switch (m.mod) {
case EXPLOSION:
{
            RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
            canvas.drawImage(Art.smallFragGrenadeIcon,startX - killedLength - iconLength + 10,y - 16,null);
            RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
            break;
          }
case NAPALM_GRENADE:
case GRENADE:
{
          RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
          canvas.drawImage(Art.smallFragGrenadeIcon,startX - killedLength - iconLength,y - 10,null);
          RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
          break;
        }
case THOMPSON:
{
        RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
        canvas.drawSprite(Art.smallAssaultRifleIcon,startX - killedLength - iconLength,y - yOffset,null);
        RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
        break;
      }
case ROCKET:
{
      RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
      canvas.drawSprite(Art.smallRocketIcon,startX - killedLength - iconLength,y - yOffset - 5,null);
      RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
      break;
    }
case SHOTGUN:
{
    RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
    canvas.drawSprite(Art.smallShotgunIcon,startX - killedLength - iconLength,y - yOffset,null);
    RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
    break;
  }
case ROCKET_LAUNCHER:
{
  RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
  canvas.drawSprite(Art.smallRocketIcon,startX - killedLength - iconLength,y - yOffset,null);
  RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
  break;
}
case SPRINGFIELD:
{
RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
canvas.drawSprite(Art.smallSniperRifleIcon,startX - killedLength - iconLength,y - yOffset,null);
RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
break;
}
case M1_GARAND:
{
RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
canvas.drawSprite(Art.smallM1GarandIcon,startX - killedLength - iconLength,y - yOffset,null);
RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
break;
}
case KAR98:
{
RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
canvas.drawSprite(Art.smallkar98Icon,startX - killedLength - iconLength,y - yOffset,null);
RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
break;
}
case MP44:
{
RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
canvas.drawSprite(Art.smallmp44Icon,startX - killedLength - iconLength,y - yOffset,null);
RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
break;
}
case MP40:
{
RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
canvas.drawSprite(Art.smallmp40Icon,startX - killedLength - iconLength,y - yOffset,null);
RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
break;
}
case PISTOL:
{
RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
canvas.drawSprite(Art.smallPistolIcon,startX - killedLength - iconLength,y - yOffset,null);
RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
break;
}
case RISKER:
{
RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
canvas.drawSprite(Art.smallRiskerIcon,startX - killedLength - iconLength,y - yOffset,null);
RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
break;
}
case FIRE:
case FLAME_THROWER:
{
RenderFont.drawShadedString(canvas,m.killer.getName(),startX - killedLength - killerLength- iconLength,y,killerColor);
canvas.drawSprite(Art.smallFlameThrowerIcon,startX - killedLength - iconLength,y - yOffset,null);
RenderFont.drawShadedString(canvas,m.killed.getName(),startX - killedLength,y,killedColor);
break;
}
default :
{
message=m.killer.getName() + ""String_Node_Str"" + m.killed.getName();
int messageLength=canvas.getWidth(message) + 10;
RenderFont.drawShadedString(canvas,message,startX - messageLength,y,killerColor);
}
}
}
}
 else {
int messageLength=canvas.getWidth(message) + 10;
RenderFont.drawShadedString(canvas,message,startX - messageLength,y,killedColor);
}
y+=height;
}
}",0.9976220672162334
86597,"/** 
 * @param serverContext
 * @param gameSession
 */
public InGameState(final ServerContext serverContext,final GameSession gameSession){
  this.serverContext=serverContext;
  this.gameSession=gameSession;
  this.players=gameSession.getPlayers();
  this.clients=serverContext.getClients();
  this.protocol=serverContext.getServerProtocol();
  this.dispatcher=gameSession.getEventDispatcher();
  this.game=gameSession.getGame();
  ServerSeventhConfig config=serverContext.getConfig();
  this.netFullStatDelay=config.getServerNetFullStatDelay();
  this.netPartialStatDelay=config.getServerNetPartialStatDelay();
  final long netRate=Math.abs(config.getServerNetUpdateRate());
  this.netUpdateRate=1000 / netRate == 0 ? 20 : netRate;
  this.nextGameStatUpdate=this.netFullStatDelay;
  this.nextGamePartialStatUpdate=this.netPartialStatDelay;
  this.nextGameUpdate=this.netUpdateRate;
  this.statsMessage=new GameStatsMessage();
  this.partialStatsMessage=new GamePartialStatsMessage();
  this.clientIterator=new RemoteClientIterator(){
    @Override public void onRemoteClient(    RemoteClient client){
      if (client.isReady()) {
        sendGameUpdateMessage(client.getId());
      }
      if (calculatePing) {
        int ping=client.getConnection().getReturnTripTime();
        client.getPlayer().setPing(ping);
      }
    }
  }
;
  this.dispatcher.addEventListener(PlayerKilledEvent.class,new PlayerKilledListener(){
    @Override @EventMethod public void onPlayerKilled(    PlayerKilledEvent event){
      PlayerKilledMessage msg=new PlayerKilledMessage();
      msg.deathType=event.getMeansOfDeath();
      msg.killedById=event.getKillerId();
      msg.playerId=event.getPlayer().getId();
      msg.posX=(short)event.getPos().x;
      msg.posY=(short)event.getPos().y;
      protocol.sendPlayerKilledMessage(msg);
    }
  }
);
  this.dispatcher.addEventListener(PlayerSpawnedEvent.class,new PlayerSpawnedListener(){
    @Override @EventMethod public void onPlayerSpawned(    PlayerSpawnedEvent event){
      PlayerSpawnedMessage msg=new PlayerSpawnedMessage();
      Player player=event.getPlayer();
      msg.playerId=player.getId();
      msg.posX=(short)event.getSpawnLocation().x;
      msg.posY=(short)event.getSpawnLocation().y;
      protocol.sendPlayerSpawnedMessage(msg);
    }
  }
);
  this.dispatcher.addEventListener(GameEndEvent.class,new GameEndListener(){
    @Override @EventMethod public void onGameEnd(    GameEndEvent event){
      if (!gameEnded) {
        GameEndedMessage msg=new GameEndedMessage();
        msg.stats=game.getNetGameStats();
        protocol.sendGameEndedMessage(msg);
        gameEnded=true;
      }
    }
  }
);
  this.dispatcher.addEventListener(RoundEndedEvent.class,new RoundEndedListener(){
    @Override @EventMethod public void onRoundEnded(    RoundEndedEvent event){
      RoundEndedMessage msg=new RoundEndedMessage();
      msg.stats=game.getNetGameStats();
      Team winner=event.getWinner();
      if (winner != null) {
        msg.winnerTeamId=winner.getId();
      }
      protocol.sendRoundEndedMessage(msg);
    }
  }
);
  this.dispatcher.addEventListener(RoundStartedEvent.class,new RoundStartedListener(){
    @Override @EventMethod public void onRoundStarted(    RoundStartedEvent event){
      RoundStartedMessage msg=new RoundStartedMessage();
      msg.gameState=game.getNetGameState();
      protocol.sendRoundStartedMessage(msg);
    }
  }
);
  this.dispatcher.addEventListener(BombPlantedEvent.class,new BombPlantedListener(){
    @Override @EventMethod public void onBombPlanted(    BombPlantedEvent event){
      int bombTargetId=event.getBombTarget() != null ? event.getBombTarget().getId() : Entity.INVALID_ENTITY_ID;
      protocol.sendBombPlantedMessage(new BombPlantedMessage(bombTargetId));
    }
  }
);
  this.dispatcher.addEventListener(BombDisarmedEvent.class,new BombDisarmedListener(){
    @EventMethod @Override public void onBombDisarmedEvent(    BombDisarmedEvent event){
      int bombTargetId=event.getBombTarget() != null ? event.getBombTarget().getId() : Entity.INVALID_ENTITY_ID;
      protocol.sendBombDisarmedMessage(new BombDisarmedMessage(bombTargetId));
    }
  }
);
  this.dispatcher.addEventListener(BombExplodedMessage.class,new BombExplodedListener(){
    @EventMethod @Override public void onBombExplodedEvent(    BombExplodedEvent event){
      protocol.sendBombExplodedMessage(new BombExplodedMessage());
    }
  }
);
  this.dispatcher.addEventListener(TileRemovedEvent.class,new TileRemovedListener(){
    @Override public void onTileRemoved(    TileRemovedEvent event){
      TileRemovedMessage msg=new TileRemovedMessage();
      msg.x=event.getTileX();
      msg.y=event.getTileY();
      protocol.sendTileRemovedMessage(msg);
    }
  }
);
  this.dispatcher.addEventListener(FlagCapturedEvent.class,new FlagCapturedListener(){
    @Override public void onFlagCapturedEvent(    FlagCapturedEvent event){
      FlagCapturedMessage msg=new FlagCapturedMessage();
      msg.flagId=event.getFlag().getId();
      msg.capturedBy=event.getPlayerId();
      protocol.sendFlagCapturedMessage(msg);
    }
  }
);
  this.dispatcher.addEventListener(FlagReturnedEvent.class,new FlagReturnedListener(){
    @Override public void onFlagReturnedEvent(    FlagReturnedEvent event){
      FlagReturnedMessage msg=new FlagReturnedMessage();
      msg.flagId=event.getFlag().getId();
      msg.returnedBy=event.getPlayerId();
      protocol.sendFlagReturnedMessage(msg);
    }
  }
);
  this.dispatcher.addEventListener(FlagStolenEvent.class,new FlagStolenListener(){
    @Override public void onFlagStolenEvent(    FlagStolenEvent event){
      FlagStolenMessage msg=new FlagStolenMessage();
      msg.flagId=event.getFlag().getId();
      msg.stolenBy=event.getPlayerId();
      protocol.sendFlagStolenMessage(msg);
    }
  }
);
  this.dispatcher.addEventListener(KillStreakEvent.class,new KillStreakListener(){
    @Override public void onKillStreak(    KillStreakEvent event){
      PlayerAwardMessage msg=new PlayerAwardMessage();
      msg.playerId=event.getPlayer().getId();
      msg.award=Award.KillStreak;
      msg.killStreak=(byte)event.getStreak();
      protocol.sendPlayerAwardMessage(msg);
    }
  }
);
  this.dispatcher.addEventListener(KillRollEvent.class,new KillRollListener(){
    @Override public void onKillRoll(    KillRollEvent event){
      PlayerAwardMessage msg=new PlayerAwardMessage();
      msg.playerId=event.getPlayer().getId();
      msg.award=Award.KillRoll;
      msg.killStreak=(byte)event.getStreak();
      protocol.sendPlayerAwardMessage(msg);
    }
  }
);
  this.dispatcher.addEventListener(PlayerAwardEvent.class,new PlayerAwardListener(){
    @Override public void onPlayerAward(    PlayerAwardEvent event){
      PlayerAwardMessage msg=new PlayerAwardMessage();
      msg.playerId=event.getPlayer().getId();
      msg.award=event.getAward();
      protocol.sendPlayerAwardMessage(msg);
    }
  }
);
}","/** 
 * @param serverContext
 * @param gameSession
 */
public InGameState(final ServerContext serverContext,final GameSession gameSession){
}",0.0398473929631199
86598,"/** 
 * Sets the absolute position (the other setPos functions account  for the lightSize)
 * @param pos
 */
public void setAbsolutePos(Vector2f pos){
  this.pos.set(pos);
}","/** 
 * Sets the absolute position (the other setPos functions account  for the lightSize)
 * @param pos
 */
public void setAbsolutePos(Vector2f pos){
  this.pos.set(pos);
  this.absolutePos.set(pos);
}",0.9226666666666666
86599,"@Override public void setLightSize(int lightSize){
  this.lightSize=lightSize;
}","@Override public void setLightSize(int lightSize){
  int previousLightSize=this.lightSize;
  this.lightSize=lightSize;
  if (previousLightSize != lightSize) {
    setPos(this.absolutePos);
  }
}",0.583941605839416
86600,"@Override public void setPos(float x,float y){
  this.pos.set(x,y);
  this.pos.x-=lightSize / 2;
  this.pos.y-=lightSize / 2;
}","@Override public void setPos(float x,float y){
  this.pos.set(x,y);
  this.absolutePos.set(pos);
  this.pos.x-=lightSize / 2;
  this.pos.y-=lightSize / 2;
}",0.8975265017667845
86601,"/** 
 * @param pos
 */
public ImageLight(LightSystem lightSystem,Vector2f pos){
  this.lightSystem=lightSystem;
  this.pos=pos;
  this.orientation=0;
  this.color=new Vector3f(0.3f,0.3f,0.7f);
  this.luminacity=0.5f;
  this.lightOscillate=false;
  this.on=true;
  this.flickerTime=70;
  setTexture(Art.lightMap);
  lightSize=512;
}","/** 
 * @param pos
 */
public ImageLight(LightSystem lightSystem,Vector2f pos){
  this.lightSystem=lightSystem;
  this.pos=pos;
  this.absolutePos=new Vector2f(pos);
  this.orientation=0;
  this.color=new Vector3f(0.3f,0.3f,0.7f);
  this.luminacity=0.5f;
  this.lightOscillate=false;
  this.on=true;
  this.flickerTime=70;
  setTexture(Art.lightMap);
  lightSize=512;
}",0.9457142857142856
86602,"@Override public void read(IOBuffer buffer){
  super.read(buffer);
  state=buffer.getByte();
  orientation=BufferIO.readAngle(buffer);
  turretOrientation=BufferIO.readAngle(buffer);
  primaryWeaponState=buffer.getByte();
  secondaryWeaponState=buffer.getByte();
  operatorId=buffer.getUnsignedByte();
}","@Override public void read(IOBuffer buffer){
  super.read(buffer);
  state=buffer.getByte();
  orientation=BufferIO.readAngle(buffer);
  turretOrientation=BufferIO.readAngle(buffer);
  primaryWeaponState=buffer.getByte();
  secondaryWeaponState=buffer.getByte();
  operatorId=BufferIO.readPlayerId(buffer);
}",0.9165302782324058
86603,"@Override public void write(IOBuffer buffer){
  super.write(buffer);
  buffer.putByte(state);
  BufferIO.writeAngle(buffer,orientation);
  BufferIO.writeAngle(buffer,turretOrientation);
  buffer.putByte(primaryWeaponState);
  buffer.putByte(secondaryWeaponState);
  buffer.putUnsignedByte(operatorId);
}","@Override public void write(IOBuffer buffer){
  super.write(buffer);
  buffer.putByte(state);
  BufferIO.writeAngle(buffer,orientation);
  BufferIO.writeAngle(buffer,turretOrientation);
  buffer.putByte(primaryWeaponState);
  buffer.putByte(secondaryWeaponState);
  BufferIO.writePlayerId(buffer,operatorId);
}",0.9135399673735726
86604,"@Override public void read(IOBuffer buffer){
  id=BufferIO.readTeamId(buffer);
  hasPlayers=buffer.getBooleanBit();
  isAttacker=buffer.getBooleanBit();
  isDefender=!isAttacker;
  if (hasPlayers) {
    byte len=buffer.getByteBits(4);
    playerIds=new int[len];
    for (byte i=0; i < len; i++) {
      playerIds[i]=buffer.getUnsignedByte();
    }
  }
}","@Override public void read(IOBuffer buffer){
  id=BufferIO.readTeamId(buffer);
  hasPlayers=buffer.getBooleanBit();
  isAttacker=buffer.getBooleanBit();
  isDefender=!isAttacker;
  if (hasPlayers) {
    byte len=buffer.getByteBits(BufferIO.numPlayerIdBits());
    playerIds=new int[len];
    for (byte i=0; i < len; i++) {
      playerIds[i]=buffer.getUnsignedByte();
    }
  }
}",0.9631650750341064
86605,"@Override public void write(IOBuffer buffer){
  hasPlayers=playerIds != null && playerIds.length > 0;
  BufferIO.writeTeamId(buffer,id);
  buffer.putBooleanBit(hasPlayers);
  buffer.putBooleanBit(isAttacker);
  if (hasPlayers) {
    buffer.putByteBits((byte)playerIds.length,4);
    for (int i=0; i < playerIds.length; i++) {
      buffer.putUnsignedByte(playerIds[i]);
    }
  }
}","@Override public void write(IOBuffer buffer){
  hasPlayers=playerIds != null && playerIds.length > 0;
  BufferIO.writeTeamId(buffer,id);
  buffer.putBooleanBit(hasPlayers);
  buffer.putBooleanBit(isAttacker);
  if (hasPlayers) {
    buffer.putByteBits((byte)playerIds.length,BufferIO.numPlayerIdBits());
    for (int i=0; i < playerIds.length; i++) {
      buffer.putUnsignedByte(playerIds[i]);
    }
  }
}",0.96569250317662
86606,"/** 
 * Enables/Disables weapon recoil (camera shaking)
 * @param recoilEnabled
 */
public void setWeaponRecoilEnabled(boolean recoilEnabled){
  this.config.set(recoilEnabled,KEYS[6]);
}","/** 
 * Enables/Disables weapon recoil (camera shaking)
 * @param recoilEnabled
 */
public void setWeaponRecoilEnabled(boolean recoilEnabled){
  this.config.set(recoilEnabled,KEYS[7]);
}",0.9946236559139784
86607,"/** 
 * Sets the camera offset for following the reticle
 * @param offset
 */
public void setFollowReticleOffset(float offset){
  this.config.set(offset,KEYS[9]);
}","/** 
 * Sets the camera offset for following the reticle
 * @param offset
 */
public void setFollowReticleOffset(float offset){
  this.config.set(offset,KEYS[10]);
}",0.9908814589665652
86608,"/** 
 * @return true if blood is shown
 */
public boolean getBloodEnabled(){
  return this.config.getBool(true,KEYS[7]);
}","/** 
 * @return true if blood is shown
 */
public boolean getBloodEnabled(){
  return this.config.getBool(true,KEYS[8]);
}",0.9918032786885246
86609,"/** 
 * @return true if the weapon shows weapon recoiling (camera shaking)
 */
public boolean getWeaponRecoilEnabled(){
  return this.config.getBool(true,KEYS[6]);
}","/** 
 * @return true if the weapon shows weapon recoiling (camera shaking)
 */
public boolean getWeaponRecoilEnabled(){
  return this.config.getBool(true,KEYS[7]);
}",0.993939393939394
86610,"public boolean getFollowReticleEnabled(){
  return this.config.getBool(false,KEYS[8]);
}","public boolean getFollowReticleEnabled(){
  return this.config.getBool(false,KEYS[9]);
}",0.9886363636363636
86611,"/** 
 * Enables/Disables blood/guts
 * @param bloodEnabled
 */
public void setBloodEnabled(boolean bloodEnabled){
  this.config.set(bloodEnabled,KEYS[7]);
}","/** 
 * Enables/Disables blood/guts
 * @param bloodEnabled
 */
public void setBloodEnabled(boolean bloodEnabled){
  this.config.set(bloodEnabled,KEYS[8]);
}",0.9935897435897436
86612,"public void showDebugInfo(boolean show){
  this.config.set(show,KEYS[10]);
}","public void showDebugInfo(boolean show){
  this.config.set(show,KEYS[11]);
}",0.986842105263158
86613,"/** 
 * @return The camera offset for following the reticle
 */
public float getFollowReticleOffset(){
  return this.config.getFloat(80f,KEYS[9]);
}","/** 
 * @return The camera offset for following the reticle
 */
public float getFollowReticleOffset(){
  return this.config.getFloat(80f,KEYS[10]);
}",0.98989898989899
86614,"/** 
 * The in-game debug console background color
 * @return The in-game debug console background color
 */
public int getConsoleBackgroundColor(){
  return this.config.getInt(0x8f0000FF,KEYS[5]);
}","/** 
 * The in-game debug console background color
 * @return The in-game debug console background color
 */
public int getConsoleBackgroundColor(){
  return this.config.getInt(0x8f0000FF,KEYS[6]);
}",0.9949748743718592
86615,"public void setFollowReticleEnabled(boolean enabled){
  this.config.set(enabled,KEYS[8]);
}","public void setFollowReticleEnabled(boolean enabled){
  this.config.set(enabled,KEYS[9]);
}",0.989010989010989
86616,"public void showFps(boolean show){
  this.config.set(show,KEYS[11]);
}","public void showFps(boolean show){
  this.config.set(show,KEYS[12]);
}",0.9857142857142858
86617,"/** 
 * The in-game debug console foreground color
 * @return The in-game debug console foreground color
 */
public int getConsoleForegroundColor(){
  return this.config.getInt(0xffFFFF00,KEYS[4]);
}","/** 
 * The in-game debug console foreground color
 * @return The in-game debug console foreground color
 */
public int getConsoleForegroundColor(){
  return this.config.getInt(0xffFFFF00,KEYS[5]);
}",0.9949748743718592
86618,"public static void init(ClientSeventhConfig cfg){
  try {
    Cons.println(""String_Node_Str"");
    Cons.getImpl().addCommand(getVolumeCommand());
    config=cfg;
    volume=config.getVolume();
    SoundSystemConfig.setMasterGain(volume);
    SoundSystemConfig.setLogger(new SoundSystemLogger(){
      @Override public void errorMessage(      String message,      String error,      int code){
        Cons.println(""String_Node_Str"" + message + ""String_Node_Str""+ error+ ""String_Node_Str""+ code);
      }
      @Override public void message(      String message,      int code){
        Cons.println(""String_Node_Str"" + message + ""String_Node_Str""+ code);
      }
      @Override public void importantMessage(      String message,      int code){
        Cons.println(""String_Node_Str"" + message + ""String_Node_Str""+ code);
      }
    }
);
    SoundSystemConfig.addLibrary(LibraryLWJGLOpenAL.class);
    SoundSystemConfig.setCodec(""String_Node_Str"",CodecWav.class);
    SoundSystemConfig.setDefaultFadeDistance(10000f);
    soundSystem=new SoundSystem(LibraryLWJGLOpenAL.class);
    setVolume(volume);
    for (int i=0; i < channels.length; i++) {
      channels[i]=createChannel();
    }
    Cons.println(""String_Node_Str"");
  }
 catch (  SoundSystemException e) {
    Cons.println(""String_Node_Str"");
  }
}","public static void init(ClientSeventhConfig cfg){
  try {
    Cons.println(""String_Node_Str"");
    Cons.getImpl().addCommand(getVolumeCommand());
    config=cfg;
    volume=config.getVolume();
    SoundSystemConfig.setMasterGain(volume);
    SoundSystemConfig.setLogger(new SoundSystemLogger(){
      @Override public void errorMessage(      String message,      String error,      int code){
        Cons.println(""String_Node_Str"" + message + ""String_Node_Str""+ error+ ""String_Node_Str""+ code);
      }
      @Override public void message(      String message,      int code){
        Cons.println(""String_Node_Str"" + message + ""String_Node_Str""+ code);
      }
      @Override public void importantMessage(      String message,      int code){
        Cons.println(""String_Node_Str"" + message + ""String_Node_Str""+ code);
      }
    }
);
    SoundSystemConfig.addLibrary(LibraryLWJGLOpenAL.class);
    SoundSystemConfig.setCodec(""String_Node_Str"",CodecWav.class);
    SoundSystemConfig.setDefaultFadeDistance(10000f);
    SoundSystemConfig.setNumberNormalChannels(cfg.getNumberOfSoundChannels());
    soundSystem=new SoundSystem(LibraryLWJGLOpenAL.class);
    setVolume(volume);
    for (int i=0; i < channels.length; i++) {
      channels[i]=createChannel();
    }
    Cons.println(""String_Node_Str"");
  }
 catch (  SoundSystemException e) {
    Cons.println(""String_Node_Str"");
  }
}",0.970686456400742
86619,"/** 
 * Loads any map scripts and/or special entities associated with the game map.  This should be invoked every time a new Round begins  
 */
private void loadMapScripts(){
  File propertiesFile=new File(gameMap.getMapFileName() + ""String_Node_Str"");
  if (propertiesFile.exists()) {
    try {
      Leola runtime=Scripting.newSandboxedRuntime();
      runtime.loadStatics(SeventhScriptingCommonLibrary.class);
      GameServerLeolaLibrary gLib=new GameServerLeolaLibrary(this);
      runtime.loadLibrary(gLib,""String_Node_Str"");
      AILeolaLibrary aiLib=new AILeolaLibrary(this.aiSystem);
      runtime.loadLibrary(aiLib,""String_Node_Str"");
      runtime.put(""String_Node_Str"",this);
      runtime.eval(propertiesFile);
      final Map map=getMap();
      Layer[] layers=map.getBackgroundLayers();
      for (int i=0; i < layers.length; i++) {
        Layer layer=layers[i];
        if (layer != null && layer.isLightLayer()) {
          layer.foreach(new LayerTileIterator(){
            @Override public void onTile(            Tile tile,            int x,            int y){
              if (tile != null) {
                LightBulb light=newLight(map.tileToWorld(x,y));
                light.setColor(0.9f,0.85f,0.85f);
                light.setLuminacity(0.95f);
              }
            }
          }
);
        }
      }
    }
 catch (    Exception e) {
      Cons.println(""String_Node_Str"" + propertiesFile.getName() + ""String_Node_Str"");
      Cons.println(e);
    }
  }
}","/** 
 * Loads any map scripts and/or special entities associated with the game map.  This should be invoked every time a new Round begins  
 */
private void loadMapScripts(){
  File propertiesFile=new File(gameMap.getMapFileName() + ""String_Node_Str"");
  if (propertiesFile.exists()) {
    try {
      this.eventRegistration.unregisterListeners();
      Leola runtime=Scripting.newSandboxedRuntime();
      runtime.loadStatics(SeventhScriptingCommonLibrary.class);
      GameServerLeolaLibrary gLib=new GameServerLeolaLibrary(this);
      runtime.loadLibrary(gLib,""String_Node_Str"");
      AILeolaLibrary aiLib=new AILeolaLibrary(this.aiSystem);
      runtime.loadLibrary(aiLib,""String_Node_Str"");
      runtime.put(""String_Node_Str"",this);
      runtime.eval(propertiesFile);
      final Map map=getMap();
      Layer[] layers=map.getBackgroundLayers();
      for (int i=0; i < layers.length; i++) {
        Layer layer=layers[i];
        if (layer != null && layer.isLightLayer()) {
          layer.foreach(new LayerTileIterator(){
            @Override public void onTile(            Tile tile,            int x,            int y){
              if (tile != null) {
                LightBulb light=newLight(map.tileToWorld(x,y));
                light.setColor(0.9f,0.85f,0.85f);
                light.setLuminacity(0.95f);
              }
            }
          }
);
        }
      }
    }
 catch (    Exception e) {
      Cons.println(""String_Node_Str"" + propertiesFile.getName() + ""String_Node_Str"");
      Cons.println(e);
    }
  }
}",0.982860909690178
86620,"public void setTurretOrientationNow(float desiredOrientation){
  final float fullCircle=FastMath.fullCircle;
  if (desiredOrientation < 0) {
    desiredOrientation+=fullCircle;
  }
  this.turretOrientation=desiredOrientation;
}","public void setTurretOrientationNow(float desiredOrientation){
  final float fullCircle=FastMath.fullCircle;
  if (desiredOrientation < 0) {
    desiredOrientation+=fullCircle;
  }
  this.turretOrientation=desiredOrientation;
  this.desiredTurretOrientation=desiredOrientation;
}",0.8972332015810277
86621,"public void setOrientationNow(float desiredOrientation){
  final float fullCircle=FastMath.fullCircle;
  if (desiredOrientation < 0) {
    desiredOrientation+=fullCircle;
  }
  this.orientation=desiredOrientation;
  syncOOB(this.orientation,pos);
}","public void setOrientationNow(float desiredOrientation){
  final float fullCircle=FastMath.fullCircle;
  if (desiredOrientation < 0) {
    desiredOrientation+=fullCircle;
  }
  this.orientation=desiredOrientation;
  this.desiredOrientation=desiredOrientation;
  syncOOB(this.orientation,pos);
}",0.915129151291513
86622,"/** 
 * @param dispatcher
 */
public EventRegistration(EventDispatcher dispatcher){
  this.dispatcher=dispatcher;
}","/** 
 * @param dispatcher
 */
public EventRegistration(EventDispatcher dispatcher){
  this.dispatcher=dispatcher;
  this.registeredListeners=new ArrayList<>();
}",0.8333333333333334
86623,"/** 
 * Adds an   {@link EventListener} to the supplied event name
 * @param eventName the event name to bind the listener to
 * @param function the listener
 */
public void addEventListener(final String eventName,final LeoObject function){
switch (eventName.toLowerCase()) {
case ""String_Node_Str"":
{
      this.dispatcher.addEventListener(BombDisarmedEvent.class,new BombDisarmedListener(){
        @Override public void onBombDisarmedEvent(        BombDisarmedEvent event){
          callFunction(eventName,function,event);
        }
      }
);
      break;
    }
case ""String_Node_Str"":
{
    this.dispatcher.addEventListener(BombExplodedEvent.class,new BombExplodedListener(){
      @Override public void onBombExplodedEvent(      BombExplodedEvent event){
        callFunction(eventName,function,event);
      }
    }
);
    break;
  }
case ""String_Node_Str"":
{
  this.dispatcher.addEventListener(BombPlantedEvent.class,new BombPlantedListener(){
    @Override public void onBombPlanted(    BombPlantedEvent event){
      callFunction(eventName,function,event);
    }
  }
);
  break;
}
case ""String_Node_Str"":
{
this.dispatcher.addEventListener(FlagCapturedEvent.class,new FlagCapturedListener(){
  @Override public void onFlagCapturedEvent(  FlagCapturedEvent event){
    callFunction(eventName,function,event);
  }
}
);
break;
}
case ""String_Node_Str"":
{
this.dispatcher.addEventListener(FlagReturnedEvent.class,new FlagReturnedListener(){
@Override public void onFlagReturnedEvent(FlagReturnedEvent event){
  callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
this.dispatcher.addEventListener(FlagStolenEvent.class,new FlagStolenListener(){
@Override public void onFlagStolenEvent(FlagStolenEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
this.dispatcher.addEventListener(GameEndEvent.class,new GameEndListener(){
@Override public void onGameEnd(GameEndEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
this.dispatcher.addEventListener(KillRollEvent.class,new KillRollListener(){
@Override public void onKillRoll(KillRollEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
this.dispatcher.addEventListener(KillStreakEvent.class,new KillStreakListener(){
@Override public void onKillStreak(KillStreakEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
this.dispatcher.addEventListener(PlayerAwardEvent.class,new PlayerAwardListener(){
@Override public void onPlayerAward(PlayerAwardEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
this.dispatcher.addEventListener(PlayerJoinedEvent.class,new PlayerJoinedListener(){
@Override public void onPlayerJoined(PlayerJoinedEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
this.dispatcher.addEventListener(PlayerKilledEvent.class,new PlayerKilledListener(){
@Override public void onPlayerKilled(PlayerKilledEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
this.dispatcher.addEventListener(PlayerLeftEvent.class,new PlayerLeftListener(){
@Override public void onPlayerLeft(PlayerLeftEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
this.dispatcher.addEventListener(PlayerSpawnedEvent.class,new PlayerSpawnedListener(){
@Override public void onPlayerSpawned(PlayerSpawnedEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
this.dispatcher.addEventListener(RoundEndedEvent.class,new RoundEndedListener(){
@Override public void onRoundEnded(RoundEndedEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
this.dispatcher.addEventListener(RoundStartedEvent.class,new RoundStartedListener(){
@Override public void onRoundStarted(RoundStartedEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
this.dispatcher.addEventListener(SoundEmittedEvent.class,new SoundEmitterListener(){
@Override public void onSoundEmitted(SoundEmittedEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
this.dispatcher.addEventListener(SurvivorEvent.class,new SurvivorEventListener(){
@Override public void onSurvivorEvent(SurvivorEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
this.dispatcher.addEventListener(TileRemovedEvent.class,new TileRemovedListener(){
@Override public void onTileRemoved(TileRemovedEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
default :
{
Cons.println(""String_Node_Str"" + eventName + ""String_Node_Str"");
}
}
}","/** 
 * Adds an   {@link EventListener} to the supplied event name
 * @param eventName the event name to bind the listener to
 * @param function the listener
 */
public void addEventListener(final String eventName,final LeoObject function){
switch (eventName.toLowerCase()) {
case ""String_Node_Str"":
{
      addEventListener(BombDisarmedEvent.class,new BombDisarmedListener(){
        @Override public void onBombDisarmedEvent(        BombDisarmedEvent event){
          callFunction(eventName,function,event);
        }
      }
);
      break;
    }
case ""String_Node_Str"":
{
    addEventListener(BombExplodedEvent.class,new BombExplodedListener(){
      @Override public void onBombExplodedEvent(      BombExplodedEvent event){
        callFunction(eventName,function,event);
      }
    }
);
    break;
  }
case ""String_Node_Str"":
{
  addEventListener(BombPlantedEvent.class,new BombPlantedListener(){
    @Override public void onBombPlanted(    BombPlantedEvent event){
      callFunction(eventName,function,event);
    }
  }
);
  break;
}
case ""String_Node_Str"":
{
addEventListener(FlagCapturedEvent.class,new FlagCapturedListener(){
  @Override public void onFlagCapturedEvent(  FlagCapturedEvent event){
    callFunction(eventName,function,event);
  }
}
);
break;
}
case ""String_Node_Str"":
{
addEventListener(FlagReturnedEvent.class,new FlagReturnedListener(){
@Override public void onFlagReturnedEvent(FlagReturnedEvent event){
  callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
addEventListener(FlagStolenEvent.class,new FlagStolenListener(){
@Override public void onFlagStolenEvent(FlagStolenEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
addEventListener(GameEndEvent.class,new GameEndListener(){
@Override public void onGameEnd(GameEndEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
addEventListener(KillRollEvent.class,new KillRollListener(){
@Override public void onKillRoll(KillRollEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
addEventListener(KillStreakEvent.class,new KillStreakListener(){
@Override public void onKillStreak(KillStreakEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
addEventListener(PlayerAwardEvent.class,new PlayerAwardListener(){
@Override public void onPlayerAward(PlayerAwardEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
addEventListener(PlayerJoinedEvent.class,new PlayerJoinedListener(){
@Override public void onPlayerJoined(PlayerJoinedEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
addEventListener(PlayerKilledEvent.class,new PlayerKilledListener(){
@Override public void onPlayerKilled(PlayerKilledEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
addEventListener(PlayerLeftEvent.class,new PlayerLeftListener(){
@Override public void onPlayerLeft(PlayerLeftEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
addEventListener(PlayerSpawnedEvent.class,new PlayerSpawnedListener(){
@Override public void onPlayerSpawned(PlayerSpawnedEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
addEventListener(RoundEndedEvent.class,new RoundEndedListener(){
@Override public void onRoundEnded(RoundEndedEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
addEventListener(RoundStartedEvent.class,new RoundStartedListener(){
@Override public void onRoundStarted(RoundStartedEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
addEventListener(SoundEmittedEvent.class,new SoundEmitterListener(){
@Override public void onSoundEmitted(SoundEmittedEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
addEventListener(SurvivorEvent.class,new SurvivorEventListener(){
@Override public void onSurvivorEvent(SurvivorEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
case ""String_Node_Str"":
{
addEventListener(TileRemovedEvent.class,new TileRemovedListener(){
@Override public void onTileRemoved(TileRemovedEvent event){
callFunction(eventName,function,event);
}
}
);
break;
}
default :
{
Cons.println(""String_Node_Str"" + eventName + ""String_Node_Str"");
}
}
}",0.9673188561599656
86624,"private TilesetAtlas parseTilesets(LeoArray tilesets,boolean loadImages) throws Exception {
  if (tilesets.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  TilesetAtlas atlas=new TilesetAtlas();
  for (  LeoObject t : tilesets) {
    LeoMap tileset=t.as();
    if (t.hasObject(""String_Node_Str"")) {
      String source=tileset.getString(""String_Node_Str"");
      if (source.endsWith(""String_Node_Str"")) {
        tileset.putByString(""String_Node_Str"",LeoString.valueOf(""String_Node_Str""));
        tileset.putByString(""String_Node_Str"",LeoString.valueOf(""String_Node_Str""));
      }
 else       if (source.endsWith(""String_Node_Str"")) {
        tileset.putByString(""String_Node_Str"",LeoString.valueOf(""String_Node_Str""));
        tileset.putByString(""String_Node_Str"",LeoString.valueOf(""String_Node_Str""));
      }
 else       if (source.endsWith(""String_Node_Str"")) {
        tileset.putByString(""String_Node_Str"",LeoString.valueOf(""String_Node_Str""));
        tileset.putByString(""String_Node_Str"",LeoString.valueOf(""String_Node_Str""));
      }
      tileset.putByString(""String_Node_Str"",LeoObject.valueOf(32));
      tileset.putByString(""String_Node_Str"",LeoObject.valueOf(32));
    }
    int firstgid=tileset.getInt(""String_Node_Str"");
    int margin=tileset.getInt(""String_Node_Str"");
    int spacing=tileset.getInt(""String_Node_Str"");
    int tilewidth=tileset.getInt(""String_Node_Str"");
    int tileheight=tileset.getInt(""String_Node_Str"");
    LeoMap tilesetprops=null;
    LeoObject props=tileset.getByString(""String_Node_Str"");
    if (LeoObject.isTrue(props) && props.isMap()) {
      tilesetprops=props.as();
    }
    TextureRegion image=null;
    TextureRegion[] images=null;
    if (loadImages) {
      final String imagePath=tileset.getString(""String_Node_Str"");
      image=TextureUtil.loadImage(imagePath);
      image.flip(false,true);
      image.getTexture().setFilter(TextureFilter.Nearest,TextureFilter.Nearest);
      image.getTexture().setWrap(TextureWrap.MirroredRepeat,TextureWrap.MirroredRepeat);
      images=TextureUtil.toTileSet(image,tilewidth,tileheight,margin,spacing);
    }
    atlas.addTileset(new Tileset(firstgid,images,tilesetprops));
  }
  return atlas;
}","private TilesetAtlas parseTilesets(LeoArray tilesets,boolean loadImages) throws Exception {
  if (tilesets.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  TilesetAtlas atlas=new TilesetAtlas();
  for (  LeoObject t : tilesets) {
    LeoMap tileset=t.as();
    if (t.hasObject(""String_Node_Str"")) {
      String source=tileset.getString(""String_Node_Str"");
      if (source.endsWith(""String_Node_Str"")) {
        tileset.putByString(""String_Node_Str"",LeoString.valueOf(""String_Node_Str""));
        tileset.putByString(""String_Node_Str"",LeoString.valueOf(""String_Node_Str""));
      }
 else       if (source.endsWith(""String_Node_Str"")) {
        tileset.putByString(""String_Node_Str"",LeoString.valueOf(""String_Node_Str""));
        tileset.putByString(""String_Node_Str"",LeoString.valueOf(""String_Node_Str""));
      }
 else       if (source.endsWith(""String_Node_Str"")) {
        tileset.putByString(""String_Node_Str"",LeoString.valueOf(""String_Node_Str""));
        tileset.putByString(""String_Node_Str"",LeoString.valueOf(""String_Node_Str""));
      }
      tileset.putByString(""String_Node_Str"",LeoObject.valueOf(32));
      tileset.putByString(""String_Node_Str"",LeoObject.valueOf(32));
    }
    int firstgid=tileset.getInt(""String_Node_Str"");
    int margin=tileset.getInt(""String_Node_Str"");
    int spacing=tileset.getInt(""String_Node_Str"");
    int tilewidth=tileset.getInt(""String_Node_Str"");
    int tileheight=tileset.getInt(""String_Node_Str"");
    LeoMap tilesetprops=null;
    LeoObject props=tileset.getByString(""String_Node_Str"");
    if (LeoObject.isTrue(props) && props.isMap()) {
      tilesetprops=props.as();
    }
    TextureRegion image=null;
    TextureRegion[] images=null;
    if (loadImages) {
      String imagePath=tileset.getString(""String_Node_Str"");
      if (!new File(imagePath).exists()) {
        imagePath=""String_Node_Str"" + imagePath.substring(imagePath.lastIndexOf(""String_Node_Str""),imagePath.length());
      }
      image=TextureUtil.loadImage(imagePath);
      image.flip(false,true);
      image.getTexture().setFilter(TextureFilter.Nearest,TextureFilter.Nearest);
      image.getTexture().setWrap(TextureWrap.MirroredRepeat,TextureWrap.MirroredRepeat);
      images=TextureUtil.toTileSet(image,tilewidth,tileheight,margin,spacing);
    }
    atlas.addTileset(new Tileset(firstgid,images,tilesetprops));
  }
  return atlas;
}",0.9616634178037686
86625,"@Override public void update(TimeStep timeStep){
  ShaderProgram shader=this.shader.getShader();
  shader.begin();
{
    shader.setUniformi(""String_Node_Str"",1);
    shader.setUniformf(""String_Node_Str"",ambientColor.x,ambientColor.y,ambientColor.z,ambientIntensity);
    shader.setUniformf(""String_Node_Str"",SeventhGame.DEFAULT_MINIMIZED_SCREEN_WIDTH,SeventhGame.DEFAULT_MINIMIZED_SCREEN_HEIGHT);
  }
  shader.end();
  for (int i=0; i < this.lights.size(); i++) {
    Light light=this.lights.get(i);
    light.update(timeStep);
  }
}","@Override public void update(TimeStep timeStep){
  ShaderProgram shader=this.shader.getShader();
  shader.begin();
{
    shader.setUniformi(""String_Node_Str"",1);
    shader.setUniformf(""String_Node_Str"",ambientColor.x,ambientColor.y,ambientColor.z,ambientIntensity);
    shader.setUniformf(""String_Node_Str"",Gdx.graphics.getWidth(),Gdx.graphics.getHeight());
  }
  shader.end();
  for (int i=0; i < this.lights.size(); i++) {
    Light light=this.lights.get(i);
    light.update(timeStep);
  }
}",0.8754863813229572
86626,"/** 
 * Adds an input listener to the front
 * @param inputs
 */
public void addInputToFront(Inputs inputs){
  this.inputs.addProcessor(0,inputs);
}","/** 
 * Adds an input listener to the front
 * @param inputs
 */
public void addInputToFront(Inputs inputs){
  this.inputs.removeProcessor(inputs);
  this.inputs.addProcessor(0,inputs);
}",0.8835820895522388
86627,"private void updateInputs(Screen previousScreen){
  if (previousScreen != null) {
    this.inputs.removeProcessor(previousScreen.getInputs());
  }
  Screen screen=this.sm.getCurrentState();
  if (screen != null) {
    Inputs inputs=screen.getInputs();
    this.inputs.addProcessor(inputs);
  }
}","private void updateInputs(Screen previousScreen){
  if (previousScreen != null) {
    removeInput(previousScreen.getInputs());
  }
  Screen screen=this.sm.getCurrentState();
  if (screen != null) {
    Inputs inputs=screen.getInputs();
    this.inputs.addProcessor(inputs);
  }
}",0.3832752613240418
86628,"/** 
 * Adds an input listener
 * @param inputs
 */
public void addInput(Inputs inputs){
  this.inputs.addProcessor(inputs);
}","/** 
 * Adds an input listener
 * @param inputs
 */
public void addInput(Inputs inputs){
  this.inputs.removeProcessor(inputs);
  this.inputs.addProcessor(inputs);
}",0.865979381443299
86629,"private void dialogMenu(){
  if (getDialog().isOpen()) {
    app.removeInput(app.getUiManager());
    getDialog().close();
    Sounds.playGlobalSound(Sounds.uiNavigate);
  }
 else   if (!getSayTxtBx().isDisabled()) {
    hideTextBox(getSayTxtBx());
  }
 else   if (!getTeamSayTxtBx().isDisabled()) {
    hideTextBox(getTeamSayTxtBx());
  }
 else {
    createUI();
    Sounds.playGlobalSound(Sounds.uiNavigate);
  }
}","private void dialogMenu(){
  if (getDialog().isOpen()) {
    app.removeInput(app.getUiManager());
    getDialog().close();
    Sounds.playGlobalSound(Sounds.uiNavigate);
  }
 else   if (!getSayTxtBx().isDisabled()) {
    hideTextBox(getSayTxtBx());
  }
 else   if (!getTeamSayTxtBx().isDisabled()) {
    hideTextBox(getTeamSayTxtBx());
  }
 else {
    createDialogUI();
    Sounds.playGlobalSound(Sounds.uiNavigate);
  }
}",0.9928400954653938
86630,"@Override public void update(TimeStep timeStep){
  game.showScoreBoard(inputs.isKeyDown(Keys.TAB) || controllerInput.isButtonDown(ControllerButtons.SELECT_BTN));
  this.sayTxtBxView.update(timeStep);
  this.teamSayTxtBxView.update(timeStep);
  this.cursor.update(timeStep);
  isDebugMode=inputs.isKeyDown(Keys.ALT_LEFT);
  if (!dialog.isOpen() && (sayTxtBx.isDisabled() && teamSayTxtBx.isDisabled())) {
    if (controllerInput.isButtonReleased(ControllerButtons.START_BTN)) {
      dialogMenu();
    }
    inputKeys=controllerInput.pollInputs(timeStep,keyMap,cursor,inputKeys);
    inputKeys=inputs.pollInputs(timeStep,keyMap,cursor,inputKeys);
    if (inputs.isKeyDown(keyMap.getSayKey())) {
      showTextBox(sayTxtBx);
    }
 else     if (inputs.isKeyDown(keyMap.getTeamSayKey())) {
      showTextBox(teamSayTxtBx);
    }
    if (this.aiShortcutsMenu.isShowing()) {
      if (this.aiShortcuts.checkShortcuts(inputs,app.getConsole(),game)) {
        this.aiShortcutsMenu.hide();
      }
    }
  }
 else {
    this.uiManager.update(timeStep);
    this.uiManager.checkIfCursorIsHovering();
    this.dialogView.update(timeStep);
    inputKeys=0;
  }
  if (!game.isFreeformCamera()) {
    inputMessage.keys=inputKeys;
  }
  Vector2f mousePos=cursor.getCursorPos();
  inputMessage.orientation=game.calcPlayerOrientation(mousePos.x,mousePos.y);
  connection.getClientProtocol().sendPlayerInputMessage(inputMessage);
  connection.updateNetwork(timeStep);
  game.update(timeStep);
  game.applyPlayerInput(mousePos.x,mousePos.y,inputKeys);
  inputKeys=0;
  if (isDebugMode) {
    debugEffects.update(timeStep);
  }
}","@Override public void update(TimeStep timeStep){
  game.showScoreBoard(inputs.isKeyDown(Keys.TAB) || controllerInput.isButtonDown(ControllerButtons.SELECT_BTN));
  this.sayTxtBxView.update(timeStep);
  this.teamSayTxtBxView.update(timeStep);
  this.cursor.update(timeStep);
  isDebugMode=inputs.isKeyDown(Keys.ALT_LEFT);
  if (!dialog.isOpen() && (sayTxtBx.isDisabled() && teamSayTxtBx.isDisabled())) {
    if (controllerInput.isButtonReleased(ControllerButtons.START_BTN)) {
      dialogMenu();
    }
    inputKeys=controllerInput.pollInputs(timeStep,keyMap,cursor,inputKeys);
    inputKeys=inputs.pollInputs(timeStep,keyMap,cursor,inputKeys);
    if (inputs.isKeyDown(keyMap.getSayKey())) {
      showTextBox(sayTxtBx);
    }
 else     if (inputs.isKeyDown(keyMap.getTeamSayKey())) {
      showTextBox(teamSayTxtBx);
    }
    if (this.aiShortcutsMenu.isShowing()) {
      if (this.aiShortcuts.checkShortcuts(inputs,app.getConsole(),game)) {
        this.aiShortcutsMenu.hide();
      }
    }
  }
 else {
    this.uiManager.update(timeStep);
    this.uiManager.checkIfCursorIsHovering();
    this.dialogView.update(timeStep);
    inputKeys=0;
  }
  if (!game.isFreeformCamera()) {
    inputMessage.keys=inputKeys;
  }
 else {
    inputMessage.keys=0;
  }
  Vector2f mousePos=cursor.getCursorPos();
  inputMessage.orientation=game.calcPlayerOrientation(mousePos.x,mousePos.y);
  connection.getClientProtocol().sendPlayerInputMessage(inputMessage);
  connection.updateNetwork(timeStep);
  game.update(timeStep);
  game.applyPlayerInput(mousePos.x,mousePos.y,inputKeys);
  inputKeys=0;
  if (isDebugMode) {
    debugEffects.update(timeStep);
  }
}",0.9886328725038402
86631,"private void createUI(){
  if (this.dialog != null) {
    this.dialog.destroy();
  }
  this.aiShortcutsMenu.hide();
  this.dialog=new InGameOptionsDialog(app.getConsole(),connection,app.getTheme());
  this.dialog.setOnHide(new OnHideListener(){
    @Override public void onShow(){
      game.activateCamera(false);
      uiManager.menuCursor();
    }
    @Override public void onHide(){
      game.activateCamera(true);
      uiManager.gameCursor();
    }
  }
);
  ClientPlayer player=game.getLocalPlayer();
  if (player != null) {
    this.dialog.setTeam(player.getTeam());
  }
  this.dialog.show();
  this.dialog.setBounds(new Rectangle(0,0,400,380));
  this.dialog.getBounds().centerAround(new Vector2f(app.getScreenWidth() / 2,app.getScreenHeight() / 2));
  this.dialog.getLeaveGameBtn().addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      connection.disconnect();
      app.getConsole().execute(""String_Node_Str"");
      app.goToMenuScreen();
    }
  }
);
  this.dialog.getOptions().addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      app.pushScreen(new OptionsScreen(app));
    }
  }
);
  this.dialogView=new InGameOptionsDialogView(dialog);
  if (this.sayTxtBx != null) {
    this.sayTxtBx.destroy();
  }
  this.sayTxtBx=new TextBox();
  this.sayTxtBx.setLabelText(""String_Node_Str"");
  this.sayTxtBxView=new TextBoxView(sayTxtBx);
  setupTextbox(sayTxtBx);
  if (this.teamSayTxtBx != null) {
    this.teamSayTxtBx.destroy();
  }
  this.teamSayTxtBx=new TextBox();
  this.teamSayTxtBx.setLabelText(""String_Node_Str"");
  this.teamSayTxtBxView=new TextBoxView(teamSayTxtBx);
  setupTextbox(teamSayTxtBx);
  this.app.addInputToFront(app.getUiManager());
}","private void createUI(){
  createSayBoxesUI();
  createDialogUI();
}",0.0541688794476898
86632,"/** 
 */
public InGameScreen(final SeventhGame app,final ClientGame game){
  this.app=app;
  this.game=game;
  this.connection=app.getClientConnection();
  this.uiManager=app.getUiManager();
  this.inputMessage=new PlayerInputMessage();
  this.keyMap=app.getKeyMap();
  this.isDebugMode=false;
  this.debugEffects=new Effects();
  this.cursor=app.getUiManager().getCursor();
  List<AIShortcut> commands=new ArrayList<AIShortcut>();
  commands.add(new FollowMeAIShortcut(Keys.P));
  commands.add(new SurpressFireAIShortcut(Keys.O));
  commands.add(new MoveToAIShortcut(Keys.I));
  commands.add(new PlantBombAIShortcut(Keys.J));
  commands.add(new DefuseBombAIShortcut(Keys.K));
  commands.add(new DefendPlantedBombAIShortcut(Keys.L));
  commands.add(new TakeCoverAIShortcut(Keys.U));
  this.aiShortcuts=new AIShortcuts(this.keyMap,commands,commands.get(2),commands.get(1));
  this.aiShortcutsMenu=new AIShortcutsMenu(game,keyMap,aiShortcuts);
  createUI();
  this.controllerInput=new JoystickGameController();
}","/** 
 */
public InGameScreen(final SeventhGame app,final ClientGame game){
  this.app=app;
  this.game=game;
  this.connection=app.getClientConnection();
  this.uiManager=app.getUiManager();
  this.inputMessage=new PlayerInputMessage();
  this.keyMap=app.getKeyMap();
  this.isDebugMode=false;
  this.debugEffects=new Effects();
  this.cursor=app.getUiManager().getCursor();
  List<AIShortcut> commands=new ArrayList<AIShortcut>();
  commands.add(new FollowMeAIShortcut(Keys.P));
  commands.add(new SurpressFireAIShortcut(Keys.O));
  commands.add(new MoveToAIShortcut(Keys.I));
  commands.add(new PlantBombAIShortcut(Keys.J));
  commands.add(new DefuseBombAIShortcut(Keys.K));
  commands.add(new DefendPlantedBombAIShortcut(Keys.L));
  commands.add(new TakeCoverAIShortcut(Keys.U));
  this.aiShortcuts=new AIShortcuts(this.keyMap,commands,commands.get(2),commands.get(1));
  this.aiShortcutsMenu=new AIShortcutsMenu(game,keyMap,aiShortcuts);
  this.controllerInput=new JoystickGameController();
  createUI();
}",0.986138613861386
86633,"@Override public void enter(){
  if (this.game != null) {
    this.game.onReloadVideo();
  }
  if (!this.dialog.isOpen()) {
    game.activateCamera(true);
    uiManager.gameCursor();
  }
  Controllers.addListener(this.controllerInput);
  final ClientProtocol protocol=connection.getClientProtocol();
  Console console=app.getConsole();
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      if (args.length > 1) {
        AICommandMessage msg=new AICommandMessage();
        msg.botId=Integer.parseInt(args[0]);
        msg.command=new AICommand(this.mergeArgsDelimAt(""String_Node_Str"",1,args));
        protocol.sendAICommandMessage(msg);
      }
 else {
        console.println(""String_Node_Str"");
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      connection.disconnect();
      app.goToMenuScreen();
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      TextMessage msg=new TextMessage();
      msg.message=mergeArgsDelim(""String_Node_Str"",args);
      msg.playerId=game.getLocalPlayer().getId();
      protocol.sendTextMessage(msg);
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      TeamTextMessage msg=new TeamTextMessage();
      msg.message=mergeArgsDelim(""String_Node_Str"",args);
      msg.playerId=game.getLocalPlayer().getId();
      protocol.sendTeamTextMessage(msg);
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      if (args.length < 1) {
        console.println(""String_Node_Str"");
      }
 else {
        PlayerSpeechMessage msg=new PlayerSpeechMessage();
        ClientPlayer player=game.getLocalPlayer();
        if (player.isAlive()) {
          msg.playerId=player.getId();
          ClientPlayerEntity entity=player.getEntity();
          if (entity != null) {
            Vector2f pos=entity.getCenterPos();
            msg.posX=(short)pos.x;
            msg.posY=(short)pos.y;
            msg.speechCommand=Byte.parseByte(args[0]);
            Sounds.playSpeechSound(player.getTeam().getId(),msg.speechCommand,pos.x,pos.y);
            protocol.sendPlayerSpeechMessage(msg);
          }
        }
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      if (args.length < 1) {
        console.println(""String_Node_Str"");
      }
 else {
        PlayerSwitchTeamMessage msg=new PlayerSwitchTeamMessage();
        msg.playerId=game.getLocalPlayer().getId();
        String team=args[0];
        if (team.toLowerCase().equals(""String_Node_Str"")) {
          msg.teamId=(byte)ClientTeam.ALLIES.getId();
        }
 else         if (team.toLowerCase().equals(""String_Node_Str"")) {
          msg.teamId=(byte)ClientTeam.AXIS.getId();
        }
 else {
          msg.teamId=(byte)ClientTeam.NONE.getId();
        }
        protocol.sendPlayerSwitchTeamMessage(msg);
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      if (args.length > 0) {
        String msg=null;
        if (args[0].equals(""String_Node_Str"")) {
          if (args.length > 1) {
            RconHash hash=new RconHash(game.getLocalSession().getRconToken());
            msg=""String_Node_Str"" + hash.hash(mergeArgsDelimAt(""String_Node_Str"",1,args).trim());
          }
 else {
            console.println(""String_Node_Str"");
          }
        }
 else {
          msg=this.mergeArgsDelim(""String_Node_Str"",args);
        }
        if (msg != null) {
          protocol.sendRconMessage(new RconMessage(msg));
        }
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      PlayerCommanderMessage msg=new PlayerCommanderMessage();
      ClientPlayer localPlayer=game.getLocalPlayer();
      msg.playerId=localPlayer.getId();
      msg.isCommander=!localPlayer.isCommander();
      protocol.sendPlayerCommanderMessage(msg);
    }
  }
);
}","@Override public void enter(){
  if (this.game != null) {
    this.game.onReloadVideo();
  }
  if (!this.dialog.isOpen()) {
    game.activateCamera(true);
    uiManager.gameCursor();
  }
  Controllers.addListener(this.controllerInput);
  final ClientProtocol protocol=connection.getClientProtocol();
  createSayBoxesUI();
  Console console=app.getConsole();
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      if (args.length > 1) {
        AICommandMessage msg=new AICommandMessage();
        msg.botId=Integer.parseInt(args[0]);
        msg.command=new AICommand(this.mergeArgsDelimAt(""String_Node_Str"",1,args));
        protocol.sendAICommandMessage(msg);
      }
 else {
        console.println(""String_Node_Str"");
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      connection.disconnect();
      app.goToMenuScreen();
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      TextMessage msg=new TextMessage();
      msg.message=mergeArgsDelim(""String_Node_Str"",args);
      msg.playerId=game.getLocalPlayer().getId();
      protocol.sendTextMessage(msg);
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      TeamTextMessage msg=new TeamTextMessage();
      msg.message=mergeArgsDelim(""String_Node_Str"",args);
      msg.playerId=game.getLocalPlayer().getId();
      protocol.sendTeamTextMessage(msg);
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      if (args.length < 1) {
        console.println(""String_Node_Str"");
      }
 else {
        PlayerSpeechMessage msg=new PlayerSpeechMessage();
        ClientPlayer player=game.getLocalPlayer();
        if (player.isAlive()) {
          msg.playerId=player.getId();
          ClientPlayerEntity entity=player.getEntity();
          if (entity != null) {
            Vector2f pos=entity.getCenterPos();
            msg.posX=(short)pos.x;
            msg.posY=(short)pos.y;
            msg.speechCommand=Byte.parseByte(args[0]);
            Sounds.playSpeechSound(player.getTeam().getId(),msg.speechCommand,pos.x,pos.y);
            protocol.sendPlayerSpeechMessage(msg);
          }
        }
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      if (args.length < 1) {
        console.println(""String_Node_Str"");
      }
 else {
        PlayerSwitchTeamMessage msg=new PlayerSwitchTeamMessage();
        msg.playerId=game.getLocalPlayer().getId();
        String team=args[0];
        if (team.toLowerCase().equals(""String_Node_Str"")) {
          msg.teamId=(byte)ClientTeam.ALLIES.getId();
        }
 else         if (team.toLowerCase().equals(""String_Node_Str"")) {
          msg.teamId=(byte)ClientTeam.AXIS.getId();
        }
 else {
          msg.teamId=(byte)ClientTeam.NONE.getId();
        }
        protocol.sendPlayerSwitchTeamMessage(msg);
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      if (args.length > 0) {
        String msg=null;
        if (args[0].equals(""String_Node_Str"")) {
          if (args.length > 1) {
            RconHash hash=new RconHash(game.getLocalSession().getRconToken());
            msg=""String_Node_Str"" + hash.hash(mergeArgsDelimAt(""String_Node_Str"",1,args).trim());
          }
 else {
            console.println(""String_Node_Str"");
          }
        }
 else {
          msg=this.mergeArgsDelim(""String_Node_Str"",args);
        }
        if (msg != null) {
          protocol.sendRconMessage(new RconMessage(msg));
        }
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      PlayerCommanderMessage msg=new PlayerCommanderMessage();
      ClientPlayer localPlayer=game.getLocalPlayer();
      msg.playerId=localPlayer.getId();
      msg.isCommander=!localPlayer.isCommander();
      protocol.sendPlayerCommanderMessage(msg);
    }
  }
);
}",0.997501135847342
86634,"@Override public void destroy(){
}","@Override public void destroy(){
  this.optionsPanel.destroy();
}",0.6868686868686869
86635,"@Override public void exit(){
  this.optionsPanel.hide();
}","@Override public void exit(){
  this.optionsPanel.destroy();
}",0.9421487603305784
86636,"/** 
 * @param args
 */
public static void main(String[] args) throws Exception {
  ClientSeventhConfig config=null;
  try {
    Thread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler(){
      @Override public void uncaughtException(      Thread t,      Throwable e){
        if (t.getName().equals(""String_Node_Str"")) {
          catchException(e);
        }
      }
    }
);
    config=loadConfig();
    VideoConfig vConfig=config.getVideo();
    DisplayMode displayMode=findBestDimensions(vConfig);
    LwjglApplicationConfiguration.disableAudio=true;
    LwjglApplicationConfiguration cfg=new LwjglApplicationConfiguration();
    cfg.setFromDisplayMode(displayMode);
    cfg.fullscreen=vConfig.isFullscreen();
    cfg.title=""String_Node_Str"" + SeventhGame.getVersion();
    cfg.forceExit=true;
    cfg.resizable=false;
    cfg.useGL30=vConfig.useGL30();
    cfg.vSyncEnabled=vConfig.isVsync();
    if (!cfg.fullscreen) {
      cfg.width=1024;
      cfg.height=768;
    }
    new LwjglApplication(new SeventhGame(config),cfg);
  }
 catch (  Exception e) {
    catchException(e);
  }
 finally {
    if (config != null) {
    }
  }
}","/** 
 * @param args
 */
public static void main(String[] args) throws Exception {
  ClientSeventhConfig config=null;
  try {
    Thread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler(){
      @Override public void uncaughtException(      Thread t,      Throwable e){
        if (t.getName().equals(""String_Node_Str"")) {
          catchException(e);
        }
      }
    }
);
    config=loadConfig();
    VideoConfig vConfig=config.getVideo();
    DisplayMode displayMode=findBestDimensions(vConfig);
    LwjglApplicationConfiguration.disableAudio=true;
    LwjglApplicationConfiguration cfg=new LwjglApplicationConfiguration();
    cfg.setFromDisplayMode(displayMode);
    cfg.fullscreen=vConfig.isFullscreen();
    cfg.title=""String_Node_Str"" + SeventhGame.getVersion();
    cfg.forceExit=true;
    cfg.resizable=false;
    cfg.useGL30=vConfig.useGL30();
    cfg.vSyncEnabled=vConfig.isVsync();
    if (!cfg.fullscreen) {
      cfg.width=840;
      cfg.height=480;
    }
    new LwjglApplication(new SeventhGame(config),cfg);
  }
 catch (  Exception e) {
    catchException(e);
  }
 finally {
    if (config != null) {
    }
  }
}",0.980426272292301
86637,"public void drawLine(float x1,float y1,float x2,float y2,Integer color);","public void drawLine(float x1,float y1,float x2,float y2,Integer color,float thickness);",0.9
86638,"/** 
 * Retrieve the desired font and size (may load the font if not cached).
 * @param alias
 * @param size
 * @return the font
 */
private BitmapFont getFont(String alias,int size){
  BitmapFont font=null;
  String mask=alias + ""String_Node_Str"" + size;
  if (this.fonts.containsKey(mask)) {
    font=this.fonts.get(mask);
  }
 else   if (this.generators.containsKey(alias)) {
    FreeTypeFontParameter params=new FreeTypeFontParameter();
    params.size=size;
    params.characters=FreeTypeFontGenerator.DEFAULT_CHARS;
    params.flip=true;
    font=this.generators.get(alias).generateFont(params);
    this.fonts.put(mask,font);
  }
  return font;
}","/** 
 * Retrieve the desired font and size (may load the font if not cached).
 * @param alias
 * @param size
 * @return the font
 */
private BitmapFont getFont(String alias,int size){
  BitmapFont font=null;
  String mask=alias + ""String_Node_Str"" + size;
  if (this.fonts.containsKey(mask)) {
    font=this.fonts.get(mask);
  }
 else   if (this.generators.containsKey(alias)) {
    FreeTypeFontParameter params=new FreeTypeFontParameter();
    params.size=size;
    params.characters=FreeTypeFontGenerator.DEFAULT_CHARS;
    params.flip=true;
    params.magFilter=TextureFilter.Linear;
    params.minFilter=TextureFilter.Linear;
    font=this.generators.get(alias).generateFont(params);
    this.fonts.put(mask,font);
  }
  return font;
}",0.9382183908045976
86639,"@Override public void drawLine(float x1,float y1,float x2,float y2,Integer color){
  Color c=setTempColor(color);
  Gdx.gl.glEnable(GL20.GL_BLEND);
  Gdx.gl.glBlendFunc(GL20.GL_SRC_ALPHA,GL20.GL_ONE_MINUS_SRC_ALPHA);
  this.shapes.setColor(c);
  this.shapes.begin(ShapeType.Line);
  this.shapes.line(x1,y1,x2,y2);
  this.shapes.end();
  Gdx.gl.glDisable(GL20.GL_BLEND);
}","@Override public void drawLine(float x1,float y1,float x2,float y2,Integer color,float thickness){
  Color c=setTempColor(color);
  Gdx.gl.glEnable(GL20.GL_BLEND);
  Gdx.gl.glBlendFunc(GL20.GL_SRC_ALPHA,GL20.GL_ONE_MINUS_SRC_ALPHA);
  Gdx.gl.glLineWidth(thickness);
  this.shapes.setColor(c);
  this.shapes.begin(ShapeType.Line);
  this.shapes.line(x1,y1,x2,y2);
  this.shapes.end();
  Gdx.gl.glDisable(GL20.GL_BLEND);
}",0.9380530973451328
86640,"private void createUI(){
  destroyChildren();
  Rectangle bounds=getBounds();
  if (this.title != null)   title.destroy();
  this.title=new Label(""String_Node_Str"");
  this.title.setTheme(theme);
  this.title.setBounds(new Rectangle(bounds));
  this.title.getBounds().height=30;
  this.title.getBounds().y+=30;
  this.title.setFont(theme.getSecondaryFontName());
  this.title.setHorizontalTextAlignment(TextAlignment.CENTER);
  this.title.setTextSize(32);
  int yInc=60;
  Vector2f pos=new Vector2f(bounds.width / 2,100);
  if (this.weaponClasses != null)   this.weaponClasses.destroy();
  this.weaponClasses=setupButton(pos,""String_Node_Str"");
  pos.y+=yInc;
  this.weaponClasses.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      weaponDialog.getBounds().setLocation(getBounds().x,getBounds().y - 150);
      weaponDialog.show();
    }
  }
);
  if (this.switchTeam != null)   this.switchTeam.destroy();
  this.switchTeam=setupButton(pos,""String_Node_Str"");
  pos.y+=yInc;
  this.switchTeam.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      switchTeamDialog.getBounds().setLocation(getBounds().x,getBounds().y);
      switchTeamDialog.show();
    }
  }
);
  if (this.options != null)   this.options.destroy();
  this.options=setupButton(pos,""String_Node_Str"");
  if (this.leaveGame != null)   this.leaveGame.destroy();
  this.leaveGame=new Button();
  this.leaveGame.setText(""String_Node_Str"");
  this.leaveGame.setBounds(new Rectangle(0,0,100,40));
  this.leaveGame.getBounds().centerAround(bounds.x + 200,bounds.y + bounds.height - 20);
  this.leaveGame.setEnableGradiant(false);
  this.leaveGame.setTheme(theme);
  this.leaveGame.getTextLabel().setFont(theme.getSecondaryFontName());
  this.leaveGame.getTextLabel().setForegroundColor(theme.getForegroundColor());
  this.leaveGame.setTextSize(22);
  this.leaveGame.setHoverTextSize(26);
  addWidget(leaveGame);
  addWidget(title);
}","private void createUI(){
  destroyChildren();
  Rectangle bounds=getBounds();
  if (this.title != null)   title.destroy();
  this.title=new Label(""String_Node_Str"");
  this.title.setTheme(theme);
  this.title.setBounds(new Rectangle(bounds));
  this.title.getBounds().height=30;
  this.title.getBounds().y+=30;
  this.title.setFont(theme.getSecondaryFontName());
  this.title.setHorizontalTextAlignment(TextAlignment.CENTER);
  this.title.setTextSize(32);
  int yInc=60;
  Vector2f pos=new Vector2f(bounds.width / 2,100);
  if (this.weaponClasses != null)   this.weaponClasses.destroy();
  this.weaponClasses=setupButton(pos,""String_Node_Str"");
  pos.y+=yInc;
  this.weaponClasses.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      weaponDialog.getBounds().setLocation(getBounds().x,getBounds().y - 20);
      weaponDialog.show();
    }
  }
);
  if (this.switchTeam != null)   this.switchTeam.destroy();
  this.switchTeam=setupButton(pos,""String_Node_Str"");
  pos.y+=yInc;
  this.switchTeam.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      switchTeamDialog.getBounds().setLocation(getBounds().x,getBounds().y);
      switchTeamDialog.show();
    }
  }
);
  if (this.options != null)   this.options.destroy();
  this.options=setupButton(pos,""String_Node_Str"");
  if (this.leaveGame != null)   this.leaveGame.destroy();
  this.leaveGame=new Button();
  this.leaveGame.setText(""String_Node_Str"");
  this.leaveGame.setBounds(new Rectangle(0,0,100,40));
  this.leaveGame.getBounds().centerAround(bounds.x + 200,bounds.y + bounds.height - 20);
  this.leaveGame.setEnableGradiant(false);
  this.leaveGame.setTheme(theme);
  this.leaveGame.getTextLabel().setFont(theme.getSecondaryFontName());
  this.leaveGame.getTextLabel().setForegroundColor(theme.getForegroundColor());
  this.leaveGame.setTextSize(22);
  this.leaveGame.setHoverTextSize(26);
  addWidget(leaveGame);
  addWidget(title);
}",0.9992663242846662
86641,"/** 
 */
public InGameOptionsDialog(Console console,ClientConnection network,Theme theme){
  super(new EventDispatcher());
  this.theme=theme;
  this.weaponDialog=new WeaponClassDialog(this,network,theme);
  this.weaponDialog.setBounds(new Rectangle(400,680));
  this.weaponDialog.hide();
  this.switchTeamDialog=new SwitchTeamDialog(this,console,theme);
  this.switchTeamDialog.setBounds(new Rectangle(400,380));
  this.switchTeamDialog.hide();
  createUI();
}","/** 
 */
public InGameOptionsDialog(Console console,ClientConnection network,Theme theme){
  super(new EventDispatcher());
  this.theme=theme;
  this.weaponDialog=new WeaponClassDialog(this,network,theme);
  this.weaponDialog.setBounds(new Rectangle(400,440));
  this.weaponDialog.hide();
  this.switchTeamDialog=new SwitchTeamDialog(this,console,theme);
  this.switchTeamDialog.setBounds(new Rectangle(400,380));
  this.switchTeamDialog.hide();
  createUI();
}",0.9956616052060736
86642,"@Override public void render(Canvas canvas,Camera camera,float alpha){
  canvas.drawImage(miniMap,0,0,mapColor);
  Map map=game.getMap();
  float xr=(float)miniMap.getRegionWidth() / (float)map.getMapWidth();
  float yr=(float)miniMap.getRegionHeight() / (float)map.getMapHeight();
  xr-=0.01f;
  yr-=0.01f;
  ClientPlayers players=game.getPlayers();
  for (int i=0; i < players.getMaxNumberOfPlayers(); i++) {
    ClientPlayer ent=players.getPlayer(i);
    if (ent != null && ent.isAlive() && (ent.getEntity().getLastUpdate() > gameClock - 1000)) {
      ClientTeam team=ent.getTeam();
      Vector2f p=ent.getEntity().getCenterPos();
      int x=(int)(xr * p.x);
      int y=(int)(yr * p.y);
      ClientWeapon weapon=ent.getEntity().getWeapon();
      if (weapon != null) {
        if (weapon.getState().equals(WeaponState.FIRING)) {
          canvas.fillCircle(3.0f,x - 1,y - 1,0xfaffff00);
        }
      }
      canvas.fillCircle(2.0f,x,y,team.getColor());
    }
  }
  List<ClientBombTarget> targets=game.getBombTargets();
  for (int i=0; i < targets.size(); i++) {
    ClientBombTarget target=targets.get(i);
    Vector2f p=target.getCenterPos();
    int x=(int)(xr * p.x);
    int y=(int)(yr * p.y);
    if (target.isAlive()) {
      if (target.isBombPlanted()) {
        canvas.fillCircle(4.0f,x - 1,y - 1,0xfaFF3300);
      }
      canvas.fillCircle(3.0f,x,y,0xfa009933);
    }
  }
  Vector2f cameraPos=camera.getRenderPosition(alpha);
  int x=(int)Math.ceil(xr * cameraPos.x + 5);
  int y=(int)Math.ceil(yr * cameraPos.y + 5);
  int width=(int)Math.ceil(camera.getViewPort().width * xr);
  int height=(int)Math.ceil(camera.getViewPort().height * yr);
  canvas.drawRect(x,y,width,height,0x01fffffff);
}","@Override public void render(Canvas canvas,Camera camera,float alpha){
  canvas.drawImage(miniMap,0,0,mapColor);
  Map map=game.getMap();
  float xr=(float)miniMap.getRegionWidth() / (float)map.getMapWidth();
  float yr=(float)miniMap.getRegionHeight() / (float)map.getMapHeight();
  xr-=0.015f;
  yr-=0.015f;
  ClientPlayers players=game.getPlayers();
  for (int i=0; i < players.getMaxNumberOfPlayers(); i++) {
    ClientPlayer ent=players.getPlayer(i);
    if (ent != null && ent.isAlive() && (ent.getEntity().getLastUpdate() > gameClock - 1000)) {
      ClientTeam team=ent.getTeam();
      Vector2f p=ent.getEntity().getCenterPos();
      int x=(int)(xr * p.x);
      int y=(int)(yr * p.y);
      ClientWeapon weapon=ent.getEntity().getWeapon();
      if (weapon != null) {
        if (weapon.getState().equals(WeaponState.FIRING)) {
          canvas.fillCircle(3.0f,x - 1,y - 1,0xfaffff00);
        }
      }
      canvas.fillCircle(2.0f,x,y,team.getColor());
    }
  }
  List<ClientBombTarget> targets=game.getBombTargets();
  for (int i=0; i < targets.size(); i++) {
    ClientBombTarget target=targets.get(i);
    Vector2f p=target.getCenterPos();
    int x=(int)(xr * p.x);
    int y=(int)(yr * p.y);
    if (target.isAlive()) {
      if (target.isBombPlanted()) {
        canvas.fillCircle(4.0f,x - 1,y - 1,0xfaFF3300);
      }
      canvas.fillCircle(3.0f,x,y,0xfa009933);
    }
  }
  Vector2f cameraPos=camera.getRenderPosition(alpha);
  int x=(int)Math.ceil(xr * cameraPos.x + 5);
  int y=(int)Math.ceil(yr * cameraPos.y + 5);
  int width=(int)Math.ceil(camera.getViewPort().width * xr);
  int height=(int)Math.ceil(camera.getViewPort().height * yr);
  canvas.drawRect(x,y,width,height,0x01fffffff);
}",0.999416569428238
86643,"private Vector2f refreshButtons(){
  Rectangle bounds=getBounds();
  Vector2f pos=new Vector2f();
  pos.x=bounds.x + 120;
  pos.y=bounds.y + 70;
  int yInc=80;
  for (int i=0; i < weaponClasses.length; i++) {
    if (this.weaponClasses[i] != null) {
      removeWidget(weaponClasses[i]);
      this.weaponClasses[i].destroy();
      this.weaponClasses[i]=null;
      removeWidget(this.weaponClassDescriptions[i]);
      this.weaponClassDescriptions[i].destroy();
      this.weaponClassDescriptions[i]=null;
    }
  }
switch (team) {
case AXIS:
    this.weaponClasses[0]=setupButton(pos,Type.MP40);
  this.weaponClassDescriptions[0]=setupLabel(pos,Type.MP40);
pos.y+=yInc;
this.weaponClasses[1]=setupButton(pos,Type.MP44);
this.weaponClassDescriptions[1]=setupLabel(pos,Type.MP44);
pos.y+=yInc;
this.weaponClasses[2]=setupButton(pos,Type.KAR98);
this.weaponClassDescriptions[2]=setupLabel(pos,Type.KAR98);
pos.y+=yInc;
break;
case ALLIES:
default :
this.weaponClasses[0]=setupButton(pos,Type.THOMPSON);
this.weaponClassDescriptions[0]=setupLabel(pos,Type.THOMPSON);
pos.y+=yInc;
this.weaponClasses[1]=setupButton(pos,Type.M1_GARAND);
this.weaponClassDescriptions[1]=setupLabel(pos,Type.M1_GARAND);
pos.y+=yInc;
this.weaponClasses[2]=setupButton(pos,Type.SPRINGFIELD);
this.weaponClassDescriptions[2]=setupLabel(pos,Type.SPRINGFIELD);
pos.y+=yInc;
break;
}
this.weaponClasses[3]=setupButton(pos,Type.RISKER);
this.weaponClassDescriptions[3]=setupLabel(pos,Type.RISKER);
pos.y+=yInc;
this.weaponClasses[4]=setupButton(pos,Type.SHOTGUN);
this.weaponClassDescriptions[4]=setupLabel(pos,Type.SHOTGUN);
pos.y+=yInc;
this.weaponClasses[5]=setupButton(pos,Type.ROCKET_LAUNCHER);
this.weaponClassDescriptions[5]=setupLabel(pos,Type.ROCKET_LAUNCHER);
pos.y+=yInc;
this.weaponClasses[6]=setupButton(pos,Type.FLAME_THROWER);
this.weaponClassDescriptions[6]=setupLabel(pos,Type.FLAME_THROWER);
return pos;
}","private Vector2f refreshButtons(){
  Rectangle bounds=getBounds();
  Vector2f pos=new Vector2f();
  pos.x=bounds.x + 120;
  pos.y=bounds.y + 50;
  int yInc=50;
  for (int i=0; i < weaponClasses.length; i++) {
    if (this.weaponClasses[i] != null) {
      removeWidget(weaponClasses[i]);
      this.weaponClasses[i].destroy();
      this.weaponClasses[i]=null;
      removeWidget(this.weaponClassDescriptions[i]);
      this.weaponClassDescriptions[i].destroy();
      this.weaponClassDescriptions[i]=null;
    }
  }
switch (team) {
case AXIS:
    this.weaponClasses[0]=setupButton(pos,Type.MP40);
  this.weaponClassDescriptions[0]=setupLabel(pos,Type.MP40);
pos.y+=yInc;
this.weaponClasses[1]=setupButton(pos,Type.MP44);
this.weaponClassDescriptions[1]=setupLabel(pos,Type.MP44);
pos.y+=yInc;
this.weaponClasses[2]=setupButton(pos,Type.KAR98);
this.weaponClassDescriptions[2]=setupLabel(pos,Type.KAR98);
pos.y+=yInc;
break;
case ALLIES:
default :
this.weaponClasses[0]=setupButton(pos,Type.THOMPSON);
this.weaponClassDescriptions[0]=setupLabel(pos,Type.THOMPSON);
pos.y+=yInc;
this.weaponClasses[1]=setupButton(pos,Type.M1_GARAND);
this.weaponClassDescriptions[1]=setupLabel(pos,Type.M1_GARAND);
pos.y+=yInc;
this.weaponClasses[2]=setupButton(pos,Type.SPRINGFIELD);
this.weaponClassDescriptions[2]=setupLabel(pos,Type.SPRINGFIELD);
pos.y+=yInc;
break;
}
this.weaponClasses[3]=setupButton(pos,Type.RISKER);
this.weaponClassDescriptions[3]=setupLabel(pos,Type.RISKER);
pos.y+=yInc;
this.weaponClasses[4]=setupButton(pos,Type.SHOTGUN);
this.weaponClassDescriptions[4]=setupLabel(pos,Type.SHOTGUN);
pos.y+=yInc;
this.weaponClasses[5]=setupButton(pos,Type.ROCKET_LAUNCHER);
this.weaponClassDescriptions[5]=setupLabel(pos,Type.ROCKET_LAUNCHER);
pos.y+=yInc;
this.weaponClasses[6]=setupButton(pos,Type.FLAME_THROWER);
this.weaponClassDescriptions[6]=setupLabel(pos,Type.FLAME_THROWER);
return pos;
}",0.9989434759640782
86644,"private Button setupButton(Vector2f pos,final Type type){
  final Button btn=new Button();
  btn.setBounds(new Rectangle((int)pos.x,(int)pos.y,320,70));
  btn.setBorder(false);
  btn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      if (connection.isConnected()) {
        PlayerSwitchWeaponClassMessage msg=new PlayerSwitchWeaponClassMessage();
        msg.weaponType=type;
        connection.getClientProtocol().sendPlayerSwitchWeaponClassMessage(msg);
      }
      owner.close();
    }
  }
);
  addWidget(btn);
  return btn;
}","private Button setupButton(Vector2f pos,final Type type){
  final Button btn=new Button();
  btn.setBounds(new Rectangle((int)pos.x,(int)pos.y,320,40));
  btn.setBorder(false);
  btn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      if (connection.isConnected()) {
        PlayerSwitchWeaponClassMessage msg=new PlayerSwitchWeaponClassMessage();
        msg.weaponType=type;
        connection.getClientProtocol().sendPlayerSwitchWeaponClassMessage(msg);
      }
      owner.close();
    }
  }
);
  addWidget(btn);
  return btn;
}",0.9983606557377048
86645,"private Label setupLabel(Vector2f pos,final Type type){
  Label lbl=new Label(this.getClassDescription(type));
  lbl.setBounds(new Rectangle((int)pos.x + 80,(int)pos.y + 5,220,80));
  lbl.setTextSize(14);
  lbl.setForegroundColor(this.theme.getForegroundColor());
  lbl.setShadow(false);
  lbl.setFont(""String_Node_Str"");
  lbl.setHorizontalTextAlignment(TextAlignment.LEFT);
  lbl.setVerticalTextAlignment(TextAlignment.TOP);
  lbl.hide();
  addWidget(lbl);
  return lbl;
}","private Label setupLabel(Vector2f pos,final Type type){
  Label lbl=new Label(this.getClassDescription(type));
  lbl.setBounds(new Rectangle((int)pos.x + 80,(int)pos.y,220,60));
  lbl.setTextSize(12);
  lbl.setForegroundColor(this.theme.getForegroundColor());
  lbl.setShadow(false);
  lbl.setFont(""String_Node_Str"");
  lbl.setHorizontalTextAlignment(TextAlignment.LEFT);
  lbl.setVerticalTextAlignment(TextAlignment.TOP);
  lbl.hide();
  addWidget(lbl);
  return lbl;
}",0.9915254237288136
86646,"private void createUI(){
  destroyChildren();
  Rectangle bounds=getBounds();
  this.title=new Label(""String_Node_Str"");
  this.title.setTheme(theme);
  this.title.setBounds(new Rectangle(bounds));
  this.title.getBounds().height=30;
  this.title.getBounds().y+=30;
  this.title.setFont(theme.getSecondaryFontName());
  this.title.setHorizontalTextAlignment(TextAlignment.CENTER);
  this.title.setTextSize(28);
  refreshButtons();
  this.cancel=new Button();
  this.cancel.setText(""String_Node_Str"");
  this.cancel.setBounds(new Rectangle(0,0,100,40));
  this.cancel.getBounds().centerAround(bounds.x + 205,bounds.y + bounds.height - 20);
  this.cancel.setEnableGradiant(false);
  this.cancel.setTheme(theme);
  this.cancel.getTextLabel().setFont(theme.getSecondaryFontName());
  this.cancel.getTextLabel().setForegroundColor(theme.getForegroundColor());
  this.cancel.setTextSize(22);
  this.cancel.setHoverTextSize(26);
  this.cancel.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      owner.close();
    }
  }
);
  addWidget(cancel);
  addWidget(title);
}","private void createUI(){
  destroyChildren();
  Rectangle bounds=getBounds();
  this.title=new Label(""String_Node_Str"");
  this.title.setTheme(theme);
  this.title.setBounds(new Rectangle(bounds));
  this.title.getBounds().height=15;
  this.title.getBounds().y+=20;
  this.title.setFont(theme.getSecondaryFontName());
  this.title.setHorizontalTextAlignment(TextAlignment.CENTER);
  this.title.setTextSize(22);
  refreshButtons();
  this.cancel=new Button();
  this.cancel.setText(""String_Node_Str"");
  this.cancel.setBounds(new Rectangle(0,0,100,40));
  this.cancel.getBounds().centerAround(bounds.x + 205,bounds.y + bounds.height - 10);
  this.cancel.setEnableGradiant(false);
  this.cancel.setTheme(theme);
  this.cancel.getTextLabel().setFont(theme.getSecondaryFontName());
  this.cancel.getTextLabel().setForegroundColor(theme.getForegroundColor());
  this.cancel.setTextSize(22);
  this.cancel.setHoverTextSize(26);
  this.cancel.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      owner.close();
    }
  }
);
  addWidget(cancel);
  addWidget(title);
}",0.9955985915492958
86647,"/** 
 */
public WeaponClassDialogView(WeaponClassDialog dialog){
  this.dialog=dialog;
  this.panelView=new PanelView();
  this.panelView.addElement(new LabelView(dialog.getTitle()));
  this.panelView.addElement(new ButtonView(dialog.getCancelBtn()));
  this.origin=new Vector2f();
  Button[] btns=dialog.getWeaponClasses();
  this.weaponBtns=btns;
  if (btns.length != 7) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  for (  Button btn : this.weaponBtns) {
    this.panelView.addElement(new SelectionAreaView(btn,dialog));
  }
  this.origin.set(this.weaponBtns[0].getBounds().x,this.weaponBtns[0].getBounds().y);
  this.originalButtonWidth=this.weaponBtns[0].getBounds().width;
switch (dialog.getTeam()) {
case ALLIES:
    this.panelView.addElement(new ImageButtonView(btns[0],scale(Art.thompsonIcon)));
  this.panelView.addElement(new ImageButtonView(btns[1],Art.m1GarandIcon));
this.panelView.addElement(new ImageButtonView(btns[2],Art.springfieldIcon));
break;
case AXIS:
this.panelView.addElement(new ImageButtonView(btns[0],Art.mp40Icon));
this.panelView.addElement(new ImageButtonView(btns[1],Art.mp44Icon));
this.panelView.addElement(new ImageButtonView(btns[2],Art.kar98Icon));
break;
default :
break;
}
this.panelView.addElement(new ImageButtonView(btns[3],Art.riskerIcon));
this.panelView.addElement(new ImageButtonView(btns[4],Art.shotgunIcon));
this.panelView.addElement(new ImageButtonView(btns[5],Art.rocketIcon));
this.panelView.addElement(new ImageButtonView(btns[6],Art.flameThrowerIcon));
this.weaponDescriptions=dialog.getWeaponClassDescriptions();
for (Label lbl : this.weaponDescriptions) {
this.panelView.addElement(new LabelView(lbl));
}
}","/** 
 */
public WeaponClassDialogView(WeaponClassDialog dialog){
  this.dialog=dialog;
  this.panelView=new PanelView();
  this.panelView.addElement(new LabelView(dialog.getTitle()));
  this.panelView.addElement(new ButtonView(dialog.getCancelBtn()));
  this.origin=new Vector2f();
  Button[] btns=dialog.getWeaponClasses();
  this.weaponBtns=btns;
  if (btns.length != 7) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  for (  Button btn : this.weaponBtns) {
    this.panelView.addElement(new SelectionAreaView(btn,dialog));
  }
  this.origin.set(this.weaponBtns[0].getBounds().x,this.weaponBtns[0].getBounds().y);
  this.originalButtonWidth=this.weaponBtns[0].getBounds().width;
switch (dialog.getTeam()) {
case ALLIES:
    this.panelView.addElement(new ImageButtonView(btns[0],scale(Art.thompsonIcon)));
  this.panelView.addElement(new ImageButtonView(btns[1],scale(Art.m1GarandIcon)));
this.panelView.addElement(new ImageButtonView(btns[2],scale(Art.springfieldIcon)));
break;
case AXIS:
this.panelView.addElement(new ImageButtonView(btns[0],scale(Art.mp40Icon)));
this.panelView.addElement(new ImageButtonView(btns[1],scale(Art.mp44Icon)));
this.panelView.addElement(new ImageButtonView(btns[2],scale(Art.kar98Icon)));
break;
default :
break;
}
this.panelView.addElement(new ImageButtonView(btns[3],scale(Art.riskerIcon)));
this.panelView.addElement(new ImageButtonView(btns[4],scale(Art.shotgunIcon)));
this.panelView.addElement(new ImageButtonView(btns[5],scale(Art.rocketIcon)));
this.panelView.addElement(new ImageButtonView(btns[6],scale(Art.flameThrowerIcon)));
this.weaponDescriptions=dialog.getWeaponClassDescriptions();
for (Label lbl : this.weaponDescriptions) {
this.panelView.addElement(new LabelView(lbl));
}
}",0.9816380064121248
86648,"private TextureRegion scale(TextureRegion tex){
  TextureRegion sprite=new TextureRegion(tex);
  sprite.setRegionWidth(350);
  return sprite;
}","private TextureRegion scale(TextureRegion tex){
  Sprite sprite=new Sprite(tex);
  sprite.setSize(110,45);
  return sprite;
}",0.7985074626865671
86649,"/** 
 * Given the game state, retrieve the   {@link Entity}'s in the current entities view.
 * @param game
 * @return a list of {@link Entity}s that are in this players view
 */
public List<Entity> getEntitiesInView(Game game,List<Entity> entitiesInView){
  Map map=game.getMap();
  Entity[] entities=game.getEntities();
  Vector2f centerPos=getCenterPos();
  this.visualBounds.centerAround(centerPos);
  if (isOperatingVehicle()) {
    getVehicle().calculateLineOfSight(game.tilesInLineOfSight);
  }
 else {
    calculateLineOfSight(game.tilesInLineOfSight);
  }
  for (int i=0; i < entities.length; i++) {
    Entity ent=entities[i];
    if (ent == null) {
      continue;
    }
    Type entType=ent.getType();
    boolean isCalculatedEntity=entType == Type.PLAYER;
    if (isCalculatedEntity && game.isEnableFOW()) {
      if (ent.getId() != id) {
        Vector2f pos=ent.getCenterPos();
        Vector2f.Vector2fSubtract(pos,centerPos,this.enemyDir);
        Vector2f.Vector2fNormalize(this.enemyDir,this.enemyDir);
        if (!game.isEntityReachable(ent,centerPos,this.enemyDir)) {
          continue;
        }
        int px=(int)pos.x;
        int py=(int)pos.y;
        Tile tile=map.getWorldTile(0,px,py);
        if (tile != null) {
          if (tile.getMask() > 0) {
            entitiesInView.add(ent);
            continue;
          }
        }
        int width=ent.getBounds().width;
        int height=ent.getBounds().height;
        px=(int)ent.getPos().x;
        py=(int)ent.getPos().y;
        tile=map.getWorldTile(0,px + width,py);
        if (tile != null) {
          if (tile.getMask() > 0) {
            entitiesInView.add(ent);
            continue;
          }
        }
        tile=map.getWorldTile(0,px + width,py + height);
        if (tile != null) {
          if (tile.getMask() > 0) {
            entitiesInView.add(ent);
            continue;
          }
        }
        tile=map.getWorldTile(0,px,py + height);
        if (tile != null) {
          if (tile.getMask() > 0) {
            entitiesInView.add(ent);
            continue;
          }
        }
        tile=map.getWorldTile(0,px,py);
        if (tile != null) {
          if (tile.getMask() > 0) {
            entitiesInView.add(ent);
            continue;
          }
        }
      }
    }
 else {
      Type type=ent.getType();
switch (type) {
case BOMB:
        Bomb bomb=(Bomb)ent;
      if (bomb.isPlanted()) {
        entitiesInView.add(ent);
      }
    break;
case LIGHT_BULB:
case BOMB_TARGET:
  break;
default :
{
  if (visualBounds.intersects(ent.getBounds())) {
    entitiesInView.add(ent);
  }
}
}
}
}
pruneEntitiesBehindSmoke(entitiesInView);
return entitiesInView;
}","/** 
 * Given the game state, retrieve the   {@link Entity}'s in the current entities view.
 * @param game
 * @return a list of {@link Entity}s that are in this players view
 */
public List<Entity> getEntitiesInView(Game game,List<Entity> entitiesInView){
  Map map=game.getMap();
  Entity[] entities=game.getEntities();
  Vector2f centerPos=getCenterPos();
  this.visualBounds.centerAround(centerPos);
  if (isOperatingVehicle()) {
    getVehicle().calculateLineOfSight(game.tilesInLineOfSight);
  }
 else {
    calculateLineOfSight(game.tilesInLineOfSight);
  }
  for (int i=0; i < entities.length; i++) {
    Entity ent=entities[i];
    if (ent == null) {
      continue;
    }
    Type entType=ent.getType();
    boolean isCalculatedEntity=entType == Type.PLAYER;
    if (isCalculatedEntity && game.isEnableFOW()) {
      if (ent.getId() != id) {
        Vector2f pos=ent.getCenterPos();
        Vector2f.Vector2fSubtract(pos,centerPos,this.enemyDir);
        Vector2f.Vector2fNormalize(this.enemyDir,this.enemyDir);
        if (!game.isEntityReachable(ent,centerPos,this.enemyDir)) {
          continue;
        }
        int px=(int)pos.x;
        int py=(int)pos.y;
        Tile tile=map.getWorldTile(0,px,py);
        if (tile != null) {
          if (tile.getMask() > 0) {
            entitiesInView.add(ent);
            continue;
          }
        }
        int width=ent.getBounds().width;
        int height=ent.getBounds().height;
        px=(int)ent.getPos().x;
        py=(int)ent.getPos().y;
        tile=map.getWorldTile(0,px + width,py);
        if (tile != null) {
          if (tile.getMask() > 0) {
            entitiesInView.add(ent);
            continue;
          }
        }
        tile=map.getWorldTile(0,px + width,py + height);
        if (tile != null) {
          if (tile.getMask() > 0) {
            entitiesInView.add(ent);
            continue;
          }
        }
        tile=map.getWorldTile(0,px,py + height);
        if (tile != null) {
          if (tile.getMask() > 0) {
            entitiesInView.add(ent);
            continue;
          }
        }
        tile=map.getWorldTile(0,px,py);
        if (tile != null) {
          if (tile.getMask() > 0) {
            entitiesInView.add(ent);
            continue;
          }
        }
      }
    }
 else {
      Type type=ent.getType();
switch (type) {
case BOMB:
        Bomb bomb=(Bomb)ent;
      if (bomb.isPlanted()) {
        entitiesInView.add(ent);
      }
    break;
case LIGHT_BULB:
case BOMB_TARGET:
default :
{
    if (visualBounds.intersects(ent.getBounds())) {
      entitiesInView.add(ent);
    }
  }
}
}
}
pruneEntitiesBehindSmoke(entitiesInView);
return entitiesInView;
}",0.9968383857169424
86650,"@Override public void onRoundStarted(RoundStartedEvent event){
  for (  Tile tile : map.getRemovedTiles()) {
    graph.removeNode(tile.getXIndex(),tile.getYIndex());
  }
  map.restoreDestroyedTiles();
  loadMapScripts();
  aiSystem.startOfRound(Game.this);
}","@Override public void onRoundStarted(RoundStartedEvent event){
  for (int i=MAX_PLAYERS; i < deadFrames.length; i++) {
    deadFrames[i]=999;
  }
  for (  Tile tile : map.getRemovedTiles()) {
    graph.removeNode(tile.getXIndex(),tile.getYIndex());
  }
  map.restoreDestroyedTiles();
  loadMapScripts();
  aiSystem.startOfRound(Game.this);
}",0.8614357262103506
86651,"/** 
 * @param config
 * @param players
 * @param gameType
 * @param gameMap
 * @param dispatcher
 */
public Game(SeventhConfig config,final Players players,final GameType gameType,GameMap gameMap,EventDispatcher dispatcher){
  this.config=config;
  this.gameType=gameType;
  this.dispatcher=dispatcher;
  this.gameMap=gameMap;
  this.map=gameMap.getMap();
  this.graph=map.createMapGraph(new NodeData());
  this.gameTimers=new Timers(MAX_TIMERS);
  this.gameTriggers=new Triggers(this);
  this.entities=new Entity[MAX_ENTITIES];
  this.playerEntities=new PlayerEntity[MAX_PLAYERS];
  this.deadFrames=new int[MAX_ENTITIES];
  this.playerUpdates=new NetGameUpdate[MAX_ENTITIES];
  for (int i=0; i < this.playerUpdates.length; i++) {
    this.playerUpdates[i]=new NetGameUpdate();
  }
  this.bombTargets=new ArrayList<BombTarget>();
  this.vehicles=new ArrayList<Vehicle>();
  this.flags=new ArrayList<Flag>();
  this.doors=new ArrayList<Door>();
  this.smokeEntities=new ArrayList<Smoke>();
  this.soundEvents=new SoundEventPool(SeventhConstants.MAX_SOUNDS);
  this.lastFramesSoundEvents=new SoundEventPool(SeventhConstants.MAX_SOUNDS);
  this.aiSystem=new DefaultAISystem();
  this.random=new Random();
  this.players=players;
  this.gameState=new NetGameState();
  this.gamePartialStats=new NetGamePartialStats();
  this.gameStats=new NetGameStats();
  this.enableFOW=true;
  this.time=gameType.getMatchTime();
  this.TILE_WIDTH=map.getTileWidth();
  this.TILE_HEIGHT=map.getTileHeight();
  this.DISTANCE_CHECK=TILE_HEIGHT * TILE_WIDTH * 2;
  this.dispatcher.addEventListener(PlayerKilledEvent.class,new PlayerKilledListener(){
    @Override @EventMethod public void onPlayerKilled(    PlayerKilledEvent event){
      if (gameType.isInProgress()) {
        Player killed=event.getPlayer();
        killed.incrementDeaths();
        aiSystem.playerKilled(killed);
        Player killer=players.getPlayer(event.getKillerId());
        if (killer != null) {
          if (killed.getTeam().getId() == killer.getTeam().getId()) {
            killer.loseKill();
          }
 else           if (killed.getId() == killer.getId()) {
            killer.loseKill();
          }
 else {
            killer.incrementKills();
          }
        }
      }
    }
  }
);
  this.dispatcher.addEventListener(PlayerSpawnedEvent.class,new PlayerSpawnedListener(){
    @Override @EventMethod public void onPlayerSpawned(    PlayerSpawnedEvent event){
    }
  }
);
  this.dispatcher.addEventListener(SoundEmittedEvent.class,new SoundEmitterListener(){
    @Override @EventMethod public void onSoundEmitted(    SoundEmittedEvent event){
      soundEvents.emitSound(event);
    }
  }
);
  this.dispatcher.addEventListener(RoundStartedEvent.class,new RoundStartedListener(){
    @Override public void onRoundStarted(    RoundStartedEvent event){
      for (      Tile tile : map.getRemovedTiles()) {
        graph.removeNode(tile.getXIndex(),tile.getYIndex());
      }
      map.restoreDestroyedTiles();
      loadMapScripts();
      aiSystem.startOfRound(Game.this);
    }
  }
);
  this.dispatcher.addEventListener(RoundEndedEvent.class,new RoundEndedListener(){
    @Override public void onRoundEnded(    RoundEndedEvent event){
      gameTimers.removeTimers();
      gameTriggers.removeTriggers();
      aiSystem.endOfRound(Game.this);
    }
  }
);
  this.aiSystem.init(this);
  this.gameType.registerListeners(this,dispatcher);
  this.awardSystem=new PlayerAwardSystem(this);
}","/** 
 * @param config
 * @param players
 * @param gameType
 * @param gameMap
 * @param dispatcher
 */
public Game(SeventhConfig config,final Players players,final GameType gameType,GameMap gameMap,EventDispatcher dispatcher){
  this.config=config;
  this.gameType=gameType;
  this.dispatcher=dispatcher;
  this.gameMap=gameMap;
  this.map=gameMap.getMap();
  this.graph=map.createMapGraph(new NodeData());
  this.gameTimers=new Timers(MAX_TIMERS);
  this.gameTriggers=new Triggers(this);
  this.entities=new Entity[MAX_ENTITIES];
  this.playerEntities=new PlayerEntity[MAX_PLAYERS];
  this.deadFrames=new int[MAX_ENTITIES];
  this.playerUpdates=new NetGameUpdate[MAX_ENTITIES];
  for (int i=0; i < this.playerUpdates.length; i++) {
    this.playerUpdates[i]=new NetGameUpdate();
  }
  this.bombTargets=new ArrayList<BombTarget>();
  this.vehicles=new ArrayList<Vehicle>();
  this.flags=new ArrayList<Flag>();
  this.doors=new ArrayList<Door>();
  this.smokeEntities=new ArrayList<Smoke>();
  this.soundEvents=new SoundEventPool(SeventhConstants.MAX_SOUNDS);
  this.lastFramesSoundEvents=new SoundEventPool(SeventhConstants.MAX_SOUNDS);
  this.aiSystem=new DefaultAISystem();
  this.random=new Random();
  this.players=players;
  this.gameState=new NetGameState();
  this.gamePartialStats=new NetGamePartialStats();
  this.gameStats=new NetGameStats();
  this.enableFOW=true;
  this.time=gameType.getMatchTime();
  this.TILE_WIDTH=map.getTileWidth();
  this.TILE_HEIGHT=map.getTileHeight();
  this.DISTANCE_CHECK=TILE_HEIGHT * TILE_WIDTH * 2;
  this.dispatcher.addEventListener(PlayerKilledEvent.class,new PlayerKilledListener(){
    @Override @EventMethod public void onPlayerKilled(    PlayerKilledEvent event){
      if (gameType.isInProgress()) {
        Player killed=event.getPlayer();
        killed.incrementDeaths();
        aiSystem.playerKilled(killed);
        Player killer=players.getPlayer(event.getKillerId());
        if (killer != null) {
          if (killed.getTeam().getId() == killer.getTeam().getId()) {
            killer.loseKill();
          }
 else           if (killed.getId() == killer.getId()) {
            killer.loseKill();
          }
 else {
            killer.incrementKills();
          }
        }
      }
    }
  }
);
  this.dispatcher.addEventListener(PlayerSpawnedEvent.class,new PlayerSpawnedListener(){
    @Override @EventMethod public void onPlayerSpawned(    PlayerSpawnedEvent event){
    }
  }
);
  this.dispatcher.addEventListener(SoundEmittedEvent.class,new SoundEmitterListener(){
    @Override @EventMethod public void onSoundEmitted(    SoundEmittedEvent event){
      soundEvents.emitSound(event);
    }
  }
);
  this.dispatcher.addEventListener(RoundStartedEvent.class,new RoundStartedListener(){
    @Override public void onRoundStarted(    RoundStartedEvent event){
      for (int i=MAX_PLAYERS; i < deadFrames.length; i++) {
        deadFrames[i]=999;
      }
      for (      Tile tile : map.getRemovedTiles()) {
        graph.removeNode(tile.getXIndex(),tile.getYIndex());
      }
      map.restoreDestroyedTiles();
      loadMapScripts();
      aiSystem.startOfRound(Game.this);
    }
  }
);
  this.dispatcher.addEventListener(RoundEndedEvent.class,new RoundEndedListener(){
    @Override public void onRoundEnded(    RoundEndedEvent event){
      gameTimers.removeTimers();
      gameTriggers.removeTriggers();
      aiSystem.endOfRound(Game.this);
    }
  }
);
  this.aiSystem.init(this);
  this.gameType.registerListeners(this,dispatcher);
  this.awardSystem=new PlayerAwardSystem(this);
}",0.9864459980025682
86652,"/** 
 * Calculates the next valid ID.  If there are no entity slots available,  this will create room by destroying a volatile object.
 * @return a valid id.
 */
public int getNextEntityId(){
  lastValidId=0;
  for (int i=MAX_PLAYERS + MAX_PERSISTANT_ENTITIES + lastValidId; i < MAX_ENTITIES; i++) {
    if (entities[i] == null && deadFrames[i] > 10) {
      lastValidId++;
      return i;
    }
  }
  for (int i=MAX_PLAYERS; i < MAX_ENTITIES; i++) {
    Entity ent=entities[i];
    if (ent != null) {
      Type type=ent.getType();
      if (type == Type.DROPPED_ITEM || type == Type.BULLET) {
        ent.softKill();
        return i;
      }
    }
  }
  return MAX_PLAYERS;
}","/** 
 * Calculates the next valid ID.  If there are no entity slots available,  this will create room by destroying a volatile object.
 * @return a valid id.
 */
public int getNextEntityId(){
  lastValidId=0;
  for (int i=MAX_PLAYERS + MAX_PERSISTANT_ENTITIES + lastValidId; i < MAX_ENTITIES; i++) {
    if (entities[i] == null && deadFrames[i] > 10) {
      lastValidId++;
      return i;
    }
  }
  for (int i=MAX_PLAYERS; i < MAX_ENTITIES; i++) {
    Entity ent=entities[i];
    if (ent != null) {
      Type type=ent.getType();
      if (type == Type.DROPPED_ITEM || type == Type.BULLET) {
        ent.softKill();
        return i;
      }
    }
  }
  return MAX_ENTITIES - 1;
}",0.9860396767083028
86653,"/** 
 * @param dt
 * @return true if blocked
 */
private boolean movementUpdate(TimeStep timeStep){
  if (isDestroyed()) {
    return false;
  }
  boolean isBlocked=false;
  boolean hasThrottle=!this.vel.isZero();
  if (!hasThrottle && !this.isStopped) {
    this.isStopping=true;
  }
  if (isAlive() && (hasThrottle || this.isStopping)) {
    if (currentState != State.WALKING && currentState != State.SPRINTING) {
      currentState=State.RUNNING;
    }
    if (this.throttleWarmupTime < 600) {
      this.throttleWarmupTime+=timeStep.getDeltaTime();
      if (hasOperator() && this.throttleWarmupTime > 590) {
        game.emitSound(getOperator().getId(),SoundType.TANK_REV_UP,getCenterPos());
      }
    }
 else {
      this.throttleStartTime-=timeStep.getDeltaTime();
      if (this.isStopping) {
        this.vel.set(this.previousVel);
        this.stopEase.update(timeStep);
        if (this.stopEase.isExpired()) {
          this.isStopping=false;
          this.isStopped=true;
          return isBlocked;
        }
      }
 else {
        this.stopEase.reset(90f,0f,800);
        this.isStopped=false;
        this.previousVel.set(this.vel);
        if (hasOperator()) {
        }
      }
      float normalSpeed=this.isStopping ? this.stopEase.getValue() : 90f;
      final float movementSpeed=this.throttleStartTime > 0 ? 160f : normalSpeed;
      float dt=(float)timeStep.asFraction();
      float newX=pos.x + vel.x * movementSpeed * dt;
      float newY=pos.y + vel.y * movementSpeed * dt;
      Map map=game.getMap();
      boolean isXBlocked=false;
      boolean isYBlocked=false;
      bounds.x=(int)newX;
      if (map.rectCollides(bounds)) {
        vehicleBB.setLocation(newX + WeaponConstants.TANK_AABB_WIDTH / 2f,vehicleBB.center.y);
        isBlocked=map.rectCollides(vehicleBB);
        if (isBlocked) {
          bounds.x=(int)pos.x;
          isXBlocked=true;
        }
      }
      if (!isBlocked) {
        vehicleBB.setLocation(newX + WeaponConstants.TANK_AABB_WIDTH / 2f,vehicleBB.center.y);
        if (collidesAgainstVehicle(bounds)) {
          bounds.x=(int)pos.x;
          isBlocked=true;
          isXBlocked=true;
        }
      }
      bounds.y=(int)newY;
      if (map.rectCollides(bounds)) {
        vehicleBB.setLocation(vehicleBB.center.x,newY + WeaponConstants.TANK_AABB_HEIGHT / 2f);
        isBlocked=map.rectCollides(vehicleBB);
        if (isBlocked) {
          bounds.y=(int)pos.y;
          isYBlocked=true;
        }
      }
      if (!isBlocked) {
        vehicleBB.setLocation(vehicleBB.center.x,newY + WeaponConstants.TANK_AABB_HEIGHT / 2f);
        if (collidesAgainstVehicle(bounds)) {
          bounds.y=(int)pos.y;
          isBlocked=true;
          isYBlocked=true;
        }
      }
      if (isBlocked && !continueIfBlock()) {
        bounds.x=(int)pos.x;
        bounds.y=(int)pos.y;
        isXBlocked=isYBlocked=true;
      }
      pos.x=isXBlocked ? pos.x : newX;
      pos.y=isYBlocked ? pos.y : newY;
      vel.zeroOut();
    }
  }
 else {
    this.currentState=State.IDLE;
    this.throttleWarmupTime=0;
    this.throttleStartTime=200;
  }
  return isBlocked;
}","/** 
 * @param dt
 * @return true if blocked
 */
private boolean movementUpdate(TimeStep timeStep){
  if (isDestroyed()) {
    return false;
  }
  boolean isBlocked=false;
  boolean hasThrottle=!this.vel.isZero();
  if (!hasThrottle && !this.isStopped) {
    this.isStopping=true;
  }
  if (isAlive() && (hasThrottle || this.isStopping)) {
    if (currentState != State.WALKING && currentState != State.SPRINTING) {
      currentState=State.RUNNING;
    }
    if (this.throttleWarmupTime < 600) {
      this.throttleWarmupTime+=timeStep.getDeltaTime();
      if (hasOperator() && this.throttleWarmupTime > 590) {
        game.emitSound(getOperator().getId(),SoundType.TANK_REV_UP,getCenterPos());
      }
    }
 else {
      this.throttleStartTime-=timeStep.getDeltaTime();
      if (this.isStopping) {
        this.vel.set(this.previousVel);
        this.stopEase.update(timeStep);
        if (this.stopEase.isExpired()) {
          this.isStopping=false;
          this.isStopped=true;
          return isBlocked;
        }
      }
 else {
        this.stopEase.reset(90f,0f,800);
        this.isStopped=false;
        this.previousVel.set(this.vel);
        if (hasOperator()) {
        }
      }
      float normalSpeed=this.isStopping ? this.stopEase.getValue() : 90f;
      final float movementSpeed=this.throttleStartTime > 0 ? 160f : normalSpeed;
      float dt=(float)timeStep.asFraction();
      float newX=pos.x + vel.x * movementSpeed * dt;
      float newY=pos.y + vel.y * movementSpeed * dt;
      newX=Math.max(0,newX);
      newY=Math.max(0,newY);
      Map map=game.getMap();
      boolean isXBlocked=false;
      boolean isYBlocked=false;
      bounds.x=(int)newX;
      if (map.rectCollides(bounds)) {
        vehicleBB.setLocation(newX + WeaponConstants.TANK_AABB_WIDTH / 2f,vehicleBB.center.y);
        isBlocked=map.rectCollides(vehicleBB);
        if (isBlocked) {
          bounds.x=(int)pos.x;
          isXBlocked=true;
        }
      }
      if (!isBlocked) {
        vehicleBB.setLocation(newX + WeaponConstants.TANK_AABB_WIDTH / 2f,vehicleBB.center.y);
        if (collidesAgainstVehicle(bounds)) {
          bounds.x=(int)pos.x;
          isBlocked=true;
          isXBlocked=true;
        }
      }
      bounds.y=(int)newY;
      if (map.rectCollides(bounds)) {
        vehicleBB.setLocation(vehicleBB.center.x,newY + WeaponConstants.TANK_AABB_HEIGHT / 2f);
        isBlocked=map.rectCollides(vehicleBB);
        if (isBlocked) {
          bounds.y=(int)pos.y;
          isYBlocked=true;
        }
      }
      if (!isBlocked) {
        vehicleBB.setLocation(vehicleBB.center.x,newY + WeaponConstants.TANK_AABB_HEIGHT / 2f);
        if (collidesAgainstVehicle(bounds)) {
          bounds.y=(int)pos.y;
          isBlocked=true;
          isYBlocked=true;
        }
      }
      if (isBlocked && !continueIfBlock()) {
        bounds.x=(int)pos.x;
        bounds.y=(int)pos.y;
        isXBlocked=isYBlocked=true;
      }
      pos.x=isXBlocked ? pos.x : newX;
      pos.y=isYBlocked ? pos.y : newY;
      vel.zeroOut();
    }
  }
 else {
    this.currentState=State.IDLE;
    this.throttleWarmupTime=0;
    this.throttleStartTime=200;
  }
  return isBlocked;
}",0.990834386852086
86654,"@Override public void kill(Type meansOfDeath,Vector2f locationOfDeath){
  super.kill(meansOfDeath,locationOfDeath);
  if (isControlledByLocalPlayer()) {
    this.effects.getHurtEffect().reset(1500);
  }
switch (meansOfDeath) {
case EXPLOSION:
case GRENADE:
{
      AnimatedImage anim=null;
      Vector2f pos=new Vector2f(locationOfDeath);
      Vector2f.Vector2fMA(pos,getFacing(),0,pos);
switch (player.getTeam()) {
case ALLIES:
        anim=Art.newAlliedExplosionDeathAnim();
      break;
case AXIS:
    anim=Art.newAxisExplosionDeathAnim();
  break;
default :
break;
}
boolean persist=this.game.getGameType().equals(GameType.Type.OBJ);
if (config.getBloodEnabled()) {
this.effects.addBackgroundEffect(Emitters.newBloodEmitter(locationOfDeath,18,15200,50));
this.effects.addBackgroundEffect(Emitters.newGibEmitter(locationOfDeath,3));
this.effects.addBackgroundEffect(new AnimationEffect(anim,pos,getOrientation(),persist));
}
break;
}
case ROCKET:
case ROCKET_LAUNCHER:
if (config.getBloodEnabled()) {
this.effects.addBackgroundEffect(Emitters.newBloodEmitter(locationOfDeath,18,15200,50));
this.effects.addBackgroundEffect(Emitters.newGibEmitter(locationOfDeath,15));
}
Sounds.startPlaySound(Sounds.gib,getId(),locationOfDeath.x,locationOfDeath.y);
break;
default :
{
if (meansOfDeath != Type.FIRE && config.getBloodEnabled()) {
this.effects.addBackgroundEffect(Emitters.newBloodEmitter(locationOfDeath,16,15200,30));
}
Vector2f pos=new Vector2f(locationOfDeath);
Vector2f.Vector2fMA(pos,getFacing(),0,pos);
Random random=this.game.getRandom();
AnimatedImage anim=null;
switch (player.getTeam()) {
case ALLIES:
{
switch (random.nextInt(4)) {
case 0:
anim=Art.newAlliedBackDeathAnim();
break;
case 1:
anim=Art.newAlliedBackDeath2Anim();
break;
case 2:
anim=Art.newAlliedFrontDeathAnim();
break;
default :
anim=Art.newAlliedFrontDeath2Anim();
break;
}
break;
}
case AXIS:
{
switch (random.nextInt(4)) {
case 0:
anim=Art.newAxisBackDeathAnim();
break;
case 1:
anim=Art.newAxisBackDeath2Anim();
break;
case 2:
anim=Art.newAxisFrontDeathAnim();
break;
default :
anim=Art.newAxisFrontDeath2Anim();
break;
}
break;
}
default :
{
}
}
if (anim != null) {
boolean persist=this.game.getGameType().equals(GameType.Type.OBJ);
this.effects.addBackgroundEffect(new AnimationEffect(anim,pos,getOrientation(),persist));
Sounds.startPlaySound(Sounds.die,getId(),locationOfDeath.x,locationOfDeath.y);
}
}
}
}","@Override public void kill(Type meansOfDeath,Vector2f locationOfDeath){
  super.kill(meansOfDeath,locationOfDeath);
  if (isControlledByLocalPlayer()) {
    this.effects.getHurtEffect().reset(1500);
  }
switch (meansOfDeath) {
case EXPLOSION:
case GRENADE:
{
      AnimatedImage anim=null;
      Vector2f pos=new Vector2f(locationOfDeath);
      Vector2f.Vector2fMA(pos,getFacing(),0,pos);
switch (player.getTeam()) {
case ALLIES:
        anim=Art.newAlliedExplosionDeathAnim();
      break;
case AXIS:
    anim=Art.newAxisExplosionDeathAnim();
  break;
default :
anim=Art.newAlliedExplosionDeathAnim();
break;
}
boolean persist=this.game.getGameType().equals(GameType.Type.OBJ);
if (config.getBloodEnabled()) {
this.effects.addBackgroundEffect(Emitters.newBloodEmitter(locationOfDeath,18,15200,50));
this.effects.addBackgroundEffect(Emitters.newGibEmitter(locationOfDeath,3));
this.effects.addBackgroundEffect(new AnimationEffect(anim,pos,getOrientation(),persist));
}
break;
}
case ROCKET:
case ROCKET_LAUNCHER:
if (config.getBloodEnabled()) {
this.effects.addBackgroundEffect(Emitters.newBloodEmitter(locationOfDeath,18,15200,50));
this.effects.addBackgroundEffect(Emitters.newGibEmitter(locationOfDeath,15));
}
Sounds.startPlaySound(Sounds.gib,getId(),locationOfDeath.x,locationOfDeath.y);
break;
default :
{
if (meansOfDeath != Type.FIRE && config.getBloodEnabled()) {
this.effects.addBackgroundEffect(Emitters.newBloodEmitter(locationOfDeath,16,15200,30));
}
Vector2f pos=new Vector2f(locationOfDeath);
Vector2f.Vector2fMA(pos,getFacing(),0,pos);
Random random=this.game.getRandom();
AnimatedImage anim=null;
switch (player.getTeam()) {
case ALLIES:
{
switch (random.nextInt(4)) {
case 0:
anim=Art.newAlliedBackDeathAnim();
break;
case 1:
anim=Art.newAlliedBackDeath2Anim();
break;
case 2:
anim=Art.newAlliedFrontDeathAnim();
break;
default :
anim=Art.newAlliedFrontDeath2Anim();
break;
}
break;
}
case AXIS:
{
switch (random.nextInt(4)) {
case 0:
anim=Art.newAxisBackDeathAnim();
break;
case 1:
anim=Art.newAxisBackDeath2Anim();
break;
case 2:
anim=Art.newAxisFrontDeathAnim();
break;
default :
anim=Art.newAxisFrontDeath2Anim();
break;
}
break;
}
default :
{
}
}
if (anim != null) {
boolean persist=this.game.getGameType().equals(GameType.Type.OBJ);
this.effects.addBackgroundEffect(new AnimationEffect(anim,pos,getOrientation(),persist));
Sounds.startPlaySound(Sounds.die,getId(),locationOfDeath.x,locationOfDeath.y);
}
}
}
}",0.991714995857498
86655,"private void createUI(){
  this.panelView=new PanelView();
  this.optionsPanel=new Panel();
  this.keyInput=new KeyInput();
  this.keyInput.setDisabled(true);
  this.optionsPanel.addWidget(keyInput);
  this.isFullscreen=app.isFullscreen();
  Vector2f uiPos=new Vector2f(200,app.getScreenHeight() - 30);
  Button saveBtn=setupButton(uiPos,""String_Node_Str"",false);
  saveBtn.getBounds().setSize(140,80);
  saveBtn.getTextLabel().setFont(theme.getPrimaryFontName());
  saveBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      try {
        VideoConfig vConfig=app.getConfig().getVideo();
        if (isFullscreen != app.isFullscreen()) {
          vConfig.setFullscreen(isFullscreen);
          if (!isFullscreen) {
            vConfig.setWidth(SeventhGame.DEFAULT_MINIMIZED_SCREEN_WIDTH);
            vConfig.setHeight(SeventhGame.DEFAULT_MINIMIZED_SCREEN_HEIGHT);
            Gdx.graphics.setDisplayMode(SeventhGame.DEFAULT_MINIMIZED_SCREEN_WIDTH,SeventhGame.DEFAULT_MINIMIZED_SCREEN_HEIGHT,isFullscreen);
          }
 else           if (mode != null) {
            vConfig.setWidth(mode.width);
            vConfig.setHeight(mode.height);
            Gdx.graphics.setDisplayMode(mode.width,mode.height,true);
          }
 else {
            Gdx.graphics.setDisplayMode(app.getScreenWidth(),app.getScreenHeight(),true);
          }
          app.restartVideo();
        }
 else         if (mode != null) {
          if (app.isFullscreen()) {
            vConfig.setWidth(mode.width);
            vConfig.setHeight(mode.height);
            Gdx.graphics.setDisplayMode(mode.width,mode.height,true);
            app.restartVideo();
          }
        }
        if (nameTxtBox != null) {
          String name=nameTxtBox.getText();
          String cfgName=app.getConfig().getPlayerName();
          if (name != null && cfgName != null) {
            if (!name.equals(cfgName)) {
              app.getConfig().setPlayerName(name);
            }
          }
        }
        app.getConfig().setMouseSensitivity(uiManager.getCursor().getMouseSensitivity());
        app.getConfig().save();
      }
 catch (      IOException e) {
        Cons.println(""String_Node_Str"");
        Cons.println(e);
        app.getTerminal().open();
      }
      app.popScreen();
      Sounds.playGlobalSound(Sounds.uiNavigate);
    }
  }
);
  uiPos.x=app.getScreenWidth() - 80;
  Button cancelBtn=setupButton(uiPos,""String_Node_Str"",false);
  cancelBtn.getBounds().setSize(140,80);
  cancelBtn.getTextLabel().setFont(theme.getPrimaryFontName());
  cancelBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      app.popScreen();
      Sounds.playGlobalSound(Sounds.uiNavigate);
    }
  }
);
  nameTxtBox=new TextBox();
  nameTxtBox.setLabelText(""String_Node_Str"");
  nameTxtBox.setTheme(theme);
  nameTxtBox.setBounds(new Rectangle(app.getScreenWidth() / 2 - 50,160,200,30));
  nameTxtBox.setFont(theme.getSecondaryFontName());
  nameTxtBox.setTextSize(18);
  nameTxtBox.getLabel().setTextSize(24);
  nameTxtBox.setFocus(false);
  nameTxtBox.setMaxSize(16);
  nameTxtBox.setText(app.getConfig().getPlayerName());
  nameTxtBox.getTextLabel().setForegroundColor(0xffffffff);
  this.optionsPanel.addWidget(nameTxtBox);
  KeyMap keys=app.getKeyMap();
  Label controlsLbl=new Label(""String_Node_Str"");
  controlsLbl.setTheme(theme);
  controlsLbl.setBounds(new Rectangle(10,200,400,40));
  controlsLbl.setHorizontalTextAlignment(TextAlignment.LEFT);
  controlsLbl.setFont(theme.getPrimaryFontName());
  controlsLbl.setTextSize(18);
  final int startX=230;
  final int startY=270;
  final int yInc=30;
  uiPos.x=startX;
  uiPos.y=startY;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getUpKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getDownKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getLeftKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getRightKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getWalkKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getSprintKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getCrouchKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  uiPos.x=app.getScreenWidth() / 2 + 80;
  uiPos.y=startY;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getReloadKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getDropWeaponKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getMeleeAttackKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getThrowGrenadeKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getFireKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getUseKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  uiPos.y+=yInc;
  Label mouseSensitivityLbl=new Label(""String_Node_Str"");
  mouseSensitivityLbl.setBounds(new Rectangle(80,20));
  mouseSensitivityLbl.getBounds().x=110;
  mouseSensitivityLbl.getBounds().y=(int)uiPos.y;
  mouseSensitivityLbl.setHorizontalTextAlignment(TextAlignment.LEFT);
  mouseSensitivityLbl.setFont(theme.getSecondaryFontName());
  mouseSensitivityLbl.setTextSize(18);
  mouseSensitivityLbl.setForegroundColor(0xffffffff);
  optionsPanel.addWidget(mouseSensitivityLbl);
  panelView.addElement(new LabelView(mouseSensitivityLbl));
  uiPos.x=300;
  uiPos.y+=5;
  Slider mouseSensitivitySlider=new Slider();
  mouseSensitivitySlider.setTheme(theme);
  mouseSensitivitySlider.getBounds().setSize(100,5);
  mouseSensitivitySlider.getBounds().setLocation(uiPos);
  int handlePos=(int)((uiManager.getCursor().getMouseSensitivity() / 2f) * 100.0f);
  mouseSensitivitySlider.moveHandle(handlePos);
  mouseSensitivitySlider.addSliderMoveListener(new OnSliderMovedListener(){
    @Override public void onSliderMoved(    SliderMovedEvent event){
      Cursor cursor=uiManager.getCursor();
      int value=event.getSlider().getIndex();
      float sensitivity=value / 50f;
      if (value <= 0) {
        sensitivity=0.5f;
      }
      cursor.setMouseSensitivity(sensitivity);
    }
  }
);
  mouseSensitivitySlider.addOnHoverListener(new OnHoverListener(){
    @Override public void onHover(    HoverEvent event){
      uiManager.getCursor().touchAccuracy();
    }
  }
);
  optionsPanel.addWidget(mouseSensitivitySlider);
  panelView.addElement(new SliderView(mouseSensitivitySlider));
  uiPos.y+=yInc;
  keyOverwriteLbl=new Label(""String_Node_Str"");
  keyOverwriteLbl.setTheme(theme);
  keyOverwriteLbl.setBounds(new Rectangle(app.getScreenWidth(),40));
  keyOverwriteLbl.getBounds().y=app.getScreenHeight() - 120;
  keyOverwriteLbl.setHorizontalTextAlignment(TextAlignment.CENTER);
  keyOverwriteLbl.setFont(theme.getPrimaryFontName());
  keyOverwriteLbl.setTextSize(18);
  this.panelView.addElement(new LabelView(keyOverwriteLbl));
  this.panelView.addElement(new LabelView(controlsLbl));
  this.panelView.addElement(new TextBoxView(nameTxtBox));
  final int bottomPanelY=600;
  Label videoLbl=new Label(""String_Node_Str"");
  videoLbl.setTheme(theme);
  videoLbl.setBounds(new Rectangle(80,bottomPanelY - 70,470,40));
  videoLbl.setHorizontalTextAlignment(TextAlignment.LEFT);
  videoLbl.setFont(theme.getPrimaryFontName());
  videoLbl.setTextSize(18);
  uiPos.x=startX;
  uiPos.y=bottomPanelY;
  final Button resBtn=setupButton(uiPos,""String_Node_Str"" + app.getScreenWidth() + ""String_Node_Str""+ app.getScreenHeight()+ ""String_Node_Str"",false);
  uiPos.y+=yInc;
  resBtn.getTextLabel().setForegroundColor(0xffffffff);
  resBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      displayModeIndex=(displayModeIndex + 1) % displayModes.length;
      mode=displayModes[displayModeIndex];
      resBtn.setText(""String_Node_Str"" + mode.width + ""String_Node_Str""+ mode.height+ ""String_Node_Str"");
    }
  }
);
  final Button fullscreenBtn=setupButton(uiPos,""String_Node_Str"" + app.isFullscreen() + ""String_Node_Str"",false);
  uiPos.y+=yInc;
  fullscreenBtn.getTextLabel().setForegroundColor(0xffffffff);
  fullscreenBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      isFullscreen=!app.isFullscreen();
      fullscreenBtn.setText(""String_Node_Str"" + isFullscreen + ""String_Node_Str"");
    }
  }
);
  final Button vsyncBtn=setupButton(uiPos,""String_Node_Str"" + app.isVSync() + ""String_Node_Str"",false);
  uiPos.y+=yInc;
  vsyncBtn.getTextLabel().setForegroundColor(0xffffffff);
  vsyncBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      app.setVSync(!app.isVSync());
      app.getConfig().getVideo().setVsync(app.isVSync());
      vsyncBtn.setText(""String_Node_Str"" + app.isVSync() + ""String_Node_Str"");
    }
  }
);
  this.panelView.addElement(new LabelView(videoLbl));
  Label soundLbl=new Label(""String_Node_Str"");
  soundLbl.setTheme(theme);
  soundLbl.setBounds(new Rectangle(app.getScreenWidth() / 2 - 90,bottomPanelY - 70,400,40));
  soundLbl.setHorizontalTextAlignment(TextAlignment.LEFT);
  soundLbl.setFont(theme.getPrimaryFontName());
  soundLbl.setTextSize(18);
  this.panelView.addElement(new LabelView(soundLbl));
  uiPos.x=app.getScreenWidth() / 3 + startX - 25;
  uiPos.y=bottomPanelY - 5;
  final Slider slider=new Slider();
  slider.setTheme(theme);
  slider.getBounds().setSize(100,5);
  slider.getBounds().setLocation(uiPos);
  slider.addSliderMoveListener(new OnSliderMovedListener(){
    @Override public void onSliderMoved(    SliderMovedEvent event){
      int value=event.getSlider().getIndex();
      Sounds.setVolume(value / 100.0f);
    }
  }
);
  slider.addOnHoverListener(new OnHoverListener(){
    @Override public void onHover(    HoverEvent event){
      uiManager.getCursor().touchAccuracy();
    }
  }
);
  int v=(int)(Sounds.getVolume() * 100.0f);
  slider.moveHandle(v);
  this.optionsPanel.addWidget(slider);
  this.panelView.addElement(new SliderView(slider));
  uiPos.x=app.getScreenWidth() / 3 + startX;
  uiPos.y=bottomPanelY;
  final Button sndBtn=setupButton(uiPos,""String_Node_Str"",false);
  uiPos.y+=yInc;
  sndBtn.getBounds().width=80;
  sndBtn.getTextLabel().setForegroundColor(0xffffffff);
  sndBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      int value=slider.getIndex();
      value+=10;
      if (value > 100) {
        value=0;
      }
      slider.moveHandle(value);
    }
  }
);
  final int thirdSectionX=app.getScreenWidth() - (app.getScreenWidth() / 3) + 20;
  Label gameLbl=new Label(""String_Node_Str"");
  gameLbl.setTheme(theme);
  gameLbl.setBounds(new Rectangle(thirdSectionX + 30,bottomPanelY - 70,400,40));
  gameLbl.setHorizontalTextAlignment(TextAlignment.LEFT);
  gameLbl.setFont(theme.getPrimaryFontName());
  gameLbl.setTextSize(18);
  this.panelView.addElement(new LabelView(gameLbl));
  uiPos.x=thirdSectionX + 60;
  uiPos.y=bottomPanelY - 15;
  Checkbox weaponRecoilEnabledChkBx=new Checkbox(app.getConfig().getWeaponRecoilEnabled());
  weaponRecoilEnabledChkBx.setTheme(theme);
  weaponRecoilEnabledChkBx.setLabelText(""String_Node_Str"");
  weaponRecoilEnabledChkBx.getBounds().setLocation(uiPos);
  weaponRecoilEnabledChkBx.addCheckboxClickedListener(new OnCheckboxClickedListener(){
    @Override public void onCheckboxClicked(    CheckboxEvent event){
      app.getConfig().setWeaponRecoilEnabled(event.getCheckbox().isChecked());
    }
  }
);
  weaponRecoilEnabledChkBx.addOnHoverListener(new OnHoverListener(){
    @Override public void onHover(    HoverEvent event){
      uiManager.getCursor().touchAccuracy();
    }
  }
);
  this.optionsPanel.addWidget(weaponRecoilEnabledChkBx);
  this.panelView.addElement(new CheckboxView(weaponRecoilEnabledChkBx));
  uiPos.y=bottomPanelY + 15;
  Checkbox bloodEnabledChkBx=new Checkbox(app.getConfig().getBloodEnabled());
  bloodEnabledChkBx.setTheme(theme);
  bloodEnabledChkBx.setLabelText(""String_Node_Str"");
  bloodEnabledChkBx.getBounds().setLocation(uiPos);
  bloodEnabledChkBx.addCheckboxClickedListener(new OnCheckboxClickedListener(){
    @Override public void onCheckboxClicked(    CheckboxEvent event){
      app.getConfig().setBloodEnabled(event.getCheckbox().isChecked());
    }
  }
);
  bloodEnabledChkBx.addOnHoverListener(new OnHoverListener(){
    @Override public void onHover(    HoverEvent event){
      uiManager.getCursor().touchAccuracy();
    }
  }
);
  this.optionsPanel.addWidget(bloodEnabledChkBx);
  this.panelView.addElement(new CheckboxView(bloodEnabledChkBx));
  uiPos.y=bottomPanelY + 45;
  Checkbox followReticleEnabledChkBx=new Checkbox(app.getConfig().getFollowReticleEnabled());
  followReticleEnabledChkBx.setTheme(theme);
  followReticleEnabledChkBx.setLabelText(""String_Node_Str"");
  followReticleEnabledChkBx.getBounds().setLocation(uiPos);
  followReticleEnabledChkBx.addCheckboxClickedListener(new OnCheckboxClickedListener(){
    @Override public void onCheckboxClicked(    CheckboxEvent event){
      app.getConfig().setFollowReticleEnabled(event.getCheckbox().isChecked());
    }
  }
);
  followReticleEnabledChkBx.addOnHoverListener(new OnHoverListener(){
    @Override public void onHover(    HoverEvent event){
      uiManager.getCursor().touchAccuracy();
    }
  }
);
  this.optionsPanel.addWidget(followReticleEnabledChkBx);
  this.panelView.addElement(new CheckboxView(followReticleEnabledChkBx));
}","private void createUI(){
  this.panelView=new PanelView();
  this.optionsPanel=new Panel();
  this.keyInput=new KeyInput();
  this.keyInput.setDisabled(true);
  this.optionsPanel.addWidget(keyInput);
  this.isFullscreen=app.isFullscreen();
  Vector2f uiPos=new Vector2f(200,app.getScreenHeight() - 30);
  Button saveBtn=setupButton(uiPos,""String_Node_Str"",false);
  saveBtn.getBounds().setSize(140,80);
  saveBtn.getTextLabel().setFont(theme.getPrimaryFontName());
  saveBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      try {
        VideoConfig vConfig=app.getConfig().getVideo();
        if (isFullscreen != app.isFullscreen()) {
          vConfig.setFullscreen(isFullscreen);
          if (!isFullscreen) {
            vConfig.setWidth(SeventhGame.DEFAULT_MINIMIZED_SCREEN_WIDTH);
            vConfig.setHeight(SeventhGame.DEFAULT_MINIMIZED_SCREEN_HEIGHT);
            Gdx.graphics.setDisplayMode(SeventhGame.DEFAULT_MINIMIZED_SCREEN_WIDTH,SeventhGame.DEFAULT_MINIMIZED_SCREEN_HEIGHT,isFullscreen);
          }
 else           if (mode != null) {
            vConfig.setWidth(mode.width);
            vConfig.setHeight(mode.height);
            Gdx.graphics.setDisplayMode(mode.width,mode.height,true);
          }
 else {
            Gdx.graphics.setDisplayMode(app.getScreenWidth(),app.getScreenHeight(),true);
          }
          app.restartVideo();
        }
 else         if (mode != null) {
          if (app.isFullscreen()) {
            vConfig.setWidth(mode.width);
            vConfig.setHeight(mode.height);
            Gdx.graphics.setDisplayMode(mode.width,mode.height,true);
            app.restartVideo();
          }
        }
        if (nameTxtBox != null) {
          String name=nameTxtBox.getText();
          String cfgName=app.getConfig().getPlayerName();
          if (name != null && cfgName != null) {
            if (!name.equals(cfgName)) {
              Cons.getImpl().execute(""String_Node_Str"",name);
            }
          }
        }
        app.getConfig().setMouseSensitivity(uiManager.getCursor().getMouseSensitivity());
        app.getConfig().save();
      }
 catch (      IOException e) {
        Cons.println(""String_Node_Str"");
        Cons.println(e);
        app.getTerminal().open();
      }
      app.popScreen();
      Sounds.playGlobalSound(Sounds.uiNavigate);
    }
  }
);
  uiPos.x=app.getScreenWidth() - 80;
  Button cancelBtn=setupButton(uiPos,""String_Node_Str"",false);
  cancelBtn.getBounds().setSize(140,80);
  cancelBtn.getTextLabel().setFont(theme.getPrimaryFontName());
  cancelBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      app.popScreen();
      Sounds.playGlobalSound(Sounds.uiNavigate);
    }
  }
);
  nameTxtBox=new TextBox();
  nameTxtBox.setLabelText(""String_Node_Str"");
  nameTxtBox.setTheme(theme);
  nameTxtBox.setBounds(new Rectangle(app.getScreenWidth() / 2 - 50,160,200,30));
  nameTxtBox.setFont(theme.getSecondaryFontName());
  nameTxtBox.setTextSize(18);
  nameTxtBox.getLabel().setTextSize(24);
  nameTxtBox.setFocus(false);
  nameTxtBox.setMaxSize(16);
  nameTxtBox.setText(app.getConfig().getPlayerName());
  nameTxtBox.getTextLabel().setForegroundColor(0xffffffff);
  this.optionsPanel.addWidget(nameTxtBox);
  KeyMap keys=app.getKeyMap();
  Label controlsLbl=new Label(""String_Node_Str"");
  controlsLbl.setTheme(theme);
  controlsLbl.setBounds(new Rectangle(10,200,400,40));
  controlsLbl.setHorizontalTextAlignment(TextAlignment.LEFT);
  controlsLbl.setFont(theme.getPrimaryFontName());
  controlsLbl.setTextSize(18);
  final int startX=230;
  final int startY=270;
  final int yInc=30;
  uiPos.x=startX;
  uiPos.y=startY;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getUpKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getDownKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getLeftKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getRightKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getWalkKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getSprintKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getCrouchKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  uiPos.x=app.getScreenWidth() / 2 + 80;
  uiPos.y=startY;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getReloadKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getDropWeaponKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getMeleeAttackKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getThrowGrenadeKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getFireKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"" + keys.keyString(keys.getUseKey()) + ""String_Node_Str"");
  uiPos.y+=yInc;
  uiPos.y+=yInc;
  Label mouseSensitivityLbl=new Label(""String_Node_Str"");
  mouseSensitivityLbl.setBounds(new Rectangle(80,20));
  mouseSensitivityLbl.getBounds().x=110;
  mouseSensitivityLbl.getBounds().y=(int)uiPos.y;
  mouseSensitivityLbl.setHorizontalTextAlignment(TextAlignment.LEFT);
  mouseSensitivityLbl.setFont(theme.getSecondaryFontName());
  mouseSensitivityLbl.setTextSize(18);
  mouseSensitivityLbl.setForegroundColor(0xffffffff);
  optionsPanel.addWidget(mouseSensitivityLbl);
  panelView.addElement(new LabelView(mouseSensitivityLbl));
  uiPos.x=300;
  uiPos.y+=5;
  Slider mouseSensitivitySlider=new Slider();
  mouseSensitivitySlider.setTheme(theme);
  mouseSensitivitySlider.getBounds().setSize(100,5);
  mouseSensitivitySlider.getBounds().setLocation(uiPos);
  int handlePos=(int)((uiManager.getCursor().getMouseSensitivity() / 2f) * 100.0f);
  mouseSensitivitySlider.moveHandle(handlePos);
  mouseSensitivitySlider.addSliderMoveListener(new OnSliderMovedListener(){
    @Override public void onSliderMoved(    SliderMovedEvent event){
      Cursor cursor=uiManager.getCursor();
      int value=event.getSlider().getIndex();
      float sensitivity=value / 50f;
      if (value <= 0) {
        sensitivity=0.5f;
      }
      cursor.setMouseSensitivity(sensitivity);
    }
  }
);
  mouseSensitivitySlider.addOnHoverListener(new OnHoverListener(){
    @Override public void onHover(    HoverEvent event){
      uiManager.getCursor().touchAccuracy();
    }
  }
);
  optionsPanel.addWidget(mouseSensitivitySlider);
  panelView.addElement(new SliderView(mouseSensitivitySlider));
  uiPos.y+=yInc;
  keyOverwriteLbl=new Label(""String_Node_Str"");
  keyOverwriteLbl.setTheme(theme);
  keyOverwriteLbl.setBounds(new Rectangle(app.getScreenWidth(),40));
  keyOverwriteLbl.getBounds().y=app.getScreenHeight() - 120;
  keyOverwriteLbl.setHorizontalTextAlignment(TextAlignment.CENTER);
  keyOverwriteLbl.setFont(theme.getPrimaryFontName());
  keyOverwriteLbl.setTextSize(18);
  this.panelView.addElement(new LabelView(keyOverwriteLbl));
  this.panelView.addElement(new LabelView(controlsLbl));
  this.panelView.addElement(new TextBoxView(nameTxtBox));
  final int bottomPanelY=600;
  Label videoLbl=new Label(""String_Node_Str"");
  videoLbl.setTheme(theme);
  videoLbl.setBounds(new Rectangle(80,bottomPanelY - 70,470,40));
  videoLbl.setHorizontalTextAlignment(TextAlignment.LEFT);
  videoLbl.setFont(theme.getPrimaryFontName());
  videoLbl.setTextSize(18);
  uiPos.x=startX;
  uiPos.y=bottomPanelY;
  final Button resBtn=setupButton(uiPos,""String_Node_Str"" + app.getScreenWidth() + ""String_Node_Str""+ app.getScreenHeight()+ ""String_Node_Str"",false);
  uiPos.y+=yInc;
  resBtn.getTextLabel().setForegroundColor(0xffffffff);
  resBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      displayModeIndex=(displayModeIndex + 1) % displayModes.length;
      mode=displayModes[displayModeIndex];
      resBtn.setText(""String_Node_Str"" + mode.width + ""String_Node_Str""+ mode.height+ ""String_Node_Str"");
    }
  }
);
  final Button fullscreenBtn=setupButton(uiPos,""String_Node_Str"" + app.isFullscreen() + ""String_Node_Str"",false);
  uiPos.y+=yInc;
  fullscreenBtn.getTextLabel().setForegroundColor(0xffffffff);
  fullscreenBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      isFullscreen=!app.isFullscreen();
      fullscreenBtn.setText(""String_Node_Str"" + isFullscreen + ""String_Node_Str"");
    }
  }
);
  final Button vsyncBtn=setupButton(uiPos,""String_Node_Str"" + app.isVSync() + ""String_Node_Str"",false);
  uiPos.y+=yInc;
  vsyncBtn.getTextLabel().setForegroundColor(0xffffffff);
  vsyncBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      app.setVSync(!app.isVSync());
      app.getConfig().getVideo().setVsync(app.isVSync());
      vsyncBtn.setText(""String_Node_Str"" + app.isVSync() + ""String_Node_Str"");
    }
  }
);
  this.panelView.addElement(new LabelView(videoLbl));
  Label soundLbl=new Label(""String_Node_Str"");
  soundLbl.setTheme(theme);
  soundLbl.setBounds(new Rectangle(app.getScreenWidth() / 2 - 90,bottomPanelY - 70,400,40));
  soundLbl.setHorizontalTextAlignment(TextAlignment.LEFT);
  soundLbl.setFont(theme.getPrimaryFontName());
  soundLbl.setTextSize(18);
  this.panelView.addElement(new LabelView(soundLbl));
  uiPos.x=app.getScreenWidth() / 3 + startX - 25;
  uiPos.y=bottomPanelY - 5;
  final Slider slider=new Slider();
  slider.setTheme(theme);
  slider.getBounds().setSize(100,5);
  slider.getBounds().setLocation(uiPos);
  slider.addSliderMoveListener(new OnSliderMovedListener(){
    @Override public void onSliderMoved(    SliderMovedEvent event){
      int value=event.getSlider().getIndex();
      Sounds.setVolume(value / 100.0f);
    }
  }
);
  slider.addOnHoverListener(new OnHoverListener(){
    @Override public void onHover(    HoverEvent event){
      uiManager.getCursor().touchAccuracy();
    }
  }
);
  int v=(int)(Sounds.getVolume() * 100.0f);
  slider.moveHandle(v);
  this.optionsPanel.addWidget(slider);
  this.panelView.addElement(new SliderView(slider));
  uiPos.x=app.getScreenWidth() / 3 + startX;
  uiPos.y=bottomPanelY;
  final Button sndBtn=setupButton(uiPos,""String_Node_Str"",false);
  uiPos.y+=yInc;
  sndBtn.getBounds().width=80;
  sndBtn.getTextLabel().setForegroundColor(0xffffffff);
  sndBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      int value=slider.getIndex();
      value+=10;
      if (value > 100) {
        value=0;
      }
      slider.moveHandle(value);
    }
  }
);
  final int thirdSectionX=app.getScreenWidth() - (app.getScreenWidth() / 3) + 20;
  Label gameLbl=new Label(""String_Node_Str"");
  gameLbl.setTheme(theme);
  gameLbl.setBounds(new Rectangle(thirdSectionX + 30,bottomPanelY - 70,400,40));
  gameLbl.setHorizontalTextAlignment(TextAlignment.LEFT);
  gameLbl.setFont(theme.getPrimaryFontName());
  gameLbl.setTextSize(18);
  this.panelView.addElement(new LabelView(gameLbl));
  uiPos.x=thirdSectionX + 60;
  uiPos.y=bottomPanelY - 15;
  Checkbox weaponRecoilEnabledChkBx=new Checkbox(app.getConfig().getWeaponRecoilEnabled());
  weaponRecoilEnabledChkBx.setTheme(theme);
  weaponRecoilEnabledChkBx.setLabelText(""String_Node_Str"");
  weaponRecoilEnabledChkBx.getBounds().setLocation(uiPos);
  weaponRecoilEnabledChkBx.addCheckboxClickedListener(new OnCheckboxClickedListener(){
    @Override public void onCheckboxClicked(    CheckboxEvent event){
      app.getConfig().setWeaponRecoilEnabled(event.getCheckbox().isChecked());
    }
  }
);
  weaponRecoilEnabledChkBx.addOnHoverListener(new OnHoverListener(){
    @Override public void onHover(    HoverEvent event){
      uiManager.getCursor().touchAccuracy();
    }
  }
);
  this.optionsPanel.addWidget(weaponRecoilEnabledChkBx);
  this.panelView.addElement(new CheckboxView(weaponRecoilEnabledChkBx));
  uiPos.y=bottomPanelY + 15;
  Checkbox bloodEnabledChkBx=new Checkbox(app.getConfig().getBloodEnabled());
  bloodEnabledChkBx.setTheme(theme);
  bloodEnabledChkBx.setLabelText(""String_Node_Str"");
  bloodEnabledChkBx.getBounds().setLocation(uiPos);
  bloodEnabledChkBx.addCheckboxClickedListener(new OnCheckboxClickedListener(){
    @Override public void onCheckboxClicked(    CheckboxEvent event){
      app.getConfig().setBloodEnabled(event.getCheckbox().isChecked());
    }
  }
);
  bloodEnabledChkBx.addOnHoverListener(new OnHoverListener(){
    @Override public void onHover(    HoverEvent event){
      uiManager.getCursor().touchAccuracy();
    }
  }
);
  this.optionsPanel.addWidget(bloodEnabledChkBx);
  this.panelView.addElement(new CheckboxView(bloodEnabledChkBx));
  uiPos.y=bottomPanelY + 45;
  Checkbox followReticleEnabledChkBx=new Checkbox(app.getConfig().getFollowReticleEnabled());
  followReticleEnabledChkBx.setTheme(theme);
  followReticleEnabledChkBx.setLabelText(""String_Node_Str"");
  followReticleEnabledChkBx.getBounds().setLocation(uiPos);
  followReticleEnabledChkBx.addCheckboxClickedListener(new OnCheckboxClickedListener(){
    @Override public void onCheckboxClicked(    CheckboxEvent event){
      app.getConfig().setFollowReticleEnabled(event.getCheckbox().isChecked());
    }
  }
);
  followReticleEnabledChkBx.addOnHoverListener(new OnHoverListener(){
    @Override public void onHover(    HoverEvent event){
      uiManager.getCursor().touchAccuracy();
    }
  }
);
  this.optionsPanel.addWidget(followReticleEnabledChkBx);
  this.panelView.addElement(new CheckboxView(followReticleEnabledChkBx));
}",0.9977542508822586
86656,"@Override public void updateState(NetEntity state,long time){
  super.updateState(state,time);
  NetBullet bullet=(NetBullet)state;
  if (this.ownerId < 0) {
    emitBulletCasing(bullet.ownerId);
  }
  this.ownerId=bullet.ownerId;
  if (vel.isZero()) {
{
      Vector2f.Vector2fSubtract(getPos(),getOrigin(),vel);
      Vector2f.Vector2fNormalize(vel,vel);
      facing.set(vel);
      movementDir.set(vel);
    }
  }
}","@Override public void updateState(NetEntity state,long time){
  super.updateState(state,time);
  NetBullet bullet=(NetBullet)state;
  if (this.ownerId < 0) {
    emitBulletCasing(bullet.ownerId);
  }
  this.ownerId=bullet.ownerId;
  this.iterations++;
  if (vel.isZero()) {
{
      Vector2f.Vector2fSubtract(getPos(),getOrigin(),vel);
      Vector2f.Vector2fNormalize(vel,vel);
      facing.set(vel);
      movementDir.set(vel);
    }
  }
}",0.9755529685681024
86657,"@Override public void reset(){
  super.reset();
  origin.zeroOut();
  vel.zeroOut();
  ownerId=-1;
  lastUpdate=0;
  prevState=null;
  nextState=null;
  trailEffect.reset();
}","@Override public void reset(){
  super.reset();
  origin.zeroOut();
  vel.zeroOut();
  ownerId=-1;
  lastUpdate=0;
  prevState=null;
  nextState=null;
  iterations=0;
  trailEffect.reset();
}",0.9562841530054644
86658,"@Override public void render(Canvas canvas,Camera camera,float alpha){
  trailEffect.render(canvas,camera,alpha);
}","@Override public void render(Canvas canvas,Camera camera,float alpha){
  if (iterations > 2) {
    trailEffect.render(canvas,camera,alpha);
  }
}",0.8846153846153846
86659,"@Override public void update(TimeStep timeStep,ParticleData particles){
  ClientEntity ent=emitter.attachedTo();
  if (ent != null) {
    for (int index=0; index < particles.numberOfAliveParticles; index++) {
      Vector2f pos=ent.getCenterPos();
      Vector2f vel=ent.getMovementDir();
      float offset=index;
      Vector2f.Vector2fMS(pos,vel,offset,particles.pos[index]);
      float percentange=(float)index / particles.numberOfAliveParticles;
      particles.color[index].a=0.9512f * (1f - percentange);
    }
  }
 else {
    for (int index=0; index < particles.numberOfAliveParticles; index++) {
      particles.color[index].a=0f;
    }
  }
}","@Override public void update(TimeStep timeStep,ParticleData particles){
  ClientEntity ent=emitter.attachedTo();
  if (ent != null) {
    Vector2f pos=ent.getCenterPos();
    Vector2f vel=ent.getMovementDir();
    for (int index=0; index < particles.numberOfAliveParticles; index++) {
      float offset=index;
      Vector2f.Vector2fMS(pos,vel,offset,particles.pos[index]);
      float percentange=(float)index / particles.numberOfAliveParticles;
      particles.color[index].a=0.9512f * (1f - percentange);
    }
  }
 else {
    for (int index=0; index < particles.numberOfAliveParticles; index++) {
      particles.color[index].a=0f;
    }
  }
}",0.88
86660,"public static Emitter newBulletTracerEmitter(Vector2f pos,int emitterTimeToLive){
  int maxParticles=68;
  final Emitter emitter=new Emitter(pos,emitterTimeToLive,maxParticles).setName(""String_Node_Str"").setDieInstantly(false);
  BatchedParticleGenerator gen=new BatchedParticleGenerator(0,maxParticles).addSingleParticleGenerator(new RandomColorSingleParticleGenerator(new Color(0xffff00ff))).addSingleParticleGenerator(new SingleParticleGenerator(){
    @Override public void onGenerateParticle(    int index,    TimeStep timeStep,    ParticleData particles){
      particles.color[index].a=0.0f;
    }
  }
).addSingleParticleGenerator(new SetPositionSingleParticleGenerator());
  emitter.addParticleGenerator(gen);
  emitter.addParticleUpdater(new ParticleUpdater(){
    @Override public void update(    TimeStep timeStep,    ParticleData particles){
      ClientEntity ent=emitter.attachedTo();
      if (ent != null) {
        for (int index=0; index < particles.numberOfAliveParticles; index++) {
          Vector2f pos=ent.getCenterPos();
          Vector2f vel=ent.getMovementDir();
          float offset=index;
          Vector2f.Vector2fMS(pos,vel,offset,particles.pos[index]);
          float percentange=(float)index / particles.numberOfAliveParticles;
          particles.color[index].a=0.9512f * (1f - percentange);
        }
      }
 else {
        for (int index=0; index < particles.numberOfAliveParticles; index++) {
          particles.color[index].a=0f;
        }
      }
    }
  }
);
  emitter.addParticleUpdater(new KillIfAttachedIsDeadUpdater());
  emitter.addParticleRenderer(new RectParticleRenderer(2,2));
  return emitter;
}","public static Emitter newBulletTracerEmitter(Vector2f pos,int emitterTimeToLive){
  int maxParticles=68;
  final Emitter emitter=new Emitter(pos,emitterTimeToLive,maxParticles).setName(""String_Node_Str"").setDieInstantly(false);
  BatchedParticleGenerator gen=new BatchedParticleGenerator(0,maxParticles).addSingleParticleGenerator(new RandomColorSingleParticleGenerator(new Color(0xffbA00ff),new Color(0xffff00ff))).addSingleParticleGenerator(new SingleParticleGenerator(){
    @Override public void onGenerateParticle(    int index,    TimeStep timeStep,    ParticleData particles){
      particles.color[index].a=0.0f;
    }
  }
).addSingleParticleGenerator(new SetPositionSingleParticleGenerator());
  emitter.addParticleGenerator(gen);
  emitter.addParticleUpdater(new ParticleUpdater(){
    @Override public void update(    TimeStep timeStep,    ParticleData particles){
      ClientEntity ent=emitter.attachedTo();
      if (ent != null) {
        Vector2f pos=ent.getCenterPos();
        Vector2f vel=ent.getMovementDir();
        for (int index=0; index < particles.numberOfAliveParticles; index++) {
          float offset=index;
          Vector2f.Vector2fMS(pos,vel,offset,particles.pos[index]);
          float percentange=(float)index / particles.numberOfAliveParticles;
          particles.color[index].a=0.9512f * (1f - percentange);
        }
      }
 else {
        for (int index=0; index < particles.numberOfAliveParticles; index++) {
          particles.color[index].a=0f;
        }
      }
    }
  }
);
  emitter.addParticleUpdater(new KillIfAttachedIsDeadUpdater());
  emitter.addParticleRenderer(new RectParticleRenderer(2,2));
  return emitter;
}",0.9416014449127031
86661,"public void render(Canvas renderer,Camera camera,float alpha){
  if (this.textBox.isVisible()) {
    Rectangle bounds=textBox.getBounds();
    String labelText=textBox.getLabelText();
    renderer.setFont(textBox.getTextLabel().getFont(),(int)textBox.getTextLabel().getTextSize());
    int originalX=bounds.x;
    int originalY=bounds.y;
    renderGradiantBackground(textBox,renderer,camera,alpha);
    if (textBox.hasFocus() || textBox.isHovering()) {
      renderer.drawRect(bounds.x - 1,bounds.y - 1,bounds.width + 2,bounds.height + 2,0x5ff1f401);
    }
    Rectangle lbounds=this.textBox.getTextLabel().getBounds();
    lbounds.set(bounds);
    lbounds.x+=5;
    lbounds.y+=3;
    this.textView.render(renderer,camera,alpha);
    if (showCursor && textBox.hasFocus()) {
      String text=textBox.getText();
      int textWidth=renderer.getWidth(text.substring(0,textBox.getCursorIndex()));
      renderer.setFont(textBox.getTextLabel().getFont(),(int)textBox.getTextLabel().getTextSize());
      RenderFont.drawShadedString(renderer,""String_Node_Str"",lbounds.x + textWidth,lbounds.y + renderer.getHeight(""String_Node_Str""),textBox.getForegroundColor());
    }
    bounds.x=originalX;
    int width=renderer.getWidth(labelText);
    lbounds=this.textBox.getLabel().getBounds();
    lbounds.set(bounds);
    lbounds.x=bounds.x - (width + 20);
    lbounds.y=originalY + 5;
    this.labelView.render(renderer,camera,alpha);
  }
}","public void render(Canvas renderer,Camera camera,float alpha){
  if (this.textBox.isVisible()) {
    Rectangle bounds=textBox.getBounds();
    String labelText=textBox.getLabelText();
    renderer.setFont(textBox.getTextLabel().getFont(),(int)textBox.getTextLabel().getTextSize());
    int originalX=bounds.x;
    int originalY=bounds.y;
    renderGradiantBackground(textBox,renderer,camera,alpha);
    if (textBox.hasFocus() || textBox.isHovering()) {
      renderer.drawRect(bounds.x - 1,bounds.y - 1,bounds.width + 2,bounds.height + 2,0x5ff1f401);
    }
    Rectangle lbounds=this.textBox.getTextLabel().getBounds();
    lbounds.set(bounds);
    lbounds.x+=5;
    lbounds.y+=3;
    this.textView.render(renderer,camera,alpha);
    if (showCursor && textBox.hasFocus()) {
      String text=textBox.getText();
      int textWidth=renderer.getWidth(text.substring(0,textBox.getCursorIndex())) + 5;
      renderer.setFont(textBox.getTextLabel().getFont(),(int)textBox.getTextLabel().getTextSize());
      RenderFont.drawShadedString(renderer,""String_Node_Str"",lbounds.x + textWidth,lbounds.y + renderer.getHeight(""String_Node_Str""),textBox.getForegroundColor());
    }
    bounds.x=originalX;
    int width=renderer.getWidth(labelText);
    lbounds=this.textBox.getLabel().getBounds();
    lbounds.set(bounds);
    lbounds.x=bounds.x - (width + 20);
    lbounds.y=originalY + 5;
    this.labelView.render(renderer,camera,alpha);
  }
}",0.9986023759608664
86662,"@Override public void enter(){
  if (this.game != null) {
    this.game.onReloadVideo();
  }
  game.activateCamera(true);
  Controllers.addListener(this.controllerInput);
  final ClientProtocol protocol=connection.getClientProtocol();
  Console console=app.getConsole();
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      if (args.length > 1) {
        AICommandMessage msg=new AICommandMessage();
        msg.botId=Integer.parseInt(args[0]);
        msg.command=new AICommand(this.mergeArgsDelimAt(""String_Node_Str"",1,args));
        protocol.sendAICommandMessage(msg);
      }
 else {
        console.println(""String_Node_Str"");
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      connection.disconnect();
      app.goToMenuScreen();
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      TextMessage msg=new TextMessage();
      msg.message=mergeArgsDelim(""String_Node_Str"",args);
      msg.playerId=game.getLocalPlayer().getId();
      protocol.sendTextMessage(msg);
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      TeamTextMessage msg=new TeamTextMessage();
      msg.message=mergeArgsDelim(""String_Node_Str"",args);
      msg.playerId=game.getLocalPlayer().getId();
      protocol.sendTeamTextMessage(msg);
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      if (args.length < 1) {
        console.println(""String_Node_Str"");
      }
 else {
        PlayerSpeechMessage msg=new PlayerSpeechMessage();
        ClientPlayer player=game.getLocalPlayer();
        if (player.isAlive()) {
          msg.playerId=player.getId();
          ClientPlayerEntity entity=player.getEntity();
          if (entity != null) {
            Vector2f pos=entity.getCenterPos();
            msg.posX=(short)pos.x;
            msg.posY=(short)pos.y;
            msg.speechCommand=Byte.parseByte(args[0]);
            Sounds.playSpeechSound(player.getTeam().getId(),msg.speechCommand,pos.x,pos.y);
            protocol.sendPlayerSpeechMessage(msg);
          }
        }
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      if (args.length < 1) {
        console.println(""String_Node_Str"");
      }
 else {
        PlayerSwitchTeamMessage msg=new PlayerSwitchTeamMessage();
        msg.playerId=game.getLocalPlayer().getId();
        String team=args[0];
        if (team.toLowerCase().equals(""String_Node_Str"")) {
          msg.teamId=(byte)ClientTeam.ALLIES.getId();
        }
 else         if (team.toLowerCase().equals(""String_Node_Str"")) {
          msg.teamId=(byte)ClientTeam.AXIS.getId();
        }
 else {
          msg.teamId=(byte)ClientTeam.NONE.getId();
        }
        protocol.sendPlayerSwitchTeamMessage(msg);
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      if (args.length > 0) {
        String msg=null;
        if (args[0].equals(""String_Node_Str"")) {
          if (args.length > 1) {
            RconHash hash=new RconHash(game.getLocalSession().getRconToken());
            msg=""String_Node_Str"" + hash.hash(mergeArgsDelimAt(""String_Node_Str"",1,args).trim());
          }
 else {
            console.println(""String_Node_Str"");
          }
        }
 else {
          msg=this.mergeArgsDelim(""String_Node_Str"",args);
        }
        if (msg != null) {
          protocol.sendRconMessage(new RconMessage(msg));
        }
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      PlayerCommanderMessage msg=new PlayerCommanderMessage();
      ClientPlayer localPlayer=game.getLocalPlayer();
      msg.playerId=localPlayer.getId();
      msg.isCommander=!localPlayer.isCommander();
      protocol.sendPlayerCommanderMessage(msg);
    }
  }
);
}","@Override public void enter(){
  if (this.game != null) {
    this.game.onReloadVideo();
  }
  if (!this.dialog.isOpen()) {
    game.activateCamera(true);
  }
  Controllers.addListener(this.controllerInput);
  final ClientProtocol protocol=connection.getClientProtocol();
  Console console=app.getConsole();
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      if (args.length > 1) {
        AICommandMessage msg=new AICommandMessage();
        msg.botId=Integer.parseInt(args[0]);
        msg.command=new AICommand(this.mergeArgsDelimAt(""String_Node_Str"",1,args));
        protocol.sendAICommandMessage(msg);
      }
 else {
        console.println(""String_Node_Str"");
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      connection.disconnect();
      app.goToMenuScreen();
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      TextMessage msg=new TextMessage();
      msg.message=mergeArgsDelim(""String_Node_Str"",args);
      msg.playerId=game.getLocalPlayer().getId();
      protocol.sendTextMessage(msg);
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      TeamTextMessage msg=new TeamTextMessage();
      msg.message=mergeArgsDelim(""String_Node_Str"",args);
      msg.playerId=game.getLocalPlayer().getId();
      protocol.sendTeamTextMessage(msg);
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      if (args.length < 1) {
        console.println(""String_Node_Str"");
      }
 else {
        PlayerSpeechMessage msg=new PlayerSpeechMessage();
        ClientPlayer player=game.getLocalPlayer();
        if (player.isAlive()) {
          msg.playerId=player.getId();
          ClientPlayerEntity entity=player.getEntity();
          if (entity != null) {
            Vector2f pos=entity.getCenterPos();
            msg.posX=(short)pos.x;
            msg.posY=(short)pos.y;
            msg.speechCommand=Byte.parseByte(args[0]);
            Sounds.playSpeechSound(player.getTeam().getId(),msg.speechCommand,pos.x,pos.y);
            protocol.sendPlayerSpeechMessage(msg);
          }
        }
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      if (args.length < 1) {
        console.println(""String_Node_Str"");
      }
 else {
        PlayerSwitchTeamMessage msg=new PlayerSwitchTeamMessage();
        msg.playerId=game.getLocalPlayer().getId();
        String team=args[0];
        if (team.toLowerCase().equals(""String_Node_Str"")) {
          msg.teamId=(byte)ClientTeam.ALLIES.getId();
        }
 else         if (team.toLowerCase().equals(""String_Node_Str"")) {
          msg.teamId=(byte)ClientTeam.AXIS.getId();
        }
 else {
          msg.teamId=(byte)ClientTeam.NONE.getId();
        }
        protocol.sendPlayerSwitchTeamMessage(msg);
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      if (args.length > 0) {
        String msg=null;
        if (args[0].equals(""String_Node_Str"")) {
          if (args.length > 1) {
            RconHash hash=new RconHash(game.getLocalSession().getRconToken());
            msg=""String_Node_Str"" + hash.hash(mergeArgsDelimAt(""String_Node_Str"",1,args).trim());
          }
 else {
            console.println(""String_Node_Str"");
          }
        }
 else {
          msg=this.mergeArgsDelim(""String_Node_Str"",args);
        }
        if (msg != null) {
          protocol.sendRconMessage(new RconMessage(msg));
        }
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      PlayerCommanderMessage msg=new PlayerCommanderMessage();
      ClientPlayer localPlayer=game.getLocalPlayer();
      msg.playerId=localPlayer.getId();
      msg.isCommander=!localPlayer.isCommander();
      protocol.sendPlayerCommanderMessage(msg);
    }
  }
);
}",0.9957417424329612
86663,"/** 
 * Does multiplex on the Datagram channel
 * @param timeout
 * @return what state the socket is in
 * @throws IOException
 */
private int socketWait(int timeout){
  int result=SOCKET_WAIT;
  int numKeys=0;
  try {
    numKeys=(timeout > 0) ? selector.select(timeout) : selector.selectNow();
  }
 catch (  IOException e) {
    result=SOCKET_ERROR;
  }
  if (numKeys > 0) {
    Iterator<SelectionKey> selectedKeys=selector.selectedKeys().iterator();
    while (selectedKeys.hasNext()) {
      SelectionKey key=selectedKeys.next();
      selectedKeys.remove();
      if (!key.isValid()) {
        continue;
      }
      if (key.isReadable()) {
        result=SOCKET_READ;
        break;
      }
 else       if (key.isWritable()) {
        result=SOCKET_WRITE;
        break;
      }
    }
  }
  return result;
}","/** 
 * Does multiplex on the Datagram channel
 * @param timeout
 * @return what state the socket is in
 * @throws IOException
 */
private int socketWait(int timeout){
  int result=SOCKET_WAIT;
  int numKeys=0;
  try {
    numKeys=(timeout > 0) ? selector.select(timeout) : selector.selectNow();
  }
 catch (  IOException e) {
    if (log.enabled()) {
      log.error(""String_Node_Str"" + e);
    }
    result=SOCKET_ERROR;
  }
  if (numKeys > 0) {
    Iterator<SelectionKey> selectedKeys=selector.selectedKeys().iterator();
    while (selectedKeys.hasNext()) {
      SelectionKey key=selectedKeys.next();
      selectedKeys.remove();
      if (!key.isValid()) {
        continue;
      }
      if (key.isReadable()) {
        result=SOCKET_READ;
        break;
      }
 else       if (key.isWritable()) {
        result=SOCKET_WRITE;
        break;
      }
    }
  }
  return result;
}",0.9582107121836374
86664,"@Override public boolean connect(int timeout,InetSocketAddress address) throws IOException {
  host=new Host(getNetConfig(),null);
  peer=host.connect(address);
  this.connectionId=peer.getId();
  int iteration=timeout / 3;
  while (iteration < timeout * 3) {
    update(iteration);
    if (peer.isConnected()) {
      break;
    }
    iteration+=iteration;
  }
  return peer.isConnected();
}","@Override public boolean connect(int timeout,InetSocketAddress address) throws IOException {
  host=new Host(getNetConfig(),null);
  peer=host.connect(address);
  this.connectionId=peer.getId();
  int attemptsRemaining=5;
  do {
    update(timeout);
  }
 while (!peer.isConnected() && attemptsRemaining-- > 0);
  return peer.isConnected();
}",0.6248294679399727
86665,"/** 
 * @param player
 * @return the team strategy for a given player 
 */
private TeamStrategy getStrategyFor(PlayerInfo player){
  if (Team.ALLIED_TEAM_ID == player.getTeamId()) {
    return this.alliedAIStrategy;
  }
 else   if (Team.AXIS_TEAM_ID == player.getTeamId()) {
    return this.axisAIStrategy;
  }
  return null;
}","/** 
 * @param player
 * @return the team strategy for a given player 
 */
private TeamStrategy getStrategyFor(PlayerInfo player){
  if (Team.ALLIED_TEAM_ID == player.getTeamId()) {
    return this.alliedAIStrategy;
  }
 else   if (Team.AXIS_TEAM_ID == player.getTeamId()) {
    return this.axisAIStrategy;
  }
  return this.alliedAIStrategy;
}",0.96274217585693
86666,"/** 
 * Connects to a Seventh server
 * @param host
 * @param port
 * @throws IOException
 */
public void connect(String host,int port) throws IOException {
  disconnect();
  InetSocketAddress address=new InetSocketAddress(host,port);
  if (client.connect(12000,address)) {
    client.start();
  }
 else {
    throw new IOException(""String_Node_Str"" + host + ""String_Node_Str""+ port);
  }
}","/** 
 * Connects to a Seventh server
 * @param host
 * @param port
 * @throws IOException
 */
public void connect(String host,int port) throws IOException {
}",0.5766423357664233
86667,"/** 
 * Attempts to connect to the server
 */
public void connectToServer(){
}","/** 
 * Attempts to connect to the server
 */
public void connectToServer(){
synchronized (this) {
    if (!isConnecting) {
      isConnecting=true;
      thread=new Thread(new Runnable(){
        @Override public void run(){
          message+=host + ""String_Node_Str"" + port+ ""String_Node_Str"";
          try {
            Cons.println(""String_Node_Str"" + host + ""String_Node_Str""+ port);
            connection.disconnect();
            connection.connect(host,port);
            message+=""String_Node_Str"";
            final ClientProtocol protocol=connection.getClientProtocol();
            Cons.println(""String_Node_Str"");
            connection.setGameCreationListener(new GameCreationListener(){
              @Override public void onGameCreated(              ClientGame game){
                LoadingScreen.this.game.set(game);
                protocol.sendClientReadyMessage(new ClientReadyMessage());
                isDone.set(true);
              }
            }
);
            ConnectRequestMessage msg=new ConnectRequestMessage();
            msg.name=app.getConfig().getPlayerName();
            protocol.sendConnectRequestMessage(msg);
          }
 catch (          Exception e) {
            Cons.println(""String_Node_Str"" + e);
            Cons.getImpl().execute(""String_Node_Str"");
            app.goToMenuScreen();
          }
        }
      }
);
      thread.start();
    }
  }
}",0.1053342336259284
86668,"/** 
 * Starts the server listening on the supplied port
 * @param port
 * @throws Exception
 */
public void start(int port) throws Exception {
  if (this.isRunning) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.port=port;
  this.isRunning=true;
  Cons.println(""String_Node_Str"" + VERSION + ""String_Node_Str"");
  Server server=this.serverContext.getServer();
  StateMachine<State> sm=this.serverContext.getStateMachine();
  server.bind(port);
  server.start();
  Cons.println(""String_Node_Str"" + port + ""String_Node_Str"");
  try {
    long currentTime=System.currentTimeMillis();
    long accumalator=0;
    long gameClock=0;
    final int maxIterations=5;
    final long maxDelta=250;
    final long frameRate=Math.abs(serverContext.getConfig().getServerFrameRate());
    final long dt=1000 / frameRate == 0 ? 20 : frameRate;
    final TimeStep timeStep=new TimeStep();
    if (this.serverListener != null) {
      this.serverListener.onServerReady(this);
    }
    while (this.isRunning) {
      long newTime=System.currentTimeMillis();
      long deltaTime=newTime - currentTime;
      if (deltaTime > maxDelta) {
        deltaTime=maxDelta;
      }
      if (deltaTime >= dt) {
        currentTime=newTime;
        accumalator+=deltaTime;
        int iteration=0;
        while (accumalator >= dt && iteration < maxIterations) {
          timeStep.setDeltaTime(dt);
          timeStep.setGameClock(gameClock);
          serverFrame(sm,timeStep);
          gameClock+=dt;
          accumalator-=dt;
          iteration++;
        }
      }
    }
  }
 catch (  Exception e) {
    Cons.println(""String_Node_Str"" + e);
    Cons.println(""String_Node_Str"" + Arrays.toString(e.getStackTrace()));
  }
 finally {
    Cons.println(""String_Node_Str"");
    server.stop();
    server.close();
    this.registration.shutdown();
    this.lanRegistration.shutdown();
    if (this.debugListener != null) {
      this.debugListener.shutdown();
    }
    Cons.println(""String_Node_Str"");
  }
}","/** 
 * Starts the server listening on the supplied port
 * @param port
 * @throws Exception
 */
public void start(int port) throws Exception {
  if (this.isRunning) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.port=port;
  this.isRunning=true;
  Cons.println(""String_Node_Str"" + VERSION + ""String_Node_Str"");
  Server server=this.serverContext.getServer();
  StateMachine<State> sm=this.serverContext.getStateMachine();
  server.bind(port);
  server.start();
  Cons.println(""String_Node_Str"" + port + ""String_Node_Str"");
  try {
    long currentTime=System.currentTimeMillis();
    long accumalator=0;
    long gameClock=0;
    final int maxIterations=5;
    final long maxDelta=250;
    final long frameRate=Math.abs(serverContext.getConfig().getServerFrameRate());
    final long dt=1000 / frameRate == 0 ? 20 : frameRate;
    final TimeStep timeStep=new TimeStep();
    timeStep.setDeltaTime(dt);
    timeStep.setGameClock(gameClock);
    updateConsole(timeStep);
    if (this.serverListener != null) {
      this.serverListener.onServerReady(this);
    }
    while (this.isRunning) {
      long newTime=System.currentTimeMillis();
      long deltaTime=newTime - currentTime;
      if (deltaTime > maxDelta) {
        deltaTime=maxDelta;
      }
      if (deltaTime >= dt) {
        currentTime=newTime;
        accumalator+=deltaTime;
        int iteration=0;
        while (accumalator >= dt && iteration < maxIterations) {
          timeStep.setDeltaTime(dt);
          timeStep.setGameClock(gameClock);
          serverFrame(sm,timeStep);
          gameClock+=dt;
          accumalator-=dt;
          iteration++;
        }
      }
    }
  }
 catch (  Exception e) {
    Cons.println(""String_Node_Str"" + e);
    Cons.println(""String_Node_Str"" + Arrays.toString(e.getStackTrace()));
  }
 finally {
    Cons.println(""String_Node_Str"");
    server.stop();
    server.close();
    this.registration.shutdown();
    this.lanRegistration.shutdown();
    if (this.debugListener != null) {
      this.debugListener.shutdown();
    }
    Cons.println(""String_Node_Str"");
  }
}",0.9760975609756096
86669,"/** 
 * Executes a server frame
 * @param timeStep
 */
private void serverFrame(StateMachine<State> sm,TimeStep timeStep){
  if (!this.isLocal) {
    this.console.update(timeStep);
  }
  sm.update(timeStep);
}","/** 
 * Executes a server frame
 * @param timeStep
 */
private void serverFrame(StateMachine<State> sm,TimeStep timeStep){
  updateConsole(timeStep);
  sm.update(timeStep);
}",0.8772845953002611
86670,"@Override public boolean touchUp(int x,int y,int pointer,int button){
  isHandleHeld=false;
  return false;
}","@Override public boolean touchUp(int x,int y,int pointer,int button){
  isHandleHeld=false;
  heldX=0;
  return false;
}",0.9519650655021834
86671,"@Override public boolean touchDown(int x,int y,int pointer,int button){
  if (handle.getScreenBounds().contains(x,y)) {
    isHandleHeld=true;
    return true;
  }
 else   if (getScreenBounds().contains(x,y)) {
    moveHandleTo(x);
    return true;
  }
  return false;
}","@Override public boolean touchDown(int x,int y,int pointer,int button){
  if (handle.getScreenBounds().contains(x,y)) {
    isHandleHeld=true;
    heldX=Math.max(x - handle.getBounds().x - getBounds().x,0);
    return true;
  }
 else {
    sliderHitbox.set(getScreenBounds());
    sliderHitbox.height*=4;
    sliderHitbox.y-=(getScreenBounds().height * 2);
    if (sliderHitbox.contains(x,y)) {
      moveHandleTo(x);
      return true;
    }
  }
  return false;
}",0.6539509536784741
86672,"private void moveHandleTo(int x){
  int maxX=getBounds().x + getBounds().width;
  int minX=getBounds().x;
  int newIndex=x - minX;
  if (x <= maxX && x >= minX) {
    handle.getBounds().x=newIndex;
  }
  if (newIndex >= 0 && newIndex <= 100) {
    index=newIndex;
    getEventDispatcher().sendNow(event);
  }
}","private void moveHandleTo(int x){
  int maxX=getBounds().x + getBounds().width;
  int minX=getBounds().x;
  int newIndex=(x - minX) - heldX;
  if (x <= maxX && x >= minX) {
    handle.getBounds().x=newIndex;
  }
  if (newIndex >= 0 && newIndex <= MAX_INDEX) {
    index=newIndex;
    getEventDispatcher().sendNow(event);
  }
}",0.9654088050314464
86673,"@Override public void update(TimeStep timeStep){
  super.update(timeStep);
  if (lastUpdate > timeStep.getGameClock() - 500) {
    this.isFlagVisible=true;
  }
 else {
    this.isFlagVisible=false;
  }
}","@Override public void update(TimeStep timeStep){
  super.update(timeStep);
  long clockTime=timeStep.getGameClock();
  if (carrier != null && carrier.isAlive()) {
    long lastUpdate=carrier.getEntity().getLastUpdate();
    if ((lastUpdate + 150) < clockTime) {
      fadeAlphaColor=255 - ((int)(clockTime - lastUpdate) / 3);
      if (fadeAlphaColor < 0)       fadeAlphaColor=0;
    }
 else {
      fadeAlphaColor=255;
    }
  }
 else {
    fadeAlphaColor=255;
  }
}",0.408955223880597
86674,"@Override public void render(Canvas canvas,Camera camera,float alpha){
  if (flagImg != null && isFlagVisible) {
    Vector2f cameraPos=camera.getRenderPosition(alpha);
    Vector2f flagPos=pos;
    if (carrier != null && carrier.isAlive()) {
      flagPos=carrier.getEntity().getRenderPos(alpha);
    }
    float x=(flagPos.x - cameraPos.x);
    float y=(flagPos.y - cameraPos.y);
    flagImg.setPosition(x,y);
    canvas.drawSprite(flagImg);
  }
}","@Override public void render(Canvas canvas,Camera camera,float alpha){
  if (flagImg != null) {
    Vector2f cameraPos=camera.getRenderPosition(alpha);
    Vector2f flagPos=pos;
    if (fadeAlphaColor > 0 && carrier != null && carrier.isAlive()) {
      flagPos=carrier.getEntity().getRenderPos(alpha);
    }
    float x=(flagPos.x - cameraPos.x);
    float y=(flagPos.y - cameraPos.y);
    flagImg.setPosition(x,y);
    flagImg.setAlpha(fadeAlphaColor / 255.0f);
    canvas.drawRawSprite(flagImg);
  }
}",0.7177334732423925
86675,"@Override public boolean connect(int timeout,InetSocketAddress address) throws IOException {
  host=new Host(getNetConfig(),null);
  peer=host.connect(address);
  this.connectionId=peer.getId();
  update(timeout);
  return peer.isConnected();
}","@Override public boolean connect(int timeout,InetSocketAddress address) throws IOException {
  host=new Host(getNetConfig(),null);
  peer=host.connect(address);
  this.connectionId=peer.getId();
  int iteration=timeout / 3;
  while (iteration < timeout * 3) {
    update(iteration);
    if (peer.isConnected()) {
      break;
    }
    iteration+=iteration;
  }
  return peer.isConnected();
}",0.7012578616352201
86676,"/** 
 * Attempts to connect to the server
 */
public void connectToServer(){
synchronized (this) {
    if (!isConnecting) {
      isConnecting=true;
      thread=new Thread(new Runnable(){
        @Override public void run(){
          message+=host + ""String_Node_Str"" + port+ ""String_Node_Str"";
          try {
            Cons.println(""String_Node_Str"" + host + ""String_Node_Str""+ port);
            connection.disconnect();
            connection.connect(host,port);
            message+=""String_Node_Str"";
            final ClientProtocol protocol=connection.getClientProtocol();
            Cons.println(""String_Node_Str"");
            connection.setGameCreationListener(new GameCreationListener(){
              @Override public void onGameCreated(              ClientGame game){
                LoadingScreen.this.game.set(game);
                protocol.sendClientReadyMessage(new ClientReadyMessage());
                isDone.set(true);
              }
            }
);
            ConnectRequestMessage msg=new ConnectRequestMessage();
            msg.name=app.getConfig().getPlayerName();
            protocol.sendConnectRequestMessage(msg);
          }
 catch (          Exception e) {
            Cons.println(""String_Node_Str"" + e);
            app.goToMenuScreen();
          }
        }
      }
);
      thread.start();
    }
  }
}","/** 
 * Attempts to connect to the server
 */
public void connectToServer(){
}",0.1093969144460028
86677,"/** 
 * Interpolates between the previous and current state sent from the server.
 * @param timeStep
 */
protected void interpolate(TimeStep timeStep){
  if (this.prevState != null && this.nextState != null) {
    float alpha=0.75f;
    float dist=(pos.x - nextState.posX) * (pos.x - nextState.posX) + (pos.y - nextState.posY) * (pos.y - nextState.posY);
    if (dist > 64 * 64) {
      this.pos.x=nextState.posX;
      this.pos.y=nextState.posY;
    }
 else {
      this.pos.x=pos.x + (alpha * (nextState.posX - pos.x));
      this.pos.y=pos.y + (alpha * (nextState.posY - pos.y));
    }
    this.bounds.setLocation(pos);
    this.movementDir.x=nextState.posX - prevState.posX;
    this.movementDir.y=nextState.posY - prevState.posY;
    if (Math.abs(prevState.orientation - nextState.orientation) > (30)) {
      this.orientation=nextState.orientation;
    }
 else {
      this.orientation=prevState.orientation + (alpha * (nextState.orientation - prevState.orientation));
    }
    this.orientation=(float)Math.toRadians(this.orientation);
  }
}","/** 
 * Interpolates between the previous and current state sent from the server.
 * @param timeStep
 */
protected void interpolate(TimeStep timeStep){
  if (this.prevState != null && this.nextState != null) {
    float alpha=0.75f;
    float dist=(pos.x - nextState.posX) * (pos.x - nextState.posX) + (pos.y - nextState.posY) * (pos.y - nextState.posY);
    if (dist > 64 * 64) {
      this.pos.x=nextState.posX;
      this.pos.y=nextState.posY;
      this.previousPos.set(this.pos);
    }
 else {
      this.pos.x=pos.x + (alpha * (nextState.posX - pos.x));
      this.pos.y=pos.y + (alpha * (nextState.posY - pos.y));
    }
    this.bounds.setLocation(pos);
    this.movementDir.x=nextState.posX - prevState.posX;
    this.movementDir.y=nextState.posY - prevState.posY;
    if (Math.abs(prevState.orientation - nextState.orientation) > (30)) {
      this.orientation=nextState.orientation;
    }
 else {
      this.orientation=prevState.orientation + (alpha * (nextState.orientation - prevState.orientation));
    }
    this.orientation=(float)Math.toRadians(this.orientation);
  }
}",0.9821930646672916
86678,"public void roundStarted(RoundStartedMessage msg){
  gameEffects.clearEffects();
  this.roundEnded=false;
  scoreboard.setGameEnded(false);
  scoreboard.setWinner(null);
  this.hud.getMessageLog().clearLogs();
  showScoreBoard(false);
  applyFullGameState(msg.gameState);
  executeCallbackScript(""String_Node_Str"",this);
}","public void roundStarted(RoundStartedMessage msg){
  gameEffects.clearEffects();
  this.roundEnded=false;
  scoreboard.setGameEnded(false);
  scoreboard.setWinner(null);
  this.hud.getMessageLog().clearLogs();
  map.restoreDestroyedTiles();
  showScoreBoard(false);
  applyFullGameState(msg.gameState);
  executeCallbackScript(""String_Node_Str"",this);
}",0.954074074074074
86679,"@Override public void onRoundStarted(RoundStartedEvent event){
  loadMapScripts();
  aiSystem.startOfRound(Game.this);
}","@Override public void onRoundStarted(RoundStartedEvent event){
  map.restoreDestroyedTiles();
  loadMapScripts();
  aiSystem.startOfRound(Game.this);
}",0.8856088560885609
86680,"/** 
 * @param config
 * @param players
 * @param gameType
 * @param gameMap
 * @param dispatcher
 */
public Game(SeventhConfig config,final Players players,final GameType gameType,GameMap gameMap,EventDispatcher dispatcher){
  this.config=config;
  this.gameType=gameType;
  this.dispatcher=dispatcher;
  this.gameMap=gameMap;
  this.map=gameMap.getMap();
  this.graph=map.createMapGraph(new NodeData());
  this.gameTimers=new Timers(MAX_TIMERS);
  this.entities=new Entity[MAX_ENTITIES];
  this.playerEntities=new PlayerEntity[MAX_PLAYERS];
  this.deadFrames=new int[MAX_ENTITIES];
  this.playerUpdates=new NetGameUpdate[MAX_ENTITIES];
  for (int i=0; i < this.playerUpdates.length; i++) {
    this.playerUpdates[i]=new NetGameUpdate();
  }
  this.bombTargets=new ArrayList<BombTarget>();
  this.vehicles=new ArrayList<Vehicle>();
  this.flags=new ArrayList<Flag>();
  this.soundEvents=new SoundEventPool(SeventhConstants.MAX_SOUNDS);
  this.lastFramesSoundEvents=new SoundEventPool(SeventhConstants.MAX_SOUNDS);
  this.aiSystem=new DefaultAISystem();
  this.random=new Random();
  this.players=players;
  this.gameState=new NetGameState();
  this.gamePartialStats=new NetGamePartialStats();
  this.gameStats=new NetGameStats();
  this.enableFOW=true;
  this.time=gameType.getMatchTime();
  this.TILE_WIDTH=map.getTileWidth();
  this.TILE_HEIGHT=map.getTileHeight();
  this.DISTANCE_CHECK=TILE_HEIGHT * TILE_WIDTH * 2;
  this.dispatcher.addEventListener(PlayerKilledEvent.class,new PlayerKilledListener(){
    @Override @EventMethod public void onPlayerKilled(    PlayerKilledEvent event){
      if (gameType.isInProgress()) {
        Player killed=event.getPlayer();
        killed.incrementDeaths();
        aiSystem.playerKilled(killed);
        Player killer=players.getPlayer(event.getKillerId());
        if (killer != null) {
          if (killed.getTeam().getId() == killer.getTeam().getId()) {
            killer.loseKill();
          }
 else           if (killed.getId() == killer.getId()) {
            killer.loseKill();
          }
 else {
            killer.incrementKills();
          }
        }
      }
    }
  }
);
  this.dispatcher.addEventListener(PlayerSpawnedEvent.class,new PlayerSpawnedListener(){
    @Override @EventMethod public void onPlayerSpawned(    PlayerSpawnedEvent event){
    }
  }
);
  this.dispatcher.addEventListener(SoundEmittedEvent.class,new SoundEmitterListener(){
    @Override @EventMethod public void onSoundEmitted(    SoundEmittedEvent event){
      soundEvents.emitSound(event);
    }
  }
);
  this.dispatcher.addEventListener(RoundStartedEvent.class,new RoundStartedListener(){
    @Override public void onRoundStarted(    RoundStartedEvent event){
      loadMapScripts();
      aiSystem.startOfRound(Game.this);
    }
  }
);
  this.dispatcher.addEventListener(RoundEndedEvent.class,new RoundEndedListener(){
    @Override public void onRoundEnded(    RoundEndedEvent event){
      gameTimers.removeTimers();
      aiSystem.endOfRound(Game.this);
    }
  }
);
  this.aiSystem.init(this);
  this.gameType.registerListeners(this,dispatcher);
}","/** 
 * @param config
 * @param players
 * @param gameType
 * @param gameMap
 * @param dispatcher
 */
public Game(SeventhConfig config,final Players players,final GameType gameType,GameMap gameMap,EventDispatcher dispatcher){
  this.config=config;
  this.gameType=gameType;
  this.dispatcher=dispatcher;
  this.gameMap=gameMap;
  this.map=gameMap.getMap();
  this.graph=map.createMapGraph(new NodeData());
  this.gameTimers=new Timers(MAX_TIMERS);
  this.entities=new Entity[MAX_ENTITIES];
  this.playerEntities=new PlayerEntity[MAX_PLAYERS];
  this.deadFrames=new int[MAX_ENTITIES];
  this.playerUpdates=new NetGameUpdate[MAX_ENTITIES];
  for (int i=0; i < this.playerUpdates.length; i++) {
    this.playerUpdates[i]=new NetGameUpdate();
  }
  this.bombTargets=new ArrayList<BombTarget>();
  this.vehicles=new ArrayList<Vehicle>();
  this.flags=new ArrayList<Flag>();
  this.soundEvents=new SoundEventPool(SeventhConstants.MAX_SOUNDS);
  this.lastFramesSoundEvents=new SoundEventPool(SeventhConstants.MAX_SOUNDS);
  this.aiSystem=new DefaultAISystem();
  this.random=new Random();
  this.players=players;
  this.gameState=new NetGameState();
  this.gamePartialStats=new NetGamePartialStats();
  this.gameStats=new NetGameStats();
  this.enableFOW=true;
  this.time=gameType.getMatchTime();
  this.TILE_WIDTH=map.getTileWidth();
  this.TILE_HEIGHT=map.getTileHeight();
  this.DISTANCE_CHECK=TILE_HEIGHT * TILE_WIDTH * 2;
  this.dispatcher.addEventListener(PlayerKilledEvent.class,new PlayerKilledListener(){
    @Override @EventMethod public void onPlayerKilled(    PlayerKilledEvent event){
      if (gameType.isInProgress()) {
        Player killed=event.getPlayer();
        killed.incrementDeaths();
        aiSystem.playerKilled(killed);
        Player killer=players.getPlayer(event.getKillerId());
        if (killer != null) {
          if (killed.getTeam().getId() == killer.getTeam().getId()) {
            killer.loseKill();
          }
 else           if (killed.getId() == killer.getId()) {
            killer.loseKill();
          }
 else {
            killer.incrementKills();
          }
        }
      }
    }
  }
);
  this.dispatcher.addEventListener(PlayerSpawnedEvent.class,new PlayerSpawnedListener(){
    @Override @EventMethod public void onPlayerSpawned(    PlayerSpawnedEvent event){
    }
  }
);
  this.dispatcher.addEventListener(SoundEmittedEvent.class,new SoundEmitterListener(){
    @Override @EventMethod public void onSoundEmitted(    SoundEmittedEvent event){
      soundEvents.emitSound(event);
    }
  }
);
  this.dispatcher.addEventListener(RoundStartedEvent.class,new RoundStartedListener(){
    @Override public void onRoundStarted(    RoundStartedEvent event){
      map.restoreDestroyedTiles();
      loadMapScripts();
      aiSystem.startOfRound(Game.this);
    }
  }
);
  this.dispatcher.addEventListener(RoundEndedEvent.class,new RoundEndedListener(){
    @Override public void onRoundEnded(    RoundEndedEvent event){
      gameTimers.removeTimers();
      aiSystem.endOfRound(Game.this);
    }
  }
);
  this.aiSystem.init(this);
  this.gameType.registerListeners(this,dispatcher);
}",0.9943738948722072
86681,"/** 
 * @param image
 * @param width
 * @param height
 */
public AnimatedTile(AnimatedImage image,int width,int height){
  super(null,width,height);
  this.image=image;
  this.image.loop(true);
}","/** 
 * @param image
 * @param width
 * @param height
 */
public AnimatedTile(AnimatedImage image,int layer,int width,int height){
  super(null,layer,width,height);
  this.image=image;
  this.image.loop(true);
}",0.9605911330049262
86682,"public void init(SceneDef info) throws Exception {
  destroy();
  List<Layer> collidableLayers=new ArrayList<Layer>();
  List<Layer> destructableLayers=new ArrayList<Layer>();
  int bgSize=info.getBackgroundLayers().length;
  this.backgroundLayers=new Layer[bgSize];
  for (int i=0; i < bgSize; i++) {
    this.backgroundLayers[i]=info.getBackgroundLayers()[i];
    if (this.backgroundLayers[i].collidable()) {
      collidableLayers.add(this.backgroundLayers[i]);
    }
    if (this.backgroundLayers[i].isDestructable()) {
      destructableLayers.add(this.backgroundLayers[i]);
    }
  }
  int fgSize=info.getForegroundLayers().length;
  this.foregroundLayers=new Layer[fgSize];
  for (int i=0; i < fgSize; i++) {
    this.foregroundLayers[i]=info.getForegroundLayers()[i];
    if (this.foregroundLayers[i].isDestructable()) {
      destructableLayers.add(this.foregroundLayers[i]);
    }
  }
  this.collidableLayers=new Layer[collidableLayers.size()];
  this.collidableLayers=collidableLayers.toArray(this.collidableLayers);
  this.destructableLayer=new Layer[destructableLayers.size()];
  this.destructableLayer=destructableLayers.toArray(this.destructableLayer);
  this.backgroundImage=info.getBackgroundImage();
  this.maxX=info.getDimensionX();
  this.maxY=info.getDimensionY();
  this.tileWidth=info.getTileWidth();
  this.tileHeight=info.getTileHeight();
  Vector2f worldCoordinates=tileToWorld(this.maxX,this.maxY);
  this.mapWidth=(int)worldCoordinates.x;
  this.mapHeight=(int)worldCoordinates.y;
  this.worldBounds=new Rectangle(0,0,this.mapWidth,this.mapHeight);
  this.originalLayer=new boolean[this.maxY][this.maxX];
  for (int i=0; i < this.destructableLayer.length; i++) {
    Layer layer=this.destructableLayer[i];
    for (int y=0; y < layer.numberOfRows(); y++) {
      Tile[] row=layer.getRow(y);
      for (int x=0; x < row.length; x++) {
        Tile tile=row[x];
        if (tile != null) {
          this.originalLayer[y][x]=true;
        }
      }
    }
  }
  this.surfaces=info.getSurfaces();
  if (this.shadeTilesLookup != null) {
    this.shadeTilesLookup=createShadeLookup(45);
  }
}","public void init(SceneDef info) throws Exception {
  destroy();
  List<Layer> collidableLayers=new ArrayList<Layer>();
  List<Layer> destructableLayers=new ArrayList<Layer>();
  int bgSize=info.getBackgroundLayers().length;
  this.backgroundLayers=new Layer[bgSize];
  for (int i=0; i < bgSize; i++) {
    this.backgroundLayers[i]=info.getBackgroundLayers()[i];
    if (this.backgroundLayers[i].collidable()) {
      collidableLayers.add(this.backgroundLayers[i]);
    }
    if (this.backgroundLayers[i].isDestructable()) {
      destructableLayers.add(this.backgroundLayers[i]);
    }
  }
  int fgSize=info.getForegroundLayers().length;
  this.foregroundLayers=new Layer[fgSize];
  for (int i=0; i < fgSize; i++) {
    this.foregroundLayers[i]=info.getForegroundLayers()[i];
    if (this.foregroundLayers[i].isDestructable()) {
      destructableLayers.add(this.foregroundLayers[i]);
    }
  }
  this.collidableLayers=new Layer[collidableLayers.size()];
  this.collidableLayers=collidableLayers.toArray(this.collidableLayers);
  this.destructableLayer=new Layer[destructableLayers.size()];
  this.destructableLayer=destructableLayers.toArray(this.destructableLayer);
  this.backgroundImage=info.getBackgroundImage();
  this.maxX=info.getDimensionX();
  this.maxY=info.getDimensionY();
  this.tileWidth=info.getTileWidth();
  this.tileHeight=info.getTileHeight();
  Vector2f worldCoordinates=tileToWorld(this.maxX,this.maxY);
  this.mapWidth=(int)worldCoordinates.x;
  this.mapHeight=(int)worldCoordinates.y;
  this.worldBounds=new Rectangle(0,0,this.mapWidth,this.mapHeight);
  this.surfaces=info.getSurfaces();
  if (this.shadeTilesLookup != null) {
    this.shadeTilesLookup=createShadeLookup(45);
  }
}",0.8931937172774869
86683,"/** 
 */
public Tile(TextureRegion image,int width,int height){
  this.width=width;
  this.height=height;
  this.bounds=new Rectangle();
  this.collisionMask=CollisionMask.NO_COLLISION;
  this.surfaceType=SurfaceType.CEMENT;
  this.isDestroyed=false;
  if (image != null) {
    this.sprite=new Sprite(image);
  }
}","/** 
 */
public Tile(TextureRegion image,int layer,int width,int height){
  this.layer=layer;
  this.width=width;
  this.height=height;
  this.bounds=new Rectangle();
  this.collisionMask=CollisionMask.NO_COLLISION;
  this.surfaceType=SurfaceType.CEMENT;
  this.isDestroyed=false;
  if (image != null) {
    this.sprite=new Sprite(image);
  }
}",0.9544072948328268
86684,"private List<Layer> parseLayers(LeoArray layers,TilesetAtlas atlas,boolean loadImages,int tileWidth,int tileHeight,SurfaceType[][] surfaces) throws Exception {
  List<Layer> mapLayers=new ArrayList<Layer>(layers.size());
  int index=0;
  for (  LeoObject l : layers) {
    LeoMap layer=l.as();
    LeoArray data=layer.getByString(""String_Node_Str"").as();
    int width=layer.getInt(""String_Node_Str"");
    int height=layer.getInt(""String_Node_Str"");
    boolean isCollidable=false;
    boolean isForeground=false;
    boolean isProperty=false;
    boolean isSurfaceTypes=false;
    boolean isDestructable=false;
    boolean isVisible=layer.getBoolean(""String_Node_Str"");
    int heightMask=0;
    if (layer.has(LeoString.valueOf(""String_Node_Str""))) {
      LeoMap properties=layer.getByString(""String_Node_Str"").as();
      isCollidable=properties.getString(""String_Node_Str"").equals(""String_Node_Str"");
      isForeground=properties.getString(""String_Node_Str"").equals(""String_Node_Str"");
      isDestructable=properties.getString(""String_Node_Str"").equals(""String_Node_Str"");
      if (properties.containsKeyByString(""String_Node_Str"")) {
        String strMask=properties.getString(""String_Node_Str"");
        heightMask=Integer.parseInt(strMask);
      }
      if (properties.containsKeyByString(""String_Node_Str"")) {
        isProperty=true;
      }
      if (properties.containsKeyByString(""String_Node_Str"")) {
        isSurfaceTypes=true;
      }
    }
    if (isSurfaceTypes) {
      parseSurfaces(surfaces,atlas,data,width,tileWidth,tileHeight);
      continue;
    }
    Layer mapLayer=new Layer(layer.getString(""String_Node_Str""),isCollidable,isForeground,isDestructable,isProperty,isVisible,index,heightMask,height);
    mapLayers.add(mapLayer);
    if (!isForeground) {
      index++;
    }
    Tile[] row=null;
    int y=-tileHeight;
    int rowIndex=0;
    for (int x=0; x < data.size(); x++) {
      int tileId=data.get(x).asInt();
      boolean flippedHorizontally=(tileId & FLIPPED_HORIZONTALLY_FLAG) != 0;
      boolean flippedVertically=(tileId & FLIPPED_VERTICALLY_FLAG) != 0;
      boolean flippedDiagonally=(tileId & FLIPPED_DIAGONALLY_FLAG) != 0;
      tileId&=~(FLIPPED_HORIZONTALLY_FLAG | FLIPPED_VERTICALLY_FLAG | FLIPPED_DIAGONALLY_FLAG);
      if (x % width == 0) {
        row=new Tile[width];
        mapLayer.addRow(rowIndex++,row);
        y+=tileHeight;
      }
      if (loadImages) {
        TextureRegion image=atlas.getTile(tileId);
        if (image != null) {
          Tile tile=null;
          if (atlas.isAnimatedTile(tileId)) {
            tile=new AnimatedTile(atlas.getAnimatedTile(tileId),tileWidth,tileHeight);
            mapLayer.setContainsAnimations(true);
          }
 else {
            tile=new Tile(image,tileWidth,tileHeight);
          }
          tile.setPosition((x % width) * tileWidth,y);
          tile.setFlips(flippedHorizontally,flippedVertically,flippedDiagonally);
          if (isCollidable) {
            int collisionId=atlas.getTileId(tileId);
            tile.setCollisionMaskById(collisionId);
          }
          row[x % width]=tile;
        }
 else {
          row[x % width]=null;
        }
      }
 else {
        if (tileId != 0) {
          Tile tile=new Tile(null,tileWidth,tileHeight);
          tile.setPosition((x % width) * tileWidth,y);
          if (isCollidable) {
            int collisionId=atlas.getTileId(tileId);
            tile.setCollisionMaskById(collisionId);
          }
          row[x % width]=tile;
        }
 else {
          row[x % width]=null;
        }
      }
    }
    mapLayer.applyHeightMask();
  }
  return mapLayers;
}","private List<Layer> parseLayers(LeoArray layers,TilesetAtlas atlas,boolean loadImages,int tileWidth,int tileHeight,SurfaceType[][] surfaces) throws Exception {
  List<Layer> mapLayers=new ArrayList<Layer>(layers.size());
  int index=0;
  for (  LeoObject l : layers) {
    LeoMap layer=l.as();
    LeoArray data=layer.getByString(""String_Node_Str"").as();
    int width=layer.getInt(""String_Node_Str"");
    int height=layer.getInt(""String_Node_Str"");
    boolean isCollidable=false;
    boolean isForeground=false;
    boolean isProperty=false;
    boolean isSurfaceTypes=false;
    boolean isDestructable=false;
    boolean isVisible=layer.getBoolean(""String_Node_Str"");
    int heightMask=0;
    if (layer.has(LeoString.valueOf(""String_Node_Str""))) {
      LeoMap properties=layer.getByString(""String_Node_Str"").as();
      isCollidable=properties.getString(""String_Node_Str"").equals(""String_Node_Str"");
      isForeground=properties.getString(""String_Node_Str"").equals(""String_Node_Str"");
      isDestructable=properties.getString(""String_Node_Str"").equals(""String_Node_Str"");
      if (properties.containsKeyByString(""String_Node_Str"")) {
        String strMask=properties.getString(""String_Node_Str"");
        heightMask=Integer.parseInt(strMask);
      }
      if (properties.containsKeyByString(""String_Node_Str"")) {
        isProperty=true;
      }
      if (properties.containsKeyByString(""String_Node_Str"")) {
        isSurfaceTypes=true;
      }
    }
    if (isSurfaceTypes) {
      parseSurfaces(surfaces,atlas,data,width,tileWidth,tileHeight);
      continue;
    }
    Layer mapLayer=new Layer(layer.getString(""String_Node_Str""),isCollidable,isForeground,isDestructable,isProperty,isVisible,index,heightMask,height);
    mapLayers.add(mapLayer);
    Tile[] row=null;
    int y=-tileHeight;
    int rowIndex=0;
    for (int x=0; x < data.size(); x++) {
      int tileId=data.get(x).asInt();
      boolean flippedHorizontally=(tileId & FLIPPED_HORIZONTALLY_FLAG) != 0;
      boolean flippedVertically=(tileId & FLIPPED_VERTICALLY_FLAG) != 0;
      boolean flippedDiagonally=(tileId & FLIPPED_DIAGONALLY_FLAG) != 0;
      tileId&=~(FLIPPED_HORIZONTALLY_FLAG | FLIPPED_VERTICALLY_FLAG | FLIPPED_DIAGONALLY_FLAG);
      if (x % width == 0) {
        row=new Tile[width];
        mapLayer.addRow(rowIndex++,row);
        y+=tileHeight;
      }
      if (loadImages) {
        TextureRegion image=atlas.getTile(tileId);
        if (image != null) {
          Tile tile=null;
          if (atlas.isAnimatedTile(tileId)) {
            tile=new AnimatedTile(atlas.getAnimatedTile(tileId),index,tileWidth,tileHeight);
            mapLayer.setContainsAnimations(true);
          }
 else {
            tile=new Tile(image,index,tileWidth,tileHeight);
          }
          tile.setPosition((x % width) * tileWidth,y);
          tile.setFlips(flippedHorizontally,flippedVertically,flippedDiagonally);
          if (isCollidable) {
            int collisionId=atlas.getTileId(tileId);
            tile.setCollisionMaskById(collisionId);
          }
          row[x % width]=tile;
        }
 else {
          row[x % width]=null;
        }
      }
 else {
        if (tileId != 0) {
          Tile tile=new Tile(null,index,tileWidth,tileHeight);
          tile.setPosition((x % width) * tileWidth,y);
          if (isCollidable) {
            int collisionId=atlas.getTileId(tileId);
            tile.setCollisionMaskById(collisionId);
          }
          row[x % width]=tile;
        }
 else {
          row[x % width]=null;
        }
      }
    }
    if (!isForeground) {
      index++;
    }
    mapLayer.applyHeightMask();
  }
  return mapLayers;
}",0.9849066959385292
86685,"/** 
 * Finds the closest friendly bot
 * @param game
 * @return the id of the closest bot, or -1 if no bots are available.
 */
protected int findClosestBot(ClientGame game,ClientPlayer otherPlayer){
  ClientPlayers players=game.getPlayers();
  if (!otherPlayer.isAlive()) {
    return -1;
  }
  ClientTeam team=otherPlayer.getTeam();
  int closestBot=-1;
  float closestDistance=-1f;
  for (int i=0; i < players.getMaxNumberOfPlayers(); i++) {
    ClientPlayer player=players.getPlayer(i);
    if (player != null && player.isAlive() && player.isBot()) {
      if (player.getTeam().equals(team)) {
        Vector2f pos=otherPlayer.getEntity().getPos();
        Vector2f botPos=player.getEntity().getPos();
        float dist=Vector2f.Vector2fDistanceSq(pos,botPos);
        if (closestBot == -1 || dist < closestDistance) {
          closestBot=i;
          closestDistance=dist;
        }
      }
    }
  }
  return closestBot;
}","/** 
 * Finds the closest friendly bot
 * @param game
 * @return the id of the closest bot, or -1 if no bots are available.
 */
protected int findClosestBot(ClientGame game,ClientPlayer otherPlayer){
  ClientPlayers players=game.getPlayers();
  if (!otherPlayer.isAlive()) {
    return -1;
  }
  ClientTeam team=otherPlayer.getTeam();
  int closestBot=-1;
  float closestDistance=-1f;
  for (int i=0; i < players.getMaxNumberOfPlayers(); i++) {
    ClientPlayer player=players.getPlayer(i);
    if (player != null && otherPlayer != player && player.isAlive() && player.isBot()) {
      if (player.getTeam().equals(team)) {
        Vector2f pos=otherPlayer.getEntity().getPos();
        Vector2f botPos=player.getEntity().getPos();
        float dist=Vector2f.Vector2fDistanceSq(pos,botPos);
        if (closestBot == -1 || dist < closestDistance) {
          closestBot=i;
          closestDistance=dist;
        }
      }
    }
  }
  return closestBot;
}",0.9697612732095492
86686,"/** 
 * @param pos
 * @param vel
 */
public BloodParticle(Vector2f pos,Vector2f vel,int angle,float scale,int timeToLive){
  super(pos,vel,timeToLive);
  this.speed=10;
  this.angle=(float)angle;
  this.image=Art.randomBloodspat();
  this.sprite=new Sprite(image);
  this.sprite.setScale(scale);
  this.sprite.flip(false,true);
  this.alphaFade=new FadeValue(255,0,timeToLive + 1000);
}","/** 
 * @param pos
 * @param vel
 */
public BloodParticle(Vector2f pos,Vector2f vel,int angle,float scale,int timeToLive){
  super(pos,vel,timeToLive);
  this.scale=scale;
  this.speed=10;
  this.angle=(float)angle;
  this.image=Art.randomBloodspat();
  this.sprite=new Sprite(image);
  this.sprite.setScale(scale);
  this.sprite.flip(false,true);
  this.alphaFade=new FadeValue(255,0,timeToLive + 1000);
}",0.9747474747474748
86687,"public void removeTile(TileRemovedMessage msg){
  map.removeDestructableTileAt(msg.x,msg.y);
}","public void removeTile(TileRemovedMessage msg){
  Tile tile=map.getDestructableTile(msg.x,msg.y);
  if (tile != null) {
    this.gameEffects.addBackgroundEffect(new WallCrumbleEmitter(tile,new Vector2f(tile.getX(),tile.getY())));
  }
  map.removeDestructableTileAt(msg.x,msg.y);
}",0.4705882352941176
86688,"/** 
 * @param pos
 * @param timeToLive
 * @param timeToNextSpawn
 */
public WallCrumbleEmitter(TextureRegion image,Vector2f pos){
}","/** 
 * @param pos
 * @param timeToLive
 * @param timeToNextSpawn
 */
public WallCrumbleEmitter(Tile tile,Vector2f pos){
}",0.9291338582677166
86689,"public void setFlips(boolean isFlippedHorizontal,boolean isFlippedVert,boolean isFlippedDiagnally){
  if (this.sprite == null)   return;
  if (isFlippedDiagnally) {
    if (isFlippedHorizontal && isFlippedVert) {
      this.sprite.flip(true,false);
      this.sprite.rotate(-270f);
    }
 else     if (isFlippedHorizontal) {
      this.sprite.rotate(-270f);
    }
 else     if (isFlippedVert) {
      this.sprite.rotate(-90f);
    }
 else {
      this.sprite.flip(false,true);
      this.sprite.rotate(-270f);
    }
  }
 else {
    this.sprite.flip(isFlippedHorizontal,isFlippedVert);
  }
}","public void setFlips(boolean isFlippedHorizontal,boolean isFlippedVert,boolean isFlippedDiagnally){
  if (isFlippedDiagnally)   this.flipMask|=Tile.isFlippedDiagnally;
  if (isFlippedHorizontal)   this.flipMask|=Tile.isFlippedHorizontal;
  if (isFlippedVert)   this.flipMask|=Tile.isFlippedVert;
  if (this.sprite == null)   return;
  TextureUtil.setFlips(this.sprite,isFlippedHorizontal,isFlippedVert,isFlippedDiagnally);
}",0.3175542406311637
86690,"/** 
 */
public Tile(TextureRegion image,int width,int height){
  this.image=image;
  this.width=width;
  this.height=height;
  this.bounds=new Rectangle();
  this.collisionMask=CollisionMask.NO_COLLISION;
  this.surfaceType=SurfaceType.CEMENT;
  this.isDestroyed=false;
  if (image != null) {
    this.sprite=new Sprite(image);
  }
}","/** 
 */
public Tile(TextureRegion image,int width,int height){
  this.width=width;
  this.height=height;
  this.bounds=new Rectangle();
  this.collisionMask=CollisionMask.NO_COLLISION;
  this.surfaceType=SurfaceType.CEMENT;
  this.isDestroyed=false;
  if (image != null) {
    this.sprite=new Sprite(image);
  }
}",0.9691358024691358
86691,"/** 
 * @return the image
 */
public TextureRegion getImage(){
  return image;
}","/** 
 * @return the image
 */
public Sprite getImage(){
  return this.sprite;
}",0.8176100628930818
86692,"/** 
 * Applies the remote   {@link PlayerInputMessage} to the {@link PlayerEntity}
 * @param playerId
 * @param msg
 */
public void applyPlayerInput(int playerId,PlayerInputMessage msg){
  Player player=this.players.getPlayer(playerId);
  if (player != null) {
    if (player.isAlive()) {
      PlayerEntity entity=player.getEntity();
      entity.handleUserCommand(msg.keys,msg.orientation);
    }
 else     if (player.isSpectating()) {
      if (Keys.LEFT.isDown(this.previousKeys) && !Keys.LEFT.isDown(msg.keys)) {
        Player spectateMe=gameType.getPrevPlayerToSpectate(getPlayers(),player);
        player.setSpectating(spectateMe);
      }
 else       if (Keys.RIGHT.isDown(this.previousKeys) && !Keys.RIGHT.isDown(msg.keys)) {
        Player spectateMe=gameType.getNextPlayerToSpectate(getPlayers(),player);
        player.setSpectating(spectateMe);
      }
      this.previousKeys=msg.keys;
    }
  }
}","/** 
 * Applies the remote   {@link PlayerInputMessage} to the {@link PlayerEntity}
 * @param playerId
 * @param msg
 */
public void applyPlayerInput(int playerId,PlayerInputMessage msg){
  Player player=this.players.getPlayer(playerId);
  if (player != null) {
    if (player.isAlive()) {
      PlayerEntity entity=player.getEntity();
      entity.handleUserCommand(msg.keys,msg.orientation);
    }
 else {
      player.handleInput(this,msg.keys);
    }
  }
}",0.6128093158660844
86693,"/** 
 * @param game
 * @param player
 * @param pos
 */
public ClientPlayerEntity(ClientGame game,ClientPlayer player,Vector2f pos){
  super(game,pos);
  this.type=Type.PLAYER;
  this.currentState=State.IDLE;
  this.invinceableTime=0;
  this.lineOfSight=WeaponConstants.DEFAULT_LINE_OF_SIGHT;
  this.bloodEmitter=game.getGameEffects().getBloodEmitterForPlayer(player.getId());
  this.bloodEmitter.pause();
  this.bounds.width=24;
  this.bounds.height=24;
  LightSystem lightSystem=game.getLightSystem();
  this.mussleFlash=lightSystem.newPointLight();
  this.mussleFlash.setTexture(Art.fireWeaponLight);
  this.mussleFlash.setColor(0.5f,0.5f,0.5f);
  setPlayer(player);
}","/** 
 * @param game
 * @param player
 * @param pos
 */
public ClientPlayerEntity(ClientGame game,ClientPlayer player,Vector2f pos){
  super(game,pos);
  this.type=Type.PLAYER;
  this.currentState=State.IDLE;
  this.invinceableTime=0;
  this.lineOfSight=WeaponConstants.DEFAULT_LINE_OF_SIGHT;
  this.bloodEmitter=game.getGameEffects().getBloodEmitterForPlayer(player.getId());
  this.bloodEmitter.pause();
  this.bounds.width=24;
  this.bounds.height=24;
  LightSystem lightSystem=game.getLightSystem();
  this.mussleFlash=lightSystem.newPointLight();
  this.mussleFlash.setTexture(Art.fireWeaponLight);
  this.mussleFlash.setColor(0.5f,0.5f,0.5f);
  ClientPlayer localPlayer=game.getLocalPlayer();
  if (localPlayer != null) {
    setControlledByLocalPlayer(localPlayer.getId() == player.getId());
  }
  setPlayer(player);
}",0.8714859437751004
86694,"/** 
 * Destroys this shader
 */
public void destroy(){
  getShader().dispose();
}","/** 
 * Destroys this shader
 */
public void destroy(){
  try {
    getShader().dispose();
  }
 catch (  Exception ignore) {
  }
}",0.7735849056603774
86695,"@Override public void update(Brain brain,TimeStep timeStep){
  this.updateEval.update(timeStep);
  if (this.updateEval.isTime()) {
    ActionEvaluator newEvaluator=Evaluators.evaluate(brain,evaluators);
    if (this.currentActiveEvaluator == null || this.isFinished(brain) || newEvaluator.isRepeatable() || ((newEvaluator.getKeepBias() > this.currentActiveEvaluator.getKeepBias()) && (newEvaluator != this.currentActiveEvaluator))) {
      Action action=newEvaluator.getAction(brain);
      if (action != null && this.currentAction != action) {
        this.currentActiveEvaluator=newEvaluator;
        if (this.currentActiveEvaluator.isContinuable()) {
          interrupt(brain);
          addFirstAction(action);
        }
 else {
          this.replace(action);
        }
        if (newEvaluator.isRepeatable()) {
          action.start(brain);
        }
        this.currentAction=action;
      }
    }
  }
  super.update(brain,timeStep);
}","@Override public void update(Brain brain,TimeStep timeStep){
  this.updateEval.update(timeStep);
  if (this.updateEval.isTime()) {
    ActionEvaluator newEvaluator=Evaluators.evaluate(brain,evaluators);
    boolean isFinished=isFinished(brain);
    if (this.currentActiveEvaluator == null || isFinished || newEvaluator.isRepeatable() || ((newEvaluator.getKeepBias() > this.currentActiveEvaluator.getKeepBias()) && (newEvaluator != this.currentActiveEvaluator))) {
      Action action=newEvaluator.getAction(brain);
      if (action != null && (isFinished || this.currentAction != action)) {
        this.currentActiveEvaluator=newEvaluator;
        if (this.currentActiveEvaluator.isContinuable()) {
          interrupt(brain);
          addFirstAction(action);
        }
 else {
          this.replace(action);
        }
        if (newEvaluator.isRepeatable()) {
          action.start(brain);
        }
        this.currentAction=action;
      }
    }
  }
  super.update(brain,timeStep);
}",0.9638802889576884
86696,"@Override public boolean isInProgress(GameInfo game){
  return target != null && target.bombActive();
}","@Override public boolean isInProgress(GameInfo game){
  return target != null && (target.bombActive() || target.isBeingDestroyed());
}",0.869198312236287
86697,"@Override protected GameState doUpdate(Game game,TimeStep timeStep){
  if (this.inIntermission) {
    this.currentDelayTime-=timeStep.getDeltaTime();
    if (this.currentDelayTime <= 0) {
      startRound(game);
    }
  }
 else {
    int numberOfObjectivesInProgress=0;
    int size=this.outstandingObjectives.size();
    for (int i=0; i < size; i++) {
      Objective obj=this.outstandingObjectives.get(i);
      if (obj.isCompleted(game)) {
        this.completedObjectives.add(obj);
      }
 else       if (obj.isInProgress(game)) {
        numberOfObjectivesInProgress++;
      }
    }
    this.outstandingObjectives.removeAll(this.completedObjectives);
    if (this.completedObjectives.size() >= this.minimumObjectivesToComplete) {
      endRound(attacker,game);
    }
 else     if (this.outstandingObjectives.isEmpty() && this.completedObjectives.size() > 0) {
      endRound(attacker,game);
    }
 else     if (defender.isTeamDead() && defender.teamSize() > 0) {
      endRound(attacker,game);
    }
 else     if (getRemainingTime() <= 0) {
      endRound(defender,game);
    }
 else     if (attacker.isTeamDead() && attacker.teamSize() > 0 && (!this.outstandingObjectives.isEmpty() ? numberOfObjectivesInProgress < this.outstandingObjectives.size() : true)) {
      endRound(defender,game);
    }
 else {
      checkSpectating(timeStep,game);
    }
  }
  return this.currentRound >= this.getMaxScore() ? GameState.WINNER : GameState.IN_PROGRESS;
}","@Override protected GameState doUpdate(Game game,TimeStep timeStep){
  if (this.inIntermission) {
    this.currentDelayTime-=timeStep.getDeltaTime();
    if (this.currentDelayTime <= 0) {
      startRound(game);
    }
  }
 else {
    int numberOfObjectivesInProgress=0;
    int size=this.outstandingObjectives.size();
    for (int i=0; i < size; i++) {
      Objective obj=this.outstandingObjectives.get(i);
      if (obj.isCompleted(game)) {
        this.completedObjectives.add(obj);
      }
 else       if (obj.isInProgress(game)) {
        numberOfObjectivesInProgress++;
      }
    }
    this.outstandingObjectives.removeAll(this.completedObjectives);
    if (this.completedObjectives.size() >= this.minimumObjectivesToComplete) {
      endRound(attacker,game);
    }
 else     if (this.outstandingObjectives.isEmpty() && this.completedObjectives.size() > 0) {
      endRound(attacker,game);
    }
 else     if (defender.isTeamDead() && defender.teamSize() > 0) {
      endRound(attacker,game);
    }
 else     if (getRemainingTime() <= 0) {
      endRound(defender,game);
    }
 else     if ((attacker.isTeamDead() && attacker.teamSize() > 0) && (numberOfObjectivesInProgress + this.completedObjectives.size() < this.minimumObjectivesToComplete)) {
      endRound(defender,game);
    }
 else {
      checkSpectating(timeStep,game);
    }
  }
  return this.currentRound >= this.getMaxScore() ? GameState.WINNER : GameState.IN_PROGRESS;
}",0.953071083505866
86698,"public void playerSpawned(PlayerSpawnedMessage msg){
  ClientPlayer player=players.getPlayer(msg.playerId);
  if (player != null) {
    Vector2f spawnLocation=new Vector2f(msg.posX,msg.posY);
    removeEntity(msg.playerId);
    ClientPlayerEntity entity=new ClientPlayerEntity(this,player,spawnLocation);
    entity.spawned();
    if (localPlayer != null) {
      if (player == localPlayer) {
        entity.setControlledByLocalPlayer(true);
        camera.centerAroundNow(spawnLocation);
      }
 else       if (localPlayer.getSpectatingPlayerId() == player.getId()) {
        camera.centerAroundNow(spawnLocation);
      }
    }
    entities.addEntity(msg.playerId,entity);
    entityListener.onEntityCreated(entity);
    Sounds.startPlaySound(Sounds.respawnSnd,msg.playerId,spawnLocation.x,spawnLocation.y);
  }
}","public void playerSpawned(PlayerSpawnedMessage msg){
  ClientPlayer player=players.getPlayer(msg.playerId);
  if (player != null) {
    Vector2f spawnLocation=new Vector2f(msg.posX,msg.posY);
    removeEntity(msg.playerId);
    ClientPlayerEntity entity=new ClientPlayerEntity(this,player,spawnLocation);
    entity.spawned();
    if (localPlayer != null) {
      if (player.getId() == localPlayer.getId() || localPlayer.getSpectatingPlayerId() == player.getId()) {
        camera.centerAroundNow(spawnLocation);
      }
    }
    entities.addEntity(msg.playerId,entity);
    entityListener.onEntityCreated(entity);
    Sounds.startPlaySound(Sounds.respawnSnd,msg.playerId,spawnLocation.x,spawnLocation.y);
  }
}",0.8861256544502618
86699,"/** 
 * @param owner the owner to set
 */
public void setOwner(Entity owner){
  this.owner=owner;
}","/** 
 * @param owner the owner to set
 */
public void setOwner(Entity owner){
  this.owner=owner;
  this.gunSwing.setOwner(owner);
}",0.8571428571428571
86700,"@Override public void render(Canvas canvas,Camera camera,float alpha){
  if (flagImg != null) {
    Vector2f cameraPos=camera.getRenderPosition(alpha);
    Vector2f flagPos=pos;
    if (carrier != null) {
      flagPos=carrier.getEntity().getRenderPos(alpha);
    }
    float x=(flagPos.x - cameraPos.x);
    float y=(flagPos.y - cameraPos.y);
    flagImg.setPosition(x,y);
    canvas.drawSprite(flagImg);
  }
}","@Override public void render(Canvas canvas,Camera camera,float alpha){
  if (flagImg != null) {
    Vector2f cameraPos=camera.getRenderPosition(alpha);
    Vector2f flagPos=pos;
    if (carrier != null && carrier.isAlive()) {
      flagPos=carrier.getEntity().getRenderPos(alpha);
    }
    float x=(flagPos.x - cameraPos.x);
    float y=(flagPos.y - cameraPos.y);
    flagImg.setPosition(x,y);
    canvas.drawSprite(flagImg);
  }
}",0.9750889679715302
86701,"/** 
 * Renders the scoreboard
 * @param canvas
 */
public void drawScoreboard(Canvas canvas){
  if (!isVisible()) {
    return;
  }
  int yIncBig=50;
  int y=140;
  int x=40;
  setBigFont(canvas);
  int defaultColor=0xffffffff;
  RenderFont.drawShadedString(canvas,""String_Node_Str"",x,y,defaultColor);
  List<ClientPlayer> vals=game.getPlayers().asList();
  Map<ClientTeam,List<ClientPlayer>> teams=new HashMap<ClientTeam,List<ClientPlayer>>();
  teams.put(ClientTeam.NONE,new ArrayList<ClientPlayer>());
  teams.put(ClientTeam.ALLIES,new ArrayList<ClientPlayer>());
  teams.put(ClientTeam.AXIS,new ArrayList<ClientPlayer>());
  Collections.sort(vals,new Comparator<ClientPlayer>(){
    @Override public int compare(    ClientPlayer a,    ClientPlayer b){
      return b.getKills() - a.getKills();
    }
  }
);
  for (  ClientPlayer player : vals) {
    ClientTeam team=player.getTeam();
    if (team != null) {
      teams.get(team).add(player);
    }
 else {
      teams.get(ClientTeam.NONE).add(player);
    }
  }
  int numberOfBlue=teams.get(ClientTeam.ALLIES).size();
  int numberOfRed=teams.get(ClientTeam.AXIS).size();
  int numberOfIndividuals=teams.get(ClientTeam.NONE).size();
  if (numberOfIndividuals > 0) {
    if (numberOfBlue > 0 || numberOfRed > 0) {
      y+=yIncBig;
      RenderFont.drawShadedString(canvas,""String_Node_Str"",x,y,defaultColor);
      y=drawTeam(canvas,teams.get(ClientTeam.NONE),x,y);
    }
  }
  int redScore=this.teamScores.get(ClientTeam.AXIS);
  int blueScore=this.teamScores.get(ClientTeam.ALLIES);
  if (blueScore > redScore) {
    if (numberOfBlue > 0) {
      y+=yIncBig;
      RenderFont.drawShadedString(canvas,""String_Node_Str"" + blueScore,x,y,ClientTeam.ALLIES.getColor());
      y=drawTeam(canvas,teams.get(ClientTeam.ALLIES),x,y);
    }
    if (numberOfRed > 0) {
      y+=yIncBig;
      RenderFont.drawShadedString(canvas,""String_Node_Str"" + redScore,x,y,ClientTeam.AXIS.getColor());
      y=drawTeam(canvas,teams.get(ClientTeam.AXIS),x,y);
    }
  }
 else {
    if (numberOfRed > 0) {
      y+=yIncBig;
      RenderFont.drawShadedString(canvas,""String_Node_Str"" + redScore,x,y,ClientTeam.AXIS.getColor());
      y=drawTeam(canvas,teams.get(ClientTeam.AXIS),x,y);
    }
    if (numberOfBlue > 0) {
      y+=yIncBig;
      RenderFont.drawShadedString(canvas,""String_Node_Str"" + blueScore,x,y,ClientTeam.ALLIES.getColor());
      y=drawTeam(canvas,teams.get(ClientTeam.ALLIES),x,y);
    }
  }
  if (gameEnded) {
    String winner=""String_Node_Str"";
    int color=0xffffffff;
    if (winningTeam != null) {
      winner=winningTeam.getName() + ""String_Node_Str"";
      color=winningTeam.getColor();
    }
 else {
      if (blueScore > redScore) {
        winner=""String_Node_Str"";
        color=ClientTeam.ALLIES.getColor();
      }
 else       if (blueScore < redScore) {
        winner=""String_Node_Str"";
        color=ClientTeam.AXIS.getColor();
      }
 else {
        winner=""String_Node_Str"";
      }
    }
    y+=yIncBig;
    int strWidth=canvas.getWidth(winner);
    RenderFont.drawShadedString(canvas,winner,canvas.getWidth() / 2 - strWidth / 2,y,color);
  }
}","/** 
 * Renders the scoreboard
 * @param canvas
 */
public void drawScoreboard(Canvas canvas){
  if (!isVisible()) {
    return;
  }
  int yIncBig=50;
  int y=140;
  int x=40;
  setBigFont(canvas);
  int defaultColor=0xffffffff;
  RenderFont.drawShadedString(canvas,""String_Node_Str"",x,y,defaultColor);
  List<ClientPlayer> vals=game.getPlayers().asList();
  Map<ClientTeam,List<ClientPlayer>> teams=new HashMap<ClientTeam,List<ClientPlayer>>();
  teams.put(ClientTeam.NONE,new ArrayList<ClientPlayer>());
  teams.put(ClientTeam.ALLIES,new ArrayList<ClientPlayer>());
  teams.put(ClientTeam.AXIS,new ArrayList<ClientPlayer>());
  Collections.sort(vals,new Comparator<ClientPlayer>(){
    @Override public int compare(    ClientPlayer a,    ClientPlayer b){
      return b.getKills() - a.getKills();
    }
  }
);
  for (  ClientPlayer player : vals) {
    ClientTeam team=player.getTeam();
    if (team != null) {
      teams.get(team).add(player);
    }
 else {
      teams.get(ClientTeam.NONE).add(player);
    }
  }
  int numberOfBlue=teams.get(ClientTeam.ALLIES).size();
  int numberOfRed=teams.get(ClientTeam.AXIS).size();
  int numberOfIndividuals=teams.get(ClientTeam.NONE).size();
  if (numberOfIndividuals > 0) {
    if (numberOfBlue > 0 || numberOfRed > 0) {
      y+=yIncBig;
      RenderFont.drawShadedString(canvas,""String_Node_Str"",x,y,defaultColor);
      y=drawTeam(canvas,teams.get(ClientTeam.NONE),x,y);
    }
  }
  int redScore=this.teamScores.get(ClientTeam.AXIS);
  int blueScore=this.teamScores.get(ClientTeam.ALLIES);
  if (blueScore > redScore) {
    if (numberOfBlue > 0) {
      y+=yIncBig;
      RenderFont.drawShadedString(canvas,""String_Node_Str"" + blueScore,x,y,ClientTeam.ALLIES.getColor());
      y=drawTeam(canvas,teams.get(ClientTeam.ALLIES),x,y);
    }
    if (numberOfRed > 0) {
      y+=yIncBig;
      RenderFont.drawShadedString(canvas,""String_Node_Str"" + redScore,x,y,ClientTeam.AXIS.getColor());
      y=drawTeam(canvas,teams.get(ClientTeam.AXIS),x,y);
    }
  }
 else {
    if (numberOfRed > 0) {
      y+=yIncBig;
      RenderFont.drawShadedString(canvas,""String_Node_Str"" + redScore,x,y,ClientTeam.AXIS.getColor());
      y=drawTeam(canvas,teams.get(ClientTeam.AXIS),x,y);
    }
    if (numberOfBlue > 0) {
      y+=yIncBig;
      RenderFont.drawShadedString(canvas,""String_Node_Str"" + blueScore,x,y,ClientTeam.ALLIES.getColor());
      y=drawTeam(canvas,teams.get(ClientTeam.ALLIES),x,y);
    }
  }
  if (gameEnded) {
    String winner=""String_Node_Str"";
    int color=0xffffffff;
    if (winningTeam != null && winningTeam != ClientTeam.NONE) {
      winner=winningTeam.getName() + ""String_Node_Str"";
      color=winningTeam.getColor();
    }
 else {
      if (blueScore > redScore) {
        winner=""String_Node_Str"";
        color=ClientTeam.ALLIES.getColor();
      }
 else       if (blueScore < redScore) {
        winner=""String_Node_Str"";
        color=ClientTeam.AXIS.getColor();
      }
 else {
        winner=""String_Node_Str"";
      }
    }
    y+=yIncBig;
    int strWidth=canvas.getWidth(winner);
    RenderFont.drawShadedString(canvas,winner,canvas.getWidth() / 2 - strWidth / 2,y,color);
  }
}",0.9945756222080409
86702,"public void play(float x,float y,boolean loop){
  SoundSystemConfig.setDefaultFadeDistance(10000f);
  this.soundSystem.quickPlay(true,soundFile,loop,x,y,0,SoundSystemConfig.ATTENUATION_NONE,10.0f);
}","public void play(float x,float y,boolean loop){
  this.soundSystem.setPosition(sourceName,x,y,0);
  this.soundSystem.setLooping(sourceName,loop);
  this.soundSystem.play(sourceName);
}",0.6109660574412533
86703,"public boolean isPlaying(){
  return this.soundSystem.playing(soundFile);
}","public boolean isPlaying(){
  return this.soundSystem.playing(sourceName);
}",0.9271523178807948
86704,"public float getVolume(){
  return this.soundSystem.getVolume(soundFile);
}","public float getVolume(){
  return this.soundSystem.getVolume(sourceName);
}",0.9271523178807948
86705,"public void stop(){
  this.soundSystem.stop(soundFile);
}","public void stop(){
  this.soundSystem.stop(sourceName);
}",0.9043478260869564
86706,"public void reset(){
  this.soundSystem.rewind(soundFile);
}","public void reset(){
  this.soundSystem.rewind(sourceName);
}",0.9090909090909092
86707,"public void destroy(){
  this.soundSystem.unloadSound(soundFile);
}","public void destroy(){
  this.soundSystem.removeSource(sourceName);
}",0.8088235294117647
86708,"/** 
 * @param soundFile
 * @param soundSystem
 */
public Sound(String soundFile,SoundSystem soundSystem) throws Exception {
  super();
  this.soundFile=soundFile;
  this.soundSystem=soundSystem;
  this.soundSystem.loadSound(new File(soundFile).toURI().toURL(),soundFile);
}","/** 
 * @param soundFile
 * @param soundSystem
 */
public Sound(SoundSystem soundSystem,String soundFile,String soundName) throws Exception {
  this.soundSystem=soundSystem;
  this.sourceName=soundName;
  this.soundSystem.newSource(true,this.sourceName,soundFile,false,0,0,0,SoundSystemConfig.ATTENUATION_ROLLOFF,SoundSystemConfig.getDefaultRolloff());
}",0.2993630573248407
86709,"public void setVolume(float v){
  this.soundSystem.setVolume(soundFile,v);
}","public void setVolume(float v){
  this.soundSystem.setVolume(sourceName,v);
}",0.9281045751633988
86710,"public void pause(){
  this.soundSystem.pause(soundFile);
}","public void pause(){
  this.soundSystem.pause(sourceName);
}",0.907563025210084
86711,"public static void init(ClientSeventhConfig cfg){
  try {
    Cons.println(""String_Node_Str"");
    Cons.getImpl().addCommand(getVolumeCommand());
    config=cfg;
    volume=config.getVolume();
    SoundSystemConfig.setMasterGain(volume);
    SoundSystemConfig.setLogger(new SoundSystemLogger(){
      @Override public void errorMessage(      String message,      String error,      int code){
        Cons.println(""String_Node_Str"" + message + ""String_Node_Str""+ error+ ""String_Node_Str""+ code);
      }
      @Override public void message(      String message,      int code){
        Cons.println(""String_Node_Str"" + message + ""String_Node_Str""+ code);
      }
      @Override public void importantMessage(      String message,      int code){
        Cons.println(""String_Node_Str"" + message + ""String_Node_Str""+ code);
      }
    }
);
    SoundSystemConfig.addLibrary(LibraryLWJGLOpenAL.class);
    SoundSystemConfig.setCodec(""String_Node_Str"",CodecWav.class);
    soundSystem=new SoundSystem(LibraryLWJGLOpenAL.class);
    setVolume(volume);
    for (int i=0; i < channels.length; i++) {
      channels[i]=createChannel();
    }
    Cons.println(""String_Node_Str"");
  }
 catch (  SoundSystemException e) {
    Cons.println(""String_Node_Str"");
  }
}","public static void init(ClientSeventhConfig cfg){
  try {
    Cons.println(""String_Node_Str"");
    Cons.getImpl().addCommand(getVolumeCommand());
    config=cfg;
    volume=config.getVolume();
    SoundSystemConfig.setMasterGain(volume);
    SoundSystemConfig.setLogger(new SoundSystemLogger(){
      @Override public void errorMessage(      String message,      String error,      int code){
        Cons.println(""String_Node_Str"" + message + ""String_Node_Str""+ error+ ""String_Node_Str""+ code);
      }
      @Override public void message(      String message,      int code){
        Cons.println(""String_Node_Str"" + message + ""String_Node_Str""+ code);
      }
      @Override public void importantMessage(      String message,      int code){
        Cons.println(""String_Node_Str"" + message + ""String_Node_Str""+ code);
      }
    }
);
    SoundSystemConfig.addLibrary(LibraryLWJGLOpenAL.class);
    SoundSystemConfig.setCodec(""String_Node_Str"",CodecWav.class);
    SoundSystemConfig.setDefaultFadeDistance(10000f);
    soundSystem=new SoundSystem(LibraryLWJGLOpenAL.class);
    setVolume(volume);
    for (int i=0; i < channels.length; i++) {
      channels[i]=createChannel();
    }
    Cons.println(""String_Node_Str"");
  }
 catch (  SoundSystemException e) {
    Cons.println(""String_Node_Str"");
  }
}",0.9789227166276346
86712,"/** 
 * Attempts to load a   {@link Sound}
 * @param soundFile
 * @return the {@link Sound} if loaded successfully
 */
public static synchronized Sound loadSound(String soundFile){
  try {
    if (loadedSounds.containsKey(soundFile)) {
      return loadedSounds.get(soundFile);
    }
    Sound sound=new Sound(soundFile,soundSystem);
    loadedSounds.put(soundFile,sound);
    return sound;
  }
 catch (  Exception e) {
    Cons.println(""String_Node_Str"" + soundFile + ""String_Node_Str""+ e);
  }
  return null;
}","/** 
 * Attempts to load a   {@link Sound}
 * @param soundFile
 * @return the {@link Sound} if loaded successfully
 */
public static synchronized Sound loadSound(String soundFile){
  try {
    Sound sound=null;
    if (loadedSounds.containsKey(soundFile)) {
      sound=loadedSounds.get(soundFile).newSound();
    }
 else {
      SoundBuffer buffer=new SoundBuffer(soundSystem,soundFile,random);
      loadedSounds.put(soundFile,buffer);
      sound=buffer.newSound();
    }
    sound.setVolume(volume);
    return sound;
  }
 catch (  Exception e) {
    Cons.println(""String_Node_Str"" + soundFile + ""String_Node_Str""+ e);
  }
  return null;
}",0.8225108225108225
86713,"public static synchronized void destroy(){
  if (soundSystem != null) {
    for (    Sound sound : loadedSounds.values()) {
      sound.destroy();
    }
    loadedSounds.clear();
    soundSystem.removeTemporarySources();
    try {
      Thread.sleep(500);
    }
 catch (    InterruptedException e) {
    }
    try {
      soundSystem.cleanup();
    }
 catch (    Exception e) {
    }
  }
}","public static synchronized void destroy(){
  if (soundSystem != null) {
    for (    SoundBuffer sound : loadedSounds.values()) {
      sound.destroy();
    }
    loadedSounds.clear();
    soundSystem.removeTemporarySources();
    try {
      Thread.sleep(500);
    }
 catch (    InterruptedException e) {
    }
    try {
      soundSystem.cleanup();
    }
 catch (    Exception e) {
    }
  }
}",0.9923469387755102
86714,"private static Sound[] createChannel(){
  return new Sound[]{loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),null,null,loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str"")};
}","private static Sound[] createChannel(){
  return new Sound[]{loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),null,null,loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str"")};
}",0.9835582265562988
86715,"public static Sound playSound(SoundType type,float x,float y){
  Sound sound=null;
switch (type) {
case EMPTY_FIRE:
    sound=playFreeSound(emptyFireSnd,x,y);
  break;
case THOMPSON_FIRE:
sound=playFreeSound(thompsonFire,x,y);
break;
case THOMPSON_RELOAD:
sound=playFreeSound(thompsonReload,x,y);
break;
case EXPLOSION:
sound=playFreeSound(explodeSnd,x,y);
break;
case RPG_FIRE:
sound=playFreeSound(rocketFire,x,y);
break;
case GRENADE_PINPULLED:
sound=playFreeSound(grenadePinPulled,x,y);
break;
case GRENADE_THROW:
sound=playFreeSound(grenadeThrow,x,y);
break;
case SHOTGUN_FIRE:
sound=playFreeSound(shotgunFire,x,y);
break;
case SHOTGUN_RELOAD:
sound=playFreeSound(shotgunReload,x,y);
break;
case SHOTGUN_PUMP:
sound=playFreeSound(shotgunPump,x,y);
break;
case SPRINGFIELD_FIRE:
sound=playFreeSound(springfieldFire,x,y);
break;
case SPRINGFIELD_RECHAMBER:
sound=playFreeSound(springfieldRechamber,x,y);
break;
case SPRINGFIELD_RELOAD:
sound=playFreeSound(springfieldReload,x,y);
break;
case RISKER_FIRE:
sound=playFreeSound(riskerFire,x,y);
break;
case RISKER_RECHAMBER:
sound=playFreeSound(riskerRechamber,x,y);
break;
case RISKER_RELOAD:
sound=playFreeSound(riskerReload,x,y);
break;
case M1_GARAND_FIRE:
sound=playFreeSound(m1Fire,x,y);
break;
case M1_GARAND_LAST_FIRE:
sound=playFreeSound(m1FireLast,x,y);
break;
case M1_GARAND_RELOAD:
sound=playFreeSound(m1Reload,x,y);
break;
case KAR98_FIRE:
sound=playFreeSound(kar98Fire,x,y);
break;
case KAR98_RECHAMBER:
sound=playFreeSound(kar98Rechamber,x,y);
break;
case KAR98_RELOAD:
sound=playFreeSound(kar98Reload,x,y);
break;
case MP44_FIRE:
sound=playFreeSound(mp44Fire,x,y);
break;
case MP44_RELOAD:
sound=playFreeSound(mp44Reload,x,y);
break;
case MP40_FIRE:
sound=playFreeSound(mp40Fire,x,y);
break;
case MP40_RELOAD:
sound=playFreeSound(mp40Reload,x,y);
break;
case SURFACE_GRASS:
sound=playFreeSound(grassWalk,x,y);
break;
case SURFACE_METAL:
sound=playFreeSound(metalWalk,x,y);
break;
case SURFACE_NORMAL:
sound=playFreeSound(normalWalk,x,y);
break;
case SURFACE_WATER:
sound=playFreeSound(waterWalk,x,y);
break;
case SURFACE_WOOD:
sound=playFreeSound(woodWalk,x,y);
break;
case SURFACE_DIRT:
sound=playFreeSound(dirtWalk,x,y);
break;
case SURFACE_SAND:
sound=playFreeSound(dirtWalk,x,y);
break;
case WEAPON_SWITCH:
sound=playFreeSound(weaponSwitch,x,y);
break;
case RUFFLE:
sound=playFreeSound(ruffle,x,y);
break;
case BOMB_TICK:
sound=playFreeSound(bombTick,x,y);
break;
case BOMB_PLANT:
sound=playFreeSound(bombPlant,x,y);
break;
case BOMB_DISARM:
sound=playFreeSound(bombDisarm,x,y);
break;
case WEAPON_DROPPED:
sound=playFreeSound(weaponDrop,x,y);
break;
case WEAPON_PICKUP:
sound=playFreeSound(weaponPickupSnd,x,y);
break;
case AMMO_PICKUP:
sound=playFreeSound(ammoPickupSnd,x,y);
break;
case MELEE_SWING:
sound=playFreeSound(meleeSwing,x,y);
break;
case MELEE_HIT:
sound=playFreeSound(meleeHit,x,y);
break;
case PISTOL_FIRE:
sound=playFreeSound(pistolFire,x,y);
break;
case PISTOL_RELOAD:
sound=playFreeSound(pistolReload,x,y);
break;
case UI_ELEMENT_HOVER:
sound=playFreeSound(uiHover,x,y);
break;
case UI_ELEMENT_SELECT:
sound=playFreeSound(uiSelect,x,y);
break;
case UI_NAVIGATE:
sound=playFreeSound(uiNavigate,x,y);
break;
case UI_KEY_TYPE:
sound=playFreeSound(uiKeyType,x,y);
break;
case IMPACT_METAL:
sound=playFreeSound(impactMetal,x,y);
break;
case IMPACT_DEFAULT:
sound=playFreeSound(impactDefault,x,y);
break;
case IMPACT_FOLIAGE:
sound=playFreeSound(impactFoliage,x,y);
break;
case IMPACT_WOOD:
sound=playFreeSound(impactWood,x,y);
break;
case TANK_ON:
sound=playFreeSound(tankOn,x,y);
break;
case TANK_OFF:
sound=playFreeSound(tankOff,x,y);
break;
case TANK_REV_UP:
sound=playFreeSound(tankRevUp,x,y);
break;
case TANK_REV_DOWN:
sound=playFreeSound(tankRevDown,x,y);
break;
case TANK_IDLE:
sound=playFreeSound(tankIdle,x,y);
break;
case TANK_SHIFT:
sound=playFreeSound(tankShift,x,y);
break;
case TANK_TURRET_MOVE:
sound=playFreeSound(tankTurret,x,y);
break;
case TANK_MOVE:
sound=playFreeSound(tankMove,x,y);
break;
case BREATH_HEAVY:
sound=playFreeSound(breadthHeavy,x,y);
break;
case BREATH_LITE:
sound=playFreeSound(breadthLite,x,y);
break;
case HEALTH_PACK_PICKUP:
sound=playFreeSound(healthPackPickup,x,y);
break;
case MUTE:
default :
break;
}
return sound;
}","public static Sound playSound(SoundType type,float x,float y){
  Sound sound=null;
  float footStepDamp=0.35f;
switch (type) {
case EMPTY_FIRE:
    sound=playFreeSound(emptyFireSnd,x,y);
  break;
case THOMPSON_FIRE:
sound=playFreeSound(thompsonFire,x,y);
break;
case THOMPSON_RELOAD:
sound=playFreeSound(thompsonReload,x,y);
break;
case EXPLOSION:
sound=playFreeSound(explodeSnd,x,y);
break;
case RPG_FIRE:
sound=playFreeSound(rocketFire,x,y);
break;
case GRENADE_PINPULLED:
sound=playFreeSound(grenadePinPulled,x,y);
break;
case GRENADE_THROW:
sound=playFreeSound(grenadeThrow,x,y);
break;
case SHOTGUN_FIRE:
sound=playFreeSound(shotgunFire,x,y);
break;
case SHOTGUN_RELOAD:
sound=playFreeSound(shotgunReload,x,y);
break;
case SHOTGUN_PUMP:
sound=playFreeSound(shotgunPump,x,y);
break;
case SPRINGFIELD_FIRE:
sound=playFreeSound(springfieldFire,x,y);
break;
case SPRINGFIELD_RECHAMBER:
sound=playFreeSound(springfieldRechamber,x,y);
break;
case SPRINGFIELD_RELOAD:
sound=playFreeSound(springfieldReload,x,y);
break;
case RISKER_FIRE:
sound=playFreeSound(riskerFire,x,y);
break;
case RISKER_RECHAMBER:
sound=playFreeSound(riskerRechamber,x,y);
break;
case RISKER_RELOAD:
sound=playFreeSound(riskerReload,x,y);
break;
case M1_GARAND_FIRE:
sound=playFreeSound(m1Fire,x,y);
break;
case M1_GARAND_LAST_FIRE:
sound=playFreeSound(m1FireLast,x,y);
break;
case M1_GARAND_RELOAD:
sound=playFreeSound(m1Reload,x,y);
break;
case KAR98_FIRE:
sound=playFreeSound(kar98Fire,x,y);
break;
case KAR98_RECHAMBER:
sound=playFreeSound(kar98Rechamber,x,y);
break;
case KAR98_RELOAD:
sound=playFreeSound(kar98Reload,x,y);
break;
case MP44_FIRE:
sound=playFreeSound(mp44Fire,x,y);
break;
case MP44_RELOAD:
sound=playFreeSound(mp44Reload,x,y);
break;
case MP40_FIRE:
sound=playFreeSound(mp40Fire,x,y);
break;
case MP40_RELOAD:
sound=playFreeSound(mp40Reload,x,y);
break;
case SURFACE_GRASS:
sound=playFreeSound(grassWalk,x,y,footStepDamp);
break;
case SURFACE_METAL:
sound=playFreeSound(metalWalk,x,y,footStepDamp);
break;
case SURFACE_NORMAL:
sound=playFreeSound(normalWalk,x,y,footStepDamp);
break;
case SURFACE_WATER:
sound=playFreeSound(waterWalk,x,y,footStepDamp);
break;
case SURFACE_WOOD:
sound=playFreeSound(woodWalk,x,y,footStepDamp);
break;
case SURFACE_DIRT:
sound=playFreeSound(dirtWalk,x,y,footStepDamp);
break;
case SURFACE_SAND:
sound=playFreeSound(dirtWalk,x,y,footStepDamp);
break;
case WEAPON_SWITCH:
sound=playFreeSound(weaponSwitch,x,y);
break;
case RUFFLE:
sound=playFreeSound(ruffle,x,y);
break;
case BOMB_TICK:
sound=playFreeSound(bombTick,x,y);
break;
case BOMB_PLANT:
sound=playFreeSound(bombPlant,x,y);
break;
case BOMB_DISARM:
sound=playFreeSound(bombDisarm,x,y);
break;
case WEAPON_DROPPED:
sound=playFreeSound(weaponDrop,x,y);
break;
case WEAPON_PICKUP:
sound=playFreeSound(weaponPickupSnd,x,y);
break;
case AMMO_PICKUP:
sound=playFreeSound(ammoPickupSnd,x,y);
break;
case MELEE_SWING:
sound=playFreeSound(meleeSwing,x,y);
break;
case MELEE_HIT:
sound=playFreeSound(meleeHit,x,y);
break;
case PISTOL_FIRE:
sound=playFreeSound(pistolFire,x,y);
break;
case PISTOL_RELOAD:
sound=playFreeSound(pistolReload,x,y);
break;
case UI_ELEMENT_HOVER:
sound=playFreeSound(uiHover,x,y);
break;
case UI_ELEMENT_SELECT:
sound=playFreeSound(uiSelect,x,y);
break;
case UI_NAVIGATE:
sound=playFreeSound(uiNavigate,x,y);
break;
case UI_KEY_TYPE:
sound=playFreeSound(uiKeyType,x,y);
break;
case IMPACT_METAL:
sound=playFreeSound(impactMetal,x,y);
break;
case IMPACT_DEFAULT:
sound=playFreeSound(impactDefault,x,y);
break;
case IMPACT_FOLIAGE:
sound=playFreeSound(impactFoliage,x,y);
break;
case IMPACT_WOOD:
sound=playFreeSound(impactWood,x,y);
break;
case TANK_ON:
sound=playFreeSound(tankOn,x,y);
break;
case TANK_OFF:
sound=playFreeSound(tankOff,x,y);
break;
case TANK_REV_UP:
sound=playFreeSound(tankRevUp,x,y);
break;
case TANK_REV_DOWN:
sound=playFreeSound(tankRevDown,x,y);
break;
case TANK_IDLE:
sound=playFreeSound(tankIdle,x,y);
break;
case TANK_SHIFT:
sound=playFreeSound(tankShift,x,y);
break;
case TANK_TURRET_MOVE:
sound=playFreeSound(tankTurret,x,y);
break;
case TANK_MOVE:
sound=playFreeSound(tankMove,x,y);
break;
case BREATH_HEAVY:
sound=playFreeSound(breadthHeavy,x,y);
break;
case BREATH_LITE:
sound=playFreeSound(breadthLite,x,y);
break;
case HEALTH_PACK_PICKUP:
sound=playFreeSound(healthPackPickup,x,y);
break;
case ENEMY_FLAG_CAPTURED:
sound=playFreeSound(enemyFlagCaptured,x,y);
break;
case ENEMY_FLAG_STOLEN:
sound=playFreeSound(enemyFlagStolen,x,y);
break;
case FLAG_CAPTURED:
sound=playFreeSound(flagCaptured,x,y);
break;
case FLAG_RETURNED:
sound=playFreeSound(flagReturned,x,y);
break;
case FLAG_STOLEN:
sound=playFreeSound(flagStolen,x,y);
break;
case MUTE:
default :
break;
}
return sound;
}",0.9482739358730868
86716,"/** 
 * Plays the sound right next to the sound listener so it is always audible.
 * @param soundBank
 * @return the {@link Sound}
 */
public static Sound playGlobalSound(int[] soundBank){
  float x=0;
  float y=0;
  if (soundSystem != null) {
    ListenerData data=soundSystem.getListenerData();
    x=data.position.x;
    y=data.position.y;
  }
  return playSound(soundBank,uiChannel,x,y);
}","/** 
 * Plays the sound right next to the sound listener so it is always audible.
 * @param soundBank
 * @return the {@link Sound}
 */
public static Sound playGlobalSound(int[] soundBank){
  float x=0;
  float y=0;
  if (soundSystem != null) {
    ListenerData data=soundSystem.getListenerData();
    x=data.position.x;
    y=data.position.y;
  }
  return playFreeSound(soundBank,x,y);
}",0.9794871794871794
86717,"public static Sound playFreeSound(int[] soundBank,float x,float y){
  int index=random.nextInt(soundBank.length);
  int soundIndex=soundBank[index];
  Sound snd=findFreeSound(soundIndex);
  if (snd != null) {
    snd.reset();
    snd.setVolume(volume);
    snd.play(x,y);
  }
  return snd;
}","public static Sound playFreeSound(int[] soundBank,float x,float y,float damp){
  int index=random.nextInt(soundBank.length);
  int soundIndex=soundBank[index];
  Sound snd=findFreeSound(soundIndex);
  if (snd != null) {
    snd.setVolume(volume * damp);
    snd.play(x,y);
  }
  return snd;
}",0.9399656946826758
86718,"public static Sound findFreeSound(int soundIndex){
  for (int i=0; i < channels.length; i++) {
    Sound[] sounds=channels[i];
    Sound sound=sounds[soundIndex];
    if (!sound.isPlaying())     return sound;
  }
  return null;
}","public static Sound findFreeSound(int soundIndex){
  for (int i=0; i < channels.length; i++) {
    Sound[] sounds=channels[i];
    Sound sound=sounds[soundIndex];
    if (!sound.isPlaying()) {
      return sound;
    }
  }
  System.out.println(""String_Node_Str"");
  return null;
}",0.7779960707269156
86719,"/** 
 * @param position
 */
public SquadAttackAction(Vector2f position){
  this.attackPosition=position;
}","/** 
 * @param position
 */
public SquadAttackAction(Vector2f position){
  this.attackPosition=position;
  this.attackDirections=new ArrayList<>();
}",0.8313725490196079
86720,"@Override public void start(Squad squad){
  World world=squad.getWorld();
  this.attackDirections=world.getAttackDirections(attackPosition,150f,squad.squadSize());
  if (attackDirections.isEmpty()) {
    attackDirections.add(new AttackDirection(attackPosition));
  }
}","@Override public void start(Squad squad){
  World world=squad.getWorld();
  this.attackDirections.addAll(world.getAttackDirections(attackPosition,150f,squad.squadSize()));
  if (attackDirections.isEmpty()) {
    attackDirections.add(new AttackDirection(attackPosition));
  }
}",0.9816176470588236
86721,"/** 
 * @param position
 */
public SquadDefendAction(Vector2f position){
  this.defendPosition=position;
}","/** 
 * @param position
 */
public SquadDefendAction(Vector2f position){
  this.defendPosition=position;
  this.directionsToDefend=new ArrayList<>();
}",0.8249027237354085
86722,"@Override public void start(Squad squad){
  World world=squad.getWorld();
  float radius=(float)world.getRandom().getRandomRange(100f,150f);
  directionsToDefend=world.getAttackDirections(this.defendPosition,radius,12);
}","@Override public void start(Squad squad){
  World world=squad.getWorld();
  float radius=(float)world.getRandom().getRandomRange(100f,150f);
  directionsToDefend.addAll(world.getAttackDirections(this.defendPosition,radius,12));
}",0.9777777777777776
86723,"@Override public Action getAction(Squad squad){
  if (squad.squadSize() > 0) {
    World world=squad.getWorld();
    Brain[] members=squad.getMembers();
    Roles roles=squad.getRoles();
    int squadSize=squad.squadSize();
    if (!directionsToDefend.isEmpty() && squadSize > 0) {
      int increment=1;
      if (directionsToDefend.size() > squadSize) {
        increment=directionsToDefend.size() / squadSize;
      }
      int i=0;
      for (int j=0; j < members.length; j++) {
        Brain member=members[j];
        if (member != null) {
{
            AttackDirection dir=directionsToDefend.get((i+=increment) % directionsToDefend.size());
            Vector2f position=new Vector2f(dir.getDirection());
            return (world.getGoals().guard(position));
          }
        }
      }
    }
  }
  return new WaitAction(500);
}","@Override public Action getAction(Squad squad){
  if (squad.squadSize() > 0) {
    World world=squad.getWorld();
    Brain[] members=squad.getMembers();
    int squadSize=squad.squadSize();
    if (!directionsToDefend.isEmpty() && squadSize > 0) {
      int increment=1;
      if (directionsToDefend.size() > squadSize) {
        increment=directionsToDefend.size() / squadSize;
      }
      int i=0;
      for (int j=0; j < members.length; j++) {
        Brain member=members[j];
        if (member != null) {
{
            AttackDirection dir=directionsToDefend.get((i+=increment) % directionsToDefend.size());
            Vector2f position=new Vector2f(dir.getDirection());
            return (world.getGoals().guard(position));
          }
        }
      }
    }
  }
  return new WaitAction(500);
}",0.979293544457978
86724,"@Override public void start(Brain brain){
  List<AttackDirection> attackDirs=brain.getWorld().getAttackDirections(brain.getEntityOwner());
  this.getActionResult().setSuccess(attackDirs);
}","@Override public void start(Brain brain){
  List<AttackDirection> attackDirs=new ArrayList<>(brain.getWorld().getAttackDirections(brain.getEntityOwner()));
  this.getActionResult().setSuccess(attackDirs);
}",0.9569620253164556
86725,"public void drop(){
  if (isBeingCarried()) {
    Vector2f flagPos=new Vector2f(this.carriedBy.getFacing());
    Vector2f.Vector2fMA(this.carriedBy.getCenterPos(),flagPos,40,flagPos);
    if (game.getMap().pointCollides((int)flagPos.x,(int)flagPos.y)) {
      flagPos=this.carriedBy.getCenterPos();
    }
    this.pos.set(flagPos);
    this.bounds.centerAround(this.pos);
    this.carriedBy.dropFlag();
    game.emitSound(getId(),SoundType.WEAPON_DROPPED,flagPos);
    this.resetTimer.reset();
    this.resetTimer.start();
  }
  this.carriedBy=null;
}","public void drop(){
  if (isBeingCarried()) {
    Vector2f flagPos=new Vector2f(this.carriedBy.getFacing());
    Vector2f.Vector2fMA(this.carriedBy.getCenterPos(),flagPos,40,flagPos);
    if (game.getMap().pointCollides((int)flagPos.x,(int)flagPos.y)) {
      flagPos.set(this.carriedBy.getCenterPos());
    }
    this.pos.set(flagPos);
    this.bounds.centerAround(this.pos);
    this.carriedBy.dropFlag();
    game.emitSound(getId(),SoundType.WEAPON_DROPPED,flagPos);
    this.resetTimer.reset();
    this.resetTimer.start();
  }
  this.carriedBy=null;
}",0.993676603432701
86726,"@Override public void update(TimeStep timeStep){
  Vector2f.Vector2fCopy(this.pos,previousPos);
  if (this.updateReceived) {
    previousLastUpdate=lastUpdate;
    lastUpdate=timeStep.getGameClock();
    updateReceived=false;
  }
  interpolate(timeStep);
  if (onUpdate != null) {
    onUpdate.onUpdate(timeStep,this);
  }
}","@Override public void update(TimeStep timeStep){
  Vector2f.Vector2fCopy(this.pos,previousPos);
  if (attachedSounds != null) {
    updateSounds(attachedSounds);
  }
  if (this.updateReceived) {
    previousLastUpdate=lastUpdate;
    lastUpdate=timeStep.getGameClock();
    updateReceived=false;
  }
  interpolate(timeStep);
  if (onUpdate != null) {
    onUpdate.onUpdate(timeStep,this);
  }
}",0.9025069637883008
86727,"/** 
 * Reset's this object so that it can be reused  again by the engine.
 */
public void reset(){
  this.isDestroyed=false;
  this.isAlive=true;
  this.previousPos.zeroOut();
  this.renderPos.zeroOut();
  this.pos.zeroOut();
  this.facing.zeroOut();
  this.centerPos.zeroOut();
  this.movementDir.zeroOut();
  this.bounds.setLocation(this.pos);
}","/** 
 * Reset's this object so that it can be reused  again by the engine.
 */
public void reset(){
  this.isDestroyed=false;
  this.isAlive=true;
  this.previousPos.zeroOut();
  this.renderPos.zeroOut();
  this.pos.zeroOut();
  this.facing.zeroOut();
  this.centerPos.zeroOut();
  this.movementDir.zeroOut();
  this.bounds.setLocation(this.pos);
  if (this.attachedSounds != null) {
    for (int i=0; i < this.attachedSounds.length; i++) {
      this.attachedSounds[i]=null;
    }
  }
}",0.8335329341317366
86728,"public void applyGameUpdate(GameUpdateMessage msg){
  NetGameUpdate netUpdate=msg.netUpdate;
  gameClock=netUpdate.time;
  if (netUpdate.entities != null) {
    int size=netUpdate.entities.length;
    for (int i=0; i < size; i++) {
      NetEntity netEnt=netUpdate.entities[i];
      if (netEnt != null) {
        if (entities.containsEntity(netEnt.id)) {
          ClientEntity ent=entities.getEntity(netEnt.id);
          if (Type.fromNet(netEnt.type) == ent.getType()) {
            ent.updateState(netEnt,gameClock);
          }
 else {
            removeEntity(i);
            createEntity(netEnt);
          }
        }
 else {
          createEntity(netEnt);
        }
      }
 else {
        if (i < SeventhConstants.MAX_PERSISTANT_ENTITIES) {
          if (netUpdate.deadPersistantEntities.getBit(i)) {
            removeEntity(i);
          }
        }
 else {
          removeEntity(i);
        }
      }
    }
  }
  if (netUpdate.sounds != null) {
    int size=netUpdate.numberOfSounds;
    for (int i=0; i < size; i++) {
      NetSound snd=netUpdate.sounds[i];
      if (snd != null) {
        Sounds.playSound(snd,snd.posX,snd.posY);
      }
    }
  }
  if (netUpdate.spectatingPlayerId > -1 && !cameraController.isCameraRoaming()) {
    int previousSpec=localPlayer.getSpectatingPlayerId();
    localPlayer.setSpectatingPlayerId(netUpdate.spectatingPlayerId);
    if (previousSpec != netUpdate.spectatingPlayerId) {
      ClientEntity ent=this.entities.getEntity(netUpdate.spectatingPlayerId);
      if (ent != null) {
        camera.centerAroundNow(ent.getCenterPos());
      }
    }
  }
 else {
    localPlayer.setSpectatingPlayerId(Entity.INVALID_ENTITY_ID);
  }
}","public void applyGameUpdate(GameUpdateMessage msg){
  NetGameUpdate netUpdate=msg.netUpdate;
  gameClock=netUpdate.time;
  if (netUpdate.entities != null) {
    int size=netUpdate.entities.length;
    for (int i=0; i < size; i++) {
      NetEntity netEnt=netUpdate.entities[i];
      if (netEnt != null) {
        if (entities.containsEntity(netEnt.id)) {
          ClientEntity ent=entities.getEntity(netEnt.id);
          if (Type.fromNet(netEnt.type) == ent.getType()) {
            ent.updateState(netEnt,gameClock);
          }
 else {
            removeEntity(i);
            createEntity(netEnt);
          }
        }
 else {
          createEntity(netEnt);
        }
      }
 else {
        if (i < SeventhConstants.MAX_PERSISTANT_ENTITIES) {
          if (netUpdate.deadPersistantEntities.getBit(i)) {
            removeEntity(i);
          }
        }
 else {
          removeEntity(i);
        }
      }
    }
  }
  if (netUpdate.sounds != null) {
    int size=netUpdate.numberOfSounds;
    for (int i=0; i < size; i++) {
      NetSound snd=netUpdate.sounds[i];
      if (snd != null) {
switch (snd.getSoundType().getSourceType()) {
case POSITIONAL:
{
            Sounds.playSound(snd,snd.posX,snd.posY);
            break;
          }
case REFERENCED:
{
          NetSoundByEntity soundByEntity=(NetSoundByEntity)snd;
          if (soundByEntity.hasPositionalInformation()) {
            Sounds.playSound(snd,snd.posX,snd.posY);
          }
 else {
            ClientEntity entity=this.entities.getEntity(soundByEntity.entityId);
            if (entity != null) {
              Vector2f pos=entity.getCenterPos();
              if (entity.getId() == this.localPlayer.getViewingEntityId()) {
switch (snd.getSoundType()) {
case SURFACE_DIRT:
case SURFACE_GRASS:
case SURFACE_METAL:
case SURFACE_NORMAL:
case SURFACE_SAND:
case SURFACE_WATER:
case SURFACE_WOOD:
                  Sounds.playSound(snd,pos.x,pos.y,0.35f);
                break;
default :
              Sounds.playSound(snd,pos.x,pos.y);
          }
        }
 else {
          Sounds.playSound(snd,pos.x,pos.y);
        }
      }
    }
    break;
  }
case REFERENCED_ATTACHED:
{
  NetSoundByEntity soundByEntity=(NetSoundByEntity)snd;
  if (soundByEntity.hasPositionalInformation()) {
    Sounds.playSound(snd,snd.posX,snd.posY);
  }
 else {
    ClientEntity entity=this.entities.getEntity(soundByEntity.entityId);
    if (entity != null) {
      Vector2f pos=entity.getCenterPos();
      entity.attachSound(Sounds.playSound(snd,pos.x,pos.y));
    }
  }
  break;
}
case GLOBAL:
Sounds.playGlobalSound(snd);
break;
}
}
}
}
if (netUpdate.spectatingPlayerId > -1 && !cameraController.isCameraRoaming()) {
int previousSpec=localPlayer.getSpectatingPlayerId();
localPlayer.setSpectatingPlayerId(netUpdate.spectatingPlayerId);
if (previousSpec != netUpdate.spectatingPlayerId) {
ClientEntity ent=this.entities.getEntity(netUpdate.spectatingPlayerId);
if (ent != null) {
camera.centerAroundNow(ent.getCenterPos());
}
}
}
 else {
localPlayer.setSpectatingPlayerId(Entity.INVALID_ENTITY_ID);
}
}",0.6749578414839797
86729,"/** 
 * @return true if the flag is at its home base
 */
public boolean isAtHomeBase(){
  return Vector2f.Vector2fEquals(this.pos,getSpawnLocation());
}","/** 
 * @return true if the flag is at its home base
 */
public boolean isAtHomeBase(){
  return Vector2f.Vector2fApproxEquals(this.pos,getSpawnLocation());
}",0.9806451612903224
86730,"public void addDroppedPacket(int numberOfPackets){
  this.numberOfDroppedPackets+=numberOfDroppedPackets;
}","public void addDroppedPacket(int numberOfPackets){
  this.numberOfDroppedPackets+=numberOfPackets;
}",0.966183574879227
86731,"/** 
 * Gets a subImage.
 * @param image
 * @param x
 * @param y
 * @param width
 * @param height
 * @return
 */
public static TextureRegion subImage(TextureRegion image,int x,int y,int width,int height){
  return new TextureRegion(image,x,y,width,height);
}","/** 
 * Gets a subImage.
 * @param image
 * @param x
 * @param y
 * @param width
 * @param height
 * @return
 */
public static TextureRegion subImage(TextureRegion image,int x,int y,int width,int height){
  return new TextureRegion(image.getTexture(),x,y,width,height);
}",0.9754253308128544
86732,"/** 
 * Setups server side console commands
 * @param console
 */
private void setupServerCommands(Console console){
  CommonCommands.addCommonCommands(console);
  final ServerSeventhConfig config=serverContext.getConfig();
  final MapCycle mapCycle=serverContext.getMapCycle();
  console.addCommand(mapCycle.getMapListCommand());
  console.addCommand(mapCycle.getMapAddCommand());
  console.addCommand(mapCycle.getMapRemoveCommand());
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      serverContext.spawnGameSession(mergeArgsDelim(""String_Node_Str"",args));
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      serverContext.spawnGameSession(mapCycle.getNextMap());
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      serverContext.spawnGameSession(serverContext.getMapCycle().getCurrentMap());
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      try {
        serverContext.getRuntime().eval(new File(args[0]));
      }
 catch (      Exception e) {
        Cons.println(""String_Node_Str"" + mergeArgsDelim(""String_Node_Str"",args) + ""String_Node_Str""+ e);
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      ServerSeventhConfig config=serverContext.getConfig();
      if (args == null || args.length < 1) {
        console.println(""String_Node_Str"" + config.getPrivatePassword());
      }
 else {
        config.setPrivatePassword(args[0]);
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      Game game=serverContext.getGameSession().getGame();
      if (game != null) {
        if (args.length < 1) {
          console.println(""String_Node_Str"");
        }
 else {
          int id=serverContext.getServer().reserveId();
          if (id >= 0) {
            game.addBot(id,args[0]);
          }
          if (args.length > 1) {
            String team=args[1].trim().toLowerCase();
            if (team.startsWith(Team.ALLIED_TEAM_NAME.toLowerCase())) {
              game.playerSwitchedTeam(id,Team.ALLIED_TEAM_ID);
            }
 else             if (team.startsWith(Team.AXIS_TEAM_NAME.toLowerCase())) {
              game.playerSwitchedTeam(id,Team.AXIS_TEAM_ID);
            }
          }
          console.println(""String_Node_Str"" + id);
        }
      }
 else {
        console.println(""String_Node_Str"");
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      Game game=serverContext.getGameSession().getGame();
      if (game != null) {
        int id=serverContext.getServer().reserveId();
        if (id >= 0) {
          game.addDummyBot(id);
        }
        console.println(""String_Node_Str"" + id);
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      Game game=serverContext.getGameSession().getGame();
      if (game != null) {
switch (args.length) {
case 0:
          console.println(""String_Node_Str"");
        break;
default :
{
        int id=Integer.parseInt(args[0]);
        console.println(""String_Node_Str"" + id);
        game.kickPlayer(id);
      }
  }
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(Console console,String... args){
GameInfo game=serverContext.getGameSession().getGame();
if (game != null) {
switch (args.length) {
case 0:
    console.println(""String_Node_Str"");
  break;
default :
{
  int id=Integer.parseInt(args[0]);
  PlayerInfo player=game.getPlayerById(id);
  if (player != null && !player.isDead()) {
    player.getEntity().kill(player.getEntity());
  }
}
}
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(final Console console,String... args){
GameInfo game=serverContext.getGameSession().getGame();
if (game != null) {
PlayerInfos players=game.getPlayerInfos();
console.println(""String_Node_Str"");
console.println(""String_Node_Str"");
players.forEachPlayerInfo(new PlayerInfoIterator(){
@Override public void onPlayerInfo(PlayerInfo p){
console.printf(""String_Node_Str"",p.getName(),p.getId(),p.getPing());
}
}
);
console.println(""String_Node_Str"");
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(final Console console,String... args){
Game game=serverContext.getGameSession().getGame();
if (game != null) {
final DateFormat format=new SimpleDateFormat(""String_Node_Str"");
format.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
console.println(""String_Node_Str"");
Players players=game.getPlayers();
console.println(""String_Node_Str"");
console.println(""String_Node_Str"");
players.forEachPlayerInfo(new PlayerInfoIterator(){
@Override public void onPlayerInfo(PlayerInfo p){
console.printf(""String_Node_Str"",p.getName(),p.getKills(),p.getDeaths(),format.format(new Date(p.getJoinTime())),p.getTeam().getName());
}
}
);
console.println(""String_Node_Str"");
console.println(""String_Node_Str"");
console.println(""String_Node_Str"");
NetGameStats stats=game.getNetGameStats();
if (stats.teamStats != null) {
for (int i=0; i < stats.teamStats.length; i++) {
console.printf(""String_Node_Str"",Team.getName(stats.teamStats[i].id),stats.teamStats[i].id,stats.teamStats[i].score);
}
}
console.println(""String_Node_Str"");
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(Console console,String... args){
console.println(""String_Node_Str"");
shutdown();
console.println(""String_Node_Str"");
System.exit(0);
}
}
);
if (console.getCommand(""String_Node_Str"") == null) {
console.addCommand(""String_Node_Str"",console.getCommand(""String_Node_Str""));
console.addCommand(""String_Node_Str"",console.getCommand(""String_Node_Str""));
}
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(Console console,String... args){
switch (args.length) {
case 0:
console.println(""String_Node_Str"");
break;
case 1:
console.println(args[0] + ""String_Node_Str"" + config.getConfig().get(args[0]));
break;
default :
{
config.getConfig().set(mergeArgsDelimAt(""String_Node_Str"",1,args),args[0]);
}
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(Console console,String... args){
switch (args.length) {
case 0:
console.println(""String_Node_Str"");
break;
case 1:
console.println(args[0] + ""String_Node_Str"" + config.getConfig().get(args[0]));
break;
default :
{
try {
config.getConfig().set(Integer.parseInt(args[1]),args[0]);
}
 catch (Exception e) {
console.println(""String_Node_Str"");
}
}
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(Console console,String... args){
if (getServerContext().hasGameSession()) {
GameSession session=getServerContext().getGameSession();
Game game=session.getGame();
if (game != null) {
switch (args.length) {
case 2:
try {
int x=Integer.parseInt(args[0]);
int y=Integer.parseInt(args[1]);
game.newTank(x,y);
}
 catch (Exception e) {
console.println(""String_Node_Str"" + e);
}
break;
default :
{
console.println(""String_Node_Str"");
}
}
}
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(Console console,String... args){
if (getServerContext().hasGameSession()) {
GameSession session=getServerContext().getGameSession();
Game game=session.getGame();
if (game != null) {
switch (args.length) {
case 0:
console.println(""String_Node_Str"");
break;
case 1:
console.execute(""String_Node_Str"" + args[0]);
break;
case 2:
console.execute(""String_Node_Str"" + args[0]);
console.execute(""String_Node_Str"" + args[1]);
break;
case 3:
console.execute(""String_Node_Str"" + args[0]);
console.execute(""String_Node_Str"" + args[1]);
console.execute(""String_Node_Str"" + args[2]);
break;
default :
{
console.println(""String_Node_Str"");
}
}
}
}
}
}
);
}","/** 
 * Setups server side console commands
 * @param console
 */
private void setupServerCommands(Console console){
  CommonCommands.addCommonCommands(console);
  final ServerSeventhConfig config=serverContext.getConfig();
  final MapCycle mapCycle=serverContext.getMapCycle();
  console.addCommand(mapCycle.getMapListCommand());
  console.addCommand(mapCycle.getMapAddCommand());
  console.addCommand(mapCycle.getMapRemoveCommand());
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      serverContext.spawnGameSession(mergeArgsDelim(""String_Node_Str"",args));
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      serverContext.spawnGameSession(mapCycle.getNextMap());
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      serverContext.spawnGameSession(serverContext.getMapCycle().getCurrentMap());
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      try {
        serverContext.getRuntime().eval(new File(args[0]));
      }
 catch (      Exception e) {
        Cons.println(""String_Node_Str"" + mergeArgsDelim(""String_Node_Str"",args) + ""String_Node_Str""+ e);
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      ServerSeventhConfig config=serverContext.getConfig();
      if (args == null || args.length < 1) {
        console.println(""String_Node_Str"" + config.getPrivatePassword());
      }
 else {
        config.setPrivatePassword(args[0]);
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      Game game=serverContext.getGameSession().getGame();
      if (game != null) {
        if (args.length < 1) {
          console.println(""String_Node_Str"");
        }
 else {
          int id=serverContext.getServer().reserveId();
          if (id >= 0) {
            game.addBot(id,args[0]);
          }
          if (args.length > 1) {
            String team=args[1].trim().toLowerCase();
            if (team.startsWith(Team.ALLIED_TEAM_NAME.toLowerCase())) {
              game.playerSwitchedTeam(id,Team.ALLIED_TEAM_ID);
            }
 else             if (team.startsWith(Team.AXIS_TEAM_NAME.toLowerCase())) {
              game.playerSwitchedTeam(id,Team.AXIS_TEAM_ID);
            }
          }
          console.println(""String_Node_Str"" + id);
        }
      }
 else {
        console.println(""String_Node_Str"");
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      Game game=serverContext.getGameSession().getGame();
      if (game != null) {
        int id=serverContext.getServer().reserveId();
        if (id >= 0) {
          game.addDummyBot(id);
        }
        console.println(""String_Node_Str"" + id);
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      Game game=serverContext.getGameSession().getGame();
      if (game != null) {
switch (args.length) {
case 0:
          console.println(""String_Node_Str"");
        break;
default :
{
        int id=Integer.parseInt(args[0]);
        console.println(""String_Node_Str"" + id);
        game.kickPlayer(id);
      }
  }
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(Console console,String... args){
GameInfo game=serverContext.getGameSession().getGame();
if (game != null) {
switch (args.length) {
case 0:
    console.println(""String_Node_Str"");
  break;
default :
{
  int id=Integer.parseInt(args[0]);
  PlayerInfo player=game.getPlayerById(id);
  if (player != null && !player.isDead()) {
    player.getEntity().kill(player.getEntity());
  }
}
}
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(final Console console,String... args){
GameInfo game=serverContext.getGameSession().getGame();
if (game != null) {
PlayerInfos players=game.getPlayerInfos();
console.println(""String_Node_Str"");
console.println(""String_Node_Str"");
players.forEachPlayerInfo(new PlayerInfoIterator(){
@Override public void onPlayerInfo(PlayerInfo p){
console.printf(""String_Node_Str"",p.getName(),p.getId(),p.getPing());
}
}
);
console.println(""String_Node_Str"");
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(final Console console,String... args){
Game game=serverContext.getGameSession().getGame();
if (game != null) {
final DateFormat format=new SimpleDateFormat(""String_Node_Str"");
format.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
console.println(""String_Node_Str"");
Players players=game.getPlayers();
console.println(""String_Node_Str"");
console.println(""String_Node_Str"");
players.forEachPlayerInfo(new PlayerInfoIterator(){
@Override public void onPlayerInfo(PlayerInfo p){
console.printf(""String_Node_Str"",p.getName(),p.getKills(),p.getDeaths(),format.format(new Date(p.getJoinTime())),p.getTeam().getName());
}
}
);
console.println(""String_Node_Str"");
console.println(""String_Node_Str"");
console.println(""String_Node_Str"");
NetGameStats stats=game.getNetGameStats();
if (stats.teamStats != null) {
for (int i=0; i < stats.teamStats.length; i++) {
console.printf(""String_Node_Str"",Team.getName(stats.teamStats[i].id),stats.teamStats[i].id,stats.teamStats[i].score);
}
}
console.println(""String_Node_Str"");
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(Console console,String... args){
console.println(""String_Node_Str"");
shutdown();
console.println(""String_Node_Str"");
System.exit(0);
}
}
);
if (console.getCommand(""String_Node_Str"") == null) {
console.addCommand(""String_Node_Str"",console.getCommand(""String_Node_Str""));
console.addCommand(""String_Node_Str"",console.getCommand(""String_Node_Str""));
}
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(Console console,String... args){
switch (args.length) {
case 0:
console.println(""String_Node_Str"");
break;
default :
console.println(args[0] + ""String_Node_Str"" + config.getConfig().get(args[0]));
break;
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(Console console,String... args){
switch (args.length) {
case 0:
console.println(""String_Node_Str"");
break;
case 1:
console.println(args[0] + ""String_Node_Str"" + config.getConfig().get(args[0]));
break;
default :
{
config.getConfig().set(mergeArgsDelimAt(""String_Node_Str"",1,args),args[0]);
}
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(Console console,String... args){
switch (args.length) {
case 0:
console.println(""String_Node_Str"");
break;
case 1:
console.println(args[0] + ""String_Node_Str"" + config.getConfig().get(args[0]));
break;
default :
{
try {
config.getConfig().set(Integer.parseInt(args[1]),args[0]);
}
 catch (Exception e) {
console.println(""String_Node_Str"");
}
}
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(Console console,String... args){
if (getServerContext().hasGameSession()) {
GameSession session=getServerContext().getGameSession();
Game game=session.getGame();
if (game != null) {
switch (args.length) {
case 2:
try {
int x=Integer.parseInt(args[0]);
int y=Integer.parseInt(args[1]);
game.newTank(x,y);
}
 catch (Exception e) {
console.println(""String_Node_Str"" + e);
}
break;
default :
{
console.println(""String_Node_Str"");
}
}
}
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(Console console,String... args){
if (getServerContext().hasGameSession()) {
GameSession session=getServerContext().getGameSession();
Game game=session.getGame();
if (game != null) {
switch (args.length) {
case 0:
console.println(""String_Node_Str"");
break;
case 1:
console.execute(""String_Node_Str"" + args[0]);
break;
case 2:
console.execute(""String_Node_Str"" + args[0]);
console.execute(""String_Node_Str"" + args[1]);
break;
case 3:
console.execute(""String_Node_Str"" + args[0]);
console.execute(""String_Node_Str"" + args[1]);
console.execute(""String_Node_Str"" + args[2]);
break;
default :
{
console.println(""String_Node_Str"");
}
}
}
}
}
}
);
}",0.9818203422053232
86733,"/** 
 * Loads a game type
 * @param mapFile
 * @param script
 * @return the {@link GameType}
 * @throws Exception
 */
private GameType loadGameType(String mapFile,AbstractGameTypeScript script) throws Exception {
  ServerSeventhConfig config=this.serverContext.getConfig();
  int maxKills=config.getMaxScore();
  long matchTime=config.getMatchTime();
  return script.loadGameType(mapFile,maxKills,matchTime);
}","/** 
 * Loads a game type
 * @param mapFile
 * @param script
 * @return the {@link GameType}
 * @throws Exception
 */
private GameType loadGameType(String mapFile,AbstractGameTypeScript script) throws Exception {
  ServerSeventhConfig config=this.serverContext.getConfig();
  int maxKills=config.getMaxScore();
  long matchTime=config.getMatchTime() * 60L * 1000L;
  return script.loadGameType(mapFile,maxKills,matchTime);
}",0.9832134292565948
86734,"/** 
 * @return the match time -- the max amount of time a match should last
 */
public long getMatchTime(){
  return this.config.getInt(20,""String_Node_Str"") * 60 * 1000L;
}","/** 
 * @return the match time -- the max amount of time a match should last
 */
public long getMatchTime(){
  return this.config.getInt(20,""String_Node_Str"");
}",0.9611940298507464
86735,"@Override public void updateState(NetEntity state,long time){
  super.updateState(state,time);
  NetTank netTank=(NetTank)state;
  this.currentState=State.fromNetValue(netTank.state);
  this.orientation=(float)Math.toRadians(netTank.orientation);
  this.turretOrientation=(float)Math.toRadians(netTank.turretOrientation);
  this.turretFacing.set(1,0);
  Vector2f.Vector2fRotate(this.turretFacing,this.turretOrientation,this.turretFacing);
  this.facing.set(this.turretFacing);
  this.primaryWeaponState=Weapon.State.fromNet(netTank.primaryWeaponState);
  this.secondaryWeaponState=Weapon.State.fromNet(netTank.secondaryWeaponState);
  Vector2f center=new Vector2f(getPos());
  center.x+=WeaponConstants.TANK_AABB_WIDTH / 2f;
  center.y+=WeaponConstants.TANK_AABB_HEIGHT / 2f;
  this.vehicleOOB.update(orientation,center);
  if (netTank.operatorId > 0) {
    ClientPlayer clientPlayer=game.getPlayers().getPlayer(netTank.operatorId);
    if (clientPlayer != null) {
      setOperator(clientPlayer.getEntity());
    }
  }
 else {
    setOperator(null);
  }
  if (prevState != null && nextState != null) {
    if (prevState.posX != nextState.posX || prevState.posY != nextState.posY) {
      float distanceSq=(nextState.posX - previousTrackMark.x) * (nextState.posX - previousTrackMark.x) + (nextState.posY - previousTrackMark.y) * (nextState.posY - previousTrackMark.y);
      if (distanceSq > 12 * 12) {
        previousTrackMark.set(nextState.posX,nextState.posY);
        trackMarkOffset.set(10,-15);
        Vector2f.Vector2fRotate(trackMarkOffset,vehicleOOB.orientation,trackMarkOffset);
        Vector2f.Vector2fAdd(vehicleOOB.topLeft,trackMarkOffset,trackMarkOffset);
        this.effects.addTankTrackMark(getId(),this.trackMarkOffset,this.orientation);
        trackMarkOffset.set(10,15);
        Vector2f.Vector2fRotate(trackMarkOffset,vehicleOOB.orientation,trackMarkOffset);
        Vector2f.Vector2fAdd(vehicleOOB.bottomLeft,trackMarkOffset,trackMarkOffset);
        this.effects.addTankTrackMark(getId(),trackMarkOffset,this.orientation);
      }
    }
  }
}","@Override public void updateState(NetEntity state,long time){
  super.updateState(state,time);
  NetTank netTank=(NetTank)state;
  this.currentState=State.fromNetValue(netTank.state);
  this.orientation=(float)Math.toRadians(netTank.orientation);
  this.turretOrientation=(float)Math.toRadians(netTank.turretOrientation);
  this.turretFacing.set(1,0);
  Vector2f.Vector2fRotate(this.turretFacing,this.turretOrientation,this.turretFacing);
  this.facing.set(this.turretFacing);
  this.primaryWeaponState=Weapon.State.fromNet(netTank.primaryWeaponState);
  this.secondaryWeaponState=Weapon.State.fromNet(netTank.secondaryWeaponState);
  Vector2f center=new Vector2f(getPos());
  center.x+=WeaponConstants.TANK_AABB_WIDTH / 2f;
  center.y+=WeaponConstants.TANK_AABB_HEIGHT / 2f;
  this.vehicleOOB.update(orientation,center);
  if (netTank.operatorId != SeventhConstants.INVALID_PLAYER_ID) {
    ClientPlayer clientPlayer=game.getPlayers().getPlayer(netTank.operatorId);
    if (clientPlayer != null) {
      setOperator(clientPlayer.getEntity());
    }
  }
 else {
    setOperator(null);
  }
  if (prevState != null && nextState != null) {
    if (prevState.posX != nextState.posX || prevState.posY != nextState.posY) {
      float distanceSq=(nextState.posX - previousTrackMark.x) * (nextState.posX - previousTrackMark.x) + (nextState.posY - previousTrackMark.y) * (nextState.posY - previousTrackMark.y);
      if (distanceSq > 12 * 12) {
        previousTrackMark.set(nextState.posX,nextState.posY);
        trackMarkOffset.set(10,-15);
        Vector2f.Vector2fRotate(trackMarkOffset,vehicleOOB.orientation,trackMarkOffset);
        Vector2f.Vector2fAdd(vehicleOOB.topLeft,trackMarkOffset,trackMarkOffset);
        this.effects.addTankTrackMark(getId(),this.trackMarkOffset,this.orientation);
        trackMarkOffset.set(10,15);
        Vector2f.Vector2fRotate(trackMarkOffset,vehicleOOB.orientation,trackMarkOffset);
        Vector2f.Vector2fAdd(vehicleOOB.bottomLeft,trackMarkOffset,trackMarkOffset);
        this.effects.addTankTrackMark(getId(),trackMarkOffset,this.orientation);
      }
    }
  }
}",0.9904122722914668
86736,"/** 
 * @param type the type of tank
 */
public NetTank(Type type){
  this.type=type.netValue();
}","/** 
 * @param type the type of tank
 */
public NetTank(Type type){
  this.type=type.netValue();
  this.operatorId=SeventhConstants.INVALID_PLAYER_ID;
}",0.784
86737,"@Override public NetEntity getNetEntity(){
  super.setNetEntity(netTank);
  netTank.state=getCurrentState().netValue();
  netTank.operatorId=hasOperator() ? this.getOperator().getId() : 0;
  netTank.turretOrientation=(short)Math.toDegrees(turretOrientation);
  netTank.primaryWeaponState=primaryWeapon.getState().netValue();
  netTank.secondaryWeaponState=secondaryWeapon.getState().netValue();
  return netTank;
}","@Override public NetEntity getNetEntity(){
  super.setNetEntity(netTank);
  netTank.state=getCurrentState().netValue();
  netTank.operatorId=hasOperator() ? this.getOperator().getId() : SeventhConstants.INVALID_PLAYER_ID;
  netTank.turretOrientation=(short)Math.toDegrees(turretOrientation);
  netTank.primaryWeaponState=primaryWeapon.getState().netValue();
  netTank.secondaryWeaponState=secondaryWeapon.getState().netValue();
  return netTank;
}",0.959349593495935
86738,"/** 
 * @param dir
 * @throws IOException
 */
public FileSystemAssetWatcher(File dir) throws IOException {
  FileSystem fileSystem=FileSystems.getDefault();
  this.isActive=new AtomicBoolean(false);
  this.watchedAssets=new ConcurrentHashMap<File,WatchedAsset<?>>();
  this.pathToWatch=dir.toPath();
  this.watchService=fileSystem.newWatchService();
  this.watchThread=new Thread(new Runnable(){
    @SuppressWarnings(""String_Node_Str"") @Override public void run(){
      while (isActive.get()) {
        try {
          WatchKey key=watchService.take();
          if (key.isValid()) {
            List<WatchEvent<?>> events=key.pollEvents();
            for (int i=0; i < events.size(); i++) {
              WatchEvent<?> event=events.get(i);
              WatchEvent.Kind<?> kind=event.kind();
              if (kind == StandardWatchEventKinds.OVERFLOW) {
                continue;
              }
              WatchEvent<Path> ev=(WatchEvent<Path>)event;
              Path filename=ev.context();
              WatchedAsset<?> watchedAsset=watchedAssets.get(new File(pathToWatch.toFile(),filename.toString()));
              if (watchedAsset != null) {
                try {
                  watchedAsset.onAssetChanged();
                }
 catch (                IOException e) {
                  e.printStackTrace();
                }
              }
            }
          }
          key.reset();
        }
 catch (        InterruptedException e) {
          break;
        }
      }
    }
  }
,""String_Node_Str"");
  this.watchThread.setDaemon(true);
  this.pathToWatch.register(watchService,StandardWatchEventKinds.ENTRY_MODIFY);
}","/** 
 * @param dir
 * @throws IOException
 */
public FileSystemAssetWatcher(File dir) throws IOException {
  FileSystem fileSystem=FileSystems.getDefault();
  this.isActive=new AtomicBoolean(false);
  this.watchedAssets=new ConcurrentHashMap<File,WatchedAsset<?>>();
  this.pathToWatch=dir.toPath();
  this.watchService=fileSystem.newWatchService();
  this.watchThread=new Thread(new Runnable(){
    @SuppressWarnings(""String_Node_Str"") @Override public void run(){
      while (isActive.get()) {
        try {
          WatchKey key=watchService.take();
          if (key.isValid()) {
            List<WatchEvent<?>> events=key.pollEvents();
            for (int i=0; i < events.size(); i++) {
              WatchEvent<?> event=events.get(i);
              WatchEvent.Kind<?> kind=event.kind();
              if (kind == StandardWatchEventKinds.OVERFLOW) {
                continue;
              }
              WatchEvent<Path> ev=(WatchEvent<Path>)event;
              Path filename=ev.context();
              WatchedAsset<?> watchedAsset=watchedAssets.get(new File(pathToWatch.toFile(),filename.toString()));
              if (watchedAsset != null) {
                try {
                  watchedAsset.onAssetChanged();
                }
 catch (                IOException e) {
                  e.printStackTrace();
                }
              }
            }
          }
          key.reset();
        }
 catch (        ClosedWatchServiceException e) {
          break;
        }
catch (        InterruptedException e) {
          break;
        }
      }
    }
  }
,""String_Node_Str"");
  this.watchThread.setDaemon(true);
  this.pathToWatch.register(watchService,StandardWatchEventKinds.ENTRY_MODIFY);
}",0.9776984834968778
86739,"@SuppressWarnings(""String_Node_Str"") @Override public void run(){
  while (isActive.get()) {
    try {
      WatchKey key=watchService.take();
      if (key.isValid()) {
        List<WatchEvent<?>> events=key.pollEvents();
        for (int i=0; i < events.size(); i++) {
          WatchEvent<?> event=events.get(i);
          WatchEvent.Kind<?> kind=event.kind();
          if (kind == StandardWatchEventKinds.OVERFLOW) {
            continue;
          }
          WatchEvent<Path> ev=(WatchEvent<Path>)event;
          Path filename=ev.context();
          WatchedAsset<?> watchedAsset=watchedAssets.get(new File(pathToWatch.toFile(),filename.toString()));
          if (watchedAsset != null) {
            try {
              watchedAsset.onAssetChanged();
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
          }
        }
      }
      key.reset();
    }
 catch (    InterruptedException e) {
      break;
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(){
  while (isActive.get()) {
    try {
      WatchKey key=watchService.take();
      if (key.isValid()) {
        List<WatchEvent<?>> events=key.pollEvents();
        for (int i=0; i < events.size(); i++) {
          WatchEvent<?> event=events.get(i);
          WatchEvent.Kind<?> kind=event.kind();
          if (kind == StandardWatchEventKinds.OVERFLOW) {
            continue;
          }
          WatchEvent<Path> ev=(WatchEvent<Path>)event;
          Path filename=ev.context();
          WatchedAsset<?> watchedAsset=watchedAssets.get(new File(pathToWatch.toFile(),filename.toString()));
          if (watchedAsset != null) {
            try {
              watchedAsset.onAssetChanged();
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
          }
        }
      }
      key.reset();
    }
 catch (    ClosedWatchServiceException e) {
      break;
    }
catch (    InterruptedException e) {
      break;
    }
  }
}",0.9687654933068914
86740,"/** 
 */
public InGameScreen(final SeventhGame app,final ClientGame game){
  this.app=app;
  this.connection=app.getClientConnection();
  this.game=game;
  this.inputMessage=new PlayerInputMessage();
  this.keyMap=app.getKeyMap();
  this.isDebugMode=false;
  this.debugEffects=new Effects();
  this.cursor=app.getUiManager().getCursor();
  List<AIShortcut> commands=new ArrayList<AIShortcut>();
  commands.add(new FollowMeAIShortcut(Keys.P));
  commands.add(new SurpressFireAIShortcut(Keys.O));
  commands.add(new MoveToAIShortcut(Keys.I));
  commands.add(new PlantBombAIShortcut(Keys.J));
  commands.add(new DefuseBombAIShortcut(Keys.K));
  commands.add(new DefendPlantedBombAIShortcut(Keys.L));
  commands.add(new TakeCoverAIShortcut(Keys.U));
  this.aiShortcuts=new AIShortcuts(commands);
  this.aiShortcutsMenu=new AIShortcutsMenu(keyMap,aiShortcuts);
  createUI();
  this.controllerInput=new JoystickGameController();
  Controllers.addListener(this.controllerInput);
}","/** 
 */
public InGameScreen(final SeventhGame app,final ClientGame game){
  this.app=app;
  this.connection=app.getClientConnection();
  this.game=game;
  this.inputMessage=new PlayerInputMessage();
  this.keyMap=app.getKeyMap();
  this.isDebugMode=false;
  this.debugEffects=new Effects();
  this.cursor=app.getUiManager().getCursor();
  List<AIShortcut> commands=new ArrayList<AIShortcut>();
  commands.add(new FollowMeAIShortcut(Keys.P));
  commands.add(new SurpressFireAIShortcut(Keys.O));
  commands.add(new MoveToAIShortcut(Keys.I));
  commands.add(new PlantBombAIShortcut(Keys.J));
  commands.add(new DefuseBombAIShortcut(Keys.K));
  commands.add(new DefendPlantedBombAIShortcut(Keys.L));
  commands.add(new TakeCoverAIShortcut(Keys.U));
  this.aiShortcuts=new AIShortcuts(commands);
  this.aiShortcutsMenu=new AIShortcutsMenu(keyMap,aiShortcuts);
  createUI();
  this.controllerInput=new JoystickGameController();
}",0.974169741697417
86741,"@Override public void enter(){
  if (this.game != null) {
    this.game.onReloadVideo();
  }
  final ClientProtocol protocol=connection.getClientProtocol();
  Console console=app.getConsole();
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      if (args.length > 1) {
        AICommandMessage msg=new AICommandMessage();
        msg.botId=Integer.parseInt(args[0]);
        msg.command=new AICommand(this.mergeArgsDelimAt(""String_Node_Str"",1,args));
        protocol.sendAICommandMessage(msg);
      }
 else {
        console.println(""String_Node_Str"");
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      connection.disconnect();
      app.goToMenuScreen();
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      TextMessage msg=new TextMessage();
      msg.message=mergeArgsDelim(""String_Node_Str"",args);
      msg.playerId=game.getLocalPlayer().getId();
      protocol.sendTextMessage(msg);
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      TeamTextMessage msg=new TeamTextMessage();
      msg.message=mergeArgsDelim(""String_Node_Str"",args);
      msg.playerId=game.getLocalPlayer().getId();
      protocol.sendTeamTextMessage(msg);
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      if (args.length < 1) {
        console.println(""String_Node_Str"");
      }
 else {
        PlayerSpeechMessage msg=new PlayerSpeechMessage();
        ClientPlayer player=game.getLocalPlayer();
        if (player.isAlive()) {
          msg.playerId=player.getId();
          ClientPlayerEntity entity=player.getEntity();
          if (entity != null) {
            Vector2f pos=entity.getCenterPos();
            msg.posX=(short)pos.x;
            msg.posY=(short)pos.y;
            msg.speechCommand=Byte.parseByte(args[0]);
            Sounds.playSpeechSound(player.getTeam().getId(),msg.speechCommand,pos.x,pos.y);
            protocol.sendPlayerSpeechMessage(msg);
          }
        }
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      if (args.length < 1) {
        console.println(""String_Node_Str"");
      }
 else {
        PlayerSwitchTeamMessage msg=new PlayerSwitchTeamMessage();
        msg.playerId=game.getLocalPlayer().getId();
        String team=args[0];
        if (team.toLowerCase().equals(""String_Node_Str"")) {
          msg.teamId=(byte)ClientTeam.ALLIES.getId();
        }
 else         if (team.toLowerCase().equals(""String_Node_Str"")) {
          msg.teamId=(byte)ClientTeam.AXIS.getId();
        }
 else {
          msg.teamId=(byte)ClientTeam.NONE.getId();
        }
        protocol.sendPlayerSwitchTeamMessage(msg);
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      if (args.length > 0) {
        String msg=null;
        if (args[0].equals(""String_Node_Str"")) {
          if (args.length > 1) {
            RconHash hash=new RconHash(game.getLocalSession().getRconToken());
            msg=""String_Node_Str"" + hash.hash(mergeArgsDelimAt(""String_Node_Str"",1,args).trim());
          }
 else {
            console.println(""String_Node_Str"");
          }
        }
 else {
          msg=this.mergeArgsDelim(""String_Node_Str"",args);
        }
        if (msg != null) {
          protocol.sendRconMessage(new RconMessage(msg));
        }
      }
    }
  }
);
}","@Override public void enter(){
  if (this.game != null) {
    this.game.onReloadVideo();
  }
  Controllers.addListener(this.controllerInput);
  final ClientProtocol protocol=connection.getClientProtocol();
  Console console=app.getConsole();
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      if (args.length > 1) {
        AICommandMessage msg=new AICommandMessage();
        msg.botId=Integer.parseInt(args[0]);
        msg.command=new AICommand(this.mergeArgsDelimAt(""String_Node_Str"",1,args));
        protocol.sendAICommandMessage(msg);
      }
 else {
        console.println(""String_Node_Str"");
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      connection.disconnect();
      app.goToMenuScreen();
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      TextMessage msg=new TextMessage();
      msg.message=mergeArgsDelim(""String_Node_Str"",args);
      msg.playerId=game.getLocalPlayer().getId();
      protocol.sendTextMessage(msg);
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      TeamTextMessage msg=new TeamTextMessage();
      msg.message=mergeArgsDelim(""String_Node_Str"",args);
      msg.playerId=game.getLocalPlayer().getId();
      protocol.sendTeamTextMessage(msg);
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      if (args.length < 1) {
        console.println(""String_Node_Str"");
      }
 else {
        PlayerSpeechMessage msg=new PlayerSpeechMessage();
        ClientPlayer player=game.getLocalPlayer();
        if (player.isAlive()) {
          msg.playerId=player.getId();
          ClientPlayerEntity entity=player.getEntity();
          if (entity != null) {
            Vector2f pos=entity.getCenterPos();
            msg.posX=(short)pos.x;
            msg.posY=(short)pos.y;
            msg.speechCommand=Byte.parseByte(args[0]);
            Sounds.playSpeechSound(player.getTeam().getId(),msg.speechCommand,pos.x,pos.y);
            protocol.sendPlayerSpeechMessage(msg);
          }
        }
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      if (args.length < 1) {
        console.println(""String_Node_Str"");
      }
 else {
        PlayerSwitchTeamMessage msg=new PlayerSwitchTeamMessage();
        msg.playerId=game.getLocalPlayer().getId();
        String team=args[0];
        if (team.toLowerCase().equals(""String_Node_Str"")) {
          msg.teamId=(byte)ClientTeam.ALLIES.getId();
        }
 else         if (team.toLowerCase().equals(""String_Node_Str"")) {
          msg.teamId=(byte)ClientTeam.AXIS.getId();
        }
 else {
          msg.teamId=(byte)ClientTeam.NONE.getId();
        }
        protocol.sendPlayerSwitchTeamMessage(msg);
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      if (args.length > 0) {
        String msg=null;
        if (args[0].equals(""String_Node_Str"")) {
          if (args.length > 1) {
            RconHash hash=new RconHash(game.getLocalSession().getRconToken());
            msg=""String_Node_Str"" + hash.hash(mergeArgsDelimAt(""String_Node_Str"",1,args).trim());
          }
 else {
            console.println(""String_Node_Str"");
          }
        }
 else {
          msg=this.mergeArgsDelim(""String_Node_Str"",args);
        }
        if (msg != null) {
          protocol.sendRconMessage(new RconMessage(msg));
        }
      }
    }
  }
);
}",0.9936798658583774
86742,"public void roundEnded(RoundEndedMessage msg){
  this.roundEnded=true;
  applyGameStats(msg.stats);
  scoreboard.setWinner(ClientTeam.fromId(msg.winnerTeamId));
  showScoreBoard(true);
}","public void roundEnded(RoundEndedMessage msg){
  this.roundEnded=true;
  applyGameStats(msg.stats);
  scoreboard.setWinner(ClientTeam.fromId(msg.winnerTeamId));
  showScoreBoard(true);
  executeCallbackScript(""String_Node_Str"",this);
}",0.8836104513064132
86743,"/** 
 * Cleans up resources
 */
public void destroy(){
  this.pools.destroy();
  this.entities.clear();
  this.bombTargets.clear();
  this.vehicles.clear();
  this.gameEffects.destroy();
}","/** 
 * Cleans up resources
 */
public void destroy(){
  this.pools.destroy();
  this.entities.clear();
  this.bombTargets.clear();
  this.vehicles.clear();
  this.gameEffects.destroy();
  this.gameTimers.removeTimers();
}",0.9170731707317074
86744,"public void roundStarted(RoundStartedMessage msg){
  gameEffects.clearEffects();
  this.roundEnded=false;
  scoreboard.setGameEnded(false);
  scoreboard.setWinner(null);
  this.hud.getMessageLog().clearLogs();
  showScoreBoard(false);
  applyFullGameState(msg.gameState);
}","public void roundStarted(RoundStartedMessage msg){
  gameEffects.clearEffects();
  this.roundEnded=false;
  scoreboard.setGameEnded(false);
  scoreboard.setWinner(null);
  this.hud.getMessageLog().clearLogs();
  showScoreBoard(false);
  applyFullGameState(msg.gameState);
  executeCallbackScript(""String_Node_Str"",this);
}",0.9176470588235294
86745,"/** 
 * Renders the game world
 * @param canvas
 */
public void render(Canvas canvas,float alpha){
  boolean renderMethod1=false;
  if (renderMethod1) {
    canvas.fboBegin();
{
      gameEffects.preRenderFrameBuffer(canvas,camera,alpha);
      gameEffects.postRenderFrameBuffer(canvas,camera,alpha);
      canvas.setShader(null);
      renderWorld(canvas,camera,alpha);
    }
    canvas.fboEnd();
    canvas.setShader(null);
    gameEffects.renderFrameBuffer(canvas,camera,alpha);
    canvas.setShader(null);
    DebugDraw.enable(false);
    DebugDraw.render(canvas,camera);
    hud.render(canvas,camera,alpha);
  }
 else {
    canvas.fboBegin();
{
      gameEffects.preRenderFrameBuffer(canvas,camera,alpha);
    }
    canvas.fboEnd();
    gameEffects.postRenderFrameBuffer(canvas,camera,alpha);
    renderWorld(canvas,camera,alpha);
    canvas.setShader(null);
    DebugDraw.enable(false);
    DebugDraw.render(canvas,camera);
    hud.render(canvas,camera,alpha);
  }
}","/** 
 * Renders the game world
 * @param canvas
 */
public void render(Canvas canvas,float alpha){
  boolean renderMethod1=false;
  if (renderMethod1) {
    canvas.fboBegin();
{
      gameEffects.preRenderFrameBuffer(canvas,camera,alpha);
      gameEffects.postRenderFrameBuffer(canvas,camera,alpha);
      canvas.setShader(null);
      renderWorld(canvas,camera,alpha);
    }
    canvas.fboEnd();
    canvas.setShader(null);
    gameEffects.renderFrameBuffer(canvas,camera,alpha);
    canvas.setShader(null);
    DebugDraw.enable(false);
    DebugDraw.render(canvas,camera);
    hud.render(canvas,camera,alpha);
  }
 else {
    canvas.fboBegin();
{
      gameEffects.preRenderFrameBuffer(canvas,camera,alpha);
    }
    canvas.fboEnd();
    gameEffects.postRenderFrameBuffer(canvas,camera,alpha);
    renderWorld(canvas,camera,alpha);
    canvas.setShader(null);
    DebugDraw.enable(true);
    DebugDraw.render(canvas,camera);
    hud.render(canvas,camera,alpha);
  }
}",0.9963973237261966
86746,"/** 
 * @param app
 * @param players
 * @param map
 * @param session
 * @throws Exception
 */
public ClientGame(SeventhGame app,ClientPlayers players,Map map,LocalSession session) throws Exception {
  this.app=app;
  this.players=players;
  this.map=map;
  this.localSession=session;
  this.scoreboard=new Scoreboard(this);
  this.localPlayer=players.getPlayer(session.getSessionPlayerId());
  this.entities=new ClientEntities(SeventhConstants.MAX_ENTITIES);
  this.renderingOrderEntities=new ClientEntity[SeventhConstants.MAX_ENTITIES];
  this.bombTargets=new ArrayList<ClientBombTarget>();
  this.vehicles=new ArrayList<ClientVehicle>();
  this.camera=newCamera(map.getMapWidth(),map.getMapHeight());
  this.cameraController=new CameraController(this);
  this.gameTimers=new Timers(SeventhConstants.MAX_TIMERS);
  this.hud=new Hud(this);
  this.random=new Random();
  this.gameType=GameType.Type.TDM;
  this.cacheRect=new Rectangle();
  this.gameEffects=new ClientGameEffects();
  this.entityListener=this.gameEffects.getLightSystem().getClientEntityListener();
  this.pools=new Pools(this);
  this.zings=new Zings(this);
}","/** 
 * @param app
 * @param players
 * @param map
 * @param session
 * @throws Exception
 */
public ClientGame(SeventhGame app,ClientPlayers players,Map map,LocalSession session) throws Exception {
  this.app=app;
  this.players=players;
  this.map=map;
  this.localSession=session;
  this.scoreboard=new Scoreboard(this);
  this.localPlayer=players.getPlayer(session.getSessionPlayerId());
  this.entities=new ClientEntities(SeventhConstants.MAX_ENTITIES);
  this.renderingOrderEntities=new ClientEntity[SeventhConstants.MAX_ENTITIES];
  this.bombTargets=new ArrayList<ClientBombTarget>();
  this.vehicles=new ArrayList<ClientVehicle>();
  this.camera=newCamera(map.getMapWidth(),map.getMapHeight());
  this.cameraController=new CameraController(this);
  this.gameTimers=new Timers(SeventhConstants.MAX_TIMERS);
  this.hud=new Hud(this);
  this.random=new Random();
  this.gameType=GameType.Type.TDM;
  this.cacheRect=new Rectangle();
  this.gameEffects=new ClientGameEffects();
  this.entityListener=this.gameEffects.getLightSystem().getClientEntityListener();
  this.pools=new Pools(this);
  this.zings=new Zings(this);
  this.runtime=Scripting.newSandboxedRuntime();
}",0.97911227154047
86747,"/** 
 * Load the client maps properties file
 * @param mapFile
 * @param game
 */
private void loadMapProperties(String mapFile){
  File propertiesFile=new File(mapFile + ""String_Node_Str"");
  if (propertiesFile.exists()) {
    try {
      Leola runtime=Scripting.newSandboxedRuntime();
      runtime.loadStatics(SeventhScriptingCommonLibrary.class);
      runtime.put(""String_Node_Str"",this);
      runtime.eval(propertiesFile);
    }
 catch (    Exception e) {
      Cons.println(""String_Node_Str"" + propertiesFile.getName() + ""String_Node_Str""+ e);
    }
  }
}","/** 
 * Load the client maps properties file
 * @param mapFile
 * @param game
 */
private void loadMapProperties(String mapFile){
  File propertiesFile=new File(mapFile + ""String_Node_Str"");
  if (propertiesFile.exists()) {
    try {
      runtime.loadStatics(SeventhScriptingCommonLibrary.class);
      runtime.put(""String_Node_Str"",this);
      runtime.eval(propertiesFile);
    }
 catch (    Exception e) {
      Cons.println(""String_Node_Str"" + propertiesFile.getName() + ""String_Node_Str""+ e);
    }
  }
}",0.9506057781919852
86748,"/** 
 * @return the local host name
 */
public String getAddress(){
  try {
    return InetAddress.getLocalHost().getHostName();
  }
 catch (  UnknownHostException e) {
    Cons.println(""String_Node_Str"" + e);
    return ""String_Node_Str"";
  }
}","/** 
 * @return the local host name
 */
public String getAddress(){
  try {
    return InetAddress.getLocalHost().getHostAddress();
  }
 catch (  UnknownHostException e) {
    Cons.println(""String_Node_Str"" + e);
    return ""String_Node_Str"";
  }
}",0.977687626774848
86749,"/** 
 * destroys the game, cleans up resources
 */
public void destroy(){
  for (int i=0; i < this.entities.length; i++) {
    this.entities[i]=null;
    this.deadFrames[i]=0;
  }
  for (int i=0; i < this.playerEntities.length; i++) {
    this.playerEntities[i]=null;
  }
  this.bombTargets.clear();
  this.vehicles.clear();
  this.players.resetStats();
  this.aiSystem.destroy();
  this.dispatcher.removeAllEventListeners();
}","/** 
 * destroys the game, cleans up resources
 */
public void destroy(){
  for (int i=0; i < this.entities.length; i++) {
    this.entities[i]=null;
    this.deadFrames[i]=0;
  }
  for (int i=0; i < this.playerEntities.length; i++) {
    this.playerEntities[i]=null;
  }
  this.bombTargets.clear();
  this.vehicles.clear();
  this.players.resetStats();
  this.aiSystem.destroy();
  this.gameTimers.removeTimers();
  this.dispatcher.removeAllEventListeners();
}",0.9617117117117115
86750,"/** 
 * @param serverContext
 * @param gameSessionListener
 * @param mapFile
 */
public LoadingState(ServerContext serverContext,GameSessionListener gameSessionListener,String mapFile){
  this.serverContext=serverContext;
  this.gameSessionListener=gameSessionListener;
  this.mapFile=mapFile;
  this.runtime=serverContext.getRuntime();
  this.gameSession=null;
}","/** 
 * @param serverContext
 * @param gameSessionListener
 * @param mapFile
 */
public LoadingState(ServerContext serverContext,GameSessionListener gameSessionListener,String mapFile){
  this.serverContext=serverContext;
  this.gameSessionListener=gameSessionListener;
  this.mapFile=mapFile;
  this.runtime=serverContext.newRuntime();
  this.gameSession=null;
}",0.9917355371900828
86751,"@Override public void update(TimeStep timeStep){
  super.update(timeStep);
  alpha.update(timeStep);
  ease.update(timeStep);
  double dt=timeStep.asFraction();
  int newX=(int)Math.round(pos.x + vel.x * speed * dt);
  int newY=(int)Math.round(pos.y + vel.y * speed * dt);
  speed=getRandom().nextInt(maxSpeed);
  pos.x=newX;
  pos.y=newY;
}","@Override public void update(TimeStep timeStep){
  super.update(timeStep);
  alpha.update(timeStep);
  ease.update(timeStep);
  double dt=timeStep.asFraction();
  int newX=(int)Math.round(pos.x + vel.x * speed * dt);
  int newY=(int)Math.round(pos.y + vel.y * speed * dt);
  speed=getRandom().nextInt(maxSpeed);
  setPos(newX,newY);
}",0.9629629629629628
86752,"@Override public void update(TimeStep timeStep){
  adjustments.poll();
  effects.update(timeStep);
  xOffset=yOffset=0;
  float weaponWeight=1.0f;
  ClientWeapon weapon=entity.getWeapon();
  if (weapon != null) {
    weaponWeight=100.0f - weapon.getWeaponWeight();
    weaponWeight*=0.01f;
  }
  activeBodyPosition=idleBody;
  activeLegsAnimation=idleLegsAnimation;
  Vector2f dir=entity.getFacing();
  State currentState=entity.getCurrentState();
switch (currentState) {
case IDLE:
    activeBodyPosition=idleBody;
  activeLegsAnimation=idleLegsAnimation;
resetLegMovements();
break;
case CROUCHING:
activeBodyPosition=crouchBody;
activeLegsAnimation=crouchingLegsAnimation;
resetLegMovements();
break;
case WALKING:
{
activeBodyPosition=walkBody;
activeLegsAnimation=walkLegsAnimation;
bobMotion.set(5,0.6);
swayMotion.set(0,0);
swayMotion.set(4,1.55 * weaponWeight);
xOffset+=(dir.y * swayMotion.direction) * 0.815f;
yOffset+=(dir.x * swayMotion.direction) * 0.815f;
}
break;
case RUNNING:
{
activeBodyPosition=runBody;
activeLegsAnimation=runLegsAnimation;
bobMotion.set(12 * weaponWeight,2.4 * weaponWeight);
swayMotion.set(4,2.5 * weaponWeight);
xOffset+=(dir.y * swayMotion.direction) * .755f;
yOffset+=(dir.x * swayMotion.direction) * .755f;
}
break;
case SPRINTING:
activeBodyPosition=sprintBody;
activeLegsAnimation=sprintLegsAnimation;
bobMotion.set(0,0);
swayMotion.set(4,3.25 * weaponWeight);
xOffset+=(dir.y * swayMotion.direction) * 1.25f;
yOffset+=(dir.x * swayMotion.direction) * 1.25f;
break;
case DEAD:
resetLegMovements();
break;
default :
resetLegMovements();
}
bobMotion.update(timeStep);
swayMotion.update(timeStep);
if (weapon != null) {
this.isReloading=weapon.getState() == seventh.game.weapons.Weapon.State.RELOADING;
this.isSwitching=weapon.getState() == seventh.game.weapons.Weapon.State.SWITCHING;
this.isMelee=weapon.getState() == seventh.game.weapons.Weapon.State.MELEE_ATTACK;
this.isFiring=weapon.getState() == seventh.game.weapons.Weapon.State.FIRING;
if (this.isReloading) {
this.activeBodyPosition=reloadBody;
}
 else if (this.isMelee) {
this.activeBodyPosition=meleeBody;
}
 else if (this.isSwitching) {
this.activeBodyPosition=switchWeaponBody;
}
if (weapon instanceof ClientRocketLauncher && !this.isMelee) {
activeBodyPosition=crouchBody;
}
AnimatedImage muzzleAnim=weapon.getMuzzleFlash();
if (muzzleAnim != null) {
muzzleAnim.update(timeStep);
}
}
if (this.isFiring) {
this.flashTime-=timeStep.getDeltaTime();
if (this.flashTime <= 0) {
boolean cycleFlash=weapon != null && weapon.isAutomatic();
if (cycleFlash) {
this.showFlash=!this.showFlash;
this.flashTime=90;
}
 else {
if (toggleFlash) {
this.showFlash=true;
this.flashTime=90;
toggleFlash=false;
}
 else {
this.showFlash=false;
}
}
}
}
 else {
this.showFlash=false;
this.toggleFlash=true;
this.flashTime=90;
}
if (entity.isAlive() && (entity.getLastUpdate() + 500) > timeStep.getGameClock()) {
entity.getMussleFlash().setOn(showFlash);
}
 else {
entity.getMussleFlash().setOn(false);
}
activeLegsAnimation.update(timeStep);
activeBodyPosition.update(timeStep);
}","@Override public void update(TimeStep timeStep){
  adjustments.poll();
  effects.update(timeStep);
  xOffset=yOffset=0;
  float weaponWeight=1.0f;
  ClientWeapon weapon=entity.getWeapon();
  if (weapon != null) {
    weaponWeight=100.0f - weapon.getWeaponWeight();
    weaponWeight*=0.01f;
  }
  activeBodyPosition=idleBody;
  activeLegsAnimation=idleLegsAnimation;
  Vector2f dir=entity.getFacing();
  State currentState=entity.getCurrentState();
switch (currentState) {
case IDLE:
    activeBodyPosition=idleBody;
  activeLegsAnimation=idleLegsAnimation;
resetLegMovements();
break;
case CROUCHING:
activeBodyPosition=crouchBody;
activeLegsAnimation=crouchingLegsAnimation;
resetLegMovements();
break;
case WALKING:
{
activeBodyPosition=walkBody;
activeLegsAnimation=walkLegsAnimation;
bobMotion.set(5,0.6);
swayMotion.set(4,1.55 * weaponWeight);
xOffset+=(dir.y * swayMotion.direction) * 0.815f;
yOffset+=(dir.x * swayMotion.direction) * 0.815f;
}
break;
case RUNNING:
{
activeBodyPosition=runBody;
activeLegsAnimation=runLegsAnimation;
bobMotion.set(12 * weaponWeight,2.4 * weaponWeight);
swayMotion.set(4,2.5 * weaponWeight);
xOffset+=(dir.y * swayMotion.direction) * 0.755f;
yOffset+=(dir.x * swayMotion.direction) * 0.755f;
}
break;
case SPRINTING:
activeBodyPosition=sprintBody;
activeLegsAnimation=sprintLegsAnimation;
bobMotion.set(0,0);
swayMotion.set(4,3.25 * weaponWeight);
xOffset+=(dir.y * swayMotion.direction) * 1.25f;
yOffset+=(dir.x * swayMotion.direction) * 1.25f;
break;
case DEAD:
resetLegMovements();
break;
default :
resetLegMovements();
}
bobMotion.update(timeStep);
swayMotion.update(timeStep);
if (weapon != null) {
this.isReloading=weapon.getState() == seventh.game.weapons.Weapon.State.RELOADING;
this.isSwitching=weapon.getState() == seventh.game.weapons.Weapon.State.SWITCHING;
this.isMelee=weapon.getState() == seventh.game.weapons.Weapon.State.MELEE_ATTACK;
this.isFiring=weapon.getState() == seventh.game.weapons.Weapon.State.FIRING;
if (this.isReloading) {
this.activeBodyPosition=reloadBody;
}
 else if (this.isMelee) {
this.activeBodyPosition=meleeBody;
}
 else if (this.isSwitching) {
this.activeBodyPosition=switchWeaponBody;
}
if (weapon instanceof ClientRocketLauncher && !this.isMelee) {
activeBodyPosition=crouchBody;
}
AnimatedImage muzzleAnim=weapon.getMuzzleFlash();
if (muzzleAnim != null) {
muzzleAnim.update(timeStep);
}
}
if (this.isFiring) {
this.flashTime-=timeStep.getDeltaTime();
if (this.flashTime <= 0) {
boolean cycleFlash=weapon != null && weapon.isAutomatic();
if (cycleFlash) {
this.showFlash=!this.showFlash;
this.flashTime=90;
}
 else {
if (toggleFlash) {
this.showFlash=true;
this.flashTime=90;
toggleFlash=false;
}
 else {
this.showFlash=false;
}
}
}
}
 else {
this.showFlash=false;
this.toggleFlash=true;
this.flashTime=90;
}
if (entity.isAlive() && (entity.getLastUpdate() + 500) > timeStep.getGameClock()) {
entity.getMussleFlash().setOn(showFlash);
}
 else {
entity.getMussleFlash().setOn(false);
}
activeLegsAnimation.update(timeStep);
activeBodyPosition.update(timeStep);
}",0.9962325962325962
86753,"@Override public void read(IOBuffer buffer){
  super.read(buffer);
  orientation=buffer.getShort();
  state=buffer.get();
  health=buffer.get();
  State aState=State.fromNetValue(state);
  if (aState.isVehicleState()) {
    isOperatingVehicle=true;
    vehicleId=buffer.get();
  }
 else {
    readWeapon(buffer);
  }
}","@Override public void read(IOBuffer buffer){
  super.read(buffer);
  orientation=buffer.getShort();
  state=buffer.get();
  health=buffer.get();
  State aState=State.fromNetValue(state);
  if (aState.isVehicleState()) {
    isOperatingVehicle=true;
    vehicleId=buffer.getUnsignedByte();
  }
 else {
    readWeapon(buffer);
  }
}",0.9814814814814816
86754,"@Override public void write(IOBuffer buffer){
  super.write(buffer);
  buffer.putShort(orientation);
  buffer.put(state);
  buffer.put(health);
  State aState=State.fromNetValue(state);
  if (aState.isVehicleState()) {
    buffer.put(vehicleId);
  }
 else {
    writeWeapon(buffer);
  }
}","@Override public void write(IOBuffer buffer){
  super.write(buffer);
  buffer.putShort(orientation);
  buffer.put(state);
  buffer.put(health);
  State aState=State.fromNetValue(state);
  if (aState.isVehicleState()) {
    buffer.putUnsignedByte(vehicleId);
  }
 else {
    writeWeapon(buffer);
  }
}",0.979591836734694
86755,"@Override public void registerListeners(final GameInfo game,EventDispatcher dispatcher){
  dispatcher.addEventListener(PlayerKilledEvent.class,new PlayerKilledListener(){
    @Override @EventMethod public void onPlayerKilled(    PlayerKilledEvent event){
      if (isInProgress()) {
        PlayerInfo killer=game.getPlayerById(Integer.valueOf((int)(event.getKillerId())));
        if (killer != null) {
          Player killed=event.getPlayer();
          if (killed != null) {
            if (killer.getId() == killed.getId()) {
              killed.getTeam().score(-1);
              return;
            }
          }
          killer.getTeam().score(1);
        }
      }
    }
  }
);
}","@Override public void registerListeners(final GameInfo game,EventDispatcher dispatcher){
  this.dispatcher=dispatcher;
  this.dispatcher.addEventListener(PlayerKilledEvent.class,new PlayerKilledListener(){
    @Override @EventMethod public void onPlayerKilled(    PlayerKilledEvent event){
      if (isInProgress()) {
        PlayerInfo killer=game.getPlayerById(Integer.valueOf((int)(event.getKillerId())));
        if (killer != null) {
          Player killed=event.getPlayer();
          if (killed != null) {
            if (killer.getId() == killed.getId()) {
              killed.getTeam().score(-1);
              return;
            }
          }
          killer.getTeam().score(1);
        }
      }
    }
  }
);
}",0.9752650176678446
86756,"@Override public void start(Game game){
}","@Override public void start(Game game){
  this.dispatcher.queueEvent(new RoundStartedEvent(this));
}",0.5815602836879432
86757,"@Override protected GameState doUpdate(Game game,TimeStep timeStep){
  if (GameState.IN_PROGRESS == getGameState()) {
    List<Team> leaders=getTeamsWithHighScore();
    boolean isUnlimitedScore=getMaxScore() <= 0;
    if (this.getRemainingTime() <= 0 || (leaders.get(0).getScore() >= getMaxScore() && !isUnlimitedScore)) {
      if (leaders.size() > 1) {
        setGameState(GameState.TIE);
      }
 else {
        setGameState(GameState.WINNER);
      }
    }
  }
  if (GameState.IN_PROGRESS == getGameState()) {
    Player[] players=game.getPlayers().getPlayers();
    for (int i=0; i < players.length; i++) {
      Player player=players[i];
      if (player != null) {
        if (player.isDead() && !player.isSpectating()) {
          player.updateSpawnTime(timeStep);
          if (player.readyToSpawn()) {
            game.spawnPlayerEntity(player.getId());
          }
        }
      }
    }
  }
  return getGameState();
}","@Override protected GameState doUpdate(Game game,TimeStep timeStep){
  if (GameState.IN_PROGRESS == getGameState()) {
    List<Team> leaders=getTeamsWithHighScore();
    boolean isUnlimitedScore=getMaxScore() <= 0;
    if (this.getRemainingTime() <= 0 || (leaders.get(0).getScore() >= getMaxScore() && !isUnlimitedScore)) {
      if (leaders.size() > 1) {
        setGameState(GameState.TIE);
        this.dispatcher.queueEvent(new RoundEndedEvent(this,null,game.getNetGameStats()));
      }
 else {
        setGameState(GameState.WINNER);
        this.dispatcher.queueEvent(new RoundEndedEvent(this,leaders.get(0),game.getNetGameStats()));
      }
    }
  }
  if (GameState.IN_PROGRESS == getGameState()) {
    Player[] players=game.getPlayers().getPlayers();
    for (int i=0; i < players.length; i++) {
      Player player=players[i];
      if (player != null) {
        if (player.isDead() && !player.isSpectating()) {
          player.updateSpawnTime(timeStep);
          if (player.readyToSpawn()) {
            game.spawnPlayerEntity(player.getId());
          }
        }
      }
    }
  }
  return getGameState();
}",0.906614785992218
86758,"/** 
 * Parses the JSON
 * @param entry
 * @return
 */
private String[] parseEntry(LeoObject object){
  String[] result={""String_Node_Str"",""String_Node_Str""};
  try {
    ServerInfo info=new ServerInfo(object);
    result=new String[]{String.format(""String_Node_Str"",info.getServerName(),info.getGameType(),info.getAxis().size() + info.getAllies().size(),12),info.getAddress() + ""String_Node_Str"" + info.getPort()};
  }
 catch (  Exception e) {
  }
  return result;
}","/** 
 * Parses the JSON
 * @param entry
 * @return
 */
private String[] parseEntry(ServerInfo info){
  String[] result={""String_Node_Str"",""String_Node_Str""};
  try {
    result=new String[]{String.format(""String_Node_Str"",info.getServerName(),info.getGameType(),info.getAxis().size() + info.getAllies().size(),12),info.getAddress() + ""String_Node_Str"" + info.getPort()};
  }
 catch (  Exception e) {
  }
  return result;
}",0.9156355455568054
86759,"@Override public void run(){
  MasterServerClient api=new MasterServerClient(app.getConfig().getMasterServerConfig());
  try {
    LeoObject result=api.getServerListings(null);
    if (LeoObject.isTrue(result)) {
      showServersLabel.set(false);
      if (result.isArray()) {
        LeoArray array=result.as();
        servers.add(array);
      }
    }
 else {
      showServersLabel.set(true);
    }
    update.set(true);
  }
 catch (  Exception e) {
    Cons.println(""String_Node_Str"" + e);
  }
}","@Override public void run(){
  servers.clear();
  MasterServerClient api=new MasterServerClient(app.getConfig().getMasterServerConfig());
  try {
    String gameType=gameTypeIndex >= 0 && gameTypeIndex < GameType.Type.values().length ? GameType.Type.values()[gameTypeIndex].name() : null;
    LeoObject result=api.getServerListings(gameType);
    if (LeoObject.isTrue(result)) {
      showServersLabel.set(false);
      if (result.isArray()) {
        LeoArray array=result.as();
        for (        LeoObject obj : array) {
          ServerInfo info=new ServerInfo(obj);
          servers.add(info);
        }
      }
    }
 else {
      showServersLabel.set(true);
    }
    update.set(true);
  }
 catch (  Exception e) {
    Cons.println(""String_Node_Str"" + e);
  }
}",0.7515723270440252
86760,"/** 
 */
public ServerListingsScreen(final MenuScreen menuScreen){
  this.menuScreen=menuScreen;
  this.theme=menuScreen.getTheme();
  this.app=menuScreen.getApp();
  this.uiManager=menuScreen.getUiManager();
  this.isServerInternetOptionsDisplayed=true;
  this.gameTypeIndex=GameType.Type.values().length;
  this.showServersLabel=new AtomicBoolean(true);
  this.servers=new ConcurrentLinkedQueue<>();
  this.update=new AtomicBoolean();
  this.queryingLan=new AtomicBoolean();
  createUI();
  queryInternetServers();
}","/** 
 */
public ServerListingsScreen(final MenuScreen menuScreen){
  this.menuScreen=menuScreen;
  this.theme=menuScreen.getTheme();
  this.app=menuScreen.getApp();
  this.uiManager=menuScreen.getUiManager();
  this.isServerInternetOptionsDisplayed=true;
  this.gameTypeIndex=GameType.Type.values().length;
  this.showServersLabel=new AtomicBoolean(true);
  this.servers=new ConcurrentLinkedQueue<>();
  this.update=new AtomicBoolean();
  this.queryingLan=new AtomicBoolean();
  createUI();
  queryMultiplayerServers();
}",0.981713185755534
86761,"private void createUI(){
  this.panelView=new PanelView<>();
  this.optionsPanel=new Panel();
  Vector2f uiPos=new Vector2f(200,app.getScreenHeight() - 30);
  final int startY=(int)uiPos.y;
  Button saveBtn=setupButton(uiPos,""String_Node_Str"");
  saveBtn.getBounds().setSize(140,80);
  saveBtn.getTextLabel().setFont(theme.getPrimaryFontName());
  saveBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      if (isServerInternetOptionsDisplayed) {
        queryInternetServers();
      }
 else {
        queryLANServer();
      }
    }
  }
);
  final int yInc=30;
  uiPos.x=200;
  uiPos.y=200;
  final Button serversBtn=setupButton(uiPos,isServerInternetOptionsDisplayed ? ""String_Node_Str"" : ""String_Node_Str"");
  serversBtn.getBounds().setSize(140,20);
  serversBtn.getTextLabel().setFont(theme.getSecondaryFontName());
  serversBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      isServerInternetOptionsDisplayed=!isServerInternetOptionsDisplayed;
      if (isServerInternetOptionsDisplayed) {
        serversBtn.setText(""String_Node_Str"");
      }
 else {
        serversBtn.setText(""String_Node_Str"");
      }
      refreshConfigUI();
    }
  }
);
  uiPos.y+=yInc;
  final Button gameTypeBtn=setupButton(uiPos,gameTypeIndex == GameType.Type.values().length ? ""String_Node_Str"" : ""String_Node_Str"" + GameType.Type.values()[gameTypeIndex]);
  gameTypeBtn.getBounds().setSize(140,20);
  gameTypeBtn.getTextLabel().setFont(theme.getSecondaryFontName());
  gameTypeBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      gameTypeIndex++;
      if (gameTypeIndex == GameType.Type.values().length) {
        gameTypeBtn.setText(""String_Node_Str"");
      }
 else {
        if (gameTypeIndex > GameType.Type.values().length) {
          gameTypeIndex=0;
        }
        gameTypeBtn.setText(""String_Node_Str"" + GameType.Type.values()[gameTypeIndex]);
      }
      refreshConfigUI();
      queryInternetServers();
    }
  }
);
  uiPos.y+=yInc;
  uiPos.x=80;
  serverListings=new ListBox();
  serverListings.setBackgroundColor(0xff383e18);
  serverListings.setBounds(new Rectangle((int)uiPos.x,(int)uiPos.y,app.getScreenWidth() - 220,400));
  uiPos.x=140;
  uiPos.y=40;
  LeoArray entries=servers.poll();
  if (entries != null) {
    for (    LeoObject entry : entries) {
      serverListings.addItem(setupServerEntryButton(uiPos,parseEntry(entry)));
      uiPos.y+=yInc;
    }
  }
  update.set(false);
  optionsPanel.addWidget(serverListings);
  panelView.addElement(new ListBoxView<>(serverListings));
  uiPos.x=app.getScreenWidth() / 2;
  uiPos.y=650;
  this.noServersFoundLbl=new Label(""String_Node_Str"");
  this.noServersFoundLbl.setBounds(new Rectangle(app.getScreenWidth(),30));
  this.noServersFoundLbl.getBounds().centerAround(uiPos);
  this.noServersFoundLbl.setTextAlignment(TextAlignment.CENTER);
  if (!this.showServersLabel.get()) {
    noServersFoundLbl.hide();
  }
  optionsPanel.addWidget(noServersFoundLbl);
  panelView.addElement(new LabelView(noServersFoundLbl));
  uiPos.x=app.getScreenWidth() - 100;
  uiPos.y=420;
  Button upArrow=setupButton(uiPos,""String_Node_Str"",false,false);
  upArrow.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      serverListings.previousIndex();
    }
  }
);
  panelView.addElement(new ImageButtonView(upArrow,Art.upArrow));
  uiPos.y+=yInc * 3;
  Button downArrow=setupButton(uiPos,""String_Node_Str"",false,false);
  downArrow.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      serverListings.nextIndex();
    }
  }
);
  panelView.addElement(new ImageButtonView(downArrow,Art.downArrow));
  uiPos.x=app.getScreenWidth() - 80;
  uiPos.y=startY;
  Button cancelBtn=setupButton(uiPos,""String_Node_Str"");
  cancelBtn.getBounds().setSize(140,80);
  cancelBtn.getTextLabel().setFont(theme.getPrimaryFontName());
  cancelBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      app.setScreen(menuScreen);
      Sounds.playGlobalSound(Sounds.uiNavigate);
    }
  }
);
}","private void createUI(){
  this.panelView=new PanelView<>();
  this.optionsPanel=new Panel();
  Vector2f uiPos=new Vector2f(200,app.getScreenHeight() - 30);
  final int startY=(int)uiPos.y;
  Button saveBtn=setupButton(uiPos,""String_Node_Str"");
  saveBtn.getBounds().setSize(140,80);
  saveBtn.getTextLabel().setFont(theme.getPrimaryFontName());
  saveBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      queryMultiplayerServers();
    }
  }
);
  final int yInc=30;
  uiPos.x=200;
  uiPos.y=200;
  final Button serversBtn=setupButton(uiPos,isServerInternetOptionsDisplayed ? ""String_Node_Str"" : ""String_Node_Str"");
  serversBtn.getBounds().setSize(140,20);
  serversBtn.getTextLabel().setFont(theme.getSecondaryFontName());
  serversBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      isServerInternetOptionsDisplayed=!isServerInternetOptionsDisplayed;
      if (isServerInternetOptionsDisplayed) {
        serversBtn.setText(""String_Node_Str"");
      }
 else {
        serversBtn.setText(""String_Node_Str"");
      }
      refreshConfigUI();
      queryMultiplayerServers();
    }
  }
);
  uiPos.y+=yInc;
  final Button gameTypeBtn=setupButton(uiPos,gameTypeIndex == GameType.Type.values().length ? ""String_Node_Str"" : ""String_Node_Str"" + GameType.Type.values()[gameTypeIndex]);
  gameTypeBtn.getBounds().setSize(140,20);
  gameTypeBtn.getTextLabel().setFont(theme.getSecondaryFontName());
  gameTypeBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      gameTypeIndex++;
      if (gameTypeIndex == GameType.Type.values().length) {
        gameTypeBtn.setText(""String_Node_Str"");
      }
 else {
        if (gameTypeIndex > GameType.Type.values().length) {
          gameTypeIndex=0;
        }
        gameTypeBtn.setText(""String_Node_Str"" + GameType.Type.values()[gameTypeIndex]);
      }
      refreshConfigUI();
      queryMultiplayerServers();
    }
  }
);
  uiPos.y+=yInc;
  uiPos.x=80;
  serverListings=new ListBox();
  serverListings.setBackgroundColor(0xff383e18);
  serverListings.setBounds(new Rectangle((int)uiPos.x,(int)uiPos.y,app.getScreenWidth() - 220,400));
  uiPos.x=140;
  uiPos.y=40;
  while (!servers.isEmpty()) {
    ServerInfo info=servers.poll();
    if (info != null) {
      serverListings.addItem(setupServerEntryButton(uiPos,parseEntry(info)));
      uiPos.y+=yInc;
    }
  }
  update.set(false);
  optionsPanel.addWidget(serverListings);
  panelView.addElement(new ListBoxView<>(serverListings));
  uiPos.x=app.getScreenWidth() / 2;
  uiPos.y=650;
  this.noServersFoundLbl=new Label(""String_Node_Str"");
  this.noServersFoundLbl.setBounds(new Rectangle(app.getScreenWidth(),30));
  this.noServersFoundLbl.getBounds().centerAround(uiPos);
  this.noServersFoundLbl.setTextAlignment(TextAlignment.CENTER);
  if (!this.showServersLabel.get()) {
    noServersFoundLbl.hide();
  }
  optionsPanel.addWidget(noServersFoundLbl);
  panelView.addElement(new LabelView(noServersFoundLbl));
  uiPos.x=app.getScreenWidth() - 100;
  uiPos.y=420;
  Button upArrow=setupButton(uiPos,""String_Node_Str"",false,false);
  upArrow.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      serverListings.previousIndex();
    }
  }
);
  panelView.addElement(new ImageButtonView(upArrow,Art.upArrow));
  uiPos.y+=yInc * 3;
  Button downArrow=setupButton(uiPos,""String_Node_Str"",false,false);
  downArrow.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      serverListings.nextIndex();
    }
  }
);
  panelView.addElement(new ImageButtonView(downArrow,Art.downArrow));
  uiPos.x=app.getScreenWidth() - 80;
  uiPos.y=startY;
  Button cancelBtn=setupButton(uiPos,""String_Node_Str"");
  cancelBtn.getBounds().setSize(140,80);
  cancelBtn.getTextLabel().setFont(theme.getPrimaryFontName());
  cancelBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      app.setScreen(menuScreen);
      Sounds.playGlobalSound(Sounds.uiNavigate);
    }
  }
);
}",0.949027729835462
86762,"private void queryInternetServers(){
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      MasterServerClient api=new MasterServerClient(app.getConfig().getMasterServerConfig());
      try {
        LeoObject result=api.getServerListings(null);
        if (LeoObject.isTrue(result)) {
          showServersLabel.set(false);
          if (result.isArray()) {
            LeoArray array=result.as();
            servers.add(array);
          }
        }
 else {
          showServersLabel.set(true);
        }
        update.set(true);
      }
 catch (      Exception e) {
        Cons.println(""String_Node_Str"" + e);
      }
    }
  }
);
  thread.start();
}","private void queryInternetServers(){
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      servers.clear();
      MasterServerClient api=new MasterServerClient(app.getConfig().getMasterServerConfig());
      try {
        String gameType=gameTypeIndex >= 0 && gameTypeIndex < GameType.Type.values().length ? GameType.Type.values()[gameTypeIndex].name() : null;
        LeoObject result=api.getServerListings(gameType);
        if (LeoObject.isTrue(result)) {
          showServersLabel.set(false);
          if (result.isArray()) {
            LeoArray array=result.as();
            for (            LeoObject obj : array) {
              ServerInfo info=new ServerInfo(obj);
              servers.add(info);
            }
          }
        }
 else {
          showServersLabel.set(true);
        }
        update.set(true);
      }
 catch (      Exception e) {
        Cons.println(""String_Node_Str"" + e);
      }
    }
  }
);
  thread.start();
}",0.7954271961492179
86763,"/** 
 * @param serverContext
 * @param gameSession
 */
public InGameState(final ServerContext serverContext,final GameSession gameSession){
  this.serverContext=serverContext;
  this.gameSession=gameSession;
  this.players=gameSession.getPlayers();
  this.network=serverContext.getServer();
  this.clients=serverContext.getClients();
  this.listener=serverContext.getServerProtocolListener();
  this.dispatcher=gameSession.getEventDispatcher();
  this.game=gameSession.getGame();
  loadProperties(gameSession.getMap(),game);
  this.nextGameStatUpdate=GAME_STAT_UPDATE;
  this.nextGamePartialStatUpdate=GAME_PARTIAL_STAT_UPDATE;
  this.statsMessage=new GameStatsMessage();
  this.partialStatsMessage=new GamePartialStatsMessage();
  this.clientIterator=new RemoteClientIterator(){
    @Override public void onRemoteClient(    RemoteClient client){
      if (client.isReady()) {
        sendGameUpdateMessage(client.getId());
      }
      if (calculatePing) {
        int ping=client.getConnection().getReturnTripTime();
        client.getPlayer().setPing(ping);
      }
    }
  }
;
  this.dispatcher.addEventListener(PlayerKilledEvent.class,new PlayerKilledListener(){
    @Override @EventMethod public void onPlayerKilled(    PlayerKilledEvent event){
      PlayerKilledMessage msg=new PlayerKilledMessage();
      msg.deathType=event.getMeansOfDeath().netValue();
      msg.killedById=event.getKillerId();
      msg.playerId=event.getPlayer().getId();
      msg.posX=(short)event.getPos().x;
      msg.posY=(short)event.getPos().y;
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,msg);
    }
  }
);
  this.dispatcher.addEventListener(PlayerSpawnedEvent.class,new PlayerSpawnedListener(){
    @Override @EventMethod public void onPlayerSpawned(    PlayerSpawnedEvent event){
      PlayerSpawnedMessage msg=new PlayerSpawnedMessage();
      Player player=event.getPlayer();
      msg.playerId=player.getId();
      msg.posX=(short)event.getSpawnLocation().x;
      msg.posY=(short)event.getSpawnLocation().y;
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,msg);
    }
  }
);
  this.dispatcher.addEventListener(GameEndEvent.class,new GameEndListener(){
    @Override @EventMethod public void onGameEnd(    GameEndEvent event){
      if (!gameEnded) {
        GameEndedMessage msg=new GameEndedMessage();
        msg.stats=game.getNetGameStats();
        listener.queueSendToAll(Endpoint.FLAG_RELIABLE,msg);
        gameEnded=true;
      }
    }
  }
);
  this.dispatcher.addEventListener(RoundEndedEvent.class,new RoundEndedListener(){
    @Override @EventMethod public void onRoundEnded(    RoundEndedEvent event){
      RoundEndedMessage msg=new RoundEndedMessage();
      msg.stats=game.getNetGameStats();
      Team winner=event.getWinner();
      if (winner != null) {
        msg.winnerTeamId=winner.getId();
      }
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,msg);
    }
  }
);
  this.dispatcher.addEventListener(RoundStartedEvent.class,new RoundStartedListener(){
    @Override @EventMethod public void onRoundStarted(    RoundStartedEvent event){
      loadProperties(gameSession.getMap(),game);
      RoundStartedMessage msg=new RoundStartedMessage();
      msg.gameState=game.getNetGameState();
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,msg);
    }
  }
);
  this.dispatcher.addEventListener(BombPlantedEvent.class,new BombPlantedListener(){
    @Override @EventMethod public void onBombPlanted(    BombPlantedEvent event){
      int bombTargetId=event.getBombTarget() != null ? event.getBombTarget().getId() : Entity.INVALID_ENTITY_ID;
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,new BombPlantedMessage(bombTargetId));
    }
  }
);
  this.dispatcher.addEventListener(BombDisarmedEvent.class,new BombDisarmedListener(){
    @EventMethod @Override public void onBombDisarmedEvent(    BombDisarmedEvent event){
      int bombTargetId=event.getBombTarget() != null ? event.getBombTarget().getId() : Entity.INVALID_ENTITY_ID;
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,new BombDisarmedMessage(bombTargetId));
    }
  }
);
  this.dispatcher.addEventListener(BombExplodedMessage.class,new BombExplodedListener(){
    @EventMethod @Override public void onBombExplodedEvent(    BombExplodedEvent event){
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,new BombExplodedMessage());
    }
  }
);
  this.dispatcher.addEventListener(TileRemovedEvent.class,new TileRemovedListener(){
    @Override public void onTileRemoved(    TileRemovedEvent event){
      TileRemovedMessage msg=new TileRemovedMessage();
      msg.x=event.getTileX();
      msg.y=event.getTileY();
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,msg);
    }
  }
);
}","/** 
 * @param serverContext
 * @param gameSession
 */
public InGameState(final ServerContext serverContext,final GameSession gameSession){
  this.serverContext=serverContext;
  this.gameSession=gameSession;
  this.players=gameSession.getPlayers();
  this.network=serverContext.getServer();
  this.clients=serverContext.getClients();
  this.listener=serverContext.getServerProtocolListener();
  this.dispatcher=gameSession.getEventDispatcher();
  this.game=gameSession.getGame();
  this.nextGameStatUpdate=GAME_STAT_UPDATE;
  this.nextGamePartialStatUpdate=GAME_PARTIAL_STAT_UPDATE;
  this.statsMessage=new GameStatsMessage();
  this.partialStatsMessage=new GamePartialStatsMessage();
  this.clientIterator=new RemoteClientIterator(){
    @Override public void onRemoteClient(    RemoteClient client){
      if (client.isReady()) {
        sendGameUpdateMessage(client.getId());
      }
      if (calculatePing) {
        int ping=client.getConnection().getReturnTripTime();
        client.getPlayer().setPing(ping);
      }
    }
  }
;
  this.dispatcher.addEventListener(PlayerKilledEvent.class,new PlayerKilledListener(){
    @Override @EventMethod public void onPlayerKilled(    PlayerKilledEvent event){
      PlayerKilledMessage msg=new PlayerKilledMessage();
      msg.deathType=event.getMeansOfDeath().netValue();
      msg.killedById=event.getKillerId();
      msg.playerId=event.getPlayer().getId();
      msg.posX=(short)event.getPos().x;
      msg.posY=(short)event.getPos().y;
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,msg);
    }
  }
);
  this.dispatcher.addEventListener(PlayerSpawnedEvent.class,new PlayerSpawnedListener(){
    @Override @EventMethod public void onPlayerSpawned(    PlayerSpawnedEvent event){
      PlayerSpawnedMessage msg=new PlayerSpawnedMessage();
      Player player=event.getPlayer();
      msg.playerId=player.getId();
      msg.posX=(short)event.getSpawnLocation().x;
      msg.posY=(short)event.getSpawnLocation().y;
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,msg);
    }
  }
);
  this.dispatcher.addEventListener(GameEndEvent.class,new GameEndListener(){
    @Override @EventMethod public void onGameEnd(    GameEndEvent event){
      if (!gameEnded) {
        GameEndedMessage msg=new GameEndedMessage();
        msg.stats=game.getNetGameStats();
        listener.queueSendToAll(Endpoint.FLAG_RELIABLE,msg);
        gameEnded=true;
      }
    }
  }
);
  this.dispatcher.addEventListener(RoundEndedEvent.class,new RoundEndedListener(){
    @Override @EventMethod public void onRoundEnded(    RoundEndedEvent event){
      RoundEndedMessage msg=new RoundEndedMessage();
      msg.stats=game.getNetGameStats();
      Team winner=event.getWinner();
      if (winner != null) {
        msg.winnerTeamId=winner.getId();
      }
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,msg);
    }
  }
);
  this.dispatcher.addEventListener(RoundStartedEvent.class,new RoundStartedListener(){
    @Override @EventMethod public void onRoundStarted(    RoundStartedEvent event){
      loadProperties(gameSession.getMap(),game);
      RoundStartedMessage msg=new RoundStartedMessage();
      msg.gameState=game.getNetGameState();
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,msg);
    }
  }
);
  this.dispatcher.addEventListener(BombPlantedEvent.class,new BombPlantedListener(){
    @Override @EventMethod public void onBombPlanted(    BombPlantedEvent event){
      int bombTargetId=event.getBombTarget() != null ? event.getBombTarget().getId() : Entity.INVALID_ENTITY_ID;
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,new BombPlantedMessage(bombTargetId));
    }
  }
);
  this.dispatcher.addEventListener(BombDisarmedEvent.class,new BombDisarmedListener(){
    @EventMethod @Override public void onBombDisarmedEvent(    BombDisarmedEvent event){
      int bombTargetId=event.getBombTarget() != null ? event.getBombTarget().getId() : Entity.INVALID_ENTITY_ID;
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,new BombDisarmedMessage(bombTargetId));
    }
  }
);
  this.dispatcher.addEventListener(BombExplodedMessage.class,new BombExplodedListener(){
    @EventMethod @Override public void onBombExplodedEvent(    BombExplodedEvent event){
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,new BombExplodedMessage());
    }
  }
);
  this.dispatcher.addEventListener(TileRemovedEvent.class,new TileRemovedListener(){
    @Override public void onTileRemoved(    TileRemovedEvent event){
      TileRemovedMessage msg=new TileRemovedMessage();
      msg.x=event.getTileX();
      msg.y=event.getTileY();
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,msg);
    }
  }
);
}",0.9951804648173932
86764,"/** 
 * Load the maps properties file
 * @param mapFile
 * @param game
 */
private void loadProperties(GameMap gameMap,Game game){
  File propertiesFile=new File(gameMap.getMapFileName() + ""String_Node_Str"");
  if (propertiesFile.exists()) {
    try {
      Leola runtime=Scripting.newSandboxedRuntime();
      runtime.loadStatics(SeventhScriptingCommonLibrary.class);
      runtime.put(""String_Node_Str"",game);
      runtime.eval(propertiesFile);
      Map map=game.getMap();
      Layer[] layers=map.getBackgroundLayers();
      for (int i=0; i < layers.length; i++) {
        Layer layer=layers[i];
        if (layer != null) {
          if (layer.isLightLayer()) {
            for (int y=0; y < map.getTileWorldHeight(); y++) {
              for (int x=0; x < map.getTileWorldWidth(); x++) {
                Tile tile=layer.getRow(y).get(x);
                if (tile != null) {
                  LightBulb light=game.newLight(map.tileToWorld(x,y));
                  light.setColor(0.9f,0.85f,0.85f);
                  light.setLuminacity(0.95f);
                }
              }
            }
          }
        }
      }
    }
 catch (    Exception e) {
      Cons.println(""String_Node_Str"" + propertiesFile.getName() + ""String_Node_Str"");
      Cons.println(e);
    }
  }
}","/** 
 * Load the maps properties file
 * @param mapFile
 * @param game
 */
private void loadProperties(GameMap gameMap,Game game){
  File propertiesFile=new File(gameMap.getMapFileName() + ""String_Node_Str"");
  if (propertiesFile.exists()) {
    try {
      Leola runtime=Scripting.newSandboxedRuntime();
      runtime.loadStatics(SeventhScriptingCommonLibrary.class);
      GameServerLeolaLibrary gLib=new GameServerLeolaLibrary(game);
      runtime.loadLibrary(gLib,""String_Node_Str"");
      AILeolaLibrary aiLib=new AILeolaLibrary();
      runtime.loadLibrary(aiLib,""String_Node_Str"");
      runtime.put(""String_Node_Str"",game);
      runtime.eval(propertiesFile);
      Map map=game.getMap();
      Layer[] layers=map.getBackgroundLayers();
      for (int i=0; i < layers.length; i++) {
        Layer layer=layers[i];
        if (layer != null) {
          if (layer.isLightLayer()) {
            for (int y=0; y < map.getTileWorldHeight(); y++) {
              for (int x=0; x < map.getTileWorldWidth(); x++) {
                Tile tile=layer.getRow(y).get(x);
                if (tile != null) {
                  LightBulb light=game.newLight(map.tileToWorld(x,y));
                  light.setColor(0.9f,0.85f,0.85f);
                  light.setLuminacity(0.95f);
                }
              }
            }
          }
        }
      }
    }
 catch (    Exception e) {
      Cons.println(""String_Node_Str"" + propertiesFile.getName() + ""String_Node_Str"");
      Cons.println(e);
    }
  }
}",0.9209770114942528
86765,"/** 
 * Allocates the   {@link Peer} which doesn't actually make the connection
 * @param address
 * @return the Peer
 * @throws IOException
 */
protected Peer allocatePeer(InetSocketAddress address) throws IOException {
  if (this.numberOfConnections >= this.maxConnections) {
    throw new IOException(""String_Node_Str"");
  }
  Peer peer=isClientAlreadyConnected(address);
  if (peer == null) {
synchronized (this) {
      byte id=findOpenId();
      if (id == INVALID_PEER_ID) {
        throw new IOException(""String_Node_Str"");
      }
      this.numberOfConnections++;
      peer=new Peer(this,address,id);
      peer.setState(State.CONNECTED);
      peers[id]=peer;
    }
  }
  return peer;
}","/** 
 * Allocates the   {@link Peer} which doesn't actually make the connection
 * @param address
 * @return the Peer
 * @throws IOException
 */
protected Peer allocatePeer(InetSocketAddress address) throws IOException {
synchronized (this) {
    if (this.numberOfConnections >= this.maxConnections) {
      throw new IOException(""String_Node_Str"");
    }
    Peer peer=isClientAlreadyConnected(address);
    if (peer == null) {
      byte id=findOpenId();
      if (id == INVALID_PEER_ID) {
        throw new IOException(""String_Node_Str"");
      }
      this.numberOfConnections++;
      peer=new Peer(this,address,id);
      peer.setState(State.CONNECTED);
      peers[id]=peer;
    }
    return peer;
  }
}",0.9389204545454546
86766,"@Override public void read(IOBuffer buffer){
  maxTime=buffer.getLong();
  maxScore=buffer.getInt();
  byte len=buffer.get();
  if (len > 0) {
    teams=new NetTeam[len];
    for (byte i=0; i < len; i++) {
      teams[i]=new NetTeam();
      teams[i].read(buffer);
    }
  }
}","@Override public void read(IOBuffer buffer){
  maxTime=buffer.getLong();
  maxScore=buffer.getInt();
  type=buffer.get();
  byte len=buffer.get();
  if (len > 0) {
    teams=new NetTeam[len];
    for (byte i=0; i < len; i++) {
      teams[i]=new NetTeam();
      teams[i].read(buffer);
    }
  }
}",0.9633507853403142
86767,"@Override public void write(IOBuffer buffer){
  buffer.putLong(maxTime);
  buffer.putInt(maxScore);
  if (teams != null) {
    byte len=(byte)teams.length;
    buffer.put(len);
    for (byte i=0; i < len; i++) {
      teams[i].write(buffer);
    }
  }
 else {
    buffer.put((byte)0);
  }
}","@Override public void write(IOBuffer buffer){
  buffer.putLong(maxTime);
  buffer.putInt(maxScore);
  buffer.put(type);
  if (teams != null) {
    byte len=(byte)teams.length;
    buffer.put(len);
    for (byte i=0; i < len; i++) {
      teams[i].write(buffer);
    }
  }
 else {
    buffer.put((byte)0);
  }
}",0.9666666666666668
86768,"/** 
 * Lets the brain think for a game tick
 * @param timeStep
 */
public void update(TimeStep timeStep){
  if (player.isAlive()) {
    this.memory.update(timeStep);
    this.sensors.update(timeStep);
    this.motion.update(timeStep);
    this.thoughtProcess.think(timeStep,this);
    this.targetingSystem.update(timeStep);
  }
}","/** 
 * Lets the brain think for a game tick
 * @param timeStep
 */
public void update(TimeStep timeStep){
  if (entityOwner != null && entityOwner.isAlive()) {
    this.memory.update(timeStep);
    this.sensors.update(timeStep);
    this.motion.update(timeStep);
    this.thoughtProcess.think(timeStep,this);
    this.targetingSystem.update(timeStep);
  }
}",0.9534883720930232
86769,"/** 
 * Moves the cursor based on the delta movement
 * @param dx either 1, -1 or 0
 * @param dy either 1, -1 or 0
 */
public void moveByDelta(float dx,float dy){
  float deltaX=this.mouseSensitivity * (dx * 20);
  float deltaY=this.mouseSensitivity * (dy * 20);
  this.prevX=(int)cursorPos.x;
  this.prevY=(int)cursorPos.y;
  this.cursorPos.x+=deltaX;
  this.cursorPos.y+=deltaY;
}","/** 
 * Moves the cursor based on the delta movement
 * @param dx either 1, -1 or 0
 * @param dy either 1, -1 or 0
 */
public void moveByDelta(float dx,float dy){
  float deltaX=this.mouseSensitivity * (dx * 20);
  float deltaY=this.mouseSensitivity * (dy * 20);
  this.prevX=(int)cursorPos.x;
  this.prevY=(int)cursorPos.y;
  this.cursorPos.x+=deltaX;
  this.cursorPos.y+=deltaY;
  clamp();
}",0.9858064516129031
86770,"/** 
 * Moves the cursor to the specified location
 * @param x
 * @param y
 */
public void moveTo(int x,int y){
  if (isVisible()) {
    float deltaX=this.mouseSensitivity * (this.prevX - x);
    float deltaY=this.mouseSensitivity * (this.prevY - y);
    this.cursorPos.x-=deltaX;
    this.cursorPos.y-=deltaY;
    this.prevX=x;
    this.prevY=y;
  }
}","/** 
 * Moves the cursor to the specified location
 * @param x
 * @param y
 */
public void moveTo(int x,int y){
  if (isVisible()) {
    float deltaX=this.mouseSensitivity * (this.prevX - x);
    float deltaY=this.mouseSensitivity * (this.prevY - y);
    this.cursorPos.x-=deltaX;
    this.cursorPos.y-=deltaY;
    this.prevX=x;
    this.prevY=y;
    clamp();
  }
}",0.9818688981868898
86771,"public Integer getTileId(int id){
  Tileset bestmatch=null;
  for (  Tileset t : tilesets) {
    if (id >= t.getStartId()) {
      if (bestmatch == null || bestmatch.getStartId() < t.getStartId()) {
        bestmatch=t;
      }
    }
  }
  if (bestmatch != null) {
    return bestmatch.getTileId(id);
  }
  return null;
}","public Integer getTileId(int id){
  Tileset bestmatch=null;
  for (  Tileset t : tilesets) {
    if (id >= t.getStartId()) {
      if (bestmatch == null || bestmatch.getStartId() < t.getStartId()) {
        bestmatch=t;
      }
    }
  }
  if (bestmatch != null) {
    return bestmatch.getTileId(id);
  }
  return -1;
}",0.990625
86772,"@Override public void updateState(NetEntity state,long time){
  super.updateState(state,time);
  if (state instanceof NetPlayer) {
    NetPlayer ps=(NetPlayer)state;
    this.currentState=State.fromNetValue(ps.state);
    int newHealth=ps.health;
    this.damageDelta=newHealth - this.health;
    this.health=ps.health;
    this.stamina=ps.stamina;
    this.numberOfGrenades=ps.grenades;
    if (ps.isOperatingVehicle) {
      if (this.vehicle == null || this.vehicle.getId() != ps.vehicleId) {
        this.vehicle=game.getVehicleById(ps.vehicleId);
      }
    }
 else {
      this.vehicle=null;
      updateWeaponState(ps.weapon,time);
    }
  }
 else {
    NetPlayerPartial ps=(NetPlayerPartial)state;
    this.currentState=State.fromNetValue(ps.state);
    int newHealth=ps.health;
    this.damageDelta=newHealth - this.health;
    this.health=ps.health;
    if (ps.isOperatingVehicle) {
      if (this.vehicle == null || this.vehicle.getId() != ps.vehicleId) {
        this.vehicle=game.getVehicleById(ps.vehicleId);
      }
    }
 else {
      updateWeaponState(ps.weapon,time);
    }
  }
}","@Override public void updateState(NetEntity state,long time){
  super.updateState(state,time);
  if (state instanceof NetPlayer) {
    NetPlayer ps=(NetPlayer)state;
    this.currentState=State.fromNetValue(ps.state);
    int newHealth=ps.health;
    this.damageDelta=newHealth - this.health;
    this.health=ps.health;
    this.stamina=ps.stamina;
    this.numberOfGrenades=ps.grenades;
    if (ps.isOperatingVehicle) {
      if (this.vehicle == null || this.vehicle.getId() != ps.vehicleId) {
        this.vehicle=game.getVehicleById(ps.vehicleId);
      }
    }
 else {
      this.vehicle=null;
      updateWeaponState(ps.weapon,time);
    }
  }
 else {
    NetPlayerPartial ps=(NetPlayerPartial)state;
    this.currentState=State.fromNetValue(ps.state);
    int newHealth=ps.health;
    this.damageDelta=newHealth - this.health;
    this.health=ps.health;
    if (ps.isOperatingVehicle) {
      if (this.vehicle == null || this.vehicle.getId() != ps.vehicleId) {
        this.vehicle=game.getVehicleById(ps.vehicleId);
      }
    }
 else {
      if (this.vehicle != null) {
        this.vehicle.setOperator(null);
      }
      updateWeaponState(ps.weapon,time);
    }
  }
}",0.9639718804920914
86773,"@Override public void updateState(NetEntity state,long time){
  super.updateState(state,time);
  NetTank netTank=(NetTank)state;
  this.currentState=State.fromNetValue(netTank.state);
  this.orientation=(float)Math.toRadians(netTank.orientation);
  this.turretOrientation=(float)Math.toRadians(netTank.turretOrientation);
  this.turretFacing.set(1,0);
  Vector2f.Vector2fRotate(this.turretFacing,this.turretOrientation,this.turretFacing);
  this.facing.set(this.turretFacing);
  this.primaryWeaponState=Weapon.State.fromNet(netTank.primaryWeaponState);
  this.secondaryWeaponState=Weapon.State.fromNet(netTank.secondaryWeaponState);
  Vector2f center=new Vector2f(getPos());
  center.x+=WeaponConstants.TANK_AABB_WIDTH / 2f;
  center.y+=WeaponConstants.TANK_AABB_HEIGHT / 2f;
  this.vehicleOOB.update(orientation,center);
  if (prevState != null && nextState != null) {
    if (prevState.posX != nextState.posX || prevState.posY != nextState.posY) {
      float distanceSq=(nextState.posX - previousTrackMark.x) * (nextState.posX - previousTrackMark.x) + (nextState.posY - previousTrackMark.y) * (nextState.posY - previousTrackMark.y);
      if (distanceSq > 12 * 12) {
        previousTrackMark.set(nextState.posX,nextState.posY);
        trackMarkOffset.set(10,-15);
        Vector2f.Vector2fRotate(trackMarkOffset,vehicleOOB.orientation,trackMarkOffset);
        Vector2f.Vector2fAdd(vehicleOOB.topLeft,trackMarkOffset,trackMarkOffset);
        this.effects.addTankTrackMark(getId(),this.trackMarkOffset,this.orientation);
        trackMarkOffset.set(10,15);
        Vector2f.Vector2fRotate(trackMarkOffset,vehicleOOB.orientation,trackMarkOffset);
        Vector2f.Vector2fAdd(vehicleOOB.bottomLeft,trackMarkOffset,trackMarkOffset);
        this.effects.addTankTrackMark(getId(),trackMarkOffset,this.orientation);
      }
    }
  }
}","@Override public void updateState(NetEntity state,long time){
  super.updateState(state,time);
  NetTank netTank=(NetTank)state;
  this.currentState=State.fromNetValue(netTank.state);
  this.orientation=(float)Math.toRadians(netTank.orientation);
  this.turretOrientation=(float)Math.toRadians(netTank.turretOrientation);
  this.turretFacing.set(1,0);
  Vector2f.Vector2fRotate(this.turretFacing,this.turretOrientation,this.turretFacing);
  this.facing.set(this.turretFacing);
  this.primaryWeaponState=Weapon.State.fromNet(netTank.primaryWeaponState);
  this.secondaryWeaponState=Weapon.State.fromNet(netTank.secondaryWeaponState);
  Vector2f center=new Vector2f(getPos());
  center.x+=WeaponConstants.TANK_AABB_WIDTH / 2f;
  center.y+=WeaponConstants.TANK_AABB_HEIGHT / 2f;
  this.vehicleOOB.update(orientation,center);
  if (netTank.operatorId > 0) {
    ClientPlayer clientPlayer=game.getPlayers().getPlayer(netTank.operatorId);
    setOperator(clientPlayer.getEntity());
  }
 else {
    setOperator(null);
  }
  if (prevState != null && nextState != null) {
    if (prevState.posX != nextState.posX || prevState.posY != nextState.posY) {
      float distanceSq=(nextState.posX - previousTrackMark.x) * (nextState.posX - previousTrackMark.x) + (nextState.posY - previousTrackMark.y) * (nextState.posY - previousTrackMark.y);
      if (distanceSq > 12 * 12) {
        previousTrackMark.set(nextState.posX,nextState.posY);
        trackMarkOffset.set(10,-15);
        Vector2f.Vector2fRotate(trackMarkOffset,vehicleOOB.orientation,trackMarkOffset);
        Vector2f.Vector2fAdd(vehicleOOB.topLeft,trackMarkOffset,trackMarkOffset);
        this.effects.addTankTrackMark(getId(),this.trackMarkOffset,this.orientation);
        trackMarkOffset.set(10,15);
        Vector2f.Vector2fRotate(trackMarkOffset,vehicleOOB.orientation,trackMarkOffset);
        Vector2f.Vector2fAdd(vehicleOOB.bottomLeft,trackMarkOffset,trackMarkOffset);
        this.effects.addTankTrackMark(getId(),trackMarkOffset,this.orientation);
      }
    }
  }
}",0.95006468305304
86774,"public void sprint(){
  if (currentState != State.DEAD && stamina > 0 && !firing && !wasSprinting && recoveryTime <= 0) {
    Weapon weapon=this.inventory.currentItem();
    if (weapon == null || !weapon.getType().equals(Type.ROCKET_LAUNCHER)) {
      if (currentState != State.SPRINTING) {
        game.emitSound(getId(),SoundType.RUFFLE,getCenterPos());
      }
      currentState=State.SPRINTING;
      return;
    }
  }
  wasSprinting=true;
  currentState=State.RUNNING;
}","public void sprint(){
  if (currentState != State.DEAD && stamina > 0 && !firing && !wasSprinting && recoveryTime <= 0) {
    Weapon weapon=this.inventory.currentItem();
    boolean isReady=weapon != null ? weapon.isReady() : true;
    if (weapon == null || !weapon.getType().equals(Type.ROCKET_LAUNCHER) && isReady) {
      if (currentState != State.SPRINTING) {
        game.emitSound(getId(),SoundType.RUFFLE,getCenterPos());
      }
      currentState=State.SPRINTING;
      return;
    }
  }
  wasSprinting=true;
  currentState=State.RUNNING;
}",0.928780487804878
86775,"@Override public void handleUserCommand(int keys,float orientation){
  if (isOperatingVehicle()) {
    if (Keys.USE.isDown(previousKeys) && !Keys.USE.isDown(keys)) {
      if (currentState == State.OPERATING_VEHICLE) {
        leaveVehicle();
      }
    }
 else {
      if (currentState == State.OPERATING_VEHICLE) {
        this.operating.handleUserCommand(keys,orientation);
      }
    }
    previousKeys=keys;
  }
 else {
    if (Keys.FIRE.isDown(keys)) {
      firing=true;
    }
 else     if (Keys.FIRE.isDown(previousKeys)) {
      endFire();
      firing=false;
    }
    if (Keys.THROW_GRENADE.isDown(keys)) {
      pullGrenadePin();
    }
    if (Keys.THROW_GRENADE.isDown(previousKeys) && !Keys.THROW_GRENADE.isDown(keys)) {
      throwGrenade();
    }
    if (Keys.USE.isDown(keys)) {
      use();
    }
 else {
      unuse();
    }
    if (Keys.MELEE_ATTACK.isDown(keys)) {
      meleeAttack();
    }
 else     if (Keys.MELEE_ATTACK.isDown(previousKeys)) {
      doneMeleeAttack();
    }
    if (Keys.DROP_WEAPON.isDown(previousKeys) && !Keys.DROP_WEAPON.isDown(keys)) {
      dropItem(true);
    }
    if (Keys.RELOAD.isDown(keys)) {
      reload();
    }
    if (Keys.WALK.isDown(keys)) {
      walk();
    }
 else {
      stopWalking();
    }
    if (Keys.UP.isDown(keys)) {
      moveUp();
    }
 else     if (Keys.DOWN.isDown(keys)) {
      moveDown();
    }
 else {
      noMoveY();
    }
    if (Keys.LEFT.isDown(keys)) {
      moveLeft();
    }
 else     if (Keys.RIGHT.isDown(keys)) {
      moveRight();
    }
 else {
      noMoveX();
    }
    if (Keys.SPRINT.isDown(keys)) {
      if (!inputVel.isZero() && currentState != State.WALKING) {
        sprint();
      }
    }
 else {
      stopSprinting();
    }
    if (Keys.CROUCH.isDown(keys)) {
      crouch();
    }
 else {
      standup();
    }
    if (Keys.WEAPON_SWITCH_UP.isDown(keys)) {
      nextWeapon();
    }
 else     if (Keys.WEAPON_SWITCH_DOWN.isDown(keys)) {
      prevWeapon();
    }
    if (previousOrientation != orientation) {
      setOrientation(orientation);
    }
    this.previousKeys=keys;
    this.previousOrientation=orientation;
  }
}","@Override public void handleUserCommand(int keys,float orientation){
  if (isOperatingVehicle()) {
    if (Keys.USE.isDown(previousKeys) && !Keys.USE.isDown(keys)) {
      if (currentState == State.OPERATING_VEHICLE && !this.operating.isMoving()) {
        leaveVehicle();
      }
    }
 else {
      if (currentState == State.OPERATING_VEHICLE) {
        this.operating.handleUserCommand(keys,orientation);
      }
    }
    previousKeys=keys;
  }
 else {
    if (Keys.FIRE.isDown(keys)) {
      firing=true;
    }
 else     if (Keys.FIRE.isDown(previousKeys)) {
      endFire();
      firing=false;
    }
    if (Keys.THROW_GRENADE.isDown(keys)) {
      pullGrenadePin();
    }
    if (Keys.THROW_GRENADE.isDown(previousKeys) && !Keys.THROW_GRENADE.isDown(keys)) {
      throwGrenade();
    }
    if (Keys.USE.isDown(keys)) {
      use();
    }
 else {
      unuse();
    }
    if (Keys.MELEE_ATTACK.isDown(keys)) {
      meleeAttack();
    }
 else     if (Keys.MELEE_ATTACK.isDown(previousKeys)) {
      doneMeleeAttack();
    }
    if (Keys.DROP_WEAPON.isDown(previousKeys) && !Keys.DROP_WEAPON.isDown(keys)) {
      dropItem(true);
    }
    if (Keys.RELOAD.isDown(keys)) {
      reload();
    }
    if (Keys.WALK.isDown(keys)) {
      walk();
    }
 else {
      stopWalking();
    }
    if (Keys.UP.isDown(keys)) {
      moveUp();
    }
 else     if (Keys.DOWN.isDown(keys)) {
      moveDown();
    }
 else {
      noMoveY();
    }
    if (Keys.LEFT.isDown(keys)) {
      moveLeft();
    }
 else     if (Keys.RIGHT.isDown(keys)) {
      moveRight();
    }
 else {
      noMoveX();
    }
    if (Keys.SPRINT.isDown(keys)) {
      if (!inputVel.isZero() && currentState != State.WALKING) {
        sprint();
      }
    }
 else {
      stopSprinting();
    }
    if (Keys.CROUCH.isDown(keys)) {
      crouch();
    }
 else {
      standup();
    }
    if (Keys.WEAPON_SWITCH_UP.isDown(keys)) {
      nextWeapon();
    }
 else     if (Keys.WEAPON_SWITCH_DOWN.isDown(keys)) {
      prevWeapon();
    }
    if (previousOrientation != orientation) {
      setOrientation(orientation);
    }
    this.previousKeys=keys;
    this.previousOrientation=orientation;
  }
}",0.9930297397769516
86776,"/** 
 * Handles the vehicle time
 * @param timeStep
 */
protected void updateVehicleTime(TimeStep timeStep){
  if (this.vehicleTime > 0) {
    this.vehicleTime-=timeStep.getDeltaTime();
  }
 else {
    if (currentState == State.ENTERING_VEHICLE) {
      currentState=State.OPERATING_VEHICLE;
    }
    if (currentState == State.EXITING_VEHICLE) {
      Vehicle vehicle=getVehicle();
      Vector2f newPos=game.findFreeRandomSpotNotIn(this,vehicle.getBounds(),vehicle.getOBB());
      if (newPos == null) {
        currentState=State.OPERATING_VEHICLE;
      }
 else {
        this.operating.stopOperating(this);
        this.operating=null;
        setCanTakeDamage(true);
        currentState=State.IDLE;
        moveTo(newPos);
      }
    }
  }
}","/** 
 * Handles the vehicle time
 * @param timeStep
 */
protected void updateVehicleTime(TimeStep timeStep){
  if (this.vehicleTime > 0) {
    this.vehicleTime-=timeStep.getDeltaTime();
  }
 else {
    if (currentState == State.ENTERING_VEHICLE) {
      currentState=State.OPERATING_VEHICLE;
    }
 else     if (currentState == State.EXITING_VEHICLE) {
      Vehicle vehicle=getVehicle();
      Vector2f newPos=game.findFreeRandomSpotNotIn(this,vehicle.getBounds(),vehicle.getOBB());
      if (newPos == null) {
        currentState=State.OPERATING_VEHICLE;
      }
 else {
        this.operating.stopOperating(this);
        this.operating=null;
        setCanTakeDamage(true);
        currentState=State.IDLE;
        moveTo(newPos);
      }
    }
 else {
      if (isOperatingVehicle()) {
        currentState=State.OPERATING_VEHICLE;
      }
    }
  }
}",0.9327521793275216
86777,"@Override public boolean update(TimeStep timeStep){
  updateInvincibleTime(timeStep);
  updateVehicleTime(timeStep);
  boolean blocked=false;
  if (!isOperatingVehicle()) {
    updateVelocity(timeStep);
    blocked=super.update(timeStep);
    updateMovementSounds(timeStep);
    updateStamina(timeStep);
    updateWeapons(timeStep);
    updateBombTargetUse(timeStep);
  }
 else {
    moveTo(this.operating.getCenterPos());
  }
  return blocked;
}","@Override public boolean update(TimeStep timeStep){
  updateInvincibleTime(timeStep);
  updateVehicleTime(timeStep);
  boolean blocked=false;
  if (!isOperatingVehicle()) {
    updateVelocity(timeStep);
    blocked=super.update(timeStep);
    updateMovementSounds(timeStep);
    updateStamina(timeStep);
    updateWeapons(timeStep);
    updateBombTargetUse(timeStep);
  }
 else {
    this.operating.operate(this);
    moveTo(this.operating.getCenterPos());
  }
  return blocked;
}",0.9632829373650108
86778,"/** 
 * Creates a new   {@link Bullet}
 * @param isPiercing
 * @return the {@link Bullet}
 */
protected Entity newBullet(boolean isPiercing){
  Vector2f pos=newBulletPosition();
  Vector2f vel=calculateVelocity(owner.getFacing());
  final int speed=1500 + (random.nextInt(10) * 100);
  Bullet bullet=new Bullet(pos,speed,game,owner,vel,damage,isPiercing);
  bullet.setMaxDistance(getBulletRange());
  game.addEntity(bullet);
  return bullet;
}","/** 
 * Creates a new   {@link Bullet}
 * @param isPiercing
 * @return the {@link Bullet}
 */
protected Bullet newBullet(boolean isPiercing){
  Vector2f pos=newBulletPosition();
  Vector2f vel=calculateVelocity(owner.getFacing());
  final int speed=1500 + (random.nextInt(10) * 100);
  Bullet bullet=new Bullet(pos,speed,game,owner,vel,damage,isPiercing);
  bullet.setMaxDistance(getBulletRange());
  game.addEntity(bullet);
  return bullet;
}",0.9864559819413092
86779,"/** 
 * Spawns a new   {@link Rocket}
 * @return the {@link Rocket}
 */
protected Entity newRocket(){
  Vector2f pos=newRocketPosition();
  Vector2f vel=calculateVelocity(owner.getFacing());
  final int speed=650;
  final int splashDamage=80;
  Entity bullet=new Rocket(pos,speed,game,owner,vel,damage,splashDamage);
  game.addEntity(bullet);
  return bullet;
}","/** 
 * Spawns a new   {@link Rocket}
 * @return the {@link Rocket}
 */
protected Rocket newRocket(){
  Vector2f pos=newRocketPosition();
  Vector2f vel=calculateVelocity(owner.getFacing());
  final int speed=650;
  final int splashDamage=80;
  Rocket bullet=new Rocket(pos,speed,game,owner,vel,damage,splashDamage);
  game.addEntity(bullet);
  return bullet;
}",0.9667590027700832
86780,"/** 
 * @param entity
 * @param x
 * @param y
 * @param width
 * @param height
 * @param notIn
 * @return a random position anywhere in the supplied bounds and not in the supplied {@link Rectangle}
 */
public Vector2f getRandomSpotNotIn(Entity entity,int x,int y,int width,int height,Rectangle notIn){
  Vector2f pos=new Vector2f(x + random.nextInt(width),y + random.nextInt(height));
  Rectangle temp=new Rectangle(entity.getBounds());
  temp.setLocation(pos);
  while ((map.rectCollides(temp) && !map.hasWorldCollidableTile(temp.x,temp.y)) || notIn.intersects(temp)) {
    pos.x=x + random.nextInt(width);
    pos.y=y + random.nextInt(height);
    temp.setLocation(pos);
  }
  return pos;
}","/** 
 * @param entity
 * @param x
 * @param y
 * @param width
 * @param height
 * @param notIn
 * @return a random position anywhere in the supplied bounds and not in the supplied {@link Rectangle}
 */
public Vector2f getRandomSpotNotIn(Entity entity,int x,int y,int width,int height,Rectangle notIn){
  return game.findFreeRandomSpotNotIn(entity,x,y,width,height,notIn);
}",0.5821596244131455
86781,"/** 
 * @param entity
 * @param x
 * @param y
 * @param width
 * @param height
 * @return a random position anywhere in the supplied bounds
 */
public Vector2f getRandomSpot(Entity entity,int x,int y,int width,int height){
}","/** 
 * @param entity
 * @param x
 * @param y
 * @param width
 * @param height
 * @return a random position anywhere in the supplied bounds
 */
public Vector2f getRandomSpot(Entity entity,int x,int y,int width,int height){
  return game.findFreeRandomSpot(entity,x,y,width,height);
}",0.883629191321499
86782,"@Override public void updateState(NetEntity state,long time){
  super.updateState(state,time);
  if (state instanceof NetPlayer) {
    NetPlayer ps=(NetPlayer)state;
    this.currentState=State.fromNetValue(ps.state);
    int newHealth=ps.health;
    this.damageDelta=newHealth - this.health;
    this.health=ps.health;
    this.stamina=ps.stamina;
    this.numberOfGrenades=ps.grenades;
    if (ps.isOperatingVehicle) {
      if (this.vehicle == null || this.vehicle.getId() != ps.vehicleId) {
        this.vehicle=game.getVehicleById(ps.vehicleId);
      }
    }
 else {
      updateWeaponState(ps.weapon,time);
    }
  }
 else {
    NetPlayerPartial ps=(NetPlayerPartial)state;
    this.currentState=State.fromNetValue(ps.state);
    int newHealth=ps.health;
    this.damageDelta=newHealth - this.health;
    this.health=ps.health;
    if (ps.isOperatingVehicle) {
      if (this.vehicle == null || this.vehicle.getId() != ps.vehicleId) {
        this.vehicle=game.getVehicleById(ps.vehicleId);
      }
    }
 else {
      updateWeaponState(ps.weapon,time);
    }
  }
}","@Override public void updateState(NetEntity state,long time){
  super.updateState(state,time);
  if (state instanceof NetPlayer) {
    NetPlayer ps=(NetPlayer)state;
    this.currentState=State.fromNetValue(ps.state);
    int newHealth=ps.health;
    this.damageDelta=newHealth - this.health;
    this.health=ps.health;
    this.stamina=ps.stamina;
    this.numberOfGrenades=ps.grenades;
    if (ps.isOperatingVehicle) {
      if (this.vehicle == null || this.vehicle.getId() != ps.vehicleId) {
        this.vehicle=game.getVehicleById(ps.vehicleId);
      }
    }
 else {
      this.vehicle=null;
      updateWeaponState(ps.weapon,time);
    }
  }
 else {
    NetPlayerPartial ps=(NetPlayerPartial)state;
    this.currentState=State.fromNetValue(ps.state);
    int newHealth=ps.health;
    this.damageDelta=newHealth - this.health;
    this.health=ps.health;
    if (ps.isOperatingVehicle) {
      if (this.vehicle == null || this.vehicle.getId() != ps.vehicleId) {
        this.vehicle=game.getVehicleById(ps.vehicleId);
      }
    }
 else {
      updateWeaponState(ps.weapon,time);
    }
  }
}",0.9884739511295528
86783,"/** 
 * Loads the graphics
 */
public static void load(){
{
    Pixmap map=TextureUtil.createPixmap(128,128);
    map.setColor(Color.BLACK);
    map.fillRectangle(0,0,map.getWidth(),map.getHeight());
    BLACK_IMAGE.setTexture(new Texture(map));
  }
  shotgunImage=loadImage(""String_Node_Str"",0xff00ff);
  rpgImage=loadImage(""String_Node_Str"",0xff00ff);
  grenadeImage=loadImage(""String_Node_Str"");
  grenadeIcon=TextureUtil.resizeImage(grenadeImage,12,12);
  springfieldImage=loadImage(""String_Node_Str"",0xff00ff);
  thompsonImage=loadImage(""String_Node_Str"",0xff00ff);
  m1GarandImage=loadImage(""String_Node_Str"",0xff00ff);
  kar98Image=loadImage(""String_Node_Str"",0xff00ff);
  mp44Image=loadImage(""String_Node_Str"",0xff00ff);
  mp40Image=loadImage(""String_Node_Str"",0xff00ff);
  pistolImage=loadImage(""String_Node_Str"",0xff00ff);
  riskerImage=loadImage(""String_Node_Str"",0xff00ff);
  bombImage=loadImage(""String_Node_Str"",0xff00ff);
  computerImage=loadImage(""String_Node_Str"");
  alliedBodyModel=new Model(loadImage(""String_Node_Str""),201,173,2,3);
  alliedWalkModel=new Model(loadImage(""String_Node_Str""),372,196,2,4);
  alliedSprintModel=new Model(loadImage(""String_Node_Str""),256,190,2,3);
  alliedCrouchLegs=loadImage(""String_Node_Str"");
  axisBodyModel=new Model(loadImage(""String_Node_Str""),201,173,2,3);
  axisWalkModel=new Model(loadImage(""String_Node_Str""),372,196,2,4);
  axisSprintModel=new Model(loadImage(""String_Node_Str""),256,190,2,3);
  axisCrouchLegs=loadImage(""String_Node_Str"");
  shotgunIcon=loadImage(""String_Node_Str"");
  rocketIcon=loadImage(""String_Node_Str"");
  springfieldIcon=loadImage(""String_Node_Str"");
  thompsonIcon=loadImage(""String_Node_Str"");
  m1GarandIcon=loadImage(""String_Node_Str"");
  kar98Icon=loadImage(""String_Node_Str"");
  mp44Icon=loadImage(""String_Node_Str"");
  mp40Icon=loadImage(""String_Node_Str"");
  pistolIcon=loadImage(""String_Node_Str"");
  riskerIcon=loadImage(""String_Node_Str"");
  explosionImage=TextureUtil.splitImage(loadImage(""String_Node_Str""),2,2);
  TextureRegion tmp=loadImage(""String_Node_Str"");
  tmp.flip(false,false);
  fireImage=TextureUtil.splitImage(tmp,1,5);
  rocketImage=TextureUtil.splitImage(loadImage(""String_Node_Str"",0xff00ff),1,1);
  deathsImage=loadImage(""String_Node_Str"");
  alliedBackDeathImage=TextureUtil.splitImage(TextureUtil.subImage(loadImage(""String_Node_Str""),0,0,300,210),2,4);
  alliedFrontDeathImage=TextureUtil.splitImage(TextureUtil.subImage(loadImage(""String_Node_Str""),0,0,310,175),2,6);
  axisBackDeathImage=TextureUtil.splitImage(TextureUtil.subImage(loadImage(""String_Node_Str""),0,0,300,210),2,4);
  axisFrontDeathImage=TextureUtil.splitImage(TextureUtil.subImage(loadImage(""String_Node_Str""),0,0,310,180),2,6);
  bloodImages=TextureUtil.splitImage(loadImage(""String_Node_Str""),2,4);
  gibImages=TextureUtil.splitImage(loadImage(""String_Node_Str""),2,2);
  smokeImage=loadImage(""String_Node_Str"");
  final int smallIconWidth=64, smallIconHeight=32;
  smallAssaultRifleIcon=TextureUtil.resizeImage(thompsonIcon,smallIconWidth,smallIconHeight);
  smallShotgunIcon=TextureUtil.resizeImage(shotgunIcon,smallIconWidth,smallIconHeight);
  smallRocketIcon=TextureUtil.resizeImage(rocketIcon,smallIconWidth,smallIconHeight);
  smallSniperRifleIcon=TextureUtil.resizeImage(springfieldIcon,smallIconWidth,smallIconHeight);
  smallM1GarandIcon=TextureUtil.resizeImage(m1GarandIcon,smallIconWidth,smallIconHeight);
  smallGrenadeIcon=TextureUtil.resizeImage(grenadeImage,smallIconWidth / 3,smallIconHeight / 3);
  smallExplosionIcon=TextureUtil.resizeImage(explosionImage[0],smallIconWidth / 2,smallIconHeight / 2);
  smallkar98Icon=TextureUtil.resizeImage(kar98Icon,smallIconWidth,smallIconHeight);
  smallmp44Icon=TextureUtil.resizeImage(mp44Icon,smallIconWidth,smallIconHeight);
  smallmp40Icon=TextureUtil.resizeImage(mp40Icon,smallIconWidth,smallIconHeight);
  smallPistolIcon=TextureUtil.resizeImage(pistolIcon,smallIconWidth,smallIconHeight);
  smallRiskerIcon=TextureUtil.resizeImage(riskerIcon,smallIconWidth,smallIconHeight);
  cursorImg=loadImage(""String_Node_Str"");
  thompsonMuzzleFlash=TextureUtil.splitImage(loadImage(""String_Node_Str""),2,2);
  springfieldMuzzleFlash=TextureUtil.splitImage(loadImage(""String_Node_Str""),2,2);
  m1GarandMuzzleFlash=TextureUtil.splitImage(loadImage(""String_Node_Str""),2,2);
  kar98MuzzleFlash=TextureUtil.splitImage(loadImage(""String_Node_Str""),2,2);
  mp40MuzzleFlash=TextureUtil.splitImage(loadImage(""String_Node_Str""),2,2);
  mp44MuzzleFlash=TextureUtil.splitImage(loadImage(""String_Node_Str""),2,2);
  shotgunMuzzleFlash=TextureUtil.splitImage(loadImage(""String_Node_Str""),2,2);
  rocketMuzzleFlash=TextureUtil.splitImage(loadImage(""String_Node_Str""),2,2);
  riskerMuzzleFlash=TextureUtil.splitImage(loadImage(""String_Node_Str""),2,2);
  healthIcon=TextureUtil.resizeImage(loadImage(""String_Node_Str""),12,12);
  staminaIcon=TextureUtil.resizeImage(loadImage(""String_Node_Str""),12,12);
  TextureRegion navArrow=loadImage(""String_Node_Str"");
  upArrow=new Sprite(navArrow);
  upArrow.flip(false,true);
  downArrow=new Sprite(navArrow);
  fireWeaponLight=loadImage(""String_Node_Str"");
  lightMap=loadImage(""String_Node_Str"");
  flashLight=loadImage(""String_Node_Str"");
  bullet=loadImage(""String_Node_Str"");
  tankTracks=TextureUtil.splitImage(TextureUtil.subImage(loadImage(""String_Node_Str""),0,0,108,144),1,1);
  tankTurret=TextureUtil.splitImage(TextureUtil.subImage(loadImage(""String_Node_Str""),0,0,108,175),1,1)[0];
  rippleImg=loadImage(""String_Node_Str"");
}","/** 
 * Loads the graphics
 */
public static void load(){
{
    Pixmap map=TextureUtil.createPixmap(128,128);
    map.setColor(Color.BLACK);
    map.fillRectangle(0,0,map.getWidth(),map.getHeight());
    BLACK_IMAGE.setTexture(new Texture(map));
  }
  shotgunImage=loadImage(""String_Node_Str"",0xff00ff);
  rpgImage=loadImage(""String_Node_Str"",0xff00ff);
  grenadeImage=loadImage(""String_Node_Str"");
  grenadeIcon=TextureUtil.resizeImage(grenadeImage,12,12);
  springfieldImage=loadImage(""String_Node_Str"",0xff00ff);
  thompsonImage=loadImage(""String_Node_Str"",0xff00ff);
  m1GarandImage=loadImage(""String_Node_Str"",0xff00ff);
  kar98Image=loadImage(""String_Node_Str"",0xff00ff);
  mp44Image=loadImage(""String_Node_Str"",0xff00ff);
  mp40Image=loadImage(""String_Node_Str"",0xff00ff);
  pistolImage=loadImage(""String_Node_Str"",0xff00ff);
  riskerImage=loadImage(""String_Node_Str"",0xff00ff);
  bombImage=loadImage(""String_Node_Str"",0xff00ff);
  bombImage.flip(false,true);
  computerImage=loadImage(""String_Node_Str"");
  alliedBodyModel=new Model(loadImage(""String_Node_Str""),201,173,2,3);
  alliedWalkModel=new Model(loadImage(""String_Node_Str""),372,196,2,4);
  alliedSprintModel=new Model(loadImage(""String_Node_Str""),256,190,2,3);
  alliedCrouchLegs=loadImage(""String_Node_Str"");
  axisBodyModel=new Model(loadImage(""String_Node_Str""),201,173,2,3);
  axisWalkModel=new Model(loadImage(""String_Node_Str""),372,196,2,4);
  axisSprintModel=new Model(loadImage(""String_Node_Str""),256,190,2,3);
  axisCrouchLegs=loadImage(""String_Node_Str"");
  shotgunIcon=loadImage(""String_Node_Str"");
  rocketIcon=loadImage(""String_Node_Str"");
  springfieldIcon=loadImage(""String_Node_Str"");
  thompsonIcon=loadImage(""String_Node_Str"");
  m1GarandIcon=loadImage(""String_Node_Str"");
  kar98Icon=loadImage(""String_Node_Str"");
  mp44Icon=loadImage(""String_Node_Str"");
  mp40Icon=loadImage(""String_Node_Str"");
  pistolIcon=loadImage(""String_Node_Str"");
  riskerIcon=loadImage(""String_Node_Str"");
  explosionImage=TextureUtil.splitImage(loadImage(""String_Node_Str""),2,2);
  TextureRegion tmp=loadImage(""String_Node_Str"");
  tmp.flip(false,false);
  fireImage=TextureUtil.splitImage(tmp,1,5);
  rocketImage=TextureUtil.splitImage(loadImage(""String_Node_Str"",0xff00ff),1,1);
  deathsImage=loadImage(""String_Node_Str"");
  alliedBackDeathImage=TextureUtil.splitImage(TextureUtil.subImage(loadImage(""String_Node_Str""),0,0,300,210),2,4);
  alliedFrontDeathImage=TextureUtil.splitImage(TextureUtil.subImage(loadImage(""String_Node_Str""),0,0,310,175),2,6);
  axisBackDeathImage=TextureUtil.splitImage(TextureUtil.subImage(loadImage(""String_Node_Str""),0,0,300,210),2,4);
  axisFrontDeathImage=TextureUtil.splitImage(TextureUtil.subImage(loadImage(""String_Node_Str""),0,0,310,180),2,6);
  bloodImages=TextureUtil.splitImage(loadImage(""String_Node_Str""),2,4);
  gibImages=TextureUtil.splitImage(loadImage(""String_Node_Str""),2,2);
  smokeImage=loadImage(""String_Node_Str"");
  final int smallIconWidth=64, smallIconHeight=32;
  smallAssaultRifleIcon=TextureUtil.resizeImage(thompsonIcon,smallIconWidth,smallIconHeight);
  smallShotgunIcon=TextureUtil.resizeImage(shotgunIcon,smallIconWidth,smallIconHeight);
  smallRocketIcon=TextureUtil.resizeImage(rocketIcon,smallIconWidth,smallIconHeight);
  smallSniperRifleIcon=TextureUtil.resizeImage(springfieldIcon,smallIconWidth,smallIconHeight);
  smallM1GarandIcon=TextureUtil.resizeImage(m1GarandIcon,smallIconWidth,smallIconHeight);
  smallGrenadeIcon=TextureUtil.resizeImage(grenadeImage,smallIconWidth / 3,smallIconHeight / 3);
  smallExplosionIcon=TextureUtil.resizeImage(explosionImage[0],smallIconWidth / 2,smallIconHeight / 2);
  smallkar98Icon=TextureUtil.resizeImage(kar98Icon,smallIconWidth,smallIconHeight);
  smallmp44Icon=TextureUtil.resizeImage(mp44Icon,smallIconWidth,smallIconHeight);
  smallmp40Icon=TextureUtil.resizeImage(mp40Icon,smallIconWidth,smallIconHeight);
  smallPistolIcon=TextureUtil.resizeImage(pistolIcon,smallIconWidth,smallIconHeight);
  smallRiskerIcon=TextureUtil.resizeImage(riskerIcon,smallIconWidth,smallIconHeight);
  cursorImg=loadImage(""String_Node_Str"");
  thompsonMuzzleFlash=TextureUtil.splitImage(loadImage(""String_Node_Str""),2,2);
  springfieldMuzzleFlash=TextureUtil.splitImage(loadImage(""String_Node_Str""),2,2);
  m1GarandMuzzleFlash=TextureUtil.splitImage(loadImage(""String_Node_Str""),2,2);
  kar98MuzzleFlash=TextureUtil.splitImage(loadImage(""String_Node_Str""),2,2);
  mp40MuzzleFlash=TextureUtil.splitImage(loadImage(""String_Node_Str""),2,2);
  mp44MuzzleFlash=TextureUtil.splitImage(loadImage(""String_Node_Str""),2,2);
  shotgunMuzzleFlash=TextureUtil.splitImage(loadImage(""String_Node_Str""),2,2);
  rocketMuzzleFlash=TextureUtil.splitImage(loadImage(""String_Node_Str""),2,2);
  riskerMuzzleFlash=TextureUtil.splitImage(loadImage(""String_Node_Str""),2,2);
  healthIcon=TextureUtil.resizeImage(loadImage(""String_Node_Str""),12,12);
  staminaIcon=TextureUtil.resizeImage(loadImage(""String_Node_Str""),12,12);
  TextureRegion navArrow=loadImage(""String_Node_Str"");
  upArrow=new Sprite(navArrow);
  upArrow.flip(false,true);
  downArrow=new Sprite(navArrow);
  fireWeaponLight=loadImage(""String_Node_Str"");
  lightMap=loadImage(""String_Node_Str"");
  flashLight=loadImage(""String_Node_Str"");
  bullet=loadImage(""String_Node_Str"");
  tankTracks=TextureUtil.splitImage(TextureUtil.subImage(loadImage(""String_Node_Str""),0,0,108,144),1,1);
  tankTurret=TextureUtil.splitImage(TextureUtil.subImage(loadImage(""String_Node_Str""),0,0,108,175),1,1)[0];
  rippleImg=loadImage(""String_Node_Str"");
}",0.9972806381435824
86784,"/** 
 * @param pos
 * @param timeToLive
 * @param timeToNextSpawn
 */
public RocketTrailEmitter(Vector2f pos,int timeToLive,int timeToNextSpawn){
  super(pos,timeToLive,timeToNextSpawn);
  setDieInstantly(false);
  width=Art.smokeImage.getRegionWidth();
  height=Art.smokeImage.getRegionHeight();
}","/** 
 * @param pos
 * @param timeToLive
 * @param timeToNextSpawn
 */
public RocketTrailEmitter(Vector2f pos,int timeToLive,int timeToNextSpawn,int width,int height){
  super(pos,timeToLive,timeToNextSpawn);
  setDieInstantly(false);
  this.width=width;
  this.height=height;
}",0.7895652173913044
86785,"private void createUI(){
  this.panelView=new PanelView<>();
  this.optionsPanel=new Panel();
  this.animationPanel=new Panel();
  this.steppingPanel=new Panel();
  this.loadAnimation=new Button();
  Vector2f uiPos=new Vector2f();
  uiPos.x=app.getScreenWidth() / 2 + 50;
  uiPos.y=app.getScreenHeight() - 20;
  Button cancelBtn=setupButton(uiPos,""String_Node_Str"");
  cancelBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      app.popScreen();
      Sounds.playGlobalSound(Sounds.uiNavigate);
    }
  }
);
  int startX=app.getScreenWidth() / 2;
  int startY=app.getScreenHeight() / 6;
  uiPos.x=startX;
  uiPos.y=startY;
  int xSpacing=180;
  int ySpacing=50;
  final TextBox pathBox=setupTextBox(uiPos,500,""String_Node_Str"",""String_Node_Str"");
  uiPos.x=pathBox.getBounds().x;
  uiPos.y+=ySpacing;
  final TextBox rowBox=setupTextBox(uiPos,25,""String_Node_Str"",""String_Node_Str"");
  uiPos.x+=xSpacing;
  final TextBox colBox=setupTextBox(uiPos,25,""String_Node_Str"",""String_Node_Str"");
  uiPos.x+=xSpacing;
  final TextBox fpsBox=setupTextBox(uiPos,40,""String_Node_Str"",""String_Node_Str"");
  uiPos.x+=xSpacing;
  final TextBox backgroundColorBox=setupTextBox(uiPos,70,""String_Node_Str"",Integer.toHexString(backgroundColor));
  uiPos.x=pathBox.getBounds().x;
  uiPos.y+=ySpacing;
  final TextBox subImageX=setupTextBox(uiPos,25,""String_Node_Str"",""String_Node_Str"");
  uiPos.x+=xSpacing;
  final TextBox subImageY=setupTextBox(uiPos,25,""String_Node_Str"",""String_Node_Str"");
  uiPos.x+=xSpacing;
  final TextBox subImageWidth=setupTextBox(uiPos,40,""String_Node_Str"",""String_Node_Str"");
  uiPos.x+=xSpacing;
  final TextBox subImageHeight=setupTextBox(uiPos,40,""String_Node_Str"",""String_Node_Str"");
  uiPos.x=pathBox.getBounds().x + pathBox.getBounds().width + 80;
  uiPos.y=pathBox.getBounds().y + 15;
  loadAnimation=setupButton(uiPos,""String_Node_Str"");
  loadAnimation.getTextLabel().setFont(theme.getPrimaryFontName());
  loadAnimation.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      String rowTxt=rowBox.getText();
      String colTxt=colBox.getText();
      String fpsTxt=fpsBox.getText();
      String subXTxt=subImageX.getText();
      String subYTxt=subImageY.getText();
      String subWidthTxt=subImageWidth.getText();
      String subHeightTxt=subImageHeight.getText();
      String backgroundColorTxt=backgroundColorBox.getText();
      try {
        backgroundColor=new BigInteger(backgroundColorTxt,16).intValue();
        int rows=Integer.parseInt(rowTxt);
        int cols=Integer.parseInt(colTxt);
        int frameTime=Integer.parseInt(fpsTxt);
        int[] frames=new int[rows * cols];
        for (int i=0; i < frames.length; i++) {
          frames[i]=frameTime;
        }
        TextureRegion tex=Art.loadImage(pathBox.getText());
        int subX=0;
        int subY=0;
        int subWidth=tex.getRegionWidth();
        int subHeight=tex.getRegionHeight();
        if (notEmpty(subXTxt)) {
          subX=Integer.parseInt(subXTxt);
        }
        if (notEmpty(subYTxt)) {
          subY=Integer.parseInt(subYTxt);
        }
        if (notEmpty(subWidthTxt)) {
          subWidth=Integer.parseInt(subWidthTxt);
        }
        if (notEmpty(subHeightTxt)) {
          subHeight=Integer.parseInt(subHeightTxt);
        }
        tex=TextureUtil.subImage(tex,subX,subY,subWidth,subHeight);
        animation=Art.newAnimatedSplitImage(frames,tex,rows,cols);
      }
 catch (      Exception e) {
      }
    }
  }
);
  uiPos.x=app.getScreenWidth() / 3;
  uiPos.y=app.getScreenHeight() - 90;
  Button stopBtn=setupButton(uiPos,""String_Node_Str"");
  animationPanel.addWidget(stopBtn);
  stopBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      stepping=true;
    }
  }
);
  uiPos.x+=xSpacing;
  Button slowBtn=setupButton(uiPos,""String_Node_Str"");
  animationPanel.addWidget(slowBtn);
  slowBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      String fpsTxt=fpsBox.getText();
      try {
        int fps=Integer.parseInt(fpsTxt);
        fpsBox.setText((fps + 10) + ""String_Node_Str"");
        loadAnimation.click();
      }
 catch (      Exception e) {
      }
    }
  }
);
  uiPos.x+=xSpacing;
  Button fasterBtn=setupButton(uiPos,""String_Node_Str"");
  animationPanel.addWidget(fasterBtn);
  fasterBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      String fpsTxt=fpsBox.getText();
      try {
        int fps=Integer.parseInt(fpsTxt);
        if (fps > 0) {
          fpsBox.setText((fps - 10) + ""String_Node_Str"");
          loadAnimation.click();
        }
      }
 catch (      Exception e) {
      }
    }
  }
);
  uiPos.x=app.getScreenWidth() / 3;
  uiPos.y=app.getScreenHeight() - 90;
  Button playBtn=setupButton(uiPos,""String_Node_Str"");
  steppingPanel.addWidget(playBtn);
  playBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      stepping=false;
    }
  }
);
  uiPos.x+=xSpacing;
  Button nextFrameBtn=setupButton(uiPos,""String_Node_Str"");
  steppingPanel.addWidget(nextFrameBtn);
  nextFrameBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      nextFrame();
    }
  }
);
  uiPos.x+=xSpacing;
  Button prevFrameBtn=setupButton(uiPos,""String_Node_Str"");
  steppingPanel.addWidget(prevFrameBtn);
  prevFrameBtn.getTextLabel().setFont(theme.getPrimaryFontName());
  prevFrameBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      prevFrame();
    }
  }
);
}","private void createUI(){
  this.panelView=new PanelView<>();
  this.optionsPanel=new Panel();
  this.animationPanel=new Panel();
  this.steppingPanel=new Panel();
  this.loadAnimation=new Button();
  Vector2f uiPos=new Vector2f();
  uiPos.x=app.getScreenWidth() / 2 + 50;
  uiPos.y=app.getScreenHeight() - 20;
  Button cancelBtn=setupButton(uiPos,""String_Node_Str"");
  cancelBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      app.popScreen();
      Sounds.playGlobalSound(Sounds.uiNavigate);
    }
  }
);
  int startX=app.getScreenWidth() / 2;
  int startY=app.getScreenHeight() / 6;
  uiPos.x=startX;
  uiPos.y=startY;
  int xSpacing=180;
  int ySpacing=50;
  final TextBox pathBox=setupTextBox(uiPos,500,""String_Node_Str"",""String_Node_Str"");
  uiPos.x=pathBox.getBounds().x;
  uiPos.y+=ySpacing;
  final TextBox rowBox=setupTextBox(uiPos,25,""String_Node_Str"",""String_Node_Str"");
  uiPos.x+=xSpacing;
  final TextBox colBox=setupTextBox(uiPos,25,""String_Node_Str"",""String_Node_Str"");
  uiPos.x+=xSpacing;
  final TextBox fpsBox=setupTextBox(uiPos,40,""String_Node_Str"",""String_Node_Str"");
  uiPos.x+=xSpacing;
  final TextBox backgroundColorBox=setupTextBox(uiPos,70,""String_Node_Str"",Integer.toHexString(backgroundColor));
  uiPos.x=pathBox.getBounds().x;
  uiPos.y+=ySpacing;
  final TextBox subImageX=setupTextBox(uiPos,25,""String_Node_Str"",""String_Node_Str"");
  uiPos.x+=xSpacing;
  final TextBox subImageY=setupTextBox(uiPos,25,""String_Node_Str"",""String_Node_Str"");
  uiPos.x+=xSpacing;
  final TextBox subImageWidth=setupTextBox(uiPos,40,""String_Node_Str"",""String_Node_Str"");
  uiPos.x+=xSpacing;
  final TextBox subImageHeight=setupTextBox(uiPos,40,""String_Node_Str"",""String_Node_Str"");
  uiPos.x=pathBox.getBounds().x + pathBox.getBounds().width + 80;
  uiPos.y=pathBox.getBounds().y + 15;
  loadAnimation=setupButton(uiPos,""String_Node_Str"");
  loadAnimation.getTextLabel().setFont(theme.getPrimaryFontName());
  loadAnimation.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      String rowTxt=rowBox.getText();
      String colTxt=colBox.getText();
      String fpsTxt=fpsBox.getText();
      String subXTxt=subImageX.getText();
      String subYTxt=subImageY.getText();
      String subWidthTxt=subImageWidth.getText();
      String subHeightTxt=subImageHeight.getText();
      String backgroundColorTxt=backgroundColorBox.getText();
      try {
        backgroundColor=new BigInteger(backgroundColorTxt,16).intValue();
        int rows=Integer.parseInt(rowTxt);
        int cols=Integer.parseInt(colTxt);
        int frameTime=Integer.parseInt(fpsTxt);
        int[] frames=new int[rows * cols];
        for (int i=0; i < frames.length; i++) {
          frames[i]=frameTime;
        }
        TextureRegion tex=Art.loadImage(pathBox.getText());
        int subX=0;
        int subY=0;
        int subWidth=tex.getRegionWidth();
        int subHeight=tex.getRegionHeight();
        if (notEmpty(subXTxt)) {
          subX=Integer.parseInt(subXTxt);
        }
        if (notEmpty(subYTxt)) {
          subY=Integer.parseInt(subYTxt);
        }
        if (notEmpty(subWidthTxt)) {
          subWidth=Integer.parseInt(subWidthTxt);
        }
        if (notEmpty(subHeightTxt)) {
          subHeight=Integer.parseInt(subHeightTxt);
        }
        tex=TextureUtil.subImage(tex,subX,subY,subWidth,subHeight);
        animation=Art.newAnimatedSplitImage(frames,tex,rows,cols);
        for (        TextureRegion r : animation.getImages()) {
          r.flip(false,true);
        }
      }
 catch (      Exception e) {
      }
    }
  }
);
  uiPos.x=app.getScreenWidth() / 3;
  uiPos.y=app.getScreenHeight() - 90;
  Button stopBtn=setupButton(uiPos,""String_Node_Str"");
  animationPanel.addWidget(stopBtn);
  stopBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      stepping=true;
    }
  }
);
  uiPos.x+=xSpacing;
  Button slowBtn=setupButton(uiPos,""String_Node_Str"");
  animationPanel.addWidget(slowBtn);
  slowBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      String fpsTxt=fpsBox.getText();
      try {
        int fps=Integer.parseInt(fpsTxt);
        fpsBox.setText((fps + 10) + ""String_Node_Str"");
        loadAnimation.click();
      }
 catch (      Exception e) {
      }
    }
  }
);
  uiPos.x+=xSpacing;
  Button fasterBtn=setupButton(uiPos,""String_Node_Str"");
  animationPanel.addWidget(fasterBtn);
  fasterBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      String fpsTxt=fpsBox.getText();
      try {
        int fps=Integer.parseInt(fpsTxt);
        if (fps > 0) {
          fpsBox.setText((fps - 10) + ""String_Node_Str"");
          loadAnimation.click();
        }
      }
 catch (      Exception e) {
      }
    }
  }
);
  uiPos.x=app.getScreenWidth() / 3;
  uiPos.y=app.getScreenHeight() - 90;
  Button playBtn=setupButton(uiPos,""String_Node_Str"");
  steppingPanel.addWidget(playBtn);
  playBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      stepping=false;
    }
  }
);
  uiPos.x+=xSpacing;
  Button nextFrameBtn=setupButton(uiPos,""String_Node_Str"");
  steppingPanel.addWidget(nextFrameBtn);
  nextFrameBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      nextFrame();
    }
  }
);
  uiPos.x+=xSpacing;
  Button prevFrameBtn=setupButton(uiPos,""String_Node_Str"");
  steppingPanel.addWidget(prevFrameBtn);
  prevFrameBtn.getTextLabel().setFont(theme.getPrimaryFontName());
  prevFrameBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      prevFrame();
    }
  }
);
}",0.9913188647746244
86786,"private void renderAnimation(Canvas canvas,AnimatedImage animation){
  if (animation != null) {
    int fontColor=theme.getForegroundColor();
    TextureRegion frame=animation.getCurrentImage();
    int x=canvas.getWidth() / 2 - frame.getRegionWidth() / 2;
    int y=canvas.getHeight() / 2 - frame.getRegionWidth();
    canvas.drawRect(x,y,frame.getRegionWidth(),frame.getRegionHeight(),0xff00ff00);
    canvas.drawImage(frame,x,y,null);
    canvas.setFont(""String_Node_Str"",14);
    String message=frame.getRegionWidth() + ""String_Node_Str"";
    canvas.drawString(message,x + (frame.getRegionWidth() / 2) - canvas.getWidth(message) / 2,y + frame.getRegionHeight() + canvas.getHeight(""String_Node_Str""),fontColor);
    message=frame.getRegionHeight() + ""String_Node_Str"";
    canvas.drawString(message,x + frame.getRegionWidth() + 5,y + (frame.getRegionHeight() / 2) + canvas.getHeight(""String_Node_Str"") / 2,fontColor);
    renderAnimationWheel(canvas,frame);
  }
}","private void renderAnimation(Canvas canvas,AnimatedImage animation){
  if (animation != null) {
    int fontColor=theme.getForegroundColor();
    TextureRegion frame=animation.getCurrentImage();
    int x=canvas.getWidth() / 2 - frame.getRegionWidth() / 2;
    int y=canvas.getHeight() / 2 - frame.getRegionWidth();
    canvas.drawImage(frame,x,y,null);
    canvas.setFont(""String_Node_Str"",14);
    String message=frame.getRegionWidth() + ""String_Node_Str"";
    canvas.drawString(message,x + (frame.getRegionWidth() / 2) - canvas.getWidth(message) / 2,y + frame.getRegionHeight() + canvas.getHeight(""String_Node_Str""),fontColor);
    message=frame.getRegionHeight() + ""String_Node_Str"";
    canvas.drawString(message,x + frame.getRegionWidth() + 5,y + (frame.getRegionHeight() / 2) + canvas.getHeight(""String_Node_Str"") / 2,fontColor);
    renderAnimationWheel(canvas,frame);
  }
}",0.9545454545454546
86787,"@Override public void start(Brain brain){
  Bomb bomb=target.getBomb();
  if (bomb == null) {
    this.getActionResult().setFailure();
    return;
  }
  World world=brain.getWorld();
  PlayerEntity bot=brain.getEntityOwner();
  Rectangle coverBounds=new Rectangle(300,300);
  coverBounds.centerAround(bot.getCenterPos());
  Vector2f moveTo=world.getRandomSpotNotIn(bot,coverBounds.x,coverBounds.y,coverBounds.width,coverBounds.height,bomb.getBlastRadius());
  getActionResult().setSuccess(moveTo);
}","@Override public void start(Brain brain){
  Bomb bomb=target.getBomb();
  if (bomb == null) {
    this.getActionResult().setFailure();
    return;
  }
  World world=brain.getWorld();
  PlayerEntity bot=brain.getEntityOwner();
  Rectangle coverBounds=new Rectangle(300,300);
  coverBounds.centerAround(target.getCenterPos());
  Vector2f moveTo=world.getRandomSpotNotIn(bot,coverBounds.x,coverBounds.y,coverBounds.width,coverBounds.height,bomb.getBlastRadius());
  getActionResult().setSuccess(moveTo);
}",0.993006993006993
86788,"@Override public boolean isFinished(Brain brain){
  PathPlanner<?> path=brain.getMotion().getPathPlanner();
  return path.atDestination();
}","@Override public boolean isFinished(Brain brain){
  PathPlanner<?> path=brain.getMotion().getPathPlanner();
  boolean isFinished=path.atDestination();
  if (isFinished) {
    getActionResult().setSuccess();
  }
  return isFinished;
}",0.7131367292225201
86789,"/** 
 */
public MoveToBombAction(BombTarget bomb){
  super(bomb.getCenterPos());
}","/** 
 * @param target 
 */
public MoveToBombAction(BombTarget target){
  super(target.getCenterPos());
}",0.7956989247311828
86790,"/** 
 * @param brain
 * @return the current marching orders
 */
private Action getCurrentAction(Brain brain){
  Action action=null;
  if (this.zoneToAttack == null) {
    this.zoneToAttack=calculateZoneToAttack();
  }
switch (this.currentState) {
case DEFEND:
    if (zoneToAttack != null) {
      BombTarget target=getPlantedBombTarget(zoneToAttack);
      if (target != null) {
        action=goals.defendPlantedBomb(target);
      }
 else {
        action=goals.defend(zoneToAttack);
      }
    }
  break;
case INFILTRATE:
if (zoneToAttack != null) {
  action=goals.infiltrate(zoneToAttack);
}
action=goals.goToRandomSpot(brain);
break;
case PLANT_BOMB:
action=goals.plantBomb();
break;
case RANDOM:
action=goals.goToRandomSpot(brain);
break;
case DONE:
default :
if (zoneToAttack != null) {
action=goals.infiltrate(zoneToAttack);
}
break;
}
return action;
}","/** 
 * @param brain
 * @return the current marching orders
 */
private Action getCurrentAction(Brain brain){
  Action action=null;
  if (this.zoneToAttack == null) {
    this.zoneToAttack=calculateZoneToAttack(brain);
  }
switch (this.currentState) {
case DEFEND:
    if (zoneToAttack != null) {
      BombTarget target=getPlantedBombTarget(zoneToAttack);
      if (target != null) {
        action=goals.defendPlantedBomb(target);
      }
 else {
        action=goals.defend(zoneToAttack);
      }
    }
  break;
case INFILTRATE:
if (zoneToAttack != null) {
  action=goals.infiltrate(zoneToAttack);
}
action=goals.goToRandomSpot(brain);
break;
case PLANT_BOMB:
action=goals.plantBomb();
break;
case RANDOM:
action=goals.goToRandomSpot(brain);
break;
case DONE:
default :
if (zoneToAttack != null) {
action=goals.infiltrate(zoneToAttack);
}
break;
}
return action;
}",0.9971081550028918
86791,"/** 
 * @return determine which {@link Zone} to attack
 */
private Zone calculateZoneToAttack(){
  Zone zoneToAttack=null;
  List<Zone> zonesWithBombs=this.zones.getBombTargetZones();
  if (!zonesWithBombs.isEmpty()) {
    List<Zone> validZones=new ArrayList<>();
    for (    Zone zone : zonesWithBombs) {
      if (zone.isTargetsStillActive()) {
        validZones.add(zone);
      }
    }
    if (!validZones.isEmpty()) {
      zoneToAttack=validZones.get(random.nextInt(validZones.size()));
    }
  }
 else {
    zoneToAttack=stats.getDeadliesZone();
  }
  return zoneToAttack;
}","/** 
 * @return determine which {@link Zone} to attack
 */
private Zone calculateZoneToAttack(){
  Zone zoneToAttack=null;
  List<Zone> validZones=calculateZonesOfInterest();
  if (!validZones.isEmpty()) {
    zoneToAttack=validZones.get(random.nextInt(validZones.size()));
  }
 else {
    zoneToAttack=stats.getDeadliesZone();
  }
  return zoneToAttack;
}",0.3855165069222577
86792,"/** 
 * @return the estimated blast radius
 */
public Rectangle getBlastRadius(){
  int maxWidth=(this.splashWidth + this.maxSpread) * 2;
  this.blastRadius.setSize(maxWidth,maxWidth);
  this.blastRadius.centerAround(getCenterPos());
  return this.blastRadius;
}","/** 
 * @return the estimated blast radius
 */
public Rectangle getBlastRadius(){
  int maxWidth=(this.splashWidth + this.maxSpread) * 4;
  this.blastRadius.setSize(maxWidth,maxWidth);
  this.blastRadius.centerAround(getCenterPos());
  return this.blastRadius;
}",0.9961832061068704
86793,"/** 
 * @param console
 * @param config
 */
public Terminal(Console console,ClientSeventhConfig config){
  this.console=console;
  this.console.addLogger(this);
  this.isActive=false;
  this.blinkTimer=new Timer(true,500);
  this.showCursor=true;
  this.background=new Rectangle();
  this.backgroundColor=config.getConsoleBackgroundColor();
  this.foregroundColor=config.getConsoleForegroundColor();
  this.textBuffer=new LinkedList<String>();
  this.inputBuffer=new StringBuilder();
  this.cmdHistory=new Stack<String>();
}","/** 
 * @param console
 * @param config
 */
public Terminal(Console console,ClientSeventhConfig config){
  this.console=console;
  this.console.addLogger(this);
  this.isActive=false;
  this.blinkTimer=new Timer(true,500);
  this.showCursor=true;
  this.background=new Rectangle();
  this.backgroundColor=config.getConsoleBackgroundColor();
  this.foregroundColor=config.getConsoleForegroundColor();
  this.textBuffer=new LinkedList<String>();
  this.inputBuffer=new StringBuilder();
  this.cmdHistory=new ArrayList<String>();
}",0.9866920152091256
86794,"public boolean keyTyped(char key){
  if (!isActive) {
    return false;
  }
switch (key) {
case 8:
{
      if (cursorIndex > 0) {
        inputBuffer.deleteCharAt(--cursorIndex);
        if (cursorIndex < 0) {
          cursorIndex=0;
        }
      }
      break;
    }
case 127:
{
    if (cursorIndex < inputBuffer.length()) {
      inputBuffer.deleteCharAt(cursorIndex);
    }
    break;
  }
case '\r':
case '\n':
{
  String command=inputBuffer.toString();
  cmdHistory.add(command);
  setInputText(""String_Node_Str"");
  console.execute(command);
  break;
}
default :
{
char c=key;
if (c > 31 && c < 127 && c != 96) {
  inputBuffer.insert(cursorIndex,key);
  cursorIndex++;
}
}
}
return true;
}","public boolean keyTyped(char key){
  if (!isActive) {
    return false;
  }
switch (key) {
case 8:
{
      if (cursorIndex > 0) {
        inputBuffer.deleteCharAt(--cursorIndex);
        if (cursorIndex < 0) {
          cursorIndex=0;
        }
      }
      break;
    }
case 127:
{
    if (cursorIndex < inputBuffer.length()) {
      inputBuffer.deleteCharAt(cursorIndex);
    }
    break;
  }
case '\r':
case '\n':
{
  String command=inputBuffer.toString();
  cmdHistory.add(command);
  cmdHistoryIndex=cmdHistory.size() - 1;
  setInputText(""String_Node_Str"");
  console.execute(command);
  break;
}
default :
{
char c=key;
if (c > 31 && c < 127 && c != 96) {
  inputBuffer.insert(cursorIndex,key);
  cursorIndex++;
}
}
}
return true;
}",0.9714683368128044
86795,"public boolean keyDown(int key){
  if (!isActive) {
    return false;
  }
switch (key) {
case Keys.UP:
{
      if (!cmdHistory.isEmpty()) {
        cmdHistoryIndex++;
        if (cmdHistoryIndex >= cmdHistory.size()) {
          cmdHistoryIndex=0;
        }
        setInputText(cmdHistory.get(cmdHistoryIndex));
      }
      break;
    }
case Keys.DOWN:
{
    if (!cmdHistory.isEmpty()) {
      cmdHistoryIndex--;
      if (cmdHistoryIndex < 0) {
        cmdHistoryIndex=cmdHistory.size() - 1;
      }
      setInputText(cmdHistory.get(cmdHistoryIndex));
    }
    break;
  }
case Keys.LEFT:
{
  cursorIndex--;
  if (cursorIndex < 0) {
    cursorIndex=0;
  }
  break;
}
case Keys.RIGHT:
{
cursorIndex++;
if (cursorIndex >= inputBuffer.length()) {
  cursorIndex=inputBuffer.length();
}
break;
}
case Keys.HOME:
{
cursorIndex=0;
break;
}
case Keys.END:
{
cursorIndex=inputBuffer.length();
break;
}
case Keys.PAGE_UP:
{
scrollY=1;
break;
}
case Keys.PAGE_DOWN:
{
scrollY=-1;
break;
}
case Keys.TAB:
{
String inputText=inputBuffer.toString();
List<String> cmdNames=console.find(inputText);
if (!cmdNames.isEmpty()) {
if (cmdNames.size() == 1) {
setInputText(cmdNames.get(0) + ""String_Node_Str"");
}
 else {
console.println(""String_Node_Str"");
for (String cmd : cmdNames) {
console.println(cmd);
}
console.println(""String_Node_Str"");
setInputText(findMaxMatchingChars(inputText,cmdNames));
}
}
break;
}
case Keys.CONTROL_LEFT:
case Keys.CONTROL_RIGHT:
isCtrlDown=true;
break;
case Keys.V:
if (isCtrlDown) {
String contents=Gdx.app.getClipboard().getContents();
if (contents != null) {
inputBuffer.insert(cursorIndex,contents);
cursorIndex+=contents.length();
}
}
break;
default :
{
}
}
return true;
}","public boolean keyDown(int key){
  if (!isActive) {
    return false;
  }
switch (key) {
case Keys.UP:
{
      if (!cmdHistory.isEmpty()) {
        setInputText(cmdHistory.get(cmdHistoryIndex));
        cmdHistoryIndex--;
        if (cmdHistoryIndex < 0) {
          cmdHistoryIndex=cmdHistory.size() - 1;
        }
      }
      break;
    }
case Keys.DOWN:
{
    if (!cmdHistory.isEmpty()) {
      setInputText(cmdHistory.get(cmdHistoryIndex));
      cmdHistoryIndex++;
      if (cmdHistoryIndex >= cmdHistory.size()) {
        cmdHistoryIndex=0;
      }
    }
    break;
  }
case Keys.LEFT:
{
  cursorIndex--;
  if (cursorIndex < 0) {
    cursorIndex=0;
  }
  break;
}
case Keys.RIGHT:
{
cursorIndex++;
if (cursorIndex >= inputBuffer.length()) {
  cursorIndex=inputBuffer.length();
}
break;
}
case Keys.HOME:
{
cursorIndex=0;
break;
}
case Keys.END:
{
cursorIndex=inputBuffer.length();
break;
}
case Keys.PAGE_UP:
{
scrollY=1;
break;
}
case Keys.PAGE_DOWN:
{
scrollY=-1;
break;
}
case Keys.TAB:
{
String inputText=inputBuffer.toString();
List<String> cmdNames=console.find(inputText);
if (!cmdNames.isEmpty()) {
if (cmdNames.size() == 1) {
setInputText(cmdNames.get(0) + ""String_Node_Str"");
}
 else {
console.println(""String_Node_Str"");
for (String cmd : cmdNames) {
console.println(cmd);
}
console.println(""String_Node_Str"");
setInputText(findMaxMatchingChars(inputText,cmdNames));
}
}
break;
}
case Keys.CONTROL_LEFT:
case Keys.CONTROL_RIGHT:
isCtrlDown=true;
break;
case Keys.V:
if (isCtrlDown) {
String contents=Gdx.app.getClipboard().getContents();
if (contents != null) {
inputBuffer.insert(cursorIndex,contents);
cursorIndex+=contents.length();
}
}
break;
default :
{
}
}
return true;
}",0.8514150943396226
86796,"private void createUI(){
  this.panelView=new PanelView<>();
  this.optionsPanel=new Panel();
  this.keyInput=new KeyInput();
  this.keyInput.setDisabled(true);
  this.optionsPanel.addWidget(keyInput);
  Vector2f uiPos=new Vector2f(180,app.getScreenHeight() - 30);
  Button saveBtn=setupButton(uiPos,""String_Node_Str"",false);
  saveBtn.getTextLabel().setFont(theme.getPrimaryFontName());
  saveBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      load=true;
      if (app.getTerminal().getInputText().equals(""String_Node_Str"")) {
        app.getTerminal().setInputText(""String_Node_Str"");
      }
    }
  }
);
  uiPos.x=app.getScreenWidth() - 140;
  Button cancelBtn=setupButton(uiPos,""String_Node_Str"",false);
  cancelBtn.getTextLabel().setFont(theme.getPrimaryFontName());
  cancelBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      app.setScreen(menuScreen);
    }
  }
);
  Label headerLbl=new Label(""String_Node_Str"");
  headerLbl.setTheme(theme);
  headerLbl.setBounds(new Rectangle(0,50,app.getScreenWidth(),80));
  headerLbl.setTextAlignment(TextAlignment.CENTER);
  headerLbl.setFont(theme.getPrimaryFontName());
  headerLbl.setTextSize(54);
  uiPos.x=10;
  uiPos.y=120;
  setupLabel(uiPos,""String_Node_Str"",true);
  final int startX=30;
  final int startY=160;
  final int yInc=20;
  final int xInc=100;
  final int toggleX=290;
  uiPos.x=startX;
  uiPos.y=startY;
  setupLabel(uiPos,""String_Node_Str"",false);
  uiPos.x=toggleX;
  uiPos.y+=yInc;
  Button gameTypeBtn=setupButton(uiPos,this.gameSettings.gameType.name(),true);
  uiPos.x=startX;
  uiPos.y+=yInc;
  setupLabel(uiPos,""String_Node_Str"",false);
  uiPos.x=toggleX;
  uiPos.y+=yInc;
  final Button mapBtn=setupButton(uiPos,gameSettings.currentMap,true);
  mapBtn.getBounds().setSize(340,30);
  mapBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      currentMapIndex++;
      if (currentMapIndex >= mapListings.size()) {
        currentMapIndex=0;
      }
      gameSettings.currentMap=mapListings.isEmpty() ? ""String_Node_Str"" : mapListings.get(currentMapIndex);
      mapBtn.setText(gameSettings.currentMap);
    }
  }
);
  uiPos.x=startX;
  uiPos.y+=yInc;
  setupLabel(uiPos,""String_Node_Str"",false);
  uiPos.x=toggleX + 30;
  final Label maxPlayersLbl=setupLabel(uiPos,Integer.toString(gameSettings.maxPlayers),false);
  uiPos.x=toggleX;
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"",true).addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      gameSettings.maxPlayers--;
      int minSize=(gameSettings.axisTeam.size() + gameSettings.alliedTeam.size());
      if (gameSettings.maxPlayers < minSize) {
        gameSettings.maxPlayers=minSize;
      }
      maxPlayersLbl.setText(Integer.toString(gameSettings.maxPlayers));
    }
  }
);
  uiPos.x+=xInc;
  setupButton(uiPos,""String_Node_Str"",true).addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      gameSettings.maxPlayers++;
      if (gameSettings.maxPlayers > 12) {
        gameSettings.maxPlayers=12;
      }
      maxPlayersLbl.setText(Integer.toString(gameSettings.maxPlayers));
    }
  }
);
  uiPos.x=startX;
  uiPos.y+=yInc;
  setupLabel(uiPos,""String_Node_Str"",false);
  uiPos.x=toggleX + 30;
  final Label maxScoreLbl=setupLabel(uiPos,Integer.toString(gameSettings.maxScore),false);
  uiPos.x=toggleX;
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"",true).addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      gameSettings.maxScore--;
      if (gameSettings.maxScore < 1) {
        gameSettings.maxScore=1;
      }
      maxScoreLbl.setText(Integer.toString(gameSettings.maxScore));
    }
  }
);
  uiPos.x+=xInc;
  setupButton(uiPos,""String_Node_Str"",true).addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      gameSettings.maxScore++;
      maxScoreLbl.setText(Integer.toString(gameSettings.maxScore));
    }
  }
);
  uiPos.x=startX;
  uiPos.y+=yInc;
  setupLabel(uiPos,""String_Node_Str"",false);
  uiPos.x=toggleX + 30;
  final Label matchTimeLbl=setupLabel(uiPos,Long.toString(gameSettings.matchTime),false);
  uiPos.x=toggleX;
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"",true).addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      gameSettings.matchTime--;
      if (gameSettings.matchTime < 1) {
        gameSettings.matchTime=1;
      }
      matchTimeLbl.setText(Long.toString(gameSettings.matchTime));
    }
  }
);
  uiPos.x+=xInc;
  setupButton(uiPos,""String_Node_Str"",true).addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      gameSettings.matchTime++;
      matchTimeLbl.setText(Long.toString(gameSettings.matchTime));
    }
  }
);
  gameTypeBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
switch (gameSettings.gameType) {
case OBJ:
        gameSettings.gameType=GameType.Type.TDM;
      gameSettings.matchTime=20;
    gameSettings.maxScore=50;
  break;
case TDM:
gameSettings.gameType=GameType.Type.OBJ;
gameSettings.matchTime=3;
gameSettings.maxScore=7;
break;
default :
gameSettings.gameType=GameType.Type.TDM;
break;
}
maxScoreLbl.setText(Integer.toString(gameSettings.maxScore));
matchTimeLbl.setText(Long.toString(gameSettings.matchTime));
event.getButton().setText(gameSettings.gameType.name());
}
}
);
uiPos.x=startX;
uiPos.y+=yInc;
Checkbox isDedicatedServer=new Checkbox(gameSettings.isDedicatedServer);
isDedicatedServer.setTheme(theme);
isDedicatedServer.setLabelText(""String_Node_Str"");
isDedicatedServer.getBounds().setLocation(uiPos);
isDedicatedServer.addCheckboxClickedListener(new OnCheckboxClickedListener(){
@Override public void onCheckboxClicked(CheckboxEvent event){
gameSettings.isDedicatedServer=event.getCheckbox().isChecked();
}
}
);
this.optionsPanel.addWidget(isDedicatedServer);
this.panelView.addElement(new CheckboxView(isDedicatedServer));
uiPos.x=10;
uiPos.y+=yInc * 2;
setupLabel(uiPos,""String_Node_Str"",true);
uiPos.x=startX + 100;
uiPos.y+=yInc + 30;
setupButton(uiPos,""String_Node_Str"",true).addOnButtonClickedListener(new OnButtonClickedListener(){
@Override public void onButtonClicked(ButtonEvent event){
if (gameSettings.alliedTeam.size() > 0) {
gameSettings.alliedTeam.remove(gameSettings.alliedTeam.size() - 1);
refreshUI();
}
}
}
);
uiPos.x+=10;
uiPos.y-=20;
setupLabel(uiPos,""String_Node_Str"",false);
uiPos.x+=100;
uiPos.y+=20;
setupButton(uiPos,""String_Node_Str"",true).addOnButtonClickedListener(new OnButtonClickedListener(){
@Override public void onButtonClicked(ButtonEvent event){
if (gameSettings.axisTeam.size() + gameSettings.alliedTeam.size() < gameSettings.maxPlayers - 1) {
String name=getNextRandomName();
gameSettings.alliedTeam.add(name);
refreshUI();
}
}
}
);
uiPos.x=550;
setupButton(uiPos,""String_Node_Str"",true).addOnButtonClickedListener(new OnButtonClickedListener(){
@Override public void onButtonClicked(ButtonEvent event){
if (gameSettings.axisTeam.size() > 0) {
gameSettings.axisTeam.remove(gameSettings.axisTeam.size() - 1);
refreshUI();
}
}
}
);
uiPos.x+=20;
uiPos.y-=20;
setupLabel(uiPos,""String_Node_Str"",false);
uiPos.x+=90;
uiPos.y+=20;
setupButton(uiPos,""String_Node_Str"",true).addOnButtonClickedListener(new OnButtonClickedListener(){
@Override public void onButtonClicked(ButtonEvent event){
if (gameSettings.axisTeam.size() + gameSettings.alliedTeam.size() < gameSettings.maxPlayers - 1) {
String name=getNextRandomName();
gameSettings.axisTeam.add(name);
refreshUI();
}
}
}
);
uiPos.x=startX;
uiPos.y+=yInc;
createBotsPanel(uiPos);
this.panelView.addElement(new LabelView(headerLbl));
}","private void createUI(){
  this.panelView=new PanelView<>();
  this.optionsPanel=new Panel();
  this.keyInput=new KeyInput();
  this.keyInput.setDisabled(true);
  this.optionsPanel.addWidget(keyInput);
  Vector2f uiPos=new Vector2f(180,app.getScreenHeight() - 30);
  Button saveBtn=setupButton(uiPos,""String_Node_Str"",false);
  saveBtn.getTextLabel().setFont(theme.getPrimaryFontName());
  saveBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      load=true;
      if (app.getTerminal().getInputText().equals(""String_Node_Str"")) {
        app.getTerminal().setInputText(""String_Node_Str"");
      }
    }
  }
);
  uiPos.x=app.getScreenWidth() - 140;
  Button cancelBtn=setupButton(uiPos,""String_Node_Str"",false);
  cancelBtn.getTextLabel().setFont(theme.getPrimaryFontName());
  cancelBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      app.setScreen(menuScreen);
    }
  }
);
  Label headerLbl=new Label(""String_Node_Str"");
  headerLbl.setTheme(theme);
  headerLbl.setBounds(new Rectangle(0,50,app.getScreenWidth(),80));
  headerLbl.setTextAlignment(TextAlignment.CENTER);
  headerLbl.setFont(theme.getPrimaryFontName());
  headerLbl.setTextSize(54);
  uiPos.x=10;
  uiPos.y=120;
  setupLabel(uiPos,""String_Node_Str"",true);
  final int startX=30;
  final int startY=160;
  final int yInc=20;
  final int xInc=100;
  final int toggleX=290;
  uiPos.x=startX;
  uiPos.y=startY;
  setupLabel(uiPos,""String_Node_Str"",false);
  uiPos.x=toggleX;
  uiPos.y+=yInc;
  Button gameTypeBtn=setupButton(uiPos,this.gameSettings.gameType.name(),true);
  uiPos.x=startX;
  uiPos.y+=yInc;
  setupLabel(uiPos,""String_Node_Str"",false);
  uiPos.x=toggleX;
  uiPos.y+=yInc;
  final Button mapBtn=setupButton(uiPos,gameSettings.currentMap,true);
  mapBtn.getBounds().setSize(340,30);
  mapBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      currentMapIndex++;
      if (currentMapIndex >= mapListings.size()) {
        currentMapIndex=0;
      }
      gameSettings.currentMap=mapListings.isEmpty() ? ""String_Node_Str"" : mapListings.get(currentMapIndex);
      mapBtn.setText(gameSettings.currentMap);
    }
  }
);
  uiPos.x=startX;
  uiPos.y+=yInc;
  setupLabel(uiPos,""String_Node_Str"",false);
  uiPos.x=toggleX + 30;
  final Label maxPlayersLbl=setupLabel(uiPos,Integer.toString(gameSettings.maxPlayers),false);
  uiPos.x=toggleX;
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"",true).addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      gameSettings.maxPlayers--;
      int minSize=(gameSettings.axisTeam.size() + gameSettings.alliedTeam.size());
      if (gameSettings.maxPlayers < minSize) {
        gameSettings.maxPlayers=minSize;
      }
      maxPlayersLbl.setText(Integer.toString(gameSettings.maxPlayers));
    }
  }
);
  uiPos.x+=xInc;
  setupButton(uiPos,""String_Node_Str"",true).addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      gameSettings.maxPlayers++;
      if (gameSettings.maxPlayers > 12) {
        gameSettings.maxPlayers=12;
      }
      maxPlayersLbl.setText(Integer.toString(gameSettings.maxPlayers));
    }
  }
);
  uiPos.x=startX;
  uiPos.y+=yInc;
  setupLabel(uiPos,""String_Node_Str"",false);
  uiPos.x=toggleX + 30;
  final Label maxScoreLbl=setupLabel(uiPos,Integer.toString(gameSettings.maxScore),false);
  uiPos.x=toggleX;
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"",true).addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      if (gameSettings.gameType.equals(GameType.Type.OBJ)) {
        gameSettings.maxScore--;
        if (gameSettings.maxScore < 1) {
          gameSettings.maxScore=1;
        }
      }
 else {
        gameSettings.maxScore-=10;
        if (gameSettings.maxScore < 1) {
          gameSettings.maxScore=0;
        }
      }
      maxScoreLbl.setText(Integer.toString(gameSettings.maxScore));
    }
  }
);
  uiPos.x+=xInc;
  setupButton(uiPos,""String_Node_Str"",true).addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      if (gameSettings.gameType.equals(GameType.Type.OBJ)) {
        gameSettings.maxScore++;
      }
 else {
        gameSettings.maxScore+=10;
      }
      maxScoreLbl.setText(Integer.toString(gameSettings.maxScore));
    }
  }
);
  uiPos.x=startX;
  uiPos.y+=yInc;
  setupLabel(uiPos,""String_Node_Str"",false);
  uiPos.x=toggleX + 30;
  final Label matchTimeLbl=setupLabel(uiPos,Long.toString(gameSettings.matchTime),false);
  uiPos.x=toggleX;
  uiPos.y+=yInc;
  setupButton(uiPos,""String_Node_Str"",true).addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      gameSettings.matchTime--;
      if (gameSettings.matchTime < 1) {
        gameSettings.matchTime=1;
      }
      matchTimeLbl.setText(Long.toString(gameSettings.matchTime));
    }
  }
);
  uiPos.x+=xInc;
  setupButton(uiPos,""String_Node_Str"",true).addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
      gameSettings.matchTime++;
      matchTimeLbl.setText(Long.toString(gameSettings.matchTime));
    }
  }
);
  gameTypeBtn.addOnButtonClickedListener(new OnButtonClickedListener(){
    @Override public void onButtonClicked(    ButtonEvent event){
switch (gameSettings.gameType) {
case OBJ:
        gameSettings.gameType=GameType.Type.TDM;
      gameSettings.matchTime=20;
    gameSettings.maxScore=50;
  break;
case TDM:
gameSettings.gameType=GameType.Type.OBJ;
gameSettings.matchTime=3;
gameSettings.maxScore=7;
break;
default :
gameSettings.gameType=GameType.Type.TDM;
break;
}
maxScoreLbl.setText(Integer.toString(gameSettings.maxScore));
matchTimeLbl.setText(Long.toString(gameSettings.matchTime));
event.getButton().setText(gameSettings.gameType.name());
}
}
);
uiPos.x=startX;
uiPos.y+=yInc;
Checkbox isDedicatedServer=new Checkbox(gameSettings.isDedicatedServer);
isDedicatedServer.setTheme(theme);
isDedicatedServer.setLabelText(""String_Node_Str"");
isDedicatedServer.getBounds().setLocation(uiPos);
isDedicatedServer.addCheckboxClickedListener(new OnCheckboxClickedListener(){
@Override public void onCheckboxClicked(CheckboxEvent event){
gameSettings.isDedicatedServer=event.getCheckbox().isChecked();
}
}
);
this.optionsPanel.addWidget(isDedicatedServer);
this.panelView.addElement(new CheckboxView(isDedicatedServer));
uiPos.x=10;
uiPos.y+=yInc * 2;
setupLabel(uiPos,""String_Node_Str"",true);
uiPos.x=startX + 100;
uiPos.y+=yInc + 30;
setupButton(uiPos,""String_Node_Str"",true).addOnButtonClickedListener(new OnButtonClickedListener(){
@Override public void onButtonClicked(ButtonEvent event){
if (gameSettings.alliedTeam.size() > 0) {
gameSettings.alliedTeam.remove(gameSettings.alliedTeam.size() - 1);
refreshUI();
}
}
}
);
uiPos.x+=10;
uiPos.y-=20;
setupLabel(uiPos,""String_Node_Str"",false);
uiPos.x+=100;
uiPos.y+=20;
setupButton(uiPos,""String_Node_Str"",true).addOnButtonClickedListener(new OnButtonClickedListener(){
@Override public void onButtonClicked(ButtonEvent event){
if (gameSettings.axisTeam.size() + gameSettings.alliedTeam.size() < gameSettings.maxPlayers - 1) {
String name=getNextRandomName();
gameSettings.alliedTeam.add(name);
refreshUI();
}
}
}
);
uiPos.x=550;
setupButton(uiPos,""String_Node_Str"",true).addOnButtonClickedListener(new OnButtonClickedListener(){
@Override public void onButtonClicked(ButtonEvent event){
if (gameSettings.axisTeam.size() > 0) {
gameSettings.axisTeam.remove(gameSettings.axisTeam.size() - 1);
refreshUI();
}
}
}
);
uiPos.x+=20;
uiPos.y-=20;
setupLabel(uiPos,""String_Node_Str"",false);
uiPos.x+=90;
uiPos.y+=20;
setupButton(uiPos,""String_Node_Str"",true).addOnButtonClickedListener(new OnButtonClickedListener(){
@Override public void onButtonClicked(ButtonEvent event){
if (gameSettings.axisTeam.size() + gameSettings.alliedTeam.size() < gameSettings.maxPlayers - 1) {
String name=getNextRandomName();
gameSettings.axisTeam.add(name);
refreshUI();
}
}
}
);
uiPos.x=startX;
uiPos.y+=yInc;
createBotsPanel(uiPos);
this.panelView.addElement(new LabelView(headerLbl));
}",0.9797199420569772
86797,"@Override protected GameState doUpdate(Game game,TimeStep timeStep){
  if (GameState.IN_PROGRESS == getGameState()) {
    List<Team> leaders=getTeamsWithHighScore();
    if (this.getRemainingTime() <= 0 || leaders.get(0).getScore() >= getMaxScore()) {
      if (leaders.size() > 1) {
        setGameState(GameState.TIE);
      }
 else {
        setGameState(GameState.WINNER);
      }
    }
  }
  if (GameState.IN_PROGRESS == getGameState()) {
    Player[] players=game.getPlayers().getPlayers();
    for (int i=0; i < players.length; i++) {
      Player player=players[i];
      if (player != null) {
        if (player.isDead() && !player.isSpectating()) {
          player.updateSpawnTime(timeStep);
          if (player.readyToSpawn()) {
            game.spawnPlayerEntity(player.getId());
          }
        }
      }
    }
  }
  return getGameState();
}","@Override protected GameState doUpdate(Game game,TimeStep timeStep){
  if (GameState.IN_PROGRESS == getGameState()) {
    List<Team> leaders=getTeamsWithHighScore();
    boolean isUnlimitedScore=getMaxScore() <= 0;
    if (this.getRemainingTime() <= 0 || (leaders.get(0).getScore() >= getMaxScore() && !isUnlimitedScore)) {
      if (leaders.size() > 1) {
        setGameState(GameState.TIE);
      }
 else {
        setGameState(GameState.WINNER);
      }
    }
  }
  if (GameState.IN_PROGRESS == getGameState()) {
    Player[] players=game.getPlayers().getPlayers();
    for (int i=0; i < players.length; i++) {
      Player player=players[i];
      if (player != null) {
        if (player.isDead() && !player.isSpectating()) {
          player.updateSpawnTime(timeStep);
          if (player.readyToSpawn()) {
            game.spawnPlayerEntity(player.getId());
          }
        }
      }
    }
  }
  return getGameState();
}",0.9598214285714286
86798,"@Override public void damage(Entity damager,int amount){
  if (damager instanceof Explosion) {
    amount=1;
  }
 else   if (damager instanceof Rocket) {
    amount/=2;
  }
 else   if (damager instanceof Bullet) {
    amount=1;
  }
 else {
    amount/=10;
  }
  armor-=amount;
  if (armor < 0) {
    super.damage(damager,amount);
  }
}","@Override public void damage(Entity damager,int amount){
  if (damager instanceof Explosion) {
    amount=1;
  }
 else   if (damager instanceof Rocket) {
    amount/=2;
  }
 else   if (damager instanceof Bullet) {
    amount=0;
  }
 else {
    amount/=10;
  }
  armor-=amount;
  if (armor < 0) {
    super.damage(damager,amount);
  }
}",0.9970149253731344
86799,"/** 
 * @param game
 * @param owner
 * @param type
 */
public Railgun(Game game,Entity owner){
  super(game,owner,Type.RAILGUN);
  this.roundsPerSecond=15;
  this.damage=10;
  this.reloadTime=1600;
  this.clipSize=30;
  this.totalAmmo=180;
  this.spread=10;
  this.maxHeat=3000;
  this.bulletsInClip=this.clipSize;
  this.lineOfSight=WeaponConstants.THOMPSON_LINE_OF_SIGHT;
  this.weaponWeight=WeaponConstants.THOMPSON_WEIGHT;
  this.netWeapon.type=Type.RAILGUN.netValue();
  applyScriptAttributes(""String_Node_Str"");
}","/** 
 * @param game
 * @param owner
 * @param type
 */
public Railgun(Game game,Entity owner){
  super(game,owner,Type.RAILGUN);
  this.roundsPerSecond=15;
  this.damage=40;
  this.reloadTime=1600;
  this.clipSize=30;
  this.totalAmmo=180;
  this.spread=10;
  this.maxHeat=3000;
  this.bulletsInClip=this.clipSize;
  this.lineOfSight=WeaponConstants.THOMPSON_LINE_OF_SIGHT;
  this.weaponWeight=WeaponConstants.THOMPSON_WEIGHT;
  this.netWeapon.type=Type.RAILGUN.netValue();
  applyScriptAttributes(""String_Node_Str"");
}",0.9980732177263968
86800,"@Override public void execute(Console console,String... args){
switch (args.length) {
case 0:
    console.println(""String_Node_Str"");
  break;
case 1:
console.println(args[0] + ""String_Node_Str"" + config.getConfig().get(args[0]));
break;
default :
{
try {
config.getConfig().set(Integer.parseInt(args[1]),args[0]);
}
 catch (Exception e) {
console.println(""String_Node_Str"");
}
}
}
}","@Override public void execute(Console console,String... args){
  if (getServerContext().hasGameSession()) {
    GameSession session=getServerContext().getGameSession();
    Game game=session.getGame();
    if (game != null) {
switch (args.length) {
case 0:
        console.println(""String_Node_Str"");
      break;
case 1:
    console.execute(""String_Node_Str"" + args[0]);
  break;
case 2:
console.execute(""String_Node_Str"" + args[0]);
console.execute(""String_Node_Str"" + args[1]);
break;
case 3:
console.execute(""String_Node_Str"" + args[0]);
console.execute(""String_Node_Str"" + args[1]);
console.execute(""String_Node_Str"" + args[2]);
break;
default :
{
console.println(""String_Node_Str"");
}
}
}
}
}",0.3626271970397779
86801,"/** 
 * Setups server side console commands
 * @param console
 */
private void setupServerCommands(Console console){
  CommonCommands.addCommonCommands(console);
  final ServerSeventhConfig config=serverContext.getConfig();
  final MapCycle mapCycle=serverContext.getMapCycle();
  console.addCommand(mapCycle.getMapListCommand());
  console.addCommand(mapCycle.getMapAddCommand());
  console.addCommand(mapCycle.getMapRemoveCommand());
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      serverContext.spawnGameSession(mergeArgsDelim(""String_Node_Str"",args));
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      serverContext.spawnGameSession(mapCycle.getNextMap());
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      serverContext.spawnGameSession(serverContext.getMapCycle().getCurrentMap());
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      Game game=serverContext.getGameSession().getGame();
      if (game != null) {
        if (args.length < 1) {
          console.println(""String_Node_Str"");
        }
 else {
          int id=serverContext.getServer().reserveId();
          if (id >= 0) {
            game.addBot(id,args[0]);
          }
          if (args.length > 1) {
            String team=args[1].trim().toLowerCase();
            if (team.startsWith(Team.ALLIED_TEAM_NAME.toLowerCase())) {
              game.playerSwitchedTeam(id,Team.ALLIED_TEAM_ID);
            }
 else             if (team.startsWith(Team.AXIS_TEAM_NAME.toLowerCase())) {
              game.playerSwitchedTeam(id,Team.AXIS_TEAM_ID);
            }
          }
          console.println(""String_Node_Str"" + id);
        }
      }
 else {
        console.println(""String_Node_Str"");
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      Game game=serverContext.getGameSession().getGame();
      if (game != null) {
        int id=serverContext.getServer().reserveId();
        if (id >= 0) {
          game.addDummyBot(id);
        }
        console.println(""String_Node_Str"" + id);
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      Game game=serverContext.getGameSession().getGame();
      if (game != null) {
switch (args.length) {
case 0:
          console.println(""String_Node_Str"");
        break;
default :
{
        int id=Integer.parseInt(args[0]);
        console.println(""String_Node_Str"" + id);
        game.kickPlayer(id);
      }
  }
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(Console console,String... args){
GameInfo game=serverContext.getGameSession().getGame();
if (game != null) {
switch (args.length) {
case 0:
    console.println(""String_Node_Str"");
  break;
default :
{
  int id=Integer.parseInt(args[0]);
  PlayerInfo player=game.getPlayerById(id);
  if (player != null && !player.isDead()) {
    player.getEntity().kill(player.getEntity());
  }
}
}
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(final Console console,String... args){
GameInfo game=serverContext.getGameSession().getGame();
if (game != null) {
PlayerInfos players=game.getPlayerInfos();
console.println(""String_Node_Str"");
console.println(""String_Node_Str"");
players.forEachPlayerInfo(new PlayerInfoIterator(){
@Override public void onPlayerInfo(PlayerInfo p){
console.printf(""String_Node_Str"",p.getName(),p.getId(),p.getPing());
}
}
);
console.println(""String_Node_Str"");
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(final Console console,String... args){
Game game=serverContext.getGameSession().getGame();
if (game != null) {
final DateFormat format=new SimpleDateFormat(""String_Node_Str"");
format.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
console.println(""String_Node_Str"");
Players players=game.getPlayers();
console.println(""String_Node_Str"");
console.println(""String_Node_Str"");
players.forEachPlayerInfo(new PlayerInfoIterator(){
@Override public void onPlayerInfo(PlayerInfo p){
console.printf(""String_Node_Str"",p.getName(),p.getKills(),p.getDeaths(),format.format(new Date(p.getJoinTime())),p.getTeam().getName());
}
}
);
console.println(""String_Node_Str"");
console.println(""String_Node_Str"");
console.println(""String_Node_Str"");
NetGameStats stats=game.getNetGameStats();
if (stats.teamStats != null) {
for (int i=0; i < stats.teamStats.length; i++) {
console.printf(""String_Node_Str"",Team.getName(stats.teamStats[i].id),stats.teamStats[i].id,stats.teamStats[i].score);
}
}
console.println(""String_Node_Str"");
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(Console console,String... args){
console.println(""String_Node_Str"");
shutdown();
console.println(""String_Node_Str"");
System.exit(0);
}
}
);
if (console.getCommand(""String_Node_Str"") == null) {
console.addCommand(""String_Node_Str"",console.getCommand(""String_Node_Str""));
console.addCommand(""String_Node_Str"",console.getCommand(""String_Node_Str""));
}
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(Console console,String... args){
switch (args.length) {
case 0:
console.println(""String_Node_Str"");
break;
case 1:
console.println(args[0] + ""String_Node_Str"" + config.getConfig().get(args[0]));
break;
default :
{
config.getConfig().set(mergeArgsDelimAt(""String_Node_Str"",1,args),args[0]);
}
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(Console console,String... args){
switch (args.length) {
case 0:
console.println(""String_Node_Str"");
break;
case 1:
console.println(args[0] + ""String_Node_Str"" + config.getConfig().get(args[0]));
break;
default :
{
try {
config.getConfig().set(Integer.parseInt(args[1]),args[0]);
}
 catch (Exception e) {
console.println(""String_Node_Str"");
}
}
}
}
}
);
}","/** 
 * Setups server side console commands
 * @param console
 */
private void setupServerCommands(Console console){
  CommonCommands.addCommonCommands(console);
  final ServerSeventhConfig config=serverContext.getConfig();
  final MapCycle mapCycle=serverContext.getMapCycle();
  console.addCommand(mapCycle.getMapListCommand());
  console.addCommand(mapCycle.getMapAddCommand());
  console.addCommand(mapCycle.getMapRemoveCommand());
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      serverContext.spawnGameSession(mergeArgsDelim(""String_Node_Str"",args));
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      serverContext.spawnGameSession(mapCycle.getNextMap());
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      serverContext.spawnGameSession(serverContext.getMapCycle().getCurrentMap());
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      Game game=serverContext.getGameSession().getGame();
      if (game != null) {
        if (args.length < 1) {
          console.println(""String_Node_Str"");
        }
 else {
          int id=serverContext.getServer().reserveId();
          if (id >= 0) {
            game.addBot(id,args[0]);
          }
          if (args.length > 1) {
            String team=args[1].trim().toLowerCase();
            if (team.startsWith(Team.ALLIED_TEAM_NAME.toLowerCase())) {
              game.playerSwitchedTeam(id,Team.ALLIED_TEAM_ID);
            }
 else             if (team.startsWith(Team.AXIS_TEAM_NAME.toLowerCase())) {
              game.playerSwitchedTeam(id,Team.AXIS_TEAM_ID);
            }
          }
          console.println(""String_Node_Str"" + id);
        }
      }
 else {
        console.println(""String_Node_Str"");
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      Game game=serverContext.getGameSession().getGame();
      if (game != null) {
        int id=serverContext.getServer().reserveId();
        if (id >= 0) {
          game.addDummyBot(id);
        }
        console.println(""String_Node_Str"" + id);
      }
    }
  }
);
  console.addCommand(new Command(""String_Node_Str""){
    @Override public void execute(    Console console,    String... args){
      Game game=serverContext.getGameSession().getGame();
      if (game != null) {
switch (args.length) {
case 0:
          console.println(""String_Node_Str"");
        break;
default :
{
        int id=Integer.parseInt(args[0]);
        console.println(""String_Node_Str"" + id);
        game.kickPlayer(id);
      }
  }
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(Console console,String... args){
GameInfo game=serverContext.getGameSession().getGame();
if (game != null) {
switch (args.length) {
case 0:
    console.println(""String_Node_Str"");
  break;
default :
{
  int id=Integer.parseInt(args[0]);
  PlayerInfo player=game.getPlayerById(id);
  if (player != null && !player.isDead()) {
    player.getEntity().kill(player.getEntity());
  }
}
}
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(final Console console,String... args){
GameInfo game=serverContext.getGameSession().getGame();
if (game != null) {
PlayerInfos players=game.getPlayerInfos();
console.println(""String_Node_Str"");
console.println(""String_Node_Str"");
players.forEachPlayerInfo(new PlayerInfoIterator(){
@Override public void onPlayerInfo(PlayerInfo p){
console.printf(""String_Node_Str"",p.getName(),p.getId(),p.getPing());
}
}
);
console.println(""String_Node_Str"");
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(final Console console,String... args){
Game game=serverContext.getGameSession().getGame();
if (game != null) {
final DateFormat format=new SimpleDateFormat(""String_Node_Str"");
format.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
console.println(""String_Node_Str"");
Players players=game.getPlayers();
console.println(""String_Node_Str"");
console.println(""String_Node_Str"");
players.forEachPlayerInfo(new PlayerInfoIterator(){
@Override public void onPlayerInfo(PlayerInfo p){
console.printf(""String_Node_Str"",p.getName(),p.getKills(),p.getDeaths(),format.format(new Date(p.getJoinTime())),p.getTeam().getName());
}
}
);
console.println(""String_Node_Str"");
console.println(""String_Node_Str"");
console.println(""String_Node_Str"");
NetGameStats stats=game.getNetGameStats();
if (stats.teamStats != null) {
for (int i=0; i < stats.teamStats.length; i++) {
console.printf(""String_Node_Str"",Team.getName(stats.teamStats[i].id),stats.teamStats[i].id,stats.teamStats[i].score);
}
}
console.println(""String_Node_Str"");
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(Console console,String... args){
console.println(""String_Node_Str"");
shutdown();
console.println(""String_Node_Str"");
System.exit(0);
}
}
);
if (console.getCommand(""String_Node_Str"") == null) {
console.addCommand(""String_Node_Str"",console.getCommand(""String_Node_Str""));
console.addCommand(""String_Node_Str"",console.getCommand(""String_Node_Str""));
}
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(Console console,String... args){
switch (args.length) {
case 0:
console.println(""String_Node_Str"");
break;
case 1:
console.println(args[0] + ""String_Node_Str"" + config.getConfig().get(args[0]));
break;
default :
{
config.getConfig().set(mergeArgsDelimAt(""String_Node_Str"",1,args),args[0]);
}
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(Console console,String... args){
switch (args.length) {
case 0:
console.println(""String_Node_Str"");
break;
case 1:
console.println(args[0] + ""String_Node_Str"" + config.getConfig().get(args[0]));
break;
default :
{
try {
config.getConfig().set(Integer.parseInt(args[1]),args[0]);
}
 catch (Exception e) {
console.println(""String_Node_Str"");
}
}
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(Console console,String... args){
if (getServerContext().hasGameSession()) {
GameSession session=getServerContext().getGameSession();
Game game=session.getGame();
if (game != null) {
switch (args.length) {
case 2:
try {
int x=Integer.parseInt(args[0]);
int y=Integer.parseInt(args[1]);
game.newTank(x,y);
}
 catch (Exception e) {
console.println(""String_Node_Str"" + e);
}
break;
default :
{
console.println(""String_Node_Str"");
}
}
}
}
}
}
);
console.addCommand(new Command(""String_Node_Str""){
@Override public void execute(Console console,String... args){
if (getServerContext().hasGameSession()) {
GameSession session=getServerContext().getGameSession();
Game game=session.getGame();
if (game != null) {
switch (args.length) {
case 0:
console.println(""String_Node_Str"");
break;
case 1:
console.execute(""String_Node_Str"" + args[0]);
break;
case 2:
console.execute(""String_Node_Str"" + args[0]);
console.execute(""String_Node_Str"" + args[1]);
break;
case 3:
console.execute(""String_Node_Str"" + args[0]);
console.execute(""String_Node_Str"" + args[1]);
console.execute(""String_Node_Str"" + args[2]);
break;
default :
{
console.println(""String_Node_Str"");
}
}
}
}
}
}
);
}",0.9098818241136808
86802,"/** 
 * Sets the orientation to move in order for the Entity to look at the dest vector.
 * @param me
 * @param dest
 */
public void reset(Entity me,Vector2f dest){
  this.destinationOrientation=Entity.getAngleBetween(dest,me.getPos());
}","/** 
 * Sets the orientation to move in order for the Entity to look at the dest vector.
 * @param me
 * @param dest
 */
public void reset(Entity me,Vector2f dest){
  this.destinationOrientation=Entity.getAngleBetween(dest,me.getPos());
  final float fullCircle=FastMath.fullCircle;
  if (this.destinationOrientation < 0) {
    this.destinationOrientation+=fullCircle;
  }
}",0.7777777777777778
86803,"/** 
 * @param game
 * @param pos
 */
public ClientBullet(ClientGame game,Vector2f pos){
  super(game,pos);
  origin=new Vector2f(pos);
  oldPos=new Vector2f(pos);
  renderPosEnd=new Vector2f();
  renderPosStart=new Vector2f();
  Random random=game.getRandom();
  trailSize=random.nextInt(2) + 1;
  setOnRemove(new BulletOnRemove());
}","/** 
 * @param game
 * @param pos
 */
public ClientBullet(ClientGame game,Vector2f pos){
  super(game,pos);
  origin=new Vector2f(pos);
  oldPos=new Vector2f(pos);
  renderPosEnd=new Vector2f();
  renderPosStart=new Vector2f();
  Random random=game.getRandom();
  trailSize=random.nextInt(2) + 1;
  bounds.width=5;
  bounds.height=5;
  setOnRemove(new BulletOnRemove());
}",0.9476661951909476
86804,"/** 
 * checks to see if there are any bullets shooting by the player, if there are, it plays some bullet zing sounds
 * @param timeStep
 */
public void checkForBulletZings(TimeStep timeStep){
  long gameClock=timeStep.getGameClock();
  ClientControllableEntity localEntity=game.getLocalPlayerFollowingEntity();
  if (localEntity != null) {
    ClientEntity[] entityList=game.getEntities().getEntities();
    int size=entityList.length;
    for (int i=0; i < size; i++) {
      ClientEntity ent=entityList[i];
      if (ent != null) {
        if (ent instanceof ClientBullet) {
          if (ent.isAlive() && ent.getLastUpdate() + 200 > gameClock) {
            if (localEntity.inEarShot(ent)) {
              zings[ent.id].playZing(gameClock,localEntity.id,ent);
            }
          }
        }
      }
    }
  }
}","/** 
 * checks to see if there are any bullets shooting by the player, if there are, it plays some bullet zing sounds
 * @param timeStep
 */
public void checkForBulletZings(TimeStep timeStep){
  long gameClock=timeStep.getGameClock();
  ClientControllableEntity localEntity=game.getLocalPlayerFollowingEntity();
  if (localEntity != null) {
    ClientEntity[] entityList=game.getEntities().getEntities();
    int size=entityList.length;
    for (int i=0; i < size; i++) {
      ClientEntity ent=entityList[i];
      if (ent != null) {
        if (ent instanceof ClientBullet) {
          ClientBullet bullet=(ClientBullet)ent;
          if (ent.isAlive() && ent.getLastUpdate() + 200 > gameClock && bullet.getOwnerId() != localEntity.id) {
            if (localEntity.inEarShot(ent)) {
              zings[ent.id].playZing(gameClock,localEntity.id,ent);
            }
          }
        }
      }
    }
  }
}",0.9479166666666666
86805,"private static Sound[] createChannel(){
  return new Sound[]{loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str"")};
}","private static Sound[] createChannel(){
  return new Sound[]{loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str""),loadSound(""String_Node_Str"")};
}",0.9917496443812234
86806,"public static void playSound(NetSound sound,float x,float y){
  SoundType type=SoundType.fromNet(sound.type);
switch (type) {
case EMPTY_FIRE:
    playFreeSound(emptyFireSnd,x,y);
  break;
case THOMPSON_FIRE:
playFreeSound(thompsonFire,x,y);
break;
case THOMPSON_RELOAD:
playFreeSound(thompsonReload,x,y);
break;
case EXPLOSION:
playFreeSound(explodeSnd,x,y);
break;
case RPG_FIRE:
playFreeSound(rocketFire,x,y);
break;
case GRENADE_PINPULLED:
playFreeSound(grenadePinPulled,x,y);
break;
case GRENADE_THROW:
playFreeSound(grenadeThrow,x,y);
break;
case SHOTGUN_FIRE:
playFreeSound(shotgunFire,x,y);
break;
case SHOTGUN_RELOAD:
playFreeSound(shotgunReload,x,y);
break;
case SHOTGUN_PUMP:
playFreeSound(shotgunPump,x,y);
break;
case SPRINGFIELD_FIRE:
playFreeSound(springfieldFire,x,y);
break;
case SPRINGFIELD_RECHAMBER:
playFreeSound(springfieldRechamber,x,y);
break;
case SPRINGFIELD_RELOAD:
playFreeSound(springfieldReload,x,y);
break;
case RISKER_FIRE:
playFreeSound(riskerFire,x,y);
break;
case RISKER_RECHAMBER:
playFreeSound(riskerRechamber,x,y);
break;
case RISKER_RELOAD:
playFreeSound(riskerReload,x,y);
break;
case M1_GARAND_FIRE:
playFreeSound(m1Fire,x,y);
break;
case M1_GARAND_LAST_FIRE:
playFreeSound(m1FireLast,x,y);
break;
case M1_GARAND_RELOAD:
playFreeSound(m1Reload,x,y);
break;
case KAR98_FIRE:
playFreeSound(kar98Fire,x,y);
break;
case KAR98_RECHAMBER:
playFreeSound(kar98Rechamber,x,y);
break;
case KAR98_RELOAD:
playFreeSound(kar98Reload,x,y);
break;
case MP44_FIRE:
playFreeSound(mp44Fire,x,y);
break;
case MP44_RELOAD:
playFreeSound(mp44Reload,x,y);
break;
case MP40_FIRE:
playFreeSound(mp40Fire,x,y);
break;
case MP40_RELOAD:
playFreeSound(mp40Reload,x,y);
break;
case SURFACE_GRASS:
playFreeSound(grassWalk,x,y);
break;
case SURFACE_METAL:
playFreeSound(metalWalk,x,y);
break;
case SURFACE_NORMAL:
playFreeSound(normalWalk,x,y);
break;
case SURFACE_WATER:
playFreeSound(waterWalk,x,y);
break;
case SURFACE_WOOD:
playFreeSound(woodWalk,x,y);
break;
case SURFACE_DIRT:
playFreeSound(dirtWalk,x,y);
break;
case SURFACE_SAND:
playFreeSound(dirtWalk,x,y);
break;
case WEAPON_SWITCH:
playFreeSound(weaponSwitch,x,y);
break;
case RUFFLE:
playFreeSound(ruffle,x,y);
break;
case BOMB_TICK:
playFreeSound(bombTick,x,y);
break;
case BOMB_PLANT:
playFreeSound(bombPlant,x,y);
break;
case BOMB_DISARM:
playFreeSound(bombDisarm,x,y);
break;
case WEAPON_DROPPED:
playFreeSound(weaponDrop,x,y);
break;
case WEAPON_PICKUP:
playFreeSound(weaponPickupSnd,x,y);
break;
case AMMO_PICKUP:
playFreeSound(ammoPickupSnd,x,y);
break;
case MELEE_SWING:
playFreeSound(meleeSwing,x,y);
break;
case MELEE_HIT:
playFreeSound(meleeHit,x,y);
break;
case PISTOL_FIRE:
playFreeSound(pistolFire,x,y);
break;
case PISTOL_RELOAD:
playFreeSound(pistolReload,x,y);
break;
case UI_ELEMENT_HOVER:
playFreeSound(uiHover,x,y);
break;
case UI_ELEMENT_SELECT:
playFreeSound(uiSelect,x,y);
break;
case UI_NAVIGATE:
playFreeSound(uiNavigate,x,y);
break;
case UI_KEY_TYPE:
playFreeSound(uiKeyType,x,y);
break;
case IMPACT_METAL:
playFreeSound(impactMetal,x,y);
break;
case IMPACT_DEFAULT:
playFreeSound(impactDefault,x,y);
break;
case IMPACT_FOLIAGE:
playFreeSound(impactFoliage,x,y);
break;
case IMPACT_WOOD:
playFreeSound(impactWood,x,y);
break;
case TANK_MOVE1:
playFreeSound(mechForwardFootstep,x,y);
break;
case TANK_MOVE2:
playFreeSound(mechRetractFootstep,x,y);
break;
case TANK_TURRET_MOVE:
playFreeSound(mechTorsoMove,x,y);
break;
case BREATH_HEAVY:
playFreeSound(breadthHeavy,x,y);
break;
case BREATH_LITE:
playFreeSound(breadthLite,x,y);
break;
case MUTE:
default :
break;
}
}","public static void playSound(NetSound sound,float x,float y){
  SoundType type=SoundType.fromNet(sound.type);
switch (type) {
case EMPTY_FIRE:
    playFreeSound(emptyFireSnd,x,y);
  break;
case THOMPSON_FIRE:
playFreeSound(thompsonFire,x,y);
break;
case THOMPSON_RELOAD:
playFreeSound(thompsonReload,x,y);
break;
case EXPLOSION:
playFreeSound(explodeSnd,x,y);
break;
case RPG_FIRE:
playFreeSound(rocketFire,x,y);
break;
case GRENADE_PINPULLED:
playFreeSound(grenadePinPulled,x,y);
break;
case GRENADE_THROW:
playFreeSound(grenadeThrow,x,y);
break;
case SHOTGUN_FIRE:
playFreeSound(shotgunFire,x,y);
break;
case SHOTGUN_RELOAD:
playFreeSound(shotgunReload,x,y);
break;
case SHOTGUN_PUMP:
playFreeSound(shotgunPump,x,y);
break;
case SPRINGFIELD_FIRE:
playFreeSound(springfieldFire,x,y);
break;
case SPRINGFIELD_RECHAMBER:
playFreeSound(springfieldRechamber,x,y);
break;
case SPRINGFIELD_RELOAD:
playFreeSound(springfieldReload,x,y);
break;
case RISKER_FIRE:
playFreeSound(riskerFire,x,y);
break;
case RISKER_RECHAMBER:
playFreeSound(riskerRechamber,x,y);
break;
case RISKER_RELOAD:
playFreeSound(riskerReload,x,y);
break;
case M1_GARAND_FIRE:
playFreeSound(m1Fire,x,y);
break;
case M1_GARAND_LAST_FIRE:
playFreeSound(m1FireLast,x,y);
break;
case M1_GARAND_RELOAD:
playFreeSound(m1Reload,x,y);
break;
case KAR98_FIRE:
playFreeSound(kar98Fire,x,y);
break;
case KAR98_RECHAMBER:
playFreeSound(kar98Rechamber,x,y);
break;
case KAR98_RELOAD:
playFreeSound(kar98Reload,x,y);
break;
case MP44_FIRE:
playFreeSound(mp44Fire,x,y);
break;
case MP44_RELOAD:
playFreeSound(mp44Reload,x,y);
break;
case MP40_FIRE:
playFreeSound(mp40Fire,x,y);
break;
case MP40_RELOAD:
playFreeSound(mp40Reload,x,y);
break;
case SURFACE_GRASS:
playFreeSound(grassWalk,x,y);
break;
case SURFACE_METAL:
playFreeSound(metalWalk,x,y);
break;
case SURFACE_NORMAL:
playFreeSound(normalWalk,x,y);
break;
case SURFACE_WATER:
playFreeSound(waterWalk,x,y);
break;
case SURFACE_WOOD:
playFreeSound(woodWalk,x,y);
break;
case SURFACE_DIRT:
playFreeSound(dirtWalk,x,y);
break;
case SURFACE_SAND:
playFreeSound(dirtWalk,x,y);
break;
case WEAPON_SWITCH:
playFreeSound(weaponSwitch,x,y);
break;
case RUFFLE:
playFreeSound(ruffle,x,y);
break;
case BOMB_TICK:
playFreeSound(bombTick,x,y);
break;
case BOMB_PLANT:
playFreeSound(bombPlant,x,y);
break;
case BOMB_DISARM:
playFreeSound(bombDisarm,x,y);
break;
case WEAPON_DROPPED:
playFreeSound(weaponDrop,x,y);
break;
case WEAPON_PICKUP:
playFreeSound(weaponPickupSnd,x,y);
break;
case AMMO_PICKUP:
playFreeSound(ammoPickupSnd,x,y);
break;
case MELEE_SWING:
playFreeSound(meleeSwing,x,y);
break;
case MELEE_HIT:
playFreeSound(meleeHit,x,y);
break;
case PISTOL_FIRE:
playFreeSound(pistolFire,x,y);
break;
case PISTOL_RELOAD:
playFreeSound(pistolReload,x,y);
break;
case UI_ELEMENT_HOVER:
playFreeSound(uiHover,x,y);
break;
case UI_ELEMENT_SELECT:
playFreeSound(uiSelect,x,y);
break;
case UI_NAVIGATE:
playFreeSound(uiNavigate,x,y);
break;
case UI_KEY_TYPE:
playFreeSound(uiKeyType,x,y);
break;
case IMPACT_METAL:
playFreeSound(impactMetal,x,y);
break;
case IMPACT_DEFAULT:
playFreeSound(impactDefault,x,y);
break;
case IMPACT_FOLIAGE:
playFreeSound(impactFoliage,x,y);
break;
case IMPACT_WOOD:
playFreeSound(impactWood,x,y);
break;
case TANK_START_MOVE:
playFreeSound(tankStart,x,y);
break;
case TANK_MOVE1:
playFreeSound(tankMove,x,y);
break;
case TANK_MOVE2:
playFreeSound(mechRetractFootstep,x,y);
break;
case TANK_TURRET_MOVE:
playFreeSound(mechTorsoMove,x,y);
break;
case BREATH_HEAVY:
playFreeSound(breadthHeavy,x,y);
break;
case BREATH_LITE:
playFreeSound(breadthLite,x,y);
break;
case MUTE:
default :
break;
}
}",0.9732516021175815
86807,"/** 
 * Lets the brain think for a game tick
 * @param timeStep
 */
public void update(TimeStep timeStep){
  if (player.isAlive()) {
    this.memory.update(timeStep);
    this.sensors.update(timeStep);
    this.motion.update(timeStep);
    this.thoughtProcess.think(timeStep,this);
    this.targetingSystem.update(timeStep);
    debugDraw();
  }
}","/** 
 * Lets the brain think for a game tick
 * @param timeStep
 */
public void update(TimeStep timeStep){
  if (player.isAlive()) {
    this.memory.update(timeStep);
    this.sensors.update(timeStep);
    this.motion.update(timeStep);
    this.thoughtProcess.think(timeStep,this);
    this.targetingSystem.update(timeStep);
    debugDraw();
    debugDrawPathPlanner();
  }
}",0.961218836565097
86808,"/** 
 * Finds a fuzzy (meaning not necessarily the most optimal but different) path between the start and end point
 * @param start
 * @param destination
 * @param the amount of fuzzy the add to the path (the greater the number the less efficient the path is to the destination)
 */
public void findFuzzyPath(Vector2f start,Vector2f destination,final int fuzzyness){
  this.fuzzySearchPath.actualFuzzy=Math.max(1,fuzzyness);
  this.finalDestination.set(destination);
  List<GraphNode<Tile,E>> newPath=this.graph.findFuzzyPath(this.fuzzySearchPath,start,destination,fuzzyness);
  setPath(newPath);
}","/** 
 * Finds a fuzzy (meaning not necessarily the most optimal but different) path between the start and end point
 * @param start
 * @param destination
 * @param the amount of fuzzy the add to the path (the greater the number the less efficient the path is to the destination)
 */
public void findFuzzyPath(Vector2f start,Vector2f destination,final int fuzzyness){
  this.fuzzySearchPath.actualFuzzy=Math.max(1,fuzzyness);
  List<GraphNode<Tile,E>> newPath=this.graph.findFuzzyPath(this.fuzzySearchPath,start,destination,fuzzyness);
  setPath(newPath);
  this.finalDestination.set(destination);
}",0.9297658862876256
86809,"private boolean isEntityOnTile(Tile tile){
  List<Player> teammates=world.getTeammates(brain);
  PlayerInfo bot=brain.getPlayer();
  int size=teammates.size();
  for (int i=0; i < size; i++) {
    if (bot.getId() != i) {
      Player p=teammates.get(i);
      if (p.isAlive()) {
        if (tile.getBounds().contains(p.getEntity().getCenterPos())) {
          return true;
        }
      }
    }
  }
  return false;
}","private Entity isEntityOnTile(Tile tile){
  Entity ent=isVehicleOnTile(tile);
  if (ent == null) {
    ent=isTeammateOnTile(tile);
  }
  return ent;
}",0.2992957746478873
86810,"/** 
 * Finds a path, avoiding the supplied   {@link Zone}s
 * @param start
 * @param destination
 * @param zonesToAvoid
 */
public void findAvoidancePath(Vector2f start,Vector2f destination,List<Zone> zonesToAvoid){
  this.avoidSearchPath.zonesToAvoid=zonesToAvoid;
  this.finalDestination.set(destination);
  List<GraphNode<Tile,E>> newPath=this.graph.findPathAvoidZones(this.avoidSearchPath,start,destination,zonesToAvoid);
  setPath(newPath);
}","/** 
 * Finds a path, avoiding the supplied   {@link Zone}s
 * @param start
 * @param destination
 * @param zonesToAvoid
 */
public void findAvoidancePath(Vector2f start,Vector2f destination,List<Zone> zonesToAvoid){
  this.avoidSearchPath.zonesToAvoid=zonesToAvoid;
  List<GraphNode<Tile,E>> newPath=this.graph.findPathAvoidZones(this.avoidSearchPath,start,destination,zonesToAvoid);
  setPath(newPath);
  this.finalDestination.set(destination);
}",0.90625
86811,"/** 
 * Clears out the path
 */
public void clearPath(){
  this.currentNode=0;
  this.finalDestination.zeroOut();
  this.path.clear();
}","/** 
 * Clears out the path
 */
public void clearPath(){
  this.currentNode=0;
  this.finalDestination.zeroOut();
  this.path.clear();
  this.tilesToAvoid.clear();
}",0.903654485049834
86812,"@Override protected boolean shouldIgnore(GraphNode<Tile,E> node){
  Tile tile=node.getValue();
  for (int i=0; i < zonesToAvoid.size(); i++) {
    Zone zone=zonesToAvoid.get(i);
    if (zone.getBounds().intersects(tile.getBounds())) {
      return true;
    }
  }
  return false;
}","@Override protected boolean shouldIgnore(GraphNode<Tile,E> node){
  Tile tile=node.getValue();
  for (int i=0; i < zonesToAvoid.size(); i++) {
    Zone zone=zonesToAvoid.get(i);
    if (zone.getBounds().intersects(tile.getBounds())) {
      return true;
    }
  }
  return shouldIgnoreTile(node.getValue());
}",0.9423728813559322
86813,"/** 
 * Calculate the estimated cost of the path from the start to destination
 * @param start
 * @param destination
 * @return the estimated cost of moving from start to destination
 */
public int pathCost(Vector2f start,Vector2f destination){
  this.fuzzySearchPath.actualFuzzy=1;
  this.finalDestination.set(destination);
  List<GraphNode<Tile,E>> newPath=this.graph.findPath(this.fuzzySearchPath,start,destination);
  int cost=newPath.size() * 32;
  return cost;
}","/** 
 * Calculate the estimated cost of the path from the start to destination
 * @param start
 * @param destination
 * @return the estimated cost of moving from start to destination
 */
public int pathCost(Vector2f start,Vector2f destination){
  this.fuzzySearchPath.actualFuzzy=1;
  List<GraphNode<Tile,E>> newPath=this.graph.findPath(this.fuzzySearchPath,start,destination);
  int cost=newPath.size() * 32;
  return cost;
}",0.953020134228188
86814,"/** 
 * Gets the next destination vector
 * @param currentPosition
 * @return the next destination
 */
public Vector2f nextDestination(Vector2f currentPosition){
  Vector2fCopy(currentPosition,destination);
  if (!path.isEmpty() && currentNode < path.size()) {
    GraphNode<Tile,E> node=path.get(currentNode);
    Tile tile=node.getValue();
    int centerX=tile.getX();
    int centerY=tile.getY();
    if (Math.abs(centerX - (int)currentPosition.x) < 6 && Math.abs(centerY - (int)currentPosition.y) < 6) {
      currentNode++;
    }
    destination.x=(int)((tile.getX() - (int)currentPosition.x));
    destination.y=(int)((tile.getY() - (int)currentPosition.y));
  }
  return destination;
}","public Vector2f nextDestination(PlayerEntity ent){
  Vector2f cPos=ent.getCenterPos();
  int x=(int)cPos.x;
  int y=(int)cPos.y;
  destination.zeroOut();
  if (!path.isEmpty() && currentNode < path.size()) {
    GraphNode<Tile,E> node=path.get(currentNode);
    Tile tile=node.getValue();
    int centerX=tile.getX() + tile.getWidth() / 2;
    int centerY=tile.getY() + tile.getHeight() / 2;
    if (Math.abs(centerX - x) < 6 && Math.abs(centerY - y) < 6) {
      currentNode++;
      if (currentNode < path.size()) {
        tile=path.get(currentNode).getValue();
        Entity entOnTile=isEntityOnTile(tile);
        if (entOnTile != null) {
          world.getMap().getTilesInRect(entOnTile.getBounds(),tilesToAvoid);
          tilesToAvoid.add(tile);
          findPath(cPos,this.finalDestination);
          return nextDestination(ent);
        }
      }
    }
    destination.x=(centerX - x);
    destination.y=(centerY - y);
  }
  return destination;
}",0.5084745762711864
86815,"/** 
 * Finds the optimal path between the start and end point
 * @param start
 * @param destination
 */
public void findPath(Vector2f start,Vector2f destination){
  this.fuzzySearchPath.actualFuzzy=1;
  this.finalDestination.set(destination);
  List<GraphNode<Tile,E>> newPath=this.graph.findPath(this.fuzzySearchPath,start,destination);
  setPath(newPath);
}","/** 
 * Finds the optimal path between the start and end point
 * @param start
 * @param destination
 */
public void findPath(Vector2f start,Vector2f destination){
  this.fuzzySearchPath.actualFuzzy=1;
  List<GraphNode<Tile,E>> newPath=this.graph.findPath(this.fuzzySearchPath,start,destination);
  setPath(newPath);
  this.finalDestination.set(destination);
}",0.8833333333333333
86816,"/** 
 * @param path
 */
public PathPlanner(Brain brain,MapGraph<E> graph){
  this.brain=brain;
  this.world=brain.getWorld();
  this.graph=graph;
  this.finalDestination=new Vector2f();
  this.destination=new Vector2f();
  this.random=new Random();
  this.path=new ArrayList<GraphNode<Tile,E>>();
  this.currentNode=0;
  this.fuzzySearchPath=new FuzzySearchPath();
  this.avoidSearchPath=new AvoidSearchPath();
}","/** 
 * @param path
 */
public PathPlanner(Brain brain,MapGraph<E> graph){
  this.brain=brain;
  this.world=brain.getWorld();
  this.graph=graph;
  this.finalDestination=new Vector2f();
  this.destination=new Vector2f();
  this.random=new Random();
  this.path=new ArrayList<GraphNode<Tile,E>>();
  this.tilesToAvoid=new ArrayList<Tile>();
  this.currentNode=0;
  this.fuzzySearchPath=new FuzzySearchPath();
  this.avoidSearchPath=new AvoidSearchPath();
}",0.95040369088812
86817,"@Override public double calculateDesirability(Brain brain){
  double desirability=0.0;
  SoundEmittedEvent sound=brain.getSensors().getSoundSensor().getClosestSound();
  if (sound != null) {
    desirability=0.35;
switch (sound.getSoundType()) {
case EXPLOSION:
case GRENADE_THROW:
case KAR98_FIRE:
case M1_GARAND_FIRE:
case MELEE_HIT:
case MELEE_SWING:
case MP40_FIRE:
case MP44_FIRE:
case PISTOL_FIRE:
case RISKER_FIRE:
case RPG_FIRE:
case SHOTGUN_FIRE:
case SPRINGFIELD_FIRE:
case THOMPSON_FIRE:
      desirability+=brain.getRandomRange(0.1,0.3);
    break;
case WEAPON_PICKUP:
case AMMO_PICKUP:
  desirability+=brain.getRandomRange(0.2,0.43);
break;
case WEAPON_DROPPED:
case WEAPON_SWITCH:
case THOMPSON_RELOAD:
case SPRINGFIELD_RECHAMBER:
case SPRINGFIELD_RELOAD:
case SHOTGUN_RELOAD:
case SHOTGUN_PUMP:
case RISKER_RELOAD:
case RISKER_RECHAMBER:
case PISTOL_RELOAD:
case MP44_RELOAD:
case MP40_RELOAD:
case M1_GARAND_RELOAD:
case KAR98_RELOAD:
case KAR98_RECHAMBER:
desirability+=brain.getRandomRange(0.4,0.45);
break;
case EMPTY_FIRE:
case GRENADE_PINPULLED:
case M1_GARAND_LAST_FIRE:
desirability+=brain.getRandomRange(0.4,0.5);
break;
case BOMB_DISARM:
case BOMB_PLANT:
desirability+=brain.getRandomRange(0.2,0.5);
break;
default :
}
}
desirability=Math.min(desirability,1f);
desirability*=getCharacterBias();
return desirability;
}","@Override public double calculateDesirability(Brain brain){
  double desirability=0.0;
  SoundEmittedEvent sound=brain.getSensors().getSoundSensor().getClosestSound();
  if (sound != null) {
    desirability=0.35;
switch (sound.getSoundType()) {
case EXPLOSION:
case GRENADE_THROW:
case KAR98_FIRE:
case M1_GARAND_FIRE:
case MELEE_HIT:
case MELEE_SWING:
case MP40_FIRE:
case MP44_FIRE:
case PISTOL_FIRE:
case RISKER_FIRE:
case RPG_FIRE:
case SHOTGUN_FIRE:
case SPRINGFIELD_FIRE:
case THOMPSON_FIRE:
      desirability+=brain.getRandomRange(0.1,0.3);
    break;
case WEAPON_PICKUP:
case AMMO_PICKUP:
  desirability+=brain.getRandomRange(0.2,0.43);
break;
case WEAPON_DROPPED:
case WEAPON_SWITCH:
case THOMPSON_RELOAD:
case SPRINGFIELD_RECHAMBER:
case SPRINGFIELD_RELOAD:
case SHOTGUN_RELOAD:
case SHOTGUN_PUMP:
case RISKER_RELOAD:
case RISKER_RECHAMBER:
case PISTOL_RELOAD:
case MP44_RELOAD:
case MP40_RELOAD:
case M1_GARAND_RELOAD:
case KAR98_RELOAD:
case KAR98_RECHAMBER:
desirability+=brain.getRandomRange(0.4,0.45);
break;
case EMPTY_FIRE:
case GRENADE_PINPULLED:
case M1_GARAND_LAST_FIRE:
desirability+=brain.getRandomRange(0.4,0.5);
break;
case BOMB_DISARM:
case BOMB_PLANT:
desirability+=brain.getRandomRange(0.2,0.5);
break;
case TANK_MOVE1:
case TANK_MOVE2:
case TANK_START_MOVE:
case TANK_TURRET_MOVE:
desirability=0f;
break;
default :
desirability=0.1f;
}
}
desirability=Math.min(desirability,1f);
desirability*=getCharacterBias();
return desirability;
}",0.955096222380613
86818,"@Override public double calculateDesirability(Brain brain){
  double score=0;
  TargetingSystem system=brain.getTargetingSystem();
  if (system.hasTarget()) {
    PlayerEntity bot=brain.getEntityOwner();
    final double tweaker=1.0;
    score=tweaker * Evaluators.healthScore(bot) * Evaluators.currentWeaponAmmoScore(bot)* Evaluators.weaponDistanceScore(bot,system.getCurrentTarget());
    if (!system.currentTargetInLineOfFire()) {
      score*=0.9;
    }
    score*=getCharacterBias();
  }
  return score;
}","@Override public double calculateDesirability(Brain brain){
  double score=0;
  TargetingSystem system=brain.getTargetingSystem();
  if (system.hasTarget()) {
    PlayerEntity bot=brain.getEntityOwner();
    final double tweaker=1.0;
    final PlayerEntity enemy=system.getCurrentTarget();
    if (enemy.isOperatingVehicle()) {
      score=0;
    }
 else {
      score=tweaker * Evaluators.healthScore(bot) * Evaluators.currentWeaponAmmoScore(bot)* Evaluators.weaponDistanceScore(bot,enemy);
    }
    if (!system.currentTargetInLineOfFire()) {
      score*=0.9;
    }
    score*=getCharacterBias();
  }
  return score;
}",0.8541114058355438
86819,"@Override public double calculateDesirability(Brain brain){
  double score=0;
  TargetingSystem system=brain.getTargetingSystem();
  if (system.hasTarget()) {
    PlayerEntity bot=brain.getEntityOwner();
    final double tweaker=1.0;
    score=tweaker * 1.0 - Evaluators.healthScore(bot) * 1.0 - Evaluators.currentWeaponAmmoScore(bot) * 1.0 - Evaluators.weaponDistanceScore(bot,system.getCurrentTarget());
    Vector2f lastSeenAt=system.getLastRemeberedPosition();
    if (lastSeenAt != null) {
    }
    if (!system.currentTargetInLineOfFire()) {
      score*=0.9;
    }
    score*=getCharacterBias();
  }
  return score;
}","@Override public double calculateDesirability(Brain brain){
  double score=0;
  TargetingSystem system=brain.getTargetingSystem();
  if (system.hasTarget()) {
    PlayerEntity bot=brain.getEntityOwner();
    final double tweaker=1.0;
    final PlayerEntity enemy=system.getCurrentTarget();
    if (enemy.isOperatingVehicle()) {
      score=1.0;
    }
 else {
      score=tweaker * 1.0 - Evaluators.healthScore(bot) * 1.0 - Evaluators.currentWeaponAmmoScore(bot) * 1.0 - Evaluators.weaponDistanceScore(bot,enemy);
    }
    Vector2f lastSeenAt=system.getLastRemeberedPosition();
    if (lastSeenAt != null) {
    }
    if (!system.currentTargetInLineOfFire()) {
      score*=0.9;
    }
    score*=getCharacterBias();
  }
  return score;
}",0.8772961058045555
86820,"/** 
 * Packs and sends out the packet for the peer.
 * @param peer
 */
private void sendPacket(Peer peer){
  if (peer != null) {
    writeBuffer.clear();
    protocol.reset();
    if (this.isServer) {
      long currentTime=System.currentTimeMillis();
      if (currentTime - peer.getLastPingTime() >= config.getPingRate()) {
        peer.setLastPingTime(currentTime);
        peer.send(new PingMessage());
      }
    }
    writeBuffer.position(protocol.size());
    if (peer.isConnecting()) {
      protocol.setPeerId(INVALID_PEER_ID);
    }
 else {
      protocol.setPeerId(peer.getId());
    }
    byte numberOfMessages=0;
    numberOfMessages+=packReliableMessages(writeBuffer,protocol,peer);
    numberOfMessages+=packUnreliableMessages(writeBuffer,protocol,peer);
    protocol.setNumberOfMessages(numberOfMessages);
    if (numberOfMessages > 0) {
      int endPosition=writeBuffer.position();
      writeBuffer.position(0);
{
        protocol.setSendSequence(peer.nextSequenceNumber());
        protocol.setAcknowledge(peer.getRemoteSequence());
        protocol.setAckHistory(peer.getAckHistory());
        protocol.writeTo(writeBuffer);
      }
      writeBuffer.position(endPosition);
      send(writeBuffer,peer);
    }
 else {
      long amountOfTimeSinceLastPacket=System.currentTimeMillis() - peer.getLastSendTime();
      if (amountOfTimeSinceLastPacket >= config.getHeartbeatTime()) {
        peer.send(new HeartbeatMessage());
      }
    }
  }
}","/** 
 * Packs and sends out the packet for the peer.
 * @param peer
 */
private void sendPacket(Peer peer){
  if (peer != null) {
    writeBuffer.clear();
    protocol.reset();
    if (this.isServer) {
      long currentTime=System.currentTimeMillis();
      if (currentTime - peer.getLastPingTime() >= config.getPingRate()) {
        peer.setLastPingTime(currentTime);
        peer.send(PingMessage.INSTANCE);
      }
    }
    writeBuffer.position(protocol.size());
    if (peer.isConnecting()) {
      protocol.setPeerId(INVALID_PEER_ID);
    }
 else {
      protocol.setPeerId(peer.getId());
    }
    byte numberOfMessages=0;
    numberOfMessages+=packReliableMessages(writeBuffer,protocol,peer);
    numberOfMessages+=packUnreliableMessages(writeBuffer,protocol,peer);
    protocol.setNumberOfMessages(numberOfMessages);
    if (numberOfMessages > 0) {
      int endPosition=writeBuffer.position();
      writeBuffer.position(0);
{
        protocol.setSendSequence(peer.nextSequenceNumber());
        protocol.setAcknowledge(peer.getRemoteSequence());
        protocol.setAckHistory(peer.getAckHistory());
        protocol.writeTo(writeBuffer);
      }
      writeBuffer.position(endPosition);
      send(writeBuffer,peer);
    }
 else {
      long amountOfTimeSinceLastPacket=System.currentTimeMillis() - peer.getLastSendTime();
      if (amountOfTimeSinceLastPacket >= config.getHeartbeatTime()) {
        peer.send(HeartbeatMessage.INSTANCE);
      }
    }
  }
}",0.9897820163487738
86821,"/** 
 * Parses the messages
 * @param peer
 * @param buffer
 * @param protocol
 */
private void parseMessages(Peer peer,IOBuffer buffer,Protocol protocol){
  byte numberOfMessages=protocol.getNumberOfMessages();
  while (numberOfMessages > 0 && buffer.position() < buffer.limit()) {
    numberOfMessages--;
    Message message=MessageHeader.readMessageHeader(buffer,messageFactory);
    if (message == null) {
      if (log.enabled()) {
        log.error(""String_Node_Str"" + receivedAddress);
      }
    }
 else     if (message.isReliable()) {
      if (!peer.isDuplicateMessage(message)) {
        peer.receive(message);
      }
    }
 else {
      if (message instanceof PingMessage) {
        peer.send(new PongMessage());
      }
 else       if (message instanceof PongMessage) {
        peer.pongMessageReceived();
      }
 else {
        peer.receive(message);
      }
    }
  }
}","/** 
 * Parses the messages
 * @param peer
 * @param buffer
 * @param protocol
 */
private void parseMessages(Peer peer,IOBuffer buffer,Protocol protocol){
  byte numberOfMessages=protocol.getNumberOfMessages();
  while (numberOfMessages > 0 && buffer.position() < buffer.limit()) {
    numberOfMessages--;
    Message message=MessageHeader.readMessageHeader(buffer,messageFactory);
    if (message == null) {
      if (log.enabled()) {
        log.error(""String_Node_Str"" + receivedAddress);
      }
    }
 else     if (message.isReliable()) {
      if (!peer.isDuplicateMessage(message)) {
        peer.receive(message);
      }
    }
 else {
      if (message instanceof PingMessage) {
        peer.send(PongMessage.INSTANCE);
      }
 else       if (message instanceof PongMessage) {
        peer.pongMessageReceived();
      }
 else {
        peer.receive(message);
      }
    }
  }
}",0.9915588069780528
86822,"/** 
 * Parses the packet; reads in the protocol headers and queuing up Messages for the Peer.
 * @param buffer
 * @throws IOException
 */
private void parsePacket(IOBuffer buffer) throws IOException {
  if (log.enabled()) {
    log.debug(""String_Node_Str"" + buffer.limit() + ""String_Node_Str""+ receivedAddress);
  }
  protocol.reset();
  protocol.readFrom(buffer,messageFactory);
  if (protocol.isValid()) {
    byte peerId=protocol.getPeerId();
    if (peerId == INVALID_PEER_ID) {
      peerId=handleConnectionRequest(buffer,protocol);
    }
    if (isValidPeerId(peerId)) {
      if (!isServer && peers[peerId] == null) {
        peers[peerId]=localPeer;
        peers[peerId].setState(State.CONNECTED);
        peers[peerId].receive(new ConnectionRequestMessage());
      }
      Peer peer=peers[peerId];
      if (peer == null) {
        if (log.enabled()) {
          log.error(""String_Node_Str"" + peerId + ""String_Node_Str"");
        }
      }
 else {
        peer.setId(peerId);
        peer.setAddress(receivedAddress);
        peer.setLastReceivedTime(System.currentTimeMillis());
        peer.addNumberOfBytesRecv(buffer.limit());
        int seqNumber=protocol.getSendSequence();
        if (peer.isSequenceMoreRecent(seqNumber)) {
          peer.setRemoteSequence(seqNumber);
          peer.setRemoteAck(protocol.getAckHistory(),protocol.getAcknowledge());
          parseMessages(peer,buffer,protocol);
        }
 else {
          peer.addDroppedPacket();
          if (log.enabled()) {
            log.error(""String_Node_Str"" + seqNumber + ""String_Node_Str""+ peer.getRemoteSequence());
          }
        }
      }
    }
 else {
      if (log.enabled()) {
        log.error(""String_Node_Str"" + peerId + ""String_Node_Str"");
      }
    }
  }
}","/** 
 * Parses the packet; reads in the protocol headers and queuing up Messages for the Peer.
 * @param buffer
 * @throws IOException
 */
private void parsePacket(IOBuffer buffer) throws IOException {
  if (log.enabled()) {
    log.debug(""String_Node_Str"" + buffer.limit() + ""String_Node_Str""+ receivedAddress);
  }
  protocol.reset();
  protocol.readFrom(buffer,messageFactory);
  if (protocol.isValid()) {
    byte peerId=protocol.getPeerId();
    if (peerId == INVALID_PEER_ID) {
      peerId=handleConnectionRequest(buffer,protocol);
    }
    if (isValidPeerId(peerId)) {
      if (!isServer && peers[peerId] == null) {
        peers[peerId]=localPeer;
        peers[peerId].setState(State.CONNECTED);
        peers[peerId].receive(new ConnectionRequestMessage());
      }
      Peer peer=peers[peerId];
      if (peer == null) {
        if (log.enabled()) {
          log.error(""String_Node_Str"" + peerId + ""String_Node_Str"");
        }
      }
 else {
        peer.setId(peerId);
        peer.setAddress(receivedAddress);
        peer.setLastReceivedTime(System.currentTimeMillis());
        peer.addNumberOfBytesRecv(buffer.limit());
        int seqNumber=protocol.getSendSequence();
        if (peer.isSequenceMoreRecent(seqNumber)) {
          int numberOfDroppedPackets=seqNumber - peer.getRemoteSequence();
          if (numberOfDroppedPackets > 1) {
            peer.addDroppedPacket(numberOfDroppedPackets);
          }
          peer.setRemoteSequence(seqNumber);
          peer.setRemoteAck(protocol.getAckHistory(),protocol.getAcknowledge());
          parseMessages(peer,buffer,protocol);
        }
 else {
          peer.addDroppedPacket();
          if (log.enabled()) {
            log.error(""String_Node_Str"" + seqNumber + ""String_Node_Str""+ peer.getRemoteSequence());
          }
        }
      }
    }
 else {
      if (log.enabled()) {
        log.error(""String_Node_Str"" + peerId + ""String_Node_Str"");
      }
    }
  }
}",0.9363538295577132
86823,"/** 
 * Reads the buffer to determine what Message to allocate.
 * @param buf
 * @param messageFactory
 * @return the Message;
 */
public static Message readMessageHeader(IOBuffer buf,NetMessageFactory messageFactory){
  Message message=null;
  byte messageType=buf.get();
switch (messageType) {
case CONNECTION_REQUEST_MESSAGE:
{
      message=new ConnectionRequestMessage();
      break;
    }
case CONNECTION_ACCEPTED_MESSAGE:
{
    message=new ConnectionAcceptedMessage();
    break;
  }
case DISCONNECT_MESSAGE:
{
  message=new DisconnectMessage();
  break;
}
case RELIABLE_NETMESSAGE:
{
message=new ReliableNetMessage();
break;
}
case UNRELIABLE_NETMESSAGE:
{
message=new UnReliableNetMessage();
break;
}
case HEARTBEAT_MESSAGE:
{
message=new HeartbeatMessage();
break;
}
case PING_MESSAGE:
{
message=new PingMessage();
break;
}
case PONG_MESSAGE:
{
message=new PongMessage();
break;
}
}
message.readFrom(buf,messageFactory);
return message;
}","/** 
 * Reads the buffer to determine what Message to allocate.
 * @param buf
 * @param messageFactory
 * @return the Message;
 */
public static Message readMessageHeader(IOBuffer buf,NetMessageFactory messageFactory){
  Message message=null;
  byte messageType=buf.get();
switch (messageType) {
case CONNECTION_REQUEST_MESSAGE:
{
      message=new ConnectionRequestMessage();
      break;
    }
case CONNECTION_ACCEPTED_MESSAGE:
{
    message=new ConnectionAcceptedMessage();
    break;
  }
case DISCONNECT_MESSAGE:
{
  message=new DisconnectMessage();
  break;
}
case RELIABLE_NETMESSAGE:
{
message=new ReliableNetMessage();
break;
}
case UNRELIABLE_NETMESSAGE:
{
message=new UnReliableNetMessage();
break;
}
case HEARTBEAT_MESSAGE:
{
message=HeartbeatMessage.INSTANCE;
break;
}
case PING_MESSAGE:
{
message=PingMessage.INSTANCE;
break;
}
case PONG_MESSAGE:
{
message=PongMessage.INSTANCE;
break;
}
}
message.readFrom(buf,messageFactory);
return message;
}",0.9764027267960148
86824,"public void addDroppedPacket(){
  this.numberOfDroppedPackets++;
}","public void addDroppedPacket(int numberOfPackets){
  this.numberOfDroppedPackets+=numberOfDroppedPackets;
}",0.7514450867052023
86825,"@Override public Message copy(){
  return new HeartbeatMessage();
}","@Override public Message copy(){
  return INSTANCE;
}",0.75
86826,"@Override public Message copy(){
  return new PingMessage();
}","@Override public Message copy(){
  return INSTANCE;
}",0.782608695652174
86827,"@Override public Message copy(){
  return new PongMessage();
}","@Override public Message copy(){
  return INSTANCE;
}",0.782608695652174
86828,"/** 
 * @param entity
 * @param x
 * @param y
 * @param width
 * @param height
 * @param notIn
 * @return a random position anywhere in the supplied bounds and not in the supplied {@link Rectangle}
 */
public Vector2f getRandomSpotNotIn(Entity entity,int x,int y,int width,int height,Rectangle notIn){
  Vector2f pos=new Vector2f(x + random.nextInt(width),y + random.nextInt(height));
  Rectangle temp=new Rectangle(entity.getBounds());
  temp.setLocation(pos);
  while (map.rectCollides(temp) || notIn.contains(temp)) {
    pos.x=x + random.nextInt(width);
    pos.y=y + random.nextInt(height);
    temp.setLocation(pos);
  }
  return pos;
}","/** 
 * @param entity
 * @param x
 * @param y
 * @param width
 * @param height
 * @param notIn
 * @return a random position anywhere in the supplied bounds and not in the supplied {@link Rectangle}
 */
public Vector2f getRandomSpotNotIn(Entity entity,int x,int y,int width,int height,Rectangle notIn){
  Vector2f pos=new Vector2f(x + random.nextInt(width),y + random.nextInt(height));
  Rectangle temp=new Rectangle(entity.getBounds());
  temp.setLocation(pos);
  while ((map.rectCollides(temp) && !map.hasWorldCollidableTile(temp.x,temp.y)) || notIn.contains(temp)) {
    pos.x=x + random.nextInt(width);
    pos.y=y + random.nextInt(height);
    temp.setLocation(pos);
  }
  return pos;
}",0.963963963963964
86829,"/** 
 * @param entity
 * @param x
 * @param y
 * @param width
 * @param height
 * @return a random position anywhere in the supplied bounds
 */
public Vector2f getRandomSpot(Entity entity,int x,int y,int width,int height){
  Vector2f pos=new Vector2f(x + random.nextInt(width),y + random.nextInt(height));
  Rectangle temp=new Rectangle(entity.getBounds());
  temp.setLocation(pos);
  int loopChecker=0;
  while (map.rectCollides(temp)) {
    pos.x=x + random.nextInt(width);
    pos.y=y + random.nextInt(height);
    temp.setLocation(pos);
    if (loopChecker++ > 1000) {
      return null;
    }
  }
  return pos;
}","/** 
 * @param entity
 * @param x
 * @param y
 * @param width
 * @param height
 * @return a random position anywhere in the supplied bounds
 */
public Vector2f getRandomSpot(Entity entity,int x,int y,int width,int height){
  Vector2f pos=new Vector2f(x + random.nextInt(width),y + random.nextInt(height));
  Rectangle temp=new Rectangle(entity.getBounds());
  temp.setLocation(pos);
  int loopChecker=0;
  while (map.rectCollides(temp) && !map.hasWorldCollidableTile(temp.x,temp.y)) {
    pos.x=x + random.nextInt(width);
    pos.y=y + random.nextInt(height);
    temp.setLocation(pos);
    if (loopChecker++ > 100000) {
      return null;
    }
  }
  return pos;
}",0.9625585023400935
86830,"/** 
 * @param playerId
 * @return returns only the entities within the viewport of the supplied player
 */
public NetGameUpdate getNetGameUpdateFor(int playerId){
  Player player=this.players.getPlayer(playerId);
  if (player == null) {
    return null;
  }
  NetGameUpdate netUpdate=this.playerUpdates[playerId];
  netUpdate.clear();
  if (player.isPureSpectator()) {
    NetEntity.toNetEntities(entities,netUpdate.entities);
    NetSound.toNetSounds(netUpdate.sounds,soundEvents);
    netUpdate.numberOfSounds=(byte)soundEvents.numberOfSounds();
    if (player.getSpectating() == null || player.getSpectating().isDead()) {
      Player otherPlayer=this.players.getRandomAlivePlayer();
      if (otherPlayer != null) {
        player.setSpectating(otherPlayer);
      }
    }
  }
 else {
    PlayerEntity playerEntity=player.isSpectating() ? player.getSpectatingEntity() : player.getEntity();
    if (playerEntity != null) {
      aSoundsHeard.clear();
      aSoundsHeard=playerEntity.getHeardSounds(soundEvents,aSoundsHeard);
      NetSound.toNetSounds(netUpdate.sounds,aSoundsHeard);
      netUpdate.numberOfSounds=(byte)aSoundsHeard.size();
      aEntitiesInView.clear();
      aEntitiesInView=playerEntity.getEntitiesInView(this);
      NetEntity.toNetEntities(aEntitiesInView,netUpdate.entities);
      if (playerEntity.isAlive()) {
        netUpdate.entities[playerEntity.getId()]=playerEntity.getNetPlayer();
      }
    }
  }
  for (int i=0; i < MAX_PERSISTANT_ENTITIES; i++) {
    if (deadFrames[i] > 0) {
      netUpdate.deadPersistantEntities.setBit(i);
    }
  }
  netUpdate.time=(int)time;
  netUpdate.spectatingPlayerId=player.getSpectatingPlayerId();
  return netUpdate;
}","/** 
 * @param playerId
 * @return returns only the entities within the viewport of the supplied player
 */
public NetGameUpdate getNetGameUpdateFor(int playerId){
  Player player=this.players.getPlayer(playerId);
  if (player == null) {
    return null;
  }
  NetGameUpdate netUpdate=new NetGameUpdate();
  netUpdate.clear();
  if (player.isPureSpectator()) {
    NetEntity.toNetEntities(entities,netUpdate.entities);
    NetSound.toNetSounds(netUpdate.sounds,soundEvents);
    netUpdate.numberOfSounds=(byte)soundEvents.numberOfSounds();
    if (player.getSpectating() == null || player.getSpectating().isDead()) {
      Player otherPlayer=this.players.getRandomAlivePlayer();
      if (otherPlayer != null) {
        player.setSpectating(otherPlayer);
      }
    }
  }
 else {
    PlayerEntity playerEntity=player.isSpectating() ? player.getSpectatingEntity() : player.getEntity();
    if (playerEntity != null) {
      aSoundsHeard.clear();
      aSoundsHeard=playerEntity.getHeardSounds(soundEvents,aSoundsHeard);
      NetSound.toNetSounds(netUpdate.sounds,aSoundsHeard);
      netUpdate.numberOfSounds=(byte)aSoundsHeard.size();
      aEntitiesInView.clear();
      aEntitiesInView=playerEntity.getEntitiesInView(this);
      NetEntity.toNetEntities(aEntitiesInView,netUpdate.entities);
      if (playerEntity.isAlive()) {
        netUpdate.entities[playerEntity.getId()]=playerEntity.getNetPlayer();
      }
    }
  }
  for (int i=0; i < MAX_PERSISTANT_ENTITIES; i++) {
    if (deadFrames[i] > 0) {
      netUpdate.deadPersistantEntities.setBit(i);
    }
  }
  netUpdate.time=(int)time;
  netUpdate.spectatingPlayerId=player.getSpectatingPlayerId();
  return netUpdate;
}",0.989611160581775
86831,"/** 
 * Lets the brain think for a game tick
 * @param timeStep
 */
public void update(TimeStep timeStep){
  if (player.isAlive()) {
    this.memory.update(timeStep);
    this.sensors.update(timeStep);
    this.motion.update(timeStep);
    this.thoughtProcess.think(timeStep,this);
    this.targetingSystem.update(timeStep);
    debugDraw();
    debugDrawPathPlanner();
  }
}","/** 
 * Lets the brain think for a game tick
 * @param timeStep
 */
public void update(TimeStep timeStep){
  if (player.isAlive()) {
    this.memory.update(timeStep);
    this.sensors.update(timeStep);
    this.motion.update(timeStep);
    this.thoughtProcess.think(timeStep,this);
    this.targetingSystem.update(timeStep);
    debugDraw();
  }
}",0.961218836565097
86832,"@SuppressWarnings(""String_Node_Str"") private void debugDraw(){
  Cover cover=world.getCover(entityOwner,entityOwner.getPos());
  DebugDraw.fillRectRelative((int)cover.getCoverPos().x,(int)cover.getCoverPos().y,5,5,0xff00ff00);
  List<AttackDirection> attackDirections=world.getAttackDirections(entityOwner);
  for (  AttackDirection dir : attackDirections) {
    DebugDraw.drawLineRelative(entityOwner.getPos(),dir.getDirection(),0xff00ff00);
  }
  DebugDraw.drawString(this.thoughtProcess.toString(),new Vector2f(20,700),0xff00ffff);
}","@SuppressWarnings(""String_Node_Str"") private void debugDraw(){
  Cover cover=world.getCover(entityOwner,entityOwner.getPos());
  DebugDraw.fillRectRelative((int)cover.getCoverPos().x,(int)cover.getCoverPos().y,5,5,0xff00ff00);
  List<AttackDirection> attackDirections=world.getAttackDirections(entityOwner);
  for (  AttackDirection dir : attackDirections) {
    DebugDraw.drawLineRelative(entityOwner.getPos(),dir.getDirection(),0xff00ff00);
  }
  Vector2f p=new Vector2f(entityOwner.getPos().x - 50,entityOwner.getPos().y + 40);
  String str=this.thoughtProcess.toString();
  String[] sections=str.split(""String_Node_Str"");
  for (  String section : sections) {
    String[] attributes=section.split(""String_Node_Str"");
    for (    String att : attributes) {
      DebugDraw.drawStringRelative(att,p,0xff00ffff);
      p.y+=12;
    }
    p.x+=10;
  }
}",0.6542056074766355
86833,"@Override public void receiveAICommand(PlayerInfo forBot,AICommand command){
  if (forBot.isBot() && forBot.isAlive()) {
    Brain brain=getBrain(forBot);
    if (brain != null) {
      Action action=this.aiCommands.compile(brain,command);
      if (action != null) {
        brain.getCommunicator().post(action);
      }
    }
  }
}","@Override public void receiveAICommand(PlayerInfo forBot,AICommand command){
  if (forBot.isBot() && forBot.isAlive()) {
    Brain brain=getBrain(forBot);
    if (brain != null) {
      Action action=this.aiCommands.compile(brain,command);
      if (action != null) {
        brain.getCommunicator().makeTopPriority(action);
      }
    }
  }
}",0.9748892171344166
86834,"/** 
 */
public ReactiveThinkListener(TeamStrategy strategy,Goals goals){
  this.strategy=strategy;
  this.goals=goals;
  this.longTermGoal=new Goal();
  this.reactiveGoal=new Goal();
}","/** 
 */
public ReactiveThinkListener(TeamStrategy strategy,Goals goals){
  this.strategy=strategy;
  this.goals=goals;
  this.longTermGoal=new Goal(""String_Node_Str"");
  this.reactiveGoal=new Goal(""String_Node_Str"");
}",0.915841584158416
86835,"/** 
 */
public WeightedThoughtProcess(TeamStrategy teamStrategy,Brain brain){
  Goals goals=brain.getWorld().getGoals();
  this.currentGoal=new ConcurrentGoal(new WeightedGoal(brain,new AttackActionEvaluator(goals,brain.getRandomRangeMin(0.85),0.82),new CommandActionEvaluator(goals,brain.getRandomRangeMin(0.8),0.8),new InvestigateActionEvaluator(goals,brain.getRandomRange(0.5,0.9),0.6),new ExploreActionEvaluator(goals,brain.getRandomRange(0.1,0.5),0.5)),new WeightedGoal(brain,new ReloadWeaponEvaluator(goals,brain.getRandomRange(0.3,0.8),0),new SwitchWeaponEvaluator(goals,brain.getRandomRange(0.3,0.8),0),new DoNothingEvaluator(goals,brain.getRandomRange(0.4,0.9),0)));
}","/** 
 */
public WeightedThoughtProcess(TeamStrategy teamStrategy,Brain brain){
  Goals goals=brain.getWorld().getGoals();
  this.currentGoal=new ConcurrentGoal(new WeightedGoal(brain,""String_Node_Str"",new AttackActionEvaluator(goals,brain.getRandomRangeMin(0.85),0.82),new DefendSelfActionEvaluator(goals,brain.getRandomRangeMin(0.85),0.81),new CommandActionEvaluator(goals,brain.getRandomRange(0.7,0.8),0.8),new InvestigateActionEvaluator(goals,brain.getRandomRange(0.5,0.9),0.6),new ExploreActionEvaluator(goals,brain.getRandomRange(0.1,0.5),0.5)),new WeightedGoal(brain,""String_Node_Str"",new ReloadWeaponEvaluator(goals,brain.getRandomRange(0.3,0.8),0),new SwitchWeaponEvaluator(goals,brain.getRandomRange(0.3,0.8),0),new DoNothingEvaluator(goals,brain.getRandomRange(0.4,0.9),0)));
}",0.9201365187713312
86836,"@Override public DebugInformation getDebugInformation(){
  DebugInformation info=new DebugInformation();
  info.add(""String_Node_Str"",this.currentGoal);
  return info;
}","@Override public DebugInformation getDebugInformation(){
  DebugInformation info=new DebugInformation();
  info.add(""String_Node_Str"",this.currentGoal.getAction(0));
  return info;
}",0.9629629629629628
86837,"@Override public boolean isFinished(Brain brain){
  boolean isfinished=!this.followMe.isAlive() || this.lastVisibleTime > timeSinceLastSeenExpireMSec;
  if (isfinished) {
    System.out.println(""String_Node_Str"");
  }
  return isfinished;
}","@Override public boolean isFinished(Brain brain){
  boolean isfinished=!this.followMe.isAlive() || this.lastVisibleTime > timeSinceLastSeenExpireMSec;
  return isfinished;
}",0.837772397094431
86838,"@Override public void start(Brain brain){
  this.timeToDefend=this.originalTimeToDefend;
  if (!this.interrupted) {
    this.currentDirection=(currentDirection + 1) % this.attackDirs.size();
    this.dir.set(this.attackDirs.get(currentDirection).getDirection());
  }
}","@Override public void start(Brain brain){
  this.timeToDefend=this.originalTimeToDefend;
  if (!this.interrupted && this.attackDirs.size() > 0) {
    this.currentDirection=(currentDirection + 1) % this.attackDirs.size();
    this.dir.set(this.attackDirs.get(currentDirection).getDirection());
  }
}",0.9469964664310954
86839,"@Override public DebugInformation getDebugInformation(){
  DebugInformation me=new DebugInformation();
  me.add(""String_Node_Str"",this.actions);
  return me;
}","@Override public DebugInformation getDebugInformation(){
  DebugInformation me=new DebugInformation();
  me.add(""String_Node_Str"",this.name);
  me.add(""String_Node_Str"",this.actions.peek());
  return me;
}",0.8736263736263736
86840,"/** 
 */
public Goal(){
  this.actions=new ConcurrentLinkedDeque<>();
  this.isFirstAction=true;
}","/** 
 */
public Goal(String name){
  this.actions=new ConcurrentLinkedDeque<>();
  this.isFirstAction=true;
  this.name=name;
}",0.8711111111111111
86841,"public Goal enemyEncountered(Goals goals,Brain brain){
  return new WeightedGoal(brain,new MoveTowardEnemyEvaluator(goals,brain.getRandomRangeMin(0.48),0.8),new TakeCoverEvaluator(goals,brain.getRandomRangeMin(0.3),0.9));
}","public Goal enemyEncountered(Goals goals,Brain brain){
  return new WeightedGoal(brain,""String_Node_Str"",new MoveTowardEnemyEvaluator(goals,brain.getRandomRangeMin(0.48),0.8),new TakeCoverEvaluator(goals,brain.getRandomRangeMin(0.3),0.9));
}",0.961206896551724
86842,"public Action surpressFire(Goals goals,Brain brain,Vector2f position){
  return new WeightedGoal(brain,new SurpressFireEvaluator(goals,brain.getRandomRangeMin(0.3),0.9,position));
}","public Action surpressFire(Goals goals,Brain brain,Vector2f position){
  return new WeightedGoal(brain,""String_Node_Str"",new SurpressFireEvaluator(goals,brain.getRandomRangeMin(0.3),0.9,position));
}",0.9526315789473684
86843,"/** 
 * Goal which decides which attack method to use
 * @param goals
 * @param brain
 * @return the goal
 */
public Goal decideAttackMethod(Goals goals,Brain brain){
  return new WeightedGoal(brain,new ShootWeaponEvaluator(goals,brain.getRandomRangeMin(0.8),0.8),new MeleeEvaluator(goals,brain.getRandomRangeMin(0.5),0),new GrenadeEvaluator(goals,brain.getRandomRangeMin(0.2),0.2));
}","/** 
 * Goal which decides which attack method to use
 * @param goals
 * @param brain
 * @return the goal
 */
public Goal decideAttackMethod(Goals goals,Brain brain){
  return new WeightedGoal(brain,""String_Node_Str"",new ShootWeaponEvaluator(goals,brain.getRandomRangeMin(0.8),0.8),new MeleeEvaluator(goals,brain.getRandomRangeMin(0.5),0),new GrenadeEvaluator(goals,brain.getRandomRangeMin(0.2),0.2));
}",0.9771573604060914
86844,"public Action moveToCover(Cover cover,Brain brain){
  Action action=getScriptedAction(""String_Node_Str"");
  action.getActionResult().setValue(cover);
  return new ConcurrentGoal(action,new WeightedGoal(brain,new ShootWeaponEvaluator(this,brain.getRandomRangeMin(0.8),0.8),new MeleeEvaluator(this,brain.getRandomRange(0.2,0.4),0),new DoNothingEvaluator(this,brain.getRandomRangeMin(0.6),0),new GrenadeEvaluator(this,brain.getRandomRangeMin(0.5),0)));
}","public Action moveToCover(Cover cover,Brain brain){
  Action action=getScriptedAction(""String_Node_Str"");
  action.getActionResult().setValue(cover);
  return new ConcurrentGoal(action,new WeightedGoal(brain,""String_Node_Str"",new ShootWeaponEvaluator(this,brain.getRandomRangeMin(0.8),0.8),new MeleeEvaluator(this,brain.getRandomRange(0.2,0.4),0),new DoNothingEvaluator(this,brain.getRandomRangeMin(0.6),0),new GrenadeEvaluator(this,brain.getRandomRangeMin(0.5),0)));
}",0.9804347826086957
86845,"/** 
 */
public PlantBombAction(BombTarget bomb){
  this.bomb=bomb;
}","/** 
 * @param target 
 */
public PlantBombAction(BombTarget target){
  this.target=target;
}",0.7037037037037037
86846,"@Override public void start(Brain brain){
}","@Override public void start(Brain brain){
  if (target != null && target.bombActive()) {
    getActionResult().setSuccess();
  }
 else {
    getActionResult().setFailure();
  }
}",0.3891402714932127
86847,"@Override public void update(Brain brain,TimeStep timeStep){
  if (bomb.bombActive()) {
    getActionResult().setSuccess();
  }
 else {
    Locomotion motion=brain.getMotion();
    if (!bomb.bombPlanting() || !motion.isPlanting()) {
      motion.plantBomb(bomb);
    }
    getActionResult().setFailure();
  }
}","@Override public void update(Brain brain,TimeStep timeStep){
  if (target != null) {
    if (target.bombActive()) {
      getActionResult().setSuccess();
    }
 else {
      Locomotion motion=brain.getMotion();
      if (!target.bombPlanting() || !motion.isPlanting()) {
        motion.plantBomb(target);
      }
      getActionResult().setFailure();
    }
  }
}",0.8422619047619048
86848,"@Override public DebugInformation getDebugInformation(){
  return super.getDebugInformation().add(""String_Node_Str"",this.bomb.getId());
}","@Override public DebugInformation getDebugInformation(){
  return super.getDebugInformation().add(""String_Node_Str"",this.target.getId());
}",0.9637681159420288
86849,"@Override public boolean isFinished(Brain brain){
  if (!bomb.isAlive()) {
    return true;
  }
  if (bomb.bombActive()) {
    return true;
  }
  return false;
}","@Override public boolean isFinished(Brain brain){
  if (target == null || !target.isAlive()) {
    return true;
  }
  if (target.bombActive()) {
    return true;
  }
  if (!brain.getEntityOwner().isTouching(target)) {
    return true;
  }
  return false;
}",0.6618705035971223
86850,"@SuppressWarnings(""String_Node_Str"") private void debugDrawPathPlanner(){
  PathFeeder<?> pathPlanner=motion.getPathFeeder();
  if (pathPlanner != null) {
    for (    GraphNode<Tile,?> node : pathPlanner.getPath()) {
      Tile tile=node.getValue();
      if (tile != null) {
        DebugDraw.drawRectRelative(tile.getX(),tile.getY(),tile.getWidth(),tile.getHeight(),0xff00ff00);
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void debugDrawPathPlanner(){
  PathPlanner<?> pathPlanner=motion.getPathPlanner();
  if (pathPlanner != null) {
    for (    GraphNode<Tile,?> node : pathPlanner.getPath()) {
      Tile tile=node.getValue();
      if (tile != null) {
        DebugDraw.drawRectRelative(tile.getX(),tile.getY(),tile.getWidth(),tile.getHeight(),0xff00ff00);
      }
    }
  }
}",0.9776119402985076
86851,"/** 
 * Do the actual movement
 */
private void moveEntity(){
  moveDelta.zeroOut();
  if (pathFeeder.hasPath()) {
    if (!pathFeeder.atDestination()) {
      Vector2f nextDest=pathFeeder.nextDestination(me);
      moveDelta.set(nextDest);
    }
 else {
      Vector2f nextDest=pathFeeder.getDestination();
      Vector2f.Vector2fSubtract(nextDest,me.getPos(),moveDelta);
      if (moveDelta.lengthSquared() < 26) {
        moveDelta.zeroOut();
      }
    }
  }
  directMove(moveDelta);
}","/** 
 * Do the actual movement
 */
private void moveEntity(){
  moveDelta.zeroOut();
  if (pathPlanner.hasPath()) {
    if (!pathPlanner.atDestination()) {
      Vector2f nextDest=pathPlanner.nextDestination(me);
      moveDelta.set(nextDest);
    }
 else {
      Vector2f nextDest=pathPlanner.getDestination();
      Vector2f.Vector2fSubtract(nextDest,me.getPos(),moveDelta);
      if (moveDelta.lengthSquared() < 26) {
        moveDelta.zeroOut();
      }
    }
  }
  directMove(moveDelta);
}",0.9634146341463414
86852,"@SuppressWarnings(""String_Node_Str"") private void debugDraw(){
  int y=100;
  int x=20;
  final int yOffset=20;
  int color=0xff00ff00;
  final String message=""String_Node_Str"";
  DebugDraw.drawString(String.format(message,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),x,y,color);
  DebugDraw.drawString(""String_Node_Str"",x,y+=yOffset,color);
  String text=String.format(message,""String_Node_Str"",destinationGoal.getAction() != null ? destinationGoal.getAction().getClass().getSimpleName() : ""String_Node_Str"",destinationGoal.isFinished(brain));
  DebugDraw.drawString(text,x,y+=yOffset,color);
  text=String.format(message,""String_Node_Str"",facingGoal.getAction() != null ? facingGoal.getAction().getClass().getSimpleName() : ""String_Node_Str"",facingGoal.isFinished(brain));
  DebugDraw.drawString(text,x,y+=yOffset,color);
  text=String.format(message,""String_Node_Str"",handsGoal.getAction() != null ? handsGoal.getAction().getClass().getSimpleName() : ""String_Node_Str"",handsGoal.isFinished(brain));
  DebugDraw.drawString(text,x,y+=yOffset,color);
}","@SuppressWarnings(""String_Node_Str"") private void debugDraw(){
  MapGraph<?> graph=brain.getWorld().getGraph();
  for (int y=0; y < graph.graph.length; y++) {
    for (int x=0; x < graph.graph[0].length; x++) {
      GraphNode<Tile,?> node=graph.getNodeByIndex(x,y);
      if (node != null) {
        Tile t=node.getValue();
      }
    }
  }
  Entity ent=brain.getEntityOwner();
  if (ent != null) {
    DebugDraw.fillRectRelative(ent.getBounds().x,ent.getBounds().y,ent.getBounds().width,ent.getBounds().height,0xffff0000);
  }
}",0.0903954802259887
86853,"/** 
 * @return the destination this entity is moving towards, or null if nodestination
 */
public Vector2f getDestination(){
  if (this.pathFeeder != null) {
    return pathFeeder.getDestination();
  }
  return null;
}","/** 
 * @return the destination this entity is moving towards, or null if nodestination
 */
public Vector2f getDestination(){
  if (this.pathPlanner != null) {
    return pathPlanner.getDestination();
  }
  return null;
}",0.9590909090909092
86854,"/** 
 * Remove the   {@link PathFeeder}
 */
public void emptyPath(){
  this.pathFeeder.clearPath();
}","/** 
 * Remove the   {@link PathPlanner}
 */
public void emptyPath(){
  this.pathPlanner.clearPath();
}",0.9117647058823528
86855,"/** 
 */
public Locomotion(Brain brain){
  this.brain=brain;
  this.pathFeeder=new PathFeeder<>(brain.getWorld().getGraph());
  this.random=brain.getWorld().getRandom();
  this.destinationGoal=new DecoratorAction(brain);
  this.legsGoal=new DecoratorAction(brain);
  this.facingGoal=new DecoratorAction(brain);
  this.handsGoal=new DecoratorAction(brain);
  this.moveDelta=new Vector2f();
  this.headScan=new HeadScanAction();
  this.moveAction=new MoveAction();
  this.lookAt=new LookAtAction(0);
  this.stareAt=new StareAtEntityAction(null);
  this.fireAt=new FireAtAction(null);
  this.crouchAction=new CrouchAction();
  this.walkAction=new WalkAction();
  this.sprintAction=new SprintAction();
  this.reloadAction=new ReloadAction();
  this.meleeAction=new MeleeAction();
  this.dropWeaponAction=new DropWeaponAction();
  this.shootAction=new ShootAction();
  reset(brain);
}","/** 
 */
public Locomotion(Brain brain){
  this.brain=brain;
  this.pathPlanner=new PathPlanner<>(brain.getWorld().getGraph());
  this.random=brain.getWorld().getRandom();
  this.destinationGoal=new DecoratorAction(brain);
  this.legsGoal=new DecoratorAction(brain);
  this.facingGoal=new DecoratorAction(brain);
  this.handsGoal=new DecoratorAction(brain);
  this.moveDelta=new Vector2f();
  this.headScan=new HeadScanAction();
  this.moveAction=new MoveAction();
  this.lookAt=new LookAtAction(0);
  this.stareAt=new StareAtEntityAction(null);
  this.fireAt=new FireAtAction(null);
  this.crouchAction=new CrouchAction();
  this.walkAction=new WalkAction();
  this.sprintAction=new SprintAction();
  this.reloadAction=new ReloadAction();
  this.meleeAction=new MeleeAction();
  this.dropWeaponAction=new DropWeaponAction();
  this.shootAction=new ShootAction();
  reset(brain);
}",0.9784090909090908
86856,"@Override public void update(Brain brain,TimeStep timeStep){
  PlayerEntity ent=brain.getEntityOwner();
  this.sampleTime-=timeStep.getDeltaTime();
  if (this.sampleTime < 0) {
    PathFeeder<?> feeder=brain.getMotion().getPathFeeder();
    Vector2f dest=null;
    if (feeder.hasPath()) {
      dest=feeder.nextDestination(ent);
    }
 else {
      dest=ent.getMovementDir();
    }
    Vector2f.Vector2fNormalize(dest,dest);
    destination.set(dest);
    this.sampleTime=200;
  }
  float currentOrientation=ent.getOrientation();
  float destinationOrientation=(float)(Math.atan2(destination.y,destination.x));
  float deltaOrientation=(destinationOrientation - currentOrientation);
  float deltaOrientationAbs=Math.abs(deltaOrientation);
  if (deltaOrientationAbs > Math.PI) {
    deltaOrientation=deltaOrientationAbs - fullCircle;
  }
  final double movementSpeed=Math.toRadians(15.0f);
  if (deltaOrientation != 0) {
    float direction=deltaOrientation / deltaOrientationAbs;
    currentOrientation+=(direction * Math.min(movementSpeed,deltaOrientationAbs));
    currentOrientation%=fullCircle;
  }
  ent.setOrientation(currentOrientation);
}","@Override public void update(Brain brain,TimeStep timeStep){
  PlayerEntity ent=brain.getEntityOwner();
  this.sampleTime-=timeStep.getDeltaTime();
  if (this.sampleTime < 0) {
    PathPlanner<?> feeder=brain.getMotion().getPathPlanner();
    Vector2f dest=null;
    if (feeder.hasPath()) {
      dest=feeder.nextDestination(ent);
    }
 else {
      dest=ent.getMovementDir();
    }
    Vector2f.Vector2fNormalize(dest,dest);
    destination.set(dest);
    this.sampleTime=200;
  }
  float currentOrientation=ent.getOrientation();
  float destinationOrientation=(float)(Math.atan2(destination.y,destination.x));
  float deltaOrientation=(destinationOrientation - currentOrientation);
  float deltaOrientationAbs=Math.abs(deltaOrientation);
  if (deltaOrientationAbs > Math.PI) {
    deltaOrientation=deltaOrientationAbs - fullCircle;
  }
  final double movementSpeed=Math.toRadians(15.0f);
  if (deltaOrientation != 0) {
    float direction=deltaOrientation / deltaOrientationAbs;
    currentOrientation+=(direction * Math.min(movementSpeed,deltaOrientationAbs));
    currentOrientation%=fullCircle;
  }
  ent.setOrientation(currentOrientation);
}",0.992153443766347
86857,"@Override public void start(Brain brain){
  Vector2f position=brain.getEntityOwner().getPos();
  PathFeeder<?> feeder=brain.getMotion().getPathFeeder();
  if (this.zonesToAvoid.isEmpty()) {
    feeder.findFuzzyPath(position,this.destination,this.fuzzyNess);
  }
 else {
    feeder.findAvoidancePath(position,this.destination,this.zonesToAvoid);
  }
}","@Override public void start(Brain brain){
  Vector2f position=brain.getEntityOwner().getCenterPos();
  PathPlanner<?> feeder=brain.getMotion().getPathPlanner();
  if (this.zonesToAvoid.isEmpty()) {
    feeder.findFuzzyPath(position,this.destination,this.fuzzyNess);
  }
 else {
    feeder.findAvoidancePath(position,this.destination,this.zonesToAvoid);
  }
}",0.9661016949152542
86858,"@Override public boolean isFinished(Brain brain){
  PathFeeder<?> path=brain.getMotion().getPathFeeder();
  return !path.hasPath() || path.atDestination();
}","@Override public boolean isFinished(Brain brain){
  PathPlanner<?> path=brain.getMotion().getPathPlanner();
  return !path.hasPath() || path.atDestination();
}",0.9430379746835444
86859,"@Override public boolean isFinished(Brain brain){
  PathFeeder<?> path=brain.getMotion().getPathFeeder();
  return path.atDestination();
}","@Override public boolean isFinished(Brain brain){
  PathPlanner<?> path=brain.getMotion().getPathPlanner();
  return path.atDestination();
}",0.935251798561151
86860,"/** 
 * Renders the game
 * @param canvas
 */
public void render(Canvas canvas){
  renderFrameBuffer(canvas);
  canvas.begin();
  map.render(canvas,camera,0);
  canvas.end();
  backgroundEffects.render(canvas,camera,0);
  ClientEntity[] entityList=entities.getEntities();
  int size=entityList.length;
  for (int i=0; i < size; i++) {
    renderingOrderEntities[i]=null;
    ClientEntity entity=entityList[i];
    if (entity != null) {
      if (entity.isBackgroundObject()) {
        entity.render(canvas,camera,0);
      }
 else {
        renderingOrderEntities[i]=entity;
      }
    }
  }
  for (int i=0; i < size; i++) {
    ClientEntity entity=renderingOrderEntities[i];
    if (entity != null) {
      entity.render(canvas,camera,0);
    }
    renderingOrderEntities[i]=null;
  }
  foregroundEffects.render(canvas,camera,0);
  map.renderForeground(canvas,camera,0);
  canvas.setColor(0,45);
  map.renderSolid(canvas,camera,0);
  lightSystem.render(canvas,camera,0);
  DebugDraw.enable(false);
  DebugDraw.render(canvas,camera);
  canvas.setShader(null);
  hud.render(canvas,camera,0);
}","/** 
 * Renders the game
 * @param canvas
 */
public void render(Canvas canvas){
  renderFrameBuffer(canvas);
  canvas.begin();
  map.render(canvas,camera,0);
  canvas.end();
  backgroundEffects.render(canvas,camera,0);
  ClientEntity[] entityList=entities.getEntities();
  int size=entityList.length;
  for (int i=0; i < size; i++) {
    renderingOrderEntities[i]=null;
    ClientEntity entity=entityList[i];
    if (entity != null) {
      if (entity.isBackgroundObject()) {
        entity.render(canvas,camera,0);
      }
 else {
        renderingOrderEntities[i]=entity;
      }
    }
  }
  for (int i=0; i < size; i++) {
    ClientEntity entity=renderingOrderEntities[i];
    if (entity != null) {
      entity.render(canvas,camera,0);
    }
    renderingOrderEntities[i]=null;
  }
  foregroundEffects.render(canvas,camera,0);
  map.renderForeground(canvas,camera,0);
  canvas.setColor(0,45);
  map.renderSolid(canvas,camera,0);
  lightSystem.render(canvas,camera,0);
  DebugDraw.enable(true);
  DebugDraw.render(canvas,camera);
  canvas.setShader(null);
  hud.render(canvas,camera,0);
}",0.9967963386727688
86861,"/** 
 * @param runtime
 * @param world
 */
public Brain(TeamStrategy strategy,World world,PlayerInfo player){
  this.world=world;
  this.player=player;
  this.entityOwner=player.getEntity();
  this.memory=new Memory();
  this.motion=new Locomotion(this);
  this.sensors=new Sensors(this);
  this.thoughtProcess=new SimpleThoughtProcess(new ReactiveThinkListener(strategy,world.getGoals()),this);
  this.communicator=new Communicator();
}","/** 
 * @param runtime
 * @param world
 */
public Brain(TeamStrategy strategy,World world,PlayerInfo player){
  this.world=world;
  this.player=player;
  this.entityOwner=player.getEntity();
  this.memory=new Memory();
  this.motion=new Locomotion(this);
  this.sensors=new Sensors(this);
  this.thoughtProcess=new SimpleThoughtProcess(new ReactiveThinkListener(strategy,world.getGoals()),this);
  this.communicator=new Communicator(world);
}",0.994311717861206
86862,"/** 
 * Lets the brain think for a game tick
 * @param timeStep
 */
public void update(TimeStep timeStep){
  if (player.isAlive()) {
    this.sensors.update(timeStep);
    this.motion.update(timeStep);
    this.thoughtProcess.think(timeStep,this);
    debugDrawPathPlanner();
  }
}","/** 
 * Lets the brain think for a game tick
 * @param timeStep
 */
public void update(TimeStep timeStep){
  if (player.isAlive()) {
    this.sensors.update(timeStep);
    this.motion.update(timeStep);
    this.thoughtProcess.think(timeStep,this);
  }
}",0.947565543071161
86863,"/** 
 */
public Communicator(){
  this.commands=new ConcurrentLinkedQueue<Action>();
}","/** 
 * @param world
 */
public Communicator(World world){
  this.world=world;
  this.commands=new ConcurrentLinkedQueue<Action>();
  this.broadcastBounds=new Rectangle(1000,1000);
}",0.6417910447761194
86864,"@Override public void update(TimeStep timeStep){
  for (int i=0; i < brains.length; i++) {
    Brain brain=brains[i];
    if (brain != null) {
      brain.update(timeStep);
    }
  }
  this.alliedAIStrategy.update(timeStep,game);
  this.axisAIStrategy.update(timeStep,game);
  debugDrawZones();
}","@Override public void update(TimeStep timeStep){
  for (int i=0; i < brains.length; i++) {
    Brain brain=brains[i];
    if (brain != null) {
      brain.update(timeStep);
    }
  }
  this.alliedAIStrategy.update(timeStep,game);
  this.axisAIStrategy.update(timeStep,game);
}",0.965034965034965
86865,"/** 
 * Listen for sounds
 */
private void listen(){
  if (timeToHear <= 0) {
    this.sounds.clear();
    List<SoundEmittedEvent> emittedSounds=world.getSoundEvents();
    if (!emittedSounds.isEmpty()) {
      this.entity.getHeardSounds(emittedSounds,this.sounds);
    }
    memory.store(HEARING,this.sounds);
    this.timeToHear=REFRESH_TIME;
  }
}","/** 
 * Listen for sounds
 */
private void listen(){
  if (timeToHear <= 0) {
    this.sounds.clear();
    SoundEventPool emittedSounds=world.getSoundEvents();
    if (emittedSounds.hasSounds()) {
      this.entity.getHeardSounds(emittedSounds,this.sounds);
    }
    memory.store(HEARING,this.sounds);
    this.timeToHear=REFRESH_TIME;
  }
}",0.8988439306358381
86866,"/** 
 * @param entities
 * @param map
 * @param graph
 */
public World(GameInfo game,Zones zones,Goals goals){
  super();
  this.game=game;
  this.zones=zones;
  this.goals=goals;
  this.entities=game.getEntities();
  this.players=game.getPlayerEntities();
  this.map=game.getMap();
  this.graph=game.getGraph();
  this.random=game.getRandom();
  this.tiles=new ArrayList<Tile>();
  this.tileBounds=new Rectangle();
  this.tileBounds.setWidth(map.getTileWidth());
  this.tileBounds.setHeight(map.getTileHeight());
  this.lastFramesSounds=new ArrayList<SoundEmittedEvent>();
  this.attackDirections=new ArrayList<AttackDirection>();
  this.activeBombs=new ArrayList<BombTarget>();
}","/** 
 * @param entities
 * @param map
 * @param graph
 */
public World(GameInfo game,Zones zones,Goals goals){
  super();
  this.game=game;
  this.zones=zones;
  this.goals=goals;
  this.entities=game.getEntities();
  this.players=game.getPlayerEntities();
  this.map=game.getMap();
  this.graph=game.getGraph();
  this.random=game.getRandom();
  this.tiles=new ArrayList<Tile>();
  this.tileBounds=new Rectangle();
  this.tileBounds.setWidth(map.getTileWidth());
  this.tileBounds.setHeight(map.getTileHeight());
  this.lastFramesSounds=new SoundEventPool(SeventhConstants.MAX_SOUNDS);
  this.attackDirections=new ArrayList<AttackDirection>();
  this.activeBombs=new ArrayList<BombTarget>();
}",0.9629090909090908
86867,"/** 
 * @return the soundEvents
 */
public List<SoundEmittedEvent> getSoundEvents(){
  this.lastFramesSounds.clear();
  this.lastFramesSounds.addAll(this.game.getLastFramesSoundEvents());
  this.lastFramesSounds.addAll(this.game.getSoundEvents());
  return this.lastFramesSounds;
}","/** 
 * @return the soundEvents
 */
public SoundEventPool getSoundEvents(){
  this.lastFramesSounds.clear();
  this.lastFramesSounds.set(this.game.getLastFramesSoundEvents());
  this.lastFramesSounds.set(this.game.getSoundEvents());
  return this.lastFramesSounds;
}",0.3912248628884826
86868,"public void applyGameUpdate(GameUpdateMessage msg){
  NetGameUpdate netUpdate=msg.netUpdate;
  gameClock=netUpdate.time;
  if (netUpdate.entities != null) {
    int size=netUpdate.entities.length;
    for (int i=0; i < size; i++) {
      NetEntity netEnt=netUpdate.entities[i];
      if (netEnt != null) {
        if (entities.containsEntity(netEnt.id)) {
          ClientEntity ent=entities.getEntity(netEnt.id);
          if (Type.fromNet(netEnt.type) == ent.getType()) {
            ent.updateState(netEnt,gameClock);
          }
 else {
            removeEntity(i);
            createEntity(netEnt);
          }
        }
 else {
          createEntity(netEnt);
        }
      }
 else {
        if (i < SeventhConstants.MAX_PERSISTANT_ENTITIES) {
          if (netUpdate.deadPersistantEntities.getBit(i)) {
            removeEntity(i);
          }
        }
 else {
          removeEntity(i);
        }
      }
    }
  }
  if (netUpdate.sounds != null) {
    int size=netUpdate.sounds.length;
    for (int i=0; i < size; i++) {
      NetSound snd=netUpdate.sounds[i];
      if (snd != null) {
        Sounds.playSound(snd,snd.posX,snd.posY);
      }
    }
  }
  if (netUpdate.spectatingPlayerId > -1) {
    int previousSpec=localPlayer.getSpectatingPlayerId();
    localPlayer.setSpectatingPlayerId(netUpdate.spectatingPlayerId);
    if (previousSpec != netUpdate.spectatingPlayerId) {
      ClientEntity ent=this.entities.getEntity(netUpdate.spectatingPlayerId);
      if (ent != null) {
        camera.centerAroundNow(ent.getCenterPos());
      }
    }
  }
 else {
    localPlayer.setSpectatingPlayerId(Entity.INVALID_ENTITY_ID);
  }
}","public void applyGameUpdate(GameUpdateMessage msg){
  NetGameUpdate netUpdate=msg.netUpdate;
  gameClock=netUpdate.time;
  if (netUpdate.entities != null) {
    int size=netUpdate.entities.length;
    for (int i=0; i < size; i++) {
      NetEntity netEnt=netUpdate.entities[i];
      if (netEnt != null) {
        if (entities.containsEntity(netEnt.id)) {
          ClientEntity ent=entities.getEntity(netEnt.id);
          if (Type.fromNet(netEnt.type) == ent.getType()) {
            ent.updateState(netEnt,gameClock);
          }
 else {
            removeEntity(i);
            createEntity(netEnt);
          }
        }
 else {
          createEntity(netEnt);
        }
      }
 else {
        if (i < SeventhConstants.MAX_PERSISTANT_ENTITIES) {
          if (netUpdate.deadPersistantEntities.getBit(i)) {
            removeEntity(i);
          }
        }
 else {
          removeEntity(i);
        }
      }
    }
  }
  if (netUpdate.sounds != null) {
    int size=netUpdate.numberOfSounds;
    for (int i=0; i < size; i++) {
      NetSound snd=netUpdate.sounds[i];
      if (snd != null) {
        Sounds.playSound(snd,snd.posX,snd.posY);
      }
    }
  }
  if (netUpdate.spectatingPlayerId > -1) {
    int previousSpec=localPlayer.getSpectatingPlayerId();
    localPlayer.setSpectatingPlayerId(netUpdate.spectatingPlayerId);
    if (previousSpec != netUpdate.spectatingPlayerId) {
      ClientEntity ent=this.entities.getEntity(netUpdate.spectatingPlayerId);
      if (ent != null) {
        camera.centerAroundNow(ent.getCenterPos());
      }
    }
  }
 else {
    localPlayer.setSpectatingPlayerId(Entity.INVALID_ENTITY_ID);
  }
}",0.9923896499238964
86869,"public void updatePartialStats(NetPlayerPartialStat state){
  this.stats.deaths=state.deaths;
  this.stats.kills=state.kills;
  if (this.team.getId() != this.stats.teamId) {
    changeTeam(ClientTeam.fromId(this.stats.teamId));
  }
}","public void updatePartialStats(NetPlayerPartialStat state){
  this.stats.deaths=state.deaths;
  this.stats.kills=state.kills;
}",0.7055555555555556
86870,"@Override public List<SoundEmittedEvent> getSoundEvents(){
  return soundEvents;
}","@Override public SoundEventPool getSoundEvents(){
  return soundEvents;
}",0.8903225806451613
86871,"/** 
 * @param playerId
 * @return returns only the entities within the viewport of the supplied player
 */
public NetGameUpdate getNetGameUpdateFor(int playerId){
  Player player=this.players.getPlayer(playerId);
  if (player == null) {
    return null;
  }
  NetGameUpdate netUpdate=this.playerUpdates[playerId];
  netUpdate.clear();
  NetSound[] sounds=null;
  if (player.isPureSpectator()) {
    NetEntity.toNetEntities(entities,netUpdate.entities);
    sounds=NetSound.toNetSounds(soundEvents);
    if (player.getSpectating() == null || player.getSpectating().isDead()) {
      Player otherPlayer=this.players.getRandomAlivePlayer();
      if (otherPlayer != null) {
        player.setSpectating(otherPlayer);
      }
    }
  }
 else {
    PlayerEntity playerEntity=player.isSpectating() ? player.getSpectatingEntity() : player.getEntity();
    if (playerEntity != null) {
      aSoundsHeard.clear();
      aSoundsHeard=playerEntity.getHeardSounds(soundEvents,aSoundsHeard);
      sounds=NetSound.toNetSounds(aSoundsHeard);
      aEntitiesInView.clear();
      aEntitiesInView=playerEntity.getEntitiesInView(this);
      NetEntity.toNetEntities(aEntitiesInView,netUpdate.entities);
      if (playerEntity.isAlive()) {
        netUpdate.entities[playerEntity.getId()]=playerEntity.getNetPlayer();
      }
    }
  }
  for (int i=0; i < MAX_PERSISTANT_ENTITIES; i++) {
    if (deadFrames[i] > 0) {
      netUpdate.deadPersistantEntities.setBit(i);
    }
  }
  netUpdate.time=(int)time;
  netUpdate.sounds=sounds;
  netUpdate.spectatingPlayerId=player.getSpectatingPlayerId();
  return netUpdate;
}","/** 
 * @param playerId
 * @return returns only the entities within the viewport of the supplied player
 */
public NetGameUpdate getNetGameUpdateFor(int playerId){
  Player player=this.players.getPlayer(playerId);
  if (player == null) {
    return null;
  }
  NetGameUpdate netUpdate=this.playerUpdates[playerId];
  netUpdate.clear();
  if (player.isPureSpectator()) {
    NetEntity.toNetEntities(entities,netUpdate.entities);
    NetSound.toNetSounds(netUpdate.sounds,soundEvents);
    netUpdate.numberOfSounds=(byte)soundEvents.numberOfSounds();
    if (player.getSpectating() == null || player.getSpectating().isDead()) {
      Player otherPlayer=this.players.getRandomAlivePlayer();
      if (otherPlayer != null) {
        player.setSpectating(otherPlayer);
      }
    }
  }
 else {
    PlayerEntity playerEntity=player.isSpectating() ? player.getSpectatingEntity() : player.getEntity();
    if (playerEntity != null) {
      aSoundsHeard.clear();
      aSoundsHeard=playerEntity.getHeardSounds(soundEvents,aSoundsHeard);
      NetSound.toNetSounds(netUpdate.sounds,aSoundsHeard);
      netUpdate.numberOfSounds=(byte)aSoundsHeard.size();
      aEntitiesInView.clear();
      aEntitiesInView=playerEntity.getEntitiesInView(this);
      NetEntity.toNetEntities(aEntitiesInView,netUpdate.entities);
      if (playerEntity.isAlive()) {
        netUpdate.entities[playerEntity.getId()]=playerEntity.getNetPlayer();
      }
    }
  }
  for (int i=0; i < MAX_PERSISTANT_ENTITIES; i++) {
    if (deadFrames[i] > 0) {
      netUpdate.deadPersistantEntities.setBit(i);
    }
  }
  netUpdate.time=(int)time;
  netUpdate.spectatingPlayerId=player.getSpectatingPlayerId();
  return netUpdate;
}",0.8290754257907542
86872,"/** 
 * Invoked after an update, a hack to work around processing event queue
 */
public void postUpdate(){
  lastFramesSoundEvents.clear();
  lastFramesSoundEvents.addAll(soundEvents);
  soundEvents.clear();
  lastValidId=0;
}","/** 
 * Invoked after an update, a hack to work around processing event queue
 */
public void postUpdate(){
  lastFramesSoundEvents.clear();
  lastFramesSoundEvents.set(soundEvents);
  soundEvents.clear();
  lastValidId=0;
}",0.9800443458980044
86873,"/** 
 * @param config
 * @param players
 * @param gameType
 * @param gameMap
 * @param dispatcher
 */
public Game(SeventhConfig config,final Players players,final GameType gameType,GameMap gameMap,EventDispatcher dispatcher){
  this.config=config;
  this.gameType=gameType;
  this.gameType.registerListeners(this,dispatcher);
  this.dispatcher=dispatcher;
  this.gameMap=gameMap;
  this.map=gameMap.getMap();
  this.graph=map.createMapGraph(new NodeData());
  this.entities=new Entity[MAX_ENTITIES];
  this.playerEntities=new PlayerEntity[MAX_PLAYERS];
  this.deadFrames=new int[MAX_ENTITIES];
  this.playerUpdates=new NetGameUpdate[MAX_ENTITIES];
  for (int i=0; i < this.playerUpdates.length; i++) {
    this.playerUpdates[i]=new NetGameUpdate();
  }
  this.bombTargets=new ArrayList<BombTarget>();
  this.vehicles=new ArrayList<Vehicle>();
  this.soundEvents=new ArrayList<SoundEmittedEvent>();
  this.lastFramesSoundEvents=new ArrayList<SoundEmittedEvent>();
  this.aiSystem=new DefaultAISystem();
  this.random=new Random();
  this.players=players;
  this.gameState=new NetGameState();
  this.gamePartialStats=new NetGamePartialStats();
  this.gameStats=new NetGameStats();
  this.enableFOW=true;
  this.time=gameType.getMatchTime();
  this.TILE_WIDTH=map.getTileWidth();
  this.TILE_HEIGHT=map.getTileHeight();
  this.DISTANCE_CHECK=TILE_HEIGHT * TILE_WIDTH * 2;
  this.dispatcher.addEventListener(PlayerKilledEvent.class,new PlayerKilledListener(){
    @Override @EventMethod public void onPlayerKilled(    PlayerKilledEvent event){
      if (gameType.isInProgress()) {
        Player killed=event.getPlayer();
        killed.incrementDeaths();
        aiSystem.playerKilled(killed);
        Player killer=players.getPlayer(event.getKillerId());
        if (killer != null) {
          if (killed.getTeam().getId() == killer.getTeam().getId()) {
            killer.loseKill();
          }
 else           if (killed.getId() == killer.getId()) {
            killer.loseKill();
          }
 else {
            killer.incrementKills();
          }
        }
      }
    }
  }
);
  this.dispatcher.addEventListener(PlayerSpawnedEvent.class,new PlayerSpawnedListener(){
    @Override @EventMethod public void onPlayerSpawned(    PlayerSpawnedEvent event){
    }
  }
);
  this.dispatcher.addEventListener(SoundEmittedEvent.class,new SoundEmitterListener(){
    @Override @EventMethod public void onSoundEmitted(    SoundEmittedEvent event){
      soundEvents.add(event);
    }
  }
);
  this.dispatcher.addEventListener(RoundStartedEvent.class,new RoundStartedListener(){
    @Override public void onRoundStarted(    RoundStartedEvent event){
      aiSystem.startOfRound(Game.this);
    }
  }
);
  this.dispatcher.addEventListener(RoundEndedEvent.class,new RoundEndedListener(){
    @Override public void onRoundEnded(    RoundEndedEvent event){
      aiSystem.endOfRound(Game.this);
    }
  }
);
  aiSystem.init(this);
}","/** 
 * @param config
 * @param players
 * @param gameType
 * @param gameMap
 * @param dispatcher
 */
public Game(SeventhConfig config,final Players players,final GameType gameType,GameMap gameMap,EventDispatcher dispatcher){
  this.config=config;
  this.gameType=gameType;
  this.gameType.registerListeners(this,dispatcher);
  this.dispatcher=dispatcher;
  this.gameMap=gameMap;
  this.map=gameMap.getMap();
  this.graph=map.createMapGraph(new NodeData());
  this.entities=new Entity[MAX_ENTITIES];
  this.playerEntities=new PlayerEntity[MAX_PLAYERS];
  this.deadFrames=new int[MAX_ENTITIES];
  this.playerUpdates=new NetGameUpdate[MAX_ENTITIES];
  for (int i=0; i < this.playerUpdates.length; i++) {
    this.playerUpdates[i]=new NetGameUpdate();
  }
  this.bombTargets=new ArrayList<BombTarget>();
  this.vehicles=new ArrayList<Vehicle>();
  this.soundEvents=new SoundEventPool(SeventhConstants.MAX_SOUNDS);
  this.lastFramesSoundEvents=new SoundEventPool(SeventhConstants.MAX_SOUNDS);
  this.aiSystem=new DefaultAISystem();
  this.random=new Random();
  this.players=players;
  this.gameState=new NetGameState();
  this.gamePartialStats=new NetGamePartialStats();
  this.gameStats=new NetGameStats();
  this.enableFOW=true;
  this.time=gameType.getMatchTime();
  this.TILE_WIDTH=map.getTileWidth();
  this.TILE_HEIGHT=map.getTileHeight();
  this.DISTANCE_CHECK=TILE_HEIGHT * TILE_WIDTH * 2;
  this.dispatcher.addEventListener(PlayerKilledEvent.class,new PlayerKilledListener(){
    @Override @EventMethod public void onPlayerKilled(    PlayerKilledEvent event){
      if (gameType.isInProgress()) {
        Player killed=event.getPlayer();
        killed.incrementDeaths();
        aiSystem.playerKilled(killed);
        Player killer=players.getPlayer(event.getKillerId());
        if (killer != null) {
          if (killed.getTeam().getId() == killer.getTeam().getId()) {
            killer.loseKill();
          }
 else           if (killed.getId() == killer.getId()) {
            killer.loseKill();
          }
 else {
            killer.incrementKills();
          }
        }
      }
    }
  }
);
  this.dispatcher.addEventListener(PlayerSpawnedEvent.class,new PlayerSpawnedListener(){
    @Override @EventMethod public void onPlayerSpawned(    PlayerSpawnedEvent event){
    }
  }
);
  this.dispatcher.addEventListener(SoundEmittedEvent.class,new SoundEmitterListener(){
    @Override @EventMethod public void onSoundEmitted(    SoundEmittedEvent event){
      soundEvents.emitSound(event);
    }
  }
);
  this.dispatcher.addEventListener(RoundStartedEvent.class,new RoundStartedListener(){
    @Override public void onRoundStarted(    RoundStartedEvent event){
      aiSystem.startOfRound(Game.this);
    }
  }
);
  this.dispatcher.addEventListener(RoundEndedEvent.class,new RoundEndedListener(){
    @Override public void onRoundEnded(    RoundEndedEvent event){
      aiSystem.endOfRound(Game.this);
    }
  }
);
  aiSystem.init(this);
}",0.9679945522642152
86874,"@Override public List<SoundEmittedEvent> getLastFramesSoundEvents(){
  return lastFramesSoundEvents;
}","@Override public SoundEventPool getLastFramesSoundEvents(){
  return lastFramesSoundEvents;
}",0.9128205128205128
86875,"@Override @EventMethod public void onSoundEmitted(SoundEmittedEvent event){
  soundEvents.add(event);
}","@Override @EventMethod public void onSoundEmitted(SoundEmittedEvent event){
  soundEvents.emitSound(event);
}",0.9528301886792452
86876,"/** 
 * Emits a sound for the client to hear
 * @param sound
 * @param pos
 */
public void emitSound(int id,SoundType sound,Vector2f pos){
  soundEvents.add(new SoundEmittedEvent(this,id,sound,pos));
}","/** 
 * Emits a sound for the client to hear
 * @param sound
 * @param pos
 */
public void emitSound(int id,SoundType sound,Vector2f pos){
  soundEvents.emitSound(id,sound,pos);
}",0.9263157894736842
86877,"/** 
 * Applies the remote   {@link UserInputMessage} to the {@link PlayerEntity}
 * @param playerId
 * @param msg
 */
public void applyPlayerInput(int playerId,UserInputMessage msg){
  Player player=this.players.getPlayer(playerId);
  if (player != null) {
    if (player.isAlive()) {
      PlayerEntity entity=player.getEntity();
      entity.handleUserCommand(msg.keys,msg.orientation);
    }
 else     if (player.isSpectating()) {
      if (Keys.LEFT.isDown(this.previousKeys) && !Keys.LEFT.isDown(msg.keys)) {
        Player spectateMe=gameType.getNextPlayerToSpectate(getPlayers(),player);
        player.setSpectating(spectateMe);
      }
 else       if (Keys.RIGHT.isDown(this.previousKeys) && !Keys.RIGHT.isDown(msg.keys)) {
        Player spectateMe=gameType.getNextPlayerToSpectate(getPlayers(),player);
        player.setSpectating(spectateMe);
      }
      this.previousKeys=msg.keys;
    }
  }
}","/** 
 * Applies the remote   {@link UserInputMessage} to the {@link PlayerEntity}
 * @param playerId
 * @param msg
 */
public void applyPlayerInput(int playerId,UserInputMessage msg){
  Player player=this.players.getPlayer(playerId);
  if (player != null) {
    if (player.isAlive()) {
      PlayerEntity entity=player.getEntity();
      entity.handleUserCommand(msg.keys,msg.orientation);
    }
 else     if (player.isSpectating()) {
      if (Keys.LEFT.isDown(this.previousKeys) && !Keys.LEFT.isDown(msg.keys)) {
        Player spectateMe=gameType.getPrevPlayerToSpectate(getPlayers(),player);
        player.setSpectating(spectateMe);
      }
 else       if (Keys.RIGHT.isDown(this.previousKeys) && !Keys.RIGHT.isDown(msg.keys)) {
        Player spectateMe=gameType.getNextPlayerToSpectate(getPlayers(),player);
        player.setSpectating(spectateMe);
      }
      this.previousKeys=msg.keys;
    }
  }
}",0.9956043956043956
86878,"@Override public Player getPrevAlivePlayerFrom(Player oldPlayer){
  return getNextAlivePlayerFrom(oldPlayer);
}","@Override public Player getPrevAlivePlayerFrom(Player oldPlayer){
  if (oldPlayer == null)   return getRandomAlivePlayer();
  int nextPlayerIndex=(oldPlayer.getId() - 1) % players.length;
  if (nextPlayerIndex < 0) {
    nextPlayerIndex=Math.max(players.length - 1,0);
  }
  for (int i=0; i < this.players.length; i++) {
    Player player=this.players[nextPlayerIndex];
    if (player != null) {
      if (player.isAlive() && player != oldPlayer) {
        return player;
      }
    }
    nextPlayerIndex=(nextPlayerIndex - 1) % players.length;
    if (nextPlayerIndex < 0) {
      nextPlayerIndex=Math.max(players.length - 1,0);
    }
  }
  return null;
}",0.2135416666666666
86879,"@Override public Player getNextAlivePlayerFrom(Player oldPlayer){
  if (oldPlayer == null)   return getRandomAlivePlayer();
  boolean found=false;
  for (int i=0; i < this.players.length; i++) {
    Player player=this.players[i];
    if (player == null) {
      continue;
    }
    if (oldPlayer.getId() == player.getId()) {
      found=true;
    }
 else     if (found) {
      if (player.isAlive()) {
        return player;
      }
    }
  }
  if (!found) {
    return getRandomAlivePlayer();
  }
  return null;
}","@Override public Player getNextAlivePlayerFrom(Player oldPlayer){
  if (oldPlayer == null)   return getRandomAlivePlayer();
  int nextPlayerIndex=(oldPlayer.getId() + 1) % players.length;
  for (int i=0; i < this.players.length; i++) {
    Player player=this.players[nextPlayerIndex];
    if (player != null) {
      if (player.isAlive() && player != oldPlayer) {
        return player;
      }
    }
    nextPlayerIndex=(nextPlayerIndex + 1) % players.length;
  }
  return null;
}",0.5206030150753769
86880,"/** 
 * The next alive player from the supplied Player slot
 * @param old
 * @return the next alive player, or null if no player is alive
 */
public Player getNextAlivePlayerFrom(Player old){
  boolean found=false;
  boolean firstIteration=true;
  for (int i=0; i < this.players.size(); i++) {
    Player player=this.players.get(i);
    if (firstIteration) {
      if (old.getId() == player.getId()) {
        found=true;
      }
 else       if (found) {
        if (player.isAlive()) {
          return player;
        }
      }
      if (i >= this.players.size() - 1) {
        i=0;
        firstIteration=false;
      }
    }
 else {
      if (player.isAlive()) {
        return player;
      }
    }
  }
  return null;
}","/** 
 * The next available alive player on this team from the 'oldPlayer'
 * @param oldPlayer
 * @return the next {@link Player} or null if none
 */
public Player getNextAlivePlayerFrom(Player oldPlayer){
  if (oldPlayer == null)   return getAlivePlayer();
  int nextPlayerIndex=players.indexOf(oldPlayer);
  if (nextPlayerIndex < 0) {
    nextPlayerIndex=0;
  }
  for (int i=0; i < this.players.size(); i++) {
    Player player=this.players.get(nextPlayerIndex);
    if (player != null) {
      if (player.isAlive() && player != oldPlayer) {
        return player;
      }
    }
    nextPlayerIndex=(nextPlayerIndex + 1) % players.size();
  }
  return null;
}",0.3280346820809248
86881,"@Override public Player getNextPlayerToSpectate(Players players,Player spectator){
  if (spectator.isPureSpectator()) {
    return players.getRandomAlivePlayer();
  }
  Player player=spectator.getSpectating();
  return player != null ? spectator.getTeam().getNextAlivePlayerFrom(player) : spectator.getTeam().getAlivePlayer();
}","@Override public Player getNextPlayerToSpectate(Players players,Player spectator){
  if (spectator.isPureSpectator()) {
    return players.getNextAlivePlayerFrom(spectator.getSpectating());
  }
  Player player=spectator.getSpectating();
  return player != null ? spectator.getTeam().getNextAlivePlayerFrom(player) : spectator.getTeam().getAlivePlayer();
}",0.9136163982430454
86882,"/** 
 */
public WeightedThoughtProcess(TeamStrategy teamStrategy,Brain brain){
  Goals goals=brain.getWorld().getGoals();
  this.currentGoal=new ConcurrentGoal(new WeightedGoal(brain,new AttackActionEvaluator(goals,brain.getRandomRangeMin(0.85),0.7),new CommandActionEvaluator(goals,brain.getRandomRangeMin(0.8),0.8),new InvestigateActionEvaluator(goals,brain.getRandomRange(0.5,0.9),0.6),new ExploreActionEvaluator(goals,brain.getRandomRange(0.1,0.5),0.5)),new WeightedGoal(brain,new ReloadWeaponEvaluator(goals,brain.getRandomRange(0.3,0.8),0),new SwitchWeaponEvaluator(goals,brain.getRandomRange(0.3,0.8),0),new DoNothingEvaluator(goals,brain.getRandomRange(0.4,0.9),0)));
}","/** 
 */
public WeightedThoughtProcess(TeamStrategy teamStrategy,Brain brain){
  Goals goals=brain.getWorld().getGoals();
  this.currentGoal=new ConcurrentGoal(new WeightedGoal(brain,new AttackActionEvaluator(goals,brain.getRandomRangeMin(0.85),0.82),new CommandActionEvaluator(goals,brain.getRandomRangeMin(0.8),0.8),new InvestigateActionEvaluator(goals,brain.getRandomRange(0.5,0.9),0.6),new ExploreActionEvaluator(goals,brain.getRandomRange(0.1,0.5),0.5)),new WeightedGoal(brain,new ReloadWeaponEvaluator(goals,brain.getRandomRange(0.3,0.8),0),new SwitchWeaponEvaluator(goals,brain.getRandomRange(0.3,0.8),0),new DoNothingEvaluator(goals,brain.getRandomRange(0.4,0.9),0)));
}",0.9977859778597786
86883,"/** 
 * @param entity
 * @param target
 * @return determines if the enemy is in line of fire
 */
public boolean inLineOfFire(PlayerEntity entity,PlayerEntity target){
  return !map.lineCollides(entity.getCenterPos(),target.getCenterPos());
}","/** 
 * @param entity
 * @param target
 * @return determines if the enemy is in line of fire
 */
public boolean inLineOfFire(PlayerEntity entity,PlayerEntity target){
  return !map.lineCollides(entity.getCenterPos(),target.getCenterPos(),entity.getHeightMask());
}",0.9544554455445544
86884,"@Override public boolean isFinished(Brain brain){
  return !this.followMe.isAlive() || brain.getSensors().getSightSensor().timeSeenAgo(followMe) > timeSinceLastSeenExpireMSec;
}","@Override public boolean isFinished(Brain brain){
  SightSensor sight=brain.getSensors().getSightSensor();
  SightMemoryRecord mem=sight.getMemoryRecordFor(followMe);
  boolean isFinished=true;
  if (mem != null && mem.isValid()) {
    isFinished=mem.getTimeSeenAgo() > timeSinceLastSeenExpireMSec;
  }
  return !this.followMe.isAlive() || isFinished;
}",0.3396226415094339
86885,"@Override public void start(Brain brain){
}","@Override public void start(Brain brain){
  this.inLOF=brain.getTargetingSystem().targetInLineOfFire();
}",0.581081081081081
86886,"@Override public boolean isFinished(Brain brain){
  return false;
}","@Override public boolean isFinished(Brain brain){
  return !this.inLOF;
}",0.9
86887,"@Override public void update(Brain brain,TimeStep timeStep){
  this.timeHeld+=timeStep.getDeltaTime();
  if (this.timeHeld >= this.timeToHold) {
    belt.endFire();
    System.out.println(""String_Node_Str"" + this.timeToHold);
  }
}","@Override public void update(Brain brain,TimeStep timeStep){
  this.timeHeld+=timeStep.getDeltaTime();
  if (this.timeHeld >= this.timeToHold) {
    belt.endFire();
  }
}",0.8478802992518704
86888,"@Override public void update(Brain brain,TimeStep timeStep){
  this.updateEval.update(timeStep);
  if (this.updateEval.isTime()) {
    ActionEvaluator currentEvaluator=evaluate(brain);
    if (this.currentActiveEvaluator == null || this.isFinished(brain)) {
      boolean shouldChangeAction=false;
      if (this.bestEvalScore > this.currentScore) {
        double delta=this.bestEvalScore - this.currentScore;
        if (delta > 0.05) {
          shouldChangeAction=true;
        }
      }
      if (((currentEvaluator.getKeepBias() > this.currentActiveEvaluator.getKeepBias() || shouldChangeAction) && (currentEvaluator != this.currentActiveEvaluator))) {
        this.currentActiveEvaluator=currentEvaluator;
        this.currentScore=this.bestEvalScore;
        Action action=this.currentActiveEvaluator.getAction(brain);
        if (!(action instanceof WaitAction))         System.out.println(action.getClass().getSimpleName());
        this.replace(action);
      }
    }
  }
  super.update(brain,timeStep);
}","@Override public void update(Brain brain,TimeStep timeStep){
  this.updateEval.update(timeStep);
  if (this.updateEval.isTime()) {
    ActionEvaluator newEvaluator=evaluate(brain);
    if (this.currentActiveEvaluator == null || this.isFinished(brain) || ((newEvaluator.getKeepBias() > this.currentActiveEvaluator.getKeepBias()) && (newEvaluator != this.currentActiveEvaluator))) {
      this.currentActiveEvaluator=newEvaluator;
      Action action=this.currentActiveEvaluator.getAction(brain);
      this.replace(action);
    }
  }
  super.update(brain,timeStep);
}",0.4551201011378002
86889,"private ActionEvaluator evaluate(Brain brain){
  double highestDesire=0;
  ActionEvaluator bestEval=null;
  int size=this.evaluators.size();
  for (int i=0; i < size; i++) {
    ActionEvaluator eval=this.evaluators.get(i);
    double desire=eval.calculateDesirability(brain);
    if (bestEval == null || desire > highestDesire) {
      bestEval=eval;
      highestDesire=desire;
    }
  }
  this.bestEvalScore=highestDesire;
  return bestEval;
}","private ActionEvaluator evaluate(Brain brain){
  double highestDesire=0;
  ActionEvaluator bestEval=null;
  int size=this.evaluators.size();
  for (int i=0; i < size; i++) {
    ActionEvaluator eval=this.evaluators.get(i);
    double desire=eval.calculateDesirability(brain);
    if (bestEval == null || desire > highestDesire) {
      bestEval=eval;
      highestDesire=desire;
    }
  }
  return bestEval;
}",0.9578454332552692
86890,"@Override public double calculateDesirability(Brain brain){
  double desirability=0;
  if (brain.getTargetingSystem().hasTarget()) {
    final double tweaker=1.0;
    desirability=tweaker * Evaluators.healthScore(brain.getEntityOwner()) * Evaluators.currentWeaponAmmoScore(brain.getEntityOwner());
    desirability*=getCharacterBias();
  }
  return desirability;
}","@Override public double calculateDesirability(Brain brain){
  double desirability=0;
  if (brain.getTargetingSystem().hasTarget()) {
    final double tweaker=1.0;
    desirability=tweaker * Math.max(Evaluators.healthScore(brain.getEntityOwner()),0.7) * Math.max(Evaluators.currentWeaponAmmoScore(brain.getEntityOwner()),0.8);
    desirability*=getCharacterBias();
  }
  return desirability;
}",0.9629629629629628
86891,"@Override public double calculateDesirability(Brain brain){
  double desirability=0.0;
  Communicator comms=brain.getCommunicator();
  if (comms.hasPendingCommands()) {
    desirability+=brain.getRandomRange(0.8,0.9);
  }
  desirability*=getCharacterBias();
  return desirability;
}","@Override public double calculateDesirability(Brain brain){
  double desirability=0.0;
  Communicator comms=brain.getCommunicator();
  if (comms.hasPendingCommands()) {
    desirability+=brain.getRandomRange(0.6,0.8);
  }
  desirability*=getCharacterBias();
  return desirability;
}",0.9858156028368794
86892,"/** 
 * @param fireAtMe the fireAtMe to set
 */
public void reset(Entity fireAtMe){
  this.fireAtMe=fireAtMe;
  this.getActionResult().setFailure();
}","/** 
 * @param fireAtMe the fireAtMe to set
 */
public void reset(Entity fireAtMe){
  this.fireAtMe=fireAtMe;
  this.lastContactTime=0;
  this.getActionResult().setFailure();
}",0.9202453987730062
86893,"public long getAvgBitsPerSecSent(){
  long totalTimeConnected=System.currentTimeMillis() - this.timeConnected;
  return (long)((numberOfBytesSent * 8) / (totalTimeConnected / 1000));
}","public long getAvgBitsPerSecSent(){
  long totalTimeConnected=(System.currentTimeMillis() - this.timeConnected) / 1000;
  if (totalTimeConnected > 0) {
    return (long)((numberOfBytesSent * 8) / totalTimeConnected);
  }
  return 0;
}",0.8373205741626795
86894,"public long getAvgBitsPerSecRecv(){
  long totalTimeConnected=System.currentTimeMillis() - this.timeConnected;
  return (long)((numberOfBytesRecv * 8) / (totalTimeConnected / 1000));
}","public long getAvgBitsPerSecRecv(){
  long totalTimeConnected=(System.currentTimeMillis() - this.timeConnected) / 1000;
  if (totalTimeConnected > 0) {
    return (long)((numberOfBytesRecv * 8) / totalTimeConnected);
  }
  return 0;
}",0.8373205741626795
86895,"private void drawMemoryUsage(Canvas canvas){
  Runtime runtime=Runtime.getRuntime();
  long maxMemory=runtime.totalMemory() / (1024 * 1024);
  long usedMemory=maxMemory - runtime.freeMemory() / (1024 * 1024);
  int x=20;
  int y=canvas.getHeight() - 125;
  canvas.fillRect(x,y,100,15,0xcf696969);
  if (usedMemory > 0) {
    double percentage=((double)usedMemory / (double)maxMemory);
    canvas.fillRect(x,y,(int)(100 * percentage),15,0xdf3f3f3f);
  }
  canvas.drawRect(x - 1,y,101,15,0xff000000);
  canvas.drawLine(x,y + 1,x + 100,y + 1,0x8f000000);
  canvas.drawLine(x,y + 2,x + 100,y + 2,0x5f000000);
  canvas.drawLine(x,y + 3,x + 100,y + 3,0x2f000000);
  canvas.drawLine(x,y + 4,x + 100,y + 4,0x0f000000);
  canvas.drawLine(x,y + 5,x + 100,y + 5,0x0b000000);
  y=y + 15;
  canvas.drawLine(x,y - 5,x + 100,y - 5,0x0b000000);
  canvas.drawLine(x,y - 4,x + 100,y - 4,0x0f000000);
  canvas.drawLine(x,y - 3,x + 100,y - 3,0x2f000000);
  canvas.drawLine(x,y - 2,x + 100,y - 2,0x5f000000);
  canvas.drawLine(x,y - 1,x + 100,y - 1,0x8f000000);
  canvas.setFont(""String_Node_Str"",14);
  canvas.drawString(usedMemory + ""String_Node_Str"" + maxMemory+ ""String_Node_Str"",x - 20,y - 20,0xff00CC00);
}","private void drawMemoryUsage(Canvas canvas){
  Runtime runtime=Runtime.getRuntime();
  long maxMemory=runtime.totalMemory() / (1024 * 1024);
  long usedMemory=maxMemory - runtime.freeMemory() / (1024 * 1024);
  int x=20;
  int y=canvas.getHeight() - 125;
  canvas.fillRect(x,y,100,15,0xcf696969);
  if (usedMemory > 0 && maxMemory > 0) {
    double percentage=((double)usedMemory / (double)maxMemory);
    canvas.fillRect(x,y,(int)(100 * percentage),15,0xdf3f3f3f);
  }
  canvas.drawRect(x - 1,y,101,15,0xff000000);
  canvas.drawLine(x,y + 1,x + 100,y + 1,0x8f000000);
  canvas.drawLine(x,y + 2,x + 100,y + 2,0x5f000000);
  canvas.drawLine(x,y + 3,x + 100,y + 3,0x2f000000);
  canvas.drawLine(x,y + 4,x + 100,y + 4,0x0f000000);
  canvas.drawLine(x,y + 5,x + 100,y + 5,0x0b000000);
  y=y + 15;
  canvas.drawLine(x,y - 5,x + 100,y - 5,0x0b000000);
  canvas.drawLine(x,y - 4,x + 100,y - 4,0x0f000000);
  canvas.drawLine(x,y - 3,x + 100,y - 3,0x2f000000);
  canvas.drawLine(x,y - 2,x + 100,y - 2,0x5f000000);
  canvas.drawLine(x,y - 1,x + 100,y - 1,0x8f000000);
  canvas.setFont(""String_Node_Str"",14);
  canvas.drawString(usedMemory + ""String_Node_Str"" + maxMemory+ ""String_Node_Str"",x - 20,y - 20,0xff00CC00);
}",0.9929137140475198
86896,"/** 
 * Lets the brain think for a game tick
 * @param timeStep
 */
public void update(TimeStep timeStep){
  if (player.isAlive()) {
    this.memory.update(timeStep);
    this.sensors.update(timeStep);
    this.motion.update(timeStep);
    this.thoughtProcess.think(timeStep,this);
    this.targetingSystem.update(timeStep);
    debugDraw();
    debugDrawPathPlanner();
  }
}","/** 
 * Lets the brain think for a game tick
 * @param timeStep
 */
public void update(TimeStep timeStep){
  if (player.isAlive()) {
    this.memory.update(timeStep);
    this.sensors.update(timeStep);
    this.motion.update(timeStep);
    this.thoughtProcess.think(timeStep,this);
    this.targetingSystem.update(timeStep);
  }
}",0.9361702127659576
86897,"@Override public void onSpawn(Brain brain){
  this.currentGoal.cancel();
  this.currentGoal.start(brain);
}","@Override public void onSpawn(Brain brain){
  brain.getMotion().pickWeapon();
  this.currentGoal.cancel();
  this.currentGoal.start(brain);
}",0.8629032258064516
86898,"@Override public Action getAction(Brain brain){
  return getGoals().attack(brain.getTargetingSystem().getCurrentTarget());
}","@Override public Action getAction(Brain brain){
  return getGoals().enemyEncountered(getGoals(),brain);
}",0.6899563318777293
86899,"public static void main(final String[] args){
  final Console console=new DefaultConsole();
  Cons.setImpl(console);
  final Thread gameThread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        int port=DEFAULT_PORT;
        Leola runtime=Scripting.newRuntime();
        ServerSeventhConfig config=new ServerSeventhConfig(new Config(""String_Node_Str"",""String_Node_Str"",runtime));
        GameServer server=new GameServer(config,console,runtime);
        if (args.length > 0) {
          try {
            port=Integer.parseInt(args[0]);
          }
 catch (          Exception e) {
          }
        }
 else {
        }
        server.start(port);
      }
 catch (      Exception e) {
        console.println(""String_Node_Str"" + e);
      }
    }
  }
);
  if (isCmdLineOnly(args)) {
    gameThread.start();
    setupCommandLine(console);
  }
 else {
    javax.swing.SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        new ConsoleFrame(""String_Node_Str"",BANNER,console);
        gameThread.start();
      }
    }
);
  }
}","public static void main(final String[] args){
  final Console console=new DefaultConsole();
  Cons.setImpl(console);
  final Thread gameThread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        int port=SeventhConstants.DEFAULT_PORT;
        Leola runtime=Scripting.newRuntime();
        ServerSeventhConfig config=new ServerSeventhConfig(new Config(""String_Node_Str"",""String_Node_Str"",runtime));
        GameServer server=new GameServer(config,console,runtime);
        if (args.length > 0) {
          try {
            port=Integer.parseInt(args[0]);
          }
 catch (          Exception e) {
            port=config.getPort();
          }
        }
 else {
          port=config.getPort();
        }
        server.start(port);
      }
 catch (      Exception e) {
        console.println(""String_Node_Str"" + e);
      }
    }
  }
);
  if (isCmdLineOnly(args)) {
    gameThread.start();
    setupCommandLine(console);
  }
 else {
    javax.swing.SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        new ConsoleFrame(""String_Node_Str"",BANNER,console);
        gameThread.start();
      }
    }
);
  }
}",0.94496644295302
86900,"/** 
 * Do the actual movement
 */
private void moveEntity(){
  moveDelta.zeroOut();
  if (pathFeeder != null) {
    if (!pathFeeder.atDestination()) {
      Vector2f nextDest=pathFeeder.nextDestination(me.getPos());
      moveDelta.set(nextDest);
    }
 else {
      Vector2f nextDest=pathFeeder.getDestination();
      Vector2f.Vector2fSubtract(nextDest,me.getPos(),moveDelta);
      if (moveDelta.lengthSquared() < 25) {
        moveDelta.zeroOut();
      }
    }
  }
  directMove(moveDelta);
}","/** 
 * Do the actual movement
 */
private void moveEntity(){
  moveDelta.zeroOut();
  if (pathFeeder != null) {
    if (!pathFeeder.atDestination()) {
      Vector2f nextDest=pathFeeder.nextDestination(me.getPos());
      moveDelta.set(nextDest);
    }
 else {
      Vector2f nextDest=pathFeeder.getDestination();
      Vector2f.Vector2fSubtract(nextDest,me.getPos(),moveDelta);
      if (moveDelta.lengthSquared() < 26) {
        moveDelta.zeroOut();
      }
    }
  }
  directMove(moveDelta);
}",0.9979879275653925
86901,"/** 
 * Check to see if our agent is stuck
 * @param timeStep
 * @param brain
 * @return true if we are stuck
 */
protected boolean checkIfStuck(TimeStep timeStep,Brain brain){
  PlayerEntity bot=brain.getEntityOwner();
  this.nextStuckCheck-=timeStep.getDeltaTime();
  if (this.nextStuckCheck < 0) {
    this.nextStuckCheck=1500;
    if (Vector2f.Vector2fApproxEquals(previousPosition,bot.getPos(),5.0f)) {
      this.stuckTimer.update(timeStep);
      if (this.stuckTimer.isTime()) {
        this.stuckTimer.reset();
        return true;
      }
    }
 else {
      this.stuckTimer.reset();
    }
  }
  this.previousPosition.set(bot.getPos());
  return false;
}","/** 
 * Check to see if our agent is stuck
 * @param timeStep
 * @param brain
 * @return true if we are stuck
 */
protected boolean checkIfStuck(TimeStep timeStep,Brain brain){
  PlayerEntity bot=brain.getEntityOwner();
  this.nextStuckCheck-=timeStep.getDeltaTime();
  if (this.nextStuckCheck < 0) {
    this.nextStuckCheck=1500;
    if (Vector2f.Vector2fApproxEquals(previousPosition,bot.getPos(),5.0f)) {
      this.stuckTimer.start();
      this.stuckTimer.update(timeStep);
      if (this.stuckTimer.isTime()) {
        this.stuckTimer.stop();
        return true;
      }
    }
 else {
      this.stuckTimer.stop();
    }
  }
  this.previousPosition.set(bot.getPos());
  return false;
}",0.9638376383763838
86902,"/** 
 * Check to see if the agent is too close to an active bomb
 * @param brain
 * @return the {@link BombTarget} with an active bomb on it.  Null if not too close
 */
private BombTarget checkIfCloseToActiveBomb(Brain brain){
  World world=brain.getWorld();
  List<BombTarget> targets=world.getBombTargetsWithActiveBombs();
  for (int i=0; i < targets.size(); i++) {
    BombTarget target=targets.get(i);
    Zone zone=world.getZone(target.getCenterPos());
    if (zone != null) {
      Bomb bomb=target.getBomb();
      if (bomb.getBlastRadius().intersects(brain.getEntityOwner().getBounds())) {
        return target;
      }
    }
  }
  return null;
}","/** 
 * Check to see if the agent is too close to an active bomb
 * @param brain
 * @return the {@link BombTarget} with an active bomb on it.  Null if not too close
 */
private BombTarget checkIfCloseToActiveBomb(Brain brain){
  World world=brain.getWorld();
  if (!world.isOnOffense(brain.getEntityOwner().getTeam())) {
    return null;
  }
  List<BombTarget> targets=world.getBombTargetsWithActiveBombs();
  for (int i=0; i < targets.size(); i++) {
    BombTarget target=targets.get(i);
    Zone zone=world.getZone(target.getCenterPos());
    if (zone != null) {
      Bomb bomb=target.getBomb();
      if (bomb.getBlastRadius().intersects(brain.getEntityOwner().getBounds())) {
        return target;
      }
    }
  }
  return null;
}",0.511127063890883
86903,"@Override public void update(Brain brain,TimeStep timeStep){
  if (isDefused()) {
    this.getActionResult().setSuccess();
  }
 else {
    Locomotion motion=brain.getMotion();
    if (!bomb.isTouching(brain.getEntityOwner())) {
      motion.moveTo(bomb.getCenterPos());
    }
 else     if (!bomb.bombDisarming() || !motion.isDefusing()) {
      motion.defuseBomb(bomb);
    }
    getActionResult().setFailure();
  }
}","@Override public void update(Brain brain,TimeStep timeStep){
  if (isDefused()) {
    this.getActionResult().setSuccess();
  }
 else {
    Locomotion motion=brain.getMotion();
    if (!bomb.isTouching(brain.getEntityOwner())) {
      Vector2f dest=motion.getDestination();
      if (dest == null || !dest.equals(bomb.getCenterPos())) {
        motion.moveTo(bomb.getCenterPos());
      }
    }
 else     if (!bomb.bombDisarming() || !motion.isDefusing()) {
      motion.defuseBomb(bomb);
    }
    getActionResult().setFailure();
  }
}",0.7100840336134454
86904,"@Override public void update(TimeStep timeStep,GameInfo game){
  if (this.timeUntilOrganizedAttack > 0) {
    this.timeUntilOrganizedAttack-=timeStep.getDeltaTime();
    giveOrders(DefensiveState.RANDOM);
    return;
  }
  if (zoneToAttack == null) {
    return;
  }
  if (zoneToAttack.hasActiveBomb()) {
    if (isBombBeingDisarmed(zoneToAttack)) {
      giveOrders(DefensiveState.ATTACK_ZONE);
    }
 else {
      giveOrders(DefensiveState.DEFUSE_BOMB);
    }
  }
 else {
    zoneToAttack=calculateZoneToAttack();
    if (zoneToAttack != null) {
      giveOrders(DefensiveState.ATTACK_ZONE);
    }
  }
}","@Override public void update(TimeStep timeStep,GameInfo game){
  if (isBombPlanted()) {
    zoneToAttack=calculateZoneToAttack();
    if (isBombBeingDisarmed(zoneToAttack)) {
      giveOrders(DefensiveState.ATTACK_ZONE);
    }
 else {
      giveOrders(DefensiveState.DEFUSE_BOMB);
    }
  }
 else {
    if (this.timeUntilOrganizedAttack > 0) {
      this.timeUntilOrganizedAttack-=timeStep.getDeltaTime();
      giveOrders(DefensiveState.RANDOM);
      return;
    }
    zoneToAttack=calculateZoneToAttack();
    if (zoneToAttack != null) {
      giveOrders(DefensiveState.ATTACK_ZONE);
    }
  }
}",0.6201163757273483
86905,"/** 
 * Gives all the available Agents orders
 */
private void giveOrders(DefensiveState state){
  if (currentState != state) {
    currentState=state;
    List<Player> players=team.getPlayers();
    for (int i=0; i < players.size(); i++) {
      Player player=players.get(i);
      if (player.isBot() && player.isAlive()) {
        Brain brain=aiSystem.getBrain(player);
        brain.getCommunicator().post(getCurrentAction(brain));
      }
    }
  }
}","/** 
 * Gives all the available Agents orders
 */
private void giveOrders(DefensiveState state){
  if (currentState != state) {
    currentState=state;
    List<Player> players=team.getPlayers();
    for (int i=0; i < players.size(); i++) {
      Player player=players.get(i);
      if (player.isBot() && player.isAlive()) {
        Brain brain=aiSystem.getBrain(player);
        if (!brain.getMotion().isDefusing()) {
          brain.getCommunicator().post(getCurrentAction(brain));
        }
      }
    }
  }
}",0.938986556359876
86906,"public void teamTextMessage(TeamTextMessage msg){
  ClientPlayer player=players.get(msg.playerId);
  if (player != null) {
    hud.postMessage(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ msg.message);
  }
 else {
    hud.postMessage(""String_Node_Str"" + msg.message);
  }
}","public void teamTextMessage(TeamTextMessage msg){
  ClientPlayer player=players.get(msg.playerId);
  if (player != null) {
    if (player.isAlive()) {
      hud.postMessage(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ msg.message);
    }
 else {
      hud.postMessage(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ msg.message);
    }
  }
 else {
    hud.postMessage(""String_Node_Str"" + msg.message);
  }
}",0.7988826815642458
86907,"public void textMessage(TextMessage msg){
  ClientPlayer player=players.get(msg.playerId);
  if (player != null) {
    hud.postMessage(player.getName() + ""String_Node_Str"" + msg.message);
  }
 else {
    hud.postMessage(msg.message);
  }
}","public void textMessage(TextMessage msg){
  ClientPlayer player=players.get(msg.playerId);
  if (player != null) {
    if (player.isAlive()) {
      hud.postMessage(player.getName() + ""String_Node_Str"" + msg.message);
    }
 else {
      hud.postMessage(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ msg.message);
    }
  }
 else {
    hud.postMessage(msg.message);
  }
}",0.7266881028938906
86908,"/** 
 * Updates the special effects, etc.
 * @param timeStep
 */
public void update(TimeStep timeStep){
  this.lightSystem.update(timeStep);
  long gameClock=timeStep.getGameClock();
  this.deadEntities.clear();
  int size=this.entityList.size();
  for (int i=0; i < size; i++) {
    ClientEntity ent=this.entityList.get(i);
    ent.update(timeStep);
    if (ent.killIfOutdated(gameClock)) {
      this.deadEntities.add(ent);
    }
  }
  size=this.deadEntities.size();
  for (int i=0; i < size; i++) {
    ClientEntity ent=deadEntities.get(i);
    removeEntity(ent.getId());
  }
  backgroundEffects.update(timeStep);
  foregroundEffects.update(timeStep);
  size=frameBufferRenderables.size();
  for (int i=0; i < size; i++) {
    FrameBufferRenderable r=this.frameBufferRenderables.get(i);
    r.update(timeStep);
  }
  if (this.localPlayer.isAlive() || this.localPlayer.isSpectating()) {
    ClientPlayerEntity entity=(this.localPlayer.isAlive()) ? this.localPlayer.getEntity() : (this.players.containsKey(this.localPlayer.getSpectatingPlayerId())) ? this.players.get(this.localPlayer.getSpectatingPlayerId()).getEntity() : null;
    if (entity != null) {
      entity.movementPrediction(map,timeStep,playerVelocity);
      cameraCenterAround.set(entity.getPos());
      Vector2f.Vector2fRound(cameraCenterAround,cameraCenterAround);
      ;
      camera.centerAround(cameraCenterAround);
      Sounds.setPosition(cameraCenterAround);
      nextFOWUpdate-=timeStep.getDeltaTime();
      if (nextFOWUpdate <= 0) {
        fowTiles=Geom.calculateLineOfSight(fowTiles,entity.getCenterPos(),entity.getFacing(),entity.getLineOfSite(),map,entity.getHeightMask());
        Geom.addFadeEffect(map,fowTiles);
        nextFOWUpdate=100;
      }
    }
  }
  map.update(timeStep);
  miniMap.update(timeStep);
  camera.update(timeStep);
  hud.update(timeStep);
}","/** 
 * Updates the special effects, etc.
 * @param timeStep
 */
public void update(TimeStep timeStep){
  this.lightSystem.update(timeStep);
  long gameClock=timeStep.getGameClock();
  this.deadEntities.clear();
  int size=this.entityList.size();
  for (int i=0; i < size; i++) {
    ClientEntity ent=this.entityList.get(i);
    ent.update(timeStep);
    if (ent.killIfOutdated(gameClock)) {
      this.deadEntities.add(ent);
    }
  }
  size=this.deadEntities.size();
  for (int i=0; i < size; i++) {
    ClientEntity ent=deadEntities.get(i);
    removeEntity(ent.getId());
  }
  backgroundEffects.update(timeStep);
  foregroundEffects.update(timeStep);
  size=frameBufferRenderables.size();
  for (int i=0; i < size; i++) {
    FrameBufferRenderable r=this.frameBufferRenderables.get(i);
    r.update(timeStep);
  }
  updateFow(timeStep);
  map.update(timeStep);
  camera.update(timeStep);
  hud.update(timeStep);
}",0.5941452837007589
86909,"/** 
 * Renders the game
 * @param canvas
 */
public void render(Canvas canvas){
  renderFrameBuffer(canvas);
  canvas.begin();
  map.render(canvas,camera,0);
  canvas.end();
  backgroundEffects.render(canvas,camera,0);
  int size=this.entityList.size();
  for (int i=0; i < size; i++) {
    ClientEntity entity=this.entityList.get(i);
    entity.render(canvas,camera,0);
    boolean debug=false;
    if (debug) {
      debugRenderEntity(canvas,entity);
    }
  }
  foregroundEffects.render(canvas,camera,0);
  map.renderForeground(canvas,camera,0);
  canvas.setColor(0,45);
  map.renderSolid(canvas,camera,0);
  lightSystem.render(canvas,camera,0);
  miniMap.render(canvas,camera,0);
  DebugDraw.enable(false);
  DebugDraw.render(canvas,camera);
  canvas.setShader(null);
  hud.render(canvas,camera,0);
}","/** 
 * Renders the game
 * @param canvas
 */
public void render(Canvas canvas){
  renderFrameBuffer(canvas);
  canvas.begin();
  map.render(canvas,camera,0);
  canvas.end();
  backgroundEffects.render(canvas,camera,0);
  int size=this.entityList.size();
  for (int i=0; i < size; i++) {
    ClientEntity entity=this.entityList.get(i);
    entity.render(canvas,camera,0);
    boolean debug=false;
    if (debug) {
      debugRenderEntity(canvas,entity);
    }
  }
  foregroundEffects.render(canvas,camera,0);
  map.renderForeground(canvas,camera,0);
  canvas.setColor(0,45);
  map.renderSolid(canvas,camera,0);
  lightSystem.render(canvas,camera,0);
  DebugDraw.enable(false);
  DebugDraw.render(canvas,camera);
  canvas.setShader(null);
  hud.render(canvas,camera,0);
}",0.9777777777777776
86910,"/** 
 * @throws Exception 
 */
public ClientGame(SeventhGame app,java.util.Map<Integer,ClientPlayer> players,Map map,int localPlayerId) throws Exception {
  this.app=app;
  this.players=players;
  this.map=map;
  this.localPlayer=players.get(localPlayerId);
  this.scoreboard=new Scoreboard(this);
  this.entities=new HashMap<Integer,ClientEntity>();
  this.entityList=new ArrayList<ClientEntity>();
  this.deadEntities=new ArrayList<ClientEntity>();
  this.bombTargets=new ArrayList<ClientBombTarget>();
  this.frameBufferRenderables=new ArrayList<>();
  this.fowTiles=new ArrayList<Tile>();
  this.cameraCenterAround=new Vector2f();
  this.backgroundEffects=new Effects();
  this.foregroundEffects=new Effects();
  this.camera=newCamera(map.getMapWidth(),map.getMapHeight());
  this.cameraShakeBounds=new Rectangle(600,600);
  this.playerVelocity=new Vector2f();
  this.hud=new Hud(this);
  this.random=new Random();
  this.gameType=GameType.Type.TDM;
  this.cacheRect=new Rectangle();
  this.lightSystem=new ImageBasedLightSystem();
  this.frameBufferRenderables.add(lightSystem);
  this.entityListener=lightSystem.getClientEntityListener();
  this.miniMap=new MiniMap(this);
}","/** 
 * @throws Exception 
 */
public ClientGame(SeventhGame app,java.util.Map<Integer,ClientPlayer> players,Map map,int localPlayerId) throws Exception {
  this.app=app;
  this.players=players;
  this.map=map;
  this.localPlayer=players.get(localPlayerId);
  this.scoreboard=new Scoreboard(this);
  this.entities=new HashMap<Integer,ClientEntity>();
  this.entityList=new ArrayList<ClientEntity>();
  this.deadEntities=new ArrayList<ClientEntity>();
  this.bombTargets=new ArrayList<ClientBombTarget>();
  this.frameBufferRenderables=new ArrayList<>();
  this.fowTiles=new ArrayList<Tile>();
  this.cameraCenterAround=new Vector2f();
  this.backgroundEffects=new Effects();
  this.foregroundEffects=new Effects();
  this.camera=newCamera(map.getMapWidth(),map.getMapHeight());
  this.cameraShakeBounds=new Rectangle(600,600);
  this.playerVelocity=new Vector2f();
  this.hud=new Hud(this);
  this.random=new Random();
  this.gameType=GameType.Type.TDM;
  this.cacheRect=new Rectangle();
  this.lightSystem=new ImageBasedLightSystem();
  this.frameBufferRenderables.add(lightSystem);
  this.entityListener=lightSystem.getClientEntityListener();
}",0.9853826311263972
86911,"private void drawScore(Canvas canvas){
  canvas.setFont(""String_Node_Str"",18);
  int x=0;
  int y=20;
  int width=50;
  canvas.fillRect(x,y - 15,width,20,0x8fffffff & ClientTeam.ALLIES.getColor());
  canvas.drawRect(x,y - 15,width,20,0xff000000);
  String txt=scoreboard.getAlliedScore() + ""String_Node_Str"";
  RenderFont.drawShadedString(canvas,txt,x + (width - canvas.getWidth(txt)) - 1,y,0xffffffff);
  y+=20;
  canvas.fillRect(x,y - 15,width,20,0x8fffffff & ClientTeam.AXIS.getColor());
  canvas.drawRect(x,y - 15,width,20,0xff000000);
  txt=scoreboard.getAxisScore() + ""String_Node_Str"";
  RenderFont.drawShadedString(canvas,txt,x + (width - canvas.getWidth(txt)) - 1,y,0xffffffff);
}","private void drawScore(Canvas canvas){
  canvas.setFont(""String_Node_Str"",18);
  int textLen=canvas.getWidth(""String_Node_Str"");
  int x=canvas.getWidth() / 2 - textLen;
  int y=canvas.getHeight() - 10;
  int width=50;
  int height=20;
  canvas.fillRect(x,y - 15,width,height,0x8fffffff & ClientTeam.ALLIES.getColor());
  canvas.drawRect(x,y - 15,width,height,0xff000000);
  String txt=scoreboard.getAlliedScore() + ""String_Node_Str"";
  RenderFont.drawShadedString(canvas,txt,x + (width - canvas.getWidth(txt)) - 1,y,0xffffffff);
  x+=textLen + 2;
  canvas.fillRect(x - 2,y - 15,2,height,0xff000000);
  canvas.fillRect(x,y - 15,width,height,0x8fffffff & ClientTeam.AXIS.getColor());
  canvas.drawRect(x,y - 15,width,height,0xff000000);
  txt=scoreboard.getAxisScore() + ""String_Node_Str"";
  RenderFont.drawShadedString(canvas,txt,x + 4,y,0xffffffff);
}",0.826735885788449
86912,"@Override public void update(TimeStep timeStep){
  killLog.update(timeStep);
  messageLog.update(timeStep);
  centerLog.update(timeStep);
  if (this.isAtBomb) {
    if (useButtonReleased) {
      bombTime+=timeStep.getDeltaTime();
      float percentageCompleted=(float)((float)bombTime / this.completionTime);
      bombProgressBar.setProgress((int)(percentageCompleted * 100));
      bombProgressBar.show();
      if (bombProgressBar.getProgress() >= 99) {
        bombTime=0;
        bombProgressBar.hide();
        useButtonReleased=false;
      }
    }
  }
 else {
    bombProgressBar.hide();
    bombProgressBar.setProgress(0);
    bombTime=0;
    useButtonReleased=true;
  }
  bombProgressBarView.update(timeStep);
}","@Override public void update(TimeStep timeStep){
  killLog.update(timeStep);
  messageLog.update(timeStep);
  centerLog.update(timeStep);
  miniMap.update(timeStep);
  miniMap.setMapAlpha(scoreboard.isVisible() ? 0x3f : 0x8f);
  updateProgressBar(timeStep);
}",0.2932790224032586
86913,"/** 
 */
public Hud(ClientGame game){
  this.game=game;
  this.app=game.getApp();
  this.localPlayer=game.getLocalPlayer();
  int screenWidth=game.getApp().getScreenWidth();
  this.killLog=new KillLog(screenWidth - 260,30,5000);
  this.messageLog=new MessageLog(10,60,15000,6);
  this.centerLog=new MessageLog(screenWidth / 2,90,3000,2){
    @Override protected void onRenderMesage(    Canvas canvas,    Camera camera,    String message,    int x,    int y){
      int width=canvas.getWidth(message);
      canvas.drawString(message,x - (width / 2),y,0xffffffff);
    }
  }
;
  this.centerLog.setFontSize(24);
  this.scoreboard=game.getScoreboard();
  this.gameClockDate=new Date();
  this.bombProgressBar=new ProgressBar();
  this.bombProgressBar.setTheme(app.getTheme());
  this.bombProgressBar.setBounds(new Rectangle(300,15));
  this.bombProgressBar.getBounds().centerAround(screenWidth / 2,app.getScreenHeight() - 80);
  this.bombProgressBarView=new ProgressBarView(bombProgressBar);
}","/** 
 */
public Hud(ClientGame game){
  this.game=game;
  this.app=game.getApp();
  this.localPlayer=game.getLocalPlayer();
  int screenWidth=game.getApp().getScreenWidth();
  this.killLog=new KillLog(screenWidth - 260,30,5000);
  this.messageLog=new MessageLog(10,60,15000,6);
  this.centerLog=new MessageLog(screenWidth / 2,90,3000,2){
    @Override protected void onRenderMesage(    Canvas canvas,    Camera camera,    String message,    int x,    int y){
      int width=canvas.getWidth(message);
      canvas.drawString(message,x - (width / 2),y,0xffffffff);
    }
  }
;
  this.centerLog.setFontSize(24);
  this.scoreboard=game.getScoreboard();
  this.gameClockDate=new Date();
  this.bombProgressBar=new ProgressBar();
  this.bombProgressBar.setTheme(app.getTheme());
  this.bombProgressBar.setBounds(new Rectangle(300,15));
  this.bombProgressBar.getBounds().centerAround(screenWidth / 2,app.getScreenHeight() - 80);
  this.bombProgressBarView=new ProgressBarView(bombProgressBar);
  this.miniMap=new MiniMap(game);
}",0.9831181727904668
86914,"@Override public void render(Canvas canvas,Camera camera,long alpha){
  canvas.setFont(""String_Node_Str"",12);
  canvas.drawString(""String_Node_Str"" + app.getFps(),canvas.getWidth() - 60,10,0xff10f0ef);
  killLog.render(canvas,camera,0);
  messageLog.render(canvas,camera,0);
  centerLog.render(canvas,camera,0);
  if (localPlayer.isAlive()) {
    ClientPlayerEntity ent=localPlayer.getEntity();
    ClientWeapon weapon=ent.getWeapon();
    if (!ent.isMech()) {
      drawWeaponIcons(canvas,weapon);
      drawGrenadeIcons(canvas,ent.getNumberOfGrenades());
    }
    drawHealth(canvas,ent.getHealth());
    drawStamina(canvas,ent.getStamina());
  }
 else {
    drawHealth(canvas,0);
    drawStamina(canvas,0);
  }
  if (this.scoreboard.isVisible()) {
    this.scoreboard.drawScoreboard(canvas);
  }
  drawScore(canvas);
  drawClock(canvas);
  drawSpectating(canvas);
  drawBombProgressBar(canvas,camera);
}","@Override public void render(Canvas canvas,Camera camera,long alpha){
  canvas.setFont(""String_Node_Str"",12);
  canvas.drawString(""String_Node_Str"" + app.getFps(),canvas.getWidth() - 60,10,0xff10f0ef);
  killLog.render(canvas,camera,0);
  messageLog.render(canvas,camera,0);
  centerLog.render(canvas,camera,0);
  miniMap.render(canvas,camera,alpha);
  if (localPlayer.isAlive()) {
    ClientPlayerEntity ent=localPlayer.getEntity();
    ClientWeapon weapon=ent.getWeapon();
    if (!ent.isMech()) {
      drawWeaponIcons(canvas,weapon);
      drawGrenadeIcons(canvas,ent.getNumberOfGrenades());
    }
    drawHealth(canvas,ent.getHealth());
    drawStamina(canvas,ent.getStamina());
  }
 else {
    drawHealth(canvas,0);
    drawStamina(canvas,0);
  }
  if (this.scoreboard.isVisible()) {
    this.scoreboard.drawScoreboard(canvas);
  }
  drawScore(canvas);
  drawClock(canvas);
  drawSpectating(canvas);
  drawBombProgressBar(canvas,camera);
}",0.9789303079416533
86915,"/** 
 * Kill all entities, invokes a softKill on all active game entities
 */
public void killAll(){
  for (int i=0; i < entities.length; i++) {
    Entity ent=entities[i];
    if (ent != null) {
      ent.softKill();
    }
  }
  for (int i=0; i < playerEntities.length; i++) {
    playerEntities[i]=null;
  }
}","/** 
 * Kill all entities, invokes a softKill on all active game entities
 */
public void killAll(){
  for (int i=0; i < entities.length; i++) {
    Entity ent=entities[i];
    if (ent != null) {
      ent.softKill();
    }
  }
  for (int i=0; i < playerEntities.length; i++) {
    playerEntities[i]=null;
  }
  this.bombTargets.clear();
  this.vehicles.clear();
}",0.9214814814814816
86916,"/** 
 */
public InGameState(Players players,GameMap map,GameType gameType,GameServer server){
  this.players=players;
  this.server=server;
  this.network=server.getServer();
  this.clients=server.getClients();
  this.dispatcher=new EventDispatcher();
  this.game=new Game(server.getConfig(),players,gameType,map,dispatcher);
  this.listener=this.server.getProtocolListener();
  this.listener.setGame(this.game);
  loadProperties(map.getMapFileName(),game);
  this.nextGameStatUpdate=GAME_STAT_UPDATE;
  this.nextGamePartialStatUpdate=GAME_PARTIAL_STAT_UPDATE;
  this.statsMessage=new GameStatsMessage();
  this.partialStatsMessage=new GamePartialStatsMessage();
  this.dispatcher.addEventListener(PlayerKilledEvent.class,new PlayerKilledListener(){
    @Override @EventMethod public void onPlayerKilled(    PlayerKilledEvent event){
      PlayerKilledMessage msg=new PlayerKilledMessage();
      msg.deathType=event.getMeansOfDeath().netValue();
      msg.killedById=event.getKillerId();
      msg.playerId=event.getPlayer().getId();
      msg.posX=(short)event.getPos().x;
      msg.posY=(short)event.getPos().y;
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,msg);
    }
  }
);
  this.dispatcher.addEventListener(PlayerSpawnedEvent.class,new PlayerSpawnedListener(){
    @Override @EventMethod public void onPlayerSpawned(    PlayerSpawnedEvent event){
      PlayerSpawnedMessage msg=new PlayerSpawnedMessage();
      Player player=event.getPlayer();
      msg.playerId=player.getId();
      msg.posX=(short)event.getSpawnLocation().x;
      msg.posY=(short)event.getSpawnLocation().y;
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,msg);
    }
  }
);
  this.dispatcher.addEventListener(GameEndEvent.class,new GameEndListener(){
    @Override @EventMethod public void onGameEnd(    GameEndEvent event){
      if (!gameEnded) {
        GameEndedMessage msg=new GameEndedMessage();
        msg.stats=game.getNetGameStats();
        listener.queueSendToAll(Endpoint.FLAG_RELIABLE,msg);
        gameEnded=true;
      }
    }
  }
);
  this.dispatcher.addEventListener(RoundEndedEvent.class,new RoundEndedListener(){
    @Override @EventMethod public void onRoundEnded(    RoundEndedEvent event){
      RoundEndedMessage msg=new RoundEndedMessage();
      msg.stats=game.getNetGameStats();
      Team winner=event.getWinner();
      if (winner != null) {
        msg.winnerTeamId=winner.getId();
      }
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,msg);
    }
  }
);
  this.dispatcher.addEventListener(RoundStartedEvent.class,new RoundStartedListener(){
    @Override @EventMethod public void onRoundStarted(    RoundStartedEvent event){
      RoundStartedMessage msg=new RoundStartedMessage();
      msg.gameState=game.getNetGameState();
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,msg);
    }
  }
);
  this.dispatcher.addEventListener(BombPlantedEvent.class,new BombPlantedListener(){
    @Override @EventMethod public void onBombPlanted(    BombPlantedEvent event){
      int bombTargetId=event.getBombTarget() != null ? event.getBombTarget().getId() : Entity.INVALID_ENTITY_ID;
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,new BombPlantedMessage(bombTargetId));
    }
  }
);
  this.dispatcher.addEventListener(BombDisarmedEvent.class,new BombDisarmedListener(){
    @EventMethod @Override public void onBombDisarmedEvent(    BombDisarmedEvent event){
      int bombTargetId=event.getBombTarget() != null ? event.getBombTarget().getId() : Entity.INVALID_ENTITY_ID;
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,new BombDisarmedMessage(bombTargetId));
    }
  }
);
  this.dispatcher.addEventListener(BombExplodedMessage.class,new BombExplodedListener(){
    @EventMethod @Override public void onBombExplodedEvent(    BombExplodedEvent event){
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,new BombExplodedMessage());
    }
  }
);
}","/** 
 */
public InGameState(Players players,final GameMap map,GameType gameType,GameServer server){
  this.players=players;
  this.server=server;
  this.network=server.getServer();
  this.clients=server.getClients();
  this.dispatcher=new EventDispatcher();
  this.game=new Game(server.getConfig(),players,gameType,map,dispatcher);
  this.listener=this.server.getProtocolListener();
  this.listener.setGame(this.game);
  loadProperties(map.getMapFileName(),game);
  this.nextGameStatUpdate=GAME_STAT_UPDATE;
  this.nextGamePartialStatUpdate=GAME_PARTIAL_STAT_UPDATE;
  this.statsMessage=new GameStatsMessage();
  this.partialStatsMessage=new GamePartialStatsMessage();
  this.dispatcher.addEventListener(PlayerKilledEvent.class,new PlayerKilledListener(){
    @Override @EventMethod public void onPlayerKilled(    PlayerKilledEvent event){
      PlayerKilledMessage msg=new PlayerKilledMessage();
      msg.deathType=event.getMeansOfDeath().netValue();
      msg.killedById=event.getKillerId();
      msg.playerId=event.getPlayer().getId();
      msg.posX=(short)event.getPos().x;
      msg.posY=(short)event.getPos().y;
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,msg);
    }
  }
);
  this.dispatcher.addEventListener(PlayerSpawnedEvent.class,new PlayerSpawnedListener(){
    @Override @EventMethod public void onPlayerSpawned(    PlayerSpawnedEvent event){
      PlayerSpawnedMessage msg=new PlayerSpawnedMessage();
      Player player=event.getPlayer();
      msg.playerId=player.getId();
      msg.posX=(short)event.getSpawnLocation().x;
      msg.posY=(short)event.getSpawnLocation().y;
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,msg);
    }
  }
);
  this.dispatcher.addEventListener(GameEndEvent.class,new GameEndListener(){
    @Override @EventMethod public void onGameEnd(    GameEndEvent event){
      if (!gameEnded) {
        GameEndedMessage msg=new GameEndedMessage();
        msg.stats=game.getNetGameStats();
        listener.queueSendToAll(Endpoint.FLAG_RELIABLE,msg);
        gameEnded=true;
      }
    }
  }
);
  this.dispatcher.addEventListener(RoundEndedEvent.class,new RoundEndedListener(){
    @Override @EventMethod public void onRoundEnded(    RoundEndedEvent event){
      RoundEndedMessage msg=new RoundEndedMessage();
      msg.stats=game.getNetGameStats();
      Team winner=event.getWinner();
      if (winner != null) {
        msg.winnerTeamId=winner.getId();
      }
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,msg);
    }
  }
);
  this.dispatcher.addEventListener(RoundStartedEvent.class,new RoundStartedListener(){
    @Override @EventMethod public void onRoundStarted(    RoundStartedEvent event){
      loadProperties(map.getMapFileName(),game);
      RoundStartedMessage msg=new RoundStartedMessage();
      msg.gameState=game.getNetGameState();
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,msg);
    }
  }
);
  this.dispatcher.addEventListener(BombPlantedEvent.class,new BombPlantedListener(){
    @Override @EventMethod public void onBombPlanted(    BombPlantedEvent event){
      int bombTargetId=event.getBombTarget() != null ? event.getBombTarget().getId() : Entity.INVALID_ENTITY_ID;
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,new BombPlantedMessage(bombTargetId));
    }
  }
);
  this.dispatcher.addEventListener(BombDisarmedEvent.class,new BombDisarmedListener(){
    @EventMethod @Override public void onBombDisarmedEvent(    BombDisarmedEvent event){
      int bombTargetId=event.getBombTarget() != null ? event.getBombTarget().getId() : Entity.INVALID_ENTITY_ID;
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,new BombDisarmedMessage(bombTargetId));
    }
  }
);
  this.dispatcher.addEventListener(BombExplodedMessage.class,new BombExplodedListener(){
    @EventMethod @Override public void onBombExplodedEvent(    BombExplodedEvent event){
      listener.queueSendToAll(Endpoint.FLAG_RELIABLE,new BombExplodedMessage());
    }
  }
);
}",0.9929658524107944
86917,"@Override @EventMethod public void onRoundStarted(RoundStartedEvent event){
  RoundStartedMessage msg=new RoundStartedMessage();
  msg.gameState=game.getNetGameState();
  listener.queueSendToAll(Endpoint.FLAG_RELIABLE,msg);
}","@Override @EventMethod public void onRoundStarted(RoundStartedEvent event){
  loadProperties(map.getMapFileName(),game);
  RoundStartedMessage msg=new RoundStartedMessage();
  msg.gameState=game.getNetGameState();
  listener.queueSendToAll(Endpoint.FLAG_RELIABLE,msg);
}",0.9090909090909092
86918,"public ODatabaseInternal<?> db(){
  return ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner();
}","public ODatabaseInternal<?> db(){
  ODatabaseInternal<?> db;
  if (!ODatabaseRecordThreadLocal.INSTANCE.isDefined()) {
    db=openDatabase();
    log.debug(""String_Node_Str"",db.hashCode());
  }
 else {
    db=ODatabaseRecordThreadLocal.INSTANCE.get().getDatabaseOwner();
    log.debug(""String_Node_Str"",db.hashCode());
  }
  return db;
}",0.4469525959367946
86919,"@Override public String getRid(Object entity){
  Class clazz=entity.getClass();
  while (clazz != Object.class) {
    for (    Field field : clazz.getDeclaredFields()) {
      OId ridAnnotation=field.getAnnotation(OId.class);
      if (ridAnnotation != null) {
        field.setAccessible(true);
        try {
          Object rid=field.get(entity);
          return rid != null ? rid.toString() : null;
        }
 catch (        IllegalAccessException|IllegalArgumentException ex) {
          throw new RuntimeException(ex);
        }
      }
    }
    clazz=clazz.getSuperclass();
  }
  return null;
}","@Override public String getRid(Object entity){
  Class clazz=entity.getClass();
  while (clazz != Object.class) {
    for (    Field field : clazz.getDeclaredFields()) {
      OId ridAnnotation=field.getAnnotation(OId.class);
      if (ridAnnotation != null) {
        field.setAccessible(true);
        try {
          Object rid=field.get(entity);
          if (rid == null) {
            Method method=clazz.getDeclaredMethod(getterName(field.getName()));
            rid=method.invoke(entity);
          }
          return rid != null ? rid.toString() : null;
        }
 catch (        IllegalAccessException|IllegalArgumentException|NoSuchMethodException|InvocationTargetException ex) {
          throw new RuntimeException(ex);
        }
      }
    }
    clazz=clazz.getSuperclass();
  }
  return null;
}",0.8033946251768034
86920,"/** 
 * Returns whether the given repository interface requires a   {@link OrinetObjectRepository} specific implementation to be chosen.
 * @param repositoryInterface the repository interface
 * @return true, if is repository assignable from OrientObjectRepository
 */
private boolean isObjectRepository(Class<?> repositoryInterface){
  return OrientObjectRepository.class.isAssignableFrom(repositoryInterface);
}","/** 
 * Returns whether the given repository interface requires a   {@link org.springframework.data.orient.object.repository.OrientObjectRepository} specific implementation to be chosen.
 * @param repositoryInterface the repository interface
 * @return true, if is repository assignable from OrientObjectRepository
 */
private boolean isObjectRepository(Class<?> repositoryInterface){
  return OrientObjectRepository.class.isAssignableFrom(repositoryInterface);
}",0.9315068493150684
86921,"@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected Object getTargetRepository(RepositoryMetadata metadata){
  EntityInformation<?,Serializable> entityInformation=getEntityInformation(metadata.getDomainType());
  Class<?> repositoryInterface=metadata.getRepositoryInterface();
  Class<?> javaType=entityInformation.getJavaType();
  if (isObjectRepository(metadata.getRepositoryInterface())) {
    return new SimpleOrientObjectRepository(operations,javaType,repositoryInterface);
  }
 else {
    return new SimpleOrientRepository(operations,javaType,repositoryInterface);
  }
}","@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected Object getTargetRepository(RepositoryMetadata metadata){
  EntityInformation<?,Serializable> entityInformation=getEntityInformation(metadata.getDomainType());
  Class<?> repositoryInterface=metadata.getRepositoryInterface();
  Class<?> javaType=entityInformation.getJavaType();
  String customClusterName=getCustomCluster(metadata);
  if (customClusterName != null) {
    if (isObjectRepository(metadata.getRepositoryInterface())) {
      return new ClusteredOrientObjectRepository(operations,javaType,customClusterName,repositoryInterface);
    }
 else {
      return new ClusteredOrientRepository(operations,javaType,customClusterName,repositoryInterface);
    }
  }
 else {
    if (isObjectRepository(metadata.getRepositoryInterface())) {
      return new SimpleOrientObjectRepository(operations,javaType,repositoryInterface);
    }
 else {
      return new SimpleOrientRepository(operations,javaType,repositoryInterface);
    }
  }
}",0.7368421052631579
86922,"protected OrientSource getSource(){
  OrientSource orientSource=accessor.getSource();
  if (orientSource != null) {
    return orientSource;
  }
  Source source=findAnnotation(Source.class);
  if (source != null) {
    new DefaultSource(source.type(),source.value());
  }
  Cluster cluster=findAnnotation(Cluster.class);
  if (cluster != null) {
    orientSource=new DefaultSource(cluster.value());
  }
  return new DefaultSource(domainClass);
}","protected OrientSource getSource(){
  OrientSource orientSource=accessor.getSource();
  if (orientSource != null) {
    return orientSource;
  }
  Source source=findAnnotation(Source.class);
  if (source != null) {
    return new DefaultSource(source.type(),source.value());
  }
  Cluster cluster=findAnnotation(Cluster.class);
  if (cluster != null) {
    return new DefaultSource(cluster.value());
  }
  return new DefaultSource(domainClass);
}",0.9696969696969696
86923,"public static List<Span> splitIntoSpans(String regex,String text){
  List<Span> spans=new ArrayList<>();
  int curstart=0;
  Matcher m=Pattern.compile(regex).matcher(text);
  while (m.find()) {
    spans.add(new Span(curstart,m.start()));
    curstart=m.end();
  }
  spans.add(new Span(curstart,text.length()));
  return spans;
}","/** 
 * a-bb-c- ==> [0,1), [2,4), [5,6), [7,7) 
 */
public static List<Span> splitIntoSpans(String regex,String text){
  List<Span> spans=new ArrayList<>();
  int curstart=0;
  Matcher m=Pattern.compile(regex).matcher(text);
  while (m.find()) {
    spans.add(new Span(curstart,m.start()));
    curstart=m.end();
  }
  spans.add(new Span(curstart,text.length()));
  return spans;
}",0.9267605633802816
86924,"/** 
 * 0, {4,8}, 10 ===> [0,4), [4,8), [8,10) 
 */
public static List<Span> breakpointsToSpans(int start,List<Integer> breakpoints,int end){
  List<Span> spans=new ArrayList<>();
  int curstart=start;
  for (  int p : breakpoints) {
    spans.add(new Span(curstart,p));
    curstart=p;
  }
  spans.add(new Span(curstart,end));
  return spans;
}","/** 
 * 0, {4,8}, 10 ===> [0,4), [4,8), [8,10) 
 */
public static List<Span> breakpointsToSpans(int start,List<Integer> breakpoints,int end){
  List<Span> spans=new ArrayList<>();
  if (end < start)   return spans;
  if (start == end && breakpoints.size() > 0)   return spans;
  int curstart=start;
  for (  int p : breakpoints) {
    spans.add(new Span(curstart,p));
    curstart=p;
  }
  spans.add(new Span(curstart,end));
  return spans;
}",0.8233799237611181
86925,"@Test public void regextests(){
  List<Span> spans;
  assertEquals(Lists.newArrayList(new Span(0,1),new Span(2,3)),GUtil.splitIntoSpans(""String_Node_Str"",""String_Node_Str""));
  assertEquals(Lists.newArrayList(new Span(0,1),new Span(2,5)),GUtil.splitIntoSpans(""String_Node_Str"",""String_Node_Str""));
  assertEquals(Lists.newArrayList(new Span(0,1),new Span(2,2)),GUtil.splitIntoSpans(""String_Node_Str"",""String_Node_Str""));
  assertEquals(Lists.newArrayList(new Span(0,0),new Span(1,1)),GUtil.splitIntoSpans(""String_Node_Str"",""String_Node_Str""));
  assertEquals(Lists.newArrayList(new Span(0,1),new Span(2,2),new Span(3,3)),GUtil.splitIntoSpans(""String_Node_Str"",""String_Node_Str""));
}","@Test public void regextests(){
  assertEquals(Lists.newArrayList(new Span(0,1),new Span(2,3)),GUtil.splitIntoSpans(""String_Node_Str"",""String_Node_Str""));
  assertEquals(Lists.newArrayList(new Span(0,1),new Span(2,5)),GUtil.splitIntoSpans(""String_Node_Str"",""String_Node_Str""));
  assertEquals(Lists.newArrayList(new Span(0,1),new Span(2,2)),GUtil.splitIntoSpans(""String_Node_Str"",""String_Node_Str""));
  assertEquals(Lists.newArrayList(new Span(0,0),new Span(1,1)),GUtil.splitIntoSpans(""String_Node_Str"",""String_Node_Str""));
  assertEquals(Lists.newArrayList(new Span(0,1),new Span(2,2),new Span(3,3)),GUtil.splitIntoSpans(""String_Node_Str"",""String_Node_Str""));
  assertEquals(Lists.newArrayList(new Span(0,1),new Span(2,4),new Span(5,6),new Span(7,7)),GUtil.splitIntoSpans(""String_Node_Str"",""String_Node_Str""));
}",0.88561872909699
86926,"@Test public void spantests(){
  List<Span> spans=GUtil.breakpointsToSpans(0,Lists.newArrayList(4,8),10);
  assertEquals(Lists.newArrayList(new Span(0,4),new Span(4,8),new Span(8,10)),spans);
  spans=GUtil.breakpointsToSpans(0,Lists.newArrayList(),10);
  assertEquals(Lists.newArrayList(new Span(0,10)),spans);
  spans=GUtil.breakpointsToSpans(-4,Lists.newArrayList(3),10);
  assertEquals(Lists.newArrayList(new Span(-4,3),new Span(3,10)),spans);
}","@Test public void spantests(){
  List<Span> spans=GUtil.breakpointsToSpans(0,Lists.newArrayList(4,8),10);
  assertEquals(Lists.newArrayList(new Span(0,4),new Span(4,8),new Span(8,10)),spans);
  spans=GUtil.breakpointsToSpans(0,Lists.newArrayList(),10);
  assertEquals(Lists.newArrayList(new Span(0,10)),spans);
  spans=GUtil.breakpointsToSpans(-4,Lists.newArrayList(3),10);
  assertEquals(Lists.newArrayList(new Span(-4,3),new Span(3,10)),spans);
  spans=GUtil.breakpointsToSpans(3,Lists.newArrayList(),3);
  assertEquals(Lists.newArrayList(new Span(3,3)),spans);
  spans=GUtil.breakpointsToSpans(3,Lists.newArrayList(),2);
  assertEquals(Lists.newArrayList(),spans);
}",0.8021486123545211
86927,"@Override public void paintComponent(Graphics _g){
  Graphics2D g=(Graphics2D)_g;
  U.pf(""String_Node_Str"",getSize(),g.getClip(),getVisibleRect());
  draw(g,getWidth());
}","@Override public void paintComponent(Graphics _g){
  Graphics2D g=(Graphics2D)_g;
  draw(g,getWidth());
}",0.7608695652173914
86928,"void draw(Graphics2D g,int width){
  long t0=System.nanoTime();
  U.pf(""String_Node_Str"");
  Rectangle clip=g.getClipBounds();
  Rendering rend=getRendering();
  int lineHeight=getLineHeight();
  int totalHeight=rend.totalScreenLines * lineHeight;
  g.setColor(Color.WHITE);
  g.fillRect(clip.x,clip.y,clip.width,clip.height);
  g.setColor(Color.BLACK);
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_NORMALIZE);
  g.setFont(NORMAL_FONT);
  U.p(clip);
  int firstline=clip.y / lineHeight;
  int lastline=(clip.y + clip.height) / lineHeight;
  firstline--;
  firstline=Math.max(firstline,0);
  lastline++;
  lastline=Math.min(lastline,rend.totalScreenLines - 1);
  U.pf(""String_Node_Str"",firstline,lastline);
  for (int line=firstline; line <= lastline; line++) {
    Span span=rend.screenlineCharSpans.get(line);
    String str=GUtil.substring(doc.text,span);
    g.drawString(str,0,(line + 1) * lineHeight);
  }
  U.pf(""String_Node_Str"",(System.nanoTime() - t0) / 1e6);
}","void draw(Graphics2D g,int width){
  long t0=System.nanoTime();
  Rectangle clip=g.getClipBounds();
  Rendering rend=_rendering;
  if (rend == null) {
    return;
  }
  int lineHeight=getLineHeight();
  g.setColor(Color.WHITE);
  g.fillRect(clip.x,clip.y,clip.width,clip.height);
  g.setColor(Color.BLACK);
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_NORMALIZE);
  g.setFont(NORMAL_FONT);
  int firstline=clip.y / lineHeight;
  int lastline=(clip.y + clip.height) / lineHeight;
  firstline--;
  firstline=Math.max(firstline,0);
  lastline++;
  lastline=Math.min(lastline,rend.totalScreenLines - 1);
  for (int line=firstline; line <= lastline; line++) {
    Span span=rend.screenlineCharSpans.get(line);
    String str=GUtil.substring(doc.text,span);
    g.drawString(str,0,(line + 1) * lineHeight);
  }
}",0.8226600985221675
86929,"@Override public void componentResized(ComponentEvent e){
  U.p(e);
  rerenderText();
}","@Override public void componentResized(ComponentEvent e){
  launchTextRender();
}",0.8452380952380952
86930,"InternalTextArea(){
  addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      U.p(e);
      rerenderText();
    }
  }
);
}","InternalTextArea(){
  addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      launchTextRender();
    }
  }
);
}",0.9157303370786516
86931,"/** 
 * calculate all visible break positions for a given rendering width and font. includes both softbreaks (ones caused by wordwrap) as well as hardbreaks (forced by newlines)
 */
static List<Integer> calculateBreaks(Document doc,int width,FontMetrics fm){
  return calculateBreaks(doc,0,doc.text.length(),width,fm::stringWidth);
}","/** 
 * this can't handle hard breaks. only infers soft breaks. 
 */
public static List<Integer> calculateBreaks(Document doc,int charstart,int charend,int width,Function<String,Integer> widthMeasure){
}",0.3134328358208955
86932,"Rendering renderWordWrapping(int width){
  Rendering r=new Rendering();
  FontMetrics fm=new Canvas(GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration()).getFontMetrics(NORMAL_FONT);
  for (int p=0; p < paragraphSpans.size(); p++) {
    Span pspan=paragraphSpans.get(p);
    Rendering.Paragraph pp=new Rendering.Paragraph();
    List<Integer> softbreaks=calculateBreaks(doc,pspan.start,pspan.end,width,fm::stringWidth);
    int nl=softbreaks.size() + 1;
    pp.numScreenLines=nl;
    if (p == 0) {
      pp.screenLinePosition=0;
    }
 else {
      Rendering.Paragraph prev=r.paragraphs.get(p - 1);
      pp.screenLinePosition=prev.numScreenLines + prev.screenLinePosition;
    }
    pp.screenlineCharSpans=GUtil.breakpointsToSpans(pspan.start,softbreaks,pspan.end);
    for (    Span scs : pp.screenlineCharSpans) {
      r.screenlineCharSpans.add(scs);
    }
    r.paragraphs.add(pp);
  }
  Rendering.Paragraph pp=r.paragraphs.get(r.paragraphs.size() - 1);
  r.totalScreenLines=pp.screenLinePosition + pp.numScreenLines;
  return r;
}","/** 
 * can fail with null if thread is interrupted 
 */
Rendering renderWordWrapping(int width){
  Rendering r=new Rendering();
  FontMetrics fm=new Canvas(GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration()).getFontMetrics(NORMAL_FONT);
  for (int p=0; p < paragraphSpans.size(); p++) {
    if (Thread.interrupted()) {
      return null;
    }
    Span pspan=paragraphSpans.get(p);
    List<Integer> softbreaks=calculateBreaks(doc,pspan.start,pspan.end,width,fm::stringWidth);
    int nl=softbreaks.size() + 1;
    List<Span> screenlineCharSpans=GUtil.breakpointsToSpans(pspan.start,softbreaks,pspan.end);
    for (    Span scs : screenlineCharSpans) {
      r.screenlineCharSpans.add(scs);
    }
  }
  r.totalScreenLines=r.screenlineCharSpans.size();
  return r;
}",0.6915789473684211
86933,"/** 
 * 0, {4,8}, 10 ===> [0,4), [4,8), [8,10) 
 */
public static List<Span> breakpointsToSpans(int start,List<Integer> breakpoints,int end){
  List<Span> spans=new ArrayList<>();
  int curstart=0;
  for (  int p : breakpoints) {
    spans.add(new Span(curstart,p));
    curstart=p;
  }
  spans.add(new Span(curstart,end));
  return spans;
}","/** 
 * 0, {4,8}, 10 ===> [0,4), [4,8), [8,10) 
 */
public static List<Span> breakpointsToSpans(int start,List<Integer> breakpoints,int end){
  List<Span> spans=new ArrayList<>();
  int curstart=start;
  for (  int p : breakpoints) {
    spans.add(new Span(curstart,p));
    curstart=p;
  }
  spans.add(new Span(curstart,end));
  return spans;
}",0.9912536443148688
86934,"@Test public void spantests(){
  List<Span> spans=GUtil.breakpointsToSpans(0,Lists.newArrayList(4,8),10);
  assertEquals(Lists.newArrayList(new Span(0,4),new Span(4,8),new Span(8,10)),spans);
  spans=GUtil.breakpointsToSpans(0,Lists.newArrayList(),10);
  assertEquals(Lists.newArrayList(new Span(0,10)),spans);
}","@Test public void spantests(){
  List<Span> spans=GUtil.breakpointsToSpans(0,Lists.newArrayList(4,8),10);
  assertEquals(Lists.newArrayList(new Span(0,4),new Span(4,8),new Span(8,10)),spans);
  spans=GUtil.breakpointsToSpans(0,Lists.newArrayList(),10);
  assertEquals(Lists.newArrayList(new Span(0,10)),spans);
  spans=GUtil.breakpointsToSpans(-4,Lists.newArrayList(3),10);
  assertEquals(Lists.newArrayList(new Span(-4,3),new Span(3,10)),spans);
}",0.8210526315789474
86935,"static List<Integer> possibleBreakpoints(Document doc){
  int curtok=0;
  int curchar=0;
  List<Integer> breaks=new ArrayList<>();
  while (true) {
    while (curchar <= doc.tokens.get(curtok).startChar) {
      breaks.add(curchar);
      curchar++;
    }
    curchar=doc.tokens.get(curtok).endChar;
    curtok++;
    if (curchar >= doc.text.length())     break;
    if (curtok >= doc.tokens.size()) {
      while (curchar < doc.text.length()) {
        breaks.add(curchar);
        curchar++;
      }
      break;
    }
  }
  return breaks;
}","public static List<Integer> possibleBreakpoints(Document doc,int charStart,int charEnd){
}",0.2306477093206951
86936,"/** 
 * calculate all visible break positions for a given rendering width and font. includes both softbreaks (ones caused by wordwrap) as well as hardbreaks (forced by newlines)
 */
static List<Integer> calculateBreaks(Document doc,int width,FontMetrics fm){
  return calculateBreaks(doc,width,fm::stringWidth);
}","/** 
 * calculate all visible break positions for a given rendering width and font. includes both softbreaks (ones caused by wordwrap) as well as hardbreaks (forced by newlines)
 */
static List<Integer> calculateBreaks(Document doc,int width,FontMetrics fm){
  return calculateBreaks(doc,0,doc.text.length(),width,fm::stringWidth);
}",0.9690402476780186
86937,"private void setMySize(int w,int h){
  minPhysX=marLeft;
  minPhysY=marTop;
  maxPhysX=w - marRight;
  maxPhysY=h - marBottom;
  U.pf(""String_Node_Str"",minPhysX,maxPhysX,minPhysY,maxPhysY);
}","private void setMySize(int w,int h){
  minPhysX=marLeft;
  minPhysY=marTop;
  maxPhysX=w - marRight;
  maxPhysY=h - marBottom;
}",0.8025078369905956
86938,"void setupUI(){
  setupTermfilterSpinners();
  JPanel termfilterPanel=new JPanel();
  termfilterPanel.setLayout(new BoxLayout(termfilterPanel,BoxLayout.X_AXIS));
  termfilterPanel.add(new JLabel(""String_Node_Str""));
  termfilterPanel.add(tpSpinner);
  termfilterPanel.add(new JLabel(""String_Node_Str""));
  termfilterPanel.add(tcSpinner);
  termlistInfo=new JLabel();
  docdrivenTermTable=new TermTable(new TermTableModel());
  docdrivenTermTable.model.terms=() -> docdrivenTerms;
  docdrivenTermTable.model.comparison=() -> docvarCompare;
  docdrivenTermTable.setupTermTable();
  addTermdriverAction(docdrivenTermTable);
  docdrivenTermTable.doubleClickListener=this::pinTerm;
  termdrivenTermTable=new TermTable(new TermTableModel());
  termdrivenTermTable.model.terms=() -> termdrivenTerms;
  termdrivenTermTable.model.comparison=() -> termtermBoolqueryCompare;
  termdrivenTermTable.setupTermTable();
  termdrivenTermTable.doubleClickListener=this::pinTerm;
  pinnedTermTable=new TermTable(new TermTableModel());
  pinnedTermTable.model.terms=() -> pinnedTerms;
  pinnedTermTable.model.comparison=() -> docvarCompare;
  pinnedTermTable.setupTermTable();
  addTermdriverAction(pinnedTermTable);
  pinnedTermTable.doubleClickListener=this::unpinTerm;
  JPanel pinnedWrapper=new JPanel(new BorderLayout());
  pinnedWrapper.add(pinnedTermTable.top(),BorderLayout.CENTER);
  JPanel docdrivenWrapper=new JPanel(new BorderLayout());
  JPanel topstuff=new JPanel(new FlowLayout(FlowLayout.LEFT));
  topstuff.add(termlistInfo);
  docdrivenWrapper.add(topstuff,BorderLayout.NORTH);
  docdrivenWrapper.add(docdrivenTermTable.top(),BorderLayout.CENTER);
  JPanel termdrivenWrapper=new JPanel(new BorderLayout());
  termtermDescription=new JLabel(""String_Node_Str"");
  termdrivenWrapper.add(termtermDescription,BorderLayout.NORTH);
  termdrivenWrapper.add(termdrivenTermTable.top(),BorderLayout.CENTER);
  mainqueryInfo=new JLabel();
  subqueryInfo=new JLabel();
  JPanel queryInfo=new JPanel(){
{
      add(mainqueryInfo);
      add(subqueryInfo);
    }
  }
;
  brushPanel=new BrushPanel(this,corpus.allDocs());
  brushPanel.yLevels=corpus.yLevels;
  brushPanel.setOpaque(true);
  brushPanel.setBackground(Color.white);
  brushPanel.setBorder(BorderFactory.createLineBorder(Color.black));
  brushPanel.setDefaultXYLim(corpus);
  textPanel=new TextPanel();
  DockController controller=new DockController();
  SplitDockStation station=new SplitDockStation();
  controller.add(station);
  SplitDockGrid grid=new SplitDockGrid();
  grid.addDockable(0,0,1,10,new DefaultDockable(""String_Node_Str""){
{
      add(pinnedWrapper);
    }
  }
);
  grid.addDockable(0,10,1,5,new DefaultDockable(""String_Node_Str""){
{
      add(termfilterPanel);
    }
  }
);
  grid.addDockable(0,15,1,20,new DefaultDockable(""String_Node_Str""){
{
      add(docdrivenWrapper);
    }
  }
);
  grid.addDockable(0,35,1,20,new DefaultDockable(""String_Node_Str""){
{
      add(termdrivenWrapper);
    }
  }
);
  grid.addDockable(1,0,1,5,new DefaultDockable(""String_Node_Str""){
{
      add(queryInfo);
    }
  }
);
  grid.addDockable(1,10,1,15,new DefaultDockable(""String_Node_Str""){
{
      add(brushPanel);
    }
  }
);
  grid.addDockable(1,25,1,20,new DefaultDockable(""String_Node_Str""){
{
      add(textPanel.top());
    }
  }
);
  station.dropTree(grid.toTree());
  mainFrame=new JFrame(""String_Node_Str"");
  mainFrame.add(station.getComponent());
  mainFrame.setBounds(20,20,800,600);
  mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  ToolTipManager.sharedInstance().setDismissDelay((int)1e6);
}","void setupUI(){
  setupTermfilterSpinners();
  JPanel termfilterPanel=new JPanel();
  termfilterPanel.setLayout(new BoxLayout(termfilterPanel,BoxLayout.X_AXIS));
  termfilterPanel.add(new JLabel(""String_Node_Str""));
  termfilterPanel.add(tpSpinner);
  termfilterPanel.add(new JLabel(""String_Node_Str""));
  termfilterPanel.add(tcSpinner);
  termlistInfo=new JLabel();
  docdrivenTermTable=new TermTable(new TermTableModel());
  docdrivenTermTable.model.terms=() -> docdrivenTerms;
  docdrivenTermTable.model.comparison=() -> docvarCompare;
  docdrivenTermTable.setupTermTable();
  addTermdriverAction(docdrivenTermTable);
  docdrivenTermTable.doubleClickListener=this::pinTerm;
  termdrivenTermTable=new TermTable(new TermTableModel());
  termdrivenTermTable.model.terms=() -> termdrivenTerms;
  termdrivenTermTable.model.comparison=() -> termtermBoolqueryCompare;
  termdrivenTermTable.setupTermTable();
  termdrivenTermTable.doubleClickListener=this::pinTerm;
  pinnedTermTable=new TermTable(new TermTableModel());
  pinnedTermTable.model.terms=() -> pinnedTerms;
  pinnedTermTable.model.comparison=() -> docvarCompare;
  pinnedTermTable.setupTermTable();
  addTermdriverAction(pinnedTermTable);
  pinnedTermTable.doubleClickListener=this::unpinTerm;
  JPanel pinnedWrapper=new JPanel(new BorderLayout());
  pinnedWrapper.add(pinnedTermTable.top(),BorderLayout.CENTER);
  JPanel docdrivenWrapper=new JPanel(new BorderLayout());
  JPanel topstuff=new JPanel(new FlowLayout(FlowLayout.LEFT));
  topstuff.add(termlistInfo);
  docdrivenWrapper.add(topstuff,BorderLayout.NORTH);
  docdrivenWrapper.add(docdrivenTermTable.top(),BorderLayout.CENTER);
  termtermDescription=new InfoArea(""String_Node_Str"");
  JPanel termdrivenWrapper=new JPanel(new BorderLayout()){
{
      addComponentListener(new ComponentAdapter(){
        @Override public void componentResized(        ComponentEvent e){
        }
      }
);
    }
  }
;
  termdrivenWrapper.add(termtermDescription,BorderLayout.NORTH);
  termdrivenWrapper.add(termdrivenTermTable.top(),BorderLayout.CENTER);
  mainqueryInfo=new InfoArea(""String_Node_Str"");
  subqueryInfo=new InfoArea(""String_Node_Str"");
  JPanel queryInfo=new JPanel(){
{
      setLayout(new BoxLayout(this,BoxLayout.PAGE_AXIS));
      add(mainqueryInfo);
      add(subqueryInfo);
      addComponentListener(new ComponentAdapter(){
        @Override public void componentResized(        ComponentEvent e){
        }
      }
);
    }
  }
;
  brushPanel=new BrushPanel(this,corpus.allDocs());
  brushPanel.yLevels=corpus.yLevels;
  brushPanel.setOpaque(true);
  brushPanel.setBackground(Color.white);
  brushPanel.setBorder(BorderFactory.createLineBorder(Color.black));
  brushPanel.setDefaultXYLim(corpus);
  textPanel=new TextPanel();
  DockController controller=new DockController();
  SplitDockStation station=new SplitDockStation();
  controller.add(station);
  SplitDockGrid grid=new SplitDockGrid();
  double x=1, rx=1;
  grid.addDockable(0,0,x,10,new DefaultDockable(""String_Node_Str""){
{
      add(pinnedWrapper);
    }
  }
);
  grid.addDockable(0,10,x,5,new DefaultDockable(""String_Node_Str""){
{
      add(termfilterPanel);
    }
  }
);
  grid.addDockable(0,15,x,20,new DefaultDockable(""String_Node_Str""){
{
      add(docdrivenWrapper);
    }
  }
);
  grid.addDockable(0,35,x,20,new DefaultDockable(""String_Node_Str""){
{
      add(termdrivenWrapper);
    }
  }
);
  grid.addDockable(x,0,rx,5,new DefaultDockable(""String_Node_Str""){
{
      add(queryInfo);
    }
  }
);
  grid.addDockable(x,10,rx,15,new DefaultDockable(""String_Node_Str""){
{
      add(brushPanel);
    }
  }
);
  grid.addDockable(x,25,rx,20,new DefaultDockable(""String_Node_Str""){
{
      add(textPanel.top());
    }
  }
);
  station.dropTree(grid.toTree());
  mainFrame=new JFrame(""String_Node_Str"");
  mainFrame.add(station.getComponent());
  mainFrame.pack();
  mainFrame.setBounds(20,20,800,550);
  mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  ToolTipManager.sharedInstance().setDismissDelay((int)1e6);
}",0.911993666710648
86939,"public TermTable(Main.TermTableModel ttm){
  model=ttm;
  table=new JTable(model);
  scrollpane=new JScrollPane(table);
}","public TermTable(Main.TermTableModel ttm){
  model=ttm;
  table=new JTable(model){
{
      setFillsViewportHeight(true);
    }
    @Override public Dimension getPreferredSize(){
      return super.getPreferredSize();
    }
    @Override public boolean getScrollableTracksViewportWidth(){
      return true;
    }
  }
;
  scrollpane=new JScrollPane(table){
    @Override public Dimension getSize(){
      return super.getSize();
    }
    @Override public Dimension getPreferredSize(){
      return super.getPreferredSize();
    }
  }
;
  scrollpane.setPreferredSize(new Dimension(250,200));
}",0.3309957924263674
86940,"void setupTermTable(){
  table.setSelectionBackground(GUtil.Dark2[0]);
  table.setFillsViewportHeight(true);
  TermCellRenderer centerRenderer=new TermCellRenderer();
  centerRenderer.setHorizontalAlignment(JLabel.CENTER);
  TermCellRenderer rightRenderer=new TermCellRenderer();
  rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
  TableColumn cc;
  cc=table.getColumnModel().getColumn(0);
  cc.setMinWidth(100);
  cc=table.getColumnModel().getColumn(1);
  cc.setMinWidth(20);
  cc.setWidth(20);
  cc.setCellRenderer(centerRenderer);
  cc=table.getColumnModel().getColumn(2);
  cc.setMinWidth(8);
  cc.setMaxWidth(8);
  cc=table.getColumnModel().getColumn(3);
  cc.setMinWidth(20);
  cc.setWidth(20);
  cc.setCellRenderer(centerRenderer);
  cc=table.getColumnModel().getColumn(4);
  cc.setCellRenderer(centerRenderer);
  cc.setMinWidth(50);
  table.setAutoCreateRowSorter(true);
  table.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      JTable table=(JTable)e.getSource();
      int row=table.rowAtPoint(e.getPoint());
      if (row < 0) {
        return;
      }
      if (e.getClickCount() == 1) {
      }
 else       if (e.getClickCount() == 2) {
        String term=getTermAt(row);
        doubleClickListener.accept(term);
      }
    }
  }
);
}","void setupTermTable(){
  table.setSelectionBackground(GUtil.Dark2[0]);
  TermCellRenderer centerNumberRenderer=new TermCellRenderer();
  centerNumberRenderer.setHorizontalAlignment(JLabel.CENTER);
  TableColumn cc;
  cc=table.getColumnModel().getColumn(0);
  cc.setMinWidth(100);
  cc.setPreferredWidth(100);
  cc=table.getColumnModel().getColumn(1);
  cc.setCellRenderer(centerNumberRenderer);
  cc.setPreferredWidth(50);
  cc=table.getColumnModel().getColumn(2);
  cc.setMinWidth(8);
  cc.setMaxWidth(8);
  cc.setPreferredWidth(8);
  cc=table.getColumnModel().getColumn(3);
  cc.setCellRenderer(centerNumberRenderer);
  cc.setPreferredWidth(50);
  cc=table.getColumnModel().getColumn(4);
  cc.setCellRenderer(centerNumberRenderer);
  cc.setPreferredWidth(50);
  table.setAutoCreateRowSorter(true);
  table.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      JTable table=(JTable)e.getSource();
      int row=table.rowAtPoint(e.getPoint());
      if (row < 0) {
        return;
      }
      if (e.getClickCount() == 1) {
      }
 else       if (e.getClickCount() == 2) {
        String term=getTermAt(row);
        doubleClickListener.accept(term);
      }
    }
  }
);
}",0.740799366838148
86941,"public void setDefaultXYLim(Corpus corpus){
  double xmin=corpus.covariateSummaries.get(xattr).min(), xmax=corpus.covariateSummaries.get(xattr).max(), ymin=corpus.covariateSummaries.get(yattr).min(), ymax=corpus.covariateSummaries.get(yattr).max();
  double scale;
  scale=ymax - ymin;
  minUserY=ymin - scale * scaleMult;
  maxUserY=ymax + scale * scaleMult;
  scale=xmax - xmin;
  minUserX=xmin - scale * scaleMult;
  maxUserX=xmax + scale * scaleMult;
}","public void setDefaultXYLim(Corpus corpus){
  double xmin=corpus.covariateSummaries.get(xattr).min(), xmax=corpus.covariateSummaries.get(xattr).max(), ymin=corpus.covariateSummaries.get(yattr).min(), ymax=corpus.covariateSummaries.get(yattr).max();
  double scale;
  scale=ymax - ymin;
  scale=scale == 0 ? 1 : scale;
  minUserY=ymin - scale * scaleMult;
  maxUserY=ymax + scale * scaleMult;
  scale=xmax - xmin;
  scale=scale == 0 ? 1 : scale;
  minUserX=xmin - scale * scaleMult;
  maxUserX=xmax + scale * scaleMult;
}",0.9344262295081968
86942,"void setupTermTable(final TermTable tt){
  tt.setupTermTable();
  tt.table.getSelectionModel().addListSelectionListener(e -> {
    if (e.getValueIsAdjusting()) {
      runTermQuery();
    }
  }
);
}","void setupTermTable(final TermTable tt){
  tt.setupTermTable();
  tt.table.getSelectionModel().addListSelectionListener(e -> {
    if (!e.getValueIsAdjusting()) {
      runTermQuery();
    }
  }
);
}",0.9974811083123426
86943,"/** 
 * {@inheritDoc}
 */
@NotNull @Override public ProgramCommandLine makeProgramCommandLine() throws RunBuildException {
  Path lib=clientDirectory.resolve(""String_Node_Str"");
  Path conf=clientDirectory.resolve(""String_Node_Str"");
  JavaCommandLineBuilder cliBuilder=new JavaCommandLineBuilder();
  String javaHome=getRunnerParameters().get(JavaRunnerConstants.TARGET_JDK_HOME);
  cliBuilder.setJavaHome(javaHome);
  cliBuilder.setBaseDir(workingDirectory);
  cliBuilder.setWorkingDir(workingDirectory);
  cliBuilder.setJvmArgs(JavaRunnerUtil.extractJvmArgs(getRunnerParameters()));
  cliBuilder.setMainClass(MAIN_CLASS);
  cliBuilder.setClassPath(format(""String_Node_Str"",lib,conf));
  cliBuilder.addSystemProperty(""String_Node_Str"",clientDirectory.toString());
  cliBuilder.addSystemProperty(""String_Node_Str"",propertiesFile.toString());
  cliBuilder.addProgramArg(""String_Node_Str"");
  cliBuilder.addProgramArg(""String_Node_Str"");
  cliBuilder.addProgramArg(resultsDirectory.toString());
  cliBuilder.addProgramArg(""String_Node_Str"");
  cliBuilder.addProgramArg(reportDirectory.toString());
  return cliBuilder.build();
}","/** 
 * {@inheritDoc}
 */
@NotNull @Override public ProgramCommandLine makeProgramCommandLine() throws RunBuildException {
  String lib=format(""String_Node_Str"",clientDirectory.resolve(""String_Node_Str""));
  String conf=clientDirectory.resolve(""String_Node_Str"").toString();
  JavaCommandLineBuilder cliBuilder=new JavaCommandLineBuilder();
  String javaHome=getRunnerParameters().get(JavaRunnerConstants.TARGET_JDK_HOME);
  cliBuilder.setJavaHome(javaHome);
  cliBuilder.setBaseDir(workingDirectory);
  cliBuilder.setWorkingDir(workingDirectory);
  cliBuilder.setJvmArgs(JavaRunnerUtil.extractJvmArgs(getRunnerParameters()));
  cliBuilder.setMainClass(MAIN_CLASS);
  cliBuilder.setClassPath(formatClassPath(lib,conf));
  cliBuilder.addSystemProperty(""String_Node_Str"",clientDirectory.toString());
  cliBuilder.addSystemProperty(""String_Node_Str"",propertiesFile.toString());
  cliBuilder.addProgramArg(""String_Node_Str"");
  cliBuilder.addProgramArg(""String_Node_Str"");
  cliBuilder.addProgramArg(resultsDirectory.toString());
  cliBuilder.addProgramArg(""String_Node_Str"");
  cliBuilder.addProgramArg(reportDirectory.toString());
  return cliBuilder.build();
}",0.9588801399825022
86944,"private static void initPreferences(Context context){
  if (preferences == null) {
    preferences=PreferenceManager.getDefaultSharedPreferences(context);
  }
  if (KEY_ENABLE_NOTIFICATION == null || KEY_ENABLE_NOTIFICATION.isEmpty()) {
    KEY_ENABLE_NOTIFICATION=context.getResources().getString(R.string.pref_key_enable_notification);
  }
}","private static void initPreferences(Context context){
  if (preferences == null) {
    preferences=PreferenceManager.getDefaultSharedPreferences(context);
  }
  if (KEY_ENABLE_NOTIFICATION == null || KEY_ENABLE_NOTIFICATION.isEmpty()) {
    KEY_ENABLE_NOTIFICATION=context.getResources().getString(R.string.pref_key_enable_notification);
  }
  if (KEY_HIDE_LOW_PRIORITY_NOTIFICATIONS == null || KEY_HIDE_LOW_PRIORITY_NOTIFICATIONS.isEmpty()) {
    KEY_HIDE_LOW_PRIORITY_NOTIFICATIONS=context.getResources().getString(R.string.pref_key_hide_low_priority_notifications);
  }
  if (KEY_HIDE_PERSISTENT_NOTIFICATIONS == null || KEY_HIDE_PERSISTENT_NOTIFICATIONS.isEmpty()) {
    KEY_HIDE_PERSISTENT_NOTIFICATIONS=context.getResources().getString(R.string.pref_key_hide_persistent_notifications);
  }
}",0.6017543859649123
86945,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == MASTER_PASSWORD_REQUEST) {
    if (!(resultCode == RESULT_OK && AdminActions.isAdminEnabled())) {
      finish();
    }
  }
  super.onActivityResult(requestCode,resultCode,data);
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == MASTER_PASSWORD_REQUEST) {
    if (!(resultCode == RESULT_OK && AdminActions.isAdminEnabled())) {
      finish();
    }
 else {
      refreshUserList();
    }
  }
  super.onActivityResult(requestCode,resultCode,data);
}",0.9365853658536586
86946,"private void showUserList(){
  usersList.clearAnimation();
  usersList.setVisibility(View.VISIBLE);
  usersList.animate().alpha(1f).translationY(0f).setInterpolator(new DecelerateInterpolator()).setListener(null).start();
  navDrawerListView.animate().translationY(usersList.getHeight()).alpha(0).setListener(new Animator.AnimatorListener(){
    @Override public void onAnimationStart(    Animator animation){
    }
    @Override public void onAnimationEnd(    Animator animation){
      navDrawerListView.setVisibility(View.GONE);
      usersList.setBackgroundColor(Color.TRANSPARENT);
    }
    @Override public void onAnimationCancel(    Animator animation){
      navDrawerListView.setVisibility(View.GONE);
      usersList.setBackgroundColor(Color.TRANSPARENT);
    }
    @Override public void onAnimationRepeat(    Animator animation){
    }
  }
).setInterpolator(new DecelerateInterpolator()).start();
  userListDropDown.animate().rotation(180).setInterpolator(new AccelerateDecelerateInterpolator()).start();
}","private void showUserList(){
  usersList.clearAnimation();
  usersList.setVisibility(View.VISIBLE);
  usersList.animate().alpha(1f).translationY(0f).setInterpolator(new AccelerateDecelerateInterpolator()).setListener(null).start();
  navDrawerListView.animate().translationY(usersList.getHeight()).alpha(0).setListener(new Animator.AnimatorListener(){
    @Override public void onAnimationStart(    Animator animation){
    }
    @Override public void onAnimationEnd(    Animator animation){
      navDrawerListView.setVisibility(View.GONE);
      usersList.setBackgroundColor(Color.TRANSPARENT);
    }
    @Override public void onAnimationCancel(    Animator animation){
      navDrawerListView.setVisibility(View.GONE);
      usersList.setBackgroundColor(Color.TRANSPARENT);
    }
    @Override public void onAnimationRepeat(    Animator animation){
    }
  }
).setInterpolator(new AccelerateDecelerateInterpolator()).start();
  userListDropDown.animate().rotation(180).setInterpolator(new AccelerateDecelerateInterpolator()).start();
}",0.990272373540856
86947,"private void setUpNavDrawer(){
  mainItemList=new ArrayList<String>();
  mainItemList.add(INDEX_MANAGE_ENVIRONMENTS,getString(R.string.title_activity_manage_environment));
  mainItemList.add(INDEX_ENVIRONMENT_OVERLAP,getString(R.string.title_activity_environment_overlap));
  mainItemList.add(INDEX_MASTER_PASSWORD,getString(R.string.title_activity_set_master_password));
  mainItemRIds=new ArrayList<Integer>();
  mainItemRIds.add(INDEX_MANAGE_ENVIRONMENTS,R.drawable.ic_environment);
  mainItemRIds.add(INDEX_ENVIRONMENT_OVERLAP,R.drawable.ic_env_overlap);
  mainItemRIds.add(INDEX_MASTER_PASSWORD,R.drawable.ic_master_password);
  restrictedMainItemList=new ArrayList<String>();
  restrictedMainItemList.add(INDEX_ALLOWED_APPS,getString(R.string.title_activity_allowed_apps));
  restrictedMainItemList.add(INDEX_PASSWORD,getString(R.string.title_activity_set_passphrase));
  restrictedMainItemRIds=new ArrayList<Integer>();
  restrictedMainItemRIds.add(INDEX_ALLOWED_APPS,R.drawable.ic_apps);
  restrictedMainItemRIds.add(INDEX_PASSWORD,R.drawable.ic_master_password);
  secondaryItemList=new ArrayList<String>();
  secondaryItemList.add(INDEX_SETTINGS,getString(R.string.title_activity_general_settings));
  secondaryItemList.add(INDEX_HELP,getString(R.string.title_activity_help));
  secondaryItemList.add(INDEX_ABOUT,getString(R.string.title_activity_about));
  secondaryItemIds=new ArrayList<Integer>();
  secondaryItemIds.add(INDEX_SETTINGS,R.drawable.ic_settings);
  secondaryItemIds.add(INDEX_HELP,R.drawable.ic_help);
  secondaryItemIds.add(INDEX_ABOUT,R.drawable.ic_about);
  listAdapter=new NavigationDrawerListAdapter(this,mainItemList,mainItemRIds,secondaryItemList,secondaryItemIds);
  RelativeLayout navDrawerLayout=(RelativeLayout)findViewById(R.id.linear_layout_nav_drawer);
  final LinearLayout currentUserLinearLayout=(LinearLayout)navDrawerLayout.findViewById(R.id.linear_layout_current_user);
  currentUserLinearLayout.bringToFront();
  navDrawerLayout.requestLayout();
  navDrawerLayout.invalidate();
  currentUserPicture=(ImageView)currentUserLinearLayout.findViewById(R.id.user_image_view);
  currentUserName=(TextView)currentUserLinearLayout.findViewById(R.id.user_name_text_view);
  currentUserDescription=(TextView)currentUserLinearLayout.findViewById(R.id.user_type_text_view);
  userListDropDown=(ImageView)currentUserLinearLayout.findViewById(R.id.user_selected_tick_image_view);
  currentUserLinearLayout.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (isInUserList) {
        hideUserList();
      }
 else {
        showUserList();
      }
      isInUserList=!isInUserList;
    }
  }
);
  navDrawerListView=(ListView)navDrawerLayout.findViewById(R.id.drawer_list_view);
  usersList=(ListView)navDrawerLayout.findViewById(R.id.list_view_user_profiles);
  refreshUserList();
  usersList.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      mSelectedUserIndex=position;
      setCurrentUserView();
      if (position == mDeviceOwnerIndex) {
        onDeviceOwnerSelected();
      }
 else {
        onRestrictedProfileSelected();
      }
      currentUserLinearLayout.callOnClick();
    }
  }
);
switch (getResources().getConfiguration().orientation) {
case Configuration.ORIENTATION_UNDEFINED:
case Configuration.ORIENTATION_PORTRAIT:
    View footerView=new View(this);
  footerView.setLayoutParams(new AbsListView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,mPaddingBottom));
footerView.setBackgroundColor(Color.TRANSPARENT);
navDrawerListView.addFooterView(footerView,null,false);
break;
}
navDrawerLayout.setPadding(navDrawerLayout.getPaddingLeft(),navDrawerLayout.getPaddingTop() + mPaddingTop,navDrawerLayout.getPaddingRight(),navDrawerLayout.getPaddingBottom());
navDrawerListView.setAdapter(listAdapter);
navDrawerListView.setSelection(0);
navDrawerListView.setOnItemClickListener(new DrawerItemClickListener());
listAdapter.setSelectedMainItemIndex(0);
mTitle=mainItemList.get(0);
position=prevPosition=navDrawerListView.getSelectedItemPosition();
}","private void setUpNavDrawer(){
  mainItemList=new ArrayList<String>();
  mainItemList.add(INDEX_MANAGE_ENVIRONMENTS,getString(R.string.title_activity_manage_environment));
  mainItemList.add(INDEX_ENVIRONMENT_OVERLAP,getString(R.string.title_activity_environment_overlap));
  mainItemList.add(INDEX_MASTER_PASSWORD,getString(R.string.title_activity_set_master_password));
  mainItemRIds=new ArrayList<Integer>();
  mainItemRIds.add(INDEX_MANAGE_ENVIRONMENTS,R.drawable.ic_environment);
  mainItemRIds.add(INDEX_ENVIRONMENT_OVERLAP,R.drawable.ic_env_overlap);
  mainItemRIds.add(INDEX_MASTER_PASSWORD,R.drawable.ic_master_password);
  restrictedMainItemList=new ArrayList<String>();
  restrictedMainItemList.add(INDEX_ALLOWED_APPS,getString(R.string.title_activity_allowed_apps));
  restrictedMainItemList.add(INDEX_PASSWORD,getString(R.string.title_activity_set_passphrase));
  restrictedMainItemRIds=new ArrayList<Integer>();
  restrictedMainItemRIds.add(INDEX_ALLOWED_APPS,R.drawable.ic_apps);
  restrictedMainItemRIds.add(INDEX_PASSWORD,R.drawable.ic_master_password);
  secondaryItemList=new ArrayList<String>();
  secondaryItemList.add(INDEX_SETTINGS,getString(R.string.title_activity_general_settings));
  secondaryItemList.add(INDEX_HELP,getString(R.string.title_activity_help));
  secondaryItemList.add(INDEX_ABOUT,getString(R.string.title_activity_about));
  secondaryItemIds=new ArrayList<Integer>();
  secondaryItemIds.add(INDEX_SETTINGS,R.drawable.ic_settings);
  secondaryItemIds.add(INDEX_HELP,R.drawable.ic_help);
  secondaryItemIds.add(INDEX_ABOUT,R.drawable.ic_about);
  listAdapter=new NavigationDrawerListAdapter(this,mainItemList,mainItemRIds,secondaryItemList,secondaryItemIds);
  RelativeLayout navDrawerLayout=(RelativeLayout)findViewById(R.id.linear_layout_nav_drawer);
  final LinearLayout currentUserLinearLayout=(LinearLayout)navDrawerLayout.findViewById(R.id.linear_layout_current_user);
  currentUserLinearLayout.bringToFront();
  navDrawerLayout.requestLayout();
  navDrawerLayout.invalidate();
  currentUserPicture=(ImageView)currentUserLinearLayout.findViewById(R.id.user_image_view);
  currentUserName=(TextView)currentUserLinearLayout.findViewById(R.id.user_name_text_view);
  currentUserName.setTypeface(Typeface.DEFAULT_BOLD);
  currentUserDescription=(TextView)currentUserLinearLayout.findViewById(R.id.user_type_text_view);
  userListDropDown=(ImageView)currentUserLinearLayout.findViewById(R.id.user_selected_tick_image_view);
  currentUserLinearLayout.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (isInUserList) {
        hideUserList();
      }
 else {
        showUserList();
      }
      isInUserList=!isInUserList;
    }
  }
);
  navDrawerListView=(ListView)navDrawerLayout.findViewById(R.id.drawer_list_view);
  usersList=(ListView)navDrawerLayout.findViewById(R.id.list_view_user_profiles);
  refreshUserList();
  usersList.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      mSelectedUserIndex=position;
      setCurrentUserView();
      if (position == mDeviceOwnerIndex) {
        onDeviceOwnerSelected();
      }
 else {
        onRestrictedProfileSelected();
      }
      currentUserLinearLayout.callOnClick();
    }
  }
);
switch (getResources().getConfiguration().orientation) {
case Configuration.ORIENTATION_UNDEFINED:
case Configuration.ORIENTATION_PORTRAIT:
    View footerView=new View(this);
  footerView.setLayoutParams(new AbsListView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,mPaddingBottom));
footerView.setBackgroundColor(Color.TRANSPARENT);
navDrawerListView.addFooterView(footerView,null,false);
break;
}
navDrawerLayout.setPadding(navDrawerLayout.getPaddingLeft(),navDrawerLayout.getPaddingTop() + mPaddingTop,navDrawerLayout.getPaddingRight(),navDrawerLayout.getPaddingBottom());
navDrawerListView.setAdapter(listAdapter);
navDrawerListView.setSelection(0);
navDrawerListView.setOnItemClickListener(new DrawerItemClickListener());
listAdapter.setSelectedMainItemIndex(0);
mTitle=mainItemList.get(0);
position=prevPosition=navDrawerListView.getSelectedItemPosition();
}",0.9935729588193288
86948,"/** 
 * Constructor which takes in the required data to create list items
 * @param context Activity context
 * @param mainItems The names of main items. They are intended to replace the fragment of the settings activity
 * @param mainItemImageRIds Resource ids of icons for main list items. Should be in the same order as that of the names list.
 * @param secondaryItems Secondary item names.
 * @param secondaryItemImageRIds Resource ids of icons for secondary list items. Should be in the same order as that of the names list.
 */
public NavigationDrawerListAdapter(Context context,List<String> mainItems,List<Integer> mainItemImageRIds,List<String> secondaryItems,List<Integer> secondaryItemImageRIds){
  mContext=context;
  mMainItems=mainItems;
  mMainItemImageRIds=mainItemImageRIds;
  mSecondaryItems=secondaryItems;
  mSecondaryItemImageRIds=secondaryItemImageRIds;
  selectedItemTypeface=Typeface.DEFAULT_BOLD;
  unSelectedItemTypeface=Typeface.create(""String_Node_Str"",Typeface.NORMAL);
}","/** 
 * Constructor which takes in the required data to create list items
 * @param context Activity context
 * @param mainItems The names of main items. They are intended to replace the fragment of the settings activity
 * @param mainItemImageRIds Resource ids of icons for main list items. Should be in the same order as that of the names list.
 * @param secondaryItems Secondary item names.
 * @param secondaryItemImageRIds Resource ids of icons for secondary list items. Should be in the same order as that of the names list.
 */
public NavigationDrawerListAdapter(Context context,List<String> mainItems,List<Integer> mainItemImageRIds,List<String> secondaryItems,List<Integer> secondaryItemImageRIds){
  mContext=context;
  mMainItems=mainItems;
  mMainItemImageRIds=mainItemImageRIds;
  mSecondaryItems=secondaryItems;
  mSecondaryItemImageRIds=secondaryItemImageRIds;
  itemTypeface=Typeface.DEFAULT_BOLD;
  selectedItemBackgroundColor=context.getResources().getColor(R.color.text_view_touched);
}",0.9236145781328008
86949,"@Override public int getItemViewType(int position){
  if (position < mMainItems.size()) {
    return ITEM_TYPE_MAIN;
  }
 else   if (position == mMainItems.size()) {
    return ITEM_TYPE_SEPARATOR;
  }
 else   if (position < mMainItems.size() + mSecondaryItems.size() + 1) {
    return ITEM_TYPE_SECONDARY;
  }
  return -1;
}","@Override public int getItemViewType(int position){
  if (position < mMainItems.size()) {
    return ITEM_TYPE_MAIN;
  }
 else   if (position == mMainItems.size()) {
    return ITEM_TYPE_SEPARATOR;
  }
 else   if (position < mMainItems.size() + mSecondaryItems.size() + 1) {
    return ITEM_TYPE_SECONDARY;
  }
 else   if (position == mMainItems.size() + mSecondaryItems.size() + 1) {
    return ITEM_TYPE_SEPARATOR;
  }
  return -1;
}",0.8552631578947368
86950,"@Override public View getView(int position,View convertView,ViewGroup parent){
  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  int arrayIndex;
  ListItemViewHolder viewHolder;
switch (getItemViewType(position)) {
case ITEM_TYPE_SEPARATOR:
    if (convertView == null) {
      convertView=inflater.inflate(R.layout.shadow_separator,parent,false);
    }
  break;
case ITEM_TYPE_MAIN:
if (convertView == null) {
  convertView=inflater.inflate(R.layout.nav_drawer_list_item_main,null,false);
  viewHolder=new ListItemViewHolder();
  viewHolder.iconView=(ImageView)convertView.findViewById(R.id.list_item_icon);
  viewHolder.itemName=(TextView)convertView.findViewById(R.id.list_item_text_view);
  convertView.setTag(viewHolder);
}
 else {
  viewHolder=(ListItemViewHolder)convertView.getTag();
}
arrayIndex=position;
if (mMainItemImageRIds != null && arrayIndex < mMainItemImageRIds.size() && mMainItemImageRIds.get(arrayIndex) != null) {
viewHolder.iconView.setImageResource(mMainItemImageRIds.get(arrayIndex));
}
viewHolder.itemName.setText(mMainItems.get(arrayIndex));
if (arrayIndex == selectedMainItemIndex) {
viewHolder.itemName.setTypeface(selectedItemTypeface);
}
 else {
viewHolder.itemName.setTypeface(unSelectedItemTypeface);
}
break;
case ITEM_TYPE_SECONDARY:
if (convertView == null) {
convertView=inflater.inflate(R.layout.nav_drawer_list_item_secondary,parent,false);
viewHolder=new ListItemViewHolder();
viewHolder.iconView=(ImageView)convertView.findViewById(R.id.list_item_icon);
viewHolder.itemName=(TextView)convertView.findViewById(R.id.list_item_text_view);
convertView.setTag(viewHolder);
}
 else {
viewHolder=(ListItemViewHolder)convertView.getTag();
}
arrayIndex=position - mMainItems.size() - 1;
if (mSecondaryItemImageRIds != null && arrayIndex < mSecondaryItemImageRIds.size() && mSecondaryItemImageRIds.get(arrayIndex) != null) {
viewHolder.iconView.setImageResource(mSecondaryItemImageRIds.get(arrayIndex));
}
viewHolder.itemName=(TextView)convertView.findViewById(R.id.list_item_text_view);
viewHolder.itemName.setText(mSecondaryItems.get(arrayIndex));
break;
}
return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  int arrayIndex;
  ListItemViewHolder viewHolder;
switch (getItemViewType(position)) {
case ITEM_TYPE_SEPARATOR:
    if (convertView == null) {
      convertView=inflater.inflate(R.layout.shadow_separator,parent,false);
    }
  break;
case ITEM_TYPE_MAIN:
if (convertView == null) {
  convertView=inflater.inflate(R.layout.nav_drawer_list_item_main,null,false);
  viewHolder=new ListItemViewHolder();
  viewHolder.iconView=(ImageView)convertView.findViewById(R.id.list_item_icon);
  viewHolder.itemName=(TextView)convertView.findViewById(R.id.list_item_text_view);
  convertView.setTag(viewHolder);
}
 else {
  viewHolder=(ListItemViewHolder)convertView.getTag();
}
arrayIndex=position;
if (mMainItemImageRIds != null && arrayIndex < mMainItemImageRIds.size() && mMainItemImageRIds.get(arrayIndex) != null) {
viewHolder.iconView.setImageResource(mMainItemImageRIds.get(arrayIndex));
}
viewHolder.itemName.setTypeface(itemTypeface);
viewHolder.itemName.setText(mMainItems.get(arrayIndex));
if (arrayIndex == selectedMainItemIndex) {
convertView.setBackgroundColor(selectedItemBackgroundColor);
}
 else {
convertView.setBackgroundColor(Color.TRANSPARENT);
}
break;
case ITEM_TYPE_SECONDARY:
if (convertView == null) {
convertView=inflater.inflate(R.layout.nav_drawer_list_item_secondary,parent,false);
viewHolder=new ListItemViewHolder();
viewHolder.iconView=(ImageView)convertView.findViewById(R.id.list_item_icon);
viewHolder.itemName=(TextView)convertView.findViewById(R.id.list_item_text_view);
convertView.setTag(viewHolder);
}
 else {
viewHolder=(ListItemViewHolder)convertView.getTag();
}
arrayIndex=position - mMainItems.size() - 1;
if (mSecondaryItemImageRIds != null && arrayIndex < mSecondaryItemImageRIds.size() && mSecondaryItemImageRIds.get(arrayIndex) != null) {
viewHolder.iconView.setImageResource(mSecondaryItemImageRIds.get(arrayIndex));
}
viewHolder.itemName.setTypeface(itemTypeface);
viewHolder.itemName.setText(mSecondaryItems.get(arrayIndex));
break;
}
return convertView;
}",0.890625
86951,"@Override public int getCount(){
  return mMainItems.size() + mSecondaryItems.size() + 1;
}","@Override public int getCount(){
  return mMainItems.size() + mSecondaryItems.size() + 2;
}",0.989010989010989
86952,"@Override public View getView(int position,View convertView,ViewGroup parent){
  final LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  if (getItemViewType(position) == ITEM_VIEW_TYPE_USER) {
    final User user=(User)getItem(position);
    UserViewHolder viewHolder;
    if (convertView == null) {
      convertView=inflater.inflate(mResource,parent,false);
      viewHolder=new UserViewHolder();
      viewHolder.name=(TextView)convertView.findViewById(R.id.user_name_text_view);
      viewHolder.type=(TextView)convertView.findViewById(R.id.user_type_text_view);
      viewHolder.userImage=(ImageView)convertView.findViewById(R.id.user_image_view);
      viewHolder.deleteImage=(ImageView)convertView.findViewById(R.id.user_selected_tick_image_view);
      convertView.setTag(viewHolder);
    }
 else {
      viewHolder=(UserViewHolder)convertView.getTag();
    }
    viewHolder.name.setText(user.getUserName());
    if (position == mDeviceOwnerIndex) {
      viewHolder.type.setText(getContext().getString(R.string.user_type_device_owner));
      if (viewHolder.deleteImage != null) {
        viewHolder.deleteImage.setVisibility(View.GONE);
      }
    }
 else {
      viewHolder.type.setText(getContext().getString(R.string.user_type_restricted_profile));
      if (viewHolder.deleteImage != null) {
        viewHolder.deleteImage.setVisibility(View.VISIBLE);
        viewHolder.deleteImage.setOnTouchListener(new Picture.PictureTouchListener());
        viewHolder.deleteImage.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View v){
            user.deleteFromDatabase(getContext());
            if (mListener != null) {
              mListener.onUsersModified();
            }
          }
        }
);
      }
    }
    viewHolder.userImage.setImageDrawable(user.getUserPictureDrawable(getContext()));
  }
 else {
    if (convertView == null) {
      convertView=inflater.inflate(mNewUserResource,parent,false);
    }
    convertView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (mNewUserResource == R.layout.nav_drawer_new_profile) {
          AlertDialog.Builder builder=new AlertDialog.Builder(getContext());
          builder.setTitle(R.string.title_add_new_profile);
          View newProfileDialogView=inflater.inflate(R.layout.dialog_add_profile,null,false);
          final EditText profileNameEditText=(EditText)newProfileDialogView.findViewById(R.id.edit_text_new_profile_name);
          builder.setView(newProfileDialogView);
          builder.setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface dialog,            int which){
              if (profileNameEditText.getText().toString().isEmpty()) {
                return;
              }
              User newUser=new User(profileNameEditText.getText().toString());
              newUser.insertIntoDatabase(getContext());
              if (mListener != null) {
                mListener.onUsersModified();
              }
            }
          }
);
          builder.create().show();
        }
 else {
          Intent intent=new Intent(getContext().getApplicationContext(),SmartLockScreenSettings.class);
          intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
          mContext.startActivity(intent);
          if (mListener != null) {
            mListener.onSettingsClicked();
          }
        }
      }
    }
);
  }
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  final LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  if (getItemViewType(position) == ITEM_VIEW_TYPE_USER) {
    final User user=(User)getItem(position);
    UserViewHolder viewHolder;
    if (convertView == null) {
      convertView=inflater.inflate(mResource,parent,false);
      viewHolder=new UserViewHolder();
      viewHolder.name=(TextView)convertView.findViewById(R.id.user_name_text_view);
      viewHolder.type=(TextView)convertView.findViewById(R.id.user_type_text_view);
      viewHolder.userImage=(ImageView)convertView.findViewById(R.id.user_image_view);
      viewHolder.deleteImage=(ImageView)convertView.findViewById(R.id.user_selected_tick_image_view);
      convertView.setTag(viewHolder);
    }
 else {
      viewHolder=(UserViewHolder)convertView.getTag();
    }
    viewHolder.name.setTypeface(Typeface.DEFAULT_BOLD);
    viewHolder.name.setText(user.getUserName());
    if (position == mDeviceOwnerIndex) {
      viewHolder.type.setText(getContext().getString(R.string.user_type_device_owner));
      if (viewHolder.deleteImage != null) {
        viewHolder.deleteImage.setVisibility(View.GONE);
      }
    }
 else {
      viewHolder.type.setText(getContext().getString(R.string.user_type_restricted_profile));
      if (viewHolder.deleteImage != null) {
        viewHolder.deleteImage.setVisibility(View.VISIBLE);
        viewHolder.deleteImage.setOnTouchListener(new Picture.PictureTouchListener());
        viewHolder.deleteImage.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View v){
            user.deleteFromDatabase(getContext());
            if (mListener != null) {
              mListener.onUsersModified();
            }
          }
        }
);
      }
    }
    viewHolder.userImage.setImageDrawable(user.getUserPictureDrawable(getContext()));
  }
 else {
    if (convertView == null) {
      convertView=inflater.inflate(mNewUserResource,parent,false);
    }
    convertView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (mNewUserResource == R.layout.nav_drawer_new_profile) {
          AlertDialog.Builder builder=new AlertDialog.Builder(getContext());
          builder.setTitle(R.string.title_add_new_profile);
          View newProfileDialogView=inflater.inflate(R.layout.dialog_add_profile,null,false);
          final EditText profileNameEditText=(EditText)newProfileDialogView.findViewById(R.id.edit_text_new_profile_name);
          builder.setView(newProfileDialogView);
          builder.setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface dialog,            int which){
              if (profileNameEditText.getText().toString().isEmpty()) {
                return;
              }
              User newUser=new User(profileNameEditText.getText().toString());
              newUser.insertIntoDatabase(getContext());
              if (mListener != null) {
                mListener.onUsersModified();
              }
            }
          }
);
          builder.create().show();
        }
 else {
          Intent intent=new Intent(getContext().getApplicationContext(),SmartLockScreenSettings.class);
          intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
          mContext.startActivity(intent);
          if (mListener != null) {
            mListener.onSettingsClicked();
          }
        }
      }
    }
);
  }
  return convertView;
}",0.9922437673130194
86953,"@Override public boolean onTouch(View v,MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    downRawX=last1MoveX=event.getRawX();
  downRawY=last1MoveY=event.getRawY();
downTime=new Date().getTime();
directionKnown=false;
break;
case MotionEvent.ACTION_MOVE:
last2MoveX=last1MoveX;
last2MoveY=last1MoveY;
last1MoveX=event.getRawX();
last1MoveY=event.getRawY();
last2MoveTime=last1MoveTime;
last1MoveTime=new Date().getTime();
if (!directionKnown) {
if (downRawY - event.getRawY() > MIN_SWIPE_DIST) {
directionKnown=true;
direction=DIRECTION_UP;
}
 else if (downRawY - event.getRawY() < -MIN_SWIPE_DIST) {
directionKnown=true;
direction=DIRECTION_DOWN;
}
 else if (downRawX - event.getRawX() > MIN_SWIPE_DIST) {
directionKnown=true;
direction=DIRECTION_LEFT;
}
 else if (downRawX - event.getRawX() < -MIN_SWIPE_DIST) {
directionKnown=true;
direction=DIRECTION_RIGHT;
}
}
if (directionKnown) {
onMove(event,direction,downRawX,downRawY);
}
break;
case MotionEvent.ACTION_UP:
upRawX=event.getRawX();
upRawY=event.getRawY();
upTime=new Date().getTime();
if (last1MoveX != upRawX || last1MoveY != upRawY) {
distX=convertPxToDip((int)(upRawX - last1MoveX));
distY=convertPxToDip((int)(upRawY - last1MoveY));
velocityX=distX / ((upTime - last1MoveTime) / 1000.0f);
velocityY=distY / ((upTime - last1MoveTime) / 1000.0f);
}
 else {
distX=convertPxToDip((int)(upRawX - last2MoveX));
distY=convertPxToDip((int)(upRawY - last2MoveY));
velocityX=distX / ((upTime - last2MoveTime) / 1000.0f);
velocityY=distY / ((upTime - last2MoveTime) / 1000.0f);
}
if (velocityX == 0 && velocityY == 0) {
distX=convertPxToDip((int)(upRawX - downRawX));
distY=convertPxToDip((int)(upRawY - downRawY));
velocityX=distX / ((upTime - downTime) / 1000.0f);
velocityY=distY / ((upTime - downTime) / 1000.0f);
}
if (directionKnown) {
if (direction == DIRECTION_UP && velocityY < -MIN_THRESHOLD_VELOCITY) {
onBottomToTop(-velocityY / 500.0f);
}
 else if (direction == DIRECTION_DOWN && velocityY > MIN_THRESHOLD_VELOCITY) {
onTopToBottom(velocityY / 500.0f);
}
 else if (direction == DIRECTION_LEFT && velocityX < -MIN_THRESHOLD_VELOCITY) {
onRightToLeft(-velocityX / 500.0f);
}
 else if (direction == DIRECTION_RIGHT && velocityX > MIN_THRESHOLD_VELOCITY) {
onLeftToRight(velocityX / 500.0f);
}
 else {
onSwipeFail();
}
}
 else {
v.callOnClick();
}
break;
}
return true;
}","@Override public boolean onTouch(View v,MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    downRawX=last1MoveX=event.getRawX();
  downRawY=last1MoveY=event.getRawY();
downTime=new Date().getTime();
directionKnown=false;
break;
case MotionEvent.ACTION_MOVE:
last2MoveX=last1MoveX;
last2MoveY=last1MoveY;
last1MoveX=event.getRawX();
last1MoveY=event.getRawY();
last2MoveTime=last1MoveTime;
last1MoveTime=new Date().getTime();
if (!directionKnown) {
if (downRawY - event.getRawY() > MIN_SWIPE_DIST) {
directionKnown=true;
direction=DIRECTION_UP;
}
 else if (downRawY - event.getRawY() < -MIN_SWIPE_DIST) {
directionKnown=true;
direction=DIRECTION_DOWN;
}
 else if (downRawX - event.getRawX() > MIN_SWIPE_DIST) {
directionKnown=true;
direction=DIRECTION_LEFT;
}
 else if (downRawX - event.getRawX() < -MIN_SWIPE_DIST) {
directionKnown=true;
direction=DIRECTION_RIGHT;
}
}
if (directionKnown) {
onMove(event,direction,downRawX,downRawY);
}
break;
case MotionEvent.ACTION_UP:
upRawX=event.getRawX();
upRawY=event.getRawY();
upTime=new Date().getTime();
if (last1MoveX != upRawX || last1MoveY != upRawY) {
distX=convertPxToDip((int)(upRawX - last1MoveX));
distY=convertPxToDip((int)(upRawY - last1MoveY));
velocityX=distX / ((upTime - last1MoveTime) / 1000.0f);
velocityY=distY / ((upTime - last1MoveTime) / 1000.0f);
}
 else {
distX=convertPxToDip((int)(upRawX - last2MoveX));
distY=convertPxToDip((int)(upRawY - last2MoveY));
velocityX=distX / ((upTime - last2MoveTime) / 1000.0f);
velocityY=distY / ((upTime - last2MoveTime) / 1000.0f);
}
if (velocityX == 0 && velocityY == 0) {
distX=convertPxToDip((int)(upRawX - downRawX));
distY=convertPxToDip((int)(upRawY - downRawY));
velocityX=distX / ((upTime - downTime) / 1000.0f);
velocityY=distY / ((upTime - downTime) / 1000.0f);
}
if (directionKnown) {
if (direction == DIRECTION_UP && velocityY < -MIN_THRESHOLD_VELOCITY) {
onBottomToTop(-velocityY / 300.0f);
}
 else if (direction == DIRECTION_DOWN && velocityY > MIN_THRESHOLD_VELOCITY) {
onTopToBottom(velocityY / 300.0f);
}
 else if (direction == DIRECTION_LEFT && velocityX < -MIN_THRESHOLD_VELOCITY) {
onRightToLeft(-velocityX / 300.0f);
}
 else if (direction == DIRECTION_RIGHT && velocityX > MIN_THRESHOLD_VELOCITY) {
onLeftToRight(velocityX / 300.0f);
}
 else {
onSwipeFail();
}
}
 else {
v.callOnClick();
}
break;
}
return true;
}",0.9983100971694128
86954,"@Override public void onEnvironmentDetected(List<Environment> currentList){
  currentEnvironments=currentList;
  if (currentList == null || currentList.size() == 0) {
    if (SharedPreferencesHelper.isNotificationEnabled(this)) {
      startForeground(ONGOING_NOTIFICATION_ID,NotificationHelper.getAppNotification(this,""String_Node_Str""));
    }
 else {
      stopForeground(true);
    }
    Passphrase unknownPassphrase=User.getCurrentUser(this).getPassphraseForUnknownEnvironment(this);
    if (unknownPassphrase == null) {
      unknownPassphrase=Passphrase.getMasterPassword(this);
    }
    if (!unknownPassphrase.setAsCurrentPassword(this)) {
      AdminActions.initializeAdminObjects(this);
      if (!unknownPassphrase.setAsCurrentPassword(this)) {
        startService(BaseService.getServiceIntent(this,""String_Node_Str"",null));
      }
    }
  }
 else {
    Environment current=currentList.get(0);
    User user=User.getCurrentUser(this);
    if (user != null) {
      Passphrase passphrase=user.getPassphraseForEnvironment(this,current);
      if (passphrase == null) {
        passphrase=user.getPassphraseForUnknownEnvironment(this);
      }
      if (passphrase != null) {
        if (!passphrase.setAsCurrentPassword(this)) {
          AdminActions.initializeAdminObjects(this);
          if (!passphrase.setAsCurrentPassword(this)) {
            startService(BaseService.getServiceIntent(this,""String_Node_Str"",null));
          }
        }
      }
 else {
        Log.w(LOG_TAG,""String_Node_Str"");
      }
    }
 else {
      Log.e(LOG_TAG,""String_Node_Str"");
    }
    if (SharedPreferencesHelper.isNotificationEnabled(this)) {
      startForeground(ONGOING_NOTIFICATION_ID,NotificationHelper.getAppNotification(this,""String_Node_Str"" + current.getName()));
    }
 else {
      stopForeground(true);
    }
  }
  if (switchUser) {
    switchUser=false;
    ScreenReceiver.turnScreenOff(this);
    ScreenReceiver.turnScreenOn(this);
  }
}","@Override public void onEnvironmentDetected(List<Environment> currentList){
  currentEnvironments=currentList;
  if (currentList == null || currentList.size() == 0) {
    if (SharedPreferencesHelper.isNotificationEnabled(this)) {
      startForeground(ONGOING_NOTIFICATION_ID,NotificationHelper.getAppNotification(this,""String_Node_Str""));
    }
 else {
      stopForeground(true);
    }
    Passphrase unknownPassphrase=User.getCurrentUser(this).getPassphraseForUnknownEnvironment(this);
    if (unknownPassphrase == null) {
      unknownPassphrase=Passphrase.getMasterPassword(this);
    }
    if (!unknownPassphrase.setAsCurrentPassword(this)) {
      AdminActions.initializeAdminObjects(this);
      if (!unknownPassphrase.setAsCurrentPassword(this)) {
        startService(BaseService.getServiceIntent(this,""String_Node_Str"",null));
      }
    }
  }
 else {
    Environment current=currentList.get(0);
    User user=User.getCurrentUser(this);
    if (user != null) {
      Passphrase passphrase=user.getPassphraseForEnvironment(this,current);
      if (passphrase == null) {
        passphrase=user.getPassphraseForUnknownEnvironment(this);
      }
      if (passphrase != null) {
        if (!passphrase.setAsCurrentPassword(this)) {
          AdminActions.initializeAdminObjects(this);
          if (!passphrase.setAsCurrentPassword(this)) {
            startService(BaseService.getServiceIntent(this,""String_Node_Str"",null));
          }
        }
      }
 else {
        Log.w(LOG_TAG,""String_Node_Str"");
      }
    }
 else {
      Log.e(LOG_TAG,""String_Node_Str"");
    }
    if (SharedPreferencesHelper.isNotificationEnabled(this)) {
      startForeground(ONGOING_NOTIFICATION_ID,NotificationHelper.getAppNotification(this,""String_Node_Str"" + current.getName()));
    }
 else {
      stopForeground(true);
    }
  }
  if (switchUser) {
    switchUser=false;
    ScreenReceiver.turnScreenOff(this);
    ScreenReceiver.turnScreenOn(this);
  }
  if (mLockScreenOverlayHelper != null) {
    mLockScreenOverlayHelper.setUpEnvironmentOptions();
  }
}",0.974563591022444
86955,"@Override public void onNotificationPosted(StatusBarNotification sbn){
  LockScreenNotification lsn=new LockScreenNotification(sbn);
  for (int i=0; i < currentNotifications.size(); i++) {
    if (currentNotifications.get(i).getPackageName().equals(sbn.getPackageName()) && currentNotifications.get(i).getId() == sbn.getId()) {
      currentNotifications.remove(i);
      currentSBN.remove(i);
      break;
    }
  }
  currentNotifications.add(lsn);
  currentSBN.add(sbn);
  Intent intent=new Intent(this,BaseService.class);
  intent.setAction(BaseService.ACTION_NOTIFICATION_POSTED);
  startService(intent);
}","@Override public void onNotificationPosted(StatusBarNotification sbn){
  LockScreenNotification lsn=new LockScreenNotification(sbn);
  CardView currentCardView=null;
  for (int i=0; i < currentNotifications.size(); i++) {
    if (currentNotifications.get(i).getPackageName().equals(sbn.getPackageName()) && currentNotifications.get(i).getId() == sbn.getId()) {
      currentCardView=currentNotifications.get(i).getCardView();
      currentNotifications.remove(i);
      currentSBN.remove(i);
      break;
    }
  }
  if (currentCardView != null) {
    lsn.setCardView(currentCardView);
  }
  currentNotifications.add(lsn);
  currentSBN.add(sbn);
  Intent intent=new Intent(this,BaseService.class);
  intent.setAction(BaseService.ACTION_NOTIFICATION_POSTED);
  startService(intent);
}",0.8758076094759512
86956,"public void notificationPosted(){
  if (noOfNotificationShown() < MAX_NOTIFICATION_SHOWN) {
    Log.d(LOG_TAG,""String_Node_Str"" + noOfNotificationShown());
    for (int i=0; i < NotificationService.currentNotifications.size(); i++) {
      if (NotificationService.currentNotifications.get(i).isShown()) {
        continue;
      }
 else {
        Log.d(LOG_TAG,""String_Node_Str"");
        setNotificationCard(NotificationService.currentNotifications.get(i));
        break;
      }
    }
  }
 else {
    setMoreCard();
  }
}","public void notificationPosted(){
  if (noOfNotificationShown() < MAX_NOTIFICATION_SHOWN) {
    Log.d(LOG_TAG,""String_Node_Str"" + noOfNotificationShown());
    for (int i=0; i < NotificationService.currentNotifications.size(); i++) {
      if (NotificationService.currentNotifications.get(i).isShown()) {
        continue;
      }
 else {
        Log.d(LOG_TAG,""String_Node_Str"");
        setNotificationCard(NotificationService.currentNotifications.get(i));
        break;
      }
    }
  }
  setMoreCard();
}",0.986460348162476
86957,"@Override public void onWindowFocusChanged(boolean hasFocus){
  super.onWindowFocusChanged(hasFocus);
  startService(BaseService.getServiceIntent(this,null,BaseService.ACTION_DETECT_ENVIRONMENT));
  finish();
  overridePendingTransition(0,0);
}","@Override public void onWindowFocusChanged(boolean hasFocus){
  super.onWindowFocusChanged(hasFocus);
  EnvironmentDetector.manageEnvironmentDetectionCriticalSection.release();
  startService(BaseService.getServiceIntent(this,null,BaseService.ACTION_DETECT_ENVIRONMENT));
  finish();
  overridePendingTransition(0,0);
}",0.866785079928952
86958,"/** 
 * Adds the view specified by getLayout() to the windowManager passed during initialization
 */
public void execute(){
  layout=getLayout();
  layout.setLayerType(View.LAYER_TYPE_HARDWARE,null);
  if (params == null) {
    params=getLayoutParams();
  }
  try {
    windowManager.addView(layout,params);
    layout.invalidate();
  }
 catch (  IllegalStateException e) {
  }
}","/** 
 * Adds the view specified by getLayout() to the windowManager passed during initialization
 */
public void execute(){
  layout=getLayout();
  if (isAdded)   return;
  layout.setLayerType(View.LAYER_TYPE_HARDWARE,null);
  if (params == null) {
    params=getLayoutParams();
  }
  try {
    windowManager.addView(layout,params);
    isAdded=true;
    layout.invalidate();
  }
 catch (  IllegalStateException e) {
    isAdded=false;
  }
}",0.9243902439024392
86959,"/** 
 * Removes the view specified by getLayout() from the windowManager passed during initialization
 */
public void remove(){
  if (layout == null) {
    layout=getLayout();
  }
  try {
    windowManager.removeView(layout);
  }
 catch (  Exception e) {
  }
}","/** 
 * Removes the view specified by getLayout() from the windowManager passed during initialization
 */
public void remove(){
  if (!isAdded)   return;
  try {
    windowManager.removeView(layout);
    isAdded=false;
  }
 catch (  Exception e) {
  }
}",0.6666666666666666
86960,"@Override public int onStartCommand(Intent intent,int flags,int startId){
  if (intent != null) {
    String action=intent.getAction();
    if (action != null && !action.isEmpty()) {
      if (action.equals(ACTION_CLEAR_PREVIOUS_PACKAGE)) {
        previousPackageName=""String_Node_Str"";
      }
 else       if (action.equals(ACTION_START_SERVICE)) {
        startThread();
      }
 else       if (action.equals(ACTION_STOP_SERVICE)) {
        stopThread();
      }
 else       if (action.equals(ACTION_START_APP_LOCK_OVERLAY)) {
        mAppLockScreenOverlay.execute();
      }
 else       if (action.equals(ACTION_CLEAR_APP_LOCK_OVERLAY)) {
        mAppLockScreenOverlay.remove();
      }
    }
  }
  super.onStartCommand(intent,flags,startId);
  return START_STICKY;
}","@Override public int onStartCommand(Intent intent,int flags,int startId){
  if (intent != null) {
    String action=intent.getAction();
    if (action != null && !action.isEmpty()) {
      if (action.equals(ACTION_CLEAR_PREVIOUS_PACKAGE)) {
        previousPackageName=""String_Node_Str"";
        mAppLockScreenOverlay.remove();
      }
 else       if (action.equals(ACTION_START_SERVICE)) {
        startThread();
      }
 else       if (action.equals(ACTION_STOP_SERVICE)) {
        stopThread();
      }
 else       if (action.equals(ACTION_START_APP_LOCK_OVERLAY)) {
        mAppLockScreenOverlay.execute();
      }
 else       if (action.equals(ACTION_CLEAR_APP_LOCK_OVERLAY)) {
        mAppLockScreenOverlay.remove();
      }
    }
  }
  super.onStartCommand(intent,flags,startId);
  return START_STICKY;
}",0.9747155499367888
86961,"@Override public int onStartCommand(Intent intent,int flags,int startId){
  String action;
  if (intent != null) {
    Uri uri=intent.getData();
    if (uri != null) {
      startForeground(ONGOING_NOTIFICATION_ID,NotificationHelper.getAppNotification(this,uri.toString()));
    }
    action=intent.getAction();
    if (action != null && !action.isEmpty()) {
      if (action.equals(ACTION_DETECT_ENVIRONMENT)) {
        new EnvironmentDetector().detectCurrentEnvironment(this,this);
      }
 else       if (action.equals(ACTION_DETECT_ENVIRONMENT_SWITCH_USER)) {
        switchUser=true;
        new EnvironmentDetector().detectCurrentEnvironment(this,this);
      }
 else       if (action.equals(ACTION_ADD_GEOFENCES)) {
        requestAddGeofences();
      }
 else       if (action.equals(ACTION_REMOVE_GEOFENCES)) {
        try {
          mGeofencesToRemove=(List<String>)intent.getSerializableExtra(EXTRA_GEOFENCE_IDS_TO_REMOVE);
          if (mGeofencesToRemove == null || mGeofencesToRemove.isEmpty()) {
            throw new IllegalArgumentException();
          }
          requestRemoveGeofences();
        }
 catch (        Exception e) {
          e.printStackTrace();
          throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
        }
      }
 else       if (action.equals(ACTION_DETECT_WIFI)) {
        new DetermineConnectedWifiNetwork().execute();
      }
 else       if (action.equals(ACTION_DETECT_BLUETOOTH)) {
        new BluetoothDeviceSearch().execute();
      }
 else       if (action.equals(ACTION_START_LOCKSCREEN_OVERLAY)) {
        if (!intent.getBooleanExtra(PhoneStateReceiver.EXTRA_IS_IN_CALL,true)) {
          mIsInCall=false;
        }
        if (!mIsInCall) {
          mLockScreenOverlayHelper.execute();
        }
        WakeLockHelper.releaseWakeLock(ScreenReceiver.WAKE_LOCK_TAG);
      }
 else       if (action.equals(ACTION_DISMISS_LOCKSCREEN_OVERLAY)) {
        mLockScreenOverlayHelper.remove();
        if (intent.getBooleanExtra(PhoneStateReceiver.EXTRA_IS_IN_CALL,false)) {
          mIsInCall=true;
        }
      }
 else       if (action.equals(ACTION_START_PATTERN_OVERLAY)) {
        mPatternLockOverlay.execute();
      }
 else       if (action.equals(ACTION_UNLOCK)) {
        AdminActions.changePassword(""String_Node_Str"",Passphrase.TYPE_NONE,null);
        Intent dismissIntent=new Intent(this,DismissKeyguardActivity.class);
        dismissIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_NO_ANIMATION);
        this.getApplicationContext().startActivity(dismissIntent);
      }
 else       if (action.equals(ACTION_DISMISS_PATTERN_OVERLAY)) {
        mPatternLockOverlay.remove();
        mLockScreenOverlayHelper.remove();
        if (intent.getBooleanExtra(PhoneStateReceiver.EXTRA_IS_IN_CALL,false)) {
          mIsInCall=true;
        }
      }
 else       if (action.equals(ACTION_DISMISS_PATTERN_OVERLAY_ONLY)) {
        mPatternLockOverlay.remove();
        mLockScreenOverlayHelper.execute();
      }
 else       if (action.equals(ACTION_NOTIFICATION_CHANGED)) {
        mLockScreenOverlayHelper.initNotification();
      }
 else       if (action.equals(ACTION_NOTIFICATION_POSTED)) {
        mLockScreenOverlayHelper.notificationPosted();
      }
 else       if (action.equals(ACTION_NOTIFICATION_REMOVED)) {
        mLockScreenOverlayHelper.notificationRemoved();
      }
 else       if (action.equals(ACTION_REMOVE_PERSISTENT_NOTIFICATION)) {
        stopForeground(true);
      }
    }
  }
  super.onStartCommand(intent,flags,startId);
  return START_STICKY;
}","@Override public int onStartCommand(Intent intent,int flags,int startId){
  String action;
  if (intent != null) {
    Uri uri=intent.getData();
    if (uri != null) {
      startForeground(ONGOING_NOTIFICATION_ID,NotificationHelper.getAppNotification(this,uri.toString()));
    }
    action=intent.getAction();
    if (action != null && !action.isEmpty()) {
      if (action.equals(ACTION_DETECT_ENVIRONMENT)) {
        new EnvironmentDetector().detectCurrentEnvironment(this,this);
      }
 else       if (action.equals(ACTION_DETECT_ENVIRONMENT_SWITCH_USER)) {
        switchUser=true;
        new EnvironmentDetector().detectCurrentEnvironment(this,this);
      }
 else       if (action.equals(ACTION_ADD_GEOFENCES)) {
        requestAddGeofences();
      }
 else       if (action.equals(ACTION_REMOVE_GEOFENCES)) {
        try {
          mGeofencesToRemove=(List<String>)intent.getSerializableExtra(EXTRA_GEOFENCE_IDS_TO_REMOVE);
          if (mGeofencesToRemove == null || mGeofencesToRemove.isEmpty()) {
            throw new IllegalArgumentException();
          }
          requestRemoveGeofences();
        }
 catch (        Exception e) {
          e.printStackTrace();
          throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
        }
      }
 else       if (action.equals(ACTION_DETECT_WIFI)) {
        new DetermineConnectedWifiNetwork().execute();
      }
 else       if (action.equals(ACTION_DETECT_BLUETOOTH)) {
        new BluetoothDeviceSearch().execute();
      }
 else       if (action.equals(ACTION_START_LOCKSCREEN_OVERLAY)) {
        mLockScreenOverlayHelper.remove();
        mPatternLockOverlay.remove();
        if (!intent.getBooleanExtra(PhoneStateReceiver.EXTRA_IS_IN_CALL,true)) {
          mIsInCall=false;
        }
        if (!mIsInCall) {
          mLockScreenOverlayHelper.execute();
        }
        WakeLockHelper.releaseWakeLock(ScreenReceiver.WAKE_LOCK_TAG);
      }
 else       if (action.equals(ACTION_DISMISS_LOCKSCREEN_OVERLAY)) {
        mLockScreenOverlayHelper.remove();
        if (intent.getBooleanExtra(PhoneStateReceiver.EXTRA_IS_IN_CALL,false)) {
          mIsInCall=true;
        }
      }
 else       if (action.equals(ACTION_START_PATTERN_OVERLAY)) {
        mPatternLockOverlay.execute();
      }
 else       if (action.equals(ACTION_UNLOCK)) {
        EnvironmentDetector.manageEnvironmentDetectionCriticalSection.acquireUninterruptibly();
        AdminActions.changePassword(""String_Node_Str"",Passphrase.TYPE_NONE,null);
        Intent dismissIntent=new Intent(this,DismissKeyguardActivity.class);
        dismissIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_NO_ANIMATION);
        this.getApplicationContext().startActivity(dismissIntent);
      }
 else       if (action.equals(ACTION_DISMISS_PATTERN_OVERLAY)) {
        mPatternLockOverlay.remove();
        mLockScreenOverlayHelper.remove();
        if (intent.getBooleanExtra(PhoneStateReceiver.EXTRA_IS_IN_CALL,false)) {
          mIsInCall=true;
        }
      }
 else       if (action.equals(ACTION_DISMISS_PATTERN_OVERLAY_ONLY)) {
        mPatternLockOverlay.remove();
        mLockScreenOverlayHelper.execute();
      }
 else       if (action.equals(ACTION_NOTIFICATION_CHANGED)) {
        mLockScreenOverlayHelper.initNotification();
      }
 else       if (action.equals(ACTION_NOTIFICATION_POSTED)) {
        mLockScreenOverlayHelper.notificationPosted();
      }
 else       if (action.equals(ACTION_NOTIFICATION_REMOVED)) {
        mLockScreenOverlayHelper.notificationRemoved();
      }
 else       if (action.equals(ACTION_REMOVE_PERSISTENT_NOTIFICATION)) {
        stopForeground(true);
      }
    }
  }
  super.onStartCommand(intent,flags,startId);
  return START_STICKY;
}",0.9758691206543968
86962,"@Override public void onReceive(Context context,Intent intent){
  String mAction=intent.getAction();
  BluetoothDevice device;
  if (mAction.equals(BluetoothDevice.ACTION_ACL_CONNECTED)) {
    device=intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
    addBluetoothDeviceToConnectedDevices(BluetoothEnvironmentVariable.getBluetoothEnvironmentVariableFromDatabase(context,device.getName(),device.getAddress()));
  }
 else   if (mAction.equals(BluetoothDevice.ACTION_ACL_DISCONNECTED)) {
    device=intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
    removeBluetoothDeviceFromConnectedDevices(BluetoothEnvironmentVariable.getBluetoothEnvironmentVariableFromDatabase(context,device.getName(),device.getAddress()));
  }
 else   return;
  Toast.makeText(context,device.getName() + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
  context.startService(BaseService.getServiceIntent(context,null,BaseService.ACTION_DETECT_ENVIRONMENT));
}","@Override public void onReceive(Context context,Intent intent){
  String mAction=intent.getAction();
  BluetoothDevice device;
  if (mAction.equals(BluetoothDevice.ACTION_ACL_CONNECTED)) {
    device=intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
    addBluetoothDeviceToConnectedDevices(new BluetoothEnvironmentVariable(device.getName(),device.getAddress()));
  }
 else   if (mAction.equals(BluetoothDevice.ACTION_ACL_DISCONNECTED)) {
    device=intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
    removeBluetoothDeviceFromConnectedDevices(new BluetoothEnvironmentVariable(device.getName(),device.getAddress()));
  }
 else   return;
  Toast.makeText(context,device.getName() + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
  context.startService(BaseService.getServiceIntent(context,null,BaseService.ACTION_DETECT_ENVIRONMENT));
}",0.935412026726058
86963,"@Override public View getView(final int position,View convertView,ViewGroup parent){
  final LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View rootView=inflater.inflate(R.layout.list_view_notifications,parent,false);
  final LockScreenNotification lsn=NotificationService.currentNotifications.get(position);
  final Notification mNotification=lsn.getNotification();
  final Bundle extras=mNotification.extras;
  final CardView cardView=(CardView)rootView.findViewById(R.id.card_view_notification);
  Card card=new Card(getContext());
  CardHeader cardHeader=new NotificationCardHeader(getContext(),new NotificationCardHeader.InnerViewElementsSetUpListener(){
    @Override public void onInnerViewElementsSetUp(    NotificationCardHeader header){
      header.setTitle(extras.getString(KEY_NOTIFICATION_TITLE));
      header.setText(extras.getString(KEY_NOTIFICATION_TEXT));
      try {
        int icon=mNotification.icon;
        Bitmap img=(Bitmap)mNotification.extras.get(Notification.EXTRA_LARGE_ICON);
        if (img == null) {
          Drawable app_icon=getContext().getPackageManager().getApplicationIcon(lsn.getPackageName());
          img=((BitmapDrawable)app_icon).getBitmap();
        }
        header.setImageBitmap(Picture.getCroppedBitmap(img,0));
      }
 catch (      Exception e) {
        Log.e(LOG_TAG,e.toString());
      }
    }
  }
);
  card.addCardHeader(cardHeader);
  if (position == clickedCard) {
    card.setBackgroundResource(new ColorDrawable(0xFFFFFFFF));
  }
 else {
    card.setBackgroundResource(new ColorDrawable(0xCCFFFFFF));
  }
  card.setOnClickListener(new Card.OnCardClickListener(){
    @Override public void onClick(    Card card,    View view){
      Log.d(LOG_TAG,""String_Node_Str"");
      if (clickedCard == position) {
        try {
          mNotification.contentIntent.send();
        }
 catch (        Exception e) {
          Log.e(LOG_TAG,e.toString());
        }
      }
 else {
        clickedCard=position;
        CountDownTimer cdt=new CountDownTimer((long)2000,(long)2000){
          @Override public void onTick(          long millisUntilFinished){
          }
          @Override public void onFinish(){
            clickedCard=-1;
            notifyDataSetChanged();
          }
        }
.start();
        notifyDataSetChanged();
      }
    }
  }
);
  card.setSwipeable(lsn.isClearable());
  if (lsn.isClearable()) {
    card.setOnSwipeListener(new Card.OnSwipeListener(){
      @Override public void onSwipe(      Card card){
        lsn.dismiss(getContext());
      }
    }
);
  }
  cardView.setCard(card);
  return rootView;
}","@Override public View getView(final int position,View convertView,ViewGroup parent){
  final LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View rootView=inflater.inflate(R.layout.list_view_notifications,parent,false);
  final LockScreenNotification lsn=NotificationService.currentNotifications.get(position);
  final Notification mNotification=lsn.getNotification();
  final Bundle extras=mNotification.extras;
  final CardView cardView=(CardView)rootView.findViewById(R.id.card_view_notification);
  Card card=new Card(getContext());
  CardHeader cardHeader=new NotificationCardHeader(getContext(),new NotificationCardHeader.InnerViewElementsSetUpListener(){
    @Override public void onInnerViewElementsSetUp(    NotificationCardHeader header){
      header.setTitle(extras.getString(KEY_NOTIFICATION_TITLE));
      header.setText(extras.getString(KEY_NOTIFICATION_TEXT));
      try {
        int icon=mNotification.icon;
        Bitmap img=(Bitmap)mNotification.extras.get(Notification.EXTRA_LARGE_ICON);
        if (img == null) {
          Drawable app_icon=getContext().getPackageManager().getApplicationIcon(lsn.getPackageName());
          img=((BitmapDrawable)app_icon).getBitmap();
        }
        header.setImageBitmap(Picture.getCroppedBitmap(img,0));
      }
 catch (      Exception e) {
        Log.e(LOG_TAG,e.toString());
      }
    }
  }
);
  card.addCardHeader(cardHeader);
  if (position == clickedCard) {
    card.setBackgroundResource(new ColorDrawable(0xFFFFFFFF));
  }
 else {
    card.setBackgroundResource(new ColorDrawable(0xCCFFFFFF));
  }
  card.setOnClickListener(new Card.OnCardClickListener(){
    @Override public void onClick(    Card card,    View view){
      Log.d(LOG_TAG,""String_Node_Str"");
      if (clickedCard == position) {
        try {
          mNotification.contentIntent.send();
        }
 catch (        Exception e) {
          Log.e(LOG_TAG,e.toString());
        }
      }
 else {
        clickedCard=position;
        CountDownTimer cdt=new CountDownTimer((long)2000,(long)2000){
          @Override public void onTick(          long millisUntilFinished){
          }
          @Override public void onFinish(){
            clickedCard=-1;
            notifyDataSetChanged();
          }
        }
.start();
        notifyDataSetChanged();
      }
    }
  }
);
  card.setSwipeable(!lsn.isOngoing());
  if (!lsn.isOngoing()) {
    card.setOnSwipeListener(new Card.OnSwipeListener(){
      @Override public void onSwipe(      Card card){
        lsn.dismiss(getContext());
      }
    }
);
  }
  cardView.setCard(card);
  return rootView;
}",0.9849284099472494
86964,"public LockScreenNotification(StatusBarNotification sbn){
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
    this.notification_id=sbn.getId();
    this.mNotification=sbn.getNotification();
    this.packageName=sbn.getPackageName();
    this.isClearable=sbn.isClearable();
    this.tag=sbn.getTag();
    this.isShown=false;
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
      this.key=sbn.getKey();
    }
  }
}","public LockScreenNotification(StatusBarNotification sbn){
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
    this.notification_id=sbn.getId();
    this.mNotification=sbn.getNotification();
    this.packageName=sbn.getPackageName();
    this.isOngoing=sbn.isOngoing();
    this.tag=sbn.getTag();
    this.isShown=false;
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
      this.key=sbn.getKey();
    }
  }
}",0.9486607142857144
86965,"private void setNotificationCard(LockScreenNotification lockScreenNotification){
  if (notificationCardsLayout == null) {
    return;
  }
  final LockScreenNotification lsn=lockScreenNotification;
  final CardView cardView=(CardView)inflater.inflate(R.layout.list_item_notification,notificationCardsLayout,false);
  TextView titleTextView=(TextView)cardView.findViewById(R.id.notification_card_title);
  TextView subTextTextView=(TextView)cardView.findViewById(R.id.notification_card_subtext);
  ImageView notificationImageView=(ImageView)cardView.findViewById(R.id.image_view_notification);
  final boolean isClearable=lsn.isClearable();
  final Notification mNotification=lsn.getNotification();
  final Bundle extras=mNotification.extras;
  titleTextView.setText(extras.getString(KEY_NOTIFICATION_TITLE));
  CharSequence charSequence=(CharSequence)extras.getCharSequence(KEY_NOTIFICATION_TEXT);
  if (charSequence != null) {
    subTextTextView.setText(charSequence.toString());
  }
  try {
    int icon=mNotification.icon;
    Bitmap img=(Bitmap)mNotification.extras.get(Notification.EXTRA_LARGE_ICON);
    if (img == null) {
      Drawable app_icon=context.getPackageManager().getApplicationIcon(lsn.getPackageName());
      img=((BitmapDrawable)app_icon).getBitmap();
    }
    notificationImageView.setImageBitmap(Picture.getCroppedBitmap(img,Color.DKGRAY));
  }
 catch (  Exception e) {
    Log.e(LOG_TAG,e.toString());
  }
  cardView.setMaxCardElevation(CARD_NORMAL_ELEVATION);
  cardView.setCardElevation(CARD_NORMAL_ELEVATION);
  cardView.getBackground().setAlpha(CARD_VIEW_NORMAL_ALPHA);
  cardView.setOnClickListener(new View.OnClickListener(){
    boolean isClicked=false;
    @Override public void onClick(    View v){
      if (isClicked) {
        try {
          mNotification.contentIntent.send();
          lockScreenDismiss(DEFAULT_START_ANIMATION_VELOCITY);
        }
 catch (        Exception e) {
          Log.e(LOG_TAG,e.toString());
        }
        cardView.setMaxCardElevation(CARD_NORMAL_ELEVATION);
        cardView.setCardElevation(CARD_NORMAL_ELEVATION);
        cardView.getBackground().setAlpha(CARD_VIEW_NORMAL_ALPHA);
      }
 else {
        isClicked=true;
        cardView.setMaxCardElevation(CARD_TOUCHED_ELEVATION);
        cardView.setCardElevation(CARD_TOUCHED_ELEVATION);
        cardView.getBackground().setAlpha(CARD_VIEW_SELECTED_ALPHA);
        CountDownTimer cdt=new CountDownTimer((long)2000,(long)2000){
          @Override public void onTick(          long millisUntilFinished){
          }
          @Override public void onFinish(){
            isClicked=false;
            cardView.setMaxCardElevation(CARD_NORMAL_ELEVATION);
            cardView.setCardElevation(CARD_NORMAL_ELEVATION);
            cardView.getBackground().setAlpha(CARD_VIEW_NORMAL_ALPHA);
          }
        }
.start();
      }
    }
  }
);
  cardView.setOnTouchListener(new CustomFlingListener(context){
    @Override public void onRightToLeft(    float endVelocity){
      Log.d(LOG_TAG,""String_Node_Str"");
      if (isClearable) {
        cardView.animate().translationX(-cardView.getWidth()).setInterpolator(new DecelerateInterpolator(endVelocity / 2)).alpha(0f);
        lsn.dismiss(context);
        notificationCardsLayout.removeView(cardView);
      }
 else {
        cardView.animate().translationX(0).setInterpolator(new DecelerateInterpolator(endVelocity / 2)).alpha(1f);
      }
    }
    @Override public void onLeftToRight(    float endVelocity){
      Log.d(LOG_TAG,""String_Node_Str"");
      if (isClearable) {
        cardView.animate().translationX(cardView.getWidth()).setInterpolator(new DecelerateInterpolator(endVelocity / 2)).alpha(0f);
        lsn.dismiss(context);
        notificationCardsLayout.removeView(cardView);
      }
 else {
        cardView.animate().translationX(0).setInterpolator(new DecelerateInterpolator(endVelocity / 2)).alpha(1f);
      }
    }
    @Override public void onTopToBottom(    float endVelocity){
      lockScreenDismiss(CustomFlingListener.DIRECTION_DOWN,endVelocity);
      NotificationAreaHelper.expand(context);
    }
    @Override public void onBottomToTop(    float endVelocity){
      lockScreenDismiss(CustomFlingListener.DIRECTION_UP,endVelocity);
    }
    @Override public void onMove(    MotionEvent event,    int direction,    float downRawX,    float downRawY){
      if (direction == CustomFlingListener.DIRECTION_LEFT || direction == CustomFlingListener.DIRECTION_RIGHT) {
        Log.d(LOG_TAG,""String_Node_Str"" + downRawX + ""String_Node_Str""+ event.getRawX());
        cardView.setTranslationX(event.getRawX() - downRawX);
      }
 else       if (direction == CustomFlingListener.DIRECTION_UP || direction == CustomFlingListener.DIRECTION_DOWN) {
        float deltaY=event.getRawY() - downRawY;
        layout.setTranslationY(deltaY);
      }
    }
    @Override public void onDirectionUnknown(){
      cardView.callOnClick();
    }
    @Override public void onSwipeFail(){
      cardView.animate().translationX(0).start();
      layout.animate().translationY(0).start();
    }
  }
);
  lsn.setCardView(cardView);
  lsn.setShown(true);
  notificationCardsLayout.addView(cardView);
}","private void setNotificationCard(LockScreenNotification lockScreenNotification){
  if (notificationCardsLayout == null) {
    return;
  }
  final LockScreenNotification lsn=lockScreenNotification;
  final CardView cardView=(CardView)inflater.inflate(R.layout.list_item_notification,notificationCardsLayout,false);
  TextView titleTextView=(TextView)cardView.findViewById(R.id.notification_card_title);
  TextView subTextTextView=(TextView)cardView.findViewById(R.id.notification_card_subtext);
  ImageView notificationImageView=(ImageView)cardView.findViewById(R.id.image_view_notification);
  final boolean isOngoing=lsn.isOngoing();
  final Notification mNotification=lsn.getNotification();
  final Bundle extras=mNotification.extras;
  titleTextView.setText(extras.getString(KEY_NOTIFICATION_TITLE));
  CharSequence charSequence=(CharSequence)extras.getCharSequence(KEY_NOTIFICATION_TEXT);
  if (charSequence != null) {
    subTextTextView.setText(charSequence.toString());
  }
  try {
    int icon=mNotification.icon;
    Bitmap img=(Bitmap)mNotification.extras.get(Notification.EXTRA_LARGE_ICON);
    if (img == null) {
      Drawable app_icon=context.getPackageManager().getApplicationIcon(lsn.getPackageName());
      img=((BitmapDrawable)app_icon).getBitmap();
    }
    notificationImageView.setImageBitmap(Picture.getCroppedBitmap(img,Color.DKGRAY));
  }
 catch (  Exception e) {
    Log.e(LOG_TAG,e.toString());
  }
  cardView.setMaxCardElevation(CARD_NORMAL_ELEVATION);
  cardView.setCardElevation(CARD_NORMAL_ELEVATION);
  cardView.getBackground().setAlpha(CARD_VIEW_NORMAL_ALPHA);
  cardView.setOnClickListener(new View.OnClickListener(){
    boolean isClicked=false;
    @Override public void onClick(    View v){
      if (isClicked) {
        try {
          mNotification.contentIntent.send();
          lockScreenDismiss(DEFAULT_START_ANIMATION_VELOCITY);
        }
 catch (        Exception e) {
          Log.e(LOG_TAG,e.toString());
        }
        cardView.setMaxCardElevation(CARD_NORMAL_ELEVATION);
        cardView.setCardElevation(CARD_NORMAL_ELEVATION);
        cardView.getBackground().setAlpha(CARD_VIEW_NORMAL_ALPHA);
      }
 else {
        isClicked=true;
        cardView.setMaxCardElevation(CARD_TOUCHED_ELEVATION);
        cardView.setCardElevation(CARD_TOUCHED_ELEVATION);
        cardView.getBackground().setAlpha(CARD_VIEW_SELECTED_ALPHA);
        CountDownTimer cdt=new CountDownTimer((long)2000,(long)2000){
          @Override public void onTick(          long millisUntilFinished){
          }
          @Override public void onFinish(){
            isClicked=false;
            cardView.setMaxCardElevation(CARD_NORMAL_ELEVATION);
            cardView.setCardElevation(CARD_NORMAL_ELEVATION);
            cardView.getBackground().setAlpha(CARD_VIEW_NORMAL_ALPHA);
          }
        }
.start();
      }
    }
  }
);
  cardView.setOnTouchListener(new CustomFlingListener(context){
    @Override public void onRightToLeft(    float endVelocity){
      Log.d(LOG_TAG,""String_Node_Str"");
      if (!isOngoing) {
        cardView.animate().translationX(-cardView.getWidth()).setInterpolator(new DecelerateInterpolator(endVelocity / 2)).alpha(0f);
        lsn.dismiss(context);
        notificationCardsLayout.removeView(cardView);
      }
 else {
        cardView.animate().translationX(0).setInterpolator(new DecelerateInterpolator(endVelocity / 2)).alpha(1f);
      }
    }
    @Override public void onLeftToRight(    float endVelocity){
      Log.d(LOG_TAG,""String_Node_Str"");
      if (!isOngoing) {
        cardView.animate().translationX(cardView.getWidth()).setInterpolator(new DecelerateInterpolator(endVelocity / 2)).alpha(0f);
        lsn.dismiss(context);
        notificationCardsLayout.removeView(cardView);
      }
 else {
        cardView.animate().translationX(0).setInterpolator(new DecelerateInterpolator(endVelocity / 2)).alpha(1f);
      }
    }
    @Override public void onTopToBottom(    float endVelocity){
      lockScreenDismiss(CustomFlingListener.DIRECTION_DOWN,endVelocity);
      NotificationAreaHelper.expand(context);
    }
    @Override public void onBottomToTop(    float endVelocity){
      lockScreenDismiss(CustomFlingListener.DIRECTION_UP,endVelocity);
    }
    @Override public void onMove(    MotionEvent event,    int direction,    float downRawX,    float downRawY){
      if (direction == CustomFlingListener.DIRECTION_LEFT || direction == CustomFlingListener.DIRECTION_RIGHT) {
        Log.d(LOG_TAG,""String_Node_Str"" + downRawX + ""String_Node_Str""+ event.getRawX());
        cardView.setTranslationX(event.getRawX() - downRawX);
      }
 else       if (direction == CustomFlingListener.DIRECTION_UP || direction == CustomFlingListener.DIRECTION_DOWN) {
        float deltaY=event.getRawY() - downRawY;
        layout.setTranslationY(deltaY);
      }
    }
    @Override public void onDirectionUnknown(){
      cardView.callOnClick();
    }
    @Override public void onSwipeFail(){
      cardView.animate().translationX(0).start();
      layout.animate().translationY(0).start();
    }
  }
);
  lsn.setCardView(cardView);
  lsn.setShown(true);
  notificationCardsLayout.addView(cardView);
}",0.9928557636609384
86966,"public void notificationRemoved(){
  if (notificationCardsLayout == null) {
    return;
  }
  for (int i=0; i < NotificationService.removedNotifications.size(); i++) {
    LockScreenNotification lsn=NotificationService.removedNotifications.get(i);
    notificationCardsLayout.removeView(lsn.getCardView());
  }
  setMoreCard();
}","public void notificationRemoved(){
  if (notificationCardsLayout == null) {
    return;
  }
  for (int i=0; i < NotificationService.removedNotifications.size(); i++) {
    LockScreenNotification lsn=NotificationService.removedNotifications.get(i);
    notificationCardsLayout.removeView(lsn.getCardView());
  }
  while (noOfNotificationShown() < ((MAX_NOTIFICATION_SHOWN < NotificationService.currentNotifications.size()) ? MAX_NOTIFICATION_SHOWN : NotificationService.currentNotifications.size())) {
    for (int i=0; i < NotificationService.currentNotifications.size(); i++) {
      if (NotificationService.currentNotifications.get(i).isShown()) {
        continue;
      }
 else {
        Log.d(LOG_TAG,""String_Node_Str"");
        setNotificationCard(NotificationService.currentNotifications.get(i));
        break;
      }
    }
  }
  setMoreCard();
}",0.5337837837837838
86967,"private void setMoreCard(){
  if (notificationCardsLayout == null) {
    return;
  }
  if (NotificationService.currentNotifications.size() <= MAX_NOTIFICATION_SHOWN) {
    if (moreCard != null) {
      try {
        notificationCardsLayout.removeView(moreCard);
        moreCard=null;
      }
 catch (      Exception e) {
        Log.e(LOG_TAG,e.toString());
      }
    }
    return;
  }
  moreCard=null;
  final CardView cardView;
  moreCard=(CardView)inflater.inflate(R.layout.card_extra_notifications,notificationCardsLayout,false);
  cardView=moreCard;
  TextView cardExtraTextView=(TextView)cardView.findViewById(R.id.text_view_extra_notifications);
  String title=EXTRA_NOTIFICATION_SUBSTRING_PREFIX + (NotificationService.currentNotifications.size() - MAX_NOTIFICATION_SHOWN) + EXTRA_NOTIFICATION_SUBSTRING_SUFFIX;
  cardExtraTextView.setText(title);
  cardView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      lockScreenDismiss(CustomFlingListener.DIRECTION_DOWN,DEFAULT_START_ANIMATION_VELOCITY_DOWN);
      NotificationAreaHelper.expand(context);
    }
  }
);
  cardView.setOnTouchListener(new CustomFlingListener(context){
    @Override public void onRightToLeft(    float endVelocity){
      ExternalIntents.launchCamera(context);
      lockScreenDismiss(CustomFlingListener.DIRECTION_LEFT,endVelocity);
    }
    @Override public void onLeftToRight(    float endVelocity){
      ExternalIntents.launchDialer(context);
      lockScreenDismiss(CustomFlingListener.DIRECTION_RIGHT,endVelocity);
    }
    @Override public void onTopToBottom(    float endVelocity){
      lockScreenDismiss(CustomFlingListener.DIRECTION_DOWN,endVelocity);
      NotificationAreaHelper.expand(context);
    }
    @Override public void onBottomToTop(    float endVelocity){
      lockScreenDismiss(CustomFlingListener.DIRECTION_UP,endVelocity);
    }
    @Override public void onMove(    MotionEvent event,    int direction,    float downRawX,    float downRawY){
      if (direction == CustomFlingListener.DIRECTION_UP || direction == CustomFlingListener.DIRECTION_DOWN) {
        float deltaY=event.getRawY() - downRawY;
        layout.setTranslationY(deltaY);
      }
 else {
        float deltaX=event.getRawX() - downRawX;
        layout.setTranslationX(deltaX);
      }
    }
    @Override public void onSwipeFail(){
      layout.animate().translationY(0).start();
      layout.animate().translationX(0).start();
    }
    @Override public void onDirectionUnknown(){
      cardView.callOnClick();
    }
  }
);
  cardView.getBackground().setAlpha(60);
  notificationCardsLayout.addView(cardView);
}","private void setMoreCard(){
  if (notificationCardsLayout == null) {
    return;
  }
  if (moreCard != null) {
    try {
      notificationCardsLayout.removeView(moreCard);
      moreCard=null;
    }
 catch (    Exception e) {
      Log.e(LOG_TAG,e.toString());
    }
  }
  if (NotificationService.currentNotifications.size() <= MAX_NOTIFICATION_SHOWN) {
    return;
  }
  moreCard=null;
  final CardView cardView;
  moreCard=(CardView)inflater.inflate(R.layout.card_extra_notifications,notificationCardsLayout,false);
  cardView=moreCard;
  TextView cardExtraTextView=(TextView)cardView.findViewById(R.id.text_view_extra_notifications);
  String title=EXTRA_NOTIFICATION_SUBSTRING_PREFIX + (NotificationService.currentNotifications.size() - MAX_NOTIFICATION_SHOWN) + EXTRA_NOTIFICATION_SUBSTRING_SUFFIX;
  cardExtraTextView.setText(title);
  cardView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      lockScreenDismiss(CustomFlingListener.DIRECTION_DOWN,DEFAULT_START_ANIMATION_VELOCITY_DOWN);
      NotificationAreaHelper.expand(context);
    }
  }
);
  cardView.setOnTouchListener(new CustomFlingListener(context){
    @Override public void onRightToLeft(    float endVelocity){
      ExternalIntents.launchCamera(context);
      lockScreenDismiss(CustomFlingListener.DIRECTION_LEFT,endVelocity);
    }
    @Override public void onLeftToRight(    float endVelocity){
      ExternalIntents.launchDialer(context);
      lockScreenDismiss(CustomFlingListener.DIRECTION_RIGHT,endVelocity);
    }
    @Override public void onTopToBottom(    float endVelocity){
      lockScreenDismiss(CustomFlingListener.DIRECTION_DOWN,endVelocity);
      NotificationAreaHelper.expand(context);
    }
    @Override public void onBottomToTop(    float endVelocity){
      lockScreenDismiss(CustomFlingListener.DIRECTION_UP,endVelocity);
    }
    @Override public void onMove(    MotionEvent event,    int direction,    float downRawX,    float downRawY){
      if (direction == CustomFlingListener.DIRECTION_UP || direction == CustomFlingListener.DIRECTION_DOWN) {
        float deltaY=event.getRawY() - downRawY;
        layout.setTranslationY(deltaY);
      }
 else {
        float deltaX=event.getRawX() - downRawX;
        layout.setTranslationX(deltaX);
      }
    }
    @Override public void onSwipeFail(){
      layout.animate().translationY(0).start();
      layout.animate().translationX(0).start();
    }
    @Override public void onDirectionUnknown(){
      cardView.callOnClick();
    }
  }
);
  cardView.getBackground().setAlpha(60);
  notificationCardsLayout.addView(cardView);
}",0.9256449165402124
86968,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_smart_lock_screen_settings);
  if (savedInstanceState == null) {
    getFragmentManager().beginTransaction().add(R.id.container,new ManageEnvironmentFragment()).commit();
  }
  OneTimeInitializer.initialize(this,MASTER_PASSWORD_REQUEST);
  startService(BaseService.getServiceIntent(this,null,null));
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2 && !NotificationService.isInstanceCreated()) {
    Intent intent=new Intent(this,NotificationService.class);
    startService(intent);
  }
  setUpActionBar();
  setUpNavDrawer();
  drawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout_main_settings);
  actionBarDrawerToggle=new ActionBarDrawerToggle(this,drawerLayout,0,0){
    /** 
 * Called when a drawer has settled in a completely closed state. 
 */
    public void onDrawerClosed(    View view){
      super.onDrawerClosed(view);
      if (position == prevPosition) {
        if (mTitle != null) {
          setTitle(mTitle);
        }
        return;
      }
switch (listAdapter.getItemViewType(position)) {
case NavigationDrawerListAdapter.ITEM_TYPE_PROFILE:
        listAdapter.setSelectedProfileIndex(listAdapter.getItemArrayIndex(position));
      break;
case NavigationDrawerListAdapter.ITEM_TYPE_NEW_PROFILE:
    break;
case NavigationDrawerListAdapter.ITEM_TYPE_MAIN:
  FragmentManager fragmentManager=getFragmentManager();
FragmentTransaction ft;
boolean isValid=true;
int itemArrayIndex=listAdapter.getItemArrayIndex(position);
switch (itemArrayIndex) {
case INDEX_MANAGE_ENVIRONMENTS:
ft=fragmentManager.beginTransaction();
ft.setCustomAnimations(R.animator.fade_in,R.animator.fade_out);
ft.replace(R.id.container,new ManageEnvironmentFragment()).commit();
break;
case INDEX_ENVIRONMENT_OVERLAP:
ft=fragmentManager.beginTransaction();
ft.setCustomAnimations(R.animator.fade_in,R.animator.fade_out);
ft.replace(R.id.container,new OverlappingEnvironmentsFragment()).commit();
break;
case INDEX_MASTER_PASSWORD:
ft=fragmentManager.beginTransaction();
ft.setCustomAnimations(R.animator.fade_in,R.animator.fade_out);
ft.replace(R.id.container,new SetMasterPasswordFragment()).commit();
break;
default :
isValid=false;
}
if (isValid) {
mTitle=mainItemList.get(itemArrayIndex);
listAdapter.setSelectedMainItemIndex(itemArrayIndex);
listAdapter.notifyDataSetChanged();
}
if (position != -1) {
prevPosition=position;
position=-1;
}
break;
case NavigationDrawerListAdapter.ITEM_TYPE_SECONDARY:
switch (listAdapter.getItemArrayIndex(position)) {
case INDEX_SETTINGS:
startActivity(new Intent(SmartLockScreenSettings.this,GeneralSettingsActivity.class));
break;
default :
Toast.makeText(SmartLockScreenSettings.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
break;
default :
return;
}
if (mTitle != null) {
setTitle(mTitle);
}
}
/** 
 * Called when a drawer has settled in a completely open state. 
 */
public void onDrawerOpened(View drawerView){
super.onDrawerOpened(drawerView);
mTitle=getTitle().toString();
setTitle(getString(R.string.title_activity_smart_lock_screen_settings));
}
}
;
drawerLayout.setDrawerListener(actionBarDrawerToggle);
drawerLayout.openDrawer(Gravity.START);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_smart_lock_screen_settings);
  if (savedInstanceState == null) {
    getFragmentManager().beginTransaction().add(R.id.container,new ManageEnvironmentFragment()).commit();
  }
  OneTimeInitializer.initialize(this,MASTER_PASSWORD_REQUEST);
  startService(BaseService.getServiceIntent(this,null,null));
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2 && !NotificationService.isInstanceCreated()) {
    Intent intent=new Intent(this,NotificationService.class);
    startService(intent);
  }
  setUpActionBar();
  setUpNavDrawer();
  drawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout_main_settings);
  actionBarDrawerToggle=new ActionBarDrawerToggle(this,drawerLayout,0,0){
    /** 
 * Called when a drawer has settled in a completely closed state. 
 */
    public void onDrawerClosed(    View view){
      super.onDrawerClosed(view);
      if (position == prevPosition) {
        if (mTitle != null) {
          setTitle(mTitle);
        }
        return;
      }
switch (listAdapter.getItemViewType(position)) {
case NavigationDrawerListAdapter.ITEM_TYPE_PROFILE:
        listAdapter.setSelectedProfileIndex(listAdapter.getItemArrayIndex(position));
      break;
case NavigationDrawerListAdapter.ITEM_TYPE_NEW_PROFILE:
    break;
case NavigationDrawerListAdapter.ITEM_TYPE_MAIN:
  FragmentManager fragmentManager=getFragmentManager();
FragmentTransaction ft;
boolean isValid=true;
int itemArrayIndex=listAdapter.getItemArrayIndex(position);
switch (itemArrayIndex) {
case INDEX_MANAGE_ENVIRONMENTS:
ft=fragmentManager.beginTransaction();
ft.setCustomAnimations(R.animator.fade_in,R.animator.fade_out);
ft.replace(R.id.container,new ManageEnvironmentFragment()).commit();
break;
case INDEX_ENVIRONMENT_OVERLAP:
ft=fragmentManager.beginTransaction();
ft.setCustomAnimations(R.animator.fade_in,R.animator.fade_out);
ft.replace(R.id.container,new OverlappingEnvironmentsFragment()).commit();
break;
case INDEX_MASTER_PASSWORD:
ft=fragmentManager.beginTransaction();
ft.setCustomAnimations(R.animator.fade_in,R.animator.fade_out);
ft.replace(R.id.container,new SetMasterPasswordFragment()).commit();
break;
default :
isValid=false;
}
if (isValid) {
mTitle=mainItemList.get(itemArrayIndex);
listAdapter.setSelectedMainItemIndex(itemArrayIndex);
listAdapter.notifyDataSetChanged();
}
if (position != -1) {
prevPosition=position;
}
break;
case NavigationDrawerListAdapter.ITEM_TYPE_SECONDARY:
switch (listAdapter.getItemArrayIndex(position)) {
case INDEX_SETTINGS:
startActivity(new Intent(SmartLockScreenSettings.this,GeneralSettingsActivity.class));
break;
default :
Toast.makeText(SmartLockScreenSettings.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
break;
default :
return;
}
if (mTitle != null) {
setTitle(mTitle);
}
position=-1;
}
/** 
 * Called when a drawer has settled in a completely open state. 
 */
public void onDrawerOpened(View drawerView){
super.onDrawerOpened(drawerView);
mTitle=getTitle().toString();
setTitle(getString(R.string.title_activity_smart_lock_screen_settings));
}
}
;
drawerLayout.setDrawerListener(actionBarDrawerToggle);
drawerLayout.openDrawer(Gravity.START);
}",0.9960049170251998
86969,"/** 
 * Called when a drawer has settled in a completely closed state. 
 */
public void onDrawerClosed(View view){
  super.onDrawerClosed(view);
  if (position == prevPosition) {
    if (mTitle != null) {
      setTitle(mTitle);
    }
    return;
  }
switch (listAdapter.getItemViewType(position)) {
case NavigationDrawerListAdapter.ITEM_TYPE_PROFILE:
    listAdapter.setSelectedProfileIndex(listAdapter.getItemArrayIndex(position));
  break;
case NavigationDrawerListAdapter.ITEM_TYPE_NEW_PROFILE:
break;
case NavigationDrawerListAdapter.ITEM_TYPE_MAIN:
FragmentManager fragmentManager=getFragmentManager();
FragmentTransaction ft;
boolean isValid=true;
int itemArrayIndex=listAdapter.getItemArrayIndex(position);
switch (itemArrayIndex) {
case INDEX_MANAGE_ENVIRONMENTS:
ft=fragmentManager.beginTransaction();
ft.setCustomAnimations(R.animator.fade_in,R.animator.fade_out);
ft.replace(R.id.container,new ManageEnvironmentFragment()).commit();
break;
case INDEX_ENVIRONMENT_OVERLAP:
ft=fragmentManager.beginTransaction();
ft.setCustomAnimations(R.animator.fade_in,R.animator.fade_out);
ft.replace(R.id.container,new OverlappingEnvironmentsFragment()).commit();
break;
case INDEX_MASTER_PASSWORD:
ft=fragmentManager.beginTransaction();
ft.setCustomAnimations(R.animator.fade_in,R.animator.fade_out);
ft.replace(R.id.container,new SetMasterPasswordFragment()).commit();
break;
default :
isValid=false;
}
if (isValid) {
mTitle=mainItemList.get(itemArrayIndex);
listAdapter.setSelectedMainItemIndex(itemArrayIndex);
listAdapter.notifyDataSetChanged();
}
if (position != -1) {
prevPosition=position;
position=-1;
}
break;
case NavigationDrawerListAdapter.ITEM_TYPE_SECONDARY:
switch (listAdapter.getItemArrayIndex(position)) {
case INDEX_SETTINGS:
startActivity(new Intent(SmartLockScreenSettings.this,GeneralSettingsActivity.class));
break;
default :
Toast.makeText(SmartLockScreenSettings.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
break;
default :
return;
}
if (mTitle != null) {
setTitle(mTitle);
}
}","/** 
 * Called when a drawer has settled in a completely closed state. 
 */
public void onDrawerClosed(View view){
  super.onDrawerClosed(view);
  if (position == prevPosition) {
    if (mTitle != null) {
      setTitle(mTitle);
    }
    return;
  }
switch (listAdapter.getItemViewType(position)) {
case NavigationDrawerListAdapter.ITEM_TYPE_PROFILE:
    listAdapter.setSelectedProfileIndex(listAdapter.getItemArrayIndex(position));
  break;
case NavigationDrawerListAdapter.ITEM_TYPE_NEW_PROFILE:
break;
case NavigationDrawerListAdapter.ITEM_TYPE_MAIN:
FragmentManager fragmentManager=getFragmentManager();
FragmentTransaction ft;
boolean isValid=true;
int itemArrayIndex=listAdapter.getItemArrayIndex(position);
switch (itemArrayIndex) {
case INDEX_MANAGE_ENVIRONMENTS:
ft=fragmentManager.beginTransaction();
ft.setCustomAnimations(R.animator.fade_in,R.animator.fade_out);
ft.replace(R.id.container,new ManageEnvironmentFragment()).commit();
break;
case INDEX_ENVIRONMENT_OVERLAP:
ft=fragmentManager.beginTransaction();
ft.setCustomAnimations(R.animator.fade_in,R.animator.fade_out);
ft.replace(R.id.container,new OverlappingEnvironmentsFragment()).commit();
break;
case INDEX_MASTER_PASSWORD:
ft=fragmentManager.beginTransaction();
ft.setCustomAnimations(R.animator.fade_in,R.animator.fade_out);
ft.replace(R.id.container,new SetMasterPasswordFragment()).commit();
break;
default :
isValid=false;
}
if (isValid) {
mTitle=mainItemList.get(itemArrayIndex);
listAdapter.setSelectedMainItemIndex(itemArrayIndex);
listAdapter.notifyDataSetChanged();
}
if (position != -1) {
prevPosition=position;
}
break;
case NavigationDrawerListAdapter.ITEM_TYPE_SECONDARY:
switch (listAdapter.getItemArrayIndex(position)) {
case INDEX_SETTINGS:
startActivity(new Intent(SmartLockScreenSettings.this,GeneralSettingsActivity.class));
break;
default :
Toast.makeText(SmartLockScreenSettings.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
break;
default :
return;
}
if (mTitle != null) {
setTitle(mTitle);
}
position=-1;
}",0.9935323383084576
86970,"@Override public boolean onTouch(View v,MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    last1MoveX=event.getRawX();
  last1MoveY=event.getRawY();
downRawX=event.getRawX();
downRawY=event.getRawY();
downTime=new Date().getTime();
directionKnown=false;
break;
case MotionEvent.ACTION_MOVE:
last2MoveX=last1MoveX;
last2MoveY=last1MoveY;
last1MoveX=event.getRawX();
last1MoveY=event.getRawY();
last2MoveTime=last1MoveTime;
last1MoveTime=new Date().getTime();
if (!directionKnown) {
if (downRawY - event.getRawY() > MIN_SWIPE_DIST) {
directionKnown=true;
direction=DIRECTION_UP;
Log.d(LOG_TAG,""String_Node_Str"");
}
 else if (downRawY - event.getRawY() < -MIN_SWIPE_DIST) {
directionKnown=true;
direction=DIRECTION_DOWN;
Log.d(LOG_TAG,""String_Node_Str"");
}
 else if (downRawX - event.getRawX() > MIN_SWIPE_DIST) {
directionKnown=true;
direction=DIRECTION_LEFT;
Log.d(LOG_TAG,""String_Node_Str"");
}
 else if (downRawX - event.getRawX() < -MIN_SWIPE_DIST) {
directionKnown=true;
direction=DIRECTION_RIGHT;
Log.d(LOG_TAG,""String_Node_Str"");
}
}
 else {
onMove(event,direction,downRawX,downRawY);
}
break;
case MotionEvent.ACTION_UP:
upRawX=event.getRawX();
upRawY=event.getRawY();
Log.d(LOG_TAG,""String_Node_Str"" + upRawX + ""String_Node_Str""+ upRawY);
upTime=new Date().getTime();
distX=convertPxToDip((int)(upRawX - downRawX));
distY=convertPxToDip((int)(upRawY - downRawY));
velocityX=distX / ((upTime - downTime) / 1000.0f);
velocityY=distY / ((upTime - downTime) / 1000.0f);
float endVelocityX;
if (last2MoveX > 0) {
endVelocityX=(event.getRawX() - last2MoveX) / (upTime - last2MoveTime);
}
 else {
endVelocityX=velocityX;
}
float endVelocityY;
if (last2MoveY > 0) {
endVelocityY=(event.getRawY() - last2MoveY) / (upTime - last2MoveTime);
}
 else {
endVelocityY=velocityY;
}
if (directionKnown) {
if (direction == DIRECTION_UP && velocityY < -MIN_THRESHOLD_VELOCITY) {
Log.d(LOG_TAG,""String_Node_Str"");
onBottomToTop(-endVelocityY);
}
 else if (direction == DIRECTION_DOWN && velocityY > MIN_THRESHOLD_VELOCITY) {
Log.d(LOG_TAG,""String_Node_Str"");
onTopToBottom(endVelocityY);
}
 else if (direction == DIRECTION_LEFT && velocityX < -MIN_THRESHOLD_VELOCITY) {
Log.d(LOG_TAG,""String_Node_Str"");
onRightToLeft(-endVelocityX);
}
 else if (direction == DIRECTION_RIGHT && velocityX > MIN_THRESHOLD_VELOCITY) {
Log.d(LOG_TAG,""String_Node_Str"");
onLeftToRight(endVelocityX);
}
 else {
Log.d(LOG_TAG,""String_Node_Str"" + velocityX + ""String_Node_Str""+ velocityY);
onSwipeFail();
}
}
 else {
onDirectionUnknown();
}
break;
}
return true;
}","@Override public boolean onTouch(View v,MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    last1MoveX=event.getRawX();
  last1MoveY=event.getRawY();
downRawX=event.getRawX();
downRawY=event.getRawY();
downTime=new Date().getTime();
directionKnown=false;
break;
case MotionEvent.ACTION_MOVE:
last2MoveX=last1MoveX;
last2MoveY=last1MoveY;
last1MoveX=event.getRawX();
last1MoveY=event.getRawY();
last2MoveTime=last1MoveTime;
last1MoveTime=new Date().getTime();
if (!directionKnown) {
if (downRawY - event.getRawY() > MIN_SWIPE_DIST) {
directionKnown=true;
direction=DIRECTION_UP;
Log.d(LOG_TAG,""String_Node_Str"");
}
 else if (downRawY - event.getRawY() < -MIN_SWIPE_DIST) {
directionKnown=true;
direction=DIRECTION_DOWN;
Log.d(LOG_TAG,""String_Node_Str"");
}
 else if (downRawX - event.getRawX() > MIN_SWIPE_DIST) {
directionKnown=true;
direction=DIRECTION_LEFT;
Log.d(LOG_TAG,""String_Node_Str"");
}
 else if (downRawX - event.getRawX() < -MIN_SWIPE_DIST) {
directionKnown=true;
direction=DIRECTION_RIGHT;
Log.d(LOG_TAG,""String_Node_Str"");
}
}
 else {
onMove(event,direction,downRawX,downRawY);
}
break;
case MotionEvent.ACTION_UP:
upRawX=event.getRawX();
upRawY=event.getRawY();
Log.d(LOG_TAG,""String_Node_Str"" + upRawX + ""String_Node_Str""+ upRawY);
upTime=new Date().getTime();
distX=convertPxToDip((int)(upRawX - downRawX));
distY=convertPxToDip((int)(upRawY - downRawY));
velocityX=distX / ((upTime - downTime) / 1000.0f);
velocityY=distY / ((upTime - downTime) / 1000.0f);
float endVelocityX;
if (last1MoveX != upRawX) {
endVelocityX=(upRawX - last1MoveX) / (upTime - last1MoveTime);
}
 else if (last2MoveX != upRawX) {
endVelocityX=(upRawX - last2MoveX) / (upTime - last2MoveTime);
}
 else {
endVelocityX=velocityX;
}
float endVelocityY;
if (last1MoveY != upRawY) {
endVelocityY=(upRawY - last1MoveY) / (upTime - last1MoveTime);
}
 else if (last2MoveX != upRawX) {
endVelocityY=(upRawY - last2MoveY) / (upTime - last2MoveTime);
}
 else {
endVelocityY=velocityY;
}
if (directionKnown) {
if (direction == DIRECTION_UP && velocityY < -MIN_THRESHOLD_VELOCITY) {
Log.d(LOG_TAG,""String_Node_Str"");
onBottomToTop(-endVelocityY);
}
 else if (direction == DIRECTION_DOWN && velocityY > MIN_THRESHOLD_VELOCITY) {
Log.d(LOG_TAG,""String_Node_Str"");
onTopToBottom(endVelocityY);
}
 else if (direction == DIRECTION_LEFT && velocityX < -MIN_THRESHOLD_VELOCITY) {
Log.d(LOG_TAG,""String_Node_Str"");
onRightToLeft(-endVelocityX);
}
 else if (direction == DIRECTION_RIGHT && velocityX > MIN_THRESHOLD_VELOCITY) {
Log.d(LOG_TAG,""String_Node_Str"");
onLeftToRight(endVelocityX);
}
 else {
Log.d(LOG_TAG,""String_Node_Str"" + velocityX + ""String_Node_Str""+ velocityY);
onSwipeFail();
}
}
 else {
onDirectionUnknown();
}
break;
}
return true;
}",0.9495101733232856
86971,"public static void launchDialer(Context context){
  Intent intent=new Intent(Intent.ACTION_DIAL);
  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  context.startActivity(intent);
}","public static void launchDialer(Context context){
  Intent intent=new Intent(Intent.ACTION_DIAL);
  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  try {
    context.startActivity(intent);
  }
 catch (  Exception e2) {
    Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    e2.printStackTrace();
  }
}",0.717948717948718
86972,"private void lockScreenDismiss(int direction,float endVelocity){
  if (endVelocity > 0) {
    if (direction == CustomFlingListener.DIRECTION_UP) {
      layout.animate().translationY(-layout.getHeight()).setInterpolator(new DecelerateInterpolator(endVelocity / 2)).setListener(new AnimateEndListener()).start();
    }
 else     if (direction == CustomFlingListener.DIRECTION_DOWN) {
      layout.animate().translationY(layout.getHeight()).setInterpolator(new DecelerateInterpolator(endVelocity / 2)).setListener(new AnimateEndListener()).start();
    }
 else     if (direction == CustomFlingListener.DIRECTION_LEFT) {
      layout.animate().translationX(-layout.getWidth()).setInterpolator(new DecelerateInterpolator(endVelocity / 2)).setListener(new AnimateEndListener()).start();
    }
 else {
      layout.animate().translationX(+layout.getWidth()).setInterpolator(new DecelerateInterpolator(endVelocity / 2)).setListener(new AnimateEndListener()).start();
    }
  }
 else {
    layout.animate().translationY(-layout.getHeight()).setListener(new AnimateEndListener()).setInterpolator(new AccelerateInterpolator()).start();
  }
}","private void lockScreenDismiss(int direction,float endVelocity){
  Log.d(LOG_TAG,""String_Node_Str"" + endVelocity);
  if (endVelocity > 0) {
    if (direction == CustomFlingListener.DIRECTION_UP) {
      layout.animate().translationY(-layout.getHeight()).setInterpolator(new DecelerateInterpolator(endVelocity / 2)).setListener(new AnimateEndListener()).start();
    }
 else     if (direction == CustomFlingListener.DIRECTION_DOWN) {
      layout.animate().translationY(layout.getHeight()).setInterpolator(new DecelerateInterpolator(endVelocity / 2)).setListener(new AnimateEndListener()).start();
    }
 else     if (direction == CustomFlingListener.DIRECTION_LEFT) {
      layout.animate().translationX(-layout.getWidth()).setInterpolator(new DecelerateInterpolator(endVelocity / 2)).setListener(new AnimateEndListener()).start();
    }
 else {
      layout.animate().translationX(+layout.getWidth()).setInterpolator(new DecelerateInterpolator(endVelocity / 2)).setListener(new AnimateEndListener()).start();
    }
  }
 else {
    layout.animate().translationY(-layout.getHeight()).setListener(new AnimateEndListener()).setInterpolator(new AccelerateInterpolator()).start();
  }
}",0.9783737024221452
86973,"@Override public void onBottomToTop(float endVelocity){
  lockScreenDismiss(CustomFlingListener.DIRECTION_UP,DEFAULT_START_ANIMATION_VELOCITY);
}","@Override public void onBottomToTop(float endVelocity){
  lockScreenDismiss(CustomFlingListener.DIRECTION_UP,endVelocity);
}",0.8475836431226765
86974,"@Override public void onTopToBottom(float endVelocity){
  lockScreenDismiss(CustomFlingListener.DIRECTION_DOWN,DEFAULT_START_ANIMATION_VELOCITY);
  NotificationAreaHelper.expand(context);
}","@Override public void onTopToBottom(float endVelocity){
  lockScreenDismiss(CustomFlingListener.DIRECTION_DOWN,endVelocity);
  NotificationAreaHelper.expand(context);
}",0.8851540616246498
86975,"public void notificationChanged(){
  Log.d(LOG_TAG,""String_Node_Str"");
  if (notificationCardsLayout != null) {
    Log.d(LOG_TAG,""String_Node_Str"");
    if (((LinearLayout)notificationCardsLayout).getChildCount() > 0) {
      ((LinearLayout)notificationCardsLayout).removeAllViews();
    }
    for (int i=0; i < NotificationService.currentNotifications.size() && i < MAX_NOTIFICATION_SHOWN; i++) {
      final LockScreenNotification lsn=NotificationService.currentNotifications.get(i);
      final int position=i;
      final CardView cardView=(CardView)inflater.inflate(R.layout.list_item_notification,notificationCardsLayout,false);
      TextView titleTextView=(TextView)cardView.findViewById(R.id.notification_card_title);
      TextView subTextTextView=(TextView)cardView.findViewById(R.id.notification_card_subtext);
      ImageView notificationImageView=(ImageView)cardView.findViewById(R.id.image_view_notification);
      final boolean isClearable=lsn.isClearable();
      final Notification mNotification=lsn.getNotification();
      final Bundle extras=mNotification.extras;
      titleTextView.setText(extras.getString(KEY_NOTIFICATION_TITLE));
      CharSequence charSequence=(CharSequence)extras.getCharSequence(KEY_NOTIFICATION_TEXT);
      if (charSequence != null) {
        subTextTextView.setText(charSequence.toString());
      }
      try {
        int icon=mNotification.icon;
        Bitmap img=(Bitmap)mNotification.extras.get(Notification.EXTRA_LARGE_ICON);
        if (img == null) {
          Drawable app_icon=context.getPackageManager().getApplicationIcon(lsn.getPackageName());
          img=((BitmapDrawable)app_icon).getBitmap();
        }
        notificationImageView.setImageBitmap(Picture.getCroppedBitmap(img,Color.DKGRAY));
      }
 catch (      Exception e) {
        Log.e(LOG_TAG,e.toString());
      }
      cardView.setMaxCardElevation(CARD_NORMAL_ELEVATION);
      cardView.setCardElevation(CARD_NORMAL_ELEVATION);
      cardView.getBackground().setAlpha(CARD_VIEW_NORMAL_ALPHA);
      cardView.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          Log.d(LOG_TAG,""String_Node_Str"" + position);
          if (clickedCard == position) {
            try {
              mNotification.contentIntent.send();
              lockScreenDismiss(DEFAULT_START_ANIMATION_VELOCITY);
            }
 catch (            Exception e) {
              Log.e(LOG_TAG,e.toString());
            }
            cardView.setMaxCardElevation(CARD_NORMAL_ELEVATION);
            cardView.setCardElevation(CARD_NORMAL_ELEVATION);
            cardView.getBackground().setAlpha(CARD_VIEW_NORMAL_ALPHA);
          }
 else {
            clickedCard=position;
            cardView.setMaxCardElevation(CARD_TOUCHED_ELEVATION);
            cardView.setCardElevation(CARD_TOUCHED_ELEVATION);
            cardView.getBackground().setAlpha(CARD_VIEW_SELECTED_ALPHA);
            CountDownTimer cdt=new CountDownTimer((long)2000,(long)2000){
              @Override public void onTick(              long millisUntilFinished){
              }
              @Override public void onFinish(){
                clickedCard=-1;
                cardView.setMaxCardElevation(CARD_NORMAL_ELEVATION);
                cardView.setCardElevation(CARD_NORMAL_ELEVATION);
                cardView.getBackground().setAlpha(CARD_VIEW_NORMAL_ALPHA);
              }
            }
.start();
          }
        }
      }
);
      cardView.setOnTouchListener(new CustomFlingListener(context){
        @Override public void onRightToLeft(        float endVelocity){
          Log.d(LOG_TAG,""String_Node_Str"");
          if (isClearable) {
            cardView.animate().translationX(-cardView.getWidth()).setInterpolator(new DecelerateInterpolator(endVelocity / 2)).alpha(0f);
            lsn.dismiss(context);
            notificationCardsLayout.removeView(cardView);
          }
 else {
            cardView.animate().translationX(0).setInterpolator(new DecelerateInterpolator(endVelocity / 2)).alpha(1f);
          }
        }
        @Override public void onLeftToRight(        float endVelocity){
          Log.d(LOG_TAG,""String_Node_Str"");
          if (isClearable) {
            cardView.animate().translationX(cardView.getWidth()).setInterpolator(new DecelerateInterpolator(endVelocity / 2)).alpha(0f);
            lsn.dismiss(context);
            notificationCardsLayout.removeView(cardView);
          }
 else {
            cardView.animate().translationX(0).setInterpolator(new DecelerateInterpolator(endVelocity / 2)).alpha(1f);
          }
        }
        @Override public void onTopToBottom(        float endVelocity){
          lockScreenDismiss(CustomFlingListener.DIRECTION_DOWN,endVelocity);
          NotificationAreaHelper.expand(context);
        }
        @Override public void onBottomToTop(        float endVelocity){
          lockScreenDismiss(CustomFlingListener.DIRECTION_UP,endVelocity);
        }
        @Override public void onMove(        MotionEvent event,        int direction,        float downRawX,        float downRawY){
          if (direction == CustomFlingListener.DIRECTION_LEFT || direction == CustomFlingListener.DIRECTION_RIGHT) {
            Log.d(LOG_TAG,""String_Node_Str"" + downRawX + ""String_Node_Str""+ event.getRawX());
            cardView.setTranslationX(event.getRawX() - downRawX);
          }
 else           if (direction == CustomFlingListener.DIRECTION_UP || direction == CustomFlingListener.DIRECTION_DOWN) {
            float deltaY=event.getRawY() - downRawY;
            layout.setTranslationY(deltaY);
          }
        }
        @Override public void onDirectionUnknown(){
          cardView.callOnClick();
        }
        @Override public void onSwipeFail(){
          cardView.animate().translationX(0).start();
          layout.animate().translationY(0).start();
        }
      }
);
      notificationCardsLayout.addView(cardView);
    }
    if (NotificationService.currentNotifications.size() > MAX_NOTIFICATION_SHOWN) {
      final CardView cardView;
      cardView=(CardView)inflater.inflate(R.layout.card_extra_notifications,notificationCardsLayout,false);
      TextView cardExtraTextView=(TextView)cardView.findViewById(R.id.text_view_extra_notifications);
      String title=EXTRA_NOTIFICATION_SUBSTRING_PREFIX + (NotificationService.currentNotifications.size() - MAX_NOTIFICATION_SHOWN) + EXTRA_NOTIFICATION_SUBSTRING_SUFFIX;
      cardExtraTextView.setText(title);
      cardView.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          lockScreenDismiss(CustomFlingListener.DIRECTION_DOWN,DEFAULT_START_ANIMATION_VELOCITY_DOWN);
          NotificationAreaHelper.expand(context);
        }
      }
);
      cardView.setOnTouchListener(new CustomFlingListener(context){
        @Override public void onRightToLeft(        float endVelocity){
          ExternalIntents.launchCamera(context);
          lockScreenDismiss(CustomFlingListener.DIRECTION_LEFT,endVelocity);
        }
        @Override public void onLeftToRight(        float endVelocity){
          ExternalIntents.launchDialer(context);
          lockScreenDismiss(CustomFlingListener.DIRECTION_RIGHT,endVelocity);
        }
        @Override public void onTopToBottom(        float endVelocity){
          lockScreenDismiss(CustomFlingListener.DIRECTION_DOWN,DEFAULT_START_ANIMATION_VELOCITY);
          NotificationAreaHelper.expand(context);
        }
        @Override public void onBottomToTop(        float endVelocity){
          lockScreenDismiss(CustomFlingListener.DIRECTION_UP,DEFAULT_START_ANIMATION_VELOCITY);
        }
        @Override public void onMove(        MotionEvent event,        int direction,        float downRawX,        float downRawY){
          if (direction == CustomFlingListener.DIRECTION_UP || direction == CustomFlingListener.DIRECTION_DOWN) {
            float deltaY=event.getRawY() - downRawY;
            layout.setTranslationY(deltaY);
          }
 else {
            float deltaX=event.getRawX() - downRawX;
            layout.setTranslationX(deltaX);
          }
        }
        @Override public void onSwipeFail(){
          layout.animate().translationY(0).start();
          layout.animate().translationX(0).start();
        }
        @Override public void onDirectionUnknown(){
          cardView.callOnClick();
        }
      }
);
      cardView.getBackground().setAlpha(60);
      notificationCardsLayout.addView(cardView);
    }
  }
}","public void notificationChanged(){
  Log.d(LOG_TAG,""String_Node_Str"");
  if (notificationCardsLayout != null) {
    Log.d(LOG_TAG,""String_Node_Str"");
    if (((LinearLayout)notificationCardsLayout).getChildCount() > 0) {
      ((LinearLayout)notificationCardsLayout).removeAllViews();
    }
    for (int i=0; i < NotificationService.currentNotifications.size() && i < MAX_NOTIFICATION_SHOWN; i++) {
      final LockScreenNotification lsn=NotificationService.currentNotifications.get(i);
      final int position=i;
      final CardView cardView=(CardView)inflater.inflate(R.layout.list_item_notification,notificationCardsLayout,false);
      TextView titleTextView=(TextView)cardView.findViewById(R.id.notification_card_title);
      TextView subTextTextView=(TextView)cardView.findViewById(R.id.notification_card_subtext);
      ImageView notificationImageView=(ImageView)cardView.findViewById(R.id.image_view_notification);
      final boolean isClearable=lsn.isClearable();
      final Notification mNotification=lsn.getNotification();
      final Bundle extras=mNotification.extras;
      titleTextView.setText(extras.getString(KEY_NOTIFICATION_TITLE));
      CharSequence charSequence=(CharSequence)extras.getCharSequence(KEY_NOTIFICATION_TEXT);
      if (charSequence != null) {
        subTextTextView.setText(charSequence.toString());
      }
      try {
        int icon=mNotification.icon;
        Bitmap img=(Bitmap)mNotification.extras.get(Notification.EXTRA_LARGE_ICON);
        if (img == null) {
          Drawable app_icon=context.getPackageManager().getApplicationIcon(lsn.getPackageName());
          img=((BitmapDrawable)app_icon).getBitmap();
        }
        notificationImageView.setImageBitmap(Picture.getCroppedBitmap(img,Color.DKGRAY));
      }
 catch (      Exception e) {
        Log.e(LOG_TAG,e.toString());
      }
      cardView.setMaxCardElevation(CARD_NORMAL_ELEVATION);
      cardView.setCardElevation(CARD_NORMAL_ELEVATION);
      cardView.getBackground().setAlpha(CARD_VIEW_NORMAL_ALPHA);
      cardView.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          Log.d(LOG_TAG,""String_Node_Str"" + position);
          if (clickedCard == position) {
            try {
              mNotification.contentIntent.send();
              lockScreenDismiss(DEFAULT_START_ANIMATION_VELOCITY);
            }
 catch (            Exception e) {
              Log.e(LOG_TAG,e.toString());
            }
            cardView.setMaxCardElevation(CARD_NORMAL_ELEVATION);
            cardView.setCardElevation(CARD_NORMAL_ELEVATION);
            cardView.getBackground().setAlpha(CARD_VIEW_NORMAL_ALPHA);
          }
 else {
            clickedCard=position;
            cardView.setMaxCardElevation(CARD_TOUCHED_ELEVATION);
            cardView.setCardElevation(CARD_TOUCHED_ELEVATION);
            cardView.getBackground().setAlpha(CARD_VIEW_SELECTED_ALPHA);
            CountDownTimer cdt=new CountDownTimer((long)2000,(long)2000){
              @Override public void onTick(              long millisUntilFinished){
              }
              @Override public void onFinish(){
                clickedCard=-1;
                cardView.setMaxCardElevation(CARD_NORMAL_ELEVATION);
                cardView.setCardElevation(CARD_NORMAL_ELEVATION);
                cardView.getBackground().setAlpha(CARD_VIEW_NORMAL_ALPHA);
              }
            }
.start();
          }
        }
      }
);
      cardView.setOnTouchListener(new CustomFlingListener(context){
        @Override public void onRightToLeft(        float endVelocity){
          Log.d(LOG_TAG,""String_Node_Str"");
          if (isClearable) {
            cardView.animate().translationX(-cardView.getWidth()).setInterpolator(new DecelerateInterpolator(endVelocity / 2)).alpha(0f);
            lsn.dismiss(context);
            notificationCardsLayout.removeView(cardView);
          }
 else {
            cardView.animate().translationX(0).setInterpolator(new DecelerateInterpolator(endVelocity / 2)).alpha(1f);
          }
        }
        @Override public void onLeftToRight(        float endVelocity){
          Log.d(LOG_TAG,""String_Node_Str"");
          if (isClearable) {
            cardView.animate().translationX(cardView.getWidth()).setInterpolator(new DecelerateInterpolator(endVelocity / 2)).alpha(0f);
            lsn.dismiss(context);
            notificationCardsLayout.removeView(cardView);
          }
 else {
            cardView.animate().translationX(0).setInterpolator(new DecelerateInterpolator(endVelocity / 2)).alpha(1f);
          }
        }
        @Override public void onTopToBottom(        float endVelocity){
          lockScreenDismiss(CustomFlingListener.DIRECTION_DOWN,endVelocity);
          NotificationAreaHelper.expand(context);
        }
        @Override public void onBottomToTop(        float endVelocity){
          lockScreenDismiss(CustomFlingListener.DIRECTION_UP,endVelocity);
        }
        @Override public void onMove(        MotionEvent event,        int direction,        float downRawX,        float downRawY){
          if (direction == CustomFlingListener.DIRECTION_LEFT || direction == CustomFlingListener.DIRECTION_RIGHT) {
            Log.d(LOG_TAG,""String_Node_Str"" + downRawX + ""String_Node_Str""+ event.getRawX());
            cardView.setTranslationX(event.getRawX() - downRawX);
          }
 else           if (direction == CustomFlingListener.DIRECTION_UP || direction == CustomFlingListener.DIRECTION_DOWN) {
            float deltaY=event.getRawY() - downRawY;
            layout.setTranslationY(deltaY);
          }
        }
        @Override public void onDirectionUnknown(){
          cardView.callOnClick();
        }
        @Override public void onSwipeFail(){
          cardView.animate().translationX(0).start();
          layout.animate().translationY(0).start();
        }
      }
);
      notificationCardsLayout.addView(cardView);
    }
    if (NotificationService.currentNotifications.size() > MAX_NOTIFICATION_SHOWN) {
      final CardView cardView;
      cardView=(CardView)inflater.inflate(R.layout.card_extra_notifications,notificationCardsLayout,false);
      TextView cardExtraTextView=(TextView)cardView.findViewById(R.id.text_view_extra_notifications);
      String title=EXTRA_NOTIFICATION_SUBSTRING_PREFIX + (NotificationService.currentNotifications.size() - MAX_NOTIFICATION_SHOWN) + EXTRA_NOTIFICATION_SUBSTRING_SUFFIX;
      cardExtraTextView.setText(title);
      cardView.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          lockScreenDismiss(CustomFlingListener.DIRECTION_DOWN,DEFAULT_START_ANIMATION_VELOCITY_DOWN);
          NotificationAreaHelper.expand(context);
        }
      }
);
      cardView.setOnTouchListener(new CustomFlingListener(context){
        @Override public void onRightToLeft(        float endVelocity){
          ExternalIntents.launchCamera(context);
          lockScreenDismiss(CustomFlingListener.DIRECTION_LEFT,endVelocity);
        }
        @Override public void onLeftToRight(        float endVelocity){
          ExternalIntents.launchDialer(context);
          lockScreenDismiss(CustomFlingListener.DIRECTION_RIGHT,endVelocity);
        }
        @Override public void onTopToBottom(        float endVelocity){
          lockScreenDismiss(CustomFlingListener.DIRECTION_DOWN,endVelocity);
          NotificationAreaHelper.expand(context);
        }
        @Override public void onBottomToTop(        float endVelocity){
          lockScreenDismiss(CustomFlingListener.DIRECTION_UP,endVelocity);
        }
        @Override public void onMove(        MotionEvent event,        int direction,        float downRawX,        float downRawY){
          if (direction == CustomFlingListener.DIRECTION_UP || direction == CustomFlingListener.DIRECTION_DOWN) {
            float deltaY=event.getRawY() - downRawY;
            layout.setTranslationY(deltaY);
          }
 else {
            float deltaX=event.getRawX() - downRawX;
            layout.setTranslationX(deltaX);
          }
        }
        @Override public void onSwipeFail(){
          layout.animate().translationY(0).start();
          layout.animate().translationX(0).start();
        }
        @Override public void onDirectionUnknown(){
          cardView.callOnClick();
        }
      }
);
      cardView.getBackground().setAlpha(60);
      notificationCardsLayout.addView(cardView);
    }
  }
}",0.9949483082706768
86976,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_smart_lock_screen_settings);
  if (savedInstanceState == null) {
    getFragmentManager().beginTransaction().add(R.id.container,new ManageEnvironmentFragment()).commit();
  }
  if (!OneTimeInitializer.initialize(this)) {
    finish();
  }
  startService(BaseService.getServiceIntent(this,null,null));
  setUpActionBar();
  setUpNavDrawer();
  drawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout_main_settings);
  actionBarDrawerToggle=new ActionBarDrawerToggle(this,drawerLayout,R.drawable.ic_drawer,R.string.drawer_open,R.string.drawer_close){
    /** 
 * Called when a drawer has settled in a completely closed state. 
 */
    public void onDrawerClosed(    View view){
      super.onDrawerClosed(view);
      if (mTitle != null) {
        setTitle(mTitle);
      }
    }
    /** 
 * Called when a drawer has settled in a completely open state. 
 */
    public void onDrawerOpened(    View drawerView){
      super.onDrawerOpened(drawerView);
      mTitle=getTitle().toString();
      setTitle(getString(R.string.title_activity_smart_lock_screen_settings));
    }
  }
;
  drawerLayout.setDrawerListener(actionBarDrawerToggle);
  drawerLayout.openDrawer(Gravity.START);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_smart_lock_screen_settings);
  if (savedInstanceState == null) {
    getFragmentManager().beginTransaction().add(R.id.container,new ManageEnvironmentFragment()).commit();
  }
  if (!OneTimeInitializer.initialize(this)) {
    finish();
  }
  startService(BaseService.getServiceIntent(this,null,null));
  setUpActionBar();
  setUpNavDrawer();
  drawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout_main_settings);
  actionBarDrawerToggle=new ActionBarDrawerToggle(this,drawerLayout,R.drawable.ic_drawer,R.string.drawer_open,R.string.drawer_close){
    /** 
 * Called when a drawer has settled in a completely closed state. 
 */
    public void onDrawerClosed(    View view){
      super.onDrawerClosed(view);
switch (listAdapter.getItemViewType(position)) {
case NavigationDrawerListAdapter.ITEM_TYPE_PROFILE:
        listAdapter.setSelectedProfileIndex(listAdapter.getItemArrayIndex(position));
      break;
case NavigationDrawerListAdapter.ITEM_TYPE_NEW_PROFILE:
    break;
case NavigationDrawerListAdapter.ITEM_TYPE_MAIN:
  FragmentManager fragmentManager=getFragmentManager();
boolean isValid=true;
int itemArrayIndex=listAdapter.getItemArrayIndex(position);
switch (itemArrayIndex) {
case INDEX_MANAGE_ENVIRONMENTS:
fragmentManager.beginTransaction().replace(R.id.container,new ManageEnvironmentFragment()).commit();
break;
case INDEX_ENVIRONMENT_OVERLAP:
fragmentManager.beginTransaction().replace(R.id.container,new OverlappingEnvironmentsFragment()).commit();
break;
case INDEX_MASTER_PASSWORD:
fragmentManager.beginTransaction().replace(R.id.container,new SetMasterPasswordFragment()).commit();
break;
default :
isValid=false;
}
if (isValid) {
mTitle=mainItemList.get(itemArrayIndex);
listAdapter.setSelectedMainItemIndex(itemArrayIndex);
listAdapter.notifyDataSetChanged();
}
break;
case NavigationDrawerListAdapter.ITEM_TYPE_SECONDARY:
fragmentManager=getFragmentManager();
switch (listAdapter.getItemArrayIndex(position)) {
default :
Toast.makeText(SmartLockScreenSettings.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
break;
default :
return;
}
if (mTitle != null) {
setTitle(mTitle);
}
position=-1;
}
/** 
 * Called when a drawer has settled in a completely open state. 
 */
public void onDrawerOpened(View drawerView){
super.onDrawerOpened(drawerView);
mTitle=getTitle().toString();
setTitle(getString(R.string.title_activity_smart_lock_screen_settings));
}
}
;
drawerLayout.setDrawerListener(actionBarDrawerToggle);
drawerLayout.openDrawer(Gravity.START);
}",0.6264937706585304
86977,"/** 
 * Called when a drawer has settled in a completely closed state. 
 */
public void onDrawerClosed(View view){
  super.onDrawerClosed(view);
  if (mTitle != null) {
    setTitle(mTitle);
  }
}","/** 
 * Called when a drawer has settled in a completely closed state. 
 */
public void onDrawerClosed(View view){
  super.onDrawerClosed(view);
switch (listAdapter.getItemViewType(position)) {
case NavigationDrawerListAdapter.ITEM_TYPE_PROFILE:
    listAdapter.setSelectedProfileIndex(listAdapter.getItemArrayIndex(position));
  break;
case NavigationDrawerListAdapter.ITEM_TYPE_NEW_PROFILE:
break;
case NavigationDrawerListAdapter.ITEM_TYPE_MAIN:
FragmentManager fragmentManager=getFragmentManager();
boolean isValid=true;
int itemArrayIndex=listAdapter.getItemArrayIndex(position);
switch (itemArrayIndex) {
case INDEX_MANAGE_ENVIRONMENTS:
fragmentManager.beginTransaction().replace(R.id.container,new ManageEnvironmentFragment()).commit();
break;
case INDEX_ENVIRONMENT_OVERLAP:
fragmentManager.beginTransaction().replace(R.id.container,new OverlappingEnvironmentsFragment()).commit();
break;
case INDEX_MASTER_PASSWORD:
fragmentManager.beginTransaction().replace(R.id.container,new SetMasterPasswordFragment()).commit();
break;
default :
isValid=false;
}
if (isValid) {
mTitle=mainItemList.get(itemArrayIndex);
listAdapter.setSelectedMainItemIndex(itemArrayIndex);
listAdapter.notifyDataSetChanged();
}
break;
case NavigationDrawerListAdapter.ITEM_TYPE_SECONDARY:
fragmentManager=getFragmentManager();
switch (listAdapter.getItemArrayIndex(position)) {
default :
Toast.makeText(SmartLockScreenSettings.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
break;
default :
return;
}
if (mTitle != null) {
setTitle(mTitle);
}
position=-1;
}",0.19551466359977
86978,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
switch (listAdapter.getItemViewType(position)) {
case NavigationDrawerListAdapter.ITEM_TYPE_PROFILE:
    listAdapter.setSelectedProfileIndex(listAdapter.getItemArrayIndex(position));
  break;
case NavigationDrawerListAdapter.ITEM_TYPE_NEW_PROFILE:
break;
case NavigationDrawerListAdapter.ITEM_TYPE_MAIN:
FragmentManager fragmentManager=getFragmentManager();
boolean isValid=true;
int itemArrayIndex=listAdapter.getItemArrayIndex(position);
switch (itemArrayIndex) {
case INDEX_MANAGE_ENVIRONMENTS:
fragmentManager.beginTransaction().replace(R.id.container,new ManageEnvironmentFragment()).commit();
break;
case INDEX_ENVIRONMENT_OVERLAP:
fragmentManager.beginTransaction().replace(R.id.container,new OverlappingEnvironmentsFragment()).commit();
break;
case INDEX_MASTER_PASSWORD:
fragmentManager.beginTransaction().replace(R.id.container,new SetMasterPasswordFragment()).commit();
break;
default :
isValid=false;
}
if (isValid) {
mTitle=mainItemList.get(itemArrayIndex);
listAdapter.setSelectedMainItemIndex(itemArrayIndex);
listAdapter.notifyDataSetChanged();
}
break;
case NavigationDrawerListAdapter.ITEM_TYPE_SECONDARY:
fragmentManager=getFragmentManager();
switch (listAdapter.getItemArrayIndex(position)) {
default :
Toast.makeText(SmartLockScreenSettings.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
break;
default :
return;
}
drawerLayout.closeDrawers();
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  SmartLockScreenSettings.this.position=position;
  drawerLayout.closeDrawers();
}",0.1936274509803921
86979,"public NoSecurity(){
  super(Passphrase.TYPE_NONE);
}","public NoSecurity(){
  super(Passphrase.TYPE_NONE,null);
}",0.954954954954955
86980,"public static void removeEnvironmentFromOverlapPreferences(long environmentId,Context context){
  initPreferences(context);
  Map<String,?> preferenceMap=preferences.getAll();
  for (  String key : preferenceMap.keySet()) {
    if (key.startsWith(KEY_PREFIX_OVERLAP_CHOICE)) {
      List<Long> envIds=getEnvironmentIdsFromKey(key);
      long prefEnv=(Long)preferenceMap.get(key);
      if (envIds.contains(environmentId)) {
        SharedPreferences.Editor editor=preferences.edit();
        editor.remove(key);
        envIds.remove(environmentId);
        if (envIds.size() > 1 && prefEnv != environmentId && preferences.getLong(buildKeyForEnvironmentIds(envIds),-1) == -1) {
          editor.putLong(buildKeyForEnvironmentIds(envIds),prefEnv);
        }
        editor.apply();
      }
    }
  }
}","public static void removeEnvironmentFromOverlapPreferences(long environmentId,Context context){
  initPreferences(context);
  Map<String,?> preferenceMap=preferences.getAll();
  for (  String key : preferenceMap.keySet()) {
    if (key.startsWith(KEY_PREFIX_OVERLAP_CHOICE)) {
      List<Long> envIds=getEnvironmentIdsFromKey(key);
      long prefEnv=(Long)preferenceMap.get(key);
      if (envIds.contains(environmentId)) {
        SharedPreferences.Editor editor=preferences.edit();
        editor.remove(key);
        envIds.remove(environmentId);
        if (envIds.size() > 1 && prefEnv != environmentId && preferences.getLong(buildKeyForEnvironmentIds(envIds),-1) == -1) {
          editor.putLong(buildKeyForEnvironmentIds(envIds),prefEnv);
        }
        editor.apply();
      }
    }
  }
  preferences=null;
}",0.9876695437731196
86981,"public static void setEnvironmentOverlapChoice(List<Environment> overlappingEnvironments,long chosenEnvironmentId,Context context){
  initPreferences(context);
  if (overlappingEnvironments == null || overlappingEnvironments.size() < 1) {
    return;
  }
  SharedPreferences.Editor editor=preferences.edit();
  editor.putLong(buildKeyForEnvironments(overlappingEnvironments),chosenEnvironmentId);
  editor.apply();
}","public static void setEnvironmentOverlapChoice(List<Environment> overlappingEnvironments,long chosenEnvironmentId,Context context){
  initPreferences(context);
  if (overlappingEnvironments == null || overlappingEnvironments.size() < 1) {
    return;
  }
  SharedPreferences.Editor editor=preferences.edit();
  editor.putLong(buildKeyForEnvironments(overlappingEnvironments),chosenEnvironmentId);
  editor.apply();
  preferences=null;
}",0.976525821596244
86982,"public static void setMasterPassword(Context context,String passwordString,String passwordType){
  if (Utility.checkForNullAndWarn(passwordString,LOG_TAG) || Utility.checkForNullAndWarn(passwordType,LOG_TAG)) {
    return;
  }
  initPreferences(context);
  SharedPreferences.Editor editor=preferences.edit();
  editor.putString(KEY_MASTER_PASSWORD,passwordString);
  editor.putString(KEY_MASTER_PASSWORD_TYPE,passwordType);
  editor.apply();
}","public static void setMasterPassword(Context context,String passwordString,String passwordType){
  if (Utility.checkForNullAndWarn(passwordString,LOG_TAG) || Utility.checkForNullAndWarn(passwordType,LOG_TAG)) {
    return;
  }
  initPreferences(context);
  SharedPreferences.Editor editor=preferences.edit();
  editor.putString(KEY_MASTER_PASSWORD,passwordString);
  editor.putString(KEY_MASTER_PASSWORD_TYPE,passwordType);
  editor.apply();
  preferences=null;
}",0.977924944812362
86983,"public static void setDeviceOwnerUserId(Context context,long id){
  initPreferences(context);
  SharedPreferences.Editor editor=preferences.edit();
  editor.putLong(KEY_DEVICE_OWNER_USER_ID,id);
  editor.apply();
}","public static void setDeviceOwnerUserId(Context context,long id){
  initPreferences(context);
  SharedPreferences.Editor editor=preferences.edit();
  editor.putLong(KEY_DEVICE_OWNER_USER_ID,id);
  editor.apply();
  preferences=null;
}",0.9553571428571428
86984,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  setDimensions();
  ScrollView rootView=new ScrollView(getActivity());
  rootView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));
  mLinearLayout=new LinearLayout(getActivity());
  mLinearLayout.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));
  mLinearLayout.setOrientation(LinearLayout.VERTICAL);
  rootView.setBackgroundColor(getResources().getColor(R.color.card_background_grey));
  rootView.addView(mLinearLayout);
  addRadioButtonLists(inflater);
  SystemBarTintManager tintManager=new SystemBarTintManager(getActivity());
  int mPaddingBottom, mPaddingTop;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
    mPaddingBottom=tintManager.getConfig().getNavigationBarHeight();
    mPaddingTop=tintManager.getConfig().getPixelInsetTop(true);
switch (getActivity().getResources().getConfiguration().orientation) {
case Configuration.ORIENTATION_UNDEFINED:
case Configuration.ORIENTATION_PORTRAIT:
      rootView.setPadding(rootView.getPaddingLeft(),rootView.getPaddingTop() + mPaddingTop,rootView.getPaddingRight(),rootView.getPaddingBottom());
    View bottomPaddingView=new View(getActivity());
  bottomPaddingView.setBackgroundColor(Color.TRANSPARENT);
bottomPaddingView.setLayoutParams(new AbsListView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,mPaddingBottom));
bottomPaddingView.setEnabled(false);
mLinearLayout.addView(bottomPaddingView);
break;
case Configuration.ORIENTATION_LANDSCAPE:
rootView.setPadding(rootView.getPaddingLeft(),rootView.getPaddingTop() + mPaddingTop,rootView.getPaddingRight() + mPaddingBottom,rootView.getPaddingBottom());
break;
}
}
return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  setDimensions();
  ScrollView rootView=new ScrollView(getActivity());
  rootView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));
  mLinearLayout=new LinearLayout(getActivity());
  mLinearLayout.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));
  mLinearLayout.setOrientation(LinearLayout.VERTICAL);
  rootView.setBackgroundColor(getResources().getColor(R.color.card_background_grey));
  addRadioButtonLists(inflater);
  if (isEmpty) {
    TextView textView=new TextView(getActivity());
    textView.setText(getString(R.string.no_overlap_detected));
    textView.setGravity(Gravity.CENTER);
    textView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));
    textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP,18);
    return textView;
  }
  rootView.addView(mLinearLayout);
  SystemBarTintManager tintManager=new SystemBarTintManager(getActivity());
  int mPaddingBottom, mPaddingTop;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
    mPaddingBottom=tintManager.getConfig().getNavigationBarHeight();
    mPaddingTop=tintManager.getConfig().getPixelInsetTop(true);
switch (getActivity().getResources().getConfiguration().orientation) {
case Configuration.ORIENTATION_UNDEFINED:
case Configuration.ORIENTATION_PORTRAIT:
      rootView.setPadding(rootView.getPaddingLeft(),rootView.getPaddingTop() + mPaddingTop,rootView.getPaddingRight(),rootView.getPaddingBottom());
    View bottomPaddingView=new View(getActivity());
  bottomPaddingView.setBackgroundColor(Color.TRANSPARENT);
bottomPaddingView.setLayoutParams(new AbsListView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,mPaddingBottom));
bottomPaddingView.setEnabled(false);
mLinearLayout.addView(bottomPaddingView);
break;
case Configuration.ORIENTATION_LANDSCAPE:
rootView.setPadding(rootView.getPaddingLeft(),rootView.getPaddingTop() + mPaddingTop,rootView.getPaddingRight() + mPaddingBottom,rootView.getPaddingBottom());
break;
}
}
return rootView;
}",0.8886174890083048
86985,"private void addRadioButtonLists(LayoutInflater inflater){
  final List<OverlappingEnvironmentIdsWithResolved> environmentIdsWithResolved=SharedPreferencesHelper.getAllEnvironmentOverlaps(getActivity());
  for (  final OverlappingEnvironmentIdsWithResolved resolved : environmentIdsWithResolved) {
    ListView listView=new ListView(getActivity());
    AdapterView.OnItemClickListener listener=new AdapterView.OnItemClickListener(){
      @Override public void onItemClick(      AdapterView<?> parent,      View view,      int position,      long id){
        resolved.setResolvedEnvId(resolved.getOverlappingEnvIds().get(position));
        resolved.getBareboneEnvironmentList(getActivity());
        SharedPreferencesHelper.setEnvironmentOverlapChoice(resolved.getBareboneEnvironmentList(getActivity()),resolved.getResolvedEnvId(),getActivity());
        getActivity().startService(BaseService.getServiceIntent(getActivity(),null,BaseService.ACTION_DETECT_ENVIRONMENT));
      }
    }
;
    RadioButtonListAdapter<Environment> adapter=new RadioButtonListAdapter<Environment>(getActivity(),R.layout.list_item_environment_overlap,R.id.radio_button_environment_overlap,resolved.getBareboneEnvironmentList(getActivity()),listener);
    listView.setAdapter(adapter);
    adapter.setSelectedPosition(resolved.getResolvedEnvIndex());
    LinearLayout.LayoutParams listParams=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,mListPreferredItemHeight * resolved.getOverlappingEnvIds().size());
    listParams.setMargins(mVerticalPadding,mHorizontalPadding,mVerticalPadding,0);
    listView.setLayoutParams(listParams);
    listView.setBackgroundColor(Color.WHITE);
    listView.setDividerHeight(0);
    mLinearLayout.addView(listView);
    View separatorView=inflater.inflate(R.layout.shadow_separator,mLinearLayout,false);
    LinearLayout.LayoutParams separatorParams=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);
    separatorParams.setMargins(mVerticalPadding,0,mVerticalPadding,0);
    separatorView.setLayoutParams(separatorParams);
    mLinearLayout.addView(separatorView);
  }
}","private void addRadioButtonLists(LayoutInflater inflater){
  final List<OverlappingEnvironmentIdsWithResolved> environmentIdsWithResolved=SharedPreferencesHelper.getAllEnvironmentOverlaps(getActivity());
  if (environmentIdsWithResolved == null || environmentIdsWithResolved.size() == 0) {
    isEmpty=true;
    return;
  }
  for (  final OverlappingEnvironmentIdsWithResolved resolved : environmentIdsWithResolved) {
    ListView listView=new ListView(getActivity());
    AdapterView.OnItemClickListener listener=new AdapterView.OnItemClickListener(){
      @Override public void onItemClick(      AdapterView<?> parent,      View view,      int position,      long id){
        resolved.setResolvedEnvId(resolved.getOverlappingEnvIds().get(position));
        resolved.getBareboneEnvironmentList(getActivity());
        SharedPreferencesHelper.setEnvironmentOverlapChoice(resolved.getBareboneEnvironmentList(getActivity()),resolved.getResolvedEnvId(),getActivity());
        getActivity().startService(BaseService.getServiceIntent(getActivity(),null,BaseService.ACTION_DETECT_ENVIRONMENT));
      }
    }
;
    RadioButtonListAdapter<Environment> adapter=new RadioButtonListAdapter<Environment>(getActivity(),R.layout.list_item_environment_overlap,R.id.radio_button_environment_overlap,resolved.getBareboneEnvironmentList(getActivity()),listener);
    listView.setAdapter(adapter);
    adapter.setSelectedPosition(resolved.getResolvedEnvIndex());
    LinearLayout.LayoutParams listParams=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,mListPreferredItemHeight * resolved.getOverlappingEnvIds().size());
    listParams.setMargins(mVerticalPadding,mHorizontalPadding,mVerticalPadding,0);
    listView.setLayoutParams(listParams);
    listView.setBackgroundColor(Color.WHITE);
    listView.setDividerHeight(0);
    mLinearLayout.addView(listView);
    View separatorView=inflater.inflate(R.layout.shadow_separator,mLinearLayout,false);
    LinearLayout.LayoutParams separatorParams=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);
    separatorParams.setMargins(mVerticalPadding,0,mVerticalPadding,0);
    separatorView.setLayoutParams(separatorParams);
    mLinearLayout.addView(separatorView);
  }
}",0.97289972899729
86986,"public void setUpButtons(){
  doneButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if ((selectedPassphrasetype != Passphrase.INDEX_PASSPHRASE_TYPE_NONE && selectedPassphrasetype != Passphrase.INDEX_PASSPHRASE_TYPE_PATTERN && passphraseEditText.getText().toString().equals(""String_Node_Str"")) || selectedPassphrasetype == Passphrase.INDEX_PASSPHRASE_TYPE_PATTERN && pattern == null) {
        AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
        builder.setTitle(R.string.alert_no_passphrase_title).setMessage(R.string.alert_no_passphrase_message);
        builder.setPositiveButton(R.string.ok,null);
        builder.create().show();
        return;
      }
 else {
        if (selectedPassphrasetype != Passphrase.INDEX_PASSPHRASE_TYPE_NONE && selectedPassphrasetype != Passphrase.INDEX_PASSPHRASE_TYPE_PATTERN && !passphraseEditText.getText().toString().equals(passphraseConfirmationEditText.getText().toString())) {
          AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
          builder.setTitle(R.string.alert_no_passphrase_match_title).setMessage(R.string.alert_no_passphrase_match_message);
          builder.setPositiveButton(R.string.ok,null);
          builder.create().show();
          return;
        }
      }
      Passphrase masterPassphrase=PassphraseFactory.getPassphraseInstance(selectedPassphrasetype,passphraseEditText.getText().toString(),passphraseEditText.getText().toString(),pattern);
      Passphrase.setMasterPassword(masterPassphrase,getActivity());
      Toast.makeText(getActivity(),getString(R.string.master_password_set),Toast.LENGTH_SHORT).show();
      mMasterPasswordSetListener.onMasterPasswordSet();
    }
  }
);
  cancelButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
      builder.setTitle(R.string.alert_cancel_add_environment_title).setMessage(R.string.alert_cancel_master_password_message);
      builder.setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          mMasterPasswordSetListener.onCancelSetMasterPassword();
        }
      }
);
      builder.setNegativeButton(R.string.cancel,null);
      builder.create().show();
    }
  }
);
}","public void setUpButtons(){
  doneButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if ((selectedPassphrasetype != Passphrase.INDEX_PASSPHRASE_TYPE_NONE && selectedPassphrasetype != Passphrase.INDEX_PASSPHRASE_TYPE_PATTERN && passphraseEditText.getText().toString().equals(""String_Node_Str"")) || selectedPassphrasetype == Passphrase.INDEX_PASSPHRASE_TYPE_PATTERN && pattern == null) {
        AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
        builder.setTitle(R.string.alert_no_passphrase_title).setMessage(R.string.alert_no_passphrase_message);
        builder.setPositiveButton(R.string.ok,null);
        builder.create().show();
        return;
      }
 else {
        if (selectedPassphrasetype != Passphrase.INDEX_PASSPHRASE_TYPE_NONE && selectedPassphrasetype != Passphrase.INDEX_PASSPHRASE_TYPE_PATTERN && !passphraseEditText.getText().toString().equals(passphraseConfirmationEditText.getText().toString())) {
          AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
          builder.setTitle(R.string.alert_no_passphrase_match_title).setMessage(R.string.alert_no_passphrase_match_message);
          builder.setPositiveButton(R.string.ok,null);
          builder.create().show();
          return;
        }
      }
      Passphrase masterPassphrase=PassphraseFactory.getPassphraseInstance(selectedPassphrasetype,passphraseEditText.getText().toString(),passphraseEditText.getText().toString(),pattern);
      Passphrase.setMasterPassword(masterPassphrase,getActivity());
      getActivity().startService(BaseService.getServiceIntent(getActivity(),null,BaseService.ACTION_DETECT_ENVIRONMENT));
      mMasterPasswordSetListener.onMasterPasswordSet();
    }
  }
);
  cancelButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
      builder.setTitle(R.string.alert_cancel_add_environment_title).setMessage(R.string.alert_cancel_master_password_message);
      builder.setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          mMasterPasswordSetListener.onCancelSetMasterPassword();
        }
      }
);
      builder.setNegativeButton(R.string.cancel,null);
      builder.create().show();
    }
  }
);
}",0.9640583281988088
86987,"@Override public void onCancelSetMasterPassword(){
  finish();
}","@Override public void onCancelSetMasterPassword(){
  setResult(RESULT_CANCELED);
  finish();
}",0.810126582278481
86988,"@Override public void onMasterPasswordSet(){
  finish();
}","@Override public void onMasterPasswordSet(){
  setResult(RESULT_OK);
  finish();
}",0.8285714285714286
86989,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_smart_lock_screen_settings);
  if (savedInstanceState == null) {
    getFragmentManager().beginTransaction().add(R.id.container,new ManageEnvironmentFragment()).commit();
  }
  if (!OneTimeInitializer.initialize(this)) {
    finish();
  }
  startService(BaseService.getServiceIntent(this,null,null));
  setUpActionBar();
  setUpNavDrawer();
  drawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout_main_settings);
  actionBarDrawerToggle=new ActionBarDrawerToggle(this,drawerLayout,R.drawable.ic_drawer,R.string.drawer_open,R.string.drawer_close){
    /** 
 * Called when a drawer has settled in a completely closed state. 
 */
    public void onDrawerClosed(    View view){
      super.onDrawerClosed(view);
switch (listAdapter.getItemViewType(position)) {
case NavigationDrawerListAdapter.ITEM_TYPE_PROFILE:
        listAdapter.setSelectedProfileIndex(listAdapter.getItemArrayIndex(position));
      break;
case NavigationDrawerListAdapter.ITEM_TYPE_NEW_PROFILE:
    break;
case NavigationDrawerListAdapter.ITEM_TYPE_MAIN:
  FragmentManager fragmentManager=getFragmentManager();
boolean isValid=true;
int itemArrayIndex=listAdapter.getItemArrayIndex(position);
switch (itemArrayIndex) {
case INDEX_MANAGE_ENVIRONMENTS:
fragmentManager.beginTransaction().replace(R.id.container,new ManageEnvironmentFragment()).commit();
break;
case INDEX_ENVIRONMENT_OVERLAP:
fragmentManager.beginTransaction().replace(R.id.container,new OverlappingEnvironmentsFragment()).commit();
break;
case INDEX_MASTER_PASSWORD:
fragmentManager.beginTransaction().replace(R.id.container,new SetMasterPasswordFragment()).commit();
break;
default :
isValid=false;
}
if (isValid) {
mTitle=mainItemList.get(itemArrayIndex);
listAdapter.setSelectedMainItemIndex(itemArrayIndex);
listAdapter.notifyDataSetChanged();
}
break;
case NavigationDrawerListAdapter.ITEM_TYPE_SECONDARY:
fragmentManager=getFragmentManager();
switch (listAdapter.getItemArrayIndex(position)) {
default :
Toast.makeText(SmartLockScreenSettings.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
break;
default :
return;
}
if (mTitle != null) {
setTitle(mTitle);
}
position=-1;
}
/** 
 * Called when a drawer has settled in a completely open state. 
 */
public void onDrawerOpened(View drawerView){
super.onDrawerOpened(drawerView);
mTitle=getTitle().toString();
setTitle(getString(R.string.title_activity_smart_lock_screen_settings));
}
}
;
drawerLayout.setDrawerListener(actionBarDrawerToggle);
drawerLayout.openDrawer(Gravity.START);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_smart_lock_screen_settings);
  if (savedInstanceState == null) {
    getFragmentManager().beginTransaction().add(R.id.container,new ManageEnvironmentFragment()).commit();
  }
  OneTimeInitializer.initialize(this,MASTER_PASSWORD_REQUEST);
  startService(BaseService.getServiceIntent(this,null,null));
  setUpActionBar();
  setUpNavDrawer();
  drawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout_main_settings);
  actionBarDrawerToggle=new ActionBarDrawerToggle(this,drawerLayout,R.drawable.ic_drawer,R.string.drawer_open,R.string.drawer_close){
    /** 
 * Called when a drawer has settled in a completely closed state. 
 */
    public void onDrawerClosed(    View view){
      super.onDrawerClosed(view);
switch (listAdapter.getItemViewType(position)) {
case NavigationDrawerListAdapter.ITEM_TYPE_PROFILE:
        listAdapter.setSelectedProfileIndex(listAdapter.getItemArrayIndex(position));
      break;
case NavigationDrawerListAdapter.ITEM_TYPE_NEW_PROFILE:
    break;
case NavigationDrawerListAdapter.ITEM_TYPE_MAIN:
  FragmentManager fragmentManager=getFragmentManager();
boolean isValid=true;
int itemArrayIndex=listAdapter.getItemArrayIndex(position);
switch (itemArrayIndex) {
case INDEX_MANAGE_ENVIRONMENTS:
fragmentManager.beginTransaction().replace(R.id.container,new ManageEnvironmentFragment()).commit();
break;
case INDEX_ENVIRONMENT_OVERLAP:
fragmentManager.beginTransaction().replace(R.id.container,new OverlappingEnvironmentsFragment()).commit();
break;
case INDEX_MASTER_PASSWORD:
fragmentManager.beginTransaction().replace(R.id.container,new SetMasterPasswordFragment()).commit();
break;
default :
isValid=false;
}
if (isValid) {
mTitle=mainItemList.get(itemArrayIndex);
listAdapter.setSelectedMainItemIndex(itemArrayIndex);
listAdapter.notifyDataSetChanged();
}
break;
case NavigationDrawerListAdapter.ITEM_TYPE_SECONDARY:
fragmentManager=getFragmentManager();
switch (listAdapter.getItemArrayIndex(position)) {
default :
Toast.makeText(SmartLockScreenSettings.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}
break;
default :
return;
}
if (mTitle != null) {
setTitle(mTitle);
}
position=-1;
}
/** 
 * Called when a drawer has settled in a completely open state. 
 */
public void onDrawerOpened(View drawerView){
super.onDrawerOpened(drawerView);
mTitle=getTitle().toString();
setTitle(getString(R.string.title_activity_smart_lock_screen_settings));
}
}
;
drawerLayout.setDrawerListener(actionBarDrawerToggle);
drawerLayout.openDrawer(Gravity.START);
}",0.989879702119534
86990,"public void remove(){
  if (layout == null) {
    layout=getLayout();
  }
  if (params == null) {
    params=getLayoutParams();
  }
  try {
    windowManager.removeView(layout);
    layout=null;
  }
 catch (  Exception e) {
  }
}","public void remove(){
  if (layout == null) {
    layout=getLayout();
  }
  try {
    windowManager.removeView(layout);
    layout=null;
    params=null;
  }
 catch (  Exception e) {
  }
}",0.8201438848920863
86991,"public void setUpButtons(){
  doneButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if ((selectedPassphrasetype != Passphrase.INDEX_PASSPHRASE_TYPE_NONE && selectedPassphrasetype != Passphrase.INDEX_PASSPHRASE_TYPE_PATTERN && passphraseEditText.getText().toString().equals(""String_Node_Str"")) || selectedPassphrasetype == Passphrase.INDEX_PASSPHRASE_TYPE_PATTERN && pattern == null) {
        AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
        builder.setTitle(R.string.alert_no_passphrase_title).setMessage(R.string.alert_no_passphrase_message);
        builder.setPositiveButton(R.string.ok,null);
        builder.create().show();
        return;
      }
 else {
        if (selectedPassphrasetype != Passphrase.INDEX_PASSPHRASE_TYPE_NONE && selectedPassphrasetype != Passphrase.INDEX_PASSPHRASE_TYPE_PATTERN && !passphraseEditText.getText().toString().equals(passphraseConfirmationEditText.getText().toString())) {
          AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
          builder.setTitle(R.string.alert_no_passphrase_match_title).setMessage(R.string.alert_no_passphrase_match_message);
          builder.setPositiveButton(R.string.ok,null);
          builder.create().show();
          return;
        }
      }
      Passphrase masterPassphrase=PassphraseFactory.getPassphraseInstance(selectedPassphrasetype,passphraseEditText.getText().toString(),passphraseEditText.getText().toString(),pattern);
      Passphrase.setMasterPassword(masterPassphrase,getActivity());
      getActivity().startService(BaseService.getServiceIntent(getActivity(),null,BaseService.ACTION_DETECT_ENVIRONMENT));
      mMasterPasswordSetListener.onMasterPasswordSet();
    }
  }
);
  cancelButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
      builder.setTitle(R.string.alert_cancel_add_environment_title).setMessage(R.string.alert_cancel_master_password_message);
      builder.setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          mMasterPasswordSetListener.onCancelSetMasterPassword();
        }
      }
);
      builder.setNegativeButton(R.string.cancel,null);
      builder.create().show();
    }
  }
);
}","public void setUpButtons(){
  doneButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (passphraseEditText.getText().toString().equals(""String_Node_Str"")) {
        AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
        builder.setTitle(R.string.alert_no_passphrase_title).setMessage(R.string.alert_no_passphrase_message);
        builder.setPositiveButton(R.string.ok,null);
        builder.create().show();
        return;
      }
 else {
        if (!passphraseEditText.getText().toString().equals(passphraseConfirmationEditText.getText().toString())) {
          AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
          builder.setTitle(R.string.alert_no_passphrase_match_title).setMessage(R.string.alert_no_passphrase_match_message);
          builder.setPositiveButton(R.string.ok,null);
          builder.create().show();
          return;
        }
      }
      Passphrase masterPassphrase=PassphraseFactory.getPassphraseInstance(selectedPassphrasetype,passphraseEditText.getText().toString(),passphraseEditText.getText().toString(),null);
      Passphrase.setMasterPassword(masterPassphrase,getActivity());
      getActivity().startService(BaseService.getServiceIntent(getActivity(),null,BaseService.ACTION_DETECT_ENVIRONMENT));
      mMasterPasswordSetListener.onMasterPasswordSet();
    }
  }
);
  cancelButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
      builder.setTitle(R.string.alert_cancel_add_environment_title).setMessage(R.string.alert_cancel_master_password_message);
      builder.setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          mMasterPasswordSetListener.onCancelSetMasterPassword();
        }
      }
);
      builder.setNegativeButton(R.string.cancel,null);
      builder.create().show();
    }
  }
);
}",0.9168141592920354
86992,"@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  passphraseEditText.setHint(""String_Node_Str"" + Passphrase.passphraseTypes[position]);
  passphraseConfirmationEditText.setHint(""String_Node_Str"" + Passphrase.passphraseTypes[position]);
  selectedPassphrasetype=position;
  if (position == Passphrase.INDEX_PASSPHRASE_TYPE_PASSWORD) {
    setPassphraseItemsEnabled(true);
    setPassphraseItemsVisible(true);
    setPatternTextViewVisible(false);
    passphraseEditText.setText(""String_Node_Str"");
    passphraseConfirmationEditText.setText(""String_Node_Str"");
    passphraseEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD);
    passphraseConfirmationEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD);
    passphraseEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
    passphraseConfirmationEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
    pattern=null;
    passphraseCard.doExpand();
  }
 else   if (position == Passphrase.INDEX_PASSPHRASE_TYPE_PIN) {
    setPassphraseItemsEnabled(true);
    setPassphraseItemsVisible(true);
    setPatternTextViewVisible(false);
    passphraseEditText.setText(""String_Node_Str"");
    passphraseConfirmationEditText.setText(""String_Node_Str"");
    passphraseEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD | InputType.TYPE_CLASS_NUMBER);
    passphraseConfirmationEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD | InputType.TYPE_CLASS_NUMBER);
    passphraseEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
    passphraseConfirmationEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
    pattern=null;
    passphraseCard.doExpand();
  }
 else   if (position == Passphrase.INDEX_PASSPHRASE_TYPE_PATTERN) {
    setPassphraseItemsEnabled(false);
    setPassphraseItemsVisible(false);
    setPatternTextViewVisible(true);
    passphraseCard.doExpand();
  }
 else   if (position == Passphrase.INDEX_PASSPHRASE_TYPE_NONE) {
    setPassphraseItemsEnabled(false);
    setPassphraseItemsVisible(false);
    setPatternTextViewVisible(false);
    pattern=null;
    passphraseCard.doCollapse();
  }
}","@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  passphraseEditText.setHint(""String_Node_Str"" + Passphrase.passphraseTypes[position]);
  passphraseConfirmationEditText.setHint(""String_Node_Str"" + Passphrase.passphraseTypes[position]);
  selectedPassphrasetype=position;
  if (position == Passphrase.INDEX_PASSPHRASE_TYPE_PASSWORD) {
    setPassphraseItemsEnabled(true);
    setPassphraseItemsVisible(true);
    passphraseEditText.setText(""String_Node_Str"");
    passphraseConfirmationEditText.setText(""String_Node_Str"");
    passphraseEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD);
    passphraseConfirmationEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD);
    passphraseEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
    passphraseConfirmationEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
    passphraseCard.doExpand();
  }
 else   if (position == Passphrase.INDEX_PASSPHRASE_TYPE_PIN) {
    setPassphraseItemsEnabled(true);
    setPassphraseItemsVisible(true);
    passphraseEditText.setText(""String_Node_Str"");
    passphraseConfirmationEditText.setText(""String_Node_Str"");
    passphraseEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD | InputType.TYPE_CLASS_NUMBER);
    passphraseConfirmationEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD | InputType.TYPE_CLASS_NUMBER);
    passphraseEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
    passphraseConfirmationEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
    passphraseCard.doExpand();
  }
}",0.8561924257932446
86993,"@Override public View getInnerView(Context context,ViewGroup parent){
  LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);
  RelativeLayout relativeLayout=new RelativeLayout(context);
  LinearLayout layout=new LinearLayout(context);
  layout.setLayoutParams(params);
  layout.setOrientation(LinearLayout.VERTICAL);
  layout.addView(passphraseEditText);
  layout.addView(passphraseConfirmationEditText);
  relativeLayout.addView(layout);
  relativeLayout.addView(passphraseEnterPatternTextView);
  parent.addView(relativeLayout);
  return layout;
}","@Override public View getInnerView(Context context,ViewGroup parent){
  LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);
  RelativeLayout relativeLayout=new RelativeLayout(context);
  LinearLayout layout=new LinearLayout(context);
  layout.setLayoutParams(params);
  layout.setOrientation(LinearLayout.VERTICAL);
  layout.addView(passphraseEditText);
  layout.addView(passphraseConfirmationEditText);
  relativeLayout.addView(layout);
  parent.addView(relativeLayout);
  return layout;
}",0.9271523178807948
86994,"public void setUpPassphraseElements(){
  passphraseEditText=new EditText(getActivity());
  passphraseEditText.setLayoutParams(marginTopLayoutParams);
  passphraseConfirmationEditText=new EditText(getActivity());
  passphraseConfirmationEditText.setLayoutParams(marginTopLayoutParams);
  LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
  passphraseEnterPatternTextView=new TextView(getActivity());
  passphraseEnterPatternTextView.setText(getString(R.string.text_view_enter_pattern));
  passphraseEnterPatternTextView.setMinHeight(listPreferredItemHeight);
  passphraseEnterPatternTextView.setGravity(Gravity.CENTER_VERTICAL);
  passphraseEnterPatternTextView.setPadding((int)getResources().getDimension(R.dimen.activity_vertical_margin),0,0,0);
  passphraseEnterPatternTextView.setTextAppearance(getActivity(),android.R.style.TextAppearance_DeviceDefault_Medium);
  passphraseEnterPatternTextView.setLayoutParams(params);
  passphraseEnterPatternTextView.setOnTouchListener(new TextViewTouchListener());
  passphraseEnterPatternTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Intent patternIntent=new Intent(getActivity(),StorePattern.class);
      startActivityForResult(patternIntent,REQUEST_CREATE_PATTERN);
    }
  }
);
  final Card passphraseCard=new Card(getActivity());
  ViewToClickToExpand viewToClickToExpand=ViewToClickToExpand.builder().enableForExpandAction();
  passphraseCard.setViewToClickToExpand(viewToClickToExpand);
  PassphraseCardHeader passphraseCardHeader=new PassphraseCardHeader(getActivity(),new PassphraseCardHeader.InnerViewElementsSetUpListener(){
    @Override public void onInnerViewElementsSetUp(    PassphraseCardHeader header){
      header.setTitle(getString(R.string.text_view_passphrase));
      passphraseTypeSpinner=header.getSpinner();
      passphraseAdapter=new ArrayAdapter<String>(getActivity(),android.R.layout.simple_spinner_dropdown_item,Passphrase.passphraseTypes);
      passphraseTypeSpinner.setAdapter(passphraseAdapter);
      passphraseTypeSpinner.setSelection(Passphrase.INDEX_PASSPHRASE_TYPE_PASSWORD);
      selectedPassphrasetype=Passphrase.INDEX_PASSPHRASE_TYPE_PASSWORD;
      passphraseTypeSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
        @Override public void onItemSelected(        AdapterView<?> parent,        View view,        int position,        long id){
          passphraseEditText.setHint(""String_Node_Str"" + Passphrase.passphraseTypes[position]);
          passphraseConfirmationEditText.setHint(""String_Node_Str"" + Passphrase.passphraseTypes[position]);
          selectedPassphrasetype=position;
          if (position == Passphrase.INDEX_PASSPHRASE_TYPE_PASSWORD) {
            setPassphraseItemsEnabled(true);
            setPassphraseItemsVisible(true);
            setPatternTextViewVisible(false);
            passphraseEditText.setText(""String_Node_Str"");
            passphraseConfirmationEditText.setText(""String_Node_Str"");
            passphraseEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD);
            passphraseConfirmationEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD);
            passphraseEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
            passphraseConfirmationEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
            pattern=null;
            passphraseCard.doExpand();
          }
 else           if (position == Passphrase.INDEX_PASSPHRASE_TYPE_PIN) {
            setPassphraseItemsEnabled(true);
            setPassphraseItemsVisible(true);
            setPatternTextViewVisible(false);
            passphraseEditText.setText(""String_Node_Str"");
            passphraseConfirmationEditText.setText(""String_Node_Str"");
            passphraseEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD | InputType.TYPE_CLASS_NUMBER);
            passphraseConfirmationEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD | InputType.TYPE_CLASS_NUMBER);
            passphraseEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
            passphraseConfirmationEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
            pattern=null;
            passphraseCard.doExpand();
          }
 else           if (position == Passphrase.INDEX_PASSPHRASE_TYPE_PATTERN) {
            setPassphraseItemsEnabled(false);
            setPassphraseItemsVisible(false);
            setPatternTextViewVisible(true);
            passphraseCard.doExpand();
          }
 else           if (position == Passphrase.INDEX_PASSPHRASE_TYPE_NONE) {
            setPassphraseItemsEnabled(false);
            setPassphraseItemsVisible(false);
            setPatternTextViewVisible(false);
            pattern=null;
            passphraseCard.doCollapse();
          }
        }
        @Override public void onNothingSelected(        AdapterView<?> parent){
          passphraseTypeSpinner.setSelection(Passphrase.INDEX_PASSPHRASE_TYPE_PASSWORD);
          selectedPassphrasetype=Passphrase.INDEX_PASSPHRASE_TYPE_PASSWORD;
          setPassphraseItemsEnabled(true);
          setPassphraseItemsVisible(true);
          passphraseEditText.setText(""String_Node_Str"");
          passphraseConfirmationEditText.setText(""String_Node_Str"");
          passphraseEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD);
          passphraseConfirmationEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD);
          passphraseEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
          passphraseConfirmationEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
          passphraseCard.doExpand();
        }
      }
);
    }
  }
);
  passphraseCard.addCardHeader(passphraseCardHeader);
  passphraseCard.addCardExpand(new CardPassphraseExpand(getActivity()));
  passphraseCardView.setCard(passphraseCard);
}","public void setUpPassphraseElements(){
  passphraseEditText=new EditText(getActivity());
  passphraseEditText.setLayoutParams(marginTopLayoutParams);
  passphraseConfirmationEditText=new EditText(getActivity());
  passphraseConfirmationEditText.setLayoutParams(marginTopLayoutParams);
  LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
  final Card passphraseCard=new Card(getActivity());
  ViewToClickToExpand viewToClickToExpand=ViewToClickToExpand.builder().enableForExpandAction();
  passphraseCard.setViewToClickToExpand(viewToClickToExpand);
  PassphraseCardHeader passphraseCardHeader=new PassphraseCardHeader(getActivity(),new PassphraseCardHeader.InnerViewElementsSetUpListener(){
    @Override public void onInnerViewElementsSetUp(    PassphraseCardHeader header){
      header.setTitle(getString(R.string.text_view_passphrase));
      passphraseTypeSpinner=header.getSpinner();
      passphraseAdapter=new ArrayAdapter<String>(getActivity(),android.R.layout.simple_spinner_dropdown_item,Passphrase.masterPassphraseTypes);
      passphraseTypeSpinner.setAdapter(passphraseAdapter);
      passphraseTypeSpinner.setSelection(Passphrase.INDEX_PASSPHRASE_TYPE_PASSWORD);
      selectedPassphrasetype=Passphrase.INDEX_PASSPHRASE_TYPE_PASSWORD;
      passphraseTypeSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
        @Override public void onItemSelected(        AdapterView<?> parent,        View view,        int position,        long id){
          passphraseEditText.setHint(""String_Node_Str"" + Passphrase.passphraseTypes[position]);
          passphraseConfirmationEditText.setHint(""String_Node_Str"" + Passphrase.passphraseTypes[position]);
          selectedPassphrasetype=position;
          if (position == Passphrase.INDEX_PASSPHRASE_TYPE_PASSWORD) {
            setPassphraseItemsEnabled(true);
            setPassphraseItemsVisible(true);
            passphraseEditText.setText(""String_Node_Str"");
            passphraseConfirmationEditText.setText(""String_Node_Str"");
            passphraseEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD);
            passphraseConfirmationEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD);
            passphraseEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
            passphraseConfirmationEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
            passphraseCard.doExpand();
          }
 else           if (position == Passphrase.INDEX_PASSPHRASE_TYPE_PIN) {
            setPassphraseItemsEnabled(true);
            setPassphraseItemsVisible(true);
            passphraseEditText.setText(""String_Node_Str"");
            passphraseConfirmationEditText.setText(""String_Node_Str"");
            passphraseEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD | InputType.TYPE_CLASS_NUMBER);
            passphraseConfirmationEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD | InputType.TYPE_CLASS_NUMBER);
            passphraseEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
            passphraseConfirmationEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
            passphraseCard.doExpand();
          }
        }
        @Override public void onNothingSelected(        AdapterView<?> parent){
          passphraseTypeSpinner.setSelection(Passphrase.INDEX_PASSPHRASE_TYPE_PASSWORD);
          selectedPassphrasetype=Passphrase.INDEX_PASSPHRASE_TYPE_PASSWORD;
          setPassphraseItemsEnabled(true);
          setPassphraseItemsVisible(true);
          passphraseEditText.setText(""String_Node_Str"");
          passphraseConfirmationEditText.setText(""String_Node_Str"");
          passphraseEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD);
          passphraseConfirmationEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD);
          passphraseEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
          passphraseConfirmationEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
          passphraseCard.doExpand();
        }
      }
);
    }
  }
);
  passphraseCard.addCardHeader(passphraseCardHeader);
  passphraseCard.addCardExpand(new CardPassphraseExpand(getActivity()));
  passphraseCardView.setCard(passphraseCard);
}",0.7811550151975684
86995,"@Override public void onInnerViewElementsSetUp(PassphraseCardHeader header){
  header.setTitle(getString(R.string.text_view_passphrase));
  passphraseTypeSpinner=header.getSpinner();
  passphraseAdapter=new ArrayAdapter<String>(getActivity(),android.R.layout.simple_spinner_dropdown_item,Passphrase.passphraseTypes);
  passphraseTypeSpinner.setAdapter(passphraseAdapter);
  passphraseTypeSpinner.setSelection(Passphrase.INDEX_PASSPHRASE_TYPE_PASSWORD);
  selectedPassphrasetype=Passphrase.INDEX_PASSPHRASE_TYPE_PASSWORD;
  passphraseTypeSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      passphraseEditText.setHint(""String_Node_Str"" + Passphrase.passphraseTypes[position]);
      passphraseConfirmationEditText.setHint(""String_Node_Str"" + Passphrase.passphraseTypes[position]);
      selectedPassphrasetype=position;
      if (position == Passphrase.INDEX_PASSPHRASE_TYPE_PASSWORD) {
        setPassphraseItemsEnabled(true);
        setPassphraseItemsVisible(true);
        setPatternTextViewVisible(false);
        passphraseEditText.setText(""String_Node_Str"");
        passphraseConfirmationEditText.setText(""String_Node_Str"");
        passphraseEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD);
        passphraseConfirmationEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD);
        passphraseEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
        passphraseConfirmationEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
        pattern=null;
        passphraseCard.doExpand();
      }
 else       if (position == Passphrase.INDEX_PASSPHRASE_TYPE_PIN) {
        setPassphraseItemsEnabled(true);
        setPassphraseItemsVisible(true);
        setPatternTextViewVisible(false);
        passphraseEditText.setText(""String_Node_Str"");
        passphraseConfirmationEditText.setText(""String_Node_Str"");
        passphraseEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD | InputType.TYPE_CLASS_NUMBER);
        passphraseConfirmationEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD | InputType.TYPE_CLASS_NUMBER);
        passphraseEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
        passphraseConfirmationEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
        pattern=null;
        passphraseCard.doExpand();
      }
 else       if (position == Passphrase.INDEX_PASSPHRASE_TYPE_PATTERN) {
        setPassphraseItemsEnabled(false);
        setPassphraseItemsVisible(false);
        setPatternTextViewVisible(true);
        passphraseCard.doExpand();
      }
 else       if (position == Passphrase.INDEX_PASSPHRASE_TYPE_NONE) {
        setPassphraseItemsEnabled(false);
        setPassphraseItemsVisible(false);
        setPatternTextViewVisible(false);
        pattern=null;
        passphraseCard.doCollapse();
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
      passphraseTypeSpinner.setSelection(Passphrase.INDEX_PASSPHRASE_TYPE_PASSWORD);
      selectedPassphrasetype=Passphrase.INDEX_PASSPHRASE_TYPE_PASSWORD;
      setPassphraseItemsEnabled(true);
      setPassphraseItemsVisible(true);
      passphraseEditText.setText(""String_Node_Str"");
      passphraseConfirmationEditText.setText(""String_Node_Str"");
      passphraseEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD);
      passphraseConfirmationEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD);
      passphraseEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
      passphraseConfirmationEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
      passphraseCard.doExpand();
    }
  }
);
}","@Override public void onInnerViewElementsSetUp(PassphraseCardHeader header){
  header.setTitle(getString(R.string.text_view_passphrase));
  passphraseTypeSpinner=header.getSpinner();
  passphraseAdapter=new ArrayAdapter<String>(getActivity(),android.R.layout.simple_spinner_dropdown_item,Passphrase.masterPassphraseTypes);
  passphraseTypeSpinner.setAdapter(passphraseAdapter);
  passphraseTypeSpinner.setSelection(Passphrase.INDEX_PASSPHRASE_TYPE_PASSWORD);
  selectedPassphrasetype=Passphrase.INDEX_PASSPHRASE_TYPE_PASSWORD;
  passphraseTypeSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      passphraseEditText.setHint(""String_Node_Str"" + Passphrase.passphraseTypes[position]);
      passphraseConfirmationEditText.setHint(""String_Node_Str"" + Passphrase.passphraseTypes[position]);
      selectedPassphrasetype=position;
      if (position == Passphrase.INDEX_PASSPHRASE_TYPE_PASSWORD) {
        setPassphraseItemsEnabled(true);
        setPassphraseItemsVisible(true);
        passphraseEditText.setText(""String_Node_Str"");
        passphraseConfirmationEditText.setText(""String_Node_Str"");
        passphraseEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD);
        passphraseConfirmationEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD);
        passphraseEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
        passphraseConfirmationEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
        passphraseCard.doExpand();
      }
 else       if (position == Passphrase.INDEX_PASSPHRASE_TYPE_PIN) {
        setPassphraseItemsEnabled(true);
        setPassphraseItemsVisible(true);
        passphraseEditText.setText(""String_Node_Str"");
        passphraseConfirmationEditText.setText(""String_Node_Str"");
        passphraseEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD | InputType.TYPE_CLASS_NUMBER);
        passphraseConfirmationEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD | InputType.TYPE_CLASS_NUMBER);
        passphraseEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
        passphraseConfirmationEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
        passphraseCard.doExpand();
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
      passphraseTypeSpinner.setSelection(Passphrase.INDEX_PASSPHRASE_TYPE_PASSWORD);
      selectedPassphrasetype=Passphrase.INDEX_PASSPHRASE_TYPE_PASSWORD;
      setPassphraseItemsEnabled(true);
      setPassphraseItemsVisible(true);
      passphraseEditText.setText(""String_Node_Str"");
      passphraseConfirmationEditText.setText(""String_Node_Str"");
      passphraseEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD);
      passphraseConfirmationEditText.setInputType(InputType.TYPE_TEXT_VARIATION_PASSWORD);
      passphraseEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
      passphraseConfirmationEditText.setTransformationMethod(PasswordTransformationMethod.getInstance());
      passphraseCard.doExpand();
    }
  }
);
}",0.9106692803136376
86996,"public static boolean initialize(Context activityContext){
  boolean isMasterPasswordSet=false;
  if (!(activityContext instanceof Activity)) {
    Log.e(LOG_TAG,""String_Node_Str"");
    return false;
  }
  AdminActions.initAdmin(activityContext);
  if (SharedPreferencesHelper.getMasterPasswordType(activityContext) == null) {
    activityContext.startActivity(new Intent(activityContext,SetMasterPassword.class));
  }
 else {
    isMasterPasswordSet=true;
  }
  if (!isMasterPasswordSet) {
    isMasterPasswordSet=SharedPreferencesHelper.getMasterPasswordType(activityContext) != null;
  }
  return isMasterPasswordSet && AdminActions.isAdminEnabled();
}","public static void initialize(Context activityContext,int requestCode){
  if (!(activityContext instanceof Activity)) {
    Log.e(LOG_TAG,""String_Node_Str"");
    return;
  }
  AdminActions.initAdmin(activityContext);
  if (SharedPreferencesHelper.getMasterPasswordType(activityContext) == null) {
    ((Activity)activityContext).startActivityForResult(new Intent(activityContext,SetMasterPassword.class),requestCode);
  }
}",0.6586270871985158
86997,"private void initBluetoothDispItems(){
  mSelectedBluetoothItems=new ArrayList<Integer>();
  mSelectedBluetoothDevices=new ArrayList<BluetoothDevice>();
  setBluetoothItemsEnabled(true);
  enableBluetoothCheckBox.setChecked(true);
  bluetoothAllCheckbox.setChecked(false);
  if (environment.isBluetoothAllOrAny()) {
    bluetoothAllCheckbox.setChecked(true);
  }
  bluetoothDevices=BluetoothEnvironmentVariable.getPairedBluetoothDevices(getActivity());
  Vector<BluetoothEnvironmentVariable> bluetoothVariables=environment.getBluetoothEnvironmentVariables();
  for (int i=0; i < bluetoothDevices.size(); i++) {
    for (int j=0; j < bluetoothVariables.size(); j++) {
      if (bluetoothVariables.get(j).getDeviceAddress().equals(bluetoothDevices.get(i).getAddress())) {
        mSelectedBluetoothDevices.add(bluetoothDevices.get(i));
        mSelectedBluetoothItems.add(i);
      }
    }
  }
}","private void initBluetoothDispItems(){
  mSelectedBluetoothItems=new ArrayList<Integer>();
  mSelectedBluetoothDevices=new ArrayList<BluetoothDevice>();
  setBluetoothItemsEnabled(true);
  enableBluetoothCheckBox.setChecked(true);
  bluetoothAllCheckbox.setChecked(false);
  if (environment.isBluetoothAllOrAny()) {
    bluetoothAllCheckbox.setChecked(true);
  }
  bluetoothDevices=BluetoothEnvironmentVariable.getPairedBluetoothDevices(getActivity());
  Vector<BluetoothEnvironmentVariable> bluetoothVariables=environment.getBluetoothEnvironmentVariables();
  for (int i=0; i < bluetoothDevices.size(); i++) {
    for (int j=0; j < bluetoothVariables.size(); j++) {
      if (bluetoothVariables.get(j).getDeviceAddress().equals(bluetoothDevices.get(i).getAddress())) {
        Log.d(LOG_TAG,""String_Node_Str"" + bluetoothDevices.get(i).getName() + ""String_Node_Str"");
        mSelectedBluetoothDevices.add(bluetoothDevices.get(i));
        mSelectedBluetoothItems.add(i);
      }
    }
  }
}",0.8800424628450106
86998,"private void setUpBluetoothElements(){
  enableBluetoothCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      if (isChecked) {
        ArrayList<BluetoothDevice> bluetoothDevices=new BluetoothEnvironmentVariable().getPairedBluetoothDevices(getActivity());
        ArrayList<String> deviceNamesArrayList=new ArrayList<String>();
        if (bluetoothDevices != null) {
          for (          BluetoothDevice bluetoothDevice : bluetoothDevices) {
            deviceNamesArrayList.add(bluetoothDevice.getName());
          }
          EditEnvironment.bluetoothDevices=bluetoothDevices;
          setBluetoothItemsEnabled(true);
        }
 else {
          BluetoothAdapter mBluetoothAdapter=BluetoothAdapter.getDefaultAdapter();
          if (mBluetoothAdapter == null) {
            enableBluetoothCheckBox.setChecked(false);
            EditEnvironment.bluetoothDevices=new ArrayList<BluetoothDevice>();
            setBluetoothItemsEnabled(false);
          }
        }
      }
 else {
        EditEnvironment.bluetoothDevices=new ArrayList<BluetoothDevice>();
        setBluetoothItemsEnabled(false);
      }
    }
  }
);
  selectBluetoothDevicesTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (bluetoothDevices == null) {
        bluetoothDevices=new ArrayList<BluetoothDevice>();
      }
      String[] bluetoothDevicesName=new String[bluetoothDevices.size()];
      for (int i=0; i < bluetoothDevices.size(); i++) {
        bluetoothDevicesName[i]=bluetoothDevices.get(i).getName();
      }
      AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
      builder.setTitle(R.string.dialog_pick_bluetooth_devices);
      boolean[] checkedItems=new boolean[bluetoothDevices.size()];
      if (mSelectedBluetoothDevices == null || mSelectedBluetoothItems == null) {
        mSelectedBluetoothDevices=new ArrayList<BluetoothDevice>();
        mSelectedBluetoothItems=new ArrayList<Integer>();
      }
      for (      Integer mSelectedItem : mSelectedBluetoothItems) {
        checkedItems[mSelectedItem]=true;
      }
      builder.setMultiChoiceItems(bluetoothDevicesName,checkedItems,new DialogInterface.OnMultiChoiceClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which,        boolean isChecked){
          if (isChecked) {
            mSelectedBluetoothItems.add(which);
          }
 else {
            mSelectedBluetoothItems.remove(Integer.valueOf(which));
          }
        }
      }
);
      builder.setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          for (          Integer mSelectedItem : mSelectedBluetoothItems) {
            mSelectedBluetoothDevices.add(bluetoothDevices.get(mSelectedItem));
          }
        }
      }
);
      AlertDialog alert=builder.create();
      alert.show();
    }
  }
);
}","private void setUpBluetoothElements(){
  enableBluetoothCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      if (isChecked) {
        ArrayList<BluetoothDevice> bluetoothDevices=new BluetoothEnvironmentVariable().getPairedBluetoothDevices(getActivity());
        ArrayList<String> deviceNamesArrayList=new ArrayList<String>();
        if (bluetoothDevices != null) {
          for (          BluetoothDevice bluetoothDevice : bluetoothDevices) {
            deviceNamesArrayList.add(bluetoothDevice.getName());
          }
          EditEnvironment.bluetoothDevices=bluetoothDevices;
          setBluetoothItemsEnabled(true);
        }
 else {
          BluetoothAdapter mBluetoothAdapter=BluetoothAdapter.getDefaultAdapter();
          if (mBluetoothAdapter == null) {
            enableBluetoothCheckBox.setChecked(false);
            EditEnvironment.bluetoothDevices=new ArrayList<BluetoothDevice>();
            setBluetoothItemsEnabled(false);
          }
        }
      }
 else {
        EditEnvironment.bluetoothDevices=new ArrayList<BluetoothDevice>();
        setBluetoothItemsEnabled(false);
      }
    }
  }
);
  selectBluetoothDevicesTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (bluetoothDevices == null) {
        bluetoothDevices=new ArrayList<BluetoothDevice>();
      }
      String[] bluetoothDevicesName=new String[bluetoothDevices.size()];
      for (int i=0; i < bluetoothDevices.size(); i++) {
        bluetoothDevicesName[i]=bluetoothDevices.get(i).getName();
      }
      AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
      builder.setTitle(R.string.dialog_pick_bluetooth_devices);
      boolean[] checkedItems=new boolean[bluetoothDevices.size()];
      if (mSelectedBluetoothDevices == null || mSelectedBluetoothItems == null) {
        mSelectedBluetoothDevices=new ArrayList<BluetoothDevice>();
        mSelectedBluetoothItems=new ArrayList<Integer>();
      }
      for (      Integer mSelectedItem : mSelectedBluetoothItems) {
        checkedItems[mSelectedItem]=true;
      }
      builder.setMultiChoiceItems(bluetoothDevicesName,checkedItems,new DialogInterface.OnMultiChoiceClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which,        boolean isChecked){
          if (isChecked) {
            mSelectedBluetoothItems.add(which);
          }
 else {
            mSelectedBluetoothItems.remove(Integer.valueOf(which));
          }
        }
      }
);
      builder.setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          mSelectedBluetoothDevices.clear();
          for (          Integer mSelectedItem : mSelectedBluetoothItems) {
            mSelectedBluetoothDevices.add(bluetoothDevices.get(mSelectedItem));
          }
        }
      }
);
      AlertDialog alert=builder.create();
      alert.show();
    }
  }
);
}",0.992787305657958
86999,"/** 
 * Update the environment entry in database. Old name of the environment should be passed if name has changed. If oldName is null, current name of the environment is taken and used for finding the records to update
 * @param context activity/service context
 * @param oldName The name of the environment to be modified
 * @return success code
 */
public boolean updateInDatabase(Context context,String oldName){
  if (oldName == null || oldName.isEmpty()) {
    oldName=getName();
  }
  Environment oldEnvironment=getFullEnvironment(context,oldName);
  if (oldEnvironment == null)   return false;
  ContentValues environmentValues=new ContentValues();
  environmentValues.put(EnvironmentEntry.COLUMN_NAME,getName());
  environmentValues.put(EnvironmentEntry.COLUMN_BLUETOOTH_ALL_OR_ANY,isBluetoothAllOrAny() ? 1 : 0);
  environmentValues.put(EnvironmentEntry.COLUMN_IS_ENABLED,isEnabled() ? 1 : 0);
  environmentValues.put(EnvironmentEntry.COLUMN_ENVIRONMENT_HINT,getHint());
  if (hasNoiseLevel && getNoiseLevelEnvironmentVariable() != null) {
    environmentValues.put(EnvironmentEntry.COLUMN_IS_MAX_NOISE_ENABLED,getNoiseLevelEnvironmentVariable().hasUpperLimit);
    environmentValues.put(EnvironmentEntry.COLUMN_IS_MIN_NOISE_ENABLED,getNoiseLevelEnvironmentVariable().hasLowerLimit);
    environmentValues.put(EnvironmentEntry.COLUMN_MAX_NOISE_LEVEL,getNoiseLevelEnvironmentVariable().getUpperLimit());
    environmentValues.put(EnvironmentEntry.COLUMN_MIN_NOISE_LEVEL,getNoiseLevelEnvironmentVariable().getLowerLimit());
  }
 else {
    environmentValues.put(EnvironmentEntry.COLUMN_IS_MAX_NOISE_ENABLED,false);
    environmentValues.put(EnvironmentEntry.COLUMN_IS_MIN_NOISE_ENABLED,false);
  }
  context.getContentResolver().update(EnvironmentEntry.buildEnvironmentUriWithId(oldEnvironment.id),environmentValues,null,null);
  if (oldEnvironment.hasLocation) {
    if (hasLocation && !oldEnvironment.locationEnvironmentVariable.equals(locationEnvironmentVariable)) {
      int updatedEntries=context.getContentResolver().update(EnvironmentEntry.buildEnvironmentUriWithIdAndLocation(oldEnvironment.id),locationEnvironmentVariable.getContentValues(),null,null);
      if (updatedEntries > 1) {
        removeFromCurrentGeofences(oldEnvironment.getLocationEnvironmentVariable(),context);
      }
    }
 else     if (!hasLocation) {
      int deletedEntries=context.getContentResolver().delete(EnvironmentEntry.buildEnvironmentUriWithIdAndLocation(oldEnvironment.id),null,null);
      if (deletedEntries > 1) {
        removeFromCurrentGeofences(oldEnvironment.getLocationEnvironmentVariable(),context);
      }
    }
  }
 else   if (hasLocation) {
    context.getContentResolver().insert(EnvironmentEntry.buildEnvironmentUriWithIdAndLocation(oldEnvironment.id),locationEnvironmentVariable.getContentValues());
  }
  if (oldEnvironment.hasWiFiNetwork) {
    if (hasWiFiNetwork && !oldEnvironment.wiFiEnvironmentVariable.equals(wiFiEnvironmentVariable)) {
      context.getContentResolver().update(EnvironmentEntry.buildEnvironmentUriWithIdAndWifi(oldEnvironment.id),wiFiEnvironmentVariable.getContentValues(),null,null);
    }
 else     if (!hasWiFiNetwork) {
      context.getContentResolver().delete(EnvironmentEntry.buildEnvironmentUriWithIdAndWifi(oldEnvironment.id),null,null);
    }
  }
 else   if (hasWiFiNetwork) {
    context.getContentResolver().insert(EnvironmentEntry.buildEnvironmentUriWithIdAndWifi(oldEnvironment.id),wiFiEnvironmentVariable.getContentValues());
  }
  context.getContentResolver().delete(EnvironmentEntry.buildEnvironmentUriWithIdAndBluetooth(oldEnvironment.id),null,null);
  if (hasBluetoothDevices && getBluetoothEnvironmentVariables() != null && !getBluetoothEnvironmentVariables().isEmpty()) {
    Vector<BluetoothEnvironmentVariable> bluetoothEnvironmentVariables=getBluetoothEnvironmentVariables();
    Uri insertUri=EnvironmentEntry.buildEnvironmentUriWithIdAndBluetooth(oldEnvironment.id);
    for (    BluetoothEnvironmentVariable variable : bluetoothEnvironmentVariables) {
      ContentValues bluetoothValues=variable.getContentValues();
      context.getContentResolver().insert(insertUri,bluetoothValues);
    }
  }
  return true;
}","/** 
 * Update the environment entry in database. Old name of the environment should be passed if name has changed. If oldName is null, current name of the environment is taken and used for finding the records to update
 * @param context activity/service context
 * @param oldName The name of the environment to be modified
 * @return success code
 */
public boolean updateInDatabase(Context context,String oldName){
  if (oldName == null || oldName.isEmpty()) {
    oldName=getName();
  }
  Environment oldEnvironment=getFullEnvironment(context,oldName);
  if (oldEnvironment == null)   return false;
  ContentValues environmentValues=new ContentValues();
  environmentValues.put(EnvironmentEntry.COLUMN_NAME,getName());
  environmentValues.put(EnvironmentEntry.COLUMN_BLUETOOTH_ALL_OR_ANY,isBluetoothAllOrAny() ? 1 : 0);
  environmentValues.put(EnvironmentEntry.COLUMN_IS_ENABLED,isEnabled() ? 1 : 0);
  environmentValues.put(EnvironmentEntry.COLUMN_ENVIRONMENT_HINT,getHint());
  if (hasNoiseLevel && getNoiseLevelEnvironmentVariable() != null) {
    environmentValues.put(EnvironmentEntry.COLUMN_IS_MAX_NOISE_ENABLED,getNoiseLevelEnvironmentVariable().hasUpperLimit);
    environmentValues.put(EnvironmentEntry.COLUMN_IS_MIN_NOISE_ENABLED,getNoiseLevelEnvironmentVariable().hasLowerLimit);
    environmentValues.put(EnvironmentEntry.COLUMN_MAX_NOISE_LEVEL,getNoiseLevelEnvironmentVariable().getUpperLimit());
    environmentValues.put(EnvironmentEntry.COLUMN_MIN_NOISE_LEVEL,getNoiseLevelEnvironmentVariable().getLowerLimit());
  }
 else {
    environmentValues.put(EnvironmentEntry.COLUMN_IS_MAX_NOISE_ENABLED,false);
    environmentValues.put(EnvironmentEntry.COLUMN_IS_MIN_NOISE_ENABLED,false);
  }
  context.getContentResolver().update(EnvironmentEntry.buildEnvironmentUriWithId(oldEnvironment.id),environmentValues,null,null);
  if (oldEnvironment.hasLocation) {
    if (hasLocation && !oldEnvironment.locationEnvironmentVariable.equals(locationEnvironmentVariable)) {
      int updatedEntries=context.getContentResolver().update(EnvironmentEntry.buildEnvironmentUriWithIdAndLocation(oldEnvironment.id),locationEnvironmentVariable.getContentValues(),null,null);
      if (updatedEntries > 1) {
        removeFromCurrentGeofences(oldEnvironment.getLocationEnvironmentVariable(),context);
      }
    }
 else     if (!hasLocation) {
      int deletedEntries=context.getContentResolver().delete(EnvironmentEntry.buildEnvironmentUriWithIdAndLocation(oldEnvironment.id),null,null);
      if (deletedEntries > 1) {
        removeFromCurrentGeofences(oldEnvironment.getLocationEnvironmentVariable(),context);
      }
    }
  }
 else   if (hasLocation) {
    context.getContentResolver().insert(EnvironmentEntry.buildEnvironmentUriWithIdAndLocation(oldEnvironment.id),locationEnvironmentVariable.getContentValues());
  }
  if (oldEnvironment.hasWiFiNetwork) {
    if (hasWiFiNetwork && !oldEnvironment.wiFiEnvironmentVariable.equals(wiFiEnvironmentVariable)) {
      context.getContentResolver().update(EnvironmentEntry.buildEnvironmentUriWithIdAndWifi(oldEnvironment.id),wiFiEnvironmentVariable.getContentValues(),null,null);
    }
 else     if (!hasWiFiNetwork) {
      context.getContentResolver().delete(EnvironmentEntry.buildEnvironmentUriWithIdAndWifi(oldEnvironment.id),null,null);
    }
  }
 else   if (hasWiFiNetwork) {
    context.getContentResolver().insert(EnvironmentEntry.buildEnvironmentUriWithIdAndWifi(oldEnvironment.id),wiFiEnvironmentVariable.getContentValues());
  }
  context.getContentResolver().delete(EnvironmentEntry.buildEnvironmentUriWithIdAndBluetooth(oldEnvironment.id),null,null);
  if (hasBluetoothDevices && getBluetoothEnvironmentVariables() != null && !getBluetoothEnvironmentVariables().isEmpty()) {
    Vector<BluetoothEnvironmentVariable> bluetoothEnvironmentVariables=getBluetoothEnvironmentVariables();
    Uri insertUri=EnvironmentEntry.buildEnvironmentUriWithIdAndBluetooth(oldEnvironment.id);
    for (    BluetoothEnvironmentVariable variable : bluetoothEnvironmentVariables) {
      Log.d(LOG_TAG,""String_Node_Str"" + variable.getDeviceName());
      ContentValues bluetoothValues=variable.getContentValues();
      context.getContentResolver().insert(insertUri,bluetoothValues);
    }
  }
  return true;
}",0.992055021937626
87000,"public static Passphrase getMasterPassword(Context context){
  Passphrase masterPassphrase=getNewInstanceOfType(SharedPreferencesHelper.getMasterPasswordType(context));
  masterPassphrase.encryptedPasswordString=SharedPreferencesHelper.getMasterPasswordString(context);
  if (masterPassphrase.passphraseType.equals(TYPE_NONE)) {
    masterPassphrase.encryptedPasswordString=""String_Node_Str"";
  }
  masterPassphrase.decryptPassword();
  masterPassphrase.setPasswordRepresentation(masterPassphrase.getPassphraseRepresentationFromPassphraseString(masterPassphrase.passwordString));
  return masterPassphrase;
}","public static Passphrase getMasterPassword(Context context){
  String masterPasswordType=SharedPreferencesHelper.getMasterPasswordType(context), masterPasswordString=SharedPreferencesHelper.getMasterPasswordString(context);
  if (masterPasswordType == null || masterPasswordString == null) {
    masterPasswordType=TYPE_NONE;
    masterPasswordString=""String_Node_Str"";
  }
  Passphrase masterPassphrase=getNewInstanceOfType(masterPasswordType);
  masterPassphrase.encryptedPasswordString=masterPasswordString;
  if (masterPassphrase.passphraseType.equals(TYPE_NONE)) {
    masterPassphrase.encryptedPasswordString=""String_Node_Str"";
  }
  masterPassphrase.decryptPassword();
  masterPassphrase.setPasswordRepresentation(masterPassphrase.getPassphraseRepresentationFromPassphraseString(masterPassphrase.passwordString));
  return masterPassphrase;
}",0.4722031571722718
